
F0RadioTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003840  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a78  08003a78  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a78  08003a78  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a78  08003a78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08003af8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003af8  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002278b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b31  00000000  00000000  00042823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00046358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  000470b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001457c  00000000  00000000  00047cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001001b  00000000  00000000  0005c26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073c79  00000000  00000000  0006c287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dff00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c0  00000000  00000000  000dff54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038e8 	.word	0x080038e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080038e8 	.word	0x080038e8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b089      	sub	sp, #36	; 0x24
 8000234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000236:	240c      	movs	r4, #12
 8000238:	193b      	adds	r3, r7, r4
 800023a:	0018      	movs	r0, r3
 800023c:	2314      	movs	r3, #20
 800023e:	001a      	movs	r2, r3
 8000240:	2100      	movs	r1, #0
 8000242:	f003 fa33 	bl	80036ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b3d      	ldr	r3, [pc, #244]	; (800033c <MX_GPIO_Init+0x10c>)
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	4b3c      	ldr	r3, [pc, #240]	; (800033c <MX_GPIO_Init+0x10c>)
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	0289      	lsls	r1, r1, #10
 8000250:	430a      	orrs	r2, r1
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	4b39      	ldr	r3, [pc, #228]	; (800033c <MX_GPIO_Init+0x10c>)
 8000256:	695a      	ldr	r2, [r3, #20]
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	029b      	lsls	r3, r3, #10
 800025c:	4013      	ands	r3, r2
 800025e:	60bb      	str	r3, [r7, #8]
 8000260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <MX_GPIO_Init+0x10c>)
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	4b35      	ldr	r3, [pc, #212]	; (800033c <MX_GPIO_Init+0x10c>)
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	02c9      	lsls	r1, r1, #11
 800026c:	430a      	orrs	r2, r1
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <MX_GPIO_Init+0x10c>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	02db      	lsls	r3, r3, #11
 8000278:	4013      	ands	r3, r2
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 800027e:	2390      	movs	r3, #144	; 0x90
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	2201      	movs	r2, #1
 8000284:	2104      	movs	r1, #4
 8000286:	0018      	movs	r0, r3
 8000288:	f001 fe0c 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 800028c:	4b2c      	ldr	r3, [pc, #176]	; (8000340 <MX_GPIO_Init+0x110>)
 800028e:	2201      	movs	r2, #1
 8000290:	2104      	movs	r1, #4
 8000292:	0018      	movs	r0, r3
 8000294:	f001 fe06 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEND_GPIO_Port, SEND_Pin, GPIO_PIN_RESET);
 8000298:	4b29      	ldr	r3, [pc, #164]	; (8000340 <MX_GPIO_Init+0x110>)
 800029a:	2200      	movs	r2, #0
 800029c:	2108      	movs	r1, #8
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 fe00 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_Pin;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2204      	movs	r2, #4
 80002a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2201      	movs	r2, #1
 80002ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2203      	movs	r2, #3
 80002ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 80002bc:	193a      	adds	r2, r7, r4
 80002be:	2390      	movs	r3, #144	; 0x90
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 fc7d 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RECEIVE_Pin;
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2202      	movs	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RECEIVE_GPIO_Port, &GPIO_InitStruct);
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	4a18      	ldr	r2, [pc, #96]	; (8000340 <MX_GPIO_Init+0x110>)
 80002e0:	0019      	movs	r1, r3
 80002e2:	0010      	movs	r0, r2
 80002e4:	f001 fc6e 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2204      	movs	r2, #4
 80002ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2201      	movs	r2, #1
 80002f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2203      	movs	r2, #3
 80002fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000300:	193b      	adds	r3, r7, r4
 8000302:	4a0f      	ldr	r2, [pc, #60]	; (8000340 <MX_GPIO_Init+0x110>)
 8000304:	0019      	movs	r1, r3
 8000306:	0010      	movs	r0, r2
 8000308:	f001 fc5c 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEND_Pin;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2208      	movs	r2, #8
 8000312:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SEND_GPIO_Port, &GPIO_InitStruct);
 8000326:	187b      	adds	r3, r7, r1
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <MX_GPIO_Init+0x110>)
 800032a:	0019      	movs	r1, r3
 800032c:	0010      	movs	r0, r2
 800032e:	f001 fc49 	bl	8001bc4 <HAL_GPIO_Init>

}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b009      	add	sp, #36	; 0x24
 8000338:	bd90      	pop	{r4, r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021000 	.word	0x40021000
 8000340:	48000400 	.word	0x48000400

08000344 <stopCounter>:
{
	HAL_TIM_Base_Start_IT(&htim16);
}

void stopCounter()
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim16);
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <stopCounter+0x14>)
 800034a:	0018      	movs	r0, r3
 800034c:	f002 fafa 	bl	8002944 <HAL_TIM_Base_Stop_IT>
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	20000160 	.word	0x20000160

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000362:	f001 fb2d 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000366:	f000 f823 	bl	80003b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036a:	f7ff ff61 	bl	8000230 <MX_GPIO_Init>
  MX_TIM15_Init();
 800036e:	f001 fa39 	bl	80017e4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000372:	f001 fa8f 	bl	8001894 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Insert a test message
  char * message = "a";
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <main+0x48>)
 8000378:	607b      	str	r3, [r7, #4]
  radioSend(message,1);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2101      	movs	r1, #1
 800037e:	0018      	movs	r0, r3
 8000380:	f000 fe72 	bl	8001068 <radioSend>

  // Enable the timer interrupt for the transmitter
  HAL_TIM_Base_Start_IT(&htim15);
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <main+0x4c>)
 8000386:	0018      	movs	r0, r3
 8000388:	f002 fa90 	bl	80028ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <main+0x50>)
 800038e:	0018      	movs	r0, r3
 8000390:	f002 fa8c 	bl	80028ac <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	radioEcho();
 8000394:	f000 feb8 	bl	8001108 <radioEcho>
	HAL_Delay(1000);
 8000398:	23fa      	movs	r3, #250	; 0xfa
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	0018      	movs	r0, r3
 800039e:	f001 fb3f 	bl	8001a20 <HAL_Delay>
	radioEcho();
 80003a2:	e7f7      	b.n	8000394 <main+0x38>
 80003a4:	08003900 	.word	0x08003900
 80003a8:	20000118 	.word	0x20000118
 80003ac:	20000160 	.word	0x20000160

080003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b091      	sub	sp, #68	; 0x44
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	2410      	movs	r4, #16
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	0018      	movs	r0, r3
 80003bc:	2330      	movs	r3, #48	; 0x30
 80003be:	001a      	movs	r2, r3
 80003c0:	2100      	movs	r1, #0
 80003c2:	f003 f973 	bl	80036ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c6:	003b      	movs	r3, r7
 80003c8:	0018      	movs	r0, r3
 80003ca:	2310      	movs	r3, #16
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f003 f96c 	bl	80036ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d4:	0021      	movs	r1, r4
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2202      	movs	r2, #2
 80003da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2201      	movs	r2, #1
 80003e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2210      	movs	r2, #16
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2200      	movs	r2, #0
 80003ec:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	0018      	movs	r0, r3
 80003f2:	f001 fd75 	bl	8001ee0 <HAL_RCC_OscConfig>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003fa:	f000 f82b 	bl	8000454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	003b      	movs	r3, r7
 8000400:	2207      	movs	r2, #7
 8000402:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000404:	003b      	movs	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	003b      	movs	r3, r7
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000416:	003b      	movs	r3, r7
 8000418:	2100      	movs	r1, #0
 800041a:	0018      	movs	r0, r3
 800041c:	f002 f87a 	bl	8002514 <HAL_RCC_ClockConfig>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000424:	f000 f816 	bl	8000454 <Error_Handler>
  }
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b011      	add	sp, #68	; 0x44
 800042e:	bd90      	pop	{r4, r7, pc}

08000430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d101      	bne.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000442:	f001 fad1 	bl	80019e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40000400 	.word	0x40000400

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <_ZN7messageC1Ev>:

	return b;
}

// Class constructor
message::message()
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	0018      	movs	r0, r3
 800046c:	f002 ffd9 	bl	8003422 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	messageString = "";
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a06      	ldr	r2, [pc, #24]	; (800048c <_ZN7messageC1Ev+0x2c>)
 8000474:	0011      	movs	r1, r2
 8000476:	0018      	movs	r0, r3
 8000478:	f003 f882 	bl	8003580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	bitPointer = 0;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2200      	movs	r2, #0
 8000480:	831a      	strh	r2, [r3, #24]
}
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	b002      	add	sp, #8
 800048a:	bd80      	pop	{r7, pc}
 800048c:	08003904 	.word	0x08003904

08000490 <_ZN7messageC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// Class constructor
message::message(string msg)
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	0018      	movs	r0, r3
 800049e:	f002 ffc0 	bl	8003422 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	messageString = msg;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	683a      	ldr	r2, [r7, #0]
 80004a6:	0011      	movs	r1, r2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f002 ffc7 	bl	800343c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	bitPointer = 0;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2200      	movs	r2, #0
 80004b2:	831a      	strh	r2, [r3, #24]
}
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}

080004be <_ZN7message16getMessageStringB5cxx11Ev>:

string message::getMessageString()
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	6039      	str	r1, [r7, #0]
	return messageString;
 80004c8:	683a      	ldr	r2, [r7, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f003 f876 	bl	80035c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}

080004dc <_ZN7message13getIsCompleteEv>:

bool message::getIsComplete()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	return isComplete;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	7e9b      	ldrb	r3, [r3, #26]
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <_ZN7message13setIsCompleteEb>:

void message::setIsComplete(bool i)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	000a      	movs	r2, r1
 80004fa:	1cfb      	adds	r3, r7, #3
 80004fc:	701a      	strb	r2, [r3, #0]
	isComplete = i;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	1cfa      	adds	r2, r7, #3
 8000502:	7812      	ldrb	r2, [r2, #0]
 8000504:	769a      	strb	r2, [r3, #26]
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}

0800050e <_ZN7message10getNextBitEv>:

// Return the currently selected bit in the message,
// then move the pointer to the next one
uint8_t message::getNextBit()
{
 800050e:	b590      	push	{r4, r7, lr}
 8000510:	b085      	sub	sp, #20
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
	if((bitPointer / 8) > messageString.length())
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	8b1b      	ldrh	r3, [r3, #24]
 800051a:	08db      	lsrs	r3, r3, #3
 800051c:	b29b      	uxth	r3, r3
 800051e:	001c      	movs	r4, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	0018      	movs	r0, r3
 8000524:	f002 ff92 	bl	800344c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000528:	0003      	movs	r3, r0
 800052a:	42a3      	cmp	r3, r4
 800052c:	419b      	sbcs	r3, r3
 800052e:	425b      	negs	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <_ZN7message10getNextBitEv+0x2c>
	{
		return NO_NEW_BITS;
 8000536:	2302      	movs	r3, #2
 8000538:	e029      	b.n	800058e <_ZN7message10getNextBitEv+0x80>
	}

	char ch = messageString[bitPointer/8];
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	8b1b      	ldrh	r3, [r3, #24]
 8000540:	08db      	lsrs	r3, r3, #3
 8000542:	b29b      	uxth	r3, r3
 8000544:	0019      	movs	r1, r3
 8000546:	0010      	movs	r0, r2
 8000548:	f002 ff82 	bl	8003450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800054c:	0002      	movs	r2, r0
 800054e:	200f      	movs	r0, #15
 8000550:	183b      	adds	r3, r7, r0
 8000552:	7812      	ldrb	r2, [r2, #0]
 8000554:	701a      	strb	r2, [r3, #0]

	// When we need the 19th bit, we actually need the 3rd bit from ch
	// So 19 % 8 gives us 3
	uint8_t bitInChar = bitPointer % 8;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	8b1b      	ldrh	r3, [r3, #24]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	240e      	movs	r4, #14
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2107      	movs	r1, #7
 8000562:	400a      	ands	r2, r1
 8000564:	701a      	strb	r2, [r3, #0]
	// Mirror our byte, otherwise it will be sent from MSB to LSB
	//uint8_t mirrored = mirrorByte(ch);

	// Get 0 or 1 with a bitwise operation,
	// using our mirrored byte and the bit we want (eg. 3)
	uint8_t bit = (ch >> bitInChar) & 1;
 8000566:	183b      	adds	r3, r7, r0
 8000568:	781a      	ldrb	r2, [r3, #0]
 800056a:	193b      	adds	r3, r7, r4
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	411a      	asrs	r2, r3
 8000570:	0013      	movs	r3, r2
 8000572:	b2da      	uxtb	r2, r3
 8000574:	200d      	movs	r0, #13
 8000576:	183b      	adds	r3, r7, r0
 8000578:	2101      	movs	r1, #1
 800057a:	400a      	ands	r2, r1
 800057c:	701a      	strb	r2, [r3, #0]

	// Move to the next bit
	bitPointer++;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	8b1b      	ldrh	r3, [r3, #24]
 8000582:	3301      	adds	r3, #1
 8000584:	b29a      	uxth	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	831a      	strh	r2, [r3, #24]

	return bit;
 800058a:	183b      	adds	r3, r7, r0
 800058c:	781b      	ldrb	r3, [r3, #0]
}
 800058e:	0018      	movs	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	b005      	add	sp, #20
 8000594:	bd90      	pop	{r4, r7, pc}

08000596 <_ZN7message10setNextBitEh>:

// FIXME: Something goes wrong here
// Write a bit to a messageString
void message::setNextBit(uint8_t bit)
{
 8000596:	b590      	push	{r4, r7, lr}
 8000598:	b085      	sub	sp, #20
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	000a      	movs	r2, r1
 80005a0:	1cfb      	adds	r3, r7, #3
 80005a2:	701a      	strb	r2, [r3, #0]
	char c = messageString[bitPointer/8];
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	8b1b      	ldrh	r3, [r3, #24]
 80005aa:	08db      	lsrs	r3, r3, #3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	0019      	movs	r1, r3
 80005b0:	0010      	movs	r0, r2
 80005b2:	f002 ff4d 	bl	8003450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80005b6:	0002      	movs	r2, r0
 80005b8:	200f      	movs	r0, #15
 80005ba:	183b      	adds	r3, r7, r0
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	701a      	strb	r2, [r3, #0]
	c ^= (-bit ^ c) & (1UL << (bitPointer%8));
 80005c0:	1cfb      	adds	r3, r7, #3
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	425b      	negs	r3, r3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	b25a      	sxtb	r2, r3
 80005ca:	183b      	adds	r3, r7, r0
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	4053      	eors	r3, r2
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	8b12      	ldrh	r2, [r2, #24]
 80005da:	0011      	movs	r1, r2
 80005dc:	2207      	movs	r2, #7
 80005de:	400a      	ands	r2, r1
 80005e0:	2101      	movs	r1, #1
 80005e2:	4091      	lsls	r1, r2
 80005e4:	000a      	movs	r2, r1
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	4013      	ands	r3, r2
 80005ea:	b2d9      	uxtb	r1, r3
 80005ec:	183b      	adds	r3, r7, r0
 80005ee:	0004      	movs	r4, r0
 80005f0:	183a      	adds	r2, r7, r0
 80005f2:	7812      	ldrb	r2, [r2, #0]
 80005f4:	404a      	eors	r2, r1
 80005f6:	701a      	strb	r2, [r3, #0]
	messageString[bitPointer/8] = c;
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	8b1b      	ldrh	r3, [r3, #24]
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	b29b      	uxth	r3, r3
 8000602:	0019      	movs	r1, r3
 8000604:	0010      	movs	r0, r2
 8000606:	f002 ff23 	bl	8003450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800060a:	0002      	movs	r2, r0
 800060c:	193b      	adds	r3, r7, r4
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	7013      	strb	r3, [r2, #0]
	bitPointer++;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	8b1b      	ldrh	r3, [r3, #24]
 8000616:	3301      	adds	r3, #1
 8000618:	b29a      	uxth	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	831a      	strh	r2, [r3, #24]
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b005      	add	sp, #20
 8000624:	bd90      	pop	{r4, r7, pc}

08000626 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	6039      	str	r1, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	0018      	movs	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}

0800063a <_ZN7messageC1ERKS_>:
extern "C"
{
#include "main.h"
}

class message
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f002 ffb8 	bl	80035c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	8b1a      	ldrh	r2, [r3, #24]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	831a      	strh	r2, [r3, #24]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	7e9a      	ldrb	r2, [r3, #26]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	769a      	strb	r2, [r3, #26]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	0018      	movs	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}

0800066a <_ZN7messageD1Ev>:
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	0018      	movs	r0, r3
 8000676:	f002 fedb 	bl	8003430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}

08000684 <_ZN5radio18getNextOutboundBitEv>:
// Class to control the radio, and more importantly the buffer of messages to be sent

#include "radio.h"

uint8_t radio::getNextOutboundBit()
{
 8000684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000686:	b093      	sub	sp, #76	; 0x4c
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	uint8_t retVal;

	auto iterator = outboundMessages.begin();
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	0018      	movs	r0, r3
 8000690:	f000 f9f2 	bl	8000a78 <_ZNSt7__cxx114listI7messageSaIS1_EE5beginEv>
 8000694:	0003      	movs	r3, r0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
	advance(iterator, outboundMessagePointer);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7b1a      	ldrb	r2, [r3, #12]
 800069c:	2424      	movs	r4, #36	; 0x24
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f9f9 	bl	8000a9a <_ZSt7advanceISt14_List_iteratorI7messageEhEvRT_T0_>

	message m = *iterator;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fa0d 	bl	8000aca <_ZNKSt14_List_iteratorI7messageEdeEv>
 80006b0:	0002      	movs	r2, r0
 80006b2:	2508      	movs	r5, #8
 80006b4:	197b      	adds	r3, r7, r5
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff ffbe 	bl	800063a <_ZN7messageC1ERKS_>
	retVal = m.getNextBit();
 80006be:	2647      	movs	r6, #71	; 0x47
 80006c0:	19bc      	adds	r4, r7, r6
 80006c2:	197b      	adds	r3, r7, r5
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff ff22 	bl	800050e <_ZN7message10getNextBitEv>
 80006ca:	0003      	movs	r3, r0
 80006cc:	7023      	strb	r3, [r4, #0]
	setOutboundMessage(m);
 80006ce:	197a      	adds	r2, r7, r5
 80006d0:	2428      	movs	r4, #40	; 0x28
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff ffaf 	bl	800063a <_ZN7messageC1ERKS_>
 80006dc:	193a      	adds	r2, r7, r4
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 f80f 	bl	8000706 <_ZN5radio18setOutboundMessageE7message>
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ffbd 	bl	800066a <_ZN7messageD1Ev>

	return retVal;
 80006f0:	19bb      	adds	r3, r7, r6
 80006f2:	781c      	ldrb	r4, [r3, #0]
	message m = *iterator;
 80006f4:	197b      	adds	r3, r7, r5
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ffb7 	bl	800066a <_ZN7messageD1Ev>
	return retVal;
 80006fc:	0023      	movs	r3, r4
}
 80006fe:	0018      	movs	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	b013      	add	sp, #76	; 0x4c
 8000704:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000706 <_ZN5radio18setOutboundMessageE7message>:
}

// Replace the currently active message.
// This is for keeping the bitPointer variable updated.
void radio::setOutboundMessage(message m)
{
 8000706:	b5b0      	push	{r4, r5, r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	6039      	str	r1, [r7, #0]
	auto iterator = outboundMessages.begin();
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	0018      	movs	r0, r3
 8000714:	f000 f9b0 	bl	8000a78 <_ZNSt7__cxx114listI7messageSaIS1_EE5beginEv>
 8000718:	0003      	movs	r3, r0
 800071a:	60bb      	str	r3, [r7, #8]
	advance(iterator, outboundMessagePointer);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7b1a      	ldrb	r2, [r3, #12]
 8000720:	2508      	movs	r5, #8
 8000722:	197b      	adds	r3, r7, r5
 8000724:	0011      	movs	r1, r2
 8000726:	0018      	movs	r0, r3
 8000728:	f000 f9b7 	bl	8000a9a <_ZSt7advanceISt14_List_iteratorI7messageEhEvRT_T0_>
	outboundMessages.insert(iterator,m);
 800072c:	687c      	ldr	r4, [r7, #4]
 800072e:	197a      	adds	r2, r7, r5
 8000730:	230c      	movs	r3, #12
 8000732:	18fb      	adds	r3, r7, r3
 8000734:	0011      	movs	r1, r2
 8000736:	0018      	movs	r0, r3
 8000738:	f000 f9d5 	bl	8000ae6 <_ZNSt20_List_const_iteratorI7messageEC1ERKSt14_List_iteratorIS0_E>
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	0019      	movs	r1, r3
 8000742:	0020      	movs	r0, r4
 8000744:	f000 f9dd 	bl	8000b02 <_ZNSt7__cxx114listI7messageSaIS1_EE6insertESt20_List_const_iteratorIS1_ERKS1_>
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b004      	add	sp, #16
 800074e:	bdb0      	pop	{r4, r5, r7, pc}

08000750 <_ZN5radio19nextOutboundMessageEv>:

// Move on to the next message.
// This is called when the previous message is fully sent.
uint8_t radio::nextOutboundMessage()
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	if(outboundMessages.size() > (outboundMessagePointer + 1))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0018      	movs	r0, r3
 800075c:	f000 f9fb 	bl	8000b56 <_ZNKSt7__cxx114listI7messageSaIS1_EE4sizeEv>
 8000760:	0002      	movs	r2, r0
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7b1b      	ldrb	r3, [r3, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	4293      	cmp	r3, r2
 800076a:	419b      	sbcs	r3, r3
 800076c:	425b      	negs	r3, r3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d004      	beq.n	800077e <_ZN5radio19nextOutboundMessageEv+0x2e>
	{
		outboundMessagePointer = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	731a      	strb	r2, [r3, #12]
		return NO_NEW_MESSAGE;
 800077a:	2303      	movs	r3, #3
 800077c:	e006      	b.n	800078c <_ZN5radio19nextOutboundMessageEv+0x3c>
	}
	else
	{
		outboundMessagePointer++;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7b1b      	ldrb	r3, [r3, #12]
 8000782:	3301      	adds	r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	731a      	strb	r2, [r3, #12]
		return 0;
 800078a:	2300      	movs	r3, #0
	}
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	b002      	add	sp, #8
 8000792:	bd80      	pop	{r7, pc}

08000794 <_ZN5radio4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// The send function adds a message to the queue.
// The interrupt handler will notice and start sending this message bit by bit.
void radio::send(string msg)
{
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b090      	sub	sp, #64	; 0x40
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	message m(msg);
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	2428      	movs	r4, #40	; 0x28
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 ff0a 	bl	80035c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80007ac:	193a      	adds	r2, r7, r4
 80007ae:	250c      	movs	r5, #12
 80007b0:	197b      	adds	r3, r7, r5
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fe6b 	bl	8000490 <_ZN7messageC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fe37 	bl	8003430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	outboundMessages.push_back(m);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	197a      	adds	r2, r7, r5
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 f9d1 	bl	8000b70 <_ZNSt7__cxx114listI7messageSaIS1_EE9push_backERKS1_>
	message m(msg);
 80007ce:	197b      	adds	r3, r7, r5
 80007d0:	0018      	movs	r0, r3
 80007d2:	f7ff ff4a 	bl	800066a <_ZN7messageD1Ev>
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b010      	add	sp, #64	; 0x40
 80007dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080007e0 <_ZN5radio8sendTickEv>:

// Function to be called by the interrupt handler.
// Standard version with start and stop bits, using a state machine.
void radio::sendTick()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

	// State machine variable to keep track of message progress across interrupts
	static uint8_t state = START_HIGH;

	// When done waiting, move on to the next instruction
	if(holdFor <= 1)
 80007e8:	4b55      	ldr	r3, [pc, #340]	; (8000940 <_ZN5radio8sendTickEv+0x160>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d900      	bls.n	80007f2 <_ZN5radio8sendTickEv+0x12>
 80007f0:	e098      	b.n	8000924 <_ZN5radio8sendTickEv+0x144>
	{
		switch(state)
 80007f2:	4b54      	ldr	r3, [pc, #336]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d900      	bls.n	80007fc <_ZN5radio8sendTickEv+0x1c>
 80007fa:	e09d      	b.n	8000938 <_ZN5radio8sendTickEv+0x158>
 80007fc:	009a      	lsls	r2, r3, #2
 80007fe:	4b52      	ldr	r3, [pc, #328]	; (8000948 <_ZN5radio8sendTickEv+0x168>)
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	469f      	mov	pc, r3
		{
			case START_HIGH:
				SEND_HIGH;
 8000806:	4b51      	ldr	r3, [pc, #324]	; (800094c <_ZN5radio8sendTickEv+0x16c>)
 8000808:	2208      	movs	r2, #8
 800080a:	619a      	str	r2, [r3, #24]
				RED_HIGH;
 800080c:	2390      	movs	r3, #144	; 0x90
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	2204      	movs	r2, #4
 8000812:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 8000814:	4b4a      	ldr	r3, [pc, #296]	; (8000940 <_ZN5radio8sendTickEv+0x160>)
 8000816:	2205      	movs	r2, #5
 8000818:	701a      	strb	r2, [r3, #0]
				state = START_LOW;
 800081a:	4b4a      	ldr	r3, [pc, #296]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
				break;
 8000820:	e08a      	b.n	8000938 <_ZN5radio8sendTickEv+0x158>
			case START_LOW:
				SEND_LOW;
 8000822:	4b4a      	ldr	r3, [pc, #296]	; (800094c <_ZN5radio8sendTickEv+0x16c>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0312      	lsls	r2, r2, #12
 8000828:	619a      	str	r2, [r3, #24]
				RED_LOW;
 800082a:	2390      	movs	r3, #144	; 0x90
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	02d2      	lsls	r2, r2, #11
 8000832:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 8000834:	4b42      	ldr	r3, [pc, #264]	; (8000940 <_ZN5radio8sendTickEv+0x160>)
 8000836:	2205      	movs	r2, #5
 8000838:	701a      	strb	r2, [r3, #0]
				state = MSG_HIGH;
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 800083c:	2202      	movs	r2, #2
 800083e:	701a      	strb	r2, [r3, #0]
				break;
 8000840:	e07a      	b.n	8000938 <_ZN5radio8sendTickEv+0x158>
			case MSG_HIGH:
				switch(getNextOutboundBit())
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff ff1d 	bl	8000684 <_ZN5radio18getNextOutboundBitEv>
 800084a:	0003      	movs	r3, r0
 800084c:	2b02      	cmp	r3, #2
 800084e:	d021      	beq.n	8000894 <_ZN5radio8sendTickEv+0xb4>
 8000850:	dc6f      	bgt.n	8000932 <_ZN5radio8sendTickEv+0x152>
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <_ZN5radio8sendTickEv+0x7c>
 8000856:	2b01      	cmp	r3, #1
 8000858:	d00e      	beq.n	8000878 <_ZN5radio8sendTickEv+0x98>
						SEND_LOW;
						RED_LOW;
						state = STOP_HIGH;
						break;
				}
				break;
 800085a:	e06a      	b.n	8000932 <_ZN5radio8sendTickEv+0x152>
						SEND_HIGH;
 800085c:	4b3b      	ldr	r3, [pc, #236]	; (800094c <_ZN5radio8sendTickEv+0x16c>)
 800085e:	2208      	movs	r2, #8
 8000860:	619a      	str	r2, [r3, #24]
						RED_HIGH;
 8000862:	2390      	movs	r3, #144	; 0x90
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
						holdFor = LENGTH_ZERO;
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <_ZN5radio8sendTickEv+0x160>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
						state = MSG_LOW;
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 8000872:	2203      	movs	r2, #3
 8000874:	701a      	strb	r2, [r3, #0]
						break;
 8000876:	e01a      	b.n	80008ae <_ZN5radio8sendTickEv+0xce>
						SEND_HIGH;
 8000878:	4b34      	ldr	r3, [pc, #208]	; (800094c <_ZN5radio8sendTickEv+0x16c>)
 800087a:	2208      	movs	r2, #8
 800087c:	619a      	str	r2, [r3, #24]
						RED_HIGH;
 800087e:	2390      	movs	r3, #144	; 0x90
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2204      	movs	r2, #4
 8000884:	619a      	str	r2, [r3, #24]
						holdFor = LENGTH_ONE;
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <_ZN5radio8sendTickEv+0x160>)
 8000888:	2203      	movs	r2, #3
 800088a:	701a      	strb	r2, [r3, #0]
						state = MSG_LOW;
 800088c:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 800088e:	2203      	movs	r2, #3
 8000890:	701a      	strb	r2, [r3, #0]
						break;
 8000892:	e00c      	b.n	80008ae <_ZN5radio8sendTickEv+0xce>
						SEND_LOW;
 8000894:	4b2d      	ldr	r3, [pc, #180]	; (800094c <_ZN5radio8sendTickEv+0x16c>)
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	0312      	lsls	r2, r2, #12
 800089a:	619a      	str	r2, [r3, #24]
						RED_LOW;
 800089c:	2390      	movs	r3, #144	; 0x90
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	02d2      	lsls	r2, r2, #11
 80008a4:	619a      	str	r2, [r3, #24]
						state = STOP_HIGH;
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 80008a8:	2205      	movs	r2, #5
 80008aa:	701a      	strb	r2, [r3, #0]
						break;
 80008ac:	46c0      	nop			; (mov r8, r8)
				break;
 80008ae:	e040      	b.n	8000932 <_ZN5radio8sendTickEv+0x152>
			case MSG_LOW:
				SEND_LOW;
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <_ZN5radio8sendTickEv+0x16c>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	0312      	lsls	r2, r2, #12
 80008b6:	619a      	str	r2, [r3, #24]
				RED_LOW;
 80008b8:	2390      	movs	r3, #144	; 0x90
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	02d2      	lsls	r2, r2, #11
 80008c0:	619a      	str	r2, [r3, #24]
				state = MSG_HIGH;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	701a      	strb	r2, [r3, #0]
				break;
 80008c8:	e036      	b.n	8000938 <_ZN5radio8sendTickEv+0x158>
			case STOP_HIGH:
				SEND_HIGH;
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <_ZN5radio8sendTickEv+0x16c>)
 80008cc:	2208      	movs	r2, #8
 80008ce:	619a      	str	r2, [r3, #24]
				RED_HIGH;
 80008d0:	2390      	movs	r3, #144	; 0x90
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	2204      	movs	r2, #4
 80008d6:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <_ZN5radio8sendTickEv+0x160>)
 80008da:	2205      	movs	r2, #5
 80008dc:	701a      	strb	r2, [r3, #0]
				state = STOP_LOW;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	701a      	strb	r2, [r3, #0]
				break;
 80008e4:	e028      	b.n	8000938 <_ZN5radio8sendTickEv+0x158>
			case STOP_LOW:
				SEND_LOW;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <_ZN5radio8sendTickEv+0x16c>)
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	0312      	lsls	r2, r2, #12
 80008ec:	619a      	str	r2, [r3, #24]
				RED_LOW;
 80008ee:	2390      	movs	r3, #144	; 0x90
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	02d2      	lsls	r2, r2, #11
 80008f6:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_ZN5radio8sendTickEv+0x160>)
 80008fa:	2205      	movs	r2, #5
 80008fc:	701a      	strb	r2, [r3, #0]
				state = IDLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 8000900:	2206      	movs	r2, #6
 8000902:	701a      	strb	r2, [r3, #0]
				break;
 8000904:	e018      	b.n	8000938 <_ZN5radio8sendTickEv+0x158>
			case IDLE:
				if(nextOutboundMessage() != NO_NEW_MESSAGE)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff ff21 	bl	8000750 <_ZN5radio19nextOutboundMessageEv>
 800090e:	0003      	movs	r3, r0
 8000910:	3b03      	subs	r3, #3
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	4193      	sbcs	r3, r2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00c      	beq.n	8000936 <_ZN5radio8sendTickEv+0x156>
				{
					state = START_HIGH;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <_ZN5radio8sendTickEv+0x164>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000922:	e008      	b.n	8000936 <_ZN5radio8sendTickEv+0x156>
		}
	}
	else
	{
		holdFor--;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <_ZN5radio8sendTickEv+0x160>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	3b01      	subs	r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <_ZN5radio8sendTickEv+0x160>)
 800092e:	701a      	strb	r2, [r3, #0]
	}
}
 8000930:	e002      	b.n	8000938 <_ZN5radio8sendTickEv+0x158>
				break;
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	e000      	b.n	8000938 <_ZN5radio8sendTickEv+0x158>
				break;
 8000936:	46c0      	nop			; (mov r8, r8)
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000
 8000944:	2000008c 	.word	0x2000008c
 8000948:	08003954 	.word	0x08003954
 800094c:	48000400 	.word	0x48000400

08000950 <_ZN5radio17getInboundMessageEv>:
}

// Receiver functions

message radio::getInboundMessage()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	return inboundMessage;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	3310      	adds	r3, #16
 800095e:	001a      	movs	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	0011      	movs	r1, r2
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff fe68 	bl	800063a <_ZN7messageC1ERKS_>
}
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <_ZN5radio11receiveTickEv>:

void radio::receiveTick()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	static bool started = false;
	static bool isCounting = false;
	static uint16_t counter = 0;
	bool on = RECEIVE;
 800097c:	4b3a      	ldr	r3, [pc, #232]	; (8000a68 <_ZN5radio11receiveTickEv+0xf4>)
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	2202      	movs	r2, #2
 8000982:	401a      	ands	r2, r3
 8000984:	200f      	movs	r0, #15
 8000986:	183b      	adds	r3, r7, r0
 8000988:	1e51      	subs	r1, r2, #1
 800098a:	418a      	sbcs	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]

	if(on)
 800098e:	183b      	adds	r3, r7, r0
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d011      	beq.n	80009ba <_ZN5radio11receiveTickEv+0x46>
	{
		if(isCounting)
 8000996:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <_ZN5radio11receiveTickEv+0xf8>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d006      	beq.n	80009ac <_ZN5radio11receiveTickEv+0x38>
		{
			counter++;
 800099e:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 80009a8:	801a      	strh	r2, [r3, #0]
				// Add one to buffer
				inboundMessage.setNextBit(1);
			}
		}
	}
}
 80009aa:	e059      	b.n	8000a60 <_ZN5radio11receiveTickEv+0xec>
			counter = 0;
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	801a      	strh	r2, [r3, #0]
			isCounting = true;
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <_ZN5radio11receiveTickEv+0xf8>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
}
 80009b8:	e052      	b.n	8000a60 <_ZN5radio11receiveTickEv+0xec>
		if(isCounting)
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <_ZN5radio11receiveTickEv+0xf8>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d04e      	beq.n	8000a60 <_ZN5radio11receiveTickEv+0xec>
			if((START_MIN < counter) && (counter < START_MAX))
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 80009c4:	881a      	ldrh	r2, [r3, #0]
 80009c6:	23c8      	movs	r3, #200	; 0xc8
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d91c      	bls.n	8000a08 <_ZN5radio11receiveTickEv+0x94>
 80009ce:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	2396      	movs	r3, #150	; 0x96
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d216      	bcs.n	8000a08 <_ZN5radio11receiveTickEv+0x94>
				isCounting = false;
 80009da:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <_ZN5radio11receiveTickEv+0xf8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
				counter = 0;
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	801a      	strh	r2, [r3, #0]
				if(started)
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <_ZN5radio11receiveTickEv+0x100>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d008      	beq.n	8000a00 <_ZN5radio11receiveTickEv+0x8c>
					inboundMessage.setIsComplete(true);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3310      	adds	r3, #16
 80009f2:	2101      	movs	r1, #1
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff fd7b 	bl	80004f0 <_ZN7message13setIsCompleteEb>
					stopCounter();
 80009fa:	f7ff fca3 	bl	8000344 <stopCounter>
				if(started)
 80009fe:	e02f      	b.n	8000a60 <_ZN5radio11receiveTickEv+0xec>
					started = true;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <_ZN5radio11receiveTickEv+0x100>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
				if(started)
 8000a06:	e02b      	b.n	8000a60 <_ZN5radio11receiveTickEv+0xec>
			else if((ZERO_MIN < counter) && (counter < ZERO_MAX))
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2b32      	cmp	r3, #50	; 0x32
 8000a0e:	d910      	bls.n	8000a32 <_ZN5radio11receiveTickEv+0xbe>
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	2b63      	cmp	r3, #99	; 0x63
 8000a16:	d80c      	bhi.n	8000a32 <_ZN5radio11receiveTickEv+0xbe>
				isCounting = false;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <_ZN5radio11receiveTickEv+0xf8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	801a      	strh	r2, [r3, #0]
				inboundMessage.setNextBit(0);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3310      	adds	r3, #16
 8000a28:	2100      	movs	r1, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fdb3 	bl	8000596 <_ZN7message10setNextBitEh>
 8000a30:	e016      	b.n	8000a60 <_ZN5radio11receiveTickEv+0xec>
			else if((ONE_MIN < counter) && (counter < ONE_MAX))
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	2bfa      	cmp	r3, #250	; 0xfa
 8000a38:	d912      	bls.n	8000a60 <_ZN5radio11receiveTickEv+0xec>
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 8000a3c:	881a      	ldrh	r2, [r3, #0]
 8000a3e:	2396      	movs	r3, #150	; 0x96
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d20c      	bcs.n	8000a60 <_ZN5radio11receiveTickEv+0xec>
				isCounting = false;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <_ZN5radio11receiveTickEv+0xf8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <_ZN5radio11receiveTickEv+0xfc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	801a      	strh	r2, [r3, #0]
				inboundMessage.setNextBit(1);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3310      	adds	r3, #16
 8000a56:	2101      	movs	r1, #1
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fd9c 	bl	8000596 <_ZN7message10setNextBitEh>
}
 8000a5e:	e7ff      	b.n	8000a60 <_ZN5radio11receiveTickEv+0xec>
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b004      	add	sp, #16
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	2000008e 	.word	0x2000008e
 8000a70:	20000090 	.word	0x20000090
 8000a74:	2000008d 	.word	0x2000008d

08000a78 <_ZNSt7__cxx114listI7messageSaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	230c      	movs	r3, #12
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	0011      	movs	r1, r2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 f883 	bl	8000b96 <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	0018      	movs	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b004      	add	sp, #16
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_ZSt7advanceISt14_List_iteratorI7messageEhEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8000a9a:	b590      	push	{r4, r7, lr}
 8000a9c:	b085      	sub	sp, #20
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	1cfb      	adds	r3, r7, #3
 8000aa6:	701a      	strb	r2, [r3, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8000aa8:	1cfb      	adds	r3, r7, #3
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 f87d 	bl	8000bb0 <_ZSt19__iterator_categoryISt14_List_iteratorI7messageEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8000ab6:	68f9      	ldr	r1, [r7, #12]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	1c22      	adds	r2, r4, #0
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 f87f 	bl	8000bc0 <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag>
    }
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b005      	add	sp, #20
 8000ac8:	bd90      	pop	{r4, r7, pc}

08000aca <_ZNKSt14_List_iteratorI7messageEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f89a 	bl	8000c10 <_ZNSt10_List_nodeI7messageE9_M_valptrEv>
 8000adc:	0003      	movs	r3, r0
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_ZNSt20_List_const_iteratorI7messageEC1ERKSt14_List_iteratorIS0_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_ZNSt7__cxx114listI7messageSaIS1_EE6insertESt20_List_const_iteratorIS1_ERKS1_>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8000b02:	b590      	push	{r4, r7, lr}
 8000b04:	b087      	sub	sp, #28
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
    insert(const_iterator __position, const value_type& __x)
#else
    insert(iterator __position, const value_type& __x)
#endif
    {
      _Node* __tmp = _M_create_node(__x);
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 f889 	bl	8000c2c <_ZNSt7__cxx114listI7messageSaIS1_EE14_M_create_nodeIJRKS1_EEEPSt10_List_nodeIS1_EDpOT_>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	617b      	str	r3, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8000b1e:	697c      	ldr	r4, [r7, #20]
 8000b20:	2308      	movs	r3, #8
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 f8b7 	bl	8000c98 <_ZNKSt20_List_const_iteratorI7messageE13_M_const_castEv>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	0020      	movs	r0, r4
 8000b30:	f002 fac6 	bl	80030c0 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2101      	movs	r1, #1
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 f8be 	bl	8000cba <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	2310      	movs	r3, #16
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f825 	bl	8000b96 <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>
 8000b4c:	693b      	ldr	r3, [r7, #16]
    }
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b007      	add	sp, #28
 8000b54:	bd90      	pop	{r4, r7, pc}

08000b56 <_ZNKSt7__cxx114listI7messageSaIS1_EE4sizeEv>:
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }

      /**  Returns the number of elements in the %list.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 f8b9 	bl	8000cd8 <_ZNKSt7__cxx114listI7messageSaIS1_EE13_M_node_countEv>
 8000b66:	0003      	movs	r3, r0
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_ZNSt7__cxx114listI7messageSaIS1_EE9push_backERKS1_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 f8b8 	bl	8000cf2 <_ZNSt7__cxx114listI7messageSaIS1_EE3endEv>
 8000b82:	0001      	movs	r1, r0
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 f8c2 	bl	8000d12 <_ZNSt7__cxx114listI7messageSaIS1_EE9_M_insertIJRKS1_EEEvSt14_List_iteratorIS1_EDpOT_>
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_ZSt19__iterator_categoryISt14_List_iteratorI7messageEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000bb8:	1c18      	adds	r0, r3, #0
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag>:
    __advance(_BidirectionalIterator& __i, _Distance __n,
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	701a      	strb	r2, [r3, #0]
      if (__n > 0)
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dd0c      	ble.n	8000bee <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
        while (__n--)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1e5a      	subs	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	4193      	sbcs	r3, r2
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d011      	beq.n	8000c08 <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x48>
	  ++__i;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 f8b4 	bl	8000d54 <_ZNSt14_List_iteratorI7messageEppEv>
        while (__n--)
 8000bec:	e7f2      	b.n	8000bd4 <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x14>
        while (__n++)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	60ba      	str	r2, [r7, #8]
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	4193      	sbcs	r3, r2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d004      	beq.n	8000c08 <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x48>
	  --__i;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 f8b5 	bl	8000d70 <_ZNSt14_List_iteratorI7messageEmmEv>
        while (__n++)
 8000c06:	e7f2      	b.n	8000bee <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
    }
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b004      	add	sp, #16
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <_ZNSt10_List_nodeI7messageE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f000 f8b5 	bl	8000d8c <_ZN9__gnu_cxx16__aligned_membufI7messageE6_M_ptrEv>
 8000c22:	0003      	movs	r3, r0
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZNSt7__cxx114listI7messageSaIS1_EE14_M_create_nodeIJRKS1_EEEPSt10_List_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 f8b4 	bl	8000da6 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_get_nodeEv>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	617b      	str	r3, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 f8bc 	bl	8000dc2 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE21_M_get_Node_allocatorEv>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	613b      	str	r3, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	6939      	ldr	r1, [r7, #16]
 8000c52:	2508      	movs	r5, #8
 8000c54:	197b      	adds	r3, r7, r5
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 f8bc 	bl	8000dd4 <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEEC1ERS3_PS2_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff ffd6 	bl	8000c10 <_ZNSt10_List_nodeI7messageE9_M_valptrEv>
 8000c64:	0004      	movs	r4, r0
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 f8dd 	bl	8000e28 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	0021      	movs	r1, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 f8e0 	bl	8000e3a <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE9constructIS1_JRKS1_EEEvRS3_PT_DpOT0_>
	  __guard = nullptr;
 8000c7a:	197b      	adds	r3, r7, r5
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f8ef 	bl	8000e62 <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEEaSEDn>
	  return __p;
 8000c84:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8000c86:	197b      	adds	r3, r7, r5
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 f8b8 	bl	8000dfe <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEED1Ev>
	  return __p;
 8000c8e:	0023      	movs	r3, r4
	}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b006      	add	sp, #24
 8000c96:	bdb0      	pop	{r4, r5, r7, pc}

08000c98 <_ZNKSt20_List_const_iteratorI7messageE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	0011      	movs	r1, r2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff ff73 	bl	8000b96 <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b004      	add	sp, #16
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	18d2      	adds	r2, r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZNKSt7__cxx114listI7messageSaIS1_EE13_M_node_countEv>:
      _M_node_count() const
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 f8ca 	bl	8000e7c <_ZNKSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_get_sizeEv>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_ZNSt7__cxx114listI7messageSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff ff47 	bl	8000b96 <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_ZNSt7__cxx114listI7messageSaIS1_EE9_M_insertIJRKS1_EEEvSt14_List_iteratorIS1_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 f881 	bl	8000e28 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d26:	0002      	movs	r2, r0
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ff7d 	bl	8000c2c <_ZNSt7__cxx114listI7messageSaIS1_EE14_M_create_nodeIJRKS1_EEEPSt10_List_nodeIS1_EDpOT_>
 8000d32:	0003      	movs	r3, r0
 8000d34:	617b      	str	r3, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f002 f9bf 	bl	80030c0 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2101      	movs	r1, #1
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ffb7 	bl	8000cba <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_inc_sizeEj>
       }
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b006      	add	sp, #24
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZNSt14_List_iteratorI7messageEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
	return *this;
 8000d66:	687b      	ldr	r3, [r7, #4]
      }
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_ZNSt14_List_iteratorI7messageEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_prev;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
	return *this;
 8000d82:	687b      	ldr	r3, [r7, #4]
      }
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_ZN9__gnu_cxx16__aligned_membufI7messageE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f87a 	bl	8000e90 <_ZN9__gnu_cxx16__aligned_membufI7messageE7_M_addrEv>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2101      	movs	r1, #1
 8000db2:	0018      	movs	r0, r3
 8000db4:	f000 f875 	bl	8000ea2 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE8allocateERS3_j>
 8000db8:	0003      	movs	r3, r0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b002      	add	sp, #8
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEEC1ERS3_PS2_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 f86d 	bl	8000ec2 <_ZSt11__addressofISaISt10_List_nodeI7messageEEEPT_RS4_>
 8000de8:	0002      	movs	r2, r0
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	605a      	str	r2, [r3, #4]
      { }
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b004      	add	sp, #16
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d007      	beq.n	8000e1e <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6818      	ldr	r0, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	0019      	movs	r1, r3
 8000e1a:	f000 f85b 	bl	8000ed4 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE10deallocateERS3_PS2_j>
      }
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE9constructIS1_JRKS1_EEEvRS3_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff ffed 	bl	8000e28 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8000e4e:	0002      	movs	r2, r0
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 f84d 	bl	8000ef4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
	return *this;
 8000e72:	687b      	ldr	r3, [r7, #4]
      }
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZNKSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_ZN9__gnu_cxx16__aligned_membufI7messageE7_M_addrEv>:
      _M_addr() noexcept
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000eac:	6839      	ldr	r1, [r7, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f837 	bl	8000f26 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8allocateEjPKv>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_ZSt11__addressofISaISt10_List_nodeI7messageEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 f83e 	bl	8000f68 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE10deallocateEPS3_j>
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b004      	add	sp, #16
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff ff90 	bl	8000e28 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8000f08:	0004      	movs	r4, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f7ff fb89 	bl	8000626 <_ZnwjPv>
 8000f14:	0003      	movs	r3, r0
 8000f16:	0021      	movs	r1, r4
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff fb8e 	bl	800063a <_ZN7messageC1ERKS_>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b005      	add	sp, #20
 8000f24:	bd90      	pop	{r4, r7, pc}

08000f26 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 f825 	bl	8000f84 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8max_sizeEv>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	419b      	sbcs	r3, r3
 8000f42:	425b      	negs	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8000f4a:	f002 f8c0 	bl	80030ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	0013      	movs	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	189b      	adds	r3, r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f002 f89d 	bl	8003098 <_Znwj>
 8000f5e:	0003      	movs	r3, r0
      }
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f002 f88a 	bl	8003090 <_ZdlPv>
      }
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b004      	add	sp, #16
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8max_sizeEv+0x14>)
      }
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	038e38e3 	.word	0x038e38e3

08000f9c <_ZNSt8__detail17_List_node_headerC1Ev>:
      _List_node_header() _GLIBCXX_NOEXCEPT
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 f805 	bl	8000fb6 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZNSt8__detail17_List_node_header7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	this->_M_next = this->_M_prev = this;
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]
	this->_M_size = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
      }
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE10_List_implD1Ev>:
      struct _List_impl
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 f93c 	bl	8001262 <_ZNSaISt10_List_nodeI7messageEED1Ev>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EEC1Ev>:
      _List_base() = default;
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 f91e 	bl	8001240 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE10_List_implC1Ev>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <_ZNSt7__cxx114listI7messageSaIS1_EEC1Ev>:
      list() = default;
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ffeb 	bl	8000ff4 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EEC1Ev>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <_ZNSt7__cxx114listI7messageSaIS1_EED1Ev>:
      ~list() = default;
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0018      	movs	r0, r3
 8001034:	f000 f922 	bl	800127c <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EED1Ev>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN5radioC1Ev>:
#include <string>
#include <list>
#include "message.h"
#include "main.h"

class radio
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ffde 	bl	800100e <_ZNSt7__cxx114listI7messageSaIS1_EEC1Ev>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3310      	adds	r3, #16
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff fa02 	bl	8000460 <_ZN7messageC1Ev>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <radioSend>:
#include "radioAPI.h"

radio r;

void radioSend(char * message, uint8_t length)
{
 8001068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106a:	b091      	sub	sp, #68	; 0x44
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	000a      	movs	r2, r1
 8001072:	1cfb      	adds	r3, r7, #3
 8001074:	701a      	strb	r2, [r3, #0]
	// Convert C char pointer to C++ string
	string messageString(message, message + length);
 8001076:	1cfb      	adds	r3, r7, #3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	18d4      	adds	r4, r2, r3
 800107e:	2524      	movs	r5, #36	; 0x24
 8001080:	197b      	adds	r3, r7, r5
 8001082:	0018      	movs	r0, r3
 8001084:	f002 f81a 	bl	80030bc <_ZNSaIcEC1Ev>
 8001088:	197b      	adds	r3, r7, r5
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	260c      	movs	r6, #12
 800108e:	19b8      	adds	r0, r7, r6
 8001090:	0022      	movs	r2, r4
 8001092:	f000 f904 	bl	800129e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001096:	197b      	adds	r3, r7, r5
 8001098:	0018      	movs	r0, r3
 800109a:	f002 f810 	bl	80030be <_ZNSaIcED1Ev>

	return r.send(messageString);
 800109e:	0034      	movs	r4, r6
 80010a0:	193a      	adds	r2, r7, r4
 80010a2:	2528      	movs	r5, #40	; 0x28
 80010a4:	197b      	adds	r3, r7, r5
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f002 fa89 	bl	80035c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80010ae:	197a      	adds	r2, r7, r5
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <radioSend+0x6c>)
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fb6d 	bl	8000794 <_ZN5radio4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80010ba:	197b      	adds	r3, r7, r5
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 f9b7 	bl	8003430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string messageString(message, message + length);
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	0018      	movs	r0, r3
 80010c6:	f002 f9b3 	bl	8003430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return r.send(messageString);
 80010ca:	46c0      	nop			; (mov r8, r8)
}
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b011      	add	sp, #68	; 0x44
 80010d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20000094 	.word	0x20000094

080010d8 <radioSendTick>:

void radioSendTick()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	// Use this version if you don't want Manchester encoding
	return r.sendTick();
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <radioSendTick+0x14>)
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff fb7e 	bl	80007e0 <_ZN5radio8sendTickEv>
 80010e4:	46c0      	nop			; (mov r8, r8)
	//return r.sendTickM();
}
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	20000094 	.word	0x20000094

080010f0 <radioReceiveTick>:

void radioReceiveTick()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	return r.receiveTick();
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <radioReceiveTick+0x14>)
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff fc3c 	bl	8000974 <_ZN5radio11receiveTickEv>
 80010fc:	46c0      	nop			; (mov r8, r8)
}
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000094 	.word	0x20000094

08001108 <radioEcho>:

void radioEcho()
{
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	46c6      	mov	lr, r8
 800110c:	b500      	push	{lr}
 800110e:	b09c      	sub	sp, #112	; 0x70
 8001110:	af00      	add	r7, sp, #0
	// FIXME: There is no string in this message
	message m = r.getInboundMessage();
 8001112:	261c      	movs	r6, #28
 8001114:	2318      	movs	r3, #24
 8001116:	18fa      	adds	r2, r7, r3
 8001118:	1993      	adds	r3, r2, r6
 800111a:	4a48      	ldr	r2, [pc, #288]	; (800123c <radioEcho+0x134>)
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff fc16 	bl	8000950 <_ZN5radio17getInboundMessageEv>
	if(m.getIsComplete() == true)
 8001124:	2318      	movs	r3, #24
 8001126:	18fa      	adds	r2, r7, r3
 8001128:	1993      	adds	r3, r2, r6
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff f9d6 	bl	80004dc <_ZN7message13getIsCompleteEv>
 8001130:	0003      	movs	r3, r0
 8001132:	3b01      	subs	r3, #1
 8001134:	425a      	negs	r2, r3
 8001136:	4153      	adcs	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d06f      	beq.n	800121e <radioEcho+0x116>
	{
		string s = m.getMessageString();
		char c[s.size() + 1];
		s.copy(c,s.size()+1);
		radioSend(c,m.getMessageString().length());
 800113e:	466b      	mov	r3, sp
 8001140:	4698      	mov	r8, r3
		string s = m.getMessageString();
 8001142:	231c      	movs	r3, #28
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	0032      	movs	r2, r6
 8001148:	2118      	movs	r1, #24
 800114a:	468c      	mov	ip, r1
 800114c:	44bc      	add	ip, r7
 800114e:	4462      	add	r2, ip
 8001150:	0011      	movs	r1, r2
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff f9b3 	bl	80004be <_ZN7message16getMessageStringB5cxx11Ev>
		char c[s.size() + 1];
 8001158:	261c      	movs	r6, #28
 800115a:	19bb      	adds	r3, r7, r6
 800115c:	0018      	movs	r0, r3
 800115e:	f002 f973 	bl	8003448 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001162:	0003      	movs	r3, r0
 8001164:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001166:	001a      	movs	r2, r3
 8001168:	3201      	adds	r2, #1
 800116a:	60ba      	str	r2, [r7, #8]
 800116c:	2200      	movs	r2, #0
 800116e:	60fa      	str	r2, [r7, #12]
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	68f9      	ldr	r1, [r7, #12]
 8001174:	0006      	movs	r6, r0
 8001176:	0f72      	lsrs	r2, r6, #29
 8001178:	000e      	movs	r6, r1
 800117a:	00f6      	lsls	r6, r6, #3
 800117c:	617e      	str	r6, [r7, #20]
 800117e:	697e      	ldr	r6, [r7, #20]
 8001180:	4316      	orrs	r6, r2
 8001182:	617e      	str	r6, [r7, #20]
 8001184:	0001      	movs	r1, r0
 8001186:	00c9      	lsls	r1, r1, #3
 8001188:	6139      	str	r1, [r7, #16]
 800118a:	001a      	movs	r2, r3
 800118c:	3201      	adds	r2, #1
 800118e:	603a      	str	r2, [r7, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	0006      	movs	r6, r0
 800119a:	0f72      	lsrs	r2, r6, #29
 800119c:	000e      	movs	r6, r1
 800119e:	00f5      	lsls	r5, r6, #3
 80011a0:	4315      	orrs	r5, r2
 80011a2:	0001      	movs	r1, r0
 80011a4:	00cc      	lsls	r4, r1, #3
 80011a6:	3301      	adds	r3, #1
 80011a8:	3307      	adds	r3, #7
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4669      	mov	r1, sp
 80011b0:	1acb      	subs	r3, r1, r3
 80011b2:	469d      	mov	sp, r3
 80011b4:	466b      	mov	r3, sp
 80011b6:	3300      	adds	r3, #0
 80011b8:	66bb      	str	r3, [r7, #104]	; 0x68
		s.copy(c,s.size()+1);
 80011ba:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80011bc:	261c      	movs	r6, #28
 80011be:	19bb      	adds	r3, r7, r6
 80011c0:	0018      	movs	r0, r3
 80011c2:	f002 f941 	bl	8003448 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80011c6:	0003      	movs	r3, r0
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	19b8      	adds	r0, r7, r6
 80011cc:	2300      	movs	r3, #0
 80011ce:	0021      	movs	r1, r4
 80011d0:	f002 f9da 	bl	8003588 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4copyEPcjj>
		radioSend(c,m.getMessageString().length());
 80011d4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80011d6:	2538      	movs	r5, #56	; 0x38
 80011d8:	2318      	movs	r3, #24
 80011da:	18fa      	adds	r2, r7, r3
 80011dc:	1953      	adds	r3, r2, r5
 80011de:	221c      	movs	r2, #28
 80011e0:	2118      	movs	r1, #24
 80011e2:	468c      	mov	ip, r1
 80011e4:	44bc      	add	ip, r7
 80011e6:	4462      	add	r2, ip
 80011e8:	0011      	movs	r1, r2
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff f967 	bl	80004be <_ZN7message16getMessageStringB5cxx11Ev>
 80011f0:	2318      	movs	r3, #24
 80011f2:	18fa      	adds	r2, r7, r3
 80011f4:	1953      	adds	r3, r2, r5
 80011f6:	0018      	movs	r0, r3
 80011f8:	f002 f928 	bl	800344c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80011fc:	0003      	movs	r3, r0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	0019      	movs	r1, r3
 8001202:	0020      	movs	r0, r4
 8001204:	f7ff ff30 	bl	8001068 <radioSend>
 8001208:	2318      	movs	r3, #24
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	195b      	adds	r3, r3, r5
 800120e:	0018      	movs	r0, r3
 8001210:	f002 f90e 	bl	8003430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		string s = m.getMessageString();
 8001214:	19bb      	adds	r3, r7, r6
 8001216:	0018      	movs	r0, r3
 8001218:	f002 f90a 	bl	8003430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800121c:	46c5      	mov	sp, r8
	message m = r.getInboundMessage();
 800121e:	231c      	movs	r3, #28
 8001220:	2218      	movs	r2, #24
 8001222:	4694      	mov	ip, r2
 8001224:	44bc      	add	ip, r7
 8001226:	4463      	add	r3, ip
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff fa1e 	bl	800066a <_ZN7messageD1Ev>
	}
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b01c      	add	sp, #112	; 0x70
 8001234:	bc80      	pop	{r7}
 8001236:	46b8      	mov	r8, r7
 8001238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000094 	.word	0x20000094

08001240 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f844 	bl	80012d8 <_ZNSaISt10_List_nodeI7messageEEC1Ev>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff fea2 	bl	8000f9c <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZNSaISt10_List_nodeI7messageEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	0018      	movs	r0, r3
 800126e:	f000 f840 	bl	80012f2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEED1Ev>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	0018      	movs	r0, r3
 8001288:	f000 f83c 	bl	8001304 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE8_M_clearEv>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	0018      	movs	r0, r3
 8001290:	f7ff fea3 	bl	8000fda <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE10_List_implD1Ev>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}

0800129e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
      template<typename _InputIterator,
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
        basic_string(_InputIterator __beg, _InputIterator __end,
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a)
 80012ac:	68fc      	ldr	r4, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f001 ffdc 	bl	800326e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80012b6:	0001      	movs	r1, r0
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	001a      	movs	r2, r3
 80012bc:	0020      	movs	r0, r4
 80012be:	f002 f97d 	bl	80035bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 f846 	bl	800135a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b005      	add	sp, #20
 80012d6:	bd90      	pop	{r4, r7, pc}

080012d8 <_ZNSaISt10_List_nodeI7messageEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f848 	bl	8001378 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEEC1Ev>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b002      	add	sp, #8
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	429a      	cmp	r2, r3
 8001318:	d01b      	beq.n	8001352 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE8_M_clearEv+0x4e>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff fc72 	bl	8000c10 <_ZNSt10_List_nodeI7messageE9_M_valptrEv>
 800132c:	0003      	movs	r3, r0
 800132e:	60fb      	str	r3, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fd45 	bl	8000dc2 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE21_M_get_Node_allocatorEv>
 8001338:	0002      	movs	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	0019      	movs	r1, r3
 800133e:	0010      	movs	r0, r2
 8001340:	f000 f823 	bl	800138a <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE7destroyIS1_EEvRS3_PT_>
	  _M_put_node(__tmp);
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0011      	movs	r1, r2
 800134a:	0018      	movs	r0, r3
 800134c:	f000 f82c 	bl	80013a8 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>
      while (__cur != &_M_impl._M_node)
 8001350:	e7df      	b.n	8001312 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE8_M_clearEv+0xe>
    }
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b006      	add	sp, #24
 8001358:	bd80      	pop	{r7, pc}

0800135a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f82b 	bl	80013c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b006      	add	sp, #24
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}

0800138a <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE7destroyIS1_EEvRS3_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	0011      	movs	r1, r2
 800139a:	0018      	movs	r0, r3
 800139c:	f000 f825 	bl	80013ea <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE7destroyIS2_EEvPT_>
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	2201      	movs	r2, #1
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fd8b 	bl	8000ed4 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE10deallocateERS3_PS2_j>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80013c6:	b590      	push	{r4, r7, lr}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	003a      	movs	r2, r7
 80013d4:	7013      	strb	r3, [r2, #0]
          _M_construct(__beg, __end, _Tag());
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	1c23      	adds	r3, r4, #0
 80013de:	f000 f811 	bl	8001404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b007      	add	sp, #28
 80013e8:	bd90      	pop	{r4, r7, pc}

080013ea <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff f937 	bl	800066a <_ZN7messageD1Ev>
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	003a      	movs	r2, r7
 8001412:	7013      	strb	r3, [r2, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	0018      	movs	r0, r3
 8001418:	f000 f842 	bl	80014a0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d005      	beq.n	800142c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800142c:	2300      	movs	r3, #0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x36>
	  std::__throw_logic_error(__N("basic_string::"
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x98>)
 8001434:	0018      	movs	r0, r3
 8001436:	f001 fe4d 	bl	80030d4 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	0011      	movs	r1, r2
 8001440:	0018      	movs	r0, r3
 8001442:	f000 f839 	bl	80014b8 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001446:	0003      	movs	r3, r0
 8001448:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d912      	bls.n	8001476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x72>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001450:	2314      	movs	r3, #20
 8001452:	18f9      	adds	r1, r7, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	0018      	movs	r0, r3
 800145a:	f001 ff11 	bl	8003280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800145e:	0002      	movs	r2, r0
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f001 fefe 	bl	8003266 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	0011      	movs	r1, r2
 8001470:	0018      	movs	r0, r3
 8001472:	f001 fefe 	bl	8003272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	0018      	movs	r0, r3
 800147a:	f001 fef6 	bl	800326a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	0019      	movs	r1, r3
 8001484:	f001 ff61 	bl	800334a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f001 fef1 	bl	8003276 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b006      	add	sp, #24
 800149a:	bd80      	pop	{r7, pc}
 800149c:	08003908 	.word	0x08003908

080014a0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	425a      	negs	r2, r3
 80014ac:	4153      	adcs	r3, r2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80014c2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	0018      	movs	r0, r3
 80014c8:	f000 f80b 	bl	80014e2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	1c2a      	adds	r2, r5, #0
 80014d0:	0019      	movs	r1, r3
 80014d2:	0020      	movs	r0, r4
 80014d4:	f000 f80d 	bl	80014f2 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80014d8:	0003      	movs	r3, r0
    }
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b004      	add	sp, #16
 80014e0:	bdb0      	pop	{r4, r5, r7, pc}

080014e2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80014ea:	1c18      	adds	r0, r3, #0
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
    }
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZN5radioD1Ev>:
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3310      	adds	r3, #16
 800151a:	0018      	movs	r0, r3
 800151c:	f7ff f8a5 	bl	800066a <_ZN7messageD1Ev>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	0018      	movs	r0, r3
 8001524:	f7ff fd80 	bl	8001028 <_ZNSt7__cxx114listI7messageSaIS1_EED1Ev>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <_Z41__static_initialization_and_destruction_0ii>:
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d107      	bne.n	8001554 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d103      	bne.n	8001554 <_Z41__static_initialization_and_destruction_0ii+0x20>
radio r;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff fd77 	bl	8001042 <_ZN5radioC1Ev>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d103      	bne.n	800156a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff ffd2 	bl	800150e <_ZN5radioD1Ev>
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	0000ffff 	.word	0x0000ffff
 8001578:	20000094 	.word	0x20000094

0800157c <_GLOBAL__sub_I_r>:
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <_GLOBAL__sub_I_r+0x14>)
 8001582:	0019      	movs	r1, r3
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff ffd5 	bl	8001534 <_Z41__static_initialization_and_destruction_0ii>
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	0000ffff 	.word	0x0000ffff

08001594 <_GLOBAL__sub_D_r>:
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <_GLOBAL__sub_D_r+0x14>)
 800159a:	0019      	movs	r1, r3
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff ffc9 	bl	8001534 <_Z41__static_initialization_and_destruction_0ii>
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	0000ffff 	.word	0x0000ffff

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x44>)
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_MspInit+0x44>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	430a      	orrs	r2, r1
 80015bc:	619a      	str	r2, [r3, #24]
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x44>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_MspInit+0x44>)
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_MspInit+0x44>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	0549      	lsls	r1, r1, #21
 80015d4:	430a      	orrs	r2, r1
 80015d6:	61da      	str	r2, [r3, #28]
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_MspInit+0x44>)
 80015da:	69da      	ldr	r2, [r3, #28]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	055b      	lsls	r3, r3, #21
 80015e0:	4013      	ands	r3, r2
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b002      	add	sp, #8
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	0019      	movs	r1, r3
 800160a:	2010      	movs	r0, #16
 800160c:	f000 fab4 	bl	8001b78 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001610:	2010      	movs	r0, #16
 8001612:	f000 fac6 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_InitTick+0xa4>)
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_InitTick+0xa4>)
 800161c:	2102      	movs	r1, #2
 800161e:	430a      	orrs	r2, r1
 8001620:	61da      	str	r2, [r3, #28]
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_InitTick+0xa4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2202      	movs	r2, #2
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800162e:	230c      	movs	r3, #12
 8001630:	18fa      	adds	r2, r7, r3
 8001632:	2310      	movs	r3, #16
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	0011      	movs	r1, r2
 8001638:	0018      	movs	r0, r3
 800163a:	f001 f8bd 	bl	80027b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800163e:	f001 f8a5 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8001642:	0003      	movs	r3, r0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	4914      	ldr	r1, [pc, #80]	; (800169c <HAL_InitTick+0xa8>)
 800164a:	0018      	movs	r0, r3
 800164c:	f7fe fd64 	bl	8000118 <__udivsi3>
 8001650:	0003      	movs	r3, r0
 8001652:	3b01      	subs	r3, #1
 8001654:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0xac>)
 8001658:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <HAL_InitTick+0xb0>)
 800165a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_InitTick+0xac>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <HAL_InitTick+0xb4>)
 8001660:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_InitTick+0xac>)
 8001664:	6a3a      	ldr	r2, [r7, #32]
 8001666:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_InitTick+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_InitTick+0xac>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_InitTick+0xac>)
 8001676:	0018      	movs	r0, r3
 8001678:	f001 f8c8 	bl	800280c <HAL_TIM_Base_Init>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d105      	bne.n	800168c <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <HAL_InitTick+0xac>)
 8001682:	0018      	movs	r0, r3
 8001684:	f001 f912 	bl	80028ac <HAL_TIM_Base_Start_IT>
 8001688:	0003      	movs	r3, r0
 800168a:	e000      	b.n	800168e <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b00a      	add	sp, #40	; 0x28
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40021000 	.word	0x40021000
 800169c:	000f4240 	.word	0x000f4240
 80016a0:	200000d0 	.word	0x200000d0
 80016a4:	40000400 	.word	0x40000400
 80016a8:	000003e7 	.word	0x000003e7

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016bc:	46c0      	nop			; (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <TIM3_IRQHandler+0x14>)
 80016de:	0018      	movs	r0, r3
 80016e0:	f001 f95e 	bl	80029a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	200000d0 	.word	0x200000d0

080016f0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <TIM15_IRQHandler+0x18>)
 80016f6:	0018      	movs	r0, r3
 80016f8:	f001 f952 	bl	80029a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  radioSendTick();
 80016fc:	f7ff fcec 	bl	80010d8 <radioSendTick>

  /* USER CODE END TIM15_IRQn 1 */
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	20000118 	.word	0x20000118

0800170c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <TIM16_IRQHandler+0x18>)
 8001712:	0018      	movs	r0, r3
 8001714:	f001 f944 	bl	80029a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  radioReceiveTick();
 8001718:	f7ff fcea 	bl	80010f0 <radioReceiveTick>

  /* USER CODE END TIM16_IRQn 1 */
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	20000160 	.word	0x20000160

08001728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_kill>:

int _kill(int pid, int sig)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800173e:	f001 ff5b 	bl	80035f8 <__errno>
 8001742:	0003      	movs	r3, r0
 8001744:	2216      	movs	r2, #22
 8001746:	601a      	str	r2, [r3, #0]
	return -1;
 8001748:	2301      	movs	r3, #1
 800174a:	425b      	negs	r3, r3
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <_exit>:

void _exit (int status)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800175c:	2301      	movs	r3, #1
 800175e:	425a      	negs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	0011      	movs	r1, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff ffe5 	bl	8001734 <_kill>
	while (1) {}		/* Make sure we hang here */
 800176a:	e7fe      	b.n	800176a <_exit+0x16>

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f001 ff2c 	bl	80035f8 <__errno>
 80017a0:	0003      	movs	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	425b      	negs	r3, r3
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	18d2      	adds	r2, r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <_sbrk+0x64>)
 80017bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b006      	add	sp, #24
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20002000 	.word	0x20002000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	200000c0 	.word	0x200000c0
 80017d4:	200001c0 	.word	0x200001c0

080017d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <MX_TIM15_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	2308      	movs	r3, #8
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	0018      	movs	r0, r3
 80017f0:	2310      	movs	r3, #16
 80017f2:	001a      	movs	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	f001 ff59 	bl	80036ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	003b      	movs	r3, r7
 80017fc:	0018      	movs	r0, r3
 80017fe:	2308      	movs	r3, #8
 8001800:	001a      	movs	r2, r3
 8001802:	2100      	movs	r1, #0
 8001804:	f001 ff52 	bl	80036ac <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <MX_TIM15_Init+0xa8>)
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <MX_TIM15_Init+0xac>)
 800180c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 480;
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <MX_TIM15_Init+0xa8>)
 8001810:	22f0      	movs	r2, #240	; 0xf0
 8001812:	0052      	lsls	r2, r2, #1
 8001814:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_TIM15_Init+0xa8>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_TIM15_Init+0xa8>)
 800181e:	2263      	movs	r2, #99	; 0x63
 8001820:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_TIM15_Init+0xa8>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_TIM15_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_TIM15_Init+0xa8>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM15_Init+0xa8>)
 8001836:	0018      	movs	r0, r3
 8001838:	f000 ffe8 	bl	800280c <HAL_TIM_Base_Init>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM15_Init+0x60>
  {
    Error_Handler();
 8001840:	f7fe fe08 	bl	8000454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001844:	2108      	movs	r1, #8
 8001846:	187b      	adds	r3, r7, r1
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	0152      	lsls	r2, r2, #5
 800184c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800184e:	187a      	adds	r2, r7, r1
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_TIM15_Init+0xa8>)
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f001 f9b9 	bl	8002bcc <HAL_TIM_ConfigClockSource>
 800185a:	1e03      	subs	r3, r0, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800185e:	f7fe fdf9 	bl	8000454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	003b      	movs	r3, r7
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	003b      	movs	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800186e:	003a      	movs	r2, r7
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_TIM15_Init+0xa8>)
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f001 fba3 	bl	8002fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 800187e:	f7fe fde9 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b006      	add	sp, #24
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	20000118 	.word	0x20000118
 8001890:	40014000 	.word	0x40014000

08001894 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_TIM16_Init+0x44>)
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <MX_TIM16_Init+0x48>)
 800189c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_TIM16_Init+0x44>)
 80018a0:	2230      	movs	r2, #48	; 0x30
 80018a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_TIM16_Init+0x44>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_TIM16_Init+0x44>)
 80018ac:	2209      	movs	r2, #9
 80018ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_TIM16_Init+0x44>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <MX_TIM16_Init+0x44>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_TIM16_Init+0x44>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <MX_TIM16_Init+0x44>)
 80018c4:	0018      	movs	r0, r3
 80018c6:	f000 ffa1 	bl	800280c <HAL_TIM_Base_Init>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80018ce:	f7fe fdc1 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000160 	.word	0x20000160
 80018dc:	40014400 	.word	0x40014400

080018e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_TIM_Base_MspInit+0x80>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d116      	bne.n	8001920 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_TIM_Base_MspInit+0x84>)
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_TIM_Base_MspInit+0x84>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0249      	lsls	r1, r1, #9
 80018fc:	430a      	orrs	r2, r1
 80018fe:	619a      	str	r2, [r3, #24]
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_TIM_Base_MspInit+0x84>)
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	025b      	lsls	r3, r3, #9
 8001908:	4013      	ands	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 2, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2102      	movs	r1, #2
 8001912:	2014      	movs	r0, #20
 8001914:	f000 f930 	bl	8001b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001918:	2014      	movs	r0, #20
 800191a:	f000 f942 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800191e:	e01a      	b.n	8001956 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM16)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_TIM_Base_MspInit+0x88>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d115      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_TIM_Base_MspInit+0x84>)
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_TIM_Base_MspInit+0x84>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0289      	lsls	r1, r1, #10
 8001934:	430a      	orrs	r2, r1
 8001936:	619a      	str	r2, [r3, #24]
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_TIM_Base_MspInit+0x84>)
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2015      	movs	r0, #21
 800194c:	f000 f914 	bl	8001b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001950:	2015      	movs	r0, #21
 8001952:	f000 f926 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b004      	add	sp, #16
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40014000 	.word	0x40014000
 8001964:	40021000 	.word	0x40021000
 8001968:	40014400 	.word	0x40014400

0800196c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800196e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001972:	490e      	ldr	r1, [pc, #56]	; (80019ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001974:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <LoopForever+0xe>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001988:	4c0b      	ldr	r4, [pc, #44]	; (80019b8 <LoopForever+0x16>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001996:	f7ff ff1f 	bl	80017d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800199a:	f001 fe33 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800199e:	f7fe fcdd 	bl	800035c <main>

080019a2 <LoopForever>:

LoopForever:
    b LoopForever
 80019a2:	e7fe      	b.n	80019a2 <LoopForever>
  ldr   r0, =_estack
 80019a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019b0:	08003a88 	.word	0x08003a88
  ldr r2, =_sbss
 80019b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019b8:	200001bc 	.word	0x200001bc

080019bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC1_IRQHandler>
	...

080019c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_Init+0x24>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_Init+0x24>)
 80019ca:	2110      	movs	r1, #16
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fe0f 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d6:	f7ff fde9 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40022000 	.word	0x40022000

080019e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_IncTick+0x1c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	001a      	movs	r2, r3
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_IncTick+0x20>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	18d2      	adds	r2, r2, r3
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_IncTick+0x20>)
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	20000008 	.word	0x20000008
 8001a08:	200001a8 	.word	0x200001a8

08001a0c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b02      	ldr	r3, [pc, #8]	; (8001a1c <HAL_GetTick+0x10>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	200001a8 	.word	0x200001a8

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff fff0 	bl	8001a0c <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	001a      	movs	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	189b      	adds	r3, r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	f7ff ffe0 	bl	8001a0c <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	20000008 	.word	0x20000008

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	0002      	movs	r2, r0
 8001a70:	1dfb      	adds	r3, r7, #7
 8001a72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	1dfb      	adds	r3, r7, #7
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b7f      	cmp	r3, #127	; 0x7f
 8001a7a:	d809      	bhi.n	8001a90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7c:	1dfb      	adds	r3, r7, #7
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	001a      	movs	r2, r3
 8001a82:	231f      	movs	r3, #31
 8001a84:	401a      	ands	r2, r3
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <__NVIC_EnableIRQ+0x30>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4091      	lsls	r1, r2
 8001a8c:	000a      	movs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
  }
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab0:	d828      	bhi.n	8001b04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab2:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <__NVIC_SetPriority+0xd4>)
 8001ab4:	1dfb      	adds	r3, r7, #7
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	33c0      	adds	r3, #192	; 0xc0
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	589b      	ldr	r3, [r3, r2]
 8001ac2:	1dfa      	adds	r2, r7, #7
 8001ac4:	7812      	ldrb	r2, [r2, #0]
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	2203      	movs	r2, #3
 8001aca:	400a      	ands	r2, r1
 8001acc:	00d2      	lsls	r2, r2, #3
 8001ace:	21ff      	movs	r1, #255	; 0xff
 8001ad0:	4091      	lsls	r1, r2
 8001ad2:	000a      	movs	r2, r1
 8001ad4:	43d2      	mvns	r2, r2
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	019b      	lsls	r3, r3, #6
 8001ade:	22ff      	movs	r2, #255	; 0xff
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	2303      	movs	r3, #3
 8001aea:	4003      	ands	r3, r0
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af0:	481f      	ldr	r0, [pc, #124]	; (8001b70 <__NVIC_SetPriority+0xd4>)
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	430a      	orrs	r2, r1
 8001afc:	33c0      	adds	r3, #192	; 0xc0
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b02:	e031      	b.n	8001b68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <__NVIC_SetPriority+0xd8>)
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	400b      	ands	r3, r1
 8001b10:	3b08      	subs	r3, #8
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3306      	adds	r3, #6
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	1dfa      	adds	r2, r7, #7
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	0011      	movs	r1, r2
 8001b24:	2203      	movs	r2, #3
 8001b26:	400a      	ands	r2, r1
 8001b28:	00d2      	lsls	r2, r2, #3
 8001b2a:	21ff      	movs	r1, #255	; 0xff
 8001b2c:	4091      	lsls	r1, r2
 8001b2e:	000a      	movs	r2, r1
 8001b30:	43d2      	mvns	r2, r2
 8001b32:	401a      	ands	r2, r3
 8001b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	019b      	lsls	r3, r3, #6
 8001b3a:	22ff      	movs	r2, #255	; 0xff
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	0018      	movs	r0, r3
 8001b44:	2303      	movs	r3, #3
 8001b46:	4003      	ands	r3, r0
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b4c:	4809      	ldr	r0, [pc, #36]	; (8001b74 <__NVIC_SetPriority+0xd8>)
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	001c      	movs	r4, r3
 8001b54:	230f      	movs	r3, #15
 8001b56:	4023      	ands	r3, r4
 8001b58:	3b08      	subs	r3, #8
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	3306      	adds	r3, #6
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	18c3      	adds	r3, r0, r3
 8001b64:	3304      	adds	r3, #4
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b003      	add	sp, #12
 8001b6e:	bd90      	pop	{r4, r7, pc}
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	210f      	movs	r1, #15
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	1c02      	adds	r2, r0, #0
 8001b88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	0011      	movs	r1, r2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff ff81 	bl	8001a9c <__NVIC_SetPriority>
}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	0002      	movs	r2, r0
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff ff57 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	e14f      	b.n	8001e74 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4091      	lsls	r1, r2
 8001bde:	000a      	movs	r2, r1
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d100      	bne.n	8001bec <HAL_GPIO_Init+0x28>
 8001bea:	e140      	b.n	8001e6e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d00b      	beq.n	8001c0c <HAL_GPIO_Init+0x48>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b12      	cmp	r3, #18
 8001c0a:	d130      	bne.n	8001c6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	0013      	movs	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c42:	2201      	movs	r2, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	2201      	movs	r2, #1
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0xea>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d123      	bne.n	8001cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	58d3      	ldr	r3, [r2, r3]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2107      	movs	r1, #7
 8001cda:	400b      	ands	r3, r1
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	6939      	ldr	r1, [r7, #16]
 8001cf4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	43da      	mvns	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2203      	movs	r2, #3
 8001d14:	401a      	ands	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	055b      	lsls	r3, r3, #21
 8001d32:	4013      	ands	r3, r2
 8001d34:	d100      	bne.n	8001d38 <HAL_GPIO_Init+0x174>
 8001d36:	e09a      	b.n	8001e6e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d38:	4b54      	ldr	r3, [pc, #336]	; (8001e8c <HAL_GPIO_Init+0x2c8>)
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_GPIO_Init+0x2c8>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	619a      	str	r2, [r3, #24]
 8001d44:	4b51      	ldr	r3, [pc, #324]	; (8001e8c <HAL_GPIO_Init+0x2c8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	589b      	ldr	r3, [r3, r2]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4013      	ands	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	0013      	movs	r3, r2
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	2390      	movs	r3, #144	; 0x90
 8001d78:	05db      	lsls	r3, r3, #23
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0x1e2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a44      	ldr	r2, [pc, #272]	; (8001e94 <HAL_GPIO_Init+0x2d0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_Init+0x1de>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a43      	ldr	r2, [pc, #268]	; (8001e98 <HAL_GPIO_Init+0x2d4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_Init+0x1da>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a42      	ldr	r2, [pc, #264]	; (8001e9c <HAL_GPIO_Init+0x2d8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_Init+0x1d6>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x1e4>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e004      	b.n	8001da8 <HAL_GPIO_Init+0x1e4>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_Init+0x1e4>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_GPIO_Init+0x1e4>
 8001da6:	2300      	movs	r3, #0
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	2103      	movs	r1, #3
 8001dac:	400a      	ands	r2, r1
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	4093      	lsls	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001db8:	4935      	ldr	r1, [pc, #212]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_GPIO_Init+0x2dc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	025b      	lsls	r3, r3, #9
 8001dde:	4013      	ands	r3, r2
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dea:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_GPIO_Init+0x2dc>)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_GPIO_Init+0x2dc>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_GPIO_Init+0x2dc>)
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <HAL_GPIO_Init+0x2dc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43da      	mvns	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	035b      	lsls	r3, r3, #13
 8001e32:	4013      	ands	r3, r2
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_GPIO_Init+0x2dc>)
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_GPIO_Init+0x2dc>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43da      	mvns	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	039b      	lsls	r3, r3, #14
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e68:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_GPIO_Init+0x2dc>)
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	40da      	lsrs	r2, r3
 8001e7c:	1e13      	subs	r3, r2, #0
 8001e7e:	d000      	beq.n	8001e82 <HAL_GPIO_Init+0x2be>
 8001e80:	e6a8      	b.n	8001bd4 <HAL_GPIO_Init+0x10>
  } 
}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b006      	add	sp, #24
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	48000400 	.word	0x48000400
 8001e98:	48000800 	.word	0x48000800
 8001e9c:	48000c00 	.word	0x48000c00
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	0008      	movs	r0, r1
 8001eae:	0011      	movs	r1, r2
 8001eb0:	1cbb      	adds	r3, r7, #2
 8001eb2:	1c02      	adds	r2, r0, #0
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	1c7b      	adds	r3, r7, #1
 8001eb8:	1c0a      	adds	r2, r1, #0
 8001eba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebc:	1c7b      	adds	r3, r7, #1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec4:	1cbb      	adds	r3, r7, #2
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ece:	1cbb      	adds	r3, r7, #2
 8001ed0:	881a      	ldrh	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e301      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d100      	bne.n	8001efe <HAL_RCC_OscConfig+0x1e>
 8001efc:	e08d      	b.n	800201a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001efe:	4bc3      	ldr	r3, [pc, #780]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	220c      	movs	r2, #12
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d00e      	beq.n	8001f28 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f0a:	4bc0      	ldr	r3, [pc, #768]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	220c      	movs	r2, #12
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d116      	bne.n	8001f44 <HAL_RCC_OscConfig+0x64>
 8001f16:	4bbd      	ldr	r3, [pc, #756]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	025b      	lsls	r3, r3, #9
 8001f1e:	401a      	ands	r2, r3
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	025b      	lsls	r3, r3, #9
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	4bb8      	ldr	r3, [pc, #736]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	4013      	ands	r3, r2
 8001f32:	d100      	bne.n	8001f36 <HAL_RCC_OscConfig+0x56>
 8001f34:	e070      	b.n	8002018 <HAL_RCC_OscConfig+0x138>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d000      	beq.n	8001f40 <HAL_RCC_OscConfig+0x60>
 8001f3e:	e06b      	b.n	8002018 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e2d8      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x7c>
 8001f4c:	4baf      	ldr	r3, [pc, #700]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4bae      	ldr	r3, [pc, #696]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	0249      	lsls	r1, r1, #9
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e02f      	b.n	8001fbc <HAL_RCC_OscConfig+0xdc>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x9e>
 8001f64:	4ba9      	ldr	r3, [pc, #676]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4ba8      	ldr	r3, [pc, #672]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	49a9      	ldr	r1, [pc, #676]	; (8002210 <HAL_RCC_OscConfig+0x330>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	4ba6      	ldr	r3, [pc, #664]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4ba5      	ldr	r3, [pc, #660]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f76:	49a7      	ldr	r1, [pc, #668]	; (8002214 <HAL_RCC_OscConfig+0x334>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e01e      	b.n	8001fbc <HAL_RCC_OscConfig+0xdc>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d10e      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xc4>
 8001f86:	4ba1      	ldr	r3, [pc, #644]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4ba0      	ldr	r3, [pc, #640]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	02c9      	lsls	r1, r1, #11
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	4b9d      	ldr	r3, [pc, #628]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b9c      	ldr	r3, [pc, #624]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	0249      	lsls	r1, r1, #9
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0xdc>
 8001fa4:	4b99      	ldr	r3, [pc, #612]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b98      	ldr	r3, [pc, #608]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001faa:	4999      	ldr	r1, [pc, #612]	; (8002210 <HAL_RCC_OscConfig+0x330>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	4b96      	ldr	r3, [pc, #600]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b95      	ldr	r3, [pc, #596]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	4997      	ldr	r1, [pc, #604]	; (8002214 <HAL_RCC_OscConfig+0x334>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d014      	beq.n	8001fee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fd22 	bl	8001a0c <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fce:	f7ff fd1d 	bl	8001a0c <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b64      	cmp	r3, #100	; 0x64
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e28a      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe0:	4b8a      	ldr	r3, [pc, #552]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0xee>
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fd0d 	bl	8001a0c <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fd08 	bl	8001a0c <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e275      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	4b80      	ldr	r3, [pc, #512]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	029b      	lsls	r3, r3, #10
 8002012:	4013      	ands	r3, r2
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x118>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2202      	movs	r2, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d100      	bne.n	8002026 <HAL_RCC_OscConfig+0x146>
 8002024:	e069      	b.n	80020fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002026:	4b79      	ldr	r3, [pc, #484]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	220c      	movs	r2, #12
 800202c:	4013      	ands	r3, r2
 800202e:	d00b      	beq.n	8002048 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002030:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	220c      	movs	r2, #12
 8002036:	4013      	ands	r3, r2
 8002038:	2b08      	cmp	r3, #8
 800203a:	d11c      	bne.n	8002076 <HAL_RCC_OscConfig+0x196>
 800203c:	4b73      	ldr	r3, [pc, #460]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	025b      	lsls	r3, r3, #9
 8002044:	4013      	ands	r3, r2
 8002046:	d116      	bne.n	8002076 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002048:	4b70      	ldr	r3, [pc, #448]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x17e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e24b      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b6b      	ldr	r3, [pc, #428]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	22f8      	movs	r2, #248	; 0xf8
 8002064:	4393      	bics	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	00da      	lsls	r2, r3, #3
 800206e:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002074:	e041      	b.n	80020fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d024      	beq.n	80020c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207e:	4b63      	ldr	r3, [pc, #396]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b62      	ldr	r3, [pc, #392]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002084:	2101      	movs	r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff fcbf 	bl	8001a0c <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002094:	f7ff fcba 	bl	8001a0c <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e227      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	d0f1      	beq.n	8002094 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b56      	ldr	r3, [pc, #344]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	22f8      	movs	r2, #248	; 0xf8
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00da      	lsls	r2, r3, #3
 80020c0:	4b52      	ldr	r3, [pc, #328]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e018      	b.n	80020fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c8:	4b50      	ldr	r3, [pc, #320]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b4f      	ldr	r3, [pc, #316]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	438a      	bics	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fc9a 	bl	8001a0c <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020de:	f7ff fc95 	bl	8001a0c <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e202      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f0:	4b46      	ldr	r3, [pc, #280]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d1f1      	bne.n	80020de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2208      	movs	r2, #8
 8002100:	4013      	ands	r3, r2
 8002102:	d036      	beq.n	8002172 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d019      	beq.n	8002140 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210c:	4b3f      	ldr	r3, [pc, #252]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 800210e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002110:	4b3e      	ldr	r3, [pc, #248]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002112:	2101      	movs	r1, #1
 8002114:	430a      	orrs	r2, r1
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7ff fc78 	bl	8001a0c <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002122:	f7ff fc73 	bl	8001a0c <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1e0      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d0f1      	beq.n	8002122 <HAL_RCC_OscConfig+0x242>
 800213e:	e018      	b.n	8002172 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002140:	4b32      	ldr	r3, [pc, #200]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002144:	4b31      	ldr	r3, [pc, #196]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7ff fc5e 	bl	8001a0c <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002156:	f7ff fc59 	bl	8001a0c <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1c6      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2202      	movs	r2, #2
 800216e:	4013      	ands	r3, r2
 8002170:	d1f1      	bne.n	8002156 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2204      	movs	r2, #4
 8002178:	4013      	ands	r3, r2
 800217a:	d100      	bne.n	800217e <HAL_RCC_OscConfig+0x29e>
 800217c:	e0b4      	b.n	80022e8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217e:	201f      	movs	r0, #31
 8002180:	183b      	adds	r3, r7, r0
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	055b      	lsls	r3, r3, #21
 800218e:	4013      	ands	r3, r2
 8002190:	d110      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	0549      	lsls	r1, r1, #21
 800219c:	430a      	orrs	r2, r1
 800219e:	61da      	str	r2, [r3, #28]
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	055b      	lsls	r3, r3, #21
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021ae:	183b      	adds	r3, r7, r0
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCC_OscConfig+0x338>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4013      	ands	r3, r2
 80021be:	d11a      	bne.n	80021f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_RCC_OscConfig+0x338>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <HAL_RCC_OscConfig+0x338>)
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	0049      	lsls	r1, r1, #1
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fc1d 	bl	8001a0c <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d8:	f7ff fc18 	bl	8001a0c <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e185      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_OscConfig+0x338>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4013      	ands	r3, r2
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10e      	bne.n	800221c <HAL_RCC_OscConfig+0x33c>
 80021fe:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	4b02      	ldr	r3, [pc, #8]	; (800220c <HAL_RCC_OscConfig+0x32c>)
 8002204:	2101      	movs	r1, #1
 8002206:	430a      	orrs	r2, r1
 8002208:	621a      	str	r2, [r3, #32]
 800220a:	e035      	b.n	8002278 <HAL_RCC_OscConfig+0x398>
 800220c:	40021000 	.word	0x40021000
 8002210:	fffeffff 	.word	0xfffeffff
 8002214:	fffbffff 	.word	0xfffbffff
 8002218:	40007000 	.word	0x40007000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10c      	bne.n	800223e <HAL_RCC_OscConfig+0x35e>
 8002224:	4bb6      	ldr	r3, [pc, #728]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	4bb5      	ldr	r3, [pc, #724]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800222a:	2101      	movs	r1, #1
 800222c:	438a      	bics	r2, r1
 800222e:	621a      	str	r2, [r3, #32]
 8002230:	4bb3      	ldr	r3, [pc, #716]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002232:	6a1a      	ldr	r2, [r3, #32]
 8002234:	4bb2      	ldr	r3, [pc, #712]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002236:	2104      	movs	r1, #4
 8002238:	438a      	bics	r2, r1
 800223a:	621a      	str	r2, [r3, #32]
 800223c:	e01c      	b.n	8002278 <HAL_RCC_OscConfig+0x398>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x380>
 8002246:	4bae      	ldr	r3, [pc, #696]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	4bad      	ldr	r3, [pc, #692]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800224c:	2104      	movs	r1, #4
 800224e:	430a      	orrs	r2, r1
 8002250:	621a      	str	r2, [r3, #32]
 8002252:	4bab      	ldr	r3, [pc, #684]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	4baa      	ldr	r3, [pc, #680]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	621a      	str	r2, [r3, #32]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x398>
 8002260:	4ba7      	ldr	r3, [pc, #668]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	4ba6      	ldr	r3, [pc, #664]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002266:	2101      	movs	r1, #1
 8002268:	438a      	bics	r2, r1
 800226a:	621a      	str	r2, [r3, #32]
 800226c:	4ba4      	ldr	r3, [pc, #656]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002272:	2104      	movs	r1, #4
 8002274:	438a      	bics	r2, r1
 8002276:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d014      	beq.n	80022aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff fbc4 	bl	8001a0c <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	e009      	b.n	800229e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff fbbf 	bl	8001a0c <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4a9b      	ldr	r2, [pc, #620]	; (8002504 <HAL_RCC_OscConfig+0x624>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e12b      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229e:	4b98      	ldr	r3, [pc, #608]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x3aa>
 80022a8:	e013      	b.n	80022d2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7ff fbaf 	bl	8001a0c <HAL_GetTick>
 80022ae:	0003      	movs	r3, r0
 80022b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	e009      	b.n	80022c8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7ff fbaa 	bl	8001a0c <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	4a91      	ldr	r2, [pc, #580]	; (8002504 <HAL_RCC_OscConfig+0x624>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e116      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	4b8d      	ldr	r3, [pc, #564]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d2:	231f      	movs	r3, #31
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	4b87      	ldr	r3, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80022e2:	4989      	ldr	r1, [pc, #548]	; (8002508 <HAL_RCC_OscConfig+0x628>)
 80022e4:	400a      	ands	r2, r1
 80022e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2210      	movs	r2, #16
 80022ee:	4013      	ands	r3, r2
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d12a      	bne.n	8002350 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022fa:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80022fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fe:	4b80      	ldr	r3, [pc, #512]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002300:	2104      	movs	r1, #4
 8002302:	430a      	orrs	r2, r1
 8002304:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002306:	4b7e      	ldr	r3, [pc, #504]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230a:	4b7d      	ldr	r3, [pc, #500]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800230c:	2101      	movs	r1, #1
 800230e:	430a      	orrs	r2, r1
 8002310:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002312:	f7ff fb7b 	bl	8001a0c <HAL_GetTick>
 8002316:	0003      	movs	r3, r0
 8002318:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800231c:	f7ff fb76 	bl	8001a0c <HAL_GetTick>
 8002320:	0002      	movs	r2, r0
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0e3      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800232e:	4b74      	ldr	r3, [pc, #464]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	2202      	movs	r2, #2
 8002334:	4013      	ands	r3, r2
 8002336:	d0f1      	beq.n	800231c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002338:	4b71      	ldr	r3, [pc, #452]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800233a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233c:	22f8      	movs	r2, #248	; 0xf8
 800233e:	4393      	bics	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	00da      	lsls	r2, r3, #3
 8002348:	4b6d      	ldr	r3, [pc, #436]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800234a:	430a      	orrs	r2, r1
 800234c:	635a      	str	r2, [r3, #52]	; 0x34
 800234e:	e034      	b.n	80023ba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	3305      	adds	r3, #5
 8002356:	d111      	bne.n	800237c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002358:	4b69      	ldr	r3, [pc, #420]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800235a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235c:	4b68      	ldr	r3, [pc, #416]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800235e:	2104      	movs	r1, #4
 8002360:	438a      	bics	r2, r1
 8002362:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002364:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	22f8      	movs	r2, #248	; 0xf8
 800236a:	4393      	bics	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	00da      	lsls	r2, r3, #3
 8002374:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002376:	430a      	orrs	r2, r1
 8002378:	635a      	str	r2, [r3, #52]	; 0x34
 800237a:	e01e      	b.n	80023ba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800237c:	4b60      	ldr	r3, [pc, #384]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800237e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002380:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002382:	2104      	movs	r1, #4
 8002384:	430a      	orrs	r2, r1
 8002386:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002388:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800238a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238c:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800238e:	2101      	movs	r1, #1
 8002390:	438a      	bics	r2, r1
 8002392:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7ff fb3a 	bl	8001a0c <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800239e:	f7ff fb35 	bl	8001a0c <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0a2      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80023b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b4:	2202      	movs	r2, #2
 80023b6:	4013      	ands	r3, r2
 80023b8:	d1f1      	bne.n	800239e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d100      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4e4>
 80023c2:	e097      	b.n	80024f4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c4:	4b4e      	ldr	r3, [pc, #312]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	220c      	movs	r2, #12
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d100      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4f2>
 80023d0:	e06b      	b.n	80024aa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d14c      	bne.n	8002474 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b49      	ldr	r3, [pc, #292]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b48      	ldr	r3, [pc, #288]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80023e0:	494a      	ldr	r1, [pc, #296]	; (800250c <HAL_RCC_OscConfig+0x62c>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fb11 	bl	8001a0c <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff fb0c 	bl	8001a0c <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e079      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	049b      	lsls	r3, r3, #18
 800240a:	4013      	ands	r3, r2
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240e:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	220f      	movs	r2, #15
 8002414:	4393      	bics	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241c:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800241e:	430a      	orrs	r2, r1
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4a3a      	ldr	r2, [pc, #232]	; (8002510 <HAL_RCC_OscConfig+0x630>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	431a      	orrs	r2, r3
 8002436:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	0449      	lsls	r1, r1, #17
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff fadf 	bl	8001a0c <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7ff fada 	bl	8001a0c <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e047      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	049b      	lsls	r3, r3, #18
 800246e:	4013      	ands	r3, r2
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x574>
 8002472:	e03f      	b.n	80024f4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800247a:	4924      	ldr	r1, [pc, #144]	; (800250c <HAL_RCC_OscConfig+0x62c>)
 800247c:	400a      	ands	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff fac4 	bl	8001a0c <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248a:	f7ff fabf 	bl	8001a0c <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e02c      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	049b      	lsls	r3, r3, #18
 80024a4:	4013      	ands	r3, r2
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x5aa>
 80024a8:	e024      	b.n	80024f4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e01f      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	025b      	lsls	r3, r3, #9
 80024c8:	401a      	ands	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d10e      	bne.n	80024f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	220f      	movs	r2, #15
 80024d6:	401a      	ands	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	23f0      	movs	r3, #240	; 0xf0
 80024e4:	039b      	lsls	r3, r3, #14
 80024e6:	401a      	ands	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b008      	add	sp, #32
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	40021000 	.word	0x40021000
 8002504:	00001388 	.word	0x00001388
 8002508:	efffffff 	.word	0xefffffff
 800250c:	feffffff 	.word	0xfeffffff
 8002510:	ffc2ffff 	.word	0xffc2ffff

08002514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b3      	b.n	8002690 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b5b      	ldr	r3, [pc, #364]	; (8002698 <HAL_RCC_ClockConfig+0x184>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d911      	bls.n	800255a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b58      	ldr	r3, [pc, #352]	; (8002698 <HAL_RCC_ClockConfig+0x184>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2201      	movs	r2, #1
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	4b55      	ldr	r3, [pc, #340]	; (8002698 <HAL_RCC_ClockConfig+0x184>)
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x184>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e09a      	b.n	8002690 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d015      	beq.n	8002590 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2204      	movs	r2, #4
 800256a:	4013      	ands	r3, r2
 800256c:	d006      	beq.n	800257c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800256e:	4b4b      	ldr	r3, [pc, #300]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 8002574:	21e0      	movs	r1, #224	; 0xe0
 8002576:	00c9      	lsls	r1, r1, #3
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	22f0      	movs	r2, #240	; 0xf0
 8002582:	4393      	bics	r3, r2
 8002584:	0019      	movs	r1, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	4b44      	ldr	r3, [pc, #272]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	d040      	beq.n	800261c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b3e      	ldr	r3, [pc, #248]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	4013      	ands	r3, r2
 80025ac:	d114      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06e      	b.n	8002690 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b38      	ldr	r3, [pc, #224]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	049b      	lsls	r3, r3, #18
 80025c2:	4013      	ands	r3, r2
 80025c4:	d108      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e062      	b.n	8002690 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	4b34      	ldr	r3, [pc, #208]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e05b      	b.n	8002690 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d8:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2203      	movs	r2, #3
 80025de:	4393      	bics	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ec:	f7ff fa0e 	bl	8001a0c <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f4:	e009      	b.n	800260a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f6:	f7ff fa09 	bl	8001a0c <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <HAL_RCC_ClockConfig+0x18c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e042      	b.n	8002690 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	220c      	movs	r2, #12
 8002610:	401a      	ands	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1ec      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <HAL_RCC_ClockConfig+0x184>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2201      	movs	r2, #1
 8002622:	4013      	ands	r3, r2
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d211      	bcs.n	800264e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCC_ClockConfig+0x184>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	4393      	bics	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_RCC_ClockConfig+0x184>)
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_RCC_ClockConfig+0x184>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2201      	movs	r2, #1
 8002642:	4013      	ands	r3, r2
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e020      	b.n	8002690 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2204      	movs	r2, #4
 8002654:	4013      	ands	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <HAL_RCC_ClockConfig+0x190>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 8002668:	430a      	orrs	r2, r1
 800266a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800266c:	f000 f820 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 8002670:	0001      	movs	r1, r0
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x188>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	220f      	movs	r2, #15
 800267a:	4013      	ands	r3, r2
 800267c:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <HAL_RCC_ClockConfig+0x194>)
 800267e:	5cd3      	ldrb	r3, [r2, r3]
 8002680:	000a      	movs	r2, r1
 8002682:	40da      	lsrs	r2, r3
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x198>)
 8002686:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002688:	2000      	movs	r0, #0
 800268a:	f7fe ffb3 	bl	80015f4 <HAL_InitTick>
  
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40022000 	.word	0x40022000
 800269c:	40021000 	.word	0x40021000
 80026a0:	00001388 	.word	0x00001388
 80026a4:	fffff8ff 	.word	0xfffff8ff
 80026a8:	08003970 	.word	0x08003970
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b08f      	sub	sp, #60	; 0x3c
 80026b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026b6:	2314      	movs	r3, #20
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	4a2b      	ldr	r2, [pc, #172]	; (8002768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026be:	c313      	stmia	r3!, {r0, r1, r4}
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	4a29      	ldr	r2, [pc, #164]	; (800276c <HAL_RCC_GetSysClockFreq+0xbc>)
 80026c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026ca:	c313      	stmia	r3!, {r0, r1, r4}
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d4:	2300      	movs	r3, #0
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d8:	2300      	movs	r3, #0
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	220c      	movs	r2, #12
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d002      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x4a>
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d003      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x50>
 80026f8:	e02d      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026fe:	e02d      	b.n	800275c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	0c9b      	lsrs	r3, r3, #18
 8002704:	220f      	movs	r2, #15
 8002706:	4013      	ands	r3, r2
 8002708:	2214      	movs	r2, #20
 800270a:	18ba      	adds	r2, r7, r2
 800270c:	5cd3      	ldrb	r3, [r2, r3]
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	220f      	movs	r2, #15
 8002716:	4013      	ands	r3, r2
 8002718:	1d3a      	adds	r2, r7, #4
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800271e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	4013      	ands	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800272a:	4812      	ldr	r0, [pc, #72]	; (8002774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800272c:	f7fd fcf4 	bl	8000118 <__udivsi3>
 8002730:	0003      	movs	r3, r0
 8002732:	001a      	movs	r2, r3
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	4353      	muls	r3, r2
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
 800273a:	e009      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800273c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800273e:	000a      	movs	r2, r1
 8002740:	0152      	lsls	r2, r2, #5
 8002742:	1a52      	subs	r2, r2, r1
 8002744:	0193      	lsls	r3, r2, #6
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	185b      	adds	r3, r3, r1
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002754:	e002      	b.n	800275c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800275a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b00f      	add	sp, #60	; 0x3c
 8002764:	bd90      	pop	{r4, r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	08003934 	.word	0x08003934
 800276c:	08003944 	.word	0x08003944
 8002770:	40021000 	.word	0x40021000
 8002774:	007a1200 	.word	0x007a1200

08002778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800277c:	4b02      	ldr	r3, [pc, #8]	; (8002788 <HAL_RCC_GetHCLKFreq+0x10>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	20000004 	.word	0x20000004

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002790:	f7ff fff2 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8002794:	0001      	movs	r1, r0
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	2207      	movs	r2, #7
 800279e:	4013      	ands	r3, r2
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	40d9      	lsrs	r1, r3
 80027a6:	000b      	movs	r3, r1
}    
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	40021000 	.word	0x40021000
 80027b4:	08003980 	.word	0x08003980

080027b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2207      	movs	r2, #7
 80027c6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_RCC_GetClockConfig+0x4c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2203      	movs	r2, #3
 80027ce:	401a      	ands	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_GetClockConfig+0x4c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	22f0      	movs	r2, #240	; 0xf0
 80027da:	401a      	ands	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_RCC_GetClockConfig+0x4c>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	23e0      	movs	r3, #224	; 0xe0
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	401a      	ands	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCC_GetClockConfig+0x50>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2201      	movs	r2, #1
 80027f4:	401a      	ands	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	601a      	str	r2, [r3, #0]
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b002      	add	sp, #8
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	40021000 	.word	0x40021000
 8002808:	40022000 	.word	0x40022000

0800280c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e042      	b.n	80028a4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	223d      	movs	r2, #61	; 0x3d
 8002822:	5c9b      	ldrb	r3, [r3, r2]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223c      	movs	r2, #60	; 0x3c
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0018      	movs	r0, r3
 8002836:	f7ff f853 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	223d      	movs	r2, #61	; 0x3d
 800283e:	2102      	movs	r1, #2
 8002840:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	0019      	movs	r1, r3
 800284c:	0010      	movs	r0, r2
 800284e:	f000 faa7 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2246      	movs	r2, #70	; 0x46
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	223e      	movs	r2, #62	; 0x3e
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223f      	movs	r2, #63	; 0x3f
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2241      	movs	r2, #65	; 0x41
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2242      	movs	r2, #66	; 0x42
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2243      	movs	r2, #67	; 0x43
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2244      	movs	r2, #68	; 0x44
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2245      	movs	r2, #69	; 0x45
 8002896:	2101      	movs	r1, #1
 8002898:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	223d      	movs	r2, #61	; 0x3d
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	223d      	movs	r2, #61	; 0x3d
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d001      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e035      	b.n	8002930 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	223d      	movs	r2, #61	; 0x3d
 80028c8:	2102      	movs	r1, #2
 80028ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <HAL_TIM_Base_Start_IT+0x8c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_TIM_Base_Start_IT+0x4e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a14      	ldr	r2, [pc, #80]	; (800293c <HAL_TIM_Base_Start_IT+0x90>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIM_Base_Start_IT+0x4e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a12      	ldr	r2, [pc, #72]	; (8002940 <HAL_TIM_Base_Start_IT+0x94>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d111      	bne.n	800291e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2207      	movs	r2, #7
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d010      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2101      	movs	r1, #1
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291c:	e007      	b.n	800292e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b004      	add	sp, #16
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40000400 	.word	0x40000400
 8002940:	40014000 	.word	0x40014000

08002944 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2101      	movs	r1, #1
 8002958:	438a      	bics	r2, r1
 800295a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_TIM_Base_Stop_IT+0x54>)
 8002964:	4013      	ands	r3, r2
 8002966:	d10d      	bne.n	8002984 <HAL_TIM_Base_Stop_IT+0x40>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_TIM_Base_Stop_IT+0x58>)
 8002970:	4013      	ands	r3, r2
 8002972:	d107      	bne.n	8002984 <HAL_TIM_Base_Stop_IT+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2101      	movs	r1, #1
 8002980:	438a      	bics	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	223d      	movs	r2, #61	; 0x3d
 8002988:	2101      	movs	r1, #1
 800298a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	00001111 	.word	0x00001111
 800299c:	00000444 	.word	0x00000444

080029a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d124      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2202      	movs	r2, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d11d      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2203      	movs	r2, #3
 80029ca:	4252      	negs	r2, r2
 80029cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2203      	movs	r2, #3
 80029dc:	4013      	ands	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 f9c4 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e007      	b.n	80029fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 f9b7 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f9c3 	bl	8002d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2204      	movs	r2, #4
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d125      	bne.n	8002a5a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2204      	movs	r2, #4
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d11e      	bne.n	8002a5a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2205      	movs	r2, #5
 8002a22:	4252      	negs	r2, r2
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	23c0      	movs	r3, #192	; 0xc0
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4013      	ands	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 f997 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002a42:	e007      	b.n	8002a54 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 f98a 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 f996 	bl	8002d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2208      	movs	r2, #8
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d124      	bne.n	8002ab2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2208      	movs	r2, #8
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d11d      	bne.n	8002ab2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2209      	movs	r2, #9
 8002a7c:	4252      	negs	r2, r2
 8002a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2204      	movs	r2, #4
 8002a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 f96b 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002a9a:	e007      	b.n	8002aac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f95e 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f96a 	bl	8002d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d125      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d11e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2211      	movs	r2, #17
 8002ad4:	4252      	negs	r2, r2
 8002ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2208      	movs	r2, #8
 8002adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	23c0      	movs	r3, #192	; 0xc0
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f93e 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e007      	b.n	8002b06 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 f931 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 f93d 	bl	8002d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2201      	movs	r2, #1
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10f      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4252      	negs	r2, r2
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7fd fc7b 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2280      	movs	r2, #128	; 0x80
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d10f      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b80      	cmp	r3, #128	; 0x80
 8002b54:	d108      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2281      	movs	r2, #129	; 0x81
 8002b5c:	4252      	negs	r2, r2
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fa8c 	bl	8003080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d10f      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d108      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2241      	movs	r2, #65	; 0x41
 8002b8a:	4252      	negs	r2, r2
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 f8fd 	bl	8002d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d10f      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d108      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2221      	movs	r2, #33	; 0x21
 8002bb8:	4252      	negs	r2, r2
 8002bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 fa56 	bl	8003070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	223c      	movs	r2, #60	; 0x3c
 8002bda:	5c9b      	ldrb	r3, [r3, r2]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_TIM_ConfigClockSource+0x18>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e0b7      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x188>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	223c      	movs	r2, #60	; 0x3c
 8002be8:	2101      	movs	r1, #1
 8002bea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	223d      	movs	r2, #61	; 0x3d
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2277      	movs	r2, #119	; 0x77
 8002c00:	4393      	bics	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4a55      	ldr	r2, [pc, #340]	; (8002d5c <HAL_TIM_ConfigClockSource+0x190>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2280      	movs	r2, #128	; 0x80
 8002c1a:	0192      	lsls	r2, r2, #6
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d040      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0xd6>
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	0192      	lsls	r2, r2, #6
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d900      	bls.n	8002c2a <HAL_TIM_ConfigClockSource+0x5e>
 8002c28:	e088      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x170>
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	0152      	lsls	r2, r2, #5
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d100      	bne.n	8002c34 <HAL_TIM_ConfigClockSource+0x68>
 8002c32:	e085      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	0152      	lsls	r2, r2, #5
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d900      	bls.n	8002c3e <HAL_TIM_ConfigClockSource+0x72>
 8002c3c:	e07e      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x170>
 8002c3e:	2b70      	cmp	r3, #112	; 0x70
 8002c40:	d018      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0xa8>
 8002c42:	d900      	bls.n	8002c46 <HAL_TIM_ConfigClockSource+0x7a>
 8002c44:	e07a      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x170>
 8002c46:	2b60      	cmp	r3, #96	; 0x60
 8002c48:	d04f      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x11e>
 8002c4a:	d900      	bls.n	8002c4e <HAL_TIM_ConfigClockSource+0x82>
 8002c4c:	e076      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x170>
 8002c4e:	2b50      	cmp	r3, #80	; 0x50
 8002c50:	d03b      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0xfe>
 8002c52:	d900      	bls.n	8002c56 <HAL_TIM_ConfigClockSource+0x8a>
 8002c54:	e072      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x170>
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d057      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x13e>
 8002c5a:	d900      	bls.n	8002c5e <HAL_TIM_ConfigClockSource+0x92>
 8002c5c:	e06e      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x170>
 8002c5e:	2b30      	cmp	r3, #48	; 0x30
 8002c60:	d063      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15e>
 8002c62:	d86b      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x170>
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d060      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15e>
 8002c68:	d868      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x170>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d05d      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15e>
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d05b      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c72:	e063      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6899      	ldr	r1, [r3, #8]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f000 f97c 	bl	8002f80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2277      	movs	r2, #119	; 0x77
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]
      break;
 8002ca0:	e04f      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6899      	ldr	r1, [r3, #8]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f000 f965 	bl	8002f80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	01c9      	lsls	r1, r1, #7
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]
      break;
 8002cc8:	e03b      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	001a      	movs	r2, r3
 8002cd8:	f000 f8d8 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2150      	movs	r1, #80	; 0x50
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f932 	bl	8002f4c <TIM_ITRx_SetConfig>
      break;
 8002ce8:	e02b      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	f000 f8f6 	bl	8002ee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2160      	movs	r1, #96	; 0x60
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 f922 	bl	8002f4c <TIM_ITRx_SetConfig>
      break;
 8002d08:	e01b      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	001a      	movs	r2, r3
 8002d18:	f000 f8b8 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2140      	movs	r1, #64	; 0x40
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 f912 	bl	8002f4c <TIM_ITRx_SetConfig>
      break;
 8002d28:	e00b      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0019      	movs	r1, r3
 8002d34:	0010      	movs	r0, r2
 8002d36:	f000 f909 	bl	8002f4c <TIM_ITRx_SetConfig>
        break;
 8002d3a:	e002      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	e000      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002d40:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	223d      	movs	r2, #61	; 0x3d
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	223c      	movs	r2, #60	; 0x3c
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b004      	add	sp, #16
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	ffff00ff 	.word	0xffff00ff

08002d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <TIM_Base_SetConfig+0xd0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_Base_SetConfig+0x20>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <TIM_Base_SetConfig+0xd4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d108      	bne.n	8002dd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2270      	movs	r2, #112	; 0x70
 8002dc4:	4393      	bics	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <TIM_Base_SetConfig+0xd0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <TIM_Base_SetConfig+0xd4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00f      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <TIM_Base_SetConfig+0xd8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00b      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <TIM_Base_SetConfig+0xdc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <TIM_Base_SetConfig+0xe0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <TIM_Base_SetConfig+0xe4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d108      	bne.n	8002e14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <TIM_Base_SetConfig+0xe8>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	4393      	bics	r3, r2
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <TIM_Base_SetConfig+0xd0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <TIM_Base_SetConfig+0xba>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <TIM_Base_SetConfig+0xdc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0xba>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <TIM_Base_SetConfig+0xe0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0xba>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <TIM_Base_SetConfig+0xe4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d103      	bne.n	8002e62 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	615a      	str	r2, [r3, #20]
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40002000 	.word	0x40002000
 8002e7c:	40014000 	.word	0x40014000
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800
 8002e88:	fffffcff 	.word	0xfffffcff

08002e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4393      	bics	r3, r2
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	22f0      	movs	r2, #240	; 0xf0
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	220a      	movs	r2, #10
 8002ec8:	4393      	bics	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b006      	add	sp, #24
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	4393      	bics	r3, r2
 8002efc:	001a      	movs	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <TIM_TI2_ConfigInputStage+0x60>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	031b      	lsls	r3, r3, #12
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	22a0      	movs	r2, #160	; 0xa0
 8002f24:	4393      	bics	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	621a      	str	r2, [r3, #32]
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b006      	add	sp, #24
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	ffff0fff 	.word	0xffff0fff

08002f4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2270      	movs	r2, #112	; 0x70
 8002f60:	4393      	bics	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	609a      	str	r2, [r3, #8]
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b004      	add	sp, #16
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <TIM_ETR_SetConfig+0x3c>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	021a      	lsls	r2, r3, #8
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b006      	add	sp, #24
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	ffff00ff 	.word	0xffff00ff

08002fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	223c      	movs	r2, #60	; 0x3c
 8002fce:	5c9b      	ldrb	r3, [r3, r2]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e041      	b.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	223c      	movs	r2, #60	; 0x3c
 8002fdc:	2101      	movs	r1, #1
 8002fde:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	223d      	movs	r2, #61	; 0x3d
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2270      	movs	r2, #112	; 0x70
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a13      	ldr	r2, [pc, #76]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a11      	ldr	r2, [pc, #68]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a10      	ldr	r2, [pc, #64]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d10c      	bne.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	4393      	bics	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	4313      	orrs	r3, r2
 8003040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223d      	movs	r2, #61	; 0x3d
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	223c      	movs	r2, #60	; 0x3c
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40000400 	.word	0x40000400
 800306c:	40014000 	.word	0x40014000

08003070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZdlPv>:
 8003090:	b510      	push	{r4, lr}
 8003092:	f000 fae5 	bl	8003660 <free>
 8003096:	bd10      	pop	{r4, pc}

08003098 <_Znwj>:
 8003098:	b510      	push	{r4, lr}
 800309a:	1e04      	subs	r4, r0, #0
 800309c:	d100      	bne.n	80030a0 <_Znwj+0x8>
 800309e:	3401      	adds	r4, #1
 80030a0:	0020      	movs	r0, r4
 80030a2:	f000 fad3 	bl	800364c <malloc>
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d107      	bne.n	80030ba <_Znwj+0x22>
 80030aa:	f000 fa97 	bl	80035dc <_ZSt15get_new_handlerv>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d101      	bne.n	80030b6 <_Znwj+0x1e>
 80030b2:	f000 fa99 	bl	80035e8 <abort>
 80030b6:	4780      	blx	r0
 80030b8:	e7f2      	b.n	80030a0 <_Znwj+0x8>
 80030ba:	bd10      	pop	{r4, pc}

080030bc <_ZNSaIcEC1Ev>:
 80030bc:	4770      	bx	lr

080030be <_ZNSaIcED1Ev>:
 80030be:	4770      	bx	lr

080030c0 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 80030c0:	684b      	ldr	r3, [r1, #4]
 80030c2:	6001      	str	r1, [r0, #0]
 80030c4:	6043      	str	r3, [r0, #4]
 80030c6:	684b      	ldr	r3, [r1, #4]
 80030c8:	6018      	str	r0, [r3, #0]
 80030ca:	6048      	str	r0, [r1, #4]
 80030cc:	4770      	bx	lr

080030ce <_ZSt17__throw_bad_allocv>:
 80030ce:	b510      	push	{r4, lr}
 80030d0:	f000 fa8a 	bl	80035e8 <abort>

080030d4 <_ZSt19__throw_logic_errorPKc>:
 80030d4:	b510      	push	{r4, lr}
 80030d6:	f000 fa87 	bl	80035e8 <abort>

080030da <_ZSt20__throw_length_errorPKc>:
 80030da:	b510      	push	{r4, lr}
 80030dc:	f000 fa84 	bl	80035e8 <abort>

080030e0 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80030e0:	b40f      	push	{r0, r1, r2, r3}
 80030e2:	2318      	movs	r3, #24
 80030e4:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	18fc      	adds	r4, r7, r3
 80030ea:	cc20      	ldmia	r4!, {r5}
 80030ec:	0028      	movs	r0, r5
 80030ee:	f7fd f80b 	bl	8000108 <strlen>
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	18c1      	adds	r1, r0, r3
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <_ZSt24__throw_out_of_range_fmtPKcz+0x38>)
 80030fa:	002a      	movs	r2, r5
 80030fc:	18c0      	adds	r0, r0, r3
 80030fe:	466b      	mov	r3, sp
 8003100:	08c0      	lsrs	r0, r0, #3
 8003102:	00c0      	lsls	r0, r0, #3
 8003104:	1a1b      	subs	r3, r3, r0
 8003106:	469d      	mov	sp, r3
 8003108:	0023      	movs	r3, r4
 800310a:	4668      	mov	r0, sp
 800310c:	607c      	str	r4, [r7, #4]
 800310e:	f000 f85f 	bl	80031d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8003112:	f000 fa69 	bl	80035e8 <abort>
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	00000207 	.word	0x00000207

0800311c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311e:	0006      	movs	r6, r0
 8003120:	000c      	movs	r4, r1
 8003122:	b09d      	sub	sp, #116	; 0x74
 8003124:	af00      	add	r7, sp, #0
 8003126:	1ba4      	subs	r4, r4, r6
 8003128:	2269      	movs	r2, #105	; 0x69
 800312a:	490f      	ldr	r1, [pc, #60]	; (8003168 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x4c>)
 800312c:	1d38      	adds	r0, r7, #4
 800312e:	f000 faa1 	bl	8003674 <memcpy>
 8003132:	0023      	movs	r3, r4
 8003134:	466a      	mov	r2, sp
 8003136:	3370      	adds	r3, #112	; 0x70
 8003138:	08db      	lsrs	r3, r3, #3
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	469d      	mov	sp, r3
 8003140:	466d      	mov	r5, sp
 8003142:	2268      	movs	r2, #104	; 0x68
 8003144:	1d39      	adds	r1, r7, #4
 8003146:	0028      	movs	r0, r5
 8003148:	f000 fa94 	bl	8003674 <memcpy>
 800314c:	0028      	movs	r0, r5
 800314e:	0022      	movs	r2, r4
 8003150:	0031      	movs	r1, r6
 8003152:	3068      	adds	r0, #104	; 0x68
 8003154:	f000 fa8e 	bl	8003674 <memcpy>
 8003158:	2300      	movs	r3, #0
 800315a:	192c      	adds	r4, r5, r4
 800315c:	3468      	adds	r4, #104	; 0x68
 800315e:	0028      	movs	r0, r5
 8003160:	7023      	strb	r3, [r4, #0]
 8003162:	f7ff ffb7 	bl	80030d4 <_ZSt19__throw_logic_errorPKc>
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	08003988 	.word	0x08003988

0800316c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800316c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	b084      	sub	sp, #16
 8003174:	466e      	mov	r6, sp
 8003176:	0033      	movs	r3, r6
 8003178:	330c      	adds	r3, #12
 800317a:	0014      	movs	r4, r2
 800317c:	001d      	movs	r5, r3
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	0020      	movs	r0, r4
 8003186:	210a      	movs	r1, #10
 8003188:	f7fd f84c 	bl	8000224 <__aeabi_uidivmod>
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x60>)
 800318e:	3d01      	subs	r5, #1
 8003190:	5c5b      	ldrb	r3, [r3, r1]
 8003192:	0020      	movs	r0, r4
 8003194:	702b      	strb	r3, [r5, #0]
 8003196:	210a      	movs	r1, #10
 8003198:	60bc      	str	r4, [r7, #8]
 800319a:	f7fc ffbd 	bl	8000118 <__udivsi3>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	0004      	movs	r4, r0
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	d8ee      	bhi.n	8003184 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1b5d      	subs	r5, r3, r5
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	429d      	cmp	r5, r3
 80031ae:	d809      	bhi.n	80031c4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x58>
 80031b0:	1b71      	subs	r1, r6, r5
 80031b2:	002a      	movs	r2, r5
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	310c      	adds	r1, #12
 80031b8:	f000 fa5c 	bl	8003674 <memcpy>
 80031bc:	0028      	movs	r0, r5
 80031be:	46bd      	mov	sp, r7
 80031c0:	b005      	add	sp, #20
 80031c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c4:	2501      	movs	r5, #1
 80031c6:	426d      	negs	r5, r5
 80031c8:	e7f8      	b.n	80031bc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x50>
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	080039f1 	.word	0x080039f1

080031d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80031d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031d2:	0007      	movs	r7, r0
 80031d4:	0004      	movs	r4, r0
 80031d6:	3901      	subs	r1, #1
 80031d8:	0015      	movs	r5, r2
 80031da:	1842      	adds	r2, r0, r1
 80031dc:	9201      	str	r2, [sp, #4]
 80031de:	782a      	ldrb	r2, [r5, #0]
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	d033      	beq.n	800324c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7c>
 80031e4:	9901      	ldr	r1, [sp, #4]
 80031e6:	428c      	cmp	r4, r1
 80031e8:	d22c      	bcs.n	8003244 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80031ea:	2a25      	cmp	r2, #37	; 0x25
 80031ec:	d108      	bne.n	8003200 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x30>
 80031ee:	786a      	ldrb	r2, [r5, #1]
 80031f0:	2a73      	cmp	r2, #115	; 0x73
 80031f2:	d00a      	beq.n	800320a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 80031f4:	2a7a      	cmp	r2, #122	; 0x7a
 80031f6:	d015      	beq.n	8003224 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 80031f8:	3a25      	subs	r2, #37	; 0x25
 80031fa:	4251      	negs	r1, r2
 80031fc:	414a      	adcs	r2, r1
 80031fe:	18ad      	adds	r5, r5, r2
 8003200:	782a      	ldrb	r2, [r5, #0]
 8003202:	3501      	adds	r5, #1
 8003204:	7022      	strb	r2, [r4, #0]
 8003206:	3401      	adds	r4, #1
 8003208:	e7e9      	b.n	80031de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800320a:	0022      	movs	r2, r4
 800320c:	cb02      	ldmia	r3!, {r1}
 800320e:	7808      	ldrb	r0, [r1, #0]
 8003210:	0014      	movs	r4, r2
 8003212:	2800      	cmp	r0, #0
 8003214:	d01f      	beq.n	8003256 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x86>
 8003216:	9c01      	ldr	r4, [sp, #4]
 8003218:	4294      	cmp	r4, r2
 800321a:	d01a      	beq.n	8003252 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x82>
 800321c:	7010      	strb	r0, [r2, #0]
 800321e:	3101      	adds	r1, #1
 8003220:	3201      	adds	r2, #1
 8003222:	e7f4      	b.n	800320e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3e>
 8003224:	78aa      	ldrb	r2, [r5, #2]
 8003226:	2a75      	cmp	r2, #117	; 0x75
 8003228:	d1ea      	bne.n	8003200 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x30>
 800322a:	001e      	movs	r6, r3
 800322c:	9b01      	ldr	r3, [sp, #4]
 800322e:	0020      	movs	r0, r4
 8003230:	ce04      	ldmia	r6!, {r2}
 8003232:	1b19      	subs	r1, r3, r4
 8003234:	f7ff ff9a 	bl	800316c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8003238:	2800      	cmp	r0, #0
 800323a:	dd03      	ble.n	8003244 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 800323c:	0033      	movs	r3, r6
 800323e:	1824      	adds	r4, r4, r0
 8003240:	3503      	adds	r5, #3
 8003242:	e7cc      	b.n	80031de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8003244:	0021      	movs	r1, r4
 8003246:	0038      	movs	r0, r7
 8003248:	f7ff ff68 	bl	800311c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800324c:	1be0      	subs	r0, r4, r7
 800324e:	7022      	strb	r2, [r4, #0]
 8003250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003252:	9901      	ldr	r1, [sp, #4]
 8003254:	e7f7      	b.n	8003246 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8003256:	3502      	adds	r5, #2
 8003258:	e7c1      	b.n	80031de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>

0800325a <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800325a:	b510      	push	{r4, lr}
 800325c:	2a00      	cmp	r2, #0
 800325e:	d001      	beq.n	8003264 <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
 8003260:	f000 fa08 	bl	8003674 <memcpy>
 8003264:	bd10      	pop	{r4, pc}

08003266 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8003266:	6001      	str	r1, [r0, #0]
 8003268:	4770      	bx	lr

0800326a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800326a:	6800      	ldr	r0, [r0, #0]
 800326c:	4770      	bx	lr

0800326e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800326e:	3008      	adds	r0, #8
 8003270:	4770      	bx	lr

08003272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8003272:	6081      	str	r1, [r0, #8]
 8003274:	4770      	bx	lr

08003276 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8003276:	2200      	movs	r2, #0
 8003278:	6803      	ldr	r3, [r0, #0]
 800327a:	6041      	str	r1, [r0, #4]
 800327c:	545a      	strb	r2, [r3, r1]
 800327e:	4770      	bx	lr

08003280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003280:	2080      	movs	r0, #128	; 0x80
 8003282:	680b      	ldr	r3, [r1, #0]
 8003284:	b510      	push	{r4, lr}
 8003286:	05c0      	lsls	r0, r0, #23
 8003288:	4283      	cmp	r3, r0
 800328a:	d302      	bcc.n	8003292 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x12>
 800328c:	480a      	ldr	r0, [pc, #40]	; (80032b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 800328e:	f7ff ff24 	bl	80030da <_ZSt20__throw_length_errorPKc>
 8003292:	4293      	cmp	r3, r2
 8003294:	d905      	bls.n	80032a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8003296:	0052      	lsls	r2, r2, #1
 8003298:	4293      	cmp	r3, r2
 800329a:	d202      	bcs.n	80032a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 800329c:	4282      	cmp	r2, r0
 800329e:	d205      	bcs.n	80032ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80032a0:	600a      	str	r2, [r1, #0]
 80032a2:	6808      	ldr	r0, [r1, #0]
 80032a4:	3001      	adds	r0, #1
 80032a6:	d504      	bpl.n	80032b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x32>
 80032a8:	f7ff ff11 	bl	80030ce <_ZSt17__throw_bad_allocv>
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3c>)
 80032ae:	600b      	str	r3, [r1, #0]
 80032b0:	e7f7      	b.n	80032a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 80032b2:	f7ff fef1 	bl	8003098 <_Znwj>
 80032b6:	bd10      	pop	{r4, pc}
 80032b8:	080039fc 	.word	0x080039fc
 80032bc:	3fffffff 	.word	0x3fffffff

080032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80032c0:	0003      	movs	r3, r0
 80032c2:	6800      	ldr	r0, [r0, #0]
 80032c4:	3308      	adds	r3, #8
 80032c6:	b510      	push	{r4, lr}
 80032c8:	4298      	cmp	r0, r3
 80032ca:	d001      	beq.n	80032d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 80032cc:	f7ff fee0 	bl	8003090 <_ZdlPv>
 80032d0:	bd10      	pop	{r4, pc}
	...

080032d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80032d4:	0003      	movs	r3, r0
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	0008      	movs	r0, r1
 80032da:	b510      	push	{r4, lr}
 80032dc:	0011      	movs	r1, r2
 80032de:	4298      	cmp	r0, r3
 80032e0:	d903      	bls.n	80032ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80032e2:	0002      	movs	r2, r0
 80032e4:	4801      	ldr	r0, [pc, #4]	; (80032ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80032e6:	f7ff fefb 	bl	80030e0 <_ZSt24__throw_out_of_range_fmtPKcz>
 80032ea:	bd10      	pop	{r4, pc}
 80032ec:	08003a14 	.word	0x08003a14

080032f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80032f0:	b510      	push	{r4, lr}
 80032f2:	4c05      	ldr	r4, [pc, #20]	; (8003308 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x18>)
 80032f4:	6840      	ldr	r0, [r0, #4]
 80032f6:	1909      	adds	r1, r1, r4
 80032f8:	1a09      	subs	r1, r1, r0
 80032fa:	4291      	cmp	r1, r2
 80032fc:	d202      	bcs.n	8003304 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x14>
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff feeb 	bl	80030da <_ZSt20__throw_length_errorPKc>
 8003304:	bd10      	pop	{r4, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	3fffffff 	.word	0x3fffffff

0800330c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800330c:	6803      	ldr	r3, [r0, #0]
 800330e:	0002      	movs	r2, r0
 8003310:	2001      	movs	r0, #1
 8003312:	428b      	cmp	r3, r1
 8003314:	d804      	bhi.n	8003320 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8003316:	6850      	ldr	r0, [r2, #4]
 8003318:	181b      	adds	r3, r3, r0
 800331a:	428b      	cmp	r3, r1
 800331c:	4189      	sbcs	r1, r1
 800331e:	4248      	negs	r0, r1
 8003320:	4770      	bx	lr

08003322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003322:	b510      	push	{r4, lr}
 8003324:	2a01      	cmp	r2, #1
 8003326:	d102      	bne.n	800332e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8003328:	780b      	ldrb	r3, [r1, #0]
 800332a:	7003      	strb	r3, [r0, #0]
 800332c:	bd10      	pop	{r4, pc}
 800332e:	f7ff ff94 	bl	800325a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8003332:	e7fb      	b.n	800332c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08003334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8003334:	b510      	push	{r4, lr}
 8003336:	2a01      	cmp	r2, #1
 8003338:	d102      	bne.n	8003340 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xc>
 800333a:	780b      	ldrb	r3, [r1, #0]
 800333c:	7003      	strb	r3, [r0, #0]
 800333e:	bd10      	pop	{r4, pc}
 8003340:	2a00      	cmp	r2, #0
 8003342:	d0fc      	beq.n	800333e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8003344:	f000 f99f 	bl	8003686 <memmove>
 8003348:	e7f9      	b.n	800333e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>

0800334a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800334a:	b510      	push	{r4, lr}
 800334c:	1a52      	subs	r2, r2, r1
 800334e:	f7ff ffe8 	bl	8003322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003352:	bd10      	pop	{r4, pc}

08003354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8003354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003356:	0004      	movs	r4, r0
 8003358:	000e      	movs	r6, r1
 800335a:	4288      	cmp	r0, r1
 800335c:	d020      	beq.n	80033a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 800335e:	0003      	movs	r3, r0
 8003360:	684d      	ldr	r5, [r1, #4]
 8003362:	6801      	ldr	r1, [r0, #0]
 8003364:	3308      	adds	r3, #8
 8003366:	220f      	movs	r2, #15
 8003368:	4299      	cmp	r1, r3
 800336a:	d000      	beq.n	800336e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x1a>
 800336c:	6882      	ldr	r2, [r0, #8]
 800336e:	42aa      	cmp	r2, r5
 8003370:	d20b      	bcs.n	800338a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 8003372:	a901      	add	r1, sp, #4
 8003374:	0020      	movs	r0, r4
 8003376:	9501      	str	r5, [sp, #4]
 8003378:	f7ff ff82 	bl	8003280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800337c:	0007      	movs	r7, r0
 800337e:	0020      	movs	r0, r4
 8003380:	f7ff ff9e 	bl	80032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003384:	9b01      	ldr	r3, [sp, #4]
 8003386:	6027      	str	r7, [r4, #0]
 8003388:	60a3      	str	r3, [r4, #8]
 800338a:	2d00      	cmp	r5, #0
 800338c:	d004      	beq.n	8003398 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 800338e:	002a      	movs	r2, r5
 8003390:	6831      	ldr	r1, [r6, #0]
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	f7ff ffc5 	bl	8003322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003398:	2200      	movs	r2, #0
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	6065      	str	r5, [r4, #4]
 800339e:	555a      	strb	r2, [r3, r5]
 80033a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080033a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80033a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a4:	001f      	movs	r7, r3
 80033a6:	6843      	ldr	r3, [r0, #4]
 80033a8:	b085      	sub	sp, #20
 80033aa:	000d      	movs	r5, r1
 80033ac:	1889      	adds	r1, r1, r2
 80033ae:	9101      	str	r1, [sp, #4]
 80033b0:	1a59      	subs	r1, r3, r1
 80033b2:	9100      	str	r1, [sp, #0]
 80033b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033b6:	0004      	movs	r4, r0
 80033b8:	1a8a      	subs	r2, r1, r2
 80033ba:	18d2      	adds	r2, r2, r3
 80033bc:	0003      	movs	r3, r0
 80033be:	6801      	ldr	r1, [r0, #0]
 80033c0:	3308      	adds	r3, #8
 80033c2:	9203      	str	r2, [sp, #12]
 80033c4:	220f      	movs	r2, #15
 80033c6:	4299      	cmp	r1, r3
 80033c8:	d000      	beq.n	80033cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x2a>
 80033ca:	6882      	ldr	r2, [r0, #8]
 80033cc:	0020      	movs	r0, r4
 80033ce:	a903      	add	r1, sp, #12
 80033d0:	f7ff ff56 	bl	8003280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80033d4:	0006      	movs	r6, r0
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	d003      	beq.n	80033e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x40>
 80033da:	002a      	movs	r2, r5
 80033dc:	6821      	ldr	r1, [r4, #0]
 80033de:	f7ff ffa0 	bl	8003322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80033e2:	2f00      	cmp	r7, #0
 80033e4:	d007      	beq.n	80033f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 80033e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 80033ec:	001a      	movs	r2, r3
 80033ee:	0039      	movs	r1, r7
 80033f0:	1970      	adds	r0, r6, r5
 80033f2:	f7ff ff96 	bl	8003322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80033f6:	9b00      	ldr	r3, [sp, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x70>
 80033fc:	6822      	ldr	r2, [r4, #0]
 80033fe:	9b01      	ldr	r3, [sp, #4]
 8003400:	4694      	mov	ip, r2
 8003402:	4463      	add	r3, ip
 8003404:	0019      	movs	r1, r3
 8003406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003408:	9a00      	ldr	r2, [sp, #0]
 800340a:	18ed      	adds	r5, r5, r3
 800340c:	1970      	adds	r0, r6, r5
 800340e:	f7ff ff88 	bl	8003322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003412:	0020      	movs	r0, r4
 8003414:	f7ff ff54 	bl	80032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003418:	9b03      	ldr	r3, [sp, #12]
 800341a:	6026      	str	r6, [r4, #0]
 800341c:	60a3      	str	r3, [r4, #8]
 800341e:	b005      	add	sp, #20
 8003420:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003422 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8003422:	0003      	movs	r3, r0
 8003424:	3308      	adds	r3, #8
 8003426:	6003      	str	r3, [r0, #0]
 8003428:	2300      	movs	r3, #0
 800342a:	6043      	str	r3, [r0, #4]
 800342c:	7203      	strb	r3, [r0, #8]
 800342e:	4770      	bx	lr

08003430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8003430:	b510      	push	{r4, lr}
 8003432:	0004      	movs	r4, r0
 8003434:	f7ff ff44 	bl	80032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003438:	0020      	movs	r0, r4
 800343a:	bd10      	pop	{r4, pc}

0800343c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800343c:	b510      	push	{r4, lr}
 800343e:	0004      	movs	r4, r0
 8003440:	f7ff ff88 	bl	8003354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8003444:	0020      	movs	r0, r4
 8003446:	bd10      	pop	{r4, pc}

08003448 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8003448:	6840      	ldr	r0, [r0, #4]
 800344a:	4770      	bx	lr

0800344c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800344c:	6840      	ldr	r0, [r0, #4]
 800344e:	4770      	bx	lr

08003450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8003450:	6800      	ldr	r0, [r0, #0]
 8003452:	1840      	adds	r0, r0, r1
 8003454:	4770      	bx	lr
	...

08003458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	0006      	movs	r6, r0
 800345c:	b087      	sub	sp, #28
 800345e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003460:	9202      	str	r2, [sp, #8]
 8003462:	9303      	str	r3, [sp, #12]
 8003464:	0022      	movs	r2, r4
 8003466:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x108>)
 8003468:	000f      	movs	r7, r1
 800346a:	9902      	ldr	r1, [sp, #8]
 800346c:	f7ff ff40 	bl	80032f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8003470:	0031      	movs	r1, r6
 8003472:	9a02      	ldr	r2, [sp, #8]
 8003474:	6873      	ldr	r3, [r6, #4]
 8003476:	1aa2      	subs	r2, r4, r2
 8003478:	6835      	ldr	r5, [r6, #0]
 800347a:	9205      	str	r2, [sp, #20]
 800347c:	3108      	adds	r1, #8
 800347e:	189a      	adds	r2, r3, r2
 8003480:	9204      	str	r2, [sp, #16]
 8003482:	220f      	movs	r2, #15
 8003484:	428d      	cmp	r5, r1
 8003486:	d000      	beq.n	800348a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x32>
 8003488:	68b2      	ldr	r2, [r6, #8]
 800348a:	9904      	ldr	r1, [sp, #16]
 800348c:	428a      	cmp	r2, r1
 800348e:	d35b      	bcc.n	8003548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>
 8003490:	9a02      	ldr	r2, [sp, #8]
 8003492:	19ed      	adds	r5, r5, r7
 8003494:	0030      	movs	r0, r6
 8003496:	19d7      	adds	r7, r2, r7
 8003498:	9903      	ldr	r1, [sp, #12]
 800349a:	1bdf      	subs	r7, r3, r7
 800349c:	f7ff ff36 	bl	800330c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d011      	beq.n	80034c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 80034a4:	2f00      	cmp	r7, #0
 80034a6:	d007      	beq.n	80034b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80034a8:	9b02      	ldr	r3, [sp, #8]
 80034aa:	42a3      	cmp	r3, r4
 80034ac:	d004      	beq.n	80034b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80034ae:	003a      	movs	r2, r7
 80034b0:	18e9      	adds	r1, r5, r3
 80034b2:	1928      	adds	r0, r5, r4
 80034b4:	f7ff ff3e 	bl	8003334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80034b8:	2c00      	cmp	r4, #0
 80034ba:	d028      	beq.n	800350e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80034bc:	0022      	movs	r2, r4
 80034be:	9903      	ldr	r1, [sp, #12]
 80034c0:	0028      	movs	r0, r5
 80034c2:	f7ff ff2e 	bl	8003322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80034c6:	e022      	b.n	800350e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80034c8:	2c00      	cmp	r4, #0
 80034ca:	d007      	beq.n	80034dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x84>
 80034cc:	9b02      	ldr	r3, [sp, #8]
 80034ce:	42a3      	cmp	r3, r4
 80034d0:	d342      	bcc.n	8003558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x100>
 80034d2:	0022      	movs	r2, r4
 80034d4:	0028      	movs	r0, r5
 80034d6:	9903      	ldr	r1, [sp, #12]
 80034d8:	f7ff ff2c 	bl	8003334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80034dc:	2f00      	cmp	r7, #0
 80034de:	d016      	beq.n	800350e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80034e0:	9b02      	ldr	r3, [sp, #8]
 80034e2:	42a3      	cmp	r3, r4
 80034e4:	d013      	beq.n	800350e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80034e6:	9b02      	ldr	r3, [sp, #8]
 80034e8:	003a      	movs	r2, r7
 80034ea:	18e9      	adds	r1, r5, r3
 80034ec:	1928      	adds	r0, r5, r4
 80034ee:	f7ff ff21 	bl	8003334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80034f2:	9b02      	ldr	r3, [sp, #8]
 80034f4:	42a3      	cmp	r3, r4
 80034f6:	d20a      	bcs.n	800350e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80034f8:	9b02      	ldr	r3, [sp, #8]
 80034fa:	18ef      	adds	r7, r5, r3
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	191b      	adds	r3, r3, r4
 8003500:	429f      	cmp	r7, r3
 8003502:	d30d      	bcc.n	8003520 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8003504:	0022      	movs	r2, r4
 8003506:	0028      	movs	r0, r5
 8003508:	9903      	ldr	r1, [sp, #12]
 800350a:	f7ff ff13 	bl	8003334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800350e:	9b04      	ldr	r3, [sp, #16]
 8003510:	0030      	movs	r0, r6
 8003512:	6073      	str	r3, [r6, #4]
 8003514:	2300      	movs	r3, #0
 8003516:	6832      	ldr	r2, [r6, #0]
 8003518:	9904      	ldr	r1, [sp, #16]
 800351a:	5453      	strb	r3, [r2, r1]
 800351c:	b007      	add	sp, #28
 800351e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003520:	9b03      	ldr	r3, [sp, #12]
 8003522:	429f      	cmp	r7, r3
 8003524:	d805      	bhi.n	8003532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xda>
 8003526:	9a05      	ldr	r2, [sp, #20]
 8003528:	4694      	mov	ip, r2
 800352a:	4463      	add	r3, ip
 800352c:	0019      	movs	r1, r3
 800352e:	0022      	movs	r2, r4
 8003530:	e7c6      	b.n	80034c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8003532:	9b03      	ldr	r3, [sp, #12]
 8003534:	0028      	movs	r0, r5
 8003536:	1aff      	subs	r7, r7, r3
 8003538:	003a      	movs	r2, r7
 800353a:	0019      	movs	r1, r3
 800353c:	f7ff fefa 	bl	8003334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003540:	1be2      	subs	r2, r4, r7
 8003542:	1929      	adds	r1, r5, r4
 8003544:	19e8      	adds	r0, r5, r7
 8003546:	e7bc      	b.n	80034c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6a>
 8003548:	0039      	movs	r1, r7
 800354a:	0030      	movs	r0, r6
 800354c:	9b03      	ldr	r3, [sp, #12]
 800354e:	9a02      	ldr	r2, [sp, #8]
 8003550:	9400      	str	r4, [sp, #0]
 8003552:	f7ff ff26 	bl	80033a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8003556:	e7da      	b.n	800350e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 8003558:	2f00      	cmp	r7, #0
 800355a:	d0cd      	beq.n	80034f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800355c:	e7c3      	b.n	80034e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8e>
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	08003a4b 	.word	0x08003a4b

08003564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8003564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003566:	0004      	movs	r4, r0
 8003568:	0008      	movs	r0, r1
 800356a:	000d      	movs	r5, r1
 800356c:	f7fc fdcc 	bl	8000108 <strlen>
 8003570:	002b      	movs	r3, r5
 8003572:	9000      	str	r0, [sp, #0]
 8003574:	2100      	movs	r1, #0
 8003576:	0020      	movs	r0, r4
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	f7ff ff6d 	bl	8003458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800357e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08003580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8003580:	b510      	push	{r4, lr}
 8003582:	f7ff ffef 	bl	8003564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8003586:	bd10      	pop	{r4, pc}

08003588 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4copyEPcjj>:
 8003588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800358a:	0006      	movs	r6, r0
 800358c:	001d      	movs	r5, r3
 800358e:	9101      	str	r1, [sp, #4]
 8003590:	0017      	movs	r7, r2
 8003592:	0019      	movs	r1, r3
 8003594:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4copyEPcjj+0x30>)
 8003596:	f7ff fe9d 	bl	80032d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800359a:	6873      	ldr	r3, [r6, #4]
 800359c:	1b5c      	subs	r4, r3, r5
 800359e:	42bc      	cmp	r4, r7
 80035a0:	d900      	bls.n	80035a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4copyEPcjj+0x1c>
 80035a2:	003c      	movs	r4, r7
 80035a4:	2c00      	cmp	r4, #0
 80035a6:	d005      	beq.n	80035b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4copyEPcjj+0x2c>
 80035a8:	6831      	ldr	r1, [r6, #0]
 80035aa:	0022      	movs	r2, r4
 80035ac:	9801      	ldr	r0, [sp, #4]
 80035ae:	1949      	adds	r1, r1, r5
 80035b0:	f7ff feb7 	bl	8003322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80035b4:	0020      	movs	r0, r4
 80035b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035b8:	08003a64 	.word	0x08003a64

080035bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80035bc:	6001      	str	r1, [r0, #0]
 80035be:	4770      	bx	lr

080035c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80035c0:	0002      	movs	r2, r0
 80035c2:	000b      	movs	r3, r1
 80035c4:	b510      	push	{r4, lr}
 80035c6:	0004      	movs	r4, r0
 80035c8:	3208      	adds	r2, #8
 80035ca:	6002      	str	r2, [r0, #0]
 80035cc:	cb06      	ldmia	r3!, {r1, r2}
 80035ce:	2300      	movs	r3, #0
 80035d0:	188a      	adds	r2, r1, r2
 80035d2:	f7fd ff17 	bl	8001404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80035d6:	0020      	movs	r0, r4
 80035d8:	bd10      	pop	{r4, pc}
	...

080035dc <_ZSt15get_new_handlerv>:
 80035dc:	4b01      	ldr	r3, [pc, #4]	; (80035e4 <_ZSt15get_new_handlerv+0x8>)
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	4770      	bx	lr
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	200000c4 	.word	0x200000c4

080035e8 <abort>:
 80035e8:	2006      	movs	r0, #6
 80035ea:	b510      	push	{r4, lr}
 80035ec:	f000 f94a 	bl	8003884 <raise>
 80035f0:	2001      	movs	r0, #1
 80035f2:	f7fe f8af 	bl	8001754 <_exit>
	...

080035f8 <__errno>:
 80035f8:	4b01      	ldr	r3, [pc, #4]	; (8003600 <__errno+0x8>)
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	4770      	bx	lr
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	2000000c 	.word	0x2000000c

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	2600      	movs	r6, #0
 8003608:	4d0c      	ldr	r5, [pc, #48]	; (800363c <__libc_init_array+0x38>)
 800360a:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <__libc_init_array+0x3c>)
 800360c:	1b64      	subs	r4, r4, r5
 800360e:	10a4      	asrs	r4, r4, #2
 8003610:	42a6      	cmp	r6, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	2600      	movs	r6, #0
 8003616:	f000 f967 	bl	80038e8 <_init>
 800361a:	4d0a      	ldr	r5, [pc, #40]	; (8003644 <__libc_init_array+0x40>)
 800361c:	4c0a      	ldr	r4, [pc, #40]	; (8003648 <__libc_init_array+0x44>)
 800361e:	1b64      	subs	r4, r4, r5
 8003620:	10a4      	asrs	r4, r4, #2
 8003622:	42a6      	cmp	r6, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	00b3      	lsls	r3, r6, #2
 800362a:	58eb      	ldr	r3, [r5, r3]
 800362c:	4798      	blx	r3
 800362e:	3601      	adds	r6, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	00b3      	lsls	r3, r6, #2
 8003634:	58eb      	ldr	r3, [r5, r3]
 8003636:	4798      	blx	r3
 8003638:	3601      	adds	r6, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	08003a78 	.word	0x08003a78
 8003640:	08003a78 	.word	0x08003a78
 8003644:	08003a78 	.word	0x08003a78
 8003648:	08003a80 	.word	0x08003a80

0800364c <malloc>:
 800364c:	b510      	push	{r4, lr}
 800364e:	4b03      	ldr	r3, [pc, #12]	; (800365c <malloc+0x10>)
 8003650:	0001      	movs	r1, r0
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	f000 f87c 	bl	8003750 <_malloc_r>
 8003658:	bd10      	pop	{r4, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	2000000c 	.word	0x2000000c

08003660 <free>:
 8003660:	b510      	push	{r4, lr}
 8003662:	4b03      	ldr	r3, [pc, #12]	; (8003670 <free+0x10>)
 8003664:	0001      	movs	r1, r0
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	f000 f828 	bl	80036bc <_free_r>
 800366c:	bd10      	pop	{r4, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	2000000c 	.word	0x2000000c

08003674 <memcpy>:
 8003674:	2300      	movs	r3, #0
 8003676:	b510      	push	{r4, lr}
 8003678:	429a      	cmp	r2, r3
 800367a:	d100      	bne.n	800367e <memcpy+0xa>
 800367c:	bd10      	pop	{r4, pc}
 800367e:	5ccc      	ldrb	r4, [r1, r3]
 8003680:	54c4      	strb	r4, [r0, r3]
 8003682:	3301      	adds	r3, #1
 8003684:	e7f8      	b.n	8003678 <memcpy+0x4>

08003686 <memmove>:
 8003686:	b510      	push	{r4, lr}
 8003688:	4288      	cmp	r0, r1
 800368a:	d902      	bls.n	8003692 <memmove+0xc>
 800368c:	188b      	adds	r3, r1, r2
 800368e:	4298      	cmp	r0, r3
 8003690:	d303      	bcc.n	800369a <memmove+0x14>
 8003692:	2300      	movs	r3, #0
 8003694:	e007      	b.n	80036a6 <memmove+0x20>
 8003696:	5c8b      	ldrb	r3, [r1, r2]
 8003698:	5483      	strb	r3, [r0, r2]
 800369a:	3a01      	subs	r2, #1
 800369c:	d2fb      	bcs.n	8003696 <memmove+0x10>
 800369e:	bd10      	pop	{r4, pc}
 80036a0:	5ccc      	ldrb	r4, [r1, r3]
 80036a2:	54c4      	strb	r4, [r0, r3]
 80036a4:	3301      	adds	r3, #1
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d1fa      	bne.n	80036a0 <memmove+0x1a>
 80036aa:	e7f8      	b.n	800369e <memmove+0x18>

080036ac <memset>:
 80036ac:	0003      	movs	r3, r0
 80036ae:	1882      	adds	r2, r0, r2
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d100      	bne.n	80036b6 <memset+0xa>
 80036b4:	4770      	bx	lr
 80036b6:	7019      	strb	r1, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	e7f9      	b.n	80036b0 <memset+0x4>

080036bc <_free_r>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	0005      	movs	r5, r0
 80036c0:	2900      	cmp	r1, #0
 80036c2:	d010      	beq.n	80036e6 <_free_r+0x2a>
 80036c4:	1f0c      	subs	r4, r1, #4
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	da00      	bge.n	80036ce <_free_r+0x12>
 80036cc:	18e4      	adds	r4, r4, r3
 80036ce:	0028      	movs	r0, r5
 80036d0:	f000 f8f8 	bl	80038c4 <__malloc_lock>
 80036d4:	4a1d      	ldr	r2, [pc, #116]	; (800374c <_free_r+0x90>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <_free_r+0x2c>
 80036dc:	6063      	str	r3, [r4, #4]
 80036de:	6014      	str	r4, [r2, #0]
 80036e0:	0028      	movs	r0, r5
 80036e2:	f000 f8f7 	bl	80038d4 <__malloc_unlock>
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	42a3      	cmp	r3, r4
 80036ea:	d908      	bls.n	80036fe <_free_r+0x42>
 80036ec:	6821      	ldr	r1, [r4, #0]
 80036ee:	1860      	adds	r0, r4, r1
 80036f0:	4283      	cmp	r3, r0
 80036f2:	d1f3      	bne.n	80036dc <_free_r+0x20>
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	1841      	adds	r1, r0, r1
 80036fa:	6021      	str	r1, [r4, #0]
 80036fc:	e7ee      	b.n	80036dc <_free_r+0x20>
 80036fe:	001a      	movs	r2, r3
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <_free_r+0x4e>
 8003706:	42a3      	cmp	r3, r4
 8003708:	d9f9      	bls.n	80036fe <_free_r+0x42>
 800370a:	6811      	ldr	r1, [r2, #0]
 800370c:	1850      	adds	r0, r2, r1
 800370e:	42a0      	cmp	r0, r4
 8003710:	d10b      	bne.n	800372a <_free_r+0x6e>
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	1809      	adds	r1, r1, r0
 8003716:	1850      	adds	r0, r2, r1
 8003718:	6011      	str	r1, [r2, #0]
 800371a:	4283      	cmp	r3, r0
 800371c:	d1e0      	bne.n	80036e0 <_free_r+0x24>
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	1841      	adds	r1, r0, r1
 8003724:	6011      	str	r1, [r2, #0]
 8003726:	6053      	str	r3, [r2, #4]
 8003728:	e7da      	b.n	80036e0 <_free_r+0x24>
 800372a:	42a0      	cmp	r0, r4
 800372c:	d902      	bls.n	8003734 <_free_r+0x78>
 800372e:	230c      	movs	r3, #12
 8003730:	602b      	str	r3, [r5, #0]
 8003732:	e7d5      	b.n	80036e0 <_free_r+0x24>
 8003734:	6821      	ldr	r1, [r4, #0]
 8003736:	1860      	adds	r0, r4, r1
 8003738:	4283      	cmp	r3, r0
 800373a:	d103      	bne.n	8003744 <_free_r+0x88>
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	1841      	adds	r1, r0, r1
 8003742:	6021      	str	r1, [r4, #0]
 8003744:	6063      	str	r3, [r4, #4]
 8003746:	6054      	str	r4, [r2, #4]
 8003748:	e7ca      	b.n	80036e0 <_free_r+0x24>
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	200000c8 	.word	0x200000c8

08003750 <_malloc_r>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	2303      	movs	r3, #3
 8003754:	1ccd      	adds	r5, r1, #3
 8003756:	439d      	bics	r5, r3
 8003758:	3508      	adds	r5, #8
 800375a:	0006      	movs	r6, r0
 800375c:	2d0c      	cmp	r5, #12
 800375e:	d21f      	bcs.n	80037a0 <_malloc_r+0x50>
 8003760:	250c      	movs	r5, #12
 8003762:	42a9      	cmp	r1, r5
 8003764:	d81e      	bhi.n	80037a4 <_malloc_r+0x54>
 8003766:	0030      	movs	r0, r6
 8003768:	f000 f8ac 	bl	80038c4 <__malloc_lock>
 800376c:	4925      	ldr	r1, [pc, #148]	; (8003804 <_malloc_r+0xb4>)
 800376e:	680a      	ldr	r2, [r1, #0]
 8003770:	0014      	movs	r4, r2
 8003772:	2c00      	cmp	r4, #0
 8003774:	d11a      	bne.n	80037ac <_malloc_r+0x5c>
 8003776:	4f24      	ldr	r7, [pc, #144]	; (8003808 <_malloc_r+0xb8>)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <_malloc_r+0x38>
 800377e:	0021      	movs	r1, r4
 8003780:	0030      	movs	r0, r6
 8003782:	f000 f843 	bl	800380c <_sbrk_r>
 8003786:	6038      	str	r0, [r7, #0]
 8003788:	0029      	movs	r1, r5
 800378a:	0030      	movs	r0, r6
 800378c:	f000 f83e 	bl	800380c <_sbrk_r>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d12b      	bne.n	80037ec <_malloc_r+0x9c>
 8003794:	230c      	movs	r3, #12
 8003796:	0030      	movs	r0, r6
 8003798:	6033      	str	r3, [r6, #0]
 800379a:	f000 f89b 	bl	80038d4 <__malloc_unlock>
 800379e:	e003      	b.n	80037a8 <_malloc_r+0x58>
 80037a0:	2d00      	cmp	r5, #0
 80037a2:	dade      	bge.n	8003762 <_malloc_r+0x12>
 80037a4:	230c      	movs	r3, #12
 80037a6:	6033      	str	r3, [r6, #0]
 80037a8:	2000      	movs	r0, #0
 80037aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	1b5b      	subs	r3, r3, r5
 80037b0:	d419      	bmi.n	80037e6 <_malloc_r+0x96>
 80037b2:	2b0b      	cmp	r3, #11
 80037b4:	d903      	bls.n	80037be <_malloc_r+0x6e>
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	18e4      	adds	r4, r4, r3
 80037ba:	6025      	str	r5, [r4, #0]
 80037bc:	e003      	b.n	80037c6 <_malloc_r+0x76>
 80037be:	6863      	ldr	r3, [r4, #4]
 80037c0:	42a2      	cmp	r2, r4
 80037c2:	d10e      	bne.n	80037e2 <_malloc_r+0x92>
 80037c4:	600b      	str	r3, [r1, #0]
 80037c6:	0030      	movs	r0, r6
 80037c8:	f000 f884 	bl	80038d4 <__malloc_unlock>
 80037cc:	0020      	movs	r0, r4
 80037ce:	2207      	movs	r2, #7
 80037d0:	300b      	adds	r0, #11
 80037d2:	1d23      	adds	r3, r4, #4
 80037d4:	4390      	bics	r0, r2
 80037d6:	1ac2      	subs	r2, r0, r3
 80037d8:	4298      	cmp	r0, r3
 80037da:	d0e6      	beq.n	80037aa <_malloc_r+0x5a>
 80037dc:	1a1b      	subs	r3, r3, r0
 80037de:	50a3      	str	r3, [r4, r2]
 80037e0:	e7e3      	b.n	80037aa <_malloc_r+0x5a>
 80037e2:	6053      	str	r3, [r2, #4]
 80037e4:	e7ef      	b.n	80037c6 <_malloc_r+0x76>
 80037e6:	0022      	movs	r2, r4
 80037e8:	6864      	ldr	r4, [r4, #4]
 80037ea:	e7c2      	b.n	8003772 <_malloc_r+0x22>
 80037ec:	2303      	movs	r3, #3
 80037ee:	1cc4      	adds	r4, r0, #3
 80037f0:	439c      	bics	r4, r3
 80037f2:	42a0      	cmp	r0, r4
 80037f4:	d0e1      	beq.n	80037ba <_malloc_r+0x6a>
 80037f6:	1a21      	subs	r1, r4, r0
 80037f8:	0030      	movs	r0, r6
 80037fa:	f000 f807 	bl	800380c <_sbrk_r>
 80037fe:	1c43      	adds	r3, r0, #1
 8003800:	d1db      	bne.n	80037ba <_malloc_r+0x6a>
 8003802:	e7c7      	b.n	8003794 <_malloc_r+0x44>
 8003804:	200000c8 	.word	0x200000c8
 8003808:	200000cc 	.word	0x200000cc

0800380c <_sbrk_r>:
 800380c:	2300      	movs	r3, #0
 800380e:	b570      	push	{r4, r5, r6, lr}
 8003810:	4d06      	ldr	r5, [pc, #24]	; (800382c <_sbrk_r+0x20>)
 8003812:	0004      	movs	r4, r0
 8003814:	0008      	movs	r0, r1
 8003816:	602b      	str	r3, [r5, #0]
 8003818:	f7fd ffa8 	bl	800176c <_sbrk>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d103      	bne.n	8003828 <_sbrk_r+0x1c>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d000      	beq.n	8003828 <_sbrk_r+0x1c>
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	200001ac 	.word	0x200001ac

08003830 <_raise_r>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	0004      	movs	r4, r0
 8003834:	000d      	movs	r5, r1
 8003836:	291f      	cmp	r1, #31
 8003838:	d904      	bls.n	8003844 <_raise_r+0x14>
 800383a:	2316      	movs	r3, #22
 800383c:	6003      	str	r3, [r0, #0]
 800383e:	2001      	movs	r0, #1
 8003840:	4240      	negs	r0, r0
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <_raise_r+0x24>
 800384a:	008a      	lsls	r2, r1, #2
 800384c:	189b      	adds	r3, r3, r2
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	2a00      	cmp	r2, #0
 8003852:	d108      	bne.n	8003866 <_raise_r+0x36>
 8003854:	0020      	movs	r0, r4
 8003856:	f000 f831 	bl	80038bc <_getpid_r>
 800385a:	002a      	movs	r2, r5
 800385c:	0001      	movs	r1, r0
 800385e:	0020      	movs	r0, r4
 8003860:	f000 f81a 	bl	8003898 <_kill_r>
 8003864:	e7ed      	b.n	8003842 <_raise_r+0x12>
 8003866:	2000      	movs	r0, #0
 8003868:	2a01      	cmp	r2, #1
 800386a:	d0ea      	beq.n	8003842 <_raise_r+0x12>
 800386c:	1c51      	adds	r1, r2, #1
 800386e:	d103      	bne.n	8003878 <_raise_r+0x48>
 8003870:	2316      	movs	r3, #22
 8003872:	3001      	adds	r0, #1
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	e7e4      	b.n	8003842 <_raise_r+0x12>
 8003878:	2400      	movs	r4, #0
 800387a:	0028      	movs	r0, r5
 800387c:	601c      	str	r4, [r3, #0]
 800387e:	4790      	blx	r2
 8003880:	0020      	movs	r0, r4
 8003882:	e7de      	b.n	8003842 <_raise_r+0x12>

08003884 <raise>:
 8003884:	b510      	push	{r4, lr}
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <raise+0x10>)
 8003888:	0001      	movs	r1, r0
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	f7ff ffd0 	bl	8003830 <_raise_r>
 8003890:	bd10      	pop	{r4, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	2000000c 	.word	0x2000000c

08003898 <_kill_r>:
 8003898:	2300      	movs	r3, #0
 800389a:	b570      	push	{r4, r5, r6, lr}
 800389c:	4d06      	ldr	r5, [pc, #24]	; (80038b8 <_kill_r+0x20>)
 800389e:	0004      	movs	r4, r0
 80038a0:	0008      	movs	r0, r1
 80038a2:	0011      	movs	r1, r2
 80038a4:	602b      	str	r3, [r5, #0]
 80038a6:	f7fd ff45 	bl	8001734 <_kill>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	d103      	bne.n	80038b6 <_kill_r+0x1e>
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d000      	beq.n	80038b6 <_kill_r+0x1e>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	200001ac 	.word	0x200001ac

080038bc <_getpid_r>:
 80038bc:	b510      	push	{r4, lr}
 80038be:	f7fd ff33 	bl	8001728 <_getpid>
 80038c2:	bd10      	pop	{r4, pc}

080038c4 <__malloc_lock>:
 80038c4:	b510      	push	{r4, lr}
 80038c6:	4802      	ldr	r0, [pc, #8]	; (80038d0 <__malloc_lock+0xc>)
 80038c8:	f000 f80c 	bl	80038e4 <__retarget_lock_acquire_recursive>
 80038cc:	bd10      	pop	{r4, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	200001b4 	.word	0x200001b4

080038d4 <__malloc_unlock>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	4802      	ldr	r0, [pc, #8]	; (80038e0 <__malloc_unlock+0xc>)
 80038d8:	f000 f805 	bl	80038e6 <__retarget_lock_release_recursive>
 80038dc:	bd10      	pop	{r4, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	200001b4 	.word	0x200001b4

080038e4 <__retarget_lock_acquire_recursive>:
 80038e4:	4770      	bx	lr

080038e6 <__retarget_lock_release_recursive>:
 80038e6:	4770      	bx	lr

080038e8 <_init>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr

080038f4 <_fini>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr
