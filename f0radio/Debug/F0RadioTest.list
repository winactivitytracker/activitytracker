
F0RadioTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051bc  080051bc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080051bc  080051bc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051bc  080051bc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080051cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000006c  08005238  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08005238  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000328fc  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d0f  00000000  00000000  00052990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  000566a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  00057cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014843  00000000  00000000  000591e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128a0  00000000  00000000  0006da2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b103  00000000  00000000  000802cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb3ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad8  00000000  00000000  000fb424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005004 	.word	0x08005004

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005004 	.word	0x08005004

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b089      	sub	sp, #36	; 0x24
 8000234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000236:	240c      	movs	r4, #12
 8000238:	193b      	adds	r3, r7, r4
 800023a:	0018      	movs	r0, r3
 800023c:	2314      	movs	r3, #20
 800023e:	001a      	movs	r2, r3
 8000240:	2100      	movs	r1, #0
 8000242:	f004 fdc1 	bl	8004dc8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b3d      	ldr	r3, [pc, #244]	; (800033c <MX_GPIO_Init+0x10c>)
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	4b3c      	ldr	r3, [pc, #240]	; (800033c <MX_GPIO_Init+0x10c>)
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	0289      	lsls	r1, r1, #10
 8000250:	430a      	orrs	r2, r1
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	4b39      	ldr	r3, [pc, #228]	; (800033c <MX_GPIO_Init+0x10c>)
 8000256:	695a      	ldr	r2, [r3, #20]
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	029b      	lsls	r3, r3, #10
 800025c:	4013      	ands	r3, r2
 800025e:	60bb      	str	r3, [r7, #8]
 8000260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <MX_GPIO_Init+0x10c>)
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	4b35      	ldr	r3, [pc, #212]	; (800033c <MX_GPIO_Init+0x10c>)
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	02c9      	lsls	r1, r1, #11
 800026c:	430a      	orrs	r2, r1
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <MX_GPIO_Init+0x10c>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	02db      	lsls	r3, r3, #11
 8000278:	4013      	ands	r3, r2
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 800027e:	2390      	movs	r3, #144	; 0x90
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	2201      	movs	r2, #1
 8000284:	2104      	movs	r1, #4
 8000286:	0018      	movs	r0, r3
 8000288:	f003 f9ca 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 800028c:	4b2c      	ldr	r3, [pc, #176]	; (8000340 <MX_GPIO_Init+0x110>)
 800028e:	2201      	movs	r2, #1
 8000290:	2104      	movs	r1, #4
 8000292:	0018      	movs	r0, r3
 8000294:	f003 f9c4 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEND_GPIO_Port, SEND_Pin, GPIO_PIN_RESET);
 8000298:	4b29      	ldr	r3, [pc, #164]	; (8000340 <MX_GPIO_Init+0x110>)
 800029a:	2200      	movs	r2, #0
 800029c:	2108      	movs	r1, #8
 800029e:	0018      	movs	r0, r3
 80002a0:	f003 f9be 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_Pin;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2204      	movs	r2, #4
 80002a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2201      	movs	r2, #1
 80002ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2203      	movs	r2, #3
 80002ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 80002bc:	193a      	adds	r2, r7, r4
 80002be:	2390      	movs	r3, #144	; 0x90
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f003 f83b 	bl	8003340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RECEIVE_Pin;
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2202      	movs	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RECEIVE_GPIO_Port, &GPIO_InitStruct);
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	4a18      	ldr	r2, [pc, #96]	; (8000340 <MX_GPIO_Init+0x110>)
 80002e0:	0019      	movs	r1, r3
 80002e2:	0010      	movs	r0, r2
 80002e4:	f003 f82c 	bl	8003340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2204      	movs	r2, #4
 80002ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2201      	movs	r2, #1
 80002f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2203      	movs	r2, #3
 80002fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000300:	193b      	adds	r3, r7, r4
 8000302:	4a0f      	ldr	r2, [pc, #60]	; (8000340 <MX_GPIO_Init+0x110>)
 8000304:	0019      	movs	r1, r3
 8000306:	0010      	movs	r0, r2
 8000308:	f003 f81a 	bl	8003340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEND_Pin;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2208      	movs	r2, #8
 8000312:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SEND_GPIO_Port, &GPIO_InitStruct);
 8000326:	187b      	adds	r3, r7, r1
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <MX_GPIO_Init+0x110>)
 800032a:	0019      	movs	r1, r3
 800032c:	0010      	movs	r0, r2
 800032e:	f003 f807 	bl	8003340 <HAL_GPIO_Init>

}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b009      	add	sp, #36	; 0x24
 8000338:	bd90      	pop	{r4, r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021000 	.word	0x40021000
 8000340:	48000400 	.word	0x48000400

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034a:	f002 ff1b 	bl	8003184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034e:	f000 f827 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000352:	f7ff ff6d 	bl	8000230 <MX_GPIO_Init>
  MX_TIM15_Init();
 8000356:	f002 fc29 	bl	8002bac <MX_TIM15_Init>
  MX_TIM16_Init();
 800035a:	f002 fc7f 	bl	8002c5c <MX_TIM16_Init>
  //char * message = "yo";
  //radioSend(message);

  // Enable the timer interrupt for the transmitter
  //HAL_TIM_Base_Start_IT(&htim15);
  HAL_TIM_Base_Start_IT(&htim16);
 800035e:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <main+0x50>)
 8000360:	0018      	movs	r0, r3
 8000362:	f003 fe61 	bl	8004028 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(RED_GPIO_Port,RED_Pin,GPIO_PIN_RESET);
 8000366:	2390      	movs	r3, #144	; 0x90
 8000368:	05db      	lsls	r3, r3, #23
 800036a:	2200      	movs	r2, #0
 800036c:	2104      	movs	r1, #4
 800036e:	0018      	movs	r0, r3
 8000370:	f003 f956 	bl	8003620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_GPIO_Port,GREEN_Pin,GPIO_PIN_RESET);
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <main+0x54>)
 8000376:	2200      	movs	r2, #0
 8000378:	2104      	movs	r1, #4
 800037a:	0018      	movs	r0, r3
 800037c:	f003 f950 	bl	8003620 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  radioEnableReceiver();
 8000380:	f000 f8ce 	bl	8000520 <radioEnableReceiver>

    /* USER CODE BEGIN 3 */
	//radioSend(message);
	//HAL_Delay(5000);

	char* incoming = "";
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <main+0x58>)
 8000386:	607b      	str	r3, [r7, #4]
	if(radioReceive(&incoming))
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	0018      	movs	r0, r3
 800038c:	f000 f8a2 	bl	80004d4 <radioReceive>
  {
 8000390:	e7f8      	b.n	8000384 <main+0x40>
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	200001d8 	.word	0x200001d8
 8000398:	48000400 	.word	0x48000400
 800039c:	0800501c 	.word	0x0800501c

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b091      	sub	sp, #68	; 0x44
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	2410      	movs	r4, #16
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	0018      	movs	r0, r3
 80003ac:	2330      	movs	r3, #48	; 0x30
 80003ae:	001a      	movs	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	f004 fd09 	bl	8004dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b6:	003b      	movs	r3, r7
 80003b8:	0018      	movs	r0, r3
 80003ba:	2310      	movs	r3, #16
 80003bc:	001a      	movs	r2, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	f004 fd02 	bl	8004dc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c4:	0021      	movs	r1, r4
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2202      	movs	r2, #2
 80003ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2201      	movs	r2, #1
 80003d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2210      	movs	r2, #16
 80003d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2202      	movs	r2, #2
 80003dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	22a0      	movs	r2, #160	; 0xa0
 80003e8:	0392      	lsls	r2, r2, #14
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	0018      	movs	r0, r3
 80003f6:	f003 f931 	bl	800365c <HAL_RCC_OscConfig>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003fe:	f000 f82b 	bl	8000458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	003b      	movs	r3, r7
 8000404:	2207      	movs	r2, #7
 8000406:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	003b      	movs	r3, r7
 800040a:	2202      	movs	r2, #2
 800040c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	003b      	movs	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000414:	003b      	movs	r3, r7
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041a:	003b      	movs	r3, r7
 800041c:	2101      	movs	r1, #1
 800041e:	0018      	movs	r0, r3
 8000420:	f003 fc36 	bl	8003c90 <HAL_RCC_ClockConfig>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000428:	f000 f816 	bl	8000458 <Error_Handler>
  }
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b011      	add	sp, #68	; 0x44
 8000432:	bd90      	pop	{r4, r7, pc}

08000434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d101      	bne.n	800044a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000446:	f002 feb1 	bl	80031ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	40000400 	.word	0x40000400

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000460:	e7fe      	b.n	8000460 <Error_Handler+0x8>

08000462 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	429a      	cmp	r2, r3
 8000472:	d206      	bcs.n	8000482 <_ZSt16__deque_buf_sizej+0x20>
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	0098      	lsls	r0, r3, #2
 800047a:	f7ff fe4d 	bl	8000118 <__udivsi3>
 800047e:	0003      	movs	r3, r0
 8000480:	e000      	b.n	8000484 <_ZSt16__deque_buf_sizej+0x22>
 8000482:	2301      	movs	r3, #1
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	b002      	add	sp, #8
 800048a:	bd80      	pop	{r7, pc}

0800048c <_ZN11transmitterC1Ev>:
#define SEND_HIGH		(GPIOB->BSRR = GPIO_BSRR_BS_3)
#define SEND_LOW		(GPIOB->BSRR = GPIO_BSRR_BR_3)
#define RED_HIGH		(GPIOA->BSRR = GPIO_BSRR_BS_2)
#define RED_LOW			(GPIOA->BSRR = GPIO_BSRR_BR_2)

class transmitter
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	0018      	movs	r0, r3
 8000498:	f000 f866 	bl	8000568 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3328      	adds	r3, #40	; 0x28
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 f893 	bl	80005cc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <_ZN8receiverC1Ev>:
#define GREEN_HIGH		(GPIOB->BSRR = GPIO_BSRR_BS_2)
#define GREEN_LOW		(GPIOB->BSRR = GPIO_BSRR_BR_2)
#define RED_HIGH		(GPIOA->BSRR = GPIO_BSRR_BS_2)
#define RED_LOW			(GPIOA->BSRR = GPIO_BSRR_BR_2)

class receiver
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 f854 	bl	8000568 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3328      	adds	r3, #40	; 0x28
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 f881 	bl	80005cc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	0018      	movs	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <radioReceive>:

	t.send(messageString);
}

bool radioReceive(char* *str)
{
 80004d4:	b5b0      	push	{r4, r5, r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	if(r.checkMessage())
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <radioReceive+0x48>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 f917 	bl	8001712 <_ZN8receiver12checkMessageEv>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d013      	beq.n	8000510 <radioReceive+0x3c>
	{
		// Get the filled up message object
		string message = r.popMessage();
 80004e8:	2508      	movs	r5, #8
 80004ea:	197b      	adds	r3, r7, r5
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <radioReceive+0x48>)
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 f91f 	bl	8001734 <_ZN8receiver10popMessageB5cxx11Ev>

		*str = const_cast<char*>(message.c_str());
 80004f6:	197b      	adds	r3, r7, r5
 80004f8:	0018      	movs	r0, r3
 80004fa:	f004 fb8f 	bl	8004c1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80004fe:	0002      	movs	r2, r0
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	601a      	str	r2, [r3, #0]

		//message.copy(*str, message.size() + 1);
		//strcpy(*str,message.c_str());

		return true;
 8000504:	2401      	movs	r4, #1
		string message = r.popMessage();
 8000506:	197b      	adds	r3, r7, r5
 8000508:	0018      	movs	r0, r3
 800050a:	f004 fb0f 	bl	8004b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800050e:	e000      	b.n	8000512 <radioReceive+0x3e>
	}
	else
	{
		// There is no message in the queue
		return false;
 8000510:	2400      	movs	r4, #0
 8000512:	0023      	movs	r3, r4
	}
}
 8000514:	0018      	movs	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	b008      	add	sp, #32
 800051a:	bdb0      	pop	{r4, r5, r7, pc}
 800051c:	200000dc 	.word	0x200000dc

08000520 <radioEnableReceiver>:

void radioEnableReceiver()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	r.enable();
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <radioEnableReceiver+0x14>)
 8000526:	0018      	movs	r0, r3
 8000528:	f001 f82c 	bl	8001584 <_ZN8receiver6enableEv>
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	200000dc 	.word	0x200000dc

08000538 <radioSendTick>:
{
	r.disable();
}

void radioSendTick()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	t.tick();
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <radioSendTick+0x14>)
 800053e:	0018      	movs	r0, r3
 8000540:	f002 fcb8 	bl	8002eb4 <_ZN11transmitter4tickEv>
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	20000088 	.word	0x20000088

08000550 <radioReceiveTick>:

void radioReceiveTick()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	r.tick();
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <radioReceiveTick+0x14>)
 8000556:	0018      	movs	r0, r3
 8000558:	f001 f904 	bl	8001764 <_ZN8receiver4tickEv>
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	200000dc 	.word	0x200000dc

08000568 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	0018      	movs	r0, r3
 8000574:	f000 f869 	bl	800064a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	0018      	movs	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	b002      	add	sp, #8
 8000580:	bd80      	pop	{r7, pc}

08000582 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8000582:	b5b0      	push	{r4, r5, r7, lr}
 8000584:	b08a      	sub	sp, #40	; 0x28
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800058a:	2408      	movs	r4, #8
 800058c:	193b      	adds	r3, r7, r4
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 f88d 	bl	80006b2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8000598:	2518      	movs	r5, #24
 800059a:	197b      	adds	r3, r7, r5
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 f897 	bl	80006d4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 f8a4 	bl	80006f6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80005ae:	0003      	movs	r3, r0
 80005b0:	197a      	adds	r2, r7, r5
 80005b2:	1939      	adds	r1, r7, r4
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f8c1 	bl	800073c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 f856 	bl	800066e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	0018      	movs	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b00a      	add	sp, #40	; 0x28
 80005ca:	bdb0      	pop	{r4, r5, r7, pc}

080005cc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>:
      deque() : _Base() { }
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 f8dc 	bl	8000794 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EEC1Ev>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>:
      ~deque()
 80005e6:	b5b0      	push	{r4, r5, r7, lr}
 80005e8:	b08a      	sub	sp, #40	; 0x28
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80005ee:	2408      	movs	r4, #8
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	0011      	movs	r1, r2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 f900 	bl	80007fc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>
 80005fc:	2518      	movs	r5, #24
 80005fe:	197b      	adds	r3, r7, r5
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f000 f90a 	bl	800081e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	0018      	movs	r0, r3
 800060e:	f000 f917 	bl	8000840 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8000612:	0003      	movs	r3, r0
 8000614:	197a      	adds	r2, r7, r5
 8000616:	1939      	adds	r1, r7, r4
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f934 	bl	8000886 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	0018      	movs	r0, r3
 8000622:	f000 f8c9 	bl	80007b8 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b00a      	add	sp, #40	; 0x28
 800062e:	bdb0      	pop	{r4, r5, r7, pc}

08000630 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f94b 	bl	80008d6 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0018      	movs	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}

0800064a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Deque_base()
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	0018      	movs	r0, r3
 8000656:	f000 f921 	bl	800089c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f946 	bl	80008f0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	0018      	movs	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}

0800066e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d010      	beq.n	80006a0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000686:	1d1a      	adds	r2, r3, #4
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	0018      	movs	r0, r3
 800068c:	f000 f99c 	bl	80009c8 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	0018      	movs	r0, r3
 800069c:	f000 f9af 	bl	80009fe <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>
    }
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ffc4 	bl	8000630 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	0018      	movs	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	3308      	adds	r3, #8
 80006c0:	001a      	movs	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	0011      	movs	r1, r2
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 f81e 	bl	8000708 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	3318      	adds	r3, #24
 80006e2:	001a      	movs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 f80d 	bl	8000708 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}

08000708 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	689a      	ldr	r2, [r3, #8]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	68da      	ldr	r2, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	b002      	add	sp, #8
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	2410      	movs	r4, #16
 800074e:	193b      	adds	r3, r7, r4
 8000750:	0011      	movs	r1, r2
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ffd8 	bl	8000708 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	2520      	movs	r5, #32
 800075c:	197b      	adds	r3, r7, r5
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ffd1 	bl	8000708 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8000766:	197a      	adds	r2, r7, r5
 8000768:	1939      	adds	r1, r7, r4
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	0018      	movs	r0, r3
 800076e:	f000 f961 	bl	8000a34 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>
      }
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b00c      	add	sp, #48	; 0x30
 8000778:	bdb0      	pop	{r4, r5, r7, pc}

0800077a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	0018      	movs	r0, r3
 8000786:	f000 f9d0 	bl	8000b2a <_ZNSaISt6bitsetILj8EEED1Ev>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	b002      	add	sp, #8
 8000792:	bd80      	pop	{r7, pc}

08000794 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EEC1Ev>:
      _Deque_base()
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 f9a6 	bl	8000af0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 f9cb 	bl	8000b44 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_initialize_mapEj>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d010      	beq.n	80007ea <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80007d0:	1d1a      	adds	r2, r3, #4
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fa1d 	bl	8000c14 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6819      	ldr	r1, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fa30 	bl	8000c4a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	0018      	movs	r0, r3
 80007ee:	f7ff ffc4 	bl	800077a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implD1Ev>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	3308      	adds	r3, #8
 800080a:	001a      	movs	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f000 f81e 	bl	8000852 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}

0800081e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3318      	adds	r3, #24
 800082c:	001a      	movs	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f000 f80d 	bl	8000852 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}

08000852 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}

08000886 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 8000886:	b580      	push	{r7, lr}
 8000888:	b08c      	sub	sp, #48	; 0x30
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	603b      	str	r3, [r7, #0]
      }
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b00c      	add	sp, #48	; 0x30
 800089a:	bd80      	pop	{r7, pc}

0800089c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>:
	_Deque_impl()
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 f9ea 	bl	8000c80 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3308      	adds	r3, #8
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 f9ec 	bl	8000c9a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3318      	adds	r3, #24
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 f9e7 	bl	8000c9a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
	{ }
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 f9ef 	bl	8000cc4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 80008fa:	2018      	movs	r0, #24
 80008fc:	f7ff fdb1 	bl	8000462 <_ZSt16__deque_buf_sizej>
 8000900:	0003      	movs	r3, r0
 8000902:	0019      	movs	r1, r3
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f7ff fc07 	bl	8000118 <__udivsi3>
 800090a:	0003      	movs	r3, r0
 800090c:	3301      	adds	r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000910:	2308      	movs	r3, #8
 8000912:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	3302      	adds	r3, #2
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	2310      	movs	r3, #16
 800091c:	18fa      	adds	r2, r7, r3
 800091e:	230c      	movs	r3, #12
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0011      	movs	r1, r2
 8000924:	0018      	movs	r0, r3
 8000926:	f000 f9d6 	bl	8000cd6 <_ZSt3maxIjERKT_S2_S2_>
 800092a:	0003      	movs	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685a      	ldr	r2, [r3, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f9dd 	bl	8000cfa <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 8000940:	0002      	movs	r2, r0
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6859      	ldr	r1, [r3, #4]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	1acb      	subs	r3, r1, r3
 8000952:	085b      	lsrs	r3, r3, #1
 8000954:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000956:	18d3      	adds	r3, r2, r3
 8000958:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	18d3      	adds	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	69b9      	ldr	r1, [r7, #24]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f9e2 	bl	8000d34 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3308      	adds	r3, #8
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f000 f9f6 	bl	8000d6a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3318      	adds	r3, #24
 8000982:	001a      	movs	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3b04      	subs	r3, #4
 8000988:	0019      	movs	r1, r3
 800098a:	0010      	movs	r0, r2
 800098c:	f000 f9ed 	bl	8000d6a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800099c:	2018      	movs	r0, #24
 800099e:	f7ff fd60 	bl	8000462 <_ZSt16__deque_buf_sizej>
 80009a2:	0002      	movs	r2, r0
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff fc3b 	bl	8000224 <__aeabi_uidivmod>
 80009ae:	000b      	movs	r3, r1
 80009b0:	001a      	movs	r2, r3
					+ __num_elements
 80009b2:	0013      	movs	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	189b      	adds	r3, r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	619a      	str	r2, [r3, #24]
    }
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b009      	add	sp, #36	; 0x24
 80009c6:	bd90      	pop	{r4, r7, pc}

080009c8 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d20a      	bcs.n	80009f6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x2e>
	_M_deallocate_node(*__n);
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 f9da 	bl	8000da2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3304      	adds	r3, #4
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e7f0      	b.n	80009d8 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x10>
    }
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b006      	add	sp, #24
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80009fe:	b590      	push	{r4, r7, lr}
 8000a00:	b087      	sub	sp, #28
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000a0a:	2414      	movs	r4, #20
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 f9d8 	bl	8000dc8 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	68b9      	ldr	r1, [r7, #8]
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f9f2 	bl	8000e08 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 f9e1 	bl	8000dee <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
      }
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b007      	add	sp, #28
 8000a32:	bd90      	pop	{r4, r7, pc}

08000a34 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>:
        }
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 8000a34:	b5b0      	push	{r4, r5, r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	3304      	adds	r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d219      	bcs.n	8000a86 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	681d      	ldr	r5, [r3, #0]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	681c      	ldr	r4, [r3, #0]
 8000a5a:	f000 f9e5 	bl	8000e28 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>
 8000a5e:	0002      	movs	r2, r0
 8000a60:	0013      	movs	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	18e4      	adds	r4, r4, r3
		       _M_get_Tp_allocator());
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff fe42 	bl	80006f6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000a72:	0003      	movs	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8000a74:	001a      	movs	r2, r3
 8000a76:	0021      	movs	r1, r4
 8000a78:	0028      	movs	r0, r5
 8000a7a:	f000 f9de 	bl	8000e3a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3304      	adds	r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e7e0      	b.n	8000a48 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x14>

       if (__first._M_node != __last._M_node)
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d01c      	beq.n	8000acc <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	681c      	ldr	r4, [r3, #0]
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff fe2a 	bl	80006f6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000aa2:	0003      	movs	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	0029      	movs	r1, r5
 8000aa8:	0020      	movs	r0, r4
 8000aaa:	f000 f9c6 	bl	8000e3a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685c      	ldr	r4, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fe1c 	bl	80006f6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000abe:	0003      	movs	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	0029      	movs	r1, r5
 8000ac4:	0020      	movs	r0, r4
 8000ac6:	f000 f9b8 	bl	8000e3a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8000aca:	e00d      	b.n	8000ae8 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	681c      	ldr	r4, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff fe0d 	bl	80006f6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000adc:	0003      	movs	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8000ade:	001a      	movs	r2, r3
 8000ae0:	0029      	movs	r1, r5
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	f000 f9a9 	bl	8000e3a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
     }
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b006      	add	sp, #24
 8000aee:	bdb0      	pop	{r4, r5, r7, pc}

08000af0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl()
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f9ad 	bl	8000e5a <_ZNSaISt6bitsetILj8EEEC1Ev>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3308      	adds	r3, #8
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 f9af 	bl	8000e74 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3318      	adds	r3, #24
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 f9aa 	bl	8000e74 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>
	{ }
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	0018      	movs	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_ZNSaISt6bitsetILj8EEED1Ev>:
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 f9b2 	bl	8000e9e <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEED1Ev>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f7ff fc87 	bl	8000462 <_ZSt16__deque_buf_sizej>
 8000b54:	0003      	movs	r3, r0
 8000b56:	0019      	movs	r1, r3
 8000b58:	6838      	ldr	r0, [r7, #0]
 8000b5a:	f7ff fadd 	bl	8000118 <__udivsi3>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	3301      	adds	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000b64:	2308      	movs	r3, #8
 8000b66:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	2310      	movs	r3, #16
 8000b70:	18fa      	adds	r2, r7, r3
 8000b72:	230c      	movs	r3, #12
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 f8ac 	bl	8000cd6 <_ZSt3maxIjERKT_S2_S2_>
 8000b7e:	0003      	movs	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 f98e 	bl	8000eb0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>
 8000b94:	0002      	movs	r2, r0
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6859      	ldr	r1, [r3, #4]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	1acb      	subs	r3, r1, r3
 8000ba6:	085b      	lsrs	r3, r3, #1
 8000ba8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000baa:	18d3      	adds	r3, r2, r3
 8000bac:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	69b9      	ldr	r1, [r7, #24]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 f993 	bl	8000eea <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3308      	adds	r3, #8
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 f9a7 	bl	8000f20 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3318      	adds	r3, #24
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0019      	movs	r1, r3
 8000bde:	0010      	movs	r0, r2
 8000be0:	f000 f99e 	bl	8000f20 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000bf0:	2004      	movs	r0, #4
 8000bf2:	f7ff fc36 	bl	8000462 <_ZSt16__deque_buf_sizej>
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fb11 	bl	8000224 <__aeabi_uidivmod>
 8000c02:	000b      	movs	r3, r1
					+ __num_elements
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	619a      	str	r2, [r3, #24]
    }
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b009      	add	sp, #36	; 0x24
 8000c12:	bd90      	pop	{r4, r7, pc}

08000c14 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d20a      	bcs.n	8000c42 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2e>
	_M_deallocate_node(*__n);
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 f98c 	bl	8000f52 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e7f0      	b.n	8000c24 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b006      	add	sp, #24
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8000c4a:	b590      	push	{r4, r7, lr}
 8000c4c:	b087      	sub	sp, #28
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000c56:	2414      	movs	r4, #20
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 f98a 	bl	8000f78 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 f9a4 	bl	8000fb8 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f993 	bl	8000f9e <_ZNSaIPSt6bitsetILj8EEED1Ev>
      }
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b007      	add	sp, #28
 8000c7e:	bd90      	pop	{r4, r7, pc}

08000c80 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f9a4 	bl	8000fd8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d201      	bcs.n	8000cf0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	e000      	b.n	8000cf2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000cf0:	687b      	ldr	r3, [r7, #4]
    }
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8000cfa:	b5b0      	push	{r4, r5, r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000d04:	250c      	movs	r5, #12
 8000d06:	197b      	adds	r3, r7, r5
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 f85b 	bl	8000dc8 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	197b      	adds	r3, r7, r5
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 f966 	bl	8000fea <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>
 8000d1e:	0004      	movs	r4, r0
 8000d20:	46c0      	nop			; (mov r8, r8)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000d22:	197b      	adds	r3, r7, r5
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 f862 	bl	8000dee <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000d2a:	0023      	movs	r3, r4
      }
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b004      	add	sp, #16
 8000d32:	bdb0      	pop	{r4, r5, r7, pc}

08000d34 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d20a      	bcs.n	8000d62 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x2e>
	    *__cur = this->_M_allocate_node();
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f95b 	bl	800100a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 8000d54:	0002      	movs	r2, r0
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e7f0      	b.n	8000d44 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x10>
    }
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b006      	add	sp, #24
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685c      	ldr	r4, [r3, #4]
 8000d86:	f000 f952 	bl	800102e <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	189b      	adds	r3, r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	18e2      	adds	r2, r4, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	609a      	str	r2, [r3, #8]
      }
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b003      	add	sp, #12
 8000da0:	bd90      	pop	{r4, r7, pc}

08000da2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8000da2:	b590      	push	{r4, r7, lr}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8000dac:	687c      	ldr	r4, [r7, #4]
 8000dae:	2018      	movs	r0, #24
 8000db0:	f7ff fb57 	bl	8000462 <_ZSt16__deque_buf_sizej>
 8000db4:	0002      	movs	r2, r0
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	0019      	movs	r1, r3
 8000dba:	0020      	movs	r0, r4
 8000dbc:	f000 f940 	bl	8001040 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd90      	pop	{r4, r7, pc}

08000dc8 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 f943 	bl	8001060 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000dda:	0002      	movs	r2, r0
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 f946 	bl	8001072 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f000 f948 	bl	800108e <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 f940 	bl	80010a0 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8000e2c:	2018      	movs	r0, #24
 8000e2e:	f7ff fb18 	bl	8000462 <_ZSt16__deque_buf_sizej>
 8000e32:	0003      	movs	r3, r0
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f000 f935 	bl	80010bc <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b004      	add	sp, #16
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_ZNSaISt6bitsetILj8EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 f938 	bl	80010da <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEEC1Ev>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEED1Ev>:
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000eba:	250c      	movs	r5, #12
 8000ebc:	197b      	adds	r3, r7, r5
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 f858 	bl	8000f78 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	197b      	adds	r3, r7, r5
 8000ecc:	0011      	movs	r1, r2
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 f90c 	bl	80010ec <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE8allocateERS3_j>
 8000ed4:	0004      	movs	r4, r0
 8000ed6:	46c0      	nop			; (mov r8, r8)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000ed8:	197b      	adds	r3, r7, r5
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 f85f 	bl	8000f9e <_ZNSaIPSt6bitsetILj8EEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000ee0:	0023      	movs	r3, r4
      }
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bdb0      	pop	{r4, r5, r7, pc}

08000eea <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d20a      	bcs.n	8000f18 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2e>
	    *__cur = this->_M_allocate_node();
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 f901 	bl	800110c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3304      	adds	r3, #4
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e7f0      	b.n	8000efa <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b006      	add	sp, #24
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685c      	ldr	r4, [r3, #4]
 8000f3c:	f000 f8f8 	bl	8001130 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>
 8000f40:	0003      	movs	r3, r0
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	18e2      	adds	r2, r4, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	609a      	str	r2, [r3, #8]
      }
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b003      	add	sp, #12
 8000f50:	bd90      	pop	{r4, r7, pc}

08000f52 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8000f52:	b590      	push	{r4, r7, lr}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8000f5c:	687c      	ldr	r4, [r7, #4]
 8000f5e:	2004      	movs	r0, #4
 8000f60:	f7ff fa7f 	bl	8000462 <_ZSt16__deque_buf_sizej>
 8000f64:	0002      	movs	r2, r0
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0020      	movs	r0, r4
 8000f6c:	f000 f8e9 	bl	8001142 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE10deallocateERS2_PS1_j>
      }
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b003      	add	sp, #12
 8000f76:	bd90      	pop	{r4, r7, pc}

08000f78 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 f8ec 	bl	8001162 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	0011      	movs	r1, r2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f000 f8ef 	bl	8001174 <_ZNSaIPSt6bitsetILj8EEEC1IS0_EERKSaIT_E>
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_ZNSaIPSt6bitsetILj8EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 f8f1 	bl	8001190 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEED1Ev>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 f8e9 	bl	80011a2 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE10deallocateEPS3_j>
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 f8df 	bl	80011be <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8001000:	0003      	movs	r3, r0
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}

0800100a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8001012:	687c      	ldr	r4, [r7, #4]
 8001014:	2018      	movs	r0, #24
 8001016:	f7ff fa24 	bl	8000462 <_ZSt16__deque_buf_sizej>
 800101a:	0003      	movs	r3, r0
 800101c:	0019      	movs	r1, r3
 800101e:	0020      	movs	r0, r4
 8001020:	f000 f8eb 	bl	80011fa <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8001024:	0003      	movs	r3, r0
      }
 8001026:	0018      	movs	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	b003      	add	sp, #12
 800102c:	bd90      	pop	{r4, r7, pc}

0800102e <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8001032:	2018      	movs	r0, #24
 8001034:	f7ff fa15 	bl	8000462 <_ZSt16__deque_buf_sizej>
 8001038:	0003      	movs	r3, r0
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f8e1 	bl	800121a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b004      	add	sp, #16
 800105e:	bd80      	pop	{r7, pc}

08001060 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f8d9 	bl	8001236 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	0018      	movs	r0, r3
 80010b0:	f003 fbac 	bl	800480c <_ZdlPv>
      }
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b004      	add	sp, #16
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f000 f8bb 	bl	8001248 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}

080010da <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80010f6:	6839      	ldr	r1, [r7, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 f8bc 	bl	800127a <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv>
 8001102:	0003      	movs	r3, r0
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}

0800110c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8001114:	687c      	ldr	r4, [r7, #4]
 8001116:	2004      	movs	r0, #4
 8001118:	f7ff f9a3 	bl	8000462 <_ZSt16__deque_buf_sizej>
 800111c:	0003      	movs	r3, r0
 800111e:	0019      	movs	r1, r3
 8001120:	0020      	movs	r0, r4
 8001122:	f000 f8c8 	bl	80012b6 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8allocateERS2_j>
 8001126:	0003      	movs	r3, r0
      }
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b003      	add	sp, #12
 800112e:	bd90      	pop	{r4, r7, pc}

08001130 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8001134:	2004      	movs	r0, #4
 8001136:	f7ff f994 	bl	8000462 <_ZSt16__deque_buf_sizej>
 800113a:	0003      	movs	r3, r0
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	0018      	movs	r0, r3
 8001156:	f000 f8be 	bl	80012d6 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE10deallocateEPS2_j>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b004      	add	sp, #16
 8001160:	bd80      	pop	{r7, pc}

08001162 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZNSaIPSt6bitsetILj8EEEC1IS0_EERKSaIT_E>:
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	0018      	movs	r0, r3
 8001182:	f000 f8b6 	bl	80012f2 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEEC1Ev>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f003 fb2b 	bl	800480c <_ZdlPv>
      }
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f000 f899 	bl	8001304 <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 80011d2:	0002      	movs	r2, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	419b      	sbcs	r3, r3
 80011da:	425b      	negs	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80011e2:	f003 fb2b 	bl	800483c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	0018      	movs	r0, r3
 80011ec:	f003 fb12 	bl	8004814 <_Znwj>
 80011f0:	0003      	movs	r3, r0
      }
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f886 	bl	800131c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8001210:	0003      	movs	r3, r0
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}

0800121a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	0018      	movs	r0, r3
 800122a:	f003 faef 	bl	800480c <_ZdlPv>
      }
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b004      	add	sp, #16
 8001234:	bd80      	pop	{r7, pc}

08001236 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d00b      	beq.n	8001272 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x2a>
	    std::_Destroy(std::__addressof(*__first));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	0018      	movs	r0, r3
 800125e:	f000 f87e 	bl	800135e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001262:	0003      	movs	r3, r0
 8001264:	0018      	movs	r0, r3
 8001266:	f000 f883 	bl	8001370 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3318      	adds	r3, #24
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	e7ef      	b.n	8001252 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b002      	add	sp, #8
 8001278:	bd80      	pop	{r7, pc}

0800127a <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	0018      	movs	r0, r3
 800128a:	f000 f87d 	bl	8001388 <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv>
 800128e:	0002      	movs	r2, r0
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	429a      	cmp	r2, r3
 8001294:	419b      	sbcs	r3, r3
 8001296:	425b      	negs	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800129e:	f003 facd 	bl	800483c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	0018      	movs	r0, r3
 80012a8:	f003 fab4 	bl	8004814 <_Znwj>
 80012ac:	0003      	movs	r3, r0
      }
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f86a 	bl	80013a0 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv>
 80012cc:	0003      	movs	r3, r0
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f003 fa91 	bl	800480c <_ZdlPv>
      }
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b002      	add	sp, #8
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	1fffffff 	.word	0x1fffffff

0800131c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	0018      	movs	r0, r3
 800132c:	f000 f856 	bl	80013dc <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8001330:	0002      	movs	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	429a      	cmp	r2, r3
 8001336:	419b      	sbcs	r3, r3
 8001338:	425b      	negs	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001340:	f003 fa7c 	bl	800483c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	0013      	movs	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	189b      	adds	r3, r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	0018      	movs	r0, r3
 8001350:	f003 fa60 	bl	8004814 <_Znwj>
 8001354:	0003      	movs	r3, r0
      }
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}

0800135e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}

08001370 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0018      	movs	r0, r3
 800137c:	f003 fbd6 	bl	8004b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv+0x14>)
      }
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	1fffffff 	.word	0x1fffffff

080013a0 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f820 	bl	80013f4 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>
 80013b4:	0002      	movs	r2, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	419b      	sbcs	r3, r3
 80013bc:	425b      	negs	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80013c4:	f003 fa3a 	bl	800483c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f003 fa21 	bl	8004814 <_Znwj>
 80013d2:	0003      	movs	r3, r0
      }
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b004      	add	sp, #16
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
      }
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	05555555 	.word	0x05555555

080013f4 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80013fc:	4b02      	ldr	r3, [pc, #8]	; (8001408 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv+0x14>)
      }
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	1fffffff 	.word	0x1fffffff

0800140c <_ZN8receiverD1Ev>:
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3328      	adds	r3, #40	; 0x28
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff f8e4 	bl	80005e6 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff f8ae 	bl	8000582 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZN11transmitterD1Ev>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3328      	adds	r3, #40	; 0x28
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff f8d2 	bl	80005e6 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff f89c 	bl	8000582 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b002      	add	sp, #8
 8001452:	bd80      	pop	{r7, pc}

08001454 <_Z41__static_initialization_and_destruction_0ii>:
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d10b      	bne.n	800147c <_Z41__static_initialization_and_destruction_0ii+0x28>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d107      	bne.n	800147c <_Z41__static_initialization_and_destruction_0ii+0x28>
transmitter t;
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff f80c 	bl	800048c <_ZN11transmitterC1Ev>
receiver r;
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff f81a 	bl	80004b0 <_ZN8receiverC1Ev>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10b      	bne.n	800149a <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d107      	bne.n	800149a <_Z41__static_initialization_and_destruction_0ii+0x46>
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ffbd 	bl	800140c <_ZN8receiverD1Ev>
transmitter t;
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff ffcb 	bl	8001430 <_ZN11transmitterD1Ev>
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	0000ffff 	.word	0x0000ffff
 80014a8:	20000088 	.word	0x20000088
 80014ac:	200000dc 	.word	0x200000dc

080014b0 <_GLOBAL__sub_I_t>:
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <_GLOBAL__sub_I_t+0x14>)
 80014b6:	0019      	movs	r1, r3
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff ffcb 	bl	8001454 <_Z41__static_initialization_and_destruction_0ii>
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	0000ffff 	.word	0x0000ffff

080014c8 <_GLOBAL__sub_D_t>:
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <_GLOBAL__sub_D_t+0x14>)
 80014ce:	0019      	movs	r1, r3
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ffbf 	bl	8001454 <_Z41__static_initialization_and_destruction_0ii>
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	0000ffff 	.word	0x0000ffff

080014e0 <_ZNSt11char_traitsIcE6assignERcRKc>:
      typedef streampos         pos_type;
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>:
      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbyte(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }

      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	221f      	movs	r2, #31
 800151a:	4013      	ands	r3, r2
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>:

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	0018      	movs	r0, r3
 8001530:	f7ff ffed 	bl	800150e <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 8001534:	0003      	movs	r3, r0
 8001536:	2201      	movs	r2, #1
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>:

      _WordT&
      _M_getword(size_t) _GLIBCXX_NOEXCEPT
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b002      	add	sp, #8
 8001556:	bd80      	pop	{r7, pc}

08001558 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>:

      _GLIBCXX_CONSTEXPR _WordT
      _M_getword(size_t) const _GLIBCXX_NOEXCEPT
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}

0800156e <_ZNKSt12_Base_bitsetILj1EE14_M_do_to_ulongEv>:
      size_t
      _M_do_count() const _GLIBCXX_NOEXCEPT
      { return __builtin_popcountl(_M_w); }

      unsigned long
      _M_do_to_ulong() const _GLIBCXX_NOEXCEPT
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
      { return _M_w; }
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <_ZN8receiver6enableEv>:

#include "receiver.h"

// Turn on the timer to start listening for messages
void receiver::enable()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim16);
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <_ZN8receiver6enableEv+0x18>)
 800158e:	0018      	movs	r0, r3
 8001590:	f002 fd4a 	bl	8004028 <HAL_TIM_Base_Start_IT>
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200001d8 	.word	0x200001d8

080015a0 <_ZN8receiver11clearBufferEv>:
}

// Get the contents of the inbound buffer
// and put it in a message in the inbound queue
void receiver::clearBuffer()
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b08b      	sub	sp, #44	; 0x2c
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	string m = "";
 80015a8:	2424      	movs	r4, #36	; 0x24
 80015aa:	193b      	adds	r3, r7, r4
 80015ac:	0018      	movs	r0, r3
 80015ae:	f003 f943 	bl	8004838 <_ZNSaIcEC1Ev>
 80015b2:	193a      	adds	r2, r7, r4
 80015b4:	4921      	ldr	r1, [pc, #132]	; (800163c <_ZN8receiver11clearBufferEv+0x9c>)
 80015b6:	230c      	movs	r3, #12
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	0018      	movs	r0, r3
 80015bc:	f003 fb86 	bl	8004ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	0018      	movs	r0, r3
 80015c4:	f003 f939 	bl	800483a <_ZNSaIcED1Ev>

	while(!buffer.empty())
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3328      	adds	r3, #40	; 0x28
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f95f 	bl	8001890 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 80015d2:	0003      	movs	r3, r0
 80015d4:	001a      	movs	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	4053      	eors	r3, r2
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01a      	beq.n	8001616 <_ZN8receiver11clearBufferEv+0x76>
	{
		bitset<8> c = buffer.front();
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3328      	adds	r3, #40	; 0x28
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 f965 	bl	80018b4 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>
 80015ea:	0003      	movs	r3, r0
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60bb      	str	r3, [r7, #8]
		buffer.pop_front();
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3328      	adds	r3, #40	; 0x28
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 f971 	bl	80018dc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>

		m += (char) c.to_ulong();
 80015fa:	2308      	movs	r3, #8
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 f98c 	bl	800191c <_ZNKSt6bitsetILj8EE8to_ulongEv>
 8001604:	0003      	movs	r3, r0
 8001606:	b2da      	uxtb	r2, r3
 8001608:	230c      	movs	r3, #12
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	0011      	movs	r1, r2
 800160e:	0018      	movs	r0, r3
 8001610:	f003 fab4 	bl	8004b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	while(!buffer.empty())
 8001614:	e7d8      	b.n	80015c8 <_ZN8receiver11clearBufferEv+0x28>
	}

	messages.push_back(m);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	240c      	movs	r4, #12
 800161a:	193a      	adds	r2, r7, r4
 800161c:	0011      	movs	r1, r2
 800161e:	0018      	movs	r0, r3
 8001620:	f000 f989 	bl	8001936 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>

	bitPointer = 0;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2250      	movs	r2, #80	; 0x50
 8001628:	2100      	movs	r1, #0
 800162a:	5299      	strh	r1, [r3, r2]
	string m = "";
 800162c:	193b      	adds	r3, r7, r4
 800162e:	0018      	movs	r0, r3
 8001630:	f003 fa7c 	bl	8004b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b00b      	add	sp, #44	; 0x2c
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	08005020 	.word	0x08005020

08001640 <_ZN8receiver11addToBufferEb>:

// Add a single bit to the buffer
void receiver::addToBuffer(bool bit)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b08b      	sub	sp, #44	; 0x2c
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	000a      	movs	r2, r1
 800164a:	1cfb      	adds	r3, r7, #3
 800164c:	701a      	strb	r2, [r3, #0]
	bitset<8> c;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
	if(bitPointer > 7 || buffer.empty())
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2250      	movs	r2, #80	; 0x50
 8001656:	5a9b      	ldrh	r3, [r3, r2]
 8001658:	2b07      	cmp	r3, #7
 800165a:	d806      	bhi.n	800166a <_ZN8receiver11addToBufferEb+0x2a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3328      	adds	r3, #40	; 0x28
 8001660:	0018      	movs	r0, r3
 8001662:	f000 f915 	bl	8001890 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 8001666:	1e03      	subs	r3, r0, #0
 8001668:	d001      	beq.n	800166e <_ZN8receiver11addToBufferEb+0x2e>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <_ZN8receiver11addToBufferEb+0x30>
 800166e:	2300      	movs	r3, #0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <_ZN8receiver11addToBufferEb+0x5c>
	{
		// Make a new char and set the first bit
		c.set(0, bit);
 8001674:	1cfb      	adds	r3, r7, #3
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	2424      	movs	r4, #36	; 0x24
 800167a:	193b      	adds	r3, r7, r4
 800167c:	2100      	movs	r1, #0
 800167e:	0018      	movs	r0, r3
 8001680:	f000 f97e 	bl	8001980 <_ZNSt6bitsetILj8EE3setEjb>
		buffer.push_back(c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3328      	adds	r3, #40	; 0x28
 8001688:	193a      	adds	r2, r7, r4
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f000 f993 	bl	80019b8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
		bitPointer = 1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2250      	movs	r2, #80	; 0x50
 8001696:	2101      	movs	r1, #1
 8001698:	5299      	strh	r1, [r3, r2]
 800169a:	e026      	b.n	80016ea <_ZN8receiver11addToBufferEb+0xaa>
	}
	else
	{
		// Grab the existing char and set the bit on it
		c = buffer.back();
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3328      	adds	r3, #40	; 0x28
 80016a0:	0018      	movs	r0, r3
 80016a2:	f000 f9ac 	bl	80019fe <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE4backEv>
 80016a6:	0003      	movs	r3, r0
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
		// 7- if the sent bytes are mirrored
		//c.set(7-bitPointer, bit);
		c.set(bitPointer, bit);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2250      	movs	r2, #80	; 0x50
 80016b0:	5a9b      	ldrh	r3, [r3, r2]
 80016b2:	0019      	movs	r1, r3
 80016b4:	1cfb      	adds	r3, r7, #3
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	2424      	movs	r4, #36	; 0x24
 80016ba:	193b      	adds	r3, r7, r4
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 f95f 	bl	8001980 <_ZNSt6bitsetILj8EE3setEjb>
		buffer.pop_back();
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3328      	adds	r3, #40	; 0x28
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 f9b1 	bl	8001a2e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv>
		buffer.push_back(c);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3328      	adds	r3, #40	; 0x28
 80016d0:	193a      	adds	r2, r7, r4
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 f96f 	bl	80019b8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
		bitPointer++;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2250      	movs	r2, #80	; 0x50
 80016de:	5a9b      	ldrh	r3, [r3, r2]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b299      	uxth	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2250      	movs	r2, #80	; 0x50
 80016e8:	5299      	strh	r1, [r3, r2]
	}

	string s = buffer.back().to_string();
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3328      	adds	r3, #40	; 0x28
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 f985 	bl	80019fe <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE4backEv>
 80016f4:	0002      	movs	r2, r0
 80016f6:	240c      	movs	r4, #12
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 f9b5 	bl	8001a6c <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>
 8001702:	193b      	adds	r3, r7, r4
 8001704:	0018      	movs	r0, r3
 8001706:	f003 fa11 	bl	8004b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b00b      	add	sp, #44	; 0x2c
 8001710:	bd90      	pop	{r4, r7, pc}

08001712 <_ZN8receiver12checkMessageEv>:

bool receiver::checkMessage()
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	if(messages.empty())
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f9b4 	bl	8001a8a <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d001      	beq.n	800172a <_ZN8receiver12checkMessageEv+0x18>
	{
		return false;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <_ZN8receiver12checkMessageEv+0x1a>
	}
	else
	{
		return true;
 800172a:	2301      	movs	r3, #1
	}
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b002      	add	sp, #8
 8001732:	bd80      	pop	{r7, pc}

08001734 <_ZN8receiver10popMessageB5cxx11Ev>:

string receiver::popMessage()
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	string retVal = messages.front();
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	0018      	movs	r0, r3
 8001742:	f000 f9b4 	bl	8001aae <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>
 8001746:	0002      	movs	r2, r0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f003 fa8b 	bl	8004c68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	messages.pop_front();
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	0018      	movs	r0, r3
 8001756:	f000 f9be 	bl	8001ad6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>
	return retVal;
 800175a:	46c0      	nop			; (mov r8, r8)
}
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <_ZN8receiver4tickEv>:

void receiver::tick()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	bool on = RECEIVE;
 800176c:	4b44      	ldr	r3, [pc, #272]	; (8001880 <_ZN8receiver4tickEv+0x11c>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	2202      	movs	r2, #2
 8001772:	401a      	ands	r2, r3
 8001774:	200f      	movs	r0, #15
 8001776:	183b      	adds	r3, r7, r0
 8001778:	1e51      	subs	r1, r2, #1
 800177a:	418a      	sbcs	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
	static bool started = false;
	static bool isCounting = false;
	static uint16_t counter = 0;

	if(on && isCounting)
 800177e:	183b      	adds	r3, r7, r0
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00a      	beq.n	800179c <_ZN8receiver4tickEv+0x38>
 8001786:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <_ZN8receiver4tickEv+0x120>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <_ZN8receiver4tickEv+0x38>
	{
		counter++;
 800178e:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	e06d      	b.n	8001878 <_ZN8receiver4tickEv+0x114>
		// For seeing how many counts a bit is
		//HAL_GPIO_TogglePin(GREEN_GPIO_Port,GREEN_Pin);
	}
	else if(on && !isCounting)
 800179c:	230f      	movs	r3, #15
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00d      	beq.n	80017c2 <_ZN8receiver4tickEv+0x5e>
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <_ZN8receiver4tickEv+0x120>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4053      	eors	r3, r2
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <_ZN8receiver4tickEv+0x5e>
	{
		counter = 0;
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	801a      	strh	r2, [r3, #0]
		isCounting = true;
 80017ba:	4b32      	ldr	r3, [pc, #200]	; (8001884 <_ZN8receiver4tickEv+0x120>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e05a      	b.n	8001878 <_ZN8receiver4tickEv+0x114>
	}
	else if(!on && isCounting)
 80017c2:	230f      	movs	r3, #15
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4053      	eors	r3, r2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d052      	beq.n	8001878 <_ZN8receiver4tickEv+0x114>
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <_ZN8receiver4tickEv+0x120>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d04e      	beq.n	8001878 <_ZN8receiver4tickEv+0x114>
	{
		if((START_MIN < counter) && (counter < START_MAX))
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	2bfa      	cmp	r3, #250	; 0xfa
 80017e0:	d90c      	bls.n	80017fc <_ZN8receiver4tickEv+0x98>
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 80017e4:	881a      	ldrh	r2, [r3, #0]
 80017e6:	23a5      	movs	r3, #165	; 0xa5
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d206      	bcs.n	80017fc <_ZN8receiver4tickEv+0x98>
		{
			GREEN_HIGH;
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <_ZN8receiver4tickEv+0x11c>)
 80017f0:	2204      	movs	r2, #4
 80017f2:	619a      	str	r2, [r3, #24]
			// Remember that there has been a start bit
			started = true;
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <_ZN8receiver4tickEv+0x128>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e036      	b.n	800186a <_ZN8receiver4tickEv+0x106>
		}
		else if(started)
 80017fc:	4b23      	ldr	r3, [pc, #140]	; (800188c <_ZN8receiver4tickEv+0x128>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d032      	beq.n	800186a <_ZN8receiver4tickEv+0x106>
		{
			if((ZERO_MIN < counter) && (counter < ZERO_MAX))
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	2b32      	cmp	r3, #50	; 0x32
 800180a:	d909      	bls.n	8001820 <_ZN8receiver4tickEv+0xbc>
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	2b81      	cmp	r3, #129	; 0x81
 8001812:	d805      	bhi.n	8001820 <_ZN8receiver4tickEv+0xbc>
			{
				// Add zero to buffer
				addToBuffer(false);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2100      	movs	r1, #0
 8001818:	0018      	movs	r0, r3
 800181a:	f7ff ff11 	bl	8001640 <_ZN8receiver11addToBufferEb>
 800181e:	e024      	b.n	800186a <_ZN8receiver4tickEv+0x106>
			}
			else if((ONE_MIN < counter) && (counter < ONE_MAX))
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	2b96      	cmp	r3, #150	; 0x96
 8001826:	d909      	bls.n	800183c <_ZN8receiver4tickEv+0xd8>
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2be5      	cmp	r3, #229	; 0xe5
 800182e:	d805      	bhi.n	800183c <_ZN8receiver4tickEv+0xd8>
			{
				// Add one to buffer
				addToBuffer(true);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2101      	movs	r1, #1
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff ff03 	bl	8001640 <_ZN8receiver11addToBufferEb>
 800183a:	e016      	b.n	800186a <_ZN8receiver4tickEv+0x106>
			}
			else if((STOP_MIN < counter) && (counter < STOP_MAX))
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 800183e:	881a      	ldrh	r2, [r3, #0]
 8001840:	23af      	movs	r3, #175	; 0xaf
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	429a      	cmp	r2, r3
 8001846:	d910      	bls.n	800186a <_ZN8receiver4tickEv+0x106>
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 800184a:	881a      	ldrh	r2, [r3, #0]
 800184c:	23d7      	movs	r3, #215	; 0xd7
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	429a      	cmp	r2, r3
 8001852:	d20a      	bcs.n	800186a <_ZN8receiver4tickEv+0x106>
			{
				GREEN_LOW;
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <_ZN8receiver4tickEv+0x11c>)
 8001856:	2280      	movs	r2, #128	; 0x80
 8001858:	02d2      	lsls	r2, r2, #11
 800185a:	619a      	str	r2, [r3, #24]
				// Forget the start bit so we can wait
				// for the next message
				started = false;
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <_ZN8receiver4tickEv+0x128>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]

				// If a second high point the length of a
				// start bit is found (the stop bit), put
				// the buffer in the message queue
				clearBuffer();
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff fe9b 	bl	80015a0 <_ZN8receiver11clearBufferEv>
			}
		}

		// Stop the timer
		counter = 0;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <_ZN8receiver4tickEv+0x124>)
 800186c:	2200      	movs	r2, #0
 800186e:	801a      	strh	r2, [r3, #0]
		isCounting = false;
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <_ZN8receiver4tickEv+0x120>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
	}
}
 8001876:	e7ff      	b.n	8001878 <_ZN8receiver4tickEv+0x114>
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b004      	add	sp, #16
 800187e:	bd80      	pop	{r7, pc}
 8001880:	48000400 	.word	0x48000400
 8001884:	20000131 	.word	0x20000131
 8001888:	20000132 	.word	0x20000132
 800188c:	20000130 	.word	0x20000130

08001890 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3318      	adds	r3, #24
 800189c:	001a      	movs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3308      	adds	r3, #8
 80018a2:	0019      	movs	r1, r3
 80018a4:	0010      	movs	r0, r2
 80018a6:	f000 f937 	bl	8001b18 <_ZSteqISt6bitsetILj8EERS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>
 80018aa:	0003      	movs	r3, r0
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	return *begin();
 80018bc:	2408      	movs	r4, #8
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	0011      	movs	r1, r2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7fe ff99 	bl	80007fc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f934 	bl	8001b3a <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>
 80018d2:	0003      	movs	r3, r0
      }
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b007      	add	sp, #28
 80018da:	bd90      	pop	{r4, r7, pc}

080018dc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d00c      	beq.n	800190c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv+0x30>
	    _Alloc_traits::destroy(this->_M_impl,
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	0019      	movs	r1, r3
 80018fa:	0010      	movs	r0, r2
 80018fc:	f000 f927 	bl	8001b4e <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	1d1a      	adds	r2, r3, #4
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]
      }
 800190a:	e003      	b.n	8001914 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv+0x38>
	  _M_pop_front_aux();
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	0018      	movs	r0, r3
 8001910:	f000 f92c 	bl	8001b6c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_pop_front_auxEv>
      }
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b002      	add	sp, #8
 800191a:	bd80      	pop	{r7, pc}

0800191c <_ZNKSt6bitsetILj8EE8to_ulongEv>:
       *  @return  The integral equivalent of the bits.
       *  @throw  std::overflow_error  If there are too many bits to be
       *                               represented in an @c unsigned @c long.
       */
      unsigned long
      to_ulong() const
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
      { return this->_M_do_to_ulong(); }
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0018      	movs	r0, r3
 8001928:	f7ff fe21 	bl	800156e <_ZNKSt12_Base_bitsetILj1EE14_M_do_to_ulongEv>
 800192c:	0003      	movs	r3, r0
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}

08001936 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	3b18      	subs	r3, #24
	if (this->_M_impl._M_finish._M_cur
 800194a:	429a      	cmp	r2, r3
 800194c:	d00d      	beq.n	800196a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	0019      	movs	r1, r3
 8001958:	f000 f930 	bl	8001bbc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	3318      	adds	r3, #24
 8001962:	001a      	movs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]
      }
 8001968:	e005      	b.n	8001976 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x40>
	  _M_push_back_aux(__x);
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	0011      	movs	r1, r2
 8001970:	0018      	movs	r0, r3
 8001972:	f000 f937 	bl	8001be4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_>
      }
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <_ZNSt6bitsetILj8EE3setEjb>:
      set(size_t __position, bool __val = true)
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	701a      	strb	r2, [r3, #0]
	this->_M_check(__position, __N("bitset::set"));
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <_ZNSt6bitsetILj8EE3setEjb+0x34>)
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0018      	movs	r0, r3
 8001996:	f000 f96d 	bl	8001c74 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc>
	return _Unchecked_set(__position, __val);
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 f97c 	bl	8001ca0 <_ZNSt6bitsetILj8EE14_Unchecked_setEji>
 80019a8:	0003      	movs	r3, r0
      }
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b004      	add	sp, #16
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	08005024 	.word	0x08005024

080019b8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d00c      	beq.n	80019ea <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	0019      	movs	r1, r3
 80019da:	f000 f98f 	bl	8001cfc <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	1d1a      	adds	r2, r3, #4
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
      }
 80019e8:	e005      	b.n	80019f6 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_+0x3e>
	  _M_push_back_aux(__x);
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 f997 	bl	8001d24 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>
      }
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80019fe:	b590      	push	{r4, r7, lr}
 8001a00:	b087      	sub	sp, #28
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8001a06:	2408      	movs	r4, #8
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7fe ff05 	bl	800081e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>
	--__tmp;
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 f9cc 	bl	8001db4 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EmmEv>
	return *__tmp;
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 f88b 	bl	8001b3a <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>
 8001a24:	0003      	movs	r3, r0
      }
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b007      	add	sp, #28
 8001a2c:	bd90      	pop	{r4, r7, pc}

08001a2e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_finish._M_cur
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d00c      	beq.n	8001a5c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv+0x2e>
	    --this->_M_impl._M_finish._M_cur;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	1f1a      	subs	r2, r3, #4
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(this->_M_impl,
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f000 f87a 	bl	8001b4e <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
      }
 8001a5a:	e003      	b.n	8001a64 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv+0x36>
	  _M_pop_back_aux();
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 f9c8 	bl	8001df4 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_pop_back_auxEv>
      }
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>:
	  return to_string<_CharT, std::char_traits<_CharT>,
	                   std::allocator<_CharT> >(__zero, __one);
	}

      std::basic_string<char, std::char_traits<char>, std::allocator<char> >
      to_string() const
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
      {
	return to_string<char, std::char_traits<char>,
	                 std::allocator<char> >();
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 f9e2 	bl	8001e46 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>
      }
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3318      	adds	r3, #24
 8001a96:	001a      	movs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	0010      	movs	r0, r2
 8001aa0:	f000 f9e5 	bl	8001e6e <_ZSteqINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EbRKSt15_Deque_iteratorIT_T0_T1_ESE_>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8001aae:	b590      	push	{r4, r7, lr}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	return *begin();
 8001ab6:	2408      	movs	r4, #8
 8001ab8:	193b      	adds	r3, r7, r4
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	0011      	movs	r1, r2
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7fe fdf7 	bl	80006b2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 f9e2 	bl	8001e90 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>
 8001acc:	0003      	movs	r3, r0
      }
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b007      	add	sp, #28
 8001ad4:	bd90      	pop	{r4, r7, pc}

08001ad6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	3b18      	subs	r3, #24
	if (this->_M_impl._M_start._M_cur
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d00d      	beq.n	8001b08 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x32>
	    _Alloc_traits::destroy(this->_M_impl,
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0019      	movs	r1, r3
 8001af4:	0010      	movs	r0, r2
 8001af6:	f000 f9d5 	bl	8001ea4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	3318      	adds	r3, #24
 8001b00:	001a      	movs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	609a      	str	r2, [r3, #8]
      }
 8001b06:	e003      	b.n	8001b10 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x3a>
	  _M_pop_front_aux();
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 f9d9 	bl	8001ec2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>
      }
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_ZSteqISt6bitsetILj8EERS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	4153      	adcs	r3, r2
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b002      	add	sp, #8
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f9d7 	bl	8001f12 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE7destroyIS2_EEvPT_>
 8001b64:	46c0      	nop			; (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b002      	add	sp, #8
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7fe fe62 	bl	8000840 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0019      	movs	r1, r3
 8001b84:	0010      	movs	r0, r2
 8001b86:	f7ff ffe2 	bl	8001b4e <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0019      	movs	r1, r3
 8001b92:	0010      	movs	r0, r2
 8001b94:	f7ff f9dd 	bl	8000f52 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	f7ff f9ba 	bl	8000f20 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
    }
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f000 f9aa 	bl	8001f24 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 f9ad 	bl	8001f36 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b004      	add	sp, #16
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 f9b9 	bl	8001f68 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8001bf6:	0004      	movs	r4, r0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 f9c6 	bl	8001f8c <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8001c00:	0003      	movs	r3, r0
 8001c02:	1ae3      	subs	r3, r4, r3
 8001c04:	425a      	negs	r2, r3
 8001c06:	4153      	adcs	r3, r2
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_+0x32>
	  __throw_length_error(
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_+0x8c>)
 8001c10:	0018      	movs	r0, r3
 8001c12:	f002 fe19 	bl	8004848 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 f9c7 	bl	8001fae <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	1d1c      	adds	r4, r3, #4
 8001c28:	0010      	movs	r0, r2
 8001c2a:	f7ff f9ee 	bl	800100a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8001c32:	687c      	ldr	r4, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699d      	ldr	r5, [r3, #24]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 f972 	bl	8001f24 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001c40:	0003      	movs	r3, r0
 8001c42:	001a      	movs	r2, r3
 8001c44:	0029      	movs	r1, r5
 8001c46:	0020      	movs	r0, r4
 8001c48:	f7ff ffb8 	bl	8001bbc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3318      	adds	r3, #24
 8001c50:	001a      	movs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	3304      	adds	r3, #4
 8001c58:	0019      	movs	r1, r3
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	f7ff f885 	bl	8000d6a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
      }
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	08005030 	.word	0x08005030

08001c74 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc>:
      void _M_check(size_t __position, const char *__s) const
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
	if (__position >= _Nb)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b07      	cmp	r3, #7
 8001c84:	d905      	bls.n	8001c92 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc+0x1e>
	  __throw_out_of_range_fmt(__N("%s: __position (which is %zu) "
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4804      	ldr	r0, [pc, #16]	; (8001c9c <_ZNKSt6bitsetILj8EE8_M_checkEjPKc+0x28>)
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	f002 fddf 	bl	8004850 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b004      	add	sp, #16
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	08005060 	.word	0x08005060

08001ca0 <_ZNSt6bitsetILj8EE14_Unchecked_setEji>:
      _Unchecked_set(size_t __pos, int __val) _GLIBCXX_NOEXCEPT
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
	if (__val)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00f      	beq.n	8001cd2 <_ZNSt6bitsetILj8EE14_Unchecked_setEji+0x32>
	  this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff fc35 	bl	8001524 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8001cba:	0004      	movs	r4, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7ff fc3e 	bl	8001544 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4322      	orrs	r2, r4
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e00f      	b.n	8001cf2 <_ZNSt6bitsetILj8EE14_Unchecked_setEji+0x52>
	  this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff fc25 	bl	8001524 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	43dc      	mvns	r4, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff fc2d 	bl	8001544 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 8001cea:	0003      	movs	r3, r0
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4022      	ands	r2, r4
 8001cf0:	601a      	str	r2, [r3, #0]
	return *this;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
      }
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b005      	add	sp, #20
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 f96b 	bl	8001fe6 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001d10:	0002      	movs	r2, r0
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 f96e 	bl	8001ff8 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b004      	add	sp, #16
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 f978 	bl	8002026 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE4sizeEv>
 8001d36:	0004      	movs	r4, r0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 f985 	bl	800204a <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE8max_sizeEv>
 8001d40:	0003      	movs	r3, r0
 8001d42:	1ae3      	subs	r3, r4, r3
 8001d44:	425a      	negs	r2, r3
 8001d46:	4153      	adcs	r3, r2
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x32>
	  __throw_length_error(
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x8c>)
 8001d50:	0018      	movs	r0, r3
 8001d52:	f002 fd79 	bl	8004848 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 f986 	bl	800206c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	1d1c      	adds	r4, r3, #4
 8001d68:	0010      	movs	r0, r2
 8001d6a:	f7ff f9cf 	bl	800110c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8001d72:	687c      	ldr	r4, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699d      	ldr	r5, [r3, #24]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f000 f933 	bl	8001fe6 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001d80:	0003      	movs	r3, r0
 8001d82:	001a      	movs	r2, r3
 8001d84:	0029      	movs	r1, r5
 8001d86:	0020      	movs	r0, r4
 8001d88:	f7ff ffb8 	bl	8001cfc <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3318      	adds	r3, #24
 8001d90:	001a      	movs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	3304      	adds	r3, #4
 8001d98:	0019      	movs	r1, r3
 8001d9a:	0010      	movs	r0, r2
 8001d9c:	f7ff f8c0 	bl	8000f20 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
      }
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}
 8001db0:	08005030 	.word	0x08005030

08001db4 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d10b      	bne.n	8001de0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EmmEv+0x2c>
	    _M_set_node(_M_node - 1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	1f1a      	subs	r2, r3, #4
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0011      	movs	r1, r2
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7ff f8a4 	bl	8000f20 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_last;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1f1a      	subs	r2, r3, #4
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
	return *this;
 8001dea:	687b      	ldr	r3, [r7, #4]
      }
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	0019      	movs	r1, r3
 8001e04:	0010      	movs	r0, r2
 8001e06:	f7ff f8a4 	bl	8000f52 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3318      	adds	r3, #24
 8001e0e:	001a      	movs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	3b04      	subs	r3, #4
 8001e16:	0019      	movs	r1, r3
 8001e18:	0010      	movs	r0, r2
 8001e1a:	f7ff f881 	bl	8000f20 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	1f1a      	subs	r2, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7fe fd08 	bl	8000840 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8001e30:	0002      	movs	r2, r0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	0019      	movs	r1, r3
 8001e38:	0010      	movs	r0, r2
 8001e3a:	f7ff fe88 	bl	8001b4e <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
    }
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b002      	add	sp, #8
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>:
	to_string() const
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
	  std::basic_string<_CharT, _Traits, _Alloc> __result;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	0018      	movs	r0, r3
 8001e54:	f002 fe63 	bl	8004b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	6838      	ldr	r0, [r7, #0]
 8001e5c:	2331      	movs	r3, #49	; 0x31
 8001e5e:	2230      	movs	r2, #48	; 0x30
 8001e60:	f000 f920 	bl	80020a4 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>
	  return __result;
 8001e64:	46c0      	nop			; (mov r8, r8)
	}
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_ZSteqINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EbRKSt15_Deque_iteratorIT_T0_T1_ESE_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	425a      	negs	r2, r3
 8001e84:	4153      	adcs	r3, r2
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0011      	movs	r1, r2
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 f92b 	bl	8002110 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7fe fc12 	bl	80006f6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	0019      	movs	r1, r3
 8001eda:	0010      	movs	r0, r2
 8001edc:	f7ff ffe2 	bl	8001ea4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	0010      	movs	r0, r2
 8001eea:	f7fe ff5a 	bl	8000da2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3308      	adds	r3, #8
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	0019      	movs	r1, r3
 8001efc:	0010      	movs	r0, r2
 8001efe:	f7fe ff34 	bl	8000d6a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	609a      	str	r2, [r3, #8]
    }
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE7destroyIS2_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b002      	add	sp, #8
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001f36:	b590      	push	{r4, r7, lr}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff ffed 	bl	8001f24 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001f4a:	0004      	movs	r4, r0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	0019      	movs	r1, r3
 8001f50:	2018      	movs	r0, #24
 8001f52:	f7ff fad2 	bl	80014fa <_ZnwjPv>
 8001f56:	0003      	movs	r3, r0
 8001f58:	0021      	movs	r1, r4
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f002 fe84 	bl	8004c68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b005      	add	sp, #20
 8001f66:	bd90      	pop	{r4, r7, pc}

08001f68 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3318      	adds	r3, #24
 8001f74:	001a      	movs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3308      	adds	r3, #8
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	f000 f8d4 	bl	800212a <_ZStmiINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSC_SF_>
 8001f82:	0003      	movs	r3, r0
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff f862 	bl	8001060 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 f8fc 	bl	800219c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6859      	ldr	r1, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1ac3      	subs	r3, r0, r3
 8001fca:	109b      	asrs	r3, r3, #2
 8001fcc:	1acb      	subs	r3, r1, r3
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d905      	bls.n	8001fde <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 8001fd2:	6839      	ldr	r1, [r7, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 f8fb 	bl	80021d4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>
      }
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff ffed 	bl	8001fe6 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800200c:	0004      	movs	r4, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	0019      	movs	r1, r3
 8002012:	2004      	movs	r0, #4
 8002014:	f7ff fa71 	bl	80014fa <_ZnwjPv>
 8002018:	0003      	movs	r3, r0
 800201a:	6822      	ldr	r2, [r4, #0]
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b005      	add	sp, #20
 8002024:	bd90      	pop	{r4, r7, pc}

08002026 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3318      	adds	r3, #24
 8002032:	001a      	movs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3308      	adds	r3, #8
 8002038:	0019      	movs	r1, r3
 800203a:	0010      	movs	r0, r2
 800203c:	f000 f96c 	bl	8002318 <_ZStmiISt6bitsetILj8EERS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
 8002040:	0003      	movs	r3, r0
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}

0800204a <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff f884 	bl	8001162 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 800205a:	0003      	movs	r3, r0
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f97f 	bl	8002360 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_>
 8002062:	0003      	movs	r3, r0
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}

0800206c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6859      	ldr	r1, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	1ac3      	subs	r3, r0, r3
 8002088:	109b      	asrs	r3, r3, #2
 800208a:	1acb      	subs	r3, r1, r3
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800208c:	429a      	cmp	r2, r3
 800208e:	d905      	bls.n	800209c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	0018      	movs	r0, r3
 8002098:	f000 f97e 	bl	8002398 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb>
      }
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>:
      }

  template<size_t _Nb>
    template<class _CharT, class _Traits, class _Alloc>
      void
      bitset<_Nb>::
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	0019      	movs	r1, r3
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	1dbb      	adds	r3, r7, #6
 80020b6:	1c0a      	adds	r2, r1, #0
 80020b8:	701a      	strb	r2, [r3, #0]
      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,
			_CharT __zero, _CharT __one) const
      {
	__s.assign(_Nb, __zero);
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2108      	movs	r1, #8
 80020c2:	0018      	movs	r0, r3
 80020c4:	f002 fda2 	bl	8004c0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	for (size_t __i = _Nb; __i > 0; --__i)
 80020c8:	2308      	movs	r3, #8
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01a      	beq.n	8002108 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x64>
	  if (_Unchecked_test(__i - 1))
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	0011      	movs	r1, r2
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f9fe 	bl	80024dc <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>
 80020e0:	1e03      	subs	r3, r0, #0
 80020e2:	d00d      	beq.n	8002100 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x5c>
	    _Traits::assign(__s[_Nb - __i], __one);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2208      	movs	r2, #8
 80020e8:	1ad2      	subs	r2, r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	0011      	movs	r1, r2
 80020ee:	0018      	movs	r0, r3
 80020f0:	f002 fd24 	bl	8004b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80020f4:	0002      	movs	r2, r0
 80020f6:	1dbb      	adds	r3, r7, #6
 80020f8:	0019      	movs	r1, r3
 80020fa:	0010      	movs	r0, r2
 80020fc:	f7ff f9f0 	bl	80014e0 <_ZNSt11char_traitsIcE6assignERcRKc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3b01      	subs	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e7e1      	b.n	80020cc <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x28>
      }
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b006      	add	sp, #24
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:
	destroy(_Up* __p)
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	0018      	movs	r0, r3
 800211e:	f002 fd05 	bl	8004b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	b002      	add	sp, #8
 8002128:	bd80      	pop	{r7, pc}

0800212a <_ZStmiINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSC_SF_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8002134:	f7fe ff7b 	bl	800102e <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 8002138:	0003      	movs	r3, r0
 800213a:	0019      	movs	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	109b      	asrs	r3, r3, #2
 8002148:	3b01      	subs	r3, #1
 800214a:	4359      	muls	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	10da      	asrs	r2, r3, #3
 8002158:	0013      	movs	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	189b      	adds	r3, r3, r2
 800215e:	0118      	lsls	r0, r3, #4
 8002160:	181b      	adds	r3, r3, r0
 8002162:	0218      	lsls	r0, r3, #8
 8002164:	181b      	adds	r3, r3, r0
 8002166:	0418      	lsls	r0, r3, #16
 8002168:	181b      	adds	r3, r3, r0
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	189b      	adds	r3, r3, r2
 800216e:	18c9      	adds	r1, r1, r3
	+ (__y._M_last - __y._M_cur);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	10da      	asrs	r2, r3, #3
 800217c:	0013      	movs	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	189b      	adds	r3, r3, r2
 8002182:	0118      	lsls	r0, r3, #4
 8002184:	181b      	adds	r3, r3, r0
 8002186:	0218      	lsls	r0, r3, #8
 8002188:	181b      	adds	r3, r3, r0
 800218a:	0418      	lsls	r0, r3, #16
 800218c:	181b      	adds	r3, r3, r0
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	189b      	adds	r3, r3, r2
 8002192:	18cb      	adds	r3, r1, r3
    }
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 80021a6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f9af 	bl	800250e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 80021b0:	0003      	movs	r3, r0
 80021b2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80021b4:	2308      	movs	r3, #8
 80021b6:	18fa      	adds	r2, r7, r3
 80021b8:	230c      	movs	r3, #12
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	0011      	movs	r1, r2
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 f9b2 	bl	8002528 <_ZSt3minIjERKT_S2_S2_>
 80021c4:	0003      	movs	r3, r0
 80021c6:	681b      	ldr	r3, [r3, #0]
      }
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b004      	add	sp, #16
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	7fffffff 	.word	0x7fffffff

080021d4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b08b      	sub	sp, #44	; 0x2c
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	701a      	strb	r2, [r3, #0]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	109b      	asrs	r3, r3, #2
 80021ee:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80021f0:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6a3a      	ldr	r2, [r7, #32]
 80021f6:	18d3      	adds	r3, r2, r3
 80021f8:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	429a      	cmp	r2, r3
 8002204:	d92e      	bls.n	8002264 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x90>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	1acb      	subs	r3, r1, r3
 8002212:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002214:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x50>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	e000      	b.n	8002226 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x52>
 8002224:	2300      	movs	r3, #0
 8002226:	185b      	adds	r3, r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002228:	18d3      	adds	r3, r2, r3
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	429a      	cmp	r2, r3
 8002234:	d209      	bcs.n	800224a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800223e:	3304      	adds	r3, #4
 8002240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002242:	0019      	movs	r1, r3
 8002244:	f000 f982 	bl	800254c <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 8002248:	e04b      	b.n	80022e2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x10e>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002252:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	18d3      	adds	r3, r2, r3
 800225c:	001a      	movs	r2, r3
 800225e:	f000 f98f 	bl	8002580 <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 8002262:	e03e      	b.n	80022e2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x10e>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3304      	adds	r3, #4
 800226c:	2208      	movs	r2, #8
 800226e:	18ba      	adds	r2, r7, r2
 8002270:	0011      	movs	r1, r2
 8002272:	0018      	movs	r0, r3
 8002274:	f7fe fd2f 	bl	8000cd6 <_ZSt3maxIjERKT_S2_S2_>
 8002278:	0003      	movs	r3, r0
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	18e3      	adds	r3, r4, r3
	  size_type __new_map_size = this->_M_impl._M_map_size
 800227e:	3302      	adds	r3, #2
 8002280:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	0011      	movs	r1, r2
 8002288:	0018      	movs	r0, r3
 800228a:	f7fe fd36 	bl	8000cfa <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 800228e:	0003      	movs	r3, r0
 8002290:	617b      	str	r3, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xd6>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	e000      	b.n	80022ac <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xd8>
 80022aa:	2300      	movs	r3, #0
 80022ac:	189b      	adds	r3, r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	18d3      	adds	r3, r2, r3
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80022bc:	3304      	adds	r3, #4
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	0019      	movs	r1, r3
 80022c2:	f000 f943 	bl	800254c <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	001a      	movs	r2, r3
 80022d2:	f7fe fb94 	bl	80009fe <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>

	  this->_M_impl._M_map = __new_map;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3308      	adds	r3, #8
 80022e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e8:	0011      	movs	r1, r2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7fe fd3d 	bl	8000d6a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3318      	adds	r3, #24
 80022f4:	0018      	movs	r0, r3
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x140>)
 80022fa:	4694      	mov	ip, r2
 80022fc:	4463      	add	r3, ip
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002302:	18d3      	adds	r3, r2, r3
 8002304:	0019      	movs	r1, r3
 8002306:	f7fe fd30 	bl	8000d6a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
    }
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b00b      	add	sp, #44	; 0x2c
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	3fffffff 	.word	0x3fffffff

08002318 <_ZStmiISt6bitsetILj8EERS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8002322:	f7fe ff05 	bl	8001130 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>
 8002326:	0003      	movs	r3, r0
 8002328:	0019      	movs	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	109b      	asrs	r3, r3, #2
 8002336:	3b01      	subs	r3, #1
 8002338:	434b      	muls	r3, r1
 800233a:	001a      	movs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6819      	ldr	r1, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	1acb      	subs	r3, r1, r3
 8002346:	109b      	asrs	r3, r3, #2
 8002348:	18d2      	adds	r2, r2, r3
	+ (__y._M_last - __y._M_cur);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1acb      	subs	r3, r1, r3
 8002354:	109b      	asrs	r3, r3, #2
 8002356:	18d3      	adds	r3, r2, r3
    }
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}

08002360 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800236a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0018      	movs	r0, r3
 8002370:	f000 f920 	bl	80025b4 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8max_sizeERKS2_>
 8002374:	0003      	movs	r3, r0
 8002376:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002378:	2308      	movs	r3, #8
 800237a:	18fa      	adds	r2, r7, r3
 800237c:	230c      	movs	r3, #12
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	0011      	movs	r1, r2
 8002382:	0018      	movs	r0, r3
 8002384:	f000 f8d0 	bl	8002528 <_ZSt3minIjERKT_S2_S2_>
 8002388:	0003      	movs	r3, r0
 800238a:	681b      	ldr	r3, [r3, #0]
      }
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}
 8002394:	7fffffff 	.word	0x7fffffff

08002398 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b08b      	sub	sp, #44	; 0x2c
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	701a      	strb	r2, [r3, #0]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	109b      	asrs	r3, r3, #2
 80023b2:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80023b4:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	18d3      	adds	r3, r2, r3
 80023bc:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d92e      	bls.n	8002428 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x90>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	1acb      	subs	r3, r1, r3
 80023d6:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80023d8:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x50>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	e000      	b.n	80023ea <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x52>
 80023e8:	2300      	movs	r3, #0
 80023ea:	185b      	adds	r3, r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80023ec:	18d3      	adds	r3, r2, r3
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d209      	bcs.n	800240e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002402:	3304      	adds	r3, #4
 8002404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002406:	0019      	movs	r1, r3
 8002408:	f000 f8e1 	bl	80025ce <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
 800240c:	e04b      	b.n	80024a6 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x10e>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002416:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800241c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241e:	18d3      	adds	r3, r2, r3
 8002420:	001a      	movs	r2, r3
 8002422:	f000 f8ee 	bl	8002602 <_ZSt13copy_backwardIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
 8002426:	e03e      	b.n	80024a6 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x10e>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3304      	adds	r3, #4
 8002430:	2208      	movs	r2, #8
 8002432:	18ba      	adds	r2, r7, r2
 8002434:	0011      	movs	r1, r2
 8002436:	0018      	movs	r0, r3
 8002438:	f7fe fc4d 	bl	8000cd6 <_ZSt3maxIjERKT_S2_S2_>
 800243c:	0003      	movs	r3, r0
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	18e3      	adds	r3, r4, r3
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002442:	3302      	adds	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	0011      	movs	r1, r2
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe fd2f 	bl	8000eb0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>
 8002452:	0003      	movs	r3, r0
 8002454:	617b      	str	r3, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002460:	1dfb      	adds	r3, r7, #7
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0xd6>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	e000      	b.n	8002470 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0xd8>
 800246e:	2300      	movs	r3, #0
 8002470:	189b      	adds	r3, r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002480:	3304      	adds	r3, #4
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	0019      	movs	r1, r3
 8002486:	f000 f8a2 	bl	80025ce <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	001a      	movs	r2, r3
 8002496:	f7fe fbd8 	bl	8000c4a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3308      	adds	r3, #8
 80024aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ac:	0011      	movs	r1, r2
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7fe fd36 	bl	8000f20 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3318      	adds	r3, #24
 80024b8:	0018      	movs	r0, r3
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x140>)
 80024be:	4694      	mov	ip, r2
 80024c0:	4463      	add	r3, ip
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	18d3      	adds	r3, r2, r3
 80024c8:	0019      	movs	r1, r3
 80024ca:	f7fe fd29 	bl	8000f20 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
    }
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b00b      	add	sp, #44	; 0x2c
 80024d4:	bd90      	pop	{r4, r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	3fffffff 	.word	0x3fffffff

080024dc <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>:
      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	0011      	movs	r1, r2
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff f833 	bl	8001558 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>
 80024f2:	0004      	movs	r4, r0
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7ff f814 	bl	8001524 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 80024fc:	0003      	movs	r3, r0
 80024fe:	4023      	ands	r3, r4
		!= static_cast<_WordT>(0)); }
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	4193      	sbcs	r3, r2
 8002504:	b2db      	uxtb	r3, r3
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b003      	add	sp, #12
 800250c:	bd90      	pop	{r4, r7, pc}

0800250e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f7fe ff5f 	bl	80013dc <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800251e:	0003      	movs	r3, r0
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d201      	bcs.n	8002542 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	e000      	b.n	8002544 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002542:	687b      	ldr	r3, [r7, #4]
    }
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f86b 	bl	8002636 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8002560:	0004      	movs	r4, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f866 	bl	8002636 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800256a:	0001      	movs	r1, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	001a      	movs	r2, r3
 8002570:	0020      	movs	r0, r4
 8002572:	f000 f869 	bl	8002648 <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8002576:	0003      	movs	r3, r0
    }
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b005      	add	sp, #20
 800257e:	bd90      	pop	{r4, r7, pc}

08002580 <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f851 	bl	8002636 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8002594:	0004      	movs	r4, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 f84c 	bl	8002636 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800259e:	0001      	movs	r1, r0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	001a      	movs	r2, r3
 80025a4:	0020      	movs	r0, r4
 80025a6:	f000 f874 	bl	8002692 <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 80025aa:	0003      	movs	r3, r0
    }
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b005      	add	sp, #20
 80025b2:	bd90      	pop	{r4, r7, pc}

080025b4 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	0018      	movs	r0, r3
 80025c0:	f7fe ff18 	bl	80013f4 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>
 80025c4:	0003      	movs	r3, r0
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 80025ce:	b590      	push	{r4, r7, lr}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 f87d 	bl	80026dc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 80025e2:	0004      	movs	r4, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 f878 	bl	80026dc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 80025ec:	0001      	movs	r1, r0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	001a      	movs	r2, r3
 80025f2:	0020      	movs	r0, r4
 80025f4:	f000 f87b 	bl	80026ee <_ZSt14__copy_move_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 80025f8:	0003      	movs	r3, r0
    }
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b005      	add	sp, #20
 8002600:	bd90      	pop	{r4, r7, pc}

08002602 <_ZSt13copy_backwardIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8002602:	b590      	push	{r4, r7, lr}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	0018      	movs	r0, r3
 8002612:	f000 f863 	bl	80026dc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 8002616:	0004      	movs	r4, r0
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 f85e 	bl	80026dc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 8002620:	0001      	movs	r1, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	001a      	movs	r2, r3
 8002626:	0020      	movs	r0, r4
 8002628:	f000 f886 	bl	8002738 <_ZSt23__copy_move_backward_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 800262c:	0003      	movs	r3, r0
    }
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b005      	add	sp, #20
 8002634:	bd90      	pop	{r4, r7, pc}

08002636 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f893 	bl	8002782 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800265c:	0004      	movs	r4, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	0018      	movs	r0, r3
 8002662:	f000 f88e 	bl	8002782 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8002666:	0005      	movs	r5, r0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0018      	movs	r0, r3
 800266c:	f000 f889 	bl	8002782 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8002670:	0003      	movs	r3, r0
 8002672:	001a      	movs	r2, r3
 8002674:	0029      	movs	r1, r5
 8002676:	0020      	movs	r0, r4
 8002678:	f000 f88c 	bl	8002794 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 800267c:	0002      	movs	r2, r0
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	0011      	movs	r1, r2
 8002682:	0018      	movs	r0, r3
 8002684:	f000 f89b 	bl	80027be <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 8002688:	0003      	movs	r3, r0
    }
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bdb0      	pop	{r4, r5, r7, pc}

08002692 <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8002692:	b5b0      	push	{r4, r5, r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f86e 	bl	8002782 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 80026a6:	0004      	movs	r4, r0
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f869 	bl	8002782 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 80026b0:	0005      	movs	r5, r0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 f864 	bl	8002782 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 80026ba:	0003      	movs	r3, r0
 80026bc:	001a      	movs	r2, r3
 80026be:	0029      	movs	r1, r5
 80026c0:	0020      	movs	r0, r4
 80026c2:	f000 f886 	bl	80027d2 <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 80026c6:	0002      	movs	r2, r0
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	0011      	movs	r1, r2
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 f876 	bl	80027be <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 80026d2:	0003      	movs	r3, r0
    }
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b004      	add	sp, #16
 80026da:	bdb0      	pop	{r4, r5, r7, pc}

080026dc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>:
    __miter_base(_Iterator __it)
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}

080026ee <_ZSt14__copy_move_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80026ee:	b5b0      	push	{r4, r5, r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f87d 	bl	80027fc <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002702:	0004      	movs	r4, r0
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f878 	bl	80027fc <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 800270c:	0005      	movs	r5, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f873 	bl	80027fc <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002716:	0003      	movs	r3, r0
 8002718:	001a      	movs	r2, r3
 800271a:	0029      	movs	r1, r5
 800271c:	0020      	movs	r0, r4
 800271e:	f000 f876 	bl	800280e <_ZSt13__copy_move_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 8002722:	0002      	movs	r2, r0
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	0011      	movs	r1, r2
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f885 	bl	8002838 <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>
 800272e:	0003      	movs	r3, r0
    }
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b004      	add	sp, #16
 8002736:	bdb0      	pop	{r4, r5, r7, pc}

08002738 <_ZSt23__copy_move_backward_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	0018      	movs	r0, r3
 8002748:	f000 f858 	bl	80027fc <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 800274c:	0004      	movs	r4, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	0018      	movs	r0, r3
 8002752:	f000 f853 	bl	80027fc <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002756:	0005      	movs	r5, r0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f84e 	bl	80027fc <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002760:	0003      	movs	r3, r0
 8002762:	001a      	movs	r2, r3
 8002764:	0029      	movs	r1, r5
 8002766:	0020      	movs	r0, r4
 8002768:	f000 f870 	bl	800284c <_ZSt22__copy_move_backward_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 800276c:	0002      	movs	r2, r0
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	0011      	movs	r1, r2
 8002772:	0018      	movs	r0, r3
 8002774:	f000 f860 	bl	8002838 <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>
 8002778:	0003      	movs	r3, r0
    }
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b004      	add	sp, #16
 8002780:	bdb0      	pop	{r4, r5, r7, pc}

08002782 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:
    __niter_base(_Iterator __it)
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
    { return __it; }
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80027a0:	2317      	movs	r3, #23
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
			      _Category>::__copy_m(__first, __last, __result);
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f861 	bl	8002876 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 80027b4:	0003      	movs	r3, r0
    }
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b006      	add	sp, #24
 80027bc:	bd80      	pop	{r7, pc}

080027be <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
    { return __res; }
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 80027de:	2317      	movs	r3, #23
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
				       _Category>::__copy_move_b(__first,
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f85f 	bl	80028b0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 80027f2:	0003      	movs	r3, r0
    }
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b006      	add	sp, #24
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>:
    __niter_base(_Iterator __it)
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	b002      	add	sp, #8
 800280c:	bd80      	pop	{r7, pc}

0800280e <_ZSt13__copy_move_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800281a:	2317      	movs	r3, #23
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
			      _Category>::__copy_m(__first, __last, __result);
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 f863 	bl	80028f4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>
 800282e:	0003      	movs	r3, r0
    }
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b006      	add	sp, #24
 8002836:	bd80      	pop	{r7, pc}

08002838 <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}

0800284c <_ZSt22__copy_move_backward_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 8002858:	2317      	movs	r3, #23
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
				       _Category>::__copy_move_b(__first,
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f861 	bl	800292e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>
 800286c:	0003      	movs	r3, r0
    }
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b006      	add	sp, #24
 8002874:	bd80      	pop	{r7, pc}

08002876 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	109b      	asrs	r3, r3, #2
 800288a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	68f9      	ldr	r1, [r7, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	0018      	movs	r0, r3
 800289c:	f002 fa81 	bl	8004da2 <memmove>
	  return __result + _Num;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	18d3      	adds	r3, r2, r3
	}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b006      	add	sp, #24
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	109b      	asrs	r3, r3, #2
 80028c4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	425b      	negs	r3, r3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	18d0      	adds	r0, r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	009a      	lsls	r2, r3, #2
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	0019      	movs	r1, r3
 80028de:	f002 fa60 	bl	8004da2 <memmove>
	  return __result - _Num;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	425b      	negs	r3, r3
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	18d3      	adds	r3, r2, r3
	}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b006      	add	sp, #24
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	109b      	asrs	r3, r3, #2
 8002908:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	68f9      	ldr	r1, [r7, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f002 fa42 	bl	8004da2 <memmove>
	  return __result + _Num;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	18d3      	adds	r3, r2, r3
	}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b006      	add	sp, #24
 800292c:	bd80      	pop	{r7, pc}

0800292e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	109b      	asrs	r3, r3, #2
 8002942:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	425b      	negs	r3, r3
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	18d0      	adds	r0, r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	009a      	lsls	r2, r3, #2
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	0019      	movs	r1, r3
 800295c:	f002 fa21 	bl	8004da2 <memmove>
	  return __result - _Num;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	425b      	negs	r3, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	18d3      	adds	r3, r2, r3
	}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b006      	add	sp, #24
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <HAL_MspInit+0x44>)
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_MspInit+0x44>)
 8002980:	2101      	movs	r1, #1
 8002982:	430a      	orrs	r2, r1
 8002984:	619a      	str	r2, [r3, #24]
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_MspInit+0x44>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2201      	movs	r2, #1
 800298c:	4013      	ands	r3, r2
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_MspInit+0x44>)
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_MspInit+0x44>)
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0549      	lsls	r1, r1, #21
 800299c:	430a      	orrs	r2, r1
 800299e:	61da      	str	r2, [r3, #28]
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_MspInit+0x44>)
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	055b      	lsls	r3, r3, #21
 80029a8:	4013      	ands	r3, r2
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	0019      	movs	r1, r3
 80029d2:	2010      	movs	r0, #16
 80029d4:	f000 fc8e 	bl	80032f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029d8:	2010      	movs	r0, #16
 80029da:	f000 fca0 	bl	800331e <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_InitTick+0xa4>)
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_InitTick+0xa4>)
 80029e4:	2102      	movs	r1, #2
 80029e6:	430a      	orrs	r2, r1
 80029e8:	61da      	str	r2, [r3, #28]
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_InitTick+0xa4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	2202      	movs	r2, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029f6:	230c      	movs	r3, #12
 80029f8:	18fa      	adds	r2, r7, r3
 80029fa:	2310      	movs	r3, #16
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	0011      	movs	r1, r2
 8002a00:	0018      	movs	r0, r3
 8002a02:	f001 fa97 	bl	8003f34 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a06:	f001 fa7f 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	4914      	ldr	r1, [pc, #80]	; (8002a64 <HAL_InitTick+0xa8>)
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7fd fb80 	bl	8000118 <__udivsi3>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_InitTick+0xac>)
 8002a20:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_InitTick+0xb0>)
 8002a22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_InitTick+0xac>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <HAL_InitTick+0xb4>)
 8002a28:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_InitTick+0xac>)
 8002a2c:	6a3a      	ldr	r2, [r7, #32]
 8002a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_InitTick+0xac>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_InitTick+0xac>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_InitTick+0xac>)
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f001 faa2 	bl	8003f88 <HAL_TIM_Base_Init>
 8002a44:	1e03      	subs	r3, r0, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <HAL_InitTick+0xac>)
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f001 faec 	bl	8004028 <HAL_TIM_Base_Start_IT>
 8002a50:	0003      	movs	r3, r0
 8002a52:	e000      	b.n	8002a56 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b00a      	add	sp, #40	; 0x28
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	40021000 	.word	0x40021000
 8002a64:	000f4240 	.word	0x000f4240
 8002a68:	20000148 	.word	0x20000148
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	000003e7 	.word	0x000003e7

08002a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <NMI_Handler+0x4>

08002a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <HardFault_Handler+0x4>

08002a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <TIM3_IRQHandler+0x14>)
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f001 fb38 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	20000148 	.word	0x20000148

08002ab8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <TIM15_IRQHandler+0x18>)
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f001 fb2c 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  radioSendTick();
 8002ac4:	f7fd fd38 	bl	8000538 <radioSendTick>

  /* USER CODE END TIM15_IRQn 1 */
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	20000190 	.word	0x20000190

08002ad4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <TIM16_IRQHandler+0x18>)
 8002ada:	0018      	movs	r0, r3
 8002adc:	f001 fb1e 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  radioReceiveTick();
 8002ae0:	f7fd fd36 	bl	8000550 <radioReceiveTick>

  /* USER CODE END TIM16_IRQn 1 */
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	200001d8 	.word	0x200001d8

08002af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
	return 1;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <_kill>:

int _kill(int pid, int sig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b06:	f002 f905 	bl	8004d14 <__errno>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	2216      	movs	r2, #22
 8002b0e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b10:	2301      	movs	r3, #1
 8002b12:	425b      	negs	r3, r3
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_exit>:

void _exit (int status)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b24:	2301      	movs	r3, #1
 8002b26:	425a      	negs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff ffe5 	bl	8002afc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b32:	e7fe      	b.n	8002b32 <_exit+0x16>

08002b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b3c:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <_sbrk+0x5c>)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <_sbrk+0x60>)
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <_sbrk+0x64>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <_sbrk+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	18d3      	adds	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b64:	f002 f8d6 	bl	8004d14 <__errno>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	425b      	negs	r3, r3
 8002b72:	e009      	b.n	8002b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	18d2      	adds	r2, r2, r3
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <_sbrk+0x64>)
 8002b84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b006      	add	sp, #24
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20002000 	.word	0x20002000
 8002b94:	00000400 	.word	0x00000400
 8002b98:	20000134 	.word	0x20000134
 8002b9c:	20000238 	.word	0x20000238

08002ba0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <MX_TIM15_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	2310      	movs	r3, #16
 8002bba:	001a      	movs	r2, r3
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f002 f903 	bl	8004dc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc2:	003b      	movs	r3, r7
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	001a      	movs	r2, r3
 8002bca:	2100      	movs	r1, #0
 8002bcc:	f002 f8fc 	bl	8004dc8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002bd0:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002bd2:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <MX_TIM15_Init+0xac>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 480;
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002bd8:	22f0      	movs	r2, #240	; 0xf0
 8002bda:	0052      	lsls	r2, r2, #1
 8002bdc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002be6:	2263      	movs	r2, #99	; 0x63
 8002be8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f001 f9c2 	bl	8003f88 <HAL_TIM_Base_Init>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM15_Init+0x60>
  {
    Error_Handler();
 8002c08:	f7fd fc26 	bl	8000458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c0c:	2108      	movs	r1, #8
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	0152      	lsls	r2, r2, #5
 8002c14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002c16:	187a      	adds	r2, r7, r1
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002c1a:	0011      	movs	r1, r2
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f001 fb93 	bl	8004348 <HAL_TIM_ConfigClockSource>
 8002c22:	1e03      	subs	r3, r0, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8002c26:	f7fd fc17 	bl	8000458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2a:	003b      	movs	r3, r7
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c30:	003b      	movs	r3, r7
 8002c32:	2200      	movs	r2, #0
 8002c34:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002c36:	003a      	movs	r2, r7
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <MX_TIM15_Init+0xa8>)
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f001 fd7d 	bl	800473c <HAL_TIMEx_MasterConfigSynchronization>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8002c46:	f7fd fc07 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b006      	add	sp, #24
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	20000190 	.word	0x20000190
 8002c58:	40014000 	.word	0x40014000

08002c5c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <MX_TIM16_Init+0x44>)
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <MX_TIM16_Init+0x48>)
 8002c64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <MX_TIM16_Init+0x44>)
 8002c68:	2230      	movs	r2, #48	; 0x30
 8002c6a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <MX_TIM16_Init+0x44>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <MX_TIM16_Init+0x44>)
 8002c74:	2209      	movs	r2, #9
 8002c76:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <MX_TIM16_Init+0x44>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <MX_TIM16_Init+0x44>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <MX_TIM16_Init+0x44>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <MX_TIM16_Init+0x44>)
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f001 f97b 	bl	8003f88 <HAL_TIM_Base_Init>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002c96:	f7fd fbdf 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200001d8 	.word	0x200001d8
 8002ca4:	40014400 	.word	0x40014400

08002ca8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <HAL_TIM_Base_MspInit+0x80>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d116      	bne.n	8002ce8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cba:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <HAL_TIM_Base_MspInit+0x84>)
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_TIM_Base_MspInit+0x84>)
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	0249      	lsls	r1, r1, #9
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	619a      	str	r2, [r3, #24]
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_TIM_Base_MspInit+0x84>)
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	025b      	lsls	r3, r3, #9
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 2, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2102      	movs	r1, #2
 8002cda:	2014      	movs	r0, #20
 8002cdc:	f000 fb0a 	bl	80032f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002ce0:	2014      	movs	r0, #20
 8002ce2:	f000 fb1c 	bl	800331e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002ce6:	e01a      	b.n	8002d1e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM16)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_TIM_Base_MspInit+0x88>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d115      	bne.n	8002d1e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_TIM_Base_MspInit+0x84>)
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_TIM_Base_MspInit+0x84>)
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	0289      	lsls	r1, r1, #10
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	619a      	str	r2, [r3, #24]
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_TIM_Base_MspInit+0x84>)
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	029b      	lsls	r3, r3, #10
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2100      	movs	r1, #0
 8002d12:	2015      	movs	r0, #21
 8002d14:	f000 faee 	bl	80032f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002d18:	2015      	movs	r0, #21
 8002d1a:	f000 fb00 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b004      	add	sp, #16
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	40014000 	.word	0x40014000
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40014400 	.word	0x40014400

08002d34 <_ZNSt12_Base_bitsetILj1EEC1Ey>:
      constexpr _Base_bitset(unsigned long long __val) noexcept
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	603a      	str	r2, [r7, #0]
 8002d3e:	607b      	str	r3, [r7, #4]
      : _M_w(__val)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]
      { }
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_ZN11transmitter7disableEv>:
{
	HAL_TIM_Base_Start_IT(&htim15);
}

void transmitter::disable()
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim15);
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <_ZN11transmitter7disableEv+0x18>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f001 f9b0 	bl	80040c0 <HAL_TIM_Base_Stop_IT>
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000190 	.word	0x20000190

08002d6c <_ZN11transmitter10fillBufferEv>:
}

// Pop the next message from the outbound queue
// and add it to the outbound buffer
void transmitter::fillBuffer()
{
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	b08b      	sub	sp, #44	; 0x2c
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	string m = messages.front();
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7fe fe99 	bl	8001aae <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	230c      	movs	r3, #12
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	0011      	movs	r1, r2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f001 ff6f 	bl	8004c68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	messages.pop_front();
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7fe fea2 	bl	8001ad6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>

	for(uint8_t i = 0; i < m.length(); i++)
 8002d92:	2327      	movs	r3, #39	; 0x27
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	2627      	movs	r6, #39	; 0x27
 8002d9c:	19bb      	adds	r3, r7, r6
 8002d9e:	781e      	ldrb	r6, [r3, #0]
 8002da0:	230c      	movs	r3, #12
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	0018      	movs	r0, r3
 8002da6:	f001 fec7 	bl	8004b38 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002daa:	0003      	movs	r3, r0
 8002dac:	429e      	cmp	r6, r3
 8002dae:	419b      	sbcs	r3, r3
 8002db0:	425b      	negs	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d022      	beq.n	8002dfe <_ZN11transmitter10fillBufferEv+0x92>
	{
		bitset<8> c = m[i];
 8002db8:	2627      	movs	r6, #39	; 0x27
 8002dba:	19bb      	adds	r3, r7, r6
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	0011      	movs	r1, r2
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f001 feb9 	bl	8004b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	001c      	movs	r4, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	001d      	movs	r5, r3
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	18f9      	adds	r1, r7, r3
 8002dd8:	0022      	movs	r2, r4
 8002dda:	002b      	movs	r3, r5
 8002ddc:	0008      	movs	r0, r1
 8002dde:	f000 f935 	bl	800304c <_ZNSt6bitsetILj8EEC1Ey>
		buffer.push_back(c);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3328      	adds	r3, #40	; 0x28
 8002de6:	2208      	movs	r2, #8
 8002de8:	18ba      	adds	r2, r7, r2
 8002dea:	0011      	movs	r1, r2
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7fe fde3 	bl	80019b8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
	for(uint8_t i = 0; i < m.length(); i++)
 8002df2:	19bb      	adds	r3, r7, r6
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	19bb      	adds	r3, r7, r6
 8002df8:	3201      	adds	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e7cd      	b.n	8002d9a <_ZN11transmitter10fillBufferEv+0x2e>
	}
	bitPointer = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2250      	movs	r2, #80	; 0x50
 8002e02:	2100      	movs	r1, #0
 8002e04:	5499      	strb	r1, [r3, r2]
	string m = messages.front();
 8002e06:	230c      	movs	r3, #12
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f001 fe8e 	bl	8004b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b00b      	add	sp, #44	; 0x2c
 8002e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e18 <_ZN11transmitter10getNextBitEv>:

// Get the next bit to send
uint8_t transmitter::getNextBit()
{
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	if(buffer.empty())
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3328      	adds	r3, #40	; 0x28
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7fe fd33 	bl	8001890 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d001      	beq.n	8002e32 <_ZN11transmitter10getNextBitEv+0x1a>
	{
		return NO_NEW_BITS;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e03c      	b.n	8002eac <_ZN11transmitter10getNextBitEv+0x94>
	}

	if(bitPointer > 7)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2250      	movs	r2, #80	; 0x50
 8002e36:	5c9b      	ldrb	r3, [r3, r2]
 8002e38:	2b07      	cmp	r3, #7
 8002e3a:	d911      	bls.n	8002e60 <_ZN11transmitter10getNextBitEv+0x48>
	{
		buffer.pop_front();
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3328      	adds	r3, #40	; 0x28
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7fe fd4b 	bl	80018dc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>
		bitPointer = 0;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2250      	movs	r2, #80	; 0x50
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	5499      	strb	r1, [r3, r2]

		if(buffer.empty())
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3328      	adds	r3, #40	; 0x28
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7fe fd1c 	bl	8001890 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 8002e58:	1e03      	subs	r3, r0, #0
 8002e5a:	d001      	beq.n	8002e60 <_ZN11transmitter10getNextBitEv+0x48>
		{
			return NO_NEW_BITS;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e025      	b.n	8002eac <_ZN11transmitter10getNextBitEv+0x94>
		}
	}

	uint8_t retVal = buffer.front()[bitPointer];
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3328      	adds	r3, #40	; 0x28
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7fe fd25 	bl	80018b4 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>
 8002e6a:	0001      	movs	r1, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2250      	movs	r2, #80	; 0x50
 8002e70:	5c9b      	ldrb	r3, [r3, r2]
 8002e72:	001a      	movs	r2, r3
 8002e74:	240c      	movs	r4, #12
 8002e76:	193b      	adds	r3, r7, r4
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 f8fe 	bl	800307a <_ZNSt6bitsetILj8EEixEj>
 8002e7e:	193b      	adds	r3, r7, r4
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 f913 	bl	80030ac <_ZNKSt6bitsetILj8EE9referencecvbEv>
 8002e86:	0003      	movs	r3, r0
 8002e88:	001a      	movs	r2, r3
 8002e8a:	2517      	movs	r5, #23
 8002e8c:	197b      	adds	r3, r7, r5
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	193b      	adds	r3, r7, r4
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 f901 	bl	800309a <_ZNSt6bitsetILj8EE9referenceD1Ev>

	bitPointer++;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2250      	movs	r2, #80	; 0x50
 8002e9c:	5c9b      	ldrb	r3, [r3, r2]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	b2d9      	uxtb	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2250      	movs	r2, #80	; 0x50
 8002ea6:	5499      	strb	r1, [r3, r2]

	return retVal;
 8002ea8:	197b      	adds	r3, r7, r5
 8002eaa:	781b      	ldrb	r3, [r3, #0]
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b006      	add	sp, #24
 8002eb2:	bdb0      	pop	{r4, r5, r7, pc}

08002eb4 <_ZN11transmitter4tickEv>:
}

// Function to be called by the interrupt handler.
// Standard version with start and stop bits, using a state machine.
void transmitter::tick()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

	// State machine variable to keep track of message progress across interrupts
	static uint8_t state = START_HIGH;

	// When done waiting, move on to the next instruction
	if(holdFor <= 1)
 8002ebc:	4b5f      	ldr	r3, [pc, #380]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d900      	bls.n	8002ec6 <_ZN11transmitter4tickEv+0x12>
 8002ec4:	e0ad      	b.n	8003022 <_ZN11transmitter4tickEv+0x16e>
	{
		switch(state)
 8002ec6:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d900      	bls.n	8002ed0 <_ZN11transmitter4tickEv+0x1c>
 8002ece:	e0b0      	b.n	8003032 <_ZN11transmitter4tickEv+0x17e>
 8002ed0:	009a      	lsls	r2, r3, #2
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <_ZN11transmitter4tickEv+0x190>)
 8002ed4:	18d3      	adds	r3, r2, r3
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	469f      	mov	pc, r3
		{
			case START_HIGH:
				SEND_HIGH;
 8002eda:	4b5b      	ldr	r3, [pc, #364]	; (8003048 <_ZN11transmitter4tickEv+0x194>)
 8002edc:	2208      	movs	r2, #8
 8002ede:	619a      	str	r2, [r3, #24]
				RED_HIGH;
 8002ee0:	2390      	movs	r3, #144	; 0x90
 8002ee2:	05db      	lsls	r3, r3, #23
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 8002ee8:	4b54      	ldr	r3, [pc, #336]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 8002eea:	2203      	movs	r2, #3
 8002eec:	701a      	strb	r2, [r3, #0]
				state = START_LOW;
 8002eee:	4b54      	ldr	r3, [pc, #336]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
				break;
 8002ef4:	e09d      	b.n	8003032 <_ZN11transmitter4tickEv+0x17e>
			case START_LOW:
				SEND_LOW;
 8002ef6:	4b54      	ldr	r3, [pc, #336]	; (8003048 <_ZN11transmitter4tickEv+0x194>)
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	0312      	lsls	r2, r2, #12
 8002efc:	619a      	str	r2, [r3, #24]
				RED_LOW;
 8002efe:	2390      	movs	r3, #144	; 0x90
 8002f00:	05db      	lsls	r3, r3, #23
 8002f02:	2280      	movs	r2, #128	; 0x80
 8002f04:	02d2      	lsls	r2, r2, #11
 8002f06:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 8002f08:	4b4c      	ldr	r3, [pc, #304]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	701a      	strb	r2, [r3, #0]
				state = MSG_HIGH;
 8002f0e:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 8002f10:	2202      	movs	r2, #2
 8002f12:	701a      	strb	r2, [r3, #0]
				// Fill the buffer with the message to be sent
				fillBuffer();
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f7ff ff28 	bl	8002d6c <_ZN11transmitter10fillBufferEv>
				break;
 8002f1c:	e089      	b.n	8003032 <_ZN11transmitter4tickEv+0x17e>
			case MSG_HIGH:
				switch(getNextBit())
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff ff79 	bl	8002e18 <_ZN11transmitter10getNextBitEv>
 8002f26:	0003      	movs	r3, r0
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d022      	beq.n	8002f72 <_ZN11transmitter4tickEv+0xbe>
 8002f2c:	dd00      	ble.n	8002f30 <_ZN11transmitter4tickEv+0x7c>
 8002f2e:	e07f      	b.n	8003030 <_ZN11transmitter4tickEv+0x17c>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <_ZN11transmitter4tickEv+0x86>
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d00e      	beq.n	8002f56 <_ZN11transmitter4tickEv+0xa2>
						SEND_LOW;
						RED_LOW;
						state = STOP_LOW;
						break;
				}
				break;
 8002f38:	e07a      	b.n	8003030 <_ZN11transmitter4tickEv+0x17c>
						SEND_HIGH;
 8002f3a:	4b43      	ldr	r3, [pc, #268]	; (8003048 <_ZN11transmitter4tickEv+0x194>)
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	619a      	str	r2, [r3, #24]
						RED_HIGH;
 8002f40:	2390      	movs	r3, #144	; 0x90
 8002f42:	05db      	lsls	r3, r3, #23
 8002f44:	2204      	movs	r2, #4
 8002f46:	619a      	str	r2, [r3, #24]
						holdFor = LENGTH_ZERO;
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
						state = MSG_LOW;
 8002f4e:	4b3c      	ldr	r3, [pc, #240]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 8002f50:	2203      	movs	r2, #3
 8002f52:	701a      	strb	r2, [r3, #0]
						break;
 8002f54:	e01a      	b.n	8002f8c <_ZN11transmitter4tickEv+0xd8>
						SEND_HIGH;
 8002f56:	4b3c      	ldr	r3, [pc, #240]	; (8003048 <_ZN11transmitter4tickEv+0x194>)
 8002f58:	2208      	movs	r2, #8
 8002f5a:	619a      	str	r2, [r3, #24]
						RED_HIGH;
 8002f5c:	2390      	movs	r3, #144	; 0x90
 8002f5e:	05db      	lsls	r3, r3, #23
 8002f60:	2204      	movs	r2, #4
 8002f62:	619a      	str	r2, [r3, #24]
						holdFor = LENGTH_ONE;
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
						state = MSG_LOW;
 8002f6a:	4b35      	ldr	r3, [pc, #212]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	701a      	strb	r2, [r3, #0]
						break;
 8002f70:	e00c      	b.n	8002f8c <_ZN11transmitter4tickEv+0xd8>
						SEND_LOW;
 8002f72:	4b35      	ldr	r3, [pc, #212]	; (8003048 <_ZN11transmitter4tickEv+0x194>)
 8002f74:	2280      	movs	r2, #128	; 0x80
 8002f76:	0312      	lsls	r2, r2, #12
 8002f78:	619a      	str	r2, [r3, #24]
						RED_LOW;
 8002f7a:	2390      	movs	r3, #144	; 0x90
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	02d2      	lsls	r2, r2, #11
 8002f82:	619a      	str	r2, [r3, #24]
						state = STOP_LOW;
 8002f84:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 8002f86:	2204      	movs	r2, #4
 8002f88:	701a      	strb	r2, [r3, #0]
						break;
 8002f8a:	46c0      	nop			; (mov r8, r8)
				break;
 8002f8c:	e050      	b.n	8003030 <_ZN11transmitter4tickEv+0x17c>
			case MSG_LOW:
				SEND_LOW;
 8002f8e:	4b2e      	ldr	r3, [pc, #184]	; (8003048 <_ZN11transmitter4tickEv+0x194>)
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	0312      	lsls	r2, r2, #12
 8002f94:	619a      	str	r2, [r3, #24]
				RED_LOW;
 8002f96:	2390      	movs	r3, #144	; 0x90
 8002f98:	05db      	lsls	r3, r3, #23
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	02d2      	lsls	r2, r2, #11
 8002f9e:	619a      	str	r2, [r3, #24]
				state = MSG_HIGH;
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	701a      	strb	r2, [r3, #0]
				break;
 8002fa6:	e044      	b.n	8003032 <_ZN11transmitter4tickEv+0x17e>
			case STOP_LOW:
				SEND_LOW;
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <_ZN11transmitter4tickEv+0x194>)
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	0312      	lsls	r2, r2, #12
 8002fae:	619a      	str	r2, [r3, #24]
				RED_LOW;
 8002fb0:	2390      	movs	r3, #144	; 0x90
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	02d2      	lsls	r2, r2, #11
 8002fb8:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_STOP;
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	701a      	strb	r2, [r3, #0]
				state = STOP_HIGH;
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	701a      	strb	r2, [r3, #0]
				break;
 8002fc6:	e034      	b.n	8003032 <_ZN11transmitter4tickEv+0x17e>
			case STOP_HIGH:
				SEND_HIGH;
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <_ZN11transmitter4tickEv+0x194>)
 8002fca:	2208      	movs	r2, #8
 8002fcc:	619a      	str	r2, [r3, #24]
				RED_HIGH;
 8002fce:	2390      	movs	r3, #144	; 0x90
 8002fd0:	05db      	lsls	r3, r3, #23
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_STOP;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 8002fd8:	2204      	movs	r2, #4
 8002fda:	701a      	strb	r2, [r3, #0]
				state = IDLE;
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 8002fde:	2206      	movs	r2, #6
 8002fe0:	701a      	strb	r2, [r3, #0]
				break;
 8002fe2:	e026      	b.n	8003032 <_ZN11transmitter4tickEv+0x17e>
			case IDLE:
				SEND_LOW;
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <_ZN11transmitter4tickEv+0x194>)
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	0312      	lsls	r2, r2, #12
 8002fea:	619a      	str	r2, [r3, #24]
				RED_LOW;
 8002fec:	2390      	movs	r3, #144	; 0x90
 8002fee:	05db      	lsls	r3, r3, #23
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	02d2      	lsls	r2, r2, #11
 8002ff4:	619a      	str	r2, [r3, #24]
				if(messages.empty())
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7fe fd46 	bl	8001a8a <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d004      	beq.n	800300c <_ZN11transmitter4tickEv+0x158>
				{
					disable();
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff fea3 	bl	8002d50 <_ZN11transmitter7disableEv>
				{
					holdFor = 10;
					bitPointer = 0;
					state = START_HIGH;
				}
				break;
 800300a:	e012      	b.n	8003032 <_ZN11transmitter4tickEv+0x17e>
					holdFor = 10;
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 800300e:	220a      	movs	r2, #10
 8003010:	701a      	strb	r2, [r3, #0]
					bitPointer = 0;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2250      	movs	r2, #80	; 0x50
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]
					state = START_HIGH;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <_ZN11transmitter4tickEv+0x18c>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
				break;
 8003020:	e007      	b.n	8003032 <_ZN11transmitter4tickEv+0x17e>
		}
	}
	else
	{
		holdFor--;
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	3b01      	subs	r3, #1
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <_ZN11transmitter4tickEv+0x188>)
 800302c:	701a      	strb	r2, [r3, #0]
	}
}
 800302e:	e000      	b.n	8003032 <_ZN11transmitter4tickEv+0x17e>
				break;
 8003030:	46c0      	nop			; (mov r8, r8)
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	20000004 	.word	0x20000004
 8003040:	20000138 	.word	0x20000138
 8003044:	080050cc 	.word	0x080050cc
 8003048:	48000400 	.word	0x48000400

0800304c <_ZNSt6bitsetILj8EEC1Ey>:
      constexpr bitset(unsigned long long __val) noexcept
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	603a      	str	r2, [r7, #0]
 8003056:	607b      	str	r3, [r7, #4]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 8003058:	68fc      	ldr	r4, [r7, #12]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0010      	movs	r0, r2
 8003060:	0019      	movs	r1, r3
 8003062:	f000 f838 	bl	80030d6 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>
 8003066:	0002      	movs	r2, r0
 8003068:	000b      	movs	r3, r1
 800306a:	0020      	movs	r0, r4
 800306c:	f7ff fe62 	bl	8002d34 <_ZNSt12_Base_bitsetILj1EEC1Ey>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b005      	add	sp, #20
 8003078:	bd90      	pop	{r4, r7, pc}

0800307a <_ZNSt6bitsetILj8EEixEj>:
      operator[](size_t __position)
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f834 	bl	80030fa <_ZNSt6bitsetILj8EE9referenceC1ERS0_j>
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	46bd      	mov	sp, r7
 8003096:	b004      	add	sp, #16
 8003098:	bd80      	pop	{r7, pc}

0800309a <_ZNSt6bitsetILj8EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	{ }
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_ZNKSt6bitsetILj8EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681c      	ldr	r4, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0018      	movs	r0, r3
 80030c0:	f7fe fa30 	bl	8001524 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 80030c4:	0003      	movs	r3, r0
 80030c6:	4023      	ands	r3, r4
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	4193      	sbcs	r3, r2
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b003      	add	sp, #12
 80030d4:	bd90      	pop	{r4, r7, pc}

080030d6 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6038      	str	r0, [r7, #0]
 80030de:	6079      	str	r1, [r7, #4]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	20ff      	movs	r0, #255	; 0xff
 80030e4:	4001      	ands	r1, r0
 80030e6:	000a      	movs	r2, r1
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	2000      	movs	r0, #0
 80030ec:	4001      	ands	r1, r0
 80030ee:	000b      	movs	r3, r1
 80030f0:	0010      	movs	r0, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_ZNSt6bitsetILj8EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	0011      	movs	r1, r2
 800310c:	0018      	movs	r0, r3
 800310e:	f7fe fa19 	bl	8001544 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 8003112:	0002      	movs	r2, r0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	0018      	movs	r0, r3
 800311c:	f7fe f9f7 	bl	800150e <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 8003120:	0002      	movs	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]
	}
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b004      	add	sp, #16
 800312e:	bd80      	pop	{r7, pc}

08003130 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003130:	480d      	ldr	r0, [pc, #52]	; (8003168 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003132:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003134:	480d      	ldr	r0, [pc, #52]	; (800316c <LoopForever+0x6>)
  ldr r1, =_edata
 8003136:	490e      	ldr	r1, [pc, #56]	; (8003170 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003138:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <LoopForever+0xe>)
  movs r3, #0
 800313a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800313c:	e002      	b.n	8003144 <LoopCopyDataInit>

0800313e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003142:	3304      	adds	r3, #4

08003144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003148:	d3f9      	bcc.n	800313e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314a:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <LoopForever+0x12>)
  ldr r4, =_ebss
 800314c:	4c0b      	ldr	r4, [pc, #44]	; (800317c <LoopForever+0x16>)
  movs r3, #0
 800314e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003150:	e001      	b.n	8003156 <LoopFillZerobss>

08003152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003154:	3204      	adds	r2, #4

08003156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003158:	d3fb      	bcc.n	8003152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800315a:	f7ff fd21 	bl	8002ba0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800315e:	f001 fddf 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003162:	f7fd f8ef 	bl	8000344 <main>

08003166 <LoopForever>:

LoopForever:
    b LoopForever
 8003166:	e7fe      	b.n	8003166 <LoopForever>
  ldr   r0, =_estack
 8003168:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800316c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003170:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003174:	080051cc 	.word	0x080051cc
  ldr r2, =_sbss
 8003178:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800317c:	20000234 	.word	0x20000234

08003180 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003180:	e7fe      	b.n	8003180 <ADC1_IRQHandler>
	...

08003184 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <HAL_Init+0x24>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_Init+0x24>)
 800318e:	2110      	movs	r1, #16
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003194:	2000      	movs	r0, #0
 8003196:	f7ff fc11 	bl	80029bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800319a:	f7ff fbeb 	bl	8002974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	40022000 	.word	0x40022000

080031ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_IncTick+0x1c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	001a      	movs	r2, r3
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_IncTick+0x20>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	18d2      	adds	r2, r2, r3
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_IncTick+0x20>)
 80031be:	601a      	str	r2, [r3, #0]
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	20000005 	.word	0x20000005
 80031cc:	20000220 	.word	0x20000220

080031d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;
 80031d4:	4b02      	ldr	r3, [pc, #8]	; (80031e0 <HAL_GetTick+0x10>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	20000220 	.word	0x20000220

080031e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	0002      	movs	r2, r0
 80031ec:	1dfb      	adds	r3, r7, #7
 80031ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	1dfb      	adds	r3, r7, #7
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b7f      	cmp	r3, #127	; 0x7f
 80031f6:	d809      	bhi.n	800320c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f8:	1dfb      	adds	r3, r7, #7
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	001a      	movs	r2, r3
 80031fe:	231f      	movs	r3, #31
 8003200:	401a      	ands	r2, r3
 8003202:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__NVIC_EnableIRQ+0x30>)
 8003204:	2101      	movs	r1, #1
 8003206:	4091      	lsls	r1, r2
 8003208:	000a      	movs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
  }
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}
 8003214:	e000e100 	.word	0xe000e100

08003218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	0002      	movs	r2, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b7f      	cmp	r3, #127	; 0x7f
 800322c:	d828      	bhi.n	8003280 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800322e:	4a2f      	ldr	r2, [pc, #188]	; (80032ec <__NVIC_SetPriority+0xd4>)
 8003230:	1dfb      	adds	r3, r7, #7
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b25b      	sxtb	r3, r3
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	33c0      	adds	r3, #192	; 0xc0
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	589b      	ldr	r3, [r3, r2]
 800323e:	1dfa      	adds	r2, r7, #7
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	0011      	movs	r1, r2
 8003244:	2203      	movs	r2, #3
 8003246:	400a      	ands	r2, r1
 8003248:	00d2      	lsls	r2, r2, #3
 800324a:	21ff      	movs	r1, #255	; 0xff
 800324c:	4091      	lsls	r1, r2
 800324e:	000a      	movs	r2, r1
 8003250:	43d2      	mvns	r2, r2
 8003252:	401a      	ands	r2, r3
 8003254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	22ff      	movs	r2, #255	; 0xff
 800325c:	401a      	ands	r2, r3
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	0018      	movs	r0, r3
 8003264:	2303      	movs	r3, #3
 8003266:	4003      	ands	r3, r0
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800326c:	481f      	ldr	r0, [pc, #124]	; (80032ec <__NVIC_SetPriority+0xd4>)
 800326e:	1dfb      	adds	r3, r7, #7
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b25b      	sxtb	r3, r3
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	430a      	orrs	r2, r1
 8003278:	33c0      	adds	r3, #192	; 0xc0
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800327e:	e031      	b.n	80032e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <__NVIC_SetPriority+0xd8>)
 8003282:	1dfb      	adds	r3, r7, #7
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	0019      	movs	r1, r3
 8003288:	230f      	movs	r3, #15
 800328a:	400b      	ands	r3, r1
 800328c:	3b08      	subs	r3, #8
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3306      	adds	r3, #6
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	18d3      	adds	r3, r2, r3
 8003296:	3304      	adds	r3, #4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	1dfa      	adds	r2, r7, #7
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	0011      	movs	r1, r2
 80032a0:	2203      	movs	r2, #3
 80032a2:	400a      	ands	r2, r1
 80032a4:	00d2      	lsls	r2, r2, #3
 80032a6:	21ff      	movs	r1, #255	; 0xff
 80032a8:	4091      	lsls	r1, r2
 80032aa:	000a      	movs	r2, r1
 80032ac:	43d2      	mvns	r2, r2
 80032ae:	401a      	ands	r2, r3
 80032b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	22ff      	movs	r2, #255	; 0xff
 80032b8:	401a      	ands	r2, r3
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	0018      	movs	r0, r3
 80032c0:	2303      	movs	r3, #3
 80032c2:	4003      	ands	r3, r0
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032c8:	4809      	ldr	r0, [pc, #36]	; (80032f0 <__NVIC_SetPriority+0xd8>)
 80032ca:	1dfb      	adds	r3, r7, #7
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	001c      	movs	r4, r3
 80032d0:	230f      	movs	r3, #15
 80032d2:	4023      	ands	r3, r4
 80032d4:	3b08      	subs	r3, #8
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	430a      	orrs	r2, r1
 80032da:	3306      	adds	r3, #6
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	18c3      	adds	r3, r0, r3
 80032e0:	3304      	adds	r3, #4
 80032e2:	601a      	str	r2, [r3, #0]
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b003      	add	sp, #12
 80032ea:	bd90      	pop	{r4, r7, pc}
 80032ec:	e000e100 	.word	0xe000e100
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	210f      	movs	r1, #15
 8003300:	187b      	adds	r3, r7, r1
 8003302:	1c02      	adds	r2, r0, #0
 8003304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	187b      	adds	r3, r7, r1
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b25b      	sxtb	r3, r3
 800330e:	0011      	movs	r1, r2
 8003310:	0018      	movs	r0, r3
 8003312:	f7ff ff81 	bl	8003218 <__NVIC_SetPriority>
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	0002      	movs	r2, r0
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b25b      	sxtb	r3, r3
 8003330:	0018      	movs	r0, r3
 8003332:	f7ff ff57 	bl	80031e4 <__NVIC_EnableIRQ>
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	b002      	add	sp, #8
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334e:	e14f      	b.n	80035f0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4091      	lsls	r1, r2
 800335a:	000a      	movs	r2, r1
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d100      	bne.n	8003368 <HAL_GPIO_Init+0x28>
 8003366:	e140      	b.n	80035ea <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d00b      	beq.n	8003388 <HAL_GPIO_Init+0x48>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d007      	beq.n	8003388 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800337c:	2b11      	cmp	r3, #17
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b12      	cmp	r3, #18
 8003386:	d130      	bne.n	80033ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2203      	movs	r2, #3
 8003394:	409a      	lsls	r2, r3
 8003396:	0013      	movs	r3, r2
 8003398:	43da      	mvns	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	409a      	lsls	r2, r3
 80033aa:	0013      	movs	r3, r2
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033be:	2201      	movs	r2, #1
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	409a      	lsls	r2, r3
 80033c4:	0013      	movs	r3, r2
 80033c6:	43da      	mvns	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4013      	ands	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	2201      	movs	r2, #1
 80033d6:	401a      	ands	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	409a      	lsls	r2, r3
 80033dc:	0013      	movs	r3, r2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	409a      	lsls	r2, r3
 80033f8:	0013      	movs	r3, r2
 80033fa:	43da      	mvns	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	409a      	lsls	r2, r3
 800340c:	0013      	movs	r3, r2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0xea>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b12      	cmp	r3, #18
 8003428:	d123      	bne.n	8003472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	08da      	lsrs	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3208      	adds	r2, #8
 8003432:	0092      	lsls	r2, r2, #2
 8003434:	58d3      	ldr	r3, [r2, r3]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2207      	movs	r2, #7
 800343c:	4013      	ands	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	220f      	movs	r2, #15
 8003442:	409a      	lsls	r2, r3
 8003444:	0013      	movs	r3, r2
 8003446:	43da      	mvns	r2, r3
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2107      	movs	r1, #7
 8003456:	400b      	ands	r3, r1
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	409a      	lsls	r2, r3
 800345c:	0013      	movs	r3, r2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	0092      	lsls	r2, r2, #2
 800346e:	6939      	ldr	r1, [r7, #16]
 8003470:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	409a      	lsls	r2, r3
 8003480:	0013      	movs	r3, r2
 8003482:	43da      	mvns	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2203      	movs	r2, #3
 8003490:	401a      	ands	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	409a      	lsls	r2, r3
 8003498:	0013      	movs	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	055b      	lsls	r3, r3, #21
 80034ae:	4013      	ands	r3, r2
 80034b0:	d100      	bne.n	80034b4 <HAL_GPIO_Init+0x174>
 80034b2:	e09a      	b.n	80035ea <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b4:	4b54      	ldr	r3, [pc, #336]	; (8003608 <HAL_GPIO_Init+0x2c8>)
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	4b53      	ldr	r3, [pc, #332]	; (8003608 <HAL_GPIO_Init+0x2c8>)
 80034ba:	2101      	movs	r1, #1
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]
 80034c0:	4b51      	ldr	r3, [pc, #324]	; (8003608 <HAL_GPIO_Init+0x2c8>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2201      	movs	r2, #1
 80034c6:	4013      	ands	r3, r2
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034cc:	4a4f      	ldr	r2, [pc, #316]	; (800360c <HAL_GPIO_Init+0x2cc>)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	3302      	adds	r3, #2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	589b      	ldr	r3, [r3, r2]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2203      	movs	r2, #3
 80034de:	4013      	ands	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	220f      	movs	r2, #15
 80034e4:	409a      	lsls	r2, r3
 80034e6:	0013      	movs	r3, r2
 80034e8:	43da      	mvns	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	2390      	movs	r3, #144	; 0x90
 80034f4:	05db      	lsls	r3, r3, #23
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d013      	beq.n	8003522 <HAL_GPIO_Init+0x1e2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a44      	ldr	r2, [pc, #272]	; (8003610 <HAL_GPIO_Init+0x2d0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00d      	beq.n	800351e <HAL_GPIO_Init+0x1de>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a43      	ldr	r2, [pc, #268]	; (8003614 <HAL_GPIO_Init+0x2d4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <HAL_GPIO_Init+0x1da>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a42      	ldr	r2, [pc, #264]	; (8003618 <HAL_GPIO_Init+0x2d8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_GPIO_Init+0x1d6>
 8003512:	2303      	movs	r3, #3
 8003514:	e006      	b.n	8003524 <HAL_GPIO_Init+0x1e4>
 8003516:	2305      	movs	r3, #5
 8003518:	e004      	b.n	8003524 <HAL_GPIO_Init+0x1e4>
 800351a:	2302      	movs	r3, #2
 800351c:	e002      	b.n	8003524 <HAL_GPIO_Init+0x1e4>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_GPIO_Init+0x1e4>
 8003522:	2300      	movs	r3, #0
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	2103      	movs	r1, #3
 8003528:	400a      	ands	r2, r1
 800352a:	0092      	lsls	r2, r2, #2
 800352c:	4093      	lsls	r3, r2
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003534:	4935      	ldr	r1, [pc, #212]	; (800360c <HAL_GPIO_Init+0x2cc>)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <HAL_GPIO_Init+0x2dc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43da      	mvns	r2, r3
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	025b      	lsls	r3, r3, #9
 800355a:	4013      	ands	r3, r2
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_GPIO_Init+0x2dc>)
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800356c:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_GPIO_Init+0x2dc>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	43da      	mvns	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	4013      	ands	r3, r2
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003590:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_GPIO_Init+0x2dc>)
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_GPIO_Init+0x2dc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43da      	mvns	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	035b      	lsls	r3, r3, #13
 80035ae:	4013      	ands	r3, r2
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80035ba:	4b18      	ldr	r3, [pc, #96]	; (800361c <HAL_GPIO_Init+0x2dc>)
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80035c0:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_GPIO_Init+0x2dc>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	039b      	lsls	r3, r3, #14
 80035d8:	4013      	ands	r3, r2
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035e4:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_GPIO_Init+0x2dc>)
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	3301      	adds	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	40da      	lsrs	r2, r3
 80035f8:	1e13      	subs	r3, r2, #0
 80035fa:	d000      	beq.n	80035fe <HAL_GPIO_Init+0x2be>
 80035fc:	e6a8      	b.n	8003350 <HAL_GPIO_Init+0x10>
  } 
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b006      	add	sp, #24
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000
 800360c:	40010000 	.word	0x40010000
 8003610:	48000400 	.word	0x48000400
 8003614:	48000800 	.word	0x48000800
 8003618:	48000c00 	.word	0x48000c00
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	0008      	movs	r0, r1
 800362a:	0011      	movs	r1, r2
 800362c:	1cbb      	adds	r3, r7, #2
 800362e:	1c02      	adds	r2, r0, #0
 8003630:	801a      	strh	r2, [r3, #0]
 8003632:	1c7b      	adds	r3, r7, #1
 8003634:	1c0a      	adds	r2, r1, #0
 8003636:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003638:	1c7b      	adds	r3, r7, #1
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003640:	1cbb      	adds	r3, r7, #2
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800364a:	1cbb      	adds	r3, r7, #2
 800364c:	881a      	ldrh	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b002      	add	sp, #8
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e301      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	d100      	bne.n	800367a <HAL_RCC_OscConfig+0x1e>
 8003678:	e08d      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800367a:	4bc3      	ldr	r3, [pc, #780]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	220c      	movs	r2, #12
 8003680:	4013      	ands	r3, r2
 8003682:	2b04      	cmp	r3, #4
 8003684:	d00e      	beq.n	80036a4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003686:	4bc0      	ldr	r3, [pc, #768]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	220c      	movs	r2, #12
 800368c:	4013      	ands	r3, r2
 800368e:	2b08      	cmp	r3, #8
 8003690:	d116      	bne.n	80036c0 <HAL_RCC_OscConfig+0x64>
 8003692:	4bbd      	ldr	r3, [pc, #756]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	025b      	lsls	r3, r3, #9
 800369a:	401a      	ands	r2, r3
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	025b      	lsls	r3, r3, #9
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d10d      	bne.n	80036c0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	4bb8      	ldr	r3, [pc, #736]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	029b      	lsls	r3, r3, #10
 80036ac:	4013      	ands	r3, r2
 80036ae:	d100      	bne.n	80036b2 <HAL_RCC_OscConfig+0x56>
 80036b0:	e070      	b.n	8003794 <HAL_RCC_OscConfig+0x138>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d000      	beq.n	80036bc <HAL_RCC_OscConfig+0x60>
 80036ba:	e06b      	b.n	8003794 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e2d8      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x7c>
 80036c8:	4baf      	ldr	r3, [pc, #700]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4bae      	ldr	r3, [pc, #696]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	0249      	lsls	r1, r1, #9
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e02f      	b.n	8003738 <HAL_RCC_OscConfig+0xdc>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10c      	bne.n	80036fa <HAL_RCC_OscConfig+0x9e>
 80036e0:	4ba9      	ldr	r3, [pc, #676]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4ba8      	ldr	r3, [pc, #672]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80036e6:	49a9      	ldr	r1, [pc, #676]	; (800398c <HAL_RCC_OscConfig+0x330>)
 80036e8:	400a      	ands	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	4ba6      	ldr	r3, [pc, #664]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4ba5      	ldr	r3, [pc, #660]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80036f2:	49a7      	ldr	r1, [pc, #668]	; (8003990 <HAL_RCC_OscConfig+0x334>)
 80036f4:	400a      	ands	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e01e      	b.n	8003738 <HAL_RCC_OscConfig+0xdc>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d10e      	bne.n	8003720 <HAL_RCC_OscConfig+0xc4>
 8003702:	4ba1      	ldr	r3, [pc, #644]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4ba0      	ldr	r3, [pc, #640]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003708:	2180      	movs	r1, #128	; 0x80
 800370a:	02c9      	lsls	r1, r1, #11
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	4b9d      	ldr	r3, [pc, #628]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b9c      	ldr	r3, [pc, #624]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	0249      	lsls	r1, r1, #9
 800371a:	430a      	orrs	r2, r1
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e00b      	b.n	8003738 <HAL_RCC_OscConfig+0xdc>
 8003720:	4b99      	ldr	r3, [pc, #612]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b98      	ldr	r3, [pc, #608]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003726:	4999      	ldr	r1, [pc, #612]	; (800398c <HAL_RCC_OscConfig+0x330>)
 8003728:	400a      	ands	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	4b96      	ldr	r3, [pc, #600]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b95      	ldr	r3, [pc, #596]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003732:	4997      	ldr	r1, [pc, #604]	; (8003990 <HAL_RCC_OscConfig+0x334>)
 8003734:	400a      	ands	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d014      	beq.n	800376a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7ff fd46 	bl	80031d0 <HAL_GetTick>
 8003744:	0003      	movs	r3, r0
 8003746:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800374a:	f7ff fd41 	bl	80031d0 <HAL_GetTick>
 800374e:	0002      	movs	r2, r0
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b64      	cmp	r3, #100	; 0x64
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e28a      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375c:	4b8a      	ldr	r3, [pc, #552]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	029b      	lsls	r3, r3, #10
 8003764:	4013      	ands	r3, r2
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0xee>
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376a:	f7ff fd31 	bl	80031d0 <HAL_GetTick>
 800376e:	0003      	movs	r3, r0
 8003770:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003774:	f7ff fd2c 	bl	80031d0 <HAL_GetTick>
 8003778:	0002      	movs	r2, r0
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e275      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003786:	4b80      	ldr	r3, [pc, #512]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	029b      	lsls	r3, r3, #10
 800378e:	4013      	ands	r3, r2
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x118>
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003794:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2202      	movs	r2, #2
 800379c:	4013      	ands	r3, r2
 800379e:	d100      	bne.n	80037a2 <HAL_RCC_OscConfig+0x146>
 80037a0:	e069      	b.n	8003876 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037a2:	4b79      	ldr	r3, [pc, #484]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	220c      	movs	r2, #12
 80037a8:	4013      	ands	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037ac:	4b76      	ldr	r3, [pc, #472]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	220c      	movs	r2, #12
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d11c      	bne.n	80037f2 <HAL_RCC_OscConfig+0x196>
 80037b8:	4b73      	ldr	r3, [pc, #460]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	025b      	lsls	r3, r3, #9
 80037c0:	4013      	ands	r3, r2
 80037c2:	d116      	bne.n	80037f2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c4:	4b70      	ldr	r3, [pc, #448]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2202      	movs	r2, #2
 80037ca:	4013      	ands	r3, r2
 80037cc:	d005      	beq.n	80037da <HAL_RCC_OscConfig+0x17e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e24b      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b6b      	ldr	r3, [pc, #428]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	22f8      	movs	r2, #248	; 0xf8
 80037e0:	4393      	bics	r3, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	00da      	lsls	r2, r3, #3
 80037ea:	4b67      	ldr	r3, [pc, #412]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f0:	e041      	b.n	8003876 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d024      	beq.n	8003844 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037fa:	4b63      	ldr	r3, [pc, #396]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b62      	ldr	r3, [pc, #392]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003800:	2101      	movs	r1, #1
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7ff fce3 	bl	80031d0 <HAL_GetTick>
 800380a:	0003      	movs	r3, r0
 800380c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003810:	f7ff fcde 	bl	80031d0 <HAL_GetTick>
 8003814:	0002      	movs	r2, r0
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e227      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003822:	4b59      	ldr	r3, [pc, #356]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2202      	movs	r2, #2
 8003828:	4013      	ands	r3, r2
 800382a:	d0f1      	beq.n	8003810 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382c:	4b56      	ldr	r3, [pc, #344]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	22f8      	movs	r2, #248	; 0xf8
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00da      	lsls	r2, r3, #3
 800383c:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e018      	b.n	8003876 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003844:	4b50      	ldr	r3, [pc, #320]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800384a:	2101      	movs	r1, #1
 800384c:	438a      	bics	r2, r1
 800384e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7ff fcbe 	bl	80031d0 <HAL_GetTick>
 8003854:	0003      	movs	r3, r0
 8003856:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385a:	f7ff fcb9 	bl	80031d0 <HAL_GetTick>
 800385e:	0002      	movs	r2, r0
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e202      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386c:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2202      	movs	r2, #2
 8003872:	4013      	ands	r3, r2
 8003874:	d1f1      	bne.n	800385a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2208      	movs	r2, #8
 800387c:	4013      	ands	r3, r2
 800387e:	d036      	beq.n	80038ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d019      	beq.n	80038bc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003888:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800388a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800388c:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800388e:	2101      	movs	r1, #1
 8003890:	430a      	orrs	r2, r1
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003894:	f7ff fc9c 	bl	80031d0 <HAL_GetTick>
 8003898:	0003      	movs	r3, r0
 800389a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389e:	f7ff fc97 	bl	80031d0 <HAL_GetTick>
 80038a2:	0002      	movs	r2, r0
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1e0      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2202      	movs	r2, #2
 80038b6:	4013      	ands	r3, r2
 80038b8:	d0f1      	beq.n	800389e <HAL_RCC_OscConfig+0x242>
 80038ba:	e018      	b.n	80038ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038bc:	4b32      	ldr	r3, [pc, #200]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80038be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c0:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80038c2:	2101      	movs	r1, #1
 80038c4:	438a      	bics	r2, r1
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7ff fc82 	bl	80031d0 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d2:	f7ff fc7d 	bl	80031d0 <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e1c6      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	4b28      	ldr	r3, [pc, #160]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2202      	movs	r2, #2
 80038ea:	4013      	ands	r3, r2
 80038ec:	d1f1      	bne.n	80038d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2204      	movs	r2, #4
 80038f4:	4013      	ands	r3, r2
 80038f6:	d100      	bne.n	80038fa <HAL_RCC_OscConfig+0x29e>
 80038f8:	e0b4      	b.n	8003a64 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fa:	201f      	movs	r0, #31
 80038fc:	183b      	adds	r3, r7, r0
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003902:	4b21      	ldr	r3, [pc, #132]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003904:	69da      	ldr	r2, [r3, #28]
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	055b      	lsls	r3, r3, #21
 800390a:	4013      	ands	r3, r2
 800390c:	d110      	bne.n	8003930 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390e:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	0549      	lsls	r1, r1, #21
 8003918:	430a      	orrs	r2, r1
 800391a:	61da      	str	r2, [r3, #28]
 800391c:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	055b      	lsls	r3, r3, #21
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800392a:	183b      	adds	r3, r7, r0
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_RCC_OscConfig+0x338>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4013      	ands	r3, r2
 800393a:	d11a      	bne.n	8003972 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393c:	4b15      	ldr	r3, [pc, #84]	; (8003994 <HAL_RCC_OscConfig+0x338>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_RCC_OscConfig+0x338>)
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	0049      	lsls	r1, r1, #1
 8003946:	430a      	orrs	r2, r1
 8003948:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394a:	f7ff fc41 	bl	80031d0 <HAL_GetTick>
 800394e:	0003      	movs	r3, r0
 8003950:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003954:	f7ff fc3c 	bl	80031d0 <HAL_GetTick>
 8003958:	0002      	movs	r2, r0
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e185      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_OscConfig+0x338>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4013      	ands	r3, r2
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10e      	bne.n	8003998 <HAL_RCC_OscConfig+0x33c>
 800397a:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 800397c:	6a1a      	ldr	r2, [r3, #32]
 800397e:	4b02      	ldr	r3, [pc, #8]	; (8003988 <HAL_RCC_OscConfig+0x32c>)
 8003980:	2101      	movs	r1, #1
 8003982:	430a      	orrs	r2, r1
 8003984:	621a      	str	r2, [r3, #32]
 8003986:	e035      	b.n	80039f4 <HAL_RCC_OscConfig+0x398>
 8003988:	40021000 	.word	0x40021000
 800398c:	fffeffff 	.word	0xfffeffff
 8003990:	fffbffff 	.word	0xfffbffff
 8003994:	40007000 	.word	0x40007000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10c      	bne.n	80039ba <HAL_RCC_OscConfig+0x35e>
 80039a0:	4bb6      	ldr	r3, [pc, #728]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	4bb5      	ldr	r3, [pc, #724]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	438a      	bics	r2, r1
 80039aa:	621a      	str	r2, [r3, #32]
 80039ac:	4bb3      	ldr	r3, [pc, #716]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	4bb2      	ldr	r3, [pc, #712]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039b2:	2104      	movs	r1, #4
 80039b4:	438a      	bics	r2, r1
 80039b6:	621a      	str	r2, [r3, #32]
 80039b8:	e01c      	b.n	80039f4 <HAL_RCC_OscConfig+0x398>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x380>
 80039c2:	4bae      	ldr	r3, [pc, #696]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	4bad      	ldr	r3, [pc, #692]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039c8:	2104      	movs	r1, #4
 80039ca:	430a      	orrs	r2, r1
 80039cc:	621a      	str	r2, [r3, #32]
 80039ce:	4bab      	ldr	r3, [pc, #684]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039d0:	6a1a      	ldr	r2, [r3, #32]
 80039d2:	4baa      	ldr	r3, [pc, #680]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039d4:	2101      	movs	r1, #1
 80039d6:	430a      	orrs	r2, r1
 80039d8:	621a      	str	r2, [r3, #32]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0x398>
 80039dc:	4ba7      	ldr	r3, [pc, #668]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	4ba6      	ldr	r3, [pc, #664]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039e2:	2101      	movs	r1, #1
 80039e4:	438a      	bics	r2, r1
 80039e6:	621a      	str	r2, [r3, #32]
 80039e8:	4ba4      	ldr	r3, [pc, #656]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	4ba3      	ldr	r3, [pc, #652]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 80039ee:	2104      	movs	r1, #4
 80039f0:	438a      	bics	r2, r1
 80039f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d014      	beq.n	8003a26 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7ff fbe8 	bl	80031d0 <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	e009      	b.n	8003a1a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7ff fbe3 	bl	80031d0 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	4a9b      	ldr	r2, [pc, #620]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e12b      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	4b98      	ldr	r3, [pc, #608]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	4013      	ands	r3, r2
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x3aa>
 8003a24:	e013      	b.n	8003a4e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7ff fbd3 	bl	80031d0 <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2e:	e009      	b.n	8003a44 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7ff fbce 	bl	80031d0 <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	4a91      	ldr	r2, [pc, #580]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e116      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	4b8d      	ldr	r3, [pc, #564]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a4e:	231f      	movs	r3, #31
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d105      	bne.n	8003a64 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a58:	4b88      	ldr	r3, [pc, #544]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	4b87      	ldr	r3, [pc, #540]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003a5e:	4989      	ldr	r1, [pc, #548]	; (8003c84 <HAL_RCC_OscConfig+0x628>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d063      	beq.n	8003b36 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d12a      	bne.n	8003acc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a76:	4b81      	ldr	r3, [pc, #516]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7a:	4b80      	ldr	r3, [pc, #512]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003a82:	4b7e      	ldr	r3, [pc, #504]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a86:	4b7d      	ldr	r3, [pc, #500]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003a88:	2101      	movs	r1, #1
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7ff fb9f 	bl	80031d0 <HAL_GetTick>
 8003a92:	0003      	movs	r3, r0
 8003a94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a98:	f7ff fb9a 	bl	80031d0 <HAL_GetTick>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0e3      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003aaa:	4b74      	ldr	r3, [pc, #464]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	2202      	movs	r2, #2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d0f1      	beq.n	8003a98 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ab4:	4b71      	ldr	r3, [pc, #452]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	22f8      	movs	r2, #248	; 0xf8
 8003aba:	4393      	bics	r3, r2
 8003abc:	0019      	movs	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	00da      	lsls	r2, r3, #3
 8003ac4:	4b6d      	ldr	r3, [pc, #436]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8003aca:	e034      	b.n	8003b36 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	3305      	adds	r3, #5
 8003ad2:	d111      	bne.n	8003af8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003ad4:	4b69      	ldr	r3, [pc, #420]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad8:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003ada:	2104      	movs	r1, #4
 8003adc:	438a      	bics	r2, r1
 8003ade:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ae0:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	22f8      	movs	r2, #248	; 0xf8
 8003ae6:	4393      	bics	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	00da      	lsls	r2, r3, #3
 8003af0:	4b62      	ldr	r3, [pc, #392]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003af2:	430a      	orrs	r2, r1
 8003af4:	635a      	str	r2, [r3, #52]	; 0x34
 8003af6:	e01e      	b.n	8003b36 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003af8:	4b60      	ldr	r3, [pc, #384]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afc:	4b5f      	ldr	r3, [pc, #380]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003afe:	2104      	movs	r1, #4
 8003b00:	430a      	orrs	r2, r1
 8003b02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003b04:	4b5d      	ldr	r3, [pc, #372]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b08:	4b5c      	ldr	r3, [pc, #368]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	438a      	bics	r2, r1
 8003b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7ff fb5e 	bl	80031d0 <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b1a:	f7ff fb59 	bl	80031d0 <HAL_GetTick>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e0a2      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b2c:	4b53      	ldr	r3, [pc, #332]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	2202      	movs	r2, #2
 8003b32:	4013      	ands	r3, r2
 8003b34:	d1f1      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d100      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4e4>
 8003b3e:	e097      	b.n	8003c70 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b40:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	220c      	movs	r2, #12
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d100      	bne.n	8003b4e <HAL_RCC_OscConfig+0x4f2>
 8003b4c:	e06b      	b.n	8003c26 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d14c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b49      	ldr	r3, [pc, #292]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4b48      	ldr	r3, [pc, #288]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003b5c:	494a      	ldr	r1, [pc, #296]	; (8003c88 <HAL_RCC_OscConfig+0x62c>)
 8003b5e:	400a      	ands	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7ff fb35 	bl	80031d0 <HAL_GetTick>
 8003b66:	0003      	movs	r3, r0
 8003b68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7ff fb30 	bl	80031d0 <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e079      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	049b      	lsls	r3, r3, #18
 8003b86:	4013      	ands	r3, r2
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8a:	4b3c      	ldr	r3, [pc, #240]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	220f      	movs	r2, #15
 8003b90:	4393      	bics	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	4b38      	ldr	r3, [pc, #224]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4a3a      	ldr	r2, [pc, #232]	; (8003c8c <HAL_RCC_OscConfig+0x630>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	4b32      	ldr	r3, [pc, #200]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb8:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b2f      	ldr	r3, [pc, #188]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	0449      	lsls	r1, r1, #17
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7ff fb03 	bl	80031d0 <HAL_GetTick>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7ff fafe 	bl	80031d0 <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e047      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	049b      	lsls	r3, r3, #18
 8003bea:	4013      	ands	r3, r2
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x574>
 8003bee:	e03f      	b.n	8003c70 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf0:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003bf6:	4924      	ldr	r1, [pc, #144]	; (8003c88 <HAL_RCC_OscConfig+0x62c>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7ff fae8 	bl	80031d0 <HAL_GetTick>
 8003c00:	0003      	movs	r3, r0
 8003c02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7ff fae3 	bl	80031d0 <HAL_GetTick>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e02c      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	049b      	lsls	r3, r3, #18
 8003c20:	4013      	ands	r3, r2
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x5aa>
 8003c24:	e024      	b.n	8003c70 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e01f      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003c38:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_RCC_OscConfig+0x620>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	025b      	lsls	r3, r3, #9
 8003c44:	401a      	ands	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d10e      	bne.n	8003c6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	220f      	movs	r2, #15
 8003c52:	401a      	ands	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	23f0      	movs	r3, #240	; 0xf0
 8003c60:	039b      	lsls	r3, r3, #14
 8003c62:	401a      	ands	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b008      	add	sp, #32
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	00001388 	.word	0x00001388
 8003c84:	efffffff 	.word	0xefffffff
 8003c88:	feffffff 	.word	0xfeffffff
 8003c8c:	ffc2ffff 	.word	0xffc2ffff

08003c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0b3      	b.n	8003e0c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b5b      	ldr	r3, [pc, #364]	; (8003e14 <HAL_RCC_ClockConfig+0x184>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d911      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b58      	ldr	r3, [pc, #352]	; (8003e14 <HAL_RCC_ClockConfig+0x184>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4393      	bics	r3, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	4b55      	ldr	r3, [pc, #340]	; (8003e14 <HAL_RCC_ClockConfig+0x184>)
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc4:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_ClockConfig+0x184>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4013      	ands	r3, r2
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e09a      	b.n	8003e0c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d015      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d006      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003cea:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003cf0:	21e0      	movs	r1, #224	; 0xe0
 8003cf2:	00c9      	lsls	r1, r1, #3
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	22f0      	movs	r2, #240	; 0xf0
 8003cfe:	4393      	bics	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	4b44      	ldr	r3, [pc, #272]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	4013      	ands	r3, r2
 8003d14:	d040      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b3e      	ldr	r3, [pc, #248]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	029b      	lsls	r3, r3, #10
 8003d26:	4013      	ands	r3, r2
 8003d28:	d114      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e06e      	b.n	8003e0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	049b      	lsls	r3, r3, #18
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d108      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e062      	b.n	8003e0c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e05b      	b.n	8003e0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d54:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2203      	movs	r2, #3
 8003d5a:	4393      	bics	r3, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7ff fa32 	bl	80031d0 <HAL_GetTick>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d70:	e009      	b.n	8003d86 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d72:	f7ff fa2d 	bl	80031d0 <HAL_GetTick>
 8003d76:	0002      	movs	r2, r0
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <HAL_RCC_ClockConfig+0x18c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e042      	b.n	8003e0c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	401a      	ands	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1ec      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCC_ClockConfig+0x184>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	4013      	ands	r3, r2
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d211      	bcs.n	8003dca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCC_ClockConfig+0x184>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2201      	movs	r2, #1
 8003dac:	4393      	bics	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_RCC_ClockConfig+0x184>)
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_RCC_ClockConfig+0x184>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d001      	beq.n	8003dca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e020      	b.n	8003e0c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <HAL_RCC_ClockConfig+0x190>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	0019      	movs	r1, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003de8:	f000 f820 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003dec:	0001      	movs	r1, r0
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_RCC_ClockConfig+0x188>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	220f      	movs	r2, #15
 8003df6:	4013      	ands	r3, r2
 8003df8:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <HAL_RCC_ClockConfig+0x194>)
 8003dfa:	5cd3      	ldrb	r3, [r2, r3]
 8003dfc:	000a      	movs	r2, r1
 8003dfe:	40da      	lsrs	r2, r3
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x198>)
 8003e02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7fe fdd9 	bl	80029bc <HAL_InitTick>
  
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b004      	add	sp, #16
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	00001388 	.word	0x00001388
 8003e20:	fffff8ff 	.word	0xfffff8ff
 8003e24:	080050b4 	.word	0x080050b4
 8003e28:	20000000 	.word	0x20000000

08003e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b08f      	sub	sp, #60	; 0x3c
 8003e30:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003e32:	2314      	movs	r3, #20
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	4a2b      	ldr	r2, [pc, #172]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e3a:	c313      	stmia	r3!, {r0, r1, r4}
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	4a29      	ldr	r2, [pc, #164]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e46:	c313      	stmia	r3!, {r0, r1, r4}
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e50:	2300      	movs	r3, #0
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e54:	2300      	movs	r3, #0
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
 8003e58:	2300      	movs	r3, #0
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003e60:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	220c      	movs	r2, #12
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d002      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x4a>
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d003      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x50>
 8003e74:	e02d      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e76:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e7a:	e02d      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7e:	0c9b      	lsrs	r3, r3, #18
 8003e80:	220f      	movs	r2, #15
 8003e82:	4013      	ands	r3, r2
 8003e84:	2214      	movs	r2, #20
 8003e86:	18ba      	adds	r2, r7, r2
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	220f      	movs	r2, #15
 8003e92:	4013      	ands	r3, r2
 8003e94:	1d3a      	adds	r2, r7, #4
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	025b      	lsls	r3, r3, #9
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ea6:	4812      	ldr	r0, [pc, #72]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ea8:	f7fc f936 	bl	8000118 <__udivsi3>
 8003eac:	0003      	movs	r3, r0
 8003eae:	001a      	movs	r2, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	4353      	muls	r3, r2
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb6:	e009      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eba:	000a      	movs	r2, r1
 8003ebc:	0152      	lsls	r2, r2, #5
 8003ebe:	1a52      	subs	r2, r2, r1
 8003ec0:	0193      	lsls	r3, r2, #6
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	185b      	adds	r3, r3, r1
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ece:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ed6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b00f      	add	sp, #60	; 0x3c
 8003ee0:	bd90      	pop	{r4, r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	08005094 	.word	0x08005094
 8003ee8:	080050a4 	.word	0x080050a4
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	007a1200 	.word	0x007a1200

08003ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef8:	4b02      	ldr	r3, [pc, #8]	; (8003f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	20000000 	.word	0x20000000

08003f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003f0c:	f7ff fff2 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f10:	0001      	movs	r1, r0
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	2207      	movs	r2, #7
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f1e:	5cd3      	ldrb	r3, [r2, r3]
 8003f20:	40d9      	lsrs	r1, r3
 8003f22:	000b      	movs	r3, r1
}    
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	080050c4 	.word	0x080050c4

08003f34 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2207      	movs	r2, #7
 8003f42:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <HAL_RCC_GetClockConfig+0x4c>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2203      	movs	r2, #3
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_GetClockConfig+0x4c>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	22f0      	movs	r2, #240	; 0xf0
 8003f56:	401a      	ands	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003f5c:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <HAL_RCC_GetClockConfig+0x4c>)
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	23e0      	movs	r3, #224	; 0xe0
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	401a      	ands	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCC_GetClockConfig+0x50>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	401a      	ands	r2, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	601a      	str	r2, [r3, #0]
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b002      	add	sp, #8
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40022000 	.word	0x40022000

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e042      	b.n	8004020 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	223d      	movs	r2, #61	; 0x3d
 8003f9e:	5c9b      	ldrb	r3, [r3, r2]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223c      	movs	r2, #60	; 0x3c
 8003faa:	2100      	movs	r1, #0
 8003fac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f7fe fe79 	bl	8002ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	223d      	movs	r2, #61	; 0x3d
 8003fba:	2102      	movs	r1, #2
 8003fbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	0010      	movs	r0, r2
 8003fca:	f000 faa7 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2246      	movs	r2, #70	; 0x46
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	223e      	movs	r2, #62	; 0x3e
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	223f      	movs	r2, #63	; 0x3f
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	5499      	strb	r1, [r3, r2]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	2101      	movs	r1, #1
 8003fec:	5499      	strb	r1, [r3, r2]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2241      	movs	r2, #65	; 0x41
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2242      	movs	r2, #66	; 0x42
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	5499      	strb	r1, [r3, r2]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2243      	movs	r2, #67	; 0x43
 8004002:	2101      	movs	r1, #1
 8004004:	5499      	strb	r1, [r3, r2]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2244      	movs	r2, #68	; 0x44
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2245      	movs	r2, #69	; 0x45
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	223d      	movs	r2, #61	; 0x3d
 800401a:	2101      	movs	r1, #1
 800401c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b002      	add	sp, #8
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	223d      	movs	r2, #61	; 0x3d
 8004034:	5c9b      	ldrb	r3, [r3, r2]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e035      	b.n	80040ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	223d      	movs	r2, #61	; 0x3d
 8004044:	2102      	movs	r1, #2
 8004046:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	430a      	orrs	r2, r1
 8004056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <HAL_TIM_Base_Start_IT+0x8c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_TIM_Base_Start_IT+0x4e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <HAL_TIM_Base_Start_IT+0x90>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_TIM_Base_Start_IT+0x4e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a12      	ldr	r2, [pc, #72]	; (80040bc <HAL_TIM_Base_Start_IT+0x94>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d111      	bne.n	800409a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2207      	movs	r2, #7
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b06      	cmp	r3, #6
 8004086:	d010      	beq.n	80040aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	e007      	b.n	80040aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2101      	movs	r1, #1
 80040a6:	430a      	orrs	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b004      	add	sp, #16
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40014000 	.word	0x40014000

080040c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2101      	movs	r1, #1
 80040d4:	438a      	bics	r2, r1
 80040d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <HAL_TIM_Base_Stop_IT+0x54>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	d10d      	bne.n	8004100 <HAL_TIM_Base_Stop_IT+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4a0b      	ldr	r2, [pc, #44]	; (8004118 <HAL_TIM_Base_Stop_IT+0x58>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	d107      	bne.n	8004100 <HAL_TIM_Base_Stop_IT+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2101      	movs	r1, #1
 80040fc:	438a      	bics	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	223d      	movs	r2, #61	; 0x3d
 8004104:	2101      	movs	r1, #1
 8004106:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b002      	add	sp, #8
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	00001111 	.word	0x00001111
 8004118:	00000444 	.word	0x00000444

0800411c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2202      	movs	r2, #2
 800412c:	4013      	ands	r3, r2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d124      	bne.n	800417c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2202      	movs	r2, #2
 800413a:	4013      	ands	r3, r2
 800413c:	2b02      	cmp	r3, #2
 800413e:	d11d      	bne.n	800417c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2203      	movs	r2, #3
 8004146:	4252      	negs	r2, r2
 8004148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2203      	movs	r2, #3
 8004158:	4013      	ands	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	0018      	movs	r0, r3
 8004160:	f000 f9c4 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 8004164:	e007      	b.n	8004176 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	0018      	movs	r0, r3
 800416a:	f000 f9b7 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	0018      	movs	r0, r3
 8004172:	f000 f9c3 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2204      	movs	r2, #4
 8004184:	4013      	ands	r3, r2
 8004186:	2b04      	cmp	r3, #4
 8004188:	d125      	bne.n	80041d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	2204      	movs	r2, #4
 8004192:	4013      	ands	r3, r2
 8004194:	2b04      	cmp	r3, #4
 8004196:	d11e      	bne.n	80041d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2205      	movs	r2, #5
 800419e:	4252      	negs	r2, r2
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	23c0      	movs	r3, #192	; 0xc0
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4013      	ands	r3, r2
 80041b4:	d004      	beq.n	80041c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 f997 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 80041be:	e007      	b.n	80041d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 f98a 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 f996 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2208      	movs	r2, #8
 80041de:	4013      	ands	r3, r2
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d124      	bne.n	800422e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2208      	movs	r2, #8
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d11d      	bne.n	800422e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2209      	movs	r2, #9
 80041f8:	4252      	negs	r2, r2
 80041fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2204      	movs	r2, #4
 8004200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	2203      	movs	r2, #3
 800420a:	4013      	ands	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f000 f96b 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 8004216:	e007      	b.n	8004228 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	0018      	movs	r0, r3
 800421c:	f000 f95e 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f96a 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2210      	movs	r2, #16
 8004236:	4013      	ands	r3, r2
 8004238:	2b10      	cmp	r3, #16
 800423a:	d125      	bne.n	8004288 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2210      	movs	r2, #16
 8004244:	4013      	ands	r3, r2
 8004246:	2b10      	cmp	r3, #16
 8004248:	d11e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2211      	movs	r2, #17
 8004250:	4252      	negs	r2, r2
 8004252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2208      	movs	r2, #8
 8004258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	23c0      	movs	r3, #192	; 0xc0
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4013      	ands	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	0018      	movs	r0, r3
 800426c:	f000 f93e 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 8004270:	e007      	b.n	8004282 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	0018      	movs	r0, r3
 8004276:	f000 f931 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	0018      	movs	r0, r3
 800427e:	f000 f93d 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2201      	movs	r2, #1
 8004290:	4013      	ands	r3, r2
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10f      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	4013      	ands	r3, r2
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d108      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2202      	movs	r2, #2
 80042aa:	4252      	negs	r2, r2
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7fc f8bf 	bl	8000434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2280      	movs	r2, #128	; 0x80
 80042be:	4013      	ands	r3, r2
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d10f      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d108      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2281      	movs	r2, #129	; 0x81
 80042d8:	4252      	negs	r2, r2
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 fa8c 	bl	80047fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2240      	movs	r2, #64	; 0x40
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d10f      	bne.n	8004312 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2240      	movs	r2, #64	; 0x40
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d108      	bne.n	8004312 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2241      	movs	r2, #65	; 0x41
 8004306:	4252      	negs	r2, r2
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	0018      	movs	r0, r3
 800430e:	f000 f8fd 	bl	800450c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2220      	movs	r2, #32
 800431a:	4013      	ands	r3, r2
 800431c:	2b20      	cmp	r3, #32
 800431e:	d10f      	bne.n	8004340 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	4013      	ands	r3, r2
 800432a:	2b20      	cmp	r3, #32
 800432c:	d108      	bne.n	8004340 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2221      	movs	r2, #33	; 0x21
 8004334:	4252      	negs	r2, r2
 8004336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0018      	movs	r0, r3
 800433c:	f000 fa56 	bl	80047ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	b002      	add	sp, #8
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	223c      	movs	r2, #60	; 0x3c
 8004356:	5c9b      	ldrb	r3, [r3, r2]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIM_ConfigClockSource+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e0b7      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x188>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	223c      	movs	r2, #60	; 0x3c
 8004364:	2101      	movs	r1, #1
 8004366:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	223d      	movs	r2, #61	; 0x3d
 800436c:	2102      	movs	r1, #2
 800436e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2277      	movs	r2, #119	; 0x77
 800437c:	4393      	bics	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a55      	ldr	r2, [pc, #340]	; (80044d8 <HAL_TIM_ConfigClockSource+0x190>)
 8004384:	4013      	ands	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2280      	movs	r2, #128	; 0x80
 8004396:	0192      	lsls	r2, r2, #6
 8004398:	4293      	cmp	r3, r2
 800439a:	d040      	beq.n	800441e <HAL_TIM_ConfigClockSource+0xd6>
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	0192      	lsls	r2, r2, #6
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d900      	bls.n	80043a6 <HAL_TIM_ConfigClockSource+0x5e>
 80043a4:	e088      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043a6:	2280      	movs	r2, #128	; 0x80
 80043a8:	0152      	lsls	r2, r2, #5
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d100      	bne.n	80043b0 <HAL_TIM_ConfigClockSource+0x68>
 80043ae:	e085      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x174>
 80043b0:	2280      	movs	r2, #128	; 0x80
 80043b2:	0152      	lsls	r2, r2, #5
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d900      	bls.n	80043ba <HAL_TIM_ConfigClockSource+0x72>
 80043b8:	e07e      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043ba:	2b70      	cmp	r3, #112	; 0x70
 80043bc:	d018      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0xa8>
 80043be:	d900      	bls.n	80043c2 <HAL_TIM_ConfigClockSource+0x7a>
 80043c0:	e07a      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043c2:	2b60      	cmp	r3, #96	; 0x60
 80043c4:	d04f      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x11e>
 80043c6:	d900      	bls.n	80043ca <HAL_TIM_ConfigClockSource+0x82>
 80043c8:	e076      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043ca:	2b50      	cmp	r3, #80	; 0x50
 80043cc:	d03b      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0xfe>
 80043ce:	d900      	bls.n	80043d2 <HAL_TIM_ConfigClockSource+0x8a>
 80043d0:	e072      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d057      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0x13e>
 80043d6:	d900      	bls.n	80043da <HAL_TIM_ConfigClockSource+0x92>
 80043d8:	e06e      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043da:	2b30      	cmp	r3, #48	; 0x30
 80043dc:	d063      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x15e>
 80043de:	d86b      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d060      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x15e>
 80043e4:	d868      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d05d      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x15e>
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d05b      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043ee:	e063      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f000 f97c 	bl	80046fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2277      	movs	r2, #119	; 0x77
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	609a      	str	r2, [r3, #8]
      break;
 800441c:	e04f      	b.n	80044be <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6899      	ldr	r1, [r3, #8]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f000 f965 	bl	80046fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	01c9      	lsls	r1, r1, #7
 8004440:	430a      	orrs	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
      break;
 8004444:	e03b      	b.n	80044be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6859      	ldr	r1, [r3, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	001a      	movs	r2, r3
 8004454:	f000 f8d8 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2150      	movs	r1, #80	; 0x50
 800445e:	0018      	movs	r0, r3
 8004460:	f000 f932 	bl	80046c8 <TIM_ITRx_SetConfig>
      break;
 8004464:	e02b      	b.n	80044be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6859      	ldr	r1, [r3, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	001a      	movs	r2, r3
 8004474:	f000 f8f6 	bl	8004664 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2160      	movs	r1, #96	; 0x60
 800447e:	0018      	movs	r0, r3
 8004480:	f000 f922 	bl	80046c8 <TIM_ITRx_SetConfig>
      break;
 8004484:	e01b      	b.n	80044be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6859      	ldr	r1, [r3, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	001a      	movs	r2, r3
 8004494:	f000 f8b8 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2140      	movs	r1, #64	; 0x40
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 f912 	bl	80046c8 <TIM_ITRx_SetConfig>
      break;
 80044a4:	e00b      	b.n	80044be <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	0019      	movs	r1, r3
 80044b0:	0010      	movs	r0, r2
 80044b2:	f000 f909 	bl	80046c8 <TIM_ITRx_SetConfig>
        break;
 80044b6:	e002      	b.n	80044be <HAL_TIM_ConfigClockSource+0x176>
      break;
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	e000      	b.n	80044be <HAL_TIM_ConfigClockSource+0x176>
      break;
 80044bc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	223d      	movs	r2, #61	; 0x3d
 80044c2:	2101      	movs	r1, #1
 80044c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	223c      	movs	r2, #60	; 0x3c
 80044ca:	2100      	movs	r1, #0
 80044cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b004      	add	sp, #16
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	ffff00ff 	.word	0xffff00ff

080044dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b002      	add	sp, #8
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004504:	46c0      	nop			; (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b002      	add	sp, #8
 800451a:	bd80      	pop	{r7, pc}

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a2f      	ldr	r2, [pc, #188]	; (80045ec <TIM_Base_SetConfig+0xd0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0x20>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a2e      	ldr	r2, [pc, #184]	; (80045f0 <TIM_Base_SetConfig+0xd4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d108      	bne.n	800454e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2270      	movs	r2, #112	; 0x70
 8004540:	4393      	bics	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <TIM_Base_SetConfig+0xd0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <TIM_Base_SetConfig+0x62>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a25      	ldr	r2, [pc, #148]	; (80045f0 <TIM_Base_SetConfig+0xd4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00f      	beq.n	800457e <TIM_Base_SetConfig+0x62>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a24      	ldr	r2, [pc, #144]	; (80045f4 <TIM_Base_SetConfig+0xd8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00b      	beq.n	800457e <TIM_Base_SetConfig+0x62>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a23      	ldr	r2, [pc, #140]	; (80045f8 <TIM_Base_SetConfig+0xdc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d007      	beq.n	800457e <TIM_Base_SetConfig+0x62>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a22      	ldr	r2, [pc, #136]	; (80045fc <TIM_Base_SetConfig+0xe0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d003      	beq.n	800457e <TIM_Base_SetConfig+0x62>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a21      	ldr	r2, [pc, #132]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d108      	bne.n	8004590 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a20      	ldr	r2, [pc, #128]	; (8004604 <TIM_Base_SetConfig+0xe8>)
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2280      	movs	r2, #128	; 0x80
 8004594:	4393      	bics	r3, r2
 8004596:	001a      	movs	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <TIM_Base_SetConfig+0xd0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0xba>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a0d      	ldr	r2, [pc, #52]	; (80045f8 <TIM_Base_SetConfig+0xdc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0xba>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a0c      	ldr	r2, [pc, #48]	; (80045fc <TIM_Base_SetConfig+0xe0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0xba>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d103      	bne.n	80045de <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	615a      	str	r2, [r3, #20]
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b004      	add	sp, #16
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40002000 	.word	0x40002000
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800
 8004604:	fffffcff 	.word	0xfffffcff

08004608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	2201      	movs	r2, #1
 8004620:	4393      	bics	r3, r2
 8004622:	001a      	movs	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	22f0      	movs	r2, #240	; 0xf0
 8004632:	4393      	bics	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	220a      	movs	r2, #10
 8004644:	4393      	bics	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	621a      	str	r2, [r3, #32]
}
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b006      	add	sp, #24
 8004662:	bd80      	pop	{r7, pc}

08004664 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	2210      	movs	r2, #16
 8004676:	4393      	bics	r3, r2
 8004678:	001a      	movs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <TIM_TI2_ConfigInputStage+0x60>)
 800468e:	4013      	ands	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	031b      	lsls	r3, r3, #12
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	22a0      	movs	r2, #160	; 0xa0
 80046a0:	4393      	bics	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	46bd      	mov	sp, r7
 80046be:	b006      	add	sp, #24
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	ffff0fff 	.word	0xffff0fff

080046c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2270      	movs	r2, #112	; 0x70
 80046dc:	4393      	bics	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	2207      	movs	r2, #7
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	609a      	str	r2, [r3, #8]
}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b004      	add	sp, #16
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <TIM_ETR_SetConfig+0x3c>)
 8004714:	4013      	ands	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	431a      	orrs	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	46c0      	nop			; (mov r8, r8)
 8004732:	46bd      	mov	sp, r7
 8004734:	b006      	add	sp, #24
 8004736:	bd80      	pop	{r7, pc}
 8004738:	ffff00ff 	.word	0xffff00ff

0800473c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	223c      	movs	r2, #60	; 0x3c
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004750:	2302      	movs	r3, #2
 8004752:	e041      	b.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	223c      	movs	r2, #60	; 0x3c
 8004758:	2101      	movs	r1, #1
 800475a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	223d      	movs	r2, #61	; 0x3d
 8004760:	2102      	movs	r1, #2
 8004762:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2270      	movs	r2, #112	; 0x70
 8004778:	4393      	bics	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10c      	bne.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2280      	movs	r2, #128	; 0x80
 80047b0:	4393      	bics	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	223d      	movs	r2, #61	; 0x3d
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	223c      	movs	r2, #60	; 0x3c
 80047d2:	2100      	movs	r1, #0
 80047d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b004      	add	sp, #16
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40014000 	.word	0x40014000

080047ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004804:	46c0      	nop			; (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	b002      	add	sp, #8
 800480a:	bd80      	pop	{r7, pc}

0800480c <_ZdlPv>:
 800480c:	b510      	push	{r4, lr}
 800480e:	f000 fab5 	bl	8004d7c <free>
 8004812:	bd10      	pop	{r4, pc}

08004814 <_Znwj>:
 8004814:	b510      	push	{r4, lr}
 8004816:	1e04      	subs	r4, r0, #0
 8004818:	d100      	bne.n	800481c <_Znwj+0x8>
 800481a:	3401      	adds	r4, #1
 800481c:	0020      	movs	r0, r4
 800481e:	f000 faa3 	bl	8004d68 <malloc>
 8004822:	2800      	cmp	r0, #0
 8004824:	d107      	bne.n	8004836 <_Znwj+0x22>
 8004826:	f000 fa67 	bl	8004cf8 <_ZSt15get_new_handlerv>
 800482a:	2800      	cmp	r0, #0
 800482c:	d101      	bne.n	8004832 <_Znwj+0x1e>
 800482e:	f000 fa69 	bl	8004d04 <abort>
 8004832:	4780      	blx	r0
 8004834:	e7f2      	b.n	800481c <_Znwj+0x8>
 8004836:	bd10      	pop	{r4, pc}

08004838 <_ZNSaIcEC1Ev>:
 8004838:	4770      	bx	lr

0800483a <_ZNSaIcED1Ev>:
 800483a:	4770      	bx	lr

0800483c <_ZSt17__throw_bad_allocv>:
 800483c:	b510      	push	{r4, lr}
 800483e:	f000 fa61 	bl	8004d04 <abort>

08004842 <_ZSt19__throw_logic_errorPKc>:
 8004842:	b510      	push	{r4, lr}
 8004844:	f000 fa5e 	bl	8004d04 <abort>

08004848 <_ZSt20__throw_length_errorPKc>:
 8004848:	b510      	push	{r4, lr}
 800484a:	f000 fa5b 	bl	8004d04 <abort>
	...

08004850 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8004850:	b40f      	push	{r0, r1, r2, r3}
 8004852:	2318      	movs	r3, #24
 8004854:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
 8004856:	af00      	add	r7, sp, #0
 8004858:	18fc      	adds	r4, r7, r3
 800485a:	cc20      	ldmia	r4!, {r5}
 800485c:	0028      	movs	r0, r5
 800485e:	f7fb fc53 	bl	8000108 <strlen>
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	18c1      	adds	r1, r0, r3
 8004868:	4b07      	ldr	r3, [pc, #28]	; (8004888 <_ZSt24__throw_out_of_range_fmtPKcz+0x38>)
 800486a:	002a      	movs	r2, r5
 800486c:	18c0      	adds	r0, r0, r3
 800486e:	466b      	mov	r3, sp
 8004870:	08c0      	lsrs	r0, r0, #3
 8004872:	00c0      	lsls	r0, r0, #3
 8004874:	1a1b      	subs	r3, r3, r0
 8004876:	469d      	mov	sp, r3
 8004878:	0023      	movs	r3, r4
 800487a:	4668      	mov	r0, sp
 800487c:	607c      	str	r4, [r7, #4]
 800487e:	f000 f85f 	bl	8004940 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8004882:	f000 fa3f 	bl	8004d04 <abort>
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	00000207 	.word	0x00000207

0800488c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800488c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488e:	0006      	movs	r6, r0
 8004890:	000c      	movs	r4, r1
 8004892:	b09d      	sub	sp, #116	; 0x74
 8004894:	af00      	add	r7, sp, #0
 8004896:	1ba4      	subs	r4, r4, r6
 8004898:	2269      	movs	r2, #105	; 0x69
 800489a:	490f      	ldr	r1, [pc, #60]	; (80048d8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x4c>)
 800489c:	1d38      	adds	r0, r7, #4
 800489e:	f000 fa77 	bl	8004d90 <memcpy>
 80048a2:	0023      	movs	r3, r4
 80048a4:	466a      	mov	r2, sp
 80048a6:	3370      	adds	r3, #112	; 0x70
 80048a8:	08db      	lsrs	r3, r3, #3
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	469d      	mov	sp, r3
 80048b0:	466d      	mov	r5, sp
 80048b2:	2268      	movs	r2, #104	; 0x68
 80048b4:	1d39      	adds	r1, r7, #4
 80048b6:	0028      	movs	r0, r5
 80048b8:	f000 fa6a 	bl	8004d90 <memcpy>
 80048bc:	0028      	movs	r0, r5
 80048be:	0022      	movs	r2, r4
 80048c0:	0031      	movs	r1, r6
 80048c2:	3068      	adds	r0, #104	; 0x68
 80048c4:	f000 fa64 	bl	8004d90 <memcpy>
 80048c8:	2300      	movs	r3, #0
 80048ca:	192c      	adds	r4, r5, r4
 80048cc:	3468      	adds	r4, #104	; 0x68
 80048ce:	0028      	movs	r0, r5
 80048d0:	7023      	strb	r3, [r4, #0]
 80048d2:	f7ff ffb6 	bl	8004842 <_ZSt19__throw_logic_errorPKc>
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	080050e8 	.word	0x080050e8

080048dc <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80048dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	b084      	sub	sp, #16
 80048e4:	466e      	mov	r6, sp
 80048e6:	0033      	movs	r3, r6
 80048e8:	330c      	adds	r3, #12
 80048ea:	0014      	movs	r4, r2
 80048ec:	001d      	movs	r5, r3
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	0020      	movs	r0, r4
 80048f6:	210a      	movs	r1, #10
 80048f8:	f7fb fc94 	bl	8000224 <__aeabi_uidivmod>
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x60>)
 80048fe:	3d01      	subs	r5, #1
 8004900:	5c5b      	ldrb	r3, [r3, r1]
 8004902:	0020      	movs	r0, r4
 8004904:	702b      	strb	r3, [r5, #0]
 8004906:	210a      	movs	r1, #10
 8004908:	60bc      	str	r4, [r7, #8]
 800490a:	f7fb fc05 	bl	8000118 <__udivsi3>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	0004      	movs	r4, r0
 8004912:	2b09      	cmp	r3, #9
 8004914:	d8ee      	bhi.n	80048f4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1b5d      	subs	r5, r3, r5
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	429d      	cmp	r5, r3
 800491e:	d809      	bhi.n	8004934 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x58>
 8004920:	1b71      	subs	r1, r6, r5
 8004922:	002a      	movs	r2, r5
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	310c      	adds	r1, #12
 8004928:	f000 fa32 	bl	8004d90 <memcpy>
 800492c:	0028      	movs	r0, r5
 800492e:	46bd      	mov	sp, r7
 8004930:	b005      	add	sp, #20
 8004932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004934:	2501      	movs	r5, #1
 8004936:	426d      	negs	r5, r5
 8004938:	e7f8      	b.n	800492c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x50>
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	08005151 	.word	0x08005151

08004940 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8004940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004942:	0007      	movs	r7, r0
 8004944:	0004      	movs	r4, r0
 8004946:	3901      	subs	r1, #1
 8004948:	0015      	movs	r5, r2
 800494a:	1842      	adds	r2, r0, r1
 800494c:	9201      	str	r2, [sp, #4]
 800494e:	782a      	ldrb	r2, [r5, #0]
 8004950:	2a00      	cmp	r2, #0
 8004952:	d033      	beq.n	80049bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7c>
 8004954:	9901      	ldr	r1, [sp, #4]
 8004956:	428c      	cmp	r4, r1
 8004958:	d22c      	bcs.n	80049b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 800495a:	2a25      	cmp	r2, #37	; 0x25
 800495c:	d108      	bne.n	8004970 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x30>
 800495e:	786a      	ldrb	r2, [r5, #1]
 8004960:	2a73      	cmp	r2, #115	; 0x73
 8004962:	d00a      	beq.n	800497a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 8004964:	2a7a      	cmp	r2, #122	; 0x7a
 8004966:	d015      	beq.n	8004994 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 8004968:	3a25      	subs	r2, #37	; 0x25
 800496a:	4251      	negs	r1, r2
 800496c:	414a      	adcs	r2, r1
 800496e:	18ad      	adds	r5, r5, r2
 8004970:	782a      	ldrb	r2, [r5, #0]
 8004972:	3501      	adds	r5, #1
 8004974:	7022      	strb	r2, [r4, #0]
 8004976:	3401      	adds	r4, #1
 8004978:	e7e9      	b.n	800494e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800497a:	0022      	movs	r2, r4
 800497c:	cb02      	ldmia	r3!, {r1}
 800497e:	7808      	ldrb	r0, [r1, #0]
 8004980:	0014      	movs	r4, r2
 8004982:	2800      	cmp	r0, #0
 8004984:	d01f      	beq.n	80049c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x86>
 8004986:	9c01      	ldr	r4, [sp, #4]
 8004988:	4294      	cmp	r4, r2
 800498a:	d01a      	beq.n	80049c2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x82>
 800498c:	7010      	strb	r0, [r2, #0]
 800498e:	3101      	adds	r1, #1
 8004990:	3201      	adds	r2, #1
 8004992:	e7f4      	b.n	800497e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3e>
 8004994:	78aa      	ldrb	r2, [r5, #2]
 8004996:	2a75      	cmp	r2, #117	; 0x75
 8004998:	d1ea      	bne.n	8004970 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x30>
 800499a:	001e      	movs	r6, r3
 800499c:	9b01      	ldr	r3, [sp, #4]
 800499e:	0020      	movs	r0, r4
 80049a0:	ce04      	ldmia	r6!, {r2}
 80049a2:	1b19      	subs	r1, r3, r4
 80049a4:	f7ff ff9a 	bl	80048dc <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	dd03      	ble.n	80049b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80049ac:	0033      	movs	r3, r6
 80049ae:	1824      	adds	r4, r4, r0
 80049b0:	3503      	adds	r5, #3
 80049b2:	e7cc      	b.n	800494e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80049b4:	0021      	movs	r1, r4
 80049b6:	0038      	movs	r0, r7
 80049b8:	f7ff ff68 	bl	800488c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80049bc:	1be0      	subs	r0, r4, r7
 80049be:	7022      	strb	r2, [r4, #0]
 80049c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049c2:	9901      	ldr	r1, [sp, #4]
 80049c4:	e7f7      	b.n	80049b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80049c6:	3502      	adds	r5, #2
 80049c8:	e7c1      	b.n	800494e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>

080049ca <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80049ca:	b510      	push	{r4, lr}
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	d001      	beq.n	80049d4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
 80049d0:	f000 f9de 	bl	8004d90 <memcpy>
 80049d4:	bd10      	pop	{r4, pc}
	...

080049d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80049d8:	2080      	movs	r0, #128	; 0x80
 80049da:	680b      	ldr	r3, [r1, #0]
 80049dc:	b510      	push	{r4, lr}
 80049de:	05c0      	lsls	r0, r0, #23
 80049e0:	4283      	cmp	r3, r0
 80049e2:	d302      	bcc.n	80049ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x12>
 80049e4:	480a      	ldr	r0, [pc, #40]	; (8004a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 80049e6:	f7ff ff2f 	bl	8004848 <_ZSt20__throw_length_errorPKc>
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d905      	bls.n	80049fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 80049ee:	0052      	lsls	r2, r2, #1
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d202      	bcs.n	80049fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 80049f4:	4282      	cmp	r2, r0
 80049f6:	d205      	bcs.n	8004a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80049f8:	600a      	str	r2, [r1, #0]
 80049fa:	6808      	ldr	r0, [r1, #0]
 80049fc:	3001      	adds	r0, #1
 80049fe:	d504      	bpl.n	8004a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x32>
 8004a00:	f7ff ff1c 	bl	800483c <_ZSt17__throw_bad_allocv>
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3c>)
 8004a06:	600b      	str	r3, [r1, #0]
 8004a08:	e7f7      	b.n	80049fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8004a0a:	f7ff ff03 	bl	8004814 <_Znwj>
 8004a0e:	bd10      	pop	{r4, pc}
 8004a10:	0800515c 	.word	0x0800515c
 8004a14:	3fffffff 	.word	0x3fffffff

08004a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004a18:	0003      	movs	r3, r0
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	4298      	cmp	r0, r3
 8004a22:	d001      	beq.n	8004a28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 8004a24:	f7ff fef2 	bl	800480c <_ZdlPv>
 8004a28:	bd10      	pop	{r4, pc}
	...

08004a2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	4c05      	ldr	r4, [pc, #20]	; (8004a44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x18>)
 8004a30:	6840      	ldr	r0, [r0, #4]
 8004a32:	1909      	adds	r1, r1, r4
 8004a34:	1a09      	subs	r1, r1, r0
 8004a36:	4291      	cmp	r1, r2
 8004a38:	d202      	bcs.n	8004a40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x14>
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7ff ff04 	bl	8004848 <_ZSt20__throw_length_errorPKc>
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	3fffffff 	.word	0x3fffffff

08004a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	2a01      	cmp	r2, #1
 8004a4c:	d102      	bne.n	8004a54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8004a4e:	780b      	ldrb	r3, [r1, #0]
 8004a50:	7003      	strb	r3, [r0, #0]
 8004a52:	bd10      	pop	{r4, pc}
 8004a54:	f7ff ffb9 	bl	80049ca <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8004a58:	e7fb      	b.n	8004a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08004a5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	2a01      	cmp	r2, #1
 8004a5e:	d102      	bne.n	8004a66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xc>
 8004a60:	780b      	ldrb	r3, [r1, #0]
 8004a62:	7003      	strb	r3, [r0, #0]
 8004a64:	bd10      	pop	{r4, pc}
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	d0fc      	beq.n	8004a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8004a6a:	f000 f99a 	bl	8004da2 <memmove>
 8004a6e:	e7f9      	b.n	8004a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>

08004a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8004a70:	000b      	movs	r3, r1
 8004a72:	b510      	push	{r4, lr}
 8004a74:	0011      	movs	r1, r2
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8004a7a:	7002      	strb	r2, [r0, #0]
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0fc      	beq.n	8004a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xc>
 8004a82:	001a      	movs	r2, r3
 8004a84:	f000 f9a0 	bl	8004dc8 <memset>
 8004a88:	e7f8      	b.n	8004a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xc>

08004a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	1a52      	subs	r2, r2, r1
 8004a8e:	f7ff ffdb 	bl	8004a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	1a52      	subs	r2, r2, r1
 8004a98:	f7ff ffd6 	bl	8004a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004a9c:	bd10      	pop	{r4, pc}

08004a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8004a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa0:	001f      	movs	r7, r3
 8004aa2:	6843      	ldr	r3, [r0, #4]
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	000d      	movs	r5, r1
 8004aa8:	1889      	adds	r1, r1, r2
 8004aaa:	9101      	str	r1, [sp, #4]
 8004aac:	1a59      	subs	r1, r3, r1
 8004aae:	9100      	str	r1, [sp, #0]
 8004ab0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ab2:	0004      	movs	r4, r0
 8004ab4:	1a8a      	subs	r2, r1, r2
 8004ab6:	18d2      	adds	r2, r2, r3
 8004ab8:	0003      	movs	r3, r0
 8004aba:	6801      	ldr	r1, [r0, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	9203      	str	r2, [sp, #12]
 8004ac0:	220f      	movs	r2, #15
 8004ac2:	4299      	cmp	r1, r3
 8004ac4:	d000      	beq.n	8004ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x2a>
 8004ac6:	6882      	ldr	r2, [r0, #8]
 8004ac8:	0020      	movs	r0, r4
 8004aca:	a903      	add	r1, sp, #12
 8004acc:	f7ff ff84 	bl	80049d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004ad0:	0006      	movs	r6, r0
 8004ad2:	2d00      	cmp	r5, #0
 8004ad4:	d003      	beq.n	8004ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x40>
 8004ad6:	002a      	movs	r2, r5
 8004ad8:	6821      	ldr	r1, [r4, #0]
 8004ada:	f7ff ffb5 	bl	8004a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004ade:	2f00      	cmp	r7, #0
 8004ae0:	d007      	beq.n	8004af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 8004ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 8004ae8:	001a      	movs	r2, r3
 8004aea:	0039      	movs	r1, r7
 8004aec:	1970      	adds	r0, r6, r5
 8004aee:	f7ff ffab 	bl	8004a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004af2:	9b00      	ldr	r3, [sp, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x70>
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	9b01      	ldr	r3, [sp, #4]
 8004afc:	4694      	mov	ip, r2
 8004afe:	4463      	add	r3, ip
 8004b00:	0019      	movs	r1, r3
 8004b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b04:	9a00      	ldr	r2, [sp, #0]
 8004b06:	18ed      	adds	r5, r5, r3
 8004b08:	1970      	adds	r0, r6, r5
 8004b0a:	f7ff ff9d 	bl	8004a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004b0e:	0020      	movs	r0, r4
 8004b10:	f7ff ff82 	bl	8004a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004b14:	9b03      	ldr	r3, [sp, #12]
 8004b16:	6026      	str	r6, [r4, #0]
 8004b18:	60a3      	str	r3, [r4, #8]
 8004b1a:	b005      	add	sp, #20
 8004b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8004b1e:	0003      	movs	r3, r0
 8004b20:	3308      	adds	r3, #8
 8004b22:	6003      	str	r3, [r0, #0]
 8004b24:	2300      	movs	r3, #0
 8004b26:	6043      	str	r3, [r0, #4]
 8004b28:	7203      	strb	r3, [r0, #8]
 8004b2a:	4770      	bx	lr

08004b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	0004      	movs	r4, r0
 8004b30:	f7ff ff72 	bl	8004a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004b34:	0020      	movs	r0, r4
 8004b36:	bd10      	pop	{r4, pc}

08004b38 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8004b38:	6840      	ldr	r0, [r0, #4]
 8004b3a:	4770      	bx	lr

08004b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8004b3c:	6800      	ldr	r0, [r0, #0]
 8004b3e:	1840      	adds	r0, r0, r1
 8004b40:	4770      	bx	lr

08004b42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8004b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b44:	0002      	movs	r2, r0
 8004b46:	000f      	movs	r7, r1
 8004b48:	6846      	ldr	r6, [r0, #4]
 8004b4a:	6801      	ldr	r1, [r0, #0]
 8004b4c:	3208      	adds	r2, #8
 8004b4e:	0004      	movs	r4, r0
 8004b50:	230f      	movs	r3, #15
 8004b52:	1c75      	adds	r5, r6, #1
 8004b54:	4291      	cmp	r1, r2
 8004b56:	d000      	beq.n	8004b5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x18>
 8004b58:	6883      	ldr	r3, [r0, #8]
 8004b5a:	429d      	cmp	r5, r3
 8004b5c:	d907      	bls.n	8004b6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2300      	movs	r3, #0
 8004b64:	0031      	movs	r1, r6
 8004b66:	001a      	movs	r2, r3
 8004b68:	0020      	movs	r0, r4
 8004b6a:	f7ff ff98 	bl	8004a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004b6e:	2200      	movs	r2, #0
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	559f      	strb	r7, [r3, r6]
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	6065      	str	r5, [r4, #4]
 8004b78:	555a      	strb	r2, [r3, r5]
 8004b7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	0004      	movs	r4, r0
 8004b80:	f7ff ffdf 	bl	8004b42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8004b84:	0020      	movs	r0, r4
 8004b86:	bd10      	pop	{r4, pc}

08004b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8004b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b8a:	0015      	movs	r5, r2
 8004b8c:	001e      	movs	r6, r3
 8004b8e:	0004      	movs	r4, r0
 8004b90:	b085      	sub	sp, #20
 8004b92:	ab0a      	add	r3, sp, #40	; 0x28
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	0032      	movs	r2, r6
 8004b98:	9303      	str	r3, [sp, #12]
 8004b9a:	000f      	movs	r7, r1
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x80>)
 8004b9e:	0029      	movs	r1, r5
 8004ba0:	f7ff ff44 	bl	8004a2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8004ba4:	0021      	movs	r1, r4
 8004ba6:	6863      	ldr	r3, [r4, #4]
 8004ba8:	1b72      	subs	r2, r6, r5
 8004baa:	6820      	ldr	r0, [r4, #0]
 8004bac:	18d2      	adds	r2, r2, r3
 8004bae:	3108      	adds	r1, #8
 8004bb0:	9202      	str	r2, [sp, #8]
 8004bb2:	220f      	movs	r2, #15
 8004bb4:	4288      	cmp	r0, r1
 8004bb6:	d000      	beq.n	8004bba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x32>
 8004bb8:	68a2      	ldr	r2, [r4, #8]
 8004bba:	9902      	ldr	r1, [sp, #8]
 8004bbc:	428a      	cmp	r2, r1
 8004bbe:	d31b      	bcc.n	8004bf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x70>
 8004bc0:	19e9      	adds	r1, r5, r7
 8004bc2:	1a5a      	subs	r2, r3, r1
 8004bc4:	428b      	cmp	r3, r1
 8004bc6:	d006      	beq.n	8004bd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x4e>
 8004bc8:	42b5      	cmp	r5, r6
 8004bca:	d004      	beq.n	8004bd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x4e>
 8004bcc:	19c0      	adds	r0, r0, r7
 8004bce:	1941      	adds	r1, r0, r5
 8004bd0:	1980      	adds	r0, r0, r6
 8004bd2:	f7ff ff42 	bl	8004a5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d005      	beq.n	8004be6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x5e>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	0031      	movs	r1, r6
 8004bde:	9a03      	ldr	r2, [sp, #12]
 8004be0:	19d8      	adds	r0, r3, r7
 8004be2:	f7ff ff45 	bl	8004a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8004be6:	9b02      	ldr	r3, [sp, #8]
 8004be8:	0020      	movs	r0, r4
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	2300      	movs	r3, #0
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	9902      	ldr	r1, [sp, #8]
 8004bf2:	5453      	strb	r3, [r2, r1]
 8004bf4:	b005      	add	sp, #20
 8004bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	002a      	movs	r2, r5
 8004bfc:	0039      	movs	r1, r7
 8004bfe:	0020      	movs	r0, r4
 8004c00:	9600      	str	r6, [sp, #0]
 8004c02:	f7ff ff4c 	bl	8004a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004c06:	e7e6      	b.n	8004bd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x4e>
 8004c08:	08005174 	.word	0x08005174

08004c0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>:
 8004c0c:	b507      	push	{r0, r1, r2, lr}
 8004c0e:	9200      	str	r2, [sp, #0]
 8004c10:	000b      	movs	r3, r1
 8004c12:	6842      	ldr	r2, [r0, #4]
 8004c14:	2100      	movs	r1, #0
 8004c16:	f7ff ffb7 	bl	8004b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8004c1a:	bd0e      	pop	{r1, r2, r3, pc}

08004c1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	4770      	bx	lr

08004c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8004c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c22:	0004      	movs	r4, r0
 8004c24:	000d      	movs	r5, r1
 8004c26:	0016      	movs	r6, r2
 8004c28:	2900      	cmp	r1, #0
 8004c2a:	d104      	bne.n	8004c36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x16>
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d002      	beq.n	8004c36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x16>
 8004c30:	480c      	ldr	r0, [pc, #48]	; (8004c64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8004c32:	f7ff fe06 	bl	8004842 <_ZSt19__throw_logic_errorPKc>
 8004c36:	1b73      	subs	r3, r6, r5
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	d907      	bls.n	8004c4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2e>
 8004c3e:	2200      	movs	r2, #0
 8004c40:	0020      	movs	r0, r4
 8004c42:	a901      	add	r1, sp, #4
 8004c44:	f7ff fec8 	bl	80049d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004c48:	9b01      	ldr	r3, [sp, #4]
 8004c4a:	6020      	str	r0, [r4, #0]
 8004c4c:	60a3      	str	r3, [r4, #8]
 8004c4e:	0032      	movs	r2, r6
 8004c50:	0029      	movs	r1, r5
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	f7ff ff19 	bl	8004a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8004c58:	2100      	movs	r1, #0
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	6063      	str	r3, [r4, #4]
 8004c60:	54d1      	strb	r1, [r2, r3]
 8004c62:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8004c64:	08005191 	.word	0x08005191

08004c68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8004c68:	0002      	movs	r2, r0
 8004c6a:	000b      	movs	r3, r1
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	0004      	movs	r4, r0
 8004c70:	3208      	adds	r2, #8
 8004c72:	6002      	str	r2, [r0, #0]
 8004c74:	cb06      	ldmia	r3!, {r1, r2}
 8004c76:	2300      	movs	r3, #0
 8004c78:	188a      	adds	r2, r1, r2
 8004c7a:	f7ff ffd1 	bl	8004c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8004c7e:	0020      	movs	r0, r4
 8004c80:	bd10      	pop	{r4, pc}
	...

08004c84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8004c84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c86:	0004      	movs	r4, r0
 8004c88:	000d      	movs	r5, r1
 8004c8a:	0016      	movs	r6, r2
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	d104      	bne.n	8004c9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8004c90:	2a00      	cmp	r2, #0
 8004c92:	d002      	beq.n	8004c9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8004c94:	480c      	ldr	r0, [pc, #48]	; (8004cc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8004c96:	f7ff fdd4 	bl	8004842 <_ZSt19__throw_logic_errorPKc>
 8004c9a:	1b73      	subs	r3, r6, r5
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	d907      	bls.n	8004cb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2e>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	0020      	movs	r0, r4
 8004ca6:	a901      	add	r1, sp, #4
 8004ca8:	f7ff fe96 	bl	80049d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004cac:	9b01      	ldr	r3, [sp, #4]
 8004cae:	6020      	str	r0, [r4, #0]
 8004cb0:	60a3      	str	r3, [r4, #8]
 8004cb2:	0032      	movs	r2, r6
 8004cb4:	0029      	movs	r1, r5
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	f7ff feec 	bl	8004a94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	9b01      	ldr	r3, [sp, #4]
 8004cc0:	6822      	ldr	r2, [r4, #0]
 8004cc2:	6063      	str	r3, [r4, #4]
 8004cc4:	54d1      	strb	r1, [r2, r3]
 8004cc6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8004cc8:	08005191 	.word	0x08005191

08004ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8004ccc:	0003      	movs	r3, r0
 8004cce:	3308      	adds	r3, #8
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	0004      	movs	r4, r0
 8004cd4:	1e0d      	subs	r5, r1, #0
 8004cd6:	6003      	str	r3, [r0, #0]
 8004cd8:	d00a      	beq.n	8004cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x24>
 8004cda:	0008      	movs	r0, r1
 8004cdc:	f7fb fa14 	bl	8000108 <strlen>
 8004ce0:	182a      	adds	r2, r5, r0
 8004ce2:	0029      	movs	r1, r5
 8004ce4:	0020      	movs	r0, r4
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f7ff ffcc 	bl	8004c84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8004cec:	0020      	movs	r0, r4
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4252      	negs	r2, r2
 8004cf4:	e7f5      	b.n	8004ce2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

08004cf8 <_ZSt15get_new_handlerv>:
 8004cf8:	4b01      	ldr	r3, [pc, #4]	; (8004d00 <_ZSt15get_new_handlerv+0x8>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	4770      	bx	lr
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	2000013c 	.word	0x2000013c

08004d04 <abort>:
 8004d04:	2006      	movs	r0, #6
 8004d06:	b510      	push	{r4, lr}
 8004d08:	f000 f94a 	bl	8004fa0 <raise>
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	f7fd ff05 	bl	8002b1c <_exit>
	...

08004d14 <__errno>:
 8004d14:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <__errno+0x8>)
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	4770      	bx	lr
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	20000008 	.word	0x20000008

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	2600      	movs	r6, #0
 8004d24:	4d0c      	ldr	r5, [pc, #48]	; (8004d58 <__libc_init_array+0x38>)
 8004d26:	4c0d      	ldr	r4, [pc, #52]	; (8004d5c <__libc_init_array+0x3c>)
 8004d28:	1b64      	subs	r4, r4, r5
 8004d2a:	10a4      	asrs	r4, r4, #2
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	2600      	movs	r6, #0
 8004d32:	f000 f967 	bl	8005004 <_init>
 8004d36:	4d0a      	ldr	r5, [pc, #40]	; (8004d60 <__libc_init_array+0x40>)
 8004d38:	4c0a      	ldr	r4, [pc, #40]	; (8004d64 <__libc_init_array+0x44>)
 8004d3a:	1b64      	subs	r4, r4, r5
 8004d3c:	10a4      	asrs	r4, r4, #2
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	00b3      	lsls	r3, r6, #2
 8004d46:	58eb      	ldr	r3, [r5, r3]
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	00b3      	lsls	r3, r6, #2
 8004d50:	58eb      	ldr	r3, [r5, r3]
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	080051bc 	.word	0x080051bc
 8004d5c:	080051bc 	.word	0x080051bc
 8004d60:	080051bc 	.word	0x080051bc
 8004d64:	080051c4 	.word	0x080051c4

08004d68 <malloc>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <malloc+0x10>)
 8004d6c:	0001      	movs	r1, r0
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	f000 f87c 	bl	8004e6c <_malloc_r>
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	20000008 	.word	0x20000008

08004d7c <free>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <free+0x10>)
 8004d80:	0001      	movs	r1, r0
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	f000 f828 	bl	8004dd8 <_free_r>
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	20000008 	.word	0x20000008

08004d90 <memcpy>:
 8004d90:	2300      	movs	r3, #0
 8004d92:	b510      	push	{r4, lr}
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d100      	bne.n	8004d9a <memcpy+0xa>
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	5ccc      	ldrb	r4, [r1, r3]
 8004d9c:	54c4      	strb	r4, [r0, r3]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	e7f8      	b.n	8004d94 <memcpy+0x4>

08004da2 <memmove>:
 8004da2:	b510      	push	{r4, lr}
 8004da4:	4288      	cmp	r0, r1
 8004da6:	d902      	bls.n	8004dae <memmove+0xc>
 8004da8:	188b      	adds	r3, r1, r2
 8004daa:	4298      	cmp	r0, r3
 8004dac:	d303      	bcc.n	8004db6 <memmove+0x14>
 8004dae:	2300      	movs	r3, #0
 8004db0:	e007      	b.n	8004dc2 <memmove+0x20>
 8004db2:	5c8b      	ldrb	r3, [r1, r2]
 8004db4:	5483      	strb	r3, [r0, r2]
 8004db6:	3a01      	subs	r2, #1
 8004db8:	d2fb      	bcs.n	8004db2 <memmove+0x10>
 8004dba:	bd10      	pop	{r4, pc}
 8004dbc:	5ccc      	ldrb	r4, [r1, r3]
 8004dbe:	54c4      	strb	r4, [r0, r3]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d1fa      	bne.n	8004dbc <memmove+0x1a>
 8004dc6:	e7f8      	b.n	8004dba <memmove+0x18>

08004dc8 <memset>:
 8004dc8:	0003      	movs	r3, r0
 8004dca:	1882      	adds	r2, r0, r2
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d100      	bne.n	8004dd2 <memset+0xa>
 8004dd0:	4770      	bx	lr
 8004dd2:	7019      	strb	r1, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	e7f9      	b.n	8004dcc <memset+0x4>

08004dd8 <_free_r>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	0005      	movs	r5, r0
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	d010      	beq.n	8004e02 <_free_r+0x2a>
 8004de0:	1f0c      	subs	r4, r1, #4
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	da00      	bge.n	8004dea <_free_r+0x12>
 8004de8:	18e4      	adds	r4, r4, r3
 8004dea:	0028      	movs	r0, r5
 8004dec:	f000 f8f8 	bl	8004fe0 <__malloc_lock>
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <_free_r+0x90>)
 8004df2:	6813      	ldr	r3, [r2, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <_free_r+0x2c>
 8004df8:	6063      	str	r3, [r4, #4]
 8004dfa:	6014      	str	r4, [r2, #0]
 8004dfc:	0028      	movs	r0, r5
 8004dfe:	f000 f8f7 	bl	8004ff0 <__malloc_unlock>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	d908      	bls.n	8004e1a <_free_r+0x42>
 8004e08:	6821      	ldr	r1, [r4, #0]
 8004e0a:	1860      	adds	r0, r4, r1
 8004e0c:	4283      	cmp	r3, r0
 8004e0e:	d1f3      	bne.n	8004df8 <_free_r+0x20>
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	1841      	adds	r1, r0, r1
 8004e16:	6021      	str	r1, [r4, #0]
 8004e18:	e7ee      	b.n	8004df8 <_free_r+0x20>
 8004e1a:	001a      	movs	r2, r3
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <_free_r+0x4e>
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	d9f9      	bls.n	8004e1a <_free_r+0x42>
 8004e26:	6811      	ldr	r1, [r2, #0]
 8004e28:	1850      	adds	r0, r2, r1
 8004e2a:	42a0      	cmp	r0, r4
 8004e2c:	d10b      	bne.n	8004e46 <_free_r+0x6e>
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	1809      	adds	r1, r1, r0
 8004e32:	1850      	adds	r0, r2, r1
 8004e34:	6011      	str	r1, [r2, #0]
 8004e36:	4283      	cmp	r3, r0
 8004e38:	d1e0      	bne.n	8004dfc <_free_r+0x24>
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	1841      	adds	r1, r0, r1
 8004e40:	6011      	str	r1, [r2, #0]
 8004e42:	6053      	str	r3, [r2, #4]
 8004e44:	e7da      	b.n	8004dfc <_free_r+0x24>
 8004e46:	42a0      	cmp	r0, r4
 8004e48:	d902      	bls.n	8004e50 <_free_r+0x78>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	e7d5      	b.n	8004dfc <_free_r+0x24>
 8004e50:	6821      	ldr	r1, [r4, #0]
 8004e52:	1860      	adds	r0, r4, r1
 8004e54:	4283      	cmp	r3, r0
 8004e56:	d103      	bne.n	8004e60 <_free_r+0x88>
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	1841      	adds	r1, r0, r1
 8004e5e:	6021      	str	r1, [r4, #0]
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	6054      	str	r4, [r2, #4]
 8004e64:	e7ca      	b.n	8004dfc <_free_r+0x24>
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	20000140 	.word	0x20000140

08004e6c <_malloc_r>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	2303      	movs	r3, #3
 8004e70:	1ccd      	adds	r5, r1, #3
 8004e72:	439d      	bics	r5, r3
 8004e74:	3508      	adds	r5, #8
 8004e76:	0006      	movs	r6, r0
 8004e78:	2d0c      	cmp	r5, #12
 8004e7a:	d21f      	bcs.n	8004ebc <_malloc_r+0x50>
 8004e7c:	250c      	movs	r5, #12
 8004e7e:	42a9      	cmp	r1, r5
 8004e80:	d81e      	bhi.n	8004ec0 <_malloc_r+0x54>
 8004e82:	0030      	movs	r0, r6
 8004e84:	f000 f8ac 	bl	8004fe0 <__malloc_lock>
 8004e88:	4925      	ldr	r1, [pc, #148]	; (8004f20 <_malloc_r+0xb4>)
 8004e8a:	680a      	ldr	r2, [r1, #0]
 8004e8c:	0014      	movs	r4, r2
 8004e8e:	2c00      	cmp	r4, #0
 8004e90:	d11a      	bne.n	8004ec8 <_malloc_r+0x5c>
 8004e92:	4f24      	ldr	r7, [pc, #144]	; (8004f24 <_malloc_r+0xb8>)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <_malloc_r+0x38>
 8004e9a:	0021      	movs	r1, r4
 8004e9c:	0030      	movs	r0, r6
 8004e9e:	f000 f843 	bl	8004f28 <_sbrk_r>
 8004ea2:	6038      	str	r0, [r7, #0]
 8004ea4:	0029      	movs	r1, r5
 8004ea6:	0030      	movs	r0, r6
 8004ea8:	f000 f83e 	bl	8004f28 <_sbrk_r>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d12b      	bne.n	8004f08 <_malloc_r+0x9c>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	0030      	movs	r0, r6
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	f000 f89b 	bl	8004ff0 <__malloc_unlock>
 8004eba:	e003      	b.n	8004ec4 <_malloc_r+0x58>
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	dade      	bge.n	8004e7e <_malloc_r+0x12>
 8004ec0:	230c      	movs	r3, #12
 8004ec2:	6033      	str	r3, [r6, #0]
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	1b5b      	subs	r3, r3, r5
 8004ecc:	d419      	bmi.n	8004f02 <_malloc_r+0x96>
 8004ece:	2b0b      	cmp	r3, #11
 8004ed0:	d903      	bls.n	8004eda <_malloc_r+0x6e>
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	18e4      	adds	r4, r4, r3
 8004ed6:	6025      	str	r5, [r4, #0]
 8004ed8:	e003      	b.n	8004ee2 <_malloc_r+0x76>
 8004eda:	6863      	ldr	r3, [r4, #4]
 8004edc:	42a2      	cmp	r2, r4
 8004ede:	d10e      	bne.n	8004efe <_malloc_r+0x92>
 8004ee0:	600b      	str	r3, [r1, #0]
 8004ee2:	0030      	movs	r0, r6
 8004ee4:	f000 f884 	bl	8004ff0 <__malloc_unlock>
 8004ee8:	0020      	movs	r0, r4
 8004eea:	2207      	movs	r2, #7
 8004eec:	300b      	adds	r0, #11
 8004eee:	1d23      	adds	r3, r4, #4
 8004ef0:	4390      	bics	r0, r2
 8004ef2:	1ac2      	subs	r2, r0, r3
 8004ef4:	4298      	cmp	r0, r3
 8004ef6:	d0e6      	beq.n	8004ec6 <_malloc_r+0x5a>
 8004ef8:	1a1b      	subs	r3, r3, r0
 8004efa:	50a3      	str	r3, [r4, r2]
 8004efc:	e7e3      	b.n	8004ec6 <_malloc_r+0x5a>
 8004efe:	6053      	str	r3, [r2, #4]
 8004f00:	e7ef      	b.n	8004ee2 <_malloc_r+0x76>
 8004f02:	0022      	movs	r2, r4
 8004f04:	6864      	ldr	r4, [r4, #4]
 8004f06:	e7c2      	b.n	8004e8e <_malloc_r+0x22>
 8004f08:	2303      	movs	r3, #3
 8004f0a:	1cc4      	adds	r4, r0, #3
 8004f0c:	439c      	bics	r4, r3
 8004f0e:	42a0      	cmp	r0, r4
 8004f10:	d0e1      	beq.n	8004ed6 <_malloc_r+0x6a>
 8004f12:	1a21      	subs	r1, r4, r0
 8004f14:	0030      	movs	r0, r6
 8004f16:	f000 f807 	bl	8004f28 <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d1db      	bne.n	8004ed6 <_malloc_r+0x6a>
 8004f1e:	e7c7      	b.n	8004eb0 <_malloc_r+0x44>
 8004f20:	20000140 	.word	0x20000140
 8004f24:	20000144 	.word	0x20000144

08004f28 <_sbrk_r>:
 8004f28:	2300      	movs	r3, #0
 8004f2a:	b570      	push	{r4, r5, r6, lr}
 8004f2c:	4d06      	ldr	r5, [pc, #24]	; (8004f48 <_sbrk_r+0x20>)
 8004f2e:	0004      	movs	r4, r0
 8004f30:	0008      	movs	r0, r1
 8004f32:	602b      	str	r3, [r5, #0]
 8004f34:	f7fd fdfe 	bl	8002b34 <_sbrk>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d103      	bne.n	8004f44 <_sbrk_r+0x1c>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d000      	beq.n	8004f44 <_sbrk_r+0x1c>
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	20000224 	.word	0x20000224

08004f4c <_raise_r>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	0004      	movs	r4, r0
 8004f50:	000d      	movs	r5, r1
 8004f52:	291f      	cmp	r1, #31
 8004f54:	d904      	bls.n	8004f60 <_raise_r+0x14>
 8004f56:	2316      	movs	r3, #22
 8004f58:	6003      	str	r3, [r0, #0]
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	4240      	negs	r0, r0
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <_raise_r+0x24>
 8004f66:	008a      	lsls	r2, r1, #2
 8004f68:	189b      	adds	r3, r3, r2
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	d108      	bne.n	8004f82 <_raise_r+0x36>
 8004f70:	0020      	movs	r0, r4
 8004f72:	f000 f831 	bl	8004fd8 <_getpid_r>
 8004f76:	002a      	movs	r2, r5
 8004f78:	0001      	movs	r1, r0
 8004f7a:	0020      	movs	r0, r4
 8004f7c:	f000 f81a 	bl	8004fb4 <_kill_r>
 8004f80:	e7ed      	b.n	8004f5e <_raise_r+0x12>
 8004f82:	2000      	movs	r0, #0
 8004f84:	2a01      	cmp	r2, #1
 8004f86:	d0ea      	beq.n	8004f5e <_raise_r+0x12>
 8004f88:	1c51      	adds	r1, r2, #1
 8004f8a:	d103      	bne.n	8004f94 <_raise_r+0x48>
 8004f8c:	2316      	movs	r3, #22
 8004f8e:	3001      	adds	r0, #1
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	e7e4      	b.n	8004f5e <_raise_r+0x12>
 8004f94:	2400      	movs	r4, #0
 8004f96:	0028      	movs	r0, r5
 8004f98:	601c      	str	r4, [r3, #0]
 8004f9a:	4790      	blx	r2
 8004f9c:	0020      	movs	r0, r4
 8004f9e:	e7de      	b.n	8004f5e <_raise_r+0x12>

08004fa0 <raise>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <raise+0x10>)
 8004fa4:	0001      	movs	r1, r0
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	f7ff ffd0 	bl	8004f4c <_raise_r>
 8004fac:	bd10      	pop	{r4, pc}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	20000008 	.word	0x20000008

08004fb4 <_kill_r>:
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	b570      	push	{r4, r5, r6, lr}
 8004fb8:	4d06      	ldr	r5, [pc, #24]	; (8004fd4 <_kill_r+0x20>)
 8004fba:	0004      	movs	r4, r0
 8004fbc:	0008      	movs	r0, r1
 8004fbe:	0011      	movs	r1, r2
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	f7fd fd9b 	bl	8002afc <_kill>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d103      	bne.n	8004fd2 <_kill_r+0x1e>
 8004fca:	682b      	ldr	r3, [r5, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d000      	beq.n	8004fd2 <_kill_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	20000224 	.word	0x20000224

08004fd8 <_getpid_r>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	f7fd fd89 	bl	8002af0 <_getpid>
 8004fde:	bd10      	pop	{r4, pc}

08004fe0 <__malloc_lock>:
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	4802      	ldr	r0, [pc, #8]	; (8004fec <__malloc_lock+0xc>)
 8004fe4:	f000 f80c 	bl	8005000 <__retarget_lock_acquire_recursive>
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	2000022c 	.word	0x2000022c

08004ff0 <__malloc_unlock>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	4802      	ldr	r0, [pc, #8]	; (8004ffc <__malloc_unlock+0xc>)
 8004ff4:	f000 f805 	bl	8005002 <__retarget_lock_release_recursive>
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	2000022c 	.word	0x2000022c

08005000 <__retarget_lock_acquire_recursive>:
 8005000:	4770      	bx	lr

08005002 <__retarget_lock_release_recursive>:
 8005002:	4770      	bx	lr

08005004 <_init>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500a:	bc08      	pop	{r3}
 800500c:	469e      	mov	lr, r3
 800500e:	4770      	bx	lr

08005010 <_fini>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr
