
F0RadioTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005164  08005164  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005164  08005164  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005164  08005164  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800516c  0800516c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000006c  080051e0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  080051e0  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000346db  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004555  00000000  00000000  0005476f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00058cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0005a158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014da7  00000000  00000000  0005b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001341a  00000000  00000000  00070257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078a9f  00000000  00000000  00083671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ec  00000000  00000000  000fc164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f80 	.word	0x08004f80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08004f80 	.word	0x08004f80

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b089      	sub	sp, #36	; 0x24
 8000234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000236:	240c      	movs	r4, #12
 8000238:	193b      	adds	r3, r7, r4
 800023a:	0018      	movs	r0, r3
 800023c:	2314      	movs	r3, #20
 800023e:	001a      	movs	r2, r3
 8000240:	2100      	movs	r1, #0
 8000242:	f004 fd7f 	bl	8004d44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b3d      	ldr	r3, [pc, #244]	; (800033c <MX_GPIO_Init+0x10c>)
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	4b3c      	ldr	r3, [pc, #240]	; (800033c <MX_GPIO_Init+0x10c>)
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	0289      	lsls	r1, r1, #10
 8000250:	430a      	orrs	r2, r1
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	4b39      	ldr	r3, [pc, #228]	; (800033c <MX_GPIO_Init+0x10c>)
 8000256:	695a      	ldr	r2, [r3, #20]
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	029b      	lsls	r3, r3, #10
 800025c:	4013      	ands	r3, r2
 800025e:	60bb      	str	r3, [r7, #8]
 8000260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <MX_GPIO_Init+0x10c>)
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	4b35      	ldr	r3, [pc, #212]	; (800033c <MX_GPIO_Init+0x10c>)
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	02c9      	lsls	r1, r1, #11
 800026c:	430a      	orrs	r2, r1
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <MX_GPIO_Init+0x10c>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	02db      	lsls	r3, r3, #11
 8000278:	4013      	ands	r3, r2
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 800027e:	2390      	movs	r3, #144	; 0x90
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	2201      	movs	r2, #1
 8000284:	2104      	movs	r1, #4
 8000286:	0018      	movs	r0, r3
 8000288:	f003 f9ae 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 800028c:	4b2c      	ldr	r3, [pc, #176]	; (8000340 <MX_GPIO_Init+0x110>)
 800028e:	2201      	movs	r2, #1
 8000290:	2104      	movs	r1, #4
 8000292:	0018      	movs	r0, r3
 8000294:	f003 f9a8 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEND_GPIO_Port, SEND_Pin, GPIO_PIN_RESET);
 8000298:	4b29      	ldr	r3, [pc, #164]	; (8000340 <MX_GPIO_Init+0x110>)
 800029a:	2200      	movs	r2, #0
 800029c:	2108      	movs	r1, #8
 800029e:	0018      	movs	r0, r3
 80002a0:	f003 f9a2 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_Pin;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2204      	movs	r2, #4
 80002a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2201      	movs	r2, #1
 80002ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2203      	movs	r2, #3
 80002ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 80002bc:	193a      	adds	r2, r7, r4
 80002be:	2390      	movs	r3, #144	; 0x90
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f003 f81f 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RECEIVE_Pin;
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2202      	movs	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RECEIVE_GPIO_Port, &GPIO_InitStruct);
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	4a18      	ldr	r2, [pc, #96]	; (8000340 <MX_GPIO_Init+0x110>)
 80002e0:	0019      	movs	r1, r3
 80002e2:	0010      	movs	r0, r2
 80002e4:	f003 f810 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2204      	movs	r2, #4
 80002ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2201      	movs	r2, #1
 80002f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2203      	movs	r2, #3
 80002fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000300:	193b      	adds	r3, r7, r4
 8000302:	4a0f      	ldr	r2, [pc, #60]	; (8000340 <MX_GPIO_Init+0x110>)
 8000304:	0019      	movs	r1, r3
 8000306:	0010      	movs	r0, r2
 8000308:	f002 fffe 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEND_Pin;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2208      	movs	r2, #8
 8000312:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SEND_GPIO_Port, &GPIO_InitStruct);
 8000326:	187b      	adds	r3, r7, r1
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <MX_GPIO_Init+0x110>)
 800032a:	0019      	movs	r1, r3
 800032c:	0010      	movs	r0, r2
 800032e:	f002 ffeb 	bl	8003308 <HAL_GPIO_Init>

}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b009      	add	sp, #36	; 0x24
 8000338:	bd90      	pop	{r4, r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021000 	.word	0x40021000
 8000340:	48000400 	.word	0x48000400

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034a:	f002 fedb 	bl	8003104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034e:	f000 f823 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000352:	f7ff ff6d 	bl	8000230 <MX_GPIO_Init>
  MX_TIM15_Init();
 8000356:	f002 f83f 	bl	80023d8 <MX_TIM15_Init>
  MX_TIM16_Init();
 800035a:	f002 f895 	bl	8002488 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Insert a test message
  char * message = " ~";
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <main+0x48>)
 8000360:	607b      	str	r3, [r7, #4]
  radioSend(message);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	0018      	movs	r0, r3
 8000366:	f000 f8cd 	bl	8000504 <radioSend>

  // Enable the timer interrupt for the transmitter
  HAL_TIM_Base_Start_IT(&htim15);
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <main+0x4c>)
 800036c:	0018      	movs	r0, r3
 800036e:	f003 fe3f 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <main+0x50>)
 8000374:	0018      	movs	r0, r3
 8000376:	f003 fe3b 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	radioEcho();
 800037a:	f000 f919 	bl	80005b0 <radioEcho>
	HAL_Delay(1000);
 800037e:	23fa      	movs	r3, #250	; 0xfa
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	0018      	movs	r0, r3
 8000384:	f002 feee 	bl	8003164 <HAL_Delay>
	radioEcho();
 8000388:	e7f7      	b.n	800037a <main+0x36>
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	08004f98 	.word	0x08004f98
 8000390:	200001e8 	.word	0x200001e8
 8000394:	20000230 	.word	0x20000230

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b091      	sub	sp, #68	; 0x44
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	2410      	movs	r4, #16
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	0018      	movs	r0, r3
 80003a4:	2330      	movs	r3, #48	; 0x30
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f004 fccb 	bl	8004d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ae:	003b      	movs	r3, r7
 80003b0:	0018      	movs	r0, r3
 80003b2:	2310      	movs	r3, #16
 80003b4:	001a      	movs	r2, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	f004 fcc4 	bl	8004d44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003bc:	0021      	movs	r1, r4
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2202      	movs	r2, #2
 80003c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2201      	movs	r2, #1
 80003c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2210      	movs	r2, #16
 80003ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	0018      	movs	r0, r3
 80003da:	f003 f923 	bl	8003624 <HAL_RCC_OscConfig>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003e2:	f000 f82b 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	003b      	movs	r3, r7
 80003e8:	2207      	movs	r2, #7
 80003ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ec:	003b      	movs	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	003b      	movs	r3, r7
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f8:	003b      	movs	r3, r7
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003fe:	003b      	movs	r3, r7
 8000400:	2100      	movs	r1, #0
 8000402:	0018      	movs	r0, r3
 8000404:	f003 fc28 	bl	8003c58 <HAL_RCC_ClockConfig>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800040c:	f000 f816 	bl	800043c <Error_Handler>
  }
}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	b011      	add	sp, #68	; 0x44
 8000416:	bd90      	pop	{r4, r7, pc}

08000418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d101      	bne.n	800042e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800042a:	f002 fe7f 	bl	800312c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40000400 	.word	0x40000400

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>

08000446 <_ZN7messageC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	messageString = "";
	bitPointer = 0;
}

// Class constructor
message::message(string msg)
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	0018      	movs	r0, r3
 8000454:	f004 fb40 	bl	8004ad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	messageString = msg;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	0011      	movs	r1, r2
 800045e:	0018      	movs	r0, r3
 8000460:	f004 fb47 	bl	8004af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	bitPointer = 0;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2200      	movs	r2, #0
 8000468:	831a      	strh	r2, [r3, #24]
}
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	0018      	movs	r0, r3
 800046e:	46bd      	mov	sp, r7
 8000470:	b002      	add	sp, #8
 8000472:	bd80      	pop	{r7, pc}

08000474 <_ZN7message16getMessageStringB5cxx11Ev>:

string message::getMessageString()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	return messageString;
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	0011      	movs	r1, r2
 8000484:	0018      	movs	r0, r3
 8000486:	f004 fbad 	bl	8004be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}

08000492 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d206      	bcs.n	80004b2 <_ZSt16__deque_buf_sizej+0x20>
 80004a4:	6879      	ldr	r1, [r7, #4]
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	0098      	lsls	r0, r3, #2
 80004aa:	f7ff fe35 	bl	8000118 <__udivsi3>
 80004ae:	0003      	movs	r3, r0
 80004b0:	e000      	b.n	80004b4 <_ZSt16__deque_buf_sizej+0x22>
 80004b2:	2301      	movs	r3, #1
 80004b4:	0018      	movs	r0, r3
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b002      	add	sp, #8
 80004ba:	bd80      	pop	{r7, pc}

080004bc <_ZN11transmitterC1Ev>:
#define SEND_HIGH		(GPIOB->BSRR = GPIO_BSRR_BS_3)
#define SEND_LOW		(GPIOB->BSRR = GPIO_BSRR_BR_3)
#define RED_HIGH		(GPIOA->BSRR = GPIO_BSRR_BS_2)
#define RED_LOW			(GPIOA->BSRR = GPIO_BSRR_BR_2)

class transmitter
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 f8aa 	bl	8000620 <_ZNSt5dequeI7messageSaIS0_EEC1Ev>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3328      	adds	r3, #40	; 0x28
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 f8d7 	bl	8000684 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	0018      	movs	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	b002      	add	sp, #8
 80004de:	bd80      	pop	{r7, pc}

080004e0 <_ZN8receiverC1Ev>:

#define RECEIVE			(GPIOB->IDR & GPIO_IDR_1)
#define GREEN_HIGH		(GPIOB->BSRR = GPIO_BSRR_BS_2)
#define GREEN_LOW		(GPIOB->BSRR = GPIO_BSRR_BR_2)

class receiver
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 f898 	bl	8000620 <_ZNSt5dequeI7messageSaIS0_EEC1Ev>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3328      	adds	r3, #40	; 0x28
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 f8f7 	bl	80006e8 <_ZNSt6bitsetILj1000EEC1Ev>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	0018      	movs	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}

08000504 <radioSend>:

transmitter t;
receiver r;

void radioSend(char * message)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b090      	sub	sp, #64	; 0x40
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	// Convert C char pointer to C++ string
	string messageString(message);
 800050c:	2424      	movs	r4, #36	; 0x24
 800050e:	193b      	adds	r3, r7, r4
 8000510:	0018      	movs	r0, r3
 8000512:	f004 f947 	bl	80047a4 <_ZNSaIcEC1Ev>
 8000516:	193a      	adds	r2, r7, r4
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	250c      	movs	r5, #12
 800051c:	197b      	adds	r3, r7, r5
 800051e:	0018      	movs	r0, r3
 8000520:	f004 fb92 	bl	8004c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	f004 f93d 	bl	80047a6 <_ZNSaIcED1Ev>

	return t.send(messageString);
 800052c:	002c      	movs	r4, r5
 800052e:	193a      	adds	r2, r7, r4
 8000530:	2528      	movs	r5, #40	; 0x28
 8000532:	197b      	adds	r3, r7, r5
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f004 fb54 	bl	8004be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800053c:	197a      	adds	r2, r7, r5
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <radioSend+0x5c>)
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f002 f8ef 	bl	8002726 <_ZN11transmitter4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000548:	197b      	adds	r3, r7, r5
 800054a:	0018      	movs	r0, r3
 800054c:	f004 facb 	bl	8004ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string messageString(message);
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	f004 fac7 	bl	8004ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return t.send(messageString);
 8000558:	46c0      	nop			; (mov r8, r8)
}
 800055a:	46bd      	mov	sp, r7
 800055c:	b010      	add	sp, #64	; 0x40
 800055e:	bdb0      	pop	{r4, r5, r7, pc}
 8000560:	20000088 	.word	0x20000088

08000564 <radioSendTick>:

void radioSendTick()
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	return t.tick();
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <radioSendTick+0x14>)
 800056a:	0018      	movs	r0, r3
 800056c:	f002 f900 	bl	8002770 <_ZN11transmitter4tickEv>
 8000570:	46c0      	nop			; (mov r8, r8)
}
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	20000088 	.word	0x20000088

0800057c <radioReceiveTick>:

void radioReceiveTick()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	return r.tick();
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <radioReceiveTick+0x14>)
 8000582:	0018      	movs	r0, r3
 8000584:	f001 f8b2 	bl	80016ec <_ZN8receiver4tickEv>
 8000588:	46c0      	nop			; (mov r8, r8)
}
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	200000dc 	.word	0x200000dc

08000594 <_ZN7messageD1Ev>:
extern "C"
{
#include "main.h"
}

class message
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	0018      	movs	r0, r3
 80005a0:	f004 faa1 	bl	8004ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0018      	movs	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <radioEcho>:

void radioEcho()
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
	if(r.checkMessage())
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <radioEcho+0x68>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 f85a 	bl	8001672 <_ZN8receiver12checkMessageEv>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d025      	beq.n	800060e <radioEcho+0x5e>
	{
		// Get the filled up message object
		message m = r.popMessage();
 80005c2:	241c      	movs	r4, #28
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <radioEcho+0x68>)
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 f876 	bl	80016bc <_ZN8receiver10popMessageEv>

		// Get the received string from the message
		string s = m.getMessageString();
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	193a      	adds	r2, r7, r4
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff4c 	bl	8000474 <_ZN7message16getMessageStringB5cxx11Ev>

		t.send(s);
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	2538      	movs	r5, #56	; 0x38
 80005e0:	197b      	adds	r3, r7, r5
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f004 fafd 	bl	8004be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80005ea:	197a      	adds	r2, r7, r5
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <radioEcho+0x6c>)
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 f898 	bl	8002726 <_ZN11transmitter4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80005f6:	197b      	adds	r3, r7, r5
 80005f8:	0018      	movs	r0, r3
 80005fa:	f004 fa74 	bl	8004ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		string s = m.getMessageString();
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	0018      	movs	r0, r3
 8000602:	f004 fa70 	bl	8004ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		message m = r.popMessage();
 8000606:	193b      	adds	r3, r7, r4
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff ffc3 	bl	8000594 <_ZN7messageD1Ev>
	}
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b014      	add	sp, #80	; 0x50
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	200000dc 	.word	0x200000dc
 800061c:	20000088 	.word	0x20000088

08000620 <_ZNSt5dequeI7messageSaIS0_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	0018      	movs	r0, r3
 800062c:	f000 f876 	bl	800071c <_ZNSt11_Deque_baseI7messageSaIS0_EEC1Ev>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	0018      	movs	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}

0800063a <_ZNSt5dequeI7messageSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800063a:	b5b0      	push	{r4, r5, r7, lr}
 800063c:	b08a      	sub	sp, #40	; 0x28
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8000642:	2408      	movs	r4, #8
 8000644:	193b      	adds	r3, r7, r4
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f89a 	bl	8000784 <_ZNSt5dequeI7messageSaIS0_EE5beginEv>
 8000650:	2518      	movs	r5, #24
 8000652:	197b      	adds	r3, r7, r5
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f000 f8a4 	bl	80007a6 <_ZNSt5dequeI7messageSaIS0_EE3endEv>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	0018      	movs	r0, r3
 8000662:	f000 f8b1 	bl	80007c8 <_ZNSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>
 8000666:	0003      	movs	r3, r0
 8000668:	197a      	adds	r2, r7, r5
 800066a:	1939      	adds	r1, r7, r4
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f8ce 	bl	800080e <_ZNSt5dequeI7messageSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	0018      	movs	r0, r3
 8000676:	f000 f863 	bl	8000740 <_ZNSt11_Deque_baseI7messageSaIS0_EED1Ev>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	b00a      	add	sp, #40	; 0x28
 8000682:	bdb0      	pop	{r4, r5, r7, pc}

08000684 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>:
      deque() : _Base() { }
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	0018      	movs	r0, r3
 8000690:	f000 f8e9 	bl	8000866 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EEC1Ev>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	0018      	movs	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}

0800069e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>:
      ~deque()
 800069e:	b5b0      	push	{r4, r5, r7, lr}
 80006a0:	b08a      	sub	sp, #40	; 0x28
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80006a6:	2408      	movs	r4, #8
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 f90d 	bl	80008ce <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>
 80006b4:	2518      	movs	r5, #24
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 f917 	bl	80008f0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 f924 	bl	8000912 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 80006ca:	0003      	movs	r3, r0
 80006cc:	197a      	adds	r2, r7, r5
 80006ce:	1939      	adds	r1, r7, r4
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f941 	bl	8000958 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 f8d6 	bl	800088a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b00a      	add	sp, #40	; 0x28
 80006e6:	bdb0      	pop	{r4, r5, r7, pc}

080006e8 <_ZNSt6bitsetILj1000EEC1Ev>:
      };
      friend class reference;

      // 23.3.5.1 constructors:
      /// All bits set to zero.
      _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
      { }
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 f93b 	bl	800096e <_ZNSt12_Base_bitsetILj32EEC1Ev>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	0018      	movs	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}

08000702 <_ZNSt11_Deque_baseI7messageSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	0018      	movs	r0, r3
 800070e:	f000 f95d 	bl	80009cc <_ZNSaI7messageED1Ev>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}

0800071c <_ZNSt11_Deque_baseI7messageSaIS0_EEC1Ev>:
      _Deque_base()
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	0018      	movs	r0, r3
 8000728:	f000 f933 	bl	8000992 <_ZNSt11_Deque_baseI7messageSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2100      	movs	r1, #0
 8000730:	0018      	movs	r0, r3
 8000732:	f000 f958 	bl	80009e6 <_ZNSt11_Deque_baseI7messageSaIS0_EE17_M_initialize_mapEj>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	0018      	movs	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	b002      	add	sp, #8
 800073e:	bd80      	pop	{r7, pc}

08000740 <_ZNSt11_Deque_baseI7messageSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d010      	beq.n	8000772 <_ZNSt11_Deque_baseI7messageSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000758:	1d1a      	adds	r2, r3, #4
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	0018      	movs	r0, r3
 800075e:	f000 f9ae 	bl	8000abe <_ZNSt11_Deque_baseI7messageSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6819      	ldr	r1, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	0018      	movs	r0, r3
 800076e:	f000 f9c1 	bl	8000af4 <_ZNSt11_Deque_baseI7messageSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff ffc4 	bl	8000702 <_ZNSt11_Deque_baseI7messageSaIS0_EE11_Deque_implD1Ev>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}

08000784 <_ZNSt5dequeI7messageSaIS0_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3308      	adds	r3, #8
 8000792:	001a      	movs	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f000 f81e 	bl	80007da <_ZNSt15_Deque_iteratorI7messageRS0_PS0_EC1ERKS3_>
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b002      	add	sp, #8
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <_ZNSt5dequeI7messageSaIS0_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3318      	adds	r3, #24
 80007b4:	001a      	movs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 f80d 	bl	80007da <_ZNSt15_Deque_iteratorI7messageRS0_PS0_EC1ERKS3_>
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_ZNSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	0018      	movs	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}

080007da <_ZNSt15_Deque_iteratorI7messageRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	689a      	ldr	r2, [r3, #8]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	0018      	movs	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}

0800080e <_ZNSt5dequeI7messageSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800080e:	b5b0      	push	{r4, r5, r7, lr}
 8000810:	b08c      	sub	sp, #48	; 0x30
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	2410      	movs	r4, #16
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f7ff ffd8 	bl	80007da <_ZNSt15_Deque_iteratorI7messageRS0_PS0_EC1ERKS3_>
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	2520      	movs	r5, #32
 800082e:	197b      	adds	r3, r7, r5
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ffd1 	bl	80007da <_ZNSt15_Deque_iteratorI7messageRS0_PS0_EC1ERKS3_>
 8000838:	197a      	adds	r2, r7, r5
 800083a:	1939      	adds	r1, r7, r4
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	0018      	movs	r0, r3
 8000840:	f000 f973 	bl	8000b2a <_ZNSt5dequeI7messageSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b00c      	add	sp, #48	; 0x30
 800084a:	bdb0      	pop	{r4, r5, r7, pc}

0800084c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	0018      	movs	r0, r3
 8000858:	f000 f9e2 	bl	8000c20 <_ZNSaISt6bitsetILj8EEED1Ev>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0018      	movs	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}

08000866 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EEC1Ev>:
      _Deque_base()
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	0018      	movs	r0, r3
 8000872:	f000 f9b8 	bl	8000be6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2100      	movs	r1, #0
 800087a:	0018      	movs	r0, r3
 800087c:	f000 f9dd 	bl	8000c3a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_initialize_mapEj>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	0018      	movs	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}

0800088a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d010      	beq.n	80008bc <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80008a2:	1d1a      	adds	r2, r3, #4
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fa2f 	bl	8000d0a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6819      	ldr	r1, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fa42 	bl	8000d40 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff ffc4 	bl	800084c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implD1Ev>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	3308      	adds	r3, #8
 80008dc:	001a      	movs	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	0011      	movs	r1, r2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 f81e 	bl	8000924 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	3318      	adds	r3, #24
 80008fe:	001a      	movs	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f000 f80d 	bl	8000924 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	46bd      	mov	sp, r7
 800090e:	b002      	add	sp, #8
 8000910:	bd80      	pop	{r7, pc}

08000912 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}

08000924 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}

08000958 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	603b      	str	r3, [r7, #0]
      }
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b00c      	add	sp, #48	; 0x30
 800096c:	bd80      	pop	{r7, pc}

0800096e <_ZNSt12_Base_bitsetILj32EEC1Ev>:
      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
      : _M_w() { }
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	221f      	movs	r2, #31
 800097a:	2a00      	cmp	r2, #0
 800097c:	db04      	blt.n	8000988 <_ZNSt12_Base_bitsetILj32EEC1Ev+0x1a>
 800097e:	2100      	movs	r1, #0
 8000980:	6019      	str	r1, [r3, #0]
 8000982:	3304      	adds	r3, #4
 8000984:	3a01      	subs	r2, #1
 8000986:	e7f8      	b.n	800097a <_ZNSt12_Base_bitsetILj32EEC1Ev+0xc>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}

08000992 <_ZNSt11_Deque_baseI7messageSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl()
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	0018      	movs	r0, r3
 800099e:	f000 f9ea 	bl	8000d76 <_ZNSaI7messageEC1Ev>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3308      	adds	r3, #8
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f9ec 	bl	8000d90 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_EC1Ev>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3318      	adds	r3, #24
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 f9e7 	bl	8000d90 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_EC1Ev>
	{ }
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_ZNSaI7messageED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 f9ef 	bl	8000dba <_ZN9__gnu_cxx13new_allocatorI7messageED1Ev>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_ZNSt11_Deque_baseI7messageSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80009e6:	b590      	push	{r4, r7, lr}
 80009e8:	b089      	sub	sp, #36	; 0x24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 80009f0:	201c      	movs	r0, #28
 80009f2:	f7ff fd4e 	bl	8000492 <_ZSt16__deque_buf_sizej>
 80009f6:	0003      	movs	r3, r0
 80009f8:	0019      	movs	r1, r3
 80009fa:	6838      	ldr	r0, [r7, #0]
 80009fc:	f7ff fb8c 	bl	8000118 <__udivsi3>
 8000a00:	0003      	movs	r3, r0
 8000a02:	3301      	adds	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000a06:	2308      	movs	r3, #8
 8000a08:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	2310      	movs	r3, #16
 8000a12:	18fa      	adds	r2, r7, r3
 8000a14:	230c      	movs	r3, #12
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 f9d6 	bl	8000dcc <_ZSt3maxIjERKT_S2_S2_>
 8000a20:	0003      	movs	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 f9dd 	bl	8000df0 <_ZNSt11_Deque_baseI7messageSaIS0_EE15_M_allocate_mapEj>
 8000a36:	0002      	movs	r2, r0
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6859      	ldr	r1, [r3, #4]
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	1acb      	subs	r3, r1, r3
 8000a48:	085b      	lsrs	r3, r3, #1
 8000a4a:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000a4c:	18d3      	adds	r3, r2, r3
 8000a4e:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	18d3      	adds	r3, r2, r3
 8000a58:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	69b9      	ldr	r1, [r7, #24]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 f9e2 	bl	8000e2a <_ZNSt11_Deque_baseI7messageSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3308      	adds	r3, #8
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 f9f6 	bl	8000e60 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3318      	adds	r3, #24
 8000a78:	001a      	movs	r2, r3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3b04      	subs	r3, #4
 8000a7e:	0019      	movs	r1, r3
 8000a80:	0010      	movs	r0, r2
 8000a82:	f000 f9ed 	bl	8000e60 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000a92:	201c      	movs	r0, #28
 8000a94:	f7ff fcfd 	bl	8000492 <_ZSt16__deque_buf_sizej>
 8000a98:	0002      	movs	r2, r0
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff fbc0 	bl	8000224 <__aeabi_uidivmod>
 8000aa4:	000b      	movs	r3, r1
 8000aa6:	001a      	movs	r2, r3
					+ __num_elements
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	619a      	str	r2, [r3, #24]
    }
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b009      	add	sp, #36	; 0x24
 8000abc:	bd90      	pop	{r4, r7, pc}

08000abe <_ZNSt11_Deque_baseI7messageSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d20a      	bcs.n	8000aec <_ZNSt11_Deque_baseI7messageSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2e>
	_M_deallocate_node(*__n);
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	0011      	movs	r1, r2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 f9da 	bl	8000e98 <_ZNSt11_Deque_baseI7messageSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e7f0      	b.n	8000ace <_ZNSt11_Deque_baseI7messageSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b006      	add	sp, #24
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZNSt11_Deque_baseI7messageSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000b00:	2414      	movs	r4, #20
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 f9d8 	bl	8000ebe <_ZNKSt11_Deque_baseI7messageSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 f9f2 	bl	8000efe <_ZNSt16allocator_traitsISaIP7messageEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 f9e1 	bl	8000ee4 <_ZNSaIP7messageED1Ev>
      }
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b007      	add	sp, #28
 8000b28:	bd90      	pop	{r4, r7, pc}

08000b2a <_ZNSt5dequeI7messageSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
        }
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 8000b2a:	b5b0      	push	{r4, r5, r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	3304      	adds	r3, #4
 8000b3c:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d219      	bcs.n	8000b7c <_ZNSt5dequeI7messageSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	681d      	ldr	r5, [r3, #0]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	681c      	ldr	r4, [r3, #0]
 8000b50:	f000 f9e5 	bl	8000f1e <_ZNSt5dequeI7messageSaIS0_EE14_S_buffer_sizeEv>
 8000b54:	0002      	movs	r2, r0
 8000b56:	0013      	movs	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	18e4      	adds	r4, r4, r3
		       _M_get_Tp_allocator());
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fe30 	bl	80007c8 <_ZNSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>
 8000b68:	0003      	movs	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	0021      	movs	r1, r4
 8000b6e:	0028      	movs	r0, r5
 8000b70:	f000 f9de 	bl	8000f30 <_ZSt8_DestroyIP7messageS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3304      	adds	r3, #4
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e7e0      	b.n	8000b3e <_ZNSt5dequeI7messageSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d01c      	beq.n	8000bc2 <_ZNSt5dequeI7messageSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	681c      	ldr	r4, [r3, #0]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff fe18 	bl	80007c8 <_ZNSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>
 8000b98:	0003      	movs	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	0029      	movs	r1, r5
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	f000 f9c6 	bl	8000f30 <_ZSt8_DestroyIP7messageS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685c      	ldr	r4, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fe0a 	bl	80007c8 <_ZNSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>
 8000bb4:	0003      	movs	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	0029      	movs	r1, r5
 8000bba:	0020      	movs	r0, r4
 8000bbc:	f000 f9b8 	bl	8000f30 <_ZSt8_DestroyIP7messageS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8000bc0:	e00d      	b.n	8000bde <_ZNSt5dequeI7messageSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	681c      	ldr	r4, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fdfb 	bl	80007c8 <_ZNSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>
 8000bd2:	0003      	movs	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	0029      	movs	r1, r5
 8000bd8:	0020      	movs	r0, r4
 8000bda:	f000 f9a9 	bl	8000f30 <_ZSt8_DestroyIP7messageS0_EvT_S2_RSaIT0_E>
     }
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b006      	add	sp, #24
 8000be4:	bdb0      	pop	{r4, r5, r7, pc}

08000be6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl()
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f000 f9ad 	bl	8000f50 <_ZNSaISt6bitsetILj8EEEC1Ev>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3308      	adds	r3, #8
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f9af 	bl	8000f6a <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	0018      	movs	r0, r3
 8000c12:	f000 f9aa 	bl	8000f6a <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>
	{ }
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_ZNSaISt6bitsetILj8EEED1Ev>:
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f9b2 	bl	8000f94 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEED1Ev>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8000c3a:	b590      	push	{r4, r7, lr}
 8000c3c:	b089      	sub	sp, #36	; 0x24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8000c44:	2004      	movs	r0, #4
 8000c46:	f7ff fc24 	bl	8000492 <_ZSt16__deque_buf_sizej>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	6838      	ldr	r0, [r7, #0]
 8000c50:	f7ff fa62 	bl	8000118 <__udivsi3>
 8000c54:	0003      	movs	r3, r0
 8000c56:	3301      	adds	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3302      	adds	r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	2310      	movs	r3, #16
 8000c66:	18fa      	adds	r2, r7, r3
 8000c68:	230c      	movs	r3, #12
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f8ac 	bl	8000dcc <_ZSt3maxIjERKT_S2_S2_>
 8000c74:	0003      	movs	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 f98e 	bl	8000fa6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6859      	ldr	r1, [r3, #4]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	1acb      	subs	r3, r1, r3
 8000c9c:	085b      	lsrs	r3, r3, #1
 8000c9e:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	18d3      	adds	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	69b9      	ldr	r1, [r7, #24]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f000 f993 	bl	8000fe0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f9a7 	bl	8001016 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3318      	adds	r3, #24
 8000ccc:	001a      	movs	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3b04      	subs	r3, #4
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	0010      	movs	r0, r2
 8000cd6:	f000 f99e 	bl	8001016 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000ce6:	2004      	movs	r0, #4
 8000ce8:	f7ff fbd3 	bl	8000492 <_ZSt16__deque_buf_sizej>
 8000cec:	0002      	movs	r2, r0
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fa96 	bl	8000224 <__aeabi_uidivmod>
 8000cf8:	000b      	movs	r3, r1
					+ __num_elements
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	619a      	str	r2, [r3, #24]
    }
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b009      	add	sp, #36	; 0x24
 8000d08:	bd90      	pop	{r4, r7, pc}

08000d0a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d20a      	bcs.n	8000d38 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2e>
	_M_deallocate_node(*__n);
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f98c 	bl	8001048 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3304      	adds	r3, #4
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e7f0      	b.n	8000d1a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b006      	add	sp, #24
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000d4c:	2414      	movs	r4, #20
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	0011      	movs	r1, r2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 f98a 	bl	800106e <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 f9a4 	bl	80010ae <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 f993 	bl	8001094 <_ZNSaIPSt6bitsetILj8EEED1Ev>
      }
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b007      	add	sp, #28
 8000d74:	bd90      	pop	{r4, r7, pc}

08000d76 <_ZNSaI7messageEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 f9a4 	bl	80010ce <_ZN9__gnu_cxx13new_allocatorI7messageEC1Ev>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	0018      	movs	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_ZN9__gnu_cxx13new_allocatorI7messageED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d201      	bcs.n	8000de6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	e000      	b.n	8000de8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000de6:	687b      	ldr	r3, [r7, #4]
    }
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_ZNSt11_Deque_baseI7messageSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000dfa:	250c      	movs	r5, #12
 8000dfc:	197b      	adds	r3, r7, r5
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 f85b 	bl	8000ebe <_ZNKSt11_Deque_baseI7messageSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	197b      	adds	r3, r7, r5
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f966 	bl	80010e0 <_ZNSt16allocator_traitsISaIP7messageEE8allocateERS2_j>
 8000e14:	0004      	movs	r4, r0
 8000e16:	46c0      	nop			; (mov r8, r8)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000e18:	197b      	adds	r3, r7, r5
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 f862 	bl	8000ee4 <_ZNSaIP7messageED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000e20:	0023      	movs	r3, r4
      }
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b004      	add	sp, #16
 8000e28:	bdb0      	pop	{r4, r5, r7, pc}

08000e2a <_ZNSt11_Deque_baseI7messageSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d20a      	bcs.n	8000e58 <_ZNSt11_Deque_baseI7messageSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2e>
	    *__cur = this->_M_allocate_node();
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	0018      	movs	r0, r3
 8000e46:	f000 f95b 	bl	8001100 <_ZNSt11_Deque_baseI7messageSaIS0_EE16_M_allocate_nodeEv>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3304      	adds	r3, #4
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e7f0      	b.n	8000e3a <_ZNSt11_Deque_baseI7messageSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b006      	add	sp, #24
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685c      	ldr	r4, [r3, #4]
 8000e7c:	f000 f952 	bl	8001124 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E14_S_buffer_sizeEv>
 8000e80:	0002      	movs	r2, r0
 8000e82:	0013      	movs	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	1a9b      	subs	r3, r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	18e2      	adds	r2, r4, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
      }
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b003      	add	sp, #12
 8000e96:	bd90      	pop	{r4, r7, pc}

08000e98 <_ZNSt11_Deque_baseI7messageSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8000ea2:	687c      	ldr	r4, [r7, #4]
 8000ea4:	201c      	movs	r0, #28
 8000ea6:	f7ff faf4 	bl	8000492 <_ZSt16__deque_buf_sizej>
 8000eaa:	0002      	movs	r2, r0
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	0019      	movs	r1, r3
 8000eb0:	0020      	movs	r0, r4
 8000eb2:	f000 f940 	bl	8001136 <_ZNSt16allocator_traitsISaI7messageEE10deallocateERS1_PS0_j>
      }
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b003      	add	sp, #12
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <_ZNKSt11_Deque_baseI7messageSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 f943 	bl	8001156 <_ZNKSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	0011      	movs	r1, r2
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 f946 	bl	8001168 <_ZNSaIP7messageEC1IS_EERKSaIT_E>
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_ZNSaIP7messageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 f948 	bl	8001184 <_ZN9__gnu_cxx13new_allocatorIP7messageED1Ev>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_ZNSt16allocator_traitsISaIP7messageEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 f940 	bl	8001196 <_ZN9__gnu_cxx13new_allocatorIP7messageE10deallocateEPS2_j>
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZNSt5dequeI7messageSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8000f22:	201c      	movs	r0, #28
 8000f24:	f7ff fab5 	bl	8000492 <_ZSt16__deque_buf_sizej>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZSt8_DestroyIP7messageS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f935 	bl	80011b2 <_ZSt8_DestroyIP7messageEvT_S2_>
    }
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b004      	add	sp, #16
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_ZNSaISt6bitsetILj8EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 f938 	bl	80011d0 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEEC1Ev>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEED1Ev>:
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8000fa6:	b5b0      	push	{r4, r5, r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000fb0:	250c      	movs	r5, #12
 8000fb2:	197b      	adds	r3, r7, r5
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f000 f858 	bl	800106e <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	197b      	adds	r3, r7, r5
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 f90c 	bl	80011e2 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE8allocateERS3_j>
 8000fca:	0004      	movs	r4, r0
 8000fcc:	46c0      	nop			; (mov r8, r8)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000fce:	197b      	adds	r3, r7, r5
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f000 f85f 	bl	8001094 <_ZNSaIPSt6bitsetILj8EEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000fd6:	0023      	movs	r3, r4
      }
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bdb0      	pop	{r4, r5, r7, pc}

08000fe0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d20a      	bcs.n	800100e <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2e>
	    *__cur = this->_M_allocate_node();
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 f901 	bl	8001202 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>
 8001000:	0002      	movs	r2, r0
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3304      	adds	r3, #4
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e7f0      	b.n	8000ff0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b006      	add	sp, #24
 8001014:	bd80      	pop	{r7, pc}

08001016 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8001016:	b590      	push	{r4, r7, lr}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685c      	ldr	r4, [r3, #4]
 8001032:	f000 f8f8 	bl	8001226 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>
 8001036:	0003      	movs	r3, r0
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	18e2      	adds	r2, r4, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	609a      	str	r2, [r3, #8]
      }
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b003      	add	sp, #12
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8001052:	687c      	ldr	r4, [r7, #4]
 8001054:	2004      	movs	r0, #4
 8001056:	f7ff fa1c 	bl	8000492 <_ZSt16__deque_buf_sizej>
 800105a:	0002      	movs	r2, r0
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	0019      	movs	r1, r3
 8001060:	0020      	movs	r0, r4
 8001062:	f000 f8e9 	bl	8001238 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE10deallocateERS2_PS1_j>
      }
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b003      	add	sp, #12
 800106c:	bd90      	pop	{r4, r7, pc}

0800106e <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	0018      	movs	r0, r3
 800107c:	f000 f8ec 	bl	8001258 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8001080:	0002      	movs	r2, r0
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0011      	movs	r1, r2
 8001086:	0018      	movs	r0, r3
 8001088:	f000 f8ef 	bl	800126a <_ZNSaIPSt6bitsetILj8EEEC1IS0_EERKSaIT_E>
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZNSaIPSt6bitsetILj8EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 f8f1 	bl	8001286 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEED1Ev>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 f8e9 	bl	8001298 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE10deallocateEPS3_j>
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b004      	add	sp, #16
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_ZN9__gnu_cxx13new_allocatorI7messageEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_ZNSt16allocator_traitsISaIP7messageEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80010ea:	6839      	ldr	r1, [r7, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 f8df 	bl	80012b4 <_ZN9__gnu_cxx13new_allocatorIP7messageE8allocateEjPKv>
 80010f6:	0003      	movs	r3, r0
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_ZNSt11_Deque_baseI7messageSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8001108:	687c      	ldr	r4, [r7, #4]
 800110a:	201c      	movs	r0, #28
 800110c:	f7ff f9c1 	bl	8000492 <_ZSt16__deque_buf_sizej>
 8001110:	0003      	movs	r3, r0
 8001112:	0019      	movs	r1, r3
 8001114:	0020      	movs	r0, r4
 8001116:	f000 f8eb 	bl	80012f0 <_ZNSt16allocator_traitsISaI7messageEE8allocateERS1_j>
 800111a:	0003      	movs	r3, r0
      }
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b003      	add	sp, #12
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8001128:	201c      	movs	r0, #28
 800112a:	f7ff f9b2 	bl	8000492 <_ZSt16__deque_buf_sizej>
 800112e:	0003      	movs	r3, r0
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_ZNSt16allocator_traitsISaI7messageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	0018      	movs	r0, r3
 800114a:	f000 f8e1 	bl	8001310 <_ZN9__gnu_cxx13new_allocatorI7messageE10deallocateEPS1_j>
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}

08001156 <_ZNKSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZNSaIP7messageEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	0018      	movs	r0, r3
 8001176:	f000 f8d9 	bl	800132c <_ZN9__gnu_cxx13new_allocatorIP7messageEC1Ev>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZN9__gnu_cxx13new_allocatorIP7messageED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}

08001196 <_ZN9__gnu_cxx13new_allocatorIP7messageE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f003 fae7 	bl	8004778 <_ZdlPv>
      }
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b004      	add	sp, #16
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZSt8_DestroyIP7messageEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	0011      	movs	r1, r2
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f8bb 	bl	800133e <_ZNSt12_Destroy_auxILb0EE9__destroyIP7messageEEvT_S4_>
    }
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b002      	add	sp, #8
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 f8bc 	bl	8001370 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv>
 80011f8:	0003      	movs	r3, r0
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}

08001202 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8001202:	b590      	push	{r4, r7, lr}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800120a:	687c      	ldr	r4, [r7, #4]
 800120c:	2004      	movs	r0, #4
 800120e:	f7ff f940 	bl	8000492 <_ZSt16__deque_buf_sizej>
 8001212:	0003      	movs	r3, r0
 8001214:	0019      	movs	r1, r3
 8001216:	0020      	movs	r0, r4
 8001218:	f000 f8c8 	bl	80013ac <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8allocateERS2_j>
 800121c:	0003      	movs	r3, r0
      }
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	b003      	add	sp, #12
 8001224:	bd90      	pop	{r4, r7, pc}

08001226 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800122a:	2004      	movs	r0, #4
 800122c:	f7ff f931 	bl	8000492 <_ZSt16__deque_buf_sizej>
 8001230:	0003      	movs	r3, r0
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f8be 	bl	80013cc <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE10deallocateEPS2_j>
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b004      	add	sp, #16
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}

0800126a <_ZNSaIPSt6bitsetILj8EEEC1IS0_EERKSaIT_E>:
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	0018      	movs	r0, r3
 8001278:	f000 f8b6 	bl	80013e8 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEEC1Ev>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0018      	movs	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f003 fa66 	bl	8004778 <_ZdlPv>
      }
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b004      	add	sp, #16
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZN9__gnu_cxx13new_allocatorIP7messageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 f89a 	bl	80013fc <_ZNK9__gnu_cxx13new_allocatorIP7messageE8max_sizeEv>
 80012c8:	0002      	movs	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	419b      	sbcs	r3, r3
 80012d0:	425b      	negs	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <_ZN9__gnu_cxx13new_allocatorIP7messageE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80012d8:	f003 fa66 	bl	80047a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f003 fa4d 	bl	8004780 <_Znwj>
 80012e6:	0003      	movs	r3, r0
      }
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b004      	add	sp, #16
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZNSt16allocator_traitsISaI7messageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80012fa:	6839      	ldr	r1, [r7, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	0018      	movs	r0, r3
 8001302:	f000 f887 	bl	8001414 <_ZN9__gnu_cxx13new_allocatorI7messageE8allocateEjPKv>
 8001306:	0003      	movs	r3, r0
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZN9__gnu_cxx13new_allocatorI7messageE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	0018      	movs	r0, r3
 8001320:	f003 fa2a 	bl	8004778 <_ZdlPv>
      }
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b004      	add	sp, #16
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN9__gnu_cxx13new_allocatorIP7messageEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}

0800133e <_ZNSt12_Destroy_auxILb0EE9__destroyIP7messageEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d00b      	beq.n	8001368 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7messageEEvT_S4_+0x2a>
	    std::_Destroy(std::__addressof(*__first));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	0018      	movs	r0, r3
 8001354:	f000 f87f 	bl	8001456 <_ZSt11__addressofI7messageEPT_RS1_>
 8001358:	0003      	movs	r3, r0
 800135a:	0018      	movs	r0, r3
 800135c:	f000 f884 	bl	8001468 <_ZSt8_DestroyI7messageEvPT_>
	  for (; __first != __last; ++__first)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	331c      	adds	r3, #28
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	e7ef      	b.n	8001348 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7messageEEvT_S4_+0xa>
	}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}

08001370 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	0018      	movs	r0, r3
 8001380:	f000 f87e 	bl	8001480 <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv>
 8001384:	0002      	movs	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	429a      	cmp	r2, r3
 800138a:	419b      	sbcs	r3, r3
 800138c:	425b      	negs	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001394:	f003 fa08 	bl	80047a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	0018      	movs	r0, r3
 800139e:	f003 f9ef 	bl	8004780 <_Znwj>
 80013a2:	0003      	movs	r3, r0
      }
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b004      	add	sp, #16
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 f86b 	bl	8001498 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv>
 80013c2:	0003      	movs	r3, r0
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	0018      	movs	r0, r3
 80013dc:	f003 f9cc 	bl	8004778 <_ZdlPv>
      }
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b004      	add	sp, #16
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <_ZNK9__gnu_cxx13new_allocatorIP7messageE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <_ZNK9__gnu_cxx13new_allocatorIP7messageE8max_sizeEv+0x14>)
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	1fffffff 	.word	0x1fffffff

08001414 <_ZN9__gnu_cxx13new_allocatorI7messageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	0018      	movs	r0, r3
 8001424:	f000 f856 	bl	80014d4 <_ZNK9__gnu_cxx13new_allocatorI7messageE8max_sizeEv>
 8001428:	0002      	movs	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	429a      	cmp	r2, r3
 800142e:	419b      	sbcs	r3, r3
 8001430:	425b      	negs	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <_ZN9__gnu_cxx13new_allocatorI7messageE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001438:	f003 f9b6 	bl	80047a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	0013      	movs	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	0018      	movs	r0, r3
 8001448:	f003 f99a 	bl	8004780 <_Znwj>
 800144c:	0003      	movs	r3, r0
      }
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZSt11__addressofI7messageEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}

08001468 <_ZSt8_DestroyI7messageEvPT_>:
    _Destroy(_Tp* __pointer)
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff f88e 	bl	8000594 <_ZN7messageD1Ev>
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv+0x14>)
      }
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	1fffffff 	.word	0x1fffffff

08001498 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	0018      	movs	r0, r3
 80014a8:	f000 f820 	bl	80014ec <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>
 80014ac:	0002      	movs	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	419b      	sbcs	r3, r3
 80014b4:	425b      	negs	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80014bc:	f003 f974 	bl	80047a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f003 f95b 	bl	8004780 <_Znwj>
 80014ca:	0003      	movs	r3, r0
      }
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b004      	add	sp, #16
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_ZNK9__gnu_cxx13new_allocatorI7messageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <_ZNK9__gnu_cxx13new_allocatorI7messageE8max_sizeEv+0x14>)
      }
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	04924924 	.word	0x04924924

080014ec <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv+0x14>)
      }
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	1fffffff 	.word	0x1fffffff

08001504 <_ZN8receiverD1Ev>:
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	0018      	movs	r0, r3
 8001510:	f7ff f893 	bl	800063a <_ZNSt5dequeI7messageSaIS0_EED1Ev>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZN11transmitterD1Ev>:
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3328      	adds	r3, #40	; 0x28
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff f8b7 	bl	800069e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff f881 	bl	800063a <_ZNSt5dequeI7messageSaIS0_EED1Ev>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <_Z41__static_initialization_and_destruction_0ii>:
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10b      	bne.n	800156c <_Z41__static_initialization_and_destruction_0ii+0x28>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d107      	bne.n	800156c <_Z41__static_initialization_and_destruction_0ii+0x28>
transmitter t;
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800155e:	0018      	movs	r0, r3
 8001560:	f7fe ffac 	bl	80004bc <_ZN11transmitterC1Ev>
receiver r;
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001566:	0018      	movs	r0, r3
 8001568:	f7fe ffba 	bl	80004e0 <_ZN8receiverC1Ev>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10b      	bne.n	800158a <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d107      	bne.n	800158a <_Z41__static_initialization_and_destruction_0ii+0x46>
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff ffc1 	bl	8001504 <_ZN8receiverD1Ev>
transmitter t;
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff ffca 	bl	800151e <_ZN11transmitterD1Ev>
}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	0000ffff 	.word	0x0000ffff
 8001598:	20000088 	.word	0x20000088
 800159c:	200000dc 	.word	0x200000dc

080015a0 <_GLOBAL__sub_I_t>:
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <_GLOBAL__sub_I_t+0x14>)
 80015a6:	0019      	movs	r1, r3
 80015a8:	2001      	movs	r0, #1
 80015aa:	f7ff ffcb 	bl	8001544 <_Z41__static_initialization_and_destruction_0ii>
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	0000ffff 	.word	0x0000ffff

080015b8 <_GLOBAL__sub_D_t>:
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <_GLOBAL__sub_D_t+0x14>)
 80015be:	0019      	movs	r1, r3
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff ffbf 	bl	8001544 <_Z41__static_initialization_and_destruction_0ii>
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	0000ffff 	.word	0x0000ffff

080015d0 <_ZNSt11char_traitsIcE6assignERcRKc>:
      typedef streampos         pos_type;
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b002      	add	sp, #8
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_ZN8receiver11clearBufferEv>:
#include "receiver.h"

// Get the contents of the inbound buffer
// and put it in a message in the inbound queue
void receiver::clearBuffer()
{
 80015fe:	b5b0      	push	{r4, r5, r7, lr}
 8001600:	b0b0      	sub	sp, #192	; 0xc0
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	message m(buffer.to_string());
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3328      	adds	r3, #40	; 0x28
 800160a:	001a      	movs	r2, r3
 800160c:	24a8      	movs	r4, #168	; 0xa8
 800160e:	193b      	adds	r3, r7, r4
 8001610:	0011      	movs	r1, r2
 8001612:	0018      	movs	r0, r3
 8001614:	f000 f904 	bl	8001820 <_ZNKSt6bitsetILj1000EE9to_stringB5cxx11Ev>
 8001618:	193a      	adds	r2, r7, r4
 800161a:	258c      	movs	r5, #140	; 0x8c
 800161c:	197b      	adds	r3, r7, r5
 800161e:	0011      	movs	r1, r2
 8001620:	0018      	movs	r0, r3
 8001622:	f7fe ff10 	bl	8000446 <_ZN7messageC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001626:	193b      	adds	r3, r7, r4
 8001628:	0018      	movs	r0, r3
 800162a:	f003 fa5c 	bl	8004ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	bitset<1000> b;
 800162e:	240c      	movs	r4, #12
 8001630:	193b      	adds	r3, r7, r4
 8001632:	0018      	movs	r0, r3
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	001a      	movs	r2, r3
 8001638:	2100      	movs	r1, #0
 800163a:	f003 fb83 	bl	8004d44 <memset>
	buffer = b;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	193a      	adds	r2, r7, r4
 8001642:	3328      	adds	r3, #40	; 0x28
 8001644:	0011      	movs	r1, r2
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0018      	movs	r0, r3
 800164a:	f003 fb5f 	bl	8004d0c <memcpy>
	bufferPointer = 0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	22a8      	movs	r2, #168	; 0xa8
 8001652:	2100      	movs	r1, #0
 8001654:	5299      	strh	r1, [r3, r2]
	messages.push_back(m);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	197a      	adds	r2, r7, r5
 800165a:	0011      	movs	r1, r2
 800165c:	0018      	movs	r0, r3
 800165e:	f000 f8ee 	bl	800183e <_ZNSt5dequeI7messageSaIS0_EE9push_backERKS0_>
	message m(buffer.to_string());
 8001662:	197b      	adds	r3, r7, r5
 8001664:	0018      	movs	r0, r3
 8001666:	f7fe ff95 	bl	8000594 <_ZN7messageD1Ev>
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b030      	add	sp, #192	; 0xc0
 8001670:	bdb0      	pop	{r4, r5, r7, pc}

08001672 <_ZN8receiver12checkMessageEv>:

bool receiver::checkMessage()
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	if(messages.empty())
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f000 f902 	bl	8001886 <_ZNKSt5dequeI7messageSaIS0_EE5emptyEv>
 8001682:	1e03      	subs	r3, r0, #0
 8001684:	d001      	beq.n	800168a <_ZN8receiver12checkMessageEv+0x18>
	{
		return false;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <_ZN8receiver12checkMessageEv+0x1a>
	}
	else
	{
		return true;
 800168a:	2301      	movs	r3, #1
	}
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b002      	add	sp, #8
 8001692:	bd80      	pop	{r7, pc}

08001694 <_ZN7messageC1ERKS_>:
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	0011      	movs	r1, r2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f003 fa9d 	bl	8004be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	8b1a      	ldrh	r2, [r3, #24]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	831a      	strh	r2, [r3, #24]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b002      	add	sp, #8
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZN8receiver10popMessageEv>:

message receiver::popMessage()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	message retVal = messages.front();
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 f8ee 	bl	80018aa <_ZNSt5dequeI7messageSaIS0_EE5frontEv>
 80016ce:	0002      	movs	r2, r0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff ffdd 	bl	8001694 <_ZN7messageC1ERKS_>
	messages.pop_front();
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 f8f8 	bl	80018d2 <_ZNSt5dequeI7messageSaIS0_EE9pop_frontEv>
	return retVal;
 80016e2:	46c0      	nop			; (mov r8, r8)
}
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_ZN8receiver4tickEv>:

void receiver::tick()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	static bool started = false;
	static bool isCounting = false;
	static uint16_t counter = 0;
	bool on = RECEIVE;
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <_ZN8receiver4tickEv+0x124>)
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2202      	movs	r2, #2
 80016fa:	401a      	ands	r2, r3
 80016fc:	200f      	movs	r0, #15
 80016fe:	183b      	adds	r3, r7, r0
 8001700:	1e51      	subs	r1, r2, #1
 8001702:	418a      	sbcs	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
	};

	HAL_GPIO_TogglePin(GREEN_GPIO_Port,GREEN_Pin);
	*/

	if(on)
 8001706:	183b      	adds	r3, r7, r0
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d011      	beq.n	8001732 <_ZN8receiver4tickEv+0x46>
	{
		if(isCounting)
 800170e:	4b41      	ldr	r3, [pc, #260]	; (8001814 <_ZN8receiver4tickEv+0x128>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <_ZN8receiver4tickEv+0x38>
		{
			counter++;
 8001716:	4b40      	ldr	r3, [pc, #256]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 8001720:	801a      	strh	r2, [r3, #0]
				buffer.set(bufferPointer,1);
				bufferPointer++;
			}
		}
	}
}
 8001722:	e071      	b.n	8001808 <_ZN8receiver4tickEv+0x11c>
			counter = 0;
 8001724:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
			isCounting = true;
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <_ZN8receiver4tickEv+0x128>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
}
 8001730:	e06a      	b.n	8001808 <_ZN8receiver4tickEv+0x11c>
		if(isCounting)
 8001732:	4b38      	ldr	r3, [pc, #224]	; (8001814 <_ZN8receiver4tickEv+0x128>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d100      	bne.n	800173c <_ZN8receiver4tickEv+0x50>
 800173a:	e065      	b.n	8001808 <_ZN8receiver4tickEv+0x11c>
			if((START_MIN < counter) && (counter < START_MAX))
 800173c:	4b36      	ldr	r3, [pc, #216]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	23c8      	movs	r3, #200	; 0xc8
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	429a      	cmp	r2, r3
 8001746:	d91b      	bls.n	8001780 <_ZN8receiver4tickEv+0x94>
 8001748:	4b33      	ldr	r3, [pc, #204]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	2396      	movs	r3, #150	; 0x96
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d215      	bcs.n	8001780 <_ZN8receiver4tickEv+0x94>
				isCounting = false;
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <_ZN8receiver4tickEv+0x128>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
				counter = 0;
 800175a:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 800175c:	2200      	movs	r2, #0
 800175e:	801a      	strh	r2, [r3, #0]
				if(!started)
 8001760:	4b2e      	ldr	r3, [pc, #184]	; (800181c <_ZN8receiver4tickEv+0x130>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4053      	eors	r3, r2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <_ZN8receiver4tickEv+0x8a>
					started = true;
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <_ZN8receiver4tickEv+0x130>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
				if(!started)
 8001774:	e048      	b.n	8001808 <_ZN8receiver4tickEv+0x11c>
					clearBuffer();
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff ff40 	bl	80015fe <_ZN8receiver11clearBufferEv>
				if(!started)
 800177e:	e043      	b.n	8001808 <_ZN8receiver4tickEv+0x11c>
			else if((ZERO_MIN < counter) && (counter < ZERO_MAX))
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	2b32      	cmp	r3, #50	; 0x32
 8001786:	d91c      	bls.n	80017c2 <_ZN8receiver4tickEv+0xd6>
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	2b63      	cmp	r3, #99	; 0x63
 800178e:	d818      	bhi.n	80017c2 <_ZN8receiver4tickEv+0xd6>
				isCounting = false;
 8001790:	4b20      	ldr	r3, [pc, #128]	; (8001814 <_ZN8receiver4tickEv+0x128>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
				buffer.set(bufferPointer,0);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3328      	adds	r3, #40	; 0x28
 80017a0:	0018      	movs	r0, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	22a8      	movs	r2, #168	; 0xa8
 80017a6:	5a9b      	ldrh	r3, [r3, r2]
 80017a8:	2200      	movs	r2, #0
 80017aa:	0019      	movs	r1, r3
 80017ac:	f000 f8b2 	bl	8001914 <_ZNSt6bitsetILj1000EE3setEjb>
				bufferPointer++;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	22a8      	movs	r2, #168	; 0xa8
 80017b4:	5a9b      	ldrh	r3, [r3, r2]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b299      	uxth	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	22a8      	movs	r2, #168	; 0xa8
 80017be:	5299      	strh	r1, [r3, r2]
 80017c0:	e022      	b.n	8001808 <_ZN8receiver4tickEv+0x11c>
			else if((ONE_MIN < counter) && (counter < ONE_MAX))
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	2bfa      	cmp	r3, #250	; 0xfa
 80017c8:	d91e      	bls.n	8001808 <_ZN8receiver4tickEv+0x11c>
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 80017cc:	881a      	ldrh	r2, [r3, #0]
 80017ce:	2396      	movs	r3, #150	; 0x96
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d218      	bcs.n	8001808 <_ZN8receiver4tickEv+0x11c>
				isCounting = false;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <_ZN8receiver4tickEv+0x128>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
				counter = 0;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <_ZN8receiver4tickEv+0x12c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	801a      	strh	r2, [r3, #0]
				buffer.set(bufferPointer,1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3328      	adds	r3, #40	; 0x28
 80017e6:	0018      	movs	r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	22a8      	movs	r2, #168	; 0xa8
 80017ec:	5a9b      	ldrh	r3, [r3, r2]
 80017ee:	2201      	movs	r2, #1
 80017f0:	0019      	movs	r1, r3
 80017f2:	f000 f88f 	bl	8001914 <_ZNSt6bitsetILj1000EE3setEjb>
				bufferPointer++;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	22a8      	movs	r2, #168	; 0xa8
 80017fa:	5a9b      	ldrh	r3, [r3, r2]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b299      	uxth	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	22a8      	movs	r2, #168	; 0xa8
 8001804:	5299      	strh	r1, [r3, r2]
}
 8001806:	e7ff      	b.n	8001808 <_ZN8receiver4tickEv+0x11c>
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b004      	add	sp, #16
 800180e:	bd80      	pop	{r7, pc}
 8001810:	48000400 	.word	0x48000400
 8001814:	20000189 	.word	0x20000189
 8001818:	2000018a 	.word	0x2000018a
 800181c:	20000188 	.word	0x20000188

08001820 <_ZNKSt6bitsetILj1000EE9to_stringB5cxx11Ev>:
	  return to_string<_CharT, std::char_traits<_CharT>,
	                   std::allocator<_CharT> >(__zero, __one);
	}

      std::basic_string<char, std::char_traits<char>, std::allocator<char> >
      to_string() const
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
      {
	return to_string<char, std::char_traits<char>,
	                 std::allocator<char> >();
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f000 f88b 	bl	800194c <_ZNKSt6bitsetILj1000EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>
      }
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}

0800183e <_ZNSt5dequeI7messageSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	3b1c      	subs	r3, #28
	if (this->_M_impl._M_finish._M_cur
 8001852:	429a      	cmp	r2, r3
 8001854:	d00d      	beq.n	8001872 <_ZNSt5dequeI7messageSaIS0_EE9push_backERKS0_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	0019      	movs	r1, r3
 8001860:	f000 f888 	bl	8001974 <_ZNSt16allocator_traitsISaI7messageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	331c      	adds	r3, #28
 800186a:	001a      	movs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
      }
 8001870:	e005      	b.n	800187e <_ZNSt5dequeI7messageSaIS0_EE9push_backERKS0_+0x40>
	  _M_push_back_aux(__x);
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0011      	movs	r1, r2
 8001878:	0018      	movs	r0, r3
 800187a:	f000 f88f 	bl	800199c <_ZNSt5dequeI7messageSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>
      }
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}

08001886 <_ZNKSt5dequeI7messageSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3318      	adds	r3, #24
 8001892:	001a      	movs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3308      	adds	r3, #8
 8001898:	0019      	movs	r1, r3
 800189a:	0010      	movs	r0, r2
 800189c:	f000 f8c6 	bl	8001a2c <_ZSteqI7messageRS0_PS0_EbRKSt15_Deque_iteratorIT_T0_T1_ES9_>
 80018a0:	0003      	movs	r3, r0
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b002      	add	sp, #8
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_ZNSt5dequeI7messageSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80018aa:	b590      	push	{r4, r7, lr}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	return *begin();
 80018b2:	2408      	movs	r4, #8
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	0011      	movs	r1, r2
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7fe ff62 	bl	8000784 <_ZNSt5dequeI7messageSaIS0_EE5beginEv>
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 f8c3 	bl	8001a4e <_ZNKSt15_Deque_iteratorI7messageRS0_PS0_EdeEv>
 80018c8:	0003      	movs	r3, r0
      }
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b007      	add	sp, #28
 80018d0:	bd90      	pop	{r4, r7, pc}

080018d2 <_ZNSt5dequeI7messageSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	3b1c      	subs	r3, #28
	if (this->_M_impl._M_start._M_cur
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d00d      	beq.n	8001904 <_ZNSt5dequeI7messageSaIS0_EE9pop_frontEv+0x32>
	    _Alloc_traits::destroy(this->_M_impl,
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	0019      	movs	r1, r3
 80018f0:	0010      	movs	r0, r2
 80018f2:	f000 f8b6 	bl	8001a62 <_ZNSt16allocator_traitsISaI7messageEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	331c      	adds	r3, #28
 80018fc:	001a      	movs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]
      }
 8001902:	e003      	b.n	800190c <_ZNSt5dequeI7messageSaIS0_EE9pop_frontEv+0x3a>
	  _M_pop_front_aux();
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	0018      	movs	r0, r3
 8001908:	f000 f8ba 	bl	8001a80 <_ZNSt5dequeI7messageSaIS0_EE16_M_pop_front_auxEv>
      }
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZNSt6bitsetILj1000EE3setEjb>:
      set(size_t __position, bool __val = true)
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	701a      	strb	r2, [r3, #0]
	this->_M_check(__position, __N("bitset::set"));
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <_ZNSt6bitsetILj1000EE3setEjb+0x34>)
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	0018      	movs	r0, r3
 800192a:	f000 f8d1 	bl	8001ad0 <_ZNKSt6bitsetILj1000EE8_M_checkEjPKc>
	return _Unchecked_set(__position, __val);
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 f8e2 	bl	8001b00 <_ZNSt6bitsetILj1000EE14_Unchecked_setEji>
 800193c:	0003      	movs	r3, r0
      }
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b004      	add	sp, #16
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	08004f9c 	.word	0x08004f9c

0800194c <_ZNKSt6bitsetILj1000EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>:
	to_string() const
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	  std::basic_string<_CharT, _Traits, _Alloc> __result;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0018      	movs	r0, r3
 800195a:	f003 f8bd 	bl	8004ad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	6838      	ldr	r0, [r7, #0]
 8001962:	2331      	movs	r3, #49	; 0x31
 8001964:	2230      	movs	r2, #48	; 0x30
 8001966:	f000 f8f9 	bl	8001b5c <_ZNKSt6bitsetILj1000EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>
	  return __result;
 800196a:	46c0      	nop			; (mov r8, r8)
	}
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZNSt16allocator_traitsISaI7messageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	0018      	movs	r0, r3
 8001984:	f000 f923 	bl	8001bce <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8001988:	0002      	movs	r2, r0
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	0018      	movs	r0, r3
 8001990:	f000 f926 	bl	8001be0 <_ZN9__gnu_cxx13new_allocatorI7messageE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}

0800199c <_ZNSt5dequeI7messageSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 f932 	bl	8001c12 <_ZNKSt5dequeI7messageSaIS0_EE4sizeEv>
 80019ae:	0004      	movs	r4, r0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 f93f 	bl	8001c36 <_ZNKSt5dequeI7messageSaIS0_EE8max_sizeEv>
 80019b8:	0003      	movs	r3, r0
 80019ba:	1ae3      	subs	r3, r4, r3
 80019bc:	425a      	negs	r2, r3
 80019be:	4153      	adcs	r3, r2
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <_ZNSt5dequeI7messageSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x32>
	  __throw_length_error(
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <_ZNSt5dequeI7messageSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x8c>)
 80019c8:	0018      	movs	r0, r3
 80019ca:	f002 fef3 	bl	80047b4 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2101      	movs	r1, #1
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 f940 	bl	8001c58 <_ZNSt5dequeI7messageSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	1d1c      	adds	r4, r3, #4
 80019e0:	0010      	movs	r0, r2
 80019e2:	f7ff fb8d 	bl	8001100 <_ZNSt11_Deque_baseI7messageSaIS0_EE16_M_allocate_nodeEv>
 80019e6:	0003      	movs	r3, r0
 80019e8:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80019ea:	687c      	ldr	r4, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699d      	ldr	r5, [r3, #24]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 f8eb 	bl	8001bce <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 80019f8:	0003      	movs	r3, r0
 80019fa:	001a      	movs	r2, r3
 80019fc:	0029      	movs	r1, r5
 80019fe:	0020      	movs	r0, r4
 8001a00:	f7ff ffb8 	bl	8001974 <_ZNSt16allocator_traitsISaI7messageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3318      	adds	r3, #24
 8001a08:	001a      	movs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	3304      	adds	r3, #4
 8001a10:	0019      	movs	r1, r3
 8001a12:	0010      	movs	r0, r2
 8001a14:	f7ff fa24 	bl	8000e60 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
      }
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	08004fa8 	.word	0x08004fa8

08001a2c <_ZSteqI7messageRS0_PS0_EbRKSt15_Deque_iteratorIT_T0_T1_ES9_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	425a      	negs	r2, r3
 8001a42:	4153      	adcs	r3, r2
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	0018      	movs	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b002      	add	sp, #8
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_ZNKSt15_Deque_iteratorI7messageRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_ZNSt16allocator_traitsISaI7messageEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	0011      	movs	r1, r2
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 f90c 	bl	8001c90 <_ZN9__gnu_cxx13new_allocatorI7messageE7destroyIS1_EEvPT_>
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZNSt5dequeI7messageSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7fe fe9c 	bl	80007c8 <_ZNSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>
 8001a90:	0002      	movs	r2, r0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0019      	movs	r1, r3
 8001a98:	0010      	movs	r0, r2
 8001a9a:	f7ff ffe2 	bl	8001a62 <_ZNSt16allocator_traitsISaI7messageEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	f7ff f9f6 	bl	8000e98 <_ZNSt11_Deque_baseI7messageSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3308      	adds	r3, #8
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	0019      	movs	r1, r3
 8001aba:	0010      	movs	r0, r2
 8001abc:	f7ff f9d0 	bl	8000e60 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
    }
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZNKSt6bitsetILj1000EE8_M_checkEjPKc>:
      void _M_check(size_t __position, const char *__s) const
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	if (__position >= _Nb)
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	23fa      	movs	r3, #250	; 0xfa
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d306      	bcc.n	8001af4 <_ZNKSt6bitsetILj1000EE8_M_checkEjPKc+0x24>
	  __throw_out_of_range_fmt(__N("%s: __position (which is %zu) "
 8001ae6:	23fa      	movs	r3, #250	; 0xfa
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4803      	ldr	r0, [pc, #12]	; (8001afc <_ZNKSt6bitsetILj1000EE8_M_checkEjPKc+0x2c>)
 8001af0:	f002 fe64 	bl	80047bc <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b004      	add	sp, #16
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	08004fd8 	.word	0x08004fd8

08001b00 <_ZNSt6bitsetILj1000EE14_Unchecked_setEji>:
      _Unchecked_set(size_t __pos, int __val) _GLIBCXX_NOEXCEPT
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
	if (__val)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00f      	beq.n	8001b32 <_ZNSt6bitsetILj1000EE14_Unchecked_setEji+0x32>
	  this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 f8ee 	bl	8001cf6 <_ZNSt12_Base_bitsetILj32EE10_S_maskbitEj>
 8001b1a:	0004      	movs	r4, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	0011      	movs	r1, r2
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 f8cb 	bl	8001cbe <_ZNSt12_Base_bitsetILj32EE10_M_getwordEj>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4322      	orrs	r2, r4
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e00f      	b.n	8001b52 <_ZNSt6bitsetILj1000EE14_Unchecked_setEji+0x52>
	  this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 f8de 	bl	8001cf6 <_ZNSt12_Base_bitsetILj32EE10_S_maskbitEj>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	43dc      	mvns	r4, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	0011      	movs	r1, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f000 f8ba 	bl	8001cbe <_ZNSt12_Base_bitsetILj32EE10_M_getwordEj>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4022      	ands	r2, r4
 8001b50:	601a      	str	r2, [r3, #0]
	return *this;
 8001b52:	68fb      	ldr	r3, [r7, #12]
      }
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b005      	add	sp, #20
 8001b5a:	bd90      	pop	{r4, r7, pc}

08001b5c <_ZNKSt6bitsetILj1000EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>:
      }

  template<size_t _Nb>
    template<class _CharT, class _Traits, class _Alloc>
      void
      bitset<_Nb>::
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	0019      	movs	r1, r3
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	1dbb      	adds	r3, r7, #6
 8001b6e:	1c0a      	adds	r2, r1, #0
 8001b70:	701a      	strb	r2, [r3, #0]
      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,
			_CharT __zero, _CharT __one) const
      {
	__s.assign(_Nb, __zero);
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	23fa      	movs	r3, #250	; 0xfa
 8001b78:	0099      	lsls	r1, r3, #2
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f003 f805 	bl	8004b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8001b82:	23fa      	movs	r3, #250	; 0xfa
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01b      	beq.n	8001bc6 <_ZNKSt6bitsetILj1000EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x6a>
	  if (_Unchecked_test(__i - 1))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0011      	movs	r1, r2
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f8ce 	bl	8001d38 <_ZNKSt6bitsetILj1000EE15_Unchecked_testEj>
 8001b9c:	1e03      	subs	r3, r0, #0
 8001b9e:	d00e      	beq.n	8001bbe <_ZNKSt6bitsetILj1000EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x62>
	    _Traits::assign(__s[_Nb - __i], __one);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	22fa      	movs	r2, #250	; 0xfa
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	1ad2      	subs	r2, r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	0011      	movs	r1, r2
 8001bac:	0018      	movs	r0, r3
 8001bae:	f002 ffa8 	bl	8004b02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	1dbb      	adds	r3, r7, #6
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	0010      	movs	r0, r2
 8001bba:	f7ff fd09 	bl	80015d0 <_ZNSt11char_traitsIcE6assignERcRKc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e7e0      	b.n	8001b88 <_ZNKSt6bitsetILj1000EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x2c>
      }
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b006      	add	sp, #24
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_ZN9__gnu_cxx13new_allocatorI7messageE9constructIS1_JRKS1_EEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f7ff ffed 	bl	8001bce <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8001bf4:	0004      	movs	r4, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	201c      	movs	r0, #28
 8001bfc:	f7ff fcf5 	bl	80015ea <_ZnwjPv>
 8001c00:	0003      	movs	r3, r0
 8001c02:	0021      	movs	r1, r4
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7ff fd45 	bl	8001694 <_ZN7messageC1ERKS_>
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b005      	add	sp, #20
 8001c10:	bd90      	pop	{r4, r7, pc}

08001c12 <_ZNKSt5dequeI7messageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3318      	adds	r3, #24
 8001c1e:	001a      	movs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3308      	adds	r3, #8
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f000 f89f 	bl	8001d6a <_ZStmiI7messageRS0_PS0_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS7_SA_>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b002      	add	sp, #8
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_ZNKSt5dequeI7messageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff fa88 	bl	8001156 <_ZNKSt11_Deque_baseI7messageSaIS0_EE19_M_get_Tp_allocatorEv>
 8001c46:	0003      	movs	r3, r0
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 f8c9 	bl	8001de0 <_ZNSt5dequeI7messageSaIS0_EE11_S_max_sizeERKS1_>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_ZNSt5dequeI7messageSaIS0_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6859      	ldr	r1, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	1ac3      	subs	r3, r0, r3
 8001c74:	109b      	asrs	r3, r3, #2
 8001c76:	1acb      	subs	r3, r1, r3
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d905      	bls.n	8001c88 <_ZNSt5dequeI7messageSaIS0_EE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 8001c7c:	6839      	ldr	r1, [r7, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 f8c8 	bl	8001e18 <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb>
      }
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZN9__gnu_cxx13new_allocatorI7messageE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7fe fc79 	bl	8000594 <_ZN7messageD1Ev>
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZNSt12_Base_bitsetILj32EE12_S_whichwordEj>:
      _S_whichword(size_t __pos) _GLIBCXX_NOEXCEPT
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
      { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_ZNSt12_Base_bitsetILj32EE10_M_getwordEj>:
      _M_getword(size_t __pos) _GLIBCXX_NOEXCEPT
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
      { return _M_w[_S_whichword(__pos)]; }
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff ffed 	bl	8001caa <_ZNSt12_Base_bitsetILj32EE12_S_whichwordEj>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	18d3      	adds	r3, r2, r3
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZNSt12_Base_bitsetILj32EE11_S_whichbitEj>:
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
      { return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	221f      	movs	r2, #31
 8001cec:	4013      	ands	r3, r2
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_ZNSt12_Base_bitsetILj32EE10_S_maskbitEj>:
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff ffed 	bl	8001ce0 <_ZNSt12_Base_bitsetILj32EE11_S_whichbitEj>
 8001d06:	0003      	movs	r3, r0
 8001d08:	2201      	movs	r2, #1
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	0013      	movs	r3, r2
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b002      	add	sp, #8
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_ZNKSt12_Base_bitsetILj32EE10_M_getwordEj>:
      _M_getword(size_t __pos) const _GLIBCXX_NOEXCEPT
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
      { return _M_w[_S_whichword(__pos)]; }
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff ffc1 	bl	8001caa <_ZNSt12_Base_bitsetILj32EE12_S_whichwordEj>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	58d3      	ldr	r3, [r2, r3]
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZNKSt6bitsetILj1000EE15_Unchecked_testEj>:
      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	0011      	movs	r1, r2
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff ffe4 	bl	8001d16 <_ZNKSt12_Base_bitsetILj32EE10_M_getwordEj>
 8001d4e:	0004      	movs	r4, r0
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff ffcf 	bl	8001cf6 <_ZNSt12_Base_bitsetILj32EE10_S_maskbitEj>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	4023      	ands	r3, r4
		!= static_cast<_WordT>(0)); }
 8001d5c:	1e5a      	subs	r2, r3, #1
 8001d5e:	4193      	sbcs	r3, r2
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b003      	add	sp, #12
 8001d68:	bd90      	pop	{r4, r7, pc}

08001d6a <_ZStmiI7messageRS0_PS0_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS7_SA_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8001d74:	f7ff f9d6 	bl	8001124 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E14_S_buffer_sizeEv>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	0019      	movs	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	109b      	asrs	r3, r3, #2
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	4359      	muls	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	109a      	asrs	r2, r3, #2
 8001d98:	0013      	movs	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	189b      	adds	r3, r3, r2
 8001d9e:	0198      	lsls	r0, r3, #6
 8001da0:	181b      	adds	r3, r3, r0
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	189b      	adds	r3, r3, r2
 8001da6:	03d8      	lsls	r0, r3, #15
 8001da8:	181b      	adds	r3, r3, r0
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	189b      	adds	r3, r3, r2
 8001dae:	425b      	negs	r3, r3
 8001db0:	18c9      	adds	r1, r1, r3
	+ (__y._M_last - __y._M_cur);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	109a      	asrs	r2, r3, #2
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	189b      	adds	r3, r3, r2
 8001dc4:	0198      	lsls	r0, r3, #6
 8001dc6:	181b      	adds	r3, r3, r0
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	189b      	adds	r3, r3, r2
 8001dcc:	03d8      	lsls	r0, r3, #15
 8001dce:	181b      	adds	r3, r3, r0
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	189b      	adds	r3, r3, r2
 8001dd4:	425b      	negs	r3, r3
 8001dd6:	18cb      	adds	r3, r1, r3
    }
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZNSt5dequeI7messageSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <_ZNSt5dequeI7messageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8001dea:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f8b4 	bl	8001f5c <_ZNSt16allocator_traitsISaI7messageEE8max_sizeERKS1_>
 8001df4:	0003      	movs	r3, r0
 8001df6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001df8:	2308      	movs	r3, #8
 8001dfa:	18fa      	adds	r2, r7, r3
 8001dfc:	230c      	movs	r3, #12
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	0011      	movs	r1, r2
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 f8b7 	bl	8001f76 <_ZSt3minIjERKT_S2_S2_>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	681b      	ldr	r3, [r3, #0]
      }
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b004      	add	sp, #16
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	7fffffff 	.word	0x7fffffff

08001e18 <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b08b      	sub	sp, #44	; 0x2c
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	701a      	strb	r2, [r3, #0]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	109b      	asrs	r3, r3, #2
 8001e32:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8001e34:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	6a3a      	ldr	r2, [r7, #32]
 8001e3a:	18d3      	adds	r3, r2, r3
 8001e3c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d92e      	bls.n	8001ea8 <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb+0x90>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	1acb      	subs	r3, r1, r3
 8001e56:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001e58:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	e000      	b.n	8001e6a <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb+0x52>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	185b      	adds	r3, r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001e6c:	18d3      	adds	r3, r2, r3
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d209      	bcs.n	8001e8e <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8001e82:	3304      	adds	r3, #4
 8001e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e86:	0019      	movs	r1, r3
 8001e88:	f000 f887 	bl	8001f9a <_ZSt4copyIPP7messageS2_ET0_T_S4_S3_>
 8001e8c:	e04b      	b.n	8001f26 <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb+0x10e>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001e96:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9e:	18d3      	adds	r3, r2, r3
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	f000 f894 	bl	8001fce <_ZSt13copy_backwardIPP7messageS2_ET0_T_S4_S3_>
 8001ea6:	e03e      	b.n	8001f26 <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb+0x10e>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	18ba      	adds	r2, r7, r2
 8001eb4:	0011      	movs	r1, r2
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7fe ff88 	bl	8000dcc <_ZSt3maxIjERKT_S2_S2_>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	18e3      	adds	r3, r4, r3
	  size_type __new_map_size = this->_M_impl._M_map_size
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	0011      	movs	r1, r2
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7fe ff8f 	bl	8000df0 <_ZNSt11_Deque_baseI7messageSaIS0_EE15_M_allocate_mapEj>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	617b      	str	r3, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb+0xd6>
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	e000      	b.n	8001ef0 <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb+0xd8>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	189b      	adds	r3, r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	18d3      	adds	r3, r2, r3
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8001f00:	3304      	adds	r3, #4
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	0019      	movs	r1, r3
 8001f06:	f000 f848 	bl	8001f9a <_ZSt4copyIPP7messageS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	001a      	movs	r2, r3
 8001f16:	f7fe fded 	bl	8000af4 <_ZNSt11_Deque_baseI7messageSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3308      	adds	r3, #8
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7fe ff96 	bl	8000e60 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3318      	adds	r3, #24
 8001f38:	0018      	movs	r0, r3
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <_ZNSt5dequeI7messageSaIS0_EE17_M_reallocate_mapEjb+0x140>)
 8001f3e:	4694      	mov	ip, r2
 8001f40:	4463      	add	r3, ip
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	18d3      	adds	r3, r2, r3
 8001f48:	0019      	movs	r1, r3
 8001f4a:	f7fe ff89 	bl	8000e60 <_ZNSt15_Deque_iteratorI7messageRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b00b      	add	sp, #44	; 0x2c
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	3fffffff 	.word	0x3fffffff

08001f5c <_ZNSt16allocator_traitsISaI7messageEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7ff fab4 	bl	80014d4 <_ZNK9__gnu_cxx13new_allocatorI7messageE8max_sizeEv>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	0018      	movs	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d201      	bcs.n	8001f90 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	e000      	b.n	8001f92 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001f90:	687b      	ldr	r3, [r7, #4]
    }
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_ZSt4copyIPP7messageS2_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001f9a:	b590      	push	{r4, r7, lr}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 f82a 	bl	8002002 <_ZSt12__miter_baseIPP7messageET_S3_>
 8001fae:	0004      	movs	r4, r0
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f825 	bl	8002002 <_ZSt12__miter_baseIPP7messageET_S3_>
 8001fb8:	0001      	movs	r1, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	0020      	movs	r0, r4
 8001fc0:	f000 f828 	bl	8002014 <_ZSt14__copy_move_a2ILb0EPP7messageS2_ET1_T0_S4_S3_>
 8001fc4:	0003      	movs	r3, r0
    }
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b005      	add	sp, #20
 8001fcc:	bd90      	pop	{r4, r7, pc}

08001fce <_ZSt13copy_backwardIPP7messageS2_ET0_T_S4_S3_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001fce:	b590      	push	{r4, r7, lr}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 f810 	bl	8002002 <_ZSt12__miter_baseIPP7messageET_S3_>
 8001fe2:	0004      	movs	r4, r0
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 f80b 	bl	8002002 <_ZSt12__miter_baseIPP7messageET_S3_>
 8001fec:	0001      	movs	r1, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	0020      	movs	r0, r4
 8001ff4:	f000 f833 	bl	800205e <_ZSt23__copy_move_backward_a2ILb0EPP7messageS2_ET1_T0_S4_S3_>
 8001ff8:	0003      	movs	r3, r0
    }
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b005      	add	sp, #20
 8002000:	bd90      	pop	{r4, r7, pc}

08002002 <_ZSt12__miter_baseIPP7messageET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
    { return __it; }
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZSt14__copy_move_a2ILb0EPP7messageS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002014:	b5b0      	push	{r4, r5, r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	0018      	movs	r0, r3
 8002024:	f000 f840 	bl	80020a8 <_ZSt12__niter_baseIPP7messageET_S3_>
 8002028:	0004      	movs	r4, r0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	0018      	movs	r0, r3
 800202e:	f000 f83b 	bl	80020a8 <_ZSt12__niter_baseIPP7messageET_S3_>
 8002032:	0005      	movs	r5, r0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f000 f836 	bl	80020a8 <_ZSt12__niter_baseIPP7messageET_S3_>
 800203c:	0003      	movs	r3, r0
 800203e:	001a      	movs	r2, r3
 8002040:	0029      	movs	r1, r5
 8002042:	0020      	movs	r0, r4
 8002044:	f000 f839 	bl	80020ba <_ZSt13__copy_move_aILb0EPP7messageS2_ET1_T0_S4_S3_>
 8002048:	0002      	movs	r2, r0
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	0011      	movs	r1, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f848 	bl	80020e4 <_ZSt12__niter_wrapIPP7messageET_RKS3_S3_>
 8002054:	0003      	movs	r3, r0
    }
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bdb0      	pop	{r4, r5, r7, pc}

0800205e <_ZSt23__copy_move_backward_a2ILb0EPP7messageS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800205e:	b5b0      	push	{r4, r5, r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	0018      	movs	r0, r3
 800206e:	f000 f81b 	bl	80020a8 <_ZSt12__niter_baseIPP7messageET_S3_>
 8002072:	0004      	movs	r4, r0
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f816 	bl	80020a8 <_ZSt12__niter_baseIPP7messageET_S3_>
 800207c:	0005      	movs	r5, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f811 	bl	80020a8 <_ZSt12__niter_baseIPP7messageET_S3_>
 8002086:	0003      	movs	r3, r0
 8002088:	001a      	movs	r2, r3
 800208a:	0029      	movs	r1, r5
 800208c:	0020      	movs	r0, r4
 800208e:	f000 f833 	bl	80020f8 <_ZSt22__copy_move_backward_aILb0EPP7messageS2_ET1_T0_S4_S3_>
 8002092:	0002      	movs	r2, r0
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f000 f823 	bl	80020e4 <_ZSt12__niter_wrapIPP7messageET_RKS3_S3_>
 800209e:	0003      	movs	r3, r0
    }
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bdb0      	pop	{r4, r5, r7, pc}

080020a8 <_ZSt12__niter_baseIPP7messageET_S3_>:
    __niter_base(_Iterator __it)
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    { return __it; }
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b002      	add	sp, #8
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_ZSt13__copy_move_aILb0EPP7messageS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80020c6:	2317      	movs	r3, #23
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
			      _Category>::__copy_m(__first, __last, __result);
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 f824 	bl	8002122 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7messageEEPT_PKS5_S8_S6_>
 80020da:	0003      	movs	r3, r0
    }
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_ZSt12__niter_wrapIPP7messageET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
    { return __res; }
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_ZSt22__copy_move_backward_aILb0EPP7messageS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 8002104:	2317      	movs	r3, #23
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
				       _Category>::__copy_move_b(__first,
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0018      	movs	r0, r3
 8002114:	f000 f822 	bl	800215c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7messageEEPT_PKS5_S8_S6_>
 8002118:	0003      	movs	r3, r0
    }
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b006      	add	sp, #24
 8002120:	bd80      	pop	{r7, pc}

08002122 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7messageEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	109b      	asrs	r3, r3, #2
 8002136:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d006      	beq.n	800214c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7messageEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	009a      	lsls	r2, r3, #2
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f002 fde9 	bl	8004d1e <memmove>
	  return __result + _Num;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	18d3      	adds	r3, r2, r3
	}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b006      	add	sp, #24
 800215a:	bd80      	pop	{r7, pc}

0800215c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7messageEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	109b      	asrs	r3, r3, #2
 8002170:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7messageEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	425b      	negs	r3, r3
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	18d0      	adds	r0, r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	009a      	lsls	r2, r3, #2
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	0019      	movs	r1, r3
 800218a:	f002 fdc8 	bl	8004d1e <memmove>
	  return __result - _Num;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	425b      	negs	r3, r3
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	18d3      	adds	r3, r2, r3
	}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b006      	add	sp, #24
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_MspInit+0x44>)
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_MspInit+0x44>)
 80021ac:	2101      	movs	r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	619a      	str	r2, [r3, #24]
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_MspInit+0x44>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_MspInit+0x44>)
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_MspInit+0x44>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0549      	lsls	r1, r1, #21
 80021c8:	430a      	orrs	r2, r1
 80021ca:	61da      	str	r2, [r3, #28]
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_MspInit+0x44>)
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	4013      	ands	r3, r2
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	40021000 	.word	0x40021000

080021e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	0019      	movs	r1, r3
 80021fe:	2010      	movs	r0, #16
 8002200:	f001 f85c 	bl	80032bc <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002204:	2010      	movs	r0, #16
 8002206:	f001 f86e 	bl	80032e6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_InitTick+0xa4>)
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_InitTick+0xa4>)
 8002210:	2102      	movs	r1, #2
 8002212:	430a      	orrs	r2, r1
 8002214:	61da      	str	r2, [r3, #28]
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_InitTick+0xa4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002222:	230c      	movs	r3, #12
 8002224:	18fa      	adds	r2, r7, r3
 8002226:	2310      	movs	r3, #16
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	0011      	movs	r1, r2
 800222c:	0018      	movs	r0, r3
 800222e:	f001 fe65 	bl	8003efc <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002232:	f001 fe4d 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 8002236:	0003      	movs	r3, r0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	4914      	ldr	r1, [pc, #80]	; (8002290 <HAL_InitTick+0xa8>)
 800223e:	0018      	movs	r0, r3
 8002240:	f7fd ff6a 	bl	8000118 <__udivsi3>
 8002244:	0003      	movs	r3, r0
 8002246:	3b01      	subs	r3, #1
 8002248:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_InitTick+0xac>)
 800224c:	4a12      	ldr	r2, [pc, #72]	; (8002298 <HAL_InitTick+0xb0>)
 800224e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_InitTick+0xac>)
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <HAL_InitTick+0xb4>)
 8002254:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_InitTick+0xac>)
 8002258:	6a3a      	ldr	r2, [r7, #32]
 800225a:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_InitTick+0xac>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_InitTick+0xac>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_InitTick+0xac>)
 800226a:	0018      	movs	r0, r3
 800226c:	f001 fe70 	bl	8003f50 <HAL_TIM_Base_Init>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d105      	bne.n	8002280 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <HAL_InitTick+0xac>)
 8002276:	0018      	movs	r0, r3
 8002278:	f001 feba 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
 800227c:	0003      	movs	r3, r0
 800227e:	e000      	b.n	8002282 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b00a      	add	sp, #40	; 0x28
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	40021000 	.word	0x40021000
 8002290:	000f4240 	.word	0x000f4240
 8002294:	200001a0 	.word	0x200001a0
 8002298:	40000400 	.word	0x40000400
 800229c:	000003e7 	.word	0x000003e7

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <TIM3_IRQHandler+0x14>)
 80022d2:	0018      	movs	r0, r3
 80022d4:	f001 fed8 	bl	8004088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	200001a0 	.word	0x200001a0

080022e4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <TIM15_IRQHandler+0x18>)
 80022ea:	0018      	movs	r0, r3
 80022ec:	f001 fecc 	bl	8004088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  radioSendTick();
 80022f0:	f7fe f938 	bl	8000564 <radioSendTick>

  /* USER CODE END TIM15_IRQn 1 */
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	200001e8 	.word	0x200001e8

08002300 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <TIM16_IRQHandler+0x18>)
 8002306:	0018      	movs	r0, r3
 8002308:	f001 febe 	bl	8004088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  radioReceiveTick();
 800230c:	f7fe f936 	bl	800057c <radioReceiveTick>

  /* USER CODE END TIM16_IRQn 1 */
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	20000230 	.word	0x20000230

0800231c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	return 1;
 8002320:	2301      	movs	r3, #1
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_kill>:

int _kill(int pid, int sig)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002332:	f002 fcad 	bl	8004c90 <__errno>
 8002336:	0003      	movs	r3, r0
 8002338:	2216      	movs	r2, #22
 800233a:	601a      	str	r2, [r3, #0]
	return -1;
 800233c:	2301      	movs	r3, #1
 800233e:	425b      	negs	r3, r3
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <_exit>:

void _exit (int status)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002350:	2301      	movs	r3, #1
 8002352:	425a      	negs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0011      	movs	r1, r2
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff ffe5 	bl	8002328 <_kill>
	while (1) {}		/* Make sure we hang here */
 800235e:	e7fe      	b.n	800235e <_exit+0x16>

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <_sbrk+0x5c>)
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <_sbrk+0x60>)
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <_sbrk+0x64>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <_sbrk+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	18d3      	adds	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002390:	f002 fc7e 	bl	8004c90 <__errno>
 8002394:	0003      	movs	r3, r0
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	2301      	movs	r3, #1
 800239c:	425b      	negs	r3, r3
 800239e:	e009      	b.n	80023b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	18d2      	adds	r2, r2, r3
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <_sbrk+0x64>)
 80023b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b006      	add	sp, #24
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20002000 	.word	0x20002000
 80023c0:	00000400 	.word	0x00000400
 80023c4:	2000018c 	.word	0x2000018c
 80023c8:	20000290 	.word	0x20000290

080023cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <MX_TIM15_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023de:	2308      	movs	r3, #8
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	0018      	movs	r0, r3
 80023e4:	2310      	movs	r3, #16
 80023e6:	001a      	movs	r2, r3
 80023e8:	2100      	movs	r1, #0
 80023ea:	f002 fcab 	bl	8004d44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ee:	003b      	movs	r3, r7
 80023f0:	0018      	movs	r0, r3
 80023f2:	2308      	movs	r3, #8
 80023f4:	001a      	movs	r2, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	f002 fca4 	bl	8004d44 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <MX_TIM15_Init+0xa8>)
 80023fe:	4a21      	ldr	r2, [pc, #132]	; (8002484 <MX_TIM15_Init+0xac>)
 8002400:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 480;
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <MX_TIM15_Init+0xa8>)
 8002404:	22f0      	movs	r2, #240	; 0xf0
 8002406:	0052      	lsls	r2, r2, #1
 8002408:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <MX_TIM15_Init+0xa8>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <MX_TIM15_Init+0xa8>)
 8002412:	2263      	movs	r2, #99	; 0x63
 8002414:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_TIM15_Init+0xa8>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_TIM15_Init+0xa8>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_TIM15_Init+0xa8>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_TIM15_Init+0xa8>)
 800242a:	0018      	movs	r0, r3
 800242c:	f001 fd90 	bl	8003f50 <HAL_TIM_Base_Init>
 8002430:	1e03      	subs	r3, r0, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM15_Init+0x60>
  {
    Error_Handler();
 8002434:	f7fe f802 	bl	800043c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002438:	2108      	movs	r1, #8
 800243a:	187b      	adds	r3, r7, r1
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	0152      	lsls	r2, r2, #5
 8002440:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002442:	187a      	adds	r2, r7, r1
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_TIM15_Init+0xa8>)
 8002446:	0011      	movs	r1, r2
 8002448:	0018      	movs	r0, r3
 800244a:	f001 ff33 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8002452:	f7fd fff3 	bl	800043c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002456:	003b      	movs	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245c:	003b      	movs	r3, r7
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002462:	003a      	movs	r2, r7
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_TIM15_Init+0xa8>)
 8002466:	0011      	movs	r1, r2
 8002468:	0018      	movs	r0, r3
 800246a:	f002 f91d 	bl	80046a8 <HAL_TIMEx_MasterConfigSynchronization>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8002472:	f7fd ffe3 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b006      	add	sp, #24
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	200001e8 	.word	0x200001e8
 8002484:	40014000 	.word	0x40014000

08002488 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_TIM16_Init+0x44>)
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <MX_TIM16_Init+0x48>)
 8002490:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_TIM16_Init+0x44>)
 8002494:	2230      	movs	r2, #48	; 0x30
 8002496:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_TIM16_Init+0x44>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_TIM16_Init+0x44>)
 80024a0:	2209      	movs	r2, #9
 80024a2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_TIM16_Init+0x44>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_TIM16_Init+0x44>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_TIM16_Init+0x44>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <MX_TIM16_Init+0x44>)
 80024b8:	0018      	movs	r0, r3
 80024ba:	f001 fd49 	bl	8003f50 <HAL_TIM_Base_Init>
 80024be:	1e03      	subs	r3, r0, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80024c2:	f7fd ffbb 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000230 	.word	0x20000230
 80024d0:	40014400 	.word	0x40014400

080024d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_TIM_Base_MspInit+0x80>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d116      	bne.n	8002514 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_TIM_Base_MspInit+0x84>)
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_TIM_Base_MspInit+0x84>)
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	0249      	lsls	r1, r1, #9
 80024f0:	430a      	orrs	r2, r1
 80024f2:	619a      	str	r2, [r3, #24]
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_TIM_Base_MspInit+0x84>)
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	025b      	lsls	r3, r3, #9
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 2, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2102      	movs	r1, #2
 8002506:	2014      	movs	r0, #20
 8002508:	f000 fed8 	bl	80032bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800250c:	2014      	movs	r0, #20
 800250e:	f000 feea 	bl	80032e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002512:	e01a      	b.n	800254a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM16)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a10      	ldr	r2, [pc, #64]	; (800255c <HAL_TIM_Base_MspInit+0x88>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d115      	bne.n	800254a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_TIM_Base_MspInit+0x84>)
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_TIM_Base_MspInit+0x84>)
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	0289      	lsls	r1, r1, #10
 8002528:	430a      	orrs	r2, r1
 800252a:	619a      	str	r2, [r3, #24]
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_TIM_Base_MspInit+0x84>)
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	029b      	lsls	r3, r3, #10
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2015      	movs	r0, #21
 8002540:	f000 febc 	bl	80032bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002544:	2015      	movs	r0, #21
 8002546:	f000 fece 	bl	80032e6 <HAL_NVIC_EnableIRQ>
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40014000 	.word	0x40014000
 8002558:	40021000 	.word	0x40021000
 800255c:	40014400 	.word	0x40014400

08002560 <_ZNSt12_Base_bitsetILj1EEC1Ey>:
      constexpr _Base_bitset(unsigned long long __val) noexcept
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	603a      	str	r2, [r7, #0]
 800256a:	607b      	str	r3, [r7, #4]
      : _M_w(__val)
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	601a      	str	r2, [r3, #0]
      { }
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b004      	add	sp, #16
 800257a:	bd80      	pop	{r7, pc}

0800257c <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>:
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	221f      	movs	r2, #31
 8002588:	4013      	ands	r3, r2
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b002      	add	sp, #8
 8002590:	bd80      	pop	{r7, pc}

08002592 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>:
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff ffed 	bl	800257c <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 80025a2:	0003      	movs	r3, r0
 80025a4:	2201      	movs	r2, #1
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>:
      _M_getword(size_t) _GLIBCXX_NOEXCEPT
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_ZN11transmitter10fillBufferEv>:
#include "transmitter.h"

// Pop the next message from the outbound queue
// and add it to the outbound buffer
void transmitter::fillBuffer()
{
 80025c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c8:	b093      	sub	sp, #76	; 0x4c
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
	message m = messages.front();
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff f96a 	bl	80018aa <_ZNSt5dequeI7messageSaIS0_EE5frontEv>
 80025d6:	0002      	movs	r2, r0
 80025d8:	2628      	movs	r6, #40	; 0x28
 80025da:	19bb      	adds	r3, r7, r6
 80025dc:	0011      	movs	r1, r2
 80025de:	0018      	movs	r0, r3
 80025e0:	f7ff f858 	bl	8001694 <_ZN7messageC1ERKS_>
	messages.pop_front();
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff f973 	bl	80018d2 <_ZNSt5dequeI7messageSaIS0_EE9pop_frontEv>

	string s = m.getMessageString();
 80025ec:	2310      	movs	r3, #16
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	19ba      	adds	r2, r7, r6
 80025f2:	0011      	movs	r1, r2
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7fd ff3d 	bl	8000474 <_ZN7message16getMessageStringB5cxx11Ev>

	for(uint8_t i = 0; i < s.length(); i++)
 80025fa:	2347      	movs	r3, #71	; 0x47
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	2647      	movs	r6, #71	; 0x47
 8002604:	19bb      	adds	r3, r7, r6
 8002606:	781e      	ldrb	r6, [r3, #0]
 8002608:	2310      	movs	r3, #16
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	0018      	movs	r0, r3
 800260e:	f002 fa76 	bl	8004afe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002612:	0003      	movs	r3, r0
 8002614:	429e      	cmp	r6, r3
 8002616:	419b      	sbcs	r3, r3
 8002618:	425b      	negs	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d022      	beq.n	8002666 <_ZN11transmitter10fillBufferEv+0xa0>
	{
		bitset<8> c = s[i];
 8002620:	2647      	movs	r6, #71	; 0x47
 8002622:	19bb      	adds	r3, r7, r6
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	2310      	movs	r3, #16
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	0011      	movs	r1, r2
 800262c:	0018      	movs	r0, r3
 800262e:	f002 fa68 	bl	8004b02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002632:	0003      	movs	r3, r0
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	001c      	movs	r4, r3
 8002638:	2300      	movs	r3, #0
 800263a:	001d      	movs	r5, r3
 800263c:	230c      	movs	r3, #12
 800263e:	18f9      	adds	r1, r7, r3
 8002640:	0022      	movs	r2, r4
 8002642:	002b      	movs	r3, r5
 8002644:	0008      	movs	r0, r1
 8002646:	f000 f94f 	bl	80028e8 <_ZNSt6bitsetILj8EEC1Ey>
		buffer.push_back(c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3328      	adds	r3, #40	; 0x28
 800264e:	220c      	movs	r2, #12
 8002650:	18ba      	adds	r2, r7, r2
 8002652:	0011      	movs	r1, r2
 8002654:	0018      	movs	r0, r3
 8002656:	f000 f95e 	bl	8002916 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
	for(uint8_t i = 0; i < s.length(); i++)
 800265a:	19bb      	adds	r3, r7, r6
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	19bb      	adds	r3, r7, r6
 8002660:	3201      	adds	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e7cd      	b.n	8002602 <_ZN11transmitter10fillBufferEv+0x3c>
	}
	bufferPointer = 0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2250      	movs	r2, #80	; 0x50
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]
	string s = m.getMessageString();
 800266e:	2310      	movs	r3, #16
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	0018      	movs	r0, r3
 8002674:	f002 fa37 	bl	8004ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	message m = messages.front();
 8002678:	2328      	movs	r3, #40	; 0x28
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	0018      	movs	r0, r3
 800267e:	f7fd ff89 	bl	8000594 <_ZN7messageD1Ev>
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b013      	add	sp, #76	; 0x4c
 8002688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800268a <_ZN11transmitter10getNextBitEv>:

uint8_t transmitter::getNextBit()
{
 800268a:	b5b0      	push	{r4, r5, r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
	if(buffer.empty())
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3328      	adds	r3, #40	; 0x28
 8002696:	0018      	movs	r0, r3
 8002698:	f000 f960 	bl	800295c <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <_ZN11transmitter10getNextBitEv+0x1a>
	{
		return NO_NEW_BITS;
 80026a0:	2302      	movs	r3, #2
 80026a2:	e03c      	b.n	800271e <_ZN11transmitter10getNextBitEv+0x94>
	}

	if(bufferPointer > 7)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2250      	movs	r2, #80	; 0x50
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d911      	bls.n	80026d2 <_ZN11transmitter10getNextBitEv+0x48>
	{
		buffer.pop_front();
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3328      	adds	r3, #40	; 0x28
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 f964 	bl	8002980 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>
		bufferPointer = 0;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2250      	movs	r2, #80	; 0x50
 80026bc:	2100      	movs	r1, #0
 80026be:	5499      	strb	r1, [r3, r2]

		if(buffer.empty())
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3328      	adds	r3, #40	; 0x28
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f949 	bl	800295c <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 80026ca:	1e03      	subs	r3, r0, #0
 80026cc:	d001      	beq.n	80026d2 <_ZN11transmitter10getNextBitEv+0x48>
		{
			return NO_NEW_BITS;
 80026ce:	2302      	movs	r3, #2
 80026d0:	e025      	b.n	800271e <_ZN11transmitter10getNextBitEv+0x94>
		}
	}

	uint8_t retVal = buffer.front()[bufferPointer];
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3328      	adds	r3, #40	; 0x28
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f972 	bl	80029c0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>
 80026dc:	0001      	movs	r1, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2250      	movs	r2, #80	; 0x50
 80026e2:	5c9b      	ldrb	r3, [r3, r2]
 80026e4:	001a      	movs	r2, r3
 80026e6:	240c      	movs	r4, #12
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f97c 	bl	80029e8 <_ZNSt6bitsetILj8EEixEj>
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 f991 	bl	8002a1a <_ZNKSt6bitsetILj8EE9referencecvbEv>
 80026f8:	0003      	movs	r3, r0
 80026fa:	001a      	movs	r2, r3
 80026fc:	2517      	movs	r5, #23
 80026fe:	197b      	adds	r3, r7, r5
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	193b      	adds	r3, r7, r4
 8002704:	0018      	movs	r0, r3
 8002706:	f000 f97f 	bl	8002a08 <_ZNSt6bitsetILj8EE9referenceD1Ev>

	bufferPointer++;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2250      	movs	r2, #80	; 0x50
 800270e:	5c9b      	ldrb	r3, [r3, r2]
 8002710:	3301      	adds	r3, #1
 8002712:	b2d9      	uxtb	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2250      	movs	r2, #80	; 0x50
 8002718:	5499      	strb	r1, [r3, r2]

	return retVal;
 800271a:	197b      	adds	r3, r7, r5
 800271c:	781b      	ldrb	r3, [r3, #0]
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b006      	add	sp, #24
 8002724:	bdb0      	pop	{r4, r5, r7, pc}

08002726 <_ZN11transmitter4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// The send function adds a message to the queue.
// The interrupt handler will notice and start sending this message bit by bit.
void transmitter::send(string msg)
{
 8002726:	b5b0      	push	{r4, r5, r7, lr}
 8002728:	b090      	sub	sp, #64	; 0x40
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
	message m(msg);
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	2428      	movs	r4, #40	; 0x28
 8002734:	193b      	adds	r3, r7, r4
 8002736:	0011      	movs	r1, r2
 8002738:	0018      	movs	r0, r3
 800273a:	f002 fa53 	bl	8004be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800273e:	193a      	adds	r2, r7, r4
 8002740:	250c      	movs	r5, #12
 8002742:	197b      	adds	r3, r7, r5
 8002744:	0011      	movs	r1, r2
 8002746:	0018      	movs	r0, r3
 8002748:	f7fd fe7d 	bl	8000446 <_ZN7messageC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800274c:	193b      	adds	r3, r7, r4
 800274e:	0018      	movs	r0, r3
 8002750:	f002 f9c9 	bl	8004ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	messages.push_back(m);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	197a      	adds	r2, r7, r5
 8002758:	0011      	movs	r1, r2
 800275a:	0018      	movs	r0, r3
 800275c:	f7ff f86f 	bl	800183e <_ZNSt5dequeI7messageSaIS0_EE9push_backERKS0_>
	message m(msg);
 8002760:	197b      	adds	r3, r7, r5
 8002762:	0018      	movs	r0, r3
 8002764:	f7fd ff16 	bl	8000594 <_ZN7messageD1Ev>
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b010      	add	sp, #64	; 0x40
 800276e:	bdb0      	pop	{r4, r5, r7, pc}

08002770 <_ZN11transmitter4tickEv>:

// Function to be called by the interrupt handler.
// Standard version with start and stop bits, using a state machine.
void transmitter::tick()
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

	// State machine variable to keep track of message progress across interrupts
	static uint8_t state = START_HIGH;

	// When done waiting, move on to the next instruction
	if(holdFor <= 1)
 8002778:	4b57      	ldr	r3, [pc, #348]	; (80028d8 <_ZN11transmitter4tickEv+0x168>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d900      	bls.n	8002782 <_ZN11transmitter4tickEv+0x12>
 8002780:	e09c      	b.n	80028bc <_ZN11transmitter4tickEv+0x14c>
	{
		switch(state)
 8002782:	4b56      	ldr	r3, [pc, #344]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b06      	cmp	r3, #6
 8002788:	d900      	bls.n	800278c <_ZN11transmitter4tickEv+0x1c>
 800278a:	e0a1      	b.n	80028d0 <_ZN11transmitter4tickEv+0x160>
 800278c:	009a      	lsls	r2, r3, #2
 800278e:	4b54      	ldr	r3, [pc, #336]	; (80028e0 <_ZN11transmitter4tickEv+0x170>)
 8002790:	18d3      	adds	r3, r2, r3
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	469f      	mov	pc, r3
		{
			case START_HIGH:
				SEND_HIGH;
 8002796:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <_ZN11transmitter4tickEv+0x174>)
 8002798:	2208      	movs	r2, #8
 800279a:	619a      	str	r2, [r3, #24]
				RED_HIGH;
 800279c:	2390      	movs	r3, #144	; 0x90
 800279e:	05db      	lsls	r3, r3, #23
 80027a0:	2204      	movs	r2, #4
 80027a2:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 80027a4:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <_ZN11transmitter4tickEv+0x168>)
 80027a6:	2205      	movs	r2, #5
 80027a8:	701a      	strb	r2, [r3, #0]
				state = START_LOW;
 80027aa:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
				break;
 80027b0:	e08e      	b.n	80028d0 <_ZN11transmitter4tickEv+0x160>
			case START_LOW:
				SEND_LOW;
 80027b2:	4b4c      	ldr	r3, [pc, #304]	; (80028e4 <_ZN11transmitter4tickEv+0x174>)
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	0312      	lsls	r2, r2, #12
 80027b8:	619a      	str	r2, [r3, #24]
				RED_LOW;
 80027ba:	2390      	movs	r3, #144	; 0x90
 80027bc:	05db      	lsls	r3, r3, #23
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	02d2      	lsls	r2, r2, #11
 80027c2:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 80027c4:	4b44      	ldr	r3, [pc, #272]	; (80028d8 <_ZN11transmitter4tickEv+0x168>)
 80027c6:	2205      	movs	r2, #5
 80027c8:	701a      	strb	r2, [r3, #0]
				state = MSG_HIGH;
 80027ca:	4b44      	ldr	r3, [pc, #272]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 80027cc:	2202      	movs	r2, #2
 80027ce:	701a      	strb	r2, [r3, #0]
				// Fill the buffer with the message to be sent
				fillBuffer();
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7ff fef7 	bl	80025c6 <_ZN11transmitter10fillBufferEv>
				break;
 80027d8:	e07a      	b.n	80028d0 <_ZN11transmitter4tickEv+0x160>
			case MSG_HIGH:
				switch(getNextBit())
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff ff54 	bl	800268a <_ZN11transmitter10getNextBitEv>
 80027e2:	0003      	movs	r3, r0
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d021      	beq.n	800282c <_ZN11transmitter4tickEv+0xbc>
 80027e8:	dc6f      	bgt.n	80028ca <_ZN11transmitter4tickEv+0x15a>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <_ZN11transmitter4tickEv+0x84>
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d00e      	beq.n	8002810 <_ZN11transmitter4tickEv+0xa0>
						SEND_LOW;
						RED_LOW;
						state = STOP_HIGH;
						break;
				}
				break;
 80027f2:	e06a      	b.n	80028ca <_ZN11transmitter4tickEv+0x15a>
						SEND_HIGH;
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <_ZN11transmitter4tickEv+0x174>)
 80027f6:	2208      	movs	r2, #8
 80027f8:	619a      	str	r2, [r3, #24]
						RED_HIGH;
 80027fa:	2390      	movs	r3, #144	; 0x90
 80027fc:	05db      	lsls	r3, r3, #23
 80027fe:	2204      	movs	r2, #4
 8002800:	619a      	str	r2, [r3, #24]
						holdFor = LENGTH_ZERO;
 8002802:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <_ZN11transmitter4tickEv+0x168>)
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
						state = MSG_LOW;
 8002808:	4b34      	ldr	r3, [pc, #208]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 800280a:	2203      	movs	r2, #3
 800280c:	701a      	strb	r2, [r3, #0]
						break;
 800280e:	e01a      	b.n	8002846 <_ZN11transmitter4tickEv+0xd6>
						SEND_HIGH;
 8002810:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <_ZN11transmitter4tickEv+0x174>)
 8002812:	2208      	movs	r2, #8
 8002814:	619a      	str	r2, [r3, #24]
						RED_HIGH;
 8002816:	2390      	movs	r3, #144	; 0x90
 8002818:	05db      	lsls	r3, r3, #23
 800281a:	2204      	movs	r2, #4
 800281c:	619a      	str	r2, [r3, #24]
						holdFor = LENGTH_ONE;
 800281e:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <_ZN11transmitter4tickEv+0x168>)
 8002820:	2203      	movs	r2, #3
 8002822:	701a      	strb	r2, [r3, #0]
						state = MSG_LOW;
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 8002826:	2203      	movs	r2, #3
 8002828:	701a      	strb	r2, [r3, #0]
						break;
 800282a:	e00c      	b.n	8002846 <_ZN11transmitter4tickEv+0xd6>
						SEND_LOW;
 800282c:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <_ZN11transmitter4tickEv+0x174>)
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	0312      	lsls	r2, r2, #12
 8002832:	619a      	str	r2, [r3, #24]
						RED_LOW;
 8002834:	2390      	movs	r3, #144	; 0x90
 8002836:	05db      	lsls	r3, r3, #23
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	02d2      	lsls	r2, r2, #11
 800283c:	619a      	str	r2, [r3, #24]
						state = STOP_HIGH;
 800283e:	4b27      	ldr	r3, [pc, #156]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 8002840:	2205      	movs	r2, #5
 8002842:	701a      	strb	r2, [r3, #0]
						break;
 8002844:	46c0      	nop			; (mov r8, r8)
				break;
 8002846:	e040      	b.n	80028ca <_ZN11transmitter4tickEv+0x15a>
			case MSG_LOW:
				SEND_LOW;
 8002848:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <_ZN11transmitter4tickEv+0x174>)
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	0312      	lsls	r2, r2, #12
 800284e:	619a      	str	r2, [r3, #24]
				RED_LOW;
 8002850:	2390      	movs	r3, #144	; 0x90
 8002852:	05db      	lsls	r3, r3, #23
 8002854:	2280      	movs	r2, #128	; 0x80
 8002856:	02d2      	lsls	r2, r2, #11
 8002858:	619a      	str	r2, [r3, #24]
				state = MSG_HIGH;
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 800285c:	2202      	movs	r2, #2
 800285e:	701a      	strb	r2, [r3, #0]
				break;
 8002860:	e036      	b.n	80028d0 <_ZN11transmitter4tickEv+0x160>
			case STOP_HIGH:
				SEND_HIGH;
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <_ZN11transmitter4tickEv+0x174>)
 8002864:	2208      	movs	r2, #8
 8002866:	619a      	str	r2, [r3, #24]
				RED_HIGH;
 8002868:	2390      	movs	r3, #144	; 0x90
 800286a:	05db      	lsls	r3, r3, #23
 800286c:	2204      	movs	r2, #4
 800286e:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <_ZN11transmitter4tickEv+0x168>)
 8002872:	2205      	movs	r2, #5
 8002874:	701a      	strb	r2, [r3, #0]
				state = STOP_LOW;
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 8002878:	2204      	movs	r2, #4
 800287a:	701a      	strb	r2, [r3, #0]
				break;
 800287c:	e028      	b.n	80028d0 <_ZN11transmitter4tickEv+0x160>
			case STOP_LOW:
				SEND_LOW;
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <_ZN11transmitter4tickEv+0x174>)
 8002880:	2280      	movs	r2, #128	; 0x80
 8002882:	0312      	lsls	r2, r2, #12
 8002884:	619a      	str	r2, [r3, #24]
				RED_LOW;
 8002886:	2390      	movs	r3, #144	; 0x90
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	02d2      	lsls	r2, r2, #11
 800288e:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <_ZN11transmitter4tickEv+0x168>)
 8002892:	2205      	movs	r2, #5
 8002894:	701a      	strb	r2, [r3, #0]
				state = IDLE;
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 8002898:	2206      	movs	r2, #6
 800289a:	701a      	strb	r2, [r3, #0]
				break;
 800289c:	e018      	b.n	80028d0 <_ZN11transmitter4tickEv+0x160>
			case IDLE:
				if(!messages.empty())
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fe fff0 	bl	8001886 <_ZNKSt5dequeI7messageSaIS0_EE5emptyEv>
 80028a6:	0003      	movs	r3, r0
 80028a8:	001a      	movs	r2, r3
 80028aa:	2301      	movs	r3, #1
 80028ac:	4053      	eors	r3, r2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <_ZN11transmitter4tickEv+0x15e>
				{
					state = START_HIGH;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <_ZN11transmitter4tickEv+0x16c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
				}
				break;
 80028ba:	e008      	b.n	80028ce <_ZN11transmitter4tickEv+0x15e>
		}
	}
	else
	{
		holdFor--;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <_ZN11transmitter4tickEv+0x168>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <_ZN11transmitter4tickEv+0x168>)
 80028c6:	701a      	strb	r2, [r3, #0]
	}
}
 80028c8:	e002      	b.n	80028d0 <_ZN11transmitter4tickEv+0x160>
				break;
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	e000      	b.n	80028d0 <_ZN11transmitter4tickEv+0x160>
				break;
 80028ce:	46c0      	nop			; (mov r8, r8)
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000004 	.word	0x20000004
 80028dc:	20000190 	.word	0x20000190
 80028e0:	08005074 	.word	0x08005074
 80028e4:	48000400 	.word	0x48000400

080028e8 <_ZNSt6bitsetILj8EEC1Ey>:
      constexpr bitset(unsigned long long __val) noexcept
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	603a      	str	r2, [r7, #0]
 80028f2:	607b      	str	r3, [r7, #4]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 80028f4:	68fc      	ldr	r4, [r7, #12]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0010      	movs	r0, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	f000 f8a1 	bl	8002a44 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>
 8002902:	0002      	movs	r2, r0
 8002904:	000b      	movs	r3, r1
 8002906:	0020      	movs	r0, r4
 8002908:	f7ff fe2a 	bl	8002560 <_ZNSt12_Base_bitsetILj1EEC1Ey>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b005      	add	sp, #20
 8002914:	bd90      	pop	{r4, r7, pc}

08002916 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800292a:	429a      	cmp	r2, r3
 800292c:	d00c      	beq.n	8002948 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	0019      	movs	r1, r3
 8002938:	f000 f896 	bl	8002a68 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	1d1a      	adds	r2, r3, #4
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	619a      	str	r2, [r3, #24]
      }
 8002946:	e005      	b.n	8002954 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_+0x3e>
	  _M_push_back_aux(__x);
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0011      	movs	r1, r2
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f89e 	bl	8002a90 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>
      }
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}

0800295c <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3318      	adds	r3, #24
 8002968:	001a      	movs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3308      	adds	r3, #8
 800296e:	0019      	movs	r1, r3
 8002970:	0010      	movs	r0, r2
 8002972:	f000 f8d5 	bl	8002b20 <_ZSteqISt6bitsetILj8EERS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>
 8002976:	0003      	movs	r3, r0
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}

08002980 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8002992:	429a      	cmp	r2, r3
 8002994:	d00c      	beq.n	80029b0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv+0x30>
	    _Alloc_traits::destroy(this->_M_impl,
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	0019      	movs	r1, r3
 800299e:	0010      	movs	r0, r2
 80029a0:	f000 f8cf 	bl	8002b42 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	1d1a      	adds	r2, r3, #4
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	609a      	str	r2, [r3, #8]
      }
 80029ae:	e003      	b.n	80029b8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv+0x38>
	  _M_pop_front_aux();
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 f8d4 	bl	8002b60 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_pop_front_auxEv>
      }
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	return *begin();
 80029c8:	2408      	movs	r4, #8
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	0011      	movs	r1, r2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fd ff7c 	bl	80008ce <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 f8e9 	bl	8002bb0 <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>
 80029de:	0003      	movs	r3, r0
      }
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b007      	add	sp, #28
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <_ZNSt6bitsetILj8EEixEj>:
      operator[](size_t __position)
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f8e2 	bl	8002bc4 <_ZNSt6bitsetILj8EE9referenceC1ERS0_j>
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b004      	add	sp, #16
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <_ZNSt6bitsetILj8EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	{ }
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b002      	add	sp, #8
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_ZNKSt6bitsetILj8EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 8002a1a:	b590      	push	{r4, r7, lr}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681c      	ldr	r4, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff fdb0 	bl	8002592 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8002a32:	0003      	movs	r3, r0
 8002a34:	4023      	ands	r3, r4
 8002a36:	1e5a      	subs	r2, r3, #1
 8002a38:	4193      	sbcs	r3, r2
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b003      	add	sp, #12
 8002a42:	bd90      	pop	{r4, r7, pc}

08002a44 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6038      	str	r0, [r7, #0]
 8002a4c:	6079      	str	r1, [r7, #4]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	20ff      	movs	r0, #255	; 0xff
 8002a52:	4001      	ands	r1, r0
 8002a54:	000a      	movs	r2, r1
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	2000      	movs	r0, #0
 8002a5a:	4001      	ands	r1, r0
 8002a5c:	000b      	movs	r3, r1
 8002a5e:	0010      	movs	r0, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f8bf 	bl	8002bfa <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f8c2 	bl	8002c0c <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b004      	add	sp, #16
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 f8cc 	bl	8002c3a <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE4sizeEv>
 8002aa2:	0004      	movs	r4, r0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f8d9 	bl	8002c5e <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE8max_sizeEv>
 8002aac:	0003      	movs	r3, r0
 8002aae:	1ae3      	subs	r3, r4, r3
 8002ab0:	425a      	negs	r2, r3
 8002ab2:	4153      	adcs	r3, r2
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x32>
	  __throw_length_error(
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x8c>)
 8002abc:	0018      	movs	r0, r3
 8002abe:	f001 fe79 	bl	80047b4 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 f8da 	bl	8002c80 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	1d1c      	adds	r4, r3, #4
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	f7fe fb94 	bl	8001202 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>
 8002ada:	0003      	movs	r3, r0
 8002adc:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002ade:	687c      	ldr	r4, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699d      	ldr	r5, [r3, #24]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 f887 	bl	8002bfa <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002aec:	0003      	movs	r3, r0
 8002aee:	001a      	movs	r2, r3
 8002af0:	0029      	movs	r1, r5
 8002af2:	0020      	movs	r0, r4
 8002af4:	f7ff ffb8 	bl	8002a68 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3318      	adds	r3, #24
 8002afc:	001a      	movs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	3304      	adds	r3, #4
 8002b04:	0019      	movs	r1, r3
 8002b06:	0010      	movs	r0, r2
 8002b08:	f7fe fa85 	bl	8001016 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
      }
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1c:	0800500c 	.word	0x0800500c

08002b20 <_ZSteqISt6bitsetILj8EERS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	425a      	negs	r2, r3
 8002b36:	4153      	adcs	r3, r2
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0011      	movs	r1, r2
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 f8b0 	bl	8002cb8 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE7destroyIS2_EEvPT_>
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fd fed1 	bl	8000912 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8002b70:	0002      	movs	r2, r0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0019      	movs	r1, r3
 8002b78:	0010      	movs	r0, r2
 8002b7a:	f7ff ffe2 	bl	8002b42 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0019      	movs	r1, r3
 8002b86:	0010      	movs	r0, r2
 8002b88:	f7fe fa5e 	bl	8001048 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3308      	adds	r3, #8
 8002b90:	001a      	movs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	3304      	adds	r3, #4
 8002b98:	0019      	movs	r1, r3
 8002b9a:	0010      	movs	r0, r2
 8002b9c:	f7fe fa3b 	bl	8001016 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
    }
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNSt6bitsetILj8EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7ff fceb 	bl	80025b2 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff fcc9 	bl	800257c <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 8002bea:	0002      	movs	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
	}
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7ff ffed 	bl	8002bfa <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002c20:	0004      	movs	r4, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	0019      	movs	r1, r3
 8002c26:	2004      	movs	r0, #4
 8002c28:	f7fe fcdf 	bl	80015ea <_ZnwjPv>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b005      	add	sp, #20
 8002c38:	bd90      	pop	{r4, r7, pc}

08002c3a <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3318      	adds	r3, #24
 8002c46:	001a      	movs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3308      	adds	r3, #8
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	0010      	movs	r0, r2
 8002c50:	f000 f83b 	bl	8002cca <_ZStmiISt6bitsetILj8EERS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
 8002c54:	0003      	movs	r3, r0
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b002      	add	sp, #8
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fe faf5 	bl	8001258 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 f84f 	bl	8002d14 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_>
 8002c76:	0003      	movs	r3, r0
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6859      	ldr	r1, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	1ac3      	subs	r3, r0, r3
 8002c9c:	109b      	asrs	r3, r3, #2
 8002c9e:	1acb      	subs	r3, r1, r3
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d905      	bls.n	8002cb0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 f84e 	bl	8002d4c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb>
      }
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b002      	add	sp, #8
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <_ZStmiISt6bitsetILj8EERS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8002cd4:	f7fe faa7 	bl	8001226 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	0019      	movs	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	109b      	asrs	r3, r3, #2
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	434b      	muls	r3, r1
 8002cec:	001a      	movs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6819      	ldr	r1, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	1acb      	subs	r3, r1, r3
 8002cf8:	109b      	asrs	r3, r3, #2
 8002cfa:	18d2      	adds	r2, r2, r3
	+ (__y._M_last - __y._M_cur);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	1acb      	subs	r3, r1, r3
 8002d06:	109b      	asrs	r3, r3, #2
 8002d08:	18d3      	adds	r3, r2, r3
    }
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8002d1e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 f8b4 	bl	8002e90 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8max_sizeERKS2_>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	18fa      	adds	r2, r7, r3
 8002d30:	230c      	movs	r3, #12
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	0011      	movs	r1, r2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7ff f91d 	bl	8001f76 <_ZSt3minIjERKT_S2_S2_>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	681b      	ldr	r3, [r3, #0]
      }
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b004      	add	sp, #16
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	7fffffff 	.word	0x7fffffff

08002d4c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	1dfb      	adds	r3, r7, #7
 8002d58:	701a      	strb	r2, [r3, #0]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	109b      	asrs	r3, r3, #2
 8002d66:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002d68:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	6a3a      	ldr	r2, [r7, #32]
 8002d6e:	18d3      	adds	r3, r2, r3
 8002d70:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d92e      	bls.n	8002ddc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x90>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	1acb      	subs	r3, r1, r3
 8002d8a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002d8c:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002d8e:	1dfb      	adds	r3, r7, #7
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	e000      	b.n	8002d9e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x52>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	185b      	adds	r3, r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002da0:	18d3      	adds	r3, r2, r3
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d209      	bcs.n	8002dc2 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002db6:	3304      	adds	r3, #4
 8002db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dba:	0019      	movs	r1, r3
 8002dbc:	f000 f875 	bl	8002eaa <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
 8002dc0:	e04b      	b.n	8002e5a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x10e>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002dca:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	18d3      	adds	r3, r2, r3
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	f000 f882 	bl	8002ede <_ZSt13copy_backwardIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
 8002dda:	e03e      	b.n	8002e5a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x10e>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3304      	adds	r3, #4
 8002de4:	2208      	movs	r2, #8
 8002de6:	18ba      	adds	r2, r7, r2
 8002de8:	0011      	movs	r1, r2
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7fd ffee 	bl	8000dcc <_ZSt3maxIjERKT_S2_S2_>
 8002df0:	0003      	movs	r3, r0
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	18e3      	adds	r3, r4, r3
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002df6:	3302      	adds	r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7fe f8d0 	bl	8000fa6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>
 8002e06:	0003      	movs	r3, r0
 8002e08:	617b      	str	r3, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002e14:	1dfb      	adds	r3, r7, #7
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0xd6>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	e000      	b.n	8002e24 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0xd8>
 8002e22:	2300      	movs	r3, #0
 8002e24:	189b      	adds	r3, r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	18d3      	adds	r3, r2, r3
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002e34:	3304      	adds	r3, #4
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	0019      	movs	r1, r3
 8002e3a:	f000 f836 	bl	8002eaa <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	001a      	movs	r2, r3
 8002e4a:	f7fd ff79 	bl	8000d40 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e60:	0011      	movs	r1, r2
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7fe f8d7 	bl	8001016 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3318      	adds	r3, #24
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	4a06      	ldr	r2, [pc, #24]	; (8002e8c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x140>)
 8002e72:	4694      	mov	ip, r2
 8002e74:	4463      	add	r3, ip
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7a:	18d3      	adds	r3, r2, r3
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	f7fe f8ca 	bl	8001016 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b00b      	add	sp, #44	; 0x2c
 8002e88:	bd90      	pop	{r4, r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	3fffffff 	.word	0x3fffffff

08002e90 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7fe fb26 	bl	80014ec <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8002eaa:	b590      	push	{r4, r7, lr}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 f82a 	bl	8002f12 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 8002ebe:	0004      	movs	r4, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 f825 	bl	8002f12 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 8002ec8:	0001      	movs	r1, r0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	001a      	movs	r2, r3
 8002ece:	0020      	movs	r0, r4
 8002ed0:	f000 f828 	bl	8002f24 <_ZSt14__copy_move_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 8002ed4:	0003      	movs	r3, r0
    }
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b005      	add	sp, #20
 8002edc:	bd90      	pop	{r4, r7, pc}

08002ede <_ZSt13copy_backwardIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8002ede:	b590      	push	{r4, r7, lr}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 f810 	bl	8002f12 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 8002ef2:	0004      	movs	r4, r0
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 f80b 	bl	8002f12 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 8002efc:	0001      	movs	r1, r0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	001a      	movs	r2, r3
 8002f02:	0020      	movs	r0, r4
 8002f04:	f000 f833 	bl	8002f6e <_ZSt23__copy_move_backward_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 8002f08:	0003      	movs	r3, r0
    }
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b005      	add	sp, #20
 8002f10:	bd90      	pop	{r4, r7, pc}

08002f12 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>:
    __miter_base(_Iterator __it)
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZSt14__copy_move_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002f24:	b5b0      	push	{r4, r5, r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 f840 	bl	8002fb8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002f38:	0004      	movs	r4, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 f83b 	bl	8002fb8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002f42:	0005      	movs	r5, r0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f836 	bl	8002fb8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	001a      	movs	r2, r3
 8002f50:	0029      	movs	r1, r5
 8002f52:	0020      	movs	r0, r4
 8002f54:	f000 f839 	bl	8002fca <_ZSt13__copy_move_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	0011      	movs	r1, r2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f848 	bl	8002ff4 <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>
 8002f64:	0003      	movs	r3, r0
    }
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b004      	add	sp, #16
 8002f6c:	bdb0      	pop	{r4, r5, r7, pc}

08002f6e <_ZSt23__copy_move_backward_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8002f6e:	b5b0      	push	{r4, r5, r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f81b 	bl	8002fb8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002f82:	0004      	movs	r4, r0
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f816 	bl	8002fb8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002f8c:	0005      	movs	r5, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f811 	bl	8002fb8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8002f96:	0003      	movs	r3, r0
 8002f98:	001a      	movs	r2, r3
 8002f9a:	0029      	movs	r1, r5
 8002f9c:	0020      	movs	r0, r4
 8002f9e:	f000 f833 	bl	8003008 <_ZSt22__copy_move_backward_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f823 	bl	8002ff4 <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>
 8002fae:	0003      	movs	r3, r0
    }
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b004      	add	sp, #16
 8002fb6:	bdb0      	pop	{r4, r5, r7, pc}

08002fb8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>:
    __niter_base(_Iterator __it)
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_ZSt13__copy_move_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002fd6:	2317      	movs	r3, #23
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
			      _Category>::__copy_m(__first, __last, __result);
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 f824 	bl	8003032 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>
 8002fea:	0003      	movs	r3, r0
    }
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b006      	add	sp, #24
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZSt22__copy_move_backward_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 8003014:	2317      	movs	r3, #23
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
				       _Category>::__copy_move_b(__first,
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f822 	bl	800306c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>
 8003028:	0003      	movs	r3, r0
    }
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b006      	add	sp, #24
 8003030:	bd80      	pop	{r7, pc}

08003032 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	109b      	asrs	r3, r3, #2
 8003046:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d006      	beq.n	800305c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	009a      	lsls	r2, r3, #2
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f001 fe61 	bl	8004d1e <memmove>
	  return __result + _Num;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	18d3      	adds	r3, r2, r3
	}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b006      	add	sp, #24
 800306a:	bd80      	pop	{r7, pc}

0800306c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	109b      	asrs	r3, r3, #2
 8003080:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	425b      	negs	r3, r3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	18d0      	adds	r0, r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	009a      	lsls	r2, r3, #2
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	0019      	movs	r1, r3
 800309a:	f001 fe40 	bl	8004d1e <memmove>
	  return __result - _Num;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	425b      	negs	r3, r3
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	18d3      	adds	r3, r2, r3
	}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b006      	add	sp, #24
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030b0:	480d      	ldr	r0, [pc, #52]	; (80030e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b4:	480d      	ldr	r0, [pc, #52]	; (80030ec <LoopForever+0x6>)
  ldr r1, =_edata
 80030b6:	490e      	ldr	r1, [pc, #56]	; (80030f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030b8:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <LoopForever+0xe>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030bc:	e002      	b.n	80030c4 <LoopCopyDataInit>

080030be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c2:	3304      	adds	r3, #4

080030c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c8:	d3f9      	bcc.n	80030be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ca:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030cc:	4c0b      	ldr	r4, [pc, #44]	; (80030fc <LoopForever+0x16>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d0:	e001      	b.n	80030d6 <LoopFillZerobss>

080030d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d4:	3204      	adds	r2, #4

080030d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d8:	d3fb      	bcc.n	80030d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80030da:	f7ff f977 	bl	80023cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80030de:	f001 fddd 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030e2:	f7fd f92f 	bl	8000344 <main>

080030e6 <LoopForever>:

LoopForever:
    b LoopForever
 80030e6:	e7fe      	b.n	80030e6 <LoopForever>
  ldr   r0, =_estack
 80030e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80030ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80030f4:	08005174 	.word	0x08005174
  ldr r2, =_sbss
 80030f8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80030fc:	2000028c 	.word	0x2000028c

08003100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003100:	e7fe      	b.n	8003100 <ADC1_IRQHandler>
	...

08003104 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <HAL_Init+0x24>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_Init+0x24>)
 800310e:	2110      	movs	r1, #16
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003114:	2000      	movs	r0, #0
 8003116:	f7ff f867 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800311a:	f7ff f841 	bl	80021a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	40022000 	.word	0x40022000

0800312c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_IncTick+0x1c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	001a      	movs	r2, r3
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_IncTick+0x20>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	18d2      	adds	r2, r2, r3
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_IncTick+0x20>)
 800313e:	601a      	str	r2, [r3, #0]
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	20000005 	.word	0x20000005
 800314c:	20000278 	.word	0x20000278

08003150 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  return uwTick;
 8003154:	4b02      	ldr	r3, [pc, #8]	; (8003160 <HAL_GetTick+0x10>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	20000278 	.word	0x20000278

08003164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7ff fff0 	bl	8003150 <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	d005      	beq.n	800318a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_Delay+0x44>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	001a      	movs	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	189b      	adds	r3, r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	f7ff ffe0 	bl	8003150 <HAL_GetTick>
 8003190:	0002      	movs	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	429a      	cmp	r2, r3
 800319a:	d8f7      	bhi.n	800318c <HAL_Delay+0x28>
  {
  }
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b004      	add	sp, #16
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	20000005 	.word	0x20000005

080031ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	0002      	movs	r2, r0
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	1dfb      	adds	r3, r7, #7
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b7f      	cmp	r3, #127	; 0x7f
 80031be:	d809      	bhi.n	80031d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c0:	1dfb      	adds	r3, r7, #7
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	001a      	movs	r2, r3
 80031c6:	231f      	movs	r3, #31
 80031c8:	401a      	ands	r2, r3
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <__NVIC_EnableIRQ+0x30>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	4091      	lsls	r1, r2
 80031d0:	000a      	movs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
  }
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	e000e100 	.word	0xe000e100

080031e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	0002      	movs	r2, r0
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	1dfb      	adds	r3, r7, #7
 80031ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031ee:	1dfb      	adds	r3, r7, #7
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b7f      	cmp	r3, #127	; 0x7f
 80031f4:	d828      	bhi.n	8003248 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031f6:	4a2f      	ldr	r2, [pc, #188]	; (80032b4 <__NVIC_SetPriority+0xd4>)
 80031f8:	1dfb      	adds	r3, r7, #7
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	33c0      	adds	r3, #192	; 0xc0
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	589b      	ldr	r3, [r3, r2]
 8003206:	1dfa      	adds	r2, r7, #7
 8003208:	7812      	ldrb	r2, [r2, #0]
 800320a:	0011      	movs	r1, r2
 800320c:	2203      	movs	r2, #3
 800320e:	400a      	ands	r2, r1
 8003210:	00d2      	lsls	r2, r2, #3
 8003212:	21ff      	movs	r1, #255	; 0xff
 8003214:	4091      	lsls	r1, r2
 8003216:	000a      	movs	r2, r1
 8003218:	43d2      	mvns	r2, r2
 800321a:	401a      	ands	r2, r3
 800321c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	22ff      	movs	r2, #255	; 0xff
 8003224:	401a      	ands	r2, r3
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	0018      	movs	r0, r3
 800322c:	2303      	movs	r3, #3
 800322e:	4003      	ands	r3, r0
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003234:	481f      	ldr	r0, [pc, #124]	; (80032b4 <__NVIC_SetPriority+0xd4>)
 8003236:	1dfb      	adds	r3, r7, #7
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	b25b      	sxtb	r3, r3
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	430a      	orrs	r2, r1
 8003240:	33c0      	adds	r3, #192	; 0xc0
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003246:	e031      	b.n	80032ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <__NVIC_SetPriority+0xd8>)
 800324a:	1dfb      	adds	r3, r7, #7
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	0019      	movs	r1, r3
 8003250:	230f      	movs	r3, #15
 8003252:	400b      	ands	r3, r1
 8003254:	3b08      	subs	r3, #8
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3306      	adds	r3, #6
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	18d3      	adds	r3, r2, r3
 800325e:	3304      	adds	r3, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1dfa      	adds	r2, r7, #7
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	0011      	movs	r1, r2
 8003268:	2203      	movs	r2, #3
 800326a:	400a      	ands	r2, r1
 800326c:	00d2      	lsls	r2, r2, #3
 800326e:	21ff      	movs	r1, #255	; 0xff
 8003270:	4091      	lsls	r1, r2
 8003272:	000a      	movs	r2, r1
 8003274:	43d2      	mvns	r2, r2
 8003276:	401a      	ands	r2, r3
 8003278:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	019b      	lsls	r3, r3, #6
 800327e:	22ff      	movs	r2, #255	; 0xff
 8003280:	401a      	ands	r2, r3
 8003282:	1dfb      	adds	r3, r7, #7
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	0018      	movs	r0, r3
 8003288:	2303      	movs	r3, #3
 800328a:	4003      	ands	r3, r0
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003290:	4809      	ldr	r0, [pc, #36]	; (80032b8 <__NVIC_SetPriority+0xd8>)
 8003292:	1dfb      	adds	r3, r7, #7
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	001c      	movs	r4, r3
 8003298:	230f      	movs	r3, #15
 800329a:	4023      	ands	r3, r4
 800329c:	3b08      	subs	r3, #8
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	430a      	orrs	r2, r1
 80032a2:	3306      	adds	r3, #6
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	18c3      	adds	r3, r0, r3
 80032a8:	3304      	adds	r3, #4
 80032aa:	601a      	str	r2, [r3, #0]
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b003      	add	sp, #12
 80032b2:	bd90      	pop	{r4, r7, pc}
 80032b4:	e000e100 	.word	0xe000e100
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	210f      	movs	r1, #15
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	1c02      	adds	r2, r0, #0
 80032cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	187b      	adds	r3, r7, r1
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b25b      	sxtb	r3, r3
 80032d6:	0011      	movs	r1, r2
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff ff81 	bl	80031e0 <__NVIC_SetPriority>
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	0002      	movs	r2, r0
 80032ee:	1dfb      	adds	r3, r7, #7
 80032f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	b25b      	sxtb	r3, r3
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff ff57 	bl	80031ac <__NVIC_EnableIRQ>
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b002      	add	sp, #8
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003316:	e14f      	b.n	80035b8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2101      	movs	r1, #1
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4091      	lsls	r1, r2
 8003322:	000a      	movs	r2, r1
 8003324:	4013      	ands	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d100      	bne.n	8003330 <HAL_GPIO_Init+0x28>
 800332e:	e140      	b.n	80035b2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d00b      	beq.n	8003350 <HAL_GPIO_Init+0x48>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d007      	beq.n	8003350 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003344:	2b11      	cmp	r3, #17
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b12      	cmp	r3, #18
 800334e:	d130      	bne.n	80033b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	2203      	movs	r2, #3
 800335c:	409a      	lsls	r2, r3
 800335e:	0013      	movs	r3, r2
 8003360:	43da      	mvns	r2, r3
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	409a      	lsls	r2, r3
 8003372:	0013      	movs	r3, r2
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003386:	2201      	movs	r2, #1
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
 800338c:	0013      	movs	r3, r2
 800338e:	43da      	mvns	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	2201      	movs	r2, #1
 800339e:	401a      	ands	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	409a      	lsls	r2, r3
 80033a4:	0013      	movs	r3, r2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2203      	movs	r2, #3
 80033be:	409a      	lsls	r2, r3
 80033c0:	0013      	movs	r3, r2
 80033c2:	43da      	mvns	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	0013      	movs	r3, r2
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0xea>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b12      	cmp	r3, #18
 80033f0:	d123      	bne.n	800343a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	08da      	lsrs	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3208      	adds	r2, #8
 80033fa:	0092      	lsls	r2, r2, #2
 80033fc:	58d3      	ldr	r3, [r2, r3]
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2207      	movs	r2, #7
 8003404:	4013      	ands	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	220f      	movs	r2, #15
 800340a:	409a      	lsls	r2, r3
 800340c:	0013      	movs	r3, r2
 800340e:	43da      	mvns	r2, r3
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2107      	movs	r1, #7
 800341e:	400b      	ands	r3, r1
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	409a      	lsls	r2, r3
 8003424:	0013      	movs	r3, r2
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	08da      	lsrs	r2, r3, #3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3208      	adds	r2, #8
 8003434:	0092      	lsls	r2, r2, #2
 8003436:	6939      	ldr	r1, [r7, #16]
 8003438:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	409a      	lsls	r2, r3
 8003448:	0013      	movs	r3, r2
 800344a:	43da      	mvns	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2203      	movs	r2, #3
 8003458:	401a      	ands	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	409a      	lsls	r2, r3
 8003460:	0013      	movs	r3, r2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	055b      	lsls	r3, r3, #21
 8003476:	4013      	ands	r3, r2
 8003478:	d100      	bne.n	800347c <HAL_GPIO_Init+0x174>
 800347a:	e09a      	b.n	80035b2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347c:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <HAL_GPIO_Init+0x2c8>)
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_GPIO_Init+0x2c8>)
 8003482:	2101      	movs	r1, #1
 8003484:	430a      	orrs	r2, r1
 8003486:	619a      	str	r2, [r3, #24]
 8003488:	4b51      	ldr	r3, [pc, #324]	; (80035d0 <HAL_GPIO_Init+0x2c8>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	2201      	movs	r2, #1
 800348e:	4013      	ands	r3, r2
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003494:	4a4f      	ldr	r2, [pc, #316]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	3302      	adds	r3, #2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	589b      	ldr	r3, [r3, r2]
 80034a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2203      	movs	r2, #3
 80034a6:	4013      	ands	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	409a      	lsls	r2, r3
 80034ae:	0013      	movs	r3, r2
 80034b0:	43da      	mvns	r2, r3
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	2390      	movs	r3, #144	; 0x90
 80034bc:	05db      	lsls	r3, r3, #23
 80034be:	429a      	cmp	r2, r3
 80034c0:	d013      	beq.n	80034ea <HAL_GPIO_Init+0x1e2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a44      	ldr	r2, [pc, #272]	; (80035d8 <HAL_GPIO_Init+0x2d0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00d      	beq.n	80034e6 <HAL_GPIO_Init+0x1de>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a43      	ldr	r2, [pc, #268]	; (80035dc <HAL_GPIO_Init+0x2d4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <HAL_GPIO_Init+0x1da>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a42      	ldr	r2, [pc, #264]	; (80035e0 <HAL_GPIO_Init+0x2d8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_GPIO_Init+0x1d6>
 80034da:	2303      	movs	r3, #3
 80034dc:	e006      	b.n	80034ec <HAL_GPIO_Init+0x1e4>
 80034de:	2305      	movs	r3, #5
 80034e0:	e004      	b.n	80034ec <HAL_GPIO_Init+0x1e4>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e002      	b.n	80034ec <HAL_GPIO_Init+0x1e4>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_GPIO_Init+0x1e4>
 80034ea:	2300      	movs	r3, #0
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	2103      	movs	r1, #3
 80034f0:	400a      	ands	r2, r1
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	4093      	lsls	r3, r2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034fc:	4935      	ldr	r1, [pc, #212]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800350a:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <HAL_GPIO_Init+0x2dc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	43da      	mvns	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	025b      	lsls	r3, r3, #9
 8003522:	4013      	ands	r3, r2
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800352e:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <HAL_GPIO_Init+0x2dc>)
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003534:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_GPIO_Init+0x2dc>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	43da      	mvns	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	029b      	lsls	r3, r3, #10
 800354c:	4013      	ands	r3, r2
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003558:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_GPIO_Init+0x2dc>)
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800355e:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <HAL_GPIO_Init+0x2dc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	43da      	mvns	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	035b      	lsls	r3, r3, #13
 8003576:	4013      	ands	r3, r2
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003582:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_GPIO_Init+0x2dc>)
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003588:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <HAL_GPIO_Init+0x2dc>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	43da      	mvns	r2, r3
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	039b      	lsls	r3, r3, #14
 80035a0:	4013      	ands	r3, r2
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035ac:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <HAL_GPIO_Init+0x2dc>)
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	3301      	adds	r3, #1
 80035b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	40da      	lsrs	r2, r3
 80035c0:	1e13      	subs	r3, r2, #0
 80035c2:	d000      	beq.n	80035c6 <HAL_GPIO_Init+0x2be>
 80035c4:	e6a8      	b.n	8003318 <HAL_GPIO_Init+0x10>
  } 
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b006      	add	sp, #24
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40010000 	.word	0x40010000
 80035d8:	48000400 	.word	0x48000400
 80035dc:	48000800 	.word	0x48000800
 80035e0:	48000c00 	.word	0x48000c00
 80035e4:	40010400 	.word	0x40010400

080035e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	0008      	movs	r0, r1
 80035f2:	0011      	movs	r1, r2
 80035f4:	1cbb      	adds	r3, r7, #2
 80035f6:	1c02      	adds	r2, r0, #0
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	1c7b      	adds	r3, r7, #1
 80035fc:	1c0a      	adds	r2, r1, #0
 80035fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003600:	1c7b      	adds	r3, r7, #1
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003608:	1cbb      	adds	r3, r7, #2
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003610:	e003      	b.n	800361a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003612:	1cbb      	adds	r3, r7, #2
 8003614:	881a      	ldrh	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	629a      	str	r2, [r3, #40]	; 0x28
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b002      	add	sp, #8
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e301      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	4013      	ands	r3, r2
 800363e:	d100      	bne.n	8003642 <HAL_RCC_OscConfig+0x1e>
 8003640:	e08d      	b.n	800375e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003642:	4bc3      	ldr	r3, [pc, #780]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	220c      	movs	r2, #12
 8003648:	4013      	ands	r3, r2
 800364a:	2b04      	cmp	r3, #4
 800364c:	d00e      	beq.n	800366c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800364e:	4bc0      	ldr	r3, [pc, #768]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	220c      	movs	r2, #12
 8003654:	4013      	ands	r3, r2
 8003656:	2b08      	cmp	r3, #8
 8003658:	d116      	bne.n	8003688 <HAL_RCC_OscConfig+0x64>
 800365a:	4bbd      	ldr	r3, [pc, #756]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	025b      	lsls	r3, r3, #9
 8003662:	401a      	ands	r2, r3
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	025b      	lsls	r3, r3, #9
 8003668:	429a      	cmp	r2, r3
 800366a:	d10d      	bne.n	8003688 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	4bb8      	ldr	r3, [pc, #736]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	029b      	lsls	r3, r3, #10
 8003674:	4013      	ands	r3, r2
 8003676:	d100      	bne.n	800367a <HAL_RCC_OscConfig+0x56>
 8003678:	e070      	b.n	800375c <HAL_RCC_OscConfig+0x138>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d000      	beq.n	8003684 <HAL_RCC_OscConfig+0x60>
 8003682:	e06b      	b.n	800375c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e2d8      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_OscConfig+0x7c>
 8003690:	4baf      	ldr	r3, [pc, #700]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4bae      	ldr	r3, [pc, #696]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	0249      	lsls	r1, r1, #9
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e02f      	b.n	8003700 <HAL_RCC_OscConfig+0xdc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCC_OscConfig+0x9e>
 80036a8:	4ba9      	ldr	r3, [pc, #676]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4ba8      	ldr	r3, [pc, #672]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036ae:	49a9      	ldr	r1, [pc, #676]	; (8003954 <HAL_RCC_OscConfig+0x330>)
 80036b0:	400a      	ands	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	4ba6      	ldr	r3, [pc, #664]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4ba5      	ldr	r3, [pc, #660]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036ba:	49a7      	ldr	r1, [pc, #668]	; (8003958 <HAL_RCC_OscConfig+0x334>)
 80036bc:	400a      	ands	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e01e      	b.n	8003700 <HAL_RCC_OscConfig+0xdc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d10e      	bne.n	80036e8 <HAL_RCC_OscConfig+0xc4>
 80036ca:	4ba1      	ldr	r3, [pc, #644]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4ba0      	ldr	r3, [pc, #640]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	02c9      	lsls	r1, r1, #11
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	4b9d      	ldr	r3, [pc, #628]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b9c      	ldr	r3, [pc, #624]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036de:	2180      	movs	r1, #128	; 0x80
 80036e0:	0249      	lsls	r1, r1, #9
 80036e2:	430a      	orrs	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0xdc>
 80036e8:	4b99      	ldr	r3, [pc, #612]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b98      	ldr	r3, [pc, #608]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036ee:	4999      	ldr	r1, [pc, #612]	; (8003954 <HAL_RCC_OscConfig+0x330>)
 80036f0:	400a      	ands	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	4b96      	ldr	r3, [pc, #600]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b95      	ldr	r3, [pc, #596]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80036fa:	4997      	ldr	r1, [pc, #604]	; (8003958 <HAL_RCC_OscConfig+0x334>)
 80036fc:	400a      	ands	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d014      	beq.n	8003732 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7ff fd22 	bl	8003150 <HAL_GetTick>
 800370c:	0003      	movs	r3, r0
 800370e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003712:	f7ff fd1d 	bl	8003150 <HAL_GetTick>
 8003716:	0002      	movs	r2, r0
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b64      	cmp	r3, #100	; 0x64
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e28a      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003724:	4b8a      	ldr	r3, [pc, #552]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	029b      	lsls	r3, r3, #10
 800372c:	4013      	ands	r3, r2
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0xee>
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7ff fd0d 	bl	8003150 <HAL_GetTick>
 8003736:	0003      	movs	r3, r0
 8003738:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7ff fd08 	bl	8003150 <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e275      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	4b80      	ldr	r3, [pc, #512]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	029b      	lsls	r3, r3, #10
 8003756:	4013      	ands	r3, r2
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x118>
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2202      	movs	r2, #2
 8003764:	4013      	ands	r3, r2
 8003766:	d100      	bne.n	800376a <HAL_RCC_OscConfig+0x146>
 8003768:	e069      	b.n	800383e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800376a:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	220c      	movs	r2, #12
 8003770:	4013      	ands	r3, r2
 8003772:	d00b      	beq.n	800378c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003774:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	220c      	movs	r2, #12
 800377a:	4013      	ands	r3, r2
 800377c:	2b08      	cmp	r3, #8
 800377e:	d11c      	bne.n	80037ba <HAL_RCC_OscConfig+0x196>
 8003780:	4b73      	ldr	r3, [pc, #460]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	025b      	lsls	r3, r3, #9
 8003788:	4013      	ands	r3, r2
 800378a:	d116      	bne.n	80037ba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378c:	4b70      	ldr	r3, [pc, #448]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2202      	movs	r2, #2
 8003792:	4013      	ands	r3, r2
 8003794:	d005      	beq.n	80037a2 <HAL_RCC_OscConfig+0x17e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e24b      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a2:	4b6b      	ldr	r3, [pc, #428]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	22f8      	movs	r2, #248	; 0xf8
 80037a8:	4393      	bics	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	00da      	lsls	r2, r3, #3
 80037b2:	4b67      	ldr	r3, [pc, #412]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b8:	e041      	b.n	800383e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d024      	beq.n	800380c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c2:	4b63      	ldr	r3, [pc, #396]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80037c8:	2101      	movs	r1, #1
 80037ca:	430a      	orrs	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7ff fcbf 	bl	8003150 <HAL_GetTick>
 80037d2:	0003      	movs	r3, r0
 80037d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d8:	f7ff fcba 	bl	8003150 <HAL_GetTick>
 80037dc:	0002      	movs	r2, r0
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e227      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ea:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2202      	movs	r2, #2
 80037f0:	4013      	ands	r3, r2
 80037f2:	d0f1      	beq.n	80037d8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f4:	4b56      	ldr	r3, [pc, #344]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	22f8      	movs	r2, #248	; 0xf8
 80037fa:	4393      	bics	r3, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00da      	lsls	r2, r3, #3
 8003804:	4b52      	ldr	r3, [pc, #328]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e018      	b.n	800383e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b4f      	ldr	r3, [pc, #316]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003812:	2101      	movs	r1, #1
 8003814:	438a      	bics	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7ff fc9a 	bl	8003150 <HAL_GetTick>
 800381c:	0003      	movs	r3, r0
 800381e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003822:	f7ff fc95 	bl	8003150 <HAL_GetTick>
 8003826:	0002      	movs	r2, r0
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e202      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003834:	4b46      	ldr	r3, [pc, #280]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2202      	movs	r2, #2
 800383a:	4013      	ands	r3, r2
 800383c:	d1f1      	bne.n	8003822 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2208      	movs	r2, #8
 8003844:	4013      	ands	r3, r2
 8003846:	d036      	beq.n	80038b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d019      	beq.n	8003884 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003850:	4b3f      	ldr	r3, [pc, #252]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003854:	4b3e      	ldr	r3, [pc, #248]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003856:	2101      	movs	r1, #1
 8003858:	430a      	orrs	r2, r1
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7ff fc78 	bl	8003150 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003866:	f7ff fc73 	bl	8003150 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1e0      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003878:	4b35      	ldr	r3, [pc, #212]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	2202      	movs	r2, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d0f1      	beq.n	8003866 <HAL_RCC_OscConfig+0x242>
 8003882:	e018      	b.n	80038b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003888:	4b31      	ldr	r3, [pc, #196]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 800388a:	2101      	movs	r1, #1
 800388c:	438a      	bics	r2, r1
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003890:	f7ff fc5e 	bl	8003150 <HAL_GetTick>
 8003894:	0003      	movs	r3, r0
 8003896:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389a:	f7ff fc59 	bl	8003150 <HAL_GetTick>
 800389e:	0002      	movs	r2, r0
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e1c6      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b28      	ldr	r3, [pc, #160]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2202      	movs	r2, #2
 80038b2:	4013      	ands	r3, r2
 80038b4:	d1f1      	bne.n	800389a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2204      	movs	r2, #4
 80038bc:	4013      	ands	r3, r2
 80038be:	d100      	bne.n	80038c2 <HAL_RCC_OscConfig+0x29e>
 80038c0:	e0b4      	b.n	8003a2c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c2:	201f      	movs	r0, #31
 80038c4:	183b      	adds	r3, r7, r0
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ca:	4b21      	ldr	r3, [pc, #132]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	055b      	lsls	r3, r3, #21
 80038d2:	4013      	ands	r3, r2
 80038d4:	d110      	bne.n	80038f8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	0549      	lsls	r1, r1, #21
 80038e0:	430a      	orrs	r2, r1
 80038e2:	61da      	str	r2, [r3, #28]
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	055b      	lsls	r3, r3, #21
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038f2:	183b      	adds	r3, r7, r0
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4013      	ands	r3, r2
 8003902:	d11a      	bne.n	800393a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <HAL_RCC_OscConfig+0x338>)
 800390a:	2180      	movs	r1, #128	; 0x80
 800390c:	0049      	lsls	r1, r1, #1
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7ff fc1d 	bl	8003150 <HAL_GetTick>
 8003916:	0003      	movs	r3, r0
 8003918:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391c:	f7ff fc18 	bl	8003150 <HAL_GetTick>
 8003920:	0002      	movs	r2, r0
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e185      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4013      	ands	r3, r2
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10e      	bne.n	8003960 <HAL_RCC_OscConfig+0x33c>
 8003942:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	4b02      	ldr	r3, [pc, #8]	; (8003950 <HAL_RCC_OscConfig+0x32c>)
 8003948:	2101      	movs	r1, #1
 800394a:	430a      	orrs	r2, r1
 800394c:	621a      	str	r2, [r3, #32]
 800394e:	e035      	b.n	80039bc <HAL_RCC_OscConfig+0x398>
 8003950:	40021000 	.word	0x40021000
 8003954:	fffeffff 	.word	0xfffeffff
 8003958:	fffbffff 	.word	0xfffbffff
 800395c:	40007000 	.word	0x40007000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10c      	bne.n	8003982 <HAL_RCC_OscConfig+0x35e>
 8003968:	4bb6      	ldr	r3, [pc, #728]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 800396a:	6a1a      	ldr	r2, [r3, #32]
 800396c:	4bb5      	ldr	r3, [pc, #724]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 800396e:	2101      	movs	r1, #1
 8003970:	438a      	bics	r2, r1
 8003972:	621a      	str	r2, [r3, #32]
 8003974:	4bb3      	ldr	r3, [pc, #716]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	4bb2      	ldr	r3, [pc, #712]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 800397a:	2104      	movs	r1, #4
 800397c:	438a      	bics	r2, r1
 800397e:	621a      	str	r2, [r3, #32]
 8003980:	e01c      	b.n	80039bc <HAL_RCC_OscConfig+0x398>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b05      	cmp	r3, #5
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x380>
 800398a:	4bae      	ldr	r3, [pc, #696]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 800398c:	6a1a      	ldr	r2, [r3, #32]
 800398e:	4bad      	ldr	r3, [pc, #692]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003990:	2104      	movs	r1, #4
 8003992:	430a      	orrs	r2, r1
 8003994:	621a      	str	r2, [r3, #32]
 8003996:	4bab      	ldr	r3, [pc, #684]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003998:	6a1a      	ldr	r2, [r3, #32]
 800399a:	4baa      	ldr	r3, [pc, #680]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 800399c:	2101      	movs	r1, #1
 800399e:	430a      	orrs	r2, r1
 80039a0:	621a      	str	r2, [r3, #32]
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0x398>
 80039a4:	4ba7      	ldr	r3, [pc, #668]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	4ba6      	ldr	r3, [pc, #664]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 80039aa:	2101      	movs	r1, #1
 80039ac:	438a      	bics	r2, r1
 80039ae:	621a      	str	r2, [r3, #32]
 80039b0:	4ba4      	ldr	r3, [pc, #656]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 80039b2:	6a1a      	ldr	r2, [r3, #32]
 80039b4:	4ba3      	ldr	r3, [pc, #652]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 80039b6:	2104      	movs	r1, #4
 80039b8:	438a      	bics	r2, r1
 80039ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d014      	beq.n	80039ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c4:	f7ff fbc4 	bl	8003150 <HAL_GetTick>
 80039c8:	0003      	movs	r3, r0
 80039ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039cc:	e009      	b.n	80039e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ce:	f7ff fbbf 	bl	8003150 <HAL_GetTick>
 80039d2:	0002      	movs	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	4a9b      	ldr	r2, [pc, #620]	; (8003c48 <HAL_RCC_OscConfig+0x624>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e12b      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	4b98      	ldr	r3, [pc, #608]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	2202      	movs	r2, #2
 80039e8:	4013      	ands	r3, r2
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x3aa>
 80039ec:	e013      	b.n	8003a16 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7ff fbaf 	bl	8003150 <HAL_GetTick>
 80039f2:	0003      	movs	r3, r0
 80039f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f6:	e009      	b.n	8003a0c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7ff fbaa 	bl	8003150 <HAL_GetTick>
 80039fc:	0002      	movs	r2, r0
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	4a91      	ldr	r2, [pc, #580]	; (8003c48 <HAL_RCC_OscConfig+0x624>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e116      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0c:	4b8d      	ldr	r3, [pc, #564]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	2202      	movs	r2, #2
 8003a12:	4013      	ands	r3, r2
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a16:	231f      	movs	r3, #31
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a20:	4b88      	ldr	r3, [pc, #544]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	4b87      	ldr	r3, [pc, #540]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a26:	4989      	ldr	r1, [pc, #548]	; (8003c4c <HAL_RCC_OscConfig+0x628>)
 8003a28:	400a      	ands	r2, r1
 8003a2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2210      	movs	r2, #16
 8003a32:	4013      	ands	r3, r2
 8003a34:	d063      	beq.n	8003afe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d12a      	bne.n	8003a94 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a3e:	4b81      	ldr	r3, [pc, #516]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a42:	4b80      	ldr	r3, [pc, #512]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a44:	2104      	movs	r1, #4
 8003a46:	430a      	orrs	r2, r1
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003a4a:	4b7e      	ldr	r3, [pc, #504]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4e:	4b7d      	ldr	r3, [pc, #500]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a50:	2101      	movs	r1, #1
 8003a52:	430a      	orrs	r2, r1
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7ff fb7b 	bl	8003150 <HAL_GetTick>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a60:	f7ff fb76 	bl	8003150 <HAL_GetTick>
 8003a64:	0002      	movs	r2, r0
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e0e3      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a72:	4b74      	ldr	r3, [pc, #464]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a76:	2202      	movs	r2, #2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d0f1      	beq.n	8003a60 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a7c:	4b71      	ldr	r3, [pc, #452]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	22f8      	movs	r2, #248	; 0xf8
 8003a82:	4393      	bics	r3, r2
 8003a84:	0019      	movs	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	00da      	lsls	r2, r3, #3
 8003a8c:	4b6d      	ldr	r3, [pc, #436]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34
 8003a92:	e034      	b.n	8003afe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	3305      	adds	r3, #5
 8003a9a:	d111      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003a9c:	4b69      	ldr	r3, [pc, #420]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa0:	4b68      	ldr	r3, [pc, #416]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003aa2:	2104      	movs	r1, #4
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003aa8:	4b66      	ldr	r3, [pc, #408]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	22f8      	movs	r2, #248	; 0xf8
 8003aae:	4393      	bics	r3, r2
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	00da      	lsls	r2, r3, #3
 8003ab8:	4b62      	ldr	r3, [pc, #392]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003aba:	430a      	orrs	r2, r1
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34
 8003abe:	e01e      	b.n	8003afe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ac0:	4b60      	ldr	r3, [pc, #384]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac4:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003ac6:	2104      	movs	r1, #4
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003acc:	4b5d      	ldr	r3, [pc, #372]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad0:	4b5c      	ldr	r3, [pc, #368]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad8:	f7ff fb3a 	bl	8003150 <HAL_GetTick>
 8003adc:	0003      	movs	r3, r0
 8003ade:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ae2:	f7ff fb35 	bl	8003150 <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e0a2      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	2202      	movs	r2, #2
 8003afa:	4013      	ands	r3, r2
 8003afc:	d1f1      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d100      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4e4>
 8003b06:	e097      	b.n	8003c38 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b08:	4b4e      	ldr	r3, [pc, #312]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	220c      	movs	r2, #12
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d100      	bne.n	8003b16 <HAL_RCC_OscConfig+0x4f2>
 8003b14:	e06b      	b.n	8003bee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d14c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b49      	ldr	r3, [pc, #292]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b48      	ldr	r3, [pc, #288]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b24:	494a      	ldr	r1, [pc, #296]	; (8003c50 <HAL_RCC_OscConfig+0x62c>)
 8003b26:	400a      	ands	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7ff fb11 	bl	8003150 <HAL_GetTick>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b34:	f7ff fb0c 	bl	8003150 <HAL_GetTick>
 8003b38:	0002      	movs	r2, r0
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e079      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b46:	4b3f      	ldr	r3, [pc, #252]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	049b      	lsls	r3, r3, #18
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b52:	4b3c      	ldr	r3, [pc, #240]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	220f      	movs	r2, #15
 8003b58:	4393      	bics	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b62:	430a      	orrs	r2, r1
 8003b64:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a3a      	ldr	r2, [pc, #232]	; (8003c54 <HAL_RCC_OscConfig+0x630>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	0019      	movs	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	4b32      	ldr	r3, [pc, #200]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b30      	ldr	r3, [pc, #192]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	0449      	lsls	r1, r1, #17
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7ff fadf 	bl	8003150 <HAL_GetTick>
 8003b92:	0003      	movs	r3, r0
 8003b94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b98:	f7ff fada 	bl	8003150 <HAL_GetTick>
 8003b9c:	0002      	movs	r2, r0
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e047      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003baa:	4b26      	ldr	r3, [pc, #152]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	049b      	lsls	r3, r3, #18
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x574>
 8003bb6:	e03f      	b.n	8003c38 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb8:	4b22      	ldr	r3, [pc, #136]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003bbe:	4924      	ldr	r1, [pc, #144]	; (8003c50 <HAL_RCC_OscConfig+0x62c>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7ff fac4 	bl	8003150 <HAL_GetTick>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bce:	f7ff fabf 	bl	8003150 <HAL_GetTick>
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e02c      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	049b      	lsls	r3, r3, #18
 8003be8:	4013      	ands	r3, r2
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x5aa>
 8003bec:	e024      	b.n	8003c38 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e01f      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_RCC_OscConfig+0x620>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	025b      	lsls	r3, r3, #9
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d10e      	bne.n	8003c34 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	220f      	movs	r2, #15
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	23f0      	movs	r3, #240	; 0xf0
 8003c28:	039b      	lsls	r3, r3, #14
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b008      	add	sp, #32
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	40021000 	.word	0x40021000
 8003c48:	00001388 	.word	0x00001388
 8003c4c:	efffffff 	.word	0xefffffff
 8003c50:	feffffff 	.word	0xfeffffff
 8003c54:	ffc2ffff 	.word	0xffc2ffff

08003c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b3      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b5b      	ldr	r3, [pc, #364]	; (8003ddc <HAL_RCC_ClockConfig+0x184>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2201      	movs	r2, #1
 8003c72:	4013      	ands	r3, r2
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d911      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b58      	ldr	r3, [pc, #352]	; (8003ddc <HAL_RCC_ClockConfig+0x184>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	4393      	bics	r3, r2
 8003c82:	0019      	movs	r1, r3
 8003c84:	4b55      	ldr	r3, [pc, #340]	; (8003ddc <HAL_RCC_ClockConfig+0x184>)
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <HAL_RCC_ClockConfig+0x184>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2201      	movs	r2, #1
 8003c92:	4013      	ands	r3, r2
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e09a      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d015      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2204      	movs	r2, #4
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d006      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003cb2:	4b4b      	ldr	r3, [pc, #300]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003cb8:	21e0      	movs	r1, #224	; 0xe0
 8003cba:	00c9      	lsls	r1, r1, #3
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc0:	4b47      	ldr	r3, [pc, #284]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	22f0      	movs	r2, #240	; 0xf0
 8003cc6:	4393      	bics	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d040      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b3e      	ldr	r3, [pc, #248]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	029b      	lsls	r3, r3, #10
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d114      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e06e      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	4b38      	ldr	r3, [pc, #224]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	049b      	lsls	r3, r3, #18
 8003d06:	4013      	ands	r3, r2
 8003d08:	d108      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e062      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0e:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2202      	movs	r2, #2
 8003d14:	4013      	ands	r3, r2
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e05b      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d1c:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2203      	movs	r2, #3
 8003d22:	4393      	bics	r3, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d30:	f7ff fa0e 	bl	8003150 <HAL_GetTick>
 8003d34:	0003      	movs	r3, r0
 8003d36:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d38:	e009      	b.n	8003d4e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d3a:	f7ff fa09 	bl	8003150 <HAL_GetTick>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	4a27      	ldr	r2, [pc, #156]	; (8003de4 <HAL_RCC_ClockConfig+0x18c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e042      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	220c      	movs	r2, #12
 8003d54:	401a      	ands	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d1ec      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d60:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <HAL_RCC_ClockConfig+0x184>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	4013      	ands	r3, r2
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d211      	bcs.n	8003d92 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_RCC_ClockConfig+0x184>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2201      	movs	r2, #1
 8003d74:	4393      	bics	r3, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_RCC_ClockConfig+0x184>)
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d80:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_RCC_ClockConfig+0x184>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2201      	movs	r2, #1
 8003d86:	4013      	ands	r3, r2
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e020      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2204      	movs	r2, #4
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4a11      	ldr	r2, [pc, #68]	; (8003de8 <HAL_RCC_ClockConfig+0x190>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	0019      	movs	r1, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003db0:	f000 f820 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003db4:	0001      	movs	r1, r0
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_RCC_ClockConfig+0x188>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_RCC_ClockConfig+0x194>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	000a      	movs	r2, r1
 8003dc6:	40da      	lsrs	r2, r3
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x198>)
 8003dca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7fe fa0b 	bl	80021e8 <HAL_InitTick>
  
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40022000 	.word	0x40022000
 8003de0:	40021000 	.word	0x40021000
 8003de4:	00001388 	.word	0x00001388
 8003de8:	fffff8ff 	.word	0xfffff8ff
 8003dec:	0800505c 	.word	0x0800505c
 8003df0:	20000000 	.word	0x20000000

08003df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b08f      	sub	sp, #60	; 0x3c
 8003df8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003dfa:	2314      	movs	r3, #20
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	4a2b      	ldr	r2, [pc, #172]	; (8003eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e02:	c313      	stmia	r3!, {r0, r1, r4}
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	4a29      	ldr	r2, [pc, #164]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e0e:	c313      	stmia	r3!, {r0, r1, r4}
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	220c      	movs	r2, #12
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d002      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0x4a>
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d003      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x50>
 8003e3c:	e02d      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e3e:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e42:	e02d      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e46:	0c9b      	lsrs	r3, r3, #18
 8003e48:	220f      	movs	r2, #15
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2214      	movs	r2, #20
 8003e4e:	18ba      	adds	r2, r7, r2
 8003e50:	5cd3      	ldrb	r3, [r2, r3]
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	220f      	movs	r2, #15
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	1d3a      	adds	r2, r7, #4
 8003e5e:	5cd3      	ldrb	r3, [r2, r3]
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	025b      	lsls	r3, r3, #9
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e6e:	4812      	ldr	r0, [pc, #72]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e70:	f7fc f952 	bl	8000118 <__udivsi3>
 8003e74:	0003      	movs	r3, r0
 8003e76:	001a      	movs	r2, r3
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	4353      	muls	r3, r2
 8003e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7e:	e009      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e82:	000a      	movs	r2, r1
 8003e84:	0152      	lsls	r2, r2, #5
 8003e86:	1a52      	subs	r2, r2, r1
 8003e88:	0193      	lsls	r3, r2, #6
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	185b      	adds	r3, r3, r1
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e98:	e002      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e9e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b00f      	add	sp, #60	; 0x3c
 8003ea8:	bd90      	pop	{r4, r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	0800503c 	.word	0x0800503c
 8003eb0:	0800504c 	.word	0x0800504c
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	007a1200 	.word	0x007a1200

08003ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec0:	4b02      	ldr	r3, [pc, #8]	; (8003ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	20000000 	.word	0x20000000

08003ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ed4:	f7ff fff2 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003ed8:	0001      	movs	r1, r0
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	2207      	movs	r2, #7
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	40d9      	lsrs	r1, r3
 8003eea:	000b      	movs	r3, r1
}    
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	0800506c 	.word	0x0800506c

08003efc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <HAL_RCC_GetClockConfig+0x4c>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2203      	movs	r2, #3
 8003f12:	401a      	ands	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_GetClockConfig+0x4c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	22f0      	movs	r2, #240	; 0xf0
 8003f1e:	401a      	ands	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <HAL_RCC_GetClockConfig+0x4c>)
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	23e0      	movs	r3, #224	; 0xe0
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCC_GetClockConfig+0x50>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2201      	movs	r2, #1
 8003f38:	401a      	ands	r2, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	601a      	str	r2, [r3, #0]
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b002      	add	sp, #8
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40022000 	.word	0x40022000

08003f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e042      	b.n	8003fe8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	223d      	movs	r2, #61	; 0x3d
 8003f66:	5c9b      	ldrb	r3, [r3, r2]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	223c      	movs	r2, #60	; 0x3c
 8003f72:	2100      	movs	r1, #0
 8003f74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7fe faab 	bl	80024d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	223d      	movs	r2, #61	; 0x3d
 8003f82:	2102      	movs	r1, #2
 8003f84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	0019      	movs	r1, r3
 8003f90:	0010      	movs	r0, r2
 8003f92:	f000 fa79 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2246      	movs	r2, #70	; 0x46
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	223e      	movs	r2, #62	; 0x3e
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223f      	movs	r2, #63	; 0x3f
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2240      	movs	r2, #64	; 0x40
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2241      	movs	r2, #65	; 0x41
 8003fba:	2101      	movs	r1, #1
 8003fbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2242      	movs	r2, #66	; 0x42
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	5499      	strb	r1, [r3, r2]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2243      	movs	r2, #67	; 0x43
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2244      	movs	r2, #68	; 0x44
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2245      	movs	r2, #69	; 0x45
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	223d      	movs	r2, #61	; 0x3d
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	0018      	movs	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	223d      	movs	r2, #61	; 0x3d
 8003ffc:	5c9b      	ldrb	r3, [r3, r2]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d001      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e035      	b.n	8004074 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	223d      	movs	r2, #61	; 0x3d
 800400c:	2102      	movs	r1, #2
 800400e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2101      	movs	r1, #1
 800401c:	430a      	orrs	r2, r1
 800401e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <HAL_TIM_Base_Start_IT+0x8c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_TIM_Base_Start_IT+0x4e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a14      	ldr	r2, [pc, #80]	; (8004080 <HAL_TIM_Base_Start_IT+0x90>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIM_Base_Start_IT+0x4e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a12      	ldr	r2, [pc, #72]	; (8004084 <HAL_TIM_Base_Start_IT+0x94>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d111      	bne.n	8004062 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2207      	movs	r2, #7
 8004046:	4013      	ands	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b06      	cmp	r3, #6
 800404e:	d010      	beq.n	8004072 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2101      	movs	r1, #1
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	e007      	b.n	8004072 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b004      	add	sp, #16
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40014000 	.word	0x40014000

08004088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2202      	movs	r2, #2
 8004098:	4013      	ands	r3, r2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d124      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2202      	movs	r2, #2
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d11d      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2203      	movs	r2, #3
 80040b2:	4252      	negs	r2, r2
 80040b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2203      	movs	r2, #3
 80040c4:	4013      	ands	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 f9c4 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 80040d0:	e007      	b.n	80040e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f000 f9b7 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	0018      	movs	r0, r3
 80040de:	f000 f9c3 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2204      	movs	r2, #4
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d125      	bne.n	8004142 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2204      	movs	r2, #4
 80040fe:	4013      	ands	r3, r2
 8004100:	2b04      	cmp	r3, #4
 8004102:	d11e      	bne.n	8004142 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2205      	movs	r2, #5
 800410a:	4252      	negs	r2, r2
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	23c0      	movs	r3, #192	; 0xc0
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4013      	ands	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	0018      	movs	r0, r3
 8004126:	f000 f997 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 800412a:	e007      	b.n	800413c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	0018      	movs	r0, r3
 8004130:	f000 f98a 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	0018      	movs	r0, r3
 8004138:	f000 f996 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2208      	movs	r2, #8
 800414a:	4013      	ands	r3, r2
 800414c:	2b08      	cmp	r3, #8
 800414e:	d124      	bne.n	800419a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2208      	movs	r2, #8
 8004158:	4013      	ands	r3, r2
 800415a:	2b08      	cmp	r3, #8
 800415c:	d11d      	bne.n	800419a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2209      	movs	r2, #9
 8004164:	4252      	negs	r2, r2
 8004166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2204      	movs	r2, #4
 800416c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	2203      	movs	r2, #3
 8004176:	4013      	ands	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 f96b 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 8004182:	e007      	b.n	8004194 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	0018      	movs	r0, r3
 8004188:	f000 f95e 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0018      	movs	r0, r3
 8004190:	f000 f96a 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2210      	movs	r2, #16
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d125      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2210      	movs	r2, #16
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d11e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2211      	movs	r2, #17
 80041bc:	4252      	negs	r2, r2
 80041be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2208      	movs	r2, #8
 80041c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	23c0      	movs	r3, #192	; 0xc0
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4013      	ands	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	0018      	movs	r0, r3
 80041d8:	f000 f93e 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 80041dc:	e007      	b.n	80041ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 f931 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f000 f93d 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2201      	movs	r2, #1
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d10f      	bne.n	8004222 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	4013      	ands	r3, r2
 800420c:	2b01      	cmp	r3, #1
 800420e:	d108      	bne.n	8004222 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2202      	movs	r2, #2
 8004216:	4252      	negs	r2, r2
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f7fc f8fb 	bl	8000418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	4013      	ands	r3, r2
 800422c:	2b80      	cmp	r3, #128	; 0x80
 800422e:	d10f      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	4013      	ands	r3, r2
 800423a:	2b80      	cmp	r3, #128	; 0x80
 800423c:	d108      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2281      	movs	r2, #129	; 0x81
 8004244:	4252      	negs	r2, r2
 8004246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	0018      	movs	r0, r3
 800424c:	f000 fa8c 	bl	8004768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	4013      	ands	r3, r2
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d10f      	bne.n	800427e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2240      	movs	r2, #64	; 0x40
 8004266:	4013      	ands	r3, r2
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d108      	bne.n	800427e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2241      	movs	r2, #65	; 0x41
 8004272:	4252      	negs	r2, r2
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0018      	movs	r0, r3
 800427a:	f000 f8fd 	bl	8004478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2220      	movs	r2, #32
 8004286:	4013      	ands	r3, r2
 8004288:	2b20      	cmp	r3, #32
 800428a:	d10f      	bne.n	80042ac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	4013      	ands	r3, r2
 8004296:	2b20      	cmp	r3, #32
 8004298:	d108      	bne.n	80042ac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2221      	movs	r2, #33	; 0x21
 80042a0:	4252      	negs	r2, r2
 80042a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 fa56 	bl	8004758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	223c      	movs	r2, #60	; 0x3c
 80042c2:	5c9b      	ldrb	r3, [r3, r2]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_ConfigClockSource+0x18>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0b7      	b.n	800443c <HAL_TIM_ConfigClockSource+0x188>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	223c      	movs	r2, #60	; 0x3c
 80042d0:	2101      	movs	r1, #1
 80042d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	223d      	movs	r2, #61	; 0x3d
 80042d8:	2102      	movs	r1, #2
 80042da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2277      	movs	r2, #119	; 0x77
 80042e8:	4393      	bics	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a55      	ldr	r2, [pc, #340]	; (8004444 <HAL_TIM_ConfigClockSource+0x190>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	0192      	lsls	r2, r2, #6
 8004304:	4293      	cmp	r3, r2
 8004306:	d040      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xd6>
 8004308:	2280      	movs	r2, #128	; 0x80
 800430a:	0192      	lsls	r2, r2, #6
 800430c:	4293      	cmp	r3, r2
 800430e:	d900      	bls.n	8004312 <HAL_TIM_ConfigClockSource+0x5e>
 8004310:	e088      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004312:	2280      	movs	r2, #128	; 0x80
 8004314:	0152      	lsls	r2, r2, #5
 8004316:	4293      	cmp	r3, r2
 8004318:	d100      	bne.n	800431c <HAL_TIM_ConfigClockSource+0x68>
 800431a:	e085      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
 800431c:	2280      	movs	r2, #128	; 0x80
 800431e:	0152      	lsls	r2, r2, #5
 8004320:	4293      	cmp	r3, r2
 8004322:	d900      	bls.n	8004326 <HAL_TIM_ConfigClockSource+0x72>
 8004324:	e07e      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004326:	2b70      	cmp	r3, #112	; 0x70
 8004328:	d018      	beq.n	800435c <HAL_TIM_ConfigClockSource+0xa8>
 800432a:	d900      	bls.n	800432e <HAL_TIM_ConfigClockSource+0x7a>
 800432c:	e07a      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 800432e:	2b60      	cmp	r3, #96	; 0x60
 8004330:	d04f      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x11e>
 8004332:	d900      	bls.n	8004336 <HAL_TIM_ConfigClockSource+0x82>
 8004334:	e076      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004336:	2b50      	cmp	r3, #80	; 0x50
 8004338:	d03b      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0xfe>
 800433a:	d900      	bls.n	800433e <HAL_TIM_ConfigClockSource+0x8a>
 800433c:	e072      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d057      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x13e>
 8004342:	d900      	bls.n	8004346 <HAL_TIM_ConfigClockSource+0x92>
 8004344:	e06e      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004346:	2b30      	cmp	r3, #48	; 0x30
 8004348:	d063      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15e>
 800434a:	d86b      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d060      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15e>
 8004350:	d868      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d05d      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15e>
 8004356:	2b10      	cmp	r3, #16
 8004358:	d05b      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800435a:	e063      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f000 f97c 	bl	8004668 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2277      	movs	r2, #119	; 0x77
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	609a      	str	r2, [r3, #8]
      break;
 8004388:	e04f      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f000 f965 	bl	8004668 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	01c9      	lsls	r1, r1, #7
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
      break;
 80043b0:	e03b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	001a      	movs	r2, r3
 80043c0:	f000 f8d8 	bl	8004574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2150      	movs	r1, #80	; 0x50
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 f932 	bl	8004634 <TIM_ITRx_SetConfig>
      break;
 80043d0:	e02b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	001a      	movs	r2, r3
 80043e0:	f000 f8f6 	bl	80045d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2160      	movs	r1, #96	; 0x60
 80043ea:	0018      	movs	r0, r3
 80043ec:	f000 f922 	bl	8004634 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e01b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	001a      	movs	r2, r3
 8004400:	f000 f8b8 	bl	8004574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	0018      	movs	r0, r3
 800440c:	f000 f912 	bl	8004634 <TIM_ITRx_SetConfig>
      break;
 8004410:	e00b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0019      	movs	r1, r3
 800441c:	0010      	movs	r0, r2
 800441e:	f000 f909 	bl	8004634 <TIM_ITRx_SetConfig>
        break;
 8004422:	e002      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	e000      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004428:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	223d      	movs	r2, #61	; 0x3d
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	223c      	movs	r2, #60	; 0x3c
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b004      	add	sp, #16
 8004442:	bd80      	pop	{r7, pc}
 8004444:	ffff00ff 	.word	0xffff00ff

08004448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004450:	46c0      	nop			; (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b002      	add	sp, #8
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}

08004488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <TIM_Base_SetConfig+0xd0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_Base_SetConfig+0x20>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a2e      	ldr	r2, [pc, #184]	; (800455c <TIM_Base_SetConfig+0xd4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2270      	movs	r2, #112	; 0x70
 80044ac:	4393      	bics	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a26      	ldr	r2, [pc, #152]	; (8004558 <TIM_Base_SetConfig+0xd0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a25      	ldr	r2, [pc, #148]	; (800455c <TIM_Base_SetConfig+0xd4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00f      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a24      	ldr	r2, [pc, #144]	; (8004560 <TIM_Base_SetConfig+0xd8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a23      	ldr	r2, [pc, #140]	; (8004564 <TIM_Base_SetConfig+0xdc>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a22      	ldr	r2, [pc, #136]	; (8004568 <TIM_Base_SetConfig+0xe0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a21      	ldr	r2, [pc, #132]	; (800456c <TIM_Base_SetConfig+0xe4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a20      	ldr	r2, [pc, #128]	; (8004570 <TIM_Base_SetConfig+0xe8>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2280      	movs	r2, #128	; 0x80
 8004500:	4393      	bics	r3, r2
 8004502:	001a      	movs	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <TIM_Base_SetConfig+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0xba>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <TIM_Base_SetConfig+0xdc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0xba>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <TIM_Base_SetConfig+0xe0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0xba>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a0b      	ldr	r2, [pc, #44]	; (800456c <TIM_Base_SetConfig+0xe4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d103      	bne.n	800454a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	615a      	str	r2, [r3, #20]
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b004      	add	sp, #16
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40002000 	.word	0x40002000
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800
 8004570:	fffffcff 	.word	0xfffffcff

08004574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	2201      	movs	r2, #1
 800458c:	4393      	bics	r3, r2
 800458e:	001a      	movs	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	22f0      	movs	r2, #240	; 0xf0
 800459e:	4393      	bics	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	220a      	movs	r2, #10
 80045b0:	4393      	bics	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b006      	add	sp, #24
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	2210      	movs	r2, #16
 80045e2:	4393      	bics	r3, r2
 80045e4:	001a      	movs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <TIM_TI2_ConfigInputStage+0x60>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	031b      	lsls	r3, r3, #12
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	22a0      	movs	r2, #160	; 0xa0
 800460c:	4393      	bics	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b006      	add	sp, #24
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	ffff0fff 	.word	0xffff0fff

08004634 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2270      	movs	r2, #112	; 0x70
 8004648:	4393      	bics	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	2207      	movs	r2, #7
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	609a      	str	r2, [r3, #8]
}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	46bd      	mov	sp, r7
 8004662:	b004      	add	sp, #16
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <TIM_ETR_SetConfig+0x3c>)
 8004680:	4013      	ands	r3, r2
 8004682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	021a      	lsls	r2, r3, #8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	431a      	orrs	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	609a      	str	r2, [r3, #8]
}
 800469c:	46c0      	nop			; (mov r8, r8)
 800469e:	46bd      	mov	sp, r7
 80046a0:	b006      	add	sp, #24
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	ffff00ff 	.word	0xffff00ff

080046a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	223c      	movs	r2, #60	; 0x3c
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046bc:	2302      	movs	r3, #2
 80046be:	e041      	b.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	223c      	movs	r2, #60	; 0x3c
 80046c4:	2101      	movs	r1, #1
 80046c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	223d      	movs	r2, #61	; 0x3d
 80046cc:	2102      	movs	r1, #2
 80046ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2270      	movs	r2, #112	; 0x70
 80046e4:	4393      	bics	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a13      	ldr	r2, [pc, #76]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a11      	ldr	r2, [pc, #68]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a10      	ldr	r2, [pc, #64]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d10c      	bne.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	4393      	bics	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	4313      	orrs	r3, r2
 8004728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	223d      	movs	r2, #61	; 0x3d
 8004736:	2101      	movs	r1, #1
 8004738:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	223c      	movs	r2, #60	; 0x3c
 800473e:	2100      	movs	r1, #0
 8004740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b004      	add	sp, #16
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40000400 	.word	0x40000400
 8004754:	40014000 	.word	0x40014000

08004758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b002      	add	sp, #8
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004770:	46c0      	nop			; (mov r8, r8)
 8004772:	46bd      	mov	sp, r7
 8004774:	b002      	add	sp, #8
 8004776:	bd80      	pop	{r7, pc}

08004778 <_ZdlPv>:
 8004778:	b510      	push	{r4, lr}
 800477a:	f000 fabd 	bl	8004cf8 <free>
 800477e:	bd10      	pop	{r4, pc}

08004780 <_Znwj>:
 8004780:	b510      	push	{r4, lr}
 8004782:	1e04      	subs	r4, r0, #0
 8004784:	d100      	bne.n	8004788 <_Znwj+0x8>
 8004786:	3401      	adds	r4, #1
 8004788:	0020      	movs	r0, r4
 800478a:	f000 faab 	bl	8004ce4 <malloc>
 800478e:	2800      	cmp	r0, #0
 8004790:	d107      	bne.n	80047a2 <_Znwj+0x22>
 8004792:	f000 fa6f 	bl	8004c74 <_ZSt15get_new_handlerv>
 8004796:	2800      	cmp	r0, #0
 8004798:	d101      	bne.n	800479e <_Znwj+0x1e>
 800479a:	f000 fa71 	bl	8004c80 <abort>
 800479e:	4780      	blx	r0
 80047a0:	e7f2      	b.n	8004788 <_Znwj+0x8>
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <_ZNSaIcEC1Ev>:
 80047a4:	4770      	bx	lr

080047a6 <_ZNSaIcED1Ev>:
 80047a6:	4770      	bx	lr

080047a8 <_ZSt17__throw_bad_allocv>:
 80047a8:	b510      	push	{r4, lr}
 80047aa:	f000 fa69 	bl	8004c80 <abort>

080047ae <_ZSt19__throw_logic_errorPKc>:
 80047ae:	b510      	push	{r4, lr}
 80047b0:	f000 fa66 	bl	8004c80 <abort>

080047b4 <_ZSt20__throw_length_errorPKc>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	f000 fa63 	bl	8004c80 <abort>
	...

080047bc <_ZSt24__throw_out_of_range_fmtPKcz>:
 80047bc:	b40f      	push	{r0, r1, r2, r3}
 80047be:	2318      	movs	r3, #24
 80047c0:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	18fc      	adds	r4, r7, r3
 80047c6:	cc20      	ldmia	r4!, {r5}
 80047c8:	0028      	movs	r0, r5
 80047ca:	f7fb fc9d 	bl	8000108 <strlen>
 80047ce:	2380      	movs	r3, #128	; 0x80
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	18c1      	adds	r1, r0, r3
 80047d4:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <_ZSt24__throw_out_of_range_fmtPKcz+0x38>)
 80047d6:	002a      	movs	r2, r5
 80047d8:	18c0      	adds	r0, r0, r3
 80047da:	466b      	mov	r3, sp
 80047dc:	08c0      	lsrs	r0, r0, #3
 80047de:	00c0      	lsls	r0, r0, #3
 80047e0:	1a1b      	subs	r3, r3, r0
 80047e2:	469d      	mov	sp, r3
 80047e4:	0023      	movs	r3, r4
 80047e6:	4668      	mov	r0, sp
 80047e8:	607c      	str	r4, [r7, #4]
 80047ea:	f000 f85f 	bl	80048ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80047ee:	f000 fa47 	bl	8004c80 <abort>
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	00000207 	.word	0x00000207

080047f8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fa:	0006      	movs	r6, r0
 80047fc:	000c      	movs	r4, r1
 80047fe:	b09d      	sub	sp, #116	; 0x74
 8004800:	af00      	add	r7, sp, #0
 8004802:	1ba4      	subs	r4, r4, r6
 8004804:	2269      	movs	r2, #105	; 0x69
 8004806:	490f      	ldr	r1, [pc, #60]	; (8004844 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x4c>)
 8004808:	1d38      	adds	r0, r7, #4
 800480a:	f000 fa7f 	bl	8004d0c <memcpy>
 800480e:	0023      	movs	r3, r4
 8004810:	466a      	mov	r2, sp
 8004812:	3370      	adds	r3, #112	; 0x70
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	469d      	mov	sp, r3
 800481c:	466d      	mov	r5, sp
 800481e:	2268      	movs	r2, #104	; 0x68
 8004820:	1d39      	adds	r1, r7, #4
 8004822:	0028      	movs	r0, r5
 8004824:	f000 fa72 	bl	8004d0c <memcpy>
 8004828:	0028      	movs	r0, r5
 800482a:	0022      	movs	r2, r4
 800482c:	0031      	movs	r1, r6
 800482e:	3068      	adds	r0, #104	; 0x68
 8004830:	f000 fa6c 	bl	8004d0c <memcpy>
 8004834:	2300      	movs	r3, #0
 8004836:	192c      	adds	r4, r5, r4
 8004838:	3468      	adds	r4, #104	; 0x68
 800483a:	0028      	movs	r0, r5
 800483c:	7023      	strb	r3, [r4, #0]
 800483e:	f7ff ffb6 	bl	80047ae <_ZSt19__throw_logic_errorPKc>
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	08005090 	.word	0x08005090

08004848 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8004848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	b084      	sub	sp, #16
 8004850:	466e      	mov	r6, sp
 8004852:	0033      	movs	r3, r6
 8004854:	330c      	adds	r3, #12
 8004856:	0014      	movs	r4, r2
 8004858:	001d      	movs	r5, r3
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	0020      	movs	r0, r4
 8004862:	210a      	movs	r1, #10
 8004864:	f7fb fcde 	bl	8000224 <__aeabi_uidivmod>
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x60>)
 800486a:	3d01      	subs	r5, #1
 800486c:	5c5b      	ldrb	r3, [r3, r1]
 800486e:	0020      	movs	r0, r4
 8004870:	702b      	strb	r3, [r5, #0]
 8004872:	210a      	movs	r1, #10
 8004874:	60bc      	str	r4, [r7, #8]
 8004876:	f7fb fc4f 	bl	8000118 <__udivsi3>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	0004      	movs	r4, r0
 800487e:	2b09      	cmp	r3, #9
 8004880:	d8ee      	bhi.n	8004860 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1b5d      	subs	r5, r3, r5
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	429d      	cmp	r5, r3
 800488a:	d809      	bhi.n	80048a0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x58>
 800488c:	1b71      	subs	r1, r6, r5
 800488e:	002a      	movs	r2, r5
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	310c      	adds	r1, #12
 8004894:	f000 fa3a 	bl	8004d0c <memcpy>
 8004898:	0028      	movs	r0, r5
 800489a:	46bd      	mov	sp, r7
 800489c:	b005      	add	sp, #20
 800489e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a0:	2501      	movs	r5, #1
 80048a2:	426d      	negs	r5, r5
 80048a4:	e7f8      	b.n	8004898 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x50>
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	080050f9 	.word	0x080050f9

080048ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80048ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ae:	0007      	movs	r7, r0
 80048b0:	0004      	movs	r4, r0
 80048b2:	3901      	subs	r1, #1
 80048b4:	0015      	movs	r5, r2
 80048b6:	1842      	adds	r2, r0, r1
 80048b8:	9201      	str	r2, [sp, #4]
 80048ba:	782a      	ldrb	r2, [r5, #0]
 80048bc:	2a00      	cmp	r2, #0
 80048be:	d033      	beq.n	8004928 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7c>
 80048c0:	9901      	ldr	r1, [sp, #4]
 80048c2:	428c      	cmp	r4, r1
 80048c4:	d22c      	bcs.n	8004920 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80048c6:	2a25      	cmp	r2, #37	; 0x25
 80048c8:	d108      	bne.n	80048dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x30>
 80048ca:	786a      	ldrb	r2, [r5, #1]
 80048cc:	2a73      	cmp	r2, #115	; 0x73
 80048ce:	d00a      	beq.n	80048e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 80048d0:	2a7a      	cmp	r2, #122	; 0x7a
 80048d2:	d015      	beq.n	8004900 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 80048d4:	3a25      	subs	r2, #37	; 0x25
 80048d6:	4251      	negs	r1, r2
 80048d8:	414a      	adcs	r2, r1
 80048da:	18ad      	adds	r5, r5, r2
 80048dc:	782a      	ldrb	r2, [r5, #0]
 80048de:	3501      	adds	r5, #1
 80048e0:	7022      	strb	r2, [r4, #0]
 80048e2:	3401      	adds	r4, #1
 80048e4:	e7e9      	b.n	80048ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80048e6:	0022      	movs	r2, r4
 80048e8:	cb02      	ldmia	r3!, {r1}
 80048ea:	7808      	ldrb	r0, [r1, #0]
 80048ec:	0014      	movs	r4, r2
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d01f      	beq.n	8004932 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x86>
 80048f2:	9c01      	ldr	r4, [sp, #4]
 80048f4:	4294      	cmp	r4, r2
 80048f6:	d01a      	beq.n	800492e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x82>
 80048f8:	7010      	strb	r0, [r2, #0]
 80048fa:	3101      	adds	r1, #1
 80048fc:	3201      	adds	r2, #1
 80048fe:	e7f4      	b.n	80048ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3e>
 8004900:	78aa      	ldrb	r2, [r5, #2]
 8004902:	2a75      	cmp	r2, #117	; 0x75
 8004904:	d1ea      	bne.n	80048dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x30>
 8004906:	001e      	movs	r6, r3
 8004908:	9b01      	ldr	r3, [sp, #4]
 800490a:	0020      	movs	r0, r4
 800490c:	ce04      	ldmia	r6!, {r2}
 800490e:	1b19      	subs	r1, r3, r4
 8004910:	f7ff ff9a 	bl	8004848 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8004914:	2800      	cmp	r0, #0
 8004916:	dd03      	ble.n	8004920 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 8004918:	0033      	movs	r3, r6
 800491a:	1824      	adds	r4, r4, r0
 800491c:	3503      	adds	r5, #3
 800491e:	e7cc      	b.n	80048ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8004920:	0021      	movs	r1, r4
 8004922:	0038      	movs	r0, r7
 8004924:	f7ff ff68 	bl	80047f8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8004928:	1be0      	subs	r0, r4, r7
 800492a:	7022      	strb	r2, [r4, #0]
 800492c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800492e:	9901      	ldr	r1, [sp, #4]
 8004930:	e7f7      	b.n	8004922 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8004932:	3502      	adds	r5, #2
 8004934:	e7c1      	b.n	80048ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>

08004936 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8004936:	b510      	push	{r4, lr}
 8004938:	2a00      	cmp	r2, #0
 800493a:	d001      	beq.n	8004940 <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
 800493c:	f000 f9e6 	bl	8004d0c <memcpy>
 8004940:	bd10      	pop	{r4, pc}
	...

08004944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8004944:	2080      	movs	r0, #128	; 0x80
 8004946:	680b      	ldr	r3, [r1, #0]
 8004948:	b510      	push	{r4, lr}
 800494a:	05c0      	lsls	r0, r0, #23
 800494c:	4283      	cmp	r3, r0
 800494e:	d302      	bcc.n	8004956 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x12>
 8004950:	480a      	ldr	r0, [pc, #40]	; (800497c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 8004952:	f7ff ff2f 	bl	80047b4 <_ZSt20__throw_length_errorPKc>
 8004956:	4293      	cmp	r3, r2
 8004958:	d905      	bls.n	8004966 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 800495a:	0052      	lsls	r2, r2, #1
 800495c:	4293      	cmp	r3, r2
 800495e:	d202      	bcs.n	8004966 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8004960:	4282      	cmp	r2, r0
 8004962:	d205      	bcs.n	8004970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004964:	600a      	str	r2, [r1, #0]
 8004966:	6808      	ldr	r0, [r1, #0]
 8004968:	3001      	adds	r0, #1
 800496a:	d504      	bpl.n	8004976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x32>
 800496c:	f7ff ff1c 	bl	80047a8 <_ZSt17__throw_bad_allocv>
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3c>)
 8004972:	600b      	str	r3, [r1, #0]
 8004974:	e7f7      	b.n	8004966 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8004976:	f7ff ff03 	bl	8004780 <_Znwj>
 800497a:	bd10      	pop	{r4, pc}
 800497c:	08005104 	.word	0x08005104
 8004980:	3fffffff 	.word	0x3fffffff

08004984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004984:	0003      	movs	r3, r0
 8004986:	6800      	ldr	r0, [r0, #0]
 8004988:	3308      	adds	r3, #8
 800498a:	b510      	push	{r4, lr}
 800498c:	4298      	cmp	r0, r3
 800498e:	d001      	beq.n	8004994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 8004990:	f7ff fef2 	bl	8004778 <_ZdlPv>
 8004994:	bd10      	pop	{r4, pc}
	...

08004998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8004998:	b510      	push	{r4, lr}
 800499a:	4c05      	ldr	r4, [pc, #20]	; (80049b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x18>)
 800499c:	6840      	ldr	r0, [r0, #4]
 800499e:	1909      	adds	r1, r1, r4
 80049a0:	1a09      	subs	r1, r1, r0
 80049a2:	4291      	cmp	r1, r2
 80049a4:	d202      	bcs.n	80049ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x14>
 80049a6:	0018      	movs	r0, r3
 80049a8:	f7ff ff04 	bl	80047b4 <_ZSt20__throw_length_errorPKc>
 80049ac:	bd10      	pop	{r4, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	3fffffff 	.word	0x3fffffff

080049b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80049b4:	b510      	push	{r4, lr}
 80049b6:	2a01      	cmp	r2, #1
 80049b8:	d102      	bne.n	80049c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80049ba:	780b      	ldrb	r3, [r1, #0]
 80049bc:	7003      	strb	r3, [r0, #0]
 80049be:	bd10      	pop	{r4, pc}
 80049c0:	f7ff ffb9 	bl	8004936 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80049c4:	e7fb      	b.n	80049be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080049c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80049c6:	b510      	push	{r4, lr}
 80049c8:	2a01      	cmp	r2, #1
 80049ca:	d102      	bne.n	80049d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xc>
 80049cc:	780b      	ldrb	r3, [r1, #0]
 80049ce:	7003      	strb	r3, [r0, #0]
 80049d0:	bd10      	pop	{r4, pc}
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	d0fc      	beq.n	80049d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80049d6:	f000 f9a2 	bl	8004d1e <memmove>
 80049da:	e7f9      	b.n	80049d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>

080049dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80049dc:	000b      	movs	r3, r1
 80049de:	b510      	push	{r4, lr}
 80049e0:	0011      	movs	r1, r2
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80049e6:	7002      	strb	r2, [r0, #0]
 80049e8:	bd10      	pop	{r4, pc}
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0fc      	beq.n	80049e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xc>
 80049ee:	001a      	movs	r2, r3
 80049f0:	f000 f9a8 	bl	8004d44 <memset>
 80049f4:	e7f8      	b.n	80049e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xc>

080049f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80049f6:	b510      	push	{r4, lr}
 80049f8:	1a52      	subs	r2, r2, r1
 80049fa:	f7ff ffdb 	bl	80049b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80049fe:	bd10      	pop	{r4, pc}

08004a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	1a52      	subs	r2, r2, r1
 8004a04:	f7ff ffd6 	bl	80049b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004a08:	bd10      	pop	{r4, pc}

08004a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8004a0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a0c:	0004      	movs	r4, r0
 8004a0e:	000e      	movs	r6, r1
 8004a10:	4288      	cmp	r0, r1
 8004a12:	d020      	beq.n	8004a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8004a14:	0003      	movs	r3, r0
 8004a16:	684d      	ldr	r5, [r1, #4]
 8004a18:	6801      	ldr	r1, [r0, #0]
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	4299      	cmp	r1, r3
 8004a20:	d000      	beq.n	8004a24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x1a>
 8004a22:	6882      	ldr	r2, [r0, #8]
 8004a24:	42aa      	cmp	r2, r5
 8004a26:	d20b      	bcs.n	8004a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 8004a28:	a901      	add	r1, sp, #4
 8004a2a:	0020      	movs	r0, r4
 8004a2c:	9501      	str	r5, [sp, #4]
 8004a2e:	f7ff ff89 	bl	8004944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004a32:	0007      	movs	r7, r0
 8004a34:	0020      	movs	r0, r4
 8004a36:	f7ff ffa5 	bl	8004984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004a3a:	9b01      	ldr	r3, [sp, #4]
 8004a3c:	6027      	str	r7, [r4, #0]
 8004a3e:	60a3      	str	r3, [r4, #8]
 8004a40:	2d00      	cmp	r5, #0
 8004a42:	d004      	beq.n	8004a4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8004a44:	002a      	movs	r2, r5
 8004a46:	6831      	ldr	r1, [r6, #0]
 8004a48:	6820      	ldr	r0, [r4, #0]
 8004a4a:	f7ff ffb3 	bl	80049b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004a4e:	2200      	movs	r2, #0
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	6065      	str	r5, [r4, #4]
 8004a54:	555a      	strb	r2, [r3, r5]
 8004a56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8004a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a5a:	001f      	movs	r7, r3
 8004a5c:	6843      	ldr	r3, [r0, #4]
 8004a5e:	b085      	sub	sp, #20
 8004a60:	000d      	movs	r5, r1
 8004a62:	1889      	adds	r1, r1, r2
 8004a64:	9101      	str	r1, [sp, #4]
 8004a66:	1a59      	subs	r1, r3, r1
 8004a68:	9100      	str	r1, [sp, #0]
 8004a6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a6c:	0004      	movs	r4, r0
 8004a6e:	1a8a      	subs	r2, r1, r2
 8004a70:	18d2      	adds	r2, r2, r3
 8004a72:	0003      	movs	r3, r0
 8004a74:	6801      	ldr	r1, [r0, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	9203      	str	r2, [sp, #12]
 8004a7a:	220f      	movs	r2, #15
 8004a7c:	4299      	cmp	r1, r3
 8004a7e:	d000      	beq.n	8004a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x2a>
 8004a80:	6882      	ldr	r2, [r0, #8]
 8004a82:	0020      	movs	r0, r4
 8004a84:	a903      	add	r1, sp, #12
 8004a86:	f7ff ff5d 	bl	8004944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004a8a:	0006      	movs	r6, r0
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	d003      	beq.n	8004a98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x40>
 8004a90:	002a      	movs	r2, r5
 8004a92:	6821      	ldr	r1, [r4, #0]
 8004a94:	f7ff ff8e 	bl	80049b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004a98:	2f00      	cmp	r7, #0
 8004a9a:	d007      	beq.n	8004aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 8004a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 8004aa2:	001a      	movs	r2, r3
 8004aa4:	0039      	movs	r1, r7
 8004aa6:	1970      	adds	r0, r6, r5
 8004aa8:	f7ff ff84 	bl	80049b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004aac:	9b00      	ldr	r3, [sp, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x70>
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	9b01      	ldr	r3, [sp, #4]
 8004ab6:	4694      	mov	ip, r2
 8004ab8:	4463      	add	r3, ip
 8004aba:	0019      	movs	r1, r3
 8004abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004abe:	9a00      	ldr	r2, [sp, #0]
 8004ac0:	18ed      	adds	r5, r5, r3
 8004ac2:	1970      	adds	r0, r6, r5
 8004ac4:	f7ff ff76 	bl	80049b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004ac8:	0020      	movs	r0, r4
 8004aca:	f7ff ff5b 	bl	8004984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004ace:	9b03      	ldr	r3, [sp, #12]
 8004ad0:	6026      	str	r6, [r4, #0]
 8004ad2:	60a3      	str	r3, [r4, #8]
 8004ad4:	b005      	add	sp, #20
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8004ad8:	0003      	movs	r3, r0
 8004ada:	3308      	adds	r3, #8
 8004adc:	6003      	str	r3, [r0, #0]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6043      	str	r3, [r0, #4]
 8004ae2:	7203      	strb	r3, [r0, #8]
 8004ae4:	4770      	bx	lr

08004ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8004ae6:	b510      	push	{r4, lr}
 8004ae8:	0004      	movs	r4, r0
 8004aea:	f7ff ff4b 	bl	8004984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004aee:	0020      	movs	r0, r4
 8004af0:	bd10      	pop	{r4, pc}

08004af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8004af2:	b510      	push	{r4, lr}
 8004af4:	0004      	movs	r4, r0
 8004af6:	f7ff ff88 	bl	8004a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8004afa:	0020      	movs	r0, r4
 8004afc:	bd10      	pop	{r4, pc}

08004afe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8004afe:	6840      	ldr	r0, [r0, #4]
 8004b00:	4770      	bx	lr

08004b02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8004b02:	6800      	ldr	r0, [r0, #0]
 8004b04:	1840      	adds	r0, r0, r1
 8004b06:	4770      	bx	lr

08004b08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0a:	0015      	movs	r5, r2
 8004b0c:	001e      	movs	r6, r3
 8004b0e:	0004      	movs	r4, r0
 8004b10:	b085      	sub	sp, #20
 8004b12:	ab0a      	add	r3, sp, #40	; 0x28
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	0032      	movs	r2, r6
 8004b18:	9303      	str	r3, [sp, #12]
 8004b1a:	000f      	movs	r7, r1
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x80>)
 8004b1e:	0029      	movs	r1, r5
 8004b20:	f7ff ff3a 	bl	8004998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8004b24:	0021      	movs	r1, r4
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	1b72      	subs	r2, r6, r5
 8004b2a:	6820      	ldr	r0, [r4, #0]
 8004b2c:	18d2      	adds	r2, r2, r3
 8004b2e:	3108      	adds	r1, #8
 8004b30:	9202      	str	r2, [sp, #8]
 8004b32:	220f      	movs	r2, #15
 8004b34:	4288      	cmp	r0, r1
 8004b36:	d000      	beq.n	8004b3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x32>
 8004b38:	68a2      	ldr	r2, [r4, #8]
 8004b3a:	9902      	ldr	r1, [sp, #8]
 8004b3c:	428a      	cmp	r2, r1
 8004b3e:	d31b      	bcc.n	8004b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x70>
 8004b40:	19e9      	adds	r1, r5, r7
 8004b42:	1a5a      	subs	r2, r3, r1
 8004b44:	428b      	cmp	r3, r1
 8004b46:	d006      	beq.n	8004b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x4e>
 8004b48:	42b5      	cmp	r5, r6
 8004b4a:	d004      	beq.n	8004b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x4e>
 8004b4c:	19c0      	adds	r0, r0, r7
 8004b4e:	1941      	adds	r1, r0, r5
 8004b50:	1980      	adds	r0, r0, r6
 8004b52:	f7ff ff38 	bl	80049c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004b56:	2e00      	cmp	r6, #0
 8004b58:	d005      	beq.n	8004b66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x5e>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	0031      	movs	r1, r6
 8004b5e:	9a03      	ldr	r2, [sp, #12]
 8004b60:	19d8      	adds	r0, r3, r7
 8004b62:	f7ff ff3b 	bl	80049dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8004b66:	9b02      	ldr	r3, [sp, #8]
 8004b68:	0020      	movs	r0, r4
 8004b6a:	6063      	str	r3, [r4, #4]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	9902      	ldr	r1, [sp, #8]
 8004b72:	5453      	strb	r3, [r2, r1]
 8004b74:	b005      	add	sp, #20
 8004b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b78:	2300      	movs	r3, #0
 8004b7a:	002a      	movs	r2, r5
 8004b7c:	0039      	movs	r1, r7
 8004b7e:	0020      	movs	r0, r4
 8004b80:	9600      	str	r6, [sp, #0]
 8004b82:	f7ff ff69 	bl	8004a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004b86:	e7e6      	b.n	8004b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x4e>
 8004b88:	0800511c 	.word	0x0800511c

08004b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>:
 8004b8c:	b507      	push	{r0, r1, r2, lr}
 8004b8e:	9200      	str	r2, [sp, #0]
 8004b90:	000b      	movs	r3, r1
 8004b92:	6842      	ldr	r2, [r0, #4]
 8004b94:	2100      	movs	r1, #0
 8004b96:	f7ff ffb7 	bl	8004b08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8004b9a:	bd0e      	pop	{r1, r2, r3, pc}

08004b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8004b9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b9e:	0004      	movs	r4, r0
 8004ba0:	000d      	movs	r5, r1
 8004ba2:	0016      	movs	r6, r2
 8004ba4:	2900      	cmp	r1, #0
 8004ba6:	d104      	bne.n	8004bb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x16>
 8004ba8:	2a00      	cmp	r2, #0
 8004baa:	d002      	beq.n	8004bb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x16>
 8004bac:	480c      	ldr	r0, [pc, #48]	; (8004be0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8004bae:	f7ff fdfe 	bl	80047ae <_ZSt19__throw_logic_errorPKc>
 8004bb2:	1b73      	subs	r3, r6, r5
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	2b0f      	cmp	r3, #15
 8004bb8:	d907      	bls.n	8004bca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2e>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	0020      	movs	r0, r4
 8004bbe:	a901      	add	r1, sp, #4
 8004bc0:	f7ff fec0 	bl	8004944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004bc4:	9b01      	ldr	r3, [sp, #4]
 8004bc6:	6020      	str	r0, [r4, #0]
 8004bc8:	60a3      	str	r3, [r4, #8]
 8004bca:	0032      	movs	r2, r6
 8004bcc:	0029      	movs	r1, r5
 8004bce:	6820      	ldr	r0, [r4, #0]
 8004bd0:	f7ff ff11 	bl	80049f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	9b01      	ldr	r3, [sp, #4]
 8004bd8:	6822      	ldr	r2, [r4, #0]
 8004bda:	6063      	str	r3, [r4, #4]
 8004bdc:	54d1      	strb	r1, [r2, r3]
 8004bde:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8004be0:	08005139 	.word	0x08005139

08004be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8004be4:	0002      	movs	r2, r0
 8004be6:	000b      	movs	r3, r1
 8004be8:	b510      	push	{r4, lr}
 8004bea:	0004      	movs	r4, r0
 8004bec:	3208      	adds	r2, #8
 8004bee:	6002      	str	r2, [r0, #0]
 8004bf0:	cb06      	ldmia	r3!, {r1, r2}
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	188a      	adds	r2, r1, r2
 8004bf6:	f7ff ffd1 	bl	8004b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8004bfa:	0020      	movs	r0, r4
 8004bfc:	bd10      	pop	{r4, pc}
	...

08004c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8004c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c02:	0004      	movs	r4, r0
 8004c04:	000d      	movs	r5, r1
 8004c06:	0016      	movs	r6, r2
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	d104      	bne.n	8004c16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8004c0c:	2a00      	cmp	r2, #0
 8004c0e:	d002      	beq.n	8004c16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8004c10:	480c      	ldr	r0, [pc, #48]	; (8004c44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8004c12:	f7ff fdcc 	bl	80047ae <_ZSt19__throw_logic_errorPKc>
 8004c16:	1b73      	subs	r3, r6, r5
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	2b0f      	cmp	r3, #15
 8004c1c:	d907      	bls.n	8004c2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2e>
 8004c1e:	2200      	movs	r2, #0
 8004c20:	0020      	movs	r0, r4
 8004c22:	a901      	add	r1, sp, #4
 8004c24:	f7ff fe8e 	bl	8004944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004c28:	9b01      	ldr	r3, [sp, #4]
 8004c2a:	6020      	str	r0, [r4, #0]
 8004c2c:	60a3      	str	r3, [r4, #8]
 8004c2e:	0032      	movs	r2, r6
 8004c30:	0029      	movs	r1, r5
 8004c32:	6820      	ldr	r0, [r4, #0]
 8004c34:	f7ff fee4 	bl	8004a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8004c38:	2100      	movs	r1, #0
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	6822      	ldr	r2, [r4, #0]
 8004c3e:	6063      	str	r3, [r4, #4]
 8004c40:	54d1      	strb	r1, [r2, r3]
 8004c42:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8004c44:	08005139 	.word	0x08005139

08004c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8004c48:	0003      	movs	r3, r0
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	0004      	movs	r4, r0
 8004c50:	1e0d      	subs	r5, r1, #0
 8004c52:	6003      	str	r3, [r0, #0]
 8004c54:	d00a      	beq.n	8004c6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x24>
 8004c56:	0008      	movs	r0, r1
 8004c58:	f7fb fa56 	bl	8000108 <strlen>
 8004c5c:	182a      	adds	r2, r5, r0
 8004c5e:	0029      	movs	r1, r5
 8004c60:	0020      	movs	r0, r4
 8004c62:	2300      	movs	r3, #0
 8004c64:	f7ff ffcc 	bl	8004c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8004c68:	0020      	movs	r0, r4
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	4252      	negs	r2, r2
 8004c70:	e7f5      	b.n	8004c5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

08004c74 <_ZSt15get_new_handlerv>:
 8004c74:	4b01      	ldr	r3, [pc, #4]	; (8004c7c <_ZSt15get_new_handlerv+0x8>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	4770      	bx	lr
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	20000194 	.word	0x20000194

08004c80 <abort>:
 8004c80:	2006      	movs	r0, #6
 8004c82:	b510      	push	{r4, lr}
 8004c84:	f000 f94a 	bl	8004f1c <raise>
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f7fd fb5d 	bl	8002348 <_exit>
	...

08004c90 <__errno>:
 8004c90:	4b01      	ldr	r3, [pc, #4]	; (8004c98 <__errno+0x8>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	4770      	bx	lr
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	20000008 	.word	0x20000008

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	4d0c      	ldr	r5, [pc, #48]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca2:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	2600      	movs	r6, #0
 8004cae:	f000 f967 	bl	8004f80 <_init>
 8004cb2:	4d0a      	ldr	r5, [pc, #40]	; (8004cdc <__libc_init_array+0x40>)
 8004cb4:	4c0a      	ldr	r4, [pc, #40]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb6:	1b64      	subs	r4, r4, r5
 8004cb8:	10a4      	asrs	r4, r4, #2
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	00b3      	lsls	r3, r6, #2
 8004cc2:	58eb      	ldr	r3, [r5, r3]
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	00b3      	lsls	r3, r6, #2
 8004ccc:	58eb      	ldr	r3, [r5, r3]
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	08005164 	.word	0x08005164
 8004cd8:	08005164 	.word	0x08005164
 8004cdc:	08005164 	.word	0x08005164
 8004ce0:	0800516c 	.word	0x0800516c

08004ce4 <malloc>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <malloc+0x10>)
 8004ce8:	0001      	movs	r1, r0
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	f000 f87c 	bl	8004de8 <_malloc_r>
 8004cf0:	bd10      	pop	{r4, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	20000008 	.word	0x20000008

08004cf8 <free>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <free+0x10>)
 8004cfc:	0001      	movs	r1, r0
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	f000 f828 	bl	8004d54 <_free_r>
 8004d04:	bd10      	pop	{r4, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	20000008 	.word	0x20000008

08004d0c <memcpy>:
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	b510      	push	{r4, lr}
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d100      	bne.n	8004d16 <memcpy+0xa>
 8004d14:	bd10      	pop	{r4, pc}
 8004d16:	5ccc      	ldrb	r4, [r1, r3]
 8004d18:	54c4      	strb	r4, [r0, r3]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	e7f8      	b.n	8004d10 <memcpy+0x4>

08004d1e <memmove>:
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	4288      	cmp	r0, r1
 8004d22:	d902      	bls.n	8004d2a <memmove+0xc>
 8004d24:	188b      	adds	r3, r1, r2
 8004d26:	4298      	cmp	r0, r3
 8004d28:	d303      	bcc.n	8004d32 <memmove+0x14>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e007      	b.n	8004d3e <memmove+0x20>
 8004d2e:	5c8b      	ldrb	r3, [r1, r2]
 8004d30:	5483      	strb	r3, [r0, r2]
 8004d32:	3a01      	subs	r2, #1
 8004d34:	d2fb      	bcs.n	8004d2e <memmove+0x10>
 8004d36:	bd10      	pop	{r4, pc}
 8004d38:	5ccc      	ldrb	r4, [r1, r3]
 8004d3a:	54c4      	strb	r4, [r0, r3]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d1fa      	bne.n	8004d38 <memmove+0x1a>
 8004d42:	e7f8      	b.n	8004d36 <memmove+0x18>

08004d44 <memset>:
 8004d44:	0003      	movs	r3, r0
 8004d46:	1882      	adds	r2, r0, r2
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d100      	bne.n	8004d4e <memset+0xa>
 8004d4c:	4770      	bx	lr
 8004d4e:	7019      	strb	r1, [r3, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	e7f9      	b.n	8004d48 <memset+0x4>

08004d54 <_free_r>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	0005      	movs	r5, r0
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d010      	beq.n	8004d7e <_free_r+0x2a>
 8004d5c:	1f0c      	subs	r4, r1, #4
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	da00      	bge.n	8004d66 <_free_r+0x12>
 8004d64:	18e4      	adds	r4, r4, r3
 8004d66:	0028      	movs	r0, r5
 8004d68:	f000 f8f8 	bl	8004f5c <__malloc_lock>
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <_free_r+0x90>)
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <_free_r+0x2c>
 8004d74:	6063      	str	r3, [r4, #4]
 8004d76:	6014      	str	r4, [r2, #0]
 8004d78:	0028      	movs	r0, r5
 8004d7a:	f000 f8f7 	bl	8004f6c <__malloc_unlock>
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	d908      	bls.n	8004d96 <_free_r+0x42>
 8004d84:	6821      	ldr	r1, [r4, #0]
 8004d86:	1860      	adds	r0, r4, r1
 8004d88:	4283      	cmp	r3, r0
 8004d8a:	d1f3      	bne.n	8004d74 <_free_r+0x20>
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	1841      	adds	r1, r0, r1
 8004d92:	6021      	str	r1, [r4, #0]
 8004d94:	e7ee      	b.n	8004d74 <_free_r+0x20>
 8004d96:	001a      	movs	r2, r3
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <_free_r+0x4e>
 8004d9e:	42a3      	cmp	r3, r4
 8004da0:	d9f9      	bls.n	8004d96 <_free_r+0x42>
 8004da2:	6811      	ldr	r1, [r2, #0]
 8004da4:	1850      	adds	r0, r2, r1
 8004da6:	42a0      	cmp	r0, r4
 8004da8:	d10b      	bne.n	8004dc2 <_free_r+0x6e>
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	1809      	adds	r1, r1, r0
 8004dae:	1850      	adds	r0, r2, r1
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	4283      	cmp	r3, r0
 8004db4:	d1e0      	bne.n	8004d78 <_free_r+0x24>
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	1841      	adds	r1, r0, r1
 8004dbc:	6011      	str	r1, [r2, #0]
 8004dbe:	6053      	str	r3, [r2, #4]
 8004dc0:	e7da      	b.n	8004d78 <_free_r+0x24>
 8004dc2:	42a0      	cmp	r0, r4
 8004dc4:	d902      	bls.n	8004dcc <_free_r+0x78>
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	602b      	str	r3, [r5, #0]
 8004dca:	e7d5      	b.n	8004d78 <_free_r+0x24>
 8004dcc:	6821      	ldr	r1, [r4, #0]
 8004dce:	1860      	adds	r0, r4, r1
 8004dd0:	4283      	cmp	r3, r0
 8004dd2:	d103      	bne.n	8004ddc <_free_r+0x88>
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	1841      	adds	r1, r0, r1
 8004dda:	6021      	str	r1, [r4, #0]
 8004ddc:	6063      	str	r3, [r4, #4]
 8004dde:	6054      	str	r4, [r2, #4]
 8004de0:	e7ca      	b.n	8004d78 <_free_r+0x24>
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	20000198 	.word	0x20000198

08004de8 <_malloc_r>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	2303      	movs	r3, #3
 8004dec:	1ccd      	adds	r5, r1, #3
 8004dee:	439d      	bics	r5, r3
 8004df0:	3508      	adds	r5, #8
 8004df2:	0006      	movs	r6, r0
 8004df4:	2d0c      	cmp	r5, #12
 8004df6:	d21f      	bcs.n	8004e38 <_malloc_r+0x50>
 8004df8:	250c      	movs	r5, #12
 8004dfa:	42a9      	cmp	r1, r5
 8004dfc:	d81e      	bhi.n	8004e3c <_malloc_r+0x54>
 8004dfe:	0030      	movs	r0, r6
 8004e00:	f000 f8ac 	bl	8004f5c <__malloc_lock>
 8004e04:	4925      	ldr	r1, [pc, #148]	; (8004e9c <_malloc_r+0xb4>)
 8004e06:	680a      	ldr	r2, [r1, #0]
 8004e08:	0014      	movs	r4, r2
 8004e0a:	2c00      	cmp	r4, #0
 8004e0c:	d11a      	bne.n	8004e44 <_malloc_r+0x5c>
 8004e0e:	4f24      	ldr	r7, [pc, #144]	; (8004ea0 <_malloc_r+0xb8>)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <_malloc_r+0x38>
 8004e16:	0021      	movs	r1, r4
 8004e18:	0030      	movs	r0, r6
 8004e1a:	f000 f843 	bl	8004ea4 <_sbrk_r>
 8004e1e:	6038      	str	r0, [r7, #0]
 8004e20:	0029      	movs	r1, r5
 8004e22:	0030      	movs	r0, r6
 8004e24:	f000 f83e 	bl	8004ea4 <_sbrk_r>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d12b      	bne.n	8004e84 <_malloc_r+0x9c>
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	0030      	movs	r0, r6
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	f000 f89b 	bl	8004f6c <__malloc_unlock>
 8004e36:	e003      	b.n	8004e40 <_malloc_r+0x58>
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	dade      	bge.n	8004dfa <_malloc_r+0x12>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	6033      	str	r3, [r6, #0]
 8004e40:	2000      	movs	r0, #0
 8004e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	1b5b      	subs	r3, r3, r5
 8004e48:	d419      	bmi.n	8004e7e <_malloc_r+0x96>
 8004e4a:	2b0b      	cmp	r3, #11
 8004e4c:	d903      	bls.n	8004e56 <_malloc_r+0x6e>
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	18e4      	adds	r4, r4, r3
 8004e52:	6025      	str	r5, [r4, #0]
 8004e54:	e003      	b.n	8004e5e <_malloc_r+0x76>
 8004e56:	6863      	ldr	r3, [r4, #4]
 8004e58:	42a2      	cmp	r2, r4
 8004e5a:	d10e      	bne.n	8004e7a <_malloc_r+0x92>
 8004e5c:	600b      	str	r3, [r1, #0]
 8004e5e:	0030      	movs	r0, r6
 8004e60:	f000 f884 	bl	8004f6c <__malloc_unlock>
 8004e64:	0020      	movs	r0, r4
 8004e66:	2207      	movs	r2, #7
 8004e68:	300b      	adds	r0, #11
 8004e6a:	1d23      	adds	r3, r4, #4
 8004e6c:	4390      	bics	r0, r2
 8004e6e:	1ac2      	subs	r2, r0, r3
 8004e70:	4298      	cmp	r0, r3
 8004e72:	d0e6      	beq.n	8004e42 <_malloc_r+0x5a>
 8004e74:	1a1b      	subs	r3, r3, r0
 8004e76:	50a3      	str	r3, [r4, r2]
 8004e78:	e7e3      	b.n	8004e42 <_malloc_r+0x5a>
 8004e7a:	6053      	str	r3, [r2, #4]
 8004e7c:	e7ef      	b.n	8004e5e <_malloc_r+0x76>
 8004e7e:	0022      	movs	r2, r4
 8004e80:	6864      	ldr	r4, [r4, #4]
 8004e82:	e7c2      	b.n	8004e0a <_malloc_r+0x22>
 8004e84:	2303      	movs	r3, #3
 8004e86:	1cc4      	adds	r4, r0, #3
 8004e88:	439c      	bics	r4, r3
 8004e8a:	42a0      	cmp	r0, r4
 8004e8c:	d0e1      	beq.n	8004e52 <_malloc_r+0x6a>
 8004e8e:	1a21      	subs	r1, r4, r0
 8004e90:	0030      	movs	r0, r6
 8004e92:	f000 f807 	bl	8004ea4 <_sbrk_r>
 8004e96:	1c43      	adds	r3, r0, #1
 8004e98:	d1db      	bne.n	8004e52 <_malloc_r+0x6a>
 8004e9a:	e7c7      	b.n	8004e2c <_malloc_r+0x44>
 8004e9c:	20000198 	.word	0x20000198
 8004ea0:	2000019c 	.word	0x2000019c

08004ea4 <_sbrk_r>:
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	b570      	push	{r4, r5, r6, lr}
 8004ea8:	4d06      	ldr	r5, [pc, #24]	; (8004ec4 <_sbrk_r+0x20>)
 8004eaa:	0004      	movs	r4, r0
 8004eac:	0008      	movs	r0, r1
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	f7fd fa56 	bl	8002360 <_sbrk>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d103      	bne.n	8004ec0 <_sbrk_r+0x1c>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d000      	beq.n	8004ec0 <_sbrk_r+0x1c>
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	2000027c 	.word	0x2000027c

08004ec8 <_raise_r>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	0004      	movs	r4, r0
 8004ecc:	000d      	movs	r5, r1
 8004ece:	291f      	cmp	r1, #31
 8004ed0:	d904      	bls.n	8004edc <_raise_r+0x14>
 8004ed2:	2316      	movs	r3, #22
 8004ed4:	6003      	str	r3, [r0, #0]
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	4240      	negs	r0, r0
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <_raise_r+0x24>
 8004ee2:	008a      	lsls	r2, r1, #2
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	2a00      	cmp	r2, #0
 8004eea:	d108      	bne.n	8004efe <_raise_r+0x36>
 8004eec:	0020      	movs	r0, r4
 8004eee:	f000 f831 	bl	8004f54 <_getpid_r>
 8004ef2:	002a      	movs	r2, r5
 8004ef4:	0001      	movs	r1, r0
 8004ef6:	0020      	movs	r0, r4
 8004ef8:	f000 f81a 	bl	8004f30 <_kill_r>
 8004efc:	e7ed      	b.n	8004eda <_raise_r+0x12>
 8004efe:	2000      	movs	r0, #0
 8004f00:	2a01      	cmp	r2, #1
 8004f02:	d0ea      	beq.n	8004eda <_raise_r+0x12>
 8004f04:	1c51      	adds	r1, r2, #1
 8004f06:	d103      	bne.n	8004f10 <_raise_r+0x48>
 8004f08:	2316      	movs	r3, #22
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	e7e4      	b.n	8004eda <_raise_r+0x12>
 8004f10:	2400      	movs	r4, #0
 8004f12:	0028      	movs	r0, r5
 8004f14:	601c      	str	r4, [r3, #0]
 8004f16:	4790      	blx	r2
 8004f18:	0020      	movs	r0, r4
 8004f1a:	e7de      	b.n	8004eda <_raise_r+0x12>

08004f1c <raise>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <raise+0x10>)
 8004f20:	0001      	movs	r1, r0
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	f7ff ffd0 	bl	8004ec8 <_raise_r>
 8004f28:	bd10      	pop	{r4, pc}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	20000008 	.word	0x20000008

08004f30 <_kill_r>:
 8004f30:	2300      	movs	r3, #0
 8004f32:	b570      	push	{r4, r5, r6, lr}
 8004f34:	4d06      	ldr	r5, [pc, #24]	; (8004f50 <_kill_r+0x20>)
 8004f36:	0004      	movs	r4, r0
 8004f38:	0008      	movs	r0, r1
 8004f3a:	0011      	movs	r1, r2
 8004f3c:	602b      	str	r3, [r5, #0]
 8004f3e:	f7fd f9f3 	bl	8002328 <_kill>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	d103      	bne.n	8004f4e <_kill_r+0x1e>
 8004f46:	682b      	ldr	r3, [r5, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d000      	beq.n	8004f4e <_kill_r+0x1e>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	2000027c 	.word	0x2000027c

08004f54 <_getpid_r>:
 8004f54:	b510      	push	{r4, lr}
 8004f56:	f7fd f9e1 	bl	800231c <_getpid>
 8004f5a:	bd10      	pop	{r4, pc}

08004f5c <__malloc_lock>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	4802      	ldr	r0, [pc, #8]	; (8004f68 <__malloc_lock+0xc>)
 8004f60:	f000 f80c 	bl	8004f7c <__retarget_lock_acquire_recursive>
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	20000284 	.word	0x20000284

08004f6c <__malloc_unlock>:
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	4802      	ldr	r0, [pc, #8]	; (8004f78 <__malloc_unlock+0xc>)
 8004f70:	f000 f805 	bl	8004f7e <__retarget_lock_release_recursive>
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	20000284 	.word	0x20000284

08004f7c <__retarget_lock_acquire_recursive>:
 8004f7c:	4770      	bx	lr

08004f7e <__retarget_lock_release_recursive>:
 8004f7e:	4770      	bx	lr

08004f80 <_init>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr

08004f8c <_fini>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr
