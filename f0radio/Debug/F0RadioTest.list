
F0RadioTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003160  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c8  080032c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080032c8  080032c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032c8  080032c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  08003348  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003348  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221a3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aba  00000000  00000000  0004223b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00045cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00046a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014546  00000000  00000000  00047650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fec2  00000000  00000000  0005bb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073a3e  00000000  00000000  0006ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  000df4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003208 	.word	0x08003208

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003208 	.word	0x08003208

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f002 feca 	bl	8002fca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b3d      	ldr	r3, [pc, #244]	; (800032c <MX_GPIO_Init+0x10c>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b3c      	ldr	r3, [pc, #240]	; (800032c <MX_GPIO_Init+0x10c>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0289      	lsls	r1, r1, #10
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b39      	ldr	r3, [pc, #228]	; (800032c <MX_GPIO_Init+0x10c>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	029b      	lsls	r3, r3, #10
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000252:	4b36      	ldr	r3, [pc, #216]	; (800032c <MX_GPIO_Init+0x10c>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b35      	ldr	r3, [pc, #212]	; (800032c <MX_GPIO_Init+0x10c>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	02c9      	lsls	r1, r1, #11
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b32      	ldr	r3, [pc, #200]	; (800032c <MX_GPIO_Init+0x10c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	02db      	lsls	r3, r3, #11
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 800026e:	2390      	movs	r3, #144	; 0x90
 8000270:	05db      	lsls	r3, r3, #23
 8000272:	2201      	movs	r2, #1
 8000274:	2104      	movs	r1, #4
 8000276:	0018      	movs	r0, r3
 8000278:	f001 fca4 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 800027c:	4b2c      	ldr	r3, [pc, #176]	; (8000330 <MX_GPIO_Init+0x110>)
 800027e:	2201      	movs	r2, #1
 8000280:	2104      	movs	r1, #4
 8000282:	0018      	movs	r0, r3
 8000284:	f001 fc9e 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEND_GPIO_Port, SEND_Pin, GPIO_PIN_RESET);
 8000288:	4b29      	ldr	r3, [pc, #164]	; (8000330 <MX_GPIO_Init+0x110>)
 800028a:	2200      	movs	r2, #0
 800028c:	2108      	movs	r1, #8
 800028e:	0018      	movs	r0, r3
 8000290:	f001 fc98 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_Pin;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2204      	movs	r2, #4
 8000298:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2201      	movs	r2, #1
 800029e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	2203      	movs	r2, #3
 80002aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 80002ac:	193a      	adds	r2, r7, r4
 80002ae:	2390      	movs	r3, #144	; 0x90
 80002b0:	05db      	lsls	r3, r3, #23
 80002b2:	0011      	movs	r1, r2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 fb15 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	4a1c      	ldr	r2, [pc, #112]	; (8000334 <MX_GPIO_Init+0x114>)
 80002c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	4a18      	ldr	r2, [pc, #96]	; (8000330 <MX_GPIO_Init+0x110>)
 80002d0:	0019      	movs	r1, r3
 80002d2:	0010      	movs	r0, r2
 80002d4:	f001 fb06 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2204      	movs	r2, #4
 80002dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	2201      	movs	r2, #1
 80002e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	2203      	movs	r2, #3
 80002ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <MX_GPIO_Init+0x110>)
 80002f4:	0019      	movs	r1, r3
 80002f6:	0010      	movs	r0, r2
 80002f8:	f001 faf4 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEND_Pin;
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2208      	movs	r2, #8
 8000302:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2201      	movs	r2, #1
 8000308:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SEND_GPIO_Port, &GPIO_InitStruct);
 8000316:	187b      	adds	r3, r7, r1
 8000318:	4a05      	ldr	r2, [pc, #20]	; (8000330 <MX_GPIO_Init+0x110>)
 800031a:	0019      	movs	r1, r3
 800031c:	0010      	movs	r0, r2
 800031e:	f001 fae1 	bl	80018e4 <HAL_GPIO_Init>

}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b009      	add	sp, #36	; 0x24
 8000328:	bd90      	pop	{r4, r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	40021000 	.word	0x40021000
 8000330:	48000400 	.word	0x48000400
 8000334:	10110000 	.word	0x10110000

08000338 <startCounter>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void startCounter()
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Start_IT(&htim16);
	//HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/48);
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 800033c:	4b02      	ldr	r3, [pc, #8]	; (8000348 <startCounter+0x10>)
 800033e:	2205      	movs	r2, #5
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	e000e010 	.word	0xe000e010

0800034c <stopCounter>:

void stopCounter()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Stop_IT(&htim16);
	//HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/48);
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <stopCounter+0x18>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <stopCounter+0x18>)
 8000356:	2105      	movs	r1, #5
 8000358:	438a      	bics	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	e000e010 	.word	0xe000e010

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036e:	f001 f9ab 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000372:	f000 f823 	bl	80003bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/48);
 8000376:	f002 f8b5 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 800037a:	0003      	movs	r3, r0
 800037c:	2130      	movs	r1, #48	; 0x30
 800037e:	0018      	movs	r0, r3
 8000380:	f7ff fec2 	bl	8000108 <__udivsi3>
 8000384:	0003      	movs	r3, r0
 8000386:	0018      	movs	r0, r3
 8000388:	f001 fa9f 	bl	80018ca <HAL_SYSTICK_Config>
  startCounter();
 800038c:	f7ff ffd4 	bl	8000338 <startCounter>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000390:	f7ff ff46 	bl	8000220 <MX_GPIO_Init>
  MX_TIM15_Init();
 8000394:	f001 f8ee 	bl	8001574 <MX_TIM15_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000398:	f000 f850 	bl	800043c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // Insert a test message
  char * message = "Hello World!";
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <main+0x4c>)
 800039e:	607b      	str	r3, [r7, #4]
  radioSend(message, 12);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	210c      	movs	r1, #12
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 fdbd 	bl	8000f24 <radioSend>

  // Enable the timer interrupt for the transmitter
  HAL_TIM_Base_Start_IT(&htim15);
 80003aa:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <main+0x50>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f002 f933 	bl	8002618 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <main+0x4a>
 80003b4:	08003220 	.word	0x08003220
 80003b8:	200000fc 	.word	0x200000fc

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b091      	sub	sp, #68	; 0x44
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	2410      	movs	r4, #16
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	0018      	movs	r0, r3
 80003c8:	2330      	movs	r3, #48	; 0x30
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f002 fdfc 	bl	8002fca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d2:	003b      	movs	r3, r7
 80003d4:	0018      	movs	r0, r3
 80003d6:	2310      	movs	r3, #16
 80003d8:	001a      	movs	r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	f002 fdf5 	bl	8002fca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e0:	0021      	movs	r1, r4
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2202      	movs	r2, #2
 80003e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2201      	movs	r2, #1
 80003ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2210      	movs	r2, #16
 80003f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fc25 	bl	8001c4c <HAL_RCC_OscConfig>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000406:	f000 f839 	bl	800047c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	003b      	movs	r3, r7
 800040c:	2207      	movs	r2, #7
 800040e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000416:	003b      	movs	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041c:	003b      	movs	r3, r7
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000422:	003b      	movs	r3, r7
 8000424:	2100      	movs	r1, #0
 8000426:	0018      	movs	r0, r3
 8000428:	f001 ff2a 	bl	8002280 <HAL_RCC_ClockConfig>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000430:	f000 f824 	bl	800047c <Error_Handler>
  }
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b011      	add	sp, #68	; 0x44
 800043a:	bd90      	pop	{r4, r7, pc}

0800043c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	2101      	movs	r1, #1
 8000444:	2005      	movs	r0, #5
 8000446:	f001 fa1b 	bl	8001880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800044a:	2005      	movs	r0, #5
 800044c:	f001 fa2d 	bl	80018aa <HAL_NVIC_EnableIRQ>
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d101      	bne.n	800046e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800046a:	f001 f941 	bl	80016f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	40000400 	.word	0x40000400

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	e7fe      	b.n	8000484 <Error_Handler+0x8>

08000486 <_ZN7message10mirrorByteEh>:

#include "message.h"

// Function to mirror the bits in a byte.
uint8_t message::mirrorByte(uint8_t b)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
 800048e:	000a      	movs	r2, r1
 8000490:	1cfb      	adds	r3, r7, #3
 8000492:	701a      	strb	r2, [r3, #0]
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8000494:	1cfb      	adds	r3, r7, #3
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	b2db      	uxtb	r3, r3
 800049c:	b25a      	sxtb	r2, r3
 800049e:	1cfb      	adds	r3, r7, #3
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	011b      	lsls	r3, r3, #4
 80004a4:	b25b      	sxtb	r3, r3
 80004a6:	4313      	orrs	r3, r2
 80004a8:	b25a      	sxtb	r2, r3
 80004aa:	1cfb      	adds	r3, r7, #3
 80004ac:	701a      	strb	r2, [r3, #0]
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 80004ae:	1cfb      	adds	r3, r7, #3
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	109b      	asrs	r3, r3, #2
 80004b4:	b25b      	sxtb	r3, r3
 80004b6:	2233      	movs	r2, #51	; 0x33
 80004b8:	4013      	ands	r3, r2
 80004ba:	b25a      	sxtb	r2, r3
 80004bc:	1cfb      	adds	r3, r7, #3
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	b25b      	sxtb	r3, r3
 80004c4:	2133      	movs	r1, #51	; 0x33
 80004c6:	438b      	bics	r3, r1
 80004c8:	b25b      	sxtb	r3, r3
 80004ca:	4313      	orrs	r3, r2
 80004cc:	b25a      	sxtb	r2, r3
 80004ce:	1cfb      	adds	r3, r7, #3
 80004d0:	701a      	strb	r2, [r3, #0]
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 80004d2:	1cfb      	adds	r3, r7, #3
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	105b      	asrs	r3, r3, #1
 80004d8:	b25b      	sxtb	r3, r3
 80004da:	2255      	movs	r2, #85	; 0x55
 80004dc:	4013      	ands	r3, r2
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	1cfb      	adds	r3, r7, #3
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	2155      	movs	r1, #85	; 0x55
 80004ea:	438b      	bics	r3, r1
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b25a      	sxtb	r2, r3
 80004f2:	1cfb      	adds	r3, r7, #3
 80004f4:	701a      	strb	r2, [r3, #0]

	return b;
 80004f6:	1cfb      	adds	r3, r7, #3
 80004f8:	781b      	ldrb	r3, [r3, #0]
}
 80004fa:	0018      	movs	r0, r3
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}

08000502 <_ZN7messageC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// Class constructor
message::message(string msg)
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	0018      	movs	r0, r3
 8000510:	f002 fce0 	bl	8002ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	messageString = msg;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	0011      	movs	r1, r2
 800051a:	0018      	movs	r0, r3
 800051c:	f002 fce7 	bl	8002eee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	bitPointer = 0;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	831a      	strh	r2, [r3, #24]

		i++;
		j += 2;
	}
	*/
}
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}

08000530 <_ZN7message10setNextBitEv>:
*/

// Return the currently selected bit in the message,
// then move the pointer to the next one
uint8_t message::setNextBit()
{
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	b087      	sub	sp, #28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// Turn the message into a char *
	char const * charList = messageString.c_str();
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	0018      	movs	r0, r3
 800053c:	f002 fcdf 	bl	8002efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000540:	0003      	movs	r3, r0
 8000542:	617b      	str	r3, [r7, #20]

	// Get the correct character from the string using the bitpointer
	// For example: bit 19 from "hey" means the 3rd bit from 'y' is needed
	// so 19 / 8 is 2, and 'y' is char 2 of the string (starts at 0)
	uint8_t charPointer = bitPointer / 8;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	8b1b      	ldrh	r3, [r3, #24]
 8000548:	08db      	lsrs	r3, r3, #3
 800054a:	b29a      	uxth	r2, r3
 800054c:	2113      	movs	r1, #19
 800054e:	187b      	adds	r3, r7, r1
 8000550:	701a      	strb	r2, [r3, #0]

	// Then we can get the char we need using our charPointer
	char ch = charList[charPointer];
 8000552:	187b      	adds	r3, r7, r1
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	18d2      	adds	r2, r2, r3
 800055a:	2012      	movs	r0, #18
 800055c:	183b      	adds	r3, r7, r0
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	701a      	strb	r2, [r3, #0]

	// When we need the 19th bit, we actually need the 3rd bit from ch
	// So 19 % 8 gives us 3
	uint8_t bitInChar = bitPointer % 8;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	8b1b      	ldrh	r3, [r3, #24]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	2511      	movs	r5, #17
 800056a:	197b      	adds	r3, r7, r5
 800056c:	2107      	movs	r1, #7
 800056e:	400a      	ands	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]

	// Mirror our byte, otherwise it will be sent from MSB to LSB
	uint8_t mirrored = mirrorByte(ch);
 8000572:	2610      	movs	r6, #16
 8000574:	19bc      	adds	r4, r7, r6
 8000576:	183b      	adds	r3, r7, r0
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff ff81 	bl	8000486 <_ZN7message10mirrorByteEh>
 8000584:	0003      	movs	r3, r0
 8000586:	7023      	strb	r3, [r4, #0]

	// Get 0 or 1 with a bitwise operation,
	// using our mirrored byte and the bit we want (eg. 3)
	uint8_t bit = (mirrored >> bitInChar) & 1;
 8000588:	19bb      	adds	r3, r7, r6
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	197b      	adds	r3, r7, r5
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	411a      	asrs	r2, r3
 8000592:	0013      	movs	r3, r2
 8000594:	b2da      	uxtb	r2, r3
 8000596:	230f      	movs	r3, #15
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	2101      	movs	r1, #1
 800059c:	400a      	ands	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]

	// Check if the pointer exceeds the message length
	if((bitPointer / 8) > messageString.length())
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	8b1b      	ldrh	r3, [r3, #24]
 80005a4:	08db      	lsrs	r3, r3, #3
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	001c      	movs	r4, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 fca4 	bl	8002efa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80005b2:	0003      	movs	r3, r0
 80005b4:	42a3      	cmp	r3, r4
 80005b6:	419b      	sbcs	r3, r3
 80005b8:	425b      	negs	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <_ZN7message10setNextBitEv+0x94>
	{
		return NO_NEW_BITS;
 80005c0:	2302      	movs	r3, #2
 80005c2:	e008      	b.n	80005d6 <_ZN7message10setNextBitEv+0xa6>
	}
	else
	{
		// Move to the next bit
		bitPointer++;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	8b1b      	ldrh	r3, [r3, #24]
 80005c8:	3301      	adds	r3, #1
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	831a      	strh	r2, [r3, #24]

		return bit;
 80005d0:	230f      	movs	r3, #15
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	781b      	ldrb	r3, [r3, #0]
	}
}
 80005d6:	0018      	movs	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	b007      	add	sp, #28
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005de <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	0018      	movs	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b002      	add	sp, #8
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_ZN7messageD1Ev>:
extern "C"
{
#include "main.h"
}

class message
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 fc70 	bl	8002ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN5radio4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include "radio.h"

// The send function adds a message to the queue.
// The interrupt handler will notice and start sending this message bit by bit.
void radio::send(string msg)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b090      	sub	sp, #64	; 0x40
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	message m(msg);
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	2428      	movs	r4, #40	; 0x28
 800061a:	193b      	adds	r3, r7, r4
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f002 fc71 	bl	8002f06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000624:	193a      	adds	r2, r7, r4
 8000626:	250c      	movs	r5, #12
 8000628:	197b      	adds	r3, r7, r5
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff ff68 	bl	8000502 <_ZN7messageC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000632:	193b      	adds	r3, r7, r4
 8000634:	0018      	movs	r0, r3
 8000636:	f002 fc54 	bl	8002ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	messages.push_back(m);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3304      	adds	r3, #4
 800063e:	197a      	adds	r2, r7, r5
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f97a 	bl	800093c <_ZNSt7__cxx114listI7messageSaIS1_EE9push_backERKS1_>
	message m(msg);
 8000648:	197b      	adds	r3, r7, r5
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ffd1 	bl	80005f2 <_ZN7messageD1Ev>
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b010      	add	sp, #64	; 0x40
 8000656:	bdb0      	pop	{r4, r5, r7, pc}

08000658 <_ZN7messageC1ERKS_>:
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f002 fc4c 	bl	8002f06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	8b1a      	ldrh	r2, [r3, #24]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	831a      	strh	r2, [r3, #24]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}

08000680 <_ZN5radio10getMessageEv>:

// Return the currently active message
message radio::getMessage()
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	auto iterator = messages.begin();
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	3304      	adds	r3, #4
 800068e:	0018      	movs	r0, r3
 8000690:	f000 f967 	bl	8000962 <_ZNSt7__cxx114listI7messageSaIS1_EE5beginEv>
 8000694:	0003      	movs	r3, r0
 8000696:	60fb      	str	r3, [r7, #12]
	advance(iterator, messagePointer);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	240c      	movs	r4, #12
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f96e 	bl	8000984 <_ZSt7advanceISt14_List_iteratorI7messageEhEvRT_T0_>
	return *iterator;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 f982 	bl	80009b4 <_ZNKSt14_List_iteratorI7messageEdeEv>
 80006b0:	0002      	movs	r2, r0
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f7ff ffce 	bl	8000658 <_ZN7messageC1ERKS_>
}
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	46bd      	mov	sp, r7
 80006c0:	b005      	add	sp, #20
 80006c2:	bd90      	pop	{r4, r7, pc}

080006c4 <_ZN5radio10getNextBitEv>:

uint8_t radio::getNextBit()
{
 80006c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c6:	b093      	sub	sp, #76	; 0x4c
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	uint8_t retVal;

	message m = getMessage();
 80006cc:	250c      	movs	r5, #12
 80006ce:	197b      	adds	r3, r7, r5
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff ffd3 	bl	8000680 <_ZN5radio10getMessageEv>
	retVal = m.setNextBit();
 80006da:	2647      	movs	r6, #71	; 0x47
 80006dc:	19bc      	adds	r4, r7, r6
 80006de:	197b      	adds	r3, r7, r5
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff ff25 	bl	8000530 <_ZN7message10setNextBitEv>
 80006e6:	0003      	movs	r3, r0
 80006e8:	7023      	strb	r3, [r4, #0]
	setMessage(m);
 80006ea:	197a      	adds	r2, r7, r5
 80006ec:	2428      	movs	r4, #40	; 0x28
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f7ff ffb0 	bl	8000658 <_ZN7messageC1ERKS_>
 80006f8:	193a      	adds	r2, r7, r4
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 f80f 	bl	8000722 <_ZN5radio10setMessageE7message>
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ff73 	bl	80005f2 <_ZN7messageD1Ev>

	return retVal;
 800070c:	19bb      	adds	r3, r7, r6
 800070e:	781c      	ldrb	r4, [r3, #0]
	message m = getMessage();
 8000710:	197b      	adds	r3, r7, r5
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff ff6d 	bl	80005f2 <_ZN7messageD1Ev>
	return retVal;
 8000718:	0023      	movs	r3, r4
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b013      	add	sp, #76	; 0x4c
 8000720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000722 <_ZN5radio10setMessageE7message>:
}

// Replace the currently active message.
// This is for keeping the bitPointer variable updated.
void radio::setMessage(message m)
{
 8000722:	b5b0      	push	{r4, r5, r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	6039      	str	r1, [r7, #0]
	auto iterator = messages.begin();
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3304      	adds	r3, #4
 8000730:	0018      	movs	r0, r3
 8000732:	f000 f916 	bl	8000962 <_ZNSt7__cxx114listI7messageSaIS1_EE5beginEv>
 8000736:	0003      	movs	r3, r0
 8000738:	60bb      	str	r3, [r7, #8]
	advance(iterator, messagePointer);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	2508      	movs	r5, #8
 8000740:	197b      	adds	r3, r7, r5
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f000 f91d 	bl	8000984 <_ZSt7advanceISt14_List_iteratorI7messageEhEvRT_T0_>
	messages.insert(iterator,m);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1d1c      	adds	r4, r3, #4
 800074e:	197a      	adds	r2, r7, r5
 8000750:	230c      	movs	r3, #12
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	0011      	movs	r1, r2
 8000756:	0018      	movs	r0, r3
 8000758:	f000 f93a 	bl	80009d0 <_ZNSt20_List_const_iteratorI7messageEC1ERKSt14_List_iteratorIS0_E>
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	0019      	movs	r1, r3
 8000762:	0020      	movs	r0, r4
 8000764:	f000 f942 	bl	80009ec <_ZNSt7__cxx114listI7messageSaIS1_EE6insertESt20_List_const_iteratorIS1_ERKS1_>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bdb0      	pop	{r4, r5, r7, pc}

08000770 <_ZN5radio11nextMessageEv>:

// Move on to the next message.
// This is called when the previous message is fully sent.
uint8_t radio::nextMessage()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if(messages.size() > (messagePointer + 1))
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3304      	adds	r3, #4
 800077c:	0018      	movs	r0, r3
 800077e:	f000 f95f 	bl	8000a40 <_ZNKSt7__cxx114listI7messageSaIS1_EE4sizeEv>
 8000782:	0002      	movs	r2, r0
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4293      	cmp	r3, r2
 800078c:	419b      	sbcs	r3, r3
 800078e:	425b      	negs	r3, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <_ZN5radio11nextMessageEv+0x30>
	{
		messagePointer = 0;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
		return NO_NEW_MESSAGE;
 800079c:	2303      	movs	r3, #3
 800079e:	e006      	b.n	80007ae <_ZN5radio11nextMessageEv+0x3e>
	}
	else
	{
		messagePointer++;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	701a      	strb	r2, [r3, #0]
		return 0;
 80007ac:	2300      	movs	r3, #0
	}
}
 80007ae:	0018      	movs	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <_ZN5radio9interruptEv>:

// Function to be called by the interrupt handler.
// Standard version with start and stop bits, using a state machine.
void radio::interrupt()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

	// State machine variable to keep track of message progress across interrupts
	static uint8_t state = START_HIGH;

	// When done waiting, move on to the next instruction
	if(holdFor <= 1)
 80007c0:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <_ZN5radio9interruptEv+0x118>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d900      	bls.n	80007ca <_ZN5radio9interruptEv+0x12>
 80007c8:	e074      	b.n	80008b4 <_ZN5radio9interruptEv+0xfc>
	{
		switch(state)
 80007ca:	4b42      	ldr	r3, [pc, #264]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b06      	cmp	r3, #6
 80007d0:	d900      	bls.n	80007d4 <_ZN5radio9interruptEv+0x1c>
 80007d2:	e079      	b.n	80008c8 <_ZN5radio9interruptEv+0x110>
 80007d4:	009a      	lsls	r2, r3, #2
 80007d6:	4b40      	ldr	r3, [pc, #256]	; (80008d8 <_ZN5radio9interruptEv+0x120>)
 80007d8:	18d3      	adds	r3, r2, r3
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	469f      	mov	pc, r3
		{
			case START_HIGH:
				SEND_HIGH;
 80007de:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <_ZN5radio9interruptEv+0x124>)
 80007e0:	2208      	movs	r2, #8
 80007e2:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 80007e4:	4b3a      	ldr	r3, [pc, #232]	; (80008d0 <_ZN5radio9interruptEv+0x118>)
 80007e6:	2205      	movs	r2, #5
 80007e8:	701a      	strb	r2, [r3, #0]
				state = START_LOW;
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
				break;
 80007f0:	e06a      	b.n	80008c8 <_ZN5radio9interruptEv+0x110>
			case START_LOW:
				SEND_LOW;
 80007f2:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <_ZN5radio9interruptEv+0x124>)
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	0312      	lsls	r2, r2, #12
 80007f8:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <_ZN5radio9interruptEv+0x118>)
 80007fc:	2205      	movs	r2, #5
 80007fe:	701a      	strb	r2, [r3, #0]
				state = MSG_HIGH;
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 8000802:	2202      	movs	r2, #2
 8000804:	701a      	strb	r2, [r3, #0]
				break;
 8000806:	e05f      	b.n	80008c8 <_ZN5radio9interruptEv+0x110>
			case MSG_HIGH:
				switch(getNextBit())
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff ff5a 	bl	80006c4 <_ZN5radio10getNextBitEv>
 8000810:	0003      	movs	r3, r0
 8000812:	2b02      	cmp	r3, #2
 8000814:	d019      	beq.n	800084a <_ZN5radio9interruptEv+0x92>
 8000816:	dc54      	bgt.n	80008c2 <_ZN5radio9interruptEv+0x10a>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <_ZN5radio9interruptEv+0x6a>
 800081c:	2b01      	cmp	r3, #1
 800081e:	d00a      	beq.n	8000836 <_ZN5radio9interruptEv+0x7e>
					case NO_NEW_BITS:
						SEND_LOW;
						state = STOP_HIGH;
						break;
				}
				break;
 8000820:	e04f      	b.n	80008c2 <_ZN5radio9interruptEv+0x10a>
						SEND_HIGH;
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <_ZN5radio9interruptEv+0x124>)
 8000824:	2208      	movs	r2, #8
 8000826:	619a      	str	r2, [r3, #24]
						holdFor = LENGTH_ZERO;
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <_ZN5radio9interruptEv+0x118>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
						state = MSG_LOW;
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 8000830:	2203      	movs	r2, #3
 8000832:	701a      	strb	r2, [r3, #0]
						break;
 8000834:	e011      	b.n	800085a <_ZN5radio9interruptEv+0xa2>
						SEND_HIGH;
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <_ZN5radio9interruptEv+0x124>)
 8000838:	2208      	movs	r2, #8
 800083a:	619a      	str	r2, [r3, #24]
						holdFor = LENGTH_ONE;
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <_ZN5radio9interruptEv+0x118>)
 800083e:	2203      	movs	r2, #3
 8000840:	701a      	strb	r2, [r3, #0]
						state = MSG_LOW;
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 8000844:	2203      	movs	r2, #3
 8000846:	701a      	strb	r2, [r3, #0]
						break;
 8000848:	e007      	b.n	800085a <_ZN5radio9interruptEv+0xa2>
						SEND_LOW;
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <_ZN5radio9interruptEv+0x124>)
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	0312      	lsls	r2, r2, #12
 8000850:	619a      	str	r2, [r3, #24]
						state = STOP_HIGH;
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 8000854:	2205      	movs	r2, #5
 8000856:	701a      	strb	r2, [r3, #0]
						break;
 8000858:	46c0      	nop			; (mov r8, r8)
				break;
 800085a:	e032      	b.n	80008c2 <_ZN5radio9interruptEv+0x10a>
			case MSG_LOW:
				SEND_LOW;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <_ZN5radio9interruptEv+0x124>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	0312      	lsls	r2, r2, #12
 8000862:	619a      	str	r2, [r3, #24]
				state = MSG_HIGH;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 8000866:	2202      	movs	r2, #2
 8000868:	701a      	strb	r2, [r3, #0]
				break;
 800086a:	e02d      	b.n	80008c8 <_ZN5radio9interruptEv+0x110>
			case STOP_HIGH:
				SEND_HIGH;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <_ZN5radio9interruptEv+0x124>)
 800086e:	2208      	movs	r2, #8
 8000870:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <_ZN5radio9interruptEv+0x118>)
 8000874:	2205      	movs	r2, #5
 8000876:	701a      	strb	r2, [r3, #0]
				state = STOP_LOW;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 800087a:	2204      	movs	r2, #4
 800087c:	701a      	strb	r2, [r3, #0]
				break;
 800087e:	e023      	b.n	80008c8 <_ZN5radio9interruptEv+0x110>
			case STOP_LOW:
				SEND_LOW;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <_ZN5radio9interruptEv+0x124>)
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	0312      	lsls	r2, r2, #12
 8000886:	619a      	str	r2, [r3, #24]
				holdFor = LENGTH_START;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_ZN5radio9interruptEv+0x118>)
 800088a:	2205      	movs	r2, #5
 800088c:	701a      	strb	r2, [r3, #0]
				state = IDLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 8000890:	2206      	movs	r2, #6
 8000892:	701a      	strb	r2, [r3, #0]
				break;
 8000894:	e018      	b.n	80008c8 <_ZN5radio9interruptEv+0x110>
			case IDLE:
				if(nextMessage() != NO_NEW_MESSAGE)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff ff69 	bl	8000770 <_ZN5radio11nextMessageEv>
 800089e:	0003      	movs	r3, r0
 80008a0:	3b03      	subs	r3, #3
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	4193      	sbcs	r3, r2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00c      	beq.n	80008c6 <_ZN5radio9interruptEv+0x10e>
				{
					state = START_HIGH;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <_ZN5radio9interruptEv+0x11c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
				}
				break;
 80008b2:	e008      	b.n	80008c6 <_ZN5radio9interruptEv+0x10e>
		}
	}
	else
	{
		holdFor--;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <_ZN5radio9interruptEv+0x118>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <_ZN5radio9interruptEv+0x118>)
 80008be:	701a      	strb	r2, [r3, #0]
	}
}
 80008c0:	e002      	b.n	80008c8 <_ZN5radio9interruptEv+0x110>
				break;
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	e000      	b.n	80008c8 <_ZN5radio9interruptEv+0x110>
				break;
 80008c6:	46c0      	nop			; (mov r8, r8)
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	0800327c 	.word	0x0800327c
 80008dc:	48000400 	.word	0x48000400

080008e0 <_ZN5radio4edgeEv>:
			break;
	}
}

void radio::edge()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	// check if already counting
	if(isCounting)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7c9b      	ldrb	r3, [r3, #18]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00b      	beq.n	8000908 <_ZN5radio4edgeEv+0x28>
	{
		// Stop the timer and check the counter
		stopCounter();
 80008f0:	f7ff fd2c 	bl	800034c <stopCounter>
		isCounting = false;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	749a      	strb	r2, [r3, #18]

		if((ZERO_MIN > counter) && (counter > ZERO_MAX))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	8a1b      	ldrh	r3, [r3, #16]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10a      	bne.n	8000918 <_ZN5radio4edgeEv+0x38>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	8a1b      	ldrh	r3, [r3, #16]
 8000906:	e007      	b.n	8000918 <_ZN5radio4edgeEv+0x38>
		}
	}
	else
	{
		// Start the counter's timer
		counter = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	821a      	strh	r2, [r3, #16]
		startCounter();
 800090e:	f7ff fd13 	bl	8000338 <startCounter>
		isCounting = true;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	749a      	strb	r2, [r3, #18]
	}
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <_ZN5radio5countEv>:

void radio::count()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	counter++;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	8a1b      	ldrh	r3, [r3, #16]
 800092c:	3301      	adds	r3, #1
 800092e:	b29a      	uxth	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	821a      	strh	r2, [r3, #16]
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZNSt7__cxx114listI7messageSaIS1_EE9push_backERKS1_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	0018      	movs	r0, r3
 800094a:	f000 f886 	bl	8000a5a <_ZNSt7__cxx114listI7messageSaIS1_EE3endEv>
 800094e:	0001      	movs	r1, r0
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	0018      	movs	r0, r3
 8000956:	f000 f890 	bl	8000a7a <_ZNSt7__cxx114listI7messageSaIS1_EE9_M_insertIJRKS1_EEEvSt14_List_iteratorIS1_EDpOT_>
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}

08000962 <_ZNSt7__cxx114listI7messageSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	230c      	movs	r3, #12
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f000 f8a1 	bl	8000abc <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b004      	add	sp, #16
 8000982:	bd80      	pop	{r7, pc}

08000984 <_ZSt7advanceISt14_List_iteratorI7messageEhEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	000a      	movs	r2, r1
 800098e:	1cfb      	adds	r3, r7, #3
 8000990:	701a      	strb	r2, [r3, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8000992:	1cfb      	adds	r3, r7, #3
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	0018      	movs	r0, r3
 800099c:	f000 f89b 	bl	8000ad6 <_ZSt19__iterator_categoryISt14_List_iteratorI7messageEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 80009a0:	68f9      	ldr	r1, [r7, #12]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	1c22      	adds	r2, r4, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f89d 	bl	8000ae6 <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag>
    }
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b005      	add	sp, #20
 80009b2:	bd90      	pop	{r4, r7, pc}

080009b4 <_ZNKSt14_List_iteratorI7messageEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 f8b8 	bl	8000b36 <_ZNSt10_List_nodeI7messageE9_M_valptrEv>
 80009c6:	0003      	movs	r3, r0
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_ZNSt20_List_const_iteratorI7messageEC1ERKSt14_List_iteratorIS0_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_ZNSt7__cxx114listI7messageSaIS1_EE6insertESt20_List_const_iteratorIS1_ERKS1_>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
    insert(const_iterator __position, const value_type& __x)
#else
    insert(iterator __position, const value_type& __x)
#endif
    {
      _Node* __tmp = _M_create_node(__x);
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 f8a7 	bl	8000b52 <_ZNSt7__cxx114listI7messageSaIS1_EE14_M_create_nodeIJRKS1_EEEPSt10_List_nodeIS1_EDpOT_>
 8000a04:	0003      	movs	r3, r0
 8000a06:	617b      	str	r3, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8000a08:	697c      	ldr	r4, [r7, #20]
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f8d5 	bl	8000bbe <_ZNKSt20_List_const_iteratorI7messageE13_M_const_castEv>
 8000a14:	0003      	movs	r3, r0
 8000a16:	0019      	movs	r1, r3
 8000a18:	0020      	movs	r0, r4
 8000a1a:	f002 f9d9 	bl	8002dd0 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2101      	movs	r1, #1
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f8dc 	bl	8000be0 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 f843 	bl	8000abc <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>
 8000a36:	693b      	ldr	r3, [r7, #16]
    }
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b007      	add	sp, #28
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <_ZNKSt7__cxx114listI7messageSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 f8d7 	bl	8000bfe <_ZNKSt7__cxx114listI7messageSaIS1_EE13_M_node_countEv>
 8000a50:	0003      	movs	r3, r0
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_ZNSt7__cxx114listI7messageSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	230c      	movs	r3, #12
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f826 	bl	8000abc <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_ZNSt7__cxx114listI7messageSaIS1_EE9_M_insertIJRKS1_EEEvSt14_List_iteratorIS1_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 f8c5 	bl	8000c18 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8000a8e:	0002      	movs	r2, r0
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 f85c 	bl	8000b52 <_ZNSt7__cxx114listI7messageSaIS1_EE14_M_create_nodeIJRKS1_EEEPSt10_List_nodeIS1_EDpOT_>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	617b      	str	r3, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f002 f993 	bl	8002dd0 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2101      	movs	r1, #1
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 f896 	bl	8000be0 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_inc_sizeEj>
       }
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b006      	add	sp, #24
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_ZSt19__iterator_categoryISt14_List_iteratorI7messageEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000ade:	1c18      	adds	r0, r3, #0
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag>:
    __advance(_BidirectionalIterator& __i, _Distance __n,
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	701a      	strb	r2, [r3, #0]
      if (__n > 0)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	dd0c      	ble.n	8000b14 <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
        while (__n--)
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	60ba      	str	r2, [r7, #8]
 8000b00:	1e5a      	subs	r2, r3, #1
 8000b02:	4193      	sbcs	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d011      	beq.n	8000b2e <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x48>
	  ++__i;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 f88c 	bl	8000c2a <_ZNSt14_List_iteratorI7messageEppEv>
        while (__n--)
 8000b12:	e7f2      	b.n	8000afa <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x14>
        while (__n++)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	4193      	sbcs	r3, r2
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d004      	beq.n	8000b2e <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x48>
	  --__i;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 f88d 	bl	8000c46 <_ZNSt14_List_iteratorI7messageEmmEv>
        while (__n++)
 8000b2c:	e7f2      	b.n	8000b14 <_ZSt9__advanceISt14_List_iteratorI7messageEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
    }
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b004      	add	sp, #16
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_ZNSt10_List_nodeI7messageE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3308      	adds	r3, #8
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 f88d 	bl	8000c62 <_ZN9__gnu_cxx16__aligned_membufI7messageE6_M_ptrEv>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_ZNSt7__cxx114listI7messageSaIS1_EE14_M_create_nodeIJRKS1_EEEPSt10_List_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8000b52:	b5b0      	push	{r4, r5, r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 f88c 	bl	8000c7c <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_get_nodeEv>
 8000b64:	0003      	movs	r3, r0
 8000b66:	617b      	str	r3, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 f894 	bl	8000c98 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE21_M_get_Node_allocatorEv>
 8000b70:	0003      	movs	r3, r0
 8000b72:	613b      	str	r3, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	6939      	ldr	r1, [r7, #16]
 8000b78:	2508      	movs	r5, #8
 8000b7a:	197b      	adds	r3, r7, r5
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 f894 	bl	8000caa <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEEC1ERS3_PS2_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ffd6 	bl	8000b36 <_ZNSt10_List_nodeI7messageE9_M_valptrEv>
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 f842 	bl	8000c18 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8000b94:	0002      	movs	r2, r0
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	0021      	movs	r1, r4
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f8af 	bl	8000cfe <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE9constructIS1_JRKS1_EEEvRS3_PT_DpOT0_>
	  __guard = nullptr;
 8000ba0:	197b      	adds	r3, r7, r5
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 f8be 	bl	8000d26 <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEEaSEDn>
	  return __p;
 8000baa:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8000bac:	197b      	adds	r3, r7, r5
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 f890 	bl	8000cd4 <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEED1Ev>
	  return __p;
 8000bb4:	0023      	movs	r3, r4
	}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b006      	add	sp, #24
 8000bbc:	bdb0      	pop	{r4, r5, r7, pc}

08000bbe <_ZNKSt20_List_const_iteratorI7messageE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	230c      	movs	r3, #12
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	0011      	movs	r1, r2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ff73 	bl	8000abc <_ZNSt14_List_iteratorI7messageEC1EPNSt8__detail15_List_node_baseE>
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b004      	add	sp, #16
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	18d2      	adds	r2, r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_ZNKSt7__cxx114listI7messageSaIS1_EE13_M_node_countEv>:
      _M_node_count() const
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 f899 	bl	8000d40 <_ZNKSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_get_sizeEv>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_ZNSt14_List_iteratorI7messageEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	601a      	str	r2, [r3, #0]
	return *this;
 8000c3c:	687b      	ldr	r3, [r7, #4]
      }
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_ZNSt14_List_iteratorI7messageEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_prev;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	601a      	str	r2, [r3, #0]
	return *this;
 8000c58:	687b      	ldr	r3, [r7, #4]
      }
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_ZN9__gnu_cxx16__aligned_membufI7messageE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 f871 	bl	8000d54 <_ZN9__gnu_cxx16__aligned_membufI7messageE7_M_addrEv>
 8000c72:	0003      	movs	r3, r0
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b002      	add	sp, #8
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2101      	movs	r1, #1
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 f86c 	bl	8000d66 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE8allocateERS3_j>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEEC1ERS3_PS2_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f000 f864 	bl	8000d86 <_ZSt11__addressofISaISt10_List_nodeI7messageEEEPT_RS4_>
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	605a      	str	r2, [r3, #4]
      { }
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b004      	add	sp, #16
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d007      	beq.n	8000cf4 <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2201      	movs	r2, #1
 8000cee:	0019      	movs	r1, r3
 8000cf0:	f000 f852 	bl	8000d98 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE10deallocateERS3_PS2_j>
      }
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE9constructIS1_JRKS1_EEEvRS3_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ff83 	bl	8000c18 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d12:	0002      	movs	r2, r0
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 f84d 	bl	8000db8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_ZNSt15__allocated_ptrISaISt10_List_nodeI7messageEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
	return *this;
 8000d36:	687b      	ldr	r3, [r7, #4]
      }
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_ZNKSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZN9__gnu_cxx16__aligned_membufI7messageE7_M_addrEv>:
      _M_addr() noexcept
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 f837 	bl	8000dea <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8allocateEjPKv>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZSt11__addressofISaISt10_List_nodeI7messageEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 f83e 	bl	8000e2c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE10deallocateEPS3_j>
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b004      	add	sp, #16
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff ff26 	bl	8000c18 <_ZSt7forwardIRK7messageEOT_RNSt16remove_referenceIS3_E4typeE>
 8000dcc:	0004      	movs	r4, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	201c      	movs	r0, #28
 8000dd4:	f7ff fc03 	bl	80005de <_ZnwjPv>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	0021      	movs	r1, r4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff fc3b 	bl	8000658 <_ZN7messageC1ERKS_>
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b005      	add	sp, #20
 8000de8:	bd90      	pop	{r4, r7, pc}

08000dea <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f000 f825 	bl	8000e48 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8max_sizeEv>
 8000dfe:	0002      	movs	r2, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	419b      	sbcs	r3, r3
 8000e06:	425b      	negs	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8000e0e:	f001 ffe6 	bl	8002dde <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	0013      	movs	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	189b      	adds	r3, r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 ffc3 	bl	8002da8 <_Znwj>
 8000e22:	0003      	movs	r3, r0
      }
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b004      	add	sp, #16
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f001 ffb0 	bl	8002da0 <_ZdlPv>
      }
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b004      	add	sp, #16
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE8max_sizeEv+0x14>)
      }
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	038e38e3 	.word	0x038e38e3

08000e60 <_ZNSt8__detail17_List_node_headerC1Ev>:
      _List_node_header() _GLIBCXX_NOEXCEPT
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f000 f805 	bl	8000e7a <_ZNSt8__detail17_List_node_header7_M_initEv>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_ZNSt8__detail17_List_node_header7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	this->_M_next = this->_M_prev = this;
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	601a      	str	r2, [r3, #0]
	this->_M_size = 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
      }
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE10_List_implD1Ev>:
      struct _List_impl
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 f8a8 	bl	8000ffe <_ZNSaISt10_List_nodeI7messageEED1Ev>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EEC1Ev>:
      _List_base() = default;
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 f88a 	bl	8000fdc <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE10_List_implC1Ev>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_ZNSt7__cxx114listI7messageSaIS1_EEC1Ev>:
      list() = default;
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ffeb 	bl	8000eb8 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EEC1Ev>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_ZNSt7__cxx114listI7messageSaIS1_EED1Ev>:
      ~list() = default;
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 f88e 	bl	8001018 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EED1Ev>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_ZN5radioC1Ev>:
#include <string>
#include <list>
#include "message.h"
#include "main.h"

class radio
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3304      	adds	r3, #4
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff ffdd 	bl	8000ed2 <_ZNSt7__cxx114listI7messageSaIS1_EEC1Ev>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <radioSend>:
#include "radioAPI.h"

radio r;

void radioSend(char * message, uint8_t length)
{
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	b091      	sub	sp, #68	; 0x44
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	1cfb      	adds	r3, r7, #3
 8000f30:	701a      	strb	r2, [r3, #0]
	// Convert C char pointer to C++ string
	string messageString(message, message + length);
 8000f32:	1cfb      	adds	r3, r7, #3
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	18d4      	adds	r4, r2, r3
 8000f3a:	2524      	movs	r5, #36	; 0x24
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f001 ff44 	bl	8002dcc <_ZNSaIcEC1Ev>
 8000f44:	197b      	adds	r3, r7, r5
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	260c      	movs	r6, #12
 8000f4a:	19b8      	adds	r0, r7, r6
 8000f4c:	0022      	movs	r2, r4
 8000f4e:	f000 f874 	bl	800103a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8000f52:	197b      	adds	r3, r7, r5
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 ff3a 	bl	8002dce <_ZNSaIcED1Ev>

	return r.send(messageString);
 8000f5a:	0034      	movs	r4, r6
 8000f5c:	193a      	adds	r2, r7, r4
 8000f5e:	2528      	movs	r5, #40	; 0x28
 8000f60:	197b      	adds	r3, r7, r5
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 ffce 	bl	8002f06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000f6a:	197a      	adds	r2, r7, r5
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <radioSend+0x6c>)
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff fb4b 	bl	800060c <_ZN5radio4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000f76:	197b      	adds	r3, r7, r5
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f001 ffb2 	bl	8002ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string messageString(message, message + length);
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	f001 ffae 	bl	8002ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return r.send(messageString);
 8000f86:	46c0      	nop			; (mov r8, r8)
}
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b011      	add	sp, #68	; 0x44
 8000f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	20000090 	.word	0x20000090

08000f94 <radioInterrupt>:

void radioInterrupt()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	// Use this version if you don't want Manchester encoding
	return r.interrupt();
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <radioInterrupt+0x14>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff fc0c 	bl	80007b8 <_ZN5radio9interruptEv>
 8000fa0:	46c0      	nop			; (mov r8, r8)
	//return r.interruptManchester();
}
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	20000090 	.word	0x20000090

08000fac <radioEdge>:

void radioEdge()
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	return r.edge();
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <radioEdge+0x14>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f7ff fc94 	bl	80008e0 <_ZN5radio4edgeEv>
 8000fb8:	46c0      	nop			; (mov r8, r8)
}
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	20000090 	.word	0x20000090

08000fc4 <radioCount>:

void radioCount()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	return r.count();
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <radioCount+0x14>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff fca8 	bl	8000920 <_ZN5radio5countEv>
 8000fd0:	46c0      	nop			; (mov r8, r8)
}
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	20000090 	.word	0x20000090

08000fdc <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 f844 	bl	8001074 <_ZNSaISt10_List_nodeI7messageEEC1Ev>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff36 	bl	8000e60 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZNSaISt10_List_nodeI7messageEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	0018      	movs	r0, r3
 800100a:	f000 f840 	bl	800108e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEED1Ev>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	b002      	add	sp, #8
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	0018      	movs	r0, r3
 8001024:	f000 f83c 	bl	80010a0 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE8_M_clearEv>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff ff37 	bl	8000e9e <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE10_List_implD1Ev>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
      template<typename _InputIterator,
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
        basic_string(_InputIterator __beg, _InputIterator __end,
 800103a:	b590      	push	{r4, r7, lr}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a)
 8001048:	68fc      	ldr	r4, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	0018      	movs	r0, r3
 800104e:	f001 fed9 	bl	8002e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001052:	0001      	movs	r1, r0
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	001a      	movs	r2, r3
 8001058:	0020      	movs	r0, r4
 800105a:	f001 ff52 	bl	8002f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	0018      	movs	r0, r3
 8001066:	f000 f846 	bl	80010f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b005      	add	sp, #20
 8001072:	bd90      	pop	{r4, r7, pc}

08001074 <_ZNSaISt10_List_nodeI7messageEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f848 	bl	8001114 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEEC1Ev>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d01b      	beq.n	80010ee <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE8_M_clearEv+0x4e>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff fd37 	bl	8000b36 <_ZNSt10_List_nodeI7messageE9_M_valptrEv>
 80010c8:	0003      	movs	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff fde2 	bl	8000c98 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE21_M_get_Node_allocatorEv>
 80010d4:	0002      	movs	r2, r0
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	0019      	movs	r1, r3
 80010da:	0010      	movs	r0, r2
 80010dc:	f000 f823 	bl	8001126 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE7destroyIS1_EEvRS3_PT_>
	  _M_put_node(__tmp);
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 f82c 	bl	8001144 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>
      while (__cur != &_M_impl._M_node)
 80010ec:	e7df      	b.n	80010ae <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE8_M_clearEv+0xe>
    }
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b006      	add	sp, #24
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 f82b 	bl	8001162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b006      	add	sp, #24
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	0018      	movs	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE7destroyIS1_EEvRS3_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f825 	bl	8001186 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE7destroyIS2_EEvPT_>
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZNSt7__cxx1110_List_baseI7messageSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6839      	ldr	r1, [r7, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff fe1f 	bl	8000d98 <_ZNSt16allocator_traitsISaISt10_List_nodeI7messageEEE10deallocateERS3_PS2_j>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}

08001162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001162:	b590      	push	{r4, r7, lr}
 8001164:	b087      	sub	sp, #28
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	003a      	movs	r2, r7
 8001170:	7013      	strb	r3, [r2, #0]
          _M_construct(__beg, __end, _Tag());
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	1c23      	adds	r3, r4, #0
 800117a:	f000 f811 	bl	80011a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b007      	add	sp, #28
 8001184:	bd90      	pop	{r4, r7, pc}

08001186 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI7messageEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	f7ff fa2d 	bl	80005f2 <_ZN7messageD1Ev>
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	003a      	movs	r2, r7
 80011ae:	7013      	strb	r3, [r2, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 f842 	bl	800123c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d005      	beq.n	80011c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d001      	beq.n	80011c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80011c8:	2300      	movs	r3, #0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x36>
	  std::__throw_logic_error(__N("basic_string::"
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x98>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f001 fe07 	bl	8002de4 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f000 f839 	bl	8001254 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80011e2:	0003      	movs	r3, r0
 80011e4:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d912      	bls.n	8001212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x72>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80011ec:	2314      	movs	r3, #20
 80011ee:	18f9      	adds	r1, r7, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	0018      	movs	r0, r3
 80011f6:	f001 fe0f 	bl	8002e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80011fa:	0002      	movs	r2, r0
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fdfb 	bl	8002dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f001 fdfb 	bl	8002e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	0018      	movs	r0, r3
 8001216:	f001 fdf3 	bl	8002e00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	0019      	movs	r1, r3
 8001220:	f001 fe2c 	bl	8002e7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	0011      	movs	r1, r2
 800122a:	0018      	movs	r0, r3
 800122c:	f001 fdee 	bl	8002e0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b006      	add	sp, #24
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08003230 	.word	0x08003230

0800123c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	425a      	negs	r2, r3
 8001248:	4153      	adcs	r3, r2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800125e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	0018      	movs	r0, r3
 8001264:	f000 f80b 	bl	800127e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	1c2a      	adds	r2, r5, #0
 800126c:	0019      	movs	r1, r3
 800126e:	0020      	movs	r0, r4
 8001270:	f000 f80d 	bl	800128e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001274:	0003      	movs	r3, r0
    }
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b004      	add	sp, #16
 800127c:	bdb0      	pop	{r4, r5, r7, pc}

0800127e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001286:	1c18      	adds	r0, r3, #0
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}

0800128e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
    }
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_ZN5radioD1Ev>:
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3304      	adds	r3, #4
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff fe18 	bl	8000eec <_ZNSt7__cxx114listI7messageSaIS1_EED1Ev>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <_Z41__static_initialization_and_destruction_0ii>:
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d107      	bne.n	80012e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d103      	bne.n	80012e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
radio r;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff fe0f 	bl	8000f06 <_ZN5radioC1Ev>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d107      	bne.n	80012fe <_Z41__static_initialization_and_destruction_0ii+0x36>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d103      	bne.n	80012fe <_Z41__static_initialization_and_destruction_0ii+0x36>
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff ffd6 	bl	80012aa <_ZN5radioD1Ev>
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	0000ffff 	.word	0x0000ffff
 800130c:	20000090 	.word	0x20000090

08001310 <_GLOBAL__sub_I_r>:
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <_GLOBAL__sub_I_r+0x14>)
 8001316:	0019      	movs	r1, r3
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff ffd5 	bl	80012c8 <_Z41__static_initialization_and_destruction_0ii>
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	0000ffff 	.word	0x0000ffff

08001328 <_GLOBAL__sub_D_r>:
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <_GLOBAL__sub_D_r+0x14>)
 800132e:	0019      	movs	r1, r3
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ffc9 	bl	80012c8 <_Z41__static_initialization_and_destruction_0ii>
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	0000ffff 	.word	0x0000ffff

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_MspInit+0x44>)
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_MspInit+0x44>)
 800134c:	2101      	movs	r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	619a      	str	r2, [r3, #24]
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_MspInit+0x44>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2201      	movs	r2, #1
 8001358:	4013      	ands	r3, r2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x44>)
 8001360:	69da      	ldr	r2, [r3, #28]
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_MspInit+0x44>)
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	0549      	lsls	r1, r1, #21
 8001368:	430a      	orrs	r2, r1
 800136a:	61da      	str	r2, [r3, #28]
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_MspInit+0x44>)
 800136e:	69da      	ldr	r2, [r3, #28]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	055b      	lsls	r3, r3, #21
 8001374:	4013      	ands	r3, r2
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	0019      	movs	r1, r3
 800139e:	2010      	movs	r0, #16
 80013a0:	f000 fa6e 	bl	8001880 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013a4:	2010      	movs	r0, #16
 80013a6:	f000 fa80 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_InitTick+0xa4>)
 80013ac:	69da      	ldr	r2, [r3, #28]
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <HAL_InitTick+0xa4>)
 80013b0:	2102      	movs	r1, #2
 80013b2:	430a      	orrs	r2, r1
 80013b4:	61da      	str	r2, [r3, #28]
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_InitTick+0xa4>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c2:	230c      	movs	r3, #12
 80013c4:	18fa      	adds	r2, r7, r3
 80013c6:	2310      	movs	r3, #16
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f001 f8a9 	bl	8002524 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013d2:	f001 f891 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 80013d6:	0003      	movs	r3, r0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	4914      	ldr	r1, [pc, #80]	; (8001430 <HAL_InitTick+0xa8>)
 80013de:	0018      	movs	r0, r3
 80013e0:	f7fe fe92 	bl	8000108 <__udivsi3>
 80013e4:	0003      	movs	r3, r0
 80013e6:	3b01      	subs	r3, #1
 80013e8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0xac>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <HAL_InitTick+0xb0>)
 80013ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_InitTick+0xac>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_InitTick+0xb4>)
 80013f4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_InitTick+0xac>)
 80013f8:	6a3a      	ldr	r2, [r7, #32]
 80013fa:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_InitTick+0xac>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_InitTick+0xac>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_InitTick+0xac>)
 800140a:	0018      	movs	r0, r3
 800140c:	f001 f8b4 	bl	8002578 <HAL_TIM_Base_Init>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d105      	bne.n	8001420 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_InitTick+0xac>)
 8001416:	0018      	movs	r0, r3
 8001418:	f001 f8fe 	bl	8002618 <HAL_TIM_Base_Start_IT>
 800141c:	0003      	movs	r3, r0
 800141e:	e000      	b.n	8001422 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b00a      	add	sp, #40	; 0x28
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40021000 	.word	0x40021000
 8001430:	000f4240 	.word	0x000f4240
 8001434:	200000b4 	.word	0x200000b4
 8001438:	40000400 	.word	0x40000400
 800143c:	000003e7 	.word	0x000003e7

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

	radioCount();
 8001464:	f7ff fdae 	bl	8000fc4 <radioCount>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001472:	2002      	movs	r0, #2
 8001474:	f000 fbc4 	bl	8001c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  radioEdge();
 8001478:	f7ff fd98 	bl	8000fac <radioEdge>

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <TIM3_IRQHandler+0x14>)
 800148a:	0018      	movs	r0, r3
 800148c:	f001 f910 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	200000b4 	.word	0x200000b4

0800149c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <TIM15_IRQHandler+0x18>)
 80014a2:	0018      	movs	r0, r3
 80014a4:	f001 f904 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  radioInterrupt();
 80014a8:	f7ff fd74 	bl	8000f94 <radioInterrupt>

  /* USER CODE END TIM15_IRQn 1 */
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	200000fc 	.word	0x200000fc

080014b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_kill>:

int _kill(int pid, int sig)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ce:	f001 fd35 	bl	8002f3c <__errno>
 80014d2:	0003      	movs	r3, r0
 80014d4:	2216      	movs	r2, #22
 80014d6:	601a      	str	r2, [r3, #0]
	return -1;
 80014d8:	2301      	movs	r3, #1
 80014da:	425b      	negs	r3, r3
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_exit>:

void _exit (int status)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014ec:	2301      	movs	r3, #1
 80014ee:	425a      	negs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	0011      	movs	r1, r2
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff ffe5 	bl	80014c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014fa:	e7fe      	b.n	80014fa <_exit+0x16>

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f001 fd06 	bl	8002f3c <__errno>
 8001530:	0003      	movs	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	2301      	movs	r3, #1
 8001538:	425b      	negs	r3, r3
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	18d2      	adds	r2, r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <_sbrk+0x64>)
 800154c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b006      	add	sp, #24
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20002000 	.word	0x20002000
 800155c:	00000400 	.word	0x00000400
 8001560:	200000a4 	.word	0x200000a4
 8001564:	20000158 	.word	0x20000158

08001568 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	2308      	movs	r3, #8
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	0018      	movs	r0, r3
 8001580:	2310      	movs	r3, #16
 8001582:	001a      	movs	r2, r3
 8001584:	2100      	movs	r1, #0
 8001586:	f001 fd20 	bl	8002fca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	003b      	movs	r3, r7
 800158c:	0018      	movs	r0, r3
 800158e:	2308      	movs	r3, #8
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f001 fd19 	bl	8002fca <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_TIM15_Init+0xa8>)
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <MX_TIM15_Init+0xac>)
 800159c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 480;
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_TIM15_Init+0xa8>)
 80015a0:	22f0      	movs	r2, #240	; 0xf0
 80015a2:	0052      	lsls	r2, r2, #1
 80015a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_TIM15_Init+0xa8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_TIM15_Init+0xa8>)
 80015ae:	2263      	movs	r2, #99	; 0x63
 80015b0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM15_Init+0xa8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_TIM15_Init+0xa8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_TIM15_Init+0xa8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_TIM15_Init+0xa8>)
 80015c6:	0018      	movs	r0, r3
 80015c8:	f000 ffd6 	bl	8002578 <HAL_TIM_Base_Init>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM15_Init+0x60>
  {
    Error_Handler();
 80015d0:	f7fe ff54 	bl	800047c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d4:	2108      	movs	r1, #8
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	0152      	lsls	r2, r2, #5
 80015dc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80015de:	187a      	adds	r2, r7, r1
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_TIM15_Init+0xa8>)
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f001 f979 	bl	80028dc <HAL_TIM_ConfigClockSource>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80015ee:	f7fe ff45 	bl	800047c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	003b      	movs	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	003b      	movs	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015fe:	003a      	movs	r2, r7
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_TIM15_Init+0xa8>)
 8001602:	0011      	movs	r1, r2
 8001604:	0018      	movs	r0, r3
 8001606:	f001 fb63 	bl	8002cd0 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 800160e:	f7fe ff35 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b006      	add	sp, #24
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	200000fc 	.word	0x200000fc
 8001620:	40014000 	.word	0x40014000

08001624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_TIM_Base_MspInit+0x48>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d115      	bne.n	8001662 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_TIM_Base_MspInit+0x4c>)
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_TIM_Base_MspInit+0x4c>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	0249      	lsls	r1, r1, #9
 8001640:	430a      	orrs	r2, r1
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_TIM_Base_MspInit+0x4c>)
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	025b      	lsls	r3, r3, #9
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 2, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2102      	movs	r1, #2
 8001656:	2014      	movs	r0, #20
 8001658:	f000 f912 	bl	8001880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800165c:	2014      	movs	r0, #20
 800165e:	f000 f924 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40014000 	.word	0x40014000
 8001670:	40021000 	.word	0x40021000

08001674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001676:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480d      	ldr	r0, [pc, #52]	; (80016b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800167a:	490e      	ldr	r1, [pc, #56]	; (80016b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800167c:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <LoopForever+0xe>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001690:	4c0b      	ldr	r4, [pc, #44]	; (80016c0 <LoopForever+0x16>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800169e:	f7ff ff63 	bl	8001568 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80016a2:	f001 fc51 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016a6:	f7fe fe5f 	bl	8000368 <main>

080016aa <LoopForever>:

LoopForever:
    b LoopForever
 80016aa:	e7fe      	b.n	80016aa <LoopForever>
  ldr   r0, =_estack
 80016ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016b8:	080032d8 	.word	0x080032d8
  ldr r2, =_sbss
 80016bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016c0:	20000158 	.word	0x20000158

080016c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_IRQHandler>
	...

080016c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_Init+0x24>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_Init+0x24>)
 80016d2:	2110      	movs	r1, #16
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff fe55 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016de:	f7ff fe2f 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40022000 	.word	0x40022000

080016f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_IncTick+0x1c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	001a      	movs	r2, r3
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_IncTick+0x20>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	18d2      	adds	r2, r2, r3
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_IncTick+0x20>)
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	20000008 	.word	0x20000008
 8001710:	20000144 	.word	0x20000144

08001714 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b02      	ldr	r3, [pc, #8]	; (8001724 <HAL_GetTick+0x10>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	20000144 	.word	0x20000144

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	0002      	movs	r2, r0
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b7f      	cmp	r3, #127	; 0x7f
 800173a:	d809      	bhi.n	8001750 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	231f      	movs	r3, #31
 8001744:	401a      	ands	r2, r3
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_EnableIRQ+0x30>)
 8001748:	2101      	movs	r1, #1
 800174a:	4091      	lsls	r1, r2
 800174c:	000a      	movs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
  }
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}
 8001758:	e000e100 	.word	0xe000e100

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	0002      	movs	r2, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b7f      	cmp	r3, #127	; 0x7f
 8001770:	d828      	bhi.n	80017c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001772:	4a2f      	ldr	r2, [pc, #188]	; (8001830 <__NVIC_SetPriority+0xd4>)
 8001774:	1dfb      	adds	r3, r7, #7
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	33c0      	adds	r3, #192	; 0xc0
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	589b      	ldr	r3, [r3, r2]
 8001782:	1dfa      	adds	r2, r7, #7
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	0011      	movs	r1, r2
 8001788:	2203      	movs	r2, #3
 800178a:	400a      	ands	r2, r1
 800178c:	00d2      	lsls	r2, r2, #3
 800178e:	21ff      	movs	r1, #255	; 0xff
 8001790:	4091      	lsls	r1, r2
 8001792:	000a      	movs	r2, r1
 8001794:	43d2      	mvns	r2, r2
 8001796:	401a      	ands	r2, r3
 8001798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	401a      	ands	r2, r3
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	0018      	movs	r0, r3
 80017a8:	2303      	movs	r3, #3
 80017aa:	4003      	ands	r3, r0
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b0:	481f      	ldr	r0, [pc, #124]	; (8001830 <__NVIC_SetPriority+0xd4>)
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	430a      	orrs	r2, r1
 80017bc:	33c0      	adds	r3, #192	; 0xc0
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017c2:	e031      	b.n	8001828 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <__NVIC_SetPriority+0xd8>)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	0019      	movs	r1, r3
 80017cc:	230f      	movs	r3, #15
 80017ce:	400b      	ands	r3, r1
 80017d0:	3b08      	subs	r3, #8
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3306      	adds	r3, #6
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	18d3      	adds	r3, r2, r3
 80017da:	3304      	adds	r3, #4
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1dfa      	adds	r2, r7, #7
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	0011      	movs	r1, r2
 80017e4:	2203      	movs	r2, #3
 80017e6:	400a      	ands	r2, r1
 80017e8:	00d2      	lsls	r2, r2, #3
 80017ea:	21ff      	movs	r1, #255	; 0xff
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	43d2      	mvns	r2, r2
 80017f2:	401a      	ands	r2, r3
 80017f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	401a      	ands	r2, r3
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	2303      	movs	r3, #3
 8001806:	4003      	ands	r3, r0
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	4809      	ldr	r0, [pc, #36]	; (8001834 <__NVIC_SetPriority+0xd8>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	001c      	movs	r4, r3
 8001814:	230f      	movs	r3, #15
 8001816:	4023      	ands	r3, r4
 8001818:	3b08      	subs	r3, #8
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	430a      	orrs	r2, r1
 800181e:	3306      	adds	r3, #6
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	18c3      	adds	r3, r0, r3
 8001824:	3304      	adds	r3, #4
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b003      	add	sp, #12
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	1e5a      	subs	r2, r3, #1
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	045b      	lsls	r3, r3, #17
 8001848:	429a      	cmp	r2, r3
 800184a:	d301      	bcc.n	8001850 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184c:	2301      	movs	r3, #1
 800184e:	e010      	b.n	8001872 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <SysTick_Config+0x44>)
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	3a01      	subs	r2, #1
 8001856:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001858:	2301      	movs	r3, #1
 800185a:	425b      	negs	r3, r3
 800185c:	2103      	movs	r1, #3
 800185e:	0018      	movs	r0, r3
 8001860:	f7ff ff7c 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x44>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x44>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	210f      	movs	r1, #15
 800188c:	187b      	adds	r3, r7, r1
 800188e:	1c02      	adds	r2, r0, #0
 8001890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	187b      	adds	r3, r7, r1
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b25b      	sxtb	r3, r3
 800189a:	0011      	movs	r1, r2
 800189c:	0018      	movs	r0, r3
 800189e:	f7ff ff5d 	bl	800175c <__NVIC_SetPriority>
}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b004      	add	sp, #16
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	0002      	movs	r2, r0
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff ff33 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ffaf 	bl	8001838 <SysTick_Config>
 80018da:	0003      	movs	r3, r0
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e14f      	b.n	8001b94 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4091      	lsls	r1, r2
 80018fe:	000a      	movs	r2, r1
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d100      	bne.n	800190c <HAL_GPIO_Init+0x28>
 800190a:	e140      	b.n	8001b8e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d00b      	beq.n	800192c <HAL_GPIO_Init+0x48>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d007      	beq.n	800192c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001920:	2b11      	cmp	r3, #17
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b12      	cmp	r3, #18
 800192a:	d130      	bne.n	800198e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	409a      	lsls	r2, r3
 800193a:	0013      	movs	r3, r2
 800193c:	43da      	mvns	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	409a      	lsls	r2, r3
 800194e:	0013      	movs	r3, r2
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001962:	2201      	movs	r2, #1
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	2201      	movs	r2, #1
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
 8001980:	0013      	movs	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	409a      	lsls	r2, r3
 800199c:	0013      	movs	r3, r2
 800199e:	43da      	mvns	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	409a      	lsls	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0xea>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b12      	cmp	r3, #18
 80019cc:	d123      	bne.n	8001a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	58d3      	ldr	r3, [r2, r3]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2207      	movs	r2, #7
 80019e0:	4013      	ands	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2107      	movs	r1, #7
 80019fa:	400b      	ands	r3, r1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	6939      	ldr	r1, [r7, #16]
 8001a14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	43da      	mvns	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2203      	movs	r2, #3
 8001a34:	401a      	ands	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	055b      	lsls	r3, r3, #21
 8001a52:	4013      	ands	r3, r2
 8001a54:	d100      	bne.n	8001a58 <HAL_GPIO_Init+0x174>
 8001a56:	e09a      	b.n	8001b8e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a58:	4b54      	ldr	r3, [pc, #336]	; (8001bac <HAL_GPIO_Init+0x2c8>)
 8001a5a:	699a      	ldr	r2, [r3, #24]
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_GPIO_Init+0x2c8>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	430a      	orrs	r2, r1
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	4b51      	ldr	r3, [pc, #324]	; (8001bac <HAL_GPIO_Init+0x2c8>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a70:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <HAL_GPIO_Init+0x2cc>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	589b      	ldr	r3, [r3, r2]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	2390      	movs	r3, #144	; 0x90
 8001a98:	05db      	lsls	r3, r3, #23
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x1e2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a44      	ldr	r2, [pc, #272]	; (8001bb4 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x1de>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a43      	ldr	r2, [pc, #268]	; (8001bb8 <HAL_GPIO_Init+0x2d4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x1da>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_GPIO_Init+0x2d8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x1d6>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x1e4>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e004      	b.n	8001ac8 <HAL_GPIO_Init+0x1e4>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e002      	b.n	8001ac8 <HAL_GPIO_Init+0x1e4>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_GPIO_Init+0x1e4>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	2103      	movs	r1, #3
 8001acc:	400a      	ands	r2, r1
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	4093      	lsls	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ad8:	4935      	ldr	r1, [pc, #212]	; (8001bb0 <HAL_GPIO_Init+0x2cc>)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43da      	mvns	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	025b      	lsls	r3, r3, #9
 8001afe:	4013      	ands	r3, r2
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43da      	mvns	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	035b      	lsls	r3, r3, #13
 8001b52:	4013      	ands	r3, r2
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	039b      	lsls	r3, r3, #14
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	40da      	lsrs	r2, r3
 8001b9c:	1e13      	subs	r3, r2, #0
 8001b9e:	d000      	beq.n	8001ba2 <HAL_GPIO_Init+0x2be>
 8001ba0:	e6a8      	b.n	80018f4 <HAL_GPIO_Init+0x10>
  } 
}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b006      	add	sp, #24
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	48000800 	.word	0x48000800
 8001bbc:	48000c00 	.word	0x48000c00
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	0008      	movs	r0, r1
 8001bce:	0011      	movs	r1, r2
 8001bd0:	1cbb      	adds	r3, r7, #2
 8001bd2:	1c02      	adds	r2, r0, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
 8001bd6:	1c7b      	adds	r3, r7, #1
 8001bd8:	1c0a      	adds	r2, r1, #0
 8001bda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bdc:	1c7b      	adds	r3, r7, #1
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be4:	1cbb      	adds	r3, r7, #2
 8001be6:	881a      	ldrh	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bec:	e003      	b.n	8001bf6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bee:	1cbb      	adds	r3, r7, #2
 8001bf0:	881a      	ldrh	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	0002      	movs	r2, r0
 8001c08:	1dbb      	adds	r3, r7, #6
 8001c0a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	1dba      	adds	r2, r7, #6
 8001c12:	8812      	ldrh	r2, [r2, #0]
 8001c14:	4013      	ands	r3, r2
 8001c16:	d008      	beq.n	8001c2a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c1a:	1dba      	adds	r2, r7, #6
 8001c1c:	8812      	ldrh	r2, [r2, #0]
 8001c1e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c20:	1dbb      	adds	r3, r7, #6
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 f807 	bl	8001c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b002      	add	sp, #8
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	0002      	movs	r2, r0
 8001c40:	1dbb      	adds	r3, r7, #6
 8001c42:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e301      	b.n	8002262 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d100      	bne.n	8001c6a <HAL_RCC_OscConfig+0x1e>
 8001c68:	e08d      	b.n	8001d86 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c6a:	4bc3      	ldr	r3, [pc, #780]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	220c      	movs	r2, #12
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d00e      	beq.n	8001c94 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c76:	4bc0      	ldr	r3, [pc, #768]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d116      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x64>
 8001c82:	4bbd      	ldr	r3, [pc, #756]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	025b      	lsls	r3, r3, #9
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	025b      	lsls	r3, r3, #9
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d10d      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	4bb8      	ldr	r3, [pc, #736]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	029b      	lsls	r3, r3, #10
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x56>
 8001ca0:	e070      	b.n	8001d84 <HAL_RCC_OscConfig+0x138>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d000      	beq.n	8001cac <HAL_RCC_OscConfig+0x60>
 8001caa:	e06b      	b.n	8001d84 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e2d8      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x7c>
 8001cb8:	4baf      	ldr	r3, [pc, #700]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4bae      	ldr	r3, [pc, #696]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	0249      	lsls	r1, r1, #9
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e02f      	b.n	8001d28 <HAL_RCC_OscConfig+0xdc>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10c      	bne.n	8001cea <HAL_RCC_OscConfig+0x9e>
 8001cd0:	4ba9      	ldr	r3, [pc, #676]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4ba8      	ldr	r3, [pc, #672]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001cd6:	49a9      	ldr	r1, [pc, #676]	; (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001cd8:	400a      	ands	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	4ba6      	ldr	r3, [pc, #664]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4ba5      	ldr	r3, [pc, #660]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001ce2:	49a7      	ldr	r1, [pc, #668]	; (8001f80 <HAL_RCC_OscConfig+0x334>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e01e      	b.n	8001d28 <HAL_RCC_OscConfig+0xdc>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d10e      	bne.n	8001d10 <HAL_RCC_OscConfig+0xc4>
 8001cf2:	4ba1      	ldr	r3, [pc, #644]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4ba0      	ldr	r3, [pc, #640]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	02c9      	lsls	r1, r1, #11
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	4b9d      	ldr	r3, [pc, #628]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b9c      	ldr	r3, [pc, #624]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	0249      	lsls	r1, r1, #9
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0xdc>
 8001d10:	4b99      	ldr	r3, [pc, #612]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b98      	ldr	r3, [pc, #608]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	4999      	ldr	r1, [pc, #612]	; (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001d18:	400a      	ands	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	4b96      	ldr	r3, [pc, #600]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b95      	ldr	r3, [pc, #596]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d22:	4997      	ldr	r1, [pc, #604]	; (8001f80 <HAL_RCC_OscConfig+0x334>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d014      	beq.n	8001d5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff fcf0 	bl	8001714 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3a:	f7ff fceb 	bl	8001714 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e28a      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4c:	4b8a      	ldr	r3, [pc, #552]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	029b      	lsls	r3, r3, #10
 8001d54:	4013      	ands	r3, r2
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0xee>
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fcdb 	bl	8001714 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff fcd6 	bl	8001714 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e275      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b80      	ldr	r3, [pc, #512]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	029b      	lsls	r3, r3, #10
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x118>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d100      	bne.n	8001d92 <HAL_RCC_OscConfig+0x146>
 8001d90:	e069      	b.n	8001e66 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d92:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	220c      	movs	r2, #12
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d00b      	beq.n	8001db4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d9c:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	220c      	movs	r2, #12
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d11c      	bne.n	8001de2 <HAL_RCC_OscConfig+0x196>
 8001da8:	4b73      	ldr	r3, [pc, #460]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	025b      	lsls	r3, r3, #9
 8001db0:	4013      	ands	r3, r2
 8001db2:	d116      	bne.n	8001de2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db4:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d005      	beq.n	8001dca <HAL_RCC_OscConfig+0x17e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e24b      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dca:	4b6b      	ldr	r3, [pc, #428]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	22f8      	movs	r2, #248	; 0xf8
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	00da      	lsls	r2, r3, #3
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de0:	e041      	b.n	8001e66 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d024      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7ff fc8d 	bl	8001714 <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fc88 	bl	8001714 <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e227      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2202      	movs	r2, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d0f1      	beq.n	8001e00 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	22f8      	movs	r2, #248	; 0xf8
 8001e22:	4393      	bics	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00da      	lsls	r2, r3, #3
 8001e2c:	4b52      	ldr	r3, [pc, #328]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e018      	b.n	8001e66 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b4f      	ldr	r3, [pc, #316]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fc68 	bl	8001714 <HAL_GetTick>
 8001e44:	0003      	movs	r3, r0
 8001e46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fc63 	bl	8001714 <HAL_GetTick>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e202      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5c:	4b46      	ldr	r3, [pc, #280]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1f1      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d036      	beq.n	8001ede <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d019      	beq.n	8001eac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e78:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7c:	4b3e      	ldr	r3, [pc, #248]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	430a      	orrs	r2, r1
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff fc46 	bl	8001714 <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fc41 	bl	8001714 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1e0      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea0:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d0f1      	beq.n	8001e8e <HAL_RCC_OscConfig+0x242>
 8001eaa:	e018      	b.n	8001ede <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eac:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fc2c 	bl	8001714 <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fc27 	bl	8001714 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1c6      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d1f1      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d100      	bne.n	8001eea <HAL_RCC_OscConfig+0x29e>
 8001ee8:	e0b4      	b.n	8002054 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	201f      	movs	r0, #31
 8001eec:	183b      	adds	r3, r7, r0
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	055b      	lsls	r3, r3, #21
 8001efa:	4013      	ands	r3, r2
 8001efc:	d110      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	0549      	lsls	r1, r1, #21
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	61da      	str	r2, [r3, #28]
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001f0e:	69da      	ldr	r2, [r3, #28]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	055b      	lsls	r3, r3, #21
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f1a:	183b      	adds	r3, r7, r0
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_RCC_OscConfig+0x338>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d11a      	bne.n	8001f62 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_RCC_OscConfig+0x338>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_RCC_OscConfig+0x338>)
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	0049      	lsls	r1, r1, #1
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fbeb 	bl	8001714 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7ff fbe6 	bl	8001714 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e185      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x338>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10e      	bne.n	8001f88 <HAL_RCC_OscConfig+0x33c>
 8001f6a:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001f6c:	6a1a      	ldr	r2, [r3, #32]
 8001f6e:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <HAL_RCC_OscConfig+0x32c>)
 8001f70:	2101      	movs	r1, #1
 8001f72:	430a      	orrs	r2, r1
 8001f74:	621a      	str	r2, [r3, #32]
 8001f76:	e035      	b.n	8001fe4 <HAL_RCC_OscConfig+0x398>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	fffeffff 	.word	0xfffeffff
 8001f80:	fffbffff 	.word	0xfffbffff
 8001f84:	40007000 	.word	0x40007000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_OscConfig+0x35e>
 8001f90:	4bb6      	ldr	r3, [pc, #728]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	4bb5      	ldr	r3, [pc, #724]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	438a      	bics	r2, r1
 8001f9a:	621a      	str	r2, [r3, #32]
 8001f9c:	4bb3      	ldr	r3, [pc, #716]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	4bb2      	ldr	r3, [pc, #712]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	621a      	str	r2, [r3, #32]
 8001fa8:	e01c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x398>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x380>
 8001fb2:	4bae      	ldr	r3, [pc, #696]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001fb4:	6a1a      	ldr	r2, [r3, #32]
 8001fb6:	4bad      	ldr	r3, [pc, #692]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001fb8:	2104      	movs	r1, #4
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	621a      	str	r2, [r3, #32]
 8001fbe:	4bab      	ldr	r3, [pc, #684]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	4baa      	ldr	r3, [pc, #680]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	621a      	str	r2, [r3, #32]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x398>
 8001fcc:	4ba7      	ldr	r3, [pc, #668]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	4ba6      	ldr	r3, [pc, #664]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	621a      	str	r2, [r3, #32]
 8001fd8:	4ba4      	ldr	r3, [pc, #656]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001fda:	6a1a      	ldr	r2, [r3, #32]
 8001fdc:	4ba3      	ldr	r3, [pc, #652]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8001fde:	2104      	movs	r1, #4
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d014      	beq.n	8002016 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7ff fb92 	bl	8001714 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	e009      	b.n	800200a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff fb8d 	bl	8001714 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	4a9b      	ldr	r2, [pc, #620]	; (8002270 <HAL_RCC_OscConfig+0x624>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e12b      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	4b98      	ldr	r3, [pc, #608]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x3aa>
 8002014:	e013      	b.n	800203e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff fb7d 	bl	8001714 <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201e:	e009      	b.n	8002034 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7ff fb78 	bl	8001714 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	4a91      	ldr	r2, [pc, #580]	; (8002270 <HAL_RCC_OscConfig+0x624>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e116      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	4b8d      	ldr	r3, [pc, #564]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800203e:	231f      	movs	r3, #31
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b88      	ldr	r3, [pc, #544]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	4b87      	ldr	r3, [pc, #540]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800204e:	4989      	ldr	r1, [pc, #548]	; (8002274 <HAL_RCC_OscConfig+0x628>)
 8002050:	400a      	ands	r2, r1
 8002052:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2210      	movs	r2, #16
 800205a:	4013      	ands	r3, r2
 800205c:	d063      	beq.n	8002126 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d12a      	bne.n	80020bc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002066:	4b81      	ldr	r3, [pc, #516]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8002068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206a:	4b80      	ldr	r3, [pc, #512]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800206c:	2104      	movs	r1, #4
 800206e:	430a      	orrs	r2, r1
 8002070:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002072:	4b7e      	ldr	r3, [pc, #504]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8002074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002076:	4b7d      	ldr	r3, [pc, #500]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8002078:	2101      	movs	r1, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7ff fb49 	bl	8001714 <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002088:	f7ff fb44 	bl	8001714 <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0e3      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800209a:	4b74      	ldr	r3, [pc, #464]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d0f1      	beq.n	8002088 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020a4:	4b71      	ldr	r3, [pc, #452]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	22f8      	movs	r2, #248	; 0xf8
 80020aa:	4393      	bics	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	00da      	lsls	r2, r3, #3
 80020b4:	4b6d      	ldr	r3, [pc, #436]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ba:	e034      	b.n	8002126 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	3305      	adds	r3, #5
 80020c2:	d111      	bne.n	80020e8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020c4:	4b69      	ldr	r3, [pc, #420]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c8:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020ca:	2104      	movs	r1, #4
 80020cc:	438a      	bics	r2, r1
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020d0:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d4:	22f8      	movs	r2, #248	; 0xf8
 80020d6:	4393      	bics	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	00da      	lsls	r2, r3, #3
 80020e0:	4b62      	ldr	r3, [pc, #392]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34
 80020e6:	e01e      	b.n	8002126 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020e8:	4b60      	ldr	r3, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ec:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020ee:	2104      	movs	r1, #4
 80020f0:	430a      	orrs	r2, r1
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020f4:	4b5d      	ldr	r3, [pc, #372]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f8:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7ff fb08 	bl	8001714 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800210a:	f7ff fb03 	bl	8001714 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0a2      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800211c:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d1f1      	bne.n	800210a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d100      	bne.n	8002130 <HAL_RCC_OscConfig+0x4e4>
 800212e:	e097      	b.n	8002260 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	220c      	movs	r2, #12
 8002136:	4013      	ands	r3, r2
 8002138:	2b08      	cmp	r3, #8
 800213a:	d100      	bne.n	800213e <HAL_RCC_OscConfig+0x4f2>
 800213c:	e06b      	b.n	8002216 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d14c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b49      	ldr	r3, [pc, #292]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b48      	ldr	r3, [pc, #288]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800214c:	494a      	ldr	r1, [pc, #296]	; (8002278 <HAL_RCC_OscConfig+0x62c>)
 800214e:	400a      	ands	r2, r1
 8002150:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7ff fadf 	bl	8001714 <HAL_GetTick>
 8002156:	0003      	movs	r3, r0
 8002158:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff fada 	bl	8001714 <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e079      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	049b      	lsls	r3, r3, #18
 8002176:	4013      	ands	r3, r2
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217a:	4b3c      	ldr	r3, [pc, #240]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	220f      	movs	r2, #15
 8002180:	4393      	bics	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002188:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800218a:	430a      	orrs	r2, r1
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
 800218e:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a3a      	ldr	r2, [pc, #232]	; (800227c <HAL_RCC_OscConfig+0x630>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	431a      	orrs	r2, r3
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	0449      	lsls	r1, r1, #17
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7ff faad 	bl	8001714 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff faa8 	bl	8001714 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e047      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	049b      	lsls	r3, r3, #18
 80021da:	4013      	ands	r3, r2
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x574>
 80021de:	e03f      	b.n	8002260 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCC_OscConfig+0x620>)
 80021e6:	4924      	ldr	r1, [pc, #144]	; (8002278 <HAL_RCC_OscConfig+0x62c>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff fa92 	bl	8001714 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f6:	f7ff fa8d 	bl	8001714 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e02c      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	049b      	lsls	r3, r3, #18
 8002210:	4013      	ands	r3, r2
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x5aa>
 8002214:	e024      	b.n	8002260 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e01f      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_OscConfig+0x620>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_RCC_OscConfig+0x620>)
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	025b      	lsls	r3, r3, #9
 8002234:	401a      	ands	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	429a      	cmp	r2, r3
 800223c:	d10e      	bne.n	800225c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	220f      	movs	r2, #15
 8002242:	401a      	ands	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	23f0      	movs	r3, #240	; 0xf0
 8002250:	039b      	lsls	r3, r3, #14
 8002252:	401a      	ands	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b008      	add	sp, #32
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	40021000 	.word	0x40021000
 8002270:	00001388 	.word	0x00001388
 8002274:	efffffff 	.word	0xefffffff
 8002278:	feffffff 	.word	0xfeffffff
 800227c:	ffc2ffff 	.word	0xffc2ffff

08002280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b3      	b.n	80023fc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b5b      	ldr	r3, [pc, #364]	; (8002404 <HAL_RCC_ClockConfig+0x184>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2201      	movs	r2, #1
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d911      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b58      	ldr	r3, [pc, #352]	; (8002404 <HAL_RCC_ClockConfig+0x184>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	4393      	bics	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	4b55      	ldr	r3, [pc, #340]	; (8002404 <HAL_RCC_ClockConfig+0x184>)
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_ClockConfig+0x184>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e09a      	b.n	80023fc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2202      	movs	r2, #2
 80022cc:	4013      	ands	r3, r2
 80022ce:	d015      	beq.n	80022fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2204      	movs	r2, #4
 80022d6:	4013      	ands	r3, r2
 80022d8:	d006      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022da:	4b4b      	ldr	r3, [pc, #300]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 80022e0:	21e0      	movs	r1, #224	; 0xe0
 80022e2:	00c9      	lsls	r1, r1, #3
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	22f0      	movs	r2, #240	; 0xf0
 80022ee:	4393      	bics	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	4b44      	ldr	r3, [pc, #272]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	d040      	beq.n	8002388 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b3e      	ldr	r3, [pc, #248]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	029b      	lsls	r3, r3, #10
 8002316:	4013      	ands	r3, r2
 8002318:	d114      	bne.n	8002344 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06e      	b.n	80023fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	049b      	lsls	r3, r3, #18
 800232e:	4013      	ands	r3, r2
 8002330:	d108      	bne.n	8002344 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e062      	b.n	80023fc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002336:	4b34      	ldr	r3, [pc, #208]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2202      	movs	r2, #2
 800233c:	4013      	ands	r3, r2
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e05b      	b.n	80023fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002344:	4b30      	ldr	r3, [pc, #192]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2203      	movs	r2, #3
 800234a:	4393      	bics	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002358:	f7ff f9dc 	bl	8001714 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002360:	e009      	b.n	8002376 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002362:	f7ff f9d7 	bl	8001714 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_RCC_ClockConfig+0x18c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e042      	b.n	80023fc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	220c      	movs	r2, #12
 800237c:	401a      	ands	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1ec      	bne.n	8002362 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_RCC_ClockConfig+0x184>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2201      	movs	r2, #1
 800238e:	4013      	ands	r3, r2
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d211      	bcs.n	80023ba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_RCC_ClockConfig+0x184>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	4393      	bics	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_RCC_ClockConfig+0x184>)
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_RCC_ClockConfig+0x184>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e020      	b.n	80023fc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2204      	movs	r2, #4
 80023c0:	4013      	ands	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_RCC_ClockConfig+0x190>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023d8:	f000 f820 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023dc:	0001      	movs	r1, r0
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x188>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	220f      	movs	r2, #15
 80023e6:	4013      	ands	r3, r2
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x194>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	000a      	movs	r2, r1
 80023ee:	40da      	lsrs	r2, r3
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x198>)
 80023f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7fe ffc7 	bl	8001388 <HAL_InitTick>
  
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b004      	add	sp, #16
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40022000 	.word	0x40022000
 8002408:	40021000 	.word	0x40021000
 800240c:	00001388 	.word	0x00001388
 8002410:	fffff8ff 	.word	0xfffff8ff
 8002414:	08003298 	.word	0x08003298
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b08f      	sub	sp, #60	; 0x3c
 8002420:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002422:	2314      	movs	r3, #20
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002428:	ca13      	ldmia	r2!, {r0, r1, r4}
 800242a:	c313      	stmia	r3!, {r0, r1, r4}
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002434:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002436:	c313      	stmia	r3!, {r0, r1, r4}
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002450:	4b22      	ldr	r3, [pc, #136]	; (80024dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	220c      	movs	r2, #12
 800245a:	4013      	ands	r3, r2
 800245c:	2b04      	cmp	r3, #4
 800245e:	d002      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x4a>
 8002460:	2b08      	cmp	r3, #8
 8002462:	d003      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x50>
 8002464:	e02d      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800246a:	e02d      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	0c9b      	lsrs	r3, r3, #18
 8002470:	220f      	movs	r2, #15
 8002472:	4013      	ands	r3, r2
 8002474:	2214      	movs	r2, #20
 8002476:	18ba      	adds	r2, r7, r2
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	220f      	movs	r2, #15
 8002482:	4013      	ands	r3, r2
 8002484:	1d3a      	adds	r2, r7, #4
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800248a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	025b      	lsls	r3, r3, #9
 8002490:	4013      	ands	r3, r2
 8002492:	d009      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002496:	4812      	ldr	r0, [pc, #72]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002498:	f7fd fe36 	bl	8000108 <__udivsi3>
 800249c:	0003      	movs	r3, r0
 800249e:	001a      	movs	r2, r3
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	4353      	muls	r3, r2
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
 80024a6:	e009      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024aa:	000a      	movs	r2, r1
 80024ac:	0152      	lsls	r2, r2, #5
 80024ae:	1a52      	subs	r2, r2, r1
 80024b0:	0193      	lsls	r3, r2, #6
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	185b      	adds	r3, r3, r1
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024c0:	e002      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b00f      	add	sp, #60	; 0x3c
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	0800325c 	.word	0x0800325c
 80024d8:	0800326c 	.word	0x0800326c
 80024dc:	40021000 	.word	0x40021000
 80024e0:	007a1200 	.word	0x007a1200

080024e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e8:	4b02      	ldr	r3, [pc, #8]	; (80024f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80024fc:	f7ff fff2 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 8002500:	0001      	movs	r1, r0
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	2207      	movs	r2, #7
 800250a:	4013      	ands	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	40d9      	lsrs	r1, r3
 8002512:	000b      	movs	r3, r1
}    
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	40021000 	.word	0x40021000
 8002520:	080032a8 	.word	0x080032a8

08002524 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2207      	movs	r2, #7
 8002532:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCC_GetClockConfig+0x4c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2203      	movs	r2, #3
 800253a:	401a      	ands	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_GetClockConfig+0x4c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	22f0      	movs	r2, #240	; 0xf0
 8002546:	401a      	ands	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_GetClockConfig+0x4c>)
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	23e0      	movs	r3, #224	; 0xe0
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	401a      	ands	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetClockConfig+0x50>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2201      	movs	r2, #1
 8002560:	401a      	ands	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	40021000 	.word	0x40021000
 8002574:	40022000 	.word	0x40022000

08002578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e042      	b.n	8002610 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	223d      	movs	r2, #61	; 0x3d
 800258e:	5c9b      	ldrb	r3, [r3, r2]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	223c      	movs	r2, #60	; 0x3c
 800259a:	2100      	movs	r1, #0
 800259c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff f83f 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	223d      	movs	r2, #61	; 0x3d
 80025aa:	2102      	movs	r1, #2
 80025ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	0019      	movs	r1, r3
 80025b8:	0010      	movs	r0, r2
 80025ba:	f000 fa79 	bl	8002ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2246      	movs	r2, #70	; 0x46
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	223e      	movs	r2, #62	; 0x3e
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	223f      	movs	r2, #63	; 0x3f
 80025d2:	2101      	movs	r1, #1
 80025d4:	5499      	strb	r1, [r3, r2]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2240      	movs	r2, #64	; 0x40
 80025da:	2101      	movs	r1, #1
 80025dc:	5499      	strb	r1, [r3, r2]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2241      	movs	r2, #65	; 0x41
 80025e2:	2101      	movs	r1, #1
 80025e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2242      	movs	r2, #66	; 0x42
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2243      	movs	r2, #67	; 0x43
 80025f2:	2101      	movs	r1, #1
 80025f4:	5499      	strb	r1, [r3, r2]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2244      	movs	r2, #68	; 0x44
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2245      	movs	r2, #69	; 0x45
 8002602:	2101      	movs	r1, #1
 8002604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	223d      	movs	r2, #61	; 0x3d
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	223d      	movs	r2, #61	; 0x3d
 8002624:	5c9b      	ldrb	r3, [r3, r2]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d001      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e035      	b.n	800269c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	223d      	movs	r2, #61	; 0x3d
 8002634:	2102      	movs	r1, #2
 8002636:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2101      	movs	r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <HAL_TIM_Base_Start_IT+0x8c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_TIM_Base_Start_IT+0x4e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <HAL_TIM_Base_Start_IT+0x90>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_TIM_Base_Start_IT+0x4e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <HAL_TIM_Base_Start_IT+0x94>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2207      	movs	r2, #7
 800266e:	4013      	ands	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b06      	cmp	r3, #6
 8002676:	d010      	beq.n	800269a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2101      	movs	r1, #1
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002688:	e007      	b.n	800269a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2101      	movs	r1, #1
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b004      	add	sp, #16
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40014000 	.word	0x40014000

080026b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d124      	bne.n	8002710 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2202      	movs	r2, #2
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d11d      	bne.n	8002710 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2203      	movs	r2, #3
 80026da:	4252      	negs	r2, r2
 80026dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2203      	movs	r2, #3
 80026ec:	4013      	ands	r3, r2
 80026ee:	d004      	beq.n	80026fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 f9c4 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 80026f8:	e007      	b.n	800270a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f9b7 	bl	8002a70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0018      	movs	r0, r3
 8002706:	f000 f9c3 	bl	8002a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2204      	movs	r2, #4
 8002718:	4013      	ands	r3, r2
 800271a:	2b04      	cmp	r3, #4
 800271c:	d125      	bne.n	800276a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2204      	movs	r2, #4
 8002726:	4013      	ands	r3, r2
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11e      	bne.n	800276a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2205      	movs	r2, #5
 8002732:	4252      	negs	r2, r2
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	23c0      	movs	r3, #192	; 0xc0
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f997 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 8002752:	e007      	b.n	8002764 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 f98a 	bl	8002a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	0018      	movs	r0, r3
 8002760:	f000 f996 	bl	8002a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2208      	movs	r2, #8
 8002772:	4013      	ands	r3, r2
 8002774:	2b08      	cmp	r3, #8
 8002776:	d124      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2208      	movs	r2, #8
 8002780:	4013      	ands	r3, r2
 8002782:	2b08      	cmp	r3, #8
 8002784:	d11d      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2209      	movs	r2, #9
 800278c:	4252      	negs	r2, r2
 800278e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2204      	movs	r2, #4
 8002794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2203      	movs	r2, #3
 800279e:	4013      	ands	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 f96b 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 80027aa:	e007      	b.n	80027bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f95e 	bl	8002a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 f96a 	bl	8002a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2210      	movs	r2, #16
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d125      	bne.n	800281c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2210      	movs	r2, #16
 80027d8:	4013      	ands	r3, r2
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d11e      	bne.n	800281c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2211      	movs	r2, #17
 80027e4:	4252      	negs	r2, r2
 80027e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2208      	movs	r2, #8
 80027ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	23c0      	movs	r3, #192	; 0xc0
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 f93e 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 8002804:	e007      	b.n	8002816 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f931 	bl	8002a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 f93d 	bl	8002a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2201      	movs	r2, #1
 8002824:	4013      	ands	r3, r2
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10f      	bne.n	800284a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	2b01      	cmp	r3, #1
 8002836:	d108      	bne.n	800284a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2202      	movs	r2, #2
 800283e:	4252      	negs	r2, r2
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f7fd fe07 	bl	8000458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	4013      	ands	r3, r2
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d10f      	bne.n	8002878 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	4013      	ands	r3, r2
 8002862:	2b80      	cmp	r3, #128	; 0x80
 8002864:	d108      	bne.n	8002878 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2281      	movs	r2, #129	; 0x81
 800286c:	4252      	negs	r2, r2
 800286e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fa8c 	bl	8002d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	4013      	ands	r3, r2
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d10f      	bne.n	80028a6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2240      	movs	r2, #64	; 0x40
 800288e:	4013      	ands	r3, r2
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d108      	bne.n	80028a6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2241      	movs	r2, #65	; 0x41
 800289a:	4252      	negs	r2, r2
 800289c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 f8fd 	bl	8002aa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2220      	movs	r2, #32
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d10f      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	4013      	ands	r3, r2
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d108      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2221      	movs	r2, #33	; 0x21
 80028c8:	4252      	negs	r2, r2
 80028ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 fa56 	bl	8002d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	223c      	movs	r2, #60	; 0x3c
 80028ea:	5c9b      	ldrb	r3, [r3, r2]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_TIM_ConfigClockSource+0x18>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e0b7      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x188>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223c      	movs	r2, #60	; 0x3c
 80028f8:	2101      	movs	r1, #1
 80028fa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	223d      	movs	r2, #61	; 0x3d
 8002900:	2102      	movs	r1, #2
 8002902:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2277      	movs	r2, #119	; 0x77
 8002910:	4393      	bics	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a55      	ldr	r2, [pc, #340]	; (8002a6c <HAL_TIM_ConfigClockSource+0x190>)
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2280      	movs	r2, #128	; 0x80
 800292a:	0192      	lsls	r2, r2, #6
 800292c:	4293      	cmp	r3, r2
 800292e:	d040      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0xd6>
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	0192      	lsls	r2, r2, #6
 8002934:	4293      	cmp	r3, r2
 8002936:	d900      	bls.n	800293a <HAL_TIM_ConfigClockSource+0x5e>
 8002938:	e088      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x170>
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	0152      	lsls	r2, r2, #5
 800293e:	4293      	cmp	r3, r2
 8002940:	d100      	bne.n	8002944 <HAL_TIM_ConfigClockSource+0x68>
 8002942:	e085      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	0152      	lsls	r2, r2, #5
 8002948:	4293      	cmp	r3, r2
 800294a:	d900      	bls.n	800294e <HAL_TIM_ConfigClockSource+0x72>
 800294c:	e07e      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x170>
 800294e:	2b70      	cmp	r3, #112	; 0x70
 8002950:	d018      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0xa8>
 8002952:	d900      	bls.n	8002956 <HAL_TIM_ConfigClockSource+0x7a>
 8002954:	e07a      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x170>
 8002956:	2b60      	cmp	r3, #96	; 0x60
 8002958:	d04f      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0x11e>
 800295a:	d900      	bls.n	800295e <HAL_TIM_ConfigClockSource+0x82>
 800295c:	e076      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x170>
 800295e:	2b50      	cmp	r3, #80	; 0x50
 8002960:	d03b      	beq.n	80029da <HAL_TIM_ConfigClockSource+0xfe>
 8002962:	d900      	bls.n	8002966 <HAL_TIM_ConfigClockSource+0x8a>
 8002964:	e072      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x170>
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d057      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x13e>
 800296a:	d900      	bls.n	800296e <HAL_TIM_ConfigClockSource+0x92>
 800296c:	e06e      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x170>
 800296e:	2b30      	cmp	r3, #48	; 0x30
 8002970:	d063      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15e>
 8002972:	d86b      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x170>
 8002974:	2b20      	cmp	r3, #32
 8002976:	d060      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15e>
 8002978:	d868      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x170>
 800297a:	2b00      	cmp	r3, #0
 800297c:	d05d      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15e>
 800297e:	2b10      	cmp	r3, #16
 8002980:	d05b      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002982:	e063      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6899      	ldr	r1, [r3, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f000 f97c 	bl	8002c90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2277      	movs	r2, #119	; 0x77
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	609a      	str	r2, [r3, #8]
      break;
 80029b0:	e04f      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f000 f965 	bl	8002c90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	01c9      	lsls	r1, r1, #7
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]
      break;
 80029d8:	e03b      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	001a      	movs	r2, r3
 80029e8:	f000 f8d8 	bl	8002b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2150      	movs	r1, #80	; 0x50
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 f932 	bl	8002c5c <TIM_ITRx_SetConfig>
      break;
 80029f8:	e02b      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	001a      	movs	r2, r3
 8002a08:	f000 f8f6 	bl	8002bf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2160      	movs	r1, #96	; 0x60
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f922 	bl	8002c5c <TIM_ITRx_SetConfig>
      break;
 8002a18:	e01b      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	001a      	movs	r2, r3
 8002a28:	f000 f8b8 	bl	8002b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2140      	movs	r1, #64	; 0x40
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f912 	bl	8002c5c <TIM_ITRx_SetConfig>
      break;
 8002a38:	e00b      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0019      	movs	r1, r3
 8002a44:	0010      	movs	r0, r2
 8002a46:	f000 f909 	bl	8002c5c <TIM_ITRx_SetConfig>
        break;
 8002a4a:	e002      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	e000      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002a50:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	223d      	movs	r2, #61	; 0x3d
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	223c      	movs	r2, #60	; 0x3c
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b004      	add	sp, #16
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	ffff00ff 	.word	0xffff00ff

08002a70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a2f      	ldr	r2, [pc, #188]	; (8002b80 <TIM_Base_SetConfig+0xd0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_Base_SetConfig+0x20>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <TIM_Base_SetConfig+0xd4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d108      	bne.n	8002ae2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2270      	movs	r2, #112	; 0x70
 8002ad4:	4393      	bics	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <TIM_Base_SetConfig+0xd0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <TIM_Base_SetConfig+0x62>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <TIM_Base_SetConfig+0xd4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00f      	beq.n	8002b12 <TIM_Base_SetConfig+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <TIM_Base_SetConfig+0xd8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00b      	beq.n	8002b12 <TIM_Base_SetConfig+0x62>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <TIM_Base_SetConfig+0xdc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <TIM_Base_SetConfig+0x62>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <TIM_Base_SetConfig+0xe0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_Base_SetConfig+0x62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a21      	ldr	r2, [pc, #132]	; (8002b94 <TIM_Base_SetConfig+0xe4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d108      	bne.n	8002b24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <TIM_Base_SetConfig+0xe8>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	4393      	bics	r3, r2
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <TIM_Base_SetConfig+0xd0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00b      	beq.n	8002b6a <TIM_Base_SetConfig+0xba>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <TIM_Base_SetConfig+0xdc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <TIM_Base_SetConfig+0xba>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <TIM_Base_SetConfig+0xe0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d003      	beq.n	8002b6a <TIM_Base_SetConfig+0xba>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <TIM_Base_SetConfig+0xe4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d103      	bne.n	8002b72 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	615a      	str	r2, [r3, #20]
}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b004      	add	sp, #16
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40002000 	.word	0x40002000
 8002b8c:	40014000 	.word	0x40014000
 8002b90:	40014400 	.word	0x40014400
 8002b94:	40014800 	.word	0x40014800
 8002b98:	fffffcff 	.word	0xfffffcff

08002b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	22f0      	movs	r2, #240	; 0xf0
 8002bc6:	4393      	bics	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	4393      	bics	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	621a      	str	r2, [r3, #32]
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b006      	add	sp, #24
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <TIM_TI2_ConfigInputStage+0x60>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	031b      	lsls	r3, r3, #12
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	22a0      	movs	r2, #160	; 0xa0
 8002c34:	4393      	bics	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b006      	add	sp, #24
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	ffff0fff 	.word	0xffff0fff

08002c5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2270      	movs	r2, #112	; 0x70
 8002c70:	4393      	bics	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	609a      	str	r2, [r3, #8]
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <TIM_ETR_SetConfig+0x3c>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	021a      	lsls	r2, r3, #8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	609a      	str	r2, [r3, #8]
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b006      	add	sp, #24
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	ffff00ff 	.word	0xffff00ff

08002cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	223c      	movs	r2, #60	; 0x3c
 8002cde:	5c9b      	ldrb	r3, [r3, r2]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e041      	b.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	223c      	movs	r2, #60	; 0x3c
 8002cec:	2101      	movs	r1, #1
 8002cee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	223d      	movs	r2, #61	; 0x3d
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2270      	movs	r2, #112	; 0x70
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a10      	ldr	r2, [pc, #64]	; (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d10c      	bne.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	4393      	bics	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	223d      	movs	r2, #61	; 0x3d
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	223c      	movs	r2, #60	; 0x3c
 8002d66:	2100      	movs	r1, #0
 8002d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b004      	add	sp, #16
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40014000 	.word	0x40014000

08002d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_ZdlPv>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	f000 f8ff 	bl	8002fa4 <free>
 8002da6:	bd10      	pop	{r4, pc}

08002da8 <_Znwj>:
 8002da8:	b510      	push	{r4, lr}
 8002daa:	1e04      	subs	r4, r0, #0
 8002dac:	d100      	bne.n	8002db0 <_Znwj+0x8>
 8002dae:	3401      	adds	r4, #1
 8002db0:	0020      	movs	r0, r4
 8002db2:	f000 f8ed 	bl	8002f90 <malloc>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d107      	bne.n	8002dca <_Znwj+0x22>
 8002dba:	f000 f8b1 	bl	8002f20 <_ZSt15get_new_handlerv>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d101      	bne.n	8002dc6 <_Znwj+0x1e>
 8002dc2:	f000 f8b3 	bl	8002f2c <abort>
 8002dc6:	4780      	blx	r0
 8002dc8:	e7f2      	b.n	8002db0 <_Znwj+0x8>
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <_ZNSaIcEC1Ev>:
 8002dcc:	4770      	bx	lr

08002dce <_ZNSaIcED1Ev>:
 8002dce:	4770      	bx	lr

08002dd0 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8002dd0:	684b      	ldr	r3, [r1, #4]
 8002dd2:	6001      	str	r1, [r0, #0]
 8002dd4:	6043      	str	r3, [r0, #4]
 8002dd6:	684b      	ldr	r3, [r1, #4]
 8002dd8:	6018      	str	r0, [r3, #0]
 8002dda:	6048      	str	r0, [r1, #4]
 8002ddc:	4770      	bx	lr

08002dde <_ZSt17__throw_bad_allocv>:
 8002dde:	b510      	push	{r4, lr}
 8002de0:	f000 f8a4 	bl	8002f2c <abort>

08002de4 <_ZSt19__throw_logic_errorPKc>:
 8002de4:	b510      	push	{r4, lr}
 8002de6:	f000 f8a1 	bl	8002f2c <abort>

08002dea <_ZSt20__throw_length_errorPKc>:
 8002dea:	b510      	push	{r4, lr}
 8002dec:	f000 f89e 	bl	8002f2c <abort>

08002df0 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8002df0:	b510      	push	{r4, lr}
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	d001      	beq.n	8002dfa <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
 8002df6:	f000 f8df 	bl	8002fb8 <memcpy>
 8002dfa:	bd10      	pop	{r4, pc}

08002dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8002dfc:	6001      	str	r1, [r0, #0]
 8002dfe:	4770      	bx	lr

08002e00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8002e00:	6800      	ldr	r0, [r0, #0]
 8002e02:	4770      	bx	lr

08002e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8002e04:	3008      	adds	r0, #8
 8002e06:	4770      	bx	lr

08002e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8002e08:	6081      	str	r1, [r0, #8]
 8002e0a:	4770      	bx	lr

08002e0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6803      	ldr	r3, [r0, #0]
 8002e10:	6041      	str	r1, [r0, #4]
 8002e12:	545a      	strb	r2, [r3, r1]
 8002e14:	4770      	bx	lr
	...

08002e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002e18:	2080      	movs	r0, #128	; 0x80
 8002e1a:	680b      	ldr	r3, [r1, #0]
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	05c0      	lsls	r0, r0, #23
 8002e20:	4283      	cmp	r3, r0
 8002e22:	d302      	bcc.n	8002e2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x12>
 8002e24:	480a      	ldr	r0, [pc, #40]	; (8002e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 8002e26:	f7ff ffe0 	bl	8002dea <_ZSt20__throw_length_errorPKc>
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d905      	bls.n	8002e3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8002e2e:	0052      	lsls	r2, r2, #1
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d202      	bcs.n	8002e3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8002e34:	4282      	cmp	r2, r0
 8002e36:	d205      	bcs.n	8002e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002e38:	600a      	str	r2, [r1, #0]
 8002e3a:	6808      	ldr	r0, [r1, #0]
 8002e3c:	3001      	adds	r0, #1
 8002e3e:	d504      	bpl.n	8002e4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x32>
 8002e40:	f7ff ffcd 	bl	8002dde <_ZSt17__throw_bad_allocv>
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3c>)
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	e7f7      	b.n	8002e3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8002e4a:	f7ff ffad 	bl	8002da8 <_Znwj>
 8002e4e:	bd10      	pop	{r4, pc}
 8002e50:	080032b0 	.word	0x080032b0
 8002e54:	3fffffff 	.word	0x3fffffff

08002e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002e58:	0003      	movs	r3, r0
 8002e5a:	6800      	ldr	r0, [r0, #0]
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	b510      	push	{r4, lr}
 8002e60:	4298      	cmp	r0, r3
 8002e62:	d001      	beq.n	8002e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 8002e64:	f7ff ff9c 	bl	8002da0 <_ZdlPv>
 8002e68:	bd10      	pop	{r4, pc}

08002e6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002e6a:	b510      	push	{r4, lr}
 8002e6c:	2a01      	cmp	r2, #1
 8002e6e:	d102      	bne.n	8002e76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8002e70:	780b      	ldrb	r3, [r1, #0]
 8002e72:	7003      	strb	r3, [r0, #0]
 8002e74:	bd10      	pop	{r4, pc}
 8002e76:	f7ff ffbb 	bl	8002df0 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8002e7a:	e7fb      	b.n	8002e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08002e7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	1a52      	subs	r2, r2, r1
 8002e80:	f7ff fff3 	bl	8002e6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002e84:	bd10      	pop	{r4, pc}

08002e86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8002e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e88:	0004      	movs	r4, r0
 8002e8a:	000e      	movs	r6, r1
 8002e8c:	4288      	cmp	r0, r1
 8002e8e:	d020      	beq.n	8002ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8002e90:	0003      	movs	r3, r0
 8002e92:	684d      	ldr	r5, [r1, #4]
 8002e94:	6801      	ldr	r1, [r0, #0]
 8002e96:	3308      	adds	r3, #8
 8002e98:	220f      	movs	r2, #15
 8002e9a:	4299      	cmp	r1, r3
 8002e9c:	d000      	beq.n	8002ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x1a>
 8002e9e:	6882      	ldr	r2, [r0, #8]
 8002ea0:	42aa      	cmp	r2, r5
 8002ea2:	d20b      	bcs.n	8002ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 8002ea4:	a901      	add	r1, sp, #4
 8002ea6:	0020      	movs	r0, r4
 8002ea8:	9501      	str	r5, [sp, #4]
 8002eaa:	f7ff ffb5 	bl	8002e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002eae:	0007      	movs	r7, r0
 8002eb0:	0020      	movs	r0, r4
 8002eb2:	f7ff ffd1 	bl	8002e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002eb6:	9b01      	ldr	r3, [sp, #4]
 8002eb8:	6027      	str	r7, [r4, #0]
 8002eba:	60a3      	str	r3, [r4, #8]
 8002ebc:	2d00      	cmp	r5, #0
 8002ebe:	d004      	beq.n	8002eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8002ec0:	002a      	movs	r2, r5
 8002ec2:	6831      	ldr	r1, [r6, #0]
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	f7ff ffd0 	bl	8002e6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	6065      	str	r5, [r4, #4]
 8002ed0:	555a      	strb	r2, [r3, r5]
 8002ed2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08002ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	6003      	str	r3, [r0, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	6043      	str	r3, [r0, #4]
 8002ede:	7203      	strb	r3, [r0, #8]
 8002ee0:	4770      	bx	lr

08002ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	0004      	movs	r4, r0
 8002ee6:	f7ff ffb7 	bl	8002e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002eea:	0020      	movs	r0, r4
 8002eec:	bd10      	pop	{r4, pc}

08002eee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8002eee:	b510      	push	{r4, lr}
 8002ef0:	0004      	movs	r4, r0
 8002ef2:	f7ff ffc8 	bl	8002e86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8002ef6:	0020      	movs	r0, r4
 8002ef8:	bd10      	pop	{r4, pc}

08002efa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8002efa:	6840      	ldr	r0, [r0, #4]
 8002efc:	4770      	bx	lr

08002efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8002efe:	6800      	ldr	r0, [r0, #0]
 8002f00:	4770      	bx	lr

08002f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8002f02:	6001      	str	r1, [r0, #0]
 8002f04:	4770      	bx	lr

08002f06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8002f06:	0002      	movs	r2, r0
 8002f08:	000b      	movs	r3, r1
 8002f0a:	b510      	push	{r4, lr}
 8002f0c:	0004      	movs	r4, r0
 8002f0e:	3208      	adds	r2, #8
 8002f10:	6002      	str	r2, [r0, #0]
 8002f12:	cb06      	ldmia	r3!, {r1, r2}
 8002f14:	2300      	movs	r3, #0
 8002f16:	188a      	adds	r2, r1, r2
 8002f18:	f7fe f942 	bl	80011a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8002f1c:	0020      	movs	r0, r4
 8002f1e:	bd10      	pop	{r4, pc}

08002f20 <_ZSt15get_new_handlerv>:
 8002f20:	4b01      	ldr	r3, [pc, #4]	; (8002f28 <_ZSt15get_new_handlerv+0x8>)
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	4770      	bx	lr
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	200000a8 	.word	0x200000a8

08002f2c <abort>:
 8002f2c:	2006      	movs	r0, #6
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	f000 f938 	bl	80031a4 <raise>
 8002f34:	2001      	movs	r0, #1
 8002f36:	f7fe fad5 	bl	80014e4 <_exit>
	...

08002f3c <__errno>:
 8002f3c:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <__errno+0x8>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	4770      	bx	lr
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	4d0c      	ldr	r5, [pc, #48]	; (8002f80 <__libc_init_array+0x38>)
 8002f4e:	4c0d      	ldr	r4, [pc, #52]	; (8002f84 <__libc_init_array+0x3c>)
 8002f50:	1b64      	subs	r4, r4, r5
 8002f52:	10a4      	asrs	r4, r4, #2
 8002f54:	42a6      	cmp	r6, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	2600      	movs	r6, #0
 8002f5a:	f000 f955 	bl	8003208 <_init>
 8002f5e:	4d0a      	ldr	r5, [pc, #40]	; (8002f88 <__libc_init_array+0x40>)
 8002f60:	4c0a      	ldr	r4, [pc, #40]	; (8002f8c <__libc_init_array+0x44>)
 8002f62:	1b64      	subs	r4, r4, r5
 8002f64:	10a4      	asrs	r4, r4, #2
 8002f66:	42a6      	cmp	r6, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	00b3      	lsls	r3, r6, #2
 8002f6e:	58eb      	ldr	r3, [r5, r3]
 8002f70:	4798      	blx	r3
 8002f72:	3601      	adds	r6, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	00b3      	lsls	r3, r6, #2
 8002f78:	58eb      	ldr	r3, [r5, r3]
 8002f7a:	4798      	blx	r3
 8002f7c:	3601      	adds	r6, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	080032c8 	.word	0x080032c8
 8002f84:	080032c8 	.word	0x080032c8
 8002f88:	080032c8 	.word	0x080032c8
 8002f8c:	080032d0 	.word	0x080032d0

08002f90 <malloc>:
 8002f90:	b510      	push	{r4, lr}
 8002f92:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <malloc+0x10>)
 8002f94:	0001      	movs	r1, r0
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	f000 f86a 	bl	8003070 <_malloc_r>
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	2000000c 	.word	0x2000000c

08002fa4 <free>:
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <free+0x10>)
 8002fa8:	0001      	movs	r1, r0
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	f000 f816 	bl	8002fdc <_free_r>
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <memcpy>:
 8002fb8:	2300      	movs	r3, #0
 8002fba:	b510      	push	{r4, lr}
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d100      	bne.n	8002fc2 <memcpy+0xa>
 8002fc0:	bd10      	pop	{r4, pc}
 8002fc2:	5ccc      	ldrb	r4, [r1, r3]
 8002fc4:	54c4      	strb	r4, [r0, r3]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	e7f8      	b.n	8002fbc <memcpy+0x4>

08002fca <memset>:
 8002fca:	0003      	movs	r3, r0
 8002fcc:	1882      	adds	r2, r0, r2
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d100      	bne.n	8002fd4 <memset+0xa>
 8002fd2:	4770      	bx	lr
 8002fd4:	7019      	strb	r1, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	e7f9      	b.n	8002fce <memset+0x4>
	...

08002fdc <_free_r>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	0005      	movs	r5, r0
 8002fe0:	2900      	cmp	r1, #0
 8002fe2:	d010      	beq.n	8003006 <_free_r+0x2a>
 8002fe4:	1f0c      	subs	r4, r1, #4
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da00      	bge.n	8002fee <_free_r+0x12>
 8002fec:	18e4      	adds	r4, r4, r3
 8002fee:	0028      	movs	r0, r5
 8002ff0:	f000 f8f8 	bl	80031e4 <__malloc_lock>
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	; (800306c <_free_r+0x90>)
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <_free_r+0x2c>
 8002ffc:	6063      	str	r3, [r4, #4]
 8002ffe:	6014      	str	r4, [r2, #0]
 8003000:	0028      	movs	r0, r5
 8003002:	f000 f8f7 	bl	80031f4 <__malloc_unlock>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	42a3      	cmp	r3, r4
 800300a:	d908      	bls.n	800301e <_free_r+0x42>
 800300c:	6821      	ldr	r1, [r4, #0]
 800300e:	1860      	adds	r0, r4, r1
 8003010:	4283      	cmp	r3, r0
 8003012:	d1f3      	bne.n	8002ffc <_free_r+0x20>
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	1841      	adds	r1, r0, r1
 800301a:	6021      	str	r1, [r4, #0]
 800301c:	e7ee      	b.n	8002ffc <_free_r+0x20>
 800301e:	001a      	movs	r2, r3
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <_free_r+0x4e>
 8003026:	42a3      	cmp	r3, r4
 8003028:	d9f9      	bls.n	800301e <_free_r+0x42>
 800302a:	6811      	ldr	r1, [r2, #0]
 800302c:	1850      	adds	r0, r2, r1
 800302e:	42a0      	cmp	r0, r4
 8003030:	d10b      	bne.n	800304a <_free_r+0x6e>
 8003032:	6820      	ldr	r0, [r4, #0]
 8003034:	1809      	adds	r1, r1, r0
 8003036:	1850      	adds	r0, r2, r1
 8003038:	6011      	str	r1, [r2, #0]
 800303a:	4283      	cmp	r3, r0
 800303c:	d1e0      	bne.n	8003000 <_free_r+0x24>
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	1841      	adds	r1, r0, r1
 8003044:	6011      	str	r1, [r2, #0]
 8003046:	6053      	str	r3, [r2, #4]
 8003048:	e7da      	b.n	8003000 <_free_r+0x24>
 800304a:	42a0      	cmp	r0, r4
 800304c:	d902      	bls.n	8003054 <_free_r+0x78>
 800304e:	230c      	movs	r3, #12
 8003050:	602b      	str	r3, [r5, #0]
 8003052:	e7d5      	b.n	8003000 <_free_r+0x24>
 8003054:	6821      	ldr	r1, [r4, #0]
 8003056:	1860      	adds	r0, r4, r1
 8003058:	4283      	cmp	r3, r0
 800305a:	d103      	bne.n	8003064 <_free_r+0x88>
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	1841      	adds	r1, r0, r1
 8003062:	6021      	str	r1, [r4, #0]
 8003064:	6063      	str	r3, [r4, #4]
 8003066:	6054      	str	r4, [r2, #4]
 8003068:	e7ca      	b.n	8003000 <_free_r+0x24>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	200000ac 	.word	0x200000ac

08003070 <_malloc_r>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	2303      	movs	r3, #3
 8003074:	1ccd      	adds	r5, r1, #3
 8003076:	439d      	bics	r5, r3
 8003078:	3508      	adds	r5, #8
 800307a:	0006      	movs	r6, r0
 800307c:	2d0c      	cmp	r5, #12
 800307e:	d21f      	bcs.n	80030c0 <_malloc_r+0x50>
 8003080:	250c      	movs	r5, #12
 8003082:	42a9      	cmp	r1, r5
 8003084:	d81e      	bhi.n	80030c4 <_malloc_r+0x54>
 8003086:	0030      	movs	r0, r6
 8003088:	f000 f8ac 	bl	80031e4 <__malloc_lock>
 800308c:	4925      	ldr	r1, [pc, #148]	; (8003124 <_malloc_r+0xb4>)
 800308e:	680a      	ldr	r2, [r1, #0]
 8003090:	0014      	movs	r4, r2
 8003092:	2c00      	cmp	r4, #0
 8003094:	d11a      	bne.n	80030cc <_malloc_r+0x5c>
 8003096:	4f24      	ldr	r7, [pc, #144]	; (8003128 <_malloc_r+0xb8>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <_malloc_r+0x38>
 800309e:	0021      	movs	r1, r4
 80030a0:	0030      	movs	r0, r6
 80030a2:	f000 f843 	bl	800312c <_sbrk_r>
 80030a6:	6038      	str	r0, [r7, #0]
 80030a8:	0029      	movs	r1, r5
 80030aa:	0030      	movs	r0, r6
 80030ac:	f000 f83e 	bl	800312c <_sbrk_r>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d12b      	bne.n	800310c <_malloc_r+0x9c>
 80030b4:	230c      	movs	r3, #12
 80030b6:	0030      	movs	r0, r6
 80030b8:	6033      	str	r3, [r6, #0]
 80030ba:	f000 f89b 	bl	80031f4 <__malloc_unlock>
 80030be:	e003      	b.n	80030c8 <_malloc_r+0x58>
 80030c0:	2d00      	cmp	r5, #0
 80030c2:	dade      	bge.n	8003082 <_malloc_r+0x12>
 80030c4:	230c      	movs	r3, #12
 80030c6:	6033      	str	r3, [r6, #0]
 80030c8:	2000      	movs	r0, #0
 80030ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	1b5b      	subs	r3, r3, r5
 80030d0:	d419      	bmi.n	8003106 <_malloc_r+0x96>
 80030d2:	2b0b      	cmp	r3, #11
 80030d4:	d903      	bls.n	80030de <_malloc_r+0x6e>
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	18e4      	adds	r4, r4, r3
 80030da:	6025      	str	r5, [r4, #0]
 80030dc:	e003      	b.n	80030e6 <_malloc_r+0x76>
 80030de:	6863      	ldr	r3, [r4, #4]
 80030e0:	42a2      	cmp	r2, r4
 80030e2:	d10e      	bne.n	8003102 <_malloc_r+0x92>
 80030e4:	600b      	str	r3, [r1, #0]
 80030e6:	0030      	movs	r0, r6
 80030e8:	f000 f884 	bl	80031f4 <__malloc_unlock>
 80030ec:	0020      	movs	r0, r4
 80030ee:	2207      	movs	r2, #7
 80030f0:	300b      	adds	r0, #11
 80030f2:	1d23      	adds	r3, r4, #4
 80030f4:	4390      	bics	r0, r2
 80030f6:	1ac2      	subs	r2, r0, r3
 80030f8:	4298      	cmp	r0, r3
 80030fa:	d0e6      	beq.n	80030ca <_malloc_r+0x5a>
 80030fc:	1a1b      	subs	r3, r3, r0
 80030fe:	50a3      	str	r3, [r4, r2]
 8003100:	e7e3      	b.n	80030ca <_malloc_r+0x5a>
 8003102:	6053      	str	r3, [r2, #4]
 8003104:	e7ef      	b.n	80030e6 <_malloc_r+0x76>
 8003106:	0022      	movs	r2, r4
 8003108:	6864      	ldr	r4, [r4, #4]
 800310a:	e7c2      	b.n	8003092 <_malloc_r+0x22>
 800310c:	2303      	movs	r3, #3
 800310e:	1cc4      	adds	r4, r0, #3
 8003110:	439c      	bics	r4, r3
 8003112:	42a0      	cmp	r0, r4
 8003114:	d0e1      	beq.n	80030da <_malloc_r+0x6a>
 8003116:	1a21      	subs	r1, r4, r0
 8003118:	0030      	movs	r0, r6
 800311a:	f000 f807 	bl	800312c <_sbrk_r>
 800311e:	1c43      	adds	r3, r0, #1
 8003120:	d1db      	bne.n	80030da <_malloc_r+0x6a>
 8003122:	e7c7      	b.n	80030b4 <_malloc_r+0x44>
 8003124:	200000ac 	.word	0x200000ac
 8003128:	200000b0 	.word	0x200000b0

0800312c <_sbrk_r>:
 800312c:	2300      	movs	r3, #0
 800312e:	b570      	push	{r4, r5, r6, lr}
 8003130:	4d06      	ldr	r5, [pc, #24]	; (800314c <_sbrk_r+0x20>)
 8003132:	0004      	movs	r4, r0
 8003134:	0008      	movs	r0, r1
 8003136:	602b      	str	r3, [r5, #0]
 8003138:	f7fe f9e0 	bl	80014fc <_sbrk>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d103      	bne.n	8003148 <_sbrk_r+0x1c>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d000      	beq.n	8003148 <_sbrk_r+0x1c>
 8003146:	6023      	str	r3, [r4, #0]
 8003148:	bd70      	pop	{r4, r5, r6, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	20000148 	.word	0x20000148

08003150 <_raise_r>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	0004      	movs	r4, r0
 8003154:	000d      	movs	r5, r1
 8003156:	291f      	cmp	r1, #31
 8003158:	d904      	bls.n	8003164 <_raise_r+0x14>
 800315a:	2316      	movs	r3, #22
 800315c:	6003      	str	r3, [r0, #0]
 800315e:	2001      	movs	r0, #1
 8003160:	4240      	negs	r0, r0
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <_raise_r+0x24>
 800316a:	008a      	lsls	r2, r1, #2
 800316c:	189b      	adds	r3, r3, r2
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	2a00      	cmp	r2, #0
 8003172:	d108      	bne.n	8003186 <_raise_r+0x36>
 8003174:	0020      	movs	r0, r4
 8003176:	f000 f831 	bl	80031dc <_getpid_r>
 800317a:	002a      	movs	r2, r5
 800317c:	0001      	movs	r1, r0
 800317e:	0020      	movs	r0, r4
 8003180:	f000 f81a 	bl	80031b8 <_kill_r>
 8003184:	e7ed      	b.n	8003162 <_raise_r+0x12>
 8003186:	2000      	movs	r0, #0
 8003188:	2a01      	cmp	r2, #1
 800318a:	d0ea      	beq.n	8003162 <_raise_r+0x12>
 800318c:	1c51      	adds	r1, r2, #1
 800318e:	d103      	bne.n	8003198 <_raise_r+0x48>
 8003190:	2316      	movs	r3, #22
 8003192:	3001      	adds	r0, #1
 8003194:	6023      	str	r3, [r4, #0]
 8003196:	e7e4      	b.n	8003162 <_raise_r+0x12>
 8003198:	2400      	movs	r4, #0
 800319a:	0028      	movs	r0, r5
 800319c:	601c      	str	r4, [r3, #0]
 800319e:	4790      	blx	r2
 80031a0:	0020      	movs	r0, r4
 80031a2:	e7de      	b.n	8003162 <_raise_r+0x12>

080031a4 <raise>:
 80031a4:	b510      	push	{r4, lr}
 80031a6:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <raise+0x10>)
 80031a8:	0001      	movs	r1, r0
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	f7ff ffd0 	bl	8003150 <_raise_r>
 80031b0:	bd10      	pop	{r4, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	2000000c 	.word	0x2000000c

080031b8 <_kill_r>:
 80031b8:	2300      	movs	r3, #0
 80031ba:	b570      	push	{r4, r5, r6, lr}
 80031bc:	4d06      	ldr	r5, [pc, #24]	; (80031d8 <_kill_r+0x20>)
 80031be:	0004      	movs	r4, r0
 80031c0:	0008      	movs	r0, r1
 80031c2:	0011      	movs	r1, r2
 80031c4:	602b      	str	r3, [r5, #0]
 80031c6:	f7fe f97d 	bl	80014c4 <_kill>
 80031ca:	1c43      	adds	r3, r0, #1
 80031cc:	d103      	bne.n	80031d6 <_kill_r+0x1e>
 80031ce:	682b      	ldr	r3, [r5, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d000      	beq.n	80031d6 <_kill_r+0x1e>
 80031d4:	6023      	str	r3, [r4, #0]
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	20000148 	.word	0x20000148

080031dc <_getpid_r>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	f7fe f96b 	bl	80014b8 <_getpid>
 80031e2:	bd10      	pop	{r4, pc}

080031e4 <__malloc_lock>:
 80031e4:	b510      	push	{r4, lr}
 80031e6:	4802      	ldr	r0, [pc, #8]	; (80031f0 <__malloc_lock+0xc>)
 80031e8:	f000 f80c 	bl	8003204 <__retarget_lock_acquire_recursive>
 80031ec:	bd10      	pop	{r4, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	20000150 	.word	0x20000150

080031f4 <__malloc_unlock>:
 80031f4:	b510      	push	{r4, lr}
 80031f6:	4802      	ldr	r0, [pc, #8]	; (8003200 <__malloc_unlock+0xc>)
 80031f8:	f000 f805 	bl	8003206 <__retarget_lock_release_recursive>
 80031fc:	bd10      	pop	{r4, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20000150 	.word	0x20000150

08003204 <__retarget_lock_acquire_recursive>:
 8003204:	4770      	bx	lr

08003206 <__retarget_lock_release_recursive>:
 8003206:	4770      	bx	lr

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
