
F0SensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d970  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800da30  0800da30  0001da30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e124  0800e124  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e124  0800e124  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e124  0800e124  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e124  0800e124  0001e124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e12c  0800e12c  0001e12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001dc  0800e310  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800e310  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004017c  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052e6  00000000  00000000  00060380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d60  00000000  00000000  00065668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd8  00000000  00000000  000673c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017858  00000000  00000000  00068fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d01e  00000000  00000000  000807f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085286  00000000  00000000  0009d816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122a9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000968c  00000000  00000000  00122af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800da18 	.word	0x0800da18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800da18 	.word	0x0800da18

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ffa3 	bl	8001388 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 feed 	bl	800122c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff95 	bl	8001388 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff8b 	bl	8001388 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff0f 	bl	80012a4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff05 	bl	80012a4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdef 	bl	80020a0 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa38 	bl	8001940 <__aeabi_dsub>
 80004d0:	f001 fde6 	bl	80020a0 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff9d 	bl	8001468 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fe1a 	bl	800216c <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff94 	bl	8001468 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9fa 	bl	8001940 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fdd3 	bl	800210c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff7d 	bl	8001468 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdfa 	bl	800216c <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	46d6      	mov	lr, sl
 800058e:	4646      	mov	r6, r8
 8000590:	000d      	movs	r5, r1
 8000592:	0001      	movs	r1, r0
 8000594:	0018      	movs	r0, r3
 8000596:	b5c0      	push	{r6, r7, lr}
 8000598:	0017      	movs	r7, r2
 800059a:	032b      	lsls	r3, r5, #12
 800059c:	0a5a      	lsrs	r2, r3, #9
 800059e:	0f4b      	lsrs	r3, r1, #29
 80005a0:	4313      	orrs	r3, r2
 80005a2:	00ca      	lsls	r2, r1, #3
 80005a4:	4691      	mov	r9, r2
 80005a6:	0302      	lsls	r2, r0, #12
 80005a8:	006e      	lsls	r6, r5, #1
 80005aa:	0041      	lsls	r1, r0, #1
 80005ac:	0a52      	lsrs	r2, r2, #9
 80005ae:	0fec      	lsrs	r4, r5, #31
 80005b0:	0f7d      	lsrs	r5, r7, #29
 80005b2:	4315      	orrs	r5, r2
 80005b4:	0d76      	lsrs	r6, r6, #21
 80005b6:	0d49      	lsrs	r1, r1, #21
 80005b8:	0fc0      	lsrs	r0, r0, #31
 80005ba:	4682      	mov	sl, r0
 80005bc:	46ac      	mov	ip, r5
 80005be:	00ff      	lsls	r7, r7, #3
 80005c0:	1a72      	subs	r2, r6, r1
 80005c2:	4284      	cmp	r4, r0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_dadd+0x40>
 80005c6:	e098      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	dc00      	bgt.n	80005ce <__aeabi_dadd+0x46>
 80005cc:	e081      	b.n	80006d2 <__aeabi_dadd+0x14a>
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d100      	bne.n	80005d4 <__aeabi_dadd+0x4c>
 80005d2:	e0b6      	b.n	8000742 <__aeabi_dadd+0x1ba>
 80005d4:	49c9      	ldr	r1, [pc, #804]	; (80008fc <__aeabi_dadd+0x374>)
 80005d6:	428e      	cmp	r6, r1
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x54>
 80005da:	e172      	b.n	80008c2 <__aeabi_dadd+0x33a>
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0028      	movs	r0, r5
 80005e0:	0409      	lsls	r1, r1, #16
 80005e2:	4308      	orrs	r0, r1
 80005e4:	4684      	mov	ip, r0
 80005e6:	2a38      	cmp	r2, #56	; 0x38
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dadd+0x64>
 80005ea:	e15e      	b.n	80008aa <__aeabi_dadd+0x322>
 80005ec:	2a1f      	cmp	r2, #31
 80005ee:	dd00      	ble.n	80005f2 <__aeabi_dadd+0x6a>
 80005f0:	e1ee      	b.n	80009d0 <__aeabi_dadd+0x448>
 80005f2:	2020      	movs	r0, #32
 80005f4:	0039      	movs	r1, r7
 80005f6:	4665      	mov	r5, ip
 80005f8:	1a80      	subs	r0, r0, r2
 80005fa:	4087      	lsls	r7, r0
 80005fc:	40d1      	lsrs	r1, r2
 80005fe:	4085      	lsls	r5, r0
 8000600:	430d      	orrs	r5, r1
 8000602:	0039      	movs	r1, r7
 8000604:	1e4f      	subs	r7, r1, #1
 8000606:	41b9      	sbcs	r1, r7
 8000608:	4667      	mov	r7, ip
 800060a:	40d7      	lsrs	r7, r2
 800060c:	4329      	orrs	r1, r5
 800060e:	1bdb      	subs	r3, r3, r7
 8000610:	464a      	mov	r2, r9
 8000612:	1a55      	subs	r5, r2, r1
 8000614:	45a9      	cmp	r9, r5
 8000616:	4189      	sbcs	r1, r1
 8000618:	4249      	negs	r1, r1
 800061a:	1a5b      	subs	r3, r3, r1
 800061c:	4698      	mov	r8, r3
 800061e:	4643      	mov	r3, r8
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0x9e>
 8000624:	e0cc      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000626:	4643      	mov	r3, r8
 8000628:	025b      	lsls	r3, r3, #9
 800062a:	0a5b      	lsrs	r3, r3, #9
 800062c:	4698      	mov	r8, r3
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0xae>
 8000634:	e12c      	b.n	8000890 <__aeabi_dadd+0x308>
 8000636:	4640      	mov	r0, r8
 8000638:	f001 fe46 	bl	80022c8 <__clzsi2>
 800063c:	0001      	movs	r1, r0
 800063e:	3908      	subs	r1, #8
 8000640:	2220      	movs	r2, #32
 8000642:	0028      	movs	r0, r5
 8000644:	4643      	mov	r3, r8
 8000646:	1a52      	subs	r2, r2, r1
 8000648:	408b      	lsls	r3, r1
 800064a:	40d0      	lsrs	r0, r2
 800064c:	408d      	lsls	r5, r1
 800064e:	4303      	orrs	r3, r0
 8000650:	428e      	cmp	r6, r1
 8000652:	dd00      	ble.n	8000656 <__aeabi_dadd+0xce>
 8000654:	e117      	b.n	8000886 <__aeabi_dadd+0x2fe>
 8000656:	1b8e      	subs	r6, r1, r6
 8000658:	1c72      	adds	r2, r6, #1
 800065a:	2a1f      	cmp	r2, #31
 800065c:	dd00      	ble.n	8000660 <__aeabi_dadd+0xd8>
 800065e:	e1a7      	b.n	80009b0 <__aeabi_dadd+0x428>
 8000660:	2120      	movs	r1, #32
 8000662:	0018      	movs	r0, r3
 8000664:	002e      	movs	r6, r5
 8000666:	1a89      	subs	r1, r1, r2
 8000668:	408d      	lsls	r5, r1
 800066a:	4088      	lsls	r0, r1
 800066c:	40d6      	lsrs	r6, r2
 800066e:	40d3      	lsrs	r3, r2
 8000670:	1e69      	subs	r1, r5, #1
 8000672:	418d      	sbcs	r5, r1
 8000674:	4330      	orrs	r0, r6
 8000676:	4698      	mov	r8, r3
 8000678:	2600      	movs	r6, #0
 800067a:	4305      	orrs	r5, r0
 800067c:	076b      	lsls	r3, r5, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	402b      	ands	r3, r5
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d2b      	adds	r3, r5, #4
 800068a:	42ab      	cmp	r3, r5
 800068c:	41ad      	sbcs	r5, r5
 800068e:	426d      	negs	r5, r5
 8000690:	44a8      	add	r8, r5
 8000692:	001d      	movs	r5, r3
 8000694:	4643      	mov	r3, r8
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	d400      	bmi.n	800069c <__aeabi_dadd+0x114>
 800069a:	e094      	b.n	80007c6 <__aeabi_dadd+0x23e>
 800069c:	4b97      	ldr	r3, [pc, #604]	; (80008fc <__aeabi_dadd+0x374>)
 800069e:	1c72      	adds	r2, r6, #1
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x11e>
 80006a4:	e09d      	b.n	80007e2 <__aeabi_dadd+0x25a>
 80006a6:	4641      	mov	r1, r8
 80006a8:	4b95      	ldr	r3, [pc, #596]	; (8000900 <__aeabi_dadd+0x378>)
 80006aa:	08ed      	lsrs	r5, r5, #3
 80006ac:	4019      	ands	r1, r3
 80006ae:	000b      	movs	r3, r1
 80006b0:	0552      	lsls	r2, r2, #21
 80006b2:	0749      	lsls	r1, r1, #29
 80006b4:	025b      	lsls	r3, r3, #9
 80006b6:	4329      	orrs	r1, r5
 80006b8:	0b1b      	lsrs	r3, r3, #12
 80006ba:	0d52      	lsrs	r2, r2, #21
 80006bc:	0512      	lsls	r2, r2, #20
 80006be:	4313      	orrs	r3, r2
 80006c0:	07e4      	lsls	r4, r4, #31
 80006c2:	4323      	orrs	r3, r4
 80006c4:	0008      	movs	r0, r1
 80006c6:	0019      	movs	r1, r3
 80006c8:	bce0      	pop	{r5, r6, r7}
 80006ca:	46ba      	mov	sl, r7
 80006cc:	46b1      	mov	r9, r6
 80006ce:	46a8      	mov	r8, r5
 80006d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d043      	beq.n	800075e <__aeabi_dadd+0x1d6>
 80006d6:	1b8a      	subs	r2, r1, r6
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d000      	beq.n	80006de <__aeabi_dadd+0x156>
 80006dc:	e12a      	b.n	8000934 <__aeabi_dadd+0x3ac>
 80006de:	464c      	mov	r4, r9
 80006e0:	431c      	orrs	r4, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x15e>
 80006e4:	e1d1      	b.n	8000a8a <__aeabi_dadd+0x502>
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e21f      	b.n	8000b2e <__aeabi_dadd+0x5a6>
 80006ee:	4d83      	ldr	r5, [pc, #524]	; (80008fc <__aeabi_dadd+0x374>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e272      	b.n	8000bdc <__aeabi_dadd+0x654>
 80006f6:	0022      	movs	r2, r4
 80006f8:	e123      	b.n	8000942 <__aeabi_dadd+0x3ba>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	dc00      	bgt.n	8000700 <__aeabi_dadd+0x178>
 80006fe:	e098      	b.n	8000832 <__aeabi_dadd+0x2aa>
 8000700:	2900      	cmp	r1, #0
 8000702:	d042      	beq.n	800078a <__aeabi_dadd+0x202>
 8000704:	497d      	ldr	r1, [pc, #500]	; (80008fc <__aeabi_dadd+0x374>)
 8000706:	428e      	cmp	r6, r1
 8000708:	d100      	bne.n	800070c <__aeabi_dadd+0x184>
 800070a:	e0da      	b.n	80008c2 <__aeabi_dadd+0x33a>
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0028      	movs	r0, r5
 8000710:	0409      	lsls	r1, r1, #16
 8000712:	4308      	orrs	r0, r1
 8000714:	4684      	mov	ip, r0
 8000716:	2a38      	cmp	r2, #56	; 0x38
 8000718:	dd00      	ble.n	800071c <__aeabi_dadd+0x194>
 800071a:	e129      	b.n	8000970 <__aeabi_dadd+0x3e8>
 800071c:	2a1f      	cmp	r2, #31
 800071e:	dc00      	bgt.n	8000722 <__aeabi_dadd+0x19a>
 8000720:	e187      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000722:	0011      	movs	r1, r2
 8000724:	4665      	mov	r5, ip
 8000726:	3920      	subs	r1, #32
 8000728:	40cd      	lsrs	r5, r1
 800072a:	2a20      	cmp	r2, #32
 800072c:	d004      	beq.n	8000738 <__aeabi_dadd+0x1b0>
 800072e:	2040      	movs	r0, #64	; 0x40
 8000730:	4661      	mov	r1, ip
 8000732:	1a82      	subs	r2, r0, r2
 8000734:	4091      	lsls	r1, r2
 8000736:	430f      	orrs	r7, r1
 8000738:	0039      	movs	r1, r7
 800073a:	1e4f      	subs	r7, r1, #1
 800073c:	41b9      	sbcs	r1, r7
 800073e:	430d      	orrs	r5, r1
 8000740:	e11b      	b.n	800097a <__aeabi_dadd+0x3f2>
 8000742:	0029      	movs	r1, r5
 8000744:	4339      	orrs	r1, r7
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x1c2>
 8000748:	e0b5      	b.n	80008b6 <__aeabi_dadd+0x32e>
 800074a:	1e51      	subs	r1, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x1ca>
 8000750:	e1ab      	b.n	8000aaa <__aeabi_dadd+0x522>
 8000752:	486a      	ldr	r0, [pc, #424]	; (80008fc <__aeabi_dadd+0x374>)
 8000754:	4282      	cmp	r2, r0
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x1d2>
 8000758:	e1b2      	b.n	8000ac0 <__aeabi_dadd+0x538>
 800075a:	000a      	movs	r2, r1
 800075c:	e743      	b.n	80005e6 <__aeabi_dadd+0x5e>
 800075e:	4969      	ldr	r1, [pc, #420]	; (8000904 <__aeabi_dadd+0x37c>)
 8000760:	1c75      	adds	r5, r6, #1
 8000762:	420d      	tst	r5, r1
 8000764:	d000      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 8000766:	e0cf      	b.n	8000908 <__aeabi_dadd+0x380>
 8000768:	2e00      	cmp	r6, #0
 800076a:	d000      	beq.n	800076e <__aeabi_dadd+0x1e6>
 800076c:	e193      	b.n	8000a96 <__aeabi_dadd+0x50e>
 800076e:	4649      	mov	r1, r9
 8000770:	4319      	orrs	r1, r3
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x1ee>
 8000774:	e1d1      	b.n	8000b1a <__aeabi_dadd+0x592>
 8000776:	4661      	mov	r1, ip
 8000778:	4339      	orrs	r1, r7
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x1f6>
 800077c:	e1e3      	b.n	8000b46 <__aeabi_dadd+0x5be>
 800077e:	4649      	mov	r1, r9
 8000780:	0758      	lsls	r0, r3, #29
 8000782:	08c9      	lsrs	r1, r1, #3
 8000784:	4301      	orrs	r1, r0
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	e026      	b.n	80007d8 <__aeabi_dadd+0x250>
 800078a:	0029      	movs	r1, r5
 800078c:	4339      	orrs	r1, r7
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x20a>
 8000790:	e091      	b.n	80008b6 <__aeabi_dadd+0x32e>
 8000792:	1e51      	subs	r1, r2, #1
 8000794:	2a01      	cmp	r2, #1
 8000796:	d005      	beq.n	80007a4 <__aeabi_dadd+0x21c>
 8000798:	4858      	ldr	r0, [pc, #352]	; (80008fc <__aeabi_dadd+0x374>)
 800079a:	4282      	cmp	r2, r0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x218>
 800079e:	e18f      	b.n	8000ac0 <__aeabi_dadd+0x538>
 80007a0:	000a      	movs	r2, r1
 80007a2:	e7b8      	b.n	8000716 <__aeabi_dadd+0x18e>
 80007a4:	003d      	movs	r5, r7
 80007a6:	444d      	add	r5, r9
 80007a8:	454d      	cmp	r5, r9
 80007aa:	4189      	sbcs	r1, r1
 80007ac:	4463      	add	r3, ip
 80007ae:	4698      	mov	r8, r3
 80007b0:	4249      	negs	r1, r1
 80007b2:	4488      	add	r8, r1
 80007b4:	4643      	mov	r3, r8
 80007b6:	2602      	movs	r6, #2
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	d500      	bpl.n	80007be <__aeabi_dadd+0x236>
 80007bc:	e0eb      	b.n	8000996 <__aeabi_dadd+0x40e>
 80007be:	3e01      	subs	r6, #1
 80007c0:	076b      	lsls	r3, r5, #29
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x23e>
 80007c4:	e75c      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007c6:	4643      	mov	r3, r8
 80007c8:	08e9      	lsrs	r1, r5, #3
 80007ca:	075a      	lsls	r2, r3, #29
 80007cc:	4311      	orrs	r1, r2
 80007ce:	0032      	movs	r2, r6
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	484a      	ldr	r0, [pc, #296]	; (80008fc <__aeabi_dadd+0x374>)
 80007d4:	4282      	cmp	r2, r0
 80007d6:	d021      	beq.n	800081c <__aeabi_dadd+0x294>
 80007d8:	031b      	lsls	r3, r3, #12
 80007da:	0552      	lsls	r2, r2, #21
 80007dc:	0b1b      	lsrs	r3, r3, #12
 80007de:	0d52      	lsrs	r2, r2, #21
 80007e0:	e76c      	b.n	80006bc <__aeabi_dadd+0x134>
 80007e2:	2300      	movs	r3, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	e769      	b.n	80006bc <__aeabi_dadd+0x134>
 80007e8:	002a      	movs	r2, r5
 80007ea:	433a      	orrs	r2, r7
 80007ec:	d069      	beq.n	80008c2 <__aeabi_dadd+0x33a>
 80007ee:	464a      	mov	r2, r9
 80007f0:	0758      	lsls	r0, r3, #29
 80007f2:	08d1      	lsrs	r1, r2, #3
 80007f4:	08da      	lsrs	r2, r3, #3
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	031b      	lsls	r3, r3, #12
 80007fa:	4308      	orrs	r0, r1
 80007fc:	421a      	tst	r2, r3
 80007fe:	d007      	beq.n	8000810 <__aeabi_dadd+0x288>
 8000800:	0029      	movs	r1, r5
 8000802:	08ed      	lsrs	r5, r5, #3
 8000804:	421d      	tst	r5, r3
 8000806:	d103      	bne.n	8000810 <__aeabi_dadd+0x288>
 8000808:	002a      	movs	r2, r5
 800080a:	08ff      	lsrs	r7, r7, #3
 800080c:	0748      	lsls	r0, r1, #29
 800080e:	4338      	orrs	r0, r7
 8000810:	0f43      	lsrs	r3, r0, #29
 8000812:	00c1      	lsls	r1, r0, #3
 8000814:	075b      	lsls	r3, r3, #29
 8000816:	08c9      	lsrs	r1, r1, #3
 8000818:	4319      	orrs	r1, r3
 800081a:	0013      	movs	r3, r2
 800081c:	000a      	movs	r2, r1
 800081e:	431a      	orrs	r2, r3
 8000820:	d100      	bne.n	8000824 <__aeabi_dadd+0x29c>
 8000822:	e213      	b.n	8000c4c <__aeabi_dadd+0x6c4>
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0312      	lsls	r2, r2, #12
 8000828:	4313      	orrs	r3, r2
 800082a:	031b      	lsls	r3, r3, #12
 800082c:	4a33      	ldr	r2, [pc, #204]	; (80008fc <__aeabi_dadd+0x374>)
 800082e:	0b1b      	lsrs	r3, r3, #12
 8000830:	e744      	b.n	80006bc <__aeabi_dadd+0x134>
 8000832:	2a00      	cmp	r2, #0
 8000834:	d04b      	beq.n	80008ce <__aeabi_dadd+0x346>
 8000836:	1b8a      	subs	r2, r1, r6
 8000838:	2e00      	cmp	r6, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x2b6>
 800083c:	e0e7      	b.n	8000a0e <__aeabi_dadd+0x486>
 800083e:	482f      	ldr	r0, [pc, #188]	; (80008fc <__aeabi_dadd+0x374>)
 8000840:	4281      	cmp	r1, r0
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x2be>
 8000844:	e195      	b.n	8000b72 <__aeabi_dadd+0x5ea>
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	0400      	lsls	r0, r0, #16
 800084a:	4303      	orrs	r3, r0
 800084c:	2a38      	cmp	r2, #56	; 0x38
 800084e:	dd00      	ble.n	8000852 <__aeabi_dadd+0x2ca>
 8000850:	e143      	b.n	8000ada <__aeabi_dadd+0x552>
 8000852:	2a1f      	cmp	r2, #31
 8000854:	dd00      	ble.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e1db      	b.n	8000c10 <__aeabi_dadd+0x688>
 8000858:	2020      	movs	r0, #32
 800085a:	001d      	movs	r5, r3
 800085c:	464e      	mov	r6, r9
 800085e:	1a80      	subs	r0, r0, r2
 8000860:	4085      	lsls	r5, r0
 8000862:	40d6      	lsrs	r6, r2
 8000864:	4335      	orrs	r5, r6
 8000866:	464e      	mov	r6, r9
 8000868:	4086      	lsls	r6, r0
 800086a:	0030      	movs	r0, r6
 800086c:	40d3      	lsrs	r3, r2
 800086e:	1e46      	subs	r6, r0, #1
 8000870:	41b0      	sbcs	r0, r6
 8000872:	449c      	add	ip, r3
 8000874:	4305      	orrs	r5, r0
 8000876:	19ed      	adds	r5, r5, r7
 8000878:	42bd      	cmp	r5, r7
 800087a:	419b      	sbcs	r3, r3
 800087c:	425b      	negs	r3, r3
 800087e:	4463      	add	r3, ip
 8000880:	4698      	mov	r8, r3
 8000882:	000e      	movs	r6, r1
 8000884:	e07f      	b.n	8000986 <__aeabi_dadd+0x3fe>
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <__aeabi_dadd+0x378>)
 8000888:	1a76      	subs	r6, r6, r1
 800088a:	4013      	ands	r3, r2
 800088c:	4698      	mov	r8, r3
 800088e:	e6f5      	b.n	800067c <__aeabi_dadd+0xf4>
 8000890:	0028      	movs	r0, r5
 8000892:	f001 fd19 	bl	80022c8 <__clzsi2>
 8000896:	0001      	movs	r1, r0
 8000898:	3118      	adds	r1, #24
 800089a:	291f      	cmp	r1, #31
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_dadd+0x318>
 800089e:	e6cf      	b.n	8000640 <__aeabi_dadd+0xb8>
 80008a0:	002b      	movs	r3, r5
 80008a2:	3808      	subs	r0, #8
 80008a4:	4083      	lsls	r3, r0
 80008a6:	2500      	movs	r5, #0
 80008a8:	e6d2      	b.n	8000650 <__aeabi_dadd+0xc8>
 80008aa:	4662      	mov	r2, ip
 80008ac:	433a      	orrs	r2, r7
 80008ae:	0011      	movs	r1, r2
 80008b0:	1e4f      	subs	r7, r1, #1
 80008b2:	41b9      	sbcs	r1, r7
 80008b4:	e6ac      	b.n	8000610 <__aeabi_dadd+0x88>
 80008b6:	4649      	mov	r1, r9
 80008b8:	0758      	lsls	r0, r3, #29
 80008ba:	08c9      	lsrs	r1, r1, #3
 80008bc:	4301      	orrs	r1, r0
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	e787      	b.n	80007d2 <__aeabi_dadd+0x24a>
 80008c2:	4649      	mov	r1, r9
 80008c4:	075a      	lsls	r2, r3, #29
 80008c6:	08c9      	lsrs	r1, r1, #3
 80008c8:	4311      	orrs	r1, r2
 80008ca:	08db      	lsrs	r3, r3, #3
 80008cc:	e7a6      	b.n	800081c <__aeabi_dadd+0x294>
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <__aeabi_dadd+0x37c>)
 80008d0:	1c70      	adds	r0, r6, #1
 80008d2:	4208      	tst	r0, r1
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0bb      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e114      	b.n	8000b08 <__aeabi_dadd+0x580>
 80008de:	4649      	mov	r1, r9
 80008e0:	4319      	orrs	r1, r3
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e175      	b.n	8000bd2 <__aeabi_dadd+0x64a>
 80008e6:	0029      	movs	r1, r5
 80008e8:	4339      	orrs	r1, r7
 80008ea:	d000      	beq.n	80008ee <__aeabi_dadd+0x366>
 80008ec:	e17e      	b.n	8000bec <__aeabi_dadd+0x664>
 80008ee:	4649      	mov	r1, r9
 80008f0:	0758      	lsls	r0, r3, #29
 80008f2:	08c9      	lsrs	r1, r1, #3
 80008f4:	4301      	orrs	r1, r0
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	e76e      	b.n	80007d8 <__aeabi_dadd+0x250>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	000007ff 	.word	0x000007ff
 8000900:	ff7fffff 	.word	0xff7fffff
 8000904:	000007fe 	.word	0x000007fe
 8000908:	4649      	mov	r1, r9
 800090a:	1bcd      	subs	r5, r1, r7
 800090c:	4661      	mov	r1, ip
 800090e:	1a58      	subs	r0, r3, r1
 8000910:	45a9      	cmp	r9, r5
 8000912:	4189      	sbcs	r1, r1
 8000914:	4249      	negs	r1, r1
 8000916:	4688      	mov	r8, r1
 8000918:	0001      	movs	r1, r0
 800091a:	4640      	mov	r0, r8
 800091c:	1a09      	subs	r1, r1, r0
 800091e:	4688      	mov	r8, r1
 8000920:	0209      	lsls	r1, r1, #8
 8000922:	d500      	bpl.n	8000926 <__aeabi_dadd+0x39e>
 8000924:	e0a6      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000926:	4641      	mov	r1, r8
 8000928:	4329      	orrs	r1, r5
 800092a:	d000      	beq.n	800092e <__aeabi_dadd+0x3a6>
 800092c:	e67f      	b.n	800062e <__aeabi_dadd+0xa6>
 800092e:	2300      	movs	r3, #0
 8000930:	2400      	movs	r4, #0
 8000932:	e751      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000934:	4cc7      	ldr	r4, [pc, #796]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000936:	42a1      	cmp	r1, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x3b4>
 800093a:	e0c7      	b.n	8000acc <__aeabi_dadd+0x544>
 800093c:	2480      	movs	r4, #128	; 0x80
 800093e:	0424      	lsls	r4, r4, #16
 8000940:	4323      	orrs	r3, r4
 8000942:	2a38      	cmp	r2, #56	; 0x38
 8000944:	dc54      	bgt.n	80009f0 <__aeabi_dadd+0x468>
 8000946:	2a1f      	cmp	r2, #31
 8000948:	dd00      	ble.n	800094c <__aeabi_dadd+0x3c4>
 800094a:	e0cc      	b.n	8000ae6 <__aeabi_dadd+0x55e>
 800094c:	2420      	movs	r4, #32
 800094e:	4648      	mov	r0, r9
 8000950:	1aa4      	subs	r4, r4, r2
 8000952:	001d      	movs	r5, r3
 8000954:	464e      	mov	r6, r9
 8000956:	40a0      	lsls	r0, r4
 8000958:	40d6      	lsrs	r6, r2
 800095a:	40a5      	lsls	r5, r4
 800095c:	0004      	movs	r4, r0
 800095e:	40d3      	lsrs	r3, r2
 8000960:	4662      	mov	r2, ip
 8000962:	4335      	orrs	r5, r6
 8000964:	1e66      	subs	r6, r4, #1
 8000966:	41b4      	sbcs	r4, r6
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	469c      	mov	ip, r3
 800096c:	4325      	orrs	r5, r4
 800096e:	e044      	b.n	80009fa <__aeabi_dadd+0x472>
 8000970:	4662      	mov	r2, ip
 8000972:	433a      	orrs	r2, r7
 8000974:	0015      	movs	r5, r2
 8000976:	1e6f      	subs	r7, r5, #1
 8000978:	41bd      	sbcs	r5, r7
 800097a:	444d      	add	r5, r9
 800097c:	454d      	cmp	r5, r9
 800097e:	4189      	sbcs	r1, r1
 8000980:	4249      	negs	r1, r1
 8000982:	4688      	mov	r8, r1
 8000984:	4498      	add	r8, r3
 8000986:	4643      	mov	r3, r8
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x406>
 800098c:	e718      	b.n	80007c0 <__aeabi_dadd+0x238>
 800098e:	4bb1      	ldr	r3, [pc, #708]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000990:	3601      	adds	r6, #1
 8000992:	429e      	cmp	r6, r3
 8000994:	d049      	beq.n	8000a2a <__aeabi_dadd+0x4a2>
 8000996:	4642      	mov	r2, r8
 8000998:	4baf      	ldr	r3, [pc, #700]	; (8000c58 <__aeabi_dadd+0x6d0>)
 800099a:	2101      	movs	r1, #1
 800099c:	401a      	ands	r2, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	086a      	lsrs	r2, r5, #1
 80009a2:	400d      	ands	r5, r1
 80009a4:	4315      	orrs	r5, r2
 80009a6:	07d9      	lsls	r1, r3, #31
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	4698      	mov	r8, r3
 80009ac:	430d      	orrs	r5, r1
 80009ae:	e665      	b.n	800067c <__aeabi_dadd+0xf4>
 80009b0:	0018      	movs	r0, r3
 80009b2:	3e1f      	subs	r6, #31
 80009b4:	40f0      	lsrs	r0, r6
 80009b6:	2a20      	cmp	r2, #32
 80009b8:	d003      	beq.n	80009c2 <__aeabi_dadd+0x43a>
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	4093      	lsls	r3, r2
 80009c0:	431d      	orrs	r5, r3
 80009c2:	1e69      	subs	r1, r5, #1
 80009c4:	418d      	sbcs	r5, r1
 80009c6:	2300      	movs	r3, #0
 80009c8:	2600      	movs	r6, #0
 80009ca:	4698      	mov	r8, r3
 80009cc:	4305      	orrs	r5, r0
 80009ce:	e6f7      	b.n	80007c0 <__aeabi_dadd+0x238>
 80009d0:	0011      	movs	r1, r2
 80009d2:	4665      	mov	r5, ip
 80009d4:	3920      	subs	r1, #32
 80009d6:	40cd      	lsrs	r5, r1
 80009d8:	2a20      	cmp	r2, #32
 80009da:	d004      	beq.n	80009e6 <__aeabi_dadd+0x45e>
 80009dc:	2040      	movs	r0, #64	; 0x40
 80009de:	4661      	mov	r1, ip
 80009e0:	1a82      	subs	r2, r0, r2
 80009e2:	4091      	lsls	r1, r2
 80009e4:	430f      	orrs	r7, r1
 80009e6:	0039      	movs	r1, r7
 80009e8:	1e4f      	subs	r7, r1, #1
 80009ea:	41b9      	sbcs	r1, r7
 80009ec:	4329      	orrs	r1, r5
 80009ee:	e60f      	b.n	8000610 <__aeabi_dadd+0x88>
 80009f0:	464a      	mov	r2, r9
 80009f2:	4313      	orrs	r3, r2
 80009f4:	001d      	movs	r5, r3
 80009f6:	1e6b      	subs	r3, r5, #1
 80009f8:	419d      	sbcs	r5, r3
 80009fa:	1b7d      	subs	r5, r7, r5
 80009fc:	42af      	cmp	r7, r5
 80009fe:	419b      	sbcs	r3, r3
 8000a00:	4662      	mov	r2, ip
 8000a02:	425b      	negs	r3, r3
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4698      	mov	r8, r3
 8000a08:	4654      	mov	r4, sl
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	e607      	b.n	800061e <__aeabi_dadd+0x96>
 8000a0e:	4648      	mov	r0, r9
 8000a10:	4318      	orrs	r0, r3
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x48e>
 8000a14:	e0b3      	b.n	8000b7e <__aeabi_dadd+0x5f6>
 8000a16:	1e50      	subs	r0, r2, #1
 8000a18:	2a01      	cmp	r2, #1
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x496>
 8000a1c:	e10d      	b.n	8000c3a <__aeabi_dadd+0x6b2>
 8000a1e:	4d8d      	ldr	r5, [pc, #564]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000a20:	42aa      	cmp	r2, r5
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x49e>
 8000a24:	e0a5      	b.n	8000b72 <__aeabi_dadd+0x5ea>
 8000a26:	0002      	movs	r2, r0
 8000a28:	e710      	b.n	800084c <__aeabi_dadd+0x2c4>
 8000a2a:	0032      	movs	r2, r6
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e644      	b.n	80006bc <__aeabi_dadd+0x134>
 8000a32:	2120      	movs	r1, #32
 8000a34:	0038      	movs	r0, r7
 8000a36:	1a89      	subs	r1, r1, r2
 8000a38:	4665      	mov	r5, ip
 8000a3a:	408f      	lsls	r7, r1
 8000a3c:	408d      	lsls	r5, r1
 8000a3e:	40d0      	lsrs	r0, r2
 8000a40:	1e79      	subs	r1, r7, #1
 8000a42:	418f      	sbcs	r7, r1
 8000a44:	4305      	orrs	r5, r0
 8000a46:	433d      	orrs	r5, r7
 8000a48:	4667      	mov	r7, ip
 8000a4a:	40d7      	lsrs	r7, r2
 8000a4c:	19db      	adds	r3, r3, r7
 8000a4e:	e794      	b.n	800097a <__aeabi_dadd+0x3f2>
 8000a50:	4a80      	ldr	r2, [pc, #512]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000a52:	4290      	cmp	r0, r2
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dadd+0x4d0>
 8000a56:	e0ec      	b.n	8000c32 <__aeabi_dadd+0x6aa>
 8000a58:	0039      	movs	r1, r7
 8000a5a:	4449      	add	r1, r9
 8000a5c:	4549      	cmp	r1, r9
 8000a5e:	4192      	sbcs	r2, r2
 8000a60:	4463      	add	r3, ip
 8000a62:	4252      	negs	r2, r2
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	07dd      	lsls	r5, r3, #31
 8000a68:	0849      	lsrs	r1, r1, #1
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	0006      	movs	r6, r0
 8000a70:	430d      	orrs	r5, r1
 8000a72:	e6a5      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000a74:	464a      	mov	r2, r9
 8000a76:	1abd      	subs	r5, r7, r2
 8000a78:	42af      	cmp	r7, r5
 8000a7a:	4189      	sbcs	r1, r1
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	4249      	negs	r1, r1
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	1a5b      	subs	r3, r3, r1
 8000a84:	4698      	mov	r8, r3
 8000a86:	4654      	mov	r4, sl
 8000a88:	e5d1      	b.n	800062e <__aeabi_dadd+0xa6>
 8000a8a:	076c      	lsls	r4, r5, #29
 8000a8c:	08f9      	lsrs	r1, r7, #3
 8000a8e:	4321      	orrs	r1, r4
 8000a90:	08eb      	lsrs	r3, r5, #3
 8000a92:	0004      	movs	r4, r0
 8000a94:	e69d      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	d175      	bne.n	8000b88 <__aeabi_dadd+0x600>
 8000a9c:	4661      	mov	r1, ip
 8000a9e:	4339      	orrs	r1, r7
 8000aa0:	d114      	bne.n	8000acc <__aeabi_dadd+0x544>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	031b      	lsls	r3, r3, #12
 8000aa8:	e6bc      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aaa:	464a      	mov	r2, r9
 8000aac:	1bd5      	subs	r5, r2, r7
 8000aae:	45a9      	cmp	r9, r5
 8000ab0:	4189      	sbcs	r1, r1
 8000ab2:	4662      	mov	r2, ip
 8000ab4:	4249      	negs	r1, r1
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	4698      	mov	r8, r3
 8000abc:	2601      	movs	r6, #1
 8000abe:	e5ae      	b.n	800061e <__aeabi_dadd+0x96>
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08d1      	lsrs	r1, r2, #3
 8000ac4:	075a      	lsls	r2, r3, #29
 8000ac6:	4311      	orrs	r1, r2
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	e6a7      	b.n	800081c <__aeabi_dadd+0x294>
 8000acc:	4663      	mov	r3, ip
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	075a      	lsls	r2, r3, #29
 8000ad2:	4654      	mov	r4, sl
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	e6a0      	b.n	800081c <__aeabi_dadd+0x294>
 8000ada:	464a      	mov	r2, r9
 8000adc:	4313      	orrs	r3, r2
 8000ade:	001d      	movs	r5, r3
 8000ae0:	1e6b      	subs	r3, r5, #1
 8000ae2:	419d      	sbcs	r5, r3
 8000ae4:	e6c7      	b.n	8000876 <__aeabi_dadd+0x2ee>
 8000ae6:	0014      	movs	r4, r2
 8000ae8:	001e      	movs	r6, r3
 8000aea:	3c20      	subs	r4, #32
 8000aec:	40e6      	lsrs	r6, r4
 8000aee:	2a20      	cmp	r2, #32
 8000af0:	d005      	beq.n	8000afe <__aeabi_dadd+0x576>
 8000af2:	2440      	movs	r4, #64	; 0x40
 8000af4:	1aa2      	subs	r2, r4, r2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	464a      	mov	r2, r9
 8000afa:	431a      	orrs	r2, r3
 8000afc:	4691      	mov	r9, r2
 8000afe:	464d      	mov	r5, r9
 8000b00:	1e6b      	subs	r3, r5, #1
 8000b02:	419d      	sbcs	r5, r3
 8000b04:	4335      	orrs	r5, r6
 8000b06:	e778      	b.n	80009fa <__aeabi_dadd+0x472>
 8000b08:	464a      	mov	r2, r9
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_dadd+0x588>
 8000b0e:	e66b      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b10:	076b      	lsls	r3, r5, #29
 8000b12:	08f9      	lsrs	r1, r7, #3
 8000b14:	4319      	orrs	r1, r3
 8000b16:	08eb      	lsrs	r3, r5, #3
 8000b18:	e680      	b.n	800081c <__aeabi_dadd+0x294>
 8000b1a:	4661      	mov	r1, ip
 8000b1c:	4339      	orrs	r1, r7
 8000b1e:	d054      	beq.n	8000bca <__aeabi_dadd+0x642>
 8000b20:	4663      	mov	r3, ip
 8000b22:	08f9      	lsrs	r1, r7, #3
 8000b24:	075c      	lsls	r4, r3, #29
 8000b26:	4321      	orrs	r1, r4
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	0004      	movs	r4, r0
 8000b2c:	e654      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000b2e:	464a      	mov	r2, r9
 8000b30:	1abd      	subs	r5, r7, r2
 8000b32:	42af      	cmp	r7, r5
 8000b34:	4189      	sbcs	r1, r1
 8000b36:	4662      	mov	r2, ip
 8000b38:	4249      	negs	r1, r1
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	4698      	mov	r8, r3
 8000b40:	0004      	movs	r4, r0
 8000b42:	2601      	movs	r6, #1
 8000b44:	e56b      	b.n	800061e <__aeabi_dadd+0x96>
 8000b46:	464a      	mov	r2, r9
 8000b48:	1bd5      	subs	r5, r2, r7
 8000b4a:	45a9      	cmp	r9, r5
 8000b4c:	4189      	sbcs	r1, r1
 8000b4e:	4662      	mov	r2, ip
 8000b50:	4249      	negs	r1, r1
 8000b52:	1a9a      	subs	r2, r3, r2
 8000b54:	1a52      	subs	r2, r2, r1
 8000b56:	4690      	mov	r8, r2
 8000b58:	0212      	lsls	r2, r2, #8
 8000b5a:	d532      	bpl.n	8000bc2 <__aeabi_dadd+0x63a>
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	1abd      	subs	r5, r7, r2
 8000b60:	42af      	cmp	r7, r5
 8000b62:	4189      	sbcs	r1, r1
 8000b64:	4662      	mov	r2, ip
 8000b66:	4249      	negs	r1, r1
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	1a5b      	subs	r3, r3, r1
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	0004      	movs	r4, r0
 8000b70:	e584      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b72:	4663      	mov	r3, ip
 8000b74:	08f9      	lsrs	r1, r7, #3
 8000b76:	075a      	lsls	r2, r3, #29
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	e64e      	b.n	800081c <__aeabi_dadd+0x294>
 8000b7e:	08f9      	lsrs	r1, r7, #3
 8000b80:	0768      	lsls	r0, r5, #29
 8000b82:	4301      	orrs	r1, r0
 8000b84:	08eb      	lsrs	r3, r5, #3
 8000b86:	e624      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b88:	4662      	mov	r2, ip
 8000b8a:	433a      	orrs	r2, r7
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x608>
 8000b8e:	e698      	b.n	80008c2 <__aeabi_dadd+0x33a>
 8000b90:	464a      	mov	r2, r9
 8000b92:	08d1      	lsrs	r1, r2, #3
 8000b94:	075a      	lsls	r2, r3, #29
 8000b96:	4311      	orrs	r1, r2
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	031b      	lsls	r3, r3, #12
 8000b9e:	421a      	tst	r2, r3
 8000ba0:	d008      	beq.n	8000bb4 <__aeabi_dadd+0x62c>
 8000ba2:	4660      	mov	r0, ip
 8000ba4:	08c5      	lsrs	r5, r0, #3
 8000ba6:	421d      	tst	r5, r3
 8000ba8:	d104      	bne.n	8000bb4 <__aeabi_dadd+0x62c>
 8000baa:	4654      	mov	r4, sl
 8000bac:	002a      	movs	r2, r5
 8000bae:	08f9      	lsrs	r1, r7, #3
 8000bb0:	0743      	lsls	r3, r0, #29
 8000bb2:	4319      	orrs	r1, r3
 8000bb4:	0f4b      	lsrs	r3, r1, #29
 8000bb6:	00c9      	lsls	r1, r1, #3
 8000bb8:	075b      	lsls	r3, r3, #29
 8000bba:	08c9      	lsrs	r1, r1, #3
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	e62c      	b.n	800081c <__aeabi_dadd+0x294>
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	4329      	orrs	r1, r5
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dadd+0x642>
 8000bc8:	e5fa      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	000a      	movs	r2, r1
 8000bce:	2400      	movs	r4, #0
 8000bd0:	e602      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000bd2:	076b      	lsls	r3, r5, #29
 8000bd4:	08f9      	lsrs	r1, r7, #3
 8000bd6:	4319      	orrs	r1, r3
 8000bd8:	08eb      	lsrs	r3, r5, #3
 8000bda:	e5fd      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000bdc:	4663      	mov	r3, ip
 8000bde:	08f9      	lsrs	r1, r7, #3
 8000be0:	075b      	lsls	r3, r3, #29
 8000be2:	4319      	orrs	r1, r3
 8000be4:	4663      	mov	r3, ip
 8000be6:	0004      	movs	r4, r0
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	e617      	b.n	800081c <__aeabi_dadd+0x294>
 8000bec:	003d      	movs	r5, r7
 8000bee:	444d      	add	r5, r9
 8000bf0:	4463      	add	r3, ip
 8000bf2:	454d      	cmp	r5, r9
 8000bf4:	4189      	sbcs	r1, r1
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	4249      	negs	r1, r1
 8000bfa:	4488      	add	r8, r1
 8000bfc:	4643      	mov	r3, r8
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x67c>
 8000c02:	e5dd      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000c04:	4642      	mov	r2, r8
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <__aeabi_dadd+0x6d0>)
 8000c08:	2601      	movs	r6, #1
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	e5d7      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000c10:	0010      	movs	r0, r2
 8000c12:	001e      	movs	r6, r3
 8000c14:	3820      	subs	r0, #32
 8000c16:	40c6      	lsrs	r6, r0
 8000c18:	2a20      	cmp	r2, #32
 8000c1a:	d005      	beq.n	8000c28 <__aeabi_dadd+0x6a0>
 8000c1c:	2040      	movs	r0, #64	; 0x40
 8000c1e:	1a82      	subs	r2, r0, r2
 8000c20:	4093      	lsls	r3, r2
 8000c22:	464a      	mov	r2, r9
 8000c24:	431a      	orrs	r2, r3
 8000c26:	4691      	mov	r9, r2
 8000c28:	464d      	mov	r5, r9
 8000c2a:	1e6b      	subs	r3, r5, #1
 8000c2c:	419d      	sbcs	r5, r3
 8000c2e:	4335      	orrs	r5, r6
 8000c30:	e621      	b.n	8000876 <__aeabi_dadd+0x2ee>
 8000c32:	0002      	movs	r2, r0
 8000c34:	2300      	movs	r3, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	e540      	b.n	80006bc <__aeabi_dadd+0x134>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	19d5      	adds	r5, r2, r7
 8000c3e:	42bd      	cmp	r5, r7
 8000c40:	4189      	sbcs	r1, r1
 8000c42:	4463      	add	r3, ip
 8000c44:	4698      	mov	r8, r3
 8000c46:	4249      	negs	r1, r1
 8000c48:	4488      	add	r8, r1
 8000c4a:	e5b3      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4a01      	ldr	r2, [pc, #4]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000c50:	000b      	movs	r3, r1
 8000c52:	e533      	b.n	80006bc <__aeabi_dadd+0x134>
 8000c54:	000007ff 	.word	0x000007ff
 8000c58:	ff7fffff 	.word	0xff7fffff

08000c5c <__aeabi_ddiv>:
 8000c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5e:	4657      	mov	r7, sl
 8000c60:	464e      	mov	r6, r9
 8000c62:	4645      	mov	r5, r8
 8000c64:	46de      	mov	lr, fp
 8000c66:	b5e0      	push	{r5, r6, r7, lr}
 8000c68:	4681      	mov	r9, r0
 8000c6a:	0005      	movs	r5, r0
 8000c6c:	030c      	lsls	r4, r1, #12
 8000c6e:	0048      	lsls	r0, r1, #1
 8000c70:	4692      	mov	sl, r2
 8000c72:	001f      	movs	r7, r3
 8000c74:	b085      	sub	sp, #20
 8000c76:	0b24      	lsrs	r4, r4, #12
 8000c78:	0d40      	lsrs	r0, r0, #21
 8000c7a:	0fce      	lsrs	r6, r1, #31
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d059      	beq.n	8000d34 <__aeabi_ddiv+0xd8>
 8000c80:	4b87      	ldr	r3, [pc, #540]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d100      	bne.n	8000c88 <__aeabi_ddiv+0x2c>
 8000c86:	e098      	b.n	8000dba <__aeabi_ddiv+0x15e>
 8000c88:	0f6b      	lsrs	r3, r5, #29
 8000c8a:	00e4      	lsls	r4, r4, #3
 8000c8c:	431c      	orrs	r4, r3
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	4323      	orrs	r3, r4
 8000c94:	4698      	mov	r8, r3
 8000c96:	4b83      	ldr	r3, [pc, #524]	; (8000ea4 <__aeabi_ddiv+0x248>)
 8000c98:	00ed      	lsls	r5, r5, #3
 8000c9a:	469b      	mov	fp, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	4483      	add	fp, r0
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	033c      	lsls	r4, r7, #12
 8000ca6:	007b      	lsls	r3, r7, #1
 8000ca8:	4650      	mov	r0, sl
 8000caa:	0b24      	lsrs	r4, r4, #12
 8000cac:	0d5b      	lsrs	r3, r3, #21
 8000cae:	0fff      	lsrs	r7, r7, #31
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d067      	beq.n	8000d84 <__aeabi_ddiv+0x128>
 8000cb4:	4a7a      	ldr	r2, [pc, #488]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d018      	beq.n	8000cec <__aeabi_ddiv+0x90>
 8000cba:	497a      	ldr	r1, [pc, #488]	; (8000ea4 <__aeabi_ddiv+0x248>)
 8000cbc:	0f42      	lsrs	r2, r0, #29
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	00e4      	lsls	r4, r4, #3
 8000cc2:	4659      	mov	r1, fp
 8000cc4:	4314      	orrs	r4, r2
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	4463      	add	r3, ip
 8000cca:	0412      	lsls	r2, r2, #16
 8000ccc:	1acb      	subs	r3, r1, r3
 8000cce:	4314      	orrs	r4, r2
 8000cd0:	469b      	mov	fp, r3
 8000cd2:	00c2      	lsls	r2, r0, #3
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	0033      	movs	r3, r6
 8000cd8:	407b      	eors	r3, r7
 8000cda:	469a      	mov	sl, r3
 8000cdc:	464b      	mov	r3, r9
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d900      	bls.n	8000ce4 <__aeabi_ddiv+0x88>
 8000ce2:	e0ef      	b.n	8000ec4 <__aeabi_ddiv+0x268>
 8000ce4:	4970      	ldr	r1, [pc, #448]	; (8000ea8 <__aeabi_ddiv+0x24c>)
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	58cb      	ldr	r3, [r1, r3]
 8000cea:	469f      	mov	pc, r3
 8000cec:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <__aeabi_ddiv+0x250>)
 8000cee:	4652      	mov	r2, sl
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	4322      	orrs	r2, r4
 8000cf4:	44e3      	add	fp, ip
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_ddiv+0xa0>
 8000cfa:	e095      	b.n	8000e28 <__aeabi_ddiv+0x1cc>
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	2302      	movs	r3, #2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	4689      	mov	r9, r1
 8000d04:	2400      	movs	r4, #0
 8000d06:	2002      	movs	r0, #2
 8000d08:	e7e5      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	2500      	movs	r5, #0
 8000d10:	4652      	mov	r2, sl
 8000d12:	051b      	lsls	r3, r3, #20
 8000d14:	4323      	orrs	r3, r4
 8000d16:	07d2      	lsls	r2, r2, #31
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	b005      	add	sp, #20
 8000d20:	bcf0      	pop	{r4, r5, r6, r7}
 8000d22:	46bb      	mov	fp, r7
 8000d24:	46b2      	mov	sl, r6
 8000d26:	46a9      	mov	r9, r5
 8000d28:	46a0      	mov	r8, r4
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2c:	2400      	movs	r4, #0
 8000d2e:	2500      	movs	r5, #0
 8000d30:	4b5b      	ldr	r3, [pc, #364]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000d32:	e7ed      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000d34:	464b      	mov	r3, r9
 8000d36:	4323      	orrs	r3, r4
 8000d38:	4698      	mov	r8, r3
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_ddiv+0xe2>
 8000d3c:	e089      	b.n	8000e52 <__aeabi_ddiv+0x1f6>
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0xe8>
 8000d42:	e1e0      	b.n	8001106 <__aeabi_ddiv+0x4aa>
 8000d44:	0020      	movs	r0, r4
 8000d46:	f001 fabf 	bl	80022c8 <__clzsi2>
 8000d4a:	0001      	movs	r1, r0
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	390b      	subs	r1, #11
 8000d50:	231d      	movs	r3, #29
 8000d52:	1a5b      	subs	r3, r3, r1
 8000d54:	4649      	mov	r1, r9
 8000d56:	0010      	movs	r0, r2
 8000d58:	40d9      	lsrs	r1, r3
 8000d5a:	3808      	subs	r0, #8
 8000d5c:	4084      	lsls	r4, r0
 8000d5e:	000b      	movs	r3, r1
 8000d60:	464d      	mov	r5, r9
 8000d62:	4323      	orrs	r3, r4
 8000d64:	4698      	mov	r8, r3
 8000d66:	4085      	lsls	r5, r0
 8000d68:	4851      	ldr	r0, [pc, #324]	; (8000eb0 <__aeabi_ddiv+0x254>)
 8000d6a:	033c      	lsls	r4, r7, #12
 8000d6c:	1a83      	subs	r3, r0, r2
 8000d6e:	469b      	mov	fp, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	4699      	mov	r9, r3
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	007b      	lsls	r3, r7, #1
 8000d78:	4650      	mov	r0, sl
 8000d7a:	0b24      	lsrs	r4, r4, #12
 8000d7c:	0d5b      	lsrs	r3, r3, #21
 8000d7e:	0fff      	lsrs	r7, r7, #31
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d197      	bne.n	8000cb4 <__aeabi_ddiv+0x58>
 8000d84:	4652      	mov	r2, sl
 8000d86:	4322      	orrs	r2, r4
 8000d88:	d055      	beq.n	8000e36 <__aeabi_ddiv+0x1da>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x134>
 8000d8e:	e1ca      	b.n	8001126 <__aeabi_ddiv+0x4ca>
 8000d90:	0020      	movs	r0, r4
 8000d92:	f001 fa99 	bl	80022c8 <__clzsi2>
 8000d96:	0002      	movs	r2, r0
 8000d98:	3a0b      	subs	r2, #11
 8000d9a:	231d      	movs	r3, #29
 8000d9c:	0001      	movs	r1, r0
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	4652      	mov	r2, sl
 8000da2:	3908      	subs	r1, #8
 8000da4:	40da      	lsrs	r2, r3
 8000da6:	408c      	lsls	r4, r1
 8000da8:	4314      	orrs	r4, r2
 8000daa:	4652      	mov	r2, sl
 8000dac:	408a      	lsls	r2, r1
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <__aeabi_ddiv+0x258>)
 8000db0:	4458      	add	r0, fp
 8000db2:	469b      	mov	fp, r3
 8000db4:	4483      	add	fp, r0
 8000db6:	2000      	movs	r0, #0
 8000db8:	e78d      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	d140      	bne.n	8000e44 <__aeabi_ddiv+0x1e8>
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	3b06      	subs	r3, #6
 8000dc8:	2500      	movs	r5, #0
 8000dca:	4683      	mov	fp, r0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	e769      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d0a9      	beq.n	8000d2c <__aeabi_ddiv+0xd0>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x182>
 8000ddc:	e211      	b.n	8001202 <__aeabi_ddiv+0x5a6>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d093      	beq.n	8000d0a <__aeabi_ddiv+0xae>
 8000de2:	4a35      	ldr	r2, [pc, #212]	; (8000eb8 <__aeabi_ddiv+0x25c>)
 8000de4:	445a      	add	r2, fp
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	dc00      	bgt.n	8000dec <__aeabi_ddiv+0x190>
 8000dea:	e13c      	b.n	8001066 <__aeabi_ddiv+0x40a>
 8000dec:	076b      	lsls	r3, r5, #29
 8000dee:	d000      	beq.n	8000df2 <__aeabi_ddiv+0x196>
 8000df0:	e1a7      	b.n	8001142 <__aeabi_ddiv+0x4e6>
 8000df2:	08ed      	lsrs	r5, r5, #3
 8000df4:	4643      	mov	r3, r8
 8000df6:	01db      	lsls	r3, r3, #7
 8000df8:	d506      	bpl.n	8000e08 <__aeabi_ddiv+0x1ac>
 8000dfa:	4642      	mov	r2, r8
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <__aeabi_ddiv+0x260>)
 8000dfe:	401a      	ands	r2, r3
 8000e00:	4690      	mov	r8, r2
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	445a      	add	r2, fp
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <__aeabi_ddiv+0x264>)
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dc8e      	bgt.n	8000d2c <__aeabi_ddiv+0xd0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	0552      	lsls	r2, r2, #21
 8000e12:	0758      	lsls	r0, r3, #29
 8000e14:	025c      	lsls	r4, r3, #9
 8000e16:	4305      	orrs	r5, r0
 8000e18:	0b24      	lsrs	r4, r4, #12
 8000e1a:	0d53      	lsrs	r3, r2, #21
 8000e1c:	e778      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e1e:	46ba      	mov	sl, r7
 8000e20:	46a0      	mov	r8, r4
 8000e22:	0015      	movs	r5, r2
 8000e24:	9000      	str	r0, [sp, #0]
 8000e26:	e7d4      	b.n	8000dd2 <__aeabi_ddiv+0x176>
 8000e28:	464a      	mov	r2, r9
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	4691      	mov	r9, r2
 8000e30:	2003      	movs	r0, #3
 8000e32:	4652      	mov	r2, sl
 8000e34:	e74f      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000e36:	4649      	mov	r1, r9
 8000e38:	2301      	movs	r3, #1
 8000e3a:	4319      	orrs	r1, r3
 8000e3c:	4689      	mov	r9, r1
 8000e3e:	2400      	movs	r4, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	e748      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000e44:	230c      	movs	r3, #12
 8000e46:	4699      	mov	r9, r3
 8000e48:	3b09      	subs	r3, #9
 8000e4a:	46a0      	mov	r8, r4
 8000e4c:	4683      	mov	fp, r0
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	e728      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000e52:	2304      	movs	r3, #4
 8000e54:	4699      	mov	r9, r3
 8000e56:	2300      	movs	r3, #0
 8000e58:	469b      	mov	fp, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	e720      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000e62:	2300      	movs	r3, #0
 8000e64:	2480      	movs	r4, #128	; 0x80
 8000e66:	469a      	mov	sl, r3
 8000e68:	2500      	movs	r5, #0
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e6c:	0324      	lsls	r4, r4, #12
 8000e6e:	e74f      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	4641      	mov	r1, r8
 8000e74:	031b      	lsls	r3, r3, #12
 8000e76:	4219      	tst	r1, r3
 8000e78:	d008      	beq.n	8000e8c <__aeabi_ddiv+0x230>
 8000e7a:	421c      	tst	r4, r3
 8000e7c:	d106      	bne.n	8000e8c <__aeabi_ddiv+0x230>
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	46ba      	mov	sl, r7
 8000e84:	0015      	movs	r5, r2
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e88:	0b24      	lsrs	r4, r4, #12
 8000e8a:	e741      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e8c:	2480      	movs	r4, #128	; 0x80
 8000e8e:	4643      	mov	r3, r8
 8000e90:	0324      	lsls	r4, r4, #12
 8000e92:	431c      	orrs	r4, r3
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	46b2      	mov	sl, r6
 8000e98:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	e738      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	000007ff 	.word	0x000007ff
 8000ea4:	fffffc01 	.word	0xfffffc01
 8000ea8:	0800dae4 	.word	0x0800dae4
 8000eac:	fffff801 	.word	0xfffff801
 8000eb0:	fffffc0d 	.word	0xfffffc0d
 8000eb4:	000003f3 	.word	0x000003f3
 8000eb8:	000003ff 	.word	0x000003ff
 8000ebc:	feffffff 	.word	0xfeffffff
 8000ec0:	000007fe 	.word	0x000007fe
 8000ec4:	4544      	cmp	r4, r8
 8000ec6:	d200      	bcs.n	8000eca <__aeabi_ddiv+0x26e>
 8000ec8:	e116      	b.n	80010f8 <__aeabi_ddiv+0x49c>
 8000eca:	d100      	bne.n	8000ece <__aeabi_ddiv+0x272>
 8000ecc:	e111      	b.n	80010f2 <__aeabi_ddiv+0x496>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	002e      	movs	r6, r5
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	2500      	movs	r5, #0
 8000eda:	44e3      	add	fp, ip
 8000edc:	0223      	lsls	r3, r4, #8
 8000ede:	0e14      	lsrs	r4, r2, #24
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	0c1b      	lsrs	r3, r3, #16
 8000ee4:	4699      	mov	r9, r3
 8000ee6:	0423      	lsls	r3, r4, #16
 8000ee8:	0c1f      	lsrs	r7, r3, #16
 8000eea:	0212      	lsls	r2, r2, #8
 8000eec:	4649      	mov	r1, r9
 8000eee:	9200      	str	r2, [sp, #0]
 8000ef0:	9701      	str	r7, [sp, #4]
 8000ef2:	f7ff f9ab 	bl	800024c <__aeabi_uidivmod>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	437a      	muls	r2, r7
 8000efa:	040b      	lsls	r3, r1, #16
 8000efc:	0c31      	lsrs	r1, r6, #16
 8000efe:	4680      	mov	r8, r0
 8000f00:	4319      	orrs	r1, r3
 8000f02:	428a      	cmp	r2, r1
 8000f04:	d90b      	bls.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f06:	2301      	movs	r3, #1
 8000f08:	425b      	negs	r3, r3
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	1909      	adds	r1, r1, r4
 8000f0e:	44e0      	add	r8, ip
 8000f10:	428c      	cmp	r4, r1
 8000f12:	d804      	bhi.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f14:	428a      	cmp	r2, r1
 8000f16:	d902      	bls.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f18:	1e83      	subs	r3, r0, #2
 8000f1a:	4698      	mov	r8, r3
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	1a88      	subs	r0, r1, r2
 8000f20:	4649      	mov	r1, r9
 8000f22:	f7ff f993 	bl	800024c <__aeabi_uidivmod>
 8000f26:	0409      	lsls	r1, r1, #16
 8000f28:	468c      	mov	ip, r1
 8000f2a:	0431      	lsls	r1, r6, #16
 8000f2c:	4666      	mov	r6, ip
 8000f2e:	9a01      	ldr	r2, [sp, #4]
 8000f30:	0c09      	lsrs	r1, r1, #16
 8000f32:	4342      	muls	r2, r0
 8000f34:	0003      	movs	r3, r0
 8000f36:	4331      	orrs	r1, r6
 8000f38:	428a      	cmp	r2, r1
 8000f3a:	d904      	bls.n	8000f46 <__aeabi_ddiv+0x2ea>
 8000f3c:	1909      	adds	r1, r1, r4
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	428c      	cmp	r4, r1
 8000f42:	d800      	bhi.n	8000f46 <__aeabi_ddiv+0x2ea>
 8000f44:	e111      	b.n	800116a <__aeabi_ddiv+0x50e>
 8000f46:	1a89      	subs	r1, r1, r2
 8000f48:	4642      	mov	r2, r8
 8000f4a:	9e00      	ldr	r6, [sp, #0]
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	0c33      	lsrs	r3, r6, #16
 8000f52:	001f      	movs	r7, r3
 8000f54:	0c10      	lsrs	r0, r2, #16
 8000f56:	4690      	mov	r8, r2
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	0413      	lsls	r3, r2, #16
 8000f5c:	0432      	lsls	r2, r6, #16
 8000f5e:	0c16      	lsrs	r6, r2, #16
 8000f60:	0032      	movs	r2, r6
 8000f62:	0c1b      	lsrs	r3, r3, #16
 8000f64:	435a      	muls	r2, r3
 8000f66:	9603      	str	r6, [sp, #12]
 8000f68:	437b      	muls	r3, r7
 8000f6a:	4346      	muls	r6, r0
 8000f6c:	4378      	muls	r0, r7
 8000f6e:	0c17      	lsrs	r7, r2, #16
 8000f70:	46bc      	mov	ip, r7
 8000f72:	199b      	adds	r3, r3, r6
 8000f74:	4463      	add	r3, ip
 8000f76:	429e      	cmp	r6, r3
 8000f78:	d903      	bls.n	8000f82 <__aeabi_ddiv+0x326>
 8000f7a:	2680      	movs	r6, #128	; 0x80
 8000f7c:	0276      	lsls	r6, r6, #9
 8000f7e:	46b4      	mov	ip, r6
 8000f80:	4460      	add	r0, ip
 8000f82:	0c1e      	lsrs	r6, r3, #16
 8000f84:	1830      	adds	r0, r6, r0
 8000f86:	0416      	lsls	r6, r2, #16
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	0c36      	lsrs	r6, r6, #16
 8000f8c:	199e      	adds	r6, r3, r6
 8000f8e:	4281      	cmp	r1, r0
 8000f90:	d200      	bcs.n	8000f94 <__aeabi_ddiv+0x338>
 8000f92:	e09c      	b.n	80010ce <__aeabi_ddiv+0x472>
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x33c>
 8000f96:	e097      	b.n	80010c8 <__aeabi_ddiv+0x46c>
 8000f98:	1bae      	subs	r6, r5, r6
 8000f9a:	1a09      	subs	r1, r1, r0
 8000f9c:	42b5      	cmp	r5, r6
 8000f9e:	4180      	sbcs	r0, r0
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	1a08      	subs	r0, r1, r0
 8000fa4:	4284      	cmp	r4, r0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_ddiv+0x34e>
 8000fa8:	e111      	b.n	80011ce <__aeabi_ddiv+0x572>
 8000faa:	4649      	mov	r1, r9
 8000fac:	f7ff f94e 	bl	800024c <__aeabi_uidivmod>
 8000fb0:	9a01      	ldr	r2, [sp, #4]
 8000fb2:	040b      	lsls	r3, r1, #16
 8000fb4:	4342      	muls	r2, r0
 8000fb6:	0c31      	lsrs	r1, r6, #16
 8000fb8:	0005      	movs	r5, r0
 8000fba:	4319      	orrs	r1, r3
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d907      	bls.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fc0:	1909      	adds	r1, r1, r4
 8000fc2:	3d01      	subs	r5, #1
 8000fc4:	428c      	cmp	r4, r1
 8000fc6:	d803      	bhi.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fc8:	428a      	cmp	r2, r1
 8000fca:	d901      	bls.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fcc:	1e85      	subs	r5, r0, #2
 8000fce:	1909      	adds	r1, r1, r4
 8000fd0:	1a88      	subs	r0, r1, r2
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	f7ff f93a 	bl	800024c <__aeabi_uidivmod>
 8000fd8:	0409      	lsls	r1, r1, #16
 8000fda:	468c      	mov	ip, r1
 8000fdc:	0431      	lsls	r1, r6, #16
 8000fde:	4666      	mov	r6, ip
 8000fe0:	9a01      	ldr	r2, [sp, #4]
 8000fe2:	0c09      	lsrs	r1, r1, #16
 8000fe4:	4342      	muls	r2, r0
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	4331      	orrs	r1, r6
 8000fea:	428a      	cmp	r2, r1
 8000fec:	d907      	bls.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000fee:	1909      	adds	r1, r1, r4
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	428c      	cmp	r4, r1
 8000ff4:	d803      	bhi.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	d901      	bls.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000ffa:	1e83      	subs	r3, r0, #2
 8000ffc:	1909      	adds	r1, r1, r4
 8000ffe:	9e03      	ldr	r6, [sp, #12]
 8001000:	1a89      	subs	r1, r1, r2
 8001002:	0032      	movs	r2, r6
 8001004:	042d      	lsls	r5, r5, #16
 8001006:	431d      	orrs	r5, r3
 8001008:	9f02      	ldr	r7, [sp, #8]
 800100a:	042b      	lsls	r3, r5, #16
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	435a      	muls	r2, r3
 8001010:	437b      	muls	r3, r7
 8001012:	469c      	mov	ip, r3
 8001014:	0c28      	lsrs	r0, r5, #16
 8001016:	4346      	muls	r6, r0
 8001018:	0c13      	lsrs	r3, r2, #16
 800101a:	44b4      	add	ip, r6
 800101c:	4463      	add	r3, ip
 800101e:	4378      	muls	r0, r7
 8001020:	429e      	cmp	r6, r3
 8001022:	d903      	bls.n	800102c <__aeabi_ddiv+0x3d0>
 8001024:	2680      	movs	r6, #128	; 0x80
 8001026:	0276      	lsls	r6, r6, #9
 8001028:	46b4      	mov	ip, r6
 800102a:	4460      	add	r0, ip
 800102c:	0c1e      	lsrs	r6, r3, #16
 800102e:	0412      	lsls	r2, r2, #16
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	0c12      	lsrs	r2, r2, #16
 8001034:	1830      	adds	r0, r6, r0
 8001036:	189b      	adds	r3, r3, r2
 8001038:	4281      	cmp	r1, r0
 800103a:	d306      	bcc.n	800104a <__aeabi_ddiv+0x3ee>
 800103c:	d002      	beq.n	8001044 <__aeabi_ddiv+0x3e8>
 800103e:	2301      	movs	r3, #1
 8001040:	431d      	orrs	r5, r3
 8001042:	e6ce      	b.n	8000de2 <__aeabi_ddiv+0x186>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x3ee>
 8001048:	e6cb      	b.n	8000de2 <__aeabi_ddiv+0x186>
 800104a:	1861      	adds	r1, r4, r1
 800104c:	1e6e      	subs	r6, r5, #1
 800104e:	42a1      	cmp	r1, r4
 8001050:	d200      	bcs.n	8001054 <__aeabi_ddiv+0x3f8>
 8001052:	e0a4      	b.n	800119e <__aeabi_ddiv+0x542>
 8001054:	4281      	cmp	r1, r0
 8001056:	d200      	bcs.n	800105a <__aeabi_ddiv+0x3fe>
 8001058:	e0c9      	b.n	80011ee <__aeabi_ddiv+0x592>
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x402>
 800105c:	e0d9      	b.n	8001212 <__aeabi_ddiv+0x5b6>
 800105e:	0035      	movs	r5, r6
 8001060:	e7ed      	b.n	800103e <__aeabi_ddiv+0x3e2>
 8001062:	2501      	movs	r5, #1
 8001064:	426d      	negs	r5, r5
 8001066:	2101      	movs	r1, #1
 8001068:	1a89      	subs	r1, r1, r2
 800106a:	2938      	cmp	r1, #56	; 0x38
 800106c:	dd00      	ble.n	8001070 <__aeabi_ddiv+0x414>
 800106e:	e64c      	b.n	8000d0a <__aeabi_ddiv+0xae>
 8001070:	291f      	cmp	r1, #31
 8001072:	dc00      	bgt.n	8001076 <__aeabi_ddiv+0x41a>
 8001074:	e07f      	b.n	8001176 <__aeabi_ddiv+0x51a>
 8001076:	231f      	movs	r3, #31
 8001078:	425b      	negs	r3, r3
 800107a:	1a9a      	subs	r2, r3, r2
 800107c:	4643      	mov	r3, r8
 800107e:	40d3      	lsrs	r3, r2
 8001080:	2920      	cmp	r1, #32
 8001082:	d004      	beq.n	800108e <__aeabi_ddiv+0x432>
 8001084:	4644      	mov	r4, r8
 8001086:	4a65      	ldr	r2, [pc, #404]	; (800121c <__aeabi_ddiv+0x5c0>)
 8001088:	445a      	add	r2, fp
 800108a:	4094      	lsls	r4, r2
 800108c:	4325      	orrs	r5, r4
 800108e:	1e6a      	subs	r2, r5, #1
 8001090:	4195      	sbcs	r5, r2
 8001092:	2207      	movs	r2, #7
 8001094:	432b      	orrs	r3, r5
 8001096:	0015      	movs	r5, r2
 8001098:	2400      	movs	r4, #0
 800109a:	401d      	ands	r5, r3
 800109c:	421a      	tst	r2, r3
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x446>
 80010a0:	e0a1      	b.n	80011e6 <__aeabi_ddiv+0x58a>
 80010a2:	220f      	movs	r2, #15
 80010a4:	2400      	movs	r4, #0
 80010a6:	401a      	ands	r2, r3
 80010a8:	2a04      	cmp	r2, #4
 80010aa:	d100      	bne.n	80010ae <__aeabi_ddiv+0x452>
 80010ac:	e098      	b.n	80011e0 <__aeabi_ddiv+0x584>
 80010ae:	1d1a      	adds	r2, r3, #4
 80010b0:	429a      	cmp	r2, r3
 80010b2:	419b      	sbcs	r3, r3
 80010b4:	425b      	negs	r3, r3
 80010b6:	18e4      	adds	r4, r4, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	0222      	lsls	r2, r4, #8
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_ddiv+0x464>
 80010be:	e08f      	b.n	80011e0 <__aeabi_ddiv+0x584>
 80010c0:	2301      	movs	r3, #1
 80010c2:	2400      	movs	r4, #0
 80010c4:	2500      	movs	r5, #0
 80010c6:	e623      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 80010c8:	42b5      	cmp	r5, r6
 80010ca:	d300      	bcc.n	80010ce <__aeabi_ddiv+0x472>
 80010cc:	e764      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80010ce:	4643      	mov	r3, r8
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	9b00      	ldr	r3, [sp, #0]
 80010d4:	469c      	mov	ip, r3
 80010d6:	4465      	add	r5, ip
 80010d8:	001f      	movs	r7, r3
 80010da:	429d      	cmp	r5, r3
 80010dc:	419b      	sbcs	r3, r3
 80010de:	425b      	negs	r3, r3
 80010e0:	191b      	adds	r3, r3, r4
 80010e2:	18c9      	adds	r1, r1, r3
 80010e4:	428c      	cmp	r4, r1
 80010e6:	d23a      	bcs.n	800115e <__aeabi_ddiv+0x502>
 80010e8:	4288      	cmp	r0, r1
 80010ea:	d863      	bhi.n	80011b4 <__aeabi_ddiv+0x558>
 80010ec:	d060      	beq.n	80011b0 <__aeabi_ddiv+0x554>
 80010ee:	4690      	mov	r8, r2
 80010f0:	e752      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80010f2:	42aa      	cmp	r2, r5
 80010f4:	d900      	bls.n	80010f8 <__aeabi_ddiv+0x49c>
 80010f6:	e6ea      	b.n	8000ece <__aeabi_ddiv+0x272>
 80010f8:	4643      	mov	r3, r8
 80010fa:	07de      	lsls	r6, r3, #31
 80010fc:	0858      	lsrs	r0, r3, #1
 80010fe:	086b      	lsrs	r3, r5, #1
 8001100:	431e      	orrs	r6, r3
 8001102:	07ed      	lsls	r5, r5, #31
 8001104:	e6ea      	b.n	8000edc <__aeabi_ddiv+0x280>
 8001106:	4648      	mov	r0, r9
 8001108:	f001 f8de 	bl	80022c8 <__clzsi2>
 800110c:	0001      	movs	r1, r0
 800110e:	0002      	movs	r2, r0
 8001110:	3115      	adds	r1, #21
 8001112:	3220      	adds	r2, #32
 8001114:	291c      	cmp	r1, #28
 8001116:	dc00      	bgt.n	800111a <__aeabi_ddiv+0x4be>
 8001118:	e61a      	b.n	8000d50 <__aeabi_ddiv+0xf4>
 800111a:	464b      	mov	r3, r9
 800111c:	3808      	subs	r0, #8
 800111e:	4083      	lsls	r3, r0
 8001120:	2500      	movs	r5, #0
 8001122:	4698      	mov	r8, r3
 8001124:	e620      	b.n	8000d68 <__aeabi_ddiv+0x10c>
 8001126:	f001 f8cf 	bl	80022c8 <__clzsi2>
 800112a:	0003      	movs	r3, r0
 800112c:	001a      	movs	r2, r3
 800112e:	3215      	adds	r2, #21
 8001130:	3020      	adds	r0, #32
 8001132:	2a1c      	cmp	r2, #28
 8001134:	dc00      	bgt.n	8001138 <__aeabi_ddiv+0x4dc>
 8001136:	e630      	b.n	8000d9a <__aeabi_ddiv+0x13e>
 8001138:	4654      	mov	r4, sl
 800113a:	3b08      	subs	r3, #8
 800113c:	2200      	movs	r2, #0
 800113e:	409c      	lsls	r4, r3
 8001140:	e635      	b.n	8000dae <__aeabi_ddiv+0x152>
 8001142:	230f      	movs	r3, #15
 8001144:	402b      	ands	r3, r5
 8001146:	2b04      	cmp	r3, #4
 8001148:	d100      	bne.n	800114c <__aeabi_ddiv+0x4f0>
 800114a:	e652      	b.n	8000df2 <__aeabi_ddiv+0x196>
 800114c:	2305      	movs	r3, #5
 800114e:	425b      	negs	r3, r3
 8001150:	42ab      	cmp	r3, r5
 8001152:	419b      	sbcs	r3, r3
 8001154:	3504      	adds	r5, #4
 8001156:	425b      	negs	r3, r3
 8001158:	08ed      	lsrs	r5, r5, #3
 800115a:	4498      	add	r8, r3
 800115c:	e64a      	b.n	8000df4 <__aeabi_ddiv+0x198>
 800115e:	428c      	cmp	r4, r1
 8001160:	d1c5      	bne.n	80010ee <__aeabi_ddiv+0x492>
 8001162:	42af      	cmp	r7, r5
 8001164:	d9c0      	bls.n	80010e8 <__aeabi_ddiv+0x48c>
 8001166:	4690      	mov	r8, r2
 8001168:	e716      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 800116a:	428a      	cmp	r2, r1
 800116c:	d800      	bhi.n	8001170 <__aeabi_ddiv+0x514>
 800116e:	e6ea      	b.n	8000f46 <__aeabi_ddiv+0x2ea>
 8001170:	1e83      	subs	r3, r0, #2
 8001172:	1909      	adds	r1, r1, r4
 8001174:	e6e7      	b.n	8000f46 <__aeabi_ddiv+0x2ea>
 8001176:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <__aeabi_ddiv+0x5c4>)
 8001178:	0028      	movs	r0, r5
 800117a:	445a      	add	r2, fp
 800117c:	4643      	mov	r3, r8
 800117e:	4095      	lsls	r5, r2
 8001180:	4093      	lsls	r3, r2
 8001182:	40c8      	lsrs	r0, r1
 8001184:	1e6a      	subs	r2, r5, #1
 8001186:	4195      	sbcs	r5, r2
 8001188:	4644      	mov	r4, r8
 800118a:	4303      	orrs	r3, r0
 800118c:	432b      	orrs	r3, r5
 800118e:	40cc      	lsrs	r4, r1
 8001190:	075a      	lsls	r2, r3, #29
 8001192:	d092      	beq.n	80010ba <__aeabi_ddiv+0x45e>
 8001194:	220f      	movs	r2, #15
 8001196:	401a      	ands	r2, r3
 8001198:	2a04      	cmp	r2, #4
 800119a:	d188      	bne.n	80010ae <__aeabi_ddiv+0x452>
 800119c:	e78d      	b.n	80010ba <__aeabi_ddiv+0x45e>
 800119e:	0035      	movs	r5, r6
 80011a0:	4281      	cmp	r1, r0
 80011a2:	d000      	beq.n	80011a6 <__aeabi_ddiv+0x54a>
 80011a4:	e74b      	b.n	800103e <__aeabi_ddiv+0x3e2>
 80011a6:	9a00      	ldr	r2, [sp, #0]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d000      	beq.n	80011ae <__aeabi_ddiv+0x552>
 80011ac:	e747      	b.n	800103e <__aeabi_ddiv+0x3e2>
 80011ae:	e618      	b.n	8000de2 <__aeabi_ddiv+0x186>
 80011b0:	42ae      	cmp	r6, r5
 80011b2:	d99c      	bls.n	80010ee <__aeabi_ddiv+0x492>
 80011b4:	2302      	movs	r3, #2
 80011b6:	425b      	negs	r3, r3
 80011b8:	469c      	mov	ip, r3
 80011ba:	9b00      	ldr	r3, [sp, #0]
 80011bc:	44e0      	add	r8, ip
 80011be:	469c      	mov	ip, r3
 80011c0:	4465      	add	r5, ip
 80011c2:	429d      	cmp	r5, r3
 80011c4:	419b      	sbcs	r3, r3
 80011c6:	425b      	negs	r3, r3
 80011c8:	191b      	adds	r3, r3, r4
 80011ca:	18c9      	adds	r1, r1, r3
 80011cc:	e6e4      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80011ce:	4a15      	ldr	r2, [pc, #84]	; (8001224 <__aeabi_ddiv+0x5c8>)
 80011d0:	445a      	add	r2, fp
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_ddiv+0x57c>
 80011d6:	e744      	b.n	8001062 <__aeabi_ddiv+0x406>
 80011d8:	2301      	movs	r3, #1
 80011da:	2500      	movs	r5, #0
 80011dc:	4498      	add	r8, r3
 80011de:	e609      	b.n	8000df4 <__aeabi_ddiv+0x198>
 80011e0:	0765      	lsls	r5, r4, #29
 80011e2:	0264      	lsls	r4, r4, #9
 80011e4:	0b24      	lsrs	r4, r4, #12
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	431d      	orrs	r5, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	e590      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 80011ee:	9e00      	ldr	r6, [sp, #0]
 80011f0:	3d02      	subs	r5, #2
 80011f2:	0072      	lsls	r2, r6, #1
 80011f4:	42b2      	cmp	r2, r6
 80011f6:	41bf      	sbcs	r7, r7
 80011f8:	427f      	negs	r7, r7
 80011fa:	193c      	adds	r4, r7, r4
 80011fc:	1909      	adds	r1, r1, r4
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	e7ce      	b.n	80011a0 <__aeabi_ddiv+0x544>
 8001202:	2480      	movs	r4, #128	; 0x80
 8001204:	4643      	mov	r3, r8
 8001206:	0324      	lsls	r4, r4, #12
 8001208:	431c      	orrs	r4, r3
 800120a:	0324      	lsls	r4, r4, #12
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <__aeabi_ddiv+0x5cc>)
 800120e:	0b24      	lsrs	r4, r4, #12
 8001210:	e57e      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8001212:	9a00      	ldr	r2, [sp, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3ea      	bcc.n	80011ee <__aeabi_ddiv+0x592>
 8001218:	0035      	movs	r5, r6
 800121a:	e7c4      	b.n	80011a6 <__aeabi_ddiv+0x54a>
 800121c:	0000043e 	.word	0x0000043e
 8001220:	0000041e 	.word	0x0000041e
 8001224:	000003ff 	.word	0x000003ff
 8001228:	000007ff 	.word	0x000007ff

0800122c <__eqdf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	464f      	mov	r7, r9
 8001230:	4646      	mov	r6, r8
 8001232:	46d6      	mov	lr, sl
 8001234:	4694      	mov	ip, r2
 8001236:	4691      	mov	r9, r2
 8001238:	031a      	lsls	r2, r3, #12
 800123a:	0b12      	lsrs	r2, r2, #12
 800123c:	4d18      	ldr	r5, [pc, #96]	; (80012a0 <__eqdf2+0x74>)
 800123e:	b5c0      	push	{r6, r7, lr}
 8001240:	004c      	lsls	r4, r1, #1
 8001242:	030f      	lsls	r7, r1, #12
 8001244:	4692      	mov	sl, r2
 8001246:	005a      	lsls	r2, r3, #1
 8001248:	0006      	movs	r6, r0
 800124a:	4680      	mov	r8, r0
 800124c:	0b3f      	lsrs	r7, r7, #12
 800124e:	2001      	movs	r0, #1
 8001250:	0d64      	lsrs	r4, r4, #21
 8001252:	0fc9      	lsrs	r1, r1, #31
 8001254:	0d52      	lsrs	r2, r2, #21
 8001256:	0fdb      	lsrs	r3, r3, #31
 8001258:	42ac      	cmp	r4, r5
 800125a:	d00a      	beq.n	8001272 <__eqdf2+0x46>
 800125c:	42aa      	cmp	r2, r5
 800125e:	d003      	beq.n	8001268 <__eqdf2+0x3c>
 8001260:	4294      	cmp	r4, r2
 8001262:	d101      	bne.n	8001268 <__eqdf2+0x3c>
 8001264:	4557      	cmp	r7, sl
 8001266:	d00d      	beq.n	8001284 <__eqdf2+0x58>
 8001268:	bce0      	pop	{r5, r6, r7}
 800126a:	46ba      	mov	sl, r7
 800126c:	46b1      	mov	r9, r6
 800126e:	46a8      	mov	r8, r5
 8001270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001272:	003d      	movs	r5, r7
 8001274:	4335      	orrs	r5, r6
 8001276:	d1f7      	bne.n	8001268 <__eqdf2+0x3c>
 8001278:	42a2      	cmp	r2, r4
 800127a:	d1f5      	bne.n	8001268 <__eqdf2+0x3c>
 800127c:	4652      	mov	r2, sl
 800127e:	4665      	mov	r5, ip
 8001280:	432a      	orrs	r2, r5
 8001282:	d1f1      	bne.n	8001268 <__eqdf2+0x3c>
 8001284:	2001      	movs	r0, #1
 8001286:	45c8      	cmp	r8, r9
 8001288:	d1ee      	bne.n	8001268 <__eqdf2+0x3c>
 800128a:	4299      	cmp	r1, r3
 800128c:	d006      	beq.n	800129c <__eqdf2+0x70>
 800128e:	2c00      	cmp	r4, #0
 8001290:	d1ea      	bne.n	8001268 <__eqdf2+0x3c>
 8001292:	433e      	orrs	r6, r7
 8001294:	0030      	movs	r0, r6
 8001296:	1e46      	subs	r6, r0, #1
 8001298:	41b0      	sbcs	r0, r6
 800129a:	e7e5      	b.n	8001268 <__eqdf2+0x3c>
 800129c:	2000      	movs	r0, #0
 800129e:	e7e3      	b.n	8001268 <__eqdf2+0x3c>
 80012a0:	000007ff 	.word	0x000007ff

080012a4 <__gedf2>:
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	464e      	mov	r6, r9
 80012a8:	4645      	mov	r5, r8
 80012aa:	4657      	mov	r7, sl
 80012ac:	46de      	mov	lr, fp
 80012ae:	0004      	movs	r4, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	b5e0      	push	{r5, r6, r7, lr}
 80012b4:	0016      	movs	r6, r2
 80012b6:	031b      	lsls	r3, r3, #12
 80012b8:	0b1b      	lsrs	r3, r3, #12
 80012ba:	4d32      	ldr	r5, [pc, #200]	; (8001384 <__gedf2+0xe0>)
 80012bc:	030f      	lsls	r7, r1, #12
 80012be:	004a      	lsls	r2, r1, #1
 80012c0:	4699      	mov	r9, r3
 80012c2:	0043      	lsls	r3, r0, #1
 80012c4:	46a4      	mov	ip, r4
 80012c6:	46b0      	mov	r8, r6
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	0d5b      	lsrs	r3, r3, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	42aa      	cmp	r2, r5
 80012d4:	d029      	beq.n	800132a <__gedf2+0x86>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d018      	beq.n	800130c <__gedf2+0x68>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d12a      	bne.n	8001334 <__gedf2+0x90>
 80012de:	433c      	orrs	r4, r7
 80012e0:	46a3      	mov	fp, r4
 80012e2:	4265      	negs	r5, r4
 80012e4:	4165      	adcs	r5, r4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <__gedf2+0x4c>
 80012ea:	464c      	mov	r4, r9
 80012ec:	4326      	orrs	r6, r4
 80012ee:	d027      	beq.n	8001340 <__gedf2+0x9c>
 80012f0:	2d00      	cmp	r5, #0
 80012f2:	d115      	bne.n	8001320 <__gedf2+0x7c>
 80012f4:	4281      	cmp	r1, r0
 80012f6:	d028      	beq.n	800134a <__gedf2+0xa6>
 80012f8:	2002      	movs	r0, #2
 80012fa:	3901      	subs	r1, #1
 80012fc:	4008      	ands	r0, r1
 80012fe:	3801      	subs	r0, #1
 8001300:	bcf0      	pop	{r4, r5, r6, r7}
 8001302:	46bb      	mov	fp, r7
 8001304:	46b2      	mov	sl, r6
 8001306:	46a9      	mov	r9, r5
 8001308:	46a0      	mov	r8, r4
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	464d      	mov	r5, r9
 800130e:	432e      	orrs	r6, r5
 8001310:	d12f      	bne.n	8001372 <__gedf2+0xce>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d1ee      	bne.n	80012f4 <__gedf2+0x50>
 8001316:	433c      	orrs	r4, r7
 8001318:	4265      	negs	r5, r4
 800131a:	4165      	adcs	r5, r4
 800131c:	2d00      	cmp	r5, #0
 800131e:	d0e9      	beq.n	80012f4 <__gedf2+0x50>
 8001320:	2800      	cmp	r0, #0
 8001322:	d1ed      	bne.n	8001300 <__gedf2+0x5c>
 8001324:	2001      	movs	r0, #1
 8001326:	4240      	negs	r0, r0
 8001328:	e7ea      	b.n	8001300 <__gedf2+0x5c>
 800132a:	003d      	movs	r5, r7
 800132c:	4325      	orrs	r5, r4
 800132e:	d120      	bne.n	8001372 <__gedf2+0xce>
 8001330:	4293      	cmp	r3, r2
 8001332:	d0eb      	beq.n	800130c <__gedf2+0x68>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1dd      	bne.n	80012f4 <__gedf2+0x50>
 8001338:	464c      	mov	r4, r9
 800133a:	4326      	orrs	r6, r4
 800133c:	d1da      	bne.n	80012f4 <__gedf2+0x50>
 800133e:	e7db      	b.n	80012f8 <__gedf2+0x54>
 8001340:	465b      	mov	r3, fp
 8001342:	2000      	movs	r0, #0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0db      	beq.n	8001300 <__gedf2+0x5c>
 8001348:	e7d6      	b.n	80012f8 <__gedf2+0x54>
 800134a:	429a      	cmp	r2, r3
 800134c:	dc0a      	bgt.n	8001364 <__gedf2+0xc0>
 800134e:	dbe7      	blt.n	8001320 <__gedf2+0x7c>
 8001350:	454f      	cmp	r7, r9
 8001352:	d8d1      	bhi.n	80012f8 <__gedf2+0x54>
 8001354:	d010      	beq.n	8001378 <__gedf2+0xd4>
 8001356:	2000      	movs	r0, #0
 8001358:	454f      	cmp	r7, r9
 800135a:	d2d1      	bcs.n	8001300 <__gedf2+0x5c>
 800135c:	2900      	cmp	r1, #0
 800135e:	d0e1      	beq.n	8001324 <__gedf2+0x80>
 8001360:	0008      	movs	r0, r1
 8001362:	e7cd      	b.n	8001300 <__gedf2+0x5c>
 8001364:	4243      	negs	r3, r0
 8001366:	4158      	adcs	r0, r3
 8001368:	2302      	movs	r3, #2
 800136a:	4240      	negs	r0, r0
 800136c:	4018      	ands	r0, r3
 800136e:	3801      	subs	r0, #1
 8001370:	e7c6      	b.n	8001300 <__gedf2+0x5c>
 8001372:	2002      	movs	r0, #2
 8001374:	4240      	negs	r0, r0
 8001376:	e7c3      	b.n	8001300 <__gedf2+0x5c>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8bd      	bhi.n	80012f8 <__gedf2+0x54>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2be      	bcs.n	8001300 <__gedf2+0x5c>
 8001382:	e7eb      	b.n	800135c <__gedf2+0xb8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__ledf2>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	464e      	mov	r6, r9
 800138c:	4645      	mov	r5, r8
 800138e:	4657      	mov	r7, sl
 8001390:	46de      	mov	lr, fp
 8001392:	0004      	movs	r4, r0
 8001394:	0018      	movs	r0, r3
 8001396:	b5e0      	push	{r5, r6, r7, lr}
 8001398:	0016      	movs	r6, r2
 800139a:	031b      	lsls	r3, r3, #12
 800139c:	0b1b      	lsrs	r3, r3, #12
 800139e:	4d31      	ldr	r5, [pc, #196]	; (8001464 <__ledf2+0xdc>)
 80013a0:	030f      	lsls	r7, r1, #12
 80013a2:	004a      	lsls	r2, r1, #1
 80013a4:	4699      	mov	r9, r3
 80013a6:	0043      	lsls	r3, r0, #1
 80013a8:	46a4      	mov	ip, r4
 80013aa:	46b0      	mov	r8, r6
 80013ac:	0b3f      	lsrs	r7, r7, #12
 80013ae:	0d52      	lsrs	r2, r2, #21
 80013b0:	0fc9      	lsrs	r1, r1, #31
 80013b2:	0d5b      	lsrs	r3, r3, #21
 80013b4:	0fc0      	lsrs	r0, r0, #31
 80013b6:	42aa      	cmp	r2, r5
 80013b8:	d011      	beq.n	80013de <__ledf2+0x56>
 80013ba:	42ab      	cmp	r3, r5
 80013bc:	d014      	beq.n	80013e8 <__ledf2+0x60>
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d12f      	bne.n	8001422 <__ledf2+0x9a>
 80013c2:	433c      	orrs	r4, r7
 80013c4:	46a3      	mov	fp, r4
 80013c6:	4265      	negs	r5, r4
 80013c8:	4165      	adcs	r5, r4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d114      	bne.n	80013f8 <__ledf2+0x70>
 80013ce:	464c      	mov	r4, r9
 80013d0:	4326      	orrs	r6, r4
 80013d2:	d111      	bne.n	80013f8 <__ledf2+0x70>
 80013d4:	465b      	mov	r3, fp
 80013d6:	2000      	movs	r0, #0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d017      	beq.n	800140c <__ledf2+0x84>
 80013dc:	e010      	b.n	8001400 <__ledf2+0x78>
 80013de:	003d      	movs	r5, r7
 80013e0:	4325      	orrs	r5, r4
 80013e2:	d112      	bne.n	800140a <__ledf2+0x82>
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d11c      	bne.n	8001422 <__ledf2+0x9a>
 80013e8:	464d      	mov	r5, r9
 80013ea:	432e      	orrs	r6, r5
 80013ec:	d10d      	bne.n	800140a <__ledf2+0x82>
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d104      	bne.n	80013fc <__ledf2+0x74>
 80013f2:	433c      	orrs	r4, r7
 80013f4:	4265      	negs	r5, r4
 80013f6:	4165      	adcs	r5, r4
 80013f8:	2d00      	cmp	r5, #0
 80013fa:	d10d      	bne.n	8001418 <__ledf2+0x90>
 80013fc:	4281      	cmp	r1, r0
 80013fe:	d016      	beq.n	800142e <__ledf2+0xa6>
 8001400:	2002      	movs	r0, #2
 8001402:	3901      	subs	r1, #1
 8001404:	4008      	ands	r0, r1
 8001406:	3801      	subs	r0, #1
 8001408:	e000      	b.n	800140c <__ledf2+0x84>
 800140a:	2002      	movs	r0, #2
 800140c:	bcf0      	pop	{r4, r5, r6, r7}
 800140e:	46bb      	mov	fp, r7
 8001410:	46b2      	mov	sl, r6
 8001412:	46a9      	mov	r9, r5
 8001414:	46a0      	mov	r8, r4
 8001416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001418:	2800      	cmp	r0, #0
 800141a:	d1f7      	bne.n	800140c <__ledf2+0x84>
 800141c:	2001      	movs	r0, #1
 800141e:	4240      	negs	r0, r0
 8001420:	e7f4      	b.n	800140c <__ledf2+0x84>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ea      	bne.n	80013fc <__ledf2+0x74>
 8001426:	464c      	mov	r4, r9
 8001428:	4326      	orrs	r6, r4
 800142a:	d1e7      	bne.n	80013fc <__ledf2+0x74>
 800142c:	e7e8      	b.n	8001400 <__ledf2+0x78>
 800142e:	429a      	cmp	r2, r3
 8001430:	dd06      	ble.n	8001440 <__ledf2+0xb8>
 8001432:	4243      	negs	r3, r0
 8001434:	4158      	adcs	r0, r3
 8001436:	2302      	movs	r3, #2
 8001438:	4240      	negs	r0, r0
 800143a:	4018      	ands	r0, r3
 800143c:	3801      	subs	r0, #1
 800143e:	e7e5      	b.n	800140c <__ledf2+0x84>
 8001440:	429a      	cmp	r2, r3
 8001442:	dbe9      	blt.n	8001418 <__ledf2+0x90>
 8001444:	454f      	cmp	r7, r9
 8001446:	d8db      	bhi.n	8001400 <__ledf2+0x78>
 8001448:	d006      	beq.n	8001458 <__ledf2+0xd0>
 800144a:	2000      	movs	r0, #0
 800144c:	454f      	cmp	r7, r9
 800144e:	d2dd      	bcs.n	800140c <__ledf2+0x84>
 8001450:	2900      	cmp	r1, #0
 8001452:	d0e3      	beq.n	800141c <__ledf2+0x94>
 8001454:	0008      	movs	r0, r1
 8001456:	e7d9      	b.n	800140c <__ledf2+0x84>
 8001458:	45c4      	cmp	ip, r8
 800145a:	d8d1      	bhi.n	8001400 <__ledf2+0x78>
 800145c:	2000      	movs	r0, #0
 800145e:	45c4      	cmp	ip, r8
 8001460:	d2d4      	bcs.n	800140c <__ledf2+0x84>
 8001462:	e7f5      	b.n	8001450 <__ledf2+0xc8>
 8001464:	000007ff 	.word	0x000007ff

08001468 <__aeabi_dmul>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4657      	mov	r7, sl
 800146c:	464e      	mov	r6, r9
 800146e:	4645      	mov	r5, r8
 8001470:	46de      	mov	lr, fp
 8001472:	b5e0      	push	{r5, r6, r7, lr}
 8001474:	4698      	mov	r8, r3
 8001476:	030c      	lsls	r4, r1, #12
 8001478:	004b      	lsls	r3, r1, #1
 800147a:	0006      	movs	r6, r0
 800147c:	4692      	mov	sl, r2
 800147e:	b087      	sub	sp, #28
 8001480:	0b24      	lsrs	r4, r4, #12
 8001482:	0d5b      	lsrs	r3, r3, #21
 8001484:	0fcf      	lsrs	r7, r1, #31
 8001486:	2b00      	cmp	r3, #0
 8001488:	d06c      	beq.n	8001564 <__aeabi_dmul+0xfc>
 800148a:	4add      	ldr	r2, [pc, #884]	; (8001800 <__aeabi_dmul+0x398>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x2a>
 8001490:	e086      	b.n	80015a0 <__aeabi_dmul+0x138>
 8001492:	0f42      	lsrs	r2, r0, #29
 8001494:	00e4      	lsls	r4, r4, #3
 8001496:	4314      	orrs	r4, r2
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	4314      	orrs	r4, r2
 800149e:	4ad9      	ldr	r2, [pc, #868]	; (8001804 <__aeabi_dmul+0x39c>)
 80014a0:	00c5      	lsls	r5, r0, #3
 80014a2:	4694      	mov	ip, r2
 80014a4:	4463      	add	r3, ip
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2300      	movs	r3, #0
 80014aa:	4699      	mov	r9, r3
 80014ac:	469b      	mov	fp, r3
 80014ae:	4643      	mov	r3, r8
 80014b0:	4642      	mov	r2, r8
 80014b2:	031e      	lsls	r6, r3, #12
 80014b4:	0fd2      	lsrs	r2, r2, #31
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4650      	mov	r0, sl
 80014ba:	4690      	mov	r8, r2
 80014bc:	0b36      	lsrs	r6, r6, #12
 80014be:	0d5b      	lsrs	r3, r3, #21
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dmul+0x5c>
 80014c2:	e078      	b.n	80015b6 <__aeabi_dmul+0x14e>
 80014c4:	4ace      	ldr	r2, [pc, #824]	; (8001800 <__aeabi_dmul+0x398>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01d      	beq.n	8001506 <__aeabi_dmul+0x9e>
 80014ca:	49ce      	ldr	r1, [pc, #824]	; (8001804 <__aeabi_dmul+0x39c>)
 80014cc:	0f42      	lsrs	r2, r0, #29
 80014ce:	468c      	mov	ip, r1
 80014d0:	9900      	ldr	r1, [sp, #0]
 80014d2:	4463      	add	r3, ip
 80014d4:	00f6      	lsls	r6, r6, #3
 80014d6:	468c      	mov	ip, r1
 80014d8:	4316      	orrs	r6, r2
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	449c      	add	ip, r3
 80014de:	0412      	lsls	r2, r2, #16
 80014e0:	4663      	mov	r3, ip
 80014e2:	4316      	orrs	r6, r2
 80014e4:	00c2      	lsls	r2, r0, #3
 80014e6:	2000      	movs	r0, #0
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	9900      	ldr	r1, [sp, #0]
 80014ec:	4643      	mov	r3, r8
 80014ee:	3101      	adds	r1, #1
 80014f0:	468c      	mov	ip, r1
 80014f2:	4649      	mov	r1, r9
 80014f4:	407b      	eors	r3, r7
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	290f      	cmp	r1, #15
 80014fa:	d900      	bls.n	80014fe <__aeabi_dmul+0x96>
 80014fc:	e07e      	b.n	80015fc <__aeabi_dmul+0x194>
 80014fe:	4bc2      	ldr	r3, [pc, #776]	; (8001808 <__aeabi_dmul+0x3a0>)
 8001500:	0089      	lsls	r1, r1, #2
 8001502:	5859      	ldr	r1, [r3, r1]
 8001504:	468f      	mov	pc, r1
 8001506:	4652      	mov	r2, sl
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	4332      	orrs	r2, r6
 800150c:	d000      	beq.n	8001510 <__aeabi_dmul+0xa8>
 800150e:	e156      	b.n	80017be <__aeabi_dmul+0x356>
 8001510:	49bb      	ldr	r1, [pc, #748]	; (8001800 <__aeabi_dmul+0x398>)
 8001512:	2600      	movs	r6, #0
 8001514:	468c      	mov	ip, r1
 8001516:	4463      	add	r3, ip
 8001518:	4649      	mov	r1, r9
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	4319      	orrs	r1, r3
 8001520:	4689      	mov	r9, r1
 8001522:	2002      	movs	r0, #2
 8001524:	e7e1      	b.n	80014ea <__aeabi_dmul+0x82>
 8001526:	4643      	mov	r3, r8
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	0034      	movs	r4, r6
 800152c:	0015      	movs	r5, r2
 800152e:	4683      	mov	fp, r0
 8001530:	465b      	mov	r3, fp
 8001532:	2b02      	cmp	r3, #2
 8001534:	d05e      	beq.n	80015f4 <__aeabi_dmul+0x18c>
 8001536:	2b03      	cmp	r3, #3
 8001538:	d100      	bne.n	800153c <__aeabi_dmul+0xd4>
 800153a:	e1f3      	b.n	8001924 <__aeabi_dmul+0x4bc>
 800153c:	2b01      	cmp	r3, #1
 800153e:	d000      	beq.n	8001542 <__aeabi_dmul+0xda>
 8001540:	e118      	b.n	8001774 <__aeabi_dmul+0x30c>
 8001542:	2200      	movs	r2, #0
 8001544:	2400      	movs	r4, #0
 8001546:	2500      	movs	r5, #0
 8001548:	9b01      	ldr	r3, [sp, #4]
 800154a:	0512      	lsls	r2, r2, #20
 800154c:	4322      	orrs	r2, r4
 800154e:	07db      	lsls	r3, r3, #31
 8001550:	431a      	orrs	r2, r3
 8001552:	0028      	movs	r0, r5
 8001554:	0011      	movs	r1, r2
 8001556:	b007      	add	sp, #28
 8001558:	bcf0      	pop	{r4, r5, r6, r7}
 800155a:	46bb      	mov	fp, r7
 800155c:	46b2      	mov	sl, r6
 800155e:	46a9      	mov	r9, r5
 8001560:	46a0      	mov	r8, r4
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	0025      	movs	r5, r4
 8001566:	4305      	orrs	r5, r0
 8001568:	d100      	bne.n	800156c <__aeabi_dmul+0x104>
 800156a:	e141      	b.n	80017f0 <__aeabi_dmul+0x388>
 800156c:	2c00      	cmp	r4, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_dmul+0x10a>
 8001570:	e1ad      	b.n	80018ce <__aeabi_dmul+0x466>
 8001572:	0020      	movs	r0, r4
 8001574:	f000 fea8 	bl	80022c8 <__clzsi2>
 8001578:	0001      	movs	r1, r0
 800157a:	0002      	movs	r2, r0
 800157c:	390b      	subs	r1, #11
 800157e:	231d      	movs	r3, #29
 8001580:	0010      	movs	r0, r2
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	0031      	movs	r1, r6
 8001586:	0035      	movs	r5, r6
 8001588:	3808      	subs	r0, #8
 800158a:	4084      	lsls	r4, r0
 800158c:	40d9      	lsrs	r1, r3
 800158e:	4085      	lsls	r5, r0
 8001590:	430c      	orrs	r4, r1
 8001592:	489e      	ldr	r0, [pc, #632]	; (800180c <__aeabi_dmul+0x3a4>)
 8001594:	1a83      	subs	r3, r0, r2
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	4699      	mov	r9, r3
 800159c:	469b      	mov	fp, r3
 800159e:	e786      	b.n	80014ae <__aeabi_dmul+0x46>
 80015a0:	0005      	movs	r5, r0
 80015a2:	4325      	orrs	r5, r4
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dmul+0x140>
 80015a6:	e11c      	b.n	80017e2 <__aeabi_dmul+0x37a>
 80015a8:	2208      	movs	r2, #8
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2302      	movs	r3, #2
 80015ae:	2400      	movs	r4, #0
 80015b0:	4691      	mov	r9, r2
 80015b2:	469b      	mov	fp, r3
 80015b4:	e77b      	b.n	80014ae <__aeabi_dmul+0x46>
 80015b6:	4652      	mov	r2, sl
 80015b8:	4332      	orrs	r2, r6
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x156>
 80015bc:	e10a      	b.n	80017d4 <__aeabi_dmul+0x36c>
 80015be:	2e00      	cmp	r6, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dmul+0x15c>
 80015c2:	e176      	b.n	80018b2 <__aeabi_dmul+0x44a>
 80015c4:	0030      	movs	r0, r6
 80015c6:	f000 fe7f 	bl	80022c8 <__clzsi2>
 80015ca:	0002      	movs	r2, r0
 80015cc:	3a0b      	subs	r2, #11
 80015ce:	231d      	movs	r3, #29
 80015d0:	0001      	movs	r1, r0
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	4652      	mov	r2, sl
 80015d6:	3908      	subs	r1, #8
 80015d8:	40da      	lsrs	r2, r3
 80015da:	408e      	lsls	r6, r1
 80015dc:	4316      	orrs	r6, r2
 80015de:	4652      	mov	r2, sl
 80015e0:	408a      	lsls	r2, r1
 80015e2:	9b00      	ldr	r3, [sp, #0]
 80015e4:	4989      	ldr	r1, [pc, #548]	; (800180c <__aeabi_dmul+0x3a4>)
 80015e6:	1a18      	subs	r0, r3, r0
 80015e8:	0003      	movs	r3, r0
 80015ea:	468c      	mov	ip, r1
 80015ec:	4463      	add	r3, ip
 80015ee:	2000      	movs	r0, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	e77a      	b.n	80014ea <__aeabi_dmul+0x82>
 80015f4:	2400      	movs	r4, #0
 80015f6:	2500      	movs	r5, #0
 80015f8:	4a81      	ldr	r2, [pc, #516]	; (8001800 <__aeabi_dmul+0x398>)
 80015fa:	e7a5      	b.n	8001548 <__aeabi_dmul+0xe0>
 80015fc:	0c2f      	lsrs	r7, r5, #16
 80015fe:	042d      	lsls	r5, r5, #16
 8001600:	0c2d      	lsrs	r5, r5, #16
 8001602:	002b      	movs	r3, r5
 8001604:	0c11      	lsrs	r1, r2, #16
 8001606:	0412      	lsls	r2, r2, #16
 8001608:	0c12      	lsrs	r2, r2, #16
 800160a:	4353      	muls	r3, r2
 800160c:	4698      	mov	r8, r3
 800160e:	0013      	movs	r3, r2
 8001610:	0028      	movs	r0, r5
 8001612:	437b      	muls	r3, r7
 8001614:	4699      	mov	r9, r3
 8001616:	4348      	muls	r0, r1
 8001618:	4448      	add	r0, r9
 800161a:	4683      	mov	fp, r0
 800161c:	4640      	mov	r0, r8
 800161e:	000b      	movs	r3, r1
 8001620:	0c00      	lsrs	r0, r0, #16
 8001622:	4682      	mov	sl, r0
 8001624:	4658      	mov	r0, fp
 8001626:	437b      	muls	r3, r7
 8001628:	4450      	add	r0, sl
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	4581      	cmp	r9, r0
 800162e:	d906      	bls.n	800163e <__aeabi_dmul+0x1d6>
 8001630:	469a      	mov	sl, r3
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	4699      	mov	r9, r3
 8001638:	44ca      	add	sl, r9
 800163a:	4653      	mov	r3, sl
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	0c03      	lsrs	r3, r0, #16
 8001640:	469b      	mov	fp, r3
 8001642:	4643      	mov	r3, r8
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	0400      	lsls	r0, r0, #16
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	4698      	mov	r8, r3
 800164c:	0003      	movs	r3, r0
 800164e:	4443      	add	r3, r8
 8001650:	9304      	str	r3, [sp, #16]
 8001652:	0c33      	lsrs	r3, r6, #16
 8001654:	4699      	mov	r9, r3
 8001656:	002b      	movs	r3, r5
 8001658:	0436      	lsls	r6, r6, #16
 800165a:	0c36      	lsrs	r6, r6, #16
 800165c:	4373      	muls	r3, r6
 800165e:	4698      	mov	r8, r3
 8001660:	0033      	movs	r3, r6
 8001662:	437b      	muls	r3, r7
 8001664:	469a      	mov	sl, r3
 8001666:	464b      	mov	r3, r9
 8001668:	435d      	muls	r5, r3
 800166a:	435f      	muls	r7, r3
 800166c:	4643      	mov	r3, r8
 800166e:	4455      	add	r5, sl
 8001670:	0c18      	lsrs	r0, r3, #16
 8001672:	1940      	adds	r0, r0, r5
 8001674:	4582      	cmp	sl, r0
 8001676:	d903      	bls.n	8001680 <__aeabi_dmul+0x218>
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	469a      	mov	sl, r3
 800167e:	4457      	add	r7, sl
 8001680:	0c05      	lsrs	r5, r0, #16
 8001682:	19eb      	adds	r3, r5, r7
 8001684:	9305      	str	r3, [sp, #20]
 8001686:	4643      	mov	r3, r8
 8001688:	041d      	lsls	r5, r3, #16
 800168a:	0c2d      	lsrs	r5, r5, #16
 800168c:	0400      	lsls	r0, r0, #16
 800168e:	1940      	adds	r0, r0, r5
 8001690:	0c25      	lsrs	r5, r4, #16
 8001692:	0424      	lsls	r4, r4, #16
 8001694:	0c24      	lsrs	r4, r4, #16
 8001696:	0027      	movs	r7, r4
 8001698:	4357      	muls	r7, r2
 800169a:	436a      	muls	r2, r5
 800169c:	4690      	mov	r8, r2
 800169e:	002a      	movs	r2, r5
 80016a0:	0c3b      	lsrs	r3, r7, #16
 80016a2:	469a      	mov	sl, r3
 80016a4:	434a      	muls	r2, r1
 80016a6:	4361      	muls	r1, r4
 80016a8:	4441      	add	r1, r8
 80016aa:	4451      	add	r1, sl
 80016ac:	4483      	add	fp, r0
 80016ae:	4588      	cmp	r8, r1
 80016b0:	d903      	bls.n	80016ba <__aeabi_dmul+0x252>
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	4698      	mov	r8, r3
 80016b8:	4442      	add	r2, r8
 80016ba:	043f      	lsls	r7, r7, #16
 80016bc:	0c0b      	lsrs	r3, r1, #16
 80016be:	0c3f      	lsrs	r7, r7, #16
 80016c0:	0409      	lsls	r1, r1, #16
 80016c2:	19c9      	adds	r1, r1, r7
 80016c4:	0027      	movs	r7, r4
 80016c6:	4698      	mov	r8, r3
 80016c8:	464b      	mov	r3, r9
 80016ca:	4377      	muls	r7, r6
 80016cc:	435c      	muls	r4, r3
 80016ce:	436e      	muls	r6, r5
 80016d0:	435d      	muls	r5, r3
 80016d2:	0c3b      	lsrs	r3, r7, #16
 80016d4:	4699      	mov	r9, r3
 80016d6:	19a4      	adds	r4, r4, r6
 80016d8:	444c      	add	r4, r9
 80016da:	4442      	add	r2, r8
 80016dc:	9503      	str	r5, [sp, #12]
 80016de:	42a6      	cmp	r6, r4
 80016e0:	d904      	bls.n	80016ec <__aeabi_dmul+0x284>
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	4698      	mov	r8, r3
 80016e8:	4445      	add	r5, r8
 80016ea:	9503      	str	r5, [sp, #12]
 80016ec:	9b02      	ldr	r3, [sp, #8]
 80016ee:	043f      	lsls	r7, r7, #16
 80016f0:	445b      	add	r3, fp
 80016f2:	001e      	movs	r6, r3
 80016f4:	4283      	cmp	r3, r0
 80016f6:	4180      	sbcs	r0, r0
 80016f8:	0423      	lsls	r3, r4, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	9b05      	ldr	r3, [sp, #20]
 80016fe:	0c3f      	lsrs	r7, r7, #16
 8001700:	4447      	add	r7, r8
 8001702:	4698      	mov	r8, r3
 8001704:	1876      	adds	r6, r6, r1
 8001706:	428e      	cmp	r6, r1
 8001708:	4189      	sbcs	r1, r1
 800170a:	4447      	add	r7, r8
 800170c:	4240      	negs	r0, r0
 800170e:	183d      	adds	r5, r7, r0
 8001710:	46a8      	mov	r8, r5
 8001712:	4693      	mov	fp, r2
 8001714:	4249      	negs	r1, r1
 8001716:	468a      	mov	sl, r1
 8001718:	44c3      	add	fp, r8
 800171a:	429f      	cmp	r7, r3
 800171c:	41bf      	sbcs	r7, r7
 800171e:	4580      	cmp	r8, r0
 8001720:	4180      	sbcs	r0, r0
 8001722:	9b03      	ldr	r3, [sp, #12]
 8001724:	44da      	add	sl, fp
 8001726:	4698      	mov	r8, r3
 8001728:	4653      	mov	r3, sl
 800172a:	4240      	negs	r0, r0
 800172c:	427f      	negs	r7, r7
 800172e:	4307      	orrs	r7, r0
 8001730:	0c24      	lsrs	r4, r4, #16
 8001732:	4593      	cmp	fp, r2
 8001734:	4192      	sbcs	r2, r2
 8001736:	458a      	cmp	sl, r1
 8001738:	4189      	sbcs	r1, r1
 800173a:	193f      	adds	r7, r7, r4
 800173c:	0ddc      	lsrs	r4, r3, #23
 800173e:	9b04      	ldr	r3, [sp, #16]
 8001740:	0275      	lsls	r5, r6, #9
 8001742:	431d      	orrs	r5, r3
 8001744:	1e68      	subs	r0, r5, #1
 8001746:	4185      	sbcs	r5, r0
 8001748:	4653      	mov	r3, sl
 800174a:	4252      	negs	r2, r2
 800174c:	4249      	negs	r1, r1
 800174e:	430a      	orrs	r2, r1
 8001750:	18bf      	adds	r7, r7, r2
 8001752:	4447      	add	r7, r8
 8001754:	0df6      	lsrs	r6, r6, #23
 8001756:	027f      	lsls	r7, r7, #9
 8001758:	4335      	orrs	r5, r6
 800175a:	025a      	lsls	r2, r3, #9
 800175c:	433c      	orrs	r4, r7
 800175e:	4315      	orrs	r5, r2
 8001760:	01fb      	lsls	r3, r7, #7
 8001762:	d400      	bmi.n	8001766 <__aeabi_dmul+0x2fe>
 8001764:	e0c1      	b.n	80018ea <__aeabi_dmul+0x482>
 8001766:	2101      	movs	r1, #1
 8001768:	086a      	lsrs	r2, r5, #1
 800176a:	400d      	ands	r5, r1
 800176c:	4315      	orrs	r5, r2
 800176e:	07e2      	lsls	r2, r4, #31
 8001770:	4315      	orrs	r5, r2
 8001772:	0864      	lsrs	r4, r4, #1
 8001774:	4926      	ldr	r1, [pc, #152]	; (8001810 <__aeabi_dmul+0x3a8>)
 8001776:	4461      	add	r1, ip
 8001778:	2900      	cmp	r1, #0
 800177a:	dd56      	ble.n	800182a <__aeabi_dmul+0x3c2>
 800177c:	076b      	lsls	r3, r5, #29
 800177e:	d009      	beq.n	8001794 <__aeabi_dmul+0x32c>
 8001780:	220f      	movs	r2, #15
 8001782:	402a      	ands	r2, r5
 8001784:	2a04      	cmp	r2, #4
 8001786:	d005      	beq.n	8001794 <__aeabi_dmul+0x32c>
 8001788:	1d2a      	adds	r2, r5, #4
 800178a:	42aa      	cmp	r2, r5
 800178c:	41ad      	sbcs	r5, r5
 800178e:	426d      	negs	r5, r5
 8001790:	1964      	adds	r4, r4, r5
 8001792:	0015      	movs	r5, r2
 8001794:	01e3      	lsls	r3, r4, #7
 8001796:	d504      	bpl.n	80017a2 <__aeabi_dmul+0x33a>
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <__aeabi_dmul+0x3ac>)
 800179c:	00c9      	lsls	r1, r1, #3
 800179e:	4014      	ands	r4, r2
 80017a0:	4461      	add	r1, ip
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <__aeabi_dmul+0x3b0>)
 80017a4:	4291      	cmp	r1, r2
 80017a6:	dd00      	ble.n	80017aa <__aeabi_dmul+0x342>
 80017a8:	e724      	b.n	80015f4 <__aeabi_dmul+0x18c>
 80017aa:	0762      	lsls	r2, r4, #29
 80017ac:	08ed      	lsrs	r5, r5, #3
 80017ae:	0264      	lsls	r4, r4, #9
 80017b0:	0549      	lsls	r1, r1, #21
 80017b2:	4315      	orrs	r5, r2
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	0d4a      	lsrs	r2, r1, #21
 80017b8:	e6c6      	b.n	8001548 <__aeabi_dmul+0xe0>
 80017ba:	9701      	str	r7, [sp, #4]
 80017bc:	e6b8      	b.n	8001530 <__aeabi_dmul+0xc8>
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <__aeabi_dmul+0x398>)
 80017c0:	2003      	movs	r0, #3
 80017c2:	4694      	mov	ip, r2
 80017c4:	4463      	add	r3, ip
 80017c6:	464a      	mov	r2, r9
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2303      	movs	r3, #3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	4691      	mov	r9, r2
 80017d0:	4652      	mov	r2, sl
 80017d2:	e68a      	b.n	80014ea <__aeabi_dmul+0x82>
 80017d4:	4649      	mov	r1, r9
 80017d6:	2301      	movs	r3, #1
 80017d8:	4319      	orrs	r1, r3
 80017da:	4689      	mov	r9, r1
 80017dc:	2600      	movs	r6, #0
 80017de:	2001      	movs	r0, #1
 80017e0:	e683      	b.n	80014ea <__aeabi_dmul+0x82>
 80017e2:	220c      	movs	r2, #12
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2303      	movs	r3, #3
 80017e8:	0005      	movs	r5, r0
 80017ea:	4691      	mov	r9, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	e65e      	b.n	80014ae <__aeabi_dmul+0x46>
 80017f0:	2304      	movs	r3, #4
 80017f2:	4699      	mov	r9, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	2400      	movs	r4, #0
 80017fc:	469b      	mov	fp, r3
 80017fe:	e656      	b.n	80014ae <__aeabi_dmul+0x46>
 8001800:	000007ff 	.word	0x000007ff
 8001804:	fffffc01 	.word	0xfffffc01
 8001808:	0800db24 	.word	0x0800db24
 800180c:	fffffc0d 	.word	0xfffffc0d
 8001810:	000003ff 	.word	0x000003ff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	000007fe 	.word	0x000007fe
 800181c:	2300      	movs	r3, #0
 800181e:	2480      	movs	r4, #128	; 0x80
 8001820:	2500      	movs	r5, #0
 8001822:	4a44      	ldr	r2, [pc, #272]	; (8001934 <__aeabi_dmul+0x4cc>)
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	0324      	lsls	r4, r4, #12
 8001828:	e68e      	b.n	8001548 <__aeabi_dmul+0xe0>
 800182a:	2001      	movs	r0, #1
 800182c:	1a40      	subs	r0, r0, r1
 800182e:	2838      	cmp	r0, #56	; 0x38
 8001830:	dd00      	ble.n	8001834 <__aeabi_dmul+0x3cc>
 8001832:	e686      	b.n	8001542 <__aeabi_dmul+0xda>
 8001834:	281f      	cmp	r0, #31
 8001836:	dd5b      	ble.n	80018f0 <__aeabi_dmul+0x488>
 8001838:	221f      	movs	r2, #31
 800183a:	0023      	movs	r3, r4
 800183c:	4252      	negs	r2, r2
 800183e:	1a51      	subs	r1, r2, r1
 8001840:	40cb      	lsrs	r3, r1
 8001842:	0019      	movs	r1, r3
 8001844:	2820      	cmp	r0, #32
 8001846:	d003      	beq.n	8001850 <__aeabi_dmul+0x3e8>
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <__aeabi_dmul+0x4d0>)
 800184a:	4462      	add	r2, ip
 800184c:	4094      	lsls	r4, r2
 800184e:	4325      	orrs	r5, r4
 8001850:	1e6a      	subs	r2, r5, #1
 8001852:	4195      	sbcs	r5, r2
 8001854:	002a      	movs	r2, r5
 8001856:	430a      	orrs	r2, r1
 8001858:	2107      	movs	r1, #7
 800185a:	000d      	movs	r5, r1
 800185c:	2400      	movs	r4, #0
 800185e:	4015      	ands	r5, r2
 8001860:	4211      	tst	r1, r2
 8001862:	d05b      	beq.n	800191c <__aeabi_dmul+0x4b4>
 8001864:	210f      	movs	r1, #15
 8001866:	2400      	movs	r4, #0
 8001868:	4011      	ands	r1, r2
 800186a:	2904      	cmp	r1, #4
 800186c:	d053      	beq.n	8001916 <__aeabi_dmul+0x4ae>
 800186e:	1d11      	adds	r1, r2, #4
 8001870:	4291      	cmp	r1, r2
 8001872:	4192      	sbcs	r2, r2
 8001874:	4252      	negs	r2, r2
 8001876:	18a4      	adds	r4, r4, r2
 8001878:	000a      	movs	r2, r1
 800187a:	0223      	lsls	r3, r4, #8
 800187c:	d54b      	bpl.n	8001916 <__aeabi_dmul+0x4ae>
 800187e:	2201      	movs	r2, #1
 8001880:	2400      	movs	r4, #0
 8001882:	2500      	movs	r5, #0
 8001884:	e660      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	031b      	lsls	r3, r3, #12
 800188a:	421c      	tst	r4, r3
 800188c:	d009      	beq.n	80018a2 <__aeabi_dmul+0x43a>
 800188e:	421e      	tst	r6, r3
 8001890:	d107      	bne.n	80018a2 <__aeabi_dmul+0x43a>
 8001892:	4333      	orrs	r3, r6
 8001894:	031c      	lsls	r4, r3, #12
 8001896:	4643      	mov	r3, r8
 8001898:	0015      	movs	r5, r2
 800189a:	0b24      	lsrs	r4, r4, #12
 800189c:	4a25      	ldr	r2, [pc, #148]	; (8001934 <__aeabi_dmul+0x4cc>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	e652      	b.n	8001548 <__aeabi_dmul+0xe0>
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0312      	lsls	r2, r2, #12
 80018a6:	4314      	orrs	r4, r2
 80018a8:	0324      	lsls	r4, r4, #12
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <__aeabi_dmul+0x4cc>)
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	9701      	str	r7, [sp, #4]
 80018b0:	e64a      	b.n	8001548 <__aeabi_dmul+0xe0>
 80018b2:	f000 fd09 	bl	80022c8 <__clzsi2>
 80018b6:	0003      	movs	r3, r0
 80018b8:	001a      	movs	r2, r3
 80018ba:	3215      	adds	r2, #21
 80018bc:	3020      	adds	r0, #32
 80018be:	2a1c      	cmp	r2, #28
 80018c0:	dc00      	bgt.n	80018c4 <__aeabi_dmul+0x45c>
 80018c2:	e684      	b.n	80015ce <__aeabi_dmul+0x166>
 80018c4:	4656      	mov	r6, sl
 80018c6:	3b08      	subs	r3, #8
 80018c8:	2200      	movs	r2, #0
 80018ca:	409e      	lsls	r6, r3
 80018cc:	e689      	b.n	80015e2 <__aeabi_dmul+0x17a>
 80018ce:	f000 fcfb 	bl	80022c8 <__clzsi2>
 80018d2:	0001      	movs	r1, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	3115      	adds	r1, #21
 80018d8:	3220      	adds	r2, #32
 80018da:	291c      	cmp	r1, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x478>
 80018de:	e64e      	b.n	800157e <__aeabi_dmul+0x116>
 80018e0:	0034      	movs	r4, r6
 80018e2:	3808      	subs	r0, #8
 80018e4:	2500      	movs	r5, #0
 80018e6:	4084      	lsls	r4, r0
 80018e8:	e653      	b.n	8001592 <__aeabi_dmul+0x12a>
 80018ea:	9b00      	ldr	r3, [sp, #0]
 80018ec:	469c      	mov	ip, r3
 80018ee:	e741      	b.n	8001774 <__aeabi_dmul+0x30c>
 80018f0:	4912      	ldr	r1, [pc, #72]	; (800193c <__aeabi_dmul+0x4d4>)
 80018f2:	0022      	movs	r2, r4
 80018f4:	4461      	add	r1, ip
 80018f6:	002e      	movs	r6, r5
 80018f8:	408d      	lsls	r5, r1
 80018fa:	408a      	lsls	r2, r1
 80018fc:	40c6      	lsrs	r6, r0
 80018fe:	1e69      	subs	r1, r5, #1
 8001900:	418d      	sbcs	r5, r1
 8001902:	4332      	orrs	r2, r6
 8001904:	432a      	orrs	r2, r5
 8001906:	40c4      	lsrs	r4, r0
 8001908:	0753      	lsls	r3, r2, #29
 800190a:	d0b6      	beq.n	800187a <__aeabi_dmul+0x412>
 800190c:	210f      	movs	r1, #15
 800190e:	4011      	ands	r1, r2
 8001910:	2904      	cmp	r1, #4
 8001912:	d1ac      	bne.n	800186e <__aeabi_dmul+0x406>
 8001914:	e7b1      	b.n	800187a <__aeabi_dmul+0x412>
 8001916:	0765      	lsls	r5, r4, #29
 8001918:	0264      	lsls	r4, r4, #9
 800191a:	0b24      	lsrs	r4, r4, #12
 800191c:	08d2      	lsrs	r2, r2, #3
 800191e:	4315      	orrs	r5, r2
 8001920:	2200      	movs	r2, #0
 8001922:	e611      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	0312      	lsls	r2, r2, #12
 8001928:	4314      	orrs	r4, r2
 800192a:	0324      	lsls	r4, r4, #12
 800192c:	4a01      	ldr	r2, [pc, #4]	; (8001934 <__aeabi_dmul+0x4cc>)
 800192e:	0b24      	lsrs	r4, r4, #12
 8001930:	e60a      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	000007ff 	.word	0x000007ff
 8001938:	0000043e 	.word	0x0000043e
 800193c:	0000041e 	.word	0x0000041e

08001940 <__aeabi_dsub>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	4657      	mov	r7, sl
 8001944:	464e      	mov	r6, r9
 8001946:	4645      	mov	r5, r8
 8001948:	46de      	mov	lr, fp
 800194a:	0004      	movs	r4, r0
 800194c:	b5e0      	push	{r5, r6, r7, lr}
 800194e:	001f      	movs	r7, r3
 8001950:	0010      	movs	r0, r2
 8001952:	030b      	lsls	r3, r1, #12
 8001954:	0f62      	lsrs	r2, r4, #29
 8001956:	004e      	lsls	r6, r1, #1
 8001958:	0fcd      	lsrs	r5, r1, #31
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	0339      	lsls	r1, r7, #12
 800195e:	4313      	orrs	r3, r2
 8001960:	0a49      	lsrs	r1, r1, #9
 8001962:	00e2      	lsls	r2, r4, #3
 8001964:	0f44      	lsrs	r4, r0, #29
 8001966:	4321      	orrs	r1, r4
 8001968:	4cc2      	ldr	r4, [pc, #776]	; (8001c74 <__aeabi_dsub+0x334>)
 800196a:	4691      	mov	r9, r2
 800196c:	4692      	mov	sl, r2
 800196e:	00c0      	lsls	r0, r0, #3
 8001970:	007a      	lsls	r2, r7, #1
 8001972:	4680      	mov	r8, r0
 8001974:	0d76      	lsrs	r6, r6, #21
 8001976:	0d52      	lsrs	r2, r2, #21
 8001978:	0fff      	lsrs	r7, r7, #31
 800197a:	42a2      	cmp	r2, r4
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x40>
 800197e:	e0b4      	b.n	8001aea <__aeabi_dsub+0x1aa>
 8001980:	2401      	movs	r4, #1
 8001982:	4067      	eors	r7, r4
 8001984:	46bb      	mov	fp, r7
 8001986:	42bd      	cmp	r5, r7
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x4c>
 800198a:	e088      	b.n	8001a9e <__aeabi_dsub+0x15e>
 800198c:	1ab4      	subs	r4, r6, r2
 800198e:	46a4      	mov	ip, r4
 8001990:	2c00      	cmp	r4, #0
 8001992:	dc00      	bgt.n	8001996 <__aeabi_dsub+0x56>
 8001994:	e0b2      	b.n	8001afc <__aeabi_dsub+0x1bc>
 8001996:	2a00      	cmp	r2, #0
 8001998:	d100      	bne.n	800199c <__aeabi_dsub+0x5c>
 800199a:	e0c5      	b.n	8001b28 <__aeabi_dsub+0x1e8>
 800199c:	4ab5      	ldr	r2, [pc, #724]	; (8001c74 <__aeabi_dsub+0x334>)
 800199e:	4296      	cmp	r6, r2
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x64>
 80019a2:	e28b      	b.n	8001ebc <__aeabi_dsub+0x57c>
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	0412      	lsls	r2, r2, #16
 80019a8:	4311      	orrs	r1, r2
 80019aa:	4662      	mov	r2, ip
 80019ac:	2a38      	cmp	r2, #56	; 0x38
 80019ae:	dd00      	ble.n	80019b2 <__aeabi_dsub+0x72>
 80019b0:	e1a1      	b.n	8001cf6 <__aeabi_dsub+0x3b6>
 80019b2:	2a1f      	cmp	r2, #31
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0x78>
 80019b6:	e216      	b.n	8001de6 <__aeabi_dsub+0x4a6>
 80019b8:	2720      	movs	r7, #32
 80019ba:	000c      	movs	r4, r1
 80019bc:	1abf      	subs	r7, r7, r2
 80019be:	40bc      	lsls	r4, r7
 80019c0:	0002      	movs	r2, r0
 80019c2:	46a0      	mov	r8, r4
 80019c4:	4664      	mov	r4, ip
 80019c6:	40b8      	lsls	r0, r7
 80019c8:	40e2      	lsrs	r2, r4
 80019ca:	4644      	mov	r4, r8
 80019cc:	4314      	orrs	r4, r2
 80019ce:	0002      	movs	r2, r0
 80019d0:	1e50      	subs	r0, r2, #1
 80019d2:	4182      	sbcs	r2, r0
 80019d4:	4660      	mov	r0, ip
 80019d6:	40c1      	lsrs	r1, r0
 80019d8:	4322      	orrs	r2, r4
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	4649      	mov	r1, r9
 80019de:	1a8c      	subs	r4, r1, r2
 80019e0:	45a1      	cmp	r9, r4
 80019e2:	4192      	sbcs	r2, r2
 80019e4:	4252      	negs	r2, r2
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	4698      	mov	r8, r3
 80019ea:	4643      	mov	r3, r8
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	d400      	bmi.n	80019f2 <__aeabi_dsub+0xb2>
 80019f0:	e117      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 80019f2:	4643      	mov	r3, r8
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	0a5b      	lsrs	r3, r3, #9
 80019f8:	4698      	mov	r8, r3
 80019fa:	4643      	mov	r3, r8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0xc2>
 8001a00:	e16c      	b.n	8001cdc <__aeabi_dsub+0x39c>
 8001a02:	4640      	mov	r0, r8
 8001a04:	f000 fc60 	bl	80022c8 <__clzsi2>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	3a08      	subs	r2, #8
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	0020      	movs	r0, r4
 8001a10:	4643      	mov	r3, r8
 8001a12:	1a89      	subs	r1, r1, r2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	40c8      	lsrs	r0, r1
 8001a18:	4094      	lsls	r4, r2
 8001a1a:	4303      	orrs	r3, r0
 8001a1c:	4296      	cmp	r6, r2
 8001a1e:	dd00      	ble.n	8001a22 <__aeabi_dsub+0xe2>
 8001a20:	e157      	b.n	8001cd2 <__aeabi_dsub+0x392>
 8001a22:	1b96      	subs	r6, r2, r6
 8001a24:	1c71      	adds	r1, r6, #1
 8001a26:	291f      	cmp	r1, #31
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0xec>
 8001a2a:	e1cb      	b.n	8001dc4 <__aeabi_dsub+0x484>
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	0018      	movs	r0, r3
 8001a30:	0026      	movs	r6, r4
 8001a32:	1a52      	subs	r2, r2, r1
 8001a34:	4094      	lsls	r4, r2
 8001a36:	4090      	lsls	r0, r2
 8001a38:	40ce      	lsrs	r6, r1
 8001a3a:	40cb      	lsrs	r3, r1
 8001a3c:	1e62      	subs	r2, r4, #1
 8001a3e:	4194      	sbcs	r4, r2
 8001a40:	4330      	orrs	r0, r6
 8001a42:	4698      	mov	r8, r3
 8001a44:	2600      	movs	r6, #0
 8001a46:	4304      	orrs	r4, r0
 8001a48:	0763      	lsls	r3, r4, #29
 8001a4a:	d009      	beq.n	8001a60 <__aeabi_dsub+0x120>
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	4023      	ands	r3, r4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d005      	beq.n	8001a60 <__aeabi_dsub+0x120>
 8001a54:	1d23      	adds	r3, r4, #4
 8001a56:	42a3      	cmp	r3, r4
 8001a58:	41a4      	sbcs	r4, r4
 8001a5a:	4264      	negs	r4, r4
 8001a5c:	44a0      	add	r8, r4
 8001a5e:	001c      	movs	r4, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	d400      	bmi.n	8001a68 <__aeabi_dsub+0x128>
 8001a66:	e0df      	b.n	8001c28 <__aeabi_dsub+0x2e8>
 8001a68:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <__aeabi_dsub+0x334>)
 8001a6a:	3601      	adds	r6, #1
 8001a6c:	429e      	cmp	r6, r3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x132>
 8001a70:	e0fb      	b.n	8001c6a <__aeabi_dsub+0x32a>
 8001a72:	4642      	mov	r2, r8
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <__aeabi_dsub+0x338>)
 8001a76:	08e4      	lsrs	r4, r4, #3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	0571      	lsls	r1, r6, #21
 8001a7e:	0752      	lsls	r2, r2, #29
 8001a80:	025b      	lsls	r3, r3, #9
 8001a82:	4322      	orrs	r2, r4
 8001a84:	0b1b      	lsrs	r3, r3, #12
 8001a86:	0d49      	lsrs	r1, r1, #21
 8001a88:	0509      	lsls	r1, r1, #20
 8001a8a:	07ed      	lsls	r5, r5, #31
 8001a8c:	4319      	orrs	r1, r3
 8001a8e:	4329      	orrs	r1, r5
 8001a90:	0010      	movs	r0, r2
 8001a92:	bcf0      	pop	{r4, r5, r6, r7}
 8001a94:	46bb      	mov	fp, r7
 8001a96:	46b2      	mov	sl, r6
 8001a98:	46a9      	mov	r9, r5
 8001a9a:	46a0      	mov	r8, r4
 8001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9e:	1ab4      	subs	r4, r6, r2
 8001aa0:	46a4      	mov	ip, r4
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	dd58      	ble.n	8001b58 <__aeabi_dsub+0x218>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x16c>
 8001aaa:	e09e      	b.n	8001bea <__aeabi_dsub+0x2aa>
 8001aac:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <__aeabi_dsub+0x334>)
 8001aae:	4296      	cmp	r6, r2
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x174>
 8001ab2:	e13b      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	4662      	mov	r2, ip
 8001abc:	2a38      	cmp	r2, #56	; 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dsub+0x182>
 8001ac0:	e0c1      	b.n	8001c46 <__aeabi_dsub+0x306>
 8001ac2:	2a1f      	cmp	r2, #31
 8001ac4:	dc00      	bgt.n	8001ac8 <__aeabi_dsub+0x188>
 8001ac6:	e1bb      	b.n	8001e40 <__aeabi_dsub+0x500>
 8001ac8:	000c      	movs	r4, r1
 8001aca:	3a20      	subs	r2, #32
 8001acc:	40d4      	lsrs	r4, r2
 8001ace:	0022      	movs	r2, r4
 8001ad0:	4664      	mov	r4, ip
 8001ad2:	2c20      	cmp	r4, #32
 8001ad4:	d004      	beq.n	8001ae0 <__aeabi_dsub+0x1a0>
 8001ad6:	2740      	movs	r7, #64	; 0x40
 8001ad8:	1b3f      	subs	r7, r7, r4
 8001ada:	40b9      	lsls	r1, r7
 8001adc:	4308      	orrs	r0, r1
 8001ade:	4680      	mov	r8, r0
 8001ae0:	4644      	mov	r4, r8
 8001ae2:	1e61      	subs	r1, r4, #1
 8001ae4:	418c      	sbcs	r4, r1
 8001ae6:	4314      	orrs	r4, r2
 8001ae8:	e0b1      	b.n	8001c4e <__aeabi_dsub+0x30e>
 8001aea:	000c      	movs	r4, r1
 8001aec:	4304      	orrs	r4, r0
 8001aee:	d02a      	beq.n	8001b46 <__aeabi_dsub+0x206>
 8001af0:	46bb      	mov	fp, r7
 8001af2:	42bd      	cmp	r5, r7
 8001af4:	d02d      	beq.n	8001b52 <__aeabi_dsub+0x212>
 8001af6:	4c61      	ldr	r4, [pc, #388]	; (8001c7c <__aeabi_dsub+0x33c>)
 8001af8:	46a4      	mov	ip, r4
 8001afa:	44b4      	add	ip, r6
 8001afc:	4664      	mov	r4, ip
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d05c      	beq.n	8001bbc <__aeabi_dsub+0x27c>
 8001b02:	1b94      	subs	r4, r2, r6
 8001b04:	46a4      	mov	ip, r4
 8001b06:	2e00      	cmp	r6, #0
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dsub+0x1cc>
 8001b0a:	e115      	b.n	8001d38 <__aeabi_dsub+0x3f8>
 8001b0c:	464d      	mov	r5, r9
 8001b0e:	431d      	orrs	r5, r3
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x1d4>
 8001b12:	e1c3      	b.n	8001e9c <__aeabi_dsub+0x55c>
 8001b14:	1e65      	subs	r5, r4, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x1dc>
 8001b1a:	e20c      	b.n	8001f36 <__aeabi_dsub+0x5f6>
 8001b1c:	4e55      	ldr	r6, [pc, #340]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b1e:	42b4      	cmp	r4, r6
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x1e4>
 8001b22:	e1f8      	b.n	8001f16 <__aeabi_dsub+0x5d6>
 8001b24:	46ac      	mov	ip, r5
 8001b26:	e10e      	b.n	8001d46 <__aeabi_dsub+0x406>
 8001b28:	000a      	movs	r2, r1
 8001b2a:	4302      	orrs	r2, r0
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x1f0>
 8001b2e:	e136      	b.n	8001d9e <__aeabi_dsub+0x45e>
 8001b30:	0022      	movs	r2, r4
 8001b32:	3a01      	subs	r2, #1
 8001b34:	2c01      	cmp	r4, #1
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x1fa>
 8001b38:	e1c6      	b.n	8001ec8 <__aeabi_dsub+0x588>
 8001b3a:	4c4e      	ldr	r4, [pc, #312]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b3c:	45a4      	cmp	ip, r4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x202>
 8001b40:	e0f4      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001b42:	4694      	mov	ip, r2
 8001b44:	e731      	b.n	80019aa <__aeabi_dsub+0x6a>
 8001b46:	2401      	movs	r4, #1
 8001b48:	4067      	eors	r7, r4
 8001b4a:	46bb      	mov	fp, r7
 8001b4c:	42bd      	cmp	r5, r7
 8001b4e:	d000      	beq.n	8001b52 <__aeabi_dsub+0x212>
 8001b50:	e71c      	b.n	800198c <__aeabi_dsub+0x4c>
 8001b52:	4c4a      	ldr	r4, [pc, #296]	; (8001c7c <__aeabi_dsub+0x33c>)
 8001b54:	46a4      	mov	ip, r4
 8001b56:	44b4      	add	ip, r6
 8001b58:	4664      	mov	r4, ip
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x220>
 8001b5e:	e0cf      	b.n	8001d00 <__aeabi_dsub+0x3c0>
 8001b60:	1b94      	subs	r4, r2, r6
 8001b62:	46a4      	mov	ip, r4
 8001b64:	2e00      	cmp	r6, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x22a>
 8001b68:	e15c      	b.n	8001e24 <__aeabi_dsub+0x4e4>
 8001b6a:	4e42      	ldr	r6, [pc, #264]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b6c:	42b2      	cmp	r2, r6
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x232>
 8001b70:	e1ec      	b.n	8001f4c <__aeabi_dsub+0x60c>
 8001b72:	2680      	movs	r6, #128	; 0x80
 8001b74:	0436      	lsls	r6, r6, #16
 8001b76:	4333      	orrs	r3, r6
 8001b78:	4664      	mov	r4, ip
 8001b7a:	2c38      	cmp	r4, #56	; 0x38
 8001b7c:	dd00      	ble.n	8001b80 <__aeabi_dsub+0x240>
 8001b7e:	e1b3      	b.n	8001ee8 <__aeabi_dsub+0x5a8>
 8001b80:	2c1f      	cmp	r4, #31
 8001b82:	dd00      	ble.n	8001b86 <__aeabi_dsub+0x246>
 8001b84:	e238      	b.n	8001ff8 <__aeabi_dsub+0x6b8>
 8001b86:	2620      	movs	r6, #32
 8001b88:	1b36      	subs	r6, r6, r4
 8001b8a:	001c      	movs	r4, r3
 8001b8c:	40b4      	lsls	r4, r6
 8001b8e:	464f      	mov	r7, r9
 8001b90:	46a0      	mov	r8, r4
 8001b92:	4664      	mov	r4, ip
 8001b94:	40e7      	lsrs	r7, r4
 8001b96:	4644      	mov	r4, r8
 8001b98:	433c      	orrs	r4, r7
 8001b9a:	464f      	mov	r7, r9
 8001b9c:	40b7      	lsls	r7, r6
 8001b9e:	003e      	movs	r6, r7
 8001ba0:	1e77      	subs	r7, r6, #1
 8001ba2:	41be      	sbcs	r6, r7
 8001ba4:	4334      	orrs	r4, r6
 8001ba6:	4666      	mov	r6, ip
 8001ba8:	40f3      	lsrs	r3, r6
 8001baa:	18c9      	adds	r1, r1, r3
 8001bac:	1824      	adds	r4, r4, r0
 8001bae:	4284      	cmp	r4, r0
 8001bb0:	419b      	sbcs	r3, r3
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	0016      	movs	r6, r2
 8001bb8:	4488      	add	r8, r1
 8001bba:	e04e      	b.n	8001c5a <__aeabi_dsub+0x31a>
 8001bbc:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <__aeabi_dsub+0x340>)
 8001bbe:	1c74      	adds	r4, r6, #1
 8001bc0:	4214      	tst	r4, r2
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dsub+0x286>
 8001bc4:	e0d6      	b.n	8001d74 <__aeabi_dsub+0x434>
 8001bc6:	464a      	mov	r2, r9
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	2e00      	cmp	r6, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x290>
 8001bce:	e15b      	b.n	8001e88 <__aeabi_dsub+0x548>
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x296>
 8001bd4:	e1a5      	b.n	8001f22 <__aeabi_dsub+0x5e2>
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	d000      	beq.n	8001bde <__aeabi_dsub+0x29e>
 8001bdc:	e1bb      	b.n	8001f56 <__aeabi_dsub+0x616>
 8001bde:	464a      	mov	r2, r9
 8001be0:	0759      	lsls	r1, r3, #29
 8001be2:	08d2      	lsrs	r2, r2, #3
 8001be4:	430a      	orrs	r2, r1
 8001be6:	08db      	lsrs	r3, r3, #3
 8001be8:	e027      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001bea:	000a      	movs	r2, r1
 8001bec:	4302      	orrs	r2, r0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x2b2>
 8001bf0:	e174      	b.n	8001edc <__aeabi_dsub+0x59c>
 8001bf2:	0022      	movs	r2, r4
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	2c01      	cmp	r4, #1
 8001bf8:	d005      	beq.n	8001c06 <__aeabi_dsub+0x2c6>
 8001bfa:	4c1e      	ldr	r4, [pc, #120]	; (8001c74 <__aeabi_dsub+0x334>)
 8001bfc:	45a4      	cmp	ip, r4
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x2c2>
 8001c00:	e094      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001c02:	4694      	mov	ip, r2
 8001c04:	e759      	b.n	8001aba <__aeabi_dsub+0x17a>
 8001c06:	4448      	add	r0, r9
 8001c08:	4548      	cmp	r0, r9
 8001c0a:	4192      	sbcs	r2, r2
 8001c0c:	185b      	adds	r3, r3, r1
 8001c0e:	4698      	mov	r8, r3
 8001c10:	0004      	movs	r4, r0
 8001c12:	4252      	negs	r2, r2
 8001c14:	4490      	add	r8, r2
 8001c16:	4643      	mov	r3, r8
 8001c18:	2602      	movs	r6, #2
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	d500      	bpl.n	8001c20 <__aeabi_dsub+0x2e0>
 8001c1e:	e0c4      	b.n	8001daa <__aeabi_dsub+0x46a>
 8001c20:	3e01      	subs	r6, #1
 8001c22:	0763      	lsls	r3, r4, #29
 8001c24:	d000      	beq.n	8001c28 <__aeabi_dsub+0x2e8>
 8001c26:	e711      	b.n	8001a4c <__aeabi_dsub+0x10c>
 8001c28:	4643      	mov	r3, r8
 8001c2a:	46b4      	mov	ip, r6
 8001c2c:	0759      	lsls	r1, r3, #29
 8001c2e:	08e2      	lsrs	r2, r4, #3
 8001c30:	430a      	orrs	r2, r1
 8001c32:	08db      	lsrs	r3, r3, #3
 8001c34:	490f      	ldr	r1, [pc, #60]	; (8001c74 <__aeabi_dsub+0x334>)
 8001c36:	458c      	cmp	ip, r1
 8001c38:	d040      	beq.n	8001cbc <__aeabi_dsub+0x37c>
 8001c3a:	4661      	mov	r1, ip
 8001c3c:	031b      	lsls	r3, r3, #12
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	0b1b      	lsrs	r3, r3, #12
 8001c42:	0d49      	lsrs	r1, r1, #21
 8001c44:	e720      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001c46:	4301      	orrs	r1, r0
 8001c48:	000c      	movs	r4, r1
 8001c4a:	1e61      	subs	r1, r4, #1
 8001c4c:	418c      	sbcs	r4, r1
 8001c4e:	444c      	add	r4, r9
 8001c50:	454c      	cmp	r4, r9
 8001c52:	4192      	sbcs	r2, r2
 8001c54:	4252      	negs	r2, r2
 8001c56:	4690      	mov	r8, r2
 8001c58:	4498      	add	r8, r3
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	d5e0      	bpl.n	8001c22 <__aeabi_dsub+0x2e2>
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__aeabi_dsub+0x334>)
 8001c62:	3601      	adds	r6, #1
 8001c64:	429e      	cmp	r6, r3
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x32a>
 8001c68:	e09f      	b.n	8001daa <__aeabi_dsub+0x46a>
 8001c6a:	0031      	movs	r1, r6
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	e70a      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	000007ff 	.word	0x000007ff
 8001c78:	ff7fffff 	.word	0xff7fffff
 8001c7c:	fffff801 	.word	0xfffff801
 8001c80:	000007fe 	.word	0x000007fe
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x34a>
 8001c88:	e160      	b.n	8001f4c <__aeabi_dsub+0x60c>
 8001c8a:	000a      	movs	r2, r1
 8001c8c:	4302      	orrs	r2, r0
 8001c8e:	d04d      	beq.n	8001d2c <__aeabi_dsub+0x3ec>
 8001c90:	464a      	mov	r2, r9
 8001c92:	075c      	lsls	r4, r3, #29
 8001c94:	08d2      	lsrs	r2, r2, #3
 8001c96:	4322      	orrs	r2, r4
 8001c98:	2480      	movs	r4, #128	; 0x80
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	4223      	tst	r3, r4
 8001ca0:	d007      	beq.n	8001cb2 <__aeabi_dsub+0x372>
 8001ca2:	08ce      	lsrs	r6, r1, #3
 8001ca4:	4226      	tst	r6, r4
 8001ca6:	d104      	bne.n	8001cb2 <__aeabi_dsub+0x372>
 8001ca8:	465d      	mov	r5, fp
 8001caa:	0033      	movs	r3, r6
 8001cac:	08c2      	lsrs	r2, r0, #3
 8001cae:	0749      	lsls	r1, r1, #29
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	0f51      	lsrs	r1, r2, #29
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	08d2      	lsrs	r2, r2, #3
 8001cb8:	0749      	lsls	r1, r1, #29
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	4319      	orrs	r1, r3
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x384>
 8001cc2:	e1c8      	b.n	8002056 <__aeabi_dsub+0x716>
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0309      	lsls	r1, r1, #12
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	031b      	lsls	r3, r3, #12
 8001ccc:	49d5      	ldr	r1, [pc, #852]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001cce:	0b1b      	lsrs	r3, r3, #12
 8001cd0:	e6da      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001cd2:	49d5      	ldr	r1, [pc, #852]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001cd4:	1ab6      	subs	r6, r6, r2
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	4698      	mov	r8, r3
 8001cda:	e6b5      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001cdc:	0020      	movs	r0, r4
 8001cde:	f000 faf3 	bl	80022c8 <__clzsi2>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	3218      	adds	r2, #24
 8001ce6:	2a1f      	cmp	r2, #31
 8001ce8:	dc00      	bgt.n	8001cec <__aeabi_dsub+0x3ac>
 8001cea:	e68f      	b.n	8001a0c <__aeabi_dsub+0xcc>
 8001cec:	0023      	movs	r3, r4
 8001cee:	3808      	subs	r0, #8
 8001cf0:	4083      	lsls	r3, r0
 8001cf2:	2400      	movs	r4, #0
 8001cf4:	e692      	b.n	8001a1c <__aeabi_dsub+0xdc>
 8001cf6:	4308      	orrs	r0, r1
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	1e50      	subs	r0, r2, #1
 8001cfc:	4182      	sbcs	r2, r0
 8001cfe:	e66d      	b.n	80019dc <__aeabi_dsub+0x9c>
 8001d00:	4cca      	ldr	r4, [pc, #808]	; (800202c <__aeabi_dsub+0x6ec>)
 8001d02:	1c72      	adds	r2, r6, #1
 8001d04:	4222      	tst	r2, r4
 8001d06:	d000      	beq.n	8001d0a <__aeabi_dsub+0x3ca>
 8001d08:	e0ad      	b.n	8001e66 <__aeabi_dsub+0x526>
 8001d0a:	464a      	mov	r2, r9
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	2e00      	cmp	r6, #0
 8001d10:	d1b8      	bne.n	8001c84 <__aeabi_dsub+0x344>
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_dsub+0x3d8>
 8001d16:	e158      	b.n	8001fca <__aeabi_dsub+0x68a>
 8001d18:	000a      	movs	r2, r1
 8001d1a:	4302      	orrs	r2, r0
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dsub+0x3e0>
 8001d1e:	e159      	b.n	8001fd4 <__aeabi_dsub+0x694>
 8001d20:	464a      	mov	r2, r9
 8001d22:	0759      	lsls	r1, r3, #29
 8001d24:	08d2      	lsrs	r2, r2, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	e786      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001d2c:	464a      	mov	r2, r9
 8001d2e:	0759      	lsls	r1, r3, #29
 8001d30:	08d2      	lsrs	r2, r2, #3
 8001d32:	430a      	orrs	r2, r1
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	e7c1      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001d38:	4dba      	ldr	r5, [pc, #744]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001d3a:	42aa      	cmp	r2, r5
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x400>
 8001d3e:	e11e      	b.n	8001f7e <__aeabi_dsub+0x63e>
 8001d40:	2580      	movs	r5, #128	; 0x80
 8001d42:	042d      	lsls	r5, r5, #16
 8001d44:	432b      	orrs	r3, r5
 8001d46:	4664      	mov	r4, ip
 8001d48:	2c38      	cmp	r4, #56	; 0x38
 8001d4a:	dc5d      	bgt.n	8001e08 <__aeabi_dsub+0x4c8>
 8001d4c:	2c1f      	cmp	r4, #31
 8001d4e:	dd00      	ble.n	8001d52 <__aeabi_dsub+0x412>
 8001d50:	e0d0      	b.n	8001ef4 <__aeabi_dsub+0x5b4>
 8001d52:	2520      	movs	r5, #32
 8001d54:	4667      	mov	r7, ip
 8001d56:	1b2d      	subs	r5, r5, r4
 8001d58:	464e      	mov	r6, r9
 8001d5a:	001c      	movs	r4, r3
 8001d5c:	40fe      	lsrs	r6, r7
 8001d5e:	40ac      	lsls	r4, r5
 8001d60:	4334      	orrs	r4, r6
 8001d62:	464e      	mov	r6, r9
 8001d64:	40ae      	lsls	r6, r5
 8001d66:	0035      	movs	r5, r6
 8001d68:	40fb      	lsrs	r3, r7
 8001d6a:	1e6e      	subs	r6, r5, #1
 8001d6c:	41b5      	sbcs	r5, r6
 8001d6e:	1ac9      	subs	r1, r1, r3
 8001d70:	432c      	orrs	r4, r5
 8001d72:	e04e      	b.n	8001e12 <__aeabi_dsub+0x4d2>
 8001d74:	464a      	mov	r2, r9
 8001d76:	1a14      	subs	r4, r2, r0
 8001d78:	45a1      	cmp	r9, r4
 8001d7a:	4192      	sbcs	r2, r2
 8001d7c:	4252      	negs	r2, r2
 8001d7e:	4690      	mov	r8, r2
 8001d80:	1a5f      	subs	r7, r3, r1
 8001d82:	003a      	movs	r2, r7
 8001d84:	4647      	mov	r7, r8
 8001d86:	1bd2      	subs	r2, r2, r7
 8001d88:	4690      	mov	r8, r2
 8001d8a:	0212      	lsls	r2, r2, #8
 8001d8c:	d500      	bpl.n	8001d90 <__aeabi_dsub+0x450>
 8001d8e:	e08b      	b.n	8001ea8 <__aeabi_dsub+0x568>
 8001d90:	4642      	mov	r2, r8
 8001d92:	4322      	orrs	r2, r4
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x458>
 8001d96:	e630      	b.n	80019fa <__aeabi_dsub+0xba>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2500      	movs	r5, #0
 8001d9c:	e74d      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001d9e:	464a      	mov	r2, r9
 8001da0:	0759      	lsls	r1, r3, #29
 8001da2:	08d2      	lsrs	r2, r2, #3
 8001da4:	430a      	orrs	r2, r1
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	e744      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001daa:	4642      	mov	r2, r8
 8001dac:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001dae:	0861      	lsrs	r1, r4, #1
 8001db0:	401a      	ands	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	2201      	movs	r2, #1
 8001db6:	4014      	ands	r4, r2
 8001db8:	430c      	orrs	r4, r1
 8001dba:	07da      	lsls	r2, r3, #31
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	4314      	orrs	r4, r2
 8001dc2:	e641      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	3e1f      	subs	r6, #31
 8001dc8:	40f2      	lsrs	r2, r6
 8001dca:	0016      	movs	r6, r2
 8001dcc:	2920      	cmp	r1, #32
 8001dce:	d003      	beq.n	8001dd8 <__aeabi_dsub+0x498>
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	1a51      	subs	r1, r2, r1
 8001dd4:	408b      	lsls	r3, r1
 8001dd6:	431c      	orrs	r4, r3
 8001dd8:	1e62      	subs	r2, r4, #1
 8001dda:	4194      	sbcs	r4, r2
 8001ddc:	2300      	movs	r3, #0
 8001dde:	4334      	orrs	r4, r6
 8001de0:	4698      	mov	r8, r3
 8001de2:	2600      	movs	r6, #0
 8001de4:	e71d      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001de6:	000c      	movs	r4, r1
 8001de8:	3a20      	subs	r2, #32
 8001dea:	40d4      	lsrs	r4, r2
 8001dec:	0022      	movs	r2, r4
 8001dee:	4664      	mov	r4, ip
 8001df0:	2c20      	cmp	r4, #32
 8001df2:	d004      	beq.n	8001dfe <__aeabi_dsub+0x4be>
 8001df4:	2740      	movs	r7, #64	; 0x40
 8001df6:	1b3f      	subs	r7, r7, r4
 8001df8:	40b9      	lsls	r1, r7
 8001dfa:	4308      	orrs	r0, r1
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	4644      	mov	r4, r8
 8001e00:	1e61      	subs	r1, r4, #1
 8001e02:	418c      	sbcs	r4, r1
 8001e04:	4322      	orrs	r2, r4
 8001e06:	e5e9      	b.n	80019dc <__aeabi_dsub+0x9c>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	1b04      	subs	r4, r0, r4
 8001e14:	42a0      	cmp	r0, r4
 8001e16:	419b      	sbcs	r3, r3
 8001e18:	425b      	negs	r3, r3
 8001e1a:	1acb      	subs	r3, r1, r3
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	465d      	mov	r5, fp
 8001e20:	0016      	movs	r6, r2
 8001e22:	e5e2      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001e24:	464e      	mov	r6, r9
 8001e26:	431e      	orrs	r6, r3
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x4ec>
 8001e2a:	e0ae      	b.n	8001f8a <__aeabi_dsub+0x64a>
 8001e2c:	1e66      	subs	r6, r4, #1
 8001e2e:	2c01      	cmp	r4, #1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x4f4>
 8001e32:	e0fd      	b.n	8002030 <__aeabi_dsub+0x6f0>
 8001e34:	4f7b      	ldr	r7, [pc, #492]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001e36:	42bc      	cmp	r4, r7
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x4fc>
 8001e3a:	e107      	b.n	800204c <__aeabi_dsub+0x70c>
 8001e3c:	46b4      	mov	ip, r6
 8001e3e:	e69b      	b.n	8001b78 <__aeabi_dsub+0x238>
 8001e40:	4664      	mov	r4, ip
 8001e42:	2220      	movs	r2, #32
 8001e44:	1b12      	subs	r2, r2, r4
 8001e46:	000c      	movs	r4, r1
 8001e48:	4094      	lsls	r4, r2
 8001e4a:	0007      	movs	r7, r0
 8001e4c:	4090      	lsls	r0, r2
 8001e4e:	46a0      	mov	r8, r4
 8001e50:	4664      	mov	r4, ip
 8001e52:	1e42      	subs	r2, r0, #1
 8001e54:	4190      	sbcs	r0, r2
 8001e56:	4662      	mov	r2, ip
 8001e58:	40e7      	lsrs	r7, r4
 8001e5a:	4644      	mov	r4, r8
 8001e5c:	40d1      	lsrs	r1, r2
 8001e5e:	433c      	orrs	r4, r7
 8001e60:	4304      	orrs	r4, r0
 8001e62:	185b      	adds	r3, r3, r1
 8001e64:	e6f3      	b.n	8001c4e <__aeabi_dsub+0x30e>
 8001e66:	4c6f      	ldr	r4, [pc, #444]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001e68:	42a2      	cmp	r2, r4
 8001e6a:	d100      	bne.n	8001e6e <__aeabi_dsub+0x52e>
 8001e6c:	e0d5      	b.n	800201a <__aeabi_dsub+0x6da>
 8001e6e:	4448      	add	r0, r9
 8001e70:	185b      	adds	r3, r3, r1
 8001e72:	4548      	cmp	r0, r9
 8001e74:	4189      	sbcs	r1, r1
 8001e76:	4249      	negs	r1, r1
 8001e78:	185b      	adds	r3, r3, r1
 8001e7a:	07dc      	lsls	r4, r3, #31
 8001e7c:	0840      	lsrs	r0, r0, #1
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	4698      	mov	r8, r3
 8001e82:	0016      	movs	r6, r2
 8001e84:	4304      	orrs	r4, r0
 8001e86:	e6cc      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d000      	beq.n	8001e8e <__aeabi_dsub+0x54e>
 8001e8c:	e082      	b.n	8001f94 <__aeabi_dsub+0x654>
 8001e8e:	000a      	movs	r2, r1
 8001e90:	4302      	orrs	r2, r0
 8001e92:	d140      	bne.n	8001f16 <__aeabi_dsub+0x5d6>
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	2500      	movs	r5, #0
 8001e98:	031b      	lsls	r3, r3, #12
 8001e9a:	e713      	b.n	8001cc4 <__aeabi_dsub+0x384>
 8001e9c:	074b      	lsls	r3, r1, #29
 8001e9e:	08c2      	lsrs	r2, r0, #3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	465d      	mov	r5, fp
 8001ea4:	08cb      	lsrs	r3, r1, #3
 8001ea6:	e6c5      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001ea8:	464a      	mov	r2, r9
 8001eaa:	1a84      	subs	r4, r0, r2
 8001eac:	42a0      	cmp	r0, r4
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	1acb      	subs	r3, r1, r3
 8001eb2:	4252      	negs	r2, r2
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	465d      	mov	r5, fp
 8001eba:	e59e      	b.n	80019fa <__aeabi_dsub+0xba>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	0759      	lsls	r1, r3, #29
 8001ec0:	08d2      	lsrs	r2, r2, #3
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	e6f9      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001ec8:	464a      	mov	r2, r9
 8001eca:	1a14      	subs	r4, r2, r0
 8001ecc:	45a1      	cmp	r9, r4
 8001ece:	4192      	sbcs	r2, r2
 8001ed0:	1a5b      	subs	r3, r3, r1
 8001ed2:	4252      	negs	r2, r2
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	4698      	mov	r8, r3
 8001ed8:	2601      	movs	r6, #1
 8001eda:	e586      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001edc:	464a      	mov	r2, r9
 8001ede:	0759      	lsls	r1, r3, #29
 8001ee0:	08d2      	lsrs	r2, r2, #3
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	e6a5      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001ee8:	464c      	mov	r4, r9
 8001eea:	4323      	orrs	r3, r4
 8001eec:	001c      	movs	r4, r3
 8001eee:	1e63      	subs	r3, r4, #1
 8001ef0:	419c      	sbcs	r4, r3
 8001ef2:	e65b      	b.n	8001bac <__aeabi_dsub+0x26c>
 8001ef4:	4665      	mov	r5, ip
 8001ef6:	001e      	movs	r6, r3
 8001ef8:	3d20      	subs	r5, #32
 8001efa:	40ee      	lsrs	r6, r5
 8001efc:	2c20      	cmp	r4, #32
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x5cc>
 8001f00:	2540      	movs	r5, #64	; 0x40
 8001f02:	1b2d      	subs	r5, r5, r4
 8001f04:	40ab      	lsls	r3, r5
 8001f06:	464c      	mov	r4, r9
 8001f08:	431c      	orrs	r4, r3
 8001f0a:	46a2      	mov	sl, r4
 8001f0c:	4654      	mov	r4, sl
 8001f0e:	1e63      	subs	r3, r4, #1
 8001f10:	419c      	sbcs	r4, r3
 8001f12:	4334      	orrs	r4, r6
 8001f14:	e77d      	b.n	8001e12 <__aeabi_dsub+0x4d2>
 8001f16:	074b      	lsls	r3, r1, #29
 8001f18:	08c2      	lsrs	r2, r0, #3
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	465d      	mov	r5, fp
 8001f1e:	08cb      	lsrs	r3, r1, #3
 8001f20:	e6cc      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f22:	000a      	movs	r2, r1
 8001f24:	4302      	orrs	r2, r0
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x5ea>
 8001f28:	e736      	b.n	8001d98 <__aeabi_dsub+0x458>
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	08c2      	lsrs	r2, r0, #3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	465d      	mov	r5, fp
 8001f32:	08cb      	lsrs	r3, r1, #3
 8001f34:	e681      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001f36:	464a      	mov	r2, r9
 8001f38:	1a84      	subs	r4, r0, r2
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	4192      	sbcs	r2, r2
 8001f3e:	1acb      	subs	r3, r1, r3
 8001f40:	4252      	negs	r2, r2
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	4698      	mov	r8, r3
 8001f46:	465d      	mov	r5, fp
 8001f48:	2601      	movs	r6, #1
 8001f4a:	e54e      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001f4c:	074b      	lsls	r3, r1, #29
 8001f4e:	08c2      	lsrs	r2, r0, #3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	08cb      	lsrs	r3, r1, #3
 8001f54:	e6b2      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f56:	464a      	mov	r2, r9
 8001f58:	1a14      	subs	r4, r2, r0
 8001f5a:	45a1      	cmp	r9, r4
 8001f5c:	4192      	sbcs	r2, r2
 8001f5e:	1a5f      	subs	r7, r3, r1
 8001f60:	4252      	negs	r2, r2
 8001f62:	1aba      	subs	r2, r7, r2
 8001f64:	4690      	mov	r8, r2
 8001f66:	0212      	lsls	r2, r2, #8
 8001f68:	d56b      	bpl.n	8002042 <__aeabi_dsub+0x702>
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	1a84      	subs	r4, r0, r2
 8001f6e:	42a0      	cmp	r0, r4
 8001f70:	4192      	sbcs	r2, r2
 8001f72:	1acb      	subs	r3, r1, r3
 8001f74:	4252      	negs	r2, r2
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	4698      	mov	r8, r3
 8001f7a:	465d      	mov	r5, fp
 8001f7c:	e564      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001f7e:	074b      	lsls	r3, r1, #29
 8001f80:	08c2      	lsrs	r2, r0, #3
 8001f82:	431a      	orrs	r2, r3
 8001f84:	465d      	mov	r5, fp
 8001f86:	08cb      	lsrs	r3, r1, #3
 8001f88:	e698      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	08c2      	lsrs	r2, r0, #3
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	08cb      	lsrs	r3, r1, #3
 8001f92:	e64f      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001f94:	000a      	movs	r2, r1
 8001f96:	4302      	orrs	r2, r0
 8001f98:	d090      	beq.n	8001ebc <__aeabi_dsub+0x57c>
 8001f9a:	464a      	mov	r2, r9
 8001f9c:	075c      	lsls	r4, r3, #29
 8001f9e:	08d2      	lsrs	r2, r2, #3
 8001fa0:	4314      	orrs	r4, r2
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	0312      	lsls	r2, r2, #12
 8001fa8:	4213      	tst	r3, r2
 8001faa:	d008      	beq.n	8001fbe <__aeabi_dsub+0x67e>
 8001fac:	08ce      	lsrs	r6, r1, #3
 8001fae:	4216      	tst	r6, r2
 8001fb0:	d105      	bne.n	8001fbe <__aeabi_dsub+0x67e>
 8001fb2:	08c0      	lsrs	r0, r0, #3
 8001fb4:	0749      	lsls	r1, r1, #29
 8001fb6:	4308      	orrs	r0, r1
 8001fb8:	0004      	movs	r4, r0
 8001fba:	465d      	mov	r5, fp
 8001fbc:	0033      	movs	r3, r6
 8001fbe:	0f61      	lsrs	r1, r4, #29
 8001fc0:	00e2      	lsls	r2, r4, #3
 8001fc2:	0749      	lsls	r1, r1, #29
 8001fc4:	08d2      	lsrs	r2, r2, #3
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	e678      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001fca:	074b      	lsls	r3, r1, #29
 8001fcc:	08c2      	lsrs	r2, r0, #3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	08cb      	lsrs	r3, r1, #3
 8001fd2:	e632      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001fd4:	4448      	add	r0, r9
 8001fd6:	185b      	adds	r3, r3, r1
 8001fd8:	4548      	cmp	r0, r9
 8001fda:	4192      	sbcs	r2, r2
 8001fdc:	4698      	mov	r8, r3
 8001fde:	4252      	negs	r2, r2
 8001fe0:	4490      	add	r8, r2
 8001fe2:	4643      	mov	r3, r8
 8001fe4:	0004      	movs	r4, r0
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	d400      	bmi.n	8001fec <__aeabi_dsub+0x6ac>
 8001fea:	e61a      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001fec:	4642      	mov	r2, r8
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001ff0:	2601      	movs	r6, #1
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	4690      	mov	r8, r2
 8001ff6:	e614      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001ff8:	4666      	mov	r6, ip
 8001ffa:	001f      	movs	r7, r3
 8001ffc:	3e20      	subs	r6, #32
 8001ffe:	40f7      	lsrs	r7, r6
 8002000:	2c20      	cmp	r4, #32
 8002002:	d005      	beq.n	8002010 <__aeabi_dsub+0x6d0>
 8002004:	2640      	movs	r6, #64	; 0x40
 8002006:	1b36      	subs	r6, r6, r4
 8002008:	40b3      	lsls	r3, r6
 800200a:	464c      	mov	r4, r9
 800200c:	431c      	orrs	r4, r3
 800200e:	46a2      	mov	sl, r4
 8002010:	4654      	mov	r4, sl
 8002012:	1e63      	subs	r3, r4, #1
 8002014:	419c      	sbcs	r4, r3
 8002016:	433c      	orrs	r4, r7
 8002018:	e5c8      	b.n	8001bac <__aeabi_dsub+0x26c>
 800201a:	0011      	movs	r1, r2
 800201c:	2300      	movs	r3, #0
 800201e:	2200      	movs	r2, #0
 8002020:	e532      	b.n	8001a88 <__aeabi_dsub+0x148>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff
 8002028:	ff7fffff 	.word	0xff7fffff
 800202c:	000007fe 	.word	0x000007fe
 8002030:	464a      	mov	r2, r9
 8002032:	1814      	adds	r4, r2, r0
 8002034:	4284      	cmp	r4, r0
 8002036:	4192      	sbcs	r2, r2
 8002038:	185b      	adds	r3, r3, r1
 800203a:	4698      	mov	r8, r3
 800203c:	4252      	negs	r2, r2
 800203e:	4490      	add	r8, r2
 8002040:	e5e9      	b.n	8001c16 <__aeabi_dsub+0x2d6>
 8002042:	4642      	mov	r2, r8
 8002044:	4322      	orrs	r2, r4
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x70a>
 8002048:	e6a6      	b.n	8001d98 <__aeabi_dsub+0x458>
 800204a:	e5ea      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 800204c:	074b      	lsls	r3, r1, #29
 800204e:	08c2      	lsrs	r2, r0, #3
 8002050:	431a      	orrs	r2, r3
 8002052:	08cb      	lsrs	r3, r1, #3
 8002054:	e632      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8002056:	2200      	movs	r2, #0
 8002058:	4901      	ldr	r1, [pc, #4]	; (8002060 <__aeabi_dsub+0x720>)
 800205a:	0013      	movs	r3, r2
 800205c:	e514      	b.n	8001a88 <__aeabi_dsub+0x148>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	000007ff 	.word	0x000007ff

08002064 <__aeabi_dcmpun>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	0005      	movs	r5, r0
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <__aeabi_dcmpun+0x38>)
 800206a:	030c      	lsls	r4, r1, #12
 800206c:	0016      	movs	r6, r2
 800206e:	0049      	lsls	r1, r1, #1
 8002070:	031a      	lsls	r2, r3, #12
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	0d49      	lsrs	r1, r1, #21
 8002078:	0b12      	lsrs	r2, r2, #12
 800207a:	0d5b      	lsrs	r3, r3, #21
 800207c:	4281      	cmp	r1, r0
 800207e:	d008      	beq.n	8002092 <__aeabi_dcmpun+0x2e>
 8002080:	4906      	ldr	r1, [pc, #24]	; (800209c <__aeabi_dcmpun+0x38>)
 8002082:	2000      	movs	r0, #0
 8002084:	428b      	cmp	r3, r1
 8002086:	d103      	bne.n	8002090 <__aeabi_dcmpun+0x2c>
 8002088:	4332      	orrs	r2, r6
 800208a:	0010      	movs	r0, r2
 800208c:	1e42      	subs	r2, r0, #1
 800208e:	4190      	sbcs	r0, r2
 8002090:	bd70      	pop	{r4, r5, r6, pc}
 8002092:	2001      	movs	r0, #1
 8002094:	432c      	orrs	r4, r5
 8002096:	d1fb      	bne.n	8002090 <__aeabi_dcmpun+0x2c>
 8002098:	e7f2      	b.n	8002080 <__aeabi_dcmpun+0x1c>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__aeabi_d2iz>:
 80020a0:	000a      	movs	r2, r1
 80020a2:	b530      	push	{r4, r5, lr}
 80020a4:	4c13      	ldr	r4, [pc, #76]	; (80020f4 <__aeabi_d2iz+0x54>)
 80020a6:	0053      	lsls	r3, r2, #1
 80020a8:	0309      	lsls	r1, r1, #12
 80020aa:	0005      	movs	r5, r0
 80020ac:	0b09      	lsrs	r1, r1, #12
 80020ae:	2000      	movs	r0, #0
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	0fd2      	lsrs	r2, r2, #31
 80020b4:	42a3      	cmp	r3, r4
 80020b6:	dd04      	ble.n	80020c2 <__aeabi_d2iz+0x22>
 80020b8:	480f      	ldr	r0, [pc, #60]	; (80020f8 <__aeabi_d2iz+0x58>)
 80020ba:	4283      	cmp	r3, r0
 80020bc:	dd02      	ble.n	80020c4 <__aeabi_d2iz+0x24>
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <__aeabi_d2iz+0x5c>)
 80020c0:	18d0      	adds	r0, r2, r3
 80020c2:	bd30      	pop	{r4, r5, pc}
 80020c4:	2080      	movs	r0, #128	; 0x80
 80020c6:	0340      	lsls	r0, r0, #13
 80020c8:	4301      	orrs	r1, r0
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <__aeabi_d2iz+0x60>)
 80020cc:	1ac0      	subs	r0, r0, r3
 80020ce:	281f      	cmp	r0, #31
 80020d0:	dd08      	ble.n	80020e4 <__aeabi_d2iz+0x44>
 80020d2:	480c      	ldr	r0, [pc, #48]	; (8002104 <__aeabi_d2iz+0x64>)
 80020d4:	1ac3      	subs	r3, r0, r3
 80020d6:	40d9      	lsrs	r1, r3
 80020d8:	000b      	movs	r3, r1
 80020da:	4258      	negs	r0, r3
 80020dc:	2a00      	cmp	r2, #0
 80020de:	d1f0      	bne.n	80020c2 <__aeabi_d2iz+0x22>
 80020e0:	0018      	movs	r0, r3
 80020e2:	e7ee      	b.n	80020c2 <__aeabi_d2iz+0x22>
 80020e4:	4c08      	ldr	r4, [pc, #32]	; (8002108 <__aeabi_d2iz+0x68>)
 80020e6:	40c5      	lsrs	r5, r0
 80020e8:	46a4      	mov	ip, r4
 80020ea:	4463      	add	r3, ip
 80020ec:	4099      	lsls	r1, r3
 80020ee:	000b      	movs	r3, r1
 80020f0:	432b      	orrs	r3, r5
 80020f2:	e7f2      	b.n	80020da <__aeabi_d2iz+0x3a>
 80020f4:	000003fe 	.word	0x000003fe
 80020f8:	0000041d 	.word	0x0000041d
 80020fc:	7fffffff 	.word	0x7fffffff
 8002100:	00000433 	.word	0x00000433
 8002104:	00000413 	.word	0x00000413
 8002108:	fffffbed 	.word	0xfffffbed

0800210c <__aeabi_i2d>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	2800      	cmp	r0, #0
 8002110:	d016      	beq.n	8002140 <__aeabi_i2d+0x34>
 8002112:	17c3      	asrs	r3, r0, #31
 8002114:	18c5      	adds	r5, r0, r3
 8002116:	405d      	eors	r5, r3
 8002118:	0fc4      	lsrs	r4, r0, #31
 800211a:	0028      	movs	r0, r5
 800211c:	f000 f8d4 	bl	80022c8 <__clzsi2>
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <__aeabi_i2d+0x5c>)
 8002122:	1a12      	subs	r2, r2, r0
 8002124:	280a      	cmp	r0, #10
 8002126:	dc16      	bgt.n	8002156 <__aeabi_i2d+0x4a>
 8002128:	0003      	movs	r3, r0
 800212a:	002e      	movs	r6, r5
 800212c:	3315      	adds	r3, #21
 800212e:	409e      	lsls	r6, r3
 8002130:	230b      	movs	r3, #11
 8002132:	1a18      	subs	r0, r3, r0
 8002134:	40c5      	lsrs	r5, r0
 8002136:	0553      	lsls	r3, r2, #21
 8002138:	032d      	lsls	r5, r5, #12
 800213a:	0b2d      	lsrs	r5, r5, #12
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	e003      	b.n	8002148 <__aeabi_i2d+0x3c>
 8002140:	2400      	movs	r4, #0
 8002142:	2300      	movs	r3, #0
 8002144:	2500      	movs	r5, #0
 8002146:	2600      	movs	r6, #0
 8002148:	051b      	lsls	r3, r3, #20
 800214a:	432b      	orrs	r3, r5
 800214c:	07e4      	lsls	r4, r4, #31
 800214e:	4323      	orrs	r3, r4
 8002150:	0030      	movs	r0, r6
 8002152:	0019      	movs	r1, r3
 8002154:	bd70      	pop	{r4, r5, r6, pc}
 8002156:	380b      	subs	r0, #11
 8002158:	4085      	lsls	r5, r0
 800215a:	0553      	lsls	r3, r2, #21
 800215c:	032d      	lsls	r5, r5, #12
 800215e:	2600      	movs	r6, #0
 8002160:	0b2d      	lsrs	r5, r5, #12
 8002162:	0d5b      	lsrs	r3, r3, #21
 8002164:	e7f0      	b.n	8002148 <__aeabi_i2d+0x3c>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	0000041e 	.word	0x0000041e

0800216c <__aeabi_ui2d>:
 800216c:	b510      	push	{r4, lr}
 800216e:	1e04      	subs	r4, r0, #0
 8002170:	d010      	beq.n	8002194 <__aeabi_ui2d+0x28>
 8002172:	f000 f8a9 	bl	80022c8 <__clzsi2>
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <__aeabi_ui2d+0x48>)
 8002178:	1a1b      	subs	r3, r3, r0
 800217a:	280a      	cmp	r0, #10
 800217c:	dc11      	bgt.n	80021a2 <__aeabi_ui2d+0x36>
 800217e:	220b      	movs	r2, #11
 8002180:	0021      	movs	r1, r4
 8002182:	1a12      	subs	r2, r2, r0
 8002184:	40d1      	lsrs	r1, r2
 8002186:	3015      	adds	r0, #21
 8002188:	030a      	lsls	r2, r1, #12
 800218a:	055b      	lsls	r3, r3, #21
 800218c:	4084      	lsls	r4, r0
 800218e:	0b12      	lsrs	r2, r2, #12
 8002190:	0d5b      	lsrs	r3, r3, #21
 8002192:	e001      	b.n	8002198 <__aeabi_ui2d+0x2c>
 8002194:	2300      	movs	r3, #0
 8002196:	2200      	movs	r2, #0
 8002198:	051b      	lsls	r3, r3, #20
 800219a:	4313      	orrs	r3, r2
 800219c:	0020      	movs	r0, r4
 800219e:	0019      	movs	r1, r3
 80021a0:	bd10      	pop	{r4, pc}
 80021a2:	0022      	movs	r2, r4
 80021a4:	380b      	subs	r0, #11
 80021a6:	4082      	lsls	r2, r0
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	0312      	lsls	r2, r2, #12
 80021ac:	2400      	movs	r4, #0
 80021ae:	0b12      	lsrs	r2, r2, #12
 80021b0:	0d5b      	lsrs	r3, r3, #21
 80021b2:	e7f1      	b.n	8002198 <__aeabi_ui2d+0x2c>
 80021b4:	0000041e 	.word	0x0000041e

080021b8 <__aeabi_d2f>:
 80021b8:	0002      	movs	r2, r0
 80021ba:	004b      	lsls	r3, r1, #1
 80021bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021be:	0308      	lsls	r0, r1, #12
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	4e3d      	ldr	r6, [pc, #244]	; (80022b8 <__aeabi_d2f+0x100>)
 80021c4:	0fcc      	lsrs	r4, r1, #31
 80021c6:	0a40      	lsrs	r0, r0, #9
 80021c8:	0f51      	lsrs	r1, r2, #29
 80021ca:	1c5f      	adds	r7, r3, #1
 80021cc:	4308      	orrs	r0, r1
 80021ce:	00d5      	lsls	r5, r2, #3
 80021d0:	4237      	tst	r7, r6
 80021d2:	d00a      	beq.n	80021ea <__aeabi_d2f+0x32>
 80021d4:	4939      	ldr	r1, [pc, #228]	; (80022bc <__aeabi_d2f+0x104>)
 80021d6:	185e      	adds	r6, r3, r1
 80021d8:	2efe      	cmp	r6, #254	; 0xfe
 80021da:	dd16      	ble.n	800220a <__aeabi_d2f+0x52>
 80021dc:	23ff      	movs	r3, #255	; 0xff
 80021de:	2100      	movs	r1, #0
 80021e0:	05db      	lsls	r3, r3, #23
 80021e2:	430b      	orrs	r3, r1
 80021e4:	07e0      	lsls	r0, r4, #31
 80021e6:	4318      	orrs	r0, r3
 80021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <__aeabi_d2f+0x44>
 80021ee:	4328      	orrs	r0, r5
 80021f0:	d027      	beq.n	8002242 <__aeabi_d2f+0x8a>
 80021f2:	2105      	movs	r1, #5
 80021f4:	0189      	lsls	r1, r1, #6
 80021f6:	0a49      	lsrs	r1, r1, #9
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e7f1      	b.n	80021e0 <__aeabi_d2f+0x28>
 80021fc:	4305      	orrs	r5, r0
 80021fe:	d0ed      	beq.n	80021dc <__aeabi_d2f+0x24>
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	03c9      	lsls	r1, r1, #15
 8002204:	23ff      	movs	r3, #255	; 0xff
 8002206:	4301      	orrs	r1, r0
 8002208:	e7ea      	b.n	80021e0 <__aeabi_d2f+0x28>
 800220a:	2e00      	cmp	r6, #0
 800220c:	dd1c      	ble.n	8002248 <__aeabi_d2f+0x90>
 800220e:	0192      	lsls	r2, r2, #6
 8002210:	0011      	movs	r1, r2
 8002212:	1e4a      	subs	r2, r1, #1
 8002214:	4191      	sbcs	r1, r2
 8002216:	00c0      	lsls	r0, r0, #3
 8002218:	0f6d      	lsrs	r5, r5, #29
 800221a:	4301      	orrs	r1, r0
 800221c:	4329      	orrs	r1, r5
 800221e:	074b      	lsls	r3, r1, #29
 8002220:	d048      	beq.n	80022b4 <__aeabi_d2f+0xfc>
 8002222:	230f      	movs	r3, #15
 8002224:	400b      	ands	r3, r1
 8002226:	2b04      	cmp	r3, #4
 8002228:	d000      	beq.n	800222c <__aeabi_d2f+0x74>
 800222a:	3104      	adds	r1, #4
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	04db      	lsls	r3, r3, #19
 8002230:	400b      	ands	r3, r1
 8002232:	d03f      	beq.n	80022b4 <__aeabi_d2f+0xfc>
 8002234:	1c72      	adds	r2, r6, #1
 8002236:	2efe      	cmp	r6, #254	; 0xfe
 8002238:	d0d0      	beq.n	80021dc <__aeabi_d2f+0x24>
 800223a:	0189      	lsls	r1, r1, #6
 800223c:	0a49      	lsrs	r1, r1, #9
 800223e:	b2d3      	uxtb	r3, r2
 8002240:	e7ce      	b.n	80021e0 <__aeabi_d2f+0x28>
 8002242:	2300      	movs	r3, #0
 8002244:	2100      	movs	r1, #0
 8002246:	e7cb      	b.n	80021e0 <__aeabi_d2f+0x28>
 8002248:	0032      	movs	r2, r6
 800224a:	3217      	adds	r2, #23
 800224c:	db22      	blt.n	8002294 <__aeabi_d2f+0xdc>
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	221e      	movs	r2, #30
 8002252:	0409      	lsls	r1, r1, #16
 8002254:	4308      	orrs	r0, r1
 8002256:	1b92      	subs	r2, r2, r6
 8002258:	2a1f      	cmp	r2, #31
 800225a:	dd1d      	ble.n	8002298 <__aeabi_d2f+0xe0>
 800225c:	2102      	movs	r1, #2
 800225e:	4249      	negs	r1, r1
 8002260:	1b8e      	subs	r6, r1, r6
 8002262:	0001      	movs	r1, r0
 8002264:	40f1      	lsrs	r1, r6
 8002266:	000e      	movs	r6, r1
 8002268:	2a20      	cmp	r2, #32
 800226a:	d004      	beq.n	8002276 <__aeabi_d2f+0xbe>
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <__aeabi_d2f+0x108>)
 800226e:	4694      	mov	ip, r2
 8002270:	4463      	add	r3, ip
 8002272:	4098      	lsls	r0, r3
 8002274:	4305      	orrs	r5, r0
 8002276:	0029      	movs	r1, r5
 8002278:	1e4d      	subs	r5, r1, #1
 800227a:	41a9      	sbcs	r1, r5
 800227c:	4331      	orrs	r1, r6
 800227e:	2600      	movs	r6, #0
 8002280:	074b      	lsls	r3, r1, #29
 8002282:	d1ce      	bne.n	8002222 <__aeabi_d2f+0x6a>
 8002284:	2080      	movs	r0, #128	; 0x80
 8002286:	000b      	movs	r3, r1
 8002288:	04c0      	lsls	r0, r0, #19
 800228a:	2201      	movs	r2, #1
 800228c:	4003      	ands	r3, r0
 800228e:	4201      	tst	r1, r0
 8002290:	d1d3      	bne.n	800223a <__aeabi_d2f+0x82>
 8002292:	e7af      	b.n	80021f4 <__aeabi_d2f+0x3c>
 8002294:	2300      	movs	r3, #0
 8002296:	e7ac      	b.n	80021f2 <__aeabi_d2f+0x3a>
 8002298:	490a      	ldr	r1, [pc, #40]	; (80022c4 <__aeabi_d2f+0x10c>)
 800229a:	468c      	mov	ip, r1
 800229c:	0029      	movs	r1, r5
 800229e:	4463      	add	r3, ip
 80022a0:	40d1      	lsrs	r1, r2
 80022a2:	409d      	lsls	r5, r3
 80022a4:	000a      	movs	r2, r1
 80022a6:	0029      	movs	r1, r5
 80022a8:	4098      	lsls	r0, r3
 80022aa:	1e4d      	subs	r5, r1, #1
 80022ac:	41a9      	sbcs	r1, r5
 80022ae:	4301      	orrs	r1, r0
 80022b0:	4311      	orrs	r1, r2
 80022b2:	e7e4      	b.n	800227e <__aeabi_d2f+0xc6>
 80022b4:	0033      	movs	r3, r6
 80022b6:	e79d      	b.n	80021f4 <__aeabi_d2f+0x3c>
 80022b8:	000007fe 	.word	0x000007fe
 80022bc:	fffffc80 	.word	0xfffffc80
 80022c0:	fffffca2 	.word	0xfffffca2
 80022c4:	fffffc82 	.word	0xfffffc82

080022c8 <__clzsi2>:
 80022c8:	211c      	movs	r1, #28
 80022ca:	2301      	movs	r3, #1
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d301      	bcc.n	80022d6 <__clzsi2+0xe>
 80022d2:	0c00      	lsrs	r0, r0, #16
 80022d4:	3910      	subs	r1, #16
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	4298      	cmp	r0, r3
 80022da:	d301      	bcc.n	80022e0 <__clzsi2+0x18>
 80022dc:	0a00      	lsrs	r0, r0, #8
 80022de:	3908      	subs	r1, #8
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	4298      	cmp	r0, r3
 80022e4:	d301      	bcc.n	80022ea <__clzsi2+0x22>
 80022e6:	0900      	lsrs	r0, r0, #4
 80022e8:	3904      	subs	r1, #4
 80022ea:	a202      	add	r2, pc, #8	; (adr r2, 80022f4 <__clzsi2+0x2c>)
 80022ec:	5c10      	ldrb	r0, [r2, r0]
 80022ee:	1840      	adds	r0, r0, r1
 80022f0:	4770      	bx	lr
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	02020304 	.word	0x02020304
 80022f8:	01010101 	.word	0x01010101
	...

08002304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	240c      	movs	r4, #12
 800230c:	193b      	adds	r3, r7, r4
 800230e:	0018      	movs	r0, r3
 8002310:	2314      	movs	r3, #20
 8002312:	001a      	movs	r2, r3
 8002314:	2100      	movs	r1, #0
 8002316:	f006 fed0 	bl	80090ba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <MX_GPIO_Init+0x100>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	4b39      	ldr	r3, [pc, #228]	; (8002404 <MX_GPIO_Init+0x100>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0289      	lsls	r1, r1, #10
 8002324:	430a      	orrs	r2, r1
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <MX_GPIO_Init+0x100>)
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	029b      	lsls	r3, r3, #10
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <MX_GPIO_Init+0x100>)
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	4b32      	ldr	r3, [pc, #200]	; (8002404 <MX_GPIO_Init+0x100>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	02c9      	lsls	r1, r1, #11
 8002340:	430a      	orrs	r2, r1
 8002342:	615a      	str	r2, [r3, #20]
 8002344:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <MX_GPIO_Init+0x100>)
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	02db      	lsls	r3, r3, #11
 800234c:	4013      	ands	r3, r2
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002352:	2390      	movs	r3, #144	; 0x90
 8002354:	05db      	lsls	r3, r3, #23
 8002356:	2200      	movs	r2, #0
 8002358:	2104      	movs	r1, #4
 800235a:	0018      	movs	r0, r3
 800235c:	f001 f911 	bl	8003582 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|RADIO_SEND_Pin, GPIO_PIN_RESET);
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <MX_GPIO_Init+0x104>)
 8002362:	2200      	movs	r2, #0
 8002364:	210c      	movs	r1, #12
 8002366:	0018      	movs	r0, r3
 8002368:	f001 f90b 	bl	8003582 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800236c:	193b      	adds	r3, r7, r4
 800236e:	2204      	movs	r2, #4
 8002370:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	193b      	adds	r3, r7, r4
 8002374:	2201      	movs	r2, #1
 8002376:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	193b      	adds	r3, r7, r4
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800237e:	193b      	adds	r3, r7, r4
 8002380:	2203      	movs	r2, #3
 8002382:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8002384:	193a      	adds	r2, r7, r4
 8002386:	2390      	movs	r3, #144	; 0x90
 8002388:	05db      	lsls	r3, r3, #23
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f000 ff6b 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_RECEIVE_Pin;
 8002392:	193b      	adds	r3, r7, r4
 8002394:	2202      	movs	r2, #2
 8002396:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	193b      	adds	r3, r7, r4
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	193b      	adds	r3, r7, r4
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_RECEIVE_GPIO_Port, &GPIO_InitStruct);
 80023a4:	193b      	adds	r3, r7, r4
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <MX_GPIO_Init+0x104>)
 80023a8:	0019      	movs	r1, r3
 80023aa:	0010      	movs	r0, r2
 80023ac:	f000 ff5c 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	2204      	movs	r2, #4
 80023b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b6:	193b      	adds	r3, r7, r4
 80023b8:	2201      	movs	r2, #1
 80023ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c2:	193b      	adds	r3, r7, r4
 80023c4:	2203      	movs	r2, #3
 80023c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80023c8:	193b      	adds	r3, r7, r4
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <MX_GPIO_Init+0x104>)
 80023cc:	0019      	movs	r1, r3
 80023ce:	0010      	movs	r0, r2
 80023d0:	f000 ff4a 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SEND_Pin;
 80023d4:	0021      	movs	r1, r4
 80023d6:	187b      	adds	r3, r7, r1
 80023d8:	2208      	movs	r2, #8
 80023da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	2201      	movs	r2, #1
 80023e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RADIO_SEND_GPIO_Port, &GPIO_InitStruct);
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	4a05      	ldr	r2, [pc, #20]	; (8002408 <MX_GPIO_Init+0x104>)
 80023f2:	0019      	movs	r1, r3
 80023f4:	0010      	movs	r0, r2
 80023f6:	f000 ff37 	bl	8003268 <HAL_GPIO_Init>

}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b009      	add	sp, #36	; 0x24
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	40021000 	.word	0x40021000
 8002408:	48000400 	.word	0x48000400

0800240c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <MX_I2C1_Init+0x74>)
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <MX_I2C1_Init+0x78>)
 8002414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_I2C1_Init+0x74>)
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <MX_I2C1_Init+0x7c>)
 800241a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_I2C1_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_I2C1_Init+0x74>)
 8002424:	2201      	movs	r2, #1
 8002426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_I2C1_Init+0x74>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_I2C1_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_I2C1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_I2C1_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_I2C1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_I2C1_Init+0x74>)
 8002448:	0018      	movs	r0, r3
 800244a:	f001 f8b7 	bl	80035bc <HAL_I2C_Init>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d001      	beq.n	8002456 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002452:	f000 f95f 	bl	8002714 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <MX_I2C1_Init+0x74>)
 8002458:	2100      	movs	r1, #0
 800245a:	0018      	movs	r0, r3
 800245c:	f001 fde4 	bl	8004028 <HAL_I2CEx_ConfigAnalogFilter>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d001      	beq.n	8002468 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002464:	f000 f956 	bl	8002714 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <MX_I2C1_Init+0x74>)
 800246a:	2100      	movs	r1, #0
 800246c:	0018      	movs	r0, r3
 800246e:	f001 fe27 	bl	80040c0 <HAL_I2CEx_ConfigDigitalFilter>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d001      	beq.n	800247a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002476:	f000 f94d 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200002bc 	.word	0x200002bc
 8002484:	40005400 	.word	0x40005400
 8002488:	20303e5d 	.word	0x20303e5d

0800248c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b08b      	sub	sp, #44	; 0x2c
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	2414      	movs	r4, #20
 8002496:	193b      	adds	r3, r7, r4
 8002498:	0018      	movs	r0, r3
 800249a:	2314      	movs	r3, #20
 800249c:	001a      	movs	r2, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	f006 fe0b 	bl	80090ba <memset>
  if(i2cHandle->Instance==I2C1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_I2C_MspInit+0x90>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d131      	bne.n	8002512 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_I2C_MspInit+0x94>)
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_I2C_MspInit+0x94>)
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	02c9      	lsls	r1, r1, #11
 80024b8:	430a      	orrs	r2, r1
 80024ba:	615a      	str	r2, [r3, #20]
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <HAL_I2C_MspInit+0x94>)
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	02db      	lsls	r3, r3, #11
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_CLOCK_Pin|I2C_DATA_Pin;
 80024ca:	0021      	movs	r1, r4
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	22c0      	movs	r2, #192	; 0xc0
 80024d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2212      	movs	r2, #18
 80024d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	2201      	movs	r2, #1
 80024dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2203      	movs	r2, #3
 80024e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2201      	movs	r2, #1
 80024e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	4a0d      	ldr	r2, [pc, #52]	; (8002524 <HAL_I2C_MspInit+0x98>)
 80024ee:	0019      	movs	r1, r3
 80024f0:	0010      	movs	r0, r2
 80024f2:	f000 feb9 	bl	8003268 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_I2C_MspInit+0x94>)
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_I2C_MspInit+0x94>)
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	0389      	lsls	r1, r1, #14
 8002500:	430a      	orrs	r2, r1
 8002502:	61da      	str	r2, [r3, #28]
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_I2C_MspInit+0x94>)
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	039b      	lsls	r3, r3, #14
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b00b      	add	sp, #44	; 0x2c
 8002518:	bd90      	pop	{r4, r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	40005400 	.word	0x40005400
 8002520:	40021000 	.word	0x40021000
 8002524:	48000400 	.word	0x48000400

08002528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252a:	b091      	sub	sp, #68	; 0x44
 800252c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800252e:	f000 fd99 	bl	8003064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002532:	f000 f86f 	bl	8002614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002536:	f7ff fee5 	bl	8002304 <MX_GPIO_Init>
  MX_I2C1_Init();
 800253a:	f7ff ff67 	bl	800240c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800253e:	f000 fce9 	bl	8002f14 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002542:	f000 fa27 	bl	8002994 <MX_RTC_Init>
  MX_TIM15_Init();
 8002546:	f000 fc21 	bl	8002d8c <MX_TIM15_Init>
  MX_TIM16_Init();
 800254a:	f000 fc77 	bl	8002e3c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	MPU6050Init();
 800254e:	f000 f8e7 	bl	8002720 <MPU6050Init>
	MPUSetAccel(MPU_A16G);
 8002552:	2018      	movs	r0, #24
 8002554:	f000 f9de 	bl	8002914 <MPUSetAccel>
	MPUSetGyro(MPU_G2000G);
 8002558:	2018      	movs	r0, #24
 800255a:	f000 f9fb 	bl	8002954 <MPUSetGyro>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MPUReadAll(
 800255e:	4c25      	ldr	r4, [pc, #148]	; (80025f4 <main+0xcc>)
 8002560:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <main+0xd0>)
 8002562:	4926      	ldr	r1, [pc, #152]	; (80025fc <main+0xd4>)
 8002564:	4826      	ldr	r0, [pc, #152]	; (8002600 <main+0xd8>)
 8002566:	4b27      	ldr	r3, [pc, #156]	; (8002604 <main+0xdc>)
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	4b27      	ldr	r3, [pc, #156]	; (8002608 <main+0xe0>)
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	0023      	movs	r3, r4
 8002570:	f000 f9b8 	bl	80028e4 <MPUReadAll>
		// "accel:(|||||)"	: 13 chars
		//			6 * 5	= 30 chars
		// 					  --
		//					  43

		char MPUDataString[45] = "";
 8002574:	003b      	movs	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	3304      	adds	r3, #4
 800257c:	2229      	movs	r2, #41	; 0x29
 800257e:	2100      	movs	r1, #0
 8002580:	0018      	movs	r0, r3
 8002582:	f006 fd9a 	bl	80090ba <memset>

		sprintf(MPUDataString,
				"accel:(%d|%d|%d|%d|%d|%d)",
				MPUData[0],
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <main+0xd8>)
 8002588:	2200      	movs	r2, #0
 800258a:	5e9b      	ldrsh	r3, [r3, r2]
		sprintf(MPUDataString,
 800258c:	001e      	movs	r6, r3
				MPUData[1],
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <main+0xd8>)
 8002590:	2202      	movs	r2, #2
 8002592:	5e9b      	ldrsh	r3, [r3, r2]
		sprintf(MPUDataString,
 8002594:	469c      	mov	ip, r3
				MPUData[2],
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <main+0xd8>)
 8002598:	2204      	movs	r2, #4
 800259a:	5e9b      	ldrsh	r3, [r3, r2]
		sprintf(MPUDataString,
 800259c:	001a      	movs	r2, r3
				MPUData[3],
 800259e:	4b18      	ldr	r3, [pc, #96]	; (8002600 <main+0xd8>)
 80025a0:	2106      	movs	r1, #6
 80025a2:	5e5b      	ldrsh	r3, [r3, r1]
		sprintf(MPUDataString,
 80025a4:	001c      	movs	r4, r3
				MPUData[4],
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <main+0xd8>)
 80025a8:	2108      	movs	r1, #8
 80025aa:	5e5b      	ldrsh	r3, [r3, r1]
		sprintf(MPUDataString,
 80025ac:	001d      	movs	r5, r3
				MPUData[5]
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <main+0xd8>)
 80025b0:	210a      	movs	r1, #10
 80025b2:	5e5b      	ldrsh	r3, [r3, r1]
		sprintf(MPUDataString,
 80025b4:	4915      	ldr	r1, [pc, #84]	; (800260c <main+0xe4>)
 80025b6:	0038      	movs	r0, r7
 80025b8:	9303      	str	r3, [sp, #12]
 80025ba:	9502      	str	r5, [sp, #8]
 80025bc:	9401      	str	r4, [sp, #4]
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	4663      	mov	r3, ip
 80025c2:	0032      	movs	r2, r6
 80025c4:	f007 fd0c 	bl	8009fe0 <siprintf>
		);

		do
		{
			transmitterSendBlocking(MPUDataString);
 80025c8:	003b      	movs	r3, r7
 80025ca:	0018      	movs	r0, r3
 80025cc:	f003 fd22 	bl	8006014 <transmitterSendBlocking>
		}
		while(!receiverWaitForAck(500));
 80025d0:	23fa      	movs	r3, #250	; 0xfa
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	0018      	movs	r0, r3
 80025d6:	f003 fd59 	bl	800608c <receiverWaitForAck>
 80025da:	0003      	movs	r3, r0
 80025dc:	001a      	movs	r2, r3
 80025de:	2301      	movs	r3, #1
 80025e0:	4053      	eors	r3, r2
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ef      	bne.n	80025c8 <main+0xa0>

		HAL_Delay(5000);
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <main+0xe8>)
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 fd6a 	bl	80030c4 <HAL_Delay>
	{
 80025f0:	e7b5      	b.n	800255e <main+0x36>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	20000312 	.word	0x20000312
 80025f8:	20000310 	.word	0x20000310
 80025fc:	2000030e 	.word	0x2000030e
 8002600:	2000030c 	.word	0x2000030c
 8002604:	20000316 	.word	0x20000316
 8002608:	20000314 	.word	0x20000314
 800260c:	0800da30 	.word	0x0800da30
 8002610:	00001388 	.word	0x00001388

08002614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b095      	sub	sp, #84	; 0x54
 8002618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261a:	2420      	movs	r4, #32
 800261c:	193b      	adds	r3, r7, r4
 800261e:	0018      	movs	r0, r3
 8002620:	2330      	movs	r3, #48	; 0x30
 8002622:	001a      	movs	r2, r3
 8002624:	2100      	movs	r1, #0
 8002626:	f006 fd48 	bl	80090ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262a:	2310      	movs	r3, #16
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	0018      	movs	r0, r3
 8002630:	2310      	movs	r3, #16
 8002632:	001a      	movs	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	f006 fd40 	bl	80090ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263a:	003b      	movs	r3, r7
 800263c:	0018      	movs	r0, r3
 800263e:	2310      	movs	r3, #16
 8002640:	001a      	movs	r2, r3
 8002642:	2100      	movs	r1, #0
 8002644:	f006 fd39 	bl	80090ba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002648:	0021      	movs	r1, r4
 800264a:	187b      	adds	r3, r7, r1
 800264c:	220a      	movs	r2, #10
 800264e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002650:	187b      	adds	r3, r7, r1
 8002652:	2201      	movs	r2, #1
 8002654:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002656:	187b      	adds	r3, r7, r1
 8002658:	2210      	movs	r2, #16
 800265a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800265c:	187b      	adds	r3, r7, r1
 800265e:	2201      	movs	r2, #1
 8002660:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002662:	187b      	adds	r3, r7, r1
 8002664:	2202      	movs	r2, #2
 8002666:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002668:	187b      	adds	r3, r7, r1
 800266a:	2200      	movs	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800266e:	187b      	adds	r3, r7, r1
 8002670:	22a0      	movs	r2, #160	; 0xa0
 8002672:	0392      	lsls	r2, r2, #14
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2200      	movs	r2, #0
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800267c:	187b      	adds	r3, r7, r1
 800267e:	0018      	movs	r0, r3
 8002680:	f001 fd6a 	bl	8004158 <HAL_RCC_OscConfig>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d001      	beq.n	800268c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002688:	f000 f844 	bl	8002714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268c:	2110      	movs	r1, #16
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2202      	movs	r2, #2
 8002698:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2101      	movs	r1, #1
 80026aa:	0018      	movs	r0, r3
 80026ac:	f002 f86e 	bl	800478c <HAL_RCC_ClockConfig>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d001      	beq.n	80026b8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80026b4:	f000 f82e 	bl	8002714 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80026b8:	003b      	movs	r3, r7
 80026ba:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <SystemClock_Config+0xd8>)
 80026bc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80026be:	003b      	movs	r3, r7
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80026c4:	003b      	movs	r3, r7
 80026c6:	2210      	movs	r2, #16
 80026c8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026ca:	003b      	movs	r3, r7
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d2:	003b      	movs	r3, r7
 80026d4:	0018      	movs	r0, r3
 80026d6:	f002 f9d5 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 80026da:	1e03      	subs	r3, r0, #0
 80026dc:	d001      	beq.n	80026e2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80026de:	f000 f819 	bl	8002714 <Error_Handler>
  }
}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b015      	add	sp, #84	; 0x54
 80026e8:	bd90      	pop	{r4, r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	00010021 	.word	0x00010021

080026f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002702:	f000 fcc3 	bl	800308c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	40000400 	.word	0x40000400

08002714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002718:	b672      	cpsid	i
}
 800271a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800271c:	e7fe      	b.n	800271c <Error_Handler+0x8>
	...

08002720 <MPU6050Init>:
uint8_t orientationLeg[2];
int16_t previous;
uint8_t forceCounter;

bool MPU6050Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002726:	4830      	ldr	r0, [pc, #192]	; (80027e8 <MPU6050Init+0xc8>)
 8002728:	23fa      	movs	r3, #250	; 0xfa
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	2301      	movs	r3, #1
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2301      	movs	r3, #1
 8002738:	2275      	movs	r2, #117	; 0x75
 800273a:	21d0      	movs	r1, #208	; 0xd0
 800273c:	f001 f902 	bl	8003944 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002740:	1dfb      	adds	r3, r7, #7
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b68      	cmp	r3, #104	; 0x68
 8002746:	d149      	bne.n	80027dc <MPU6050Init+0xbc>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		data = 0;
 8002748:	1dbb      	adds	r3, r7, #6
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&data, 1, 1000);
 800274e:	4826      	ldr	r0, [pc, #152]	; (80027e8 <MPU6050Init+0xc8>)
 8002750:	23fa      	movs	r3, #250	; 0xfa
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	2301      	movs	r3, #1
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	1dbb      	adds	r3, r7, #6
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2301      	movs	r3, #1
 8002760:	226b      	movs	r2, #107	; 0x6b
 8002762:	21d0      	movs	r1, #208	; 0xd0
 8002764:	f000 ffc0 	bl	80036e8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data = 0x07;
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	2207      	movs	r2, #7
 800276c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 800276e:	481e      	ldr	r0, [pc, #120]	; (80027e8 <MPU6050Init+0xc8>)
 8002770:	23fa      	movs	r3, #250	; 0xfa
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	9302      	str	r3, [sp, #8]
 8002776:	2301      	movs	r3, #1
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	1dbb      	adds	r3, r7, #6
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2301      	movs	r3, #1
 8002780:	2219      	movs	r2, #25
 8002782:	21d0      	movs	r1, #208	; 0xd0
 8002784:	f000 ffb0 	bl	80036e8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		data = MPU_A2G;
 8002788:	1dbb      	adds	r3, r7, #6
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
		currentAccelScale = data;
 800278e:	1dbb      	adds	r3, r7, #6
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MPU6050Init+0xcc>)
 8002794:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8002796:	4814      	ldr	r0, [pc, #80]	; (80027e8 <MPU6050Init+0xc8>)
 8002798:	23fa      	movs	r3, #250	; 0xfa
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	9302      	str	r3, [sp, #8]
 800279e:	2301      	movs	r3, #1
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	1dbb      	adds	r3, r7, #6
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2301      	movs	r3, #1
 80027a8:	221c      	movs	r2, #28
 80027aa:	21d0      	movs	r1, #208	; 0xd0
 80027ac:	f000 ff9c 	bl	80036e8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		data = MPU_G250G;
 80027b0:	1dbb      	adds	r3, r7, #6
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
		currentGyroScale = data;
 80027b6:	1dbb      	adds	r3, r7, #6
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <MPU6050Init+0xd0>)
 80027bc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 80027be:	480a      	ldr	r0, [pc, #40]	; (80027e8 <MPU6050Init+0xc8>)
 80027c0:	23fa      	movs	r3, #250	; 0xfa
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	2301      	movs	r3, #1
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	1dbb      	adds	r3, r7, #6
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2301      	movs	r3, #1
 80027d0:	221b      	movs	r2, #27
 80027d2:	21d0      	movs	r1, #208	; 0xd0
 80027d4:	f000 ff88 	bl	80036e8 <HAL_I2C_Mem_Write>
		return true;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <MPU6050Init+0xbe>
	} else 
	{
		return false;
 80027dc:	2300      	movs	r3, #0
	}

}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b002      	add	sp, #8
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	200002bc 	.word	0x200002bc
 80027ec:	2000031f 	.word	0x2000031f
 80027f0:	2000031e 	.word	0x2000031e

080027f4 <MPU6050ReadAccel>:

void MPU6050ReadAccel(int16_t *aXRaw, int16_t *aYRaw, int16_t *aZRaw)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b08b      	sub	sp, #44	; 0x2c
 80027f8:	af04      	add	r7, sp, #16
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
	uint8_t RecData[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, RecData, 6, 1000);
 8002800:	4819      	ldr	r0, [pc, #100]	; (8002868 <MPU6050ReadAccel+0x74>)
 8002802:	23fa      	movs	r3, #250	; 0xfa
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	9302      	str	r3, [sp, #8]
 8002808:	2306      	movs	r3, #6
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2410      	movs	r4, #16
 800280e:	193b      	adds	r3, r7, r4
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	223b      	movs	r2, #59	; 0x3b
 8002816:	21d0      	movs	r1, #208	; 0xd0
 8002818:	f001 f894 	bl	8003944 <HAL_I2C_Mem_Read>

	*aXRaw = (int16_t)(RecData[0] << 8 | RecData [1]);
 800281c:	0021      	movs	r1, r4
 800281e:	187b      	adds	r3, r7, r1
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	b21a      	sxth	r2, r3
 8002826:	187b      	adds	r3, r7, r1
 8002828:	785b      	ldrb	r3, [r3, #1]
 800282a:	b21b      	sxth	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b21a      	sxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	801a      	strh	r2, [r3, #0]
	*aYRaw = (int16_t)(RecData[2] << 8 | RecData [3]);
 8002834:	187b      	adds	r3, r7, r1
 8002836:	789b      	ldrb	r3, [r3, #2]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	b21a      	sxth	r2, r3
 800283c:	187b      	adds	r3, r7, r1
 800283e:	78db      	ldrb	r3, [r3, #3]
 8002840:	b21b      	sxth	r3, r3
 8002842:	4313      	orrs	r3, r2
 8002844:	b21a      	sxth	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	801a      	strh	r2, [r3, #0]
	*aZRaw = (int16_t)(RecData[4] << 8 | RecData [5]);
 800284a:	187b      	adds	r3, r7, r1
 800284c:	791b      	ldrb	r3, [r3, #4]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	b21a      	sxth	r2, r3
 8002852:	187b      	adds	r3, r7, r1
 8002854:	795b      	ldrb	r3, [r3, #5]
 8002856:	b21b      	sxth	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b21a      	sxth	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	801a      	strh	r2, [r3, #0]
	     for more details check ACCEL_CONFIG Register              ****/

	//Ax = Accel_X_RAW/16384.0;
	//Ay = Accel_Y_RAW/16384.0;
	//Az = Accel_Z_RAW/16384.0;
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b007      	add	sp, #28
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	200002bc 	.word	0x200002bc

0800286c <MPU6050ReadGyro>:

void MPU6050ReadGyro(int16_t *gXRaw, int16_t *gYRaw, int16_t *gZRaw)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b08b      	sub	sp, #44	; 0x2c
 8002870:	af04      	add	r7, sp, #16
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
	uint8_t RecData[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, RecData, 6, 1000);
 8002878:	4819      	ldr	r0, [pc, #100]	; (80028e0 <MPU6050ReadGyro+0x74>)
 800287a:	23fa      	movs	r3, #250	; 0xfa
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	2306      	movs	r3, #6
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	2410      	movs	r4, #16
 8002886:	193b      	adds	r3, r7, r4
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2301      	movs	r3, #1
 800288c:	2243      	movs	r2, #67	; 0x43
 800288e:	21d0      	movs	r1, #208	; 0xd0
 8002890:	f001 f858 	bl	8003944 <HAL_I2C_Mem_Read>

	*gXRaw = (int16_t)(RecData[0] << 8 | RecData [1]);
 8002894:	0021      	movs	r1, r4
 8002896:	187b      	adds	r3, r7, r1
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	b21a      	sxth	r2, r3
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	785b      	ldrb	r3, [r3, #1]
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b21a      	sxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	801a      	strh	r2, [r3, #0]
	*gYRaw = (int16_t)(RecData[2] << 8 | RecData [3]);
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	789b      	ldrb	r3, [r3, #2]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	78db      	ldrb	r3, [r3, #3]
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b21a      	sxth	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	801a      	strh	r2, [r3, #0]
	*gZRaw = (int16_t)(RecData[4] << 8 | RecData [5]);
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	791b      	ldrb	r3, [r3, #4]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	795b      	ldrb	r3, [r3, #5]
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	801a      	strh	r2, [r3, #0]
	     for more details check GYRO_CONFIG Register              ****/

	//Gx = Gyro_X_RAW/131.0;
	//Gy = Gyro_Y_RAW/131.0;
	//Gz = Gyro_Z_RAW/131.0;
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b007      	add	sp, #28
 80028de:	bd90      	pop	{r4, r7, pc}
 80028e0:	200002bc 	.word	0x200002bc

080028e4 <MPUReadAll>:

void MPUReadAll(int16_t *aXRaw, int16_t *aYRaw, int16_t *aZRaw, int16_t *gXRaw, int16_t *gYRaw, int16_t *gZRaw)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
	MPU6050ReadAccel(aXRaw, aYRaw, aZRaw);
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7ff ff7b 	bl	80027f4 <MPU6050ReadAccel>
	MPU6050ReadGyro(gXRaw, gYRaw, gZRaw);
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	69b9      	ldr	r1, [r7, #24]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ffb1 	bl	800286c <MPU6050ReadGyro>
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <MPUSetAccel>:

void MPUSetAccel(uint8_t acceleration)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af04      	add	r7, sp, #16
 800291a:	0002      	movs	r2, r0
 800291c:	1dfb      	adds	r3, r7, #7
 800291e:	701a      	strb	r2, [r3, #0]

	currentAccelScale = acceleration;
 8002920:	1dfb      	adds	r3, r7, #7
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <MPUSetAccel+0x38>)
 8002926:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &acceleration, 1, 1000);
 8002928:	4809      	ldr	r0, [pc, #36]	; (8002950 <MPUSetAccel+0x3c>)
 800292a:	23fa      	movs	r3, #250	; 0xfa
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	9302      	str	r3, [sp, #8]
 8002930:	2301      	movs	r3, #1
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	1dfb      	adds	r3, r7, #7
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	221c      	movs	r2, #28
 800293c:	21d0      	movs	r1, #208	; 0xd0
 800293e:	f000 fed3 	bl	80036e8 <HAL_I2C_Mem_Write>
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b002      	add	sp, #8
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	2000031f 	.word	0x2000031f
 8002950:	200002bc 	.word	0x200002bc

08002954 <MPUSetGyro>:

void MPUSetGyro(uint8_t gyroSpeed)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af04      	add	r7, sp, #16
 800295a:	0002      	movs	r2, r0
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	701a      	strb	r2, [r3, #0]
	currentGyroScale = gyroSpeed;
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <MPUSetGyro+0x38>)
 8002966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &gyroSpeed, 1, 1000);
 8002968:	4809      	ldr	r0, [pc, #36]	; (8002990 <MPUSetGyro+0x3c>)
 800296a:	23fa      	movs	r3, #250	; 0xfa
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	9302      	str	r3, [sp, #8]
 8002970:	2301      	movs	r3, #1
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	1dfb      	adds	r3, r7, #7
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2301      	movs	r3, #1
 800297a:	221b      	movs	r2, #27
 800297c:	21d0      	movs	r1, #208	; 0xd0
 800297e:	f000 feb3 	bl	80036e8 <HAL_I2C_Mem_Write>
}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b002      	add	sp, #8
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	2000031e 	.word	0x2000031e
 8002990:	200002bc 	.word	0x200002bc

08002994 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	0018      	movs	r0, r3
 800299e:	2314      	movs	r3, #20
 80029a0:	001a      	movs	r2, r3
 80029a2:	2100      	movs	r1, #0
 80029a4:	f006 fb89 	bl	80090ba <memset>
  RTC_DateTypeDef sDate = {0};
 80029a8:	003b      	movs	r3, r7
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029ae:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <MX_RTC_Init+0xbc>)
 80029b0:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <MX_RTC_Init+0xc0>)
 80029b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029b4:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <MX_RTC_Init+0xbc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <MX_RTC_Init+0xbc>)
 80029bc:	227f      	movs	r2, #127	; 0x7f
 80029be:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029c0:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <MX_RTC_Init+0xbc>)
 80029c2:	22ff      	movs	r2, #255	; 0xff
 80029c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <MX_RTC_Init+0xbc>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029cc:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <MX_RTC_Init+0xbc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <MX_RTC_Init+0xbc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <MX_RTC_Init+0xbc>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f002 f920 	bl	8004c20 <HAL_RTC_Init>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d001      	beq.n	80029e8 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80029e4:	f7ff fe96 	bl	8002714 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2200      	movs	r2, #0
 80029f2:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	2200      	movs	r2, #0
 80029f8:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a06:	1d39      	adds	r1, r7, #4
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_RTC_Init+0xbc>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f002 f99b 	bl	8004d48 <HAL_RTC_SetTime>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d001      	beq.n	8002a1a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8002a16:	f7ff fe7d 	bl	8002714 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a1a:	003b      	movs	r3, r7
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a20:	003b      	movs	r3, r7
 8002a22:	2201      	movs	r2, #1
 8002a24:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002a26:	003b      	movs	r3, r7
 8002a28:	2201      	movs	r2, #1
 8002a2a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002a2c:	003b      	movs	r3, r7
 8002a2e:	2200      	movs	r2, #0
 8002a30:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a32:	0039      	movs	r1, r7
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <MX_RTC_Init+0xbc>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f002 fa41 	bl	8004ec0 <HAL_RTC_SetDate>
 8002a3e:	1e03      	subs	r3, r0, #0
 8002a40:	d001      	beq.n	8002a46 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8002a42:	f7ff fe67 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b006      	add	sp, #24
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	20000334 	.word	0x20000334
 8002a54:	40002800 	.word	0x40002800

08002a58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_RTC_MspInit+0x28>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d106      	bne.n	8002a78 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RTC_MspInit+0x2c>)
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RTC_MspInit+0x2c>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	0209      	lsls	r1, r1, #8
 8002a74:	430a      	orrs	r2, r1
 8002a76:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40002800 	.word	0x40002800
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_MspInit+0x44>)
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_MspInit+0x44>)
 8002a94:	2101      	movs	r1, #1
 8002a96:	430a      	orrs	r2, r1
 8002a98:	619a      	str	r2, [r3, #24]
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_MspInit+0x44>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_MspInit+0x44>)
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_MspInit+0x44>)
 8002aac:	2180      	movs	r1, #128	; 0x80
 8002aae:	0549      	lsls	r1, r1, #21
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	61da      	str	r2, [r3, #28]
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_MspInit+0x44>)
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	055b      	lsls	r3, r3, #21
 8002abc:	4013      	ands	r3, r2
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b002      	add	sp, #8
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	2010      	movs	r0, #16
 8002ae8:	f000 fb98 	bl	800321c <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002aec:	2010      	movs	r0, #16
 8002aee:	f000 fbaa 	bl	8003246 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_InitTick+0xa4>)
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <HAL_InitTick+0xa4>)
 8002af8:	2102      	movs	r1, #2
 8002afa:	430a      	orrs	r2, r1
 8002afc:	61da      	str	r2, [r3, #28]
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_InitTick+0xa4>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2202      	movs	r2, #2
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	18fa      	adds	r2, r7, r3
 8002b0e:	2310      	movs	r3, #16
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	0011      	movs	r1, r2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f001 ff8b 	bl	8004a30 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b1a:	f001 ff73 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	4914      	ldr	r1, [pc, #80]	; (8002b78 <HAL_InitTick+0xa8>)
 8002b26:	0018      	movs	r0, r3
 8002b28:	f7fd fb0a 	bl	8000140 <__udivsi3>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_InitTick+0xac>)
 8002b34:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <HAL_InitTick+0xb0>)
 8002b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002b38:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_InitTick+0xac>)
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <HAL_InitTick+0xb4>)
 8002b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_InitTick+0xac>)
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_InitTick+0xac>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <HAL_InitTick+0xac>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_InitTick+0xac>)
 8002b52:	0018      	movs	r0, r3
 8002b54:	f002 fad0 	bl	80050f8 <HAL_TIM_Base_Init>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_InitTick+0xac>)
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f002 fb1a 	bl	8005198 <HAL_TIM_Base_Start_IT>
 8002b64:	0003      	movs	r3, r0
 8002b66:	e000      	b.n	8002b6a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b00a      	add	sp, #40	; 0x28
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40021000 	.word	0x40021000
 8002b78:	000f4240 	.word	0x000f4240
 8002b7c:	20000354 	.word	0x20000354
 8002b80:	40000400 	.word	0x40000400
 8002b84:	000003e7 	.word	0x000003e7

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002b8c:	e7fe      	b.n	8002b8c <NMI_Handler+0x4>

08002b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <HardFault_Handler+0x4>

08002b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <TIM3_IRQHandler+0x14>)
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f002 fb66 	bl	800528c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	20000354 	.word	0x20000354

08002bcc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <TIM15_IRQHandler+0x18>)
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f002 fb5a 	bl	800528c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

	transmitterTick();
 8002bd8:	f003 fa4c 	bl	8006074 <transmitterTick>

  /* USER CODE END TIM15_IRQn 1 */
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	2000039c 	.word	0x2000039c

08002be8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <TIM16_IRQHandler+0x18>)
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f002 fb4c 	bl	800528c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

	receiverTick();
 8002bf4:	f003 fa5e 	bl	80060b4 <receiverTick>

  /* USER CODE END TIM16_IRQn 1 */
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	200003e4 	.word	0x200003e4

08002c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	return 1;
 8002c08:	2301      	movs	r3, #1
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_kill>:

int _kill(int pid, int sig)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c1a:	f006 f9db 	bl	8008fd4 <__errno>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	2216      	movs	r2, #22
 8002c22:	601a      	str	r2, [r3, #0]
	return -1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	425b      	negs	r3, r3
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_exit>:

void _exit (int status)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c38:	2301      	movs	r3, #1
 8002c3a:	425a      	negs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0011      	movs	r1, r2
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7ff ffe5 	bl	8002c10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c46:	e7fe      	b.n	8002c46 <_exit+0x16>

08002c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e00a      	b.n	8002c70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c5a:	e000      	b.n	8002c5e <_read+0x16>
 8002c5c:	bf00      	nop
 8002c5e:	0001      	movs	r1, r0
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	60ba      	str	r2, [r7, #8]
 8002c66:	b2ca      	uxtb	r2, r1
 8002c68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dbf0      	blt.n	8002c5a <_read+0x12>
	}

return len;
 8002c78:	687b      	ldr	r3, [r7, #4]
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b006      	add	sp, #24
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e009      	b.n	8002ca8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	60ba      	str	r2, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	e000      	b.n	8002ca2 <_write+0x20>
 8002ca0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	dbf1      	blt.n	8002c94 <_write+0x12>
	}
	return len;
 8002cb0:	687b      	ldr	r3, [r7, #4]
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b006      	add	sp, #24
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <_close>:

int _close(int file)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
	return -1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	425b      	negs	r3, r3
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b002      	add	sp, #8
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	0192      	lsls	r2, r2, #6
 8002cde:	605a      	str	r2, [r3, #4]
	return 0;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b002      	add	sp, #8
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_isatty>:

int _isatty(int file)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	return 1;
 8002cf2:	2301      	movs	r3, #1
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
	return 0;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <_sbrk+0x5c>)
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <_sbrk+0x60>)
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <_sbrk+0x64>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <_sbrk+0x68>)
 8002d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	18d3      	adds	r3, r2, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d207      	bcs.n	8002d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d44:	f006 f946 	bl	8008fd4 <__errno>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	425b      	negs	r3, r3
 8002d52:	e009      	b.n	8002d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <_sbrk+0x64>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <_sbrk+0x64>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	18d2      	adds	r2, r2, r3
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <_sbrk+0x64>)
 8002d64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	0018      	movs	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b006      	add	sp, #24
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20002000 	.word	0x20002000
 8002d74:	00000400 	.word	0x00000400
 8002d78:	200001f8 	.word	0x200001f8
 8002d7c:	200004c8 	.word	0x200004c8

08002d80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <MX_TIM15_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d92:	2308      	movs	r3, #8
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	0018      	movs	r0, r3
 8002d98:	2310      	movs	r3, #16
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f006 f98c 	bl	80090ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da2:	003b      	movs	r3, r7
 8002da4:	0018      	movs	r0, r3
 8002da6:	2308      	movs	r3, #8
 8002da8:	001a      	movs	r2, r3
 8002daa:	2100      	movs	r1, #0
 8002dac:	f006 f985 	bl	80090ba <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002db2:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <MX_TIM15_Init+0xac>)
 8002db4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 480;
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002db8:	22f0      	movs	r2, #240	; 0xf0
 8002dba:	0052      	lsls	r2, r2, #1
 8002dbc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002dc6:	2263      	movs	r2, #99	; 0x63
 8002dc8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd6:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002ddc:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002dde:	0018      	movs	r0, r3
 8002de0:	f002 f98a 	bl	80050f8 <HAL_TIM_Base_Init>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM15_Init+0x60>
  {
    Error_Handler();
 8002de8:	f7ff fc94 	bl	8002714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dec:	2108      	movs	r1, #8
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	0152      	lsls	r2, r2, #5
 8002df4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002df6:	187a      	adds	r2, r7, r1
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002dfa:	0011      	movs	r1, r2
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f002 fb5b 	bl	80054b8 <HAL_TIM_ConfigClockSource>
 8002e02:	1e03      	subs	r3, r0, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8002e06:	f7ff fc85 	bl	8002714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0a:	003b      	movs	r3, r7
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e10:	003b      	movs	r3, r7
 8002e12:	2200      	movs	r2, #0
 8002e14:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002e16:	003a      	movs	r2, r7
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <MX_TIM15_Init+0xa8>)
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f002 fd45 	bl	80058ac <HAL_TIMEx_MasterConfigSynchronization>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8002e26:	f7ff fc75 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b006      	add	sp, #24
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	2000039c 	.word	0x2000039c
 8002e38:	40014000 	.word	0x40014000

08002e3c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <MX_TIM16_Init+0x44>)
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <MX_TIM16_Init+0x48>)
 8002e44:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_TIM16_Init+0x44>)
 8002e48:	2230      	movs	r2, #48	; 0x30
 8002e4a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_TIM16_Init+0x44>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_TIM16_Init+0x44>)
 8002e54:	2209      	movs	r2, #9
 8002e56:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_TIM16_Init+0x44>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_TIM16_Init+0x44>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_TIM16_Init+0x44>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <MX_TIM16_Init+0x44>)
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f002 f943 	bl	80050f8 <HAL_TIM_Base_Init>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002e76:	f7ff fc4d 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200003e4 	.word	0x200003e4
 8002e84:	40014400 	.word	0x40014400

08002e88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_TIM_Base_MspInit+0x80>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d116      	bne.n	8002ec8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <HAL_TIM_Base_MspInit+0x84>)
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_TIM_Base_MspInit+0x84>)
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	0249      	lsls	r1, r1, #9
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	619a      	str	r2, [r3, #24]
 8002ea8:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_TIM_Base_MspInit+0x84>)
 8002eaa:	699a      	ldr	r2, [r3, #24]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	025b      	lsls	r3, r3, #9
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2014      	movs	r0, #20
 8002ebc:	f000 f9ae 	bl	800321c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002ec0:	2014      	movs	r0, #20
 8002ec2:	f000 f9c0 	bl	8003246 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002ec6:	e01a      	b.n	8002efe <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM16)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_TIM_Base_MspInit+0x88>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d115      	bne.n	8002efe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_TIM_Base_MspInit+0x84>)
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_TIM_Base_MspInit+0x84>)
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	0289      	lsls	r1, r1, #10
 8002edc:	430a      	orrs	r2, r1
 8002ede:	619a      	str	r2, [r3, #24]
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_TIM_Base_MspInit+0x84>)
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	029b      	lsls	r3, r3, #10
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2015      	movs	r0, #21
 8002ef4:	f000 f992 	bl	800321c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002ef8:	2015      	movs	r0, #21
 8002efa:	f000 f9a4 	bl	8003246 <HAL_NVIC_EnableIRQ>
}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b004      	add	sp, #16
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	40014000 	.word	0x40014000
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40014400 	.word	0x40014400

08002f14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f1a:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <MX_USART1_UART_Init+0x5c>)
 8002f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f20:	22e1      	movs	r2, #225	; 0xe1
 8002f22:	0252      	lsls	r2, r2, #9
 8002f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <MX_USART1_UART_Init+0x58>)
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f002 fd0f 	bl	800597c <HAL_UART_Init>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f62:	f7ff fbd7 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000042c 	.word	0x2000042c
 8002f70:	40013800 	.word	0x40013800

08002f74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b08b      	sub	sp, #44	; 0x2c
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	2414      	movs	r4, #20
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	0018      	movs	r0, r3
 8002f82:	2314      	movs	r3, #20
 8002f84:	001a      	movs	r2, r3
 8002f86:	2100      	movs	r1, #0
 8002f88:	f006 f897 	bl	80090ba <memset>
  if(uartHandle->Instance==USART1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <HAL_UART_MspInit+0x94>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d133      	bne.n	8002ffe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_UART_MspInit+0x98>)
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_UART_MspInit+0x98>)
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	01c9      	lsls	r1, r1, #7
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	619a      	str	r2, [r3, #24]
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_UART_MspInit+0x98>)
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	01db      	lsls	r3, r3, #7
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_UART_MspInit+0x98>)
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_UART_MspInit+0x98>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0289      	lsls	r1, r1, #10
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	615a      	str	r2, [r3, #20]
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_UART_MspInit+0x98>)
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	029b      	lsls	r3, r3, #10
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	22c0      	movs	r2, #192	; 0xc0
 8002fd2:	00d2      	lsls	r2, r2, #3
 8002fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	0021      	movs	r1, r4
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2202      	movs	r2, #2
 8002fdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	2201      	movs	r2, #1
 8002fee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff0:	187a      	adds	r2, r7, r1
 8002ff2:	2390      	movs	r3, #144	; 0x90
 8002ff4:	05db      	lsls	r3, r3, #23
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 f935 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b00b      	add	sp, #44	; 0x2c
 8003004:	bd90      	pop	{r4, r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	40013800 	.word	0x40013800
 800300c:	40021000 	.word	0x40021000

08003010 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003012:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <LoopForever+0x6>)
  ldr r1, =_edata
 8003016:	490e      	ldr	r1, [pc, #56]	; (8003050 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <LoopForever+0xe>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800301c:	e002      	b.n	8003024 <LoopCopyDataInit>

0800301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003022:	3304      	adds	r3, #4

08003024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003028:	d3f9      	bcc.n	800301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <LoopForever+0x12>)
  ldr r4, =_ebss
 800302c:	4c0b      	ldr	r4, [pc, #44]	; (800305c <LoopForever+0x16>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003030:	e001      	b.n	8003036 <LoopFillZerobss>

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003034:	3204      	adds	r2, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800303a:	f7ff fea1 	bl	8002d80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800303e:	f005 ffcf 	bl	8008fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003042:	f7ff fa71 	bl	8002528 <main>

08003046 <LoopForever>:

LoopForever:
    b LoopForever
 8003046:	e7fe      	b.n	8003046 <LoopForever>
  ldr   r0, =_estack
 8003048:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800304c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003050:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003054:	0800e134 	.word	0x0800e134
  ldr r2, =_sbss
 8003058:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800305c:	200004c4 	.word	0x200004c4

08003060 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC1_IRQHandler>
	...

08003064 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_Init+0x24>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_Init+0x24>)
 800306e:	2110      	movs	r1, #16
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003074:	2000      	movs	r0, #0
 8003076:	f7ff fd2b 	bl	8002ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800307a:	f7ff fd05 	bl	8002a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	40022000 	.word	0x40022000

0800308c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_IncTick+0x1c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	001a      	movs	r2, r3
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_IncTick+0x20>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	18d2      	adds	r2, r2, r3
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_IncTick+0x20>)
 800309e:	601a      	str	r2, [r3, #0]
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	20000004 	.word	0x20000004
 80030ac:	200004b0 	.word	0x200004b0

080030b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  return uwTick;
 80030b4:	4b02      	ldr	r3, [pc, #8]	; (80030c0 <HAL_GetTick+0x10>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	200004b0 	.word	0x200004b0

080030c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7ff fff0 	bl	80030b0 <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3301      	adds	r3, #1
 80030dc:	d005      	beq.n	80030ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_Delay+0x44>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	001a      	movs	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	189b      	adds	r3, r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	f7ff ffe0 	bl	80030b0 <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d8f7      	bhi.n	80030ec <HAL_Delay+0x28>
  {
  }
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b004      	add	sp, #16
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	20000004 	.word	0x20000004

0800310c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	0002      	movs	r2, r0
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b7f      	cmp	r3, #127	; 0x7f
 800311e:	d809      	bhi.n	8003134 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	001a      	movs	r2, r3
 8003126:	231f      	movs	r3, #31
 8003128:	401a      	ands	r2, r3
 800312a:	4b04      	ldr	r3, [pc, #16]	; (800313c <__NVIC_EnableIRQ+0x30>)
 800312c:	2101      	movs	r1, #1
 800312e:	4091      	lsls	r1, r2
 8003130:	000a      	movs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
  }
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	0002      	movs	r2, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	1dfb      	adds	r3, r7, #7
 800314c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800314e:	1dfb      	adds	r3, r7, #7
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b7f      	cmp	r3, #127	; 0x7f
 8003154:	d828      	bhi.n	80031a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003156:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <__NVIC_SetPriority+0xd4>)
 8003158:	1dfb      	adds	r3, r7, #7
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b25b      	sxtb	r3, r3
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	33c0      	adds	r3, #192	; 0xc0
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	589b      	ldr	r3, [r3, r2]
 8003166:	1dfa      	adds	r2, r7, #7
 8003168:	7812      	ldrb	r2, [r2, #0]
 800316a:	0011      	movs	r1, r2
 800316c:	2203      	movs	r2, #3
 800316e:	400a      	ands	r2, r1
 8003170:	00d2      	lsls	r2, r2, #3
 8003172:	21ff      	movs	r1, #255	; 0xff
 8003174:	4091      	lsls	r1, r2
 8003176:	000a      	movs	r2, r1
 8003178:	43d2      	mvns	r2, r2
 800317a:	401a      	ands	r2, r3
 800317c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	22ff      	movs	r2, #255	; 0xff
 8003184:	401a      	ands	r2, r3
 8003186:	1dfb      	adds	r3, r7, #7
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	0018      	movs	r0, r3
 800318c:	2303      	movs	r3, #3
 800318e:	4003      	ands	r3, r0
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003194:	481f      	ldr	r0, [pc, #124]	; (8003214 <__NVIC_SetPriority+0xd4>)
 8003196:	1dfb      	adds	r3, r7, #7
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b25b      	sxtb	r3, r3
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	430a      	orrs	r2, r1
 80031a0:	33c0      	adds	r3, #192	; 0xc0
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80031a6:	e031      	b.n	800320c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <__NVIC_SetPriority+0xd8>)
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	0019      	movs	r1, r3
 80031b0:	230f      	movs	r3, #15
 80031b2:	400b      	ands	r3, r1
 80031b4:	3b08      	subs	r3, #8
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3306      	adds	r3, #6
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	18d3      	adds	r3, r2, r3
 80031be:	3304      	adds	r3, #4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1dfa      	adds	r2, r7, #7
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	0011      	movs	r1, r2
 80031c8:	2203      	movs	r2, #3
 80031ca:	400a      	ands	r2, r1
 80031cc:	00d2      	lsls	r2, r2, #3
 80031ce:	21ff      	movs	r1, #255	; 0xff
 80031d0:	4091      	lsls	r1, r2
 80031d2:	000a      	movs	r2, r1
 80031d4:	43d2      	mvns	r2, r2
 80031d6:	401a      	ands	r2, r3
 80031d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	019b      	lsls	r3, r3, #6
 80031de:	22ff      	movs	r2, #255	; 0xff
 80031e0:	401a      	ands	r2, r3
 80031e2:	1dfb      	adds	r3, r7, #7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	0018      	movs	r0, r3
 80031e8:	2303      	movs	r3, #3
 80031ea:	4003      	ands	r3, r0
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031f0:	4809      	ldr	r0, [pc, #36]	; (8003218 <__NVIC_SetPriority+0xd8>)
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	001c      	movs	r4, r3
 80031f8:	230f      	movs	r3, #15
 80031fa:	4023      	ands	r3, r4
 80031fc:	3b08      	subs	r3, #8
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	430a      	orrs	r2, r1
 8003202:	3306      	adds	r3, #6
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	18c3      	adds	r3, r0, r3
 8003208:	3304      	adds	r3, #4
 800320a:	601a      	str	r2, [r3, #0]
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b003      	add	sp, #12
 8003212:	bd90      	pop	{r4, r7, pc}
 8003214:	e000e100 	.word	0xe000e100
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	210f      	movs	r1, #15
 8003228:	187b      	adds	r3, r7, r1
 800322a:	1c02      	adds	r2, r0, #0
 800322c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	187b      	adds	r3, r7, r1
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b25b      	sxtb	r3, r3
 8003236:	0011      	movs	r1, r2
 8003238:	0018      	movs	r0, r3
 800323a:	f7ff ff81 	bl	8003140 <__NVIC_SetPriority>
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	0002      	movs	r2, r0
 800324e:	1dfb      	adds	r3, r7, #7
 8003250:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003252:	1dfb      	adds	r3, r7, #7
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b25b      	sxtb	r3, r3
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff ff57 	bl	800310c <__NVIC_EnableIRQ>
}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	b002      	add	sp, #8
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003276:	e14f      	b.n	8003518 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2101      	movs	r1, #1
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4091      	lsls	r1, r2
 8003282:	000a      	movs	r2, r1
 8003284:	4013      	ands	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d100      	bne.n	8003290 <HAL_GPIO_Init+0x28>
 800328e:	e140      	b.n	8003512 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d00b      	beq.n	80032b0 <HAL_GPIO_Init+0x48>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d007      	beq.n	80032b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032a4:	2b11      	cmp	r3, #17
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b12      	cmp	r3, #18
 80032ae:	d130      	bne.n	8003312 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	409a      	lsls	r2, r3
 80032be:	0013      	movs	r3, r2
 80032c0:	43da      	mvns	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	409a      	lsls	r2, r3
 80032d2:	0013      	movs	r3, r2
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e6:	2201      	movs	r2, #1
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
 80032ec:	0013      	movs	r3, r2
 80032ee:	43da      	mvns	r2, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	2201      	movs	r2, #1
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	409a      	lsls	r2, r3
 8003304:	0013      	movs	r3, r2
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	2203      	movs	r2, #3
 800331e:	409a      	lsls	r2, r3
 8003320:	0013      	movs	r3, r2
 8003322:	43da      	mvns	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0xea>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b12      	cmp	r3, #18
 8003350:	d123      	bne.n	800339a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	08da      	lsrs	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3208      	adds	r2, #8
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	58d3      	ldr	r3, [r2, r3]
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2207      	movs	r2, #7
 8003364:	4013      	ands	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	43da      	mvns	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2107      	movs	r1, #7
 800337e:	400b      	ands	r3, r1
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	409a      	lsls	r2, r3
 8003384:	0013      	movs	r3, r2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	08da      	lsrs	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3208      	adds	r2, #8
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	6939      	ldr	r1, [r7, #16]
 8003398:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	409a      	lsls	r2, r3
 80033a8:	0013      	movs	r3, r2
 80033aa:	43da      	mvns	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2203      	movs	r2, #3
 80033b8:	401a      	ands	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	0013      	movs	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	055b      	lsls	r3, r3, #21
 80033d6:	4013      	ands	r3, r2
 80033d8:	d100      	bne.n	80033dc <HAL_GPIO_Init+0x174>
 80033da:	e09a      	b.n	8003512 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033dc:	4b54      	ldr	r3, [pc, #336]	; (8003530 <HAL_GPIO_Init+0x2c8>)
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_GPIO_Init+0x2c8>)
 80033e2:	2101      	movs	r1, #1
 80033e4:	430a      	orrs	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]
 80033e8:	4b51      	ldr	r3, [pc, #324]	; (8003530 <HAL_GPIO_Init+0x2c8>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2201      	movs	r2, #1
 80033ee:	4013      	ands	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033f4:	4a4f      	ldr	r2, [pc, #316]	; (8003534 <HAL_GPIO_Init+0x2cc>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	3302      	adds	r3, #2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	589b      	ldr	r3, [r3, r2]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2203      	movs	r2, #3
 8003406:	4013      	ands	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	409a      	lsls	r2, r3
 800340e:	0013      	movs	r3, r2
 8003410:	43da      	mvns	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	2390      	movs	r3, #144	; 0x90
 800341c:	05db      	lsls	r3, r3, #23
 800341e:	429a      	cmp	r2, r3
 8003420:	d013      	beq.n	800344a <HAL_GPIO_Init+0x1e2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a44      	ldr	r2, [pc, #272]	; (8003538 <HAL_GPIO_Init+0x2d0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00d      	beq.n	8003446 <HAL_GPIO_Init+0x1de>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a43      	ldr	r2, [pc, #268]	; (800353c <HAL_GPIO_Init+0x2d4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <HAL_GPIO_Init+0x1da>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a42      	ldr	r2, [pc, #264]	; (8003540 <HAL_GPIO_Init+0x2d8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_GPIO_Init+0x1d6>
 800343a:	2303      	movs	r3, #3
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x1e4>
 800343e:	2305      	movs	r3, #5
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x1e4>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x1e4>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x1e4>
 800344a:	2300      	movs	r3, #0
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	2103      	movs	r1, #3
 8003450:	400a      	ands	r2, r1
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800345c:	4935      	ldr	r1, [pc, #212]	; (8003534 <HAL_GPIO_Init+0x2cc>)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_GPIO_Init+0x2dc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	43da      	mvns	r2, r3
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	025b      	lsls	r3, r3, #9
 8003482:	4013      	ands	r3, r2
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800348e:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_GPIO_Init+0x2dc>)
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_GPIO_Init+0x2dc>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	43da      	mvns	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	029b      	lsls	r3, r3, #10
 80034ac:	4013      	ands	r3, r2
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034b8:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_GPIO_Init+0x2dc>)
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034be:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_GPIO_Init+0x2dc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43da      	mvns	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	035b      	lsls	r3, r3, #13
 80034d6:	4013      	ands	r3, r2
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_GPIO_Init+0x2dc>)
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80034e8:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_GPIO_Init+0x2dc>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	039b      	lsls	r3, r3, #14
 8003500:	4013      	ands	r3, r2
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_GPIO_Init+0x2dc>)
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3301      	adds	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	40da      	lsrs	r2, r3
 8003520:	1e13      	subs	r3, r2, #0
 8003522:	d000      	beq.n	8003526 <HAL_GPIO_Init+0x2be>
 8003524:	e6a8      	b.n	8003278 <HAL_GPIO_Init+0x10>
  } 
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b006      	add	sp, #24
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	40010000 	.word	0x40010000
 8003538:	48000400 	.word	0x48000400
 800353c:	48000800 	.word	0x48000800
 8003540:	48000c00 	.word	0x48000c00
 8003544:	40010400 	.word	0x40010400

08003548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	000a      	movs	r2, r1
 8003552:	1cbb      	adds	r3, r7, #2
 8003554:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	1cba      	adds	r2, r7, #2
 800355c:	8812      	ldrh	r2, [r2, #0]
 800355e:	4013      	ands	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003562:	230f      	movs	r3, #15
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e003      	b.n	8003574 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800356c:	230f      	movs	r3, #15
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003574:	230f      	movs	r3, #15
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	781b      	ldrb	r3, [r3, #0]
  }
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b004      	add	sp, #16
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	0008      	movs	r0, r1
 800358c:	0011      	movs	r1, r2
 800358e:	1cbb      	adds	r3, r7, #2
 8003590:	1c02      	adds	r2, r0, #0
 8003592:	801a      	strh	r2, [r3, #0]
 8003594:	1c7b      	adds	r3, r7, #1
 8003596:	1c0a      	adds	r2, r1, #0
 8003598:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800359a:	1c7b      	adds	r3, r7, #1
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035a2:	1cbb      	adds	r3, r7, #2
 80035a4:	881a      	ldrh	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035aa:	e003      	b.n	80035b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ac:	1cbb      	adds	r3, r7, #2
 80035ae:	881a      	ldrh	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e082      	b.n	80036d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2241      	movs	r2, #65	; 0x41
 80035d2:	5c9b      	ldrb	r3, [r3, r2]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d107      	bne.n	80035ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2240      	movs	r2, #64	; 0x40
 80035de:	2100      	movs	r1, #0
 80035e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7fe ff51 	bl	800248c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2241      	movs	r2, #65	; 0x41
 80035ee:	2124      	movs	r1, #36	; 0x24
 80035f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	438a      	bics	r2, r1
 8003600:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4934      	ldr	r1, [pc, #208]	; (80036dc <HAL_I2C_Init+0x120>)
 800360c:	400a      	ands	r2, r1
 800360e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4931      	ldr	r1, [pc, #196]	; (80036e0 <HAL_I2C_Init+0x124>)
 800361c:	400a      	ands	r2, r1
 800361e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d108      	bne.n	800363a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	0209      	lsls	r1, r1, #8
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	e007      	b.n	800364a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2184      	movs	r1, #132	; 0x84
 8003644:	0209      	lsls	r1, r1, #8
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d104      	bne.n	800365c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	491f      	ldr	r1, [pc, #124]	; (80036e4 <HAL_I2C_Init+0x128>)
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_I2C_Init+0x124>)
 8003678:	400a      	ands	r2, r1
 800367a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	431a      	orrs	r2, r3
 8003686:	0011      	movs	r1, r2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	021a      	lsls	r2, r3, #8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69d9      	ldr	r1, [r3, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1a      	ldr	r2, [r3, #32]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	430a      	orrs	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2241      	movs	r2, #65	; 0x41
 80036c0:	2120      	movs	r1, #32
 80036c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2242      	movs	r2, #66	; 0x42
 80036ce:	2100      	movs	r1, #0
 80036d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	f0ffffff 	.word	0xf0ffffff
 80036e0:	ffff7fff 	.word	0xffff7fff
 80036e4:	02008000 	.word	0x02008000

080036e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	000c      	movs	r4, r1
 80036f2:	0010      	movs	r0, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	230a      	movs	r3, #10
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	1c22      	adds	r2, r4, #0
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	2308      	movs	r3, #8
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	1c02      	adds	r2, r0, #0
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	1dbb      	adds	r3, r7, #6
 8003708:	1c0a      	adds	r2, r1, #0
 800370a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2241      	movs	r2, #65	; 0x41
 8003710:	5c9b      	ldrb	r3, [r3, r2]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	d000      	beq.n	800371a <HAL_I2C_Mem_Write+0x32>
 8003718:	e10c      	b.n	8003934 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_I2C_Mem_Write+0x42>
 8003720:	232c      	movs	r3, #44	; 0x2c
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0ff      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2240      	movs	r2, #64	; 0x40
 800373a:	5c9b      	ldrb	r3, [r3, r2]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_I2C_Mem_Write+0x5c>
 8003740:	2302      	movs	r3, #2
 8003742:	e0f8      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2240      	movs	r2, #64	; 0x40
 8003748:	2101      	movs	r1, #1
 800374a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800374c:	f7ff fcb0 	bl	80030b0 <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	0219      	lsls	r1, r3, #8
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2319      	movs	r3, #25
 8003760:	2201      	movs	r2, #1
 8003762:	f000 fb0b 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003766:	1e03      	subs	r3, r0, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0e3      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2241      	movs	r2, #65	; 0x41
 8003772:	2121      	movs	r1, #33	; 0x21
 8003774:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2242      	movs	r2, #66	; 0x42
 800377a:	2140      	movs	r1, #64	; 0x40
 800377c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	222c      	movs	r2, #44	; 0x2c
 800378e:	18ba      	adds	r2, r7, r2
 8003790:	8812      	ldrh	r2, [r2, #0]
 8003792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800379a:	1dbb      	adds	r3, r7, #6
 800379c:	881c      	ldrh	r4, [r3, #0]
 800379e:	2308      	movs	r3, #8
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	230a      	movs	r3, #10
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	8819      	ldrh	r1, [r3, #0]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	0023      	movs	r3, r4
 80037b6:	f000 f9f9 	bl	8003bac <I2C_RequestMemoryWrite>
 80037ba:	1e03      	subs	r3, r0, #0
 80037bc:	d005      	beq.n	80037ca <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	2100      	movs	r1, #0
 80037c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0b5      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2bff      	cmp	r3, #255	; 0xff
 80037d2:	d911      	bls.n	80037f8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	22ff      	movs	r2, #255	; 0xff
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	045c      	lsls	r4, r3, #17
 80037e4:	230a      	movs	r3, #10
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	8819      	ldrh	r1, [r3, #0]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	2300      	movs	r3, #0
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	0023      	movs	r3, r4
 80037f2:	f000 fbe3 	bl	8003fbc <I2C_TransferConfig>
 80037f6:	e012      	b.n	800381e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	b2da      	uxtb	r2, r3
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	049c      	lsls	r4, r3, #18
 800380c:	230a      	movs	r3, #10
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	8819      	ldrh	r1, [r3, #0]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	2300      	movs	r3, #0
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	0023      	movs	r3, r4
 800381a:	f000 fbcf 	bl	8003fbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	0018      	movs	r0, r3
 8003826:	f000 fae8 	bl	8003dfa <I2C_WaitOnTXISFlagUntilTimeout>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e081      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d03a      	beq.n	80038e2 <HAL_I2C_Mem_Write+0x1fa>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d136      	bne.n	80038e2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	0013      	movs	r3, r2
 800387e:	2200      	movs	r2, #0
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	f000 fa7b 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003886:	1e03      	subs	r3, r0, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e053      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2bff      	cmp	r3, #255	; 0xff
 8003896:	d911      	bls.n	80038bc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	22ff      	movs	r2, #255	; 0xff
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	045c      	lsls	r4, r3, #17
 80038a8:	230a      	movs	r3, #10
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	8819      	ldrh	r1, [r3, #0]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	2300      	movs	r3, #0
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	0023      	movs	r3, r4
 80038b6:	f000 fb81 	bl	8003fbc <I2C_TransferConfig>
 80038ba:	e012      	b.n	80038e2 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	049c      	lsls	r4, r3, #18
 80038d0:	230a      	movs	r3, #10
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	8819      	ldrh	r1, [r3, #0]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	0023      	movs	r3, r4
 80038de:	f000 fb6d 	bl	8003fbc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d198      	bne.n	800381e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 fac0 	bl	8003e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e01a      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2220      	movs	r2, #32
 8003906:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	490b      	ldr	r1, [pc, #44]	; (8003940 <HAL_I2C_Mem_Write+0x258>)
 8003914:	400a      	ands	r2, r1
 8003916:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2241      	movs	r2, #65	; 0x41
 800391c:	2120      	movs	r1, #32
 800391e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2242      	movs	r2, #66	; 0x42
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2240      	movs	r2, #64	; 0x40
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
  }
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b007      	add	sp, #28
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	fe00e800 	.word	0xfe00e800

08003944 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	000c      	movs	r4, r1
 800394e:	0010      	movs	r0, r2
 8003950:	0019      	movs	r1, r3
 8003952:	230a      	movs	r3, #10
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	1c22      	adds	r2, r4, #0
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	2308      	movs	r3, #8
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	1c02      	adds	r2, r0, #0
 8003960:	801a      	strh	r2, [r3, #0]
 8003962:	1dbb      	adds	r3, r7, #6
 8003964:	1c0a      	adds	r2, r1, #0
 8003966:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2241      	movs	r2, #65	; 0x41
 800396c:	5c9b      	ldrb	r3, [r3, r2]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b20      	cmp	r3, #32
 8003972:	d000      	beq.n	8003976 <HAL_I2C_Mem_Read+0x32>
 8003974:	e110      	b.n	8003b98 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_I2C_Mem_Read+0x42>
 800397c:	232c      	movs	r3, #44	; 0x2c
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d105      	bne.n	8003992 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	0092      	lsls	r2, r2, #2
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e103      	b.n	8003b9a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_I2C_Mem_Read+0x5c>
 800399c:	2302      	movs	r3, #2
 800399e:	e0fc      	b.n	8003b9a <HAL_I2C_Mem_Read+0x256>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2240      	movs	r2, #64	; 0x40
 80039a4:	2101      	movs	r1, #1
 80039a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039a8:	f7ff fb82 	bl	80030b0 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	0219      	lsls	r1, r3, #8
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2319      	movs	r3, #25
 80039bc:	2201      	movs	r2, #1
 80039be:	f000 f9dd 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 80039c2:	1e03      	subs	r3, r0, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0e7      	b.n	8003b9a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2241      	movs	r2, #65	; 0x41
 80039ce:	2122      	movs	r1, #34	; 0x22
 80039d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2242      	movs	r2, #66	; 0x42
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	222c      	movs	r2, #44	; 0x2c
 80039ea:	18ba      	adds	r2, r7, r2
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039f6:	1dbb      	adds	r3, r7, #6
 80039f8:	881c      	ldrh	r4, [r3, #0]
 80039fa:	2308      	movs	r3, #8
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	230a      	movs	r3, #10
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	8819      	ldrh	r1, [r3, #0]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	0023      	movs	r3, r4
 8003a12:	f000 f92f 	bl	8003c74 <I2C_RequestMemoryRead>
 8003a16:	1e03      	subs	r3, r0, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	2100      	movs	r1, #0
 8003a20:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0b9      	b.n	8003b9a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2bff      	cmp	r3, #255	; 0xff
 8003a2e:	d911      	bls.n	8003a54 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	045c      	lsls	r4, r3, #17
 8003a40:	230a      	movs	r3, #10
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	8819      	ldrh	r1, [r3, #0]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <HAL_I2C_Mem_Read+0x260>)
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	0023      	movs	r3, r4
 8003a4e:	f000 fab5 	bl	8003fbc <I2C_TransferConfig>
 8003a52:	e012      	b.n	8003a7a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	049c      	lsls	r4, r3, #18
 8003a68:	230a      	movs	r3, #10
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	8819      	ldrh	r1, [r3, #0]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <HAL_I2C_Mem_Read+0x260>)
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	0023      	movs	r3, r4
 8003a76:	f000 faa1 	bl	8003fbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	0013      	movs	r3, r2
 8003a84:	2200      	movs	r2, #0
 8003a86:	2104      	movs	r1, #4
 8003a88:	f000 f978 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	1e03      	subs	r3, r0, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e082      	b.n	8003b9a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d03a      	beq.n	8003b46 <HAL_I2C_Mem_Read+0x202>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d136      	bne.n	8003b46 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	0013      	movs	r3, r2
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	f000 f949 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e053      	b.n	8003b9a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2bff      	cmp	r3, #255	; 0xff
 8003afa:	d911      	bls.n	8003b20 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	22ff      	movs	r2, #255	; 0xff
 8003b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	045c      	lsls	r4, r3, #17
 8003b0c:	230a      	movs	r3, #10
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	8819      	ldrh	r1, [r3, #0]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	2300      	movs	r3, #0
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	0023      	movs	r3, r4
 8003b1a:	f000 fa4f 	bl	8003fbc <I2C_TransferConfig>
 8003b1e:	e012      	b.n	8003b46 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	049c      	lsls	r4, r3, #18
 8003b34:	230a      	movs	r3, #10
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	8819      	ldrh	r1, [r3, #0]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	0023      	movs	r3, r4
 8003b42:	f000 fa3b 	bl	8003fbc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d194      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f98e 	bl	8003e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b5c:	1e03      	subs	r3, r0, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e01a      	b.n	8003b9a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	490c      	ldr	r1, [pc, #48]	; (8003ba8 <HAL_I2C_Mem_Read+0x264>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2241      	movs	r2, #65	; 0x41
 8003b80:	2120      	movs	r1, #32
 8003b82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2242      	movs	r2, #66	; 0x42
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2240      	movs	r2, #64	; 0x40
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b007      	add	sp, #28
 8003ba0:	bd90      	pop	{r4, r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	80002400 	.word	0x80002400
 8003ba8:	fe00e800 	.word	0xfe00e800

08003bac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b5b0      	push	{r4, r5, r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	000c      	movs	r4, r1
 8003bb6:	0010      	movs	r0, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	250a      	movs	r5, #10
 8003bbc:	197b      	adds	r3, r7, r5
 8003bbe:	1c22      	adds	r2, r4, #0
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	1c02      	adds	r2, r0, #0
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	1dbb      	adds	r3, r7, #6
 8003bcc:	1c0a      	adds	r2, r1, #0
 8003bce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bd0:	1dbb      	adds	r3, r7, #6
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	045c      	lsls	r4, r3, #17
 8003bda:	197b      	adds	r3, r7, r5
 8003bdc:	8819      	ldrh	r1, [r3, #0]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <I2C_RequestMemoryWrite+0xc4>)
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	0023      	movs	r3, r4
 8003be6:	f000 f9e9 	bl	8003fbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	6a39      	ldr	r1, [r7, #32]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f000 f902 	bl	8003dfa <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf6:	1e03      	subs	r3, r0, #0
 8003bf8:	d001      	beq.n	8003bfe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e033      	b.n	8003c66 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bfe:	1dbb      	adds	r3, r7, #6
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d107      	bne.n	8003c16 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c06:	2308      	movs	r3, #8
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	629a      	str	r2, [r3, #40]	; 0x28
 8003c14:	e019      	b.n	8003c4a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c16:	2308      	movs	r3, #8
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2a:	6a39      	ldr	r1, [r7, #32]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 f8e3 	bl	8003dfa <I2C_WaitOnTXISFlagUntilTimeout>
 8003c34:	1e03      	subs	r3, r0, #0
 8003c36:	d001      	beq.n	8003c3c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e014      	b.n	8003c66 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4a:	6a3a      	ldr	r2, [r7, #32]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	0013      	movs	r3, r2
 8003c54:	2200      	movs	r2, #0
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	f000 f890 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003c5c:	1e03      	subs	r3, r0, #0
 8003c5e:	d001      	beq.n	8003c64 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b004      	add	sp, #16
 8003c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	80002000 	.word	0x80002000

08003c74 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b5b0      	push	{r4, r5, r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	000c      	movs	r4, r1
 8003c7e:	0010      	movs	r0, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	250a      	movs	r5, #10
 8003c84:	197b      	adds	r3, r7, r5
 8003c86:	1c22      	adds	r2, r4, #0
 8003c88:	801a      	strh	r2, [r3, #0]
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	1c02      	adds	r2, r0, #0
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	1dbb      	adds	r3, r7, #6
 8003c94:	1c0a      	adds	r2, r1, #0
 8003c96:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c98:	1dbb      	adds	r3, r7, #6
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	197b      	adds	r3, r7, r5
 8003ca0:	8819      	ldrh	r1, [r3, #0]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <I2C_RequestMemoryRead+0xc0>)
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f000 f987 	bl	8003fbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	6a39      	ldr	r1, [r7, #32]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f000 f8a0 	bl	8003dfa <I2C_WaitOnTXISFlagUntilTimeout>
 8003cba:	1e03      	subs	r3, r0, #0
 8003cbc:	d001      	beq.n	8003cc2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e033      	b.n	8003d2a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cc2:	1dbb      	adds	r3, r7, #6
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d107      	bne.n	8003cda <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cca:	2308      	movs	r3, #8
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd8:	e019      	b.n	8003d0e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cda:	2308      	movs	r3, #8
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	6a39      	ldr	r1, [r7, #32]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f000 f881 	bl	8003dfa <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf8:	1e03      	subs	r3, r0, #0
 8003cfa:	d001      	beq.n	8003d00 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e014      	b.n	8003d2a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d00:	2308      	movs	r3, #8
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a3a      	ldr	r2, [r7, #32]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	0013      	movs	r3, r2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2140      	movs	r1, #64	; 0x40
 8003d1c:	f000 f82e 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003d20:	1e03      	subs	r3, r0, #0
 8003d22:	d001      	beq.n	8003d28 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bdb0      	pop	{r4, r5, r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	80002000 	.word	0x80002000

08003d38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2202      	movs	r2, #2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d103      	bne.n	8003d56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d007      	beq.n	8003d74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
  }
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	1dfb      	adds	r3, r7, #7
 8003d8a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d8c:	e021      	b.n	8003dd2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	d01e      	beq.n	8003dd2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d94:	f7ff f98c 	bl	80030b0 <HAL_GetTick>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d113      	bne.n	8003dd2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	2220      	movs	r2, #32
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2241      	movs	r2, #65	; 0x41
 8003dba:	2120      	movs	r1, #32
 8003dbc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2242      	movs	r2, #66	; 0x42
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2240      	movs	r2, #64	; 0x40
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00f      	b.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	425a      	negs	r2, r3
 8003de2:	4153      	adcs	r3, r2
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	001a      	movs	r2, r3
 8003de8:	1dfb      	adds	r3, r7, #7
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0ce      	beq.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b004      	add	sp, #16
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e06:	e02b      	b.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 f86e 	bl	8003ef0 <I2C_IsAcknowledgeFailed>
 8003e14:	1e03      	subs	r3, r0, #0
 8003e16:	d001      	beq.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e029      	b.n	8003e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	d01e      	beq.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7ff f945 	bl	80030b0 <HAL_GetTick>
 8003e26:	0002      	movs	r2, r0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d113      	bne.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2241      	movs	r2, #65	; 0x41
 8003e48:	2120      	movs	r1, #32
 8003e4a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2242      	movs	r2, #66	; 0x42
 8003e50:	2100      	movs	r1, #0
 8003e52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2240      	movs	r2, #64	; 0x40
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e007      	b.n	8003e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2202      	movs	r2, #2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d1cc      	bne.n	8003e08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	0018      	movs	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b004      	add	sp, #16
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e84:	e028      	b.n	8003ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 f82f 	bl	8003ef0 <I2C_IsAcknowledgeFailed>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e026      	b.n	8003ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7ff f909 	bl	80030b0 <HAL_GetTick>
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d113      	bne.n	8003ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2241      	movs	r2, #65	; 0x41
 8003ec0:	2120      	movs	r1, #32
 8003ec2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2242      	movs	r2, #66	; 0x42
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2240      	movs	r2, #64	; 0x40
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e007      	b.n	8003ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d1cf      	bne.n	8003e86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b004      	add	sp, #16
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2210      	movs	r2, #16
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d151      	bne.n	8003fae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f0a:	e021      	b.n	8003f50 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	d01e      	beq.n	8003f50 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7ff f8cd 	bl	80030b0 <HAL_GetTick>
 8003f16:	0002      	movs	r2, r0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d302      	bcc.n	8003f28 <I2C_IsAcknowledgeFailed+0x38>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d113      	bne.n	8003f50 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2241      	movs	r2, #65	; 0x41
 8003f38:	2120      	movs	r1, #32
 8003f3a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2242      	movs	r2, #66	; 0x42
 8003f40:	2100      	movs	r1, #0
 8003f42:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2240      	movs	r2, #64	; 0x40
 8003f48:	2100      	movs	r1, #0
 8003f4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e02f      	b.n	8003fb0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2220      	movs	r2, #32
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d1d6      	bne.n	8003f0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2210      	movs	r2, #16
 8003f64:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7ff fee1 	bl	8003d38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	490d      	ldr	r1, [pc, #52]	; (8003fb8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2241      	movs	r2, #65	; 0x41
 8003f96:	2120      	movs	r1, #32
 8003f98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2242      	movs	r2, #66	; 0x42
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2240      	movs	r2, #64	; 0x40
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b004      	add	sp, #16
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	fe00e800 	.word	0xfe00e800

08003fbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	0008      	movs	r0, r1
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	607b      	str	r3, [r7, #4]
 8003fca:	240a      	movs	r4, #10
 8003fcc:	193b      	adds	r3, r7, r4
 8003fce:	1c02      	adds	r2, r0, #0
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	2009      	movs	r0, #9
 8003fd4:	183b      	adds	r3, r7, r0
 8003fd6:	1c0a      	adds	r2, r1, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	6a3a      	ldr	r2, [r7, #32]
 8003fe2:	0d51      	lsrs	r1, r2, #21
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	00d2      	lsls	r2, r2, #3
 8003fe8:	400a      	ands	r2, r1
 8003fea:	490e      	ldr	r1, [pc, #56]	; (8004024 <I2C_TransferConfig+0x68>)
 8003fec:	430a      	orrs	r2, r1
 8003fee:	43d2      	mvns	r2, r2
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	193b      	adds	r3, r7, r4
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	059b      	lsls	r3, r3, #22
 8003ffa:	0d9a      	lsrs	r2, r3, #22
 8003ffc:	183b      	adds	r3, r7, r0
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	0418      	lsls	r0, r3, #16
 8004002:	23ff      	movs	r3, #255	; 0xff
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	4003      	ands	r3, r0
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	431a      	orrs	r2, r3
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b005      	add	sp, #20
 8004020:	bd90      	pop	{r4, r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	03ff63ff 	.word	0x03ff63ff

08004028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2241      	movs	r2, #65	; 0x41
 8004036:	5c9b      	ldrb	r3, [r3, r2]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	d138      	bne.n	80040b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2240      	movs	r2, #64	; 0x40
 8004042:	5c9b      	ldrb	r3, [r3, r2]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004048:	2302      	movs	r3, #2
 800404a:	e032      	b.n	80040b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	2101      	movs	r1, #1
 8004052:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2241      	movs	r2, #65	; 0x41
 8004058:	2124      	movs	r1, #36	; 0x24
 800405a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2101      	movs	r1, #1
 8004068:	438a      	bics	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4911      	ldr	r1, [pc, #68]	; (80040bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004078:	400a      	ands	r2, r1
 800407a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6819      	ldr	r1, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	430a      	orrs	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2241      	movs	r2, #65	; 0x41
 80040a0:	2120      	movs	r1, #32
 80040a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2240      	movs	r2, #64	; 0x40
 80040a8:	2100      	movs	r1, #0
 80040aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b002      	add	sp, #8
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	ffffefff 	.word	0xffffefff

080040c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2241      	movs	r2, #65	; 0x41
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d139      	bne.n	800414a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2240      	movs	r2, #64	; 0x40
 80040da:	5c9b      	ldrb	r3, [r3, r2]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e033      	b.n	800414c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2240      	movs	r2, #64	; 0x40
 80040e8:	2101      	movs	r1, #1
 80040ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2241      	movs	r2, #65	; 0x41
 80040f0:	2124      	movs	r1, #36	; 0x24
 80040f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2101      	movs	r1, #1
 8004100:	438a      	bics	r2, r1
 8004102:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a11      	ldr	r2, [pc, #68]	; (8004154 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004110:	4013      	ands	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2101      	movs	r1, #1
 8004132:	430a      	orrs	r2, r1
 8004134:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2241      	movs	r2, #65	; 0x41
 800413a:	2120      	movs	r1, #32
 800413c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2240      	movs	r2, #64	; 0x40
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
  }
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b004      	add	sp, #16
 8004152:	bd80      	pop	{r7, pc}
 8004154:	fffff0ff 	.word	0xfffff0ff

08004158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e301      	b.n	800476e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2201      	movs	r2, #1
 8004170:	4013      	ands	r3, r2
 8004172:	d100      	bne.n	8004176 <HAL_RCC_OscConfig+0x1e>
 8004174:	e08d      	b.n	8004292 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004176:	4bc3      	ldr	r3, [pc, #780]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	220c      	movs	r2, #12
 800417c:	4013      	ands	r3, r2
 800417e:	2b04      	cmp	r3, #4
 8004180:	d00e      	beq.n	80041a0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004182:	4bc0      	ldr	r3, [pc, #768]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	220c      	movs	r2, #12
 8004188:	4013      	ands	r3, r2
 800418a:	2b08      	cmp	r3, #8
 800418c:	d116      	bne.n	80041bc <HAL_RCC_OscConfig+0x64>
 800418e:	4bbd      	ldr	r3, [pc, #756]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	025b      	lsls	r3, r3, #9
 8004196:	401a      	ands	r2, r3
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	025b      	lsls	r3, r3, #9
 800419c:	429a      	cmp	r2, r3
 800419e:	d10d      	bne.n	80041bc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	4bb8      	ldr	r3, [pc, #736]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	029b      	lsls	r3, r3, #10
 80041a8:	4013      	ands	r3, r2
 80041aa:	d100      	bne.n	80041ae <HAL_RCC_OscConfig+0x56>
 80041ac:	e070      	b.n	8004290 <HAL_RCC_OscConfig+0x138>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d000      	beq.n	80041b8 <HAL_RCC_OscConfig+0x60>
 80041b6:	e06b      	b.n	8004290 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e2d8      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_OscConfig+0x7c>
 80041c4:	4baf      	ldr	r3, [pc, #700]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4bae      	ldr	r3, [pc, #696]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80041ca:	2180      	movs	r1, #128	; 0x80
 80041cc:	0249      	lsls	r1, r1, #9
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e02f      	b.n	8004234 <HAL_RCC_OscConfig+0xdc>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10c      	bne.n	80041f6 <HAL_RCC_OscConfig+0x9e>
 80041dc:	4ba9      	ldr	r3, [pc, #676]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4ba8      	ldr	r3, [pc, #672]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80041e2:	49a9      	ldr	r1, [pc, #676]	; (8004488 <HAL_RCC_OscConfig+0x330>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	4ba6      	ldr	r3, [pc, #664]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4ba5      	ldr	r3, [pc, #660]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80041ee:	49a7      	ldr	r1, [pc, #668]	; (800448c <HAL_RCC_OscConfig+0x334>)
 80041f0:	400a      	ands	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e01e      	b.n	8004234 <HAL_RCC_OscConfig+0xdc>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	d10e      	bne.n	800421c <HAL_RCC_OscConfig+0xc4>
 80041fe:	4ba1      	ldr	r3, [pc, #644]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4ba0      	ldr	r3, [pc, #640]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004204:	2180      	movs	r1, #128	; 0x80
 8004206:	02c9      	lsls	r1, r1, #11
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	4b9d      	ldr	r3, [pc, #628]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b9c      	ldr	r3, [pc, #624]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004212:	2180      	movs	r1, #128	; 0x80
 8004214:	0249      	lsls	r1, r1, #9
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0xdc>
 800421c:	4b99      	ldr	r3, [pc, #612]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b98      	ldr	r3, [pc, #608]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004222:	4999      	ldr	r1, [pc, #612]	; (8004488 <HAL_RCC_OscConfig+0x330>)
 8004224:	400a      	ands	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	4b96      	ldr	r3, [pc, #600]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b95      	ldr	r3, [pc, #596]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800422e:	4997      	ldr	r1, [pc, #604]	; (800448c <HAL_RCC_OscConfig+0x334>)
 8004230:	400a      	ands	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d014      	beq.n	8004266 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe ff38 	bl	80030b0 <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004246:	f7fe ff33 	bl	80030b0 <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	; 0x64
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e28a      	b.n	800476e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004258:	4b8a      	ldr	r3, [pc, #552]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	029b      	lsls	r3, r3, #10
 8004260:	4013      	ands	r3, r2
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0xee>
 8004264:	e015      	b.n	8004292 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004266:	f7fe ff23 	bl	80030b0 <HAL_GetTick>
 800426a:	0003      	movs	r3, r0
 800426c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004270:	f7fe ff1e 	bl	80030b0 <HAL_GetTick>
 8004274:	0002      	movs	r2, r0
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e275      	b.n	800476e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	4b80      	ldr	r3, [pc, #512]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	029b      	lsls	r3, r3, #10
 800428a:	4013      	ands	r3, r2
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x118>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2202      	movs	r2, #2
 8004298:	4013      	ands	r3, r2
 800429a:	d100      	bne.n	800429e <HAL_RCC_OscConfig+0x146>
 800429c:	e069      	b.n	8004372 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800429e:	4b79      	ldr	r3, [pc, #484]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	220c      	movs	r2, #12
 80042a4:	4013      	ands	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042a8:	4b76      	ldr	r3, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	220c      	movs	r2, #12
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d11c      	bne.n	80042ee <HAL_RCC_OscConfig+0x196>
 80042b4:	4b73      	ldr	r3, [pc, #460]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	025b      	lsls	r3, r3, #9
 80042bc:	4013      	ands	r3, r2
 80042be:	d116      	bne.n	80042ee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c0:	4b70      	ldr	r3, [pc, #448]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2202      	movs	r2, #2
 80042c6:	4013      	ands	r3, r2
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x17e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e24b      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b6b      	ldr	r3, [pc, #428]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	22f8      	movs	r2, #248	; 0xf8
 80042dc:	4393      	bics	r3, r2
 80042de:	0019      	movs	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	00da      	lsls	r2, r3, #3
 80042e6:	4b67      	ldr	r3, [pc, #412]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ec:	e041      	b.n	8004372 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d024      	beq.n	8004340 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f6:	4b63      	ldr	r3, [pc, #396]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80042fc:	2101      	movs	r1, #1
 80042fe:	430a      	orrs	r2, r1
 8004300:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7fe fed5 	bl	80030b0 <HAL_GetTick>
 8004306:	0003      	movs	r3, r0
 8004308:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430c:	f7fe fed0 	bl	80030b0 <HAL_GetTick>
 8004310:	0002      	movs	r2, r0
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e227      	b.n	800476e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	4b59      	ldr	r3, [pc, #356]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2202      	movs	r2, #2
 8004324:	4013      	ands	r3, r2
 8004326:	d0f1      	beq.n	800430c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004328:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	22f8      	movs	r2, #248	; 0xf8
 800432e:	4393      	bics	r3, r2
 8004330:	0019      	movs	r1, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00da      	lsls	r2, r3, #3
 8004338:	4b52      	ldr	r3, [pc, #328]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800433a:	430a      	orrs	r2, r1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e018      	b.n	8004372 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004340:	4b50      	ldr	r3, [pc, #320]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b4f      	ldr	r3, [pc, #316]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004346:	2101      	movs	r1, #1
 8004348:	438a      	bics	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434c:	f7fe feb0 	bl	80030b0 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004356:	f7fe feab 	bl	80030b0 <HAL_GetTick>
 800435a:	0002      	movs	r2, r0
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e202      	b.n	800476e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004368:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2202      	movs	r2, #2
 800436e:	4013      	ands	r3, r2
 8004370:	d1f1      	bne.n	8004356 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2208      	movs	r2, #8
 8004378:	4013      	ands	r3, r2
 800437a:	d036      	beq.n	80043ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d019      	beq.n	80043b8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004384:	4b3f      	ldr	r3, [pc, #252]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800438a:	2101      	movs	r1, #1
 800438c:	430a      	orrs	r2, r1
 800438e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7fe fe8e 	bl	80030b0 <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439a:	f7fe fe89 	bl	80030b0 <HAL_GetTick>
 800439e:	0002      	movs	r2, r0
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e1e0      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ac:	4b35      	ldr	r3, [pc, #212]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2202      	movs	r2, #2
 80043b2:	4013      	ands	r3, r2
 80043b4:	d0f1      	beq.n	800439a <HAL_RCC_OscConfig+0x242>
 80043b6:	e018      	b.n	80043ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b8:	4b32      	ldr	r3, [pc, #200]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80043ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80043be:	2101      	movs	r1, #1
 80043c0:	438a      	bics	r2, r1
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fe fe74 	bl	80030b0 <HAL_GetTick>
 80043c8:	0003      	movs	r3, r0
 80043ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fe fe6f 	bl	80030b0 <HAL_GetTick>
 80043d2:	0002      	movs	r2, r0
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e1c6      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	4b28      	ldr	r3, [pc, #160]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2202      	movs	r2, #2
 80043e6:	4013      	ands	r3, r2
 80043e8:	d1f1      	bne.n	80043ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2204      	movs	r2, #4
 80043f0:	4013      	ands	r3, r2
 80043f2:	d100      	bne.n	80043f6 <HAL_RCC_OscConfig+0x29e>
 80043f4:	e0b4      	b.n	8004560 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f6:	201f      	movs	r0, #31
 80043f8:	183b      	adds	r3, r7, r0
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b21      	ldr	r3, [pc, #132]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	055b      	lsls	r3, r3, #21
 8004406:	4013      	ands	r3, r2
 8004408:	d110      	bne.n	800442c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004410:	2180      	movs	r1, #128	; 0x80
 8004412:	0549      	lsls	r1, r1, #21
 8004414:	430a      	orrs	r2, r1
 8004416:	61da      	str	r2, [r3, #28]
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	055b      	lsls	r3, r3, #21
 8004420:	4013      	ands	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004426:	183b      	adds	r3, r7, r0
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	4b18      	ldr	r3, [pc, #96]	; (8004490 <HAL_RCC_OscConfig+0x338>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4013      	ands	r3, r2
 8004436:	d11a      	bne.n	800446e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004438:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_RCC_OscConfig+0x338>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b14      	ldr	r3, [pc, #80]	; (8004490 <HAL_RCC_OscConfig+0x338>)
 800443e:	2180      	movs	r1, #128	; 0x80
 8004440:	0049      	lsls	r1, r1, #1
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004446:	f7fe fe33 	bl	80030b0 <HAL_GetTick>
 800444a:	0003      	movs	r3, r0
 800444c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004450:	f7fe fe2e 	bl	80030b0 <HAL_GetTick>
 8004454:	0002      	movs	r2, r0
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e185      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_OscConfig+0x338>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4013      	ands	r3, r2
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10e      	bne.n	8004494 <HAL_RCC_OscConfig+0x33c>
 8004476:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 8004478:	6a1a      	ldr	r2, [r3, #32]
 800447a:	4b02      	ldr	r3, [pc, #8]	; (8004484 <HAL_RCC_OscConfig+0x32c>)
 800447c:	2101      	movs	r1, #1
 800447e:	430a      	orrs	r2, r1
 8004480:	621a      	str	r2, [r3, #32]
 8004482:	e035      	b.n	80044f0 <HAL_RCC_OscConfig+0x398>
 8004484:	40021000 	.word	0x40021000
 8004488:	fffeffff 	.word	0xfffeffff
 800448c:	fffbffff 	.word	0xfffbffff
 8004490:	40007000 	.word	0x40007000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10c      	bne.n	80044b6 <HAL_RCC_OscConfig+0x35e>
 800449c:	4bb6      	ldr	r3, [pc, #728]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	4bb5      	ldr	r3, [pc, #724]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044a2:	2101      	movs	r1, #1
 80044a4:	438a      	bics	r2, r1
 80044a6:	621a      	str	r2, [r3, #32]
 80044a8:	4bb3      	ldr	r3, [pc, #716]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	4bb2      	ldr	r3, [pc, #712]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044ae:	2104      	movs	r1, #4
 80044b0:	438a      	bics	r2, r1
 80044b2:	621a      	str	r2, [r3, #32]
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x398>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x380>
 80044be:	4bae      	ldr	r3, [pc, #696]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	4bad      	ldr	r3, [pc, #692]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044c4:	2104      	movs	r1, #4
 80044c6:	430a      	orrs	r2, r1
 80044c8:	621a      	str	r2, [r3, #32]
 80044ca:	4bab      	ldr	r3, [pc, #684]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	4baa      	ldr	r3, [pc, #680]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044d0:	2101      	movs	r1, #1
 80044d2:	430a      	orrs	r2, r1
 80044d4:	621a      	str	r2, [r3, #32]
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0x398>
 80044d8:	4ba7      	ldr	r3, [pc, #668]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044da:	6a1a      	ldr	r2, [r3, #32]
 80044dc:	4ba6      	ldr	r3, [pc, #664]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044de:	2101      	movs	r1, #1
 80044e0:	438a      	bics	r2, r1
 80044e2:	621a      	str	r2, [r3, #32]
 80044e4:	4ba4      	ldr	r3, [pc, #656]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	4ba3      	ldr	r3, [pc, #652]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80044ea:	2104      	movs	r1, #4
 80044ec:	438a      	bics	r2, r1
 80044ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d014      	beq.n	8004522 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f8:	f7fe fdda 	bl	80030b0 <HAL_GetTick>
 80044fc:	0003      	movs	r3, r0
 80044fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	e009      	b.n	8004516 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fe fdd5 	bl	80030b0 <HAL_GetTick>
 8004506:	0002      	movs	r2, r0
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	4a9b      	ldr	r2, [pc, #620]	; (800477c <HAL_RCC_OscConfig+0x624>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e12b      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	4b98      	ldr	r3, [pc, #608]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	2202      	movs	r2, #2
 800451c:	4013      	ands	r3, r2
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x3aa>
 8004520:	e013      	b.n	800454a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004522:	f7fe fdc5 	bl	80030b0 <HAL_GetTick>
 8004526:	0003      	movs	r3, r0
 8004528:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452a:	e009      	b.n	8004540 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fe fdc0 	bl	80030b0 <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	4a91      	ldr	r2, [pc, #580]	; (800477c <HAL_RCC_OscConfig+0x624>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e116      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004540:	4b8d      	ldr	r3, [pc, #564]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	2202      	movs	r2, #2
 8004546:	4013      	ands	r3, r2
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800454a:	231f      	movs	r3, #31
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	4b87      	ldr	r3, [pc, #540]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 800455a:	4989      	ldr	r1, [pc, #548]	; (8004780 <HAL_RCC_OscConfig+0x628>)
 800455c:	400a      	ands	r2, r1
 800455e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2210      	movs	r2, #16
 8004566:	4013      	ands	r3, r2
 8004568:	d063      	beq.n	8004632 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d12a      	bne.n	80045c8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004572:	4b81      	ldr	r3, [pc, #516]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004576:	4b80      	ldr	r3, [pc, #512]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004578:	2104      	movs	r1, #4
 800457a:	430a      	orrs	r2, r1
 800457c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800457e:	4b7e      	ldr	r3, [pc, #504]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004582:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004584:	2101      	movs	r1, #1
 8004586:	430a      	orrs	r2, r1
 8004588:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458a:	f7fe fd91 	bl	80030b0 <HAL_GetTick>
 800458e:	0003      	movs	r3, r0
 8004590:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004594:	f7fe fd8c 	bl	80030b0 <HAL_GetTick>
 8004598:	0002      	movs	r2, r0
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0e3      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045a6:	4b74      	ldr	r3, [pc, #464]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	2202      	movs	r2, #2
 80045ac:	4013      	ands	r3, r2
 80045ae:	d0f1      	beq.n	8004594 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80045b0:	4b71      	ldr	r3, [pc, #452]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	22f8      	movs	r2, #248	; 0xf8
 80045b6:	4393      	bics	r3, r2
 80045b8:	0019      	movs	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	00da      	lsls	r2, r3, #3
 80045c0:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80045c2:	430a      	orrs	r2, r1
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34
 80045c6:	e034      	b.n	8004632 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	3305      	adds	r3, #5
 80045ce:	d111      	bne.n	80045f4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80045d0:	4b69      	ldr	r3, [pc, #420]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80045d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d4:	4b68      	ldr	r3, [pc, #416]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80045d6:	2104      	movs	r1, #4
 80045d8:	438a      	bics	r2, r1
 80045da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80045dc:	4b66      	ldr	r3, [pc, #408]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e0:	22f8      	movs	r2, #248	; 0xf8
 80045e2:	4393      	bics	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	00da      	lsls	r2, r3, #3
 80045ec:	4b62      	ldr	r3, [pc, #392]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80045ee:	430a      	orrs	r2, r1
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34
 80045f2:	e01e      	b.n	8004632 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80045f4:	4b60      	ldr	r3, [pc, #384]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80045f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f8:	4b5f      	ldr	r3, [pc, #380]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80045fa:	2104      	movs	r1, #4
 80045fc:	430a      	orrs	r2, r1
 80045fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004600:	4b5d      	ldr	r3, [pc, #372]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004604:	4b5c      	ldr	r3, [pc, #368]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004606:	2101      	movs	r1, #1
 8004608:	438a      	bics	r2, r1
 800460a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460c:	f7fe fd50 	bl	80030b0 <HAL_GetTick>
 8004610:	0003      	movs	r3, r0
 8004612:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004616:	f7fe fd4b 	bl	80030b0 <HAL_GetTick>
 800461a:	0002      	movs	r2, r0
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e0a2      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004628:	4b53      	ldr	r3, [pc, #332]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	2202      	movs	r2, #2
 800462e:	4013      	ands	r3, r2
 8004630:	d1f1      	bne.n	8004616 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d100      	bne.n	800463c <HAL_RCC_OscConfig+0x4e4>
 800463a:	e097      	b.n	800476c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800463c:	4b4e      	ldr	r3, [pc, #312]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	220c      	movs	r2, #12
 8004642:	4013      	ands	r3, r2
 8004644:	2b08      	cmp	r3, #8
 8004646:	d100      	bne.n	800464a <HAL_RCC_OscConfig+0x4f2>
 8004648:	e06b      	b.n	8004722 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d14c      	bne.n	80046ec <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004652:	4b49      	ldr	r3, [pc, #292]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b48      	ldr	r3, [pc, #288]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004658:	494a      	ldr	r1, [pc, #296]	; (8004784 <HAL_RCC_OscConfig+0x62c>)
 800465a:	400a      	ands	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7fe fd27 	bl	80030b0 <HAL_GetTick>
 8004662:	0003      	movs	r3, r0
 8004664:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004668:	f7fe fd22 	bl	80030b0 <HAL_GetTick>
 800466c:	0002      	movs	r2, r0
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e079      	b.n	800476e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800467a:	4b3f      	ldr	r3, [pc, #252]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	049b      	lsls	r3, r3, #18
 8004682:	4013      	ands	r3, r2
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004686:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	220f      	movs	r2, #15
 800468c:	4393      	bics	r3, r2
 800468e:	0019      	movs	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004696:	430a      	orrs	r2, r1
 8004698:	62da      	str	r2, [r3, #44]	; 0x2c
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4a3a      	ldr	r2, [pc, #232]	; (8004788 <HAL_RCC_OscConfig+0x630>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	0019      	movs	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	431a      	orrs	r2, r3
 80046ae:	4b32      	ldr	r3, [pc, #200]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b4:	4b30      	ldr	r3, [pc, #192]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	0449      	lsls	r1, r1, #17
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fe fcf5 	bl	80030b0 <HAL_GetTick>
 80046c6:	0003      	movs	r3, r0
 80046c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fe fcf0 	bl	80030b0 <HAL_GetTick>
 80046d0:	0002      	movs	r2, r0
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e047      	b.n	800476e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046de:	4b26      	ldr	r3, [pc, #152]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	049b      	lsls	r3, r3, #18
 80046e6:	4013      	ands	r3, r2
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x574>
 80046ea:	e03f      	b.n	800476c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ec:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b21      	ldr	r3, [pc, #132]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 80046f2:	4924      	ldr	r1, [pc, #144]	; (8004784 <HAL_RCC_OscConfig+0x62c>)
 80046f4:	400a      	ands	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fe fcda 	bl	80030b0 <HAL_GetTick>
 80046fc:	0003      	movs	r3, r0
 80046fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004702:	f7fe fcd5 	bl	80030b0 <HAL_GetTick>
 8004706:	0002      	movs	r2, r0
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e02c      	b.n	800476e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	049b      	lsls	r3, r3, #18
 800471c:	4013      	ands	r3, r2
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0x5aa>
 8004720:	e024      	b.n	800476c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e01f      	b.n	800476e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <HAL_RCC_OscConfig+0x620>)
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	2380      	movs	r3, #128	; 0x80
 800473e:	025b      	lsls	r3, r3, #9
 8004740:	401a      	ands	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	429a      	cmp	r2, r3
 8004748:	d10e      	bne.n	8004768 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	220f      	movs	r2, #15
 800474e:	401a      	ands	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	23f0      	movs	r3, #240	; 0xf0
 800475c:	039b      	lsls	r3, r3, #14
 800475e:	401a      	ands	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b008      	add	sp, #32
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	40021000 	.word	0x40021000
 800477c:	00001388 	.word	0x00001388
 8004780:	efffffff 	.word	0xefffffff
 8004784:	feffffff 	.word	0xfeffffff
 8004788:	ffc2ffff 	.word	0xffc2ffff

0800478c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0b3      	b.n	8004908 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047a0:	4b5b      	ldr	r3, [pc, #364]	; (8004910 <HAL_RCC_ClockConfig+0x184>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2201      	movs	r2, #1
 80047a6:	4013      	ands	r3, r2
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d911      	bls.n	80047d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ae:	4b58      	ldr	r3, [pc, #352]	; (8004910 <HAL_RCC_ClockConfig+0x184>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4393      	bics	r3, r2
 80047b6:	0019      	movs	r1, r3
 80047b8:	4b55      	ldr	r3, [pc, #340]	; (8004910 <HAL_RCC_ClockConfig+0x184>)
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c0:	4b53      	ldr	r3, [pc, #332]	; (8004910 <HAL_RCC_ClockConfig+0x184>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e09a      	b.n	8004908 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2202      	movs	r2, #2
 80047d8:	4013      	ands	r3, r2
 80047da:	d015      	beq.n	8004808 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2204      	movs	r2, #4
 80047e2:	4013      	ands	r3, r2
 80047e4:	d006      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80047e6:	4b4b      	ldr	r3, [pc, #300]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	4b4a      	ldr	r3, [pc, #296]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 80047ec:	21e0      	movs	r1, #224	; 0xe0
 80047ee:	00c9      	lsls	r1, r1, #3
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f4:	4b47      	ldr	r3, [pc, #284]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	22f0      	movs	r2, #240	; 0xf0
 80047fa:	4393      	bics	r3, r2
 80047fc:	0019      	movs	r1, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	4b44      	ldr	r3, [pc, #272]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2201      	movs	r2, #1
 800480e:	4013      	ands	r3, r2
 8004810:	d040      	beq.n	8004894 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	029b      	lsls	r3, r3, #10
 8004822:	4013      	ands	r3, r2
 8004824:	d114      	bne.n	8004850 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e06e      	b.n	8004908 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b38      	ldr	r3, [pc, #224]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	049b      	lsls	r3, r3, #18
 800483a:	4013      	ands	r3, r2
 800483c:	d108      	bne.n	8004850 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e062      	b.n	8004908 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004842:	4b34      	ldr	r3, [pc, #208]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2202      	movs	r2, #2
 8004848:	4013      	ands	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e05b      	b.n	8004908 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004850:	4b30      	ldr	r3, [pc, #192]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2203      	movs	r2, #3
 8004856:	4393      	bics	r3, r2
 8004858:	0019      	movs	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	4b2d      	ldr	r3, [pc, #180]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004864:	f7fe fc24 	bl	80030b0 <HAL_GetTick>
 8004868:	0003      	movs	r3, r0
 800486a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486c:	e009      	b.n	8004882 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486e:	f7fe fc1f 	bl	80030b0 <HAL_GetTick>
 8004872:	0002      	movs	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	4a27      	ldr	r2, [pc, #156]	; (8004918 <HAL_RCC_ClockConfig+0x18c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e042      	b.n	8004908 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	220c      	movs	r2, #12
 8004888:	401a      	ands	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d1ec      	bne.n	800486e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004894:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <HAL_RCC_ClockConfig+0x184>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2201      	movs	r2, #1
 800489a:	4013      	ands	r3, r2
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d211      	bcs.n	80048c6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <HAL_RCC_ClockConfig+0x184>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	4393      	bics	r3, r2
 80048aa:	0019      	movs	r1, r3
 80048ac:	4b18      	ldr	r3, [pc, #96]	; (8004910 <HAL_RCC_ClockConfig+0x184>)
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b4:	4b16      	ldr	r3, [pc, #88]	; (8004910 <HAL_RCC_ClockConfig+0x184>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2201      	movs	r2, #1
 80048ba:	4013      	ands	r3, r2
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e020      	b.n	8004908 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2204      	movs	r2, #4
 80048cc:	4013      	ands	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80048d0:	4b10      	ldr	r3, [pc, #64]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a11      	ldr	r2, [pc, #68]	; (800491c <HAL_RCC_ClockConfig+0x190>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	0019      	movs	r1, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80048e4:	f000 f820 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80048e8:	0001      	movs	r1, r0
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <HAL_RCC_ClockConfig+0x188>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	220f      	movs	r2, #15
 80048f2:	4013      	ands	r3, r2
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <HAL_RCC_ClockConfig+0x194>)
 80048f6:	5cd3      	ldrb	r3, [r2, r3]
 80048f8:	000a      	movs	r2, r1
 80048fa:	40da      	lsrs	r2, r3
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_RCC_ClockConfig+0x198>)
 80048fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004900:	2000      	movs	r0, #0
 8004902:	f7fe f8e5 	bl	8002ad0 <HAL_InitTick>
  
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b004      	add	sp, #16
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40022000 	.word	0x40022000
 8004914:	40021000 	.word	0x40021000
 8004918:	00001388 	.word	0x00001388
 800491c:	fffff8ff 	.word	0xfffff8ff
 8004920:	0800db64 	.word	0x0800db64
 8004924:	20000000 	.word	0x20000000

08004928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b08f      	sub	sp, #60	; 0x3c
 800492c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800492e:	2314      	movs	r3, #20
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004934:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004936:	c313      	stmia	r3!, {r0, r1, r4}
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800493c:	1d3b      	adds	r3, r7, #4
 800493e:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004940:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004942:	c313      	stmia	r3!, {r0, r1, r4}
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494c:	2300      	movs	r3, #0
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004950:	2300      	movs	r3, #0
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800495c:	4b22      	ldr	r3, [pc, #136]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	220c      	movs	r2, #12
 8004966:	4013      	ands	r3, r2
 8004968:	2b04      	cmp	r3, #4
 800496a:	d002      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x4a>
 800496c:	2b08      	cmp	r3, #8
 800496e:	d003      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x50>
 8004970:	e02d      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004972:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004976:	e02d      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	0c9b      	lsrs	r3, r3, #18
 800497c:	220f      	movs	r2, #15
 800497e:	4013      	ands	r3, r2
 8004980:	2214      	movs	r2, #20
 8004982:	18ba      	adds	r2, r7, r2
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	220f      	movs	r2, #15
 800498e:	4013      	ands	r3, r2
 8004990:	1d3a      	adds	r2, r7, #4
 8004992:	5cd3      	ldrb	r3, [r2, r3]
 8004994:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	025b      	lsls	r3, r3, #9
 800499c:	4013      	ands	r3, r2
 800499e:	d009      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a2:	4812      	ldr	r0, [pc, #72]	; (80049ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80049a4:	f7fb fbcc 	bl	8000140 <__udivsi3>
 80049a8:	0003      	movs	r3, r0
 80049aa:	001a      	movs	r2, r3
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	4353      	muls	r3, r2
 80049b0:	637b      	str	r3, [r7, #52]	; 0x34
 80049b2:	e009      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80049b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049b6:	000a      	movs	r2, r1
 80049b8:	0152      	lsls	r2, r2, #5
 80049ba:	1a52      	subs	r2, r2, r1
 80049bc:	0193      	lsls	r3, r2, #6
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	185b      	adds	r3, r3, r1
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049cc:	e002      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80049d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b00f      	add	sp, #60	; 0x3c
 80049dc:	bd90      	pop	{r4, r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	0800da4c 	.word	0x0800da4c
 80049e4:	0800da5c 	.word	0x0800da5c
 80049e8:	40021000 	.word	0x40021000
 80049ec:	007a1200 	.word	0x007a1200

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	20000000 	.word	0x20000000

08004a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004a08:	f7ff fff2 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a0c:	0001      	movs	r1, r0
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	2207      	movs	r2, #7
 8004a16:	4013      	ands	r3, r2
 8004a18:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a1a:	5cd3      	ldrb	r3, [r2, r3]
 8004a1c:	40d9      	lsrs	r1, r3
 8004a1e:	000b      	movs	r3, r1
}    
 8004a20:	0018      	movs	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	0800db74 	.word	0x0800db74

08004a30 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a40:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <HAL_RCC_GetClockConfig+0x4c>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2203      	movs	r2, #3
 8004a46:	401a      	ands	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_GetClockConfig+0x4c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	22f0      	movs	r2, #240	; 0xf0
 8004a52:	401a      	ands	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004a58:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_RCC_GetClockConfig+0x4c>)
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	23e0      	movs	r3, #224	; 0xe0
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	401a      	ands	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_RCC_GetClockConfig+0x50>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	601a      	str	r2, [r3, #0]
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b002      	add	sp, #8
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40022000 	.word	0x40022000

08004a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	025b      	lsls	r3, r3, #9
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d100      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004aa0:	e08e      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004aa2:	2017      	movs	r0, #23
 8004aa4:	183b      	adds	r3, r7, r0
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aaa:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004aac:	69da      	ldr	r2, [r3, #28]
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	055b      	lsls	r3, r3, #21
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d110      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	4b54      	ldr	r3, [pc, #336]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	4b53      	ldr	r3, [pc, #332]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	0549      	lsls	r1, r1, #21
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	61da      	str	r2, [r3, #28]
 8004ac4:	4b50      	ldr	r3, [pc, #320]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	055b      	lsls	r3, r3, #21
 8004acc:	4013      	ands	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad2:	183b      	adds	r3, r7, r0
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d11a      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ae4:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4b48      	ldr	r3, [pc, #288]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004aea:	2180      	movs	r1, #128	; 0x80
 8004aec:	0049      	lsls	r1, r1, #1
 8004aee:	430a      	orrs	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af2:	f7fe fadd 	bl	80030b0 <HAL_GetTick>
 8004af6:	0003      	movs	r3, r0
 8004af8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afa:	e008      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afc:	f7fe fad8 	bl	80030b0 <HAL_GetTick>
 8004b00:	0002      	movs	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	; 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e077      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4013      	ands	r3, r2
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b1a:	4b3b      	ldr	r3, [pc, #236]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b1c:	6a1a      	ldr	r2, [r3, #32]
 8004b1e:	23c0      	movs	r3, #192	; 0xc0
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4013      	ands	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d034      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	23c0      	movs	r3, #192	; 0xc0
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d02c      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b3c:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4a33      	ldr	r2, [pc, #204]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b46:	4b30      	ldr	r3, [pc, #192]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b48:	6a1a      	ldr	r2, [r3, #32]
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b4c:	2180      	movs	r1, #128	; 0x80
 8004b4e:	0249      	lsls	r1, r1, #9
 8004b50:	430a      	orrs	r2, r1
 8004b52:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b54:	4b2c      	ldr	r3, [pc, #176]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	4b2b      	ldr	r3, [pc, #172]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b5a:	492e      	ldr	r1, [pc, #184]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004b5c:	400a      	ands	r2, r1
 8004b5e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b60:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6e:	f7fe fa9f 	bl	80030b0 <HAL_GetTick>
 8004b72:	0003      	movs	r3, r0
 8004b74:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b76:	e009      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b78:	f7fe fa9a 	bl	80030b0 <HAL_GetTick>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	4a25      	ldr	r2, [pc, #148]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e038      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8c:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	2202      	movs	r2, #2
 8004b92:	4013      	ands	r3, r2
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b96:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004baa:	2317      	movs	r3, #23
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb4:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bba:	4918      	ldr	r1, [pc, #96]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bca:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	2203      	movs	r2, #3
 8004bd0:	4393      	bics	r3, r2
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2220      	movs	r2, #32
 8004be4:	4013      	ands	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	2210      	movs	r2, #16
 8004bee:	4393      	bics	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b006      	add	sp, #24
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40007000 	.word	0x40007000
 8004c10:	fffffcff 	.word	0xfffffcff
 8004c14:	fffeffff 	.word	0xfffeffff
 8004c18:	00001388 	.word	0x00001388
 8004c1c:	efffffff 	.word	0xefffffff

08004c20 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e081      	b.n	8004d36 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7f5b      	ldrb	r3, [r3, #29]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d106      	bne.n	8004c4a <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f7fd ff07 	bl	8002a58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	22ca      	movs	r2, #202	; 0xca
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2253      	movs	r2, #83	; 0x53
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 f9fb 	bl	800505e <RTC_EnterInitMode>
 8004c68:	1e03      	subs	r3, r0, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	22ff      	movs	r2, #255	; 0xff
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2204      	movs	r2, #4
 8004c78:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e05b      	b.n	8004d36 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	492d      	ldr	r1, [pc, #180]	; (8004d40 <HAL_RTC_Init+0x120>)
 8004c8a:	400a      	ands	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6899      	ldr	r1, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68d2      	ldr	r2, [r2, #12]
 8004cb4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6919      	ldr	r1, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	041a      	lsls	r2, r3, #16
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2180      	movs	r1, #128	; 0x80
 8004cd6:	438a      	bics	r2, r1
 8004cd8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d10e      	bne.n	8004d04 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f000 f98f 	bl	800500c <HAL_RTC_WaitForSynchro>
 8004cee:	1e03      	subs	r3, r0, #0
 8004cf0:	d008      	beq.n	8004d04 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	22ff      	movs	r2, #255	; 0xff
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e018      	b.n	8004d36 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	490d      	ldr	r1, [pc, #52]	; (8004d44 <HAL_RTC_Init+0x124>)
 8004d10:	400a      	ands	r2, r1
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	22ff      	movs	r2, #255	; 0xff
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
  }
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b002      	add	sp, #8
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	ff8fffbf 	.word	0xff8fffbf
 8004d44:	fffbffff 	.word	0xfffbffff

08004d48 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	7f1b      	ldrb	r3, [r3, #28]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_RTC_SetTime+0x1c>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e0a5      	b.n	8004eb0 <HAL_RTC_SetTime+0x168>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d125      	bne.n	8004dc2 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2240      	movs	r2, #64	; 0x40
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d102      	bne.n	8004d88 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f992 	bl	80050b6 <RTC_ByteToBcd2>
 8004d92:	0003      	movs	r3, r0
 8004d94:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 f98b 	bl	80050b6 <RTC_ByteToBcd2>
 8004da0:	0003      	movs	r3, r0
 8004da2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004da4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	789b      	ldrb	r3, [r3, #2]
 8004daa:	0018      	movs	r0, r3
 8004dac:	f000 f983 	bl	80050b6 <RTC_ByteToBcd2>
 8004db0:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004db2:	0022      	movs	r2, r4
 8004db4:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	78db      	ldrb	r3, [r3, #3]
 8004dba:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e017      	b.n	8004df2 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2240      	movs	r2, #64	; 0x40
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d102      	bne.n	8004dd4 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004de0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004de6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	22ca      	movs	r2, #202	; 0xca
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2253      	movs	r2, #83	; 0x53
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f000 f92a 	bl	800505e <RTC_EnterInitMode>
 8004e0a:	1e03      	subs	r3, r0, #0
 8004e0c:	d00b      	beq.n	8004e26 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	22ff      	movs	r2, #255	; 0xff
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2204      	movs	r2, #4
 8004e1a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e044      	b.n	8004eb0 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4922      	ldr	r1, [pc, #136]	; (8004eb8 <HAL_RTC_SetTime+0x170>)
 8004e2e:	400a      	ands	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	491f      	ldr	r1, [pc, #124]	; (8004ebc <HAL_RTC_SetTime+0x174>)
 8004e3e:	400a      	ands	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6899      	ldr	r1, [r3, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2180      	movs	r1, #128	; 0x80
 8004e66:	438a      	bics	r2, r1
 8004e68:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2220      	movs	r2, #32
 8004e72:	4013      	ands	r3, r2
 8004e74:	d111      	bne.n	8004e9a <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f000 f8c7 	bl	800500c <HAL_RTC_WaitForSynchro>
 8004e7e:	1e03      	subs	r3, r0, #0
 8004e80:	d00b      	beq.n	8004e9a <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	22ff      	movs	r2, #255	; 0xff
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e00a      	b.n	8004eb0 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	22ff      	movs	r2, #255	; 0xff
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
  }
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b007      	add	sp, #28
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	007f7f7f 	.word	0x007f7f7f
 8004ebc:	fffbffff 	.word	0xfffbffff

08004ec0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	7f1b      	ldrb	r3, [r3, #28]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_RTC_SetDate+0x1c>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e091      	b.n	8005000 <HAL_RTC_SetDate+0x140>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10e      	bne.n	8004f0c <HAL_RTC_SetDate+0x4c>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	785b      	ldrb	r3, [r3, #1]
 8004ef2:	001a      	movs	r2, r3
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d008      	beq.n	8004f0c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	2210      	movs	r2, #16
 8004f00:	4393      	bics	r3, r2
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	330a      	adds	r3, #10
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d11c      	bne.n	8004f4c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	78db      	ldrb	r3, [r3, #3]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 f8cd 	bl	80050b6 <RTC_ByteToBcd2>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f000 f8c6 	bl	80050b6 <RTC_ByteToBcd2>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f2e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	789b      	ldrb	r3, [r3, #2]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f000 f8be 	bl	80050b6 <RTC_ByteToBcd2>
 8004f3a:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f3c:	0022      	movs	r2, r4
 8004f3e:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e00e      	b.n	8004f6a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	78db      	ldrb	r3, [r3, #3]
 8004f50:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f58:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f5e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	22ca      	movs	r2, #202	; 0xca
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2253      	movs	r2, #83	; 0x53
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f000 f86e 	bl	800505e <RTC_EnterInitMode>
 8004f82:	1e03      	subs	r3, r0, #0
 8004f84:	d00b      	beq.n	8004f9e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	22ff      	movs	r2, #255	; 0xff
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2204      	movs	r2, #4
 8004f92:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e030      	b.n	8005000 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4918      	ldr	r1, [pc, #96]	; (8005008 <HAL_RTC_SetDate+0x148>)
 8004fa6:	400a      	ands	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	438a      	bics	r2, r1
 8004fb8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d111      	bne.n	8004fea <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f000 f81f 	bl	800500c <HAL_RTC_WaitForSynchro>
 8004fce:	1e03      	subs	r3, r0, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2204      	movs	r2, #4
 8004fde:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e00a      	b.n	8005000 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	22ff      	movs	r2, #255	; 0xff
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
  }
}
 8005000:	0018      	movs	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	b007      	add	sp, #28
 8005006:	bd90      	pop	{r4, r7, pc}
 8005008:	00ffff3f 	.word	0x00ffff3f

0800500c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	21a0      	movs	r1, #160	; 0xa0
 8005024:	438a      	bics	r2, r1
 8005026:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005028:	f7fe f842 	bl	80030b0 <HAL_GetTick>
 800502c:	0003      	movs	r3, r0
 800502e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005030:	e00a      	b.n	8005048 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005032:	f7fe f83d 	bl	80030b0 <HAL_GetTick>
 8005036:	0002      	movs	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1ad2      	subs	r2, r2, r3
 800503c:	23fa      	movs	r3, #250	; 0xfa
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	429a      	cmp	r2, r3
 8005042:	d901      	bls.n	8005048 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e006      	b.n	8005056 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	4013      	ands	r3, r2
 8005052:	d0ee      	beq.n	8005032 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b004      	add	sp, #16
 800505c:	bd80      	pop	{r7, pc}

0800505e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2240      	movs	r2, #64	; 0x40
 8005072:	4013      	ands	r3, r2
 8005074:	d11a      	bne.n	80050ac <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2201      	movs	r2, #1
 800507c:	4252      	negs	r2, r2
 800507e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005080:	f7fe f816 	bl	80030b0 <HAL_GetTick>
 8005084:	0003      	movs	r3, r0
 8005086:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005088:	e00a      	b.n	80050a0 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800508a:	f7fe f811 	bl	80030b0 <HAL_GetTick>
 800508e:	0002      	movs	r2, r0
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	23fa      	movs	r3, #250	; 0xfa
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	429a      	cmp	r2, r3
 800509a:	d901      	bls.n	80050a0 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e006      	b.n	80050ae <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	2240      	movs	r2, #64	; 0x40
 80050a8:	4013      	ands	r3, r2
 80050aa:	d0ee      	beq.n	800508a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	0018      	movs	r0, r3
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b004      	add	sp, #16
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	0002      	movs	r2, r0
 80050be:	1dfb      	adds	r3, r7, #7
 80050c0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80050c6:	e007      	b.n	80050d8 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80050ce:	1dfb      	adds	r3, r7, #7
 80050d0:	1dfa      	adds	r2, r7, #7
 80050d2:	7812      	ldrb	r2, [r2, #0]
 80050d4:	3a0a      	subs	r2, #10
 80050d6:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b09      	cmp	r3, #9
 80050de:	d8f3      	bhi.n	80050c8 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	1dfb      	adds	r3, r7, #7
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b2db      	uxtb	r3, r3
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b004      	add	sp, #16
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e042      	b.n	8005190 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	223d      	movs	r2, #61	; 0x3d
 800510e:	5c9b      	ldrb	r3, [r3, r2]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	223c      	movs	r2, #60	; 0x3c
 800511a:	2100      	movs	r1, #0
 800511c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	0018      	movs	r0, r3
 8005122:	f7fd feb1 	bl	8002e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	223d      	movs	r2, #61	; 0x3d
 800512a:	2102      	movs	r1, #2
 800512c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	0019      	movs	r1, r3
 8005138:	0010      	movs	r0, r2
 800513a:	f000 faa7 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2246      	movs	r2, #70	; 0x46
 8005142:	2101      	movs	r1, #1
 8005144:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	223e      	movs	r2, #62	; 0x3e
 800514a:	2101      	movs	r1, #1
 800514c:	5499      	strb	r1, [r3, r2]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	223f      	movs	r2, #63	; 0x3f
 8005152:	2101      	movs	r1, #1
 8005154:	5499      	strb	r1, [r3, r2]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2240      	movs	r2, #64	; 0x40
 800515a:	2101      	movs	r1, #1
 800515c:	5499      	strb	r1, [r3, r2]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2241      	movs	r2, #65	; 0x41
 8005162:	2101      	movs	r1, #1
 8005164:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2242      	movs	r2, #66	; 0x42
 800516a:	2101      	movs	r1, #1
 800516c:	5499      	strb	r1, [r3, r2]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2243      	movs	r2, #67	; 0x43
 8005172:	2101      	movs	r1, #1
 8005174:	5499      	strb	r1, [r3, r2]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2244      	movs	r2, #68	; 0x44
 800517a:	2101      	movs	r1, #1
 800517c:	5499      	strb	r1, [r3, r2]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2245      	movs	r2, #69	; 0x45
 8005182:	2101      	movs	r1, #1
 8005184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	223d      	movs	r2, #61	; 0x3d
 800518a:	2101      	movs	r1, #1
 800518c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	0018      	movs	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	b002      	add	sp, #8
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	223d      	movs	r2, #61	; 0x3d
 80051a4:	5c9b      	ldrb	r3, [r3, r2]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e035      	b.n	800521c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	223d      	movs	r2, #61	; 0x3d
 80051b4:	2102      	movs	r1, #2
 80051b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2101      	movs	r1, #1
 80051c4:	430a      	orrs	r2, r1
 80051c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a15      	ldr	r2, [pc, #84]	; (8005224 <HAL_TIM_Base_Start_IT+0x8c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_TIM_Base_Start_IT+0x4e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a14      	ldr	r2, [pc, #80]	; (8005228 <HAL_TIM_Base_Start_IT+0x90>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_TIM_Base_Start_IT+0x4e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a12      	ldr	r2, [pc, #72]	; (800522c <HAL_TIM_Base_Start_IT+0x94>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d111      	bne.n	800520a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2207      	movs	r2, #7
 80051ee:	4013      	ands	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b06      	cmp	r3, #6
 80051f6:	d010      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2101      	movs	r1, #1
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005208:	e007      	b.n	800521a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2101      	movs	r1, #1
 8005216:	430a      	orrs	r2, r1
 8005218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	b004      	add	sp, #16
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40014000 	.word	0x40014000

08005230 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2101      	movs	r1, #1
 8005244:	438a      	bics	r2, r1
 8005246:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <HAL_TIM_Base_Stop_IT+0x54>)
 8005250:	4013      	ands	r3, r2
 8005252:	d10d      	bne.n	8005270 <HAL_TIM_Base_Stop_IT+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4a0b      	ldr	r2, [pc, #44]	; (8005288 <HAL_TIM_Base_Stop_IT+0x58>)
 800525c:	4013      	ands	r3, r2
 800525e:	d107      	bne.n	8005270 <HAL_TIM_Base_Stop_IT+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2101      	movs	r1, #1
 800526c:	438a      	bics	r2, r1
 800526e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	223d      	movs	r2, #61	; 0x3d
 8005274:	2101      	movs	r1, #1
 8005276:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	0018      	movs	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	b002      	add	sp, #8
 8005280:	bd80      	pop	{r7, pc}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	00001111 	.word	0x00001111
 8005288:	00000444 	.word	0x00000444

0800528c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2202      	movs	r2, #2
 800529c:	4013      	ands	r3, r2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d124      	bne.n	80052ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2202      	movs	r2, #2
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d11d      	bne.n	80052ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2203      	movs	r2, #3
 80052b6:	4252      	negs	r2, r2
 80052b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2203      	movs	r2, #3
 80052c8:	4013      	ands	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	0018      	movs	r0, r3
 80052d0:	f000 f9c4 	bl	800565c <HAL_TIM_IC_CaptureCallback>
 80052d4:	e007      	b.n	80052e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	0018      	movs	r0, r3
 80052da:	f000 f9b7 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	0018      	movs	r0, r3
 80052e2:	f000 f9c3 	bl	800566c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2204      	movs	r2, #4
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d125      	bne.n	8005346 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	2204      	movs	r2, #4
 8005302:	4013      	ands	r3, r2
 8005304:	2b04      	cmp	r3, #4
 8005306:	d11e      	bne.n	8005346 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2205      	movs	r2, #5
 800530e:	4252      	negs	r2, r2
 8005310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	23c0      	movs	r3, #192	; 0xc0
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4013      	ands	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	0018      	movs	r0, r3
 800532a:	f000 f997 	bl	800565c <HAL_TIM_IC_CaptureCallback>
 800532e:	e007      	b.n	8005340 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 f98a 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	0018      	movs	r0, r3
 800533c:	f000 f996 	bl	800566c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2208      	movs	r2, #8
 800534e:	4013      	ands	r3, r2
 8005350:	2b08      	cmp	r3, #8
 8005352:	d124      	bne.n	800539e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2208      	movs	r2, #8
 800535c:	4013      	ands	r3, r2
 800535e:	2b08      	cmp	r3, #8
 8005360:	d11d      	bne.n	800539e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2209      	movs	r2, #9
 8005368:	4252      	negs	r2, r2
 800536a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2204      	movs	r2, #4
 8005370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	2203      	movs	r2, #3
 800537a:	4013      	ands	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	0018      	movs	r0, r3
 8005382:	f000 f96b 	bl	800565c <HAL_TIM_IC_CaptureCallback>
 8005386:	e007      	b.n	8005398 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	0018      	movs	r0, r3
 800538c:	f000 f95e 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	0018      	movs	r0, r3
 8005394:	f000 f96a 	bl	800566c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2210      	movs	r2, #16
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d125      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2210      	movs	r2, #16
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d11e      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2211      	movs	r2, #17
 80053c0:	4252      	negs	r2, r2
 80053c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2208      	movs	r2, #8
 80053c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	23c0      	movs	r3, #192	; 0xc0
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4013      	ands	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	0018      	movs	r0, r3
 80053dc:	f000 f93e 	bl	800565c <HAL_TIM_IC_CaptureCallback>
 80053e0:	e007      	b.n	80053f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 f931 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	0018      	movs	r0, r3
 80053ee:	f000 f93d 	bl	800566c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2201      	movs	r2, #1
 8005400:	4013      	ands	r3, r2
 8005402:	2b01      	cmp	r3, #1
 8005404:	d10f      	bne.n	8005426 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	4013      	ands	r3, r2
 8005410:	2b01      	cmp	r3, #1
 8005412:	d108      	bne.n	8005426 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2202      	movs	r2, #2
 800541a:	4252      	negs	r2, r2
 800541c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	0018      	movs	r0, r3
 8005422:	f7fd f965 	bl	80026f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2280      	movs	r2, #128	; 0x80
 800542e:	4013      	ands	r3, r2
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d10f      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	4013      	ands	r3, r2
 800543e:	2b80      	cmp	r3, #128	; 0x80
 8005440:	d108      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2281      	movs	r2, #129	; 0x81
 8005448:	4252      	negs	r2, r2
 800544a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	0018      	movs	r0, r3
 8005450:	f000 fa8c 	bl	800596c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2240      	movs	r2, #64	; 0x40
 800545c:	4013      	ands	r3, r2
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d10f      	bne.n	8005482 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2240      	movs	r2, #64	; 0x40
 800546a:	4013      	ands	r3, r2
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d108      	bne.n	8005482 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2241      	movs	r2, #65	; 0x41
 8005476:	4252      	negs	r2, r2
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	0018      	movs	r0, r3
 800547e:	f000 f8fd 	bl	800567c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2220      	movs	r2, #32
 800548a:	4013      	ands	r3, r2
 800548c:	2b20      	cmp	r3, #32
 800548e:	d10f      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	4013      	ands	r3, r2
 800549a:	2b20      	cmp	r3, #32
 800549c:	d108      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2221      	movs	r2, #33	; 0x21
 80054a4:	4252      	negs	r2, r2
 80054a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 fa56 	bl	800595c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054b0:	46c0      	nop			; (mov r8, r8)
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b002      	add	sp, #8
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	223c      	movs	r2, #60	; 0x3c
 80054c6:	5c9b      	ldrb	r3, [r3, r2]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_ConfigClockSource+0x18>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e0b7      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x188>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	223c      	movs	r2, #60	; 0x3c
 80054d4:	2101      	movs	r1, #1
 80054d6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	223d      	movs	r2, #61	; 0x3d
 80054dc:	2102      	movs	r1, #2
 80054de:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2277      	movs	r2, #119	; 0x77
 80054ec:	4393      	bics	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a55      	ldr	r2, [pc, #340]	; (8005648 <HAL_TIM_ConfigClockSource+0x190>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2280      	movs	r2, #128	; 0x80
 8005506:	0192      	lsls	r2, r2, #6
 8005508:	4293      	cmp	r3, r2
 800550a:	d040      	beq.n	800558e <HAL_TIM_ConfigClockSource+0xd6>
 800550c:	2280      	movs	r2, #128	; 0x80
 800550e:	0192      	lsls	r2, r2, #6
 8005510:	4293      	cmp	r3, r2
 8005512:	d900      	bls.n	8005516 <HAL_TIM_ConfigClockSource+0x5e>
 8005514:	e088      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x170>
 8005516:	2280      	movs	r2, #128	; 0x80
 8005518:	0152      	lsls	r2, r2, #5
 800551a:	4293      	cmp	r3, r2
 800551c:	d100      	bne.n	8005520 <HAL_TIM_ConfigClockSource+0x68>
 800551e:	e085      	b.n	800562c <HAL_TIM_ConfigClockSource+0x174>
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	0152      	lsls	r2, r2, #5
 8005524:	4293      	cmp	r3, r2
 8005526:	d900      	bls.n	800552a <HAL_TIM_ConfigClockSource+0x72>
 8005528:	e07e      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x170>
 800552a:	2b70      	cmp	r3, #112	; 0x70
 800552c:	d018      	beq.n	8005560 <HAL_TIM_ConfigClockSource+0xa8>
 800552e:	d900      	bls.n	8005532 <HAL_TIM_ConfigClockSource+0x7a>
 8005530:	e07a      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x170>
 8005532:	2b60      	cmp	r3, #96	; 0x60
 8005534:	d04f      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x11e>
 8005536:	d900      	bls.n	800553a <HAL_TIM_ConfigClockSource+0x82>
 8005538:	e076      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x170>
 800553a:	2b50      	cmp	r3, #80	; 0x50
 800553c:	d03b      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0xfe>
 800553e:	d900      	bls.n	8005542 <HAL_TIM_ConfigClockSource+0x8a>
 8005540:	e072      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x170>
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d057      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x13e>
 8005546:	d900      	bls.n	800554a <HAL_TIM_ConfigClockSource+0x92>
 8005548:	e06e      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x170>
 800554a:	2b30      	cmp	r3, #48	; 0x30
 800554c:	d063      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0x15e>
 800554e:	d86b      	bhi.n	8005628 <HAL_TIM_ConfigClockSource+0x170>
 8005550:	2b20      	cmp	r3, #32
 8005552:	d060      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0x15e>
 8005554:	d868      	bhi.n	8005628 <HAL_TIM_ConfigClockSource+0x170>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d05d      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0x15e>
 800555a:	2b10      	cmp	r3, #16
 800555c:	d05b      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800555e:	e063      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6899      	ldr	r1, [r3, #8]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f000 f97c 	bl	800586c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2277      	movs	r2, #119	; 0x77
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	609a      	str	r2, [r3, #8]
      break;
 800558c:	e04f      	b.n	800562e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f000 f965 	bl	800586c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2180      	movs	r1, #128	; 0x80
 80055ae:	01c9      	lsls	r1, r1, #7
 80055b0:	430a      	orrs	r2, r1
 80055b2:	609a      	str	r2, [r3, #8]
      break;
 80055b4:	e03b      	b.n	800562e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	001a      	movs	r2, r3
 80055c4:	f000 f8d8 	bl	8005778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2150      	movs	r1, #80	; 0x50
 80055ce:	0018      	movs	r0, r3
 80055d0:	f000 f932 	bl	8005838 <TIM_ITRx_SetConfig>
      break;
 80055d4:	e02b      	b.n	800562e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	001a      	movs	r2, r3
 80055e4:	f000 f8f6 	bl	80057d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2160      	movs	r1, #96	; 0x60
 80055ee:	0018      	movs	r0, r3
 80055f0:	f000 f922 	bl	8005838 <TIM_ITRx_SetConfig>
      break;
 80055f4:	e01b      	b.n	800562e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6859      	ldr	r1, [r3, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	001a      	movs	r2, r3
 8005604:	f000 f8b8 	bl	8005778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2140      	movs	r1, #64	; 0x40
 800560e:	0018      	movs	r0, r3
 8005610:	f000 f912 	bl	8005838 <TIM_ITRx_SetConfig>
      break;
 8005614:	e00b      	b.n	800562e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0019      	movs	r1, r3
 8005620:	0010      	movs	r0, r2
 8005622:	f000 f909 	bl	8005838 <TIM_ITRx_SetConfig>
        break;
 8005626:	e002      	b.n	800562e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005628:	46c0      	nop			; (mov r8, r8)
 800562a:	e000      	b.n	800562e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800562c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	223d      	movs	r2, #61	; 0x3d
 8005632:	2101      	movs	r1, #1
 8005634:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	223c      	movs	r2, #60	; 0x3c
 800563a:	2100      	movs	r1, #0
 800563c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	b004      	add	sp, #16
 8005646:	bd80      	pop	{r7, pc}
 8005648:	ffff00ff 	.word	0xffff00ff

0800564c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005654:	46c0      	nop			; (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b002      	add	sp, #8
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005664:	46c0      	nop			; (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	b002      	add	sp, #8
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005684:	46c0      	nop			; (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	b002      	add	sp, #8
 800568a:	bd80      	pop	{r7, pc}

0800568c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a2f      	ldr	r2, [pc, #188]	; (800575c <TIM_Base_SetConfig+0xd0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_Base_SetConfig+0x20>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a2e      	ldr	r2, [pc, #184]	; (8005760 <TIM_Base_SetConfig+0xd4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d108      	bne.n	80056be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2270      	movs	r2, #112	; 0x70
 80056b0:	4393      	bics	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a26      	ldr	r2, [pc, #152]	; (800575c <TIM_Base_SetConfig+0xd0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a25      	ldr	r2, [pc, #148]	; (8005760 <TIM_Base_SetConfig+0xd4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00f      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a24      	ldr	r2, [pc, #144]	; (8005764 <TIM_Base_SetConfig+0xd8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a23      	ldr	r2, [pc, #140]	; (8005768 <TIM_Base_SetConfig+0xdc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a22      	ldr	r2, [pc, #136]	; (800576c <TIM_Base_SetConfig+0xe0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a21      	ldr	r2, [pc, #132]	; (8005770 <TIM_Base_SetConfig+0xe4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d108      	bne.n	8005700 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4a20      	ldr	r2, [pc, #128]	; (8005774 <TIM_Base_SetConfig+0xe8>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2280      	movs	r2, #128	; 0x80
 8005704:	4393      	bics	r3, r2
 8005706:	001a      	movs	r2, r3
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a0c      	ldr	r2, [pc, #48]	; (800575c <TIM_Base_SetConfig+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00b      	beq.n	8005746 <TIM_Base_SetConfig+0xba>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a0d      	ldr	r2, [pc, #52]	; (8005768 <TIM_Base_SetConfig+0xdc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_Base_SetConfig+0xba>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a0c      	ldr	r2, [pc, #48]	; (800576c <TIM_Base_SetConfig+0xe0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_Base_SetConfig+0xba>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a0b      	ldr	r2, [pc, #44]	; (8005770 <TIM_Base_SetConfig+0xe4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d103      	bne.n	800574e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	615a      	str	r2, [r3, #20]
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b004      	add	sp, #16
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40000400 	.word	0x40000400
 8005764:	40002000 	.word	0x40002000
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800
 8005774:	fffffcff 	.word	0xfffffcff

08005778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	2201      	movs	r2, #1
 8005790:	4393      	bics	r3, r2
 8005792:	001a      	movs	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	22f0      	movs	r2, #240	; 0xf0
 80057a2:	4393      	bics	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	220a      	movs	r2, #10
 80057b4:	4393      	bics	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	621a      	str	r2, [r3, #32]
}
 80057cc:	46c0      	nop			; (mov r8, r8)
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b006      	add	sp, #24
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	2210      	movs	r2, #16
 80057e6:	4393      	bics	r3, r2
 80057e8:	001a      	movs	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	4a0d      	ldr	r2, [pc, #52]	; (8005834 <TIM_TI2_ConfigInputStage+0x60>)
 80057fe:	4013      	ands	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	031b      	lsls	r3, r3, #12
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	22a0      	movs	r2, #160	; 0xa0
 8005810:	4393      	bics	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	46bd      	mov	sp, r7
 800582e:	b006      	add	sp, #24
 8005830:	bd80      	pop	{r7, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	ffff0fff 	.word	0xffff0fff

08005838 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2270      	movs	r2, #112	; 0x70
 800584c:	4393      	bics	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	2207      	movs	r2, #7
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	609a      	str	r2, [r3, #8]
}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	46bd      	mov	sp, r7
 8005866:	b004      	add	sp, #16
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <TIM_ETR_SetConfig+0x3c>)
 8005884:	4013      	ands	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	021a      	lsls	r2, r3, #8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	431a      	orrs	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4313      	orrs	r3, r2
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	609a      	str	r2, [r3, #8]
}
 80058a0:	46c0      	nop			; (mov r8, r8)
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b006      	add	sp, #24
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	ffff00ff 	.word	0xffff00ff

080058ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	223c      	movs	r2, #60	; 0x3c
 80058ba:	5c9b      	ldrb	r3, [r3, r2]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e041      	b.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	223c      	movs	r2, #60	; 0x3c
 80058c8:	2101      	movs	r1, #1
 80058ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	223d      	movs	r2, #61	; 0x3d
 80058d0:	2102      	movs	r1, #2
 80058d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2270      	movs	r2, #112	; 0x70
 80058e8:	4393      	bics	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a13      	ldr	r2, [pc, #76]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a11      	ldr	r2, [pc, #68]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a10      	ldr	r2, [pc, #64]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	4393      	bics	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	223d      	movs	r2, #61	; 0x3d
 800593a:	2101      	movs	r1, #1
 800593c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	223c      	movs	r2, #60	; 0x3c
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	0018      	movs	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	b004      	add	sp, #16
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40000400 	.word	0x40000400
 8005958:	40014000 	.word	0x40014000

0800595c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	46bd      	mov	sp, r7
 8005978:	b002      	add	sp, #8
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e044      	b.n	8005a18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005992:	2b00      	cmp	r3, #0
 8005994:	d107      	bne.n	80059a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2274      	movs	r2, #116	; 0x74
 800599a:	2100      	movs	r1, #0
 800599c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7fd fae7 	bl	8002f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2224      	movs	r2, #36	; 0x24
 80059aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2101      	movs	r1, #1
 80059b8:	438a      	bics	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	0018      	movs	r0, r3
 80059c0:	f000 f830 	bl	8005a24 <UART_SetConfig>
 80059c4:	0003      	movs	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e024      	b.n	8005a18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	0018      	movs	r0, r3
 80059da:	f000 f963 	bl	8005ca4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	490d      	ldr	r1, [pc, #52]	; (8005a20 <HAL_UART_Init+0xa4>)
 80059ea:	400a      	ands	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2108      	movs	r1, #8
 80059fa:	438a      	bics	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2101      	movs	r1, #1
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f000 f9fb 	bl	8005e0c <UART_CheckIdleState>
 8005a16:	0003      	movs	r3, r0
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	fffff7ff 	.word	0xfffff7ff

08005a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a2c:	231e      	movs	r3, #30
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a8d      	ldr	r2, [pc, #564]	; (8005c88 <UART_SetConfig+0x264>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	0019      	movs	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4a88      	ldr	r2, [pc, #544]	; (8005c8c <UART_SetConfig+0x268>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a7f      	ldr	r2, [pc, #508]	; (8005c90 <UART_SetConfig+0x26c>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	0019      	movs	r1, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a7b      	ldr	r2, [pc, #492]	; (8005c94 <UART_SetConfig+0x270>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d127      	bne.n	8005afa <UART_SetConfig+0xd6>
 8005aaa:	4b7b      	ldr	r3, [pc, #492]	; (8005c98 <UART_SetConfig+0x274>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	2203      	movs	r2, #3
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d00d      	beq.n	8005ad2 <UART_SetConfig+0xae>
 8005ab6:	d81b      	bhi.n	8005af0 <UART_SetConfig+0xcc>
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d014      	beq.n	8005ae6 <UART_SetConfig+0xc2>
 8005abc:	d818      	bhi.n	8005af0 <UART_SetConfig+0xcc>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <UART_SetConfig+0xa4>
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00a      	beq.n	8005adc <UART_SetConfig+0xb8>
 8005ac6:	e013      	b.n	8005af0 <UART_SetConfig+0xcc>
 8005ac8:	231f      	movs	r3, #31
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e021      	b.n	8005b16 <UART_SetConfig+0xf2>
 8005ad2:	231f      	movs	r3, #31
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	e01c      	b.n	8005b16 <UART_SetConfig+0xf2>
 8005adc:	231f      	movs	r3, #31
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	e017      	b.n	8005b16 <UART_SetConfig+0xf2>
 8005ae6:	231f      	movs	r3, #31
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	2208      	movs	r2, #8
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e012      	b.n	8005b16 <UART_SetConfig+0xf2>
 8005af0:	231f      	movs	r3, #31
 8005af2:	18fb      	adds	r3, r7, r3
 8005af4:	2210      	movs	r2, #16
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	e00d      	b.n	8005b16 <UART_SetConfig+0xf2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a67      	ldr	r2, [pc, #412]	; (8005c9c <UART_SetConfig+0x278>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d104      	bne.n	8005b0e <UART_SetConfig+0xea>
 8005b04:	231f      	movs	r3, #31
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e003      	b.n	8005b16 <UART_SetConfig+0xf2>
 8005b0e:	231f      	movs	r3, #31
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	2210      	movs	r2, #16
 8005b14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69da      	ldr	r2, [r3, #28]
 8005b1a:	2380      	movs	r3, #128	; 0x80
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d15d      	bne.n	8005bde <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005b22:	231f      	movs	r3, #31
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d015      	beq.n	8005b58 <UART_SetConfig+0x134>
 8005b2c:	dc18      	bgt.n	8005b60 <UART_SetConfig+0x13c>
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d00d      	beq.n	8005b4e <UART_SetConfig+0x12a>
 8005b32:	dc15      	bgt.n	8005b60 <UART_SetConfig+0x13c>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <UART_SetConfig+0x11a>
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d005      	beq.n	8005b48 <UART_SetConfig+0x124>
 8005b3c:	e010      	b.n	8005b60 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3e:	f7fe ff61 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8005b42:	0003      	movs	r3, r0
 8005b44:	61bb      	str	r3, [r7, #24]
        break;
 8005b46:	e012      	b.n	8005b6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b48:	4b55      	ldr	r3, [pc, #340]	; (8005ca0 <UART_SetConfig+0x27c>)
 8005b4a:	61bb      	str	r3, [r7, #24]
        break;
 8005b4c:	e00f      	b.n	8005b6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b4e:	f7fe feeb 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8005b52:	0003      	movs	r3, r0
 8005b54:	61bb      	str	r3, [r7, #24]
        break;
 8005b56:	e00a      	b.n	8005b6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	61bb      	str	r3, [r7, #24]
        break;
 8005b5e:	e006      	b.n	8005b6e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b64:	231e      	movs	r3, #30
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
        break;
 8005b6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d100      	bne.n	8005b76 <UART_SetConfig+0x152>
 8005b74:	e07b      	b.n	8005c6e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	005a      	lsls	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	18d2      	adds	r2, r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	0019      	movs	r1, r3
 8005b88:	0010      	movs	r0, r2
 8005b8a:	f7fa fad9 	bl	8000140 <__udivsi3>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	d91c      	bls.n	8005bd4 <UART_SetConfig+0x1b0>
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	025b      	lsls	r3, r3, #9
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d217      	bcs.n	8005bd4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	200e      	movs	r0, #14
 8005baa:	183b      	adds	r3, r7, r0
 8005bac:	210f      	movs	r1, #15
 8005bae:	438a      	bics	r2, r1
 8005bb0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2207      	movs	r2, #7
 8005bba:	4013      	ands	r3, r2
 8005bbc:	b299      	uxth	r1, r3
 8005bbe:	183b      	adds	r3, r7, r0
 8005bc0:	183a      	adds	r2, r7, r0
 8005bc2:	8812      	ldrh	r2, [r2, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	183a      	adds	r2, r7, r0
 8005bce:	8812      	ldrh	r2, [r2, #0]
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	e04c      	b.n	8005c6e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd4:	231e      	movs	r3, #30
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e047      	b.n	8005c6e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bde:	231f      	movs	r3, #31
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d015      	beq.n	8005c14 <UART_SetConfig+0x1f0>
 8005be8:	dc18      	bgt.n	8005c1c <UART_SetConfig+0x1f8>
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d00d      	beq.n	8005c0a <UART_SetConfig+0x1e6>
 8005bee:	dc15      	bgt.n	8005c1c <UART_SetConfig+0x1f8>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <UART_SetConfig+0x1d6>
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d005      	beq.n	8005c04 <UART_SetConfig+0x1e0>
 8005bf8:	e010      	b.n	8005c1c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7fe ff03 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	61bb      	str	r3, [r7, #24]
        break;
 8005c02:	e012      	b.n	8005c2a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b26      	ldr	r3, [pc, #152]	; (8005ca0 <UART_SetConfig+0x27c>)
 8005c06:	61bb      	str	r3, [r7, #24]
        break;
 8005c08:	e00f      	b.n	8005c2a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fe fe8d 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	61bb      	str	r3, [r7, #24]
        break;
 8005c12:	e00a      	b.n	8005c2a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	61bb      	str	r3, [r7, #24]
        break;
 8005c1a:	e006      	b.n	8005c2a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c20:	231e      	movs	r3, #30
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	2201      	movs	r2, #1
 8005c26:	701a      	strb	r2, [r3, #0]
        break;
 8005c28:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01e      	beq.n	8005c6e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	085a      	lsrs	r2, r3, #1
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	18d2      	adds	r2, r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	0019      	movs	r1, r3
 8005c40:	0010      	movs	r0, r2
 8005c42:	f7fa fa7d 	bl	8000140 <__udivsi3>
 8005c46:	0003      	movs	r3, r0
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b0f      	cmp	r3, #15
 8005c50:	d909      	bls.n	8005c66 <UART_SetConfig+0x242>
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	025b      	lsls	r3, r3, #9
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d204      	bcs.n	8005c66 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	60da      	str	r2, [r3, #12]
 8005c64:	e003      	b.n	8005c6e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005c66:	231e      	movs	r3, #30
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c7a:	231e      	movs	r3, #30
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	781b      	ldrb	r3, [r3, #0]
}
 8005c80:	0018      	movs	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b008      	add	sp, #32
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	ffff69f3 	.word	0xffff69f3
 8005c8c:	ffffcfff 	.word	0xffffcfff
 8005c90:	fffff4ff 	.word	0xfffff4ff
 8005c94:	40013800 	.word	0x40013800
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40004400 	.word	0x40004400
 8005ca0:	007a1200 	.word	0x007a1200

08005ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4a4a      	ldr	r2, [pc, #296]	; (8005de8 <UART_AdvFeatureConfig+0x144>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d00b      	beq.n	8005cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	4a43      	ldr	r2, [pc, #268]	; (8005dec <UART_AdvFeatureConfig+0x148>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	4a3b      	ldr	r2, [pc, #236]	; (8005df0 <UART_AdvFeatureConfig+0x14c>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	0019      	movs	r1, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2208      	movs	r2, #8
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d00b      	beq.n	8005d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	4a34      	ldr	r2, [pc, #208]	; (8005df4 <UART_AdvFeatureConfig+0x150>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	0019      	movs	r1, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2210      	movs	r2, #16
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d00b      	beq.n	8005d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4a2c      	ldr	r2, [pc, #176]	; (8005df8 <UART_AdvFeatureConfig+0x154>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	0019      	movs	r1, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d00b      	beq.n	8005d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	4a25      	ldr	r2, [pc, #148]	; (8005dfc <UART_AdvFeatureConfig+0x158>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	0019      	movs	r1, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2240      	movs	r2, #64	; 0x40
 8005d7e:	4013      	ands	r3, r2
 8005d80:	d01d      	beq.n	8005dbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <UART_AdvFeatureConfig+0x15c>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	035b      	lsls	r3, r3, #13
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d10b      	bne.n	8005dbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <UART_AdvFeatureConfig+0x160>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	0019      	movs	r1, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	2280      	movs	r2, #128	; 0x80
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	d00b      	beq.n	8005de0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4a0e      	ldr	r2, [pc, #56]	; (8005e08 <UART_AdvFeatureConfig+0x164>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	0019      	movs	r1, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }
}
 8005de0:	46c0      	nop			; (mov r8, r8)
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b002      	add	sp, #8
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	fffdffff 	.word	0xfffdffff
 8005dec:	fffeffff 	.word	0xfffeffff
 8005df0:	fffbffff 	.word	0xfffbffff
 8005df4:	ffff7fff 	.word	0xffff7fff
 8005df8:	ffffefff 	.word	0xffffefff
 8005dfc:	ffffdfff 	.word	0xffffdfff
 8005e00:	ffefffff 	.word	0xffefffff
 8005e04:	ff9fffff 	.word	0xff9fffff
 8005e08:	fff7ffff 	.word	0xfff7ffff

08005e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2280      	movs	r2, #128	; 0x80
 8005e18:	2100      	movs	r1, #0
 8005e1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e1c:	f7fd f948 	bl	80030b0 <HAL_GetTick>
 8005e20:	0003      	movs	r3, r0
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2208      	movs	r2, #8
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d10c      	bne.n	8005e4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2280      	movs	r2, #128	; 0x80
 8005e36:	0391      	lsls	r1, r2, #14
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <UART_CheckIdleState+0x8c>)
 8005e3c:	9200      	str	r2, [sp, #0]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f000 f82c 	bl	8005e9c <UART_WaitOnFlagUntilTimeout>
 8005e44:	1e03      	subs	r3, r0, #0
 8005e46:	d001      	beq.n	8005e4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e021      	b.n	8005e90 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2204      	movs	r2, #4
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d10c      	bne.n	8005e74 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2280      	movs	r2, #128	; 0x80
 8005e5e:	03d1      	lsls	r1, r2, #15
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <UART_CheckIdleState+0x8c>)
 8005e64:	9200      	str	r2, [sp, #0]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f000 f818 	bl	8005e9c <UART_WaitOnFlagUntilTimeout>
 8005e6c:	1e03      	subs	r3, r0, #0
 8005e6e:	d001      	beq.n	8005e74 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e00d      	b.n	8005e90 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2274      	movs	r2, #116	; 0x74
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	0018      	movs	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b004      	add	sp, #16
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	01ffffff 	.word	0x01ffffff

08005e9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	1dfb      	adds	r3, r7, #7
 8005eaa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eac:	e05e      	b.n	8005f6c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	d05b      	beq.n	8005f6c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb4:	f7fd f8fc 	bl	80030b0 <HAL_GetTick>
 8005eb8:	0002      	movs	r2, r0
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d302      	bcc.n	8005eca <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d11b      	bne.n	8005f02 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	492f      	ldr	r1, [pc, #188]	; (8005f94 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005ed6:	400a      	ands	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	438a      	bics	r2, r1
 8005ee8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2274      	movs	r2, #116	; 0x74
 8005efa:	2100      	movs	r1, #0
 8005efc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e044      	b.n	8005f8c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d02e      	beq.n	8005f6c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	401a      	ands	r2, r3
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d124      	bne.n	8005f6c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2280      	movs	r2, #128	; 0x80
 8005f28:	0112      	lsls	r2, r2, #4
 8005f2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4917      	ldr	r1, [pc, #92]	; (8005f94 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005f38:	400a      	ands	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2101      	movs	r1, #1
 8005f48:	438a      	bics	r2, r1
 8005f4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	2120      	movs	r1, #32
 8005f5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2274      	movs	r2, #116	; 0x74
 8005f64:	2100      	movs	r1, #0
 8005f66:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e00f      	b.n	8005f8c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	4013      	ands	r3, r2
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	425a      	negs	r2, r3
 8005f7c:	4153      	adcs	r3, r2
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	001a      	movs	r2, r3
 8005f82:	1dfb      	adds	r3, r7, #7
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d091      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b004      	add	sp, #16
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	fffffe5f 	.word	0xfffffe5f

08005f98 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d206      	bcs.n	8005fb8 <_ZSt16__deque_buf_sizej+0x20>
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	0098      	lsls	r0, r3, #2
 8005fb0:	f7fa f8c6 	bl	8000140 <__udivsi3>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	e000      	b.n	8005fba <_ZSt16__deque_buf_sizej+0x22>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	0018      	movs	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	b002      	add	sp, #8
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <_ZN11transmitterC1Ev>:
#define LENGTH_START	3
#define LENGTH_ZERO		1
#define LENGTH_ONE		2
#define LENGTH_STOP		4

class transmitter
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f000 f879 	bl	80060cc <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	332c      	adds	r3, #44	; 0x2c
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f000 f8a6 	bl	8006130 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b002      	add	sp, #8
 8005fec:	bd80      	pop	{r7, pc}

08005fee <_ZN8receiverC1Ev>:
#define START_MIN		290
#define START_MAX		300
#define STOP_MIN		390
#define STOP_MAX		400

class receiver
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f000 f867 	bl	80060cc <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3328      	adds	r3, #40	; 0x28
 8006002:	0018      	movs	r0, r3
 8006004:	f000 f894 	bl	8006130 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	b002      	add	sp, #8
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <transmitterSendBlocking>:

	return t.send(messageString);
}

void transmitterSendBlocking(char * message)
{
 8006014:	b5b0      	push	{r4, r5, r7, lr}
 8006016:	b090      	sub	sp, #64	; 0x40
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	// Convert C char pointer to C++ string
	string messageString(message);
 800601c:	2424      	movs	r4, #36	; 0x24
 800601e:	193b      	adds	r3, r7, r4
 8006020:	0018      	movs	r0, r3
 8006022:	f002 fd67 	bl	8008af4 <_ZNSaIcEC1Ev>
 8006026:	193a      	adds	r2, r7, r4
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	250c      	movs	r5, #12
 800602c:	197b      	adds	r3, r7, r5
 800602e:	0018      	movs	r0, r3
 8006030:	f002 ffac 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006034:	193b      	adds	r3, r7, r4
 8006036:	0018      	movs	r0, r3
 8006038:	f002 fd5d 	bl	8008af6 <_ZNSaIcED1Ev>

	return t.sendBlocking(messageString);
 800603c:	002c      	movs	r4, r5
 800603e:	193a      	adds	r2, r7, r4
 8006040:	2528      	movs	r5, #40	; 0x28
 8006042:	197b      	adds	r3, r7, r5
 8006044:	0011      	movs	r1, r2
 8006046:	0018      	movs	r0, r3
 8006048:	f002 ff6e 	bl	8008f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800604c:	197a      	adds	r2, r7, r5
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <transmitterSendBlocking+0x5c>)
 8006050:	0011      	movs	r1, r2
 8006052:	0018      	movs	r0, r3
 8006054:	f002 fbf4 	bl	8008840 <_ZN11transmitter12sendBlockingENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006058:	197b      	adds	r3, r7, r5
 800605a:	0018      	movs	r0, r3
 800605c:	f002 fec4 	bl	8008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string messageString(message);
 8006060:	193b      	adds	r3, r7, r4
 8006062:	0018      	movs	r0, r3
 8006064:	f002 fec0 	bl	8008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return t.sendBlocking(messageString);
 8006068:	46c0      	nop			; (mov r8, r8)
}
 800606a:	46bd      	mov	sp, r7
 800606c:	b010      	add	sp, #64	; 0x40
 800606e:	bdb0      	pop	{r4, r5, r7, pc}
 8006070:	200001fc 	.word	0x200001fc

08006074 <transmitterTick>:
{
	return t.sendAck();
}

void transmitterTick()
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
	return t.tick();
 8006078:	4b03      	ldr	r3, [pc, #12]	; (8006088 <transmitterTick+0x14>)
 800607a:	0018      	movs	r0, r3
 800607c:	f002 fc02 	bl	8008884 <_ZN11transmitter4tickEv>
 8006080:	46c0      	nop			; (mov r8, r8)
}
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	200001fc 	.word	0x200001fc

0800608c <receiverWaitForAck>:
	// Here be dragons
	*str = const_cast<char*>(message.c_str());
}

bool receiverWaitForAck(uint16_t milliseconds)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	0002      	movs	r2, r0
 8006094:	1dbb      	adds	r3, r7, #6
 8006096:	801a      	strh	r2, [r3, #0]
	return r.waitForAck(milliseconds);
 8006098:	1dbb      	adds	r3, r7, #6
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <receiverWaitForAck+0x24>)
 800609e:	0011      	movs	r1, r2
 80060a0:	0018      	movs	r0, r3
 80060a2:	f001 f90f 	bl	80072c4 <_ZN8receiver10waitForAckEt>
 80060a6:	0003      	movs	r3, r0
}
 80060a8:	0018      	movs	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b002      	add	sp, #8
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000254 	.word	0x20000254

080060b4 <receiverTick>:

void receiverTick()
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
	return r.tick();
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <receiverTick+0x14>)
 80060ba:	0018      	movs	r0, r3
 80060bc:	f001 f96c 	bl	8007398 <_ZN8receiver4tickEv>
 80060c0:	46c0      	nop			; (mov r8, r8)
}
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	20000254 	.word	0x20000254

080060cc <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	0018      	movs	r0, r3
 80060d8:	f000 f869 	bl	80061ae <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	0018      	movs	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	b002      	add	sp, #8
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80060e6:	b5b0      	push	{r4, r5, r7, lr}
 80060e8:	b08a      	sub	sp, #40	; 0x28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80060ee:	2408      	movs	r4, #8
 80060f0:	193b      	adds	r3, r7, r4
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	0011      	movs	r1, r2
 80060f6:	0018      	movs	r0, r3
 80060f8:	f000 f88d 	bl	8006216 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 80060fc:	2518      	movs	r5, #24
 80060fe:	197b      	adds	r3, r7, r5
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	0011      	movs	r1, r2
 8006104:	0018      	movs	r0, r3
 8006106:	f000 f897 	bl	8006238 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	0018      	movs	r0, r3
 800610e:	f000 f8a4 	bl	800625a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8006112:	0003      	movs	r3, r0
 8006114:	197a      	adds	r2, r7, r5
 8006116:	1939      	adds	r1, r7, r4
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f8c1 	bl	80062a0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	0018      	movs	r0, r3
 8006122:	f000 f856 	bl	80061d2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	b00a      	add	sp, #40	; 0x28
 800612e:	bdb0      	pop	{r4, r5, r7, pc}

08006130 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>:
      deque() : _Base() { }
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	0018      	movs	r0, r3
 800613c:	f000 f8dc 	bl	80062f8 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EEC1Ev>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	0018      	movs	r0, r3
 8006144:	46bd      	mov	sp, r7
 8006146:	b002      	add	sp, #8
 8006148:	bd80      	pop	{r7, pc}

0800614a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>:
      ~deque()
 800614a:	b5b0      	push	{r4, r5, r7, lr}
 800614c:	b08a      	sub	sp, #40	; 0x28
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8006152:	2408      	movs	r4, #8
 8006154:	193b      	adds	r3, r7, r4
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	0011      	movs	r1, r2
 800615a:	0018      	movs	r0, r3
 800615c:	f000 f900 	bl	8006360 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>
 8006160:	2518      	movs	r5, #24
 8006162:	197b      	adds	r3, r7, r5
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	0011      	movs	r1, r2
 8006168:	0018      	movs	r0, r3
 800616a:	f000 f90a 	bl	8006382 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	0018      	movs	r0, r3
 8006172:	f000 f917 	bl	80063a4 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8006176:	0003      	movs	r3, r0
 8006178:	197a      	adds	r2, r7, r5
 800617a:	1939      	adds	r1, r7, r4
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f934 	bl	80063ea <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	0018      	movs	r0, r3
 8006186:	f000 f8c9 	bl	800631c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	0018      	movs	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	b00a      	add	sp, #40	; 0x28
 8006192:	bdb0      	pop	{r4, r5, r7, pc}

08006194 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	0018      	movs	r0, r3
 80061a0:	f000 f94b 	bl	800643a <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	0018      	movs	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	b002      	add	sp, #8
 80061ac:	bd80      	pop	{r7, pc}

080061ae <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Deque_base()
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f000 f921 	bl	8006400 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2100      	movs	r1, #0
 80061c2:	0018      	movs	r0, r3
 80061c4:	f000 f946 	bl	8006454 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	0018      	movs	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b002      	add	sp, #8
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d010      	beq.n	8006204 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80061ea:	1d1a      	adds	r2, r3, #4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	0018      	movs	r0, r3
 80061f0:	f000 f99c 	bl	800652c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6819      	ldr	r1, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	0018      	movs	r0, r3
 8006200:	f000 f9af 	bl	8006562 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>
    }
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	0018      	movs	r0, r3
 8006208:	f7ff ffc4 	bl	8006194 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b002      	add	sp, #8
 8006214:	bd80      	pop	{r7, pc}

08006216 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	001a      	movs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	0011      	movs	r1, r2
 800622a:	0018      	movs	r0, r3
 800622c:	f000 f81e 	bl	800626c <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}

08006238 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	3318      	adds	r3, #24
 8006246:	001a      	movs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	0011      	movs	r1, r2
 800624c:	0018      	movs	r0, r3
 800624e:	f000 f80d 	bl	800626c <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	46bd      	mov	sp, r7
 8006256:	b002      	add	sp, #8
 8006258:	bd80      	pop	{r7, pc}

0800625a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	0018      	movs	r0, r3
 8006266:	46bd      	mov	sp, r7
 8006268:	b002      	add	sp, #8
 800626a:	bd80      	pop	{r7, pc}

0800626c <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	605a      	str	r2, [r3, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	609a      	str	r2, [r3, #8]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	0018      	movs	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	b002      	add	sp, #8
 800629e:	bd80      	pop	{r7, pc}

080062a0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80062a0:	b5b0      	push	{r4, r5, r7, lr}
 80062a2:	b08c      	sub	sp, #48	; 0x30
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	2410      	movs	r4, #16
 80062b2:	193b      	adds	r3, r7, r4
 80062b4:	0011      	movs	r1, r2
 80062b6:	0018      	movs	r0, r3
 80062b8:	f7ff ffd8 	bl	800626c <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	2520      	movs	r5, #32
 80062c0:	197b      	adds	r3, r7, r5
 80062c2:	0011      	movs	r1, r2
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7ff ffd1 	bl	800626c <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 80062ca:	197a      	adds	r2, r7, r5
 80062cc:	1939      	adds	r1, r7, r4
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f000 f961 	bl	8006598 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>
      }
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	46bd      	mov	sp, r7
 80062da:	b00c      	add	sp, #48	; 0x30
 80062dc:	bdb0      	pop	{r4, r5, r7, pc}

080062de <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 f9d0 	bl	800668e <_ZNSaISt6bitsetILj8EEED1Ev>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	0018      	movs	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b002      	add	sp, #8
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EEC1Ev>:
      _Deque_base()
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	0018      	movs	r0, r3
 8006304:	f000 f9a6 	bl	8006654 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2100      	movs	r1, #0
 800630c:	0018      	movs	r0, r3
 800630e:	f000 f9cb 	bl	80066a8 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_initialize_mapEj>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}

0800631c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d010      	beq.n	800634e <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8006334:	1d1a      	adds	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0018      	movs	r0, r3
 800633a:	f000 fa1d 	bl	8006778 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6819      	ldr	r1, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	0018      	movs	r0, r3
 800634a:	f000 fa30 	bl	80067ae <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	0018      	movs	r0, r3
 8006352:	f7ff ffc4 	bl	80062de <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implD1Ev>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b002      	add	sp, #8
 800635e:	bd80      	pop	{r7, pc}

08006360 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	3308      	adds	r3, #8
 800636e:	001a      	movs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	0011      	movs	r1, r2
 8006374:	0018      	movs	r0, r3
 8006376:	f000 f81e 	bl	80063b6 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	46bd      	mov	sp, r7
 800637e:	b002      	add	sp, #8
 8006380:	bd80      	pop	{r7, pc}

08006382 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	3318      	adds	r3, #24
 8006390:	001a      	movs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0011      	movs	r1, r2
 8006396:	0018      	movs	r0, r3
 8006398:	f000 f80d 	bl	80063b6 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	46bd      	mov	sp, r7
 80063a0:	b002      	add	sp, #8
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b002      	add	sp, #8
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	605a      	str	r2, [r3, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	609a      	str	r2, [r3, #8]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	0018      	movs	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	b002      	add	sp, #8
 80063e8:	bd80      	pop	{r7, pc}

080063ea <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08c      	sub	sp, #48	; 0x30
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]
      }
 80063f8:	46c0      	nop			; (mov r8, r8)
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b00c      	add	sp, #48	; 0x30
 80063fe:	bd80      	pop	{r7, pc}

08006400 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>:
	_Deque_impl()
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	0018      	movs	r0, r3
 800640c:	f000 f9ea 	bl	80067e4 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	605a      	str	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3308      	adds	r3, #8
 8006420:	0018      	movs	r0, r3
 8006422:	f000 f9ec 	bl	80067fe <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3318      	adds	r3, #24
 800642a:	0018      	movs	r0, r3
 800642c:	f000 f9e7 	bl	80067fe <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
	{ }
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	0018      	movs	r0, r3
 8006434:	46bd      	mov	sp, r7
 8006436:	b002      	add	sp, #8
 8006438:	bd80      	pop	{r7, pc}

0800643a <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	0018      	movs	r0, r3
 8006446:	f000 f9ef 	bl	8006828 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	0018      	movs	r0, r3
 800644e:	46bd      	mov	sp, r7
 8006450:	b002      	add	sp, #8
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	b089      	sub	sp, #36	; 0x24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 800645e:	2018      	movs	r0, #24
 8006460:	f7ff fd9a 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 8006464:	0003      	movs	r3, r0
 8006466:	0019      	movs	r1, r3
 8006468:	6838      	ldr	r0, [r7, #0]
 800646a:	f7f9 fe69 	bl	8000140 <__udivsi3>
 800646e:	0003      	movs	r3, r0
 8006470:	3301      	adds	r3, #1
 8006472:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8006474:	2308      	movs	r3, #8
 8006476:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	3302      	adds	r3, #2
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	2310      	movs	r3, #16
 8006480:	18fa      	adds	r2, r7, r3
 8006482:	230c      	movs	r3, #12
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	0011      	movs	r1, r2
 8006488:	0018      	movs	r0, r3
 800648a:	f000 f9d6 	bl	800683a <_ZSt3maxIjERKT_S2_S2_>
 800648e:	0003      	movs	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	0011      	movs	r1, r2
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f9dd 	bl	800685e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 80064a4:	0002      	movs	r2, r0
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6859      	ldr	r1, [r3, #4]
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	1acb      	subs	r3, r1, r3
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80064ba:	18d3      	adds	r3, r2, r3
 80064bc:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	18d3      	adds	r3, r2, r3
 80064c6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	0018      	movs	r0, r3
 80064d0:	f000 f9e2 	bl	8006898 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3308      	adds	r3, #8
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	0011      	movs	r1, r2
 80064dc:	0018      	movs	r0, r3
 80064de:	f000 f9f6 	bl	80068ce <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3318      	adds	r3, #24
 80064e6:	001a      	movs	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	3b04      	subs	r3, #4
 80064ec:	0019      	movs	r1, r3
 80064ee:	0010      	movs	r0, r2
 80064f0:	f000 f9ed 	bl	80068ce <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8006500:	2018      	movs	r0, #24
 8006502:	f7ff fd49 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 8006506:	0002      	movs	r2, r0
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	0011      	movs	r1, r2
 800650c:	0018      	movs	r0, r3
 800650e:	f7f9 fe9d 	bl	800024c <__aeabi_uidivmod>
 8006512:	000b      	movs	r3, r1
 8006514:	001a      	movs	r2, r3
					+ __num_elements
 8006516:	0013      	movs	r3, r2
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	189b      	adds	r3, r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	619a      	str	r2, [r3, #24]
    }
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b009      	add	sp, #36	; 0x24
 800652a:	bd90      	pop	{r4, r7, pc}

0800652c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d20a      	bcs.n	800655a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x2e>
	_M_deallocate_node(*__n);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	0011      	movs	r1, r2
 800654c:	0018      	movs	r0, r3
 800654e:	f000 f9da 	bl	8006906 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	3304      	adds	r3, #4
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	e7f0      	b.n	800653c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x10>
    }
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	46bd      	mov	sp, r7
 800655e:	b006      	add	sp, #24
 8006560:	bd80      	pop	{r7, pc}

08006562 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8006562:	b590      	push	{r4, r7, lr}
 8006564:	b087      	sub	sp, #28
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800656e:	2414      	movs	r4, #20
 8006570:	193b      	adds	r3, r7, r4
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	0011      	movs	r1, r2
 8006576:	0018      	movs	r0, r3
 8006578:	f000 f9d8 	bl	800692c <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	193b      	adds	r3, r7, r4
 8006582:	0018      	movs	r0, r3
 8006584:	f000 f9f2 	bl	800696c <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8006588:	193b      	adds	r3, r7, r4
 800658a:	0018      	movs	r0, r3
 800658c:	f000 f9e1 	bl	8006952 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
      }
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b007      	add	sp, #28
 8006596:	bd90      	pop	{r4, r7, pc}

08006598 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>:
        }
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 8006598:	b5b0      	push	{r4, r5, r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	3304      	adds	r3, #4
 80065aa:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d219      	bcs.n	80065ea <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681d      	ldr	r5, [r3, #0]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	681c      	ldr	r4, [r3, #0]
 80065be:	f000 f9e5 	bl	800698c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>
 80065c2:	0002      	movs	r2, r0
 80065c4:	0013      	movs	r3, r2
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	189b      	adds	r3, r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	18e4      	adds	r4, r4, r3
		       _M_get_Tp_allocator());
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7ff fe42 	bl	800625a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80065d6:	0003      	movs	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80065d8:	001a      	movs	r2, r3
 80065da:	0021      	movs	r1, r4
 80065dc:	0028      	movs	r0, r5
 80065de:	f000 f9de 	bl	800699e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	3304      	adds	r3, #4
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e7e0      	b.n	80065ac <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x14>

       if (__first._M_node != __last._M_node)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d01c      	beq.n	8006630 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	681c      	ldr	r4, [r3, #0]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	0018      	movs	r0, r3
 8006602:	f7ff fe2a 	bl	800625a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8006606:	0003      	movs	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8006608:	001a      	movs	r2, r3
 800660a:	0029      	movs	r1, r5
 800660c:	0020      	movs	r0, r4
 800660e:	f000 f9c6 	bl	800699e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685c      	ldr	r4, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	0018      	movs	r0, r3
 800661e:	f7ff fe1c 	bl	800625a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8006622:	0003      	movs	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8006624:	001a      	movs	r2, r3
 8006626:	0029      	movs	r1, r5
 8006628:	0020      	movs	r0, r4
 800662a:	f000 f9b8 	bl	800699e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 800662e:	e00d      	b.n	800664c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	681c      	ldr	r4, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	0018      	movs	r0, r3
 800663c:	f7ff fe0d 	bl	800625a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8006640:	0003      	movs	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8006642:	001a      	movs	r2, r3
 8006644:	0029      	movs	r1, r5
 8006646:	0020      	movs	r0, r4
 8006648:	f000 f9a9 	bl	800699e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
     }
 800664c:	46c0      	nop			; (mov r8, r8)
 800664e:	46bd      	mov	sp, r7
 8006650:	b006      	add	sp, #24
 8006652:	bdb0      	pop	{r4, r5, r7, pc}

08006654 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl()
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f000 f9ad 	bl	80069be <_ZNSaISt6bitsetILj8EEEC1Ev>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3308      	adds	r3, #8
 8006674:	0018      	movs	r0, r3
 8006676:	f000 f9af 	bl	80069d8 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3318      	adds	r3, #24
 800667e:	0018      	movs	r0, r3
 8006680:	f000 f9aa 	bl	80069d8 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>
	{ }
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	0018      	movs	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	b002      	add	sp, #8
 800668c:	bd80      	pop	{r7, pc}

0800668e <_ZNSaISt6bitsetILj8EEED1Ev>:
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0018      	movs	r0, r3
 800669a:	f000 f9b2 	bl	8006a02 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEED1Ev>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0018      	movs	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b002      	add	sp, #8
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80066a8:	b590      	push	{r4, r7, lr}
 80066aa:	b089      	sub	sp, #36	; 0x24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 80066b2:	2004      	movs	r0, #4
 80066b4:	f7ff fc70 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 80066b8:	0003      	movs	r3, r0
 80066ba:	0019      	movs	r1, r3
 80066bc:	6838      	ldr	r0, [r7, #0]
 80066be:	f7f9 fd3f 	bl	8000140 <__udivsi3>
 80066c2:	0003      	movs	r3, r0
 80066c4:	3301      	adds	r3, #1
 80066c6:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80066c8:	2308      	movs	r3, #8
 80066ca:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	3302      	adds	r3, #2
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	2310      	movs	r3, #16
 80066d4:	18fa      	adds	r2, r7, r3
 80066d6:	230c      	movs	r3, #12
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	0011      	movs	r1, r2
 80066dc:	0018      	movs	r0, r3
 80066de:	f000 f8ac 	bl	800683a <_ZSt3maxIjERKT_S2_S2_>
 80066e2:	0003      	movs	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	0011      	movs	r1, r2
 80066f2:	0018      	movs	r0, r3
 80066f4:	f000 f98e 	bl	8006a14 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>
 80066f8:	0002      	movs	r2, r0
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	1acb      	subs	r3, r1, r3
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800670e:	18d3      	adds	r3, r2, r3
 8006710:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	18d3      	adds	r3, r2, r3
 800671a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	69b9      	ldr	r1, [r7, #24]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	0018      	movs	r0, r3
 8006724:	f000 f993 	bl	8006a4e <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3308      	adds	r3, #8
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	0011      	movs	r1, r2
 8006730:	0018      	movs	r0, r3
 8006732:	f000 f9a7 	bl	8006a84 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3318      	adds	r3, #24
 800673a:	001a      	movs	r2, r3
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	3b04      	subs	r3, #4
 8006740:	0019      	movs	r1, r3
 8006742:	0010      	movs	r0, r2
 8006744:	f000 f99e 	bl	8006a84 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8006754:	2004      	movs	r0, #4
 8006756:	f7ff fc1f 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 800675a:	0002      	movs	r2, r0
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	0011      	movs	r1, r2
 8006760:	0018      	movs	r0, r3
 8006762:	f7f9 fd73 	bl	800024c <__aeabi_uidivmod>
 8006766:	000b      	movs	r3, r1
					+ __num_elements
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	619a      	str	r2, [r3, #24]
    }
 8006770:	46c0      	nop			; (mov r8, r8)
 8006772:	46bd      	mov	sp, r7
 8006774:	b009      	add	sp, #36	; 0x24
 8006776:	bd90      	pop	{r4, r7, pc}

08006778 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d20a      	bcs.n	80067a6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2e>
	_M_deallocate_node(*__n);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	0011      	movs	r1, r2
 8006798:	0018      	movs	r0, r3
 800679a:	f000 f98c 	bl	8006ab6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	3304      	adds	r3, #4
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e7f0      	b.n	8006788 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b006      	add	sp, #24
 80067ac:	bd80      	pop	{r7, pc}

080067ae <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80067ae:	b590      	push	{r4, r7, lr}
 80067b0:	b087      	sub	sp, #28
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80067ba:	2414      	movs	r4, #20
 80067bc:	193b      	adds	r3, r7, r4
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	0011      	movs	r1, r2
 80067c2:	0018      	movs	r0, r3
 80067c4:	f000 f98a 	bl	8006adc <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	193b      	adds	r3, r7, r4
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 f9a4 	bl	8006b1c <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80067d4:	193b      	adds	r3, r7, r4
 80067d6:	0018      	movs	r0, r3
 80067d8:	f000 f993 	bl	8006b02 <_ZNSaIPSt6bitsetILj8EEED1Ev>
      }
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	b007      	add	sp, #28
 80067e2:	bd90      	pop	{r4, r7, pc}

080067e4 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	0018      	movs	r0, r3
 80067f0:	f000 f9a4 	bl	8006b3c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	0018      	movs	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b002      	add	sp, #8
 80067fc:	bd80      	pop	{r7, pc}

080067fe <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	60da      	str	r2, [r3, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0018      	movs	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	b002      	add	sp, #8
 8006826:	bd80      	pop	{r7, pc}

08006828 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	0018      	movs	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	b002      	add	sp, #8
 8006838:	bd80      	pop	{r7, pc}

0800683a <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d201      	bcs.n	8006854 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	e000      	b.n	8006856 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006854:	687b      	ldr	r3, [r7, #4]
    }
 8006856:	0018      	movs	r0, r3
 8006858:	46bd      	mov	sp, r7
 800685a:	b002      	add	sp, #8
 800685c:	bd80      	pop	{r7, pc}

0800685e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800685e:	b5b0      	push	{r4, r5, r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8006868:	250c      	movs	r5, #12
 800686a:	197b      	adds	r3, r7, r5
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	0011      	movs	r1, r2
 8006870:	0018      	movs	r0, r3
 8006872:	f000 f85b 	bl	800692c <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	197b      	adds	r3, r7, r5
 800687a:	0011      	movs	r1, r2
 800687c:	0018      	movs	r0, r3
 800687e:	f000 f966 	bl	8006b4e <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>
 8006882:	0004      	movs	r4, r0
 8006884:	46c0      	nop			; (mov r8, r8)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8006886:	197b      	adds	r3, r7, r5
 8006888:	0018      	movs	r0, r3
 800688a:	f000 f862 	bl	8006952 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800688e:	0023      	movs	r3, r4
      }
 8006890:	0018      	movs	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	b004      	add	sp, #16
 8006896:	bdb0      	pop	{r4, r5, r7, pc}

08006898 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d20a      	bcs.n	80068c6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x2e>
	    *__cur = this->_M_allocate_node();
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	0018      	movs	r0, r3
 80068b4:	f000 f95b 	bl	8006b6e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 80068b8:	0002      	movs	r2, r0
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	3304      	adds	r3, #4
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	e7f0      	b.n	80068a8 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x10>
    }
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	46bd      	mov	sp, r7
 80068ca:	b006      	add	sp, #24
 80068cc:	bd80      	pop	{r7, pc}

080068ce <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80068ce:	b590      	push	{r4, r7, lr}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685c      	ldr	r4, [r3, #4]
 80068ea:	f000 f952 	bl	8006b92 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 80068ee:	0002      	movs	r2, r0
 80068f0:	0013      	movs	r3, r2
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	189b      	adds	r3, r3, r2
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	18e2      	adds	r2, r4, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	609a      	str	r2, [r3, #8]
      }
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	46bd      	mov	sp, r7
 8006902:	b003      	add	sp, #12
 8006904:	bd90      	pop	{r4, r7, pc}

08006906 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8006906:	b590      	push	{r4, r7, lr}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8006910:	687c      	ldr	r4, [r7, #4]
 8006912:	2018      	movs	r0, #24
 8006914:	f7ff fb40 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 8006918:	0002      	movs	r2, r0
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	0019      	movs	r1, r3
 800691e:	0020      	movs	r0, r4
 8006920:	f000 f940 	bl	8006ba4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8006924:	46c0      	nop			; (mov r8, r8)
 8006926:	46bd      	mov	sp, r7
 8006928:	b003      	add	sp, #12
 800692a:	bd90      	pop	{r4, r7, pc}

0800692c <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	0018      	movs	r0, r3
 800693a:	f000 f943 	bl	8006bc4 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800693e:	0002      	movs	r2, r0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	0011      	movs	r1, r2
 8006944:	0018      	movs	r0, r3
 8006946:	f000 f946 	bl	8006bd6 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	46bd      	mov	sp, r7
 800694e:	b002      	add	sp, #8
 8006950:	bd80      	pop	{r7, pc}

08006952 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0018      	movs	r0, r3
 800695e:	f000 f948 	bl	8006bf2 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	0018      	movs	r0, r3
 8006966:	46bd      	mov	sp, r7
 8006968:	b002      	add	sp, #8
 800696a:	bd80      	pop	{r7, pc}

0800696c <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	0018      	movs	r0, r3
 8006980:	f000 f940 	bl	8006c04 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>
 8006984:	46c0      	nop			; (mov r8, r8)
 8006986:	46bd      	mov	sp, r7
 8006988:	b004      	add	sp, #16
 800698a:	bd80      	pop	{r7, pc}

0800698c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8006990:	2018      	movs	r0, #24
 8006992:	f7ff fb01 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 8006996:	0003      	movs	r3, r0
 8006998:	0018      	movs	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	0011      	movs	r1, r2
 80069b0:	0018      	movs	r0, r3
 80069b2:	f000 f935 	bl	8006c20 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	46bd      	mov	sp, r7
 80069ba:	b004      	add	sp, #16
 80069bc:	bd80      	pop	{r7, pc}

080069be <_ZNSaISt6bitsetILj8EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	0018      	movs	r0, r3
 80069ca:	f000 f938 	bl	8006c3e <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEEC1Ev>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	0018      	movs	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b002      	add	sp, #8
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	605a      	str	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	609a      	str	r2, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	60da      	str	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0018      	movs	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	b002      	add	sp, #8
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEED1Ev>:
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b002      	add	sp, #8
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8006a14:	b5b0      	push	{r4, r5, r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8006a1e:	250c      	movs	r5, #12
 8006a20:	197b      	adds	r3, r7, r5
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	0011      	movs	r1, r2
 8006a26:	0018      	movs	r0, r3
 8006a28:	f000 f858 	bl	8006adc <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	197b      	adds	r3, r7, r5
 8006a30:	0011      	movs	r1, r2
 8006a32:	0018      	movs	r0, r3
 8006a34:	f000 f90c 	bl	8006c50 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE8allocateERS3_j>
 8006a38:	0004      	movs	r4, r0
 8006a3a:	46c0      	nop			; (mov r8, r8)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8006a3c:	197b      	adds	r3, r7, r5
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f000 f85f 	bl	8006b02 <_ZNSaIPSt6bitsetILj8EEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8006a44:	0023      	movs	r3, r4
      }
 8006a46:	0018      	movs	r0, r3
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	b004      	add	sp, #16
 8006a4c:	bdb0      	pop	{r4, r5, r7, pc}

08006a4e <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d20a      	bcs.n	8006a7c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2e>
	    *__cur = this->_M_allocate_node();
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f000 f901 	bl	8006c70 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>
 8006a6e:	0002      	movs	r2, r0
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	3304      	adds	r3, #4
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	e7f0      	b.n	8006a5e <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8006a7c:	46c0      	nop			; (mov r8, r8)
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	b006      	add	sp, #24
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685c      	ldr	r4, [r3, #4]
 8006aa0:	f000 f8f8 	bl	8006c94 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	18e2      	adds	r2, r4, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	609a      	str	r2, [r3, #8]
      }
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	b003      	add	sp, #12
 8006ab4:	bd90      	pop	{r4, r7, pc}

08006ab6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8006ab6:	b590      	push	{r4, r7, lr}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8006ac0:	687c      	ldr	r4, [r7, #4]
 8006ac2:	2004      	movs	r0, #4
 8006ac4:	f7ff fa68 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 8006ac8:	0002      	movs	r2, r0
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	0019      	movs	r1, r3
 8006ace:	0020      	movs	r0, r4
 8006ad0:	f000 f8e9 	bl	8006ca6 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE10deallocateERS2_PS1_j>
      }
 8006ad4:	46c0      	nop			; (mov r8, r8)
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b003      	add	sp, #12
 8006ada:	bd90      	pop	{r4, r7, pc}

08006adc <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f000 f8ec 	bl	8006cc6 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8006aee:	0002      	movs	r2, r0
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	0011      	movs	r1, r2
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 f8ef 	bl	8006cd8 <_ZNSaIPSt6bitsetILj8EEEC1IS0_EERKSaIT_E>
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b002      	add	sp, #8
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <_ZNSaIPSt6bitsetILj8EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f000 f8f1 	bl	8006cf4 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEED1Ev>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	0018      	movs	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b002      	add	sp, #8
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f000 f8e9 	bl	8006d06 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE10deallocateEPS3_j>
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b004      	add	sp, #16
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0018      	movs	r0, r3
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	b002      	add	sp, #8
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f000 f8df 	bl	8006d22 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8006b64:	0003      	movs	r3, r0
 8006b66:	0018      	movs	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b002      	add	sp, #8
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8006b6e:	b590      	push	{r4, r7, lr}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8006b76:	687c      	ldr	r4, [r7, #4]
 8006b78:	2018      	movs	r0, #24
 8006b7a:	f7ff fa0d 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	0019      	movs	r1, r3
 8006b82:	0020      	movs	r0, r4
 8006b84:	f000 f8eb 	bl	8006d5e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8006b88:	0003      	movs	r3, r0
      }
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b003      	add	sp, #12
 8006b90:	bd90      	pop	{r4, r7, pc}

08006b92 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8006b92:	b580      	push	{r7, lr}
 8006b94:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8006b96:	2018      	movs	r0, #24
 8006b98:	f7ff f9fe 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 8006b9c:	0003      	movs	r3, r0
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f000 f8e1 	bl	8006d7e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8006bbc:	46c0      	nop			; (mov r8, r8)
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b004      	add	sp, #16
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b002      	add	sp, #8
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	0018      	movs	r0, r3
 8006be4:	f000 f8d9 	bl	8006d9a <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	0018      	movs	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b002      	add	sp, #8
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b002      	add	sp, #8
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f001 ff58 	bl	8008ac8 <_ZdlPv>
      }
 8006c18:	46c0      	nop			; (mov r8, r8)
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b004      	add	sp, #16
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	0011      	movs	r1, r2
 8006c30:	0018      	movs	r0, r3
 8006c32:	f000 f8bb 	bl	8006dac <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	b002      	add	sp, #8
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0018      	movs	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b002      	add	sp, #8
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	0018      	movs	r0, r3
 8006c62:	f000 f8bc 	bl	8006dde <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv>
 8006c66:	0003      	movs	r3, r0
 8006c68:	0018      	movs	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b002      	add	sp, #8
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8006c70:	b590      	push	{r4, r7, lr}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8006c78:	687c      	ldr	r4, [r7, #4]
 8006c7a:	2004      	movs	r0, #4
 8006c7c:	f7ff f98c 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 8006c80:	0003      	movs	r3, r0
 8006c82:	0019      	movs	r1, r3
 8006c84:	0020      	movs	r0, r4
 8006c86:	f000 f8c8 	bl	8006e1a <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8allocateERS2_j>
 8006c8a:	0003      	movs	r3, r0
      }
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b003      	add	sp, #12
 8006c92:	bd90      	pop	{r4, r7, pc}

08006c94 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8006c98:	2004      	movs	r0, #4
 8006c9a:	f7ff f97d 	bl	8005f98 <_ZSt16__deque_buf_sizej>
 8006c9e:	0003      	movs	r3, r0
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f000 f8be 	bl	8006e3a <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE10deallocateEPS2_j>
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b004      	add	sp, #16
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	b002      	add	sp, #8
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <_ZNSaIPSt6bitsetILj8EEEC1IS0_EERKSaIT_E>:
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f000 f8b6 	bl	8006e56 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEEC1Ev>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	0018      	movs	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b002      	add	sp, #8
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	0018      	movs	r0, r3
 8006d00:	46bd      	mov	sp, r7
 8006d02:	b002      	add	sp, #8
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f001 fed7 	bl	8008ac8 <_ZdlPv>
      }
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b004      	add	sp, #16
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 f899 	bl	8006e68 <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8006d36:	0002      	movs	r2, r0
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	419b      	sbcs	r3, r3
 8006d3e:	425b      	negs	r3, r3
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006d46:	f001 fed7 	bl	8008af8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f001 febe 	bl	8008ad0 <_Znwj>
 8006d54:	0003      	movs	r3, r0
      }
 8006d56:	0018      	movs	r0, r3
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b004      	add	sp, #16
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f000 f886 	bl	8006e80 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8006d74:	0003      	movs	r3, r0
 8006d76:	0018      	movs	r0, r3
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	b002      	add	sp, #8
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f001 fe9b 	bl	8008ac8 <_ZdlPv>
      }
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b004      	add	sp, #16
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b002      	add	sp, #8
 8006daa:	bd80      	pop	{r7, pc}

08006dac <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d00b      	beq.n	8006dd6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x2a>
	    std::_Destroy(std::__addressof(*__first));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f000 f87e 	bl	8006ec2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f000 f883 	bl	8006ed4 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3318      	adds	r3, #24
 8006dd2:	607b      	str	r3, [r7, #4]
 8006dd4:	e7ef      	b.n	8006db6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b002      	add	sp, #8
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 f87d 	bl	8006eec <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv>
 8006df2:	0002      	movs	r2, r0
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	419b      	sbcs	r3, r3
 8006dfa:	425b      	negs	r3, r3
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006e02:	f001 fe79 	bl	8008af8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f001 fe60 	bl	8008ad0 <_Znwj>
 8006e10:	0003      	movs	r3, r0
      }
 8006e12:	0018      	movs	r0, r3
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b004      	add	sp, #16
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f000 f86a 	bl	8006f04 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv>
 8006e30:	0003      	movs	r3, r0
 8006e32:	0018      	movs	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b002      	add	sp, #8
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f001 fe3d 	bl	8008ac8 <_ZdlPv>
      }
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b004      	add	sp, #16
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	0018      	movs	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	b002      	add	sp, #8
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006e70:	4b02      	ldr	r3, [pc, #8]	; (8006e7c <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8006e72:	0018      	movs	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b002      	add	sp, #8
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	1fffffff 	.word	0x1fffffff

08006e80 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f000 f856 	bl	8006f40 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8006e94:	0002      	movs	r2, r0
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	419b      	sbcs	r3, r3
 8006e9c:	425b      	negs	r3, r3
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006ea4:	f001 fe28 	bl	8008af8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	0013      	movs	r3, r2
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	189b      	adds	r3, r3, r2
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f001 fe0c 	bl	8008ad0 <_Znwj>
 8006eb8:	0003      	movs	r3, r0
      }
 8006eba:	0018      	movs	r0, r3
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	b004      	add	sp, #16
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	0018      	movs	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b002      	add	sp, #8
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f001 ff82 	bl	8008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ee4:	46c0      	nop			; (mov r8, r8)
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	b002      	add	sp, #8
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006ef4:	4b02      	ldr	r3, [pc, #8]	; (8006f00 <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv+0x14>)
      }
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	b002      	add	sp, #8
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	1fffffff 	.word	0x1fffffff

08006f04 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	0018      	movs	r0, r3
 8006f14:	f000 f820 	bl	8006f58 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>
 8006f18:	0002      	movs	r2, r0
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	419b      	sbcs	r3, r3
 8006f20:	425b      	negs	r3, r3
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006f28:	f001 fde6 	bl	8008af8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	0018      	movs	r0, r3
 8006f32:	f001 fdcd 	bl	8008ad0 <_Znwj>
 8006f36:	0003      	movs	r3, r0
      }
 8006f38:	0018      	movs	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b004      	add	sp, #16
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006f48:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
      }
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	b002      	add	sp, #8
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	05555555 	.word	0x05555555

08006f58 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006f60:	4b02      	ldr	r3, [pc, #8]	; (8006f6c <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv+0x14>)
      }
 8006f62:	0018      	movs	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b002      	add	sp, #8
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	1fffffff 	.word	0x1fffffff

08006f70 <_ZN8receiverD1Ev>:
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3328      	adds	r3, #40	; 0x28
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f7ff f8e4 	bl	800614a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f7ff f8ae 	bl	80060e6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b002      	add	sp, #8
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <_ZN11transmitterD1Ev>:
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	332c      	adds	r3, #44	; 0x2c
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff f8d2 	bl	800614a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7ff f89b 	bl	80060e6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	b002      	add	sp, #8
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <_Z41__static_initialization_and_destruction_0ii>:
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d10b      	bne.n	8006fe4 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	4a0f      	ldr	r2, [pc, #60]	; (800700c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d107      	bne.n	8006fe4 <_Z41__static_initialization_and_destruction_0ii+0x28>
transmitter t;
 8006fd4:	4b0e      	ldr	r3, [pc, #56]	; (8007010 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f7fe fff3 	bl	8005fc2 <_ZN11transmitterC1Ev>
receiver r;
 8006fdc:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f7ff f805 	bl	8005fee <_ZN8receiverC1Ev>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <_Z41__static_initialization_and_destruction_0ii+0x46>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	4a07      	ldr	r2, [pc, #28]	; (800700c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d107      	bne.n	8007002 <_Z41__static_initialization_and_destruction_0ii+0x46>
 8006ff2:	4b08      	ldr	r3, [pc, #32]	; (8007014 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f7ff ffbb 	bl	8006f70 <_ZN8receiverD1Ev>
transmitter t;
 8006ffa:	4b05      	ldr	r3, [pc, #20]	; (8007010 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7ff ffc9 	bl	8006f94 <_ZN11transmitterD1Ev>
}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	46bd      	mov	sp, r7
 8007006:	b002      	add	sp, #8
 8007008:	bd80      	pop	{r7, pc}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	0000ffff 	.word	0x0000ffff
 8007010:	200001fc 	.word	0x200001fc
 8007014:	20000254 	.word	0x20000254

08007018 <_GLOBAL__sub_I_t>:
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
 800701c:	4b03      	ldr	r3, [pc, #12]	; (800702c <_GLOBAL__sub_I_t+0x14>)
 800701e:	0019      	movs	r1, r3
 8007020:	2001      	movs	r0, #1
 8007022:	f7ff ffcb 	bl	8006fbc <_Z41__static_initialization_and_destruction_0ii>
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	0000ffff 	.word	0x0000ffff

08007030 <_GLOBAL__sub_D_t>:
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
 8007034:	4b03      	ldr	r3, [pc, #12]	; (8007044 <_GLOBAL__sub_D_t+0x14>)
 8007036:	0019      	movs	r1, r3
 8007038:	2000      	movs	r0, #0
 800703a:	f7ff ffbf 	bl	8006fbc <_Z41__static_initialization_and_destruction_0ii>
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	0000ffff 	.word	0x0000ffff

08007048 <_ZNSt11char_traitsIcE6assignERcRKc>:
      typedef streampos         pos_type;
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	46c0      	nop			; (mov r8, r8)
 800705c:	46bd      	mov	sp, r7
 800705e:	b002      	add	sp, #8
 8007060:	bd80      	pop	{r7, pc}

08007062 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 8007074:	2300      	movs	r3, #0
 8007076:	e007      	b.n	8007088 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x26>
	if (__builtin_constant_p(__n)
	    && __constant_char_array_p(__s1, __n)
	    && __constant_char_array_p(__s2, __n))
	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	0018      	movs	r0, r3
 8007080:	f001 fff1 	bl	8009066 <memcmp>
 8007084:	0003      	movs	r3, r0
 8007086:	46c0      	nop			; (mov r8, r8)
      }
 8007088:	0018      	movs	r0, r3
 800708a:	46bd      	mov	sp, r7
 800708c:	b004      	add	sp, #16
 800708e:	bd80      	pop	{r7, pc}

08007090 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	0018      	movs	r0, r3
 800709e:	46bd      	mov	sp, r7
 80070a0:	b002      	add	sp, #8
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>:
      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbyte(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }

      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	221f      	movs	r2, #31
 80070b0:	4013      	ands	r3, r2
 80070b2:	0018      	movs	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	b002      	add	sp, #8
 80070b8:	bd80      	pop	{r7, pc}

080070ba <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>:

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7ff ffed 	bl	80070a4 <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 80070ca:	0003      	movs	r3, r0
 80070cc:	2201      	movs	r2, #1
 80070ce:	409a      	lsls	r2, r3
 80070d0:	0013      	movs	r3, r2
 80070d2:	0018      	movs	r0, r3
 80070d4:	46bd      	mov	sp, r7
 80070d6:	b002      	add	sp, #8
 80070d8:	bd80      	pop	{r7, pc}

080070da <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>:

      _WordT&
      _M_getword(size_t) _GLIBCXX_NOEXCEPT
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	0018      	movs	r0, r3
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b002      	add	sp, #8
 80070ec:	bd80      	pop	{r7, pc}

080070ee <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>:

      _GLIBCXX_CONSTEXPR _WordT
      _M_getword(size_t) const _GLIBCXX_NOEXCEPT
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	0018      	movs	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	b002      	add	sp, #8
 8007102:	bd80      	pop	{r7, pc}

08007104 <_ZNKSt12_Base_bitsetILj1EE14_M_do_to_ulongEv>:
      size_t
      _M_do_count() const _GLIBCXX_NOEXCEPT
      { return __builtin_popcountl(_M_w); }

      unsigned long
      _M_do_to_ulong() const _GLIBCXX_NOEXCEPT
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
      { return _M_w; }
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	0018      	movs	r0, r3
 8007112:	46bd      	mov	sp, r7
 8007114:	b002      	add	sp, #8
 8007116:	bd80      	pop	{r7, pc}

08007118 <_ZN8receiver6enableEv>:

#include "receiver.h"

// Turn on the timer to start listening for messages
void receiver::enable()
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(RECEIVE_TIMER);
 8007120:	4b03      	ldr	r3, [pc, #12]	; (8007130 <_ZN8receiver6enableEv+0x18>)
 8007122:	0018      	movs	r0, r3
 8007124:	f7fe f838 	bl	8005198 <HAL_TIM_Base_Start_IT>
}
 8007128:	46c0      	nop			; (mov r8, r8)
 800712a:	46bd      	mov	sp, r7
 800712c:	b002      	add	sp, #8
 800712e:	bd80      	pop	{r7, pc}
 8007130:	200003e4 	.word	0x200003e4

08007134 <_ZN8receiver7disableEv>:

// Turn off the timer to stop listening for messages
void receiver::disable()
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(RECEIVE_TIMER);
 800713c:	4b03      	ldr	r3, [pc, #12]	; (800714c <_ZN8receiver7disableEv+0x18>)
 800713e:	0018      	movs	r0, r3
 8007140:	f7fe f876 	bl	8005230 <HAL_TIM_Base_Stop_IT>
}
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	46bd      	mov	sp, r7
 8007148:	b002      	add	sp, #8
 800714a:	bd80      	pop	{r7, pc}
 800714c:	200003e4 	.word	0x200003e4

08007150 <_ZN8receiver11clearBufferEv>:

// Get the contents of the inbound buffer
// and put it in a message in the inbound queue
void receiver::clearBuffer()
{
 8007150:	b590      	push	{r4, r7, lr}
 8007152:	b08b      	sub	sp, #44	; 0x2c
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	string m = "";
 8007158:	2424      	movs	r4, #36	; 0x24
 800715a:	193b      	adds	r3, r7, r4
 800715c:	0018      	movs	r0, r3
 800715e:	f001 fcc9 	bl	8008af4 <_ZNSaIcEC1Ev>
 8007162:	193a      	adds	r2, r7, r4
 8007164:	4921      	ldr	r1, [pc, #132]	; (80071ec <_ZN8receiver11clearBufferEv+0x9c>)
 8007166:	230c      	movs	r3, #12
 8007168:	18fb      	adds	r3, r7, r3
 800716a:	0018      	movs	r0, r3
 800716c:	f001 ff0e 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007170:	193b      	adds	r3, r7, r4
 8007172:	0018      	movs	r0, r3
 8007174:	f001 fcbf 	bl	8008af6 <_ZNSaIcED1Ev>

	while(!buffer.empty())
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3328      	adds	r3, #40	; 0x28
 800717c:	0018      	movs	r0, r3
 800717e:	f000 f9af 	bl	80074e0 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 8007182:	0003      	movs	r3, r0
 8007184:	001a      	movs	r2, r3
 8007186:	2301      	movs	r3, #1
 8007188:	4053      	eors	r3, r2
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01a      	beq.n	80071c6 <_ZN8receiver11clearBufferEv+0x76>
	{
		bitset<8> c = buffer.front();
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3328      	adds	r3, #40	; 0x28
 8007194:	0018      	movs	r0, r3
 8007196:	f000 f9b5 	bl	8007504 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>
 800719a:	0003      	movs	r3, r0
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60bb      	str	r3, [r7, #8]
		buffer.pop_front();
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3328      	adds	r3, #40	; 0x28
 80071a4:	0018      	movs	r0, r3
 80071a6:	f000 f9c1 	bl	800752c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>

		m += (char) c.to_ulong();
 80071aa:	2308      	movs	r3, #8
 80071ac:	18fb      	adds	r3, r7, r3
 80071ae:	0018      	movs	r0, r3
 80071b0:	f000 f9dc 	bl	800756c <_ZNKSt6bitsetILj8EE8to_ulongEv>
 80071b4:	0003      	movs	r3, r0
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	230c      	movs	r3, #12
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	0011      	movs	r1, r2
 80071be:	0018      	movs	r0, r3
 80071c0:	f001 fe3c 	bl	8008e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	while(!buffer.empty())
 80071c4:	e7d8      	b.n	8007178 <_ZN8receiver11clearBufferEv+0x28>
	}

	messages.push_back(m);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	240c      	movs	r4, #12
 80071ca:	193a      	adds	r2, r7, r4
 80071cc:	0011      	movs	r1, r2
 80071ce:	0018      	movs	r0, r3
 80071d0:	f000 f9d9 	bl	8007586 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>

	bitPointer = 0;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2250      	movs	r2, #80	; 0x50
 80071d8:	2100      	movs	r1, #0
 80071da:	5299      	strh	r1, [r3, r2]
	string m = "";
 80071dc:	193b      	adds	r3, r7, r4
 80071de:	0018      	movs	r0, r3
 80071e0:	f001 fe02 	bl	8008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80071e4:	46c0      	nop			; (mov r8, r8)
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b00b      	add	sp, #44	; 0x2c
 80071ea:	bd90      	pop	{r4, r7, pc}
 80071ec:	0800da6c 	.word	0x0800da6c

080071f0 <_ZN8receiver11addToBufferEb>:

// Add a single bit to the buffer
void receiver::addToBuffer(bool bit)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b08b      	sub	sp, #44	; 0x2c
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	000a      	movs	r2, r1
 80071fa:	1cfb      	adds	r3, r7, #3
 80071fc:	701a      	strb	r2, [r3, #0]
	bitset<8> c;
 80071fe:	2300      	movs	r3, #0
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
	if(bitPointer > 7 || buffer.empty())
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2250      	movs	r2, #80	; 0x50
 8007206:	5a9b      	ldrh	r3, [r3, r2]
 8007208:	2b07      	cmp	r3, #7
 800720a:	d806      	bhi.n	800721a <_ZN8receiver11addToBufferEb+0x2a>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3328      	adds	r3, #40	; 0x28
 8007210:	0018      	movs	r0, r3
 8007212:	f000 f965 	bl	80074e0 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 8007216:	1e03      	subs	r3, r0, #0
 8007218:	d001      	beq.n	800721e <_ZN8receiver11addToBufferEb+0x2e>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <_ZN8receiver11addToBufferEb+0x30>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d013      	beq.n	800724c <_ZN8receiver11addToBufferEb+0x5c>
	{
		// Make a new char and set the first bit
		c.set(0, bit);
 8007224:	1cfb      	adds	r3, r7, #3
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	2424      	movs	r4, #36	; 0x24
 800722a:	193b      	adds	r3, r7, r4
 800722c:	2100      	movs	r1, #0
 800722e:	0018      	movs	r0, r3
 8007230:	f000 f9ce 	bl	80075d0 <_ZNSt6bitsetILj8EE3setEjb>
		buffer.push_back(c);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3328      	adds	r3, #40	; 0x28
 8007238:	193a      	adds	r2, r7, r4
 800723a:	0011      	movs	r1, r2
 800723c:	0018      	movs	r0, r3
 800723e:	f000 f9e3 	bl	8007608 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
		bitPointer = 1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2250      	movs	r2, #80	; 0x50
 8007246:	2101      	movs	r1, #1
 8007248:	5299      	strh	r1, [r3, r2]
 800724a:	e026      	b.n	800729a <_ZN8receiver11addToBufferEb+0xaa>
	}
	else
	{
		// Grab the existing char and set the bit on it
		c = buffer.back();
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3328      	adds	r3, #40	; 0x28
 8007250:	0018      	movs	r0, r3
 8007252:	f000 f9fc 	bl	800764e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE4backEv>
 8007256:	0003      	movs	r3, r0
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
		// 7- if the sent bytes are mirrored
		//c.set(7-bitPointer, bit);
		c.set(bitPointer, bit);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2250      	movs	r2, #80	; 0x50
 8007260:	5a9b      	ldrh	r3, [r3, r2]
 8007262:	0019      	movs	r1, r3
 8007264:	1cfb      	adds	r3, r7, #3
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	2424      	movs	r4, #36	; 0x24
 800726a:	193b      	adds	r3, r7, r4
 800726c:	0018      	movs	r0, r3
 800726e:	f000 f9af 	bl	80075d0 <_ZNSt6bitsetILj8EE3setEjb>
		buffer.pop_back();
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3328      	adds	r3, #40	; 0x28
 8007276:	0018      	movs	r0, r3
 8007278:	f000 fa01 	bl	800767e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv>
		buffer.push_back(c);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3328      	adds	r3, #40	; 0x28
 8007280:	193a      	adds	r2, r7, r4
 8007282:	0011      	movs	r1, r2
 8007284:	0018      	movs	r0, r3
 8007286:	f000 f9bf 	bl	8007608 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
		bitPointer++;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2250      	movs	r2, #80	; 0x50
 800728e:	5a9b      	ldrh	r3, [r3, r2]
 8007290:	3301      	adds	r3, #1
 8007292:	b299      	uxth	r1, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2250      	movs	r2, #80	; 0x50
 8007298:	5299      	strh	r1, [r3, r2]
	}

	string s = buffer.back().to_string();
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3328      	adds	r3, #40	; 0x28
 800729e:	0018      	movs	r0, r3
 80072a0:	f000 f9d5 	bl	800764e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE4backEv>
 80072a4:	0002      	movs	r2, r0
 80072a6:	240c      	movs	r4, #12
 80072a8:	193b      	adds	r3, r7, r4
 80072aa:	0011      	movs	r1, r2
 80072ac:	0018      	movs	r0, r3
 80072ae:	f000 fa05 	bl	80076bc <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>
 80072b2:	193b      	adds	r3, r7, r4
 80072b4:	0018      	movs	r0, r3
 80072b6:	f001 fd97 	bl	8008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	46bd      	mov	sp, r7
 80072be:	b00b      	add	sp, #44	; 0x2c
 80072c0:	bd90      	pop	{r4, r7, pc}
	...

080072c4 <_ZN8receiver10waitForAckEt>:
}

// Check incoming messages until an ACK is read
// If no ACK is read before timeout, return false
bool receiver::waitForAck(uint16_t milliseconds)
{
 80072c4:	b5b0      	push	{r4, r5, r7, lr}
 80072c6:	b08a      	sub	sp, #40	; 0x28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	000a      	movs	r2, r1
 80072ce:	1cbb      	adds	r3, r7, #2
 80072d0:	801a      	strh	r2, [r3, #0]
	bool retVal = false;
 80072d2:	2327      	movs	r3, #39	; 0x27
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	2200      	movs	r2, #0
 80072d8:	701a      	strb	r2, [r3, #0]

	string ack = " ";
 80072da:	2424      	movs	r4, #36	; 0x24
 80072dc:	193b      	adds	r3, r7, r4
 80072de:	0018      	movs	r0, r3
 80072e0:	f001 fc08 	bl	8008af4 <_ZNSaIcEC1Ev>
 80072e4:	193a      	adds	r2, r7, r4
 80072e6:	492b      	ldr	r1, [pc, #172]	; (8007394 <_ZN8receiver10waitForAckEt+0xd0>)
 80072e8:	250c      	movs	r5, #12
 80072ea:	197b      	adds	r3, r7, r5
 80072ec:	0018      	movs	r0, r3
 80072ee:	f001 fe4d 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80072f2:	193b      	adds	r3, r7, r4
 80072f4:	0018      	movs	r0, r3
 80072f6:	f001 fbfe 	bl	8008af6 <_ZNSaIcED1Ev>
	ack[0] = (char) 6;
 80072fa:	197b      	adds	r3, r7, r5
 80072fc:	2100      	movs	r1, #0
 80072fe:	0018      	movs	r0, r3
 8007300:	f001 fd7c 	bl	8008dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8007304:	0003      	movs	r3, r0
 8007306:	2206      	movs	r2, #6
 8007308:	701a      	strb	r2, [r3, #0]

	enable();
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	0018      	movs	r0, r3
 800730e:	f7ff ff03 	bl	8007118 <_ZN8receiver6enableEv>

	while(milliseconds >= 1)
 8007312:	1cbb      	adds	r3, r7, #2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d02a      	beq.n	8007370 <_ZN8receiver10waitForAckEt+0xac>
	{
		if(!messages.empty())
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	0018      	movs	r0, r3
 800731e:	f000 f9dc 	bl	80076da <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>
 8007322:	0003      	movs	r3, r0
 8007324:	001a      	movs	r2, r3
 8007326:	2301      	movs	r3, #1
 8007328:	4053      	eors	r3, r2
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d016      	beq.n	800735e <_ZN8receiver10waitForAckEt+0x9a>
		{
			// Message received, check for ack
			if(messages.front() == ack)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	0018      	movs	r0, r3
 8007334:	f000 f9e3 	bl	80076fe <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>
 8007338:	0002      	movs	r2, r0
 800733a:	230c      	movs	r3, #12
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	0019      	movs	r1, r3
 8007340:	0010      	movs	r0, r2
 8007342:	f000 fa11 	bl	8007768 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 8007346:	1e03      	subs	r3, r0, #0
 8007348:	d004      	beq.n	8007354 <_ZN8receiver10waitForAckEt+0x90>
			{
				retVal = true;
 800734a:	2327      	movs	r3, #39	; 0x27
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	2201      	movs	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
				break;
 8007352:	e00d      	b.n	8007370 <_ZN8receiver10waitForAckEt+0xac>
			}
			else
			{
				// Message is not an ack, discard it
				messages.pop_front();
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	0018      	movs	r0, r3
 8007358:	f000 f9e5 	bl	8007726 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>
 800735c:	e7d9      	b.n	8007312 <_ZN8receiver10waitForAckEt+0x4e>
			}
		}
		else
		{
			// Can't use osDelay here because the F0 doesn't have FreeRTOS
			HAL_Delay(1);
 800735e:	2001      	movs	r0, #1
 8007360:	f7fb feb0 	bl	80030c4 <HAL_Delay>
			milliseconds--;
 8007364:	1cbb      	adds	r3, r7, #2
 8007366:	881a      	ldrh	r2, [r3, #0]
 8007368:	1cbb      	adds	r3, r7, #2
 800736a:	3a01      	subs	r2, #1
 800736c:	801a      	strh	r2, [r3, #0]
	while(milliseconds >= 1)
 800736e:	e7d0      	b.n	8007312 <_ZN8receiver10waitForAckEt+0x4e>
		}
	}

	disable();
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	0018      	movs	r0, r3
 8007374:	f7ff fede 	bl	8007134 <_ZN8receiver7disableEv>
	return retVal;
 8007378:	2327      	movs	r3, #39	; 0x27
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	781c      	ldrb	r4, [r3, #0]
	string ack = " ";
 800737e:	230c      	movs	r3, #12
 8007380:	18fb      	adds	r3, r7, r3
 8007382:	0018      	movs	r0, r3
 8007384:	f001 fd30 	bl	8008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return retVal;
 8007388:	0023      	movs	r3, r4
}
 800738a:	0018      	movs	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	b00a      	add	sp, #40	; 0x28
 8007390:	bdb0      	pop	{r4, r5, r7, pc}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	0800da70 	.word	0x0800da70

08007398 <_ZN8receiver4tickEv>:

void receiver::tick()
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	bool on = HAL_GPIO_ReadPin(RADIO_RECEIVE_GPIO_Port,RADIO_RECEIVE_Pin);
 80073a0:	4b4b      	ldr	r3, [pc, #300]	; (80074d0 <_ZN8receiver4tickEv+0x138>)
 80073a2:	2102      	movs	r1, #2
 80073a4:	0018      	movs	r0, r3
 80073a6:	f7fc f8cf 	bl	8003548 <HAL_GPIO_ReadPin>
 80073aa:	0003      	movs	r3, r0
 80073ac:	001a      	movs	r2, r3
 80073ae:	200f      	movs	r0, #15
 80073b0:	183b      	adds	r3, r7, r0
 80073b2:	1e51      	subs	r1, r2, #1
 80073b4:	418a      	sbcs	r2, r1
 80073b6:	701a      	strb	r2, [r3, #0]
	static bool started = false;
	static bool isCounting = false;
	static uint16_t counter = 0;

	if(on && isCounting)
 80073b8:	183b      	adds	r3, r7, r0
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <_ZN8receiver4tickEv+0x3e>
 80073c0:	4b44      	ldr	r3, [pc, #272]	; (80074d4 <_ZN8receiver4tickEv+0x13c>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d006      	beq.n	80073d6 <_ZN8receiver4tickEv+0x3e>
	{
		counter++;
 80073c8:	4b43      	ldr	r3, [pc, #268]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	4b41      	ldr	r3, [pc, #260]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	e077      	b.n	80074c6 <_ZN8receiver4tickEv+0x12e>
		// For seeing how many counts a bit is
		//HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
	}
	else if(on && !isCounting)
 80073d6:	230f      	movs	r3, #15
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00d      	beq.n	80073fc <_ZN8receiver4tickEv+0x64>
 80073e0:	4b3c      	ldr	r3, [pc, #240]	; (80074d4 <_ZN8receiver4tickEv+0x13c>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2201      	movs	r2, #1
 80073e6:	4053      	eors	r3, r2
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <_ZN8receiver4tickEv+0x64>
	{
		counter = 0;
 80073ee:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	801a      	strh	r2, [r3, #0]
		isCounting = true;
 80073f4:	4b37      	ldr	r3, [pc, #220]	; (80074d4 <_ZN8receiver4tickEv+0x13c>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e064      	b.n	80074c6 <_ZN8receiver4tickEv+0x12e>
	}
	else if(!on && isCounting)
 80073fc:	230f      	movs	r3, #15
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2201      	movs	r2, #1
 8007404:	4053      	eors	r3, r2
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d05c      	beq.n	80074c6 <_ZN8receiver4tickEv+0x12e>
 800740c:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <_ZN8receiver4tickEv+0x13c>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d058      	beq.n	80074c6 <_ZN8receiver4tickEv+0x12e>
	{
		if(!started)
 8007414:	4b31      	ldr	r3, [pc, #196]	; (80074dc <_ZN8receiver4tickEv+0x144>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2201      	movs	r2, #1
 800741a:	4053      	eors	r3, r2
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d015      	beq.n	800744e <_ZN8receiver4tickEv+0xb6>
		{
			if((START_MIN < counter) && (counter < START_MAX))
 8007422:	4b2d      	ldr	r3, [pc, #180]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 8007424:	881a      	ldrh	r2, [r3, #0]
 8007426:	2391      	movs	r3, #145	; 0x91
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	429a      	cmp	r2, r3
 800742c:	d944      	bls.n	80074b8 <_ZN8receiver4tickEv+0x120>
 800742e:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 8007430:	881a      	ldrh	r2, [r3, #0]
 8007432:	2396      	movs	r3, #150	; 0x96
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	429a      	cmp	r2, r3
 8007438:	d23e      	bcs.n	80074b8 <_ZN8receiver4tickEv+0x120>
			{
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 800743a:	4b25      	ldr	r3, [pc, #148]	; (80074d0 <_ZN8receiver4tickEv+0x138>)
 800743c:	2201      	movs	r2, #1
 800743e:	2104      	movs	r1, #4
 8007440:	0018      	movs	r0, r3
 8007442:	f7fc f89e 	bl	8003582 <HAL_GPIO_WritePin>
				// Remember that there has been a start bit
				started = true;
 8007446:	4b25      	ldr	r3, [pc, #148]	; (80074dc <_ZN8receiver4tickEv+0x144>)
 8007448:	2201      	movs	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	e034      	b.n	80074b8 <_ZN8receiver4tickEv+0x120>
			}
		}
		else
		{
			if((ZERO_MIN < counter) && (counter < ZERO_MAX))
 800744e:	4b22      	ldr	r3, [pc, #136]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	2b5a      	cmp	r3, #90	; 0x5a
 8007454:	d909      	bls.n	800746a <_ZN8receiver4tickEv+0xd2>
 8007456:	4b20      	ldr	r3, [pc, #128]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	2b63      	cmp	r3, #99	; 0x63
 800745c:	d805      	bhi.n	800746a <_ZN8receiver4tickEv+0xd2>
			{
				// Add zero to buffer
				addToBuffer(false);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2100      	movs	r1, #0
 8007462:	0018      	movs	r0, r3
 8007464:	f7ff fec4 	bl	80071f0 <_ZN8receiver11addToBufferEb>
 8007468:	e026      	b.n	80074b8 <_ZN8receiver4tickEv+0x120>
			}
			else if((ONE_MIN < counter) && (counter < ONE_MAX))
 800746a:	4b1b      	ldr	r3, [pc, #108]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	2bbe      	cmp	r3, #190	; 0xbe
 8007470:	d909      	bls.n	8007486 <_ZN8receiver4tickEv+0xee>
 8007472:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	2bc7      	cmp	r3, #199	; 0xc7
 8007478:	d805      	bhi.n	8007486 <_ZN8receiver4tickEv+0xee>
			{
				// Add one to buffer
				addToBuffer(true);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2101      	movs	r1, #1
 800747e:	0018      	movs	r0, r3
 8007480:	f7ff feb6 	bl	80071f0 <_ZN8receiver11addToBufferEb>
 8007484:	e018      	b.n	80074b8 <_ZN8receiver4tickEv+0x120>
			}
			else if((STOP_MIN < counter) && (counter < STOP_MAX))
 8007486:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 8007488:	881a      	ldrh	r2, [r3, #0]
 800748a:	23c3      	movs	r3, #195	; 0xc3
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	429a      	cmp	r2, r3
 8007490:	d912      	bls.n	80074b8 <_ZN8receiver4tickEv+0x120>
 8007492:	4b11      	ldr	r3, [pc, #68]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 8007494:	881a      	ldrh	r2, [r3, #0]
 8007496:	23c8      	movs	r3, #200	; 0xc8
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	429a      	cmp	r2, r3
 800749c:	d20c      	bcs.n	80074b8 <_ZN8receiver4tickEv+0x120>
			{
				// Forget the start bit so we can wait
				// for the next message
				started = false;
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <_ZN8receiver4tickEv+0x144>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]

				// If a second high point the length of a
				// start bit is found (the stop bit), put
				// the buffer in the message queue
				clearBuffer();
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	0018      	movs	r0, r3
 80074a8:	f7ff fe52 	bl	8007150 <_ZN8receiver11clearBufferEv>

				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 80074ac:	4b08      	ldr	r3, [pc, #32]	; (80074d0 <_ZN8receiver4tickEv+0x138>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	2104      	movs	r1, #4
 80074b2:	0018      	movs	r0, r3
 80074b4:	f7fc f865 	bl	8003582 <HAL_GPIO_WritePin>
			}
		}

		// Stop the timer
		counter = 0;
 80074b8:	4b07      	ldr	r3, [pc, #28]	; (80074d8 <_ZN8receiver4tickEv+0x140>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	801a      	strh	r2, [r3, #0]
		isCounting = false;
 80074be:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <_ZN8receiver4tickEv+0x13c>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
	}
}
 80074c4:	e7ff      	b.n	80074c6 <_ZN8receiver4tickEv+0x12e>
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	46bd      	mov	sp, r7
 80074ca:	b004      	add	sp, #16
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	48000400 	.word	0x48000400
 80074d4:	200002a9 	.word	0x200002a9
 80074d8:	200002aa 	.word	0x200002aa
 80074dc:	200002a8 	.word	0x200002a8

080074e0 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3318      	adds	r3, #24
 80074ec:	001a      	movs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3308      	adds	r3, #8
 80074f2:	0019      	movs	r1, r3
 80074f4:	0010      	movs	r0, r2
 80074f6:	f000 f965 	bl	80077c4 <_ZSteqISt6bitsetILj8EERS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>
 80074fa:	0003      	movs	r3, r0
 80074fc:	0018      	movs	r0, r3
 80074fe:	46bd      	mov	sp, r7
 8007500:	b002      	add	sp, #8
 8007502:	bd80      	pop	{r7, pc}

08007504 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	return *begin();
 800750c:	2408      	movs	r4, #8
 800750e:	193b      	adds	r3, r7, r4
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	0011      	movs	r1, r2
 8007514:	0018      	movs	r0, r3
 8007516:	f7fe ff23 	bl	8006360 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>
 800751a:	193b      	adds	r3, r7, r4
 800751c:	0018      	movs	r0, r3
 800751e:	f000 f962 	bl	80077e6 <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>
 8007522:	0003      	movs	r3, r0
      }
 8007524:	0018      	movs	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	b007      	add	sp, #28
 800752a:	bd90      	pop	{r4, r7, pc}

0800752c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800753e:	429a      	cmp	r2, r3
 8007540:	d00c      	beq.n	800755c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv+0x30>
	    _Alloc_traits::destroy(this->_M_impl,
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	0019      	movs	r1, r3
 800754a:	0010      	movs	r0, r2
 800754c:	f000 f955 	bl	80077fa <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	1d1a      	adds	r2, r3, #4
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	609a      	str	r2, [r3, #8]
      }
 800755a:	e003      	b.n	8007564 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv+0x38>
	  _M_pop_front_aux();
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	0018      	movs	r0, r3
 8007560:	f000 f95a 	bl	8007818 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_pop_front_auxEv>
      }
 8007564:	46c0      	nop			; (mov r8, r8)
 8007566:	46bd      	mov	sp, r7
 8007568:	b002      	add	sp, #8
 800756a:	bd80      	pop	{r7, pc}

0800756c <_ZNKSt6bitsetILj8EE8to_ulongEv>:
       *  @return  The integral equivalent of the bits.
       *  @throw  std::overflow_error  If there are too many bits to be
       *                               represented in an @c unsigned @c long.
       */
      unsigned long
      to_ulong() const
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
      { return this->_M_do_to_ulong(); }
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	0018      	movs	r0, r3
 8007578:	f7ff fdc4 	bl	8007104 <_ZNKSt12_Base_bitsetILj1EE14_M_do_to_ulongEv>
 800757c:	0003      	movs	r3, r0
 800757e:	0018      	movs	r0, r3
 8007580:	46bd      	mov	sp, r7
 8007582:	b002      	add	sp, #8
 8007584:	bd80      	pop	{r7, pc}

08007586 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	3b18      	subs	r3, #24
	if (this->_M_impl._M_finish._M_cur
 800759a:	429a      	cmp	r2, r3
 800759c:	d00d      	beq.n	80075ba <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	0019      	movs	r1, r3
 80075a8:	f000 f95e 	bl	8007868 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	3318      	adds	r3, #24
 80075b2:	001a      	movs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	619a      	str	r2, [r3, #24]
      }
 80075b8:	e005      	b.n	80075c6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x40>
	  _M_push_back_aux(__x);
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	0011      	movs	r1, r2
 80075c0:	0018      	movs	r0, r3
 80075c2:	f000 f965 	bl	8007890 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_>
      }
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b002      	add	sp, #8
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <_ZNSt6bitsetILj8EE3setEjb>:
      set(size_t __position, bool __val = true)
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	1dfb      	adds	r3, r7, #7
 80075dc:	701a      	strb	r2, [r3, #0]
	this->_M_check(__position, __N("bitset::set"));
 80075de:	4a09      	ldr	r2, [pc, #36]	; (8007604 <_ZNSt6bitsetILj8EE3setEjb+0x34>)
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	0018      	movs	r0, r3
 80075e6:	f000 f99b 	bl	8007920 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc>
	return _Unchecked_set(__position, __val);
 80075ea:	1dfb      	adds	r3, r7, #7
 80075ec:	781a      	ldrb	r2, [r3, #0]
 80075ee:	68b9      	ldr	r1, [r7, #8]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	0018      	movs	r0, r3
 80075f4:	f000 f9aa 	bl	800794c <_ZNSt6bitsetILj8EE14_Unchecked_setEji>
 80075f8:	0003      	movs	r3, r0
      }
 80075fa:	0018      	movs	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	b004      	add	sp, #16
 8007600:	bd80      	pop	{r7, pc}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	0800da74 	.word	0x0800da74

08007608 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800761c:	429a      	cmp	r2, r3
 800761e:	d00c      	beq.n	800763a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	0019      	movs	r1, r3
 800762a:	f000 f9bd 	bl	80079a8 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	1d1a      	adds	r2, r3, #4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	619a      	str	r2, [r3, #24]
      }
 8007638:	e005      	b.n	8007646 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_+0x3e>
	  _M_push_back_aux(__x);
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	0011      	movs	r1, r2
 8007640:	0018      	movs	r0, r3
 8007642:	f000 f9c5 	bl	80079d0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>
      }
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	46bd      	mov	sp, r7
 800764a:	b002      	add	sp, #8
 800764c:	bd80      	pop	{r7, pc}

0800764e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800764e:	b590      	push	{r4, r7, lr}
 8007650:	b087      	sub	sp, #28
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8007656:	2408      	movs	r4, #8
 8007658:	193b      	adds	r3, r7, r4
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	0011      	movs	r1, r2
 800765e:	0018      	movs	r0, r3
 8007660:	f7fe fe8f 	bl	8006382 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>
	--__tmp;
 8007664:	193b      	adds	r3, r7, r4
 8007666:	0018      	movs	r0, r3
 8007668:	f000 f9fa 	bl	8007a60 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EmmEv>
	return *__tmp;
 800766c:	193b      	adds	r3, r7, r4
 800766e:	0018      	movs	r0, r3
 8007670:	f000 f8b9 	bl	80077e6 <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>
 8007674:	0003      	movs	r3, r0
      }
 8007676:	0018      	movs	r0, r3
 8007678:	46bd      	mov	sp, r7
 800767a:	b007      	add	sp, #28
 800767c:	bd90      	pop	{r4, r7, pc}

0800767e <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_finish._M_cur
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 800768e:	429a      	cmp	r2, r3
 8007690:	d00c      	beq.n	80076ac <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv+0x2e>
	    --this->_M_impl._M_finish._M_cur;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	1f1a      	subs	r2, r3, #4
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(this->_M_impl,
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	0019      	movs	r1, r3
 80076a4:	0010      	movs	r0, r2
 80076a6:	f000 f8a8 	bl	80077fa <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
      }
 80076aa:	e003      	b.n	80076b4 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv+0x36>
	  _M_pop_back_aux();
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	0018      	movs	r0, r3
 80076b0:	f000 f9f6 	bl	8007aa0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_pop_back_auxEv>
      }
 80076b4:	46c0      	nop			; (mov r8, r8)
 80076b6:	46bd      	mov	sp, r7
 80076b8:	b002      	add	sp, #8
 80076ba:	bd80      	pop	{r7, pc}

080076bc <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>:
	  return to_string<_CharT, std::char_traits<_CharT>,
	                   std::allocator<_CharT> >(__zero, __one);
	}

      std::basic_string<char, std::char_traits<char>, std::allocator<char> >
      to_string() const
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
      {
	return to_string<char, std::char_traits<char>,
	                 std::allocator<char> >();
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	0011      	movs	r1, r2
 80076cc:	0018      	movs	r0, r3
 80076ce:	f000 fa10 	bl	8007af2 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>
      }
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	46bd      	mov	sp, r7
 80076d6:	b002      	add	sp, #8
 80076d8:	bd80      	pop	{r7, pc}

080076da <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3318      	adds	r3, #24
 80076e6:	001a      	movs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3308      	adds	r3, #8
 80076ec:	0019      	movs	r1, r3
 80076ee:	0010      	movs	r0, r2
 80076f0:	f000 fa13 	bl	8007b1a <_ZSteqINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EbRKSt15_Deque_iteratorIT_T0_T1_ESE_>
 80076f4:	0003      	movs	r3, r0
 80076f6:	0018      	movs	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	b002      	add	sp, #8
 80076fc:	bd80      	pop	{r7, pc}

080076fe <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80076fe:	b590      	push	{r4, r7, lr}
 8007700:	b087      	sub	sp, #28
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
	return *begin();
 8007706:	2408      	movs	r4, #8
 8007708:	193b      	adds	r3, r7, r4
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	0011      	movs	r1, r2
 800770e:	0018      	movs	r0, r3
 8007710:	f7fe fd81 	bl	8006216 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8007714:	193b      	adds	r3, r7, r4
 8007716:	0018      	movs	r0, r3
 8007718:	f000 fa10 	bl	8007b3c <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>
 800771c:	0003      	movs	r3, r0
      }
 800771e:	0018      	movs	r0, r3
 8007720:	46bd      	mov	sp, r7
 8007722:	b007      	add	sp, #28
 8007724:	bd90      	pop	{r4, r7, pc}

08007726 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	3b18      	subs	r3, #24
	if (this->_M_impl._M_start._M_cur
 8007738:	429a      	cmp	r2, r3
 800773a:	d00d      	beq.n	8007758 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x32>
	    _Alloc_traits::destroy(this->_M_impl,
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	0019      	movs	r1, r3
 8007744:	0010      	movs	r0, r2
 8007746:	f000 fa03 	bl	8007b50 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	3318      	adds	r3, #24
 8007750:	001a      	movs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	609a      	str	r2, [r3, #8]
      }
 8007756:	e003      	b.n	8007760 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x3a>
	  _M_pop_front_aux();
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	0018      	movs	r0, r3
 800775c:	f000 fa07 	bl	8007b6e <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>
      }
 8007760:	46c0      	nop			; (mov r8, r8)
 8007762:	46bd      	mov	sp, r7
 8007764:	b002      	add	sp, #8
 8007766:	bd80      	pop	{r7, pc}

08007768 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
 8007768:	b5b0      	push	{r4, r5, r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	0018      	movs	r0, r3
 8007776:	f001 fb3d 	bl	8008df4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800777a:	0004      	movs	r4, r0
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	0018      	movs	r0, r3
 8007780:	f001 fb38 	bl	8008df4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8007784:	0003      	movs	r3, r0
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
 8007786:	429c      	cmp	r4, r3
 8007788:	d117      	bne.n	80077ba <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x52>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	0018      	movs	r0, r3
 800778e:	f001 fba5 	bl	8008edc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8007792:	0004      	movs	r4, r0
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	0018      	movs	r0, r3
 8007798:	f001 fba0 	bl	8008edc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 800779c:	0005      	movs	r5, r0
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	0018      	movs	r0, r3
 80077a2:	f001 fb27 	bl	8008df4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80077a6:	0003      	movs	r3, r0
 80077a8:	001a      	movs	r2, r3
 80077aa:	0029      	movs	r1, r5
 80077ac:	0020      	movs	r0, r4
 80077ae:	f7ff fc58 	bl	8007062 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80077b2:	1e03      	subs	r3, r0, #0
 80077b4:	d101      	bne.n	80077ba <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x52>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x54>
 80077ba:	2300      	movs	r3, #0
						    __lhs.size())); }
 80077bc:	0018      	movs	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	b002      	add	sp, #8
 80077c2:	bdb0      	pop	{r4, r5, r7, pc}

080077c4 <_ZSteqISt6bitsetILj8EERS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	425a      	negs	r2, r3
 80077da:	4153      	adcs	r3, r2
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	0018      	movs	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	b002      	add	sp, #8
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	0018      	movs	r0, r3
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b002      	add	sp, #8
 80077f8:	bd80      	pop	{r7, pc}

080077fa <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	0011      	movs	r1, r2
 800780a:	0018      	movs	r0, r3
 800780c:	f000 f9d7 	bl	8007bbe <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE7destroyIS2_EEvPT_>
 8007810:	46c0      	nop			; (mov r8, r8)
 8007812:	46bd      	mov	sp, r7
 8007814:	b002      	add	sp, #8
 8007816:	bd80      	pop	{r7, pc}

08007818 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	0018      	movs	r0, r3
 8007824:	f7fe fdbe 	bl	80063a4 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8007828:	0002      	movs	r2, r0
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	0019      	movs	r1, r3
 8007830:	0010      	movs	r0, r2
 8007832:	f7ff ffe2 	bl	80077fa <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	0019      	movs	r1, r3
 800783e:	0010      	movs	r0, r2
 8007840:	f7ff f939 	bl	8006ab6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3308      	adds	r3, #8
 8007848:	001a      	movs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	3304      	adds	r3, #4
 8007850:	0019      	movs	r1, r3
 8007852:	0010      	movs	r0, r2
 8007854:	f7ff f916 	bl	8006a84 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	609a      	str	r2, [r3, #8]
    }
 8007860:	46c0      	nop			; (mov r8, r8)
 8007862:	46bd      	mov	sp, r7
 8007864:	b002      	add	sp, #8
 8007866:	bd80      	pop	{r7, pc}

08007868 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	0018      	movs	r0, r3
 8007878:	f000 f9aa 	bl	8007bd0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800787c:	0002      	movs	r2, r0
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	0018      	movs	r0, r3
 8007884:	f000 f9ad 	bl	8007be2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 8007888:	46c0      	nop			; (mov r8, r8)
 800788a:	46bd      	mov	sp, r7
 800788c:	b004      	add	sp, #16
 800788e:	bd80      	pop	{r7, pc}

08007890 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8007890:	b5b0      	push	{r4, r5, r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	0018      	movs	r0, r3
 800789e:	f000 f9b9 	bl	8007c14 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80078a2:	0004      	movs	r4, r0
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	0018      	movs	r0, r3
 80078a8:	f000 f9c6 	bl	8007c38 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 80078ac:	0003      	movs	r3, r0
 80078ae:	1ae3      	subs	r3, r4, r3
 80078b0:	425a      	negs	r2, r3
 80078b2:	4153      	adcs	r3, r2
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_+0x32>
	  __throw_length_error(
 80078ba:	4b18      	ldr	r3, [pc, #96]	; (800791c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_+0x8c>)
 80078bc:	0018      	movs	r0, r3
 80078be:	f001 f921 	bl	8008b04 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2101      	movs	r1, #1
 80078c6:	0018      	movs	r0, r3
 80078c8:	f000 f9c7 	bl	8007c5a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	1d1c      	adds	r4, r3, #4
 80078d4:	0010      	movs	r0, r2
 80078d6:	f7ff f94a 	bl	8006b6e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 80078da:	0003      	movs	r3, r0
 80078dc:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80078de:	687c      	ldr	r4, [r7, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699d      	ldr	r5, [r3, #24]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	0018      	movs	r0, r3
 80078e8:	f000 f972 	bl	8007bd0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80078ec:	0003      	movs	r3, r0
 80078ee:	001a      	movs	r2, r3
 80078f0:	0029      	movs	r1, r5
 80078f2:	0020      	movs	r0, r4
 80078f4:	f7ff ffb8 	bl	8007868 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3318      	adds	r3, #24
 80078fc:	001a      	movs	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	3304      	adds	r3, #4
 8007904:	0019      	movs	r1, r3
 8007906:	0010      	movs	r0, r2
 8007908:	f7fe ffe1 	bl	80068ce <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69da      	ldr	r2, [r3, #28]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	619a      	str	r2, [r3, #24]
      }
 8007914:	46c0      	nop			; (mov r8, r8)
 8007916:	46bd      	mov	sp, r7
 8007918:	b002      	add	sp, #8
 800791a:	bdb0      	pop	{r4, r5, r7, pc}
 800791c:	0800da80 	.word	0x0800da80

08007920 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc>:
      void _M_check(size_t __position, const char *__s) const
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
	if (__position >= _Nb)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b07      	cmp	r3, #7
 8007930:	d905      	bls.n	800793e <_ZNKSt6bitsetILj8EE8_M_checkEjPKc+0x1e>
	  __throw_out_of_range_fmt(__N("%s: __position (which is %zu) "
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	4804      	ldr	r0, [pc, #16]	; (8007948 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc+0x28>)
 8007938:	2308      	movs	r3, #8
 800793a:	f001 f8e7 	bl	8008b0c <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800793e:	46c0      	nop			; (mov r8, r8)
 8007940:	46bd      	mov	sp, r7
 8007942:	b004      	add	sp, #16
 8007944:	bd80      	pop	{r7, pc}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	0800dab0 	.word	0x0800dab0

0800794c <_ZNSt6bitsetILj8EE14_Unchecked_setEji>:
      _Unchecked_set(size_t __pos, int __val) _GLIBCXX_NOEXCEPT
 800794c:	b590      	push	{r4, r7, lr}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
	if (__val)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00f      	beq.n	800797e <_ZNSt6bitsetILj8EE14_Unchecked_setEji+0x32>
	  this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	0018      	movs	r0, r3
 8007962:	f7ff fbaa 	bl	80070ba <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8007966:	0004      	movs	r4, r0
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	0011      	movs	r1, r2
 800796e:	0018      	movs	r0, r3
 8007970:	f7ff fbb3 	bl	80070da <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 8007974:	0003      	movs	r3, r0
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	4322      	orrs	r2, r4
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e00f      	b.n	800799e <_ZNSt6bitsetILj8EE14_Unchecked_setEji+0x52>
	  this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	0018      	movs	r0, r3
 8007982:	f7ff fb9a 	bl	80070ba <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8007986:	0003      	movs	r3, r0
 8007988:	43dc      	mvns	r4, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	0011      	movs	r1, r2
 8007990:	0018      	movs	r0, r3
 8007992:	f7ff fba2 	bl	80070da <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 8007996:	0003      	movs	r3, r0
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4022      	ands	r2, r4
 800799c:	601a      	str	r2, [r3, #0]
	return *this;
 800799e:	68fb      	ldr	r3, [r7, #12]
      }
 80079a0:	0018      	movs	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b005      	add	sp, #20
 80079a6:	bd90      	pop	{r4, r7, pc}

080079a8 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	0018      	movs	r0, r3
 80079b8:	f000 f96b 	bl	8007c92 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 80079bc:	0002      	movs	r2, r0
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	0018      	movs	r0, r3
 80079c4:	f000 f96e 	bl	8007ca4 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	46bd      	mov	sp, r7
 80079cc:	b004      	add	sp, #16
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80079d0:	b5b0      	push	{r4, r5, r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	0018      	movs	r0, r3
 80079de:	f000 f978 	bl	8007cd2 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE4sizeEv>
 80079e2:	0004      	movs	r4, r0
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	0018      	movs	r0, r3
 80079e8:	f000 f985 	bl	8007cf6 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE8max_sizeEv>
 80079ec:	0003      	movs	r3, r0
 80079ee:	1ae3      	subs	r3, r4, r3
 80079f0:	425a      	negs	r2, r3
 80079f2:	4153      	adcs	r3, r2
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x32>
	  __throw_length_error(
 80079fa:	4b18      	ldr	r3, [pc, #96]	; (8007a5c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x8c>)
 80079fc:	0018      	movs	r0, r3
 80079fe:	f001 f881 	bl	8008b04 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2101      	movs	r1, #1
 8007a06:	0018      	movs	r0, r3
 8007a08:	f000 f986 	bl	8007d18 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	1d1c      	adds	r4, r3, #4
 8007a14:	0010      	movs	r0, r2
 8007a16:	f7ff f92b 	bl	8006c70 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>
 8007a1a:	0003      	movs	r3, r0
 8007a1c:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8007a1e:	687c      	ldr	r4, [r7, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699d      	ldr	r5, [r3, #24]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	0018      	movs	r0, r3
 8007a28:	f000 f933 	bl	8007c92 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007a2c:	0003      	movs	r3, r0
 8007a2e:	001a      	movs	r2, r3
 8007a30:	0029      	movs	r1, r5
 8007a32:	0020      	movs	r0, r4
 8007a34:	f7ff ffb8 	bl	80079a8 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3318      	adds	r3, #24
 8007a3c:	001a      	movs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	3304      	adds	r3, #4
 8007a44:	0019      	movs	r1, r3
 8007a46:	0010      	movs	r0, r2
 8007a48:	f7ff f81c 	bl	8006a84 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69da      	ldr	r2, [r3, #28]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	619a      	str	r2, [r3, #24]
      }
 8007a54:	46c0      	nop			; (mov r8, r8)
 8007a56:	46bd      	mov	sp, r7
 8007a58:	b002      	add	sp, #8
 8007a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a5c:	0800da80 	.word	0x0800da80

08007a60 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d10b      	bne.n	8007a8c <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EmmEv+0x2c>
	    _M_set_node(_M_node - 1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	1f1a      	subs	r2, r3, #4
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	0011      	movs	r1, r2
 8007a7e:	0018      	movs	r0, r3
 8007a80:	f7ff f800 	bl	8006a84 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_last;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	1f1a      	subs	r2, r3, #4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
	return *this;
 8007a96:	687b      	ldr	r3, [r7, #4]
      }
 8007a98:	0018      	movs	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	0019      	movs	r1, r3
 8007ab0:	0010      	movs	r0, r2
 8007ab2:	f7ff f800 	bl	8006ab6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3318      	adds	r3, #24
 8007aba:	001a      	movs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	3b04      	subs	r3, #4
 8007ac2:	0019      	movs	r1, r3
 8007ac4:	0010      	movs	r0, r2
 8007ac6:	f7fe ffdd 	bl	8006a84 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	1f1a      	subs	r2, r3, #4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	f7fe fc64 	bl	80063a4 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8007adc:	0002      	movs	r2, r0
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	0019      	movs	r1, r3
 8007ae4:	0010      	movs	r0, r2
 8007ae6:	f7ff fe88 	bl	80077fa <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
    }
 8007aea:	46c0      	nop			; (mov r8, r8)
 8007aec:	46bd      	mov	sp, r7
 8007aee:	b002      	add	sp, #8
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>:
	to_string() const
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	6039      	str	r1, [r7, #0]
	  std::basic_string<_CharT, _Traits, _Alloc> __result;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	0018      	movs	r0, r3
 8007b00:	f001 f96b 	bl	8008dda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	6838      	ldr	r0, [r7, #0]
 8007b08:	2331      	movs	r3, #49	; 0x31
 8007b0a:	2230      	movs	r2, #48	; 0x30
 8007b0c:	f000 f920 	bl	8007d50 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>
	  return __result;
 8007b10:	46c0      	nop			; (mov r8, r8)
	}
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b002      	add	sp, #8
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <_ZSteqINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EbRKSt15_Deque_iteratorIT_T0_T1_ESE_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	425a      	negs	r2, r3
 8007b30:	4153      	adcs	r3, r2
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	0018      	movs	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b002      	add	sp, #8
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	0018      	movs	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b002      	add	sp, #8
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	0011      	movs	r1, r2
 8007b60:	0018      	movs	r0, r3
 8007b62:	f000 f92b 	bl	8007dbc <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	b002      	add	sp, #8
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f7fe fb6e 	bl	800625a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8007b7e:	0002      	movs	r2, r0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	0019      	movs	r1, r3
 8007b86:	0010      	movs	r0, r2
 8007b88:	f7ff ffe2 	bl	8007b50 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	0019      	movs	r1, r3
 8007b94:	0010      	movs	r0, r2
 8007b96:	f7fe feb6 	bl	8006906 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	001a      	movs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	0019      	movs	r1, r3
 8007ba8:	0010      	movs	r0, r2
 8007baa:	f7fe fe90 	bl	80068ce <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	609a      	str	r2, [r3, #8]
    }
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	b002      	add	sp, #8
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE7destroyIS2_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8007bc8:	46c0      	nop			; (mov r8, r8)
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	b002      	add	sp, #8
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007be2:	b590      	push	{r4, r7, lr}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f7ff ffed 	bl	8007bd0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8007bf6:	0004      	movs	r4, r0
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	0019      	movs	r1, r3
 8007bfc:	2018      	movs	r0, #24
 8007bfe:	f7ff fa47 	bl	8007090 <_ZnwjPv>
 8007c02:	0003      	movs	r3, r0
 8007c04:	0021      	movs	r1, r4
 8007c06:	0018      	movs	r0, r3
 8007c08:	f001 f98e 	bl	8008f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007c0c:	46c0      	nop			; (mov r8, r8)
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	b005      	add	sp, #20
 8007c12:	bd90      	pop	{r4, r7, pc}

08007c14 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3318      	adds	r3, #24
 8007c20:	001a      	movs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3308      	adds	r3, #8
 8007c26:	0019      	movs	r1, r3
 8007c28:	0010      	movs	r0, r2
 8007c2a:	f000 f8d4 	bl	8007dd6 <_ZStmiINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSC_SF_>
 8007c2e:	0003      	movs	r3, r0
 8007c30:	0018      	movs	r0, r3
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b002      	add	sp, #8
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	0018      	movs	r0, r3
 8007c44:	f7fe ffbe 	bl	8006bc4 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8007c48:	0003      	movs	r3, r0
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	f000 f8fc 	bl	8007e48 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 8007c50:	0003      	movs	r3, r0
 8007c52:	0018      	movs	r0, r3
 8007c54:	46bd      	mov	sp, r7
 8007c56:	b002      	add	sp, #8
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6859      	ldr	r1, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	1ac3      	subs	r3, r0, r3
 8007c76:	109b      	asrs	r3, r3, #2
 8007c78:	1acb      	subs	r3, r1, r3
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d905      	bls.n	8007c8a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	0018      	movs	r0, r3
 8007c86:	f000 f8fb 	bl	8007e80 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>
      }
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	b002      	add	sp, #8
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	b002      	add	sp, #8
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007ca4:	b590      	push	{r4, r7, lr}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f7ff ffed 	bl	8007c92 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007cb8:	0004      	movs	r4, r0
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	0019      	movs	r1, r3
 8007cbe:	2004      	movs	r0, #4
 8007cc0:	f7ff f9e6 	bl	8007090 <_ZnwjPv>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	6822      	ldr	r2, [r4, #0]
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	b005      	add	sp, #20
 8007cd0:	bd90      	pop	{r4, r7, pc}

08007cd2 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3318      	adds	r3, #24
 8007cde:	001a      	movs	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	0019      	movs	r1, r3
 8007ce6:	0010      	movs	r0, r2
 8007ce8:	f000 f96c 	bl	8007fc4 <_ZStmiISt6bitsetILj8EERS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
 8007cec:	0003      	movs	r3, r0
 8007cee:	0018      	movs	r0, r3
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	b002      	add	sp, #8
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	0018      	movs	r0, r3
 8007d02:	f7fe ffe0 	bl	8006cc6 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 8007d06:	0003      	movs	r3, r0
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f000 f97f 	bl	800800c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_>
 8007d0e:	0003      	movs	r3, r0
 8007d10:	0018      	movs	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b002      	add	sp, #8
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6859      	ldr	r1, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	1ac3      	subs	r3, r0, r3
 8007d34:	109b      	asrs	r3, r3, #2
 8007d36:	1acb      	subs	r3, r1, r3
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d905      	bls.n	8007d48 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	0018      	movs	r0, r3
 8007d44:	f000 f97e 	bl	8008044 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb>
      }
 8007d48:	46c0      	nop			; (mov r8, r8)
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>:
      }

  template<size_t _Nb>
    template<class _CharT, class _Traits, class _Alloc>
      void
      bitset<_Nb>::
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	0019      	movs	r1, r3
 8007d5c:	1dfb      	adds	r3, r7, #7
 8007d5e:	701a      	strb	r2, [r3, #0]
 8007d60:	1dbb      	adds	r3, r7, #6
 8007d62:	1c0a      	adds	r2, r1, #0
 8007d64:	701a      	strb	r2, [r3, #0]
      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,
			_CharT __zero, _CharT __one) const
      {
	__s.assign(_Nb, __zero);
 8007d66:	1dfb      	adds	r3, r7, #7
 8007d68:	781a      	ldrb	r2, [r3, #0]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2108      	movs	r1, #8
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f001 f8ac 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8007d74:	2308      	movs	r3, #8
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01a      	beq.n	8007db4 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x64>
	  if (_Unchecked_test(__i - 1))
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	1e5a      	subs	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	0011      	movs	r1, r2
 8007d86:	0018      	movs	r0, r3
 8007d88:	f000 f9fe 	bl	8008188 <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>
 8007d8c:	1e03      	subs	r3, r0, #0
 8007d8e:	d00d      	beq.n	8007dac <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x5c>
	    _Traits::assign(__s[_Nb - __i], __one);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2208      	movs	r2, #8
 8007d94:	1ad2      	subs	r2, r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	0011      	movs	r1, r2
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f001 f82e 	bl	8008dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8007da0:	0002      	movs	r2, r0
 8007da2:	1dbb      	adds	r3, r7, #6
 8007da4:	0019      	movs	r1, r3
 8007da6:	0010      	movs	r0, r2
 8007da8:	f7ff f94e 	bl	8007048 <_ZNSt11char_traitsIcE6assignERcRKc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	e7e1      	b.n	8007d78 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x28>
      }
 8007db4:	46c0      	nop			; (mov r8, r8)
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b006      	add	sp, #24
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:
	destroy(_Up* __p)
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f001 f80d 	bl	8008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	b002      	add	sp, #8
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <_ZStmiINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSC_SF_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8007de0:	f7fe fed7 	bl	8006b92 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 8007de4:	0003      	movs	r3, r0
 8007de6:	0019      	movs	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	109b      	asrs	r3, r3, #2
 8007df4:	3b01      	subs	r3, #1
 8007df6:	4359      	muls	r1, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	10da      	asrs	r2, r3, #3
 8007e04:	0013      	movs	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	189b      	adds	r3, r3, r2
 8007e0a:	0118      	lsls	r0, r3, #4
 8007e0c:	181b      	adds	r3, r3, r0
 8007e0e:	0218      	lsls	r0, r3, #8
 8007e10:	181b      	adds	r3, r3, r0
 8007e12:	0418      	lsls	r0, r3, #16
 8007e14:	181b      	adds	r3, r3, r0
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	189b      	adds	r3, r3, r2
 8007e1a:	18c9      	adds	r1, r1, r3
	+ (__y._M_last - __y._M_cur);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	10da      	asrs	r2, r3, #3
 8007e28:	0013      	movs	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	189b      	adds	r3, r3, r2
 8007e2e:	0118      	lsls	r0, r3, #4
 8007e30:	181b      	adds	r3, r3, r0
 8007e32:	0218      	lsls	r0, r3, #8
 8007e34:	181b      	adds	r3, r3, r0
 8007e36:	0418      	lsls	r0, r3, #16
 8007e38:	181b      	adds	r3, r3, r0
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	189b      	adds	r3, r3, r2
 8007e3e:	18cb      	adds	r3, r1, r3
    }
 8007e40:	0018      	movs	r0, r3
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b002      	add	sp, #8
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8007e50:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 8007e52:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	0018      	movs	r0, r3
 8007e58:	f000 f9af 	bl	80081ba <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007e60:	2308      	movs	r3, #8
 8007e62:	18fa      	adds	r2, r7, r3
 8007e64:	230c      	movs	r3, #12
 8007e66:	18fb      	adds	r3, r7, r3
 8007e68:	0011      	movs	r1, r2
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f000 f9b2 	bl	80081d4 <_ZSt3minIjERKT_S2_S2_>
 8007e70:	0003      	movs	r3, r0
 8007e72:	681b      	ldr	r3, [r3, #0]
      }
 8007e74:	0018      	movs	r0, r3
 8007e76:	46bd      	mov	sp, r7
 8007e78:	b004      	add	sp, #16
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	7fffffff 	.word	0x7fffffff

08007e80 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8007e80:	b590      	push	{r4, r7, lr}
 8007e82:	b08b      	sub	sp, #44	; 0x2c
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	1dfb      	adds	r3, r7, #7
 8007e8c:	701a      	strb	r2, [r3, #0]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	109b      	asrs	r3, r3, #2
 8007e9a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8007e9c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	6a3a      	ldr	r2, [r7, #32]
 8007ea2:	18d3      	adds	r3, r2, r3
 8007ea4:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d92e      	bls.n	8007f10 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x90>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	1acb      	subs	r3, r1, r3
 8007ebe:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8007ec0:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8007ec2:	1dfb      	adds	r3, r7, #7
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x50>
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	e000      	b.n	8007ed2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x52>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	185b      	adds	r3, r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8007ed4:	18d3      	adds	r3, r2, r3
 8007ed6:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d209      	bcs.n	8007ef6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8007eea:	3304      	adds	r3, #4
 8007eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eee:	0019      	movs	r1, r3
 8007ef0:	f000 f982 	bl	80081f8 <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 8007ef4:	e04b      	b.n	8007f8e <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x10e>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8007efe:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8007f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f06:	18d3      	adds	r3, r2, r3
 8007f08:	001a      	movs	r2, r3
 8007f0a:	f000 f98f 	bl	800822c <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 8007f0e:	e03e      	b.n	8007f8e <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x10e>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3304      	adds	r3, #4
 8007f18:	2208      	movs	r2, #8
 8007f1a:	18ba      	adds	r2, r7, r2
 8007f1c:	0011      	movs	r1, r2
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f7fe fc8b 	bl	800683a <_ZSt3maxIjERKT_S2_S2_>
 8007f24:	0003      	movs	r3, r0
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	18e3      	adds	r3, r4, r3
	  size_type __new_map_size = this->_M_impl._M_map_size
 8007f2a:	3302      	adds	r3, #2
 8007f2c:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	0011      	movs	r1, r2
 8007f34:	0018      	movs	r0, r3
 8007f36:	f7fe fc92 	bl	800685e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 8007f3a:	0003      	movs	r3, r0
 8007f3c:	617b      	str	r3, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	085b      	lsrs	r3, r3, #1
 8007f46:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8007f48:	1dfb      	adds	r3, r7, #7
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xd6>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	e000      	b.n	8007f58 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xd8>
 8007f56:	2300      	movs	r3, #0
 8007f58:	189b      	adds	r3, r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	18d3      	adds	r3, r2, r3
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8007f68:	3304      	adds	r3, #4
 8007f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6c:	0019      	movs	r1, r3
 8007f6e:	f000 f943 	bl	80081f8 <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6819      	ldr	r1, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	001a      	movs	r2, r3
 8007f7e:	f7fe faf0 	bl	8006562 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>

	  this->_M_impl._M_map = __new_map;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3308      	adds	r3, #8
 8007f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f94:	0011      	movs	r1, r2
 8007f96:	0018      	movs	r0, r3
 8007f98:	f7fe fc99 	bl	80068ce <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3318      	adds	r3, #24
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	4a06      	ldr	r2, [pc, #24]	; (8007fc0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x140>)
 8007fa6:	4694      	mov	ip, r2
 8007fa8:	4463      	add	r3, ip
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fae:	18d3      	adds	r3, r2, r3
 8007fb0:	0019      	movs	r1, r3
 8007fb2:	f7fe fc8c 	bl	80068ce <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
    }
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b00b      	add	sp, #44	; 0x2c
 8007fbc:	bd90      	pop	{r4, r7, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	3fffffff 	.word	0x3fffffff

08007fc4 <_ZStmiISt6bitsetILj8EERS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8007fce:	f7fe fe61 	bl	8006c94 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>
 8007fd2:	0003      	movs	r3, r0
 8007fd4:	0019      	movs	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	109b      	asrs	r3, r3, #2
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	434b      	muls	r3, r1
 8007fe6:	001a      	movs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6819      	ldr	r1, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	1acb      	subs	r3, r1, r3
 8007ff2:	109b      	asrs	r3, r3, #2
 8007ff4:	18d2      	adds	r2, r2, r3
	+ (__y._M_last - __y._M_cur);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	6899      	ldr	r1, [r3, #8]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	1acb      	subs	r3, r1, r3
 8008000:	109b      	asrs	r3, r3, #2
 8008002:	18d3      	adds	r3, r2, r3
    }
 8008004:	0018      	movs	r0, r3
 8008006:	46bd      	mov	sp, r7
 8008008:	b002      	add	sp, #8
 800800a:	bd80      	pop	{r7, pc}

0800800c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8008014:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8008016:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	0018      	movs	r0, r3
 800801c:	f000 f920 	bl	8008260 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8max_sizeERKS2_>
 8008020:	0003      	movs	r3, r0
 8008022:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8008024:	2308      	movs	r3, #8
 8008026:	18fa      	adds	r2, r7, r3
 8008028:	230c      	movs	r3, #12
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	0011      	movs	r1, r2
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f8d0 	bl	80081d4 <_ZSt3minIjERKT_S2_S2_>
 8008034:	0003      	movs	r3, r0
 8008036:	681b      	ldr	r3, [r3, #0]
      }
 8008038:	0018      	movs	r0, r3
 800803a:	46bd      	mov	sp, r7
 800803c:	b004      	add	sp, #16
 800803e:	bd80      	pop	{r7, pc}
 8008040:	7fffffff 	.word	0x7fffffff

08008044 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b08b      	sub	sp, #44	; 0x2c
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	1dfb      	adds	r3, r7, #7
 8008050:	701a      	strb	r2, [r3, #0]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	109b      	asrs	r3, r3, #2
 800805e:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8008060:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6a3a      	ldr	r2, [r7, #32]
 8008066:	18d3      	adds	r3, r2, r3
 8008068:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	429a      	cmp	r2, r3
 8008074:	d92e      	bls.n	80080d4 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x90>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	1acb      	subs	r3, r1, r3
 8008082:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8008084:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8008086:	1dfb      	adds	r3, r7, #7
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x50>
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	e000      	b.n	8008096 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x52>
 8008094:	2300      	movs	r3, #0
 8008096:	185b      	adds	r3, r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8008098:	18d3      	adds	r3, r2, r3
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d209      	bcs.n	80080ba <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80080ae:	3304      	adds	r3, #4
 80080b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b2:	0019      	movs	r1, r3
 80080b4:	f000 f8e1 	bl	800827a <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
 80080b8:	e04b      	b.n	8008152 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x10e>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80080c2:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80080c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ca:	18d3      	adds	r3, r2, r3
 80080cc:	001a      	movs	r2, r3
 80080ce:	f000 f8ee 	bl	80082ae <_ZSt13copy_backwardIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
 80080d2:	e03e      	b.n	8008152 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x10e>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3304      	adds	r3, #4
 80080dc:	2208      	movs	r2, #8
 80080de:	18ba      	adds	r2, r7, r2
 80080e0:	0011      	movs	r1, r2
 80080e2:	0018      	movs	r0, r3
 80080e4:	f7fe fba9 	bl	800683a <_ZSt3maxIjERKT_S2_S2_>
 80080e8:	0003      	movs	r3, r0
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	18e3      	adds	r3, r4, r3
	  size_type __new_map_size = this->_M_impl._M_map_size
 80080ee:	3302      	adds	r3, #2
 80080f0:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	0011      	movs	r1, r2
 80080f8:	0018      	movs	r0, r3
 80080fa:	f7fe fc8b 	bl	8006a14 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>
 80080fe:	0003      	movs	r3, r0
 8008100:	617b      	str	r3, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	085b      	lsrs	r3, r3, #1
 800810a:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800810c:	1dfb      	adds	r3, r7, #7
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0xd6>
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	e000      	b.n	800811c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0xd8>
 800811a:	2300      	movs	r3, #0
 800811c:	189b      	adds	r3, r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	18d3      	adds	r3, r2, r3
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800812c:	3304      	adds	r3, #4
 800812e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008130:	0019      	movs	r1, r3
 8008132:	f000 f8a2 	bl	800827a <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6819      	ldr	r1, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	001a      	movs	r2, r3
 8008142:	f7fe fb34 	bl	80067ae <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3308      	adds	r3, #8
 8008156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008158:	0011      	movs	r1, r2
 800815a:	0018      	movs	r0, r3
 800815c:	f7fe fc92 	bl	8006a84 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3318      	adds	r3, #24
 8008164:	0018      	movs	r0, r3
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	4a06      	ldr	r2, [pc, #24]	; (8008184 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x140>)
 800816a:	4694      	mov	ip, r2
 800816c:	4463      	add	r3, ip
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008172:	18d3      	adds	r3, r2, r3
 8008174:	0019      	movs	r1, r3
 8008176:	f7fe fc85 	bl	8006a84 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
    }
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	46bd      	mov	sp, r7
 800817e:	b00b      	add	sp, #44	; 0x2c
 8008180:	bd90      	pop	{r4, r7, pc}
 8008182:	46c0      	nop			; (mov r8, r8)
 8008184:	3fffffff 	.word	0x3fffffff

08008188 <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>:
      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	0011      	movs	r1, r2
 8008198:	0018      	movs	r0, r3
 800819a:	f7fe ffa8 	bl	80070ee <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>
 800819e:	0004      	movs	r4, r0
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	0018      	movs	r0, r3
 80081a4:	f7fe ff89 	bl	80070ba <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 80081a8:	0003      	movs	r3, r0
 80081aa:	4023      	ands	r3, r4
		!= static_cast<_WordT>(0)); }
 80081ac:	1e5a      	subs	r2, r3, #1
 80081ae:	4193      	sbcs	r3, r2
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	0018      	movs	r0, r3
 80081b4:	46bd      	mov	sp, r7
 80081b6:	b003      	add	sp, #12
 80081b8:	bd90      	pop	{r4, r7, pc}

080081ba <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	0018      	movs	r0, r3
 80081c6:	f7fe febb 	bl	8006f40 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 80081ca:	0003      	movs	r3, r0
 80081cc:	0018      	movs	r0, r3
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b002      	add	sp, #8
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d201      	bcs.n	80081ee <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	e000      	b.n	80081f0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80081ee:	687b      	ldr	r3, [r7, #4]
    }
 80081f0:	0018      	movs	r0, r3
 80081f2:	46bd      	mov	sp, r7
 80081f4:	b002      	add	sp, #8
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80081f8:	b590      	push	{r4, r7, lr}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	0018      	movs	r0, r3
 8008208:	f000 f86b 	bl	80082e2 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800820c:	0004      	movs	r4, r0
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	0018      	movs	r0, r3
 8008212:	f000 f866 	bl	80082e2 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8008216:	0001      	movs	r1, r0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	001a      	movs	r2, r3
 800821c:	0020      	movs	r0, r4
 800821e:	f000 f869 	bl	80082f4 <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8008222:	0003      	movs	r3, r0
    }
 8008224:	0018      	movs	r0, r3
 8008226:	46bd      	mov	sp, r7
 8008228:	b005      	add	sp, #20
 800822a:	bd90      	pop	{r4, r7, pc}

0800822c <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800822c:	b590      	push	{r4, r7, lr}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	0018      	movs	r0, r3
 800823c:	f000 f851 	bl	80082e2 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8008240:	0004      	movs	r4, r0
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	0018      	movs	r0, r3
 8008246:	f000 f84c 	bl	80082e2 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800824a:	0001      	movs	r1, r0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	001a      	movs	r2, r3
 8008250:	0020      	movs	r0, r4
 8008252:	f000 f874 	bl	800833e <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8008256:	0003      	movs	r3, r0
    }
 8008258:	0018      	movs	r0, r3
 800825a:	46bd      	mov	sp, r7
 800825c:	b005      	add	sp, #20
 800825e:	bd90      	pop	{r4, r7, pc}

08008260 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	0018      	movs	r0, r3
 800826c:	f7fe fe74 	bl	8006f58 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>
 8008270:	0003      	movs	r3, r0
 8008272:	0018      	movs	r0, r3
 8008274:	46bd      	mov	sp, r7
 8008276:	b002      	add	sp, #8
 8008278:	bd80      	pop	{r7, pc}

0800827a <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 800827a:	b590      	push	{r4, r7, lr}
 800827c:	b085      	sub	sp, #20
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	0018      	movs	r0, r3
 800828a:	f000 f87d 	bl	8008388 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 800828e:	0004      	movs	r4, r0
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	0018      	movs	r0, r3
 8008294:	f000 f878 	bl	8008388 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 8008298:	0001      	movs	r1, r0
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	001a      	movs	r2, r3
 800829e:	0020      	movs	r0, r4
 80082a0:	f000 f87b 	bl	800839a <_ZSt14__copy_move_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 80082a4:	0003      	movs	r3, r0
    }
 80082a6:	0018      	movs	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b005      	add	sp, #20
 80082ac:	bd90      	pop	{r4, r7, pc}

080082ae <_ZSt13copy_backwardIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80082ae:	b590      	push	{r4, r7, lr}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	0018      	movs	r0, r3
 80082be:	f000 f863 	bl	8008388 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 80082c2:	0004      	movs	r4, r0
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	0018      	movs	r0, r3
 80082c8:	f000 f85e 	bl	8008388 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 80082cc:	0001      	movs	r1, r0
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	001a      	movs	r2, r3
 80082d2:	0020      	movs	r0, r4
 80082d4:	f000 f886 	bl	80083e4 <_ZSt23__copy_move_backward_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 80082d8:	0003      	movs	r3, r0
    }
 80082da:	0018      	movs	r0, r3
 80082dc:	46bd      	mov	sp, r7
 80082de:	b005      	add	sp, #20
 80082e0:	bd90      	pop	{r4, r7, pc}

080082e2 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	0018      	movs	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	b002      	add	sp, #8
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80082f4:	b5b0      	push	{r4, r5, r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	0018      	movs	r0, r3
 8008304:	f000 f893 	bl	800842e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8008308:	0004      	movs	r4, r0
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	0018      	movs	r0, r3
 800830e:	f000 f88e 	bl	800842e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8008312:	0005      	movs	r5, r0
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	0018      	movs	r0, r3
 8008318:	f000 f889 	bl	800842e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800831c:	0003      	movs	r3, r0
 800831e:	001a      	movs	r2, r3
 8008320:	0029      	movs	r1, r5
 8008322:	0020      	movs	r0, r4
 8008324:	f000 f88c 	bl	8008440 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8008328:	0002      	movs	r2, r0
 800832a:	1d3b      	adds	r3, r7, #4
 800832c:	0011      	movs	r1, r2
 800832e:	0018      	movs	r0, r3
 8008330:	f000 f89b 	bl	800846a <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 8008334:	0003      	movs	r3, r0
    }
 8008336:	0018      	movs	r0, r3
 8008338:	46bd      	mov	sp, r7
 800833a:	b004      	add	sp, #16
 800833c:	bdb0      	pop	{r4, r5, r7, pc}

0800833e <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800833e:	b5b0      	push	{r4, r5, r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	0018      	movs	r0, r3
 800834e:	f000 f86e 	bl	800842e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8008352:	0004      	movs	r4, r0
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	0018      	movs	r0, r3
 8008358:	f000 f869 	bl	800842e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800835c:	0005      	movs	r5, r0
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	0018      	movs	r0, r3
 8008362:	f000 f864 	bl	800842e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8008366:	0003      	movs	r3, r0
 8008368:	001a      	movs	r2, r3
 800836a:	0029      	movs	r1, r5
 800836c:	0020      	movs	r0, r4
 800836e:	f000 f886 	bl	800847e <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8008372:	0002      	movs	r2, r0
 8008374:	1d3b      	adds	r3, r7, #4
 8008376:	0011      	movs	r1, r2
 8008378:	0018      	movs	r0, r3
 800837a:	f000 f876 	bl	800846a <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 800837e:	0003      	movs	r3, r0
    }
 8008380:	0018      	movs	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	b004      	add	sp, #16
 8008386:	bdb0      	pop	{r4, r5, r7, pc}

08008388 <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>:
    __miter_base(_Iterator __it)
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	0018      	movs	r0, r3
 8008394:	46bd      	mov	sp, r7
 8008396:	b002      	add	sp, #8
 8008398:	bd80      	pop	{r7, pc}

0800839a <_ZSt14__copy_move_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800839a:	b5b0      	push	{r4, r5, r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	0018      	movs	r0, r3
 80083aa:	f000 f87d 	bl	80084a8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 80083ae:	0004      	movs	r4, r0
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	0018      	movs	r0, r3
 80083b4:	f000 f878 	bl	80084a8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 80083b8:	0005      	movs	r5, r0
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	0018      	movs	r0, r3
 80083be:	f000 f873 	bl	80084a8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 80083c2:	0003      	movs	r3, r0
 80083c4:	001a      	movs	r2, r3
 80083c6:	0029      	movs	r1, r5
 80083c8:	0020      	movs	r0, r4
 80083ca:	f000 f876 	bl	80084ba <_ZSt13__copy_move_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 80083ce:	0002      	movs	r2, r0
 80083d0:	1d3b      	adds	r3, r7, #4
 80083d2:	0011      	movs	r1, r2
 80083d4:	0018      	movs	r0, r3
 80083d6:	f000 f885 	bl	80084e4 <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>
 80083da:	0003      	movs	r3, r0
    }
 80083dc:	0018      	movs	r0, r3
 80083de:	46bd      	mov	sp, r7
 80083e0:	b004      	add	sp, #16
 80083e2:	bdb0      	pop	{r4, r5, r7, pc}

080083e4 <_ZSt23__copy_move_backward_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80083e4:	b5b0      	push	{r4, r5, r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	0018      	movs	r0, r3
 80083f4:	f000 f858 	bl	80084a8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 80083f8:	0004      	movs	r4, r0
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	0018      	movs	r0, r3
 80083fe:	f000 f853 	bl	80084a8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 8008402:	0005      	movs	r5, r0
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	0018      	movs	r0, r3
 8008408:	f000 f84e 	bl	80084a8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 800840c:	0003      	movs	r3, r0
 800840e:	001a      	movs	r2, r3
 8008410:	0029      	movs	r1, r5
 8008412:	0020      	movs	r0, r4
 8008414:	f000 f870 	bl	80084f8 <_ZSt22__copy_move_backward_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 8008418:	0002      	movs	r2, r0
 800841a:	1d3b      	adds	r3, r7, #4
 800841c:	0011      	movs	r1, r2
 800841e:	0018      	movs	r0, r3
 8008420:	f000 f860 	bl	80084e4 <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>
 8008424:	0003      	movs	r3, r0
    }
 8008426:	0018      	movs	r0, r3
 8008428:	46bd      	mov	sp, r7
 800842a:	b004      	add	sp, #16
 800842c:	bdb0      	pop	{r4, r5, r7, pc}

0800842e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:
    __niter_base(_Iterator __it)
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0018      	movs	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	b002      	add	sp, #8
 800843e:	bd80      	pop	{r7, pc}

08008440 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800844c:	2317      	movs	r3, #23
 800844e:	18fb      	adds	r3, r7, r3
 8008450:	2201      	movs	r2, #1
 8008452:	701a      	strb	r2, [r3, #0]
			      _Category>::__copy_m(__first, __last, __result);
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	0018      	movs	r0, r3
 800845c:	f000 f861 	bl	8008522 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 8008460:	0003      	movs	r3, r0
    }
 8008462:	0018      	movs	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	b006      	add	sp, #24
 8008468:	bd80      	pop	{r7, pc}

0800846a <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
    { return __res; }
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	0018      	movs	r0, r3
 8008478:	46bd      	mov	sp, r7
 800847a:	b002      	add	sp, #8
 800847c:	bd80      	pop	{r7, pc}

0800847e <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800847e:	b580      	push	{r7, lr}
 8008480:	b086      	sub	sp, #24
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 800848a:	2317      	movs	r3, #23
 800848c:	18fb      	adds	r3, r7, r3
 800848e:	2201      	movs	r2, #1
 8008490:	701a      	strb	r2, [r3, #0]
				       _Category>::__copy_move_b(__first,
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	0018      	movs	r0, r3
 800849a:	f000 f85f 	bl	800855c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 800849e:	0003      	movs	r3, r0
    }
 80084a0:	0018      	movs	r0, r3
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b006      	add	sp, #24
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>:
    __niter_base(_Iterator __it)
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
    { return __it; }
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	0018      	movs	r0, r3
 80084b4:	46bd      	mov	sp, r7
 80084b6:	b002      	add	sp, #8
 80084b8:	bd80      	pop	{r7, pc}

080084ba <_ZSt13__copy_move_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b086      	sub	sp, #24
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80084c6:	2317      	movs	r3, #23
 80084c8:	18fb      	adds	r3, r7, r3
 80084ca:	2201      	movs	r2, #1
 80084cc:	701a      	strb	r2, [r3, #0]
			      _Category>::__copy_m(__first, __last, __result);
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	0018      	movs	r0, r3
 80084d6:	f000 f863 	bl	80085a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>
 80084da:	0003      	movs	r3, r0
    }
 80084dc:	0018      	movs	r0, r3
 80084de:	46bd      	mov	sp, r7
 80084e0:	b006      	add	sp, #24
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
    { return __res; }
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	0018      	movs	r0, r3
 80084f2:	46bd      	mov	sp, r7
 80084f4:	b002      	add	sp, #8
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <_ZSt22__copy_move_backward_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 8008504:	2317      	movs	r3, #23
 8008506:	18fb      	adds	r3, r7, r3
 8008508:	2201      	movs	r2, #1
 800850a:	701a      	strb	r2, [r3, #0]
				       _Category>::__copy_move_b(__first,
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	0018      	movs	r0, r3
 8008514:	f000 f861 	bl	80085da <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>
 8008518:	0003      	movs	r3, r0
    }
 800851a:	0018      	movs	r0, r3
 800851c:	46bd      	mov	sp, r7
 800851e:	b006      	add	sp, #24
 8008520:	bd80      	pop	{r7, pc}

08008522 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008522:	b580      	push	{r7, lr}
 8008524:	b086      	sub	sp, #24
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	109b      	asrs	r3, r3, #2
 8008536:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d006      	beq.n	800854c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	009a      	lsls	r2, r3, #2
 8008542:	68f9      	ldr	r1, [r7, #12]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	0018      	movs	r0, r3
 8008548:	f000 fda4 	bl	8009094 <memmove>
	  return __result + _Num;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	18d3      	adds	r3, r2, r3
	}
 8008554:	0018      	movs	r0, r3
 8008556:	46bd      	mov	sp, r7
 8008558:	b006      	add	sp, #24
 800855a:	bd80      	pop	{r7, pc}

0800855c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	109b      	asrs	r3, r3, #2
 8008570:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	425b      	negs	r3, r3
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	18d0      	adds	r0, r2, r3
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	009a      	lsls	r2, r3, #2
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	0019      	movs	r1, r3
 800858a:	f000 fd83 	bl	8009094 <memmove>
	  return __result - _Num;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	425b      	negs	r3, r3
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	18d3      	adds	r3, r2, r3
	}
 8008598:	0018      	movs	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	b006      	add	sp, #24
 800859e:	bd80      	pop	{r7, pc}

080085a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	109b      	asrs	r3, r3, #2
 80085b4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d006      	beq.n	80085ca <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	009a      	lsls	r2, r3, #2
 80085c0:	68f9      	ldr	r1, [r7, #12]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	0018      	movs	r0, r3
 80085c6:	f000 fd65 	bl	8009094 <memmove>
	  return __result + _Num;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	18d3      	adds	r3, r2, r3
	}
 80085d2:	0018      	movs	r0, r3
 80085d4:	46bd      	mov	sp, r7
 80085d6:	b006      	add	sp, #24
 80085d8:	bd80      	pop	{r7, pc}

080085da <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80085da:	b580      	push	{r7, lr}
 80085dc:	b086      	sub	sp, #24
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	109b      	asrs	r3, r3, #2
 80085ee:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	425b      	negs	r3, r3
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	18d0      	adds	r0, r2, r3
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	009a      	lsls	r2, r3, #2
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	0019      	movs	r1, r3
 8008608:	f000 fd44 	bl	8009094 <memmove>
	  return __result - _Num;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	425b      	negs	r3, r3
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	18d3      	adds	r3, r2, r3
	}
 8008616:	0018      	movs	r0, r3
 8008618:	46bd      	mov	sp, r7
 800861a:	b006      	add	sp, #24
 800861c:	bd80      	pop	{r7, pc}

0800861e <_ZNSt12_Base_bitsetILj1EEC1Ey>:
      constexpr _Base_bitset(unsigned long long __val) noexcept
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	603a      	str	r2, [r7, #0]
 8008628:	607b      	str	r3, [r7, #4]
      : _M_w(__val)
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	601a      	str	r2, [r3, #0]
      { }
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	0018      	movs	r0, r3
 8008634:	46bd      	mov	sp, r7
 8008636:	b004      	add	sp, #16
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <_ZN11transmitter6enableEv>:
 */

#include "transmitter.h"

void transmitter::enable()
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(SEND_TIMER);
 8008644:	4b03      	ldr	r3, [pc, #12]	; (8008654 <_ZN11transmitter6enableEv+0x18>)
 8008646:	0018      	movs	r0, r3
 8008648:	f7fc fda6 	bl	8005198 <HAL_TIM_Base_Start_IT>
}
 800864c:	46c0      	nop			; (mov r8, r8)
 800864e:	46bd      	mov	sp, r7
 8008650:	b002      	add	sp, #8
 8008652:	bd80      	pop	{r7, pc}
 8008654:	2000039c 	.word	0x2000039c

08008658 <_ZN11transmitter7disableEv>:

void transmitter::disable()
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(SEND_TIMER);
 8008660:	4b03      	ldr	r3, [pc, #12]	; (8008670 <_ZN11transmitter7disableEv+0x18>)
 8008662:	0018      	movs	r0, r3
 8008664:	f7fc fde4 	bl	8005230 <HAL_TIM_Base_Stop_IT>
}
 8008668:	46c0      	nop			; (mov r8, r8)
 800866a:	46bd      	mov	sp, r7
 800866c:	b002      	add	sp, #8
 800866e:	bd80      	pop	{r7, pc}
 8008670:	2000039c 	.word	0x2000039c

08008674 <_ZN11transmitter10fillBufferEv>:

// Pop the next message from the outbound queue
// and add it to the outbound buffer
void transmitter::fillBuffer()
{
 8008674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008676:	b08b      	sub	sp, #44	; 0x2c
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
	// FIXME: This doesn't account for an empty queue.
	// This means everything will break if the timer
	// is running and there is no new message.
	string m = messages.front();
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3304      	adds	r3, #4
 8008680:	0018      	movs	r0, r3
 8008682:	f7ff f83c 	bl	80076fe <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>
 8008686:	0002      	movs	r2, r0
 8008688:	230c      	movs	r3, #12
 800868a:	18fb      	adds	r3, r7, r3
 800868c:	0011      	movs	r1, r2
 800868e:	0018      	movs	r0, r3
 8008690:	f000 fc4a 	bl	8008f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	messages.pop_front();
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3304      	adds	r3, #4
 8008698:	0018      	movs	r0, r3
 800869a:	f7ff f844 	bl	8007726 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>

	for(uint8_t i = 0; i < m.length(); i++)
 800869e:	2327      	movs	r3, #39	; 0x27
 80086a0:	18fb      	adds	r3, r7, r3
 80086a2:	2200      	movs	r2, #0
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	2627      	movs	r6, #39	; 0x27
 80086a8:	19bb      	adds	r3, r7, r6
 80086aa:	781e      	ldrb	r6, [r3, #0]
 80086ac:	230c      	movs	r3, #12
 80086ae:	18fb      	adds	r3, r7, r3
 80086b0:	0018      	movs	r0, r3
 80086b2:	f000 fba1 	bl	8008df8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80086b6:	0003      	movs	r3, r0
 80086b8:	429e      	cmp	r6, r3
 80086ba:	419b      	sbcs	r3, r3
 80086bc:	425b      	negs	r3, r3
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d022      	beq.n	800870a <_ZN11transmitter10fillBufferEv+0x96>
	{
		bitset<8> c = m[i];
 80086c4:	2627      	movs	r6, #39	; 0x27
 80086c6:	19bb      	adds	r3, r7, r6
 80086c8:	781a      	ldrb	r2, [r3, #0]
 80086ca:	230c      	movs	r3, #12
 80086cc:	18fb      	adds	r3, r7, r3
 80086ce:	0011      	movs	r1, r2
 80086d0:	0018      	movs	r0, r3
 80086d2:	f000 fb93 	bl	8008dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80086d6:	0003      	movs	r3, r0
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	001c      	movs	r4, r3
 80086dc:	2300      	movs	r3, #0
 80086de:	001d      	movs	r5, r3
 80086e0:	2308      	movs	r3, #8
 80086e2:	18f9      	adds	r1, r7, r3
 80086e4:	0022      	movs	r2, r4
 80086e6:	002b      	movs	r3, r5
 80086e8:	0008      	movs	r0, r1
 80086ea:	f000 f97b 	bl	80089e4 <_ZNSt6bitsetILj8EEC1Ey>
		buffer.push_back(c);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	332c      	adds	r3, #44	; 0x2c
 80086f2:	2208      	movs	r2, #8
 80086f4:	18ba      	adds	r2, r7, r2
 80086f6:	0011      	movs	r1, r2
 80086f8:	0018      	movs	r0, r3
 80086fa:	f7fe ff85 	bl	8007608 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
	for(uint8_t i = 0; i < m.length(); i++)
 80086fe:	19bb      	adds	r3, r7, r6
 8008700:	781a      	ldrb	r2, [r3, #0]
 8008702:	19bb      	adds	r3, r7, r6
 8008704:	3201      	adds	r2, #1
 8008706:	701a      	strb	r2, [r3, #0]
 8008708:	e7cd      	b.n	80086a6 <_ZN11transmitter10fillBufferEv+0x32>
	}
	bitPointer = 0;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2254      	movs	r2, #84	; 0x54
 800870e:	2100      	movs	r1, #0
 8008710:	5499      	strb	r1, [r3, r2]
	string m = messages.front();
 8008712:	230c      	movs	r3, #12
 8008714:	18fb      	adds	r3, r7, r3
 8008716:	0018      	movs	r0, r3
 8008718:	f000 fb66 	bl	8008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800871c:	46c0      	nop			; (mov r8, r8)
 800871e:	46bd      	mov	sp, r7
 8008720:	b00b      	add	sp, #44	; 0x2c
 8008722:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008724 <_ZN11transmitter10getNextBitEv>:

// Get the next bit to send
uint8_t transmitter::getNextBit()
{
 8008724:	b5b0      	push	{r4, r5, r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	if(buffer.empty())
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	332c      	adds	r3, #44	; 0x2c
 8008730:	0018      	movs	r0, r3
 8008732:	f7fe fed5 	bl	80074e0 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 8008736:	1e03      	subs	r3, r0, #0
 8008738:	d001      	beq.n	800873e <_ZN11transmitter10getNextBitEv+0x1a>
	{
		return NO_NEW_BITS;
 800873a:	2302      	movs	r3, #2
 800873c:	e03c      	b.n	80087b8 <_ZN11transmitter10getNextBitEv+0x94>
	}

	if(bitPointer > 7)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2254      	movs	r2, #84	; 0x54
 8008742:	5c9b      	ldrb	r3, [r3, r2]
 8008744:	2b07      	cmp	r3, #7
 8008746:	d911      	bls.n	800876c <_ZN11transmitter10getNextBitEv+0x48>
	{
		buffer.pop_front();
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	332c      	adds	r3, #44	; 0x2c
 800874c:	0018      	movs	r0, r3
 800874e:	f7fe feed 	bl	800752c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>
		bitPointer = 0;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2254      	movs	r2, #84	; 0x54
 8008756:	2100      	movs	r1, #0
 8008758:	5499      	strb	r1, [r3, r2]

		if(buffer.empty())
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	332c      	adds	r3, #44	; 0x2c
 800875e:	0018      	movs	r0, r3
 8008760:	f7fe febe 	bl	80074e0 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 8008764:	1e03      	subs	r3, r0, #0
 8008766:	d001      	beq.n	800876c <_ZN11transmitter10getNextBitEv+0x48>
		{
			return NO_NEW_BITS;
 8008768:	2302      	movs	r3, #2
 800876a:	e025      	b.n	80087b8 <_ZN11transmitter10getNextBitEv+0x94>
		}
	}

	uint8_t retVal = buffer.front()[bitPointer];
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	332c      	adds	r3, #44	; 0x2c
 8008770:	0018      	movs	r0, r3
 8008772:	f7fe fec7 	bl	8007504 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>
 8008776:	0001      	movs	r1, r0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2254      	movs	r2, #84	; 0x54
 800877c:	5c9b      	ldrb	r3, [r3, r2]
 800877e:	001a      	movs	r2, r3
 8008780:	240c      	movs	r4, #12
 8008782:	193b      	adds	r3, r7, r4
 8008784:	0018      	movs	r0, r3
 8008786:	f000 f944 	bl	8008a12 <_ZNSt6bitsetILj8EEixEj>
 800878a:	193b      	adds	r3, r7, r4
 800878c:	0018      	movs	r0, r3
 800878e:	f000 f959 	bl	8008a44 <_ZNKSt6bitsetILj8EE9referencecvbEv>
 8008792:	0003      	movs	r3, r0
 8008794:	001a      	movs	r2, r3
 8008796:	2517      	movs	r5, #23
 8008798:	197b      	adds	r3, r7, r5
 800879a:	701a      	strb	r2, [r3, #0]
 800879c:	193b      	adds	r3, r7, r4
 800879e:	0018      	movs	r0, r3
 80087a0:	f000 f947 	bl	8008a32 <_ZNSt6bitsetILj8EE9referenceD1Ev>

	bitPointer++;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2254      	movs	r2, #84	; 0x54
 80087a8:	5c9b      	ldrb	r3, [r3, r2]
 80087aa:	3301      	adds	r3, #1
 80087ac:	b2d9      	uxtb	r1, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2254      	movs	r2, #84	; 0x54
 80087b2:	5499      	strb	r1, [r3, r2]

	return retVal;
 80087b4:	197b      	adds	r3, r7, r5
 80087b6:	781b      	ldrb	r3, [r3, #0]
}
 80087b8:	0018      	movs	r0, r3
 80087ba:	46bd      	mov	sp, r7
 80087bc:	b006      	add	sp, #24
 80087be:	bdb0      	pop	{r4, r5, r7, pc}

080087c0 <_ZN11transmitter3pinEh>:

void transmitter::pin(uint8_t high)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	000a      	movs	r2, r1
 80087ca:	1cfb      	adds	r3, r7, #3
 80087cc:	701a      	strb	r2, [r3, #0]
	if(high)
 80087ce:	1cfb      	adds	r3, r7, #3
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00d      	beq.n	80087f2 <_ZN11transmitter3pinEh+0x32>
	{
		HAL_GPIO_WritePin(RADIO_SEND_GPIO_Port,RADIO_SEND_Pin,GPIO_PIN_SET);
 80087d6:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <_ZN11transmitter3pinEh+0x54>)
 80087d8:	2201      	movs	r2, #1
 80087da:	2108      	movs	r1, #8
 80087dc:	0018      	movs	r0, r3
 80087de:	f7fa fed0 	bl	8003582 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 80087e2:	2390      	movs	r3, #144	; 0x90
 80087e4:	05db      	lsls	r3, r3, #23
 80087e6:	2201      	movs	r2, #1
 80087e8:	2104      	movs	r1, #4
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7fa fec9 	bl	8003582 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(RADIO_SEND_GPIO_Port,RADIO_SEND_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
	}
}
 80087f0:	e00c      	b.n	800880c <_ZN11transmitter3pinEh+0x4c>
		HAL_GPIO_WritePin(RADIO_SEND_GPIO_Port,RADIO_SEND_Pin,GPIO_PIN_RESET);
 80087f2:	4b08      	ldr	r3, [pc, #32]	; (8008814 <_ZN11transmitter3pinEh+0x54>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	2108      	movs	r1, #8
 80087f8:	0018      	movs	r0, r3
 80087fa:	f7fa fec2 	bl	8003582 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 80087fe:	2390      	movs	r3, #144	; 0x90
 8008800:	05db      	lsls	r3, r3, #23
 8008802:	2200      	movs	r2, #0
 8008804:	2104      	movs	r1, #4
 8008806:	0018      	movs	r0, r3
 8008808:	f7fa febb 	bl	8003582 <HAL_GPIO_WritePin>
}
 800880c:	46c0      	nop			; (mov r8, r8)
 800880e:	46bd      	mov	sp, r7
 8008810:	b002      	add	sp, #8
 8008812:	bd80      	pop	{r7, pc}
 8008814:	48000400 	.word	0x48000400

08008818 <_ZN11transmitter4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// The send function adds a message to the queue.
// The interrupt handler will notice and start sending this message bit by bit.
void transmitter::send(string message)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
	messages.push_back(message);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3304      	adds	r3, #4
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	0011      	movs	r1, r2
 800882a:	0018      	movs	r0, r3
 800882c:	f7fe feab 	bl	8007586 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
	enable();
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	0018      	movs	r0, r3
 8008834:	f7ff ff02 	bl	800863c <_ZN11transmitter6enableEv>
}
 8008838:	46c0      	nop			; (mov r8, r8)
 800883a:	46bd      	mov	sp, r7
 800883c:	b002      	add	sp, #8
 800883e:	bd80      	pop	{r7, pc}

08008840 <_ZN11transmitter12sendBlockingENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// Send a message, but wait until sending is complete
void transmitter::sendBlocking(string message)
{
 8008840:	b590      	push	{r4, r7, lr}
 8008842:	b089      	sub	sp, #36	; 0x24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
	send(message);
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	2408      	movs	r4, #8
 800884e:	193b      	adds	r3, r7, r4
 8008850:	0011      	movs	r1, r2
 8008852:	0018      	movs	r0, r3
 8008854:	f000 fb68 	bl	8008f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008858:	193a      	adds	r2, r7, r4
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	0011      	movs	r1, r2
 800885e:	0018      	movs	r0, r3
 8008860:	f7ff ffda 	bl	8008818 <_ZN11transmitter4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008864:	193b      	adds	r3, r7, r4
 8008866:	0018      	movs	r0, r3
 8008868:	f000 fabe 	bl	8008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	// Wait until the message has been sent
	while(!messageSent);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d100      	bne.n	8008876 <_ZN11transmitter12sendBlockingENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8008874:	e7fa      	b.n	800886c <_ZN11transmitter12sendBlockingENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
	messageSent = false;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	701a      	strb	r2, [r3, #0]
}
 800887c:	46c0      	nop			; (mov r8, r8)
 800887e:	46bd      	mov	sp, r7
 8008880:	b009      	add	sp, #36	; 0x24
 8008882:	bd90      	pop	{r4, r7, pc}

08008884 <_ZN11transmitter4tickEv>:
}

// Function to be called by the interrupt handler.
// Standard version with start and stop bits, using a state machine.
void transmitter::tick()
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]

	// State machine variable to keep track of message progress across interrupts
	static uint8_t state = START_HIGH;

	// When done waiting, move on to the next instruction
	if(holdFor <= 1)
 800888c:	4b52      	ldr	r3, [pc, #328]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d900      	bls.n	8008896 <_ZN11transmitter4tickEv+0x12>
 8008894:	e094      	b.n	80089c0 <_ZN11transmitter4tickEv+0x13c>
	{
		switch(state)
 8008896:	4b51      	ldr	r3, [pc, #324]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b06      	cmp	r3, #6
 800889c:	d900      	bls.n	80088a0 <_ZN11transmitter4tickEv+0x1c>
 800889e:	e097      	b.n	80089d0 <_ZN11transmitter4tickEv+0x14c>
 80088a0:	009a      	lsls	r2, r3, #2
 80088a2:	4b4f      	ldr	r3, [pc, #316]	; (80089e0 <_ZN11transmitter4tickEv+0x15c>)
 80088a4:	18d3      	adds	r3, r2, r3
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	469f      	mov	pc, r3
		{
		case START_HIGH:
			pin(1);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2101      	movs	r1, #1
 80088ae:	0018      	movs	r0, r3
 80088b0:	f7ff ff86 	bl	80087c0 <_ZN11transmitter3pinEh>
			holdFor = LENGTH_START;
 80088b4:	4b48      	ldr	r3, [pc, #288]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 80088b6:	2203      	movs	r2, #3
 80088b8:	701a      	strb	r2, [r3, #0]
			state = START_LOW;
 80088ba:	4b48      	ldr	r3, [pc, #288]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 80088bc:	2201      	movs	r2, #1
 80088be:	701a      	strb	r2, [r3, #0]
			break;
 80088c0:	e086      	b.n	80089d0 <_ZN11transmitter4tickEv+0x14c>
		case START_LOW:
			pin(0);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2100      	movs	r1, #0
 80088c6:	0018      	movs	r0, r3
 80088c8:	f7ff ff7a 	bl	80087c0 <_ZN11transmitter3pinEh>
			holdFor = LENGTH_START;
 80088cc:	4b42      	ldr	r3, [pc, #264]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 80088ce:	2203      	movs	r2, #3
 80088d0:	701a      	strb	r2, [r3, #0]
			state = MSG_HIGH;
 80088d2:	4b42      	ldr	r3, [pc, #264]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 80088d4:	2202      	movs	r2, #2
 80088d6:	701a      	strb	r2, [r3, #0]
			// Fill the buffer with the message to be sent
			fillBuffer();
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	0018      	movs	r0, r3
 80088dc:	f7ff feca 	bl	8008674 <_ZN11transmitter10fillBufferEv>
			break;
 80088e0:	e076      	b.n	80089d0 <_ZN11transmitter4tickEv+0x14c>
		case MSG_HIGH:
			switch(getNextBit())
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7ff ff1d 	bl	8008724 <_ZN11transmitter10getNextBitEv>
 80088ea:	0003      	movs	r3, r0
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d01d      	beq.n	800892c <_ZN11transmitter4tickEv+0xa8>
 80088f0:	dc6d      	bgt.n	80089ce <_ZN11transmitter4tickEv+0x14a>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <_ZN11transmitter4tickEv+0x78>
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d00c      	beq.n	8008914 <_ZN11transmitter4tickEv+0x90>
			case NO_NEW_BITS:
				pin(0);
				state = STOP_LOW;
				break;
			}
			break;
 80088fa:	e068      	b.n	80089ce <_ZN11transmitter4tickEv+0x14a>
				pin(1);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2101      	movs	r1, #1
 8008900:	0018      	movs	r0, r3
 8008902:	f7ff ff5d 	bl	80087c0 <_ZN11transmitter3pinEh>
				holdFor = LENGTH_ZERO;
 8008906:	4b34      	ldr	r3, [pc, #208]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 8008908:	2201      	movs	r2, #1
 800890a:	701a      	strb	r2, [r3, #0]
				state = MSG_LOW;
 800890c:	4b33      	ldr	r3, [pc, #204]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 800890e:	2203      	movs	r2, #3
 8008910:	701a      	strb	r2, [r3, #0]
				break;
 8008912:	e014      	b.n	800893e <_ZN11transmitter4tickEv+0xba>
				pin(1);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2101      	movs	r1, #1
 8008918:	0018      	movs	r0, r3
 800891a:	f7ff ff51 	bl	80087c0 <_ZN11transmitter3pinEh>
				holdFor = LENGTH_ONE;
 800891e:	4b2e      	ldr	r3, [pc, #184]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 8008920:	2202      	movs	r2, #2
 8008922:	701a      	strb	r2, [r3, #0]
				state = MSG_LOW;
 8008924:	4b2d      	ldr	r3, [pc, #180]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 8008926:	2203      	movs	r2, #3
 8008928:	701a      	strb	r2, [r3, #0]
				break;
 800892a:	e008      	b.n	800893e <_ZN11transmitter4tickEv+0xba>
				pin(0);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2100      	movs	r1, #0
 8008930:	0018      	movs	r0, r3
 8008932:	f7ff ff45 	bl	80087c0 <_ZN11transmitter3pinEh>
				state = STOP_LOW;
 8008936:	4b29      	ldr	r3, [pc, #164]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 8008938:	2204      	movs	r2, #4
 800893a:	701a      	strb	r2, [r3, #0]
				break;
 800893c:	46c0      	nop			; (mov r8, r8)
			break;
 800893e:	e046      	b.n	80089ce <_ZN11transmitter4tickEv+0x14a>
			case MSG_LOW:
				pin(0);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2100      	movs	r1, #0
 8008944:	0018      	movs	r0, r3
 8008946:	f7ff ff3b 	bl	80087c0 <_ZN11transmitter3pinEh>
				state = MSG_HIGH;
 800894a:	4b24      	ldr	r3, [pc, #144]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 800894c:	2202      	movs	r2, #2
 800894e:	701a      	strb	r2, [r3, #0]
				break;
 8008950:	e03e      	b.n	80089d0 <_ZN11transmitter4tickEv+0x14c>
			case STOP_LOW:
				pin(0);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2100      	movs	r1, #0
 8008956:	0018      	movs	r0, r3
 8008958:	f7ff ff32 	bl	80087c0 <_ZN11transmitter3pinEh>
				holdFor = LENGTH_STOP;
 800895c:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 800895e:	2204      	movs	r2, #4
 8008960:	701a      	strb	r2, [r3, #0]
				state = STOP_HIGH;
 8008962:	4b1e      	ldr	r3, [pc, #120]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 8008964:	2205      	movs	r2, #5
 8008966:	701a      	strb	r2, [r3, #0]
				break;
 8008968:	e032      	b.n	80089d0 <_ZN11transmitter4tickEv+0x14c>
			case STOP_HIGH:
				pin(1);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2101      	movs	r1, #1
 800896e:	0018      	movs	r0, r3
 8008970:	f7ff ff26 	bl	80087c0 <_ZN11transmitter3pinEh>
				holdFor = LENGTH_STOP;
 8008974:	4b18      	ldr	r3, [pc, #96]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 8008976:	2204      	movs	r2, #4
 8008978:	701a      	strb	r2, [r3, #0]
				state = IDLE;
 800897a:	4b18      	ldr	r3, [pc, #96]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 800897c:	2206      	movs	r2, #6
 800897e:	701a      	strb	r2, [r3, #0]
				break;
 8008980:	e026      	b.n	80089d0 <_ZN11transmitter4tickEv+0x14c>
			case IDLE:
				pin(0);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2100      	movs	r1, #0
 8008986:	0018      	movs	r0, r3
 8008988:	f7ff ff1a 	bl	80087c0 <_ZN11transmitter3pinEh>
				// Notify that the message has been sent,
				// for sendBlocking()
				messageSent = true;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	701a      	strb	r2, [r3, #0]
				if(messages.empty())
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3304      	adds	r3, #4
 8008996:	0018      	movs	r0, r3
 8008998:	f7fe fe9f 	bl	80076da <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>
 800899c:	1e03      	subs	r3, r0, #0
 800899e:	d004      	beq.n	80089aa <_ZN11transmitter4tickEv+0x126>
				{
					disable();
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	0018      	movs	r0, r3
 80089a4:	f7ff fe58 	bl	8008658 <_ZN11transmitter7disableEv>
				{
					holdFor = 10;
					bitPointer = 0;
					state = START_HIGH;
				}
				break;
 80089a8:	e012      	b.n	80089d0 <_ZN11transmitter4tickEv+0x14c>
					holdFor = 10;
 80089aa:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 80089ac:	220a      	movs	r2, #10
 80089ae:	701a      	strb	r2, [r3, #0]
					bitPointer = 0;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2254      	movs	r2, #84	; 0x54
 80089b4:	2100      	movs	r1, #0
 80089b6:	5499      	strb	r1, [r3, r2]
					state = START_HIGH;
 80089b8:	4b08      	ldr	r3, [pc, #32]	; (80089dc <_ZN11transmitter4tickEv+0x158>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	701a      	strb	r2, [r3, #0]
				break;
 80089be:	e007      	b.n	80089d0 <_ZN11transmitter4tickEv+0x14c>
		}
	}
	else
	{
		holdFor--;
 80089c0:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <_ZN11transmitter4tickEv+0x154>)
 80089ca:	701a      	strb	r2, [r3, #0]
	}
}
 80089cc:	e000      	b.n	80089d0 <_ZN11transmitter4tickEv+0x14c>
			break;
 80089ce:	46c0      	nop			; (mov r8, r8)
}
 80089d0:	46c0      	nop			; (mov r8, r8)
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b002      	add	sp, #8
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000005 	.word	0x20000005
 80089dc:	200002ac 	.word	0x200002ac
 80089e0:	0800db7c 	.word	0x0800db7c

080089e4 <_ZNSt6bitsetILj8EEC1Ey>:
      constexpr bitset(unsigned long long __val) noexcept
 80089e4:	b590      	push	{r4, r7, lr}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	603a      	str	r2, [r7, #0]
 80089ee:	607b      	str	r3, [r7, #4]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 80089f0:	68fc      	ldr	r4, [r7, #12]
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	0010      	movs	r0, r2
 80089f8:	0019      	movs	r1, r3
 80089fa:	f000 f838 	bl	8008a6e <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>
 80089fe:	0002      	movs	r2, r0
 8008a00:	000b      	movs	r3, r1
 8008a02:	0020      	movs	r0, r4
 8008a04:	f7ff fe0b 	bl	800861e <_ZNSt12_Base_bitsetILj1EEC1Ey>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	b005      	add	sp, #20
 8008a10:	bd90      	pop	{r4, r7, pc}

08008a12 <_ZNSt6bitsetILj8EEixEj>:
      operator[](size_t __position)
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	68b9      	ldr	r1, [r7, #8]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	0018      	movs	r0, r3
 8008a26:	f000 f834 	bl	8008a92 <_ZNSt6bitsetILj8EE9referenceC1ERS0_j>
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	b004      	add	sp, #16
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <_ZNSt6bitsetILj8EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
	{ }
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	b002      	add	sp, #8
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <_ZNKSt6bitsetILj8EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 8008a44:	b590      	push	{r4, r7, lr}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681c      	ldr	r4, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	0018      	movs	r0, r3
 8008a58:	f7fe fb2f 	bl	80070ba <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8008a5c:	0003      	movs	r3, r0
 8008a5e:	4023      	ands	r3, r4
 8008a60:	1e5a      	subs	r2, r3, #1
 8008a62:	4193      	sbcs	r3, r2
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	0018      	movs	r0, r3
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	b003      	add	sp, #12
 8008a6c:	bd90      	pop	{r4, r7, pc}

08008a6e <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6038      	str	r0, [r7, #0]
 8008a76:	6079      	str	r1, [r7, #4]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	20ff      	movs	r0, #255	; 0xff
 8008a7c:	4001      	ands	r1, r0
 8008a7e:	000a      	movs	r2, r1
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	2000      	movs	r0, #0
 8008a84:	4001      	ands	r1, r0
 8008a86:	000b      	movs	r3, r1
 8008a88:	0010      	movs	r0, r2
 8008a8a:	0019      	movs	r1, r3
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	b002      	add	sp, #8
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <_ZNSt6bitsetILj8EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	0011      	movs	r1, r2
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7fe fb18 	bl	80070da <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 8008aaa:	0002      	movs	r2, r0
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f7fe faf6 	bl	80070a4 <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 8008ab8:	0002      	movs	r2, r0
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	605a      	str	r2, [r3, #4]
	}
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b004      	add	sp, #16
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <_ZdlPv>:
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	f000 fab7 	bl	800903c <free>
 8008ace:	bd10      	pop	{r4, pc}

08008ad0 <_Znwj>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	1e04      	subs	r4, r0, #0
 8008ad4:	d100      	bne.n	8008ad8 <_Znwj+0x8>
 8008ad6:	3401      	adds	r4, #1
 8008ad8:	0020      	movs	r0, r4
 8008ada:	f000 faa5 	bl	8009028 <malloc>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d107      	bne.n	8008af2 <_Znwj+0x22>
 8008ae2:	f000 fa69 	bl	8008fb8 <_ZSt15get_new_handlerv>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d101      	bne.n	8008aee <_Znwj+0x1e>
 8008aea:	f000 fa6b 	bl	8008fc4 <abort>
 8008aee:	4780      	blx	r0
 8008af0:	e7f2      	b.n	8008ad8 <_Znwj+0x8>
 8008af2:	bd10      	pop	{r4, pc}

08008af4 <_ZNSaIcEC1Ev>:
 8008af4:	4770      	bx	lr

08008af6 <_ZNSaIcED1Ev>:
 8008af6:	4770      	bx	lr

08008af8 <_ZSt17__throw_bad_allocv>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	f000 fa63 	bl	8008fc4 <abort>

08008afe <_ZSt19__throw_logic_errorPKc>:
 8008afe:	b510      	push	{r4, lr}
 8008b00:	f000 fa60 	bl	8008fc4 <abort>

08008b04 <_ZSt20__throw_length_errorPKc>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	f000 fa5d 	bl	8008fc4 <abort>
	...

08008b0c <_ZSt24__throw_out_of_range_fmtPKcz>:
 8008b0c:	b40f      	push	{r0, r1, r2, r3}
 8008b0e:	2318      	movs	r3, #24
 8008b10:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	18fc      	adds	r4, r7, r3
 8008b16:	cc20      	ldmia	r4!, {r5}
 8008b18:	0028      	movs	r0, r5
 8008b1a:	f7f7 faf5 	bl	8000108 <strlen>
 8008b1e:	2380      	movs	r3, #128	; 0x80
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	18c1      	adds	r1, r0, r3
 8008b24:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <_ZSt24__throw_out_of_range_fmtPKcz+0x38>)
 8008b26:	002a      	movs	r2, r5
 8008b28:	18c0      	adds	r0, r0, r3
 8008b2a:	466b      	mov	r3, sp
 8008b2c:	08c0      	lsrs	r0, r0, #3
 8008b2e:	00c0      	lsls	r0, r0, #3
 8008b30:	1a1b      	subs	r3, r3, r0
 8008b32:	469d      	mov	sp, r3
 8008b34:	0023      	movs	r3, r4
 8008b36:	4668      	mov	r0, sp
 8008b38:	607c      	str	r4, [r7, #4]
 8008b3a:	f000 f85f 	bl	8008bfc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8008b3e:	f000 fa41 	bl	8008fc4 <abort>
 8008b42:	46c0      	nop			; (mov r8, r8)
 8008b44:	00000207 	.word	0x00000207

08008b48 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8008b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4a:	0006      	movs	r6, r0
 8008b4c:	000c      	movs	r4, r1
 8008b4e:	b09d      	sub	sp, #116	; 0x74
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	1ba4      	subs	r4, r4, r6
 8008b54:	2269      	movs	r2, #105	; 0x69
 8008b56:	490f      	ldr	r1, [pc, #60]	; (8008b94 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x4c>)
 8008b58:	1d38      	adds	r0, r7, #4
 8008b5a:	f000 fa92 	bl	8009082 <memcpy>
 8008b5e:	0023      	movs	r3, r4
 8008b60:	466a      	mov	r2, sp
 8008b62:	3370      	adds	r3, #112	; 0x70
 8008b64:	08db      	lsrs	r3, r3, #3
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	469d      	mov	sp, r3
 8008b6c:	466d      	mov	r5, sp
 8008b6e:	2268      	movs	r2, #104	; 0x68
 8008b70:	1d39      	adds	r1, r7, #4
 8008b72:	0028      	movs	r0, r5
 8008b74:	f000 fa85 	bl	8009082 <memcpy>
 8008b78:	0028      	movs	r0, r5
 8008b7a:	0022      	movs	r2, r4
 8008b7c:	0031      	movs	r1, r6
 8008b7e:	3068      	adds	r0, #104	; 0x68
 8008b80:	f000 fa7f 	bl	8009082 <memcpy>
 8008b84:	2300      	movs	r3, #0
 8008b86:	192c      	adds	r4, r5, r4
 8008b88:	3468      	adds	r4, #104	; 0x68
 8008b8a:	0028      	movs	r0, r5
 8008b8c:	7023      	strb	r3, [r4, #0]
 8008b8e:	f7ff ffb6 	bl	8008afe <_ZSt19__throw_logic_errorPKc>
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	0800db98 	.word	0x0800db98

08008b98 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8008b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	466e      	mov	r6, sp
 8008ba2:	0033      	movs	r3, r6
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	0014      	movs	r4, r2
 8008ba8:	001d      	movs	r5, r3
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	0020      	movs	r0, r4
 8008bb2:	210a      	movs	r1, #10
 8008bb4:	f7f7 fb4a 	bl	800024c <__aeabi_uidivmod>
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x60>)
 8008bba:	3d01      	subs	r5, #1
 8008bbc:	5c5b      	ldrb	r3, [r3, r1]
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	702b      	strb	r3, [r5, #0]
 8008bc2:	210a      	movs	r1, #10
 8008bc4:	60bc      	str	r4, [r7, #8]
 8008bc6:	f7f7 fabb 	bl	8000140 <__udivsi3>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	0004      	movs	r4, r0
 8008bce:	2b09      	cmp	r3, #9
 8008bd0:	d8ee      	bhi.n	8008bb0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	1b5d      	subs	r5, r3, r5
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	429d      	cmp	r5, r3
 8008bda:	d809      	bhi.n	8008bf0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x58>
 8008bdc:	1b71      	subs	r1, r6, r5
 8008bde:	002a      	movs	r2, r5
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	310c      	adds	r1, #12
 8008be4:	f000 fa4d 	bl	8009082 <memcpy>
 8008be8:	0028      	movs	r0, r5
 8008bea:	46bd      	mov	sp, r7
 8008bec:	b005      	add	sp, #20
 8008bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf0:	2501      	movs	r5, #1
 8008bf2:	426d      	negs	r5, r5
 8008bf4:	e7f8      	b.n	8008be8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x50>
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	0800dc01 	.word	0x0800dc01

08008bfc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8008bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bfe:	0007      	movs	r7, r0
 8008c00:	0004      	movs	r4, r0
 8008c02:	3901      	subs	r1, #1
 8008c04:	0015      	movs	r5, r2
 8008c06:	1842      	adds	r2, r0, r1
 8008c08:	9201      	str	r2, [sp, #4]
 8008c0a:	782a      	ldrb	r2, [r5, #0]
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d033      	beq.n	8008c78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7c>
 8008c10:	9901      	ldr	r1, [sp, #4]
 8008c12:	428c      	cmp	r4, r1
 8008c14:	d22c      	bcs.n	8008c70 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 8008c16:	2a25      	cmp	r2, #37	; 0x25
 8008c18:	d108      	bne.n	8008c2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x30>
 8008c1a:	786a      	ldrb	r2, [r5, #1]
 8008c1c:	2a73      	cmp	r2, #115	; 0x73
 8008c1e:	d00a      	beq.n	8008c36 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 8008c20:	2a7a      	cmp	r2, #122	; 0x7a
 8008c22:	d015      	beq.n	8008c50 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 8008c24:	3a25      	subs	r2, #37	; 0x25
 8008c26:	4251      	negs	r1, r2
 8008c28:	414a      	adcs	r2, r1
 8008c2a:	18ad      	adds	r5, r5, r2
 8008c2c:	782a      	ldrb	r2, [r5, #0]
 8008c2e:	3501      	adds	r5, #1
 8008c30:	7022      	strb	r2, [r4, #0]
 8008c32:	3401      	adds	r4, #1
 8008c34:	e7e9      	b.n	8008c0a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8008c36:	0022      	movs	r2, r4
 8008c38:	cb02      	ldmia	r3!, {r1}
 8008c3a:	7808      	ldrb	r0, [r1, #0]
 8008c3c:	0014      	movs	r4, r2
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d01f      	beq.n	8008c82 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x86>
 8008c42:	9c01      	ldr	r4, [sp, #4]
 8008c44:	4294      	cmp	r4, r2
 8008c46:	d01a      	beq.n	8008c7e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x82>
 8008c48:	7010      	strb	r0, [r2, #0]
 8008c4a:	3101      	adds	r1, #1
 8008c4c:	3201      	adds	r2, #1
 8008c4e:	e7f4      	b.n	8008c3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3e>
 8008c50:	78aa      	ldrb	r2, [r5, #2]
 8008c52:	2a75      	cmp	r2, #117	; 0x75
 8008c54:	d1ea      	bne.n	8008c2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x30>
 8008c56:	001e      	movs	r6, r3
 8008c58:	9b01      	ldr	r3, [sp, #4]
 8008c5a:	0020      	movs	r0, r4
 8008c5c:	ce04      	ldmia	r6!, {r2}
 8008c5e:	1b19      	subs	r1, r3, r4
 8008c60:	f7ff ff9a 	bl	8008b98 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	dd03      	ble.n	8008c70 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 8008c68:	0033      	movs	r3, r6
 8008c6a:	1824      	adds	r4, r4, r0
 8008c6c:	3503      	adds	r5, #3
 8008c6e:	e7cc      	b.n	8008c0a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8008c70:	0021      	movs	r1, r4
 8008c72:	0038      	movs	r0, r7
 8008c74:	f7ff ff68 	bl	8008b48 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8008c78:	1be0      	subs	r0, r4, r7
 8008c7a:	7022      	strb	r2, [r4, #0]
 8008c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c7e:	9901      	ldr	r1, [sp, #4]
 8008c80:	e7f7      	b.n	8008c72 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8008c82:	3502      	adds	r5, #2
 8008c84:	e7c1      	b.n	8008c0a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>

08008c86 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8008c86:	b510      	push	{r4, lr}
 8008c88:	2a00      	cmp	r2, #0
 8008c8a:	d001      	beq.n	8008c90 <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
 8008c8c:	f000 f9f9 	bl	8009082 <memcpy>
 8008c90:	bd10      	pop	{r4, pc}
	...

08008c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008c94:	2080      	movs	r0, #128	; 0x80
 8008c96:	680b      	ldr	r3, [r1, #0]
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	05c0      	lsls	r0, r0, #23
 8008c9c:	4283      	cmp	r3, r0
 8008c9e:	d302      	bcc.n	8008ca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x12>
 8008ca0:	480a      	ldr	r0, [pc, #40]	; (8008ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 8008ca2:	f7ff ff2f 	bl	8008b04 <_ZSt20__throw_length_errorPKc>
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d905      	bls.n	8008cb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8008caa:	0052      	lsls	r2, r2, #1
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d202      	bcs.n	8008cb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8008cb0:	4282      	cmp	r2, r0
 8008cb2:	d205      	bcs.n	8008cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008cb4:	600a      	str	r2, [r1, #0]
 8008cb6:	6808      	ldr	r0, [r1, #0]
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d504      	bpl.n	8008cc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x32>
 8008cbc:	f7ff ff1c 	bl	8008af8 <_ZSt17__throw_bad_allocv>
 8008cc0:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3c>)
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	e7f7      	b.n	8008cb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8008cc6:	f7ff ff03 	bl	8008ad0 <_Znwj>
 8008cca:	bd10      	pop	{r4, pc}
 8008ccc:	0800dc0c 	.word	0x0800dc0c
 8008cd0:	3fffffff 	.word	0x3fffffff

08008cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008cd4:	0003      	movs	r3, r0
 8008cd6:	6800      	ldr	r0, [r0, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	4298      	cmp	r0, r3
 8008cde:	d001      	beq.n	8008ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 8008ce0:	f7ff fef2 	bl	8008ac8 <_ZdlPv>
 8008ce4:	bd10      	pop	{r4, pc}
	...

08008ce8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	4c05      	ldr	r4, [pc, #20]	; (8008d00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x18>)
 8008cec:	6840      	ldr	r0, [r0, #4]
 8008cee:	1909      	adds	r1, r1, r4
 8008cf0:	1a09      	subs	r1, r1, r0
 8008cf2:	4291      	cmp	r1, r2
 8008cf4:	d202      	bcs.n	8008cfc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x14>
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f7ff ff04 	bl	8008b04 <_ZSt20__throw_length_errorPKc>
 8008cfc:	bd10      	pop	{r4, pc}
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	3fffffff 	.word	0x3fffffff

08008d04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008d04:	b510      	push	{r4, lr}
 8008d06:	2a01      	cmp	r2, #1
 8008d08:	d102      	bne.n	8008d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8008d0a:	780b      	ldrb	r3, [r1, #0]
 8008d0c:	7003      	strb	r3, [r0, #0]
 8008d0e:	bd10      	pop	{r4, pc}
 8008d10:	f7ff ffb9 	bl	8008c86 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8008d14:	e7fb      	b.n	8008d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08008d16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8008d16:	b510      	push	{r4, lr}
 8008d18:	2a01      	cmp	r2, #1
 8008d1a:	d102      	bne.n	8008d22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xc>
 8008d1c:	780b      	ldrb	r3, [r1, #0]
 8008d1e:	7003      	strb	r3, [r0, #0]
 8008d20:	bd10      	pop	{r4, pc}
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	d0fc      	beq.n	8008d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8008d26:	f000 f9b5 	bl	8009094 <memmove>
 8008d2a:	e7f9      	b.n	8008d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>

08008d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8008d2c:	000b      	movs	r3, r1
 8008d2e:	b510      	push	{r4, lr}
 8008d30:	0011      	movs	r1, r2
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8008d36:	7002      	strb	r2, [r0, #0]
 8008d38:	bd10      	pop	{r4, pc}
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0fc      	beq.n	8008d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xc>
 8008d3e:	001a      	movs	r2, r3
 8008d40:	f000 f9bb 	bl	80090ba <memset>
 8008d44:	e7f8      	b.n	8008d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xc>

08008d46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8008d46:	b510      	push	{r4, lr}
 8008d48:	1a52      	subs	r2, r2, r1
 8008d4a:	f7ff ffdb 	bl	8008d04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008d4e:	bd10      	pop	{r4, pc}

08008d50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8008d50:	b510      	push	{r4, lr}
 8008d52:	1a52      	subs	r2, r2, r1
 8008d54:	f7ff ffd6 	bl	8008d04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008d58:	bd10      	pop	{r4, pc}

08008d5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8008d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5c:	001f      	movs	r7, r3
 8008d5e:	6843      	ldr	r3, [r0, #4]
 8008d60:	b085      	sub	sp, #20
 8008d62:	000d      	movs	r5, r1
 8008d64:	1889      	adds	r1, r1, r2
 8008d66:	9101      	str	r1, [sp, #4]
 8008d68:	1a59      	subs	r1, r3, r1
 8008d6a:	9100      	str	r1, [sp, #0]
 8008d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d6e:	0004      	movs	r4, r0
 8008d70:	1a8a      	subs	r2, r1, r2
 8008d72:	18d2      	adds	r2, r2, r3
 8008d74:	0003      	movs	r3, r0
 8008d76:	6801      	ldr	r1, [r0, #0]
 8008d78:	3308      	adds	r3, #8
 8008d7a:	9203      	str	r2, [sp, #12]
 8008d7c:	220f      	movs	r2, #15
 8008d7e:	4299      	cmp	r1, r3
 8008d80:	d000      	beq.n	8008d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x2a>
 8008d82:	6882      	ldr	r2, [r0, #8]
 8008d84:	0020      	movs	r0, r4
 8008d86:	a903      	add	r1, sp, #12
 8008d88:	f7ff ff84 	bl	8008c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008d8c:	0006      	movs	r6, r0
 8008d8e:	2d00      	cmp	r5, #0
 8008d90:	d003      	beq.n	8008d9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x40>
 8008d92:	002a      	movs	r2, r5
 8008d94:	6821      	ldr	r1, [r4, #0]
 8008d96:	f7ff ffb5 	bl	8008d04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008d9a:	2f00      	cmp	r7, #0
 8008d9c:	d007      	beq.n	8008dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 8008d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 8008da4:	001a      	movs	r2, r3
 8008da6:	0039      	movs	r1, r7
 8008da8:	1970      	adds	r0, r6, r5
 8008daa:	f7ff ffab 	bl	8008d04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008dae:	9b00      	ldr	r3, [sp, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00a      	beq.n	8008dca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x70>
 8008db4:	6822      	ldr	r2, [r4, #0]
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	4694      	mov	ip, r2
 8008dba:	4463      	add	r3, ip
 8008dbc:	0019      	movs	r1, r3
 8008dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc0:	9a00      	ldr	r2, [sp, #0]
 8008dc2:	18ed      	adds	r5, r5, r3
 8008dc4:	1970      	adds	r0, r6, r5
 8008dc6:	f7ff ff9d 	bl	8008d04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008dca:	0020      	movs	r0, r4
 8008dcc:	f7ff ff82 	bl	8008cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	6026      	str	r6, [r4, #0]
 8008dd4:	60a3      	str	r3, [r4, #8]
 8008dd6:	b005      	add	sp, #20
 8008dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8008dda:	0003      	movs	r3, r0
 8008ddc:	3308      	adds	r3, #8
 8008dde:	6003      	str	r3, [r0, #0]
 8008de0:	2300      	movs	r3, #0
 8008de2:	6043      	str	r3, [r0, #4]
 8008de4:	7203      	strb	r3, [r0, #8]
 8008de6:	4770      	bx	lr

08008de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8008de8:	b510      	push	{r4, lr}
 8008dea:	0004      	movs	r4, r0
 8008dec:	f7ff ff72 	bl	8008cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008df0:	0020      	movs	r0, r4
 8008df2:	bd10      	pop	{r4, pc}

08008df4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8008df4:	6840      	ldr	r0, [r0, #4]
 8008df6:	4770      	bx	lr

08008df8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8008df8:	6840      	ldr	r0, [r0, #4]
 8008dfa:	4770      	bx	lr

08008dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8008dfc:	6800      	ldr	r0, [r0, #0]
 8008dfe:	1840      	adds	r0, r0, r1
 8008e00:	4770      	bx	lr

08008e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8008e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e04:	0002      	movs	r2, r0
 8008e06:	000f      	movs	r7, r1
 8008e08:	6846      	ldr	r6, [r0, #4]
 8008e0a:	6801      	ldr	r1, [r0, #0]
 8008e0c:	3208      	adds	r2, #8
 8008e0e:	0004      	movs	r4, r0
 8008e10:	230f      	movs	r3, #15
 8008e12:	1c75      	adds	r5, r6, #1
 8008e14:	4291      	cmp	r1, r2
 8008e16:	d000      	beq.n	8008e1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x18>
 8008e18:	6883      	ldr	r3, [r0, #8]
 8008e1a:	429d      	cmp	r5, r3
 8008e1c:	d907      	bls.n	8008e2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	2300      	movs	r3, #0
 8008e24:	0031      	movs	r1, r6
 8008e26:	001a      	movs	r2, r3
 8008e28:	0020      	movs	r0, r4
 8008e2a:	f7ff ff96 	bl	8008d5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8008e2e:	2200      	movs	r2, #0
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	559f      	strb	r7, [r3, r6]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	6065      	str	r5, [r4, #4]
 8008e38:	555a      	strb	r2, [r3, r5]
 8008e3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08008e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	0004      	movs	r4, r0
 8008e40:	f7ff ffdf 	bl	8008e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8008e44:	0020      	movs	r0, r4
 8008e46:	bd10      	pop	{r4, pc}

08008e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8008e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e4a:	0015      	movs	r5, r2
 8008e4c:	001e      	movs	r6, r3
 8008e4e:	0004      	movs	r4, r0
 8008e50:	b085      	sub	sp, #20
 8008e52:	ab0a      	add	r3, sp, #40	; 0x28
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	0032      	movs	r2, r6
 8008e58:	9303      	str	r3, [sp, #12]
 8008e5a:	000f      	movs	r7, r1
 8008e5c:	4b1a      	ldr	r3, [pc, #104]	; (8008ec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x80>)
 8008e5e:	0029      	movs	r1, r5
 8008e60:	f7ff ff42 	bl	8008ce8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8008e64:	0021      	movs	r1, r4
 8008e66:	6863      	ldr	r3, [r4, #4]
 8008e68:	1b72      	subs	r2, r6, r5
 8008e6a:	6820      	ldr	r0, [r4, #0]
 8008e6c:	18d2      	adds	r2, r2, r3
 8008e6e:	3108      	adds	r1, #8
 8008e70:	9202      	str	r2, [sp, #8]
 8008e72:	220f      	movs	r2, #15
 8008e74:	4288      	cmp	r0, r1
 8008e76:	d000      	beq.n	8008e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x32>
 8008e78:	68a2      	ldr	r2, [r4, #8]
 8008e7a:	9902      	ldr	r1, [sp, #8]
 8008e7c:	428a      	cmp	r2, r1
 8008e7e:	d31b      	bcc.n	8008eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x70>
 8008e80:	19e9      	adds	r1, r5, r7
 8008e82:	1a5a      	subs	r2, r3, r1
 8008e84:	428b      	cmp	r3, r1
 8008e86:	d006      	beq.n	8008e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x4e>
 8008e88:	42b5      	cmp	r5, r6
 8008e8a:	d004      	beq.n	8008e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x4e>
 8008e8c:	19c0      	adds	r0, r0, r7
 8008e8e:	1941      	adds	r1, r0, r5
 8008e90:	1980      	adds	r0, r0, r6
 8008e92:	f7ff ff40 	bl	8008d16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008e96:	2e00      	cmp	r6, #0
 8008e98:	d005      	beq.n	8008ea6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x5e>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	0031      	movs	r1, r6
 8008e9e:	9a03      	ldr	r2, [sp, #12]
 8008ea0:	19d8      	adds	r0, r3, r7
 8008ea2:	f7ff ff43 	bl	8008d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	0020      	movs	r0, r4
 8008eaa:	6063      	str	r3, [r4, #4]
 8008eac:	2300      	movs	r3, #0
 8008eae:	6822      	ldr	r2, [r4, #0]
 8008eb0:	9902      	ldr	r1, [sp, #8]
 8008eb2:	5453      	strb	r3, [r2, r1]
 8008eb4:	b005      	add	sp, #20
 8008eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb8:	2300      	movs	r3, #0
 8008eba:	002a      	movs	r2, r5
 8008ebc:	0039      	movs	r1, r7
 8008ebe:	0020      	movs	r0, r4
 8008ec0:	9600      	str	r6, [sp, #0]
 8008ec2:	f7ff ff4a 	bl	8008d5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8008ec6:	e7e6      	b.n	8008e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x4e>
 8008ec8:	0800dc24 	.word	0x0800dc24

08008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>:
 8008ecc:	b507      	push	{r0, r1, r2, lr}
 8008ece:	9200      	str	r2, [sp, #0]
 8008ed0:	000b      	movs	r3, r1
 8008ed2:	6842      	ldr	r2, [r0, #4]
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	f7ff ffb7 	bl	8008e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8008eda:	bd0e      	pop	{r1, r2, r3, pc}

08008edc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8008edc:	6800      	ldr	r0, [r0, #0]
 8008ede:	4770      	bx	lr

08008ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8008ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ee2:	0004      	movs	r4, r0
 8008ee4:	000d      	movs	r5, r1
 8008ee6:	0016      	movs	r6, r2
 8008ee8:	2900      	cmp	r1, #0
 8008eea:	d104      	bne.n	8008ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x16>
 8008eec:	2a00      	cmp	r2, #0
 8008eee:	d002      	beq.n	8008ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x16>
 8008ef0:	480c      	ldr	r0, [pc, #48]	; (8008f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8008ef2:	f7ff fe04 	bl	8008afe <_ZSt19__throw_logic_errorPKc>
 8008ef6:	1b73      	subs	r3, r6, r5
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	2b0f      	cmp	r3, #15
 8008efc:	d907      	bls.n	8008f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2e>
 8008efe:	2200      	movs	r2, #0
 8008f00:	0020      	movs	r0, r4
 8008f02:	a901      	add	r1, sp, #4
 8008f04:	f7ff fec6 	bl	8008c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	6020      	str	r0, [r4, #0]
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	0032      	movs	r2, r6
 8008f10:	0029      	movs	r1, r5
 8008f12:	6820      	ldr	r0, [r4, #0]
 8008f14:	f7ff ff17 	bl	8008d46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8008f18:	2100      	movs	r1, #0
 8008f1a:	9b01      	ldr	r3, [sp, #4]
 8008f1c:	6822      	ldr	r2, [r4, #0]
 8008f1e:	6063      	str	r3, [r4, #4]
 8008f20:	54d1      	strb	r1, [r2, r3]
 8008f22:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8008f24:	0800dc41 	.word	0x0800dc41

08008f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8008f28:	0002      	movs	r2, r0
 8008f2a:	000b      	movs	r3, r1
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	0004      	movs	r4, r0
 8008f30:	3208      	adds	r2, #8
 8008f32:	6002      	str	r2, [r0, #0]
 8008f34:	cb06      	ldmia	r3!, {r1, r2}
 8008f36:	2300      	movs	r3, #0
 8008f38:	188a      	adds	r2, r1, r2
 8008f3a:	f7ff ffd1 	bl	8008ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8008f3e:	0020      	movs	r0, r4
 8008f40:	bd10      	pop	{r4, pc}
	...

08008f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8008f44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f46:	0004      	movs	r4, r0
 8008f48:	000d      	movs	r5, r1
 8008f4a:	0016      	movs	r6, r2
 8008f4c:	2900      	cmp	r1, #0
 8008f4e:	d104      	bne.n	8008f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8008f50:	2a00      	cmp	r2, #0
 8008f52:	d002      	beq.n	8008f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8008f54:	480c      	ldr	r0, [pc, #48]	; (8008f88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8008f56:	f7ff fdd2 	bl	8008afe <_ZSt19__throw_logic_errorPKc>
 8008f5a:	1b73      	subs	r3, r6, r5
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	2b0f      	cmp	r3, #15
 8008f60:	d907      	bls.n	8008f72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2e>
 8008f62:	2200      	movs	r2, #0
 8008f64:	0020      	movs	r0, r4
 8008f66:	a901      	add	r1, sp, #4
 8008f68:	f7ff fe94 	bl	8008c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008f6c:	9b01      	ldr	r3, [sp, #4]
 8008f6e:	6020      	str	r0, [r4, #0]
 8008f70:	60a3      	str	r3, [r4, #8]
 8008f72:	0032      	movs	r2, r6
 8008f74:	0029      	movs	r1, r5
 8008f76:	6820      	ldr	r0, [r4, #0]
 8008f78:	f7ff feea 	bl	8008d50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	6063      	str	r3, [r4, #4]
 8008f84:	54d1      	strb	r1, [r2, r3]
 8008f86:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8008f88:	0800dc41 	.word	0x0800dc41

08008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8008f8c:	0003      	movs	r3, r0
 8008f8e:	3308      	adds	r3, #8
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	0004      	movs	r4, r0
 8008f94:	1e0d      	subs	r5, r1, #0
 8008f96:	6003      	str	r3, [r0, #0]
 8008f98:	d00a      	beq.n	8008fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x24>
 8008f9a:	0008      	movs	r0, r1
 8008f9c:	f7f7 f8b4 	bl	8000108 <strlen>
 8008fa0:	182a      	adds	r2, r5, r0
 8008fa2:	0029      	movs	r1, r5
 8008fa4:	0020      	movs	r0, r4
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f7ff ffcc 	bl	8008f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8008fac:	0020      	movs	r0, r4
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	4252      	negs	r2, r2
 8008fb4:	e7f5      	b.n	8008fa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

08008fb8 <_ZSt15get_new_handlerv>:
 8008fb8:	4b01      	ldr	r3, [pc, #4]	; (8008fc0 <_ZSt15get_new_handlerv+0x8>)
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	4770      	bx	lr
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	200002b0 	.word	0x200002b0

08008fc4 <abort>:
 8008fc4:	2006      	movs	r0, #6
 8008fc6:	b510      	push	{r4, lr}
 8008fc8:	f000 ffea 	bl	8009fa0 <raise>
 8008fcc:	2001      	movs	r0, #1
 8008fce:	f7f9 fe2f 	bl	8002c30 <_exit>
	...

08008fd4 <__errno>:
 8008fd4:	4b01      	ldr	r3, [pc, #4]	; (8008fdc <__errno+0x8>)
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	4770      	bx	lr
 8008fda:	46c0      	nop			; (mov r8, r8)
 8008fdc:	20000008 	.word	0x20000008

08008fe0 <__libc_init_array>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	4d0c      	ldr	r5, [pc, #48]	; (8009018 <__libc_init_array+0x38>)
 8008fe6:	4c0d      	ldr	r4, [pc, #52]	; (800901c <__libc_init_array+0x3c>)
 8008fe8:	1b64      	subs	r4, r4, r5
 8008fea:	10a4      	asrs	r4, r4, #2
 8008fec:	42a6      	cmp	r6, r4
 8008fee:	d109      	bne.n	8009004 <__libc_init_array+0x24>
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	f004 fd11 	bl	800da18 <_init>
 8008ff6:	4d0a      	ldr	r5, [pc, #40]	; (8009020 <__libc_init_array+0x40>)
 8008ff8:	4c0a      	ldr	r4, [pc, #40]	; (8009024 <__libc_init_array+0x44>)
 8008ffa:	1b64      	subs	r4, r4, r5
 8008ffc:	10a4      	asrs	r4, r4, #2
 8008ffe:	42a6      	cmp	r6, r4
 8009000:	d105      	bne.n	800900e <__libc_init_array+0x2e>
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	00b3      	lsls	r3, r6, #2
 8009006:	58eb      	ldr	r3, [r5, r3]
 8009008:	4798      	blx	r3
 800900a:	3601      	adds	r6, #1
 800900c:	e7ee      	b.n	8008fec <__libc_init_array+0xc>
 800900e:	00b3      	lsls	r3, r6, #2
 8009010:	58eb      	ldr	r3, [r5, r3]
 8009012:	4798      	blx	r3
 8009014:	3601      	adds	r6, #1
 8009016:	e7f2      	b.n	8008ffe <__libc_init_array+0x1e>
 8009018:	0800e124 	.word	0x0800e124
 800901c:	0800e124 	.word	0x0800e124
 8009020:	0800e124 	.word	0x0800e124
 8009024:	0800e12c 	.word	0x0800e12c

08009028 <malloc>:
 8009028:	b510      	push	{r4, lr}
 800902a:	4b03      	ldr	r3, [pc, #12]	; (8009038 <malloc+0x10>)
 800902c:	0001      	movs	r1, r0
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	f000 f896 	bl	8009160 <_malloc_r>
 8009034:	bd10      	pop	{r4, pc}
 8009036:	46c0      	nop			; (mov r8, r8)
 8009038:	20000008 	.word	0x20000008

0800903c <free>:
 800903c:	b510      	push	{r4, lr}
 800903e:	4b03      	ldr	r3, [pc, #12]	; (800904c <free+0x10>)
 8009040:	0001      	movs	r1, r0
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	f000 f842 	bl	80090cc <_free_r>
 8009048:	bd10      	pop	{r4, pc}
 800904a:	46c0      	nop			; (mov r8, r8)
 800904c:	20000008 	.word	0x20000008

08009050 <memchr>:
 8009050:	b2c9      	uxtb	r1, r1
 8009052:	1882      	adds	r2, r0, r2
 8009054:	4290      	cmp	r0, r2
 8009056:	d101      	bne.n	800905c <memchr+0xc>
 8009058:	2000      	movs	r0, #0
 800905a:	4770      	bx	lr
 800905c:	7803      	ldrb	r3, [r0, #0]
 800905e:	428b      	cmp	r3, r1
 8009060:	d0fb      	beq.n	800905a <memchr+0xa>
 8009062:	3001      	adds	r0, #1
 8009064:	e7f6      	b.n	8009054 <memchr+0x4>

08009066 <memcmp>:
 8009066:	b530      	push	{r4, r5, lr}
 8009068:	2400      	movs	r4, #0
 800906a:	3901      	subs	r1, #1
 800906c:	42a2      	cmp	r2, r4
 800906e:	d101      	bne.n	8009074 <memcmp+0xe>
 8009070:	2000      	movs	r0, #0
 8009072:	e005      	b.n	8009080 <memcmp+0x1a>
 8009074:	5d03      	ldrb	r3, [r0, r4]
 8009076:	3401      	adds	r4, #1
 8009078:	5d0d      	ldrb	r5, [r1, r4]
 800907a:	42ab      	cmp	r3, r5
 800907c:	d0f6      	beq.n	800906c <memcmp+0x6>
 800907e:	1b58      	subs	r0, r3, r5
 8009080:	bd30      	pop	{r4, r5, pc}

08009082 <memcpy>:
 8009082:	2300      	movs	r3, #0
 8009084:	b510      	push	{r4, lr}
 8009086:	429a      	cmp	r2, r3
 8009088:	d100      	bne.n	800908c <memcpy+0xa>
 800908a:	bd10      	pop	{r4, pc}
 800908c:	5ccc      	ldrb	r4, [r1, r3]
 800908e:	54c4      	strb	r4, [r0, r3]
 8009090:	3301      	adds	r3, #1
 8009092:	e7f8      	b.n	8009086 <memcpy+0x4>

08009094 <memmove>:
 8009094:	b510      	push	{r4, lr}
 8009096:	4288      	cmp	r0, r1
 8009098:	d902      	bls.n	80090a0 <memmove+0xc>
 800909a:	188b      	adds	r3, r1, r2
 800909c:	4298      	cmp	r0, r3
 800909e:	d303      	bcc.n	80090a8 <memmove+0x14>
 80090a0:	2300      	movs	r3, #0
 80090a2:	e007      	b.n	80090b4 <memmove+0x20>
 80090a4:	5c8b      	ldrb	r3, [r1, r2]
 80090a6:	5483      	strb	r3, [r0, r2]
 80090a8:	3a01      	subs	r2, #1
 80090aa:	d2fb      	bcs.n	80090a4 <memmove+0x10>
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	5ccc      	ldrb	r4, [r1, r3]
 80090b0:	54c4      	strb	r4, [r0, r3]
 80090b2:	3301      	adds	r3, #1
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d1fa      	bne.n	80090ae <memmove+0x1a>
 80090b8:	e7f8      	b.n	80090ac <memmove+0x18>

080090ba <memset>:
 80090ba:	0003      	movs	r3, r0
 80090bc:	1882      	adds	r2, r0, r2
 80090be:	4293      	cmp	r3, r2
 80090c0:	d100      	bne.n	80090c4 <memset+0xa>
 80090c2:	4770      	bx	lr
 80090c4:	7019      	strb	r1, [r3, #0]
 80090c6:	3301      	adds	r3, #1
 80090c8:	e7f9      	b.n	80090be <memset+0x4>
	...

080090cc <_free_r>:
 80090cc:	b570      	push	{r4, r5, r6, lr}
 80090ce:	0005      	movs	r5, r0
 80090d0:	2900      	cmp	r1, #0
 80090d2:	d010      	beq.n	80090f6 <_free_r+0x2a>
 80090d4:	1f0c      	subs	r4, r1, #4
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da00      	bge.n	80090de <_free_r+0x12>
 80090dc:	18e4      	adds	r4, r4, r3
 80090de:	0028      	movs	r0, r5
 80090e0:	f003 f8a6 	bl	800c230 <__malloc_lock>
 80090e4:	4a1d      	ldr	r2, [pc, #116]	; (800915c <_free_r+0x90>)
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d105      	bne.n	80090f8 <_free_r+0x2c>
 80090ec:	6063      	str	r3, [r4, #4]
 80090ee:	6014      	str	r4, [r2, #0]
 80090f0:	0028      	movs	r0, r5
 80090f2:	f003 f8a5 	bl	800c240 <__malloc_unlock>
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	d908      	bls.n	800910e <_free_r+0x42>
 80090fc:	6821      	ldr	r1, [r4, #0]
 80090fe:	1860      	adds	r0, r4, r1
 8009100:	4283      	cmp	r3, r0
 8009102:	d1f3      	bne.n	80090ec <_free_r+0x20>
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	1841      	adds	r1, r0, r1
 800910a:	6021      	str	r1, [r4, #0]
 800910c:	e7ee      	b.n	80090ec <_free_r+0x20>
 800910e:	001a      	movs	r2, r3
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <_free_r+0x4e>
 8009116:	42a3      	cmp	r3, r4
 8009118:	d9f9      	bls.n	800910e <_free_r+0x42>
 800911a:	6811      	ldr	r1, [r2, #0]
 800911c:	1850      	adds	r0, r2, r1
 800911e:	42a0      	cmp	r0, r4
 8009120:	d10b      	bne.n	800913a <_free_r+0x6e>
 8009122:	6820      	ldr	r0, [r4, #0]
 8009124:	1809      	adds	r1, r1, r0
 8009126:	1850      	adds	r0, r2, r1
 8009128:	6011      	str	r1, [r2, #0]
 800912a:	4283      	cmp	r3, r0
 800912c:	d1e0      	bne.n	80090f0 <_free_r+0x24>
 800912e:	6818      	ldr	r0, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	1841      	adds	r1, r0, r1
 8009134:	6011      	str	r1, [r2, #0]
 8009136:	6053      	str	r3, [r2, #4]
 8009138:	e7da      	b.n	80090f0 <_free_r+0x24>
 800913a:	42a0      	cmp	r0, r4
 800913c:	d902      	bls.n	8009144 <_free_r+0x78>
 800913e:	230c      	movs	r3, #12
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	e7d5      	b.n	80090f0 <_free_r+0x24>
 8009144:	6821      	ldr	r1, [r4, #0]
 8009146:	1860      	adds	r0, r4, r1
 8009148:	4283      	cmp	r3, r0
 800914a:	d103      	bne.n	8009154 <_free_r+0x88>
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	1841      	adds	r1, r0, r1
 8009152:	6021      	str	r1, [r4, #0]
 8009154:	6063      	str	r3, [r4, #4]
 8009156:	6054      	str	r4, [r2, #4]
 8009158:	e7ca      	b.n	80090f0 <_free_r+0x24>
 800915a:	46c0      	nop			; (mov r8, r8)
 800915c:	200002b4 	.word	0x200002b4

08009160 <_malloc_r>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	2303      	movs	r3, #3
 8009164:	1ccd      	adds	r5, r1, #3
 8009166:	439d      	bics	r5, r3
 8009168:	3508      	adds	r5, #8
 800916a:	0006      	movs	r6, r0
 800916c:	2d0c      	cmp	r5, #12
 800916e:	d21f      	bcs.n	80091b0 <_malloc_r+0x50>
 8009170:	250c      	movs	r5, #12
 8009172:	42a9      	cmp	r1, r5
 8009174:	d81e      	bhi.n	80091b4 <_malloc_r+0x54>
 8009176:	0030      	movs	r0, r6
 8009178:	f003 f85a 	bl	800c230 <__malloc_lock>
 800917c:	4925      	ldr	r1, [pc, #148]	; (8009214 <_malloc_r+0xb4>)
 800917e:	680a      	ldr	r2, [r1, #0]
 8009180:	0014      	movs	r4, r2
 8009182:	2c00      	cmp	r4, #0
 8009184:	d11a      	bne.n	80091bc <_malloc_r+0x5c>
 8009186:	4f24      	ldr	r7, [pc, #144]	; (8009218 <_malloc_r+0xb8>)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d104      	bne.n	8009198 <_malloc_r+0x38>
 800918e:	0021      	movs	r1, r4
 8009190:	0030      	movs	r0, r6
 8009192:	f000 fec5 	bl	8009f20 <_sbrk_r>
 8009196:	6038      	str	r0, [r7, #0]
 8009198:	0029      	movs	r1, r5
 800919a:	0030      	movs	r0, r6
 800919c:	f000 fec0 	bl	8009f20 <_sbrk_r>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d12b      	bne.n	80091fc <_malloc_r+0x9c>
 80091a4:	230c      	movs	r3, #12
 80091a6:	0030      	movs	r0, r6
 80091a8:	6033      	str	r3, [r6, #0]
 80091aa:	f003 f849 	bl	800c240 <__malloc_unlock>
 80091ae:	e003      	b.n	80091b8 <_malloc_r+0x58>
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	dade      	bge.n	8009172 <_malloc_r+0x12>
 80091b4:	230c      	movs	r3, #12
 80091b6:	6033      	str	r3, [r6, #0]
 80091b8:	2000      	movs	r0, #0
 80091ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	1b5b      	subs	r3, r3, r5
 80091c0:	d419      	bmi.n	80091f6 <_malloc_r+0x96>
 80091c2:	2b0b      	cmp	r3, #11
 80091c4:	d903      	bls.n	80091ce <_malloc_r+0x6e>
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	18e4      	adds	r4, r4, r3
 80091ca:	6025      	str	r5, [r4, #0]
 80091cc:	e003      	b.n	80091d6 <_malloc_r+0x76>
 80091ce:	6863      	ldr	r3, [r4, #4]
 80091d0:	42a2      	cmp	r2, r4
 80091d2:	d10e      	bne.n	80091f2 <_malloc_r+0x92>
 80091d4:	600b      	str	r3, [r1, #0]
 80091d6:	0030      	movs	r0, r6
 80091d8:	f003 f832 	bl	800c240 <__malloc_unlock>
 80091dc:	0020      	movs	r0, r4
 80091de:	2207      	movs	r2, #7
 80091e0:	300b      	adds	r0, #11
 80091e2:	1d23      	adds	r3, r4, #4
 80091e4:	4390      	bics	r0, r2
 80091e6:	1ac2      	subs	r2, r0, r3
 80091e8:	4298      	cmp	r0, r3
 80091ea:	d0e6      	beq.n	80091ba <_malloc_r+0x5a>
 80091ec:	1a1b      	subs	r3, r3, r0
 80091ee:	50a3      	str	r3, [r4, r2]
 80091f0:	e7e3      	b.n	80091ba <_malloc_r+0x5a>
 80091f2:	6053      	str	r3, [r2, #4]
 80091f4:	e7ef      	b.n	80091d6 <_malloc_r+0x76>
 80091f6:	0022      	movs	r2, r4
 80091f8:	6864      	ldr	r4, [r4, #4]
 80091fa:	e7c2      	b.n	8009182 <_malloc_r+0x22>
 80091fc:	2303      	movs	r3, #3
 80091fe:	1cc4      	adds	r4, r0, #3
 8009200:	439c      	bics	r4, r3
 8009202:	42a0      	cmp	r0, r4
 8009204:	d0e1      	beq.n	80091ca <_malloc_r+0x6a>
 8009206:	1a21      	subs	r1, r4, r0
 8009208:	0030      	movs	r0, r6
 800920a:	f000 fe89 	bl	8009f20 <_sbrk_r>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d1db      	bne.n	80091ca <_malloc_r+0x6a>
 8009212:	e7c7      	b.n	80091a4 <_malloc_r+0x44>
 8009214:	200002b4 	.word	0x200002b4
 8009218:	200002b8 	.word	0x200002b8

0800921c <__cvt>:
 800921c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800921e:	001e      	movs	r6, r3
 8009220:	2300      	movs	r3, #0
 8009222:	0014      	movs	r4, r2
 8009224:	b08b      	sub	sp, #44	; 0x2c
 8009226:	429e      	cmp	r6, r3
 8009228:	da04      	bge.n	8009234 <__cvt+0x18>
 800922a:	2180      	movs	r1, #128	; 0x80
 800922c:	0609      	lsls	r1, r1, #24
 800922e:	1873      	adds	r3, r6, r1
 8009230:	001e      	movs	r6, r3
 8009232:	232d      	movs	r3, #45	; 0x2d
 8009234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009236:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009238:	7013      	strb	r3, [r2, #0]
 800923a:	2320      	movs	r3, #32
 800923c:	2203      	movs	r2, #3
 800923e:	439f      	bics	r7, r3
 8009240:	2f46      	cmp	r7, #70	; 0x46
 8009242:	d007      	beq.n	8009254 <__cvt+0x38>
 8009244:	003b      	movs	r3, r7
 8009246:	3b45      	subs	r3, #69	; 0x45
 8009248:	4259      	negs	r1, r3
 800924a:	414b      	adcs	r3, r1
 800924c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800924e:	3a01      	subs	r2, #1
 8009250:	18cb      	adds	r3, r1, r3
 8009252:	9310      	str	r3, [sp, #64]	; 0x40
 8009254:	ab09      	add	r3, sp, #36	; 0x24
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	ab08      	add	r3, sp, #32
 800925a:	9303      	str	r3, [sp, #12]
 800925c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800925e:	9200      	str	r2, [sp, #0]
 8009260:	9302      	str	r3, [sp, #8]
 8009262:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009264:	0022      	movs	r2, r4
 8009266:	9301      	str	r3, [sp, #4]
 8009268:	0033      	movs	r3, r6
 800926a:	f001 fe3b 	bl	800aee4 <_dtoa_r>
 800926e:	0005      	movs	r5, r0
 8009270:	2f47      	cmp	r7, #71	; 0x47
 8009272:	d102      	bne.n	800927a <__cvt+0x5e>
 8009274:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009276:	07db      	lsls	r3, r3, #31
 8009278:	d528      	bpl.n	80092cc <__cvt+0xb0>
 800927a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800927c:	18eb      	adds	r3, r5, r3
 800927e:	9307      	str	r3, [sp, #28]
 8009280:	2f46      	cmp	r7, #70	; 0x46
 8009282:	d114      	bne.n	80092ae <__cvt+0x92>
 8009284:	782b      	ldrb	r3, [r5, #0]
 8009286:	2b30      	cmp	r3, #48	; 0x30
 8009288:	d10c      	bne.n	80092a4 <__cvt+0x88>
 800928a:	2200      	movs	r2, #0
 800928c:	2300      	movs	r3, #0
 800928e:	0020      	movs	r0, r4
 8009290:	0031      	movs	r1, r6
 8009292:	f7f7 f8db 	bl	800044c <__aeabi_dcmpeq>
 8009296:	2800      	cmp	r0, #0
 8009298:	d104      	bne.n	80092a4 <__cvt+0x88>
 800929a:	2301      	movs	r3, #1
 800929c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800929e:	1a9b      	subs	r3, r3, r2
 80092a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092a6:	9a07      	ldr	r2, [sp, #28]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	18d3      	adds	r3, r2, r3
 80092ac:	9307      	str	r3, [sp, #28]
 80092ae:	2200      	movs	r2, #0
 80092b0:	2300      	movs	r3, #0
 80092b2:	0020      	movs	r0, r4
 80092b4:	0031      	movs	r1, r6
 80092b6:	f7f7 f8c9 	bl	800044c <__aeabi_dcmpeq>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d001      	beq.n	80092c2 <__cvt+0xa6>
 80092be:	9b07      	ldr	r3, [sp, #28]
 80092c0:	9309      	str	r3, [sp, #36]	; 0x24
 80092c2:	2230      	movs	r2, #48	; 0x30
 80092c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c6:	9907      	ldr	r1, [sp, #28]
 80092c8:	428b      	cmp	r3, r1
 80092ca:	d306      	bcc.n	80092da <__cvt+0xbe>
 80092cc:	0028      	movs	r0, r5
 80092ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80092d2:	1b5b      	subs	r3, r3, r5
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	b00b      	add	sp, #44	; 0x2c
 80092d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092da:	1c59      	adds	r1, r3, #1
 80092dc:	9109      	str	r1, [sp, #36]	; 0x24
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	e7f0      	b.n	80092c4 <__cvt+0xa8>

080092e2 <__exponent>:
 80092e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e4:	1c83      	adds	r3, r0, #2
 80092e6:	b087      	sub	sp, #28
 80092e8:	9303      	str	r3, [sp, #12]
 80092ea:	0005      	movs	r5, r0
 80092ec:	000c      	movs	r4, r1
 80092ee:	232b      	movs	r3, #43	; 0x2b
 80092f0:	7002      	strb	r2, [r0, #0]
 80092f2:	2900      	cmp	r1, #0
 80092f4:	da01      	bge.n	80092fa <__exponent+0x18>
 80092f6:	424c      	negs	r4, r1
 80092f8:	3302      	adds	r3, #2
 80092fa:	706b      	strb	r3, [r5, #1]
 80092fc:	2c09      	cmp	r4, #9
 80092fe:	dd31      	ble.n	8009364 <__exponent+0x82>
 8009300:	270a      	movs	r7, #10
 8009302:	ab04      	add	r3, sp, #16
 8009304:	1dde      	adds	r6, r3, #7
 8009306:	0020      	movs	r0, r4
 8009308:	0039      	movs	r1, r7
 800930a:	9601      	str	r6, [sp, #4]
 800930c:	f7f7 f888 	bl	8000420 <__aeabi_idivmod>
 8009310:	3e01      	subs	r6, #1
 8009312:	3130      	adds	r1, #48	; 0x30
 8009314:	0020      	movs	r0, r4
 8009316:	7031      	strb	r1, [r6, #0]
 8009318:	0039      	movs	r1, r7
 800931a:	9402      	str	r4, [sp, #8]
 800931c:	f7f6 ff9a 	bl	8000254 <__divsi3>
 8009320:	9b02      	ldr	r3, [sp, #8]
 8009322:	0004      	movs	r4, r0
 8009324:	2b63      	cmp	r3, #99	; 0x63
 8009326:	dcee      	bgt.n	8009306 <__exponent+0x24>
 8009328:	9b01      	ldr	r3, [sp, #4]
 800932a:	3430      	adds	r4, #48	; 0x30
 800932c:	1e9a      	subs	r2, r3, #2
 800932e:	0013      	movs	r3, r2
 8009330:	9903      	ldr	r1, [sp, #12]
 8009332:	7014      	strb	r4, [r2, #0]
 8009334:	a804      	add	r0, sp, #16
 8009336:	3007      	adds	r0, #7
 8009338:	4298      	cmp	r0, r3
 800933a:	d80e      	bhi.n	800935a <__exponent+0x78>
 800933c:	ab04      	add	r3, sp, #16
 800933e:	3307      	adds	r3, #7
 8009340:	2000      	movs	r0, #0
 8009342:	429a      	cmp	r2, r3
 8009344:	d804      	bhi.n	8009350 <__exponent+0x6e>
 8009346:	ab04      	add	r3, sp, #16
 8009348:	3009      	adds	r0, #9
 800934a:	18c0      	adds	r0, r0, r3
 800934c:	9b01      	ldr	r3, [sp, #4]
 800934e:	1ac0      	subs	r0, r0, r3
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	1818      	adds	r0, r3, r0
 8009354:	1b40      	subs	r0, r0, r5
 8009356:	b007      	add	sp, #28
 8009358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935a:	7818      	ldrb	r0, [r3, #0]
 800935c:	3301      	adds	r3, #1
 800935e:	7008      	strb	r0, [r1, #0]
 8009360:	3101      	adds	r1, #1
 8009362:	e7e7      	b.n	8009334 <__exponent+0x52>
 8009364:	2330      	movs	r3, #48	; 0x30
 8009366:	18e4      	adds	r4, r4, r3
 8009368:	70ab      	strb	r3, [r5, #2]
 800936a:	1d28      	adds	r0, r5, #4
 800936c:	70ec      	strb	r4, [r5, #3]
 800936e:	e7f1      	b.n	8009354 <__exponent+0x72>

08009370 <_printf_float>:
 8009370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009372:	b095      	sub	sp, #84	; 0x54
 8009374:	000c      	movs	r4, r1
 8009376:	9208      	str	r2, [sp, #32]
 8009378:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800937a:	9309      	str	r3, [sp, #36]	; 0x24
 800937c:	0007      	movs	r7, r0
 800937e:	f002 ff41 	bl	800c204 <_localeconv_r>
 8009382:	6803      	ldr	r3, [r0, #0]
 8009384:	0018      	movs	r0, r3
 8009386:	930b      	str	r3, [sp, #44]	; 0x2c
 8009388:	f7f6 febe 	bl	8000108 <strlen>
 800938c:	2300      	movs	r3, #0
 800938e:	9312      	str	r3, [sp, #72]	; 0x48
 8009390:	7e23      	ldrb	r3, [r4, #24]
 8009392:	2207      	movs	r2, #7
 8009394:	001e      	movs	r6, r3
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	900d      	str	r0, [sp, #52]	; 0x34
 800939a:	930c      	str	r3, [sp, #48]	; 0x30
 800939c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800939e:	682b      	ldr	r3, [r5, #0]
 80093a0:	05c9      	lsls	r1, r1, #23
 80093a2:	d547      	bpl.n	8009434 <_printf_float+0xc4>
 80093a4:	189b      	adds	r3, r3, r2
 80093a6:	4393      	bics	r3, r2
 80093a8:	001a      	movs	r2, r3
 80093aa:	3208      	adds	r2, #8
 80093ac:	602a      	str	r2, [r5, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	64a2      	str	r2, [r4, #72]	; 0x48
 80093b4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80093b6:	2201      	movs	r2, #1
 80093b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80093ba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80093bc:	930a      	str	r3, [sp, #40]	; 0x28
 80093be:	006b      	lsls	r3, r5, #1
 80093c0:	085b      	lsrs	r3, r3, #1
 80093c2:	930e      	str	r3, [sp, #56]	; 0x38
 80093c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093c6:	4ba8      	ldr	r3, [pc, #672]	; (8009668 <_printf_float+0x2f8>)
 80093c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80093ca:	4252      	negs	r2, r2
 80093cc:	f7f8 fe4a 	bl	8002064 <__aeabi_dcmpun>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d131      	bne.n	8009438 <_printf_float+0xc8>
 80093d4:	2201      	movs	r2, #1
 80093d6:	4ba4      	ldr	r3, [pc, #656]	; (8009668 <_printf_float+0x2f8>)
 80093d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80093dc:	4252      	negs	r2, r2
 80093de:	f7f7 f845 	bl	800046c <__aeabi_dcmple>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d128      	bne.n	8009438 <_printf_float+0xc8>
 80093e6:	2200      	movs	r2, #0
 80093e8:	2300      	movs	r3, #0
 80093ea:	0029      	movs	r1, r5
 80093ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093ee:	f7f7 f833 	bl	8000458 <__aeabi_dcmplt>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d003      	beq.n	80093fe <_printf_float+0x8e>
 80093f6:	0023      	movs	r3, r4
 80093f8:	222d      	movs	r2, #45	; 0x2d
 80093fa:	3343      	adds	r3, #67	; 0x43
 80093fc:	701a      	strb	r2, [r3, #0]
 80093fe:	4d9b      	ldr	r5, [pc, #620]	; (800966c <_printf_float+0x2fc>)
 8009400:	2e47      	cmp	r6, #71	; 0x47
 8009402:	d900      	bls.n	8009406 <_printf_float+0x96>
 8009404:	4d9a      	ldr	r5, [pc, #616]	; (8009670 <_printf_float+0x300>)
 8009406:	2303      	movs	r3, #3
 8009408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800940a:	6123      	str	r3, [r4, #16]
 800940c:	3301      	adds	r3, #1
 800940e:	439a      	bics	r2, r3
 8009410:	2300      	movs	r3, #0
 8009412:	6022      	str	r2, [r4, #0]
 8009414:	930a      	str	r3, [sp, #40]	; 0x28
 8009416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009418:	0021      	movs	r1, r4
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	0038      	movs	r0, r7
 800941e:	9b08      	ldr	r3, [sp, #32]
 8009420:	aa13      	add	r2, sp, #76	; 0x4c
 8009422:	f000 f9f3 	bl	800980c <_printf_common>
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	d000      	beq.n	800942c <_printf_float+0xbc>
 800942a:	e09e      	b.n	800956a <_printf_float+0x1fa>
 800942c:	2001      	movs	r0, #1
 800942e:	4240      	negs	r0, r0
 8009430:	b015      	add	sp, #84	; 0x54
 8009432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009434:	3307      	adds	r3, #7
 8009436:	e7b6      	b.n	80093a6 <_printf_float+0x36>
 8009438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800943a:	002b      	movs	r3, r5
 800943c:	0010      	movs	r0, r2
 800943e:	0029      	movs	r1, r5
 8009440:	f7f8 fe10 	bl	8002064 <__aeabi_dcmpun>
 8009444:	2800      	cmp	r0, #0
 8009446:	d00a      	beq.n	800945e <_printf_float+0xee>
 8009448:	2d00      	cmp	r5, #0
 800944a:	da03      	bge.n	8009454 <_printf_float+0xe4>
 800944c:	0023      	movs	r3, r4
 800944e:	222d      	movs	r2, #45	; 0x2d
 8009450:	3343      	adds	r3, #67	; 0x43
 8009452:	701a      	strb	r2, [r3, #0]
 8009454:	4d87      	ldr	r5, [pc, #540]	; (8009674 <_printf_float+0x304>)
 8009456:	2e47      	cmp	r6, #71	; 0x47
 8009458:	d9d5      	bls.n	8009406 <_printf_float+0x96>
 800945a:	4d87      	ldr	r5, [pc, #540]	; (8009678 <_printf_float+0x308>)
 800945c:	e7d3      	b.n	8009406 <_printf_float+0x96>
 800945e:	2220      	movs	r2, #32
 8009460:	0031      	movs	r1, r6
 8009462:	6863      	ldr	r3, [r4, #4]
 8009464:	4391      	bics	r1, r2
 8009466:	910e      	str	r1, [sp, #56]	; 0x38
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	d147      	bne.n	80094fc <_printf_float+0x18c>
 800946c:	3307      	adds	r3, #7
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	2380      	movs	r3, #128	; 0x80
 8009472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009474:	00db      	lsls	r3, r3, #3
 8009476:	4313      	orrs	r3, r2
 8009478:	2200      	movs	r2, #0
 800947a:	9206      	str	r2, [sp, #24]
 800947c:	aa12      	add	r2, sp, #72	; 0x48
 800947e:	9205      	str	r2, [sp, #20]
 8009480:	aa11      	add	r2, sp, #68	; 0x44
 8009482:	9203      	str	r2, [sp, #12]
 8009484:	2223      	movs	r2, #35	; 0x23
 8009486:	a908      	add	r1, sp, #32
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	6863      	ldr	r3, [r4, #4]
 800948e:	1852      	adds	r2, r2, r1
 8009490:	9202      	str	r2, [sp, #8]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	0038      	movs	r0, r7
 8009496:	002b      	movs	r3, r5
 8009498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800949a:	9604      	str	r6, [sp, #16]
 800949c:	f7ff febe 	bl	800921c <__cvt>
 80094a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a2:	0005      	movs	r5, r0
 80094a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80094a6:	2b47      	cmp	r3, #71	; 0x47
 80094a8:	d108      	bne.n	80094bc <_printf_float+0x14c>
 80094aa:	1ccb      	adds	r3, r1, #3
 80094ac:	db02      	blt.n	80094b4 <_printf_float+0x144>
 80094ae:	6863      	ldr	r3, [r4, #4]
 80094b0:	4299      	cmp	r1, r3
 80094b2:	dd46      	ble.n	8009542 <_printf_float+0x1d2>
 80094b4:	0033      	movs	r3, r6
 80094b6:	3b02      	subs	r3, #2
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	001e      	movs	r6, r3
 80094bc:	2e65      	cmp	r6, #101	; 0x65
 80094be:	d824      	bhi.n	800950a <_printf_float+0x19a>
 80094c0:	0020      	movs	r0, r4
 80094c2:	0032      	movs	r2, r6
 80094c4:	3901      	subs	r1, #1
 80094c6:	3050      	adds	r0, #80	; 0x50
 80094c8:	9111      	str	r1, [sp, #68]	; 0x44
 80094ca:	f7ff ff0a 	bl	80092e2 <__exponent>
 80094ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094d0:	900a      	str	r0, [sp, #40]	; 0x28
 80094d2:	1813      	adds	r3, r2, r0
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	2a01      	cmp	r2, #1
 80094d8:	dc02      	bgt.n	80094e0 <_printf_float+0x170>
 80094da:	6822      	ldr	r2, [r4, #0]
 80094dc:	07d2      	lsls	r2, r2, #31
 80094de:	d501      	bpl.n	80094e4 <_printf_float+0x174>
 80094e0:	3301      	adds	r3, #1
 80094e2:	6123      	str	r3, [r4, #16]
 80094e4:	2323      	movs	r3, #35	; 0x23
 80094e6:	aa08      	add	r2, sp, #32
 80094e8:	189b      	adds	r3, r3, r2
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d100      	bne.n	80094f2 <_printf_float+0x182>
 80094f0:	e791      	b.n	8009416 <_printf_float+0xa6>
 80094f2:	0023      	movs	r3, r4
 80094f4:	222d      	movs	r2, #45	; 0x2d
 80094f6:	3343      	adds	r3, #67	; 0x43
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	e78c      	b.n	8009416 <_printf_float+0xa6>
 80094fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094fe:	2a47      	cmp	r2, #71	; 0x47
 8009500:	d1b6      	bne.n	8009470 <_printf_float+0x100>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1b4      	bne.n	8009470 <_printf_float+0x100>
 8009506:	3301      	adds	r3, #1
 8009508:	e7b1      	b.n	800946e <_printf_float+0xfe>
 800950a:	2e66      	cmp	r6, #102	; 0x66
 800950c:	d11b      	bne.n	8009546 <_printf_float+0x1d6>
 800950e:	6863      	ldr	r3, [r4, #4]
 8009510:	2900      	cmp	r1, #0
 8009512:	dd0d      	ble.n	8009530 <_printf_float+0x1c0>
 8009514:	6121      	str	r1, [r4, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d102      	bne.n	8009520 <_printf_float+0x1b0>
 800951a:	6822      	ldr	r2, [r4, #0]
 800951c:	07d2      	lsls	r2, r2, #31
 800951e:	d502      	bpl.n	8009526 <_printf_float+0x1b6>
 8009520:	3301      	adds	r3, #1
 8009522:	1859      	adds	r1, r3, r1
 8009524:	6121      	str	r1, [r4, #16]
 8009526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009528:	65a3      	str	r3, [r4, #88]	; 0x58
 800952a:	2300      	movs	r3, #0
 800952c:	930a      	str	r3, [sp, #40]	; 0x28
 800952e:	e7d9      	b.n	80094e4 <_printf_float+0x174>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d103      	bne.n	800953c <_printf_float+0x1cc>
 8009534:	2201      	movs	r2, #1
 8009536:	6821      	ldr	r1, [r4, #0]
 8009538:	4211      	tst	r1, r2
 800953a:	d000      	beq.n	800953e <_printf_float+0x1ce>
 800953c:	1c9a      	adds	r2, r3, #2
 800953e:	6122      	str	r2, [r4, #16]
 8009540:	e7f1      	b.n	8009526 <_printf_float+0x1b6>
 8009542:	2367      	movs	r3, #103	; 0x67
 8009544:	001e      	movs	r6, r3
 8009546:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009548:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800954a:	4293      	cmp	r3, r2
 800954c:	db06      	blt.n	800955c <_printf_float+0x1ec>
 800954e:	6822      	ldr	r2, [r4, #0]
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	07d2      	lsls	r2, r2, #31
 8009554:	d5e7      	bpl.n	8009526 <_printf_float+0x1b6>
 8009556:	3301      	adds	r3, #1
 8009558:	6123      	str	r3, [r4, #16]
 800955a:	e7e4      	b.n	8009526 <_printf_float+0x1b6>
 800955c:	2101      	movs	r1, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	dc01      	bgt.n	8009566 <_printf_float+0x1f6>
 8009562:	1849      	adds	r1, r1, r1
 8009564:	1ac9      	subs	r1, r1, r3
 8009566:	1852      	adds	r2, r2, r1
 8009568:	e7e9      	b.n	800953e <_printf_float+0x1ce>
 800956a:	6822      	ldr	r2, [r4, #0]
 800956c:	0553      	lsls	r3, r2, #21
 800956e:	d408      	bmi.n	8009582 <_printf_float+0x212>
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	002a      	movs	r2, r5
 8009574:	0038      	movs	r0, r7
 8009576:	9908      	ldr	r1, [sp, #32]
 8009578:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800957a:	47a8      	blx	r5
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d129      	bne.n	80095d4 <_printf_float+0x264>
 8009580:	e754      	b.n	800942c <_printf_float+0xbc>
 8009582:	2e65      	cmp	r6, #101	; 0x65
 8009584:	d800      	bhi.n	8009588 <_printf_float+0x218>
 8009586:	e0ec      	b.n	8009762 <_printf_float+0x3f2>
 8009588:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800958a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800958c:	2200      	movs	r2, #0
 800958e:	2300      	movs	r3, #0
 8009590:	f7f6 ff5c 	bl	800044c <__aeabi_dcmpeq>
 8009594:	2800      	cmp	r0, #0
 8009596:	d034      	beq.n	8009602 <_printf_float+0x292>
 8009598:	2301      	movs	r3, #1
 800959a:	0038      	movs	r0, r7
 800959c:	4a37      	ldr	r2, [pc, #220]	; (800967c <_printf_float+0x30c>)
 800959e:	9908      	ldr	r1, [sp, #32]
 80095a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095a2:	47a8      	blx	r5
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d100      	bne.n	80095aa <_printf_float+0x23a>
 80095a8:	e740      	b.n	800942c <_printf_float+0xbc>
 80095aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095ae:	4293      	cmp	r3, r2
 80095b0:	db02      	blt.n	80095b8 <_printf_float+0x248>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	07db      	lsls	r3, r3, #31
 80095b6:	d50d      	bpl.n	80095d4 <_printf_float+0x264>
 80095b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095ba:	0038      	movs	r0, r7
 80095bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095c0:	9908      	ldr	r1, [sp, #32]
 80095c2:	47a8      	blx	r5
 80095c4:	2500      	movs	r5, #0
 80095c6:	1c43      	adds	r3, r0, #1
 80095c8:	d100      	bne.n	80095cc <_printf_float+0x25c>
 80095ca:	e72f      	b.n	800942c <_printf_float+0xbc>
 80095cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095ce:	3b01      	subs	r3, #1
 80095d0:	42ab      	cmp	r3, r5
 80095d2:	dc0a      	bgt.n	80095ea <_printf_float+0x27a>
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	079b      	lsls	r3, r3, #30
 80095d8:	d500      	bpl.n	80095dc <_printf_float+0x26c>
 80095da:	e114      	b.n	8009806 <_printf_float+0x496>
 80095dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095de:	68e0      	ldr	r0, [r4, #12]
 80095e0:	4298      	cmp	r0, r3
 80095e2:	db00      	blt.n	80095e6 <_printf_float+0x276>
 80095e4:	e724      	b.n	8009430 <_printf_float+0xc0>
 80095e6:	0018      	movs	r0, r3
 80095e8:	e722      	b.n	8009430 <_printf_float+0xc0>
 80095ea:	0022      	movs	r2, r4
 80095ec:	2301      	movs	r3, #1
 80095ee:	0038      	movs	r0, r7
 80095f0:	9908      	ldr	r1, [sp, #32]
 80095f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80095f4:	321a      	adds	r2, #26
 80095f6:	47b0      	blx	r6
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d100      	bne.n	80095fe <_printf_float+0x28e>
 80095fc:	e716      	b.n	800942c <_printf_float+0xbc>
 80095fe:	3501      	adds	r5, #1
 8009600:	e7e4      	b.n	80095cc <_printf_float+0x25c>
 8009602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009604:	2b00      	cmp	r3, #0
 8009606:	dc3b      	bgt.n	8009680 <_printf_float+0x310>
 8009608:	2301      	movs	r3, #1
 800960a:	0038      	movs	r0, r7
 800960c:	4a1b      	ldr	r2, [pc, #108]	; (800967c <_printf_float+0x30c>)
 800960e:	9908      	ldr	r1, [sp, #32]
 8009610:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009612:	47b0      	blx	r6
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d100      	bne.n	800961a <_printf_float+0x2aa>
 8009618:	e708      	b.n	800942c <_printf_float+0xbc>
 800961a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800961c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800961e:	4313      	orrs	r3, r2
 8009620:	d102      	bne.n	8009628 <_printf_float+0x2b8>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	07db      	lsls	r3, r3, #31
 8009626:	d5d5      	bpl.n	80095d4 <_printf_float+0x264>
 8009628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800962a:	0038      	movs	r0, r7
 800962c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800962e:	9908      	ldr	r1, [sp, #32]
 8009630:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009632:	47b0      	blx	r6
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d100      	bne.n	800963a <_printf_float+0x2ca>
 8009638:	e6f8      	b.n	800942c <_printf_float+0xbc>
 800963a:	2300      	movs	r3, #0
 800963c:	930a      	str	r3, [sp, #40]	; 0x28
 800963e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009642:	425b      	negs	r3, r3
 8009644:	4293      	cmp	r3, r2
 8009646:	dc01      	bgt.n	800964c <_printf_float+0x2dc>
 8009648:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800964a:	e792      	b.n	8009572 <_printf_float+0x202>
 800964c:	0022      	movs	r2, r4
 800964e:	2301      	movs	r3, #1
 8009650:	0038      	movs	r0, r7
 8009652:	9908      	ldr	r1, [sp, #32]
 8009654:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009656:	321a      	adds	r2, #26
 8009658:	47b0      	blx	r6
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d100      	bne.n	8009660 <_printf_float+0x2f0>
 800965e:	e6e5      	b.n	800942c <_printf_float+0xbc>
 8009660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009662:	3301      	adds	r3, #1
 8009664:	e7ea      	b.n	800963c <_printf_float+0x2cc>
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	7fefffff 	.word	0x7fefffff
 800966c:	0800dc70 	.word	0x0800dc70
 8009670:	0800dc74 	.word	0x0800dc74
 8009674:	0800dc78 	.word	0x0800dc78
 8009678:	0800dc7c 	.word	0x0800dc7c
 800967c:	0800dc80 	.word	0x0800dc80
 8009680:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009684:	920a      	str	r2, [sp, #40]	; 0x28
 8009686:	429a      	cmp	r2, r3
 8009688:	dd00      	ble.n	800968c <_printf_float+0x31c>
 800968a:	930a      	str	r3, [sp, #40]	; 0x28
 800968c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800968e:	2b00      	cmp	r3, #0
 8009690:	dc3d      	bgt.n	800970e <_printf_float+0x39e>
 8009692:	2300      	movs	r3, #0
 8009694:	930e      	str	r3, [sp, #56]	; 0x38
 8009696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009698:	43db      	mvns	r3, r3
 800969a:	17db      	asrs	r3, r3, #31
 800969c:	930f      	str	r3, [sp, #60]	; 0x3c
 800969e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096a2:	930c      	str	r3, [sp, #48]	; 0x30
 80096a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a6:	4013      	ands	r3, r2
 80096a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096ae:	4293      	cmp	r3, r2
 80096b0:	dc36      	bgt.n	8009720 <_printf_float+0x3b0>
 80096b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096b6:	4293      	cmp	r3, r2
 80096b8:	db40      	blt.n	800973c <_printf_float+0x3cc>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	07db      	lsls	r3, r3, #31
 80096be:	d43d      	bmi.n	800973c <_printf_float+0x3cc>
 80096c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	1a52      	subs	r2, r2, r1
 80096ca:	920a      	str	r2, [sp, #40]	; 0x28
 80096cc:	429a      	cmp	r2, r3
 80096ce:	dd00      	ble.n	80096d2 <_printf_float+0x362>
 80096d0:	930a      	str	r3, [sp, #40]	; 0x28
 80096d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	dc3a      	bgt.n	800974e <_printf_float+0x3de>
 80096d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096da:	2500      	movs	r5, #0
 80096dc:	43db      	mvns	r3, r3
 80096de:	17db      	asrs	r3, r3, #31
 80096e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80096e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ec:	400a      	ands	r2, r1
 80096ee:	1a9b      	subs	r3, r3, r2
 80096f0:	42ab      	cmp	r3, r5
 80096f2:	dc00      	bgt.n	80096f6 <_printf_float+0x386>
 80096f4:	e76e      	b.n	80095d4 <_printf_float+0x264>
 80096f6:	0022      	movs	r2, r4
 80096f8:	2301      	movs	r3, #1
 80096fa:	0038      	movs	r0, r7
 80096fc:	9908      	ldr	r1, [sp, #32]
 80096fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009700:	321a      	adds	r2, #26
 8009702:	47b0      	blx	r6
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d100      	bne.n	800970a <_printf_float+0x39a>
 8009708:	e690      	b.n	800942c <_printf_float+0xbc>
 800970a:	3501      	adds	r5, #1
 800970c:	e7e9      	b.n	80096e2 <_printf_float+0x372>
 800970e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009710:	002a      	movs	r2, r5
 8009712:	0038      	movs	r0, r7
 8009714:	9908      	ldr	r1, [sp, #32]
 8009716:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009718:	47b0      	blx	r6
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	d1b9      	bne.n	8009692 <_printf_float+0x322>
 800971e:	e685      	b.n	800942c <_printf_float+0xbc>
 8009720:	0022      	movs	r2, r4
 8009722:	2301      	movs	r3, #1
 8009724:	0038      	movs	r0, r7
 8009726:	9908      	ldr	r1, [sp, #32]
 8009728:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800972a:	321a      	adds	r2, #26
 800972c:	47b0      	blx	r6
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	d100      	bne.n	8009734 <_printf_float+0x3c4>
 8009732:	e67b      	b.n	800942c <_printf_float+0xbc>
 8009734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009736:	3301      	adds	r3, #1
 8009738:	930e      	str	r3, [sp, #56]	; 0x38
 800973a:	e7b0      	b.n	800969e <_printf_float+0x32e>
 800973c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800973e:	0038      	movs	r0, r7
 8009740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009742:	9908      	ldr	r1, [sp, #32]
 8009744:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009746:	47b0      	blx	r6
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d1b9      	bne.n	80096c0 <_printf_float+0x350>
 800974c:	e66e      	b.n	800942c <_printf_float+0xbc>
 800974e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009750:	0038      	movs	r0, r7
 8009752:	18ea      	adds	r2, r5, r3
 8009754:	9908      	ldr	r1, [sp, #32]
 8009756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009758:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800975a:	47a8      	blx	r5
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d1bb      	bne.n	80096d8 <_printf_float+0x368>
 8009760:	e664      	b.n	800942c <_printf_float+0xbc>
 8009762:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009764:	2b01      	cmp	r3, #1
 8009766:	dc02      	bgt.n	800976e <_printf_float+0x3fe>
 8009768:	2301      	movs	r3, #1
 800976a:	421a      	tst	r2, r3
 800976c:	d038      	beq.n	80097e0 <_printf_float+0x470>
 800976e:	2301      	movs	r3, #1
 8009770:	002a      	movs	r2, r5
 8009772:	0038      	movs	r0, r7
 8009774:	9908      	ldr	r1, [sp, #32]
 8009776:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009778:	47b0      	blx	r6
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	d100      	bne.n	8009780 <_printf_float+0x410>
 800977e:	e655      	b.n	800942c <_printf_float+0xbc>
 8009780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009782:	0038      	movs	r0, r7
 8009784:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009786:	9908      	ldr	r1, [sp, #32]
 8009788:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800978a:	47b0      	blx	r6
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d100      	bne.n	8009792 <_printf_float+0x422>
 8009790:	e64c      	b.n	800942c <_printf_float+0xbc>
 8009792:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009794:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009796:	2200      	movs	r2, #0
 8009798:	2300      	movs	r3, #0
 800979a:	f7f6 fe57 	bl	800044c <__aeabi_dcmpeq>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d11c      	bne.n	80097dc <_printf_float+0x46c>
 80097a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097a4:	1c6a      	adds	r2, r5, #1
 80097a6:	3b01      	subs	r3, #1
 80097a8:	0038      	movs	r0, r7
 80097aa:	9908      	ldr	r1, [sp, #32]
 80097ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80097ae:	47a8      	blx	r5
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d10f      	bne.n	80097d4 <_printf_float+0x464>
 80097b4:	e63a      	b.n	800942c <_printf_float+0xbc>
 80097b6:	0022      	movs	r2, r4
 80097b8:	2301      	movs	r3, #1
 80097ba:	0038      	movs	r0, r7
 80097bc:	9908      	ldr	r1, [sp, #32]
 80097be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097c0:	321a      	adds	r2, #26
 80097c2:	47b0      	blx	r6
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d100      	bne.n	80097ca <_printf_float+0x45a>
 80097c8:	e630      	b.n	800942c <_printf_float+0xbc>
 80097ca:	3501      	adds	r5, #1
 80097cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097ce:	3b01      	subs	r3, #1
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	dcf0      	bgt.n	80097b6 <_printf_float+0x446>
 80097d4:	0022      	movs	r2, r4
 80097d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d8:	3250      	adds	r2, #80	; 0x50
 80097da:	e6cb      	b.n	8009574 <_printf_float+0x204>
 80097dc:	2500      	movs	r5, #0
 80097de:	e7f5      	b.n	80097cc <_printf_float+0x45c>
 80097e0:	002a      	movs	r2, r5
 80097e2:	e7e1      	b.n	80097a8 <_printf_float+0x438>
 80097e4:	0022      	movs	r2, r4
 80097e6:	2301      	movs	r3, #1
 80097e8:	0038      	movs	r0, r7
 80097ea:	9908      	ldr	r1, [sp, #32]
 80097ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097ee:	3219      	adds	r2, #25
 80097f0:	47b0      	blx	r6
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d100      	bne.n	80097f8 <_printf_float+0x488>
 80097f6:	e619      	b.n	800942c <_printf_float+0xbc>
 80097f8:	3501      	adds	r5, #1
 80097fa:	68e3      	ldr	r3, [r4, #12]
 80097fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	42ab      	cmp	r3, r5
 8009802:	dcef      	bgt.n	80097e4 <_printf_float+0x474>
 8009804:	e6ea      	b.n	80095dc <_printf_float+0x26c>
 8009806:	2500      	movs	r5, #0
 8009808:	e7f7      	b.n	80097fa <_printf_float+0x48a>
 800980a:	46c0      	nop			; (mov r8, r8)

0800980c <_printf_common>:
 800980c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800980e:	0015      	movs	r5, r2
 8009810:	9301      	str	r3, [sp, #4]
 8009812:	688a      	ldr	r2, [r1, #8]
 8009814:	690b      	ldr	r3, [r1, #16]
 8009816:	000c      	movs	r4, r1
 8009818:	9000      	str	r0, [sp, #0]
 800981a:	4293      	cmp	r3, r2
 800981c:	da00      	bge.n	8009820 <_printf_common+0x14>
 800981e:	0013      	movs	r3, r2
 8009820:	0022      	movs	r2, r4
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	3243      	adds	r2, #67	; 0x43
 8009826:	7812      	ldrb	r2, [r2, #0]
 8009828:	2a00      	cmp	r2, #0
 800982a:	d001      	beq.n	8009830 <_printf_common+0x24>
 800982c:	3301      	adds	r3, #1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	069b      	lsls	r3, r3, #26
 8009834:	d502      	bpl.n	800983c <_printf_common+0x30>
 8009836:	682b      	ldr	r3, [r5, #0]
 8009838:	3302      	adds	r3, #2
 800983a:	602b      	str	r3, [r5, #0]
 800983c:	6822      	ldr	r2, [r4, #0]
 800983e:	2306      	movs	r3, #6
 8009840:	0017      	movs	r7, r2
 8009842:	401f      	ands	r7, r3
 8009844:	421a      	tst	r2, r3
 8009846:	d027      	beq.n	8009898 <_printf_common+0x8c>
 8009848:	0023      	movs	r3, r4
 800984a:	3343      	adds	r3, #67	; 0x43
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	1e5a      	subs	r2, r3, #1
 8009850:	4193      	sbcs	r3, r2
 8009852:	6822      	ldr	r2, [r4, #0]
 8009854:	0692      	lsls	r2, r2, #26
 8009856:	d430      	bmi.n	80098ba <_printf_common+0xae>
 8009858:	0022      	movs	r2, r4
 800985a:	9901      	ldr	r1, [sp, #4]
 800985c:	9800      	ldr	r0, [sp, #0]
 800985e:	9e08      	ldr	r6, [sp, #32]
 8009860:	3243      	adds	r2, #67	; 0x43
 8009862:	47b0      	blx	r6
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	d025      	beq.n	80098b4 <_printf_common+0xa8>
 8009868:	2306      	movs	r3, #6
 800986a:	6820      	ldr	r0, [r4, #0]
 800986c:	682a      	ldr	r2, [r5, #0]
 800986e:	68e1      	ldr	r1, [r4, #12]
 8009870:	2500      	movs	r5, #0
 8009872:	4003      	ands	r3, r0
 8009874:	2b04      	cmp	r3, #4
 8009876:	d103      	bne.n	8009880 <_printf_common+0x74>
 8009878:	1a8d      	subs	r5, r1, r2
 800987a:	43eb      	mvns	r3, r5
 800987c:	17db      	asrs	r3, r3, #31
 800987e:	401d      	ands	r5, r3
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	6922      	ldr	r2, [r4, #16]
 8009884:	4293      	cmp	r3, r2
 8009886:	dd01      	ble.n	800988c <_printf_common+0x80>
 8009888:	1a9b      	subs	r3, r3, r2
 800988a:	18ed      	adds	r5, r5, r3
 800988c:	2700      	movs	r7, #0
 800988e:	42bd      	cmp	r5, r7
 8009890:	d120      	bne.n	80098d4 <_printf_common+0xc8>
 8009892:	2000      	movs	r0, #0
 8009894:	e010      	b.n	80098b8 <_printf_common+0xac>
 8009896:	3701      	adds	r7, #1
 8009898:	68e3      	ldr	r3, [r4, #12]
 800989a:	682a      	ldr	r2, [r5, #0]
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	42bb      	cmp	r3, r7
 80098a0:	ddd2      	ble.n	8009848 <_printf_common+0x3c>
 80098a2:	0022      	movs	r2, r4
 80098a4:	2301      	movs	r3, #1
 80098a6:	9901      	ldr	r1, [sp, #4]
 80098a8:	9800      	ldr	r0, [sp, #0]
 80098aa:	9e08      	ldr	r6, [sp, #32]
 80098ac:	3219      	adds	r2, #25
 80098ae:	47b0      	blx	r6
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d1f0      	bne.n	8009896 <_printf_common+0x8a>
 80098b4:	2001      	movs	r0, #1
 80098b6:	4240      	negs	r0, r0
 80098b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098ba:	2030      	movs	r0, #48	; 0x30
 80098bc:	18e1      	adds	r1, r4, r3
 80098be:	3143      	adds	r1, #67	; 0x43
 80098c0:	7008      	strb	r0, [r1, #0]
 80098c2:	0021      	movs	r1, r4
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	3145      	adds	r1, #69	; 0x45
 80098c8:	7809      	ldrb	r1, [r1, #0]
 80098ca:	18a2      	adds	r2, r4, r2
 80098cc:	3243      	adds	r2, #67	; 0x43
 80098ce:	3302      	adds	r3, #2
 80098d0:	7011      	strb	r1, [r2, #0]
 80098d2:	e7c1      	b.n	8009858 <_printf_common+0x4c>
 80098d4:	0022      	movs	r2, r4
 80098d6:	2301      	movs	r3, #1
 80098d8:	9901      	ldr	r1, [sp, #4]
 80098da:	9800      	ldr	r0, [sp, #0]
 80098dc:	9e08      	ldr	r6, [sp, #32]
 80098de:	321a      	adds	r2, #26
 80098e0:	47b0      	blx	r6
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	d0e6      	beq.n	80098b4 <_printf_common+0xa8>
 80098e6:	3701      	adds	r7, #1
 80098e8:	e7d1      	b.n	800988e <_printf_common+0x82>
	...

080098ec <_printf_i>:
 80098ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ee:	b08b      	sub	sp, #44	; 0x2c
 80098f0:	9206      	str	r2, [sp, #24]
 80098f2:	000a      	movs	r2, r1
 80098f4:	3243      	adds	r2, #67	; 0x43
 80098f6:	9307      	str	r3, [sp, #28]
 80098f8:	9005      	str	r0, [sp, #20]
 80098fa:	9204      	str	r2, [sp, #16]
 80098fc:	7e0a      	ldrb	r2, [r1, #24]
 80098fe:	000c      	movs	r4, r1
 8009900:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009902:	2a78      	cmp	r2, #120	; 0x78
 8009904:	d806      	bhi.n	8009914 <_printf_i+0x28>
 8009906:	2a62      	cmp	r2, #98	; 0x62
 8009908:	d808      	bhi.n	800991c <_printf_i+0x30>
 800990a:	2a00      	cmp	r2, #0
 800990c:	d100      	bne.n	8009910 <_printf_i+0x24>
 800990e:	e0c0      	b.n	8009a92 <_printf_i+0x1a6>
 8009910:	2a58      	cmp	r2, #88	; 0x58
 8009912:	d052      	beq.n	80099ba <_printf_i+0xce>
 8009914:	0026      	movs	r6, r4
 8009916:	3642      	adds	r6, #66	; 0x42
 8009918:	7032      	strb	r2, [r6, #0]
 800991a:	e022      	b.n	8009962 <_printf_i+0x76>
 800991c:	0010      	movs	r0, r2
 800991e:	3863      	subs	r0, #99	; 0x63
 8009920:	2815      	cmp	r0, #21
 8009922:	d8f7      	bhi.n	8009914 <_printf_i+0x28>
 8009924:	f7f6 fc02 	bl	800012c <__gnu_thumb1_case_shi>
 8009928:	001f0016 	.word	0x001f0016
 800992c:	fff6fff6 	.word	0xfff6fff6
 8009930:	fff6fff6 	.word	0xfff6fff6
 8009934:	fff6001f 	.word	0xfff6001f
 8009938:	fff6fff6 	.word	0xfff6fff6
 800993c:	00a8fff6 	.word	0x00a8fff6
 8009940:	009a0036 	.word	0x009a0036
 8009944:	fff6fff6 	.word	0xfff6fff6
 8009948:	fff600b9 	.word	0xfff600b9
 800994c:	fff60036 	.word	0xfff60036
 8009950:	009efff6 	.word	0x009efff6
 8009954:	0026      	movs	r6, r4
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	3642      	adds	r6, #66	; 0x42
 800995a:	1d11      	adds	r1, r2, #4
 800995c:	6019      	str	r1, [r3, #0]
 800995e:	6813      	ldr	r3, [r2, #0]
 8009960:	7033      	strb	r3, [r6, #0]
 8009962:	2301      	movs	r3, #1
 8009964:	e0a7      	b.n	8009ab6 <_printf_i+0x1ca>
 8009966:	6808      	ldr	r0, [r1, #0]
 8009968:	6819      	ldr	r1, [r3, #0]
 800996a:	1d0a      	adds	r2, r1, #4
 800996c:	0605      	lsls	r5, r0, #24
 800996e:	d50b      	bpl.n	8009988 <_printf_i+0x9c>
 8009970:	680d      	ldr	r5, [r1, #0]
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	2d00      	cmp	r5, #0
 8009976:	da03      	bge.n	8009980 <_printf_i+0x94>
 8009978:	232d      	movs	r3, #45	; 0x2d
 800997a:	9a04      	ldr	r2, [sp, #16]
 800997c:	426d      	negs	r5, r5
 800997e:	7013      	strb	r3, [r2, #0]
 8009980:	4b61      	ldr	r3, [pc, #388]	; (8009b08 <_printf_i+0x21c>)
 8009982:	270a      	movs	r7, #10
 8009984:	9303      	str	r3, [sp, #12]
 8009986:	e032      	b.n	80099ee <_printf_i+0x102>
 8009988:	680d      	ldr	r5, [r1, #0]
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	0641      	lsls	r1, r0, #25
 800998e:	d5f1      	bpl.n	8009974 <_printf_i+0x88>
 8009990:	b22d      	sxth	r5, r5
 8009992:	e7ef      	b.n	8009974 <_printf_i+0x88>
 8009994:	680d      	ldr	r5, [r1, #0]
 8009996:	6819      	ldr	r1, [r3, #0]
 8009998:	1d08      	adds	r0, r1, #4
 800999a:	6018      	str	r0, [r3, #0]
 800999c:	062e      	lsls	r6, r5, #24
 800999e:	d501      	bpl.n	80099a4 <_printf_i+0xb8>
 80099a0:	680d      	ldr	r5, [r1, #0]
 80099a2:	e003      	b.n	80099ac <_printf_i+0xc0>
 80099a4:	066d      	lsls	r5, r5, #25
 80099a6:	d5fb      	bpl.n	80099a0 <_printf_i+0xb4>
 80099a8:	680d      	ldr	r5, [r1, #0]
 80099aa:	b2ad      	uxth	r5, r5
 80099ac:	4b56      	ldr	r3, [pc, #344]	; (8009b08 <_printf_i+0x21c>)
 80099ae:	270a      	movs	r7, #10
 80099b0:	9303      	str	r3, [sp, #12]
 80099b2:	2a6f      	cmp	r2, #111	; 0x6f
 80099b4:	d117      	bne.n	80099e6 <_printf_i+0xfa>
 80099b6:	2708      	movs	r7, #8
 80099b8:	e015      	b.n	80099e6 <_printf_i+0xfa>
 80099ba:	3145      	adds	r1, #69	; 0x45
 80099bc:	700a      	strb	r2, [r1, #0]
 80099be:	4a52      	ldr	r2, [pc, #328]	; (8009b08 <_printf_i+0x21c>)
 80099c0:	9203      	str	r2, [sp, #12]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	6821      	ldr	r1, [r4, #0]
 80099c6:	ca20      	ldmia	r2!, {r5}
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	0608      	lsls	r0, r1, #24
 80099cc:	d550      	bpl.n	8009a70 <_printf_i+0x184>
 80099ce:	07cb      	lsls	r3, r1, #31
 80099d0:	d502      	bpl.n	80099d8 <_printf_i+0xec>
 80099d2:	2320      	movs	r3, #32
 80099d4:	4319      	orrs	r1, r3
 80099d6:	6021      	str	r1, [r4, #0]
 80099d8:	2710      	movs	r7, #16
 80099da:	2d00      	cmp	r5, #0
 80099dc:	d103      	bne.n	80099e6 <_printf_i+0xfa>
 80099de:	2320      	movs	r3, #32
 80099e0:	6822      	ldr	r2, [r4, #0]
 80099e2:	439a      	bics	r2, r3
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	0023      	movs	r3, r4
 80099e8:	2200      	movs	r2, #0
 80099ea:	3343      	adds	r3, #67	; 0x43
 80099ec:	701a      	strb	r2, [r3, #0]
 80099ee:	6863      	ldr	r3, [r4, #4]
 80099f0:	60a3      	str	r3, [r4, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	db03      	blt.n	80099fe <_printf_i+0x112>
 80099f6:	2204      	movs	r2, #4
 80099f8:	6821      	ldr	r1, [r4, #0]
 80099fa:	4391      	bics	r1, r2
 80099fc:	6021      	str	r1, [r4, #0]
 80099fe:	2d00      	cmp	r5, #0
 8009a00:	d102      	bne.n	8009a08 <_printf_i+0x11c>
 8009a02:	9e04      	ldr	r6, [sp, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00c      	beq.n	8009a22 <_printf_i+0x136>
 8009a08:	9e04      	ldr	r6, [sp, #16]
 8009a0a:	0028      	movs	r0, r5
 8009a0c:	0039      	movs	r1, r7
 8009a0e:	f7f6 fc1d 	bl	800024c <__aeabi_uidivmod>
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	3e01      	subs	r6, #1
 8009a16:	5c5b      	ldrb	r3, [r3, r1]
 8009a18:	7033      	strb	r3, [r6, #0]
 8009a1a:	002b      	movs	r3, r5
 8009a1c:	0005      	movs	r5, r0
 8009a1e:	429f      	cmp	r7, r3
 8009a20:	d9f3      	bls.n	8009a0a <_printf_i+0x11e>
 8009a22:	2f08      	cmp	r7, #8
 8009a24:	d109      	bne.n	8009a3a <_printf_i+0x14e>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	07db      	lsls	r3, r3, #31
 8009a2a:	d506      	bpl.n	8009a3a <_printf_i+0x14e>
 8009a2c:	6863      	ldr	r3, [r4, #4]
 8009a2e:	6922      	ldr	r2, [r4, #16]
 8009a30:	4293      	cmp	r3, r2
 8009a32:	dc02      	bgt.n	8009a3a <_printf_i+0x14e>
 8009a34:	2330      	movs	r3, #48	; 0x30
 8009a36:	3e01      	subs	r6, #1
 8009a38:	7033      	strb	r3, [r6, #0]
 8009a3a:	9b04      	ldr	r3, [sp, #16]
 8009a3c:	1b9b      	subs	r3, r3, r6
 8009a3e:	6123      	str	r3, [r4, #16]
 8009a40:	9b07      	ldr	r3, [sp, #28]
 8009a42:	0021      	movs	r1, r4
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	9805      	ldr	r0, [sp, #20]
 8009a48:	9b06      	ldr	r3, [sp, #24]
 8009a4a:	aa09      	add	r2, sp, #36	; 0x24
 8009a4c:	f7ff fede 	bl	800980c <_printf_common>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d135      	bne.n	8009ac0 <_printf_i+0x1d4>
 8009a54:	2001      	movs	r0, #1
 8009a56:	4240      	negs	r0, r0
 8009a58:	b00b      	add	sp, #44	; 0x2c
 8009a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	6809      	ldr	r1, [r1, #0]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	6022      	str	r2, [r4, #0]
 8009a64:	0022      	movs	r2, r4
 8009a66:	2178      	movs	r1, #120	; 0x78
 8009a68:	3245      	adds	r2, #69	; 0x45
 8009a6a:	7011      	strb	r1, [r2, #0]
 8009a6c:	4a27      	ldr	r2, [pc, #156]	; (8009b0c <_printf_i+0x220>)
 8009a6e:	e7a7      	b.n	80099c0 <_printf_i+0xd4>
 8009a70:	0648      	lsls	r0, r1, #25
 8009a72:	d5ac      	bpl.n	80099ce <_printf_i+0xe2>
 8009a74:	b2ad      	uxth	r5, r5
 8009a76:	e7aa      	b.n	80099ce <_printf_i+0xe2>
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	680d      	ldr	r5, [r1, #0]
 8009a7c:	1d10      	adds	r0, r2, #4
 8009a7e:	6949      	ldr	r1, [r1, #20]
 8009a80:	6018      	str	r0, [r3, #0]
 8009a82:	6813      	ldr	r3, [r2, #0]
 8009a84:	062e      	lsls	r6, r5, #24
 8009a86:	d501      	bpl.n	8009a8c <_printf_i+0x1a0>
 8009a88:	6019      	str	r1, [r3, #0]
 8009a8a:	e002      	b.n	8009a92 <_printf_i+0x1a6>
 8009a8c:	066d      	lsls	r5, r5, #25
 8009a8e:	d5fb      	bpl.n	8009a88 <_printf_i+0x19c>
 8009a90:	8019      	strh	r1, [r3, #0]
 8009a92:	2300      	movs	r3, #0
 8009a94:	9e04      	ldr	r6, [sp, #16]
 8009a96:	6123      	str	r3, [r4, #16]
 8009a98:	e7d2      	b.n	8009a40 <_printf_i+0x154>
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	1d11      	adds	r1, r2, #4
 8009a9e:	6019      	str	r1, [r3, #0]
 8009aa0:	6816      	ldr	r6, [r2, #0]
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	0030      	movs	r0, r6
 8009aa6:	6862      	ldr	r2, [r4, #4]
 8009aa8:	f7ff fad2 	bl	8009050 <memchr>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d001      	beq.n	8009ab4 <_printf_i+0x1c8>
 8009ab0:	1b80      	subs	r0, r0, r6
 8009ab2:	6060      	str	r0, [r4, #4]
 8009ab4:	6863      	ldr	r3, [r4, #4]
 8009ab6:	6123      	str	r3, [r4, #16]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9a04      	ldr	r2, [sp, #16]
 8009abc:	7013      	strb	r3, [r2, #0]
 8009abe:	e7bf      	b.n	8009a40 <_printf_i+0x154>
 8009ac0:	6923      	ldr	r3, [r4, #16]
 8009ac2:	0032      	movs	r2, r6
 8009ac4:	9906      	ldr	r1, [sp, #24]
 8009ac6:	9805      	ldr	r0, [sp, #20]
 8009ac8:	9d07      	ldr	r5, [sp, #28]
 8009aca:	47a8      	blx	r5
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d0c1      	beq.n	8009a54 <_printf_i+0x168>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	079b      	lsls	r3, r3, #30
 8009ad4:	d415      	bmi.n	8009b02 <_printf_i+0x216>
 8009ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad8:	68e0      	ldr	r0, [r4, #12]
 8009ada:	4298      	cmp	r0, r3
 8009adc:	dabc      	bge.n	8009a58 <_printf_i+0x16c>
 8009ade:	0018      	movs	r0, r3
 8009ae0:	e7ba      	b.n	8009a58 <_printf_i+0x16c>
 8009ae2:	0022      	movs	r2, r4
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	9906      	ldr	r1, [sp, #24]
 8009ae8:	9805      	ldr	r0, [sp, #20]
 8009aea:	9e07      	ldr	r6, [sp, #28]
 8009aec:	3219      	adds	r2, #25
 8009aee:	47b0      	blx	r6
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d0af      	beq.n	8009a54 <_printf_i+0x168>
 8009af4:	3501      	adds	r5, #1
 8009af6:	68e3      	ldr	r3, [r4, #12]
 8009af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	42ab      	cmp	r3, r5
 8009afe:	dcf0      	bgt.n	8009ae2 <_printf_i+0x1f6>
 8009b00:	e7e9      	b.n	8009ad6 <_printf_i+0x1ea>
 8009b02:	2500      	movs	r5, #0
 8009b04:	e7f7      	b.n	8009af6 <_printf_i+0x20a>
 8009b06:	46c0      	nop			; (mov r8, r8)
 8009b08:	0800dc82 	.word	0x0800dc82
 8009b0c:	0800dc93 	.word	0x0800dc93

08009b10 <_scanf_float>:
 8009b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b12:	b08b      	sub	sp, #44	; 0x2c
 8009b14:	0015      	movs	r5, r2
 8009b16:	9001      	str	r0, [sp, #4]
 8009b18:	22ae      	movs	r2, #174	; 0xae
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	9306      	str	r3, [sp, #24]
 8009b1e:	688b      	ldr	r3, [r1, #8]
 8009b20:	000e      	movs	r6, r1
 8009b22:	1e59      	subs	r1, r3, #1
 8009b24:	0052      	lsls	r2, r2, #1
 8009b26:	9005      	str	r0, [sp, #20]
 8009b28:	4291      	cmp	r1, r2
 8009b2a:	d905      	bls.n	8009b38 <_scanf_float+0x28>
 8009b2c:	3b5e      	subs	r3, #94	; 0x5e
 8009b2e:	3bff      	subs	r3, #255	; 0xff
 8009b30:	9305      	str	r3, [sp, #20]
 8009b32:	235e      	movs	r3, #94	; 0x5e
 8009b34:	33ff      	adds	r3, #255	; 0xff
 8009b36:	60b3      	str	r3, [r6, #8]
 8009b38:	23f0      	movs	r3, #240	; 0xf0
 8009b3a:	6832      	ldr	r2, [r6, #0]
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	6033      	str	r3, [r6, #0]
 8009b42:	0033      	movs	r3, r6
 8009b44:	2400      	movs	r4, #0
 8009b46:	331c      	adds	r3, #28
 8009b48:	001f      	movs	r7, r3
 8009b4a:	9303      	str	r3, [sp, #12]
 8009b4c:	9402      	str	r4, [sp, #8]
 8009b4e:	9408      	str	r4, [sp, #32]
 8009b50:	9407      	str	r4, [sp, #28]
 8009b52:	9400      	str	r4, [sp, #0]
 8009b54:	9404      	str	r4, [sp, #16]
 8009b56:	68b2      	ldr	r2, [r6, #8]
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	d00a      	beq.n	8009b72 <_scanf_float+0x62>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	2b4e      	cmp	r3, #78	; 0x4e
 8009b62:	d844      	bhi.n	8009bee <_scanf_float+0xde>
 8009b64:	0018      	movs	r0, r3
 8009b66:	2b40      	cmp	r3, #64	; 0x40
 8009b68:	d82c      	bhi.n	8009bc4 <_scanf_float+0xb4>
 8009b6a:	382b      	subs	r0, #43	; 0x2b
 8009b6c:	b2c1      	uxtb	r1, r0
 8009b6e:	290e      	cmp	r1, #14
 8009b70:	d92a      	bls.n	8009bc8 <_scanf_float+0xb8>
 8009b72:	9b00      	ldr	r3, [sp, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <_scanf_float+0x70>
 8009b78:	6832      	ldr	r2, [r6, #0]
 8009b7a:	4ba4      	ldr	r3, [pc, #656]	; (8009e0c <_scanf_float+0x2fc>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	6033      	str	r3, [r6, #0]
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	3b01      	subs	r3, #1
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d900      	bls.n	8009b8a <_scanf_float+0x7a>
 8009b88:	e0f9      	b.n	8009d7e <_scanf_float+0x26e>
 8009b8a:	24be      	movs	r4, #190	; 0xbe
 8009b8c:	0064      	lsls	r4, r4, #1
 8009b8e:	9b03      	ldr	r3, [sp, #12]
 8009b90:	429f      	cmp	r7, r3
 8009b92:	d900      	bls.n	8009b96 <_scanf_float+0x86>
 8009b94:	e0e9      	b.n	8009d6a <_scanf_float+0x25a>
 8009b96:	2301      	movs	r3, #1
 8009b98:	9302      	str	r3, [sp, #8]
 8009b9a:	e185      	b.n	8009ea8 <_scanf_float+0x398>
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	3861      	subs	r0, #97	; 0x61
 8009ba0:	280d      	cmp	r0, #13
 8009ba2:	d8e6      	bhi.n	8009b72 <_scanf_float+0x62>
 8009ba4:	f7f6 fac2 	bl	800012c <__gnu_thumb1_case_shi>
 8009ba8:	ffe50083 	.word	0xffe50083
 8009bac:	ffe5ffe5 	.word	0xffe5ffe5
 8009bb0:	00a200b6 	.word	0x00a200b6
 8009bb4:	ffe5ffe5 	.word	0xffe5ffe5
 8009bb8:	ffe50089 	.word	0xffe50089
 8009bbc:	ffe5ffe5 	.word	0xffe5ffe5
 8009bc0:	0065ffe5 	.word	0x0065ffe5
 8009bc4:	3841      	subs	r0, #65	; 0x41
 8009bc6:	e7eb      	b.n	8009ba0 <_scanf_float+0x90>
 8009bc8:	280e      	cmp	r0, #14
 8009bca:	d8d2      	bhi.n	8009b72 <_scanf_float+0x62>
 8009bcc:	f7f6 faae 	bl	800012c <__gnu_thumb1_case_shi>
 8009bd0:	ffd1004b 	.word	0xffd1004b
 8009bd4:	0098004b 	.word	0x0098004b
 8009bd8:	0020ffd1 	.word	0x0020ffd1
 8009bdc:	00400040 	.word	0x00400040
 8009be0:	00400040 	.word	0x00400040
 8009be4:	00400040 	.word	0x00400040
 8009be8:	00400040 	.word	0x00400040
 8009bec:	0040      	.short	0x0040
 8009bee:	2b6e      	cmp	r3, #110	; 0x6e
 8009bf0:	d809      	bhi.n	8009c06 <_scanf_float+0xf6>
 8009bf2:	2b60      	cmp	r3, #96	; 0x60
 8009bf4:	d8d2      	bhi.n	8009b9c <_scanf_float+0x8c>
 8009bf6:	2b54      	cmp	r3, #84	; 0x54
 8009bf8:	d07d      	beq.n	8009cf6 <_scanf_float+0x1e6>
 8009bfa:	2b59      	cmp	r3, #89	; 0x59
 8009bfc:	d1b9      	bne.n	8009b72 <_scanf_float+0x62>
 8009bfe:	2c07      	cmp	r4, #7
 8009c00:	d1b7      	bne.n	8009b72 <_scanf_float+0x62>
 8009c02:	2408      	movs	r4, #8
 8009c04:	e02c      	b.n	8009c60 <_scanf_float+0x150>
 8009c06:	2b74      	cmp	r3, #116	; 0x74
 8009c08:	d075      	beq.n	8009cf6 <_scanf_float+0x1e6>
 8009c0a:	2b79      	cmp	r3, #121	; 0x79
 8009c0c:	d0f7      	beq.n	8009bfe <_scanf_float+0xee>
 8009c0e:	e7b0      	b.n	8009b72 <_scanf_float+0x62>
 8009c10:	6831      	ldr	r1, [r6, #0]
 8009c12:	05c8      	lsls	r0, r1, #23
 8009c14:	d51c      	bpl.n	8009c50 <_scanf_float+0x140>
 8009c16:	2380      	movs	r3, #128	; 0x80
 8009c18:	4399      	bics	r1, r3
 8009c1a:	9b00      	ldr	r3, [sp, #0]
 8009c1c:	6031      	str	r1, [r6, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	9b05      	ldr	r3, [sp, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d003      	beq.n	8009c30 <_scanf_float+0x120>
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	9305      	str	r3, [sp, #20]
 8009c2e:	60b2      	str	r2, [r6, #8]
 8009c30:	68b3      	ldr	r3, [r6, #8]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	60b3      	str	r3, [r6, #8]
 8009c36:	6933      	ldr	r3, [r6, #16]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	6133      	str	r3, [r6, #16]
 8009c3c:	686b      	ldr	r3, [r5, #4]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	606b      	str	r3, [r5, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dc00      	bgt.n	8009c48 <_scanf_float+0x138>
 8009c46:	e086      	b.n	8009d56 <_scanf_float+0x246>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	602b      	str	r3, [r5, #0]
 8009c4e:	e782      	b.n	8009b56 <_scanf_float+0x46>
 8009c50:	9a02      	ldr	r2, [sp, #8]
 8009c52:	1912      	adds	r2, r2, r4
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	d18c      	bne.n	8009b72 <_scanf_float+0x62>
 8009c58:	4a6d      	ldr	r2, [pc, #436]	; (8009e10 <_scanf_float+0x300>)
 8009c5a:	6831      	ldr	r1, [r6, #0]
 8009c5c:	400a      	ands	r2, r1
 8009c5e:	6032      	str	r2, [r6, #0]
 8009c60:	703b      	strb	r3, [r7, #0]
 8009c62:	3701      	adds	r7, #1
 8009c64:	e7e4      	b.n	8009c30 <_scanf_float+0x120>
 8009c66:	2180      	movs	r1, #128	; 0x80
 8009c68:	6832      	ldr	r2, [r6, #0]
 8009c6a:	420a      	tst	r2, r1
 8009c6c:	d081      	beq.n	8009b72 <_scanf_float+0x62>
 8009c6e:	438a      	bics	r2, r1
 8009c70:	e7f5      	b.n	8009c5e <_scanf_float+0x14e>
 8009c72:	9a02      	ldr	r2, [sp, #8]
 8009c74:	2a00      	cmp	r2, #0
 8009c76:	d10f      	bne.n	8009c98 <_scanf_float+0x188>
 8009c78:	9a00      	ldr	r2, [sp, #0]
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d10f      	bne.n	8009c9e <_scanf_float+0x18e>
 8009c7e:	6832      	ldr	r2, [r6, #0]
 8009c80:	21e0      	movs	r1, #224	; 0xe0
 8009c82:	0010      	movs	r0, r2
 8009c84:	00c9      	lsls	r1, r1, #3
 8009c86:	4008      	ands	r0, r1
 8009c88:	4288      	cmp	r0, r1
 8009c8a:	d108      	bne.n	8009c9e <_scanf_float+0x18e>
 8009c8c:	4961      	ldr	r1, [pc, #388]	; (8009e14 <_scanf_float+0x304>)
 8009c8e:	400a      	ands	r2, r1
 8009c90:	6032      	str	r2, [r6, #0]
 8009c92:	2201      	movs	r2, #1
 8009c94:	9202      	str	r2, [sp, #8]
 8009c96:	e7e3      	b.n	8009c60 <_scanf_float+0x150>
 8009c98:	9a02      	ldr	r2, [sp, #8]
 8009c9a:	2a02      	cmp	r2, #2
 8009c9c:	d059      	beq.n	8009d52 <_scanf_float+0x242>
 8009c9e:	2c01      	cmp	r4, #1
 8009ca0:	d002      	beq.n	8009ca8 <_scanf_float+0x198>
 8009ca2:	2c04      	cmp	r4, #4
 8009ca4:	d000      	beq.n	8009ca8 <_scanf_float+0x198>
 8009ca6:	e764      	b.n	8009b72 <_scanf_float+0x62>
 8009ca8:	3401      	adds	r4, #1
 8009caa:	b2e4      	uxtb	r4, r4
 8009cac:	e7d8      	b.n	8009c60 <_scanf_float+0x150>
 8009cae:	9a02      	ldr	r2, [sp, #8]
 8009cb0:	2a01      	cmp	r2, #1
 8009cb2:	d000      	beq.n	8009cb6 <_scanf_float+0x1a6>
 8009cb4:	e75d      	b.n	8009b72 <_scanf_float+0x62>
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	e7ec      	b.n	8009c94 <_scanf_float+0x184>
 8009cba:	2c00      	cmp	r4, #0
 8009cbc:	d110      	bne.n	8009ce0 <_scanf_float+0x1d0>
 8009cbe:	9a00      	ldr	r2, [sp, #0]
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	d000      	beq.n	8009cc6 <_scanf_float+0x1b6>
 8009cc4:	e758      	b.n	8009b78 <_scanf_float+0x68>
 8009cc6:	6832      	ldr	r2, [r6, #0]
 8009cc8:	21e0      	movs	r1, #224	; 0xe0
 8009cca:	0010      	movs	r0, r2
 8009ccc:	00c9      	lsls	r1, r1, #3
 8009cce:	4008      	ands	r0, r1
 8009cd0:	4288      	cmp	r0, r1
 8009cd2:	d000      	beq.n	8009cd6 <_scanf_float+0x1c6>
 8009cd4:	e754      	b.n	8009b80 <_scanf_float+0x70>
 8009cd6:	494f      	ldr	r1, [pc, #316]	; (8009e14 <_scanf_float+0x304>)
 8009cd8:	3401      	adds	r4, #1
 8009cda:	400a      	ands	r2, r1
 8009cdc:	6032      	str	r2, [r6, #0]
 8009cde:	e7bf      	b.n	8009c60 <_scanf_float+0x150>
 8009ce0:	21fd      	movs	r1, #253	; 0xfd
 8009ce2:	1ee2      	subs	r2, r4, #3
 8009ce4:	420a      	tst	r2, r1
 8009ce6:	d000      	beq.n	8009cea <_scanf_float+0x1da>
 8009ce8:	e743      	b.n	8009b72 <_scanf_float+0x62>
 8009cea:	e7dd      	b.n	8009ca8 <_scanf_float+0x198>
 8009cec:	2c02      	cmp	r4, #2
 8009cee:	d000      	beq.n	8009cf2 <_scanf_float+0x1e2>
 8009cf0:	e73f      	b.n	8009b72 <_scanf_float+0x62>
 8009cf2:	2403      	movs	r4, #3
 8009cf4:	e7b4      	b.n	8009c60 <_scanf_float+0x150>
 8009cf6:	2c06      	cmp	r4, #6
 8009cf8:	d000      	beq.n	8009cfc <_scanf_float+0x1ec>
 8009cfa:	e73a      	b.n	8009b72 <_scanf_float+0x62>
 8009cfc:	2407      	movs	r4, #7
 8009cfe:	e7af      	b.n	8009c60 <_scanf_float+0x150>
 8009d00:	6832      	ldr	r2, [r6, #0]
 8009d02:	0591      	lsls	r1, r2, #22
 8009d04:	d400      	bmi.n	8009d08 <_scanf_float+0x1f8>
 8009d06:	e734      	b.n	8009b72 <_scanf_float+0x62>
 8009d08:	4943      	ldr	r1, [pc, #268]	; (8009e18 <_scanf_float+0x308>)
 8009d0a:	400a      	ands	r2, r1
 8009d0c:	6032      	str	r2, [r6, #0]
 8009d0e:	9a00      	ldr	r2, [sp, #0]
 8009d10:	9204      	str	r2, [sp, #16]
 8009d12:	e7a5      	b.n	8009c60 <_scanf_float+0x150>
 8009d14:	21a0      	movs	r1, #160	; 0xa0
 8009d16:	2080      	movs	r0, #128	; 0x80
 8009d18:	6832      	ldr	r2, [r6, #0]
 8009d1a:	00c9      	lsls	r1, r1, #3
 8009d1c:	4011      	ands	r1, r2
 8009d1e:	00c0      	lsls	r0, r0, #3
 8009d20:	4281      	cmp	r1, r0
 8009d22:	d006      	beq.n	8009d32 <_scanf_float+0x222>
 8009d24:	4202      	tst	r2, r0
 8009d26:	d100      	bne.n	8009d2a <_scanf_float+0x21a>
 8009d28:	e723      	b.n	8009b72 <_scanf_float+0x62>
 8009d2a:	9900      	ldr	r1, [sp, #0]
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	d100      	bne.n	8009d32 <_scanf_float+0x222>
 8009d30:	e726      	b.n	8009b80 <_scanf_float+0x70>
 8009d32:	0591      	lsls	r1, r2, #22
 8009d34:	d404      	bmi.n	8009d40 <_scanf_float+0x230>
 8009d36:	9900      	ldr	r1, [sp, #0]
 8009d38:	9804      	ldr	r0, [sp, #16]
 8009d3a:	9708      	str	r7, [sp, #32]
 8009d3c:	1a09      	subs	r1, r1, r0
 8009d3e:	9107      	str	r1, [sp, #28]
 8009d40:	4934      	ldr	r1, [pc, #208]	; (8009e14 <_scanf_float+0x304>)
 8009d42:	400a      	ands	r2, r1
 8009d44:	21c0      	movs	r1, #192	; 0xc0
 8009d46:	0049      	lsls	r1, r1, #1
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	6032      	str	r2, [r6, #0]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	9200      	str	r2, [sp, #0]
 8009d50:	e786      	b.n	8009c60 <_scanf_float+0x150>
 8009d52:	2203      	movs	r2, #3
 8009d54:	e79e      	b.n	8009c94 <_scanf_float+0x184>
 8009d56:	23c0      	movs	r3, #192	; 0xc0
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	0029      	movs	r1, r5
 8009d5c:	58f3      	ldr	r3, [r6, r3]
 8009d5e:	9801      	ldr	r0, [sp, #4]
 8009d60:	4798      	blx	r3
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d100      	bne.n	8009d68 <_scanf_float+0x258>
 8009d66:	e6f6      	b.n	8009b56 <_scanf_float+0x46>
 8009d68:	e703      	b.n	8009b72 <_scanf_float+0x62>
 8009d6a:	3f01      	subs	r7, #1
 8009d6c:	5933      	ldr	r3, [r6, r4]
 8009d6e:	002a      	movs	r2, r5
 8009d70:	7839      	ldrb	r1, [r7, #0]
 8009d72:	9801      	ldr	r0, [sp, #4]
 8009d74:	4798      	blx	r3
 8009d76:	6933      	ldr	r3, [r6, #16]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	6133      	str	r3, [r6, #16]
 8009d7c:	e707      	b.n	8009b8e <_scanf_float+0x7e>
 8009d7e:	1e63      	subs	r3, r4, #1
 8009d80:	2b06      	cmp	r3, #6
 8009d82:	d80e      	bhi.n	8009da2 <_scanf_float+0x292>
 8009d84:	9702      	str	r7, [sp, #8]
 8009d86:	2c02      	cmp	r4, #2
 8009d88:	d920      	bls.n	8009dcc <_scanf_float+0x2bc>
 8009d8a:	1be3      	subs	r3, r4, r7
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	9305      	str	r3, [sp, #20]
 8009d90:	9b02      	ldr	r3, [sp, #8]
 8009d92:	9a05      	ldr	r2, [sp, #20]
 8009d94:	189b      	adds	r3, r3, r2
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d827      	bhi.n	8009dec <_scanf_float+0x2dc>
 8009d9c:	3c03      	subs	r4, #3
 8009d9e:	b2e4      	uxtb	r4, r4
 8009da0:	1b3f      	subs	r7, r7, r4
 8009da2:	6833      	ldr	r3, [r6, #0]
 8009da4:	05da      	lsls	r2, r3, #23
 8009da6:	d554      	bpl.n	8009e52 <_scanf_float+0x342>
 8009da8:	055b      	lsls	r3, r3, #21
 8009daa:	d537      	bpl.n	8009e1c <_scanf_float+0x30c>
 8009dac:	24be      	movs	r4, #190	; 0xbe
 8009dae:	0064      	lsls	r4, r4, #1
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	429f      	cmp	r7, r3
 8009db4:	d800      	bhi.n	8009db8 <_scanf_float+0x2a8>
 8009db6:	e6ee      	b.n	8009b96 <_scanf_float+0x86>
 8009db8:	3f01      	subs	r7, #1
 8009dba:	5933      	ldr	r3, [r6, r4]
 8009dbc:	002a      	movs	r2, r5
 8009dbe:	7839      	ldrb	r1, [r7, #0]
 8009dc0:	9801      	ldr	r0, [sp, #4]
 8009dc2:	4798      	blx	r3
 8009dc4:	6933      	ldr	r3, [r6, #16]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	6133      	str	r3, [r6, #16]
 8009dca:	e7f1      	b.n	8009db0 <_scanf_float+0x2a0>
 8009dcc:	24be      	movs	r4, #190	; 0xbe
 8009dce:	0064      	lsls	r4, r4, #1
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	429f      	cmp	r7, r3
 8009dd4:	d800      	bhi.n	8009dd8 <_scanf_float+0x2c8>
 8009dd6:	e6de      	b.n	8009b96 <_scanf_float+0x86>
 8009dd8:	3f01      	subs	r7, #1
 8009dda:	5933      	ldr	r3, [r6, r4]
 8009ddc:	002a      	movs	r2, r5
 8009dde:	7839      	ldrb	r1, [r7, #0]
 8009de0:	9801      	ldr	r0, [sp, #4]
 8009de2:	4798      	blx	r3
 8009de4:	6933      	ldr	r3, [r6, #16]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	6133      	str	r3, [r6, #16]
 8009dea:	e7f1      	b.n	8009dd0 <_scanf_float+0x2c0>
 8009dec:	9b02      	ldr	r3, [sp, #8]
 8009dee:	002a      	movs	r2, r5
 8009df0:	3b01      	subs	r3, #1
 8009df2:	7819      	ldrb	r1, [r3, #0]
 8009df4:	9302      	str	r3, [sp, #8]
 8009df6:	23be      	movs	r3, #190	; 0xbe
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	58f3      	ldr	r3, [r6, r3]
 8009dfc:	9801      	ldr	r0, [sp, #4]
 8009dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009e00:	4798      	blx	r3
 8009e02:	6933      	ldr	r3, [r6, #16]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	6133      	str	r3, [r6, #16]
 8009e08:	e7c2      	b.n	8009d90 <_scanf_float+0x280>
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	fffffeff 	.word	0xfffffeff
 8009e10:	fffffe7f 	.word	0xfffffe7f
 8009e14:	fffff87f 	.word	0xfffff87f
 8009e18:	fffffd7f 	.word	0xfffffd7f
 8009e1c:	6933      	ldr	r3, [r6, #16]
 8009e1e:	1e7c      	subs	r4, r7, #1
 8009e20:	7821      	ldrb	r1, [r4, #0]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	6133      	str	r3, [r6, #16]
 8009e26:	2965      	cmp	r1, #101	; 0x65
 8009e28:	d00c      	beq.n	8009e44 <_scanf_float+0x334>
 8009e2a:	2945      	cmp	r1, #69	; 0x45
 8009e2c:	d00a      	beq.n	8009e44 <_scanf_float+0x334>
 8009e2e:	23be      	movs	r3, #190	; 0xbe
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	58f3      	ldr	r3, [r6, r3]
 8009e34:	002a      	movs	r2, r5
 8009e36:	9801      	ldr	r0, [sp, #4]
 8009e38:	4798      	blx	r3
 8009e3a:	6933      	ldr	r3, [r6, #16]
 8009e3c:	1ebc      	subs	r4, r7, #2
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	7821      	ldrb	r1, [r4, #0]
 8009e42:	6133      	str	r3, [r6, #16]
 8009e44:	23be      	movs	r3, #190	; 0xbe
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	002a      	movs	r2, r5
 8009e4a:	58f3      	ldr	r3, [r6, r3]
 8009e4c:	9801      	ldr	r0, [sp, #4]
 8009e4e:	4798      	blx	r3
 8009e50:	0027      	movs	r7, r4
 8009e52:	6832      	ldr	r2, [r6, #0]
 8009e54:	2310      	movs	r3, #16
 8009e56:	0011      	movs	r1, r2
 8009e58:	4019      	ands	r1, r3
 8009e5a:	9102      	str	r1, [sp, #8]
 8009e5c:	421a      	tst	r2, r3
 8009e5e:	d158      	bne.n	8009f12 <_scanf_float+0x402>
 8009e60:	23c0      	movs	r3, #192	; 0xc0
 8009e62:	7039      	strb	r1, [r7, #0]
 8009e64:	6832      	ldr	r2, [r6, #0]
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	4013      	ands	r3, r2
 8009e6a:	2280      	movs	r2, #128	; 0x80
 8009e6c:	00d2      	lsls	r2, r2, #3
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d11d      	bne.n	8009eae <_scanf_float+0x39e>
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	9a00      	ldr	r2, [sp, #0]
 8009e76:	9900      	ldr	r1, [sp, #0]
 8009e78:	1a9a      	subs	r2, r3, r2
 8009e7a:	428b      	cmp	r3, r1
 8009e7c:	d124      	bne.n	8009ec8 <_scanf_float+0x3b8>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	9903      	ldr	r1, [sp, #12]
 8009e82:	9801      	ldr	r0, [sp, #4]
 8009e84:	f000 ff08 	bl	800ac98 <_strtod_r>
 8009e88:	9b06      	ldr	r3, [sp, #24]
 8009e8a:	000d      	movs	r5, r1
 8009e8c:	6831      	ldr	r1, [r6, #0]
 8009e8e:	0004      	movs	r4, r0
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	078a      	lsls	r2, r1, #30
 8009e94:	d525      	bpl.n	8009ee2 <_scanf_float+0x3d2>
 8009e96:	1d1a      	adds	r2, r3, #4
 8009e98:	9906      	ldr	r1, [sp, #24]
 8009e9a:	600a      	str	r2, [r1, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	601c      	str	r4, [r3, #0]
 8009ea0:	605d      	str	r5, [r3, #4]
 8009ea2:	68f3      	ldr	r3, [r6, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	60f3      	str	r3, [r6, #12]
 8009ea8:	9802      	ldr	r0, [sp, #8]
 8009eaa:	b00b      	add	sp, #44	; 0x2c
 8009eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eae:	9b07      	ldr	r3, [sp, #28]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0e4      	beq.n	8009e7e <_scanf_float+0x36e>
 8009eb4:	9b08      	ldr	r3, [sp, #32]
 8009eb6:	9a02      	ldr	r2, [sp, #8]
 8009eb8:	1c59      	adds	r1, r3, #1
 8009eba:	9801      	ldr	r0, [sp, #4]
 8009ebc:	230a      	movs	r3, #10
 8009ebe:	f000 ff81 	bl	800adc4 <_strtol_r>
 8009ec2:	9b07      	ldr	r3, [sp, #28]
 8009ec4:	9f08      	ldr	r7, [sp, #32]
 8009ec6:	1ac2      	subs	r2, r0, r3
 8009ec8:	0033      	movs	r3, r6
 8009eca:	3370      	adds	r3, #112	; 0x70
 8009ecc:	33ff      	adds	r3, #255	; 0xff
 8009ece:	429f      	cmp	r7, r3
 8009ed0:	d302      	bcc.n	8009ed8 <_scanf_float+0x3c8>
 8009ed2:	0037      	movs	r7, r6
 8009ed4:	376f      	adds	r7, #111	; 0x6f
 8009ed6:	37ff      	adds	r7, #255	; 0xff
 8009ed8:	0038      	movs	r0, r7
 8009eda:	490f      	ldr	r1, [pc, #60]	; (8009f18 <_scanf_float+0x408>)
 8009edc:	f000 f880 	bl	8009fe0 <siprintf>
 8009ee0:	e7cd      	b.n	8009e7e <_scanf_float+0x36e>
 8009ee2:	1d1a      	adds	r2, r3, #4
 8009ee4:	0749      	lsls	r1, r1, #29
 8009ee6:	d4d7      	bmi.n	8009e98 <_scanf_float+0x388>
 8009ee8:	9906      	ldr	r1, [sp, #24]
 8009eea:	0020      	movs	r0, r4
 8009eec:	600a      	str	r2, [r1, #0]
 8009eee:	681f      	ldr	r7, [r3, #0]
 8009ef0:	0022      	movs	r2, r4
 8009ef2:	002b      	movs	r3, r5
 8009ef4:	0029      	movs	r1, r5
 8009ef6:	f7f8 f8b5 	bl	8002064 <__aeabi_dcmpun>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d004      	beq.n	8009f08 <_scanf_float+0x3f8>
 8009efe:	4807      	ldr	r0, [pc, #28]	; (8009f1c <_scanf_float+0x40c>)
 8009f00:	f000 f820 	bl	8009f44 <nanf>
 8009f04:	6038      	str	r0, [r7, #0]
 8009f06:	e7cc      	b.n	8009ea2 <_scanf_float+0x392>
 8009f08:	0020      	movs	r0, r4
 8009f0a:	0029      	movs	r1, r5
 8009f0c:	f7f8 f954 	bl	80021b8 <__aeabi_d2f>
 8009f10:	e7f8      	b.n	8009f04 <_scanf_float+0x3f4>
 8009f12:	2300      	movs	r3, #0
 8009f14:	e640      	b.n	8009b98 <_scanf_float+0x88>
 8009f16:	46c0      	nop			; (mov r8, r8)
 8009f18:	0800dca4 	.word	0x0800dca4
 8009f1c:	0800e0c0 	.word	0x0800e0c0

08009f20 <_sbrk_r>:
 8009f20:	2300      	movs	r3, #0
 8009f22:	b570      	push	{r4, r5, r6, lr}
 8009f24:	4d06      	ldr	r5, [pc, #24]	; (8009f40 <_sbrk_r+0x20>)
 8009f26:	0004      	movs	r4, r0
 8009f28:	0008      	movs	r0, r1
 8009f2a:	602b      	str	r3, [r5, #0]
 8009f2c:	f7f8 fef2 	bl	8002d14 <_sbrk>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d103      	bne.n	8009f3c <_sbrk_r+0x1c>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d000      	beq.n	8009f3c <_sbrk_r+0x1c>
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	bd70      	pop	{r4, r5, r6, pc}
 8009f3e:	46c0      	nop			; (mov r8, r8)
 8009f40:	200004b4 	.word	0x200004b4

08009f44 <nanf>:
 8009f44:	4800      	ldr	r0, [pc, #0]	; (8009f48 <nanf+0x4>)
 8009f46:	4770      	bx	lr
 8009f48:	7fc00000 	.word	0x7fc00000

08009f4c <_raise_r>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	0004      	movs	r4, r0
 8009f50:	000d      	movs	r5, r1
 8009f52:	291f      	cmp	r1, #31
 8009f54:	d904      	bls.n	8009f60 <_raise_r+0x14>
 8009f56:	2316      	movs	r3, #22
 8009f58:	6003      	str	r3, [r0, #0]
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	4240      	negs	r0, r0
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
 8009f60:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d004      	beq.n	8009f70 <_raise_r+0x24>
 8009f66:	008a      	lsls	r2, r1, #2
 8009f68:	189b      	adds	r3, r3, r2
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	d108      	bne.n	8009f82 <_raise_r+0x36>
 8009f70:	0020      	movs	r0, r4
 8009f72:	f000 f831 	bl	8009fd8 <_getpid_r>
 8009f76:	002a      	movs	r2, r5
 8009f78:	0001      	movs	r1, r0
 8009f7a:	0020      	movs	r0, r4
 8009f7c:	f000 f81a 	bl	8009fb4 <_kill_r>
 8009f80:	e7ed      	b.n	8009f5e <_raise_r+0x12>
 8009f82:	2000      	movs	r0, #0
 8009f84:	2a01      	cmp	r2, #1
 8009f86:	d0ea      	beq.n	8009f5e <_raise_r+0x12>
 8009f88:	1c51      	adds	r1, r2, #1
 8009f8a:	d103      	bne.n	8009f94 <_raise_r+0x48>
 8009f8c:	2316      	movs	r3, #22
 8009f8e:	3001      	adds	r0, #1
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	e7e4      	b.n	8009f5e <_raise_r+0x12>
 8009f94:	2400      	movs	r4, #0
 8009f96:	0028      	movs	r0, r5
 8009f98:	601c      	str	r4, [r3, #0]
 8009f9a:	4790      	blx	r2
 8009f9c:	0020      	movs	r0, r4
 8009f9e:	e7de      	b.n	8009f5e <_raise_r+0x12>

08009fa0 <raise>:
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	4b03      	ldr	r3, [pc, #12]	; (8009fb0 <raise+0x10>)
 8009fa4:	0001      	movs	r1, r0
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	f7ff ffd0 	bl	8009f4c <_raise_r>
 8009fac:	bd10      	pop	{r4, pc}
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	20000008 	.word	0x20000008

08009fb4 <_kill_r>:
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	b570      	push	{r4, r5, r6, lr}
 8009fb8:	4d06      	ldr	r5, [pc, #24]	; (8009fd4 <_kill_r+0x20>)
 8009fba:	0004      	movs	r4, r0
 8009fbc:	0008      	movs	r0, r1
 8009fbe:	0011      	movs	r1, r2
 8009fc0:	602b      	str	r3, [r5, #0]
 8009fc2:	f7f8 fe25 	bl	8002c10 <_kill>
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	d103      	bne.n	8009fd2 <_kill_r+0x1e>
 8009fca:	682b      	ldr	r3, [r5, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d000      	beq.n	8009fd2 <_kill_r+0x1e>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	200004b4 	.word	0x200004b4

08009fd8 <_getpid_r>:
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	f7f8 fe13 	bl	8002c04 <_getpid>
 8009fde:	bd10      	pop	{r4, pc}

08009fe0 <siprintf>:
 8009fe0:	b40e      	push	{r1, r2, r3}
 8009fe2:	b500      	push	{lr}
 8009fe4:	490b      	ldr	r1, [pc, #44]	; (800a014 <siprintf+0x34>)
 8009fe6:	b09c      	sub	sp, #112	; 0x70
 8009fe8:	ab1d      	add	r3, sp, #116	; 0x74
 8009fea:	9002      	str	r0, [sp, #8]
 8009fec:	9006      	str	r0, [sp, #24]
 8009fee:	9107      	str	r1, [sp, #28]
 8009ff0:	9104      	str	r1, [sp, #16]
 8009ff2:	4809      	ldr	r0, [pc, #36]	; (800a018 <siprintf+0x38>)
 8009ff4:	4909      	ldr	r1, [pc, #36]	; (800a01c <siprintf+0x3c>)
 8009ff6:	cb04      	ldmia	r3!, {r2}
 8009ff8:	9105      	str	r1, [sp, #20]
 8009ffa:	6800      	ldr	r0, [r0, #0]
 8009ffc:	a902      	add	r1, sp, #8
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	f002 fe60 	bl	800ccc4 <_svfiprintf_r>
 800a004:	2300      	movs	r3, #0
 800a006:	9a02      	ldr	r2, [sp, #8]
 800a008:	7013      	strb	r3, [r2, #0]
 800a00a:	b01c      	add	sp, #112	; 0x70
 800a00c:	bc08      	pop	{r3}
 800a00e:	b003      	add	sp, #12
 800a010:	4718      	bx	r3
 800a012:	46c0      	nop			; (mov r8, r8)
 800a014:	7fffffff 	.word	0x7fffffff
 800a018:	20000008 	.word	0x20000008
 800a01c:	ffff0208 	.word	0xffff0208

0800a020 <sulp>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	0016      	movs	r6, r2
 800a024:	000d      	movs	r5, r1
 800a026:	f002 fc99 	bl	800c95c <__ulp>
 800a02a:	2e00      	cmp	r6, #0
 800a02c:	d00d      	beq.n	800a04a <sulp+0x2a>
 800a02e:	236b      	movs	r3, #107	; 0x6b
 800a030:	006a      	lsls	r2, r5, #1
 800a032:	0d52      	lsrs	r2, r2, #21
 800a034:	1a9b      	subs	r3, r3, r2
 800a036:	2b00      	cmp	r3, #0
 800a038:	dd07      	ble.n	800a04a <sulp+0x2a>
 800a03a:	2400      	movs	r4, #0
 800a03c:	4a03      	ldr	r2, [pc, #12]	; (800a04c <sulp+0x2c>)
 800a03e:	051b      	lsls	r3, r3, #20
 800a040:	189d      	adds	r5, r3, r2
 800a042:	002b      	movs	r3, r5
 800a044:	0022      	movs	r2, r4
 800a046:	f7f7 fa0f 	bl	8001468 <__aeabi_dmul>
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	3ff00000 	.word	0x3ff00000

0800a050 <_strtod_l>:
 800a050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a052:	001d      	movs	r5, r3
 800a054:	2300      	movs	r3, #0
 800a056:	b0a7      	sub	sp, #156	; 0x9c
 800a058:	9322      	str	r3, [sp, #136]	; 0x88
 800a05a:	4bae      	ldr	r3, [pc, #696]	; (800a314 <_strtod_l+0x2c4>)
 800a05c:	9005      	str	r0, [sp, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	9108      	str	r1, [sp, #32]
 800a062:	0018      	movs	r0, r3
 800a064:	9307      	str	r3, [sp, #28]
 800a066:	921d      	str	r2, [sp, #116]	; 0x74
 800a068:	f7f6 f84e 	bl	8000108 <strlen>
 800a06c:	2600      	movs	r6, #0
 800a06e:	0004      	movs	r4, r0
 800a070:	2700      	movs	r7, #0
 800a072:	9b08      	ldr	r3, [sp, #32]
 800a074:	9321      	str	r3, [sp, #132]	; 0x84
 800a076:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a078:	7813      	ldrb	r3, [r2, #0]
 800a07a:	2b2b      	cmp	r3, #43	; 0x2b
 800a07c:	d058      	beq.n	800a130 <_strtod_l+0xe0>
 800a07e:	d844      	bhi.n	800a10a <_strtod_l+0xba>
 800a080:	2b0d      	cmp	r3, #13
 800a082:	d83d      	bhi.n	800a100 <_strtod_l+0xb0>
 800a084:	2b08      	cmp	r3, #8
 800a086:	d83d      	bhi.n	800a104 <_strtod_l+0xb4>
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d047      	beq.n	800a11c <_strtod_l+0xcc>
 800a08c:	2300      	movs	r3, #0
 800a08e:	9310      	str	r3, [sp, #64]	; 0x40
 800a090:	2200      	movs	r2, #0
 800a092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a094:	920a      	str	r2, [sp, #40]	; 0x28
 800a096:	9306      	str	r3, [sp, #24]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b30      	cmp	r3, #48	; 0x30
 800a09c:	d000      	beq.n	800a0a0 <_strtod_l+0x50>
 800a09e:	e083      	b.n	800a1a8 <_strtod_l+0x158>
 800a0a0:	9b06      	ldr	r3, [sp, #24]
 800a0a2:	3220      	adds	r2, #32
 800a0a4:	785b      	ldrb	r3, [r3, #1]
 800a0a6:	4393      	bics	r3, r2
 800a0a8:	2b58      	cmp	r3, #88	; 0x58
 800a0aa:	d000      	beq.n	800a0ae <_strtod_l+0x5e>
 800a0ac:	e072      	b.n	800a194 <_strtod_l+0x144>
 800a0ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0b0:	9502      	str	r5, [sp, #8]
 800a0b2:	9301      	str	r3, [sp, #4]
 800a0b4:	ab22      	add	r3, sp, #136	; 0x88
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	4a97      	ldr	r2, [pc, #604]	; (800a318 <_strtod_l+0x2c8>)
 800a0ba:	ab23      	add	r3, sp, #140	; 0x8c
 800a0bc:	9805      	ldr	r0, [sp, #20]
 800a0be:	a921      	add	r1, sp, #132	; 0x84
 800a0c0:	f001 fd98 	bl	800bbf4 <__gethex>
 800a0c4:	2307      	movs	r3, #7
 800a0c6:	0005      	movs	r5, r0
 800a0c8:	0004      	movs	r4, r0
 800a0ca:	401d      	ands	r5, r3
 800a0cc:	4218      	tst	r0, r3
 800a0ce:	d006      	beq.n	800a0de <_strtod_l+0x8e>
 800a0d0:	2d06      	cmp	r5, #6
 800a0d2:	d12f      	bne.n	800a134 <_strtod_l+0xe4>
 800a0d4:	9b06      	ldr	r3, [sp, #24]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	9321      	str	r3, [sp, #132]	; 0x84
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9310      	str	r3, [sp, #64]	; 0x40
 800a0de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <_strtod_l+0x9a>
 800a0e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0e8:	601a      	str	r2, [r3, #0]
 800a0ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d01c      	beq.n	800a12a <_strtod_l+0xda>
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	0032      	movs	r2, r6
 800a0f4:	061b      	lsls	r3, r3, #24
 800a0f6:	18fb      	adds	r3, r7, r3
 800a0f8:	0010      	movs	r0, r2
 800a0fa:	0019      	movs	r1, r3
 800a0fc:	b027      	add	sp, #156	; 0x9c
 800a0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a100:	2b20      	cmp	r3, #32
 800a102:	d1c3      	bne.n	800a08c <_strtod_l+0x3c>
 800a104:	3201      	adds	r2, #1
 800a106:	9221      	str	r2, [sp, #132]	; 0x84
 800a108:	e7b5      	b.n	800a076 <_strtod_l+0x26>
 800a10a:	2b2d      	cmp	r3, #45	; 0x2d
 800a10c:	d1be      	bne.n	800a08c <_strtod_l+0x3c>
 800a10e:	3b2c      	subs	r3, #44	; 0x2c
 800a110:	9310      	str	r3, [sp, #64]	; 0x40
 800a112:	1c53      	adds	r3, r2, #1
 800a114:	9321      	str	r3, [sp, #132]	; 0x84
 800a116:	7853      	ldrb	r3, [r2, #1]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1b9      	bne.n	800a090 <_strtod_l+0x40>
 800a11c:	9b08      	ldr	r3, [sp, #32]
 800a11e:	9321      	str	r3, [sp, #132]	; 0x84
 800a120:	2300      	movs	r3, #0
 800a122:	9310      	str	r3, [sp, #64]	; 0x40
 800a124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1dc      	bne.n	800a0e4 <_strtod_l+0x94>
 800a12a:	0032      	movs	r2, r6
 800a12c:	003b      	movs	r3, r7
 800a12e:	e7e3      	b.n	800a0f8 <_strtod_l+0xa8>
 800a130:	2300      	movs	r3, #0
 800a132:	e7ed      	b.n	800a110 <_strtod_l+0xc0>
 800a134:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a136:	2a00      	cmp	r2, #0
 800a138:	d007      	beq.n	800a14a <_strtod_l+0xfa>
 800a13a:	2135      	movs	r1, #53	; 0x35
 800a13c:	a824      	add	r0, sp, #144	; 0x90
 800a13e:	f002 fd0c 	bl	800cb5a <__copybits>
 800a142:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a144:	9805      	ldr	r0, [sp, #20]
 800a146:	f002 f8c7 	bl	800c2d8 <_Bfree>
 800a14a:	1e68      	subs	r0, r5, #1
 800a14c:	2805      	cmp	r0, #5
 800a14e:	d806      	bhi.n	800a15e <_strtod_l+0x10e>
 800a150:	f7f5 ffe2 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a154:	1c190b0e 	.word	0x1c190b0e
 800a158:	030e      	.short	0x030e
 800a15a:	2700      	movs	r7, #0
 800a15c:	003e      	movs	r6, r7
 800a15e:	0723      	lsls	r3, r4, #28
 800a160:	d5bd      	bpl.n	800a0de <_strtod_l+0x8e>
 800a162:	2380      	movs	r3, #128	; 0x80
 800a164:	061b      	lsls	r3, r3, #24
 800a166:	431f      	orrs	r7, r3
 800a168:	e7b9      	b.n	800a0de <_strtod_l+0x8e>
 800a16a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a16c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a16e:	e7f6      	b.n	800a15e <_strtod_l+0x10e>
 800a170:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a172:	4a6a      	ldr	r2, [pc, #424]	; (800a31c <_strtod_l+0x2cc>)
 800a174:	496a      	ldr	r1, [pc, #424]	; (800a320 <_strtod_l+0x2d0>)
 800a176:	401a      	ands	r2, r3
 800a178:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a17a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a17c:	185b      	adds	r3, r3, r1
 800a17e:	051b      	lsls	r3, r3, #20
 800a180:	431a      	orrs	r2, r3
 800a182:	0017      	movs	r7, r2
 800a184:	e7eb      	b.n	800a15e <_strtod_l+0x10e>
 800a186:	2600      	movs	r6, #0
 800a188:	4f66      	ldr	r7, [pc, #408]	; (800a324 <_strtod_l+0x2d4>)
 800a18a:	e7e8      	b.n	800a15e <_strtod_l+0x10e>
 800a18c:	2601      	movs	r6, #1
 800a18e:	4f66      	ldr	r7, [pc, #408]	; (800a328 <_strtod_l+0x2d8>)
 800a190:	4276      	negs	r6, r6
 800a192:	e7e4      	b.n	800a15e <_strtod_l+0x10e>
 800a194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	9221      	str	r2, [sp, #132]	; 0x84
 800a19a:	785b      	ldrb	r3, [r3, #1]
 800a19c:	2b30      	cmp	r3, #48	; 0x30
 800a19e:	d0f9      	beq.n	800a194 <_strtod_l+0x144>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d09c      	beq.n	800a0de <_strtod_l+0x8e>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1aa:	220a      	movs	r2, #10
 800a1ac:	9311      	str	r3, [sp, #68]	; 0x44
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	930e      	str	r3, [sp, #56]	; 0x38
 800a1b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b6:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a1b8:	7805      	ldrb	r5, [r0, #0]
 800a1ba:	002b      	movs	r3, r5
 800a1bc:	3b30      	subs	r3, #48	; 0x30
 800a1be:	b2d9      	uxtb	r1, r3
 800a1c0:	2909      	cmp	r1, #9
 800a1c2:	d927      	bls.n	800a214 <_strtod_l+0x1c4>
 800a1c4:	0022      	movs	r2, r4
 800a1c6:	9907      	ldr	r1, [sp, #28]
 800a1c8:	f002 fe82 	bl	800ced0 <strncmp>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d033      	beq.n	800a238 <_strtod_l+0x1e8>
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	002b      	movs	r3, r5
 800a1d4:	4684      	mov	ip, r0
 800a1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1d8:	900c      	str	r0, [sp, #48]	; 0x30
 800a1da:	9206      	str	r2, [sp, #24]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	0019      	movs	r1, r3
 800a1e0:	4391      	bics	r1, r2
 800a1e2:	000a      	movs	r2, r1
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	9107      	str	r1, [sp, #28]
 800a1e8:	2a45      	cmp	r2, #69	; 0x45
 800a1ea:	d000      	beq.n	800a1ee <_strtod_l+0x19e>
 800a1ec:	e0c5      	b.n	800a37a <_strtod_l+0x32a>
 800a1ee:	9b06      	ldr	r3, [sp, #24]
 800a1f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f2:	4303      	orrs	r3, r0
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	428b      	cmp	r3, r1
 800a1f8:	d090      	beq.n	800a11c <_strtod_l+0xcc>
 800a1fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1fc:	9308      	str	r3, [sp, #32]
 800a1fe:	3301      	adds	r3, #1
 800a200:	9321      	str	r3, [sp, #132]	; 0x84
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	2b2b      	cmp	r3, #43	; 0x2b
 800a208:	d075      	beq.n	800a2f6 <_strtod_l+0x2a6>
 800a20a:	000c      	movs	r4, r1
 800a20c:	2b2d      	cmp	r3, #45	; 0x2d
 800a20e:	d178      	bne.n	800a302 <_strtod_l+0x2b2>
 800a210:	2401      	movs	r4, #1
 800a212:	e071      	b.n	800a2f8 <_strtod_l+0x2a8>
 800a214:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a216:	2908      	cmp	r1, #8
 800a218:	dc09      	bgt.n	800a22e <_strtod_l+0x1de>
 800a21a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a21c:	4351      	muls	r1, r2
 800a21e:	185b      	adds	r3, r3, r1
 800a220:	930b      	str	r3, [sp, #44]	; 0x2c
 800a222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a224:	3001      	adds	r0, #1
 800a226:	3301      	adds	r3, #1
 800a228:	9309      	str	r3, [sp, #36]	; 0x24
 800a22a:	9021      	str	r0, [sp, #132]	; 0x84
 800a22c:	e7c3      	b.n	800a1b6 <_strtod_l+0x166>
 800a22e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a230:	4351      	muls	r1, r2
 800a232:	185b      	adds	r3, r3, r1
 800a234:	930e      	str	r3, [sp, #56]	; 0x38
 800a236:	e7f4      	b.n	800a222 <_strtod_l+0x1d2>
 800a238:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a23a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a23c:	191c      	adds	r4, r3, r4
 800a23e:	9421      	str	r4, [sp, #132]	; 0x84
 800a240:	7823      	ldrb	r3, [r4, #0]
 800a242:	2a00      	cmp	r2, #0
 800a244:	d039      	beq.n	800a2ba <_strtod_l+0x26a>
 800a246:	900c      	str	r0, [sp, #48]	; 0x30
 800a248:	9206      	str	r2, [sp, #24]
 800a24a:	001a      	movs	r2, r3
 800a24c:	3a30      	subs	r2, #48	; 0x30
 800a24e:	2a09      	cmp	r2, #9
 800a250:	d912      	bls.n	800a278 <_strtod_l+0x228>
 800a252:	2201      	movs	r2, #1
 800a254:	4694      	mov	ip, r2
 800a256:	e7c1      	b.n	800a1dc <_strtod_l+0x18c>
 800a258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a25a:	3001      	adds	r0, #1
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	9221      	str	r2, [sp, #132]	; 0x84
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	2b30      	cmp	r3, #48	; 0x30
 800a264:	d0f8      	beq.n	800a258 <_strtod_l+0x208>
 800a266:	001a      	movs	r2, r3
 800a268:	3a31      	subs	r2, #49	; 0x31
 800a26a:	2a08      	cmp	r2, #8
 800a26c:	d83e      	bhi.n	800a2ec <_strtod_l+0x29c>
 800a26e:	900c      	str	r0, [sp, #48]	; 0x30
 800a270:	2000      	movs	r0, #0
 800a272:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a274:	9006      	str	r0, [sp, #24]
 800a276:	9211      	str	r2, [sp, #68]	; 0x44
 800a278:	001a      	movs	r2, r3
 800a27a:	9906      	ldr	r1, [sp, #24]
 800a27c:	1c44      	adds	r4, r0, #1
 800a27e:	3a30      	subs	r2, #48	; 0x30
 800a280:	2b30      	cmp	r3, #48	; 0x30
 800a282:	d013      	beq.n	800a2ac <_strtod_l+0x25c>
 800a284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a286:	191b      	adds	r3, r3, r4
 800a288:	930c      	str	r3, [sp, #48]	; 0x30
 800a28a:	1844      	adds	r4, r0, r1
 800a28c:	000b      	movs	r3, r1
 800a28e:	210a      	movs	r1, #10
 800a290:	429c      	cmp	r4, r3
 800a292:	d114      	bne.n	800a2be <_strtod_l+0x26e>
 800a294:	9b06      	ldr	r3, [sp, #24]
 800a296:	1c59      	adds	r1, r3, #1
 800a298:	1809      	adds	r1, r1, r0
 800a29a:	1818      	adds	r0, r3, r0
 800a29c:	2808      	cmp	r0, #8
 800a29e:	dc1c      	bgt.n	800a2da <_strtod_l+0x28a>
 800a2a0:	230a      	movs	r3, #10
 800a2a2:	2400      	movs	r4, #0
 800a2a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2a6:	4343      	muls	r3, r0
 800a2a8:	18d3      	adds	r3, r2, r3
 800a2aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2ae:	0020      	movs	r0, r4
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	9221      	str	r2, [sp, #132]	; 0x84
 800a2b4:	785b      	ldrb	r3, [r3, #1]
 800a2b6:	9106      	str	r1, [sp, #24]
 800a2b8:	e7c7      	b.n	800a24a <_strtod_l+0x1fa>
 800a2ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2bc:	e7d1      	b.n	800a262 <_strtod_l+0x212>
 800a2be:	2b08      	cmp	r3, #8
 800a2c0:	dc04      	bgt.n	800a2cc <_strtod_l+0x27c>
 800a2c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a2c4:	434d      	muls	r5, r1
 800a2c6:	950b      	str	r5, [sp, #44]	; 0x2c
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	e7e1      	b.n	800a290 <_strtod_l+0x240>
 800a2cc:	1c5d      	adds	r5, r3, #1
 800a2ce:	2d10      	cmp	r5, #16
 800a2d0:	dcfa      	bgt.n	800a2c8 <_strtod_l+0x278>
 800a2d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a2d4:	434d      	muls	r5, r1
 800a2d6:	950e      	str	r5, [sp, #56]	; 0x38
 800a2d8:	e7f6      	b.n	800a2c8 <_strtod_l+0x278>
 800a2da:	2400      	movs	r4, #0
 800a2dc:	2910      	cmp	r1, #16
 800a2de:	dce5      	bgt.n	800a2ac <_strtod_l+0x25c>
 800a2e0:	230a      	movs	r3, #10
 800a2e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a2e4:	4343      	muls	r3, r0
 800a2e6:	18d3      	adds	r3, r2, r3
 800a2e8:	930e      	str	r3, [sp, #56]	; 0x38
 800a2ea:	e7df      	b.n	800a2ac <_strtod_l+0x25c>
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	920c      	str	r2, [sp, #48]	; 0x30
 800a2f0:	9206      	str	r2, [sp, #24]
 800a2f2:	3201      	adds	r2, #1
 800a2f4:	e7ae      	b.n	800a254 <_strtod_l+0x204>
 800a2f6:	2400      	movs	r4, #0
 800a2f8:	9b08      	ldr	r3, [sp, #32]
 800a2fa:	3302      	adds	r3, #2
 800a2fc:	9321      	str	r3, [sp, #132]	; 0x84
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	789b      	ldrb	r3, [r3, #2]
 800a302:	001a      	movs	r2, r3
 800a304:	3a30      	subs	r2, #48	; 0x30
 800a306:	2a09      	cmp	r2, #9
 800a308:	d914      	bls.n	800a334 <_strtod_l+0x2e4>
 800a30a:	9a08      	ldr	r2, [sp, #32]
 800a30c:	9221      	str	r2, [sp, #132]	; 0x84
 800a30e:	2200      	movs	r2, #0
 800a310:	e032      	b.n	800a378 <_strtod_l+0x328>
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	0800df00 	.word	0x0800df00
 800a318:	0800dcac 	.word	0x0800dcac
 800a31c:	ffefffff 	.word	0xffefffff
 800a320:	00000433 	.word	0x00000433
 800a324:	7ff00000 	.word	0x7ff00000
 800a328:	7fffffff 	.word	0x7fffffff
 800a32c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	9221      	str	r2, [sp, #132]	; 0x84
 800a332:	785b      	ldrb	r3, [r3, #1]
 800a334:	2b30      	cmp	r3, #48	; 0x30
 800a336:	d0f9      	beq.n	800a32c <_strtod_l+0x2dc>
 800a338:	2200      	movs	r2, #0
 800a33a:	9207      	str	r2, [sp, #28]
 800a33c:	001a      	movs	r2, r3
 800a33e:	3a31      	subs	r2, #49	; 0x31
 800a340:	2a08      	cmp	r2, #8
 800a342:	d81a      	bhi.n	800a37a <_strtod_l+0x32a>
 800a344:	3b30      	subs	r3, #48	; 0x30
 800a346:	001a      	movs	r2, r3
 800a348:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a34a:	9307      	str	r3, [sp, #28]
 800a34c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a34e:	1c59      	adds	r1, r3, #1
 800a350:	9121      	str	r1, [sp, #132]	; 0x84
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	001d      	movs	r5, r3
 800a356:	3d30      	subs	r5, #48	; 0x30
 800a358:	2d09      	cmp	r5, #9
 800a35a:	d939      	bls.n	800a3d0 <_strtod_l+0x380>
 800a35c:	9d07      	ldr	r5, [sp, #28]
 800a35e:	1b49      	subs	r1, r1, r5
 800a360:	4daf      	ldr	r5, [pc, #700]	; (800a620 <_strtod_l+0x5d0>)
 800a362:	9507      	str	r5, [sp, #28]
 800a364:	2908      	cmp	r1, #8
 800a366:	dc03      	bgt.n	800a370 <_strtod_l+0x320>
 800a368:	9207      	str	r2, [sp, #28]
 800a36a:	42aa      	cmp	r2, r5
 800a36c:	dd00      	ble.n	800a370 <_strtod_l+0x320>
 800a36e:	9507      	str	r5, [sp, #28]
 800a370:	2c00      	cmp	r4, #0
 800a372:	d002      	beq.n	800a37a <_strtod_l+0x32a>
 800a374:	9a07      	ldr	r2, [sp, #28]
 800a376:	4252      	negs	r2, r2
 800a378:	9207      	str	r2, [sp, #28]
 800a37a:	9a06      	ldr	r2, [sp, #24]
 800a37c:	2a00      	cmp	r2, #0
 800a37e:	d14b      	bne.n	800a418 <_strtod_l+0x3c8>
 800a380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a382:	4310      	orrs	r0, r2
 800a384:	d000      	beq.n	800a388 <_strtod_l+0x338>
 800a386:	e6aa      	b.n	800a0de <_strtod_l+0x8e>
 800a388:	4662      	mov	r2, ip
 800a38a:	2a00      	cmp	r2, #0
 800a38c:	d000      	beq.n	800a390 <_strtod_l+0x340>
 800a38e:	e6c5      	b.n	800a11c <_strtod_l+0xcc>
 800a390:	2b69      	cmp	r3, #105	; 0x69
 800a392:	d025      	beq.n	800a3e0 <_strtod_l+0x390>
 800a394:	dc21      	bgt.n	800a3da <_strtod_l+0x38a>
 800a396:	2b49      	cmp	r3, #73	; 0x49
 800a398:	d022      	beq.n	800a3e0 <_strtod_l+0x390>
 800a39a:	2b4e      	cmp	r3, #78	; 0x4e
 800a39c:	d000      	beq.n	800a3a0 <_strtod_l+0x350>
 800a39e:	e6bd      	b.n	800a11c <_strtod_l+0xcc>
 800a3a0:	49a0      	ldr	r1, [pc, #640]	; (800a624 <_strtod_l+0x5d4>)
 800a3a2:	a821      	add	r0, sp, #132	; 0x84
 800a3a4:	f001 fe74 	bl	800c090 <__match>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d100      	bne.n	800a3ae <_strtod_l+0x35e>
 800a3ac:	e6b6      	b.n	800a11c <_strtod_l+0xcc>
 800a3ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b28      	cmp	r3, #40	; 0x28
 800a3b4:	d12a      	bne.n	800a40c <_strtod_l+0x3bc>
 800a3b6:	499c      	ldr	r1, [pc, #624]	; (800a628 <_strtod_l+0x5d8>)
 800a3b8:	aa24      	add	r2, sp, #144	; 0x90
 800a3ba:	a821      	add	r0, sp, #132	; 0x84
 800a3bc:	f001 fe7c 	bl	800c0b8 <__hexnan>
 800a3c0:	2805      	cmp	r0, #5
 800a3c2:	d123      	bne.n	800a40c <_strtod_l+0x3bc>
 800a3c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a3c6:	4a99      	ldr	r2, [pc, #612]	; (800a62c <_strtod_l+0x5dc>)
 800a3c8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	0017      	movs	r7, r2
 800a3ce:	e686      	b.n	800a0de <_strtod_l+0x8e>
 800a3d0:	210a      	movs	r1, #10
 800a3d2:	434a      	muls	r2, r1
 800a3d4:	18d2      	adds	r2, r2, r3
 800a3d6:	3a30      	subs	r2, #48	; 0x30
 800a3d8:	e7b8      	b.n	800a34c <_strtod_l+0x2fc>
 800a3da:	2b6e      	cmp	r3, #110	; 0x6e
 800a3dc:	d0e0      	beq.n	800a3a0 <_strtod_l+0x350>
 800a3de:	e69d      	b.n	800a11c <_strtod_l+0xcc>
 800a3e0:	4993      	ldr	r1, [pc, #588]	; (800a630 <_strtod_l+0x5e0>)
 800a3e2:	a821      	add	r0, sp, #132	; 0x84
 800a3e4:	f001 fe54 	bl	800c090 <__match>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d100      	bne.n	800a3ee <_strtod_l+0x39e>
 800a3ec:	e696      	b.n	800a11c <_strtod_l+0xcc>
 800a3ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3f0:	4990      	ldr	r1, [pc, #576]	; (800a634 <_strtod_l+0x5e4>)
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	a821      	add	r0, sp, #132	; 0x84
 800a3f6:	9321      	str	r3, [sp, #132]	; 0x84
 800a3f8:	f001 fe4a 	bl	800c090 <__match>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d102      	bne.n	800a406 <_strtod_l+0x3b6>
 800a400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a402:	3301      	adds	r3, #1
 800a404:	9321      	str	r3, [sp, #132]	; 0x84
 800a406:	2600      	movs	r6, #0
 800a408:	4f88      	ldr	r7, [pc, #544]	; (800a62c <_strtod_l+0x5dc>)
 800a40a:	e668      	b.n	800a0de <_strtod_l+0x8e>
 800a40c:	488a      	ldr	r0, [pc, #552]	; (800a638 <_strtod_l+0x5e8>)
 800a40e:	f002 fd59 	bl	800cec4 <nan>
 800a412:	0006      	movs	r6, r0
 800a414:	000f      	movs	r7, r1
 800a416:	e662      	b.n	800a0de <_strtod_l+0x8e>
 800a418:	9b07      	ldr	r3, [sp, #28]
 800a41a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a41c:	1a9b      	subs	r3, r3, r2
 800a41e:	930a      	str	r3, [sp, #40]	; 0x28
 800a420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <_strtod_l+0x3da>
 800a426:	9b06      	ldr	r3, [sp, #24]
 800a428:	9309      	str	r3, [sp, #36]	; 0x24
 800a42a:	9c06      	ldr	r4, [sp, #24]
 800a42c:	2c10      	cmp	r4, #16
 800a42e:	dd00      	ble.n	800a432 <_strtod_l+0x3e2>
 800a430:	2410      	movs	r4, #16
 800a432:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a434:	f7f7 fe9a 	bl	800216c <__aeabi_ui2d>
 800a438:	9b06      	ldr	r3, [sp, #24]
 800a43a:	0006      	movs	r6, r0
 800a43c:	000f      	movs	r7, r1
 800a43e:	2b09      	cmp	r3, #9
 800a440:	dd15      	ble.n	800a46e <_strtod_l+0x41e>
 800a442:	0022      	movs	r2, r4
 800a444:	4b7d      	ldr	r3, [pc, #500]	; (800a63c <_strtod_l+0x5ec>)
 800a446:	3a09      	subs	r2, #9
 800a448:	00d2      	lsls	r2, r2, #3
 800a44a:	189b      	adds	r3, r3, r2
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	f7f7 f80a 	bl	8001468 <__aeabi_dmul>
 800a454:	0006      	movs	r6, r0
 800a456:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a458:	000f      	movs	r7, r1
 800a45a:	f7f7 fe87 	bl	800216c <__aeabi_ui2d>
 800a45e:	0002      	movs	r2, r0
 800a460:	000b      	movs	r3, r1
 800a462:	0030      	movs	r0, r6
 800a464:	0039      	movs	r1, r7
 800a466:	f7f6 f88f 	bl	8000588 <__aeabi_dadd>
 800a46a:	0006      	movs	r6, r0
 800a46c:	000f      	movs	r7, r1
 800a46e:	9b06      	ldr	r3, [sp, #24]
 800a470:	2b0f      	cmp	r3, #15
 800a472:	dc39      	bgt.n	800a4e8 <_strtod_l+0x498>
 800a474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a476:	2b00      	cmp	r3, #0
 800a478:	d100      	bne.n	800a47c <_strtod_l+0x42c>
 800a47a:	e630      	b.n	800a0de <_strtod_l+0x8e>
 800a47c:	dd24      	ble.n	800a4c8 <_strtod_l+0x478>
 800a47e:	2b16      	cmp	r3, #22
 800a480:	dc09      	bgt.n	800a496 <_strtod_l+0x446>
 800a482:	00dd      	lsls	r5, r3, #3
 800a484:	0032      	movs	r2, r6
 800a486:	003b      	movs	r3, r7
 800a488:	4c6c      	ldr	r4, [pc, #432]	; (800a63c <_strtod_l+0x5ec>)
 800a48a:	1964      	adds	r4, r4, r5
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	6861      	ldr	r1, [r4, #4]
 800a490:	f7f6 ffea 	bl	8001468 <__aeabi_dmul>
 800a494:	e7bd      	b.n	800a412 <_strtod_l+0x3c2>
 800a496:	2325      	movs	r3, #37	; 0x25
 800a498:	9a06      	ldr	r2, [sp, #24]
 800a49a:	1a9b      	subs	r3, r3, r2
 800a49c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	db22      	blt.n	800a4e8 <_strtod_l+0x498>
 800a4a2:	240f      	movs	r4, #15
 800a4a4:	9b06      	ldr	r3, [sp, #24]
 800a4a6:	4d65      	ldr	r5, [pc, #404]	; (800a63c <_strtod_l+0x5ec>)
 800a4a8:	1ae4      	subs	r4, r4, r3
 800a4aa:	00e1      	lsls	r1, r4, #3
 800a4ac:	1869      	adds	r1, r5, r1
 800a4ae:	0032      	movs	r2, r6
 800a4b0:	6808      	ldr	r0, [r1, #0]
 800a4b2:	6849      	ldr	r1, [r1, #4]
 800a4b4:	003b      	movs	r3, r7
 800a4b6:	f7f6 ffd7 	bl	8001468 <__aeabi_dmul>
 800a4ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4bc:	1b1c      	subs	r4, r3, r4
 800a4be:	00e4      	lsls	r4, r4, #3
 800a4c0:	192c      	adds	r4, r5, r4
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	6863      	ldr	r3, [r4, #4]
 800a4c6:	e7e3      	b.n	800a490 <_strtod_l+0x440>
 800a4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ca:	3316      	adds	r3, #22
 800a4cc:	db0c      	blt.n	800a4e8 <_strtod_l+0x498>
 800a4ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4d0:	9a07      	ldr	r2, [sp, #28]
 800a4d2:	0030      	movs	r0, r6
 800a4d4:	1a9a      	subs	r2, r3, r2
 800a4d6:	4b59      	ldr	r3, [pc, #356]	; (800a63c <_strtod_l+0x5ec>)
 800a4d8:	00d2      	lsls	r2, r2, #3
 800a4da:	189b      	adds	r3, r3, r2
 800a4dc:	0039      	movs	r1, r7
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f7f6 fbbb 	bl	8000c5c <__aeabi_ddiv>
 800a4e6:	e794      	b.n	800a412 <_strtod_l+0x3c2>
 800a4e8:	9b06      	ldr	r3, [sp, #24]
 800a4ea:	1b1c      	subs	r4, r3, r4
 800a4ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ee:	18e4      	adds	r4, r4, r3
 800a4f0:	2c00      	cmp	r4, #0
 800a4f2:	dd70      	ble.n	800a5d6 <_strtod_l+0x586>
 800a4f4:	230f      	movs	r3, #15
 800a4f6:	0021      	movs	r1, r4
 800a4f8:	4019      	ands	r1, r3
 800a4fa:	421c      	tst	r4, r3
 800a4fc:	d00a      	beq.n	800a514 <_strtod_l+0x4c4>
 800a4fe:	00cb      	lsls	r3, r1, #3
 800a500:	494e      	ldr	r1, [pc, #312]	; (800a63c <_strtod_l+0x5ec>)
 800a502:	0032      	movs	r2, r6
 800a504:	18c9      	adds	r1, r1, r3
 800a506:	6808      	ldr	r0, [r1, #0]
 800a508:	6849      	ldr	r1, [r1, #4]
 800a50a:	003b      	movs	r3, r7
 800a50c:	f7f6 ffac 	bl	8001468 <__aeabi_dmul>
 800a510:	0006      	movs	r6, r0
 800a512:	000f      	movs	r7, r1
 800a514:	230f      	movs	r3, #15
 800a516:	439c      	bics	r4, r3
 800a518:	d048      	beq.n	800a5ac <_strtod_l+0x55c>
 800a51a:	3326      	adds	r3, #38	; 0x26
 800a51c:	33ff      	adds	r3, #255	; 0xff
 800a51e:	429c      	cmp	r4, r3
 800a520:	dd22      	ble.n	800a568 <_strtod_l+0x518>
 800a522:	2300      	movs	r3, #0
 800a524:	9306      	str	r3, [sp, #24]
 800a526:	9307      	str	r3, [sp, #28]
 800a528:	930b      	str	r3, [sp, #44]	; 0x2c
 800a52a:	9309      	str	r3, [sp, #36]	; 0x24
 800a52c:	2322      	movs	r3, #34	; 0x22
 800a52e:	2600      	movs	r6, #0
 800a530:	9a05      	ldr	r2, [sp, #20]
 800a532:	4f3e      	ldr	r7, [pc, #248]	; (800a62c <_strtod_l+0x5dc>)
 800a534:	6013      	str	r3, [r2, #0]
 800a536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a538:	42b3      	cmp	r3, r6
 800a53a:	d100      	bne.n	800a53e <_strtod_l+0x4ee>
 800a53c:	e5cf      	b.n	800a0de <_strtod_l+0x8e>
 800a53e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a540:	9805      	ldr	r0, [sp, #20]
 800a542:	f001 fec9 	bl	800c2d8 <_Bfree>
 800a546:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a548:	9805      	ldr	r0, [sp, #20]
 800a54a:	f001 fec5 	bl	800c2d8 <_Bfree>
 800a54e:	9907      	ldr	r1, [sp, #28]
 800a550:	9805      	ldr	r0, [sp, #20]
 800a552:	f001 fec1 	bl	800c2d8 <_Bfree>
 800a556:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a558:	9805      	ldr	r0, [sp, #20]
 800a55a:	f001 febd 	bl	800c2d8 <_Bfree>
 800a55e:	9906      	ldr	r1, [sp, #24]
 800a560:	9805      	ldr	r0, [sp, #20]
 800a562:	f001 feb9 	bl	800c2d8 <_Bfree>
 800a566:	e5ba      	b.n	800a0de <_strtod_l+0x8e>
 800a568:	2300      	movs	r3, #0
 800a56a:	0030      	movs	r0, r6
 800a56c:	0039      	movs	r1, r7
 800a56e:	001d      	movs	r5, r3
 800a570:	1124      	asrs	r4, r4, #4
 800a572:	2c01      	cmp	r4, #1
 800a574:	dc1d      	bgt.n	800a5b2 <_strtod_l+0x562>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <_strtod_l+0x52e>
 800a57a:	0006      	movs	r6, r0
 800a57c:	000f      	movs	r7, r1
 800a57e:	4b30      	ldr	r3, [pc, #192]	; (800a640 <_strtod_l+0x5f0>)
 800a580:	00ed      	lsls	r5, r5, #3
 800a582:	18ff      	adds	r7, r7, r3
 800a584:	4b2f      	ldr	r3, [pc, #188]	; (800a644 <_strtod_l+0x5f4>)
 800a586:	0032      	movs	r2, r6
 800a588:	195d      	adds	r5, r3, r5
 800a58a:	6828      	ldr	r0, [r5, #0]
 800a58c:	6869      	ldr	r1, [r5, #4]
 800a58e:	003b      	movs	r3, r7
 800a590:	f7f6 ff6a 	bl	8001468 <__aeabi_dmul>
 800a594:	4b25      	ldr	r3, [pc, #148]	; (800a62c <_strtod_l+0x5dc>)
 800a596:	4a2c      	ldr	r2, [pc, #176]	; (800a648 <_strtod_l+0x5f8>)
 800a598:	0006      	movs	r6, r0
 800a59a:	400b      	ands	r3, r1
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d8c0      	bhi.n	800a522 <_strtod_l+0x4d2>
 800a5a0:	4a2a      	ldr	r2, [pc, #168]	; (800a64c <_strtod_l+0x5fc>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d913      	bls.n	800a5ce <_strtod_l+0x57e>
 800a5a6:	2601      	movs	r6, #1
 800a5a8:	4f29      	ldr	r7, [pc, #164]	; (800a650 <_strtod_l+0x600>)
 800a5aa:	4276      	negs	r6, r6
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	9308      	str	r3, [sp, #32]
 800a5b0:	e087      	b.n	800a6c2 <_strtod_l+0x672>
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	4214      	tst	r4, r2
 800a5b6:	d007      	beq.n	800a5c8 <_strtod_l+0x578>
 800a5b8:	4a22      	ldr	r2, [pc, #136]	; (800a644 <_strtod_l+0x5f4>)
 800a5ba:	00eb      	lsls	r3, r5, #3
 800a5bc:	189b      	adds	r3, r3, r2
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	f7f6 ff51 	bl	8001468 <__aeabi_dmul>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	1064      	asrs	r4, r4, #1
 800a5cc:	e7d1      	b.n	800a572 <_strtod_l+0x522>
 800a5ce:	23d4      	movs	r3, #212	; 0xd4
 800a5d0:	049b      	lsls	r3, r3, #18
 800a5d2:	18cf      	adds	r7, r1, r3
 800a5d4:	e7ea      	b.n	800a5ac <_strtod_l+0x55c>
 800a5d6:	2c00      	cmp	r4, #0
 800a5d8:	d0e8      	beq.n	800a5ac <_strtod_l+0x55c>
 800a5da:	4264      	negs	r4, r4
 800a5dc:	220f      	movs	r2, #15
 800a5de:	0023      	movs	r3, r4
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	4214      	tst	r4, r2
 800a5e4:	d00a      	beq.n	800a5fc <_strtod_l+0x5ac>
 800a5e6:	00da      	lsls	r2, r3, #3
 800a5e8:	4b14      	ldr	r3, [pc, #80]	; (800a63c <_strtod_l+0x5ec>)
 800a5ea:	0030      	movs	r0, r6
 800a5ec:	189b      	adds	r3, r3, r2
 800a5ee:	0039      	movs	r1, r7
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	f7f6 fb32 	bl	8000c5c <__aeabi_ddiv>
 800a5f8:	0006      	movs	r6, r0
 800a5fa:	000f      	movs	r7, r1
 800a5fc:	1124      	asrs	r4, r4, #4
 800a5fe:	d0d5      	beq.n	800a5ac <_strtod_l+0x55c>
 800a600:	2c1f      	cmp	r4, #31
 800a602:	dd27      	ble.n	800a654 <_strtod_l+0x604>
 800a604:	2300      	movs	r3, #0
 800a606:	9306      	str	r3, [sp, #24]
 800a608:	9307      	str	r3, [sp, #28]
 800a60a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a60c:	9309      	str	r3, [sp, #36]	; 0x24
 800a60e:	2322      	movs	r3, #34	; 0x22
 800a610:	9a05      	ldr	r2, [sp, #20]
 800a612:	2600      	movs	r6, #0
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a618:	2700      	movs	r7, #0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d18f      	bne.n	800a53e <_strtod_l+0x4ee>
 800a61e:	e55e      	b.n	800a0de <_strtod_l+0x8e>
 800a620:	00004e1f 	.word	0x00004e1f
 800a624:	0800dc7d 	.word	0x0800dc7d
 800a628:	0800dcc0 	.word	0x0800dcc0
 800a62c:	7ff00000 	.word	0x7ff00000
 800a630:	0800dc75 	.word	0x0800dc75
 800a634:	0800de04 	.word	0x0800de04
 800a638:	0800e0c0 	.word	0x0800e0c0
 800a63c:	0800dfa0 	.word	0x0800dfa0
 800a640:	fcb00000 	.word	0xfcb00000
 800a644:	0800df78 	.word	0x0800df78
 800a648:	7ca00000 	.word	0x7ca00000
 800a64c:	7c900000 	.word	0x7c900000
 800a650:	7fefffff 	.word	0x7fefffff
 800a654:	2310      	movs	r3, #16
 800a656:	0022      	movs	r2, r4
 800a658:	401a      	ands	r2, r3
 800a65a:	9208      	str	r2, [sp, #32]
 800a65c:	421c      	tst	r4, r3
 800a65e:	d001      	beq.n	800a664 <_strtod_l+0x614>
 800a660:	335a      	adds	r3, #90	; 0x5a
 800a662:	9308      	str	r3, [sp, #32]
 800a664:	0030      	movs	r0, r6
 800a666:	0039      	movs	r1, r7
 800a668:	2300      	movs	r3, #0
 800a66a:	4dca      	ldr	r5, [pc, #808]	; (800a994 <_strtod_l+0x944>)
 800a66c:	2201      	movs	r2, #1
 800a66e:	4214      	tst	r4, r2
 800a670:	d004      	beq.n	800a67c <_strtod_l+0x62c>
 800a672:	682a      	ldr	r2, [r5, #0]
 800a674:	686b      	ldr	r3, [r5, #4]
 800a676:	f7f6 fef7 	bl	8001468 <__aeabi_dmul>
 800a67a:	2301      	movs	r3, #1
 800a67c:	1064      	asrs	r4, r4, #1
 800a67e:	3508      	adds	r5, #8
 800a680:	2c00      	cmp	r4, #0
 800a682:	d1f3      	bne.n	800a66c <_strtod_l+0x61c>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <_strtod_l+0x63c>
 800a688:	0006      	movs	r6, r0
 800a68a:	000f      	movs	r7, r1
 800a68c:	9b08      	ldr	r3, [sp, #32]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00f      	beq.n	800a6b2 <_strtod_l+0x662>
 800a692:	236b      	movs	r3, #107	; 0x6b
 800a694:	0079      	lsls	r1, r7, #1
 800a696:	0d49      	lsrs	r1, r1, #21
 800a698:	003a      	movs	r2, r7
 800a69a:	1a5b      	subs	r3, r3, r1
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dd08      	ble.n	800a6b2 <_strtod_l+0x662>
 800a6a0:	2b1f      	cmp	r3, #31
 800a6a2:	dc00      	bgt.n	800a6a6 <_strtod_l+0x656>
 800a6a4:	e126      	b.n	800a8f4 <_strtod_l+0x8a4>
 800a6a6:	2600      	movs	r6, #0
 800a6a8:	2b34      	cmp	r3, #52	; 0x34
 800a6aa:	dc00      	bgt.n	800a6ae <_strtod_l+0x65e>
 800a6ac:	e11b      	b.n	800a8e6 <_strtod_l+0x896>
 800a6ae:	27dc      	movs	r7, #220	; 0xdc
 800a6b0:	04bf      	lsls	r7, r7, #18
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	0030      	movs	r0, r6
 800a6b8:	0039      	movs	r1, r7
 800a6ba:	f7f5 fec7 	bl	800044c <__aeabi_dcmpeq>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d1a0      	bne.n	800a604 <_strtod_l+0x5b4>
 800a6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6ca:	9b06      	ldr	r3, [sp, #24]
 800a6cc:	9805      	ldr	r0, [sp, #20]
 800a6ce:	f001 fe6b 	bl	800c3a8 <__s2b>
 800a6d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d100      	bne.n	800a6da <_strtod_l+0x68a>
 800a6d8:	e723      	b.n	800a522 <_strtod_l+0x4d2>
 800a6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6dc:	9907      	ldr	r1, [sp, #28]
 800a6de:	17da      	asrs	r2, r3, #31
 800a6e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6e2:	1a5b      	subs	r3, r3, r1
 800a6e4:	401a      	ands	r2, r3
 800a6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e8:	9215      	str	r2, [sp, #84]	; 0x54
 800a6ea:	43db      	mvns	r3, r3
 800a6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6ee:	17db      	asrs	r3, r3, #31
 800a6f0:	401a      	ands	r2, r3
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	921c      	str	r2, [sp, #112]	; 0x70
 800a6f6:	9306      	str	r3, [sp, #24]
 800a6f8:	9307      	str	r3, [sp, #28]
 800a6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6fc:	9805      	ldr	r0, [sp, #20]
 800a6fe:	6859      	ldr	r1, [r3, #4]
 800a700:	f001 fda6 	bl	800c250 <_Balloc>
 800a704:	9009      	str	r0, [sp, #36]	; 0x24
 800a706:	2800      	cmp	r0, #0
 800a708:	d100      	bne.n	800a70c <_strtod_l+0x6bc>
 800a70a:	e70f      	b.n	800a52c <_strtod_l+0x4dc>
 800a70c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a70e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	310c      	adds	r1, #12
 800a714:	1c9a      	adds	r2, r3, #2
 800a716:	0092      	lsls	r2, r2, #2
 800a718:	300c      	adds	r0, #12
 800a71a:	930c      	str	r3, [sp, #48]	; 0x30
 800a71c:	f7fe fcb1 	bl	8009082 <memcpy>
 800a720:	ab24      	add	r3, sp, #144	; 0x90
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	ab23      	add	r3, sp, #140	; 0x8c
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	0032      	movs	r2, r6
 800a72a:	003b      	movs	r3, r7
 800a72c:	9805      	ldr	r0, [sp, #20]
 800a72e:	960e      	str	r6, [sp, #56]	; 0x38
 800a730:	970f      	str	r7, [sp, #60]	; 0x3c
 800a732:	f002 f987 	bl	800ca44 <__d2b>
 800a736:	9022      	str	r0, [sp, #136]	; 0x88
 800a738:	2800      	cmp	r0, #0
 800a73a:	d100      	bne.n	800a73e <_strtod_l+0x6ee>
 800a73c:	e6f6      	b.n	800a52c <_strtod_l+0x4dc>
 800a73e:	2101      	movs	r1, #1
 800a740:	9805      	ldr	r0, [sp, #20]
 800a742:	f001 fec5 	bl	800c4d0 <__i2b>
 800a746:	9007      	str	r0, [sp, #28]
 800a748:	2800      	cmp	r0, #0
 800a74a:	d100      	bne.n	800a74e <_strtod_l+0x6fe>
 800a74c:	e6ee      	b.n	800a52c <_strtod_l+0x4dc>
 800a74e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a750:	2b00      	cmp	r3, #0
 800a752:	da00      	bge.n	800a756 <_strtod_l+0x706>
 800a754:	e0d3      	b.n	800a8fe <_strtod_l+0x8ae>
 800a756:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a758:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a75a:	189d      	adds	r5, r3, r2
 800a75c:	9908      	ldr	r1, [sp, #32]
 800a75e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a760:	1a5b      	subs	r3, r3, r1
 800a762:	2136      	movs	r1, #54	; 0x36
 800a764:	189b      	adds	r3, r3, r2
 800a766:	1a8a      	subs	r2, r1, r2
 800a768:	498b      	ldr	r1, [pc, #556]	; (800a998 <_strtod_l+0x948>)
 800a76a:	3b01      	subs	r3, #1
 800a76c:	2001      	movs	r0, #1
 800a76e:	428b      	cmp	r3, r1
 800a770:	db00      	blt.n	800a774 <_strtod_l+0x724>
 800a772:	e0cf      	b.n	800a914 <_strtod_l+0x8c4>
 800a774:	1ac9      	subs	r1, r1, r3
 800a776:	1a52      	subs	r2, r2, r1
 800a778:	291f      	cmp	r1, #31
 800a77a:	dd00      	ble.n	800a77e <_strtod_l+0x72e>
 800a77c:	e0c3      	b.n	800a906 <_strtod_l+0x8b6>
 800a77e:	4088      	lsls	r0, r1
 800a780:	2300      	movs	r3, #0
 800a782:	9014      	str	r0, [sp, #80]	; 0x50
 800a784:	9312      	str	r3, [sp, #72]	; 0x48
 800a786:	18ab      	adds	r3, r5, r2
 800a788:	930c      	str	r3, [sp, #48]	; 0x30
 800a78a:	18a4      	adds	r4, r4, r2
 800a78c:	9b08      	ldr	r3, [sp, #32]
 800a78e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a790:	191c      	adds	r4, r3, r4
 800a792:	002b      	movs	r3, r5
 800a794:	4295      	cmp	r5, r2
 800a796:	dd00      	ble.n	800a79a <_strtod_l+0x74a>
 800a798:	0013      	movs	r3, r2
 800a79a:	42a3      	cmp	r3, r4
 800a79c:	dd00      	ble.n	800a7a0 <_strtod_l+0x750>
 800a79e:	0023      	movs	r3, r4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	dd04      	ble.n	800a7ae <_strtod_l+0x75e>
 800a7a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7a6:	1ae4      	subs	r4, r4, r3
 800a7a8:	1ad2      	subs	r2, r2, r3
 800a7aa:	920c      	str	r2, [sp, #48]	; 0x30
 800a7ac:	1aed      	subs	r5, r5, r3
 800a7ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	dd17      	ble.n	800a7e4 <_strtod_l+0x794>
 800a7b4:	001a      	movs	r2, r3
 800a7b6:	9907      	ldr	r1, [sp, #28]
 800a7b8:	9805      	ldr	r0, [sp, #20]
 800a7ba:	f001 ff4f 	bl	800c65c <__pow5mult>
 800a7be:	9007      	str	r0, [sp, #28]
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d100      	bne.n	800a7c6 <_strtod_l+0x776>
 800a7c4:	e6b2      	b.n	800a52c <_strtod_l+0x4dc>
 800a7c6:	0001      	movs	r1, r0
 800a7c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a7ca:	9805      	ldr	r0, [sp, #20]
 800a7cc:	f001 fe96 	bl	800c4fc <__multiply>
 800a7d0:	9011      	str	r0, [sp, #68]	; 0x44
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d100      	bne.n	800a7d8 <_strtod_l+0x788>
 800a7d6:	e6a9      	b.n	800a52c <_strtod_l+0x4dc>
 800a7d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a7da:	9805      	ldr	r0, [sp, #20]
 800a7dc:	f001 fd7c 	bl	800c2d8 <_Bfree>
 800a7e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7e2:	9322      	str	r3, [sp, #136]	; 0x88
 800a7e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	dd00      	ble.n	800a7ec <_strtod_l+0x79c>
 800a7ea:	e096      	b.n	800a91a <_strtod_l+0x8ca>
 800a7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	dd08      	ble.n	800a804 <_strtod_l+0x7b4>
 800a7f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a7f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7f6:	9805      	ldr	r0, [sp, #20]
 800a7f8:	f001 ff30 	bl	800c65c <__pow5mult>
 800a7fc:	9009      	str	r0, [sp, #36]	; 0x24
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d100      	bne.n	800a804 <_strtod_l+0x7b4>
 800a802:	e693      	b.n	800a52c <_strtod_l+0x4dc>
 800a804:	2c00      	cmp	r4, #0
 800a806:	dd08      	ble.n	800a81a <_strtod_l+0x7ca>
 800a808:	0022      	movs	r2, r4
 800a80a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a80c:	9805      	ldr	r0, [sp, #20]
 800a80e:	f001 ff81 	bl	800c714 <__lshift>
 800a812:	9009      	str	r0, [sp, #36]	; 0x24
 800a814:	2800      	cmp	r0, #0
 800a816:	d100      	bne.n	800a81a <_strtod_l+0x7ca>
 800a818:	e688      	b.n	800a52c <_strtod_l+0x4dc>
 800a81a:	2d00      	cmp	r5, #0
 800a81c:	dd08      	ble.n	800a830 <_strtod_l+0x7e0>
 800a81e:	002a      	movs	r2, r5
 800a820:	9907      	ldr	r1, [sp, #28]
 800a822:	9805      	ldr	r0, [sp, #20]
 800a824:	f001 ff76 	bl	800c714 <__lshift>
 800a828:	9007      	str	r0, [sp, #28]
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d100      	bne.n	800a830 <_strtod_l+0x7e0>
 800a82e:	e67d      	b.n	800a52c <_strtod_l+0x4dc>
 800a830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a832:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a834:	9805      	ldr	r0, [sp, #20]
 800a836:	f001 fff9 	bl	800c82c <__mdiff>
 800a83a:	9006      	str	r0, [sp, #24]
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d100      	bne.n	800a842 <_strtod_l+0x7f2>
 800a840:	e674      	b.n	800a52c <_strtod_l+0x4dc>
 800a842:	2200      	movs	r2, #0
 800a844:	68c3      	ldr	r3, [r0, #12]
 800a846:	9907      	ldr	r1, [sp, #28]
 800a848:	60c2      	str	r2, [r0, #12]
 800a84a:	9311      	str	r3, [sp, #68]	; 0x44
 800a84c:	f001 ffd2 	bl	800c7f4 <__mcmp>
 800a850:	2800      	cmp	r0, #0
 800a852:	da6c      	bge.n	800a92e <_strtod_l+0x8de>
 800a854:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a856:	4333      	orrs	r3, r6
 800a858:	d000      	beq.n	800a85c <_strtod_l+0x80c>
 800a85a:	e097      	b.n	800a98c <_strtod_l+0x93c>
 800a85c:	033b      	lsls	r3, r7, #12
 800a85e:	d000      	beq.n	800a862 <_strtod_l+0x812>
 800a860:	e094      	b.n	800a98c <_strtod_l+0x93c>
 800a862:	22d6      	movs	r2, #214	; 0xd6
 800a864:	4b4d      	ldr	r3, [pc, #308]	; (800a99c <_strtod_l+0x94c>)
 800a866:	04d2      	lsls	r2, r2, #19
 800a868:	403b      	ands	r3, r7
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d800      	bhi.n	800a870 <_strtod_l+0x820>
 800a86e:	e08d      	b.n	800a98c <_strtod_l+0x93c>
 800a870:	9b06      	ldr	r3, [sp, #24]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	930a      	str	r3, [sp, #40]	; 0x28
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <_strtod_l+0x836>
 800a87a:	9b06      	ldr	r3, [sp, #24]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	930a      	str	r3, [sp, #40]	; 0x28
 800a880:	2b01      	cmp	r3, #1
 800a882:	dc00      	bgt.n	800a886 <_strtod_l+0x836>
 800a884:	e082      	b.n	800a98c <_strtod_l+0x93c>
 800a886:	9906      	ldr	r1, [sp, #24]
 800a888:	2201      	movs	r2, #1
 800a88a:	9805      	ldr	r0, [sp, #20]
 800a88c:	f001 ff42 	bl	800c714 <__lshift>
 800a890:	9907      	ldr	r1, [sp, #28]
 800a892:	9006      	str	r0, [sp, #24]
 800a894:	f001 ffae 	bl	800c7f4 <__mcmp>
 800a898:	2800      	cmp	r0, #0
 800a89a:	dd77      	ble.n	800a98c <_strtod_l+0x93c>
 800a89c:	9908      	ldr	r1, [sp, #32]
 800a89e:	003b      	movs	r3, r7
 800a8a0:	4a3e      	ldr	r2, [pc, #248]	; (800a99c <_strtod_l+0x94c>)
 800a8a2:	2900      	cmp	r1, #0
 800a8a4:	d100      	bne.n	800a8a8 <_strtod_l+0x858>
 800a8a6:	e09e      	b.n	800a9e6 <_strtod_l+0x996>
 800a8a8:	0011      	movs	r1, r2
 800a8aa:	20d6      	movs	r0, #214	; 0xd6
 800a8ac:	4039      	ands	r1, r7
 800a8ae:	04c0      	lsls	r0, r0, #19
 800a8b0:	4281      	cmp	r1, r0
 800a8b2:	dd00      	ble.n	800a8b6 <_strtod_l+0x866>
 800a8b4:	e097      	b.n	800a9e6 <_strtod_l+0x996>
 800a8b6:	23dc      	movs	r3, #220	; 0xdc
 800a8b8:	049b      	lsls	r3, r3, #18
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	dc00      	bgt.n	800a8c0 <_strtod_l+0x870>
 800a8be:	e6a6      	b.n	800a60e <_strtod_l+0x5be>
 800a8c0:	4b37      	ldr	r3, [pc, #220]	; (800a9a0 <_strtod_l+0x950>)
 800a8c2:	0030      	movs	r0, r6
 800a8c4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ca:	0039      	movs	r1, r7
 800a8cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a8ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8d0:	f7f6 fdca 	bl	8001468 <__aeabi_dmul>
 800a8d4:	0006      	movs	r6, r0
 800a8d6:	000f      	movs	r7, r1
 800a8d8:	4308      	orrs	r0, r1
 800a8da:	d000      	beq.n	800a8de <_strtod_l+0x88e>
 800a8dc:	e62f      	b.n	800a53e <_strtod_l+0x4ee>
 800a8de:	2322      	movs	r3, #34	; 0x22
 800a8e0:	9a05      	ldr	r2, [sp, #20]
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	e62b      	b.n	800a53e <_strtod_l+0x4ee>
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	3b20      	subs	r3, #32
 800a8ea:	4249      	negs	r1, r1
 800a8ec:	4099      	lsls	r1, r3
 800a8ee:	400a      	ands	r2, r1
 800a8f0:	0017      	movs	r7, r2
 800a8f2:	e6de      	b.n	800a6b2 <_strtod_l+0x662>
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	4252      	negs	r2, r2
 800a8f8:	409a      	lsls	r2, r3
 800a8fa:	4016      	ands	r6, r2
 800a8fc:	e6d9      	b.n	800a6b2 <_strtod_l+0x662>
 800a8fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a900:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a902:	1ad4      	subs	r4, r2, r3
 800a904:	e72a      	b.n	800a75c <_strtod_l+0x70c>
 800a906:	4927      	ldr	r1, [pc, #156]	; (800a9a4 <_strtod_l+0x954>)
 800a908:	1acb      	subs	r3, r1, r3
 800a90a:	0001      	movs	r1, r0
 800a90c:	4099      	lsls	r1, r3
 800a90e:	9112      	str	r1, [sp, #72]	; 0x48
 800a910:	9014      	str	r0, [sp, #80]	; 0x50
 800a912:	e738      	b.n	800a786 <_strtod_l+0x736>
 800a914:	2300      	movs	r3, #0
 800a916:	9312      	str	r3, [sp, #72]	; 0x48
 800a918:	e7fa      	b.n	800a910 <_strtod_l+0x8c0>
 800a91a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a91c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a91e:	9805      	ldr	r0, [sp, #20]
 800a920:	f001 fef8 	bl	800c714 <__lshift>
 800a924:	9022      	str	r0, [sp, #136]	; 0x88
 800a926:	2800      	cmp	r0, #0
 800a928:	d000      	beq.n	800a92c <_strtod_l+0x8dc>
 800a92a:	e75f      	b.n	800a7ec <_strtod_l+0x79c>
 800a92c:	e5fe      	b.n	800a52c <_strtod_l+0x4dc>
 800a92e:	970c      	str	r7, [sp, #48]	; 0x30
 800a930:	2800      	cmp	r0, #0
 800a932:	d176      	bne.n	800aa22 <_strtod_l+0x9d2>
 800a934:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a936:	033b      	lsls	r3, r7, #12
 800a938:	0b1b      	lsrs	r3, r3, #12
 800a93a:	2a00      	cmp	r2, #0
 800a93c:	d038      	beq.n	800a9b0 <_strtod_l+0x960>
 800a93e:	4a1a      	ldr	r2, [pc, #104]	; (800a9a8 <_strtod_l+0x958>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d138      	bne.n	800a9b6 <_strtod_l+0x966>
 800a944:	2201      	movs	r2, #1
 800a946:	9b08      	ldr	r3, [sp, #32]
 800a948:	4252      	negs	r2, r2
 800a94a:	0031      	movs	r1, r6
 800a94c:	0010      	movs	r0, r2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00b      	beq.n	800a96a <_strtod_l+0x91a>
 800a952:	24d4      	movs	r4, #212	; 0xd4
 800a954:	4b11      	ldr	r3, [pc, #68]	; (800a99c <_strtod_l+0x94c>)
 800a956:	0010      	movs	r0, r2
 800a958:	403b      	ands	r3, r7
 800a95a:	04e4      	lsls	r4, r4, #19
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	d804      	bhi.n	800a96a <_strtod_l+0x91a>
 800a960:	306c      	adds	r0, #108	; 0x6c
 800a962:	0d1b      	lsrs	r3, r3, #20
 800a964:	1ac3      	subs	r3, r0, r3
 800a966:	409a      	lsls	r2, r3
 800a968:	0010      	movs	r0, r2
 800a96a:	4281      	cmp	r1, r0
 800a96c:	d123      	bne.n	800a9b6 <_strtod_l+0x966>
 800a96e:	4b0f      	ldr	r3, [pc, #60]	; (800a9ac <_strtod_l+0x95c>)
 800a970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a972:	429a      	cmp	r2, r3
 800a974:	d102      	bne.n	800a97c <_strtod_l+0x92c>
 800a976:	1c4b      	adds	r3, r1, #1
 800a978:	d100      	bne.n	800a97c <_strtod_l+0x92c>
 800a97a:	e5d7      	b.n	800a52c <_strtod_l+0x4dc>
 800a97c:	4b07      	ldr	r3, [pc, #28]	; (800a99c <_strtod_l+0x94c>)
 800a97e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a980:	2600      	movs	r6, #0
 800a982:	401a      	ands	r2, r3
 800a984:	0013      	movs	r3, r2
 800a986:	2280      	movs	r2, #128	; 0x80
 800a988:	0352      	lsls	r2, r2, #13
 800a98a:	189f      	adds	r7, r3, r2
 800a98c:	9b08      	ldr	r3, [sp, #32]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d196      	bne.n	800a8c0 <_strtod_l+0x870>
 800a992:	e5d4      	b.n	800a53e <_strtod_l+0x4ee>
 800a994:	0800dcd8 	.word	0x0800dcd8
 800a998:	fffffc02 	.word	0xfffffc02
 800a99c:	7ff00000 	.word	0x7ff00000
 800a9a0:	39500000 	.word	0x39500000
 800a9a4:	fffffbe2 	.word	0xfffffbe2
 800a9a8:	000fffff 	.word	0x000fffff
 800a9ac:	7fefffff 	.word	0x7fefffff
 800a9b0:	4333      	orrs	r3, r6
 800a9b2:	d100      	bne.n	800a9b6 <_strtod_l+0x966>
 800a9b4:	e772      	b.n	800a89c <_strtod_l+0x84c>
 800a9b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d01d      	beq.n	800a9f8 <_strtod_l+0x9a8>
 800a9bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9c0:	4213      	tst	r3, r2
 800a9c2:	d0e3      	beq.n	800a98c <_strtod_l+0x93c>
 800a9c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9c6:	0030      	movs	r0, r6
 800a9c8:	0039      	movs	r1, r7
 800a9ca:	9a08      	ldr	r2, [sp, #32]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d017      	beq.n	800aa00 <_strtod_l+0x9b0>
 800a9d0:	f7ff fb26 	bl	800a020 <sulp>
 800a9d4:	0002      	movs	r2, r0
 800a9d6:	000b      	movs	r3, r1
 800a9d8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a9da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9dc:	f7f5 fdd4 	bl	8000588 <__aeabi_dadd>
 800a9e0:	0006      	movs	r6, r0
 800a9e2:	000f      	movs	r7, r1
 800a9e4:	e7d2      	b.n	800a98c <_strtod_l+0x93c>
 800a9e6:	2601      	movs	r6, #1
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	4a9b      	ldr	r2, [pc, #620]	; (800ac58 <_strtod_l+0xc08>)
 800a9ec:	4276      	negs	r6, r6
 800a9ee:	189b      	adds	r3, r3, r2
 800a9f0:	4a9a      	ldr	r2, [pc, #616]	; (800ac5c <_strtod_l+0xc0c>)
 800a9f2:	431a      	orrs	r2, r3
 800a9f4:	0017      	movs	r7, r2
 800a9f6:	e7c9      	b.n	800a98c <_strtod_l+0x93c>
 800a9f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9fa:	4233      	tst	r3, r6
 800a9fc:	d0c6      	beq.n	800a98c <_strtod_l+0x93c>
 800a9fe:	e7e1      	b.n	800a9c4 <_strtod_l+0x974>
 800aa00:	f7ff fb0e 	bl	800a020 <sulp>
 800aa04:	0002      	movs	r2, r0
 800aa06:	000b      	movs	r3, r1
 800aa08:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aa0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa0c:	f7f6 ff98 	bl	8001940 <__aeabi_dsub>
 800aa10:	2200      	movs	r2, #0
 800aa12:	2300      	movs	r3, #0
 800aa14:	0006      	movs	r6, r0
 800aa16:	000f      	movs	r7, r1
 800aa18:	f7f5 fd18 	bl	800044c <__aeabi_dcmpeq>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d0b5      	beq.n	800a98c <_strtod_l+0x93c>
 800aa20:	e5f5      	b.n	800a60e <_strtod_l+0x5be>
 800aa22:	9907      	ldr	r1, [sp, #28]
 800aa24:	9806      	ldr	r0, [sp, #24]
 800aa26:	f002 f871 	bl	800cb0c <__ratio>
 800aa2a:	2380      	movs	r3, #128	; 0x80
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	05db      	lsls	r3, r3, #23
 800aa30:	0004      	movs	r4, r0
 800aa32:	000d      	movs	r5, r1
 800aa34:	f7f5 fd1a 	bl	800046c <__aeabi_dcmple>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d079      	beq.n	800ab30 <_strtod_l+0xae0>
 800aa3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d04b      	beq.n	800aada <_strtod_l+0xa8a>
 800aa42:	2300      	movs	r3, #0
 800aa44:	4c86      	ldr	r4, [pc, #536]	; (800ac60 <_strtod_l+0xc10>)
 800aa46:	2500      	movs	r5, #0
 800aa48:	9312      	str	r3, [sp, #72]	; 0x48
 800aa4a:	9413      	str	r4, [sp, #76]	; 0x4c
 800aa4c:	4c84      	ldr	r4, [pc, #528]	; (800ac60 <_strtod_l+0xc10>)
 800aa4e:	4a85      	ldr	r2, [pc, #532]	; (800ac64 <_strtod_l+0xc14>)
 800aa50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa52:	4013      	ands	r3, r2
 800aa54:	9314      	str	r3, [sp, #80]	; 0x50
 800aa56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa58:	4b83      	ldr	r3, [pc, #524]	; (800ac68 <_strtod_l+0xc18>)
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d000      	beq.n	800aa60 <_strtod_l+0xa10>
 800aa5e:	e0b0      	b.n	800abc2 <_strtod_l+0xb72>
 800aa60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa64:	921a      	str	r2, [sp, #104]	; 0x68
 800aa66:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa68:	4a80      	ldr	r2, [pc, #512]	; (800ac6c <_strtod_l+0xc1c>)
 800aa6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa6c:	4694      	mov	ip, r2
 800aa6e:	4463      	add	r3, ip
 800aa70:	001f      	movs	r7, r3
 800aa72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa76:	0030      	movs	r0, r6
 800aa78:	0039      	movs	r1, r7
 800aa7a:	920c      	str	r2, [sp, #48]	; 0x30
 800aa7c:	930d      	str	r3, [sp, #52]	; 0x34
 800aa7e:	f001 ff6d 	bl	800c95c <__ulp>
 800aa82:	0002      	movs	r2, r0
 800aa84:	000b      	movs	r3, r1
 800aa86:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aa88:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aa8a:	f7f6 fced 	bl	8001468 <__aeabi_dmul>
 800aa8e:	0032      	movs	r2, r6
 800aa90:	003b      	movs	r3, r7
 800aa92:	f7f5 fd79 	bl	8000588 <__aeabi_dadd>
 800aa96:	4a73      	ldr	r2, [pc, #460]	; (800ac64 <_strtod_l+0xc14>)
 800aa98:	4b75      	ldr	r3, [pc, #468]	; (800ac70 <_strtod_l+0xc20>)
 800aa9a:	0006      	movs	r6, r0
 800aa9c:	400a      	ands	r2, r1
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d95e      	bls.n	800ab60 <_strtod_l+0xb10>
 800aaa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaa4:	4a73      	ldr	r2, [pc, #460]	; (800ac74 <_strtod_l+0xc24>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d103      	bne.n	800aab2 <_strtod_l+0xa62>
 800aaaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaac:	3301      	adds	r3, #1
 800aaae:	d100      	bne.n	800aab2 <_strtod_l+0xa62>
 800aab0:	e53c      	b.n	800a52c <_strtod_l+0x4dc>
 800aab2:	2601      	movs	r6, #1
 800aab4:	4f6f      	ldr	r7, [pc, #444]	; (800ac74 <_strtod_l+0xc24>)
 800aab6:	4276      	negs	r6, r6
 800aab8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aaba:	9805      	ldr	r0, [sp, #20]
 800aabc:	f001 fc0c 	bl	800c2d8 <_Bfree>
 800aac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aac2:	9805      	ldr	r0, [sp, #20]
 800aac4:	f001 fc08 	bl	800c2d8 <_Bfree>
 800aac8:	9907      	ldr	r1, [sp, #28]
 800aaca:	9805      	ldr	r0, [sp, #20]
 800aacc:	f001 fc04 	bl	800c2d8 <_Bfree>
 800aad0:	9906      	ldr	r1, [sp, #24]
 800aad2:	9805      	ldr	r0, [sp, #20]
 800aad4:	f001 fc00 	bl	800c2d8 <_Bfree>
 800aad8:	e60f      	b.n	800a6fa <_strtod_l+0x6aa>
 800aada:	2e00      	cmp	r6, #0
 800aadc:	d11c      	bne.n	800ab18 <_strtod_l+0xac8>
 800aade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aae0:	031b      	lsls	r3, r3, #12
 800aae2:	d11f      	bne.n	800ab24 <_strtod_l+0xad4>
 800aae4:	2200      	movs	r2, #0
 800aae6:	0020      	movs	r0, r4
 800aae8:	0029      	movs	r1, r5
 800aaea:	4b5d      	ldr	r3, [pc, #372]	; (800ac60 <_strtod_l+0xc10>)
 800aaec:	f7f5 fcb4 	bl	8000458 <__aeabi_dcmplt>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d11a      	bne.n	800ab2a <_strtod_l+0xada>
 800aaf4:	0020      	movs	r0, r4
 800aaf6:	0029      	movs	r1, r5
 800aaf8:	2200      	movs	r2, #0
 800aafa:	4b5f      	ldr	r3, [pc, #380]	; (800ac78 <_strtod_l+0xc28>)
 800aafc:	f7f6 fcb4 	bl	8001468 <__aeabi_dmul>
 800ab00:	0005      	movs	r5, r0
 800ab02:	000c      	movs	r4, r1
 800ab04:	2380      	movs	r3, #128	; 0x80
 800ab06:	061b      	lsls	r3, r3, #24
 800ab08:	18e3      	adds	r3, r4, r3
 800ab0a:	951e      	str	r5, [sp, #120]	; 0x78
 800ab0c:	931f      	str	r3, [sp, #124]	; 0x7c
 800ab0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ab10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab12:	9212      	str	r2, [sp, #72]	; 0x48
 800ab14:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab16:	e79a      	b.n	800aa4e <_strtod_l+0x9fe>
 800ab18:	2e01      	cmp	r6, #1
 800ab1a:	d103      	bne.n	800ab24 <_strtod_l+0xad4>
 800ab1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d100      	bne.n	800ab24 <_strtod_l+0xad4>
 800ab22:	e574      	b.n	800a60e <_strtod_l+0x5be>
 800ab24:	2300      	movs	r3, #0
 800ab26:	4c55      	ldr	r4, [pc, #340]	; (800ac7c <_strtod_l+0xc2c>)
 800ab28:	e78d      	b.n	800aa46 <_strtod_l+0x9f6>
 800ab2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ab2c:	4c52      	ldr	r4, [pc, #328]	; (800ac78 <_strtod_l+0xc28>)
 800ab2e:	e7e9      	b.n	800ab04 <_strtod_l+0xab4>
 800ab30:	2200      	movs	r2, #0
 800ab32:	0020      	movs	r0, r4
 800ab34:	0029      	movs	r1, r5
 800ab36:	4b50      	ldr	r3, [pc, #320]	; (800ac78 <_strtod_l+0xc28>)
 800ab38:	f7f6 fc96 	bl	8001468 <__aeabi_dmul>
 800ab3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab3e:	0005      	movs	r5, r0
 800ab40:	000b      	movs	r3, r1
 800ab42:	000c      	movs	r4, r1
 800ab44:	2a00      	cmp	r2, #0
 800ab46:	d107      	bne.n	800ab58 <_strtod_l+0xb08>
 800ab48:	2280      	movs	r2, #128	; 0x80
 800ab4a:	0612      	lsls	r2, r2, #24
 800ab4c:	188b      	adds	r3, r1, r2
 800ab4e:	9016      	str	r0, [sp, #88]	; 0x58
 800ab50:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab56:	e7dc      	b.n	800ab12 <_strtod_l+0xac2>
 800ab58:	0002      	movs	r2, r0
 800ab5a:	9216      	str	r2, [sp, #88]	; 0x58
 800ab5c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab5e:	e7f8      	b.n	800ab52 <_strtod_l+0xb02>
 800ab60:	23d4      	movs	r3, #212	; 0xd4
 800ab62:	049b      	lsls	r3, r3, #18
 800ab64:	18cf      	adds	r7, r1, r3
 800ab66:	9b08      	ldr	r3, [sp, #32]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1a5      	bne.n	800aab8 <_strtod_l+0xa68>
 800ab6c:	4b3d      	ldr	r3, [pc, #244]	; (800ac64 <_strtod_l+0xc14>)
 800ab6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab70:	403b      	ands	r3, r7
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d1a0      	bne.n	800aab8 <_strtod_l+0xa68>
 800ab76:	0028      	movs	r0, r5
 800ab78:	0021      	movs	r1, r4
 800ab7a:	f7f5 fcb3 	bl	80004e4 <__aeabi_d2lz>
 800ab7e:	f7f5 fced 	bl	800055c <__aeabi_l2d>
 800ab82:	0002      	movs	r2, r0
 800ab84:	000b      	movs	r3, r1
 800ab86:	0028      	movs	r0, r5
 800ab88:	0021      	movs	r1, r4
 800ab8a:	f7f6 fed9 	bl	8001940 <__aeabi_dsub>
 800ab8e:	033b      	lsls	r3, r7, #12
 800ab90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab92:	0b1b      	lsrs	r3, r3, #12
 800ab94:	4333      	orrs	r3, r6
 800ab96:	4313      	orrs	r3, r2
 800ab98:	0004      	movs	r4, r0
 800ab9a:	000d      	movs	r5, r1
 800ab9c:	4a38      	ldr	r2, [pc, #224]	; (800ac80 <_strtod_l+0xc30>)
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d055      	beq.n	800ac4e <_strtod_l+0xbfe>
 800aba2:	4b38      	ldr	r3, [pc, #224]	; (800ac84 <_strtod_l+0xc34>)
 800aba4:	f7f5 fc58 	bl	8000458 <__aeabi_dcmplt>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d000      	beq.n	800abae <_strtod_l+0xb5e>
 800abac:	e4c7      	b.n	800a53e <_strtod_l+0x4ee>
 800abae:	0020      	movs	r0, r4
 800abb0:	0029      	movs	r1, r5
 800abb2:	4a35      	ldr	r2, [pc, #212]	; (800ac88 <_strtod_l+0xc38>)
 800abb4:	4b30      	ldr	r3, [pc, #192]	; (800ac78 <_strtod_l+0xc28>)
 800abb6:	f7f5 fc63 	bl	8000480 <__aeabi_dcmpgt>
 800abba:	2800      	cmp	r0, #0
 800abbc:	d100      	bne.n	800abc0 <_strtod_l+0xb70>
 800abbe:	e77b      	b.n	800aab8 <_strtod_l+0xa68>
 800abc0:	e4bd      	b.n	800a53e <_strtod_l+0x4ee>
 800abc2:	9b08      	ldr	r3, [sp, #32]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d02b      	beq.n	800ac20 <_strtod_l+0xbd0>
 800abc8:	23d4      	movs	r3, #212	; 0xd4
 800abca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abcc:	04db      	lsls	r3, r3, #19
 800abce:	429a      	cmp	r2, r3
 800abd0:	d826      	bhi.n	800ac20 <_strtod_l+0xbd0>
 800abd2:	0028      	movs	r0, r5
 800abd4:	0021      	movs	r1, r4
 800abd6:	4a2d      	ldr	r2, [pc, #180]	; (800ac8c <_strtod_l+0xc3c>)
 800abd8:	4b2d      	ldr	r3, [pc, #180]	; (800ac90 <_strtod_l+0xc40>)
 800abda:	f7f5 fc47 	bl	800046c <__aeabi_dcmple>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d017      	beq.n	800ac12 <_strtod_l+0xbc2>
 800abe2:	0028      	movs	r0, r5
 800abe4:	0021      	movs	r1, r4
 800abe6:	f7f5 fc5f 	bl	80004a8 <__aeabi_d2uiz>
 800abea:	2800      	cmp	r0, #0
 800abec:	d100      	bne.n	800abf0 <_strtod_l+0xba0>
 800abee:	3001      	adds	r0, #1
 800abf0:	f7f7 fabc 	bl	800216c <__aeabi_ui2d>
 800abf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800abf6:	0005      	movs	r5, r0
 800abf8:	000b      	movs	r3, r1
 800abfa:	000c      	movs	r4, r1
 800abfc:	2a00      	cmp	r2, #0
 800abfe:	d122      	bne.n	800ac46 <_strtod_l+0xbf6>
 800ac00:	2280      	movs	r2, #128	; 0x80
 800ac02:	0612      	lsls	r2, r2, #24
 800ac04:	188b      	adds	r3, r1, r2
 800ac06:	9018      	str	r0, [sp, #96]	; 0x60
 800ac08:	9319      	str	r3, [sp, #100]	; 0x64
 800ac0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac0e:	9212      	str	r2, [sp, #72]	; 0x48
 800ac10:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac12:	22d6      	movs	r2, #214	; 0xd6
 800ac14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac16:	04d2      	lsls	r2, r2, #19
 800ac18:	189b      	adds	r3, r3, r2
 800ac1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac1c:	1a9b      	subs	r3, r3, r2
 800ac1e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac20:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ac22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac24:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ac26:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ac28:	f001 fe98 	bl	800c95c <__ulp>
 800ac2c:	0002      	movs	r2, r0
 800ac2e:	000b      	movs	r3, r1
 800ac30:	0030      	movs	r0, r6
 800ac32:	0039      	movs	r1, r7
 800ac34:	f7f6 fc18 	bl	8001468 <__aeabi_dmul>
 800ac38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac3c:	f7f5 fca4 	bl	8000588 <__aeabi_dadd>
 800ac40:	0006      	movs	r6, r0
 800ac42:	000f      	movs	r7, r1
 800ac44:	e78f      	b.n	800ab66 <_strtod_l+0xb16>
 800ac46:	0002      	movs	r2, r0
 800ac48:	9218      	str	r2, [sp, #96]	; 0x60
 800ac4a:	9319      	str	r3, [sp, #100]	; 0x64
 800ac4c:	e7dd      	b.n	800ac0a <_strtod_l+0xbba>
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <_strtod_l+0xc44>)
 800ac50:	f7f5 fc02 	bl	8000458 <__aeabi_dcmplt>
 800ac54:	e7b1      	b.n	800abba <_strtod_l+0xb6a>
 800ac56:	46c0      	nop			; (mov r8, r8)
 800ac58:	fff00000 	.word	0xfff00000
 800ac5c:	000fffff 	.word	0x000fffff
 800ac60:	3ff00000 	.word	0x3ff00000
 800ac64:	7ff00000 	.word	0x7ff00000
 800ac68:	7fe00000 	.word	0x7fe00000
 800ac6c:	fcb00000 	.word	0xfcb00000
 800ac70:	7c9fffff 	.word	0x7c9fffff
 800ac74:	7fefffff 	.word	0x7fefffff
 800ac78:	3fe00000 	.word	0x3fe00000
 800ac7c:	bff00000 	.word	0xbff00000
 800ac80:	94a03595 	.word	0x94a03595
 800ac84:	3fdfffff 	.word	0x3fdfffff
 800ac88:	35afe535 	.word	0x35afe535
 800ac8c:	ffc00000 	.word	0xffc00000
 800ac90:	41dfffff 	.word	0x41dfffff
 800ac94:	3fcfffff 	.word	0x3fcfffff

0800ac98 <_strtod_r>:
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	4b02      	ldr	r3, [pc, #8]	; (800aca4 <_strtod_r+0xc>)
 800ac9c:	f7ff f9d8 	bl	800a050 <_strtod_l>
 800aca0:	bd10      	pop	{r4, pc}
 800aca2:	46c0      	nop			; (mov r8, r8)
 800aca4:	20000070 	.word	0x20000070

0800aca8 <_strtol_l.isra.0>:
 800aca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acaa:	b087      	sub	sp, #28
 800acac:	001e      	movs	r6, r3
 800acae:	9005      	str	r0, [sp, #20]
 800acb0:	9101      	str	r1, [sp, #4]
 800acb2:	9202      	str	r2, [sp, #8]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d045      	beq.n	800ad44 <_strtol_l.isra.0+0x9c>
 800acb8:	0008      	movs	r0, r1
 800acba:	2b24      	cmp	r3, #36	; 0x24
 800acbc:	d842      	bhi.n	800ad44 <_strtol_l.isra.0+0x9c>
 800acbe:	4b3f      	ldr	r3, [pc, #252]	; (800adbc <_strtol_l.isra.0+0x114>)
 800acc0:	2208      	movs	r2, #8
 800acc2:	469c      	mov	ip, r3
 800acc4:	0003      	movs	r3, r0
 800acc6:	4661      	mov	r1, ip
 800acc8:	781c      	ldrb	r4, [r3, #0]
 800acca:	1c45      	adds	r5, r0, #1
 800accc:	5d09      	ldrb	r1, [r1, r4]
 800acce:	0028      	movs	r0, r5
 800acd0:	000f      	movs	r7, r1
 800acd2:	4017      	ands	r7, r2
 800acd4:	4211      	tst	r1, r2
 800acd6:	d1f5      	bne.n	800acc4 <_strtol_l.isra.0+0x1c>
 800acd8:	2c2d      	cmp	r4, #45	; 0x2d
 800acda:	d13a      	bne.n	800ad52 <_strtol_l.isra.0+0xaa>
 800acdc:	2701      	movs	r7, #1
 800acde:	782c      	ldrb	r4, [r5, #0]
 800ace0:	1c9d      	adds	r5, r3, #2
 800ace2:	2e00      	cmp	r6, #0
 800ace4:	d065      	beq.n	800adb2 <_strtol_l.isra.0+0x10a>
 800ace6:	2e10      	cmp	r6, #16
 800ace8:	d109      	bne.n	800acfe <_strtol_l.isra.0+0x56>
 800acea:	2c30      	cmp	r4, #48	; 0x30
 800acec:	d107      	bne.n	800acfe <_strtol_l.isra.0+0x56>
 800acee:	2220      	movs	r2, #32
 800acf0:	782b      	ldrb	r3, [r5, #0]
 800acf2:	4393      	bics	r3, r2
 800acf4:	2b58      	cmp	r3, #88	; 0x58
 800acf6:	d157      	bne.n	800ada8 <_strtol_l.isra.0+0x100>
 800acf8:	2610      	movs	r6, #16
 800acfa:	786c      	ldrb	r4, [r5, #1]
 800acfc:	3502      	adds	r5, #2
 800acfe:	4b30      	ldr	r3, [pc, #192]	; (800adc0 <_strtol_l.isra.0+0x118>)
 800ad00:	0031      	movs	r1, r6
 800ad02:	18fb      	adds	r3, r7, r3
 800ad04:	0018      	movs	r0, r3
 800ad06:	9303      	str	r3, [sp, #12]
 800ad08:	f7f5 faa0 	bl	800024c <__aeabi_uidivmod>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	2201      	movs	r2, #1
 800ad10:	4684      	mov	ip, r0
 800ad12:	0018      	movs	r0, r3
 800ad14:	9104      	str	r1, [sp, #16]
 800ad16:	4252      	negs	r2, r2
 800ad18:	0021      	movs	r1, r4
 800ad1a:	3930      	subs	r1, #48	; 0x30
 800ad1c:	2909      	cmp	r1, #9
 800ad1e:	d81d      	bhi.n	800ad5c <_strtol_l.isra.0+0xb4>
 800ad20:	000c      	movs	r4, r1
 800ad22:	42a6      	cmp	r6, r4
 800ad24:	dd28      	ble.n	800ad78 <_strtol_l.isra.0+0xd0>
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	db24      	blt.n	800ad74 <_strtol_l.isra.0+0xcc>
 800ad2a:	0013      	movs	r3, r2
 800ad2c:	4584      	cmp	ip, r0
 800ad2e:	d306      	bcc.n	800ad3e <_strtol_l.isra.0+0x96>
 800ad30:	d102      	bne.n	800ad38 <_strtol_l.isra.0+0x90>
 800ad32:	9904      	ldr	r1, [sp, #16]
 800ad34:	42a1      	cmp	r1, r4
 800ad36:	db02      	blt.n	800ad3e <_strtol_l.isra.0+0x96>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	4370      	muls	r0, r6
 800ad3c:	1820      	adds	r0, r4, r0
 800ad3e:	782c      	ldrb	r4, [r5, #0]
 800ad40:	3501      	adds	r5, #1
 800ad42:	e7e9      	b.n	800ad18 <_strtol_l.isra.0+0x70>
 800ad44:	f7fe f946 	bl	8008fd4 <__errno>
 800ad48:	2316      	movs	r3, #22
 800ad4a:	6003      	str	r3, [r0, #0]
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	b007      	add	sp, #28
 800ad50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad52:	2c2b      	cmp	r4, #43	; 0x2b
 800ad54:	d1c5      	bne.n	800ace2 <_strtol_l.isra.0+0x3a>
 800ad56:	782c      	ldrb	r4, [r5, #0]
 800ad58:	1c9d      	adds	r5, r3, #2
 800ad5a:	e7c2      	b.n	800ace2 <_strtol_l.isra.0+0x3a>
 800ad5c:	0021      	movs	r1, r4
 800ad5e:	3941      	subs	r1, #65	; 0x41
 800ad60:	2919      	cmp	r1, #25
 800ad62:	d801      	bhi.n	800ad68 <_strtol_l.isra.0+0xc0>
 800ad64:	3c37      	subs	r4, #55	; 0x37
 800ad66:	e7dc      	b.n	800ad22 <_strtol_l.isra.0+0x7a>
 800ad68:	0021      	movs	r1, r4
 800ad6a:	3961      	subs	r1, #97	; 0x61
 800ad6c:	2919      	cmp	r1, #25
 800ad6e:	d803      	bhi.n	800ad78 <_strtol_l.isra.0+0xd0>
 800ad70:	3c57      	subs	r4, #87	; 0x57
 800ad72:	e7d6      	b.n	800ad22 <_strtol_l.isra.0+0x7a>
 800ad74:	0013      	movs	r3, r2
 800ad76:	e7e2      	b.n	800ad3e <_strtol_l.isra.0+0x96>
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	da09      	bge.n	800ad90 <_strtol_l.isra.0+0xe8>
 800ad7c:	2322      	movs	r3, #34	; 0x22
 800ad7e:	9a05      	ldr	r2, [sp, #20]
 800ad80:	9803      	ldr	r0, [sp, #12]
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	9b02      	ldr	r3, [sp, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0e1      	beq.n	800ad4e <_strtol_l.isra.0+0xa6>
 800ad8a:	1e6b      	subs	r3, r5, #1
 800ad8c:	9301      	str	r3, [sp, #4]
 800ad8e:	e007      	b.n	800ada0 <_strtol_l.isra.0+0xf8>
 800ad90:	2f00      	cmp	r7, #0
 800ad92:	d000      	beq.n	800ad96 <_strtol_l.isra.0+0xee>
 800ad94:	4240      	negs	r0, r0
 800ad96:	9a02      	ldr	r2, [sp, #8]
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	d0d8      	beq.n	800ad4e <_strtol_l.isra.0+0xa6>
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f4      	bne.n	800ad8a <_strtol_l.isra.0+0xe2>
 800ada0:	9b02      	ldr	r3, [sp, #8]
 800ada2:	9a01      	ldr	r2, [sp, #4]
 800ada4:	601a      	str	r2, [r3, #0]
 800ada6:	e7d2      	b.n	800ad4e <_strtol_l.isra.0+0xa6>
 800ada8:	2430      	movs	r4, #48	; 0x30
 800adaa:	2e00      	cmp	r6, #0
 800adac:	d1a7      	bne.n	800acfe <_strtol_l.isra.0+0x56>
 800adae:	3608      	adds	r6, #8
 800adb0:	e7a5      	b.n	800acfe <_strtol_l.isra.0+0x56>
 800adb2:	2c30      	cmp	r4, #48	; 0x30
 800adb4:	d09b      	beq.n	800acee <_strtol_l.isra.0+0x46>
 800adb6:	260a      	movs	r6, #10
 800adb8:	e7a1      	b.n	800acfe <_strtol_l.isra.0+0x56>
 800adba:	46c0      	nop			; (mov r8, r8)
 800adbc:	0800dd01 	.word	0x0800dd01
 800adc0:	7fffffff 	.word	0x7fffffff

0800adc4 <_strtol_r>:
 800adc4:	b510      	push	{r4, lr}
 800adc6:	f7ff ff6f 	bl	800aca8 <_strtol_l.isra.0>
 800adca:	bd10      	pop	{r4, pc}

0800adcc <quorem>:
 800adcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adce:	0006      	movs	r6, r0
 800add0:	690d      	ldr	r5, [r1, #16]
 800add2:	6933      	ldr	r3, [r6, #16]
 800add4:	b087      	sub	sp, #28
 800add6:	2000      	movs	r0, #0
 800add8:	9102      	str	r1, [sp, #8]
 800adda:	42ab      	cmp	r3, r5
 800addc:	db6b      	blt.n	800aeb6 <quorem+0xea>
 800adde:	000b      	movs	r3, r1
 800ade0:	3d01      	subs	r5, #1
 800ade2:	00ac      	lsls	r4, r5, #2
 800ade4:	3314      	adds	r3, #20
 800ade6:	9305      	str	r3, [sp, #20]
 800ade8:	191b      	adds	r3, r3, r4
 800adea:	9303      	str	r3, [sp, #12]
 800adec:	0033      	movs	r3, r6
 800adee:	3314      	adds	r3, #20
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	191c      	adds	r4, r3, r4
 800adf4:	9b03      	ldr	r3, [sp, #12]
 800adf6:	6827      	ldr	r7, [r4, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	0038      	movs	r0, r7
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	3301      	adds	r3, #1
 800ae00:	0019      	movs	r1, r3
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	f7f5 f99c 	bl	8000140 <__udivsi3>
 800ae08:	9b04      	ldr	r3, [sp, #16]
 800ae0a:	9000      	str	r0, [sp, #0]
 800ae0c:	429f      	cmp	r7, r3
 800ae0e:	d329      	bcc.n	800ae64 <quorem+0x98>
 800ae10:	2300      	movs	r3, #0
 800ae12:	469c      	mov	ip, r3
 800ae14:	9801      	ldr	r0, [sp, #4]
 800ae16:	9f05      	ldr	r7, [sp, #20]
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	cf08      	ldmia	r7!, {r3}
 800ae1c:	9a00      	ldr	r2, [sp, #0]
 800ae1e:	b299      	uxth	r1, r3
 800ae20:	4351      	muls	r1, r2
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	4353      	muls	r3, r2
 800ae26:	4461      	add	r1, ip
 800ae28:	0c0a      	lsrs	r2, r1, #16
 800ae2a:	189b      	adds	r3, r3, r2
 800ae2c:	0c1a      	lsrs	r2, r3, #16
 800ae2e:	9305      	str	r3, [sp, #20]
 800ae30:	6803      	ldr	r3, [r0, #0]
 800ae32:	4694      	mov	ip, r2
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	9b04      	ldr	r3, [sp, #16]
 800ae38:	b289      	uxth	r1, r1
 800ae3a:	18d2      	adds	r2, r2, r3
 800ae3c:	6803      	ldr	r3, [r0, #0]
 800ae3e:	1a52      	subs	r2, r2, r1
 800ae40:	0c19      	lsrs	r1, r3, #16
 800ae42:	466b      	mov	r3, sp
 800ae44:	8a9b      	ldrh	r3, [r3, #20]
 800ae46:	1acb      	subs	r3, r1, r3
 800ae48:	1411      	asrs	r1, r2, #16
 800ae4a:	185b      	adds	r3, r3, r1
 800ae4c:	1419      	asrs	r1, r3, #16
 800ae4e:	b292      	uxth	r2, r2
 800ae50:	041b      	lsls	r3, r3, #16
 800ae52:	431a      	orrs	r2, r3
 800ae54:	9b03      	ldr	r3, [sp, #12]
 800ae56:	9104      	str	r1, [sp, #16]
 800ae58:	c004      	stmia	r0!, {r2}
 800ae5a:	42bb      	cmp	r3, r7
 800ae5c:	d2dd      	bcs.n	800ae1a <quorem+0x4e>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d02e      	beq.n	800aec2 <quorem+0xf6>
 800ae64:	0030      	movs	r0, r6
 800ae66:	9902      	ldr	r1, [sp, #8]
 800ae68:	f001 fcc4 	bl	800c7f4 <__mcmp>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	db21      	blt.n	800aeb4 <quorem+0xe8>
 800ae70:	0030      	movs	r0, r6
 800ae72:	2400      	movs	r4, #0
 800ae74:	9b00      	ldr	r3, [sp, #0]
 800ae76:	9902      	ldr	r1, [sp, #8]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	3014      	adds	r0, #20
 800ae7e:	3114      	adds	r1, #20
 800ae80:	6802      	ldr	r2, [r0, #0]
 800ae82:	c908      	ldmia	r1!, {r3}
 800ae84:	b292      	uxth	r2, r2
 800ae86:	1914      	adds	r4, r2, r4
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	1aa2      	subs	r2, r4, r2
 800ae8c:	6804      	ldr	r4, [r0, #0]
 800ae8e:	0c1b      	lsrs	r3, r3, #16
 800ae90:	0c24      	lsrs	r4, r4, #16
 800ae92:	1ae3      	subs	r3, r4, r3
 800ae94:	1414      	asrs	r4, r2, #16
 800ae96:	191b      	adds	r3, r3, r4
 800ae98:	141c      	asrs	r4, r3, #16
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	041b      	lsls	r3, r3, #16
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	c008      	stmia	r0!, {r3}
 800aea2:	9b03      	ldr	r3, [sp, #12]
 800aea4:	428b      	cmp	r3, r1
 800aea6:	d2eb      	bcs.n	800ae80 <quorem+0xb4>
 800aea8:	9a01      	ldr	r2, [sp, #4]
 800aeaa:	00ab      	lsls	r3, r5, #2
 800aeac:	18d3      	adds	r3, r2, r3
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	2a00      	cmp	r2, #0
 800aeb2:	d010      	beq.n	800aed6 <quorem+0x10a>
 800aeb4:	9800      	ldr	r0, [sp, #0]
 800aeb6:	b007      	add	sp, #28
 800aeb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d104      	bne.n	800aeca <quorem+0xfe>
 800aec0:	3d01      	subs	r5, #1
 800aec2:	9b01      	ldr	r3, [sp, #4]
 800aec4:	3c04      	subs	r4, #4
 800aec6:	42a3      	cmp	r3, r4
 800aec8:	d3f7      	bcc.n	800aeba <quorem+0xee>
 800aeca:	6135      	str	r5, [r6, #16]
 800aecc:	e7ca      	b.n	800ae64 <quorem+0x98>
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	2a00      	cmp	r2, #0
 800aed2:	d104      	bne.n	800aede <quorem+0x112>
 800aed4:	3d01      	subs	r5, #1
 800aed6:	9a01      	ldr	r2, [sp, #4]
 800aed8:	3b04      	subs	r3, #4
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d3f7      	bcc.n	800aece <quorem+0x102>
 800aede:	6135      	str	r5, [r6, #16]
 800aee0:	e7e8      	b.n	800aeb4 <quorem+0xe8>
	...

0800aee4 <_dtoa_r>:
 800aee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aee6:	b09d      	sub	sp, #116	; 0x74
 800aee8:	9202      	str	r2, [sp, #8]
 800aeea:	9303      	str	r3, [sp, #12]
 800aeec:	9b02      	ldr	r3, [sp, #8]
 800aeee:	9c03      	ldr	r4, [sp, #12]
 800aef0:	930a      	str	r3, [sp, #40]	; 0x28
 800aef2:	940b      	str	r4, [sp, #44]	; 0x2c
 800aef4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aef6:	0007      	movs	r7, r0
 800aef8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800aefa:	2c00      	cmp	r4, #0
 800aefc:	d10e      	bne.n	800af1c <_dtoa_r+0x38>
 800aefe:	2010      	movs	r0, #16
 800af00:	f7fe f892 	bl	8009028 <malloc>
 800af04:	1e02      	subs	r2, r0, #0
 800af06:	6278      	str	r0, [r7, #36]	; 0x24
 800af08:	d104      	bne.n	800af14 <_dtoa_r+0x30>
 800af0a:	21ea      	movs	r1, #234	; 0xea
 800af0c:	4bc0      	ldr	r3, [pc, #768]	; (800b210 <_dtoa_r+0x32c>)
 800af0e:	48c1      	ldr	r0, [pc, #772]	; (800b214 <_dtoa_r+0x330>)
 800af10:	f001 fffc 	bl	800cf0c <__assert_func>
 800af14:	6044      	str	r4, [r0, #4]
 800af16:	6084      	str	r4, [r0, #8]
 800af18:	6004      	str	r4, [r0, #0]
 800af1a:	60c4      	str	r4, [r0, #12]
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	6819      	ldr	r1, [r3, #0]
 800af20:	2900      	cmp	r1, #0
 800af22:	d00a      	beq.n	800af3a <_dtoa_r+0x56>
 800af24:	685a      	ldr	r2, [r3, #4]
 800af26:	2301      	movs	r3, #1
 800af28:	4093      	lsls	r3, r2
 800af2a:	604a      	str	r2, [r1, #4]
 800af2c:	608b      	str	r3, [r1, #8]
 800af2e:	0038      	movs	r0, r7
 800af30:	f001 f9d2 	bl	800c2d8 <_Bfree>
 800af34:	2200      	movs	r2, #0
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	9b03      	ldr	r3, [sp, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	da21      	bge.n	800af84 <_dtoa_r+0xa0>
 800af40:	2301      	movs	r3, #1
 800af42:	602b      	str	r3, [r5, #0]
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	005b      	lsls	r3, r3, #1
 800af48:	085b      	lsrs	r3, r3, #1
 800af4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800af4e:	4bb2      	ldr	r3, [pc, #712]	; (800b218 <_dtoa_r+0x334>)
 800af50:	002a      	movs	r2, r5
 800af52:	9318      	str	r3, [sp, #96]	; 0x60
 800af54:	401a      	ands	r2, r3
 800af56:	429a      	cmp	r2, r3
 800af58:	d117      	bne.n	800af8a <_dtoa_r+0xa6>
 800af5a:	4bb0      	ldr	r3, [pc, #704]	; (800b21c <_dtoa_r+0x338>)
 800af5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af5e:	0328      	lsls	r0, r5, #12
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	9b02      	ldr	r3, [sp, #8]
 800af64:	0b00      	lsrs	r0, r0, #12
 800af66:	4318      	orrs	r0, r3
 800af68:	d101      	bne.n	800af6e <_dtoa_r+0x8a>
 800af6a:	f000 fdc3 	bl	800baf4 <_dtoa_r+0xc10>
 800af6e:	48ac      	ldr	r0, [pc, #688]	; (800b220 <_dtoa_r+0x33c>)
 800af70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af72:	9005      	str	r0, [sp, #20]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <_dtoa_r+0x9a>
 800af78:	4baa      	ldr	r3, [pc, #680]	; (800b224 <_dtoa_r+0x340>)
 800af7a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	9805      	ldr	r0, [sp, #20]
 800af80:	b01d      	add	sp, #116	; 0x74
 800af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af84:	2300      	movs	r3, #0
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	e7e0      	b.n	800af4c <_dtoa_r+0x68>
 800af8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800af8e:	9312      	str	r3, [sp, #72]	; 0x48
 800af90:	9413      	str	r4, [sp, #76]	; 0x4c
 800af92:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af94:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800af96:	2200      	movs	r2, #0
 800af98:	2300      	movs	r3, #0
 800af9a:	f7f5 fa57 	bl	800044c <__aeabi_dcmpeq>
 800af9e:	1e04      	subs	r4, r0, #0
 800afa0:	d00b      	beq.n	800afba <_dtoa_r+0xd6>
 800afa2:	2301      	movs	r3, #1
 800afa4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	4b9f      	ldr	r3, [pc, #636]	; (800b228 <_dtoa_r+0x344>)
 800afaa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800afac:	9305      	str	r3, [sp, #20]
 800afae:	2a00      	cmp	r2, #0
 800afb0:	d0e5      	beq.n	800af7e <_dtoa_r+0x9a>
 800afb2:	4a9e      	ldr	r2, [pc, #632]	; (800b22c <_dtoa_r+0x348>)
 800afb4:	9926      	ldr	r1, [sp, #152]	; 0x98
 800afb6:	600a      	str	r2, [r1, #0]
 800afb8:	e7e1      	b.n	800af7e <_dtoa_r+0x9a>
 800afba:	ab1a      	add	r3, sp, #104	; 0x68
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	ab1b      	add	r3, sp, #108	; 0x6c
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	0038      	movs	r0, r7
 800afc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afc8:	f001 fd3c 	bl	800ca44 <__d2b>
 800afcc:	006e      	lsls	r6, r5, #1
 800afce:	9004      	str	r0, [sp, #16]
 800afd0:	0d76      	lsrs	r6, r6, #21
 800afd2:	d100      	bne.n	800afd6 <_dtoa_r+0xf2>
 800afd4:	e07c      	b.n	800b0d0 <_dtoa_r+0x1ec>
 800afd6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800afd8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800afda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afdc:	4a94      	ldr	r2, [pc, #592]	; (800b230 <_dtoa_r+0x34c>)
 800afde:	031b      	lsls	r3, r3, #12
 800afe0:	0b1b      	lsrs	r3, r3, #12
 800afe2:	431a      	orrs	r2, r3
 800afe4:	0011      	movs	r1, r2
 800afe6:	4b93      	ldr	r3, [pc, #588]	; (800b234 <_dtoa_r+0x350>)
 800afe8:	9416      	str	r4, [sp, #88]	; 0x58
 800afea:	18f6      	adds	r6, r6, r3
 800afec:	2200      	movs	r2, #0
 800afee:	4b92      	ldr	r3, [pc, #584]	; (800b238 <_dtoa_r+0x354>)
 800aff0:	f7f6 fca6 	bl	8001940 <__aeabi_dsub>
 800aff4:	4a91      	ldr	r2, [pc, #580]	; (800b23c <_dtoa_r+0x358>)
 800aff6:	4b92      	ldr	r3, [pc, #584]	; (800b240 <_dtoa_r+0x35c>)
 800aff8:	f7f6 fa36 	bl	8001468 <__aeabi_dmul>
 800affc:	4a91      	ldr	r2, [pc, #580]	; (800b244 <_dtoa_r+0x360>)
 800affe:	4b92      	ldr	r3, [pc, #584]	; (800b248 <_dtoa_r+0x364>)
 800b000:	f7f5 fac2 	bl	8000588 <__aeabi_dadd>
 800b004:	0004      	movs	r4, r0
 800b006:	0030      	movs	r0, r6
 800b008:	000d      	movs	r5, r1
 800b00a:	f7f7 f87f 	bl	800210c <__aeabi_i2d>
 800b00e:	4a8f      	ldr	r2, [pc, #572]	; (800b24c <_dtoa_r+0x368>)
 800b010:	4b8f      	ldr	r3, [pc, #572]	; (800b250 <_dtoa_r+0x36c>)
 800b012:	f7f6 fa29 	bl	8001468 <__aeabi_dmul>
 800b016:	0002      	movs	r2, r0
 800b018:	000b      	movs	r3, r1
 800b01a:	0020      	movs	r0, r4
 800b01c:	0029      	movs	r1, r5
 800b01e:	f7f5 fab3 	bl	8000588 <__aeabi_dadd>
 800b022:	0004      	movs	r4, r0
 800b024:	000d      	movs	r5, r1
 800b026:	f7f7 f83b 	bl	80020a0 <__aeabi_d2iz>
 800b02a:	2200      	movs	r2, #0
 800b02c:	9002      	str	r0, [sp, #8]
 800b02e:	2300      	movs	r3, #0
 800b030:	0020      	movs	r0, r4
 800b032:	0029      	movs	r1, r5
 800b034:	f7f5 fa10 	bl	8000458 <__aeabi_dcmplt>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d00b      	beq.n	800b054 <_dtoa_r+0x170>
 800b03c:	9802      	ldr	r0, [sp, #8]
 800b03e:	f7f7 f865 	bl	800210c <__aeabi_i2d>
 800b042:	002b      	movs	r3, r5
 800b044:	0022      	movs	r2, r4
 800b046:	f7f5 fa01 	bl	800044c <__aeabi_dcmpeq>
 800b04a:	4243      	negs	r3, r0
 800b04c:	4158      	adcs	r0, r3
 800b04e:	9b02      	ldr	r3, [sp, #8]
 800b050:	1a1b      	subs	r3, r3, r0
 800b052:	9302      	str	r3, [sp, #8]
 800b054:	2301      	movs	r3, #1
 800b056:	9315      	str	r3, [sp, #84]	; 0x54
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	2b16      	cmp	r3, #22
 800b05c:	d80f      	bhi.n	800b07e <_dtoa_r+0x19a>
 800b05e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b060:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b062:	00da      	lsls	r2, r3, #3
 800b064:	4b7b      	ldr	r3, [pc, #492]	; (800b254 <_dtoa_r+0x370>)
 800b066:	189b      	adds	r3, r3, r2
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f7f5 f9f4 	bl	8000458 <__aeabi_dcmplt>
 800b070:	2800      	cmp	r0, #0
 800b072:	d049      	beq.n	800b108 <_dtoa_r+0x224>
 800b074:	9b02      	ldr	r3, [sp, #8]
 800b076:	3b01      	subs	r3, #1
 800b078:	9302      	str	r3, [sp, #8]
 800b07a:	2300      	movs	r3, #0
 800b07c:	9315      	str	r3, [sp, #84]	; 0x54
 800b07e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b080:	1b9e      	subs	r6, r3, r6
 800b082:	2300      	movs	r3, #0
 800b084:	9308      	str	r3, [sp, #32]
 800b086:	0033      	movs	r3, r6
 800b088:	3b01      	subs	r3, #1
 800b08a:	930d      	str	r3, [sp, #52]	; 0x34
 800b08c:	d504      	bpl.n	800b098 <_dtoa_r+0x1b4>
 800b08e:	2301      	movs	r3, #1
 800b090:	1b9b      	subs	r3, r3, r6
 800b092:	9308      	str	r3, [sp, #32]
 800b094:	2300      	movs	r3, #0
 800b096:	930d      	str	r3, [sp, #52]	; 0x34
 800b098:	9b02      	ldr	r3, [sp, #8]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	db36      	blt.n	800b10c <_dtoa_r+0x228>
 800b09e:	9a02      	ldr	r2, [sp, #8]
 800b0a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0a2:	4694      	mov	ip, r2
 800b0a4:	4463      	add	r3, ip
 800b0a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	9214      	str	r2, [sp, #80]	; 0x50
 800b0ac:	930e      	str	r3, [sp, #56]	; 0x38
 800b0ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0b0:	2401      	movs	r4, #1
 800b0b2:	2b09      	cmp	r3, #9
 800b0b4:	d862      	bhi.n	800b17c <_dtoa_r+0x298>
 800b0b6:	2b05      	cmp	r3, #5
 800b0b8:	dd02      	ble.n	800b0c0 <_dtoa_r+0x1dc>
 800b0ba:	2400      	movs	r4, #0
 800b0bc:	3b04      	subs	r3, #4
 800b0be:	9322      	str	r3, [sp, #136]	; 0x88
 800b0c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0c2:	1e98      	subs	r0, r3, #2
 800b0c4:	2803      	cmp	r0, #3
 800b0c6:	d862      	bhi.n	800b18e <_dtoa_r+0x2aa>
 800b0c8:	f7f5 f826 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b0cc:	56343629 	.word	0x56343629
 800b0d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b0d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b0d4:	189e      	adds	r6, r3, r2
 800b0d6:	4b60      	ldr	r3, [pc, #384]	; (800b258 <_dtoa_r+0x374>)
 800b0d8:	18f2      	adds	r2, r6, r3
 800b0da:	2a20      	cmp	r2, #32
 800b0dc:	dd0f      	ble.n	800b0fe <_dtoa_r+0x21a>
 800b0de:	2340      	movs	r3, #64	; 0x40
 800b0e0:	1a9b      	subs	r3, r3, r2
 800b0e2:	409d      	lsls	r5, r3
 800b0e4:	4b5d      	ldr	r3, [pc, #372]	; (800b25c <_dtoa_r+0x378>)
 800b0e6:	9802      	ldr	r0, [sp, #8]
 800b0e8:	18f3      	adds	r3, r6, r3
 800b0ea:	40d8      	lsrs	r0, r3
 800b0ec:	4328      	orrs	r0, r5
 800b0ee:	f7f7 f83d 	bl	800216c <__aeabi_ui2d>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	4c5a      	ldr	r4, [pc, #360]	; (800b260 <_dtoa_r+0x37c>)
 800b0f6:	3e01      	subs	r6, #1
 800b0f8:	1909      	adds	r1, r1, r4
 800b0fa:	9316      	str	r3, [sp, #88]	; 0x58
 800b0fc:	e776      	b.n	800afec <_dtoa_r+0x108>
 800b0fe:	2320      	movs	r3, #32
 800b100:	9802      	ldr	r0, [sp, #8]
 800b102:	1a9b      	subs	r3, r3, r2
 800b104:	4098      	lsls	r0, r3
 800b106:	e7f2      	b.n	800b0ee <_dtoa_r+0x20a>
 800b108:	9015      	str	r0, [sp, #84]	; 0x54
 800b10a:	e7b8      	b.n	800b07e <_dtoa_r+0x19a>
 800b10c:	9b08      	ldr	r3, [sp, #32]
 800b10e:	9a02      	ldr	r2, [sp, #8]
 800b110:	1a9b      	subs	r3, r3, r2
 800b112:	9308      	str	r3, [sp, #32]
 800b114:	4253      	negs	r3, r2
 800b116:	930e      	str	r3, [sp, #56]	; 0x38
 800b118:	2300      	movs	r3, #0
 800b11a:	9314      	str	r3, [sp, #80]	; 0x50
 800b11c:	e7c7      	b.n	800b0ae <_dtoa_r+0x1ca>
 800b11e:	2300      	movs	r3, #0
 800b120:	930f      	str	r3, [sp, #60]	; 0x3c
 800b122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b124:	2b00      	cmp	r3, #0
 800b126:	dc36      	bgt.n	800b196 <_dtoa_r+0x2b2>
 800b128:	2301      	movs	r3, #1
 800b12a:	001a      	movs	r2, r3
 800b12c:	930c      	str	r3, [sp, #48]	; 0x30
 800b12e:	9306      	str	r3, [sp, #24]
 800b130:	9223      	str	r2, [sp, #140]	; 0x8c
 800b132:	e00d      	b.n	800b150 <_dtoa_r+0x26c>
 800b134:	2301      	movs	r3, #1
 800b136:	e7f3      	b.n	800b120 <_dtoa_r+0x23c>
 800b138:	2300      	movs	r3, #0
 800b13a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b13c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b13e:	4694      	mov	ip, r2
 800b140:	9b02      	ldr	r3, [sp, #8]
 800b142:	4463      	add	r3, ip
 800b144:	930c      	str	r3, [sp, #48]	; 0x30
 800b146:	3301      	adds	r3, #1
 800b148:	9306      	str	r3, [sp, #24]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dc00      	bgt.n	800b150 <_dtoa_r+0x26c>
 800b14e:	2301      	movs	r3, #1
 800b150:	2200      	movs	r2, #0
 800b152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b154:	6042      	str	r2, [r0, #4]
 800b156:	3204      	adds	r2, #4
 800b158:	0015      	movs	r5, r2
 800b15a:	3514      	adds	r5, #20
 800b15c:	6841      	ldr	r1, [r0, #4]
 800b15e:	429d      	cmp	r5, r3
 800b160:	d91d      	bls.n	800b19e <_dtoa_r+0x2ba>
 800b162:	0038      	movs	r0, r7
 800b164:	f001 f874 	bl	800c250 <_Balloc>
 800b168:	9005      	str	r0, [sp, #20]
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d11b      	bne.n	800b1a6 <_dtoa_r+0x2c2>
 800b16e:	21d5      	movs	r1, #213	; 0xd5
 800b170:	0002      	movs	r2, r0
 800b172:	4b3c      	ldr	r3, [pc, #240]	; (800b264 <_dtoa_r+0x380>)
 800b174:	0049      	lsls	r1, r1, #1
 800b176:	e6ca      	b.n	800af0e <_dtoa_r+0x2a>
 800b178:	2301      	movs	r3, #1
 800b17a:	e7de      	b.n	800b13a <_dtoa_r+0x256>
 800b17c:	2300      	movs	r3, #0
 800b17e:	940f      	str	r4, [sp, #60]	; 0x3c
 800b180:	9322      	str	r3, [sp, #136]	; 0x88
 800b182:	3b01      	subs	r3, #1
 800b184:	930c      	str	r3, [sp, #48]	; 0x30
 800b186:	9306      	str	r3, [sp, #24]
 800b188:	2200      	movs	r2, #0
 800b18a:	3313      	adds	r3, #19
 800b18c:	e7d0      	b.n	800b130 <_dtoa_r+0x24c>
 800b18e:	2301      	movs	r3, #1
 800b190:	930f      	str	r3, [sp, #60]	; 0x3c
 800b192:	3b02      	subs	r3, #2
 800b194:	e7f6      	b.n	800b184 <_dtoa_r+0x2a0>
 800b196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b198:	930c      	str	r3, [sp, #48]	; 0x30
 800b19a:	9306      	str	r3, [sp, #24]
 800b19c:	e7d8      	b.n	800b150 <_dtoa_r+0x26c>
 800b19e:	3101      	adds	r1, #1
 800b1a0:	6041      	str	r1, [r0, #4]
 800b1a2:	0052      	lsls	r2, r2, #1
 800b1a4:	e7d8      	b.n	800b158 <_dtoa_r+0x274>
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	9a05      	ldr	r2, [sp, #20]
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	9b06      	ldr	r3, [sp, #24]
 800b1ae:	2b0e      	cmp	r3, #14
 800b1b0:	d900      	bls.n	800b1b4 <_dtoa_r+0x2d0>
 800b1b2:	e0eb      	b.n	800b38c <_dtoa_r+0x4a8>
 800b1b4:	2c00      	cmp	r4, #0
 800b1b6:	d100      	bne.n	800b1ba <_dtoa_r+0x2d6>
 800b1b8:	e0e8      	b.n	800b38c <_dtoa_r+0x4a8>
 800b1ba:	9b02      	ldr	r3, [sp, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	dd68      	ble.n	800b292 <_dtoa_r+0x3ae>
 800b1c0:	001a      	movs	r2, r3
 800b1c2:	210f      	movs	r1, #15
 800b1c4:	4b23      	ldr	r3, [pc, #140]	; (800b254 <_dtoa_r+0x370>)
 800b1c6:	400a      	ands	r2, r1
 800b1c8:	00d2      	lsls	r2, r2, #3
 800b1ca:	189b      	adds	r3, r3, r2
 800b1cc:	681d      	ldr	r5, [r3, #0]
 800b1ce:	685e      	ldr	r6, [r3, #4]
 800b1d0:	9b02      	ldr	r3, [sp, #8]
 800b1d2:	111c      	asrs	r4, r3, #4
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	9310      	str	r3, [sp, #64]	; 0x40
 800b1d8:	9b02      	ldr	r3, [sp, #8]
 800b1da:	05db      	lsls	r3, r3, #23
 800b1dc:	d50b      	bpl.n	800b1f6 <_dtoa_r+0x312>
 800b1de:	4b22      	ldr	r3, [pc, #136]	; (800b268 <_dtoa_r+0x384>)
 800b1e0:	400c      	ands	r4, r1
 800b1e2:	6a1a      	ldr	r2, [r3, #32]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b1e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b1ea:	f7f5 fd37 	bl	8000c5c <__aeabi_ddiv>
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	900a      	str	r0, [sp, #40]	; 0x28
 800b1f2:	910b      	str	r1, [sp, #44]	; 0x2c
 800b1f4:	9310      	str	r3, [sp, #64]	; 0x40
 800b1f6:	4b1c      	ldr	r3, [pc, #112]	; (800b268 <_dtoa_r+0x384>)
 800b1f8:	9307      	str	r3, [sp, #28]
 800b1fa:	2c00      	cmp	r4, #0
 800b1fc:	d136      	bne.n	800b26c <_dtoa_r+0x388>
 800b1fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b202:	002a      	movs	r2, r5
 800b204:	0033      	movs	r3, r6
 800b206:	f7f5 fd29 	bl	8000c5c <__aeabi_ddiv>
 800b20a:	900a      	str	r0, [sp, #40]	; 0x28
 800b20c:	910b      	str	r1, [sp, #44]	; 0x2c
 800b20e:	e05c      	b.n	800b2ca <_dtoa_r+0x3e6>
 800b210:	0800de0e 	.word	0x0800de0e
 800b214:	0800de25 	.word	0x0800de25
 800b218:	7ff00000 	.word	0x7ff00000
 800b21c:	0000270f 	.word	0x0000270f
 800b220:	0800de0a 	.word	0x0800de0a
 800b224:	0800de0d 	.word	0x0800de0d
 800b228:	0800dc80 	.word	0x0800dc80
 800b22c:	0800dc81 	.word	0x0800dc81
 800b230:	3ff00000 	.word	0x3ff00000
 800b234:	fffffc01 	.word	0xfffffc01
 800b238:	3ff80000 	.word	0x3ff80000
 800b23c:	636f4361 	.word	0x636f4361
 800b240:	3fd287a7 	.word	0x3fd287a7
 800b244:	8b60c8b3 	.word	0x8b60c8b3
 800b248:	3fc68a28 	.word	0x3fc68a28
 800b24c:	509f79fb 	.word	0x509f79fb
 800b250:	3fd34413 	.word	0x3fd34413
 800b254:	0800dfa0 	.word	0x0800dfa0
 800b258:	00000432 	.word	0x00000432
 800b25c:	00000412 	.word	0x00000412
 800b260:	fe100000 	.word	0xfe100000
 800b264:	0800de84 	.word	0x0800de84
 800b268:	0800df78 	.word	0x0800df78
 800b26c:	2301      	movs	r3, #1
 800b26e:	421c      	tst	r4, r3
 800b270:	d00b      	beq.n	800b28a <_dtoa_r+0x3a6>
 800b272:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b274:	0028      	movs	r0, r5
 800b276:	3301      	adds	r3, #1
 800b278:	9310      	str	r3, [sp, #64]	; 0x40
 800b27a:	9b07      	ldr	r3, [sp, #28]
 800b27c:	0031      	movs	r1, r6
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f7f6 f8f1 	bl	8001468 <__aeabi_dmul>
 800b286:	0005      	movs	r5, r0
 800b288:	000e      	movs	r6, r1
 800b28a:	9b07      	ldr	r3, [sp, #28]
 800b28c:	1064      	asrs	r4, r4, #1
 800b28e:	3308      	adds	r3, #8
 800b290:	e7b2      	b.n	800b1f8 <_dtoa_r+0x314>
 800b292:	2302      	movs	r3, #2
 800b294:	9310      	str	r3, [sp, #64]	; 0x40
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d016      	beq.n	800b2ca <_dtoa_r+0x3e6>
 800b29c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b29e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b2a0:	425c      	negs	r4, r3
 800b2a2:	230f      	movs	r3, #15
 800b2a4:	4ab5      	ldr	r2, [pc, #724]	; (800b57c <_dtoa_r+0x698>)
 800b2a6:	4023      	ands	r3, r4
 800b2a8:	00db      	lsls	r3, r3, #3
 800b2aa:	18d3      	adds	r3, r2, r3
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	f7f6 f8da 	bl	8001468 <__aeabi_dmul>
 800b2b4:	2601      	movs	r6, #1
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	900a      	str	r0, [sp, #40]	; 0x28
 800b2ba:	910b      	str	r1, [sp, #44]	; 0x2c
 800b2bc:	4db0      	ldr	r5, [pc, #704]	; (800b580 <_dtoa_r+0x69c>)
 800b2be:	1124      	asrs	r4, r4, #4
 800b2c0:	2c00      	cmp	r4, #0
 800b2c2:	d000      	beq.n	800b2c6 <_dtoa_r+0x3e2>
 800b2c4:	e094      	b.n	800b3f0 <_dtoa_r+0x50c>
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d19f      	bne.n	800b20a <_dtoa_r+0x326>
 800b2ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d100      	bne.n	800b2d2 <_dtoa_r+0x3ee>
 800b2d0:	e09b      	b.n	800b40a <_dtoa_r+0x526>
 800b2d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	0020      	movs	r0, r4
 800b2da:	0029      	movs	r1, r5
 800b2dc:	4ba9      	ldr	r3, [pc, #676]	; (800b584 <_dtoa_r+0x6a0>)
 800b2de:	f7f5 f8bb 	bl	8000458 <__aeabi_dcmplt>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d100      	bne.n	800b2e8 <_dtoa_r+0x404>
 800b2e6:	e090      	b.n	800b40a <_dtoa_r+0x526>
 800b2e8:	9b06      	ldr	r3, [sp, #24]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d100      	bne.n	800b2f0 <_dtoa_r+0x40c>
 800b2ee:	e08c      	b.n	800b40a <_dtoa_r+0x526>
 800b2f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	dd46      	ble.n	800b384 <_dtoa_r+0x4a0>
 800b2f6:	9b02      	ldr	r3, [sp, #8]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	0020      	movs	r0, r4
 800b2fc:	0029      	movs	r1, r5
 800b2fe:	1e5e      	subs	r6, r3, #1
 800b300:	4ba1      	ldr	r3, [pc, #644]	; (800b588 <_dtoa_r+0x6a4>)
 800b302:	f7f6 f8b1 	bl	8001468 <__aeabi_dmul>
 800b306:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b308:	900a      	str	r0, [sp, #40]	; 0x28
 800b30a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b30c:	3301      	adds	r3, #1
 800b30e:	9310      	str	r3, [sp, #64]	; 0x40
 800b310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b312:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b314:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b316:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b318:	9307      	str	r3, [sp, #28]
 800b31a:	f7f6 fef7 	bl	800210c <__aeabi_i2d>
 800b31e:	0022      	movs	r2, r4
 800b320:	002b      	movs	r3, r5
 800b322:	f7f6 f8a1 	bl	8001468 <__aeabi_dmul>
 800b326:	2200      	movs	r2, #0
 800b328:	4b98      	ldr	r3, [pc, #608]	; (800b58c <_dtoa_r+0x6a8>)
 800b32a:	f7f5 f92d 	bl	8000588 <__aeabi_dadd>
 800b32e:	9010      	str	r0, [sp, #64]	; 0x40
 800b330:	9111      	str	r1, [sp, #68]	; 0x44
 800b332:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b334:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b336:	920a      	str	r2, [sp, #40]	; 0x28
 800b338:	930b      	str	r3, [sp, #44]	; 0x2c
 800b33a:	4a95      	ldr	r2, [pc, #596]	; (800b590 <_dtoa_r+0x6ac>)
 800b33c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b33e:	4694      	mov	ip, r2
 800b340:	4463      	add	r3, ip
 800b342:	9317      	str	r3, [sp, #92]	; 0x5c
 800b344:	930b      	str	r3, [sp, #44]	; 0x2c
 800b346:	9b07      	ldr	r3, [sp, #28]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d161      	bne.n	800b410 <_dtoa_r+0x52c>
 800b34c:	2200      	movs	r2, #0
 800b34e:	0020      	movs	r0, r4
 800b350:	0029      	movs	r1, r5
 800b352:	4b90      	ldr	r3, [pc, #576]	; (800b594 <_dtoa_r+0x6b0>)
 800b354:	f7f6 faf4 	bl	8001940 <__aeabi_dsub>
 800b358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b35a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b35c:	0004      	movs	r4, r0
 800b35e:	000d      	movs	r5, r1
 800b360:	f7f5 f88e 	bl	8000480 <__aeabi_dcmpgt>
 800b364:	2800      	cmp	r0, #0
 800b366:	d000      	beq.n	800b36a <_dtoa_r+0x486>
 800b368:	e2b5      	b.n	800b8d6 <_dtoa_r+0x9f2>
 800b36a:	488b      	ldr	r0, [pc, #556]	; (800b598 <_dtoa_r+0x6b4>)
 800b36c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b36e:	4684      	mov	ip, r0
 800b370:	4461      	add	r1, ip
 800b372:	000b      	movs	r3, r1
 800b374:	0020      	movs	r0, r4
 800b376:	0029      	movs	r1, r5
 800b378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b37a:	f7f5 f86d 	bl	8000458 <__aeabi_dcmplt>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d000      	beq.n	800b384 <_dtoa_r+0x4a0>
 800b382:	e2a5      	b.n	800b8d0 <_dtoa_r+0x9ec>
 800b384:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b386:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b388:	930a      	str	r3, [sp, #40]	; 0x28
 800b38a:	940b      	str	r4, [sp, #44]	; 0x2c
 800b38c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	da00      	bge.n	800b394 <_dtoa_r+0x4b0>
 800b392:	e171      	b.n	800b678 <_dtoa_r+0x794>
 800b394:	9a02      	ldr	r2, [sp, #8]
 800b396:	2a0e      	cmp	r2, #14
 800b398:	dd00      	ble.n	800b39c <_dtoa_r+0x4b8>
 800b39a:	e16d      	b.n	800b678 <_dtoa_r+0x794>
 800b39c:	4b77      	ldr	r3, [pc, #476]	; (800b57c <_dtoa_r+0x698>)
 800b39e:	00d2      	lsls	r2, r2, #3
 800b3a0:	189b      	adds	r3, r3, r2
 800b3a2:	685c      	ldr	r4, [r3, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	9308      	str	r3, [sp, #32]
 800b3a8:	9409      	str	r4, [sp, #36]	; 0x24
 800b3aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	db00      	blt.n	800b3b2 <_dtoa_r+0x4ce>
 800b3b0:	e0f6      	b.n	800b5a0 <_dtoa_r+0x6bc>
 800b3b2:	9b06      	ldr	r3, [sp, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dd00      	ble.n	800b3ba <_dtoa_r+0x4d6>
 800b3b8:	e0f2      	b.n	800b5a0 <_dtoa_r+0x6bc>
 800b3ba:	d000      	beq.n	800b3be <_dtoa_r+0x4da>
 800b3bc:	e288      	b.n	800b8d0 <_dtoa_r+0x9ec>
 800b3be:	9808      	ldr	r0, [sp, #32]
 800b3c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	4b73      	ldr	r3, [pc, #460]	; (800b594 <_dtoa_r+0x6b0>)
 800b3c6:	f7f6 f84f 	bl	8001468 <__aeabi_dmul>
 800b3ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ce:	f7f5 f861 	bl	8000494 <__aeabi_dcmpge>
 800b3d2:	9e06      	ldr	r6, [sp, #24]
 800b3d4:	0035      	movs	r5, r6
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d000      	beq.n	800b3dc <_dtoa_r+0x4f8>
 800b3da:	e25f      	b.n	800b89c <_dtoa_r+0x9b8>
 800b3dc:	9b05      	ldr	r3, [sp, #20]
 800b3de:	9a05      	ldr	r2, [sp, #20]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	9307      	str	r3, [sp, #28]
 800b3e4:	2331      	movs	r3, #49	; 0x31
 800b3e6:	7013      	strb	r3, [r2, #0]
 800b3e8:	9b02      	ldr	r3, [sp, #8]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	9302      	str	r3, [sp, #8]
 800b3ee:	e25a      	b.n	800b8a6 <_dtoa_r+0x9c2>
 800b3f0:	4234      	tst	r4, r6
 800b3f2:	d007      	beq.n	800b404 <_dtoa_r+0x520>
 800b3f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	9310      	str	r3, [sp, #64]	; 0x40
 800b3fa:	682a      	ldr	r2, [r5, #0]
 800b3fc:	686b      	ldr	r3, [r5, #4]
 800b3fe:	f7f6 f833 	bl	8001468 <__aeabi_dmul>
 800b402:	0033      	movs	r3, r6
 800b404:	1064      	asrs	r4, r4, #1
 800b406:	3508      	adds	r5, #8
 800b408:	e75a      	b.n	800b2c0 <_dtoa_r+0x3dc>
 800b40a:	9e02      	ldr	r6, [sp, #8]
 800b40c:	9b06      	ldr	r3, [sp, #24]
 800b40e:	e780      	b.n	800b312 <_dtoa_r+0x42e>
 800b410:	9b07      	ldr	r3, [sp, #28]
 800b412:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b414:	1e5a      	subs	r2, r3, #1
 800b416:	4b59      	ldr	r3, [pc, #356]	; (800b57c <_dtoa_r+0x698>)
 800b418:	00d2      	lsls	r2, r2, #3
 800b41a:	189b      	adds	r3, r3, r2
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	2900      	cmp	r1, #0
 800b422:	d051      	beq.n	800b4c8 <_dtoa_r+0x5e4>
 800b424:	2000      	movs	r0, #0
 800b426:	495d      	ldr	r1, [pc, #372]	; (800b59c <_dtoa_r+0x6b8>)
 800b428:	f7f5 fc18 	bl	8000c5c <__aeabi_ddiv>
 800b42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b430:	f7f6 fa86 	bl	8001940 <__aeabi_dsub>
 800b434:	9a05      	ldr	r2, [sp, #20]
 800b436:	9b05      	ldr	r3, [sp, #20]
 800b438:	4694      	mov	ip, r2
 800b43a:	9310      	str	r3, [sp, #64]	; 0x40
 800b43c:	9b07      	ldr	r3, [sp, #28]
 800b43e:	900a      	str	r0, [sp, #40]	; 0x28
 800b440:	910b      	str	r1, [sp, #44]	; 0x2c
 800b442:	4463      	add	r3, ip
 800b444:	9319      	str	r3, [sp, #100]	; 0x64
 800b446:	0029      	movs	r1, r5
 800b448:	0020      	movs	r0, r4
 800b44a:	f7f6 fe29 	bl	80020a0 <__aeabi_d2iz>
 800b44e:	9017      	str	r0, [sp, #92]	; 0x5c
 800b450:	f7f6 fe5c 	bl	800210c <__aeabi_i2d>
 800b454:	0002      	movs	r2, r0
 800b456:	000b      	movs	r3, r1
 800b458:	0020      	movs	r0, r4
 800b45a:	0029      	movs	r1, r5
 800b45c:	f7f6 fa70 	bl	8001940 <__aeabi_dsub>
 800b460:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b462:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b464:	3301      	adds	r3, #1
 800b466:	9307      	str	r3, [sp, #28]
 800b468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b46a:	0004      	movs	r4, r0
 800b46c:	3330      	adds	r3, #48	; 0x30
 800b46e:	7013      	strb	r3, [r2, #0]
 800b470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b474:	000d      	movs	r5, r1
 800b476:	f7f4 ffef 	bl	8000458 <__aeabi_dcmplt>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d175      	bne.n	800b56a <_dtoa_r+0x686>
 800b47e:	0022      	movs	r2, r4
 800b480:	002b      	movs	r3, r5
 800b482:	2000      	movs	r0, #0
 800b484:	493f      	ldr	r1, [pc, #252]	; (800b584 <_dtoa_r+0x6a0>)
 800b486:	f7f6 fa5b 	bl	8001940 <__aeabi_dsub>
 800b48a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b48c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b48e:	f7f4 ffe3 	bl	8000458 <__aeabi_dcmplt>
 800b492:	2800      	cmp	r0, #0
 800b494:	d000      	beq.n	800b498 <_dtoa_r+0x5b4>
 800b496:	e0d1      	b.n	800b63c <_dtoa_r+0x758>
 800b498:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b49a:	9a07      	ldr	r2, [sp, #28]
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d100      	bne.n	800b4a2 <_dtoa_r+0x5be>
 800b4a0:	e770      	b.n	800b384 <_dtoa_r+0x4a0>
 800b4a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	4b37      	ldr	r3, [pc, #220]	; (800b588 <_dtoa_r+0x6a4>)
 800b4aa:	f7f5 ffdd 	bl	8001468 <__aeabi_dmul>
 800b4ae:	4b36      	ldr	r3, [pc, #216]	; (800b588 <_dtoa_r+0x6a4>)
 800b4b0:	900a      	str	r0, [sp, #40]	; 0x28
 800b4b2:	910b      	str	r1, [sp, #44]	; 0x2c
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	0020      	movs	r0, r4
 800b4b8:	0029      	movs	r1, r5
 800b4ba:	f7f5 ffd5 	bl	8001468 <__aeabi_dmul>
 800b4be:	9b07      	ldr	r3, [sp, #28]
 800b4c0:	0004      	movs	r4, r0
 800b4c2:	000d      	movs	r5, r1
 800b4c4:	9310      	str	r3, [sp, #64]	; 0x40
 800b4c6:	e7be      	b.n	800b446 <_dtoa_r+0x562>
 800b4c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4cc:	f7f5 ffcc 	bl	8001468 <__aeabi_dmul>
 800b4d0:	9a05      	ldr	r2, [sp, #20]
 800b4d2:	9b05      	ldr	r3, [sp, #20]
 800b4d4:	4694      	mov	ip, r2
 800b4d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4d8:	9b07      	ldr	r3, [sp, #28]
 800b4da:	9010      	str	r0, [sp, #64]	; 0x40
 800b4dc:	9111      	str	r1, [sp, #68]	; 0x44
 800b4de:	4463      	add	r3, ip
 800b4e0:	9319      	str	r3, [sp, #100]	; 0x64
 800b4e2:	0029      	movs	r1, r5
 800b4e4:	0020      	movs	r0, r4
 800b4e6:	f7f6 fddb 	bl	80020a0 <__aeabi_d2iz>
 800b4ea:	9017      	str	r0, [sp, #92]	; 0x5c
 800b4ec:	f7f6 fe0e 	bl	800210c <__aeabi_i2d>
 800b4f0:	0002      	movs	r2, r0
 800b4f2:	000b      	movs	r3, r1
 800b4f4:	0020      	movs	r0, r4
 800b4f6:	0029      	movs	r1, r5
 800b4f8:	f7f6 fa22 	bl	8001940 <__aeabi_dsub>
 800b4fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b500:	3330      	adds	r3, #48	; 0x30
 800b502:	7013      	strb	r3, [r2, #0]
 800b504:	0013      	movs	r3, r2
 800b506:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b508:	3301      	adds	r3, #1
 800b50a:	0004      	movs	r4, r0
 800b50c:	000d      	movs	r5, r1
 800b50e:	930a      	str	r3, [sp, #40]	; 0x28
 800b510:	4293      	cmp	r3, r2
 800b512:	d12c      	bne.n	800b56e <_dtoa_r+0x68a>
 800b514:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b516:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b518:	9a05      	ldr	r2, [sp, #20]
 800b51a:	9b07      	ldr	r3, [sp, #28]
 800b51c:	4694      	mov	ip, r2
 800b51e:	4463      	add	r3, ip
 800b520:	2200      	movs	r2, #0
 800b522:	9307      	str	r3, [sp, #28]
 800b524:	4b1d      	ldr	r3, [pc, #116]	; (800b59c <_dtoa_r+0x6b8>)
 800b526:	f7f5 f82f 	bl	8000588 <__aeabi_dadd>
 800b52a:	0002      	movs	r2, r0
 800b52c:	000b      	movs	r3, r1
 800b52e:	0020      	movs	r0, r4
 800b530:	0029      	movs	r1, r5
 800b532:	f7f4 ffa5 	bl	8000480 <__aeabi_dcmpgt>
 800b536:	2800      	cmp	r0, #0
 800b538:	d000      	beq.n	800b53c <_dtoa_r+0x658>
 800b53a:	e07f      	b.n	800b63c <_dtoa_r+0x758>
 800b53c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b53e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b540:	2000      	movs	r0, #0
 800b542:	4916      	ldr	r1, [pc, #88]	; (800b59c <_dtoa_r+0x6b8>)
 800b544:	f7f6 f9fc 	bl	8001940 <__aeabi_dsub>
 800b548:	0002      	movs	r2, r0
 800b54a:	000b      	movs	r3, r1
 800b54c:	0020      	movs	r0, r4
 800b54e:	0029      	movs	r1, r5
 800b550:	f7f4 ff82 	bl	8000458 <__aeabi_dcmplt>
 800b554:	2800      	cmp	r0, #0
 800b556:	d100      	bne.n	800b55a <_dtoa_r+0x676>
 800b558:	e714      	b.n	800b384 <_dtoa_r+0x4a0>
 800b55a:	9b07      	ldr	r3, [sp, #28]
 800b55c:	001a      	movs	r2, r3
 800b55e:	3a01      	subs	r2, #1
 800b560:	9207      	str	r2, [sp, #28]
 800b562:	7812      	ldrb	r2, [r2, #0]
 800b564:	2a30      	cmp	r2, #48	; 0x30
 800b566:	d0f8      	beq.n	800b55a <_dtoa_r+0x676>
 800b568:	9307      	str	r3, [sp, #28]
 800b56a:	9602      	str	r6, [sp, #8]
 800b56c:	e054      	b.n	800b618 <_dtoa_r+0x734>
 800b56e:	2200      	movs	r2, #0
 800b570:	4b05      	ldr	r3, [pc, #20]	; (800b588 <_dtoa_r+0x6a4>)
 800b572:	f7f5 ff79 	bl	8001468 <__aeabi_dmul>
 800b576:	0004      	movs	r4, r0
 800b578:	000d      	movs	r5, r1
 800b57a:	e7b2      	b.n	800b4e2 <_dtoa_r+0x5fe>
 800b57c:	0800dfa0 	.word	0x0800dfa0
 800b580:	0800df78 	.word	0x0800df78
 800b584:	3ff00000 	.word	0x3ff00000
 800b588:	40240000 	.word	0x40240000
 800b58c:	401c0000 	.word	0x401c0000
 800b590:	fcc00000 	.word	0xfcc00000
 800b594:	40140000 	.word	0x40140000
 800b598:	7cc00000 	.word	0x7cc00000
 800b59c:	3fe00000 	.word	0x3fe00000
 800b5a0:	9b06      	ldr	r3, [sp, #24]
 800b5a2:	9e05      	ldr	r6, [sp, #20]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	199b      	adds	r3, r3, r6
 800b5a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b5aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b5ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b5ae:	9a08      	ldr	r2, [sp, #32]
 800b5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b2:	0020      	movs	r0, r4
 800b5b4:	0029      	movs	r1, r5
 800b5b6:	f7f5 fb51 	bl	8000c5c <__aeabi_ddiv>
 800b5ba:	f7f6 fd71 	bl	80020a0 <__aeabi_d2iz>
 800b5be:	9006      	str	r0, [sp, #24]
 800b5c0:	f7f6 fda4 	bl	800210c <__aeabi_i2d>
 800b5c4:	9a08      	ldr	r2, [sp, #32]
 800b5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c8:	f7f5 ff4e 	bl	8001468 <__aeabi_dmul>
 800b5cc:	0002      	movs	r2, r0
 800b5ce:	000b      	movs	r3, r1
 800b5d0:	0020      	movs	r0, r4
 800b5d2:	0029      	movs	r1, r5
 800b5d4:	f7f6 f9b4 	bl	8001940 <__aeabi_dsub>
 800b5d8:	0033      	movs	r3, r6
 800b5da:	9a06      	ldr	r2, [sp, #24]
 800b5dc:	3601      	adds	r6, #1
 800b5de:	3230      	adds	r2, #48	; 0x30
 800b5e0:	701a      	strb	r2, [r3, #0]
 800b5e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5e4:	9607      	str	r6, [sp, #28]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d139      	bne.n	800b65e <_dtoa_r+0x77a>
 800b5ea:	0002      	movs	r2, r0
 800b5ec:	000b      	movs	r3, r1
 800b5ee:	f7f4 ffcb 	bl	8000588 <__aeabi_dadd>
 800b5f2:	9a08      	ldr	r2, [sp, #32]
 800b5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f6:	0004      	movs	r4, r0
 800b5f8:	000d      	movs	r5, r1
 800b5fa:	f7f4 ff41 	bl	8000480 <__aeabi_dcmpgt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d11b      	bne.n	800b63a <_dtoa_r+0x756>
 800b602:	9a08      	ldr	r2, [sp, #32]
 800b604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b606:	0020      	movs	r0, r4
 800b608:	0029      	movs	r1, r5
 800b60a:	f7f4 ff1f 	bl	800044c <__aeabi_dcmpeq>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d002      	beq.n	800b618 <_dtoa_r+0x734>
 800b612:	9b06      	ldr	r3, [sp, #24]
 800b614:	07db      	lsls	r3, r3, #31
 800b616:	d410      	bmi.n	800b63a <_dtoa_r+0x756>
 800b618:	0038      	movs	r0, r7
 800b61a:	9904      	ldr	r1, [sp, #16]
 800b61c:	f000 fe5c 	bl	800c2d8 <_Bfree>
 800b620:	2300      	movs	r3, #0
 800b622:	9a07      	ldr	r2, [sp, #28]
 800b624:	9802      	ldr	r0, [sp, #8]
 800b626:	7013      	strb	r3, [r2, #0]
 800b628:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b62a:	3001      	adds	r0, #1
 800b62c:	6018      	str	r0, [r3, #0]
 800b62e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b630:	2b00      	cmp	r3, #0
 800b632:	d100      	bne.n	800b636 <_dtoa_r+0x752>
 800b634:	e4a3      	b.n	800af7e <_dtoa_r+0x9a>
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	e4a1      	b.n	800af7e <_dtoa_r+0x9a>
 800b63a:	9e02      	ldr	r6, [sp, #8]
 800b63c:	9b07      	ldr	r3, [sp, #28]
 800b63e:	9307      	str	r3, [sp, #28]
 800b640:	3b01      	subs	r3, #1
 800b642:	781a      	ldrb	r2, [r3, #0]
 800b644:	2a39      	cmp	r2, #57	; 0x39
 800b646:	d106      	bne.n	800b656 <_dtoa_r+0x772>
 800b648:	9a05      	ldr	r2, [sp, #20]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d1f7      	bne.n	800b63e <_dtoa_r+0x75a>
 800b64e:	2230      	movs	r2, #48	; 0x30
 800b650:	9905      	ldr	r1, [sp, #20]
 800b652:	3601      	adds	r6, #1
 800b654:	700a      	strb	r2, [r1, #0]
 800b656:	781a      	ldrb	r2, [r3, #0]
 800b658:	3201      	adds	r2, #1
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	e785      	b.n	800b56a <_dtoa_r+0x686>
 800b65e:	2200      	movs	r2, #0
 800b660:	4bad      	ldr	r3, [pc, #692]	; (800b918 <_dtoa_r+0xa34>)
 800b662:	f7f5 ff01 	bl	8001468 <__aeabi_dmul>
 800b666:	2200      	movs	r2, #0
 800b668:	2300      	movs	r3, #0
 800b66a:	0004      	movs	r4, r0
 800b66c:	000d      	movs	r5, r1
 800b66e:	f7f4 feed 	bl	800044c <__aeabi_dcmpeq>
 800b672:	2800      	cmp	r0, #0
 800b674:	d09b      	beq.n	800b5ae <_dtoa_r+0x6ca>
 800b676:	e7cf      	b.n	800b618 <_dtoa_r+0x734>
 800b678:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b67a:	2a00      	cmp	r2, #0
 800b67c:	d100      	bne.n	800b680 <_dtoa_r+0x79c>
 800b67e:	e082      	b.n	800b786 <_dtoa_r+0x8a2>
 800b680:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b682:	2a01      	cmp	r2, #1
 800b684:	dc66      	bgt.n	800b754 <_dtoa_r+0x870>
 800b686:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b688:	2a00      	cmp	r2, #0
 800b68a:	d05f      	beq.n	800b74c <_dtoa_r+0x868>
 800b68c:	4aa3      	ldr	r2, [pc, #652]	; (800b91c <_dtoa_r+0xa38>)
 800b68e:	189b      	adds	r3, r3, r2
 800b690:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b692:	9c08      	ldr	r4, [sp, #32]
 800b694:	9a08      	ldr	r2, [sp, #32]
 800b696:	2101      	movs	r1, #1
 800b698:	18d2      	adds	r2, r2, r3
 800b69a:	9208      	str	r2, [sp, #32]
 800b69c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b69e:	0038      	movs	r0, r7
 800b6a0:	18d3      	adds	r3, r2, r3
 800b6a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b6a4:	f000 ff14 	bl	800c4d0 <__i2b>
 800b6a8:	0005      	movs	r5, r0
 800b6aa:	2c00      	cmp	r4, #0
 800b6ac:	dd0e      	ble.n	800b6cc <_dtoa_r+0x7e8>
 800b6ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	dd0b      	ble.n	800b6cc <_dtoa_r+0x7e8>
 800b6b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6b6:	0023      	movs	r3, r4
 800b6b8:	4294      	cmp	r4, r2
 800b6ba:	dd00      	ble.n	800b6be <_dtoa_r+0x7da>
 800b6bc:	0013      	movs	r3, r2
 800b6be:	9a08      	ldr	r2, [sp, #32]
 800b6c0:	1ae4      	subs	r4, r4, r3
 800b6c2:	1ad2      	subs	r2, r2, r3
 800b6c4:	9208      	str	r2, [sp, #32]
 800b6c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	930d      	str	r3, [sp, #52]	; 0x34
 800b6cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d01f      	beq.n	800b712 <_dtoa_r+0x82e>
 800b6d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d05a      	beq.n	800b78e <_dtoa_r+0x8aa>
 800b6d8:	2e00      	cmp	r6, #0
 800b6da:	dd11      	ble.n	800b700 <_dtoa_r+0x81c>
 800b6dc:	0029      	movs	r1, r5
 800b6de:	0032      	movs	r2, r6
 800b6e0:	0038      	movs	r0, r7
 800b6e2:	f000 ffbb 	bl	800c65c <__pow5mult>
 800b6e6:	9a04      	ldr	r2, [sp, #16]
 800b6e8:	0001      	movs	r1, r0
 800b6ea:	0005      	movs	r5, r0
 800b6ec:	0038      	movs	r0, r7
 800b6ee:	f000 ff05 	bl	800c4fc <__multiply>
 800b6f2:	9904      	ldr	r1, [sp, #16]
 800b6f4:	9007      	str	r0, [sp, #28]
 800b6f6:	0038      	movs	r0, r7
 800b6f8:	f000 fdee 	bl	800c2d8 <_Bfree>
 800b6fc:	9b07      	ldr	r3, [sp, #28]
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b702:	1b9a      	subs	r2, r3, r6
 800b704:	42b3      	cmp	r3, r6
 800b706:	d004      	beq.n	800b712 <_dtoa_r+0x82e>
 800b708:	0038      	movs	r0, r7
 800b70a:	9904      	ldr	r1, [sp, #16]
 800b70c:	f000 ffa6 	bl	800c65c <__pow5mult>
 800b710:	9004      	str	r0, [sp, #16]
 800b712:	2101      	movs	r1, #1
 800b714:	0038      	movs	r0, r7
 800b716:	f000 fedb 	bl	800c4d0 <__i2b>
 800b71a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b71c:	0006      	movs	r6, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	dd37      	ble.n	800b792 <_dtoa_r+0x8ae>
 800b722:	001a      	movs	r2, r3
 800b724:	0001      	movs	r1, r0
 800b726:	0038      	movs	r0, r7
 800b728:	f000 ff98 	bl	800c65c <__pow5mult>
 800b72c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b72e:	0006      	movs	r6, r0
 800b730:	2b01      	cmp	r3, #1
 800b732:	dd33      	ble.n	800b79c <_dtoa_r+0x8b8>
 800b734:	2300      	movs	r3, #0
 800b736:	9307      	str	r3, [sp, #28]
 800b738:	6933      	ldr	r3, [r6, #16]
 800b73a:	3303      	adds	r3, #3
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	18f3      	adds	r3, r6, r3
 800b740:	6858      	ldr	r0, [r3, #4]
 800b742:	f000 fe7d 	bl	800c440 <__hi0bits>
 800b746:	2320      	movs	r3, #32
 800b748:	1a18      	subs	r0, r3, r0
 800b74a:	e03f      	b.n	800b7cc <_dtoa_r+0x8e8>
 800b74c:	2336      	movs	r3, #54	; 0x36
 800b74e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b750:	1a9b      	subs	r3, r3, r2
 800b752:	e79d      	b.n	800b690 <_dtoa_r+0x7ac>
 800b754:	9b06      	ldr	r3, [sp, #24]
 800b756:	1e5e      	subs	r6, r3, #1
 800b758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b75a:	42b3      	cmp	r3, r6
 800b75c:	db08      	blt.n	800b770 <_dtoa_r+0x88c>
 800b75e:	1b9e      	subs	r6, r3, r6
 800b760:	9b06      	ldr	r3, [sp, #24]
 800b762:	2b00      	cmp	r3, #0
 800b764:	da0c      	bge.n	800b780 <_dtoa_r+0x89c>
 800b766:	9b08      	ldr	r3, [sp, #32]
 800b768:	9a06      	ldr	r2, [sp, #24]
 800b76a:	1a9c      	subs	r4, r3, r2
 800b76c:	2300      	movs	r3, #0
 800b76e:	e791      	b.n	800b694 <_dtoa_r+0x7b0>
 800b770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b772:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b774:	1af3      	subs	r3, r6, r3
 800b776:	18d3      	adds	r3, r2, r3
 800b778:	960e      	str	r6, [sp, #56]	; 0x38
 800b77a:	9314      	str	r3, [sp, #80]	; 0x50
 800b77c:	2600      	movs	r6, #0
 800b77e:	e7ef      	b.n	800b760 <_dtoa_r+0x87c>
 800b780:	9c08      	ldr	r4, [sp, #32]
 800b782:	9b06      	ldr	r3, [sp, #24]
 800b784:	e786      	b.n	800b694 <_dtoa_r+0x7b0>
 800b786:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b788:	9c08      	ldr	r4, [sp, #32]
 800b78a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b78c:	e78d      	b.n	800b6aa <_dtoa_r+0x7c6>
 800b78e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b790:	e7ba      	b.n	800b708 <_dtoa_r+0x824>
 800b792:	2300      	movs	r3, #0
 800b794:	9307      	str	r3, [sp, #28]
 800b796:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b798:	2b01      	cmp	r3, #1
 800b79a:	dc13      	bgt.n	800b7c4 <_dtoa_r+0x8e0>
 800b79c:	2300      	movs	r3, #0
 800b79e:	9307      	str	r3, [sp, #28]
 800b7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10e      	bne.n	800b7c4 <_dtoa_r+0x8e0>
 800b7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7a8:	031b      	lsls	r3, r3, #12
 800b7aa:	d10b      	bne.n	800b7c4 <_dtoa_r+0x8e0>
 800b7ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b7ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7b0:	4213      	tst	r3, r2
 800b7b2:	d007      	beq.n	800b7c4 <_dtoa_r+0x8e0>
 800b7b4:	9b08      	ldr	r3, [sp, #32]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	9308      	str	r3, [sp, #32]
 800b7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7bc:	3301      	adds	r3, #1
 800b7be:	930d      	str	r3, [sp, #52]	; 0x34
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	9307      	str	r3, [sp, #28]
 800b7c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7c6:	2001      	movs	r0, #1
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1b5      	bne.n	800b738 <_dtoa_r+0x854>
 800b7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ce:	221f      	movs	r2, #31
 800b7d0:	1818      	adds	r0, r3, r0
 800b7d2:	0003      	movs	r3, r0
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	4210      	tst	r0, r2
 800b7d8:	d046      	beq.n	800b868 <_dtoa_r+0x984>
 800b7da:	3201      	adds	r2, #1
 800b7dc:	1ad2      	subs	r2, r2, r3
 800b7de:	2a04      	cmp	r2, #4
 800b7e0:	dd3f      	ble.n	800b862 <_dtoa_r+0x97e>
 800b7e2:	221c      	movs	r2, #28
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	9a08      	ldr	r2, [sp, #32]
 800b7e8:	18e4      	adds	r4, r4, r3
 800b7ea:	18d2      	adds	r2, r2, r3
 800b7ec:	9208      	str	r2, [sp, #32]
 800b7ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7f0:	18d3      	adds	r3, r2, r3
 800b7f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b7f4:	9b08      	ldr	r3, [sp, #32]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	dd05      	ble.n	800b806 <_dtoa_r+0x922>
 800b7fa:	001a      	movs	r2, r3
 800b7fc:	0038      	movs	r0, r7
 800b7fe:	9904      	ldr	r1, [sp, #16]
 800b800:	f000 ff88 	bl	800c714 <__lshift>
 800b804:	9004      	str	r0, [sp, #16]
 800b806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b808:	2b00      	cmp	r3, #0
 800b80a:	dd05      	ble.n	800b818 <_dtoa_r+0x934>
 800b80c:	0031      	movs	r1, r6
 800b80e:	001a      	movs	r2, r3
 800b810:	0038      	movs	r0, r7
 800b812:	f000 ff7f 	bl	800c714 <__lshift>
 800b816:	0006      	movs	r6, r0
 800b818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d026      	beq.n	800b86c <_dtoa_r+0x988>
 800b81e:	0031      	movs	r1, r6
 800b820:	9804      	ldr	r0, [sp, #16]
 800b822:	f000 ffe7 	bl	800c7f4 <__mcmp>
 800b826:	2800      	cmp	r0, #0
 800b828:	da20      	bge.n	800b86c <_dtoa_r+0x988>
 800b82a:	9b02      	ldr	r3, [sp, #8]
 800b82c:	220a      	movs	r2, #10
 800b82e:	3b01      	subs	r3, #1
 800b830:	9302      	str	r3, [sp, #8]
 800b832:	0038      	movs	r0, r7
 800b834:	2300      	movs	r3, #0
 800b836:	9904      	ldr	r1, [sp, #16]
 800b838:	f000 fd72 	bl	800c320 <__multadd>
 800b83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b83e:	9004      	str	r0, [sp, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d100      	bne.n	800b846 <_dtoa_r+0x962>
 800b844:	e160      	b.n	800bb08 <_dtoa_r+0xc24>
 800b846:	2300      	movs	r3, #0
 800b848:	0029      	movs	r1, r5
 800b84a:	220a      	movs	r2, #10
 800b84c:	0038      	movs	r0, r7
 800b84e:	f000 fd67 	bl	800c320 <__multadd>
 800b852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b854:	0005      	movs	r5, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	dc47      	bgt.n	800b8ea <_dtoa_r+0xa06>
 800b85a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	dc0d      	bgt.n	800b87c <_dtoa_r+0x998>
 800b860:	e043      	b.n	800b8ea <_dtoa_r+0xa06>
 800b862:	2a04      	cmp	r2, #4
 800b864:	d0c6      	beq.n	800b7f4 <_dtoa_r+0x910>
 800b866:	0013      	movs	r3, r2
 800b868:	331c      	adds	r3, #28
 800b86a:	e7bc      	b.n	800b7e6 <_dtoa_r+0x902>
 800b86c:	9b06      	ldr	r3, [sp, #24]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	dc35      	bgt.n	800b8de <_dtoa_r+0x9fa>
 800b872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b874:	2b02      	cmp	r3, #2
 800b876:	dd32      	ble.n	800b8de <_dtoa_r+0x9fa>
 800b878:	9b06      	ldr	r3, [sp, #24]
 800b87a:	930c      	str	r3, [sp, #48]	; 0x30
 800b87c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10c      	bne.n	800b89c <_dtoa_r+0x9b8>
 800b882:	0031      	movs	r1, r6
 800b884:	2205      	movs	r2, #5
 800b886:	0038      	movs	r0, r7
 800b888:	f000 fd4a 	bl	800c320 <__multadd>
 800b88c:	0006      	movs	r6, r0
 800b88e:	0001      	movs	r1, r0
 800b890:	9804      	ldr	r0, [sp, #16]
 800b892:	f000 ffaf 	bl	800c7f4 <__mcmp>
 800b896:	2800      	cmp	r0, #0
 800b898:	dd00      	ble.n	800b89c <_dtoa_r+0x9b8>
 800b89a:	e59f      	b.n	800b3dc <_dtoa_r+0x4f8>
 800b89c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b89e:	43db      	mvns	r3, r3
 800b8a0:	9302      	str	r3, [sp, #8]
 800b8a2:	9b05      	ldr	r3, [sp, #20]
 800b8a4:	9307      	str	r3, [sp, #28]
 800b8a6:	2400      	movs	r4, #0
 800b8a8:	0031      	movs	r1, r6
 800b8aa:	0038      	movs	r0, r7
 800b8ac:	f000 fd14 	bl	800c2d8 <_Bfree>
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	d100      	bne.n	800b8b6 <_dtoa_r+0x9d2>
 800b8b4:	e6b0      	b.n	800b618 <_dtoa_r+0x734>
 800b8b6:	2c00      	cmp	r4, #0
 800b8b8:	d005      	beq.n	800b8c6 <_dtoa_r+0x9e2>
 800b8ba:	42ac      	cmp	r4, r5
 800b8bc:	d003      	beq.n	800b8c6 <_dtoa_r+0x9e2>
 800b8be:	0021      	movs	r1, r4
 800b8c0:	0038      	movs	r0, r7
 800b8c2:	f000 fd09 	bl	800c2d8 <_Bfree>
 800b8c6:	0029      	movs	r1, r5
 800b8c8:	0038      	movs	r0, r7
 800b8ca:	f000 fd05 	bl	800c2d8 <_Bfree>
 800b8ce:	e6a3      	b.n	800b618 <_dtoa_r+0x734>
 800b8d0:	2600      	movs	r6, #0
 800b8d2:	0035      	movs	r5, r6
 800b8d4:	e7e2      	b.n	800b89c <_dtoa_r+0x9b8>
 800b8d6:	9602      	str	r6, [sp, #8]
 800b8d8:	9e07      	ldr	r6, [sp, #28]
 800b8da:	0035      	movs	r5, r6
 800b8dc:	e57e      	b.n	800b3dc <_dtoa_r+0x4f8>
 800b8de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d100      	bne.n	800b8e6 <_dtoa_r+0xa02>
 800b8e4:	e0c8      	b.n	800ba78 <_dtoa_r+0xb94>
 800b8e6:	9b06      	ldr	r3, [sp, #24]
 800b8e8:	930c      	str	r3, [sp, #48]	; 0x30
 800b8ea:	2c00      	cmp	r4, #0
 800b8ec:	dd05      	ble.n	800b8fa <_dtoa_r+0xa16>
 800b8ee:	0029      	movs	r1, r5
 800b8f0:	0022      	movs	r2, r4
 800b8f2:	0038      	movs	r0, r7
 800b8f4:	f000 ff0e 	bl	800c714 <__lshift>
 800b8f8:	0005      	movs	r5, r0
 800b8fa:	9b07      	ldr	r3, [sp, #28]
 800b8fc:	0028      	movs	r0, r5
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d01f      	beq.n	800b942 <_dtoa_r+0xa5e>
 800b902:	0038      	movs	r0, r7
 800b904:	6869      	ldr	r1, [r5, #4]
 800b906:	f000 fca3 	bl	800c250 <_Balloc>
 800b90a:	1e04      	subs	r4, r0, #0
 800b90c:	d10c      	bne.n	800b928 <_dtoa_r+0xa44>
 800b90e:	0002      	movs	r2, r0
 800b910:	4b03      	ldr	r3, [pc, #12]	; (800b920 <_dtoa_r+0xa3c>)
 800b912:	4904      	ldr	r1, [pc, #16]	; (800b924 <_dtoa_r+0xa40>)
 800b914:	f7ff fafb 	bl	800af0e <_dtoa_r+0x2a>
 800b918:	40240000 	.word	0x40240000
 800b91c:	00000433 	.word	0x00000433
 800b920:	0800de84 	.word	0x0800de84
 800b924:	000002ea 	.word	0x000002ea
 800b928:	0029      	movs	r1, r5
 800b92a:	692b      	ldr	r3, [r5, #16]
 800b92c:	310c      	adds	r1, #12
 800b92e:	1c9a      	adds	r2, r3, #2
 800b930:	0092      	lsls	r2, r2, #2
 800b932:	300c      	adds	r0, #12
 800b934:	f7fd fba5 	bl	8009082 <memcpy>
 800b938:	2201      	movs	r2, #1
 800b93a:	0021      	movs	r1, r4
 800b93c:	0038      	movs	r0, r7
 800b93e:	f000 fee9 	bl	800c714 <__lshift>
 800b942:	002c      	movs	r4, r5
 800b944:	0005      	movs	r5, r0
 800b946:	9b05      	ldr	r3, [sp, #20]
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	0031      	movs	r1, r6
 800b94c:	9804      	ldr	r0, [sp, #16]
 800b94e:	f7ff fa3d 	bl	800adcc <quorem>
 800b952:	0003      	movs	r3, r0
 800b954:	0021      	movs	r1, r4
 800b956:	3330      	adds	r3, #48	; 0x30
 800b958:	900e      	str	r0, [sp, #56]	; 0x38
 800b95a:	9804      	ldr	r0, [sp, #16]
 800b95c:	9306      	str	r3, [sp, #24]
 800b95e:	f000 ff49 	bl	800c7f4 <__mcmp>
 800b962:	002a      	movs	r2, r5
 800b964:	900f      	str	r0, [sp, #60]	; 0x3c
 800b966:	0031      	movs	r1, r6
 800b968:	0038      	movs	r0, r7
 800b96a:	f000 ff5f 	bl	800c82c <__mdiff>
 800b96e:	68c3      	ldr	r3, [r0, #12]
 800b970:	9007      	str	r0, [sp, #28]
 800b972:	9310      	str	r3, [sp, #64]	; 0x40
 800b974:	2301      	movs	r3, #1
 800b976:	930d      	str	r3, [sp, #52]	; 0x34
 800b978:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d104      	bne.n	800b988 <_dtoa_r+0xaa4>
 800b97e:	0001      	movs	r1, r0
 800b980:	9804      	ldr	r0, [sp, #16]
 800b982:	f000 ff37 	bl	800c7f4 <__mcmp>
 800b986:	900d      	str	r0, [sp, #52]	; 0x34
 800b988:	0038      	movs	r0, r7
 800b98a:	9907      	ldr	r1, [sp, #28]
 800b98c:	f000 fca4 	bl	800c2d8 <_Bfree>
 800b990:	2301      	movs	r3, #1
 800b992:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b996:	4018      	ands	r0, r3
 800b998:	9b08      	ldr	r3, [sp, #32]
 800b99a:	3301      	adds	r3, #1
 800b99c:	9307      	str	r3, [sp, #28]
 800b99e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	4303      	orrs	r3, r0
 800b9a4:	d10c      	bne.n	800b9c0 <_dtoa_r+0xadc>
 800b9a6:	9b06      	ldr	r3, [sp, #24]
 800b9a8:	2b39      	cmp	r3, #57	; 0x39
 800b9aa:	d025      	beq.n	800b9f8 <_dtoa_r+0xb14>
 800b9ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	dd02      	ble.n	800b9b8 <_dtoa_r+0xad4>
 800b9b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9b4:	3331      	adds	r3, #49	; 0x31
 800b9b6:	9306      	str	r3, [sp, #24]
 800b9b8:	9b08      	ldr	r3, [sp, #32]
 800b9ba:	9a06      	ldr	r2, [sp, #24]
 800b9bc:	701a      	strb	r2, [r3, #0]
 800b9be:	e773      	b.n	800b8a8 <_dtoa_r+0x9c4>
 800b9c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	db03      	blt.n	800b9ce <_dtoa_r+0xaea>
 800b9c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	4303      	orrs	r3, r0
 800b9cc:	d11f      	bne.n	800ba0e <_dtoa_r+0xb2a>
 800b9ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	ddf1      	ble.n	800b9b8 <_dtoa_r+0xad4>
 800b9d4:	9904      	ldr	r1, [sp, #16]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	0038      	movs	r0, r7
 800b9da:	f000 fe9b 	bl	800c714 <__lshift>
 800b9de:	0031      	movs	r1, r6
 800b9e0:	9004      	str	r0, [sp, #16]
 800b9e2:	f000 ff07 	bl	800c7f4 <__mcmp>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	dc03      	bgt.n	800b9f2 <_dtoa_r+0xb0e>
 800b9ea:	d1e5      	bne.n	800b9b8 <_dtoa_r+0xad4>
 800b9ec:	9b06      	ldr	r3, [sp, #24]
 800b9ee:	07db      	lsls	r3, r3, #31
 800b9f0:	d5e2      	bpl.n	800b9b8 <_dtoa_r+0xad4>
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	2b39      	cmp	r3, #57	; 0x39
 800b9f6:	d1dc      	bne.n	800b9b2 <_dtoa_r+0xace>
 800b9f8:	2339      	movs	r3, #57	; 0x39
 800b9fa:	9a08      	ldr	r2, [sp, #32]
 800b9fc:	7013      	strb	r3, [r2, #0]
 800b9fe:	9b07      	ldr	r3, [sp, #28]
 800ba00:	9307      	str	r3, [sp, #28]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	781a      	ldrb	r2, [r3, #0]
 800ba06:	2a39      	cmp	r2, #57	; 0x39
 800ba08:	d06c      	beq.n	800bae4 <_dtoa_r+0xc00>
 800ba0a:	3201      	adds	r2, #1
 800ba0c:	e7d6      	b.n	800b9bc <_dtoa_r+0xad8>
 800ba0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	dd07      	ble.n	800ba24 <_dtoa_r+0xb40>
 800ba14:	9b06      	ldr	r3, [sp, #24]
 800ba16:	2b39      	cmp	r3, #57	; 0x39
 800ba18:	d0ee      	beq.n	800b9f8 <_dtoa_r+0xb14>
 800ba1a:	9b06      	ldr	r3, [sp, #24]
 800ba1c:	9a08      	ldr	r2, [sp, #32]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	7013      	strb	r3, [r2, #0]
 800ba22:	e741      	b.n	800b8a8 <_dtoa_r+0x9c4>
 800ba24:	9b08      	ldr	r3, [sp, #32]
 800ba26:	9a06      	ldr	r2, [sp, #24]
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	9a05      	ldr	r2, [sp, #20]
 800ba2e:	1a9b      	subs	r3, r3, r2
 800ba30:	9a08      	ldr	r2, [sp, #32]
 800ba32:	189b      	adds	r3, r3, r2
 800ba34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d03e      	beq.n	800bab8 <_dtoa_r+0xbd4>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	9904      	ldr	r1, [sp, #16]
 800ba40:	0038      	movs	r0, r7
 800ba42:	f000 fc6d 	bl	800c320 <__multadd>
 800ba46:	2300      	movs	r3, #0
 800ba48:	9004      	str	r0, [sp, #16]
 800ba4a:	220a      	movs	r2, #10
 800ba4c:	0021      	movs	r1, r4
 800ba4e:	0038      	movs	r0, r7
 800ba50:	42ac      	cmp	r4, r5
 800ba52:	d106      	bne.n	800ba62 <_dtoa_r+0xb7e>
 800ba54:	f000 fc64 	bl	800c320 <__multadd>
 800ba58:	0004      	movs	r4, r0
 800ba5a:	0005      	movs	r5, r0
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	9308      	str	r3, [sp, #32]
 800ba60:	e773      	b.n	800b94a <_dtoa_r+0xa66>
 800ba62:	f000 fc5d 	bl	800c320 <__multadd>
 800ba66:	0029      	movs	r1, r5
 800ba68:	0004      	movs	r4, r0
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	220a      	movs	r2, #10
 800ba6e:	0038      	movs	r0, r7
 800ba70:	f000 fc56 	bl	800c320 <__multadd>
 800ba74:	0005      	movs	r5, r0
 800ba76:	e7f1      	b.n	800ba5c <_dtoa_r+0xb78>
 800ba78:	9b06      	ldr	r3, [sp, #24]
 800ba7a:	930c      	str	r3, [sp, #48]	; 0x30
 800ba7c:	2400      	movs	r4, #0
 800ba7e:	0031      	movs	r1, r6
 800ba80:	9804      	ldr	r0, [sp, #16]
 800ba82:	f7ff f9a3 	bl	800adcc <quorem>
 800ba86:	9b05      	ldr	r3, [sp, #20]
 800ba88:	3030      	adds	r0, #48	; 0x30
 800ba8a:	5518      	strb	r0, [r3, r4]
 800ba8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba8e:	3401      	adds	r4, #1
 800ba90:	9006      	str	r0, [sp, #24]
 800ba92:	42a3      	cmp	r3, r4
 800ba94:	dd07      	ble.n	800baa6 <_dtoa_r+0xbc2>
 800ba96:	2300      	movs	r3, #0
 800ba98:	220a      	movs	r2, #10
 800ba9a:	0038      	movs	r0, r7
 800ba9c:	9904      	ldr	r1, [sp, #16]
 800ba9e:	f000 fc3f 	bl	800c320 <__multadd>
 800baa2:	9004      	str	r0, [sp, #16]
 800baa4:	e7eb      	b.n	800ba7e <_dtoa_r+0xb9a>
 800baa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baa8:	2001      	movs	r0, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	dd00      	ble.n	800bab0 <_dtoa_r+0xbcc>
 800baae:	0018      	movs	r0, r3
 800bab0:	2400      	movs	r4, #0
 800bab2:	9b05      	ldr	r3, [sp, #20]
 800bab4:	181b      	adds	r3, r3, r0
 800bab6:	9307      	str	r3, [sp, #28]
 800bab8:	9904      	ldr	r1, [sp, #16]
 800baba:	2201      	movs	r2, #1
 800babc:	0038      	movs	r0, r7
 800babe:	f000 fe29 	bl	800c714 <__lshift>
 800bac2:	0031      	movs	r1, r6
 800bac4:	9004      	str	r0, [sp, #16]
 800bac6:	f000 fe95 	bl	800c7f4 <__mcmp>
 800baca:	2800      	cmp	r0, #0
 800bacc:	dc97      	bgt.n	800b9fe <_dtoa_r+0xb1a>
 800bace:	d102      	bne.n	800bad6 <_dtoa_r+0xbf2>
 800bad0:	9b06      	ldr	r3, [sp, #24]
 800bad2:	07db      	lsls	r3, r3, #31
 800bad4:	d493      	bmi.n	800b9fe <_dtoa_r+0xb1a>
 800bad6:	9b07      	ldr	r3, [sp, #28]
 800bad8:	9307      	str	r3, [sp, #28]
 800bada:	3b01      	subs	r3, #1
 800badc:	781a      	ldrb	r2, [r3, #0]
 800bade:	2a30      	cmp	r2, #48	; 0x30
 800bae0:	d0fa      	beq.n	800bad8 <_dtoa_r+0xbf4>
 800bae2:	e6e1      	b.n	800b8a8 <_dtoa_r+0x9c4>
 800bae4:	9a05      	ldr	r2, [sp, #20]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d18a      	bne.n	800ba00 <_dtoa_r+0xb1c>
 800baea:	9b02      	ldr	r3, [sp, #8]
 800baec:	3301      	adds	r3, #1
 800baee:	9302      	str	r3, [sp, #8]
 800baf0:	2331      	movs	r3, #49	; 0x31
 800baf2:	e795      	b.n	800ba20 <_dtoa_r+0xb3c>
 800baf4:	4b08      	ldr	r3, [pc, #32]	; (800bb18 <_dtoa_r+0xc34>)
 800baf6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800baf8:	9305      	str	r3, [sp, #20]
 800bafa:	4b08      	ldr	r3, [pc, #32]	; (800bb1c <_dtoa_r+0xc38>)
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	d001      	beq.n	800bb04 <_dtoa_r+0xc20>
 800bb00:	f7ff fa3b 	bl	800af7a <_dtoa_r+0x96>
 800bb04:	f7ff fa3b 	bl	800af7e <_dtoa_r+0x9a>
 800bb08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	dcb6      	bgt.n	800ba7c <_dtoa_r+0xb98>
 800bb0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	dd00      	ble.n	800bb16 <_dtoa_r+0xc32>
 800bb14:	e6b2      	b.n	800b87c <_dtoa_r+0x998>
 800bb16:	e7b1      	b.n	800ba7c <_dtoa_r+0xb98>
 800bb18:	0800de01 	.word	0x0800de01
 800bb1c:	0800de09 	.word	0x0800de09

0800bb20 <rshift>:
 800bb20:	0002      	movs	r2, r0
 800bb22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb24:	6907      	ldr	r7, [r0, #16]
 800bb26:	3214      	adds	r2, #20
 800bb28:	0013      	movs	r3, r2
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	114e      	asrs	r6, r1, #5
 800bb2e:	42b7      	cmp	r7, r6
 800bb30:	dd31      	ble.n	800bb96 <rshift+0x76>
 800bb32:	00b3      	lsls	r3, r6, #2
 800bb34:	18d3      	adds	r3, r2, r3
 800bb36:	251f      	movs	r5, #31
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	000b      	movs	r3, r1
 800bb3c:	00bc      	lsls	r4, r7, #2
 800bb3e:	402b      	ands	r3, r5
 800bb40:	1914      	adds	r4, r2, r4
 800bb42:	9302      	str	r3, [sp, #8]
 800bb44:	4229      	tst	r1, r5
 800bb46:	d10c      	bne.n	800bb62 <rshift+0x42>
 800bb48:	0015      	movs	r5, r2
 800bb4a:	9901      	ldr	r1, [sp, #4]
 800bb4c:	428c      	cmp	r4, r1
 800bb4e:	d838      	bhi.n	800bbc2 <rshift+0xa2>
 800bb50:	9901      	ldr	r1, [sp, #4]
 800bb52:	2300      	movs	r3, #0
 800bb54:	3903      	subs	r1, #3
 800bb56:	428c      	cmp	r4, r1
 800bb58:	d301      	bcc.n	800bb5e <rshift+0x3e>
 800bb5a:	1bbb      	subs	r3, r7, r6
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	18d3      	adds	r3, r2, r3
 800bb60:	e019      	b.n	800bb96 <rshift+0x76>
 800bb62:	2120      	movs	r1, #32
 800bb64:	9b02      	ldr	r3, [sp, #8]
 800bb66:	9d01      	ldr	r5, [sp, #4]
 800bb68:	1acb      	subs	r3, r1, r3
 800bb6a:	9303      	str	r3, [sp, #12]
 800bb6c:	cd02      	ldmia	r5!, {r1}
 800bb6e:	9b02      	ldr	r3, [sp, #8]
 800bb70:	4694      	mov	ip, r2
 800bb72:	40d9      	lsrs	r1, r3
 800bb74:	9100      	str	r1, [sp, #0]
 800bb76:	42ac      	cmp	r4, r5
 800bb78:	d816      	bhi.n	800bba8 <rshift+0x88>
 800bb7a:	9d01      	ldr	r5, [sp, #4]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	3501      	adds	r5, #1
 800bb80:	42ac      	cmp	r4, r5
 800bb82:	d302      	bcc.n	800bb8a <rshift+0x6a>
 800bb84:	1bbb      	subs	r3, r7, r6
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	3b04      	subs	r3, #4
 800bb8a:	9900      	ldr	r1, [sp, #0]
 800bb8c:	18d3      	adds	r3, r2, r3
 800bb8e:	6019      	str	r1, [r3, #0]
 800bb90:	2900      	cmp	r1, #0
 800bb92:	d000      	beq.n	800bb96 <rshift+0x76>
 800bb94:	3304      	adds	r3, #4
 800bb96:	1a99      	subs	r1, r3, r2
 800bb98:	1089      	asrs	r1, r1, #2
 800bb9a:	6101      	str	r1, [r0, #16]
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d101      	bne.n	800bba4 <rshift+0x84>
 800bba0:	2300      	movs	r3, #0
 800bba2:	6143      	str	r3, [r0, #20]
 800bba4:	b005      	add	sp, #20
 800bba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bba8:	682b      	ldr	r3, [r5, #0]
 800bbaa:	9903      	ldr	r1, [sp, #12]
 800bbac:	408b      	lsls	r3, r1
 800bbae:	9900      	ldr	r1, [sp, #0]
 800bbb0:	4319      	orrs	r1, r3
 800bbb2:	4663      	mov	r3, ip
 800bbb4:	c302      	stmia	r3!, {r1}
 800bbb6:	469c      	mov	ip, r3
 800bbb8:	cd02      	ldmia	r5!, {r1}
 800bbba:	9b02      	ldr	r3, [sp, #8]
 800bbbc:	40d9      	lsrs	r1, r3
 800bbbe:	9100      	str	r1, [sp, #0]
 800bbc0:	e7d9      	b.n	800bb76 <rshift+0x56>
 800bbc2:	c908      	ldmia	r1!, {r3}
 800bbc4:	c508      	stmia	r5!, {r3}
 800bbc6:	e7c1      	b.n	800bb4c <rshift+0x2c>

0800bbc8 <__hexdig_fun>:
 800bbc8:	0002      	movs	r2, r0
 800bbca:	3a30      	subs	r2, #48	; 0x30
 800bbcc:	0003      	movs	r3, r0
 800bbce:	2a09      	cmp	r2, #9
 800bbd0:	d802      	bhi.n	800bbd8 <__hexdig_fun+0x10>
 800bbd2:	3b20      	subs	r3, #32
 800bbd4:	b2d8      	uxtb	r0, r3
 800bbd6:	4770      	bx	lr
 800bbd8:	0002      	movs	r2, r0
 800bbda:	3a61      	subs	r2, #97	; 0x61
 800bbdc:	2a05      	cmp	r2, #5
 800bbde:	d801      	bhi.n	800bbe4 <__hexdig_fun+0x1c>
 800bbe0:	3b47      	subs	r3, #71	; 0x47
 800bbe2:	e7f7      	b.n	800bbd4 <__hexdig_fun+0xc>
 800bbe4:	001a      	movs	r2, r3
 800bbe6:	3a41      	subs	r2, #65	; 0x41
 800bbe8:	2000      	movs	r0, #0
 800bbea:	2a05      	cmp	r2, #5
 800bbec:	d8f3      	bhi.n	800bbd6 <__hexdig_fun+0xe>
 800bbee:	3b27      	subs	r3, #39	; 0x27
 800bbf0:	e7f0      	b.n	800bbd4 <__hexdig_fun+0xc>
	...

0800bbf4 <__gethex>:
 800bbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbf6:	b08d      	sub	sp, #52	; 0x34
 800bbf8:	930a      	str	r3, [sp, #40]	; 0x28
 800bbfa:	4bbd      	ldr	r3, [pc, #756]	; (800bef0 <__gethex+0x2fc>)
 800bbfc:	9005      	str	r0, [sp, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	9109      	str	r1, [sp, #36]	; 0x24
 800bc02:	0018      	movs	r0, r3
 800bc04:	9202      	str	r2, [sp, #8]
 800bc06:	9307      	str	r3, [sp, #28]
 800bc08:	f7f4 fa7e 	bl	8000108 <strlen>
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	9b07      	ldr	r3, [sp, #28]
 800bc10:	4252      	negs	r2, r2
 800bc12:	181b      	adds	r3, r3, r0
 800bc14:	3b01      	subs	r3, #1
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	9003      	str	r0, [sp, #12]
 800bc1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc1e:	6819      	ldr	r1, [r3, #0]
 800bc20:	1c8b      	adds	r3, r1, #2
 800bc22:	1a52      	subs	r2, r2, r1
 800bc24:	18d1      	adds	r1, r2, r3
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	9108      	str	r1, [sp, #32]
 800bc2a:	9901      	ldr	r1, [sp, #4]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	7808      	ldrb	r0, [r1, #0]
 800bc30:	2830      	cmp	r0, #48	; 0x30
 800bc32:	d0f7      	beq.n	800bc24 <__gethex+0x30>
 800bc34:	f7ff ffc8 	bl	800bbc8 <__hexdig_fun>
 800bc38:	1e04      	subs	r4, r0, #0
 800bc3a:	d13e      	bne.n	800bcba <__gethex+0xc6>
 800bc3c:	9a03      	ldr	r2, [sp, #12]
 800bc3e:	9907      	ldr	r1, [sp, #28]
 800bc40:	9801      	ldr	r0, [sp, #4]
 800bc42:	f001 f945 	bl	800ced0 <strncmp>
 800bc46:	1e07      	subs	r7, r0, #0
 800bc48:	d000      	beq.n	800bc4c <__gethex+0x58>
 800bc4a:	e06f      	b.n	800bd2c <__gethex+0x138>
 800bc4c:	9b01      	ldr	r3, [sp, #4]
 800bc4e:	9a03      	ldr	r2, [sp, #12]
 800bc50:	5c98      	ldrb	r0, [r3, r2]
 800bc52:	189d      	adds	r5, r3, r2
 800bc54:	f7ff ffb8 	bl	800bbc8 <__hexdig_fun>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	9304      	str	r3, [sp, #16]
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d034      	beq.n	800bcca <__gethex+0xd6>
 800bc60:	9501      	str	r5, [sp, #4]
 800bc62:	9b01      	ldr	r3, [sp, #4]
 800bc64:	7818      	ldrb	r0, [r3, #0]
 800bc66:	2830      	cmp	r0, #48	; 0x30
 800bc68:	d009      	beq.n	800bc7e <__gethex+0x8a>
 800bc6a:	f7ff ffad 	bl	800bbc8 <__hexdig_fun>
 800bc6e:	4243      	negs	r3, r0
 800bc70:	4143      	adcs	r3, r0
 800bc72:	9304      	str	r3, [sp, #16]
 800bc74:	2301      	movs	r3, #1
 800bc76:	002c      	movs	r4, r5
 800bc78:	9308      	str	r3, [sp, #32]
 800bc7a:	9d01      	ldr	r5, [sp, #4]
 800bc7c:	e004      	b.n	800bc88 <__gethex+0x94>
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	3301      	adds	r3, #1
 800bc82:	9301      	str	r3, [sp, #4]
 800bc84:	e7ed      	b.n	800bc62 <__gethex+0x6e>
 800bc86:	3501      	adds	r5, #1
 800bc88:	7828      	ldrb	r0, [r5, #0]
 800bc8a:	f7ff ff9d 	bl	800bbc8 <__hexdig_fun>
 800bc8e:	1e07      	subs	r7, r0, #0
 800bc90:	d1f9      	bne.n	800bc86 <__gethex+0x92>
 800bc92:	0028      	movs	r0, r5
 800bc94:	9a03      	ldr	r2, [sp, #12]
 800bc96:	9907      	ldr	r1, [sp, #28]
 800bc98:	f001 f91a 	bl	800ced0 <strncmp>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d112      	bne.n	800bcc6 <__gethex+0xd2>
 800bca0:	2c00      	cmp	r4, #0
 800bca2:	d107      	bne.n	800bcb4 <__gethex+0xc0>
 800bca4:	9b03      	ldr	r3, [sp, #12]
 800bca6:	18ed      	adds	r5, r5, r3
 800bca8:	002c      	movs	r4, r5
 800bcaa:	7828      	ldrb	r0, [r5, #0]
 800bcac:	f7ff ff8c 	bl	800bbc8 <__hexdig_fun>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	d106      	bne.n	800bcc2 <__gethex+0xce>
 800bcb4:	1b67      	subs	r7, r4, r5
 800bcb6:	00bf      	lsls	r7, r7, #2
 800bcb8:	e007      	b.n	800bcca <__gethex+0xd6>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	001c      	movs	r4, r3
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	e7db      	b.n	800bc7a <__gethex+0x86>
 800bcc2:	3501      	adds	r5, #1
 800bcc4:	e7f1      	b.n	800bcaa <__gethex+0xb6>
 800bcc6:	2c00      	cmp	r4, #0
 800bcc8:	d1f4      	bne.n	800bcb4 <__gethex+0xc0>
 800bcca:	2220      	movs	r2, #32
 800bccc:	782b      	ldrb	r3, [r5, #0]
 800bcce:	002e      	movs	r6, r5
 800bcd0:	4393      	bics	r3, r2
 800bcd2:	2b50      	cmp	r3, #80	; 0x50
 800bcd4:	d11d      	bne.n	800bd12 <__gethex+0x11e>
 800bcd6:	786b      	ldrb	r3, [r5, #1]
 800bcd8:	2b2b      	cmp	r3, #43	; 0x2b
 800bcda:	d02c      	beq.n	800bd36 <__gethex+0x142>
 800bcdc:	2b2d      	cmp	r3, #45	; 0x2d
 800bcde:	d02e      	beq.n	800bd3e <__gethex+0x14a>
 800bce0:	2300      	movs	r3, #0
 800bce2:	1c6e      	adds	r6, r5, #1
 800bce4:	9306      	str	r3, [sp, #24]
 800bce6:	7830      	ldrb	r0, [r6, #0]
 800bce8:	f7ff ff6e 	bl	800bbc8 <__hexdig_fun>
 800bcec:	1e43      	subs	r3, r0, #1
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	2b18      	cmp	r3, #24
 800bcf2:	d82b      	bhi.n	800bd4c <__gethex+0x158>
 800bcf4:	3810      	subs	r0, #16
 800bcf6:	0004      	movs	r4, r0
 800bcf8:	7870      	ldrb	r0, [r6, #1]
 800bcfa:	f7ff ff65 	bl	800bbc8 <__hexdig_fun>
 800bcfe:	1e43      	subs	r3, r0, #1
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	3601      	adds	r6, #1
 800bd04:	2b18      	cmp	r3, #24
 800bd06:	d91c      	bls.n	800bd42 <__gethex+0x14e>
 800bd08:	9b06      	ldr	r3, [sp, #24]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d000      	beq.n	800bd10 <__gethex+0x11c>
 800bd0e:	4264      	negs	r4, r4
 800bd10:	193f      	adds	r7, r7, r4
 800bd12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd14:	601e      	str	r6, [r3, #0]
 800bd16:	9b04      	ldr	r3, [sp, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d019      	beq.n	800bd50 <__gethex+0x15c>
 800bd1c:	2600      	movs	r6, #0
 800bd1e:	9b08      	ldr	r3, [sp, #32]
 800bd20:	42b3      	cmp	r3, r6
 800bd22:	d100      	bne.n	800bd26 <__gethex+0x132>
 800bd24:	3606      	adds	r6, #6
 800bd26:	0030      	movs	r0, r6
 800bd28:	b00d      	add	sp, #52	; 0x34
 800bd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	0027      	movs	r7, r4
 800bd30:	9d01      	ldr	r5, [sp, #4]
 800bd32:	9304      	str	r3, [sp, #16]
 800bd34:	e7c9      	b.n	800bcca <__gethex+0xd6>
 800bd36:	2300      	movs	r3, #0
 800bd38:	9306      	str	r3, [sp, #24]
 800bd3a:	1cae      	adds	r6, r5, #2
 800bd3c:	e7d3      	b.n	800bce6 <__gethex+0xf2>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e7fa      	b.n	800bd38 <__gethex+0x144>
 800bd42:	230a      	movs	r3, #10
 800bd44:	435c      	muls	r4, r3
 800bd46:	1824      	adds	r4, r4, r0
 800bd48:	3c10      	subs	r4, #16
 800bd4a:	e7d5      	b.n	800bcf8 <__gethex+0x104>
 800bd4c:	002e      	movs	r6, r5
 800bd4e:	e7e0      	b.n	800bd12 <__gethex+0x11e>
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	9904      	ldr	r1, [sp, #16]
 800bd54:	1aeb      	subs	r3, r5, r3
 800bd56:	3b01      	subs	r3, #1
 800bd58:	2b07      	cmp	r3, #7
 800bd5a:	dc0a      	bgt.n	800bd72 <__gethex+0x17e>
 800bd5c:	9805      	ldr	r0, [sp, #20]
 800bd5e:	f000 fa77 	bl	800c250 <_Balloc>
 800bd62:	1e04      	subs	r4, r0, #0
 800bd64:	d108      	bne.n	800bd78 <__gethex+0x184>
 800bd66:	0002      	movs	r2, r0
 800bd68:	21de      	movs	r1, #222	; 0xde
 800bd6a:	4b62      	ldr	r3, [pc, #392]	; (800bef4 <__gethex+0x300>)
 800bd6c:	4862      	ldr	r0, [pc, #392]	; (800bef8 <__gethex+0x304>)
 800bd6e:	f001 f8cd 	bl	800cf0c <__assert_func>
 800bd72:	3101      	adds	r1, #1
 800bd74:	105b      	asrs	r3, r3, #1
 800bd76:	e7ef      	b.n	800bd58 <__gethex+0x164>
 800bd78:	0003      	movs	r3, r0
 800bd7a:	3314      	adds	r3, #20
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd80:	2300      	movs	r3, #0
 800bd82:	001e      	movs	r6, r3
 800bd84:	9306      	str	r3, [sp, #24]
 800bd86:	9b01      	ldr	r3, [sp, #4]
 800bd88:	42ab      	cmp	r3, r5
 800bd8a:	d340      	bcc.n	800be0e <__gethex+0x21a>
 800bd8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bd8e:	9b04      	ldr	r3, [sp, #16]
 800bd90:	c540      	stmia	r5!, {r6}
 800bd92:	1aed      	subs	r5, r5, r3
 800bd94:	10ad      	asrs	r5, r5, #2
 800bd96:	0030      	movs	r0, r6
 800bd98:	6125      	str	r5, [r4, #16]
 800bd9a:	f000 fb51 	bl	800c440 <__hi0bits>
 800bd9e:	9b02      	ldr	r3, [sp, #8]
 800bda0:	016d      	lsls	r5, r5, #5
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	1a2e      	subs	r6, r5, r0
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	429e      	cmp	r6, r3
 800bdaa:	dd5a      	ble.n	800be62 <__gethex+0x26e>
 800bdac:	1af6      	subs	r6, r6, r3
 800bdae:	0031      	movs	r1, r6
 800bdb0:	0020      	movs	r0, r4
 800bdb2:	f000 fef4 	bl	800cb9e <__any_on>
 800bdb6:	1e05      	subs	r5, r0, #0
 800bdb8:	d016      	beq.n	800bde8 <__gethex+0x1f4>
 800bdba:	2501      	movs	r5, #1
 800bdbc:	211f      	movs	r1, #31
 800bdbe:	0028      	movs	r0, r5
 800bdc0:	1e73      	subs	r3, r6, #1
 800bdc2:	4019      	ands	r1, r3
 800bdc4:	4088      	lsls	r0, r1
 800bdc6:	0001      	movs	r1, r0
 800bdc8:	115a      	asrs	r2, r3, #5
 800bdca:	9804      	ldr	r0, [sp, #16]
 800bdcc:	0092      	lsls	r2, r2, #2
 800bdce:	5812      	ldr	r2, [r2, r0]
 800bdd0:	420a      	tst	r2, r1
 800bdd2:	d009      	beq.n	800bde8 <__gethex+0x1f4>
 800bdd4:	42ab      	cmp	r3, r5
 800bdd6:	dd06      	ble.n	800bde6 <__gethex+0x1f2>
 800bdd8:	0020      	movs	r0, r4
 800bdda:	1eb1      	subs	r1, r6, #2
 800bddc:	f000 fedf 	bl	800cb9e <__any_on>
 800bde0:	3502      	adds	r5, #2
 800bde2:	2800      	cmp	r0, #0
 800bde4:	d100      	bne.n	800bde8 <__gethex+0x1f4>
 800bde6:	2502      	movs	r5, #2
 800bde8:	0031      	movs	r1, r6
 800bdea:	0020      	movs	r0, r4
 800bdec:	f7ff fe98 	bl	800bb20 <rshift>
 800bdf0:	19bf      	adds	r7, r7, r6
 800bdf2:	9b02      	ldr	r3, [sp, #8]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	9303      	str	r3, [sp, #12]
 800bdf8:	42bb      	cmp	r3, r7
 800bdfa:	da42      	bge.n	800be82 <__gethex+0x28e>
 800bdfc:	0021      	movs	r1, r4
 800bdfe:	9805      	ldr	r0, [sp, #20]
 800be00:	f000 fa6a 	bl	800c2d8 <_Bfree>
 800be04:	2300      	movs	r3, #0
 800be06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be08:	26a3      	movs	r6, #163	; 0xa3
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	e78b      	b.n	800bd26 <__gethex+0x132>
 800be0e:	1e6b      	subs	r3, r5, #1
 800be10:	9308      	str	r3, [sp, #32]
 800be12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	4293      	cmp	r3, r2
 800be18:	d014      	beq.n	800be44 <__gethex+0x250>
 800be1a:	9b06      	ldr	r3, [sp, #24]
 800be1c:	2b20      	cmp	r3, #32
 800be1e:	d104      	bne.n	800be2a <__gethex+0x236>
 800be20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be22:	c340      	stmia	r3!, {r6}
 800be24:	2600      	movs	r6, #0
 800be26:	9309      	str	r3, [sp, #36]	; 0x24
 800be28:	9606      	str	r6, [sp, #24]
 800be2a:	9b08      	ldr	r3, [sp, #32]
 800be2c:	7818      	ldrb	r0, [r3, #0]
 800be2e:	f7ff fecb 	bl	800bbc8 <__hexdig_fun>
 800be32:	230f      	movs	r3, #15
 800be34:	4018      	ands	r0, r3
 800be36:	9b06      	ldr	r3, [sp, #24]
 800be38:	9d08      	ldr	r5, [sp, #32]
 800be3a:	4098      	lsls	r0, r3
 800be3c:	3304      	adds	r3, #4
 800be3e:	4306      	orrs	r6, r0
 800be40:	9306      	str	r3, [sp, #24]
 800be42:	e7a0      	b.n	800bd86 <__gethex+0x192>
 800be44:	2301      	movs	r3, #1
 800be46:	9a03      	ldr	r2, [sp, #12]
 800be48:	1a9d      	subs	r5, r3, r2
 800be4a:	9b08      	ldr	r3, [sp, #32]
 800be4c:	195d      	adds	r5, r3, r5
 800be4e:	9b01      	ldr	r3, [sp, #4]
 800be50:	429d      	cmp	r5, r3
 800be52:	d3e2      	bcc.n	800be1a <__gethex+0x226>
 800be54:	0028      	movs	r0, r5
 800be56:	9907      	ldr	r1, [sp, #28]
 800be58:	f001 f83a 	bl	800ced0 <strncmp>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d1dc      	bne.n	800be1a <__gethex+0x226>
 800be60:	e791      	b.n	800bd86 <__gethex+0x192>
 800be62:	9b01      	ldr	r3, [sp, #4]
 800be64:	2500      	movs	r5, #0
 800be66:	429e      	cmp	r6, r3
 800be68:	dac3      	bge.n	800bdf2 <__gethex+0x1fe>
 800be6a:	1b9e      	subs	r6, r3, r6
 800be6c:	0021      	movs	r1, r4
 800be6e:	0032      	movs	r2, r6
 800be70:	9805      	ldr	r0, [sp, #20]
 800be72:	f000 fc4f 	bl	800c714 <__lshift>
 800be76:	0003      	movs	r3, r0
 800be78:	3314      	adds	r3, #20
 800be7a:	0004      	movs	r4, r0
 800be7c:	1bbf      	subs	r7, r7, r6
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	e7b7      	b.n	800bdf2 <__gethex+0x1fe>
 800be82:	9b02      	ldr	r3, [sp, #8]
 800be84:	685e      	ldr	r6, [r3, #4]
 800be86:	42be      	cmp	r6, r7
 800be88:	dd71      	ble.n	800bf6e <__gethex+0x37a>
 800be8a:	9b01      	ldr	r3, [sp, #4]
 800be8c:	1bf6      	subs	r6, r6, r7
 800be8e:	42b3      	cmp	r3, r6
 800be90:	dc38      	bgt.n	800bf04 <__gethex+0x310>
 800be92:	9b02      	ldr	r3, [sp, #8]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d026      	beq.n	800bee8 <__gethex+0x2f4>
 800be9a:	2b03      	cmp	r3, #3
 800be9c:	d02e      	beq.n	800befc <__gethex+0x308>
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d119      	bne.n	800bed6 <__gethex+0x2e2>
 800bea2:	9b01      	ldr	r3, [sp, #4]
 800bea4:	42b3      	cmp	r3, r6
 800bea6:	d116      	bne.n	800bed6 <__gethex+0x2e2>
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d10d      	bne.n	800bec8 <__gethex+0x2d4>
 800beac:	9b02      	ldr	r3, [sp, #8]
 800beae:	2662      	movs	r6, #98	; 0x62
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	9a01      	ldr	r2, [sp, #4]
 800beb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beb8:	601a      	str	r2, [r3, #0]
 800beba:	2301      	movs	r3, #1
 800bebc:	9a04      	ldr	r2, [sp, #16]
 800bebe:	6123      	str	r3, [r4, #16]
 800bec0:	6013      	str	r3, [r2, #0]
 800bec2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bec4:	601c      	str	r4, [r3, #0]
 800bec6:	e72e      	b.n	800bd26 <__gethex+0x132>
 800bec8:	9901      	ldr	r1, [sp, #4]
 800beca:	0020      	movs	r0, r4
 800becc:	3901      	subs	r1, #1
 800bece:	f000 fe66 	bl	800cb9e <__any_on>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d1ea      	bne.n	800beac <__gethex+0x2b8>
 800bed6:	0021      	movs	r1, r4
 800bed8:	9805      	ldr	r0, [sp, #20]
 800beda:	f000 f9fd 	bl	800c2d8 <_Bfree>
 800bede:	2300      	movs	r3, #0
 800bee0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bee2:	2650      	movs	r6, #80	; 0x50
 800bee4:	6013      	str	r3, [r2, #0]
 800bee6:	e71e      	b.n	800bd26 <__gethex+0x132>
 800bee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1f3      	bne.n	800bed6 <__gethex+0x2e2>
 800beee:	e7dd      	b.n	800beac <__gethex+0x2b8>
 800bef0:	0800df00 	.word	0x0800df00
 800bef4:	0800de84 	.word	0x0800de84
 800bef8:	0800de95 	.word	0x0800de95
 800befc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1d4      	bne.n	800beac <__gethex+0x2b8>
 800bf02:	e7e8      	b.n	800bed6 <__gethex+0x2e2>
 800bf04:	1e77      	subs	r7, r6, #1
 800bf06:	2d00      	cmp	r5, #0
 800bf08:	d12f      	bne.n	800bf6a <__gethex+0x376>
 800bf0a:	2f00      	cmp	r7, #0
 800bf0c:	d004      	beq.n	800bf18 <__gethex+0x324>
 800bf0e:	0039      	movs	r1, r7
 800bf10:	0020      	movs	r0, r4
 800bf12:	f000 fe44 	bl	800cb9e <__any_on>
 800bf16:	0005      	movs	r5, r0
 800bf18:	231f      	movs	r3, #31
 800bf1a:	117a      	asrs	r2, r7, #5
 800bf1c:	401f      	ands	r7, r3
 800bf1e:	3b1e      	subs	r3, #30
 800bf20:	40bb      	lsls	r3, r7
 800bf22:	9904      	ldr	r1, [sp, #16]
 800bf24:	0092      	lsls	r2, r2, #2
 800bf26:	5852      	ldr	r2, [r2, r1]
 800bf28:	421a      	tst	r2, r3
 800bf2a:	d001      	beq.n	800bf30 <__gethex+0x33c>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	431d      	orrs	r5, r3
 800bf30:	9b01      	ldr	r3, [sp, #4]
 800bf32:	0031      	movs	r1, r6
 800bf34:	1b9b      	subs	r3, r3, r6
 800bf36:	2602      	movs	r6, #2
 800bf38:	0020      	movs	r0, r4
 800bf3a:	9301      	str	r3, [sp, #4]
 800bf3c:	f7ff fdf0 	bl	800bb20 <rshift>
 800bf40:	9b02      	ldr	r3, [sp, #8]
 800bf42:	685f      	ldr	r7, [r3, #4]
 800bf44:	2d00      	cmp	r5, #0
 800bf46:	d041      	beq.n	800bfcc <__gethex+0x3d8>
 800bf48:	9b02      	ldr	r3, [sp, #8]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	d010      	beq.n	800bf72 <__gethex+0x37e>
 800bf50:	2b03      	cmp	r3, #3
 800bf52:	d012      	beq.n	800bf7a <__gethex+0x386>
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d106      	bne.n	800bf66 <__gethex+0x372>
 800bf58:	07aa      	lsls	r2, r5, #30
 800bf5a:	d504      	bpl.n	800bf66 <__gethex+0x372>
 800bf5c:	9a04      	ldr	r2, [sp, #16]
 800bf5e:	6810      	ldr	r0, [r2, #0]
 800bf60:	4305      	orrs	r5, r0
 800bf62:	421d      	tst	r5, r3
 800bf64:	d10c      	bne.n	800bf80 <__gethex+0x38c>
 800bf66:	2310      	movs	r3, #16
 800bf68:	e02f      	b.n	800bfca <__gethex+0x3d6>
 800bf6a:	2501      	movs	r5, #1
 800bf6c:	e7d4      	b.n	800bf18 <__gethex+0x324>
 800bf6e:	2601      	movs	r6, #1
 800bf70:	e7e8      	b.n	800bf44 <__gethex+0x350>
 800bf72:	2301      	movs	r3, #1
 800bf74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf76:	1a9b      	subs	r3, r3, r2
 800bf78:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d0f2      	beq.n	800bf66 <__gethex+0x372>
 800bf80:	6923      	ldr	r3, [r4, #16]
 800bf82:	2000      	movs	r0, #0
 800bf84:	9303      	str	r3, [sp, #12]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	9304      	str	r3, [sp, #16]
 800bf8a:	0023      	movs	r3, r4
 800bf8c:	9a04      	ldr	r2, [sp, #16]
 800bf8e:	3314      	adds	r3, #20
 800bf90:	1899      	adds	r1, r3, r2
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	1c55      	adds	r5, r2, #1
 800bf96:	d01e      	beq.n	800bfd6 <__gethex+0x3e2>
 800bf98:	3201      	adds	r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]
 800bf9c:	0023      	movs	r3, r4
 800bf9e:	3314      	adds	r3, #20
 800bfa0:	2e02      	cmp	r6, #2
 800bfa2:	d140      	bne.n	800c026 <__gethex+0x432>
 800bfa4:	9a02      	ldr	r2, [sp, #8]
 800bfa6:	9901      	ldr	r1, [sp, #4]
 800bfa8:	6812      	ldr	r2, [r2, #0]
 800bfaa:	3a01      	subs	r2, #1
 800bfac:	428a      	cmp	r2, r1
 800bfae:	d10b      	bne.n	800bfc8 <__gethex+0x3d4>
 800bfb0:	114a      	asrs	r2, r1, #5
 800bfb2:	211f      	movs	r1, #31
 800bfb4:	9801      	ldr	r0, [sp, #4]
 800bfb6:	0092      	lsls	r2, r2, #2
 800bfb8:	4001      	ands	r1, r0
 800bfba:	2001      	movs	r0, #1
 800bfbc:	0005      	movs	r5, r0
 800bfbe:	408d      	lsls	r5, r1
 800bfc0:	58d3      	ldr	r3, [r2, r3]
 800bfc2:	422b      	tst	r3, r5
 800bfc4:	d000      	beq.n	800bfc8 <__gethex+0x3d4>
 800bfc6:	2601      	movs	r6, #1
 800bfc8:	2320      	movs	r3, #32
 800bfca:	431e      	orrs	r6, r3
 800bfcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bfce:	601c      	str	r4, [r3, #0]
 800bfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd2:	601f      	str	r7, [r3, #0]
 800bfd4:	e6a7      	b.n	800bd26 <__gethex+0x132>
 800bfd6:	c301      	stmia	r3!, {r0}
 800bfd8:	4299      	cmp	r1, r3
 800bfda:	d8da      	bhi.n	800bf92 <__gethex+0x39e>
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	68a2      	ldr	r2, [r4, #8]
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	db17      	blt.n	800c014 <__gethex+0x420>
 800bfe4:	6863      	ldr	r3, [r4, #4]
 800bfe6:	9805      	ldr	r0, [sp, #20]
 800bfe8:	1c59      	adds	r1, r3, #1
 800bfea:	f000 f931 	bl	800c250 <_Balloc>
 800bfee:	1e05      	subs	r5, r0, #0
 800bff0:	d103      	bne.n	800bffa <__gethex+0x406>
 800bff2:	0002      	movs	r2, r0
 800bff4:	2184      	movs	r1, #132	; 0x84
 800bff6:	4b1c      	ldr	r3, [pc, #112]	; (800c068 <__gethex+0x474>)
 800bff8:	e6b8      	b.n	800bd6c <__gethex+0x178>
 800bffa:	0021      	movs	r1, r4
 800bffc:	6923      	ldr	r3, [r4, #16]
 800bffe:	310c      	adds	r1, #12
 800c000:	1c9a      	adds	r2, r3, #2
 800c002:	0092      	lsls	r2, r2, #2
 800c004:	300c      	adds	r0, #12
 800c006:	f7fd f83c 	bl	8009082 <memcpy>
 800c00a:	0021      	movs	r1, r4
 800c00c:	9805      	ldr	r0, [sp, #20]
 800c00e:	f000 f963 	bl	800c2d8 <_Bfree>
 800c012:	002c      	movs	r4, r5
 800c014:	6923      	ldr	r3, [r4, #16]
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	6122      	str	r2, [r4, #16]
 800c01a:	2201      	movs	r2, #1
 800c01c:	3304      	adds	r3, #4
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	18e3      	adds	r3, r4, r3
 800c022:	605a      	str	r2, [r3, #4]
 800c024:	e7ba      	b.n	800bf9c <__gethex+0x3a8>
 800c026:	6922      	ldr	r2, [r4, #16]
 800c028:	9903      	ldr	r1, [sp, #12]
 800c02a:	428a      	cmp	r2, r1
 800c02c:	dd09      	ble.n	800c042 <__gethex+0x44e>
 800c02e:	2101      	movs	r1, #1
 800c030:	0020      	movs	r0, r4
 800c032:	f7ff fd75 	bl	800bb20 <rshift>
 800c036:	9b02      	ldr	r3, [sp, #8]
 800c038:	3701      	adds	r7, #1
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	42bb      	cmp	r3, r7
 800c03e:	dac2      	bge.n	800bfc6 <__gethex+0x3d2>
 800c040:	e6dc      	b.n	800bdfc <__gethex+0x208>
 800c042:	221f      	movs	r2, #31
 800c044:	9d01      	ldr	r5, [sp, #4]
 800c046:	9901      	ldr	r1, [sp, #4]
 800c048:	2601      	movs	r6, #1
 800c04a:	4015      	ands	r5, r2
 800c04c:	4211      	tst	r1, r2
 800c04e:	d0bb      	beq.n	800bfc8 <__gethex+0x3d4>
 800c050:	9a04      	ldr	r2, [sp, #16]
 800c052:	189b      	adds	r3, r3, r2
 800c054:	3b04      	subs	r3, #4
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	f000 f9f2 	bl	800c440 <__hi0bits>
 800c05c:	2320      	movs	r3, #32
 800c05e:	1b5d      	subs	r5, r3, r5
 800c060:	42a8      	cmp	r0, r5
 800c062:	dbe4      	blt.n	800c02e <__gethex+0x43a>
 800c064:	e7b0      	b.n	800bfc8 <__gethex+0x3d4>
 800c066:	46c0      	nop			; (mov r8, r8)
 800c068:	0800de84 	.word	0x0800de84

0800c06c <L_shift>:
 800c06c:	2308      	movs	r3, #8
 800c06e:	b570      	push	{r4, r5, r6, lr}
 800c070:	2520      	movs	r5, #32
 800c072:	1a9a      	subs	r2, r3, r2
 800c074:	0092      	lsls	r2, r2, #2
 800c076:	1aad      	subs	r5, r5, r2
 800c078:	6843      	ldr	r3, [r0, #4]
 800c07a:	6806      	ldr	r6, [r0, #0]
 800c07c:	001c      	movs	r4, r3
 800c07e:	40ac      	lsls	r4, r5
 800c080:	40d3      	lsrs	r3, r2
 800c082:	4334      	orrs	r4, r6
 800c084:	6004      	str	r4, [r0, #0]
 800c086:	6043      	str	r3, [r0, #4]
 800c088:	3004      	adds	r0, #4
 800c08a:	4288      	cmp	r0, r1
 800c08c:	d3f4      	bcc.n	800c078 <L_shift+0xc>
 800c08e:	bd70      	pop	{r4, r5, r6, pc}

0800c090 <__match>:
 800c090:	b530      	push	{r4, r5, lr}
 800c092:	6803      	ldr	r3, [r0, #0]
 800c094:	780c      	ldrb	r4, [r1, #0]
 800c096:	3301      	adds	r3, #1
 800c098:	2c00      	cmp	r4, #0
 800c09a:	d102      	bne.n	800c0a2 <__match+0x12>
 800c09c:	6003      	str	r3, [r0, #0]
 800c09e:	2001      	movs	r0, #1
 800c0a0:	bd30      	pop	{r4, r5, pc}
 800c0a2:	781a      	ldrb	r2, [r3, #0]
 800c0a4:	0015      	movs	r5, r2
 800c0a6:	3d41      	subs	r5, #65	; 0x41
 800c0a8:	2d19      	cmp	r5, #25
 800c0aa:	d800      	bhi.n	800c0ae <__match+0x1e>
 800c0ac:	3220      	adds	r2, #32
 800c0ae:	3101      	adds	r1, #1
 800c0b0:	42a2      	cmp	r2, r4
 800c0b2:	d0ef      	beq.n	800c094 <__match+0x4>
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	e7f3      	b.n	800c0a0 <__match+0x10>

0800c0b8 <__hexnan>:
 800c0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ba:	680b      	ldr	r3, [r1, #0]
 800c0bc:	b08b      	sub	sp, #44	; 0x2c
 800c0be:	115c      	asrs	r4, r3, #5
 800c0c0:	00a4      	lsls	r4, r4, #2
 800c0c2:	9201      	str	r2, [sp, #4]
 800c0c4:	1912      	adds	r2, r2, r4
 800c0c6:	0019      	movs	r1, r3
 800c0c8:	9202      	str	r2, [sp, #8]
 800c0ca:	221f      	movs	r2, #31
 800c0cc:	4011      	ands	r1, r2
 800c0ce:	9008      	str	r0, [sp, #32]
 800c0d0:	9106      	str	r1, [sp, #24]
 800c0d2:	4213      	tst	r3, r2
 800c0d4:	d002      	beq.n	800c0dc <__hexnan+0x24>
 800c0d6:	9b02      	ldr	r3, [sp, #8]
 800c0d8:	3304      	adds	r3, #4
 800c0da:	9302      	str	r3, [sp, #8]
 800c0dc:	9b02      	ldr	r3, [sp, #8]
 800c0de:	2500      	movs	r5, #0
 800c0e0:	1f1e      	subs	r6, r3, #4
 800c0e2:	0037      	movs	r7, r6
 800c0e4:	0034      	movs	r4, r6
 800c0e6:	9b08      	ldr	r3, [sp, #32]
 800c0e8:	6035      	str	r5, [r6, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	9507      	str	r5, [sp, #28]
 800c0ee:	9305      	str	r3, [sp, #20]
 800c0f0:	9503      	str	r5, [sp, #12]
 800c0f2:	9b05      	ldr	r3, [sp, #20]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0f8:	9b05      	ldr	r3, [sp, #20]
 800c0fa:	785b      	ldrb	r3, [r3, #1]
 800c0fc:	9304      	str	r3, [sp, #16]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d028      	beq.n	800c154 <__hexnan+0x9c>
 800c102:	9804      	ldr	r0, [sp, #16]
 800c104:	f7ff fd60 	bl	800bbc8 <__hexdig_fun>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d154      	bne.n	800c1b6 <__hexnan+0xfe>
 800c10c:	9b04      	ldr	r3, [sp, #16]
 800c10e:	2b20      	cmp	r3, #32
 800c110:	d819      	bhi.n	800c146 <__hexnan+0x8e>
 800c112:	9b03      	ldr	r3, [sp, #12]
 800c114:	9a07      	ldr	r2, [sp, #28]
 800c116:	4293      	cmp	r3, r2
 800c118:	dd12      	ble.n	800c140 <__hexnan+0x88>
 800c11a:	42bc      	cmp	r4, r7
 800c11c:	d206      	bcs.n	800c12c <__hexnan+0x74>
 800c11e:	2d07      	cmp	r5, #7
 800c120:	dc04      	bgt.n	800c12c <__hexnan+0x74>
 800c122:	002a      	movs	r2, r5
 800c124:	0039      	movs	r1, r7
 800c126:	0020      	movs	r0, r4
 800c128:	f7ff ffa0 	bl	800c06c <L_shift>
 800c12c:	9b01      	ldr	r3, [sp, #4]
 800c12e:	2508      	movs	r5, #8
 800c130:	429c      	cmp	r4, r3
 800c132:	d905      	bls.n	800c140 <__hexnan+0x88>
 800c134:	1f27      	subs	r7, r4, #4
 800c136:	2500      	movs	r5, #0
 800c138:	003c      	movs	r4, r7
 800c13a:	9b03      	ldr	r3, [sp, #12]
 800c13c:	603d      	str	r5, [r7, #0]
 800c13e:	9307      	str	r3, [sp, #28]
 800c140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c142:	9305      	str	r3, [sp, #20]
 800c144:	e7d5      	b.n	800c0f2 <__hexnan+0x3a>
 800c146:	9b04      	ldr	r3, [sp, #16]
 800c148:	2b29      	cmp	r3, #41	; 0x29
 800c14a:	d158      	bne.n	800c1fe <__hexnan+0x146>
 800c14c:	9b05      	ldr	r3, [sp, #20]
 800c14e:	9a08      	ldr	r2, [sp, #32]
 800c150:	3302      	adds	r3, #2
 800c152:	6013      	str	r3, [r2, #0]
 800c154:	9b03      	ldr	r3, [sp, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d051      	beq.n	800c1fe <__hexnan+0x146>
 800c15a:	42bc      	cmp	r4, r7
 800c15c:	d206      	bcs.n	800c16c <__hexnan+0xb4>
 800c15e:	2d07      	cmp	r5, #7
 800c160:	dc04      	bgt.n	800c16c <__hexnan+0xb4>
 800c162:	002a      	movs	r2, r5
 800c164:	0039      	movs	r1, r7
 800c166:	0020      	movs	r0, r4
 800c168:	f7ff ff80 	bl	800c06c <L_shift>
 800c16c:	9b01      	ldr	r3, [sp, #4]
 800c16e:	429c      	cmp	r4, r3
 800c170:	d935      	bls.n	800c1de <__hexnan+0x126>
 800c172:	001a      	movs	r2, r3
 800c174:	0023      	movs	r3, r4
 800c176:	cb02      	ldmia	r3!, {r1}
 800c178:	c202      	stmia	r2!, {r1}
 800c17a:	429e      	cmp	r6, r3
 800c17c:	d2fb      	bcs.n	800c176 <__hexnan+0xbe>
 800c17e:	9b02      	ldr	r3, [sp, #8]
 800c180:	1c61      	adds	r1, r4, #1
 800c182:	1eda      	subs	r2, r3, #3
 800c184:	2304      	movs	r3, #4
 800c186:	4291      	cmp	r1, r2
 800c188:	d805      	bhi.n	800c196 <__hexnan+0xde>
 800c18a:	9b02      	ldr	r3, [sp, #8]
 800c18c:	3b04      	subs	r3, #4
 800c18e:	1b1c      	subs	r4, r3, r4
 800c190:	08a4      	lsrs	r4, r4, #2
 800c192:	3401      	adds	r4, #1
 800c194:	00a3      	lsls	r3, r4, #2
 800c196:	9a01      	ldr	r2, [sp, #4]
 800c198:	18d4      	adds	r4, r2, r3
 800c19a:	2300      	movs	r3, #0
 800c19c:	c408      	stmia	r4!, {r3}
 800c19e:	42a6      	cmp	r6, r4
 800c1a0:	d2fc      	bcs.n	800c19c <__hexnan+0xe4>
 800c1a2:	6833      	ldr	r3, [r6, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d104      	bne.n	800c1b2 <__hexnan+0xfa>
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	429e      	cmp	r6, r3
 800c1ac:	d125      	bne.n	800c1fa <__hexnan+0x142>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	6033      	str	r3, [r6, #0]
 800c1b2:	2005      	movs	r0, #5
 800c1b4:	e024      	b.n	800c200 <__hexnan+0x148>
 800c1b6:	9b03      	ldr	r3, [sp, #12]
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	9303      	str	r3, [sp, #12]
 800c1be:	2d08      	cmp	r5, #8
 800c1c0:	dd06      	ble.n	800c1d0 <__hexnan+0x118>
 800c1c2:	9b01      	ldr	r3, [sp, #4]
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d9bb      	bls.n	800c140 <__hexnan+0x88>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	2501      	movs	r5, #1
 800c1cc:	3c04      	subs	r4, #4
 800c1ce:	6023      	str	r3, [r4, #0]
 800c1d0:	220f      	movs	r2, #15
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	4010      	ands	r0, r2
 800c1d6:	011b      	lsls	r3, r3, #4
 800c1d8:	4318      	orrs	r0, r3
 800c1da:	6020      	str	r0, [r4, #0]
 800c1dc:	e7b0      	b.n	800c140 <__hexnan+0x88>
 800c1de:	9b06      	ldr	r3, [sp, #24]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d0de      	beq.n	800c1a2 <__hexnan+0xea>
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	1ad2      	subs	r2, r2, r3
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	425b      	negs	r3, r3
 800c1ec:	40d3      	lsrs	r3, r2
 800c1ee:	9c02      	ldr	r4, [sp, #8]
 800c1f0:	3c04      	subs	r4, #4
 800c1f2:	6822      	ldr	r2, [r4, #0]
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	6023      	str	r3, [r4, #0]
 800c1f8:	e7d3      	b.n	800c1a2 <__hexnan+0xea>
 800c1fa:	3e04      	subs	r6, #4
 800c1fc:	e7d1      	b.n	800c1a2 <__hexnan+0xea>
 800c1fe:	2004      	movs	r0, #4
 800c200:	b00b      	add	sp, #44	; 0x2c
 800c202:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c204 <_localeconv_r>:
 800c204:	4800      	ldr	r0, [pc, #0]	; (800c208 <_localeconv_r+0x4>)
 800c206:	4770      	bx	lr
 800c208:	20000160 	.word	0x20000160

0800c20c <__ascii_mbtowc>:
 800c20c:	b082      	sub	sp, #8
 800c20e:	2900      	cmp	r1, #0
 800c210:	d100      	bne.n	800c214 <__ascii_mbtowc+0x8>
 800c212:	a901      	add	r1, sp, #4
 800c214:	1e10      	subs	r0, r2, #0
 800c216:	d006      	beq.n	800c226 <__ascii_mbtowc+0x1a>
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d006      	beq.n	800c22a <__ascii_mbtowc+0x1e>
 800c21c:	7813      	ldrb	r3, [r2, #0]
 800c21e:	600b      	str	r3, [r1, #0]
 800c220:	7810      	ldrb	r0, [r2, #0]
 800c222:	1e43      	subs	r3, r0, #1
 800c224:	4198      	sbcs	r0, r3
 800c226:	b002      	add	sp, #8
 800c228:	4770      	bx	lr
 800c22a:	2002      	movs	r0, #2
 800c22c:	4240      	negs	r0, r0
 800c22e:	e7fa      	b.n	800c226 <__ascii_mbtowc+0x1a>

0800c230 <__malloc_lock>:
 800c230:	b510      	push	{r4, lr}
 800c232:	4802      	ldr	r0, [pc, #8]	; (800c23c <__malloc_lock+0xc>)
 800c234:	f000 fe99 	bl	800cf6a <__retarget_lock_acquire_recursive>
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	46c0      	nop			; (mov r8, r8)
 800c23c:	200004bc 	.word	0x200004bc

0800c240 <__malloc_unlock>:
 800c240:	b510      	push	{r4, lr}
 800c242:	4802      	ldr	r0, [pc, #8]	; (800c24c <__malloc_unlock+0xc>)
 800c244:	f000 fe92 	bl	800cf6c <__retarget_lock_release_recursive>
 800c248:	bd10      	pop	{r4, pc}
 800c24a:	46c0      	nop			; (mov r8, r8)
 800c24c:	200004bc 	.word	0x200004bc

0800c250 <_Balloc>:
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c254:	0006      	movs	r6, r0
 800c256:	000c      	movs	r4, r1
 800c258:	2d00      	cmp	r5, #0
 800c25a:	d10e      	bne.n	800c27a <_Balloc+0x2a>
 800c25c:	2010      	movs	r0, #16
 800c25e:	f7fc fee3 	bl	8009028 <malloc>
 800c262:	1e02      	subs	r2, r0, #0
 800c264:	6270      	str	r0, [r6, #36]	; 0x24
 800c266:	d104      	bne.n	800c272 <_Balloc+0x22>
 800c268:	2166      	movs	r1, #102	; 0x66
 800c26a:	4b19      	ldr	r3, [pc, #100]	; (800c2d0 <_Balloc+0x80>)
 800c26c:	4819      	ldr	r0, [pc, #100]	; (800c2d4 <_Balloc+0x84>)
 800c26e:	f000 fe4d 	bl	800cf0c <__assert_func>
 800c272:	6045      	str	r5, [r0, #4]
 800c274:	6085      	str	r5, [r0, #8]
 800c276:	6005      	str	r5, [r0, #0]
 800c278:	60c5      	str	r5, [r0, #12]
 800c27a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800c27c:	68eb      	ldr	r3, [r5, #12]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d013      	beq.n	800c2aa <_Balloc+0x5a>
 800c282:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c284:	00a2      	lsls	r2, r4, #2
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	189b      	adds	r3, r3, r2
 800c28a:	6818      	ldr	r0, [r3, #0]
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d118      	bne.n	800c2c2 <_Balloc+0x72>
 800c290:	2101      	movs	r1, #1
 800c292:	000d      	movs	r5, r1
 800c294:	40a5      	lsls	r5, r4
 800c296:	1d6a      	adds	r2, r5, #5
 800c298:	0030      	movs	r0, r6
 800c29a:	0092      	lsls	r2, r2, #2
 800c29c:	f000 fca2 	bl	800cbe4 <_calloc_r>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d00c      	beq.n	800c2be <_Balloc+0x6e>
 800c2a4:	6044      	str	r4, [r0, #4]
 800c2a6:	6085      	str	r5, [r0, #8]
 800c2a8:	e00d      	b.n	800c2c6 <_Balloc+0x76>
 800c2aa:	2221      	movs	r2, #33	; 0x21
 800c2ac:	2104      	movs	r1, #4
 800c2ae:	0030      	movs	r0, r6
 800c2b0:	f000 fc98 	bl	800cbe4 <_calloc_r>
 800c2b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c2b6:	60e8      	str	r0, [r5, #12]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1e1      	bne.n	800c282 <_Balloc+0x32>
 800c2be:	2000      	movs	r0, #0
 800c2c0:	bd70      	pop	{r4, r5, r6, pc}
 800c2c2:	6802      	ldr	r2, [r0, #0]
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	6103      	str	r3, [r0, #16]
 800c2ca:	60c3      	str	r3, [r0, #12]
 800c2cc:	e7f8      	b.n	800c2c0 <_Balloc+0x70>
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	0800de0e 	.word	0x0800de0e
 800c2d4:	0800df14 	.word	0x0800df14

0800c2d8 <_Bfree>:
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2dc:	0005      	movs	r5, r0
 800c2de:	000c      	movs	r4, r1
 800c2e0:	2e00      	cmp	r6, #0
 800c2e2:	d10e      	bne.n	800c302 <_Bfree+0x2a>
 800c2e4:	2010      	movs	r0, #16
 800c2e6:	f7fc fe9f 	bl	8009028 <malloc>
 800c2ea:	1e02      	subs	r2, r0, #0
 800c2ec:	6268      	str	r0, [r5, #36]	; 0x24
 800c2ee:	d104      	bne.n	800c2fa <_Bfree+0x22>
 800c2f0:	218a      	movs	r1, #138	; 0x8a
 800c2f2:	4b09      	ldr	r3, [pc, #36]	; (800c318 <_Bfree+0x40>)
 800c2f4:	4809      	ldr	r0, [pc, #36]	; (800c31c <_Bfree+0x44>)
 800c2f6:	f000 fe09 	bl	800cf0c <__assert_func>
 800c2fa:	6046      	str	r6, [r0, #4]
 800c2fc:	6086      	str	r6, [r0, #8]
 800c2fe:	6006      	str	r6, [r0, #0]
 800c300:	60c6      	str	r6, [r0, #12]
 800c302:	2c00      	cmp	r4, #0
 800c304:	d007      	beq.n	800c316 <_Bfree+0x3e>
 800c306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c308:	6862      	ldr	r2, [r4, #4]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	0092      	lsls	r2, r2, #2
 800c30e:	189b      	adds	r3, r3, r2
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	6022      	str	r2, [r4, #0]
 800c314:	601c      	str	r4, [r3, #0]
 800c316:	bd70      	pop	{r4, r5, r6, pc}
 800c318:	0800de0e 	.word	0x0800de0e
 800c31c:	0800df14 	.word	0x0800df14

0800c320 <__multadd>:
 800c320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c322:	000e      	movs	r6, r1
 800c324:	9001      	str	r0, [sp, #4]
 800c326:	000c      	movs	r4, r1
 800c328:	001d      	movs	r5, r3
 800c32a:	2000      	movs	r0, #0
 800c32c:	690f      	ldr	r7, [r1, #16]
 800c32e:	3614      	adds	r6, #20
 800c330:	6833      	ldr	r3, [r6, #0]
 800c332:	3001      	adds	r0, #1
 800c334:	b299      	uxth	r1, r3
 800c336:	4351      	muls	r1, r2
 800c338:	0c1b      	lsrs	r3, r3, #16
 800c33a:	4353      	muls	r3, r2
 800c33c:	1949      	adds	r1, r1, r5
 800c33e:	0c0d      	lsrs	r5, r1, #16
 800c340:	195b      	adds	r3, r3, r5
 800c342:	0c1d      	lsrs	r5, r3, #16
 800c344:	b289      	uxth	r1, r1
 800c346:	041b      	lsls	r3, r3, #16
 800c348:	185b      	adds	r3, r3, r1
 800c34a:	c608      	stmia	r6!, {r3}
 800c34c:	4287      	cmp	r7, r0
 800c34e:	dcef      	bgt.n	800c330 <__multadd+0x10>
 800c350:	2d00      	cmp	r5, #0
 800c352:	d022      	beq.n	800c39a <__multadd+0x7a>
 800c354:	68a3      	ldr	r3, [r4, #8]
 800c356:	42bb      	cmp	r3, r7
 800c358:	dc19      	bgt.n	800c38e <__multadd+0x6e>
 800c35a:	6863      	ldr	r3, [r4, #4]
 800c35c:	9801      	ldr	r0, [sp, #4]
 800c35e:	1c59      	adds	r1, r3, #1
 800c360:	f7ff ff76 	bl	800c250 <_Balloc>
 800c364:	1e06      	subs	r6, r0, #0
 800c366:	d105      	bne.n	800c374 <__multadd+0x54>
 800c368:	0002      	movs	r2, r0
 800c36a:	21b5      	movs	r1, #181	; 0xb5
 800c36c:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <__multadd+0x80>)
 800c36e:	480d      	ldr	r0, [pc, #52]	; (800c3a4 <__multadd+0x84>)
 800c370:	f000 fdcc 	bl	800cf0c <__assert_func>
 800c374:	0021      	movs	r1, r4
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	310c      	adds	r1, #12
 800c37a:	1c9a      	adds	r2, r3, #2
 800c37c:	0092      	lsls	r2, r2, #2
 800c37e:	300c      	adds	r0, #12
 800c380:	f7fc fe7f 	bl	8009082 <memcpy>
 800c384:	0021      	movs	r1, r4
 800c386:	9801      	ldr	r0, [sp, #4]
 800c388:	f7ff ffa6 	bl	800c2d8 <_Bfree>
 800c38c:	0034      	movs	r4, r6
 800c38e:	1d3b      	adds	r3, r7, #4
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	18e3      	adds	r3, r4, r3
 800c394:	605d      	str	r5, [r3, #4]
 800c396:	1c7b      	adds	r3, r7, #1
 800c398:	6123      	str	r3, [r4, #16]
 800c39a:	0020      	movs	r0, r4
 800c39c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c39e:	46c0      	nop			; (mov r8, r8)
 800c3a0:	0800de84 	.word	0x0800de84
 800c3a4:	0800df14 	.word	0x0800df14

0800c3a8 <__s2b>:
 800c3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3aa:	0006      	movs	r6, r0
 800c3ac:	0018      	movs	r0, r3
 800c3ae:	000c      	movs	r4, r1
 800c3b0:	3008      	adds	r0, #8
 800c3b2:	2109      	movs	r1, #9
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	0015      	movs	r5, r2
 800c3b8:	f7f3 ff4c 	bl	8000254 <__divsi3>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	2100      	movs	r1, #0
 800c3c0:	4283      	cmp	r3, r0
 800c3c2:	db0a      	blt.n	800c3da <__s2b+0x32>
 800c3c4:	0030      	movs	r0, r6
 800c3c6:	f7ff ff43 	bl	800c250 <_Balloc>
 800c3ca:	1e01      	subs	r1, r0, #0
 800c3cc:	d108      	bne.n	800c3e0 <__s2b+0x38>
 800c3ce:	0002      	movs	r2, r0
 800c3d0:	4b19      	ldr	r3, [pc, #100]	; (800c438 <__s2b+0x90>)
 800c3d2:	481a      	ldr	r0, [pc, #104]	; (800c43c <__s2b+0x94>)
 800c3d4:	31ce      	adds	r1, #206	; 0xce
 800c3d6:	f000 fd99 	bl	800cf0c <__assert_func>
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	3101      	adds	r1, #1
 800c3de:	e7ef      	b.n	800c3c0 <__s2b+0x18>
 800c3e0:	9b08      	ldr	r3, [sp, #32]
 800c3e2:	6143      	str	r3, [r0, #20]
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	6103      	str	r3, [r0, #16]
 800c3e8:	2d09      	cmp	r5, #9
 800c3ea:	dd18      	ble.n	800c41e <__s2b+0x76>
 800c3ec:	0023      	movs	r3, r4
 800c3ee:	3309      	adds	r3, #9
 800c3f0:	001f      	movs	r7, r3
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	1964      	adds	r4, r4, r5
 800c3f6:	783b      	ldrb	r3, [r7, #0]
 800c3f8:	220a      	movs	r2, #10
 800c3fa:	0030      	movs	r0, r6
 800c3fc:	3b30      	subs	r3, #48	; 0x30
 800c3fe:	f7ff ff8f 	bl	800c320 <__multadd>
 800c402:	3701      	adds	r7, #1
 800c404:	0001      	movs	r1, r0
 800c406:	42a7      	cmp	r7, r4
 800c408:	d1f5      	bne.n	800c3f6 <__s2b+0x4e>
 800c40a:	002c      	movs	r4, r5
 800c40c:	9b00      	ldr	r3, [sp, #0]
 800c40e:	3c08      	subs	r4, #8
 800c410:	191c      	adds	r4, r3, r4
 800c412:	002f      	movs	r7, r5
 800c414:	9b01      	ldr	r3, [sp, #4]
 800c416:	429f      	cmp	r7, r3
 800c418:	db04      	blt.n	800c424 <__s2b+0x7c>
 800c41a:	0008      	movs	r0, r1
 800c41c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c41e:	2509      	movs	r5, #9
 800c420:	340a      	adds	r4, #10
 800c422:	e7f6      	b.n	800c412 <__s2b+0x6a>
 800c424:	1b63      	subs	r3, r4, r5
 800c426:	5ddb      	ldrb	r3, [r3, r7]
 800c428:	220a      	movs	r2, #10
 800c42a:	0030      	movs	r0, r6
 800c42c:	3b30      	subs	r3, #48	; 0x30
 800c42e:	f7ff ff77 	bl	800c320 <__multadd>
 800c432:	3701      	adds	r7, #1
 800c434:	0001      	movs	r1, r0
 800c436:	e7ed      	b.n	800c414 <__s2b+0x6c>
 800c438:	0800de84 	.word	0x0800de84
 800c43c:	0800df14 	.word	0x0800df14

0800c440 <__hi0bits>:
 800c440:	0003      	movs	r3, r0
 800c442:	0c02      	lsrs	r2, r0, #16
 800c444:	2000      	movs	r0, #0
 800c446:	4282      	cmp	r2, r0
 800c448:	d101      	bne.n	800c44e <__hi0bits+0xe>
 800c44a:	041b      	lsls	r3, r3, #16
 800c44c:	3010      	adds	r0, #16
 800c44e:	0e1a      	lsrs	r2, r3, #24
 800c450:	d101      	bne.n	800c456 <__hi0bits+0x16>
 800c452:	3008      	adds	r0, #8
 800c454:	021b      	lsls	r3, r3, #8
 800c456:	0f1a      	lsrs	r2, r3, #28
 800c458:	d101      	bne.n	800c45e <__hi0bits+0x1e>
 800c45a:	3004      	adds	r0, #4
 800c45c:	011b      	lsls	r3, r3, #4
 800c45e:	0f9a      	lsrs	r2, r3, #30
 800c460:	d101      	bne.n	800c466 <__hi0bits+0x26>
 800c462:	3002      	adds	r0, #2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	2b00      	cmp	r3, #0
 800c468:	db03      	blt.n	800c472 <__hi0bits+0x32>
 800c46a:	3001      	adds	r0, #1
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	d400      	bmi.n	800c472 <__hi0bits+0x32>
 800c470:	2020      	movs	r0, #32
 800c472:	4770      	bx	lr

0800c474 <__lo0bits>:
 800c474:	6803      	ldr	r3, [r0, #0]
 800c476:	0002      	movs	r2, r0
 800c478:	2107      	movs	r1, #7
 800c47a:	0018      	movs	r0, r3
 800c47c:	4008      	ands	r0, r1
 800c47e:	420b      	tst	r3, r1
 800c480:	d00d      	beq.n	800c49e <__lo0bits+0x2a>
 800c482:	3906      	subs	r1, #6
 800c484:	2000      	movs	r0, #0
 800c486:	420b      	tst	r3, r1
 800c488:	d105      	bne.n	800c496 <__lo0bits+0x22>
 800c48a:	3002      	adds	r0, #2
 800c48c:	4203      	tst	r3, r0
 800c48e:	d003      	beq.n	800c498 <__lo0bits+0x24>
 800c490:	40cb      	lsrs	r3, r1
 800c492:	0008      	movs	r0, r1
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	4770      	bx	lr
 800c498:	089b      	lsrs	r3, r3, #2
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	e7fb      	b.n	800c496 <__lo0bits+0x22>
 800c49e:	b299      	uxth	r1, r3
 800c4a0:	2900      	cmp	r1, #0
 800c4a2:	d101      	bne.n	800c4a8 <__lo0bits+0x34>
 800c4a4:	2010      	movs	r0, #16
 800c4a6:	0c1b      	lsrs	r3, r3, #16
 800c4a8:	b2d9      	uxtb	r1, r3
 800c4aa:	2900      	cmp	r1, #0
 800c4ac:	d101      	bne.n	800c4b2 <__lo0bits+0x3e>
 800c4ae:	3008      	adds	r0, #8
 800c4b0:	0a1b      	lsrs	r3, r3, #8
 800c4b2:	0719      	lsls	r1, r3, #28
 800c4b4:	d101      	bne.n	800c4ba <__lo0bits+0x46>
 800c4b6:	3004      	adds	r0, #4
 800c4b8:	091b      	lsrs	r3, r3, #4
 800c4ba:	0799      	lsls	r1, r3, #30
 800c4bc:	d101      	bne.n	800c4c2 <__lo0bits+0x4e>
 800c4be:	3002      	adds	r0, #2
 800c4c0:	089b      	lsrs	r3, r3, #2
 800c4c2:	07d9      	lsls	r1, r3, #31
 800c4c4:	d4e9      	bmi.n	800c49a <__lo0bits+0x26>
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	085b      	lsrs	r3, r3, #1
 800c4ca:	d1e6      	bne.n	800c49a <__lo0bits+0x26>
 800c4cc:	2020      	movs	r0, #32
 800c4ce:	e7e2      	b.n	800c496 <__lo0bits+0x22>

0800c4d0 <__i2b>:
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	000c      	movs	r4, r1
 800c4d4:	2101      	movs	r1, #1
 800c4d6:	f7ff febb 	bl	800c250 <_Balloc>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d106      	bne.n	800c4ec <__i2b+0x1c>
 800c4de:	21a0      	movs	r1, #160	; 0xa0
 800c4e0:	0002      	movs	r2, r0
 800c4e2:	4b04      	ldr	r3, [pc, #16]	; (800c4f4 <__i2b+0x24>)
 800c4e4:	4804      	ldr	r0, [pc, #16]	; (800c4f8 <__i2b+0x28>)
 800c4e6:	0049      	lsls	r1, r1, #1
 800c4e8:	f000 fd10 	bl	800cf0c <__assert_func>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	6144      	str	r4, [r0, #20]
 800c4f0:	6103      	str	r3, [r0, #16]
 800c4f2:	bd10      	pop	{r4, pc}
 800c4f4:	0800de84 	.word	0x0800de84
 800c4f8:	0800df14 	.word	0x0800df14

0800c4fc <__multiply>:
 800c4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4fe:	690b      	ldr	r3, [r1, #16]
 800c500:	0014      	movs	r4, r2
 800c502:	6912      	ldr	r2, [r2, #16]
 800c504:	000d      	movs	r5, r1
 800c506:	b089      	sub	sp, #36	; 0x24
 800c508:	4293      	cmp	r3, r2
 800c50a:	da01      	bge.n	800c510 <__multiply+0x14>
 800c50c:	0025      	movs	r5, r4
 800c50e:	000c      	movs	r4, r1
 800c510:	692f      	ldr	r7, [r5, #16]
 800c512:	6926      	ldr	r6, [r4, #16]
 800c514:	6869      	ldr	r1, [r5, #4]
 800c516:	19bb      	adds	r3, r7, r6
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	68ab      	ldr	r3, [r5, #8]
 800c51c:	19ba      	adds	r2, r7, r6
 800c51e:	4293      	cmp	r3, r2
 800c520:	da00      	bge.n	800c524 <__multiply+0x28>
 800c522:	3101      	adds	r1, #1
 800c524:	f7ff fe94 	bl	800c250 <_Balloc>
 800c528:	9001      	str	r0, [sp, #4]
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d106      	bne.n	800c53c <__multiply+0x40>
 800c52e:	215e      	movs	r1, #94	; 0x5e
 800c530:	0002      	movs	r2, r0
 800c532:	4b48      	ldr	r3, [pc, #288]	; (800c654 <__multiply+0x158>)
 800c534:	4848      	ldr	r0, [pc, #288]	; (800c658 <__multiply+0x15c>)
 800c536:	31ff      	adds	r1, #255	; 0xff
 800c538:	f000 fce8 	bl	800cf0c <__assert_func>
 800c53c:	9b01      	ldr	r3, [sp, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	3314      	adds	r3, #20
 800c542:	469c      	mov	ip, r3
 800c544:	19bb      	adds	r3, r7, r6
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4463      	add	r3, ip
 800c54a:	9303      	str	r3, [sp, #12]
 800c54c:	4663      	mov	r3, ip
 800c54e:	9903      	ldr	r1, [sp, #12]
 800c550:	428b      	cmp	r3, r1
 800c552:	d32c      	bcc.n	800c5ae <__multiply+0xb2>
 800c554:	002b      	movs	r3, r5
 800c556:	0022      	movs	r2, r4
 800c558:	3314      	adds	r3, #20
 800c55a:	00bf      	lsls	r7, r7, #2
 800c55c:	3214      	adds	r2, #20
 800c55e:	9306      	str	r3, [sp, #24]
 800c560:	00b6      	lsls	r6, r6, #2
 800c562:	19db      	adds	r3, r3, r7
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	1993      	adds	r3, r2, r6
 800c568:	9307      	str	r3, [sp, #28]
 800c56a:	2304      	movs	r3, #4
 800c56c:	9305      	str	r3, [sp, #20]
 800c56e:	002b      	movs	r3, r5
 800c570:	9904      	ldr	r1, [sp, #16]
 800c572:	3315      	adds	r3, #21
 800c574:	9200      	str	r2, [sp, #0]
 800c576:	4299      	cmp	r1, r3
 800c578:	d305      	bcc.n	800c586 <__multiply+0x8a>
 800c57a:	1b4b      	subs	r3, r1, r5
 800c57c:	3b15      	subs	r3, #21
 800c57e:	089b      	lsrs	r3, r3, #2
 800c580:	3301      	adds	r3, #1
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	9305      	str	r3, [sp, #20]
 800c586:	9b07      	ldr	r3, [sp, #28]
 800c588:	9a00      	ldr	r2, [sp, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d311      	bcc.n	800c5b2 <__multiply+0xb6>
 800c58e:	9b02      	ldr	r3, [sp, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	dd06      	ble.n	800c5a2 <__multiply+0xa6>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	3b04      	subs	r3, #4
 800c598:	9303      	str	r3, [sp, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d054      	beq.n	800c64c <__multiply+0x150>
 800c5a2:	9b01      	ldr	r3, [sp, #4]
 800c5a4:	9a02      	ldr	r2, [sp, #8]
 800c5a6:	0018      	movs	r0, r3
 800c5a8:	611a      	str	r2, [r3, #16]
 800c5aa:	b009      	add	sp, #36	; 0x24
 800c5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ae:	c304      	stmia	r3!, {r2}
 800c5b0:	e7cd      	b.n	800c54e <__multiply+0x52>
 800c5b2:	9b00      	ldr	r3, [sp, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	b298      	uxth	r0, r3
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d01c      	beq.n	800c5f6 <__multiply+0xfa>
 800c5bc:	4667      	mov	r7, ip
 800c5be:	2400      	movs	r4, #0
 800c5c0:	9e06      	ldr	r6, [sp, #24]
 800c5c2:	ce02      	ldmia	r6!, {r1}
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	b28b      	uxth	r3, r1
 800c5c8:	4343      	muls	r3, r0
 800c5ca:	0c09      	lsrs	r1, r1, #16
 800c5cc:	4341      	muls	r1, r0
 800c5ce:	b292      	uxth	r2, r2
 800c5d0:	189b      	adds	r3, r3, r2
 800c5d2:	191b      	adds	r3, r3, r4
 800c5d4:	000c      	movs	r4, r1
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	0c11      	lsrs	r1, r2, #16
 800c5da:	1861      	adds	r1, r4, r1
 800c5dc:	0c1c      	lsrs	r4, r3, #16
 800c5de:	1909      	adds	r1, r1, r4
 800c5e0:	0c0c      	lsrs	r4, r1, #16
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	0409      	lsls	r1, r1, #16
 800c5e6:	430b      	orrs	r3, r1
 800c5e8:	c708      	stmia	r7!, {r3}
 800c5ea:	9b04      	ldr	r3, [sp, #16]
 800c5ec:	42b3      	cmp	r3, r6
 800c5ee:	d8e8      	bhi.n	800c5c2 <__multiply+0xc6>
 800c5f0:	4663      	mov	r3, ip
 800c5f2:	9a05      	ldr	r2, [sp, #20]
 800c5f4:	509c      	str	r4, [r3, r2]
 800c5f6:	9b00      	ldr	r3, [sp, #0]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	0c1e      	lsrs	r6, r3, #16
 800c5fc:	d020      	beq.n	800c640 <__multiply+0x144>
 800c5fe:	4663      	mov	r3, ip
 800c600:	002c      	movs	r4, r5
 800c602:	4660      	mov	r0, ip
 800c604:	2700      	movs	r7, #0
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3414      	adds	r4, #20
 800c60a:	6822      	ldr	r2, [r4, #0]
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	b291      	uxth	r1, r2
 800c610:	4371      	muls	r1, r6
 800c612:	6802      	ldr	r2, [r0, #0]
 800c614:	0c12      	lsrs	r2, r2, #16
 800c616:	1889      	adds	r1, r1, r2
 800c618:	19cf      	adds	r7, r1, r7
 800c61a:	0439      	lsls	r1, r7, #16
 800c61c:	430b      	orrs	r3, r1
 800c61e:	6003      	str	r3, [r0, #0]
 800c620:	cc02      	ldmia	r4!, {r1}
 800c622:	6843      	ldr	r3, [r0, #4]
 800c624:	0c09      	lsrs	r1, r1, #16
 800c626:	4371      	muls	r1, r6
 800c628:	b29b      	uxth	r3, r3
 800c62a:	0c3f      	lsrs	r7, r7, #16
 800c62c:	18cb      	adds	r3, r1, r3
 800c62e:	9a04      	ldr	r2, [sp, #16]
 800c630:	19db      	adds	r3, r3, r7
 800c632:	0c1f      	lsrs	r7, r3, #16
 800c634:	3004      	adds	r0, #4
 800c636:	42a2      	cmp	r2, r4
 800c638:	d8e7      	bhi.n	800c60a <__multiply+0x10e>
 800c63a:	4662      	mov	r2, ip
 800c63c:	9905      	ldr	r1, [sp, #20]
 800c63e:	5053      	str	r3, [r2, r1]
 800c640:	9b00      	ldr	r3, [sp, #0]
 800c642:	3304      	adds	r3, #4
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	2304      	movs	r3, #4
 800c648:	449c      	add	ip, r3
 800c64a:	e79c      	b.n	800c586 <__multiply+0x8a>
 800c64c:	9b02      	ldr	r3, [sp, #8]
 800c64e:	3b01      	subs	r3, #1
 800c650:	9302      	str	r3, [sp, #8]
 800c652:	e79c      	b.n	800c58e <__multiply+0x92>
 800c654:	0800de84 	.word	0x0800de84
 800c658:	0800df14 	.word	0x0800df14

0800c65c <__pow5mult>:
 800c65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c65e:	2303      	movs	r3, #3
 800c660:	0015      	movs	r5, r2
 800c662:	0007      	movs	r7, r0
 800c664:	000e      	movs	r6, r1
 800c666:	401a      	ands	r2, r3
 800c668:	421d      	tst	r5, r3
 800c66a:	d008      	beq.n	800c67e <__pow5mult+0x22>
 800c66c:	4925      	ldr	r1, [pc, #148]	; (800c704 <__pow5mult+0xa8>)
 800c66e:	3a01      	subs	r2, #1
 800c670:	0092      	lsls	r2, r2, #2
 800c672:	5852      	ldr	r2, [r2, r1]
 800c674:	2300      	movs	r3, #0
 800c676:	0031      	movs	r1, r6
 800c678:	f7ff fe52 	bl	800c320 <__multadd>
 800c67c:	0006      	movs	r6, r0
 800c67e:	10ad      	asrs	r5, r5, #2
 800c680:	d03d      	beq.n	800c6fe <__pow5mult+0xa2>
 800c682:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c684:	2c00      	cmp	r4, #0
 800c686:	d10f      	bne.n	800c6a8 <__pow5mult+0x4c>
 800c688:	2010      	movs	r0, #16
 800c68a:	f7fc fccd 	bl	8009028 <malloc>
 800c68e:	1e02      	subs	r2, r0, #0
 800c690:	6278      	str	r0, [r7, #36]	; 0x24
 800c692:	d105      	bne.n	800c6a0 <__pow5mult+0x44>
 800c694:	21d7      	movs	r1, #215	; 0xd7
 800c696:	4b1c      	ldr	r3, [pc, #112]	; (800c708 <__pow5mult+0xac>)
 800c698:	481c      	ldr	r0, [pc, #112]	; (800c70c <__pow5mult+0xb0>)
 800c69a:	0049      	lsls	r1, r1, #1
 800c69c:	f000 fc36 	bl	800cf0c <__assert_func>
 800c6a0:	6044      	str	r4, [r0, #4]
 800c6a2:	6084      	str	r4, [r0, #8]
 800c6a4:	6004      	str	r4, [r0, #0]
 800c6a6:	60c4      	str	r4, [r0, #12]
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6aa:	689c      	ldr	r4, [r3, #8]
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	2c00      	cmp	r4, #0
 800c6b0:	d108      	bne.n	800c6c4 <__pow5mult+0x68>
 800c6b2:	0038      	movs	r0, r7
 800c6b4:	4916      	ldr	r1, [pc, #88]	; (800c710 <__pow5mult+0xb4>)
 800c6b6:	f7ff ff0b 	bl	800c4d0 <__i2b>
 800c6ba:	9b01      	ldr	r3, [sp, #4]
 800c6bc:	0004      	movs	r4, r0
 800c6be:	6098      	str	r0, [r3, #8]
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	6003      	str	r3, [r0, #0]
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	421d      	tst	r5, r3
 800c6c8:	d00a      	beq.n	800c6e0 <__pow5mult+0x84>
 800c6ca:	0031      	movs	r1, r6
 800c6cc:	0022      	movs	r2, r4
 800c6ce:	0038      	movs	r0, r7
 800c6d0:	f7ff ff14 	bl	800c4fc <__multiply>
 800c6d4:	0031      	movs	r1, r6
 800c6d6:	9001      	str	r0, [sp, #4]
 800c6d8:	0038      	movs	r0, r7
 800c6da:	f7ff fdfd 	bl	800c2d8 <_Bfree>
 800c6de:	9e01      	ldr	r6, [sp, #4]
 800c6e0:	106d      	asrs	r5, r5, #1
 800c6e2:	d00c      	beq.n	800c6fe <__pow5mult+0xa2>
 800c6e4:	6820      	ldr	r0, [r4, #0]
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d107      	bne.n	800c6fa <__pow5mult+0x9e>
 800c6ea:	0022      	movs	r2, r4
 800c6ec:	0021      	movs	r1, r4
 800c6ee:	0038      	movs	r0, r7
 800c6f0:	f7ff ff04 	bl	800c4fc <__multiply>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	6020      	str	r0, [r4, #0]
 800c6f8:	6003      	str	r3, [r0, #0]
 800c6fa:	0004      	movs	r4, r0
 800c6fc:	e7e2      	b.n	800c6c4 <__pow5mult+0x68>
 800c6fe:	0030      	movs	r0, r6
 800c700:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c702:	46c0      	nop			; (mov r8, r8)
 800c704:	0800e068 	.word	0x0800e068
 800c708:	0800de0e 	.word	0x0800de0e
 800c70c:	0800df14 	.word	0x0800df14
 800c710:	00000271 	.word	0x00000271

0800c714 <__lshift>:
 800c714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c716:	000c      	movs	r4, r1
 800c718:	0017      	movs	r7, r2
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	1155      	asrs	r5, r2, #5
 800c71e:	b087      	sub	sp, #28
 800c720:	18eb      	adds	r3, r5, r3
 800c722:	9302      	str	r3, [sp, #8]
 800c724:	3301      	adds	r3, #1
 800c726:	9301      	str	r3, [sp, #4]
 800c728:	6849      	ldr	r1, [r1, #4]
 800c72a:	68a3      	ldr	r3, [r4, #8]
 800c72c:	9004      	str	r0, [sp, #16]
 800c72e:	9a01      	ldr	r2, [sp, #4]
 800c730:	4293      	cmp	r3, r2
 800c732:	db11      	blt.n	800c758 <__lshift+0x44>
 800c734:	9804      	ldr	r0, [sp, #16]
 800c736:	f7ff fd8b 	bl	800c250 <_Balloc>
 800c73a:	0002      	movs	r2, r0
 800c73c:	2300      	movs	r3, #0
 800c73e:	3214      	adds	r2, #20
 800c740:	0006      	movs	r6, r0
 800c742:	0011      	movs	r1, r2
 800c744:	9203      	str	r2, [sp, #12]
 800c746:	4298      	cmp	r0, r3
 800c748:	d10d      	bne.n	800c766 <__lshift+0x52>
 800c74a:	21da      	movs	r1, #218	; 0xda
 800c74c:	0002      	movs	r2, r0
 800c74e:	4b27      	ldr	r3, [pc, #156]	; (800c7ec <__lshift+0xd8>)
 800c750:	4827      	ldr	r0, [pc, #156]	; (800c7f0 <__lshift+0xdc>)
 800c752:	31ff      	adds	r1, #255	; 0xff
 800c754:	f000 fbda 	bl	800cf0c <__assert_func>
 800c758:	3101      	adds	r1, #1
 800c75a:	005b      	lsls	r3, r3, #1
 800c75c:	e7e7      	b.n	800c72e <__lshift+0x1a>
 800c75e:	2200      	movs	r2, #0
 800c760:	0098      	lsls	r0, r3, #2
 800c762:	500a      	str	r2, [r1, r0]
 800c764:	3301      	adds	r3, #1
 800c766:	42ab      	cmp	r3, r5
 800c768:	dbf9      	blt.n	800c75e <__lshift+0x4a>
 800c76a:	43eb      	mvns	r3, r5
 800c76c:	17db      	asrs	r3, r3, #31
 800c76e:	401d      	ands	r5, r3
 800c770:	9b03      	ldr	r3, [sp, #12]
 800c772:	00ad      	lsls	r5, r5, #2
 800c774:	211f      	movs	r1, #31
 800c776:	0038      	movs	r0, r7
 800c778:	195d      	adds	r5, r3, r5
 800c77a:	0023      	movs	r3, r4
 800c77c:	6922      	ldr	r2, [r4, #16]
 800c77e:	3314      	adds	r3, #20
 800c780:	0092      	lsls	r2, r2, #2
 800c782:	4008      	ands	r0, r1
 800c784:	4684      	mov	ip, r0
 800c786:	189a      	adds	r2, r3, r2
 800c788:	420f      	tst	r7, r1
 800c78a:	d02a      	beq.n	800c7e2 <__lshift+0xce>
 800c78c:	3101      	adds	r1, #1
 800c78e:	1a09      	subs	r1, r1, r0
 800c790:	9105      	str	r1, [sp, #20]
 800c792:	2100      	movs	r1, #0
 800c794:	9503      	str	r5, [sp, #12]
 800c796:	4667      	mov	r7, ip
 800c798:	6818      	ldr	r0, [r3, #0]
 800c79a:	40b8      	lsls	r0, r7
 800c79c:	4301      	orrs	r1, r0
 800c79e:	9803      	ldr	r0, [sp, #12]
 800c7a0:	c002      	stmia	r0!, {r1}
 800c7a2:	cb02      	ldmia	r3!, {r1}
 800c7a4:	9003      	str	r0, [sp, #12]
 800c7a6:	9805      	ldr	r0, [sp, #20]
 800c7a8:	40c1      	lsrs	r1, r0
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d8f3      	bhi.n	800c796 <__lshift+0x82>
 800c7ae:	0020      	movs	r0, r4
 800c7b0:	3015      	adds	r0, #21
 800c7b2:	2304      	movs	r3, #4
 800c7b4:	4282      	cmp	r2, r0
 800c7b6:	d304      	bcc.n	800c7c2 <__lshift+0xae>
 800c7b8:	1b13      	subs	r3, r2, r4
 800c7ba:	3b15      	subs	r3, #21
 800c7bc:	089b      	lsrs	r3, r3, #2
 800c7be:	3301      	adds	r3, #1
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	50e9      	str	r1, [r5, r3]
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	d002      	beq.n	800c7ce <__lshift+0xba>
 800c7c8:	9b02      	ldr	r3, [sp, #8]
 800c7ca:	3302      	adds	r3, #2
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	9b01      	ldr	r3, [sp, #4]
 800c7d0:	9804      	ldr	r0, [sp, #16]
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	0021      	movs	r1, r4
 800c7d6:	6133      	str	r3, [r6, #16]
 800c7d8:	f7ff fd7e 	bl	800c2d8 <_Bfree>
 800c7dc:	0030      	movs	r0, r6
 800c7de:	b007      	add	sp, #28
 800c7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7e2:	cb02      	ldmia	r3!, {r1}
 800c7e4:	c502      	stmia	r5!, {r1}
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d8fb      	bhi.n	800c7e2 <__lshift+0xce>
 800c7ea:	e7f0      	b.n	800c7ce <__lshift+0xba>
 800c7ec:	0800de84 	.word	0x0800de84
 800c7f0:	0800df14 	.word	0x0800df14

0800c7f4 <__mcmp>:
 800c7f4:	6902      	ldr	r2, [r0, #16]
 800c7f6:	690b      	ldr	r3, [r1, #16]
 800c7f8:	b530      	push	{r4, r5, lr}
 800c7fa:	0004      	movs	r4, r0
 800c7fc:	1ad0      	subs	r0, r2, r3
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d10d      	bne.n	800c81e <__mcmp+0x2a>
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	3414      	adds	r4, #20
 800c806:	3114      	adds	r1, #20
 800c808:	18e2      	adds	r2, r4, r3
 800c80a:	18c9      	adds	r1, r1, r3
 800c80c:	3a04      	subs	r2, #4
 800c80e:	3904      	subs	r1, #4
 800c810:	6815      	ldr	r5, [r2, #0]
 800c812:	680b      	ldr	r3, [r1, #0]
 800c814:	429d      	cmp	r5, r3
 800c816:	d003      	beq.n	800c820 <__mcmp+0x2c>
 800c818:	2001      	movs	r0, #1
 800c81a:	429d      	cmp	r5, r3
 800c81c:	d303      	bcc.n	800c826 <__mcmp+0x32>
 800c81e:	bd30      	pop	{r4, r5, pc}
 800c820:	4294      	cmp	r4, r2
 800c822:	d3f3      	bcc.n	800c80c <__mcmp+0x18>
 800c824:	e7fb      	b.n	800c81e <__mcmp+0x2a>
 800c826:	4240      	negs	r0, r0
 800c828:	e7f9      	b.n	800c81e <__mcmp+0x2a>
	...

0800c82c <__mdiff>:
 800c82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c82e:	000e      	movs	r6, r1
 800c830:	0007      	movs	r7, r0
 800c832:	0011      	movs	r1, r2
 800c834:	0030      	movs	r0, r6
 800c836:	b087      	sub	sp, #28
 800c838:	0014      	movs	r4, r2
 800c83a:	f7ff ffdb 	bl	800c7f4 <__mcmp>
 800c83e:	1e05      	subs	r5, r0, #0
 800c840:	d110      	bne.n	800c864 <__mdiff+0x38>
 800c842:	0001      	movs	r1, r0
 800c844:	0038      	movs	r0, r7
 800c846:	f7ff fd03 	bl	800c250 <_Balloc>
 800c84a:	1e02      	subs	r2, r0, #0
 800c84c:	d104      	bne.n	800c858 <__mdiff+0x2c>
 800c84e:	4b40      	ldr	r3, [pc, #256]	; (800c950 <__mdiff+0x124>)
 800c850:	4940      	ldr	r1, [pc, #256]	; (800c954 <__mdiff+0x128>)
 800c852:	4841      	ldr	r0, [pc, #260]	; (800c958 <__mdiff+0x12c>)
 800c854:	f000 fb5a 	bl	800cf0c <__assert_func>
 800c858:	2301      	movs	r3, #1
 800c85a:	6145      	str	r5, [r0, #20]
 800c85c:	6103      	str	r3, [r0, #16]
 800c85e:	0010      	movs	r0, r2
 800c860:	b007      	add	sp, #28
 800c862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c864:	2301      	movs	r3, #1
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	2800      	cmp	r0, #0
 800c86a:	db04      	blt.n	800c876 <__mdiff+0x4a>
 800c86c:	0023      	movs	r3, r4
 800c86e:	0034      	movs	r4, r6
 800c870:	001e      	movs	r6, r3
 800c872:	2300      	movs	r3, #0
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	0038      	movs	r0, r7
 800c878:	6861      	ldr	r1, [r4, #4]
 800c87a:	f7ff fce9 	bl	800c250 <_Balloc>
 800c87e:	1e02      	subs	r2, r0, #0
 800c880:	d103      	bne.n	800c88a <__mdiff+0x5e>
 800c882:	2190      	movs	r1, #144	; 0x90
 800c884:	4b32      	ldr	r3, [pc, #200]	; (800c950 <__mdiff+0x124>)
 800c886:	0089      	lsls	r1, r1, #2
 800c888:	e7e3      	b.n	800c852 <__mdiff+0x26>
 800c88a:	9b01      	ldr	r3, [sp, #4]
 800c88c:	2700      	movs	r7, #0
 800c88e:	60c3      	str	r3, [r0, #12]
 800c890:	6920      	ldr	r0, [r4, #16]
 800c892:	3414      	adds	r4, #20
 800c894:	9401      	str	r4, [sp, #4]
 800c896:	9b01      	ldr	r3, [sp, #4]
 800c898:	0084      	lsls	r4, r0, #2
 800c89a:	191b      	adds	r3, r3, r4
 800c89c:	0034      	movs	r4, r6
 800c89e:	9302      	str	r3, [sp, #8]
 800c8a0:	6933      	ldr	r3, [r6, #16]
 800c8a2:	3414      	adds	r4, #20
 800c8a4:	0099      	lsls	r1, r3, #2
 800c8a6:	1863      	adds	r3, r4, r1
 800c8a8:	9303      	str	r3, [sp, #12]
 800c8aa:	0013      	movs	r3, r2
 800c8ac:	3314      	adds	r3, #20
 800c8ae:	469c      	mov	ip, r3
 800c8b0:	9305      	str	r3, [sp, #20]
 800c8b2:	9b01      	ldr	r3, [sp, #4]
 800c8b4:	9304      	str	r3, [sp, #16]
 800c8b6:	9b04      	ldr	r3, [sp, #16]
 800c8b8:	cc02      	ldmia	r4!, {r1}
 800c8ba:	cb20      	ldmia	r3!, {r5}
 800c8bc:	9304      	str	r3, [sp, #16]
 800c8be:	b2ab      	uxth	r3, r5
 800c8c0:	19df      	adds	r7, r3, r7
 800c8c2:	b28b      	uxth	r3, r1
 800c8c4:	1afb      	subs	r3, r7, r3
 800c8c6:	0c2d      	lsrs	r5, r5, #16
 800c8c8:	0c09      	lsrs	r1, r1, #16
 800c8ca:	1a69      	subs	r1, r5, r1
 800c8cc:	141d      	asrs	r5, r3, #16
 800c8ce:	1949      	adds	r1, r1, r5
 800c8d0:	140f      	asrs	r7, r1, #16
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	0409      	lsls	r1, r1, #16
 800c8d6:	430b      	orrs	r3, r1
 800c8d8:	4661      	mov	r1, ip
 800c8da:	c108      	stmia	r1!, {r3}
 800c8dc:	9b03      	ldr	r3, [sp, #12]
 800c8de:	468c      	mov	ip, r1
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	d8e8      	bhi.n	800c8b6 <__mdiff+0x8a>
 800c8e4:	0031      	movs	r1, r6
 800c8e6:	9c03      	ldr	r4, [sp, #12]
 800c8e8:	3115      	adds	r1, #21
 800c8ea:	2304      	movs	r3, #4
 800c8ec:	428c      	cmp	r4, r1
 800c8ee:	d304      	bcc.n	800c8fa <__mdiff+0xce>
 800c8f0:	1ba3      	subs	r3, r4, r6
 800c8f2:	3b15      	subs	r3, #21
 800c8f4:	089b      	lsrs	r3, r3, #2
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	9901      	ldr	r1, [sp, #4]
 800c8fc:	18cc      	adds	r4, r1, r3
 800c8fe:	9905      	ldr	r1, [sp, #20]
 800c900:	0026      	movs	r6, r4
 800c902:	18cb      	adds	r3, r1, r3
 800c904:	469c      	mov	ip, r3
 800c906:	9902      	ldr	r1, [sp, #8]
 800c908:	428e      	cmp	r6, r1
 800c90a:	d310      	bcc.n	800c92e <__mdiff+0x102>
 800c90c:	9e02      	ldr	r6, [sp, #8]
 800c90e:	1ee5      	subs	r5, r4, #3
 800c910:	2100      	movs	r1, #0
 800c912:	42ae      	cmp	r6, r5
 800c914:	d304      	bcc.n	800c920 <__mdiff+0xf4>
 800c916:	0031      	movs	r1, r6
 800c918:	3103      	adds	r1, #3
 800c91a:	1b09      	subs	r1, r1, r4
 800c91c:	0889      	lsrs	r1, r1, #2
 800c91e:	0089      	lsls	r1, r1, #2
 800c920:	185b      	adds	r3, r3, r1
 800c922:	3b04      	subs	r3, #4
 800c924:	6819      	ldr	r1, [r3, #0]
 800c926:	2900      	cmp	r1, #0
 800c928:	d00f      	beq.n	800c94a <__mdiff+0x11e>
 800c92a:	6110      	str	r0, [r2, #16]
 800c92c:	e797      	b.n	800c85e <__mdiff+0x32>
 800c92e:	ce02      	ldmia	r6!, {r1}
 800c930:	b28d      	uxth	r5, r1
 800c932:	19ed      	adds	r5, r5, r7
 800c934:	0c0f      	lsrs	r7, r1, #16
 800c936:	1429      	asrs	r1, r5, #16
 800c938:	1879      	adds	r1, r7, r1
 800c93a:	140f      	asrs	r7, r1, #16
 800c93c:	b2ad      	uxth	r5, r5
 800c93e:	0409      	lsls	r1, r1, #16
 800c940:	430d      	orrs	r5, r1
 800c942:	4661      	mov	r1, ip
 800c944:	c120      	stmia	r1!, {r5}
 800c946:	468c      	mov	ip, r1
 800c948:	e7dd      	b.n	800c906 <__mdiff+0xda>
 800c94a:	3801      	subs	r0, #1
 800c94c:	e7e9      	b.n	800c922 <__mdiff+0xf6>
 800c94e:	46c0      	nop			; (mov r8, r8)
 800c950:	0800de84 	.word	0x0800de84
 800c954:	00000232 	.word	0x00000232
 800c958:	0800df14 	.word	0x0800df14

0800c95c <__ulp>:
 800c95c:	4b0f      	ldr	r3, [pc, #60]	; (800c99c <__ulp+0x40>)
 800c95e:	4019      	ands	r1, r3
 800c960:	4b0f      	ldr	r3, [pc, #60]	; (800c9a0 <__ulp+0x44>)
 800c962:	18c9      	adds	r1, r1, r3
 800c964:	2900      	cmp	r1, #0
 800c966:	dd04      	ble.n	800c972 <__ulp+0x16>
 800c968:	2200      	movs	r2, #0
 800c96a:	000b      	movs	r3, r1
 800c96c:	0010      	movs	r0, r2
 800c96e:	0019      	movs	r1, r3
 800c970:	4770      	bx	lr
 800c972:	4249      	negs	r1, r1
 800c974:	2200      	movs	r2, #0
 800c976:	2300      	movs	r3, #0
 800c978:	1509      	asrs	r1, r1, #20
 800c97a:	2913      	cmp	r1, #19
 800c97c:	dc04      	bgt.n	800c988 <__ulp+0x2c>
 800c97e:	2080      	movs	r0, #128	; 0x80
 800c980:	0300      	lsls	r0, r0, #12
 800c982:	4108      	asrs	r0, r1
 800c984:	0003      	movs	r3, r0
 800c986:	e7f1      	b.n	800c96c <__ulp+0x10>
 800c988:	3914      	subs	r1, #20
 800c98a:	2001      	movs	r0, #1
 800c98c:	291e      	cmp	r1, #30
 800c98e:	dc02      	bgt.n	800c996 <__ulp+0x3a>
 800c990:	2080      	movs	r0, #128	; 0x80
 800c992:	0600      	lsls	r0, r0, #24
 800c994:	40c8      	lsrs	r0, r1
 800c996:	0002      	movs	r2, r0
 800c998:	e7e8      	b.n	800c96c <__ulp+0x10>
 800c99a:	46c0      	nop			; (mov r8, r8)
 800c99c:	7ff00000 	.word	0x7ff00000
 800c9a0:	fcc00000 	.word	0xfcc00000

0800c9a4 <__b2d>:
 800c9a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9a6:	0006      	movs	r6, r0
 800c9a8:	6903      	ldr	r3, [r0, #16]
 800c9aa:	3614      	adds	r6, #20
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	18f3      	adds	r3, r6, r3
 800c9b0:	1f1d      	subs	r5, r3, #4
 800c9b2:	682c      	ldr	r4, [r5, #0]
 800c9b4:	000f      	movs	r7, r1
 800c9b6:	0020      	movs	r0, r4
 800c9b8:	9301      	str	r3, [sp, #4]
 800c9ba:	f7ff fd41 	bl	800c440 <__hi0bits>
 800c9be:	2320      	movs	r3, #32
 800c9c0:	1a1b      	subs	r3, r3, r0
 800c9c2:	491f      	ldr	r1, [pc, #124]	; (800ca40 <__b2d+0x9c>)
 800c9c4:	603b      	str	r3, [r7, #0]
 800c9c6:	280a      	cmp	r0, #10
 800c9c8:	dc16      	bgt.n	800c9f8 <__b2d+0x54>
 800c9ca:	230b      	movs	r3, #11
 800c9cc:	0027      	movs	r7, r4
 800c9ce:	1a1b      	subs	r3, r3, r0
 800c9d0:	40df      	lsrs	r7, r3
 800c9d2:	4339      	orrs	r1, r7
 800c9d4:	469c      	mov	ip, r3
 800c9d6:	000b      	movs	r3, r1
 800c9d8:	2100      	movs	r1, #0
 800c9da:	42ae      	cmp	r6, r5
 800c9dc:	d202      	bcs.n	800c9e4 <__b2d+0x40>
 800c9de:	9901      	ldr	r1, [sp, #4]
 800c9e0:	3908      	subs	r1, #8
 800c9e2:	6809      	ldr	r1, [r1, #0]
 800c9e4:	3015      	adds	r0, #21
 800c9e6:	4084      	lsls	r4, r0
 800c9e8:	4660      	mov	r0, ip
 800c9ea:	40c1      	lsrs	r1, r0
 800c9ec:	430c      	orrs	r4, r1
 800c9ee:	0022      	movs	r2, r4
 800c9f0:	0010      	movs	r0, r2
 800c9f2:	0019      	movs	r1, r3
 800c9f4:	b003      	add	sp, #12
 800c9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9f8:	2700      	movs	r7, #0
 800c9fa:	42ae      	cmp	r6, r5
 800c9fc:	d202      	bcs.n	800ca04 <__b2d+0x60>
 800c9fe:	9d01      	ldr	r5, [sp, #4]
 800ca00:	3d08      	subs	r5, #8
 800ca02:	682f      	ldr	r7, [r5, #0]
 800ca04:	230b      	movs	r3, #11
 800ca06:	425b      	negs	r3, r3
 800ca08:	469c      	mov	ip, r3
 800ca0a:	4484      	add	ip, r0
 800ca0c:	280b      	cmp	r0, #11
 800ca0e:	d013      	beq.n	800ca38 <__b2d+0x94>
 800ca10:	4663      	mov	r3, ip
 800ca12:	2020      	movs	r0, #32
 800ca14:	409c      	lsls	r4, r3
 800ca16:	1ac0      	subs	r0, r0, r3
 800ca18:	003b      	movs	r3, r7
 800ca1a:	40c3      	lsrs	r3, r0
 800ca1c:	431c      	orrs	r4, r3
 800ca1e:	4321      	orrs	r1, r4
 800ca20:	000b      	movs	r3, r1
 800ca22:	2100      	movs	r1, #0
 800ca24:	42b5      	cmp	r5, r6
 800ca26:	d901      	bls.n	800ca2c <__b2d+0x88>
 800ca28:	3d04      	subs	r5, #4
 800ca2a:	6829      	ldr	r1, [r5, #0]
 800ca2c:	4664      	mov	r4, ip
 800ca2e:	40c1      	lsrs	r1, r0
 800ca30:	40a7      	lsls	r7, r4
 800ca32:	430f      	orrs	r7, r1
 800ca34:	003a      	movs	r2, r7
 800ca36:	e7db      	b.n	800c9f0 <__b2d+0x4c>
 800ca38:	4321      	orrs	r1, r4
 800ca3a:	000b      	movs	r3, r1
 800ca3c:	e7fa      	b.n	800ca34 <__b2d+0x90>
 800ca3e:	46c0      	nop			; (mov r8, r8)
 800ca40:	3ff00000 	.word	0x3ff00000

0800ca44 <__d2b>:
 800ca44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca46:	2101      	movs	r1, #1
 800ca48:	0014      	movs	r4, r2
 800ca4a:	001e      	movs	r6, r3
 800ca4c:	9f08      	ldr	r7, [sp, #32]
 800ca4e:	f7ff fbff 	bl	800c250 <_Balloc>
 800ca52:	1e05      	subs	r5, r0, #0
 800ca54:	d105      	bne.n	800ca62 <__d2b+0x1e>
 800ca56:	0002      	movs	r2, r0
 800ca58:	4b26      	ldr	r3, [pc, #152]	; (800caf4 <__d2b+0xb0>)
 800ca5a:	4927      	ldr	r1, [pc, #156]	; (800caf8 <__d2b+0xb4>)
 800ca5c:	4827      	ldr	r0, [pc, #156]	; (800cafc <__d2b+0xb8>)
 800ca5e:	f000 fa55 	bl	800cf0c <__assert_func>
 800ca62:	0333      	lsls	r3, r6, #12
 800ca64:	0076      	lsls	r6, r6, #1
 800ca66:	0b1b      	lsrs	r3, r3, #12
 800ca68:	0d76      	lsrs	r6, r6, #21
 800ca6a:	d124      	bne.n	800cab6 <__d2b+0x72>
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	2c00      	cmp	r4, #0
 800ca70:	d027      	beq.n	800cac2 <__d2b+0x7e>
 800ca72:	4668      	mov	r0, sp
 800ca74:	9400      	str	r4, [sp, #0]
 800ca76:	f7ff fcfd 	bl	800c474 <__lo0bits>
 800ca7a:	9c00      	ldr	r4, [sp, #0]
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d01e      	beq.n	800cabe <__d2b+0x7a>
 800ca80:	9b01      	ldr	r3, [sp, #4]
 800ca82:	2120      	movs	r1, #32
 800ca84:	001a      	movs	r2, r3
 800ca86:	1a09      	subs	r1, r1, r0
 800ca88:	408a      	lsls	r2, r1
 800ca8a:	40c3      	lsrs	r3, r0
 800ca8c:	4322      	orrs	r2, r4
 800ca8e:	616a      	str	r2, [r5, #20]
 800ca90:	9301      	str	r3, [sp, #4]
 800ca92:	9c01      	ldr	r4, [sp, #4]
 800ca94:	61ac      	str	r4, [r5, #24]
 800ca96:	1e63      	subs	r3, r4, #1
 800ca98:	419c      	sbcs	r4, r3
 800ca9a:	3401      	adds	r4, #1
 800ca9c:	612c      	str	r4, [r5, #16]
 800ca9e:	2e00      	cmp	r6, #0
 800caa0:	d018      	beq.n	800cad4 <__d2b+0x90>
 800caa2:	4b17      	ldr	r3, [pc, #92]	; (800cb00 <__d2b+0xbc>)
 800caa4:	18f6      	adds	r6, r6, r3
 800caa6:	2335      	movs	r3, #53	; 0x35
 800caa8:	1836      	adds	r6, r6, r0
 800caaa:	1a18      	subs	r0, r3, r0
 800caac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caae:	603e      	str	r6, [r7, #0]
 800cab0:	6018      	str	r0, [r3, #0]
 800cab2:	0028      	movs	r0, r5
 800cab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cab6:	2280      	movs	r2, #128	; 0x80
 800cab8:	0352      	lsls	r2, r2, #13
 800caba:	4313      	orrs	r3, r2
 800cabc:	e7d6      	b.n	800ca6c <__d2b+0x28>
 800cabe:	616c      	str	r4, [r5, #20]
 800cac0:	e7e7      	b.n	800ca92 <__d2b+0x4e>
 800cac2:	a801      	add	r0, sp, #4
 800cac4:	f7ff fcd6 	bl	800c474 <__lo0bits>
 800cac8:	2401      	movs	r4, #1
 800caca:	9b01      	ldr	r3, [sp, #4]
 800cacc:	612c      	str	r4, [r5, #16]
 800cace:	616b      	str	r3, [r5, #20]
 800cad0:	3020      	adds	r0, #32
 800cad2:	e7e4      	b.n	800ca9e <__d2b+0x5a>
 800cad4:	4b0b      	ldr	r3, [pc, #44]	; (800cb04 <__d2b+0xc0>)
 800cad6:	18c0      	adds	r0, r0, r3
 800cad8:	4b0b      	ldr	r3, [pc, #44]	; (800cb08 <__d2b+0xc4>)
 800cada:	6038      	str	r0, [r7, #0]
 800cadc:	18e3      	adds	r3, r4, r3
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	18eb      	adds	r3, r5, r3
 800cae2:	6958      	ldr	r0, [r3, #20]
 800cae4:	f7ff fcac 	bl	800c440 <__hi0bits>
 800cae8:	0164      	lsls	r4, r4, #5
 800caea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caec:	1a24      	subs	r4, r4, r0
 800caee:	601c      	str	r4, [r3, #0]
 800caf0:	e7df      	b.n	800cab2 <__d2b+0x6e>
 800caf2:	46c0      	nop			; (mov r8, r8)
 800caf4:	0800de84 	.word	0x0800de84
 800caf8:	0000030a 	.word	0x0000030a
 800cafc:	0800df14 	.word	0x0800df14
 800cb00:	fffffbcd 	.word	0xfffffbcd
 800cb04:	fffffbce 	.word	0xfffffbce
 800cb08:	3fffffff 	.word	0x3fffffff

0800cb0c <__ratio>:
 800cb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	000d      	movs	r5, r1
 800cb12:	a902      	add	r1, sp, #8
 800cb14:	0004      	movs	r4, r0
 800cb16:	f7ff ff45 	bl	800c9a4 <__b2d>
 800cb1a:	9000      	str	r0, [sp, #0]
 800cb1c:	9101      	str	r1, [sp, #4]
 800cb1e:	9e00      	ldr	r6, [sp, #0]
 800cb20:	9f01      	ldr	r7, [sp, #4]
 800cb22:	0028      	movs	r0, r5
 800cb24:	a903      	add	r1, sp, #12
 800cb26:	f7ff ff3d 	bl	800c9a4 <__b2d>
 800cb2a:	6924      	ldr	r4, [r4, #16]
 800cb2c:	692d      	ldr	r5, [r5, #16]
 800cb2e:	0002      	movs	r2, r0
 800cb30:	1b65      	subs	r5, r4, r5
 800cb32:	016c      	lsls	r4, r5, #5
 800cb34:	46a4      	mov	ip, r4
 800cb36:	9d03      	ldr	r5, [sp, #12]
 800cb38:	9c02      	ldr	r4, [sp, #8]
 800cb3a:	000b      	movs	r3, r1
 800cb3c:	1b64      	subs	r4, r4, r5
 800cb3e:	4464      	add	r4, ip
 800cb40:	0525      	lsls	r5, r4, #20
 800cb42:	2c00      	cmp	r4, #0
 800cb44:	dd07      	ble.n	800cb56 <__ratio+0x4a>
 800cb46:	9901      	ldr	r1, [sp, #4]
 800cb48:	186f      	adds	r7, r5, r1
 800cb4a:	0030      	movs	r0, r6
 800cb4c:	0039      	movs	r1, r7
 800cb4e:	f7f4 f885 	bl	8000c5c <__aeabi_ddiv>
 800cb52:	b005      	add	sp, #20
 800cb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb56:	1b4b      	subs	r3, r1, r5
 800cb58:	e7f7      	b.n	800cb4a <__ratio+0x3e>

0800cb5a <__copybits>:
 800cb5a:	b570      	push	{r4, r5, r6, lr}
 800cb5c:	0015      	movs	r5, r2
 800cb5e:	6913      	ldr	r3, [r2, #16]
 800cb60:	3514      	adds	r5, #20
 800cb62:	009c      	lsls	r4, r3, #2
 800cb64:	0006      	movs	r6, r0
 800cb66:	002b      	movs	r3, r5
 800cb68:	3901      	subs	r1, #1
 800cb6a:	1149      	asrs	r1, r1, #5
 800cb6c:	3101      	adds	r1, #1
 800cb6e:	0089      	lsls	r1, r1, #2
 800cb70:	1841      	adds	r1, r0, r1
 800cb72:	192c      	adds	r4, r5, r4
 800cb74:	429c      	cmp	r4, r3
 800cb76:	d80d      	bhi.n	800cb94 <__copybits+0x3a>
 800cb78:	0015      	movs	r5, r2
 800cb7a:	3511      	adds	r5, #17
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	42a5      	cmp	r5, r4
 800cb80:	d803      	bhi.n	800cb8a <__copybits+0x30>
 800cb82:	1aa3      	subs	r3, r4, r2
 800cb84:	3b11      	subs	r3, #17
 800cb86:	089b      	lsrs	r3, r3, #2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	18c0      	adds	r0, r0, r3
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4281      	cmp	r1, r0
 800cb90:	d803      	bhi.n	800cb9a <__copybits+0x40>
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	cb20      	ldmia	r3!, {r5}
 800cb96:	c620      	stmia	r6!, {r5}
 800cb98:	e7ec      	b.n	800cb74 <__copybits+0x1a>
 800cb9a:	c008      	stmia	r0!, {r3}
 800cb9c:	e7f7      	b.n	800cb8e <__copybits+0x34>

0800cb9e <__any_on>:
 800cb9e:	0002      	movs	r2, r0
 800cba0:	6900      	ldr	r0, [r0, #16]
 800cba2:	b510      	push	{r4, lr}
 800cba4:	3214      	adds	r2, #20
 800cba6:	114b      	asrs	r3, r1, #5
 800cba8:	4298      	cmp	r0, r3
 800cbaa:	db13      	blt.n	800cbd4 <__any_on+0x36>
 800cbac:	dd0c      	ble.n	800cbc8 <__any_on+0x2a>
 800cbae:	241f      	movs	r4, #31
 800cbb0:	0008      	movs	r0, r1
 800cbb2:	4020      	ands	r0, r4
 800cbb4:	4221      	tst	r1, r4
 800cbb6:	d007      	beq.n	800cbc8 <__any_on+0x2a>
 800cbb8:	0099      	lsls	r1, r3, #2
 800cbba:	588c      	ldr	r4, [r1, r2]
 800cbbc:	0021      	movs	r1, r4
 800cbbe:	40c1      	lsrs	r1, r0
 800cbc0:	4081      	lsls	r1, r0
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	428c      	cmp	r4, r1
 800cbc6:	d104      	bne.n	800cbd2 <__any_on+0x34>
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	18d3      	adds	r3, r2, r3
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d803      	bhi.n	800cbd8 <__any_on+0x3a>
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	bd10      	pop	{r4, pc}
 800cbd4:	0003      	movs	r3, r0
 800cbd6:	e7f7      	b.n	800cbc8 <__any_on+0x2a>
 800cbd8:	3b04      	subs	r3, #4
 800cbda:	6819      	ldr	r1, [r3, #0]
 800cbdc:	2900      	cmp	r1, #0
 800cbde:	d0f5      	beq.n	800cbcc <__any_on+0x2e>
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	e7f6      	b.n	800cbd2 <__any_on+0x34>

0800cbe4 <_calloc_r>:
 800cbe4:	434a      	muls	r2, r1
 800cbe6:	b570      	push	{r4, r5, r6, lr}
 800cbe8:	0011      	movs	r1, r2
 800cbea:	0015      	movs	r5, r2
 800cbec:	f7fc fab8 	bl	8009160 <_malloc_r>
 800cbf0:	1e04      	subs	r4, r0, #0
 800cbf2:	d003      	beq.n	800cbfc <_calloc_r+0x18>
 800cbf4:	002a      	movs	r2, r5
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	f7fc fa5f 	bl	80090ba <memset>
 800cbfc:	0020      	movs	r0, r4
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}

0800cc00 <__ssputs_r>:
 800cc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc02:	688e      	ldr	r6, [r1, #8]
 800cc04:	b085      	sub	sp, #20
 800cc06:	0007      	movs	r7, r0
 800cc08:	000c      	movs	r4, r1
 800cc0a:	9203      	str	r2, [sp, #12]
 800cc0c:	9301      	str	r3, [sp, #4]
 800cc0e:	429e      	cmp	r6, r3
 800cc10:	d83c      	bhi.n	800cc8c <__ssputs_r+0x8c>
 800cc12:	2390      	movs	r3, #144	; 0x90
 800cc14:	898a      	ldrh	r2, [r1, #12]
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	421a      	tst	r2, r3
 800cc1a:	d034      	beq.n	800cc86 <__ssputs_r+0x86>
 800cc1c:	2503      	movs	r5, #3
 800cc1e:	6909      	ldr	r1, [r1, #16]
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	1a5b      	subs	r3, r3, r1
 800cc24:	9302      	str	r3, [sp, #8]
 800cc26:	6963      	ldr	r3, [r4, #20]
 800cc28:	9802      	ldr	r0, [sp, #8]
 800cc2a:	435d      	muls	r5, r3
 800cc2c:	0feb      	lsrs	r3, r5, #31
 800cc2e:	195d      	adds	r5, r3, r5
 800cc30:	9b01      	ldr	r3, [sp, #4]
 800cc32:	106d      	asrs	r5, r5, #1
 800cc34:	3301      	adds	r3, #1
 800cc36:	181b      	adds	r3, r3, r0
 800cc38:	42ab      	cmp	r3, r5
 800cc3a:	d900      	bls.n	800cc3e <__ssputs_r+0x3e>
 800cc3c:	001d      	movs	r5, r3
 800cc3e:	0553      	lsls	r3, r2, #21
 800cc40:	d532      	bpl.n	800cca8 <__ssputs_r+0xa8>
 800cc42:	0029      	movs	r1, r5
 800cc44:	0038      	movs	r0, r7
 800cc46:	f7fc fa8b 	bl	8009160 <_malloc_r>
 800cc4a:	1e06      	subs	r6, r0, #0
 800cc4c:	d109      	bne.n	800cc62 <__ssputs_r+0x62>
 800cc4e:	230c      	movs	r3, #12
 800cc50:	603b      	str	r3, [r7, #0]
 800cc52:	2340      	movs	r3, #64	; 0x40
 800cc54:	2001      	movs	r0, #1
 800cc56:	89a2      	ldrh	r2, [r4, #12]
 800cc58:	4240      	negs	r0, r0
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	81a3      	strh	r3, [r4, #12]
 800cc5e:	b005      	add	sp, #20
 800cc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc62:	9a02      	ldr	r2, [sp, #8]
 800cc64:	6921      	ldr	r1, [r4, #16]
 800cc66:	f7fc fa0c 	bl	8009082 <memcpy>
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	4a14      	ldr	r2, [pc, #80]	; (800ccc0 <__ssputs_r+0xc0>)
 800cc6e:	401a      	ands	r2, r3
 800cc70:	2380      	movs	r3, #128	; 0x80
 800cc72:	4313      	orrs	r3, r2
 800cc74:	81a3      	strh	r3, [r4, #12]
 800cc76:	9b02      	ldr	r3, [sp, #8]
 800cc78:	6126      	str	r6, [r4, #16]
 800cc7a:	18f6      	adds	r6, r6, r3
 800cc7c:	6026      	str	r6, [r4, #0]
 800cc7e:	6165      	str	r5, [r4, #20]
 800cc80:	9e01      	ldr	r6, [sp, #4]
 800cc82:	1aed      	subs	r5, r5, r3
 800cc84:	60a5      	str	r5, [r4, #8]
 800cc86:	9b01      	ldr	r3, [sp, #4]
 800cc88:	429e      	cmp	r6, r3
 800cc8a:	d900      	bls.n	800cc8e <__ssputs_r+0x8e>
 800cc8c:	9e01      	ldr	r6, [sp, #4]
 800cc8e:	0032      	movs	r2, r6
 800cc90:	9903      	ldr	r1, [sp, #12]
 800cc92:	6820      	ldr	r0, [r4, #0]
 800cc94:	f7fc f9fe 	bl	8009094 <memmove>
 800cc98:	68a3      	ldr	r3, [r4, #8]
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	1b9b      	subs	r3, r3, r6
 800cc9e:	60a3      	str	r3, [r4, #8]
 800cca0:	6823      	ldr	r3, [r4, #0]
 800cca2:	199e      	adds	r6, r3, r6
 800cca4:	6026      	str	r6, [r4, #0]
 800cca6:	e7da      	b.n	800cc5e <__ssputs_r+0x5e>
 800cca8:	002a      	movs	r2, r5
 800ccaa:	0038      	movs	r0, r7
 800ccac:	f000 f95f 	bl	800cf6e <_realloc_r>
 800ccb0:	1e06      	subs	r6, r0, #0
 800ccb2:	d1e0      	bne.n	800cc76 <__ssputs_r+0x76>
 800ccb4:	0038      	movs	r0, r7
 800ccb6:	6921      	ldr	r1, [r4, #16]
 800ccb8:	f7fc fa08 	bl	80090cc <_free_r>
 800ccbc:	e7c7      	b.n	800cc4e <__ssputs_r+0x4e>
 800ccbe:	46c0      	nop			; (mov r8, r8)
 800ccc0:	fffffb7f 	.word	0xfffffb7f

0800ccc4 <_svfiprintf_r>:
 800ccc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccc6:	b0a1      	sub	sp, #132	; 0x84
 800ccc8:	9003      	str	r0, [sp, #12]
 800ccca:	001d      	movs	r5, r3
 800cccc:	898b      	ldrh	r3, [r1, #12]
 800ccce:	000f      	movs	r7, r1
 800ccd0:	0016      	movs	r6, r2
 800ccd2:	061b      	lsls	r3, r3, #24
 800ccd4:	d511      	bpl.n	800ccfa <_svfiprintf_r+0x36>
 800ccd6:	690b      	ldr	r3, [r1, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10e      	bne.n	800ccfa <_svfiprintf_r+0x36>
 800ccdc:	2140      	movs	r1, #64	; 0x40
 800ccde:	f7fc fa3f 	bl	8009160 <_malloc_r>
 800cce2:	6038      	str	r0, [r7, #0]
 800cce4:	6138      	str	r0, [r7, #16]
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d105      	bne.n	800ccf6 <_svfiprintf_r+0x32>
 800ccea:	230c      	movs	r3, #12
 800ccec:	9a03      	ldr	r2, [sp, #12]
 800ccee:	3801      	subs	r0, #1
 800ccf0:	6013      	str	r3, [r2, #0]
 800ccf2:	b021      	add	sp, #132	; 0x84
 800ccf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccf6:	2340      	movs	r3, #64	; 0x40
 800ccf8:	617b      	str	r3, [r7, #20]
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	ac08      	add	r4, sp, #32
 800ccfe:	6163      	str	r3, [r4, #20]
 800cd00:	3320      	adds	r3, #32
 800cd02:	7663      	strb	r3, [r4, #25]
 800cd04:	3310      	adds	r3, #16
 800cd06:	76a3      	strb	r3, [r4, #26]
 800cd08:	9507      	str	r5, [sp, #28]
 800cd0a:	0035      	movs	r5, r6
 800cd0c:	782b      	ldrb	r3, [r5, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <_svfiprintf_r+0x52>
 800cd12:	2b25      	cmp	r3, #37	; 0x25
 800cd14:	d147      	bne.n	800cda6 <_svfiprintf_r+0xe2>
 800cd16:	1bab      	subs	r3, r5, r6
 800cd18:	9305      	str	r3, [sp, #20]
 800cd1a:	42b5      	cmp	r5, r6
 800cd1c:	d00c      	beq.n	800cd38 <_svfiprintf_r+0x74>
 800cd1e:	0032      	movs	r2, r6
 800cd20:	0039      	movs	r1, r7
 800cd22:	9803      	ldr	r0, [sp, #12]
 800cd24:	f7ff ff6c 	bl	800cc00 <__ssputs_r>
 800cd28:	1c43      	adds	r3, r0, #1
 800cd2a:	d100      	bne.n	800cd2e <_svfiprintf_r+0x6a>
 800cd2c:	e0ae      	b.n	800ce8c <_svfiprintf_r+0x1c8>
 800cd2e:	6962      	ldr	r2, [r4, #20]
 800cd30:	9b05      	ldr	r3, [sp, #20]
 800cd32:	4694      	mov	ip, r2
 800cd34:	4463      	add	r3, ip
 800cd36:	6163      	str	r3, [r4, #20]
 800cd38:	782b      	ldrb	r3, [r5, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d100      	bne.n	800cd40 <_svfiprintf_r+0x7c>
 800cd3e:	e0a5      	b.n	800ce8c <_svfiprintf_r+0x1c8>
 800cd40:	2201      	movs	r2, #1
 800cd42:	2300      	movs	r3, #0
 800cd44:	4252      	negs	r2, r2
 800cd46:	6062      	str	r2, [r4, #4]
 800cd48:	a904      	add	r1, sp, #16
 800cd4a:	3254      	adds	r2, #84	; 0x54
 800cd4c:	1852      	adds	r2, r2, r1
 800cd4e:	1c6e      	adds	r6, r5, #1
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	60e3      	str	r3, [r4, #12]
 800cd54:	60a3      	str	r3, [r4, #8]
 800cd56:	7013      	strb	r3, [r2, #0]
 800cd58:	65a3      	str	r3, [r4, #88]	; 0x58
 800cd5a:	2205      	movs	r2, #5
 800cd5c:	7831      	ldrb	r1, [r6, #0]
 800cd5e:	4854      	ldr	r0, [pc, #336]	; (800ceb0 <_svfiprintf_r+0x1ec>)
 800cd60:	f7fc f976 	bl	8009050 <memchr>
 800cd64:	1c75      	adds	r5, r6, #1
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d11f      	bne.n	800cdaa <_svfiprintf_r+0xe6>
 800cd6a:	6822      	ldr	r2, [r4, #0]
 800cd6c:	06d3      	lsls	r3, r2, #27
 800cd6e:	d504      	bpl.n	800cd7a <_svfiprintf_r+0xb6>
 800cd70:	2353      	movs	r3, #83	; 0x53
 800cd72:	a904      	add	r1, sp, #16
 800cd74:	185b      	adds	r3, r3, r1
 800cd76:	2120      	movs	r1, #32
 800cd78:	7019      	strb	r1, [r3, #0]
 800cd7a:	0713      	lsls	r3, r2, #28
 800cd7c:	d504      	bpl.n	800cd88 <_svfiprintf_r+0xc4>
 800cd7e:	2353      	movs	r3, #83	; 0x53
 800cd80:	a904      	add	r1, sp, #16
 800cd82:	185b      	adds	r3, r3, r1
 800cd84:	212b      	movs	r1, #43	; 0x2b
 800cd86:	7019      	strb	r1, [r3, #0]
 800cd88:	7833      	ldrb	r3, [r6, #0]
 800cd8a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd8c:	d016      	beq.n	800cdbc <_svfiprintf_r+0xf8>
 800cd8e:	0035      	movs	r5, r6
 800cd90:	2100      	movs	r1, #0
 800cd92:	200a      	movs	r0, #10
 800cd94:	68e3      	ldr	r3, [r4, #12]
 800cd96:	782a      	ldrb	r2, [r5, #0]
 800cd98:	1c6e      	adds	r6, r5, #1
 800cd9a:	3a30      	subs	r2, #48	; 0x30
 800cd9c:	2a09      	cmp	r2, #9
 800cd9e:	d94e      	bls.n	800ce3e <_svfiprintf_r+0x17a>
 800cda0:	2900      	cmp	r1, #0
 800cda2:	d111      	bne.n	800cdc8 <_svfiprintf_r+0x104>
 800cda4:	e017      	b.n	800cdd6 <_svfiprintf_r+0x112>
 800cda6:	3501      	adds	r5, #1
 800cda8:	e7b0      	b.n	800cd0c <_svfiprintf_r+0x48>
 800cdaa:	4b41      	ldr	r3, [pc, #260]	; (800ceb0 <_svfiprintf_r+0x1ec>)
 800cdac:	6822      	ldr	r2, [r4, #0]
 800cdae:	1ac0      	subs	r0, r0, r3
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	4083      	lsls	r3, r0
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	002e      	movs	r6, r5
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	e7ce      	b.n	800cd5a <_svfiprintf_r+0x96>
 800cdbc:	9b07      	ldr	r3, [sp, #28]
 800cdbe:	1d19      	adds	r1, r3, #4
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	9107      	str	r1, [sp, #28]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	db01      	blt.n	800cdcc <_svfiprintf_r+0x108>
 800cdc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdca:	e004      	b.n	800cdd6 <_svfiprintf_r+0x112>
 800cdcc:	425b      	negs	r3, r3
 800cdce:	60e3      	str	r3, [r4, #12]
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	782b      	ldrb	r3, [r5, #0]
 800cdd8:	2b2e      	cmp	r3, #46	; 0x2e
 800cdda:	d10a      	bne.n	800cdf2 <_svfiprintf_r+0x12e>
 800cddc:	786b      	ldrb	r3, [r5, #1]
 800cdde:	2b2a      	cmp	r3, #42	; 0x2a
 800cde0:	d135      	bne.n	800ce4e <_svfiprintf_r+0x18a>
 800cde2:	9b07      	ldr	r3, [sp, #28]
 800cde4:	3502      	adds	r5, #2
 800cde6:	1d1a      	adds	r2, r3, #4
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	9207      	str	r2, [sp, #28]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	db2b      	blt.n	800ce48 <_svfiprintf_r+0x184>
 800cdf0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf2:	4e30      	ldr	r6, [pc, #192]	; (800ceb4 <_svfiprintf_r+0x1f0>)
 800cdf4:	2203      	movs	r2, #3
 800cdf6:	0030      	movs	r0, r6
 800cdf8:	7829      	ldrb	r1, [r5, #0]
 800cdfa:	f7fc f929 	bl	8009050 <memchr>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d006      	beq.n	800ce10 <_svfiprintf_r+0x14c>
 800ce02:	2340      	movs	r3, #64	; 0x40
 800ce04:	1b80      	subs	r0, r0, r6
 800ce06:	4083      	lsls	r3, r0
 800ce08:	6822      	ldr	r2, [r4, #0]
 800ce0a:	3501      	adds	r5, #1
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	6023      	str	r3, [r4, #0]
 800ce10:	7829      	ldrb	r1, [r5, #0]
 800ce12:	2206      	movs	r2, #6
 800ce14:	4828      	ldr	r0, [pc, #160]	; (800ceb8 <_svfiprintf_r+0x1f4>)
 800ce16:	1c6e      	adds	r6, r5, #1
 800ce18:	7621      	strb	r1, [r4, #24]
 800ce1a:	f7fc f919 	bl	8009050 <memchr>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d03c      	beq.n	800ce9c <_svfiprintf_r+0x1d8>
 800ce22:	4b26      	ldr	r3, [pc, #152]	; (800cebc <_svfiprintf_r+0x1f8>)
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d125      	bne.n	800ce74 <_svfiprintf_r+0x1b0>
 800ce28:	2207      	movs	r2, #7
 800ce2a:	9b07      	ldr	r3, [sp, #28]
 800ce2c:	3307      	adds	r3, #7
 800ce2e:	4393      	bics	r3, r2
 800ce30:	3308      	adds	r3, #8
 800ce32:	9307      	str	r3, [sp, #28]
 800ce34:	6963      	ldr	r3, [r4, #20]
 800ce36:	9a04      	ldr	r2, [sp, #16]
 800ce38:	189b      	adds	r3, r3, r2
 800ce3a:	6163      	str	r3, [r4, #20]
 800ce3c:	e765      	b.n	800cd0a <_svfiprintf_r+0x46>
 800ce3e:	4343      	muls	r3, r0
 800ce40:	0035      	movs	r5, r6
 800ce42:	2101      	movs	r1, #1
 800ce44:	189b      	adds	r3, r3, r2
 800ce46:	e7a6      	b.n	800cd96 <_svfiprintf_r+0xd2>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	425b      	negs	r3, r3
 800ce4c:	e7d0      	b.n	800cdf0 <_svfiprintf_r+0x12c>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	200a      	movs	r0, #10
 800ce52:	001a      	movs	r2, r3
 800ce54:	3501      	adds	r5, #1
 800ce56:	6063      	str	r3, [r4, #4]
 800ce58:	7829      	ldrb	r1, [r5, #0]
 800ce5a:	1c6e      	adds	r6, r5, #1
 800ce5c:	3930      	subs	r1, #48	; 0x30
 800ce5e:	2909      	cmp	r1, #9
 800ce60:	d903      	bls.n	800ce6a <_svfiprintf_r+0x1a6>
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0c5      	beq.n	800cdf2 <_svfiprintf_r+0x12e>
 800ce66:	9209      	str	r2, [sp, #36]	; 0x24
 800ce68:	e7c3      	b.n	800cdf2 <_svfiprintf_r+0x12e>
 800ce6a:	4342      	muls	r2, r0
 800ce6c:	0035      	movs	r5, r6
 800ce6e:	2301      	movs	r3, #1
 800ce70:	1852      	adds	r2, r2, r1
 800ce72:	e7f1      	b.n	800ce58 <_svfiprintf_r+0x194>
 800ce74:	ab07      	add	r3, sp, #28
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	003a      	movs	r2, r7
 800ce7a:	0021      	movs	r1, r4
 800ce7c:	4b10      	ldr	r3, [pc, #64]	; (800cec0 <_svfiprintf_r+0x1fc>)
 800ce7e:	9803      	ldr	r0, [sp, #12]
 800ce80:	f7fc fa76 	bl	8009370 <_printf_float>
 800ce84:	9004      	str	r0, [sp, #16]
 800ce86:	9b04      	ldr	r3, [sp, #16]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	d1d3      	bne.n	800ce34 <_svfiprintf_r+0x170>
 800ce8c:	89bb      	ldrh	r3, [r7, #12]
 800ce8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ce90:	065b      	lsls	r3, r3, #25
 800ce92:	d400      	bmi.n	800ce96 <_svfiprintf_r+0x1d2>
 800ce94:	e72d      	b.n	800ccf2 <_svfiprintf_r+0x2e>
 800ce96:	2001      	movs	r0, #1
 800ce98:	4240      	negs	r0, r0
 800ce9a:	e72a      	b.n	800ccf2 <_svfiprintf_r+0x2e>
 800ce9c:	ab07      	add	r3, sp, #28
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	003a      	movs	r2, r7
 800cea2:	0021      	movs	r1, r4
 800cea4:	4b06      	ldr	r3, [pc, #24]	; (800cec0 <_svfiprintf_r+0x1fc>)
 800cea6:	9803      	ldr	r0, [sp, #12]
 800cea8:	f7fc fd20 	bl	80098ec <_printf_i>
 800ceac:	e7ea      	b.n	800ce84 <_svfiprintf_r+0x1c0>
 800ceae:	46c0      	nop			; (mov r8, r8)
 800ceb0:	0800e074 	.word	0x0800e074
 800ceb4:	0800e07a 	.word	0x0800e07a
 800ceb8:	0800e07e 	.word	0x0800e07e
 800cebc:	08009371 	.word	0x08009371
 800cec0:	0800cc01 	.word	0x0800cc01

0800cec4 <nan>:
 800cec4:	2000      	movs	r0, #0
 800cec6:	4901      	ldr	r1, [pc, #4]	; (800cecc <nan+0x8>)
 800cec8:	4770      	bx	lr
 800ceca:	46c0      	nop			; (mov r8, r8)
 800cecc:	7ff80000 	.word	0x7ff80000

0800ced0 <strncmp>:
 800ced0:	b530      	push	{r4, r5, lr}
 800ced2:	0005      	movs	r5, r0
 800ced4:	1e10      	subs	r0, r2, #0
 800ced6:	d00b      	beq.n	800cef0 <strncmp+0x20>
 800ced8:	2400      	movs	r4, #0
 800ceda:	3a01      	subs	r2, #1
 800cedc:	5d2b      	ldrb	r3, [r5, r4]
 800cede:	5d08      	ldrb	r0, [r1, r4]
 800cee0:	4283      	cmp	r3, r0
 800cee2:	d104      	bne.n	800ceee <strncmp+0x1e>
 800cee4:	4294      	cmp	r4, r2
 800cee6:	d002      	beq.n	800ceee <strncmp+0x1e>
 800cee8:	3401      	adds	r4, #1
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1f6      	bne.n	800cedc <strncmp+0xc>
 800ceee:	1a18      	subs	r0, r3, r0
 800cef0:	bd30      	pop	{r4, r5, pc}

0800cef2 <__ascii_wctomb>:
 800cef2:	0003      	movs	r3, r0
 800cef4:	1e08      	subs	r0, r1, #0
 800cef6:	d005      	beq.n	800cf04 <__ascii_wctomb+0x12>
 800cef8:	2aff      	cmp	r2, #255	; 0xff
 800cefa:	d904      	bls.n	800cf06 <__ascii_wctomb+0x14>
 800cefc:	228a      	movs	r2, #138	; 0x8a
 800cefe:	2001      	movs	r0, #1
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	4240      	negs	r0, r0
 800cf04:	4770      	bx	lr
 800cf06:	2001      	movs	r0, #1
 800cf08:	700a      	strb	r2, [r1, #0]
 800cf0a:	e7fb      	b.n	800cf04 <__ascii_wctomb+0x12>

0800cf0c <__assert_func>:
 800cf0c:	b530      	push	{r4, r5, lr}
 800cf0e:	0014      	movs	r4, r2
 800cf10:	001a      	movs	r2, r3
 800cf12:	4b09      	ldr	r3, [pc, #36]	; (800cf38 <__assert_func+0x2c>)
 800cf14:	0005      	movs	r5, r0
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	b085      	sub	sp, #20
 800cf1a:	68d8      	ldr	r0, [r3, #12]
 800cf1c:	4b07      	ldr	r3, [pc, #28]	; (800cf3c <__assert_func+0x30>)
 800cf1e:	2c00      	cmp	r4, #0
 800cf20:	d101      	bne.n	800cf26 <__assert_func+0x1a>
 800cf22:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <__assert_func+0x34>)
 800cf24:	001c      	movs	r4, r3
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	9100      	str	r1, [sp, #0]
 800cf2a:	002b      	movs	r3, r5
 800cf2c:	4905      	ldr	r1, [pc, #20]	; (800cf44 <__assert_func+0x38>)
 800cf2e:	9402      	str	r4, [sp, #8]
 800cf30:	f000 f80a 	bl	800cf48 <fiprintf>
 800cf34:	f7fc f846 	bl	8008fc4 <abort>
 800cf38:	20000008 	.word	0x20000008
 800cf3c:	0800e085 	.word	0x0800e085
 800cf40:	0800e0c0 	.word	0x0800e0c0
 800cf44:	0800e092 	.word	0x0800e092

0800cf48 <fiprintf>:
 800cf48:	b40e      	push	{r1, r2, r3}
 800cf4a:	b503      	push	{r0, r1, lr}
 800cf4c:	0001      	movs	r1, r0
 800cf4e:	ab03      	add	r3, sp, #12
 800cf50:	4804      	ldr	r0, [pc, #16]	; (800cf64 <fiprintf+0x1c>)
 800cf52:	cb04      	ldmia	r3!, {r2}
 800cf54:	6800      	ldr	r0, [r0, #0]
 800cf56:	9301      	str	r3, [sp, #4]
 800cf58:	f000 f856 	bl	800d008 <_vfiprintf_r>
 800cf5c:	b002      	add	sp, #8
 800cf5e:	bc08      	pop	{r3}
 800cf60:	b003      	add	sp, #12
 800cf62:	4718      	bx	r3
 800cf64:	20000008 	.word	0x20000008

0800cf68 <__retarget_lock_init_recursive>:
 800cf68:	4770      	bx	lr

0800cf6a <__retarget_lock_acquire_recursive>:
 800cf6a:	4770      	bx	lr

0800cf6c <__retarget_lock_release_recursive>:
 800cf6c:	4770      	bx	lr

0800cf6e <_realloc_r>:
 800cf6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf70:	0007      	movs	r7, r0
 800cf72:	000d      	movs	r5, r1
 800cf74:	0016      	movs	r6, r2
 800cf76:	2900      	cmp	r1, #0
 800cf78:	d105      	bne.n	800cf86 <_realloc_r+0x18>
 800cf7a:	0011      	movs	r1, r2
 800cf7c:	f7fc f8f0 	bl	8009160 <_malloc_r>
 800cf80:	0004      	movs	r4, r0
 800cf82:	0020      	movs	r0, r4
 800cf84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf86:	2a00      	cmp	r2, #0
 800cf88:	d103      	bne.n	800cf92 <_realloc_r+0x24>
 800cf8a:	f7fc f89f 	bl	80090cc <_free_r>
 800cf8e:	0034      	movs	r4, r6
 800cf90:	e7f7      	b.n	800cf82 <_realloc_r+0x14>
 800cf92:	f000 fc7b 	bl	800d88c <_malloc_usable_size_r>
 800cf96:	002c      	movs	r4, r5
 800cf98:	42b0      	cmp	r0, r6
 800cf9a:	d2f2      	bcs.n	800cf82 <_realloc_r+0x14>
 800cf9c:	0031      	movs	r1, r6
 800cf9e:	0038      	movs	r0, r7
 800cfa0:	f7fc f8de 	bl	8009160 <_malloc_r>
 800cfa4:	1e04      	subs	r4, r0, #0
 800cfa6:	d0ec      	beq.n	800cf82 <_realloc_r+0x14>
 800cfa8:	0029      	movs	r1, r5
 800cfaa:	0032      	movs	r2, r6
 800cfac:	f7fc f869 	bl	8009082 <memcpy>
 800cfb0:	0029      	movs	r1, r5
 800cfb2:	0038      	movs	r0, r7
 800cfb4:	f7fc f88a 	bl	80090cc <_free_r>
 800cfb8:	e7e3      	b.n	800cf82 <_realloc_r+0x14>

0800cfba <__sfputc_r>:
 800cfba:	6893      	ldr	r3, [r2, #8]
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	6093      	str	r3, [r2, #8]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	da04      	bge.n	800cfd0 <__sfputc_r+0x16>
 800cfc6:	6994      	ldr	r4, [r2, #24]
 800cfc8:	42a3      	cmp	r3, r4
 800cfca:	db07      	blt.n	800cfdc <__sfputc_r+0x22>
 800cfcc:	290a      	cmp	r1, #10
 800cfce:	d005      	beq.n	800cfdc <__sfputc_r+0x22>
 800cfd0:	6813      	ldr	r3, [r2, #0]
 800cfd2:	1c58      	adds	r0, r3, #1
 800cfd4:	6010      	str	r0, [r2, #0]
 800cfd6:	7019      	strb	r1, [r3, #0]
 800cfd8:	0008      	movs	r0, r1
 800cfda:	bd10      	pop	{r4, pc}
 800cfdc:	f000 f94e 	bl	800d27c <__swbuf_r>
 800cfe0:	0001      	movs	r1, r0
 800cfe2:	e7f9      	b.n	800cfd8 <__sfputc_r+0x1e>

0800cfe4 <__sfputs_r>:
 800cfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe6:	0006      	movs	r6, r0
 800cfe8:	000f      	movs	r7, r1
 800cfea:	0014      	movs	r4, r2
 800cfec:	18d5      	adds	r5, r2, r3
 800cfee:	42ac      	cmp	r4, r5
 800cff0:	d101      	bne.n	800cff6 <__sfputs_r+0x12>
 800cff2:	2000      	movs	r0, #0
 800cff4:	e007      	b.n	800d006 <__sfputs_r+0x22>
 800cff6:	7821      	ldrb	r1, [r4, #0]
 800cff8:	003a      	movs	r2, r7
 800cffa:	0030      	movs	r0, r6
 800cffc:	f7ff ffdd 	bl	800cfba <__sfputc_r>
 800d000:	3401      	adds	r4, #1
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	d1f3      	bne.n	800cfee <__sfputs_r+0xa>
 800d006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d008 <_vfiprintf_r>:
 800d008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d00a:	b0a1      	sub	sp, #132	; 0x84
 800d00c:	0006      	movs	r6, r0
 800d00e:	000c      	movs	r4, r1
 800d010:	001f      	movs	r7, r3
 800d012:	9203      	str	r2, [sp, #12]
 800d014:	2800      	cmp	r0, #0
 800d016:	d004      	beq.n	800d022 <_vfiprintf_r+0x1a>
 800d018:	6983      	ldr	r3, [r0, #24]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <_vfiprintf_r+0x1a>
 800d01e:	f000 fb29 	bl	800d674 <__sinit>
 800d022:	4b8e      	ldr	r3, [pc, #568]	; (800d25c <_vfiprintf_r+0x254>)
 800d024:	429c      	cmp	r4, r3
 800d026:	d11c      	bne.n	800d062 <_vfiprintf_r+0x5a>
 800d028:	6874      	ldr	r4, [r6, #4]
 800d02a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d02c:	07db      	lsls	r3, r3, #31
 800d02e:	d405      	bmi.n	800d03c <_vfiprintf_r+0x34>
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	059b      	lsls	r3, r3, #22
 800d034:	d402      	bmi.n	800d03c <_vfiprintf_r+0x34>
 800d036:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d038:	f7ff ff97 	bl	800cf6a <__retarget_lock_acquire_recursive>
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	071b      	lsls	r3, r3, #28
 800d040:	d502      	bpl.n	800d048 <_vfiprintf_r+0x40>
 800d042:	6923      	ldr	r3, [r4, #16]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d11d      	bne.n	800d084 <_vfiprintf_r+0x7c>
 800d048:	0021      	movs	r1, r4
 800d04a:	0030      	movs	r0, r6
 800d04c:	f000 f96c 	bl	800d328 <__swsetup_r>
 800d050:	2800      	cmp	r0, #0
 800d052:	d017      	beq.n	800d084 <_vfiprintf_r+0x7c>
 800d054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d056:	07db      	lsls	r3, r3, #31
 800d058:	d50d      	bpl.n	800d076 <_vfiprintf_r+0x6e>
 800d05a:	2001      	movs	r0, #1
 800d05c:	4240      	negs	r0, r0
 800d05e:	b021      	add	sp, #132	; 0x84
 800d060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d062:	4b7f      	ldr	r3, [pc, #508]	; (800d260 <_vfiprintf_r+0x258>)
 800d064:	429c      	cmp	r4, r3
 800d066:	d101      	bne.n	800d06c <_vfiprintf_r+0x64>
 800d068:	68b4      	ldr	r4, [r6, #8]
 800d06a:	e7de      	b.n	800d02a <_vfiprintf_r+0x22>
 800d06c:	4b7d      	ldr	r3, [pc, #500]	; (800d264 <_vfiprintf_r+0x25c>)
 800d06e:	429c      	cmp	r4, r3
 800d070:	d1db      	bne.n	800d02a <_vfiprintf_r+0x22>
 800d072:	68f4      	ldr	r4, [r6, #12]
 800d074:	e7d9      	b.n	800d02a <_vfiprintf_r+0x22>
 800d076:	89a3      	ldrh	r3, [r4, #12]
 800d078:	059b      	lsls	r3, r3, #22
 800d07a:	d4ee      	bmi.n	800d05a <_vfiprintf_r+0x52>
 800d07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d07e:	f7ff ff75 	bl	800cf6c <__retarget_lock_release_recursive>
 800d082:	e7ea      	b.n	800d05a <_vfiprintf_r+0x52>
 800d084:	2300      	movs	r3, #0
 800d086:	ad08      	add	r5, sp, #32
 800d088:	616b      	str	r3, [r5, #20]
 800d08a:	3320      	adds	r3, #32
 800d08c:	766b      	strb	r3, [r5, #25]
 800d08e:	3310      	adds	r3, #16
 800d090:	76ab      	strb	r3, [r5, #26]
 800d092:	9707      	str	r7, [sp, #28]
 800d094:	9f03      	ldr	r7, [sp, #12]
 800d096:	783b      	ldrb	r3, [r7, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <_vfiprintf_r+0x98>
 800d09c:	2b25      	cmp	r3, #37	; 0x25
 800d09e:	d14e      	bne.n	800d13e <_vfiprintf_r+0x136>
 800d0a0:	9b03      	ldr	r3, [sp, #12]
 800d0a2:	1afb      	subs	r3, r7, r3
 800d0a4:	9305      	str	r3, [sp, #20]
 800d0a6:	9b03      	ldr	r3, [sp, #12]
 800d0a8:	429f      	cmp	r7, r3
 800d0aa:	d00d      	beq.n	800d0c8 <_vfiprintf_r+0xc0>
 800d0ac:	9b05      	ldr	r3, [sp, #20]
 800d0ae:	0021      	movs	r1, r4
 800d0b0:	0030      	movs	r0, r6
 800d0b2:	9a03      	ldr	r2, [sp, #12]
 800d0b4:	f7ff ff96 	bl	800cfe4 <__sfputs_r>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d100      	bne.n	800d0be <_vfiprintf_r+0xb6>
 800d0bc:	e0b5      	b.n	800d22a <_vfiprintf_r+0x222>
 800d0be:	696a      	ldr	r2, [r5, #20]
 800d0c0:	9b05      	ldr	r3, [sp, #20]
 800d0c2:	4694      	mov	ip, r2
 800d0c4:	4463      	add	r3, ip
 800d0c6:	616b      	str	r3, [r5, #20]
 800d0c8:	783b      	ldrb	r3, [r7, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d100      	bne.n	800d0d0 <_vfiprintf_r+0xc8>
 800d0ce:	e0ac      	b.n	800d22a <_vfiprintf_r+0x222>
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	1c7b      	adds	r3, r7, #1
 800d0d4:	9303      	str	r3, [sp, #12]
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4252      	negs	r2, r2
 800d0da:	606a      	str	r2, [r5, #4]
 800d0dc:	a904      	add	r1, sp, #16
 800d0de:	3254      	adds	r2, #84	; 0x54
 800d0e0:	1852      	adds	r2, r2, r1
 800d0e2:	602b      	str	r3, [r5, #0]
 800d0e4:	60eb      	str	r3, [r5, #12]
 800d0e6:	60ab      	str	r3, [r5, #8]
 800d0e8:	7013      	strb	r3, [r2, #0]
 800d0ea:	65ab      	str	r3, [r5, #88]	; 0x58
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	2205      	movs	r2, #5
 800d0f0:	7819      	ldrb	r1, [r3, #0]
 800d0f2:	485d      	ldr	r0, [pc, #372]	; (800d268 <_vfiprintf_r+0x260>)
 800d0f4:	f7fb ffac 	bl	8009050 <memchr>
 800d0f8:	9b03      	ldr	r3, [sp, #12]
 800d0fa:	1c5f      	adds	r7, r3, #1
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d120      	bne.n	800d142 <_vfiprintf_r+0x13a>
 800d100:	682a      	ldr	r2, [r5, #0]
 800d102:	06d3      	lsls	r3, r2, #27
 800d104:	d504      	bpl.n	800d110 <_vfiprintf_r+0x108>
 800d106:	2353      	movs	r3, #83	; 0x53
 800d108:	a904      	add	r1, sp, #16
 800d10a:	185b      	adds	r3, r3, r1
 800d10c:	2120      	movs	r1, #32
 800d10e:	7019      	strb	r1, [r3, #0]
 800d110:	0713      	lsls	r3, r2, #28
 800d112:	d504      	bpl.n	800d11e <_vfiprintf_r+0x116>
 800d114:	2353      	movs	r3, #83	; 0x53
 800d116:	a904      	add	r1, sp, #16
 800d118:	185b      	adds	r3, r3, r1
 800d11a:	212b      	movs	r1, #43	; 0x2b
 800d11c:	7019      	strb	r1, [r3, #0]
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b2a      	cmp	r3, #42	; 0x2a
 800d124:	d016      	beq.n	800d154 <_vfiprintf_r+0x14c>
 800d126:	2100      	movs	r1, #0
 800d128:	68eb      	ldr	r3, [r5, #12]
 800d12a:	9f03      	ldr	r7, [sp, #12]
 800d12c:	783a      	ldrb	r2, [r7, #0]
 800d12e:	1c78      	adds	r0, r7, #1
 800d130:	3a30      	subs	r2, #48	; 0x30
 800d132:	4684      	mov	ip, r0
 800d134:	2a09      	cmp	r2, #9
 800d136:	d94f      	bls.n	800d1d8 <_vfiprintf_r+0x1d0>
 800d138:	2900      	cmp	r1, #0
 800d13a:	d111      	bne.n	800d160 <_vfiprintf_r+0x158>
 800d13c:	e017      	b.n	800d16e <_vfiprintf_r+0x166>
 800d13e:	3701      	adds	r7, #1
 800d140:	e7a9      	b.n	800d096 <_vfiprintf_r+0x8e>
 800d142:	4b49      	ldr	r3, [pc, #292]	; (800d268 <_vfiprintf_r+0x260>)
 800d144:	682a      	ldr	r2, [r5, #0]
 800d146:	1ac0      	subs	r0, r0, r3
 800d148:	2301      	movs	r3, #1
 800d14a:	4083      	lsls	r3, r0
 800d14c:	4313      	orrs	r3, r2
 800d14e:	602b      	str	r3, [r5, #0]
 800d150:	9703      	str	r7, [sp, #12]
 800d152:	e7cb      	b.n	800d0ec <_vfiprintf_r+0xe4>
 800d154:	9b07      	ldr	r3, [sp, #28]
 800d156:	1d19      	adds	r1, r3, #4
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	9107      	str	r1, [sp, #28]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	db01      	blt.n	800d164 <_vfiprintf_r+0x15c>
 800d160:	930b      	str	r3, [sp, #44]	; 0x2c
 800d162:	e004      	b.n	800d16e <_vfiprintf_r+0x166>
 800d164:	425b      	negs	r3, r3
 800d166:	60eb      	str	r3, [r5, #12]
 800d168:	2302      	movs	r3, #2
 800d16a:	4313      	orrs	r3, r2
 800d16c:	602b      	str	r3, [r5, #0]
 800d16e:	783b      	ldrb	r3, [r7, #0]
 800d170:	2b2e      	cmp	r3, #46	; 0x2e
 800d172:	d10a      	bne.n	800d18a <_vfiprintf_r+0x182>
 800d174:	787b      	ldrb	r3, [r7, #1]
 800d176:	2b2a      	cmp	r3, #42	; 0x2a
 800d178:	d137      	bne.n	800d1ea <_vfiprintf_r+0x1e2>
 800d17a:	9b07      	ldr	r3, [sp, #28]
 800d17c:	3702      	adds	r7, #2
 800d17e:	1d1a      	adds	r2, r3, #4
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	9207      	str	r2, [sp, #28]
 800d184:	2b00      	cmp	r3, #0
 800d186:	db2d      	blt.n	800d1e4 <_vfiprintf_r+0x1dc>
 800d188:	9309      	str	r3, [sp, #36]	; 0x24
 800d18a:	2203      	movs	r2, #3
 800d18c:	7839      	ldrb	r1, [r7, #0]
 800d18e:	4837      	ldr	r0, [pc, #220]	; (800d26c <_vfiprintf_r+0x264>)
 800d190:	f7fb ff5e 	bl	8009050 <memchr>
 800d194:	2800      	cmp	r0, #0
 800d196:	d007      	beq.n	800d1a8 <_vfiprintf_r+0x1a0>
 800d198:	4b34      	ldr	r3, [pc, #208]	; (800d26c <_vfiprintf_r+0x264>)
 800d19a:	682a      	ldr	r2, [r5, #0]
 800d19c:	1ac0      	subs	r0, r0, r3
 800d19e:	2340      	movs	r3, #64	; 0x40
 800d1a0:	4083      	lsls	r3, r0
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	3701      	adds	r7, #1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	7839      	ldrb	r1, [r7, #0]
 800d1aa:	1c7b      	adds	r3, r7, #1
 800d1ac:	2206      	movs	r2, #6
 800d1ae:	4830      	ldr	r0, [pc, #192]	; (800d270 <_vfiprintf_r+0x268>)
 800d1b0:	9303      	str	r3, [sp, #12]
 800d1b2:	7629      	strb	r1, [r5, #24]
 800d1b4:	f7fb ff4c 	bl	8009050 <memchr>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d045      	beq.n	800d248 <_vfiprintf_r+0x240>
 800d1bc:	4b2d      	ldr	r3, [pc, #180]	; (800d274 <_vfiprintf_r+0x26c>)
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d127      	bne.n	800d212 <_vfiprintf_r+0x20a>
 800d1c2:	2207      	movs	r2, #7
 800d1c4:	9b07      	ldr	r3, [sp, #28]
 800d1c6:	3307      	adds	r3, #7
 800d1c8:	4393      	bics	r3, r2
 800d1ca:	3308      	adds	r3, #8
 800d1cc:	9307      	str	r3, [sp, #28]
 800d1ce:	696b      	ldr	r3, [r5, #20]
 800d1d0:	9a04      	ldr	r2, [sp, #16]
 800d1d2:	189b      	adds	r3, r3, r2
 800d1d4:	616b      	str	r3, [r5, #20]
 800d1d6:	e75d      	b.n	800d094 <_vfiprintf_r+0x8c>
 800d1d8:	210a      	movs	r1, #10
 800d1da:	434b      	muls	r3, r1
 800d1dc:	4667      	mov	r7, ip
 800d1de:	189b      	adds	r3, r3, r2
 800d1e0:	3909      	subs	r1, #9
 800d1e2:	e7a3      	b.n	800d12c <_vfiprintf_r+0x124>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	425b      	negs	r3, r3
 800d1e8:	e7ce      	b.n	800d188 <_vfiprintf_r+0x180>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	001a      	movs	r2, r3
 800d1ee:	3701      	adds	r7, #1
 800d1f0:	606b      	str	r3, [r5, #4]
 800d1f2:	7839      	ldrb	r1, [r7, #0]
 800d1f4:	1c78      	adds	r0, r7, #1
 800d1f6:	3930      	subs	r1, #48	; 0x30
 800d1f8:	4684      	mov	ip, r0
 800d1fa:	2909      	cmp	r1, #9
 800d1fc:	d903      	bls.n	800d206 <_vfiprintf_r+0x1fe>
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0c3      	beq.n	800d18a <_vfiprintf_r+0x182>
 800d202:	9209      	str	r2, [sp, #36]	; 0x24
 800d204:	e7c1      	b.n	800d18a <_vfiprintf_r+0x182>
 800d206:	230a      	movs	r3, #10
 800d208:	435a      	muls	r2, r3
 800d20a:	4667      	mov	r7, ip
 800d20c:	1852      	adds	r2, r2, r1
 800d20e:	3b09      	subs	r3, #9
 800d210:	e7ef      	b.n	800d1f2 <_vfiprintf_r+0x1ea>
 800d212:	ab07      	add	r3, sp, #28
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	0022      	movs	r2, r4
 800d218:	0029      	movs	r1, r5
 800d21a:	0030      	movs	r0, r6
 800d21c:	4b16      	ldr	r3, [pc, #88]	; (800d278 <_vfiprintf_r+0x270>)
 800d21e:	f7fc f8a7 	bl	8009370 <_printf_float>
 800d222:	9004      	str	r0, [sp, #16]
 800d224:	9b04      	ldr	r3, [sp, #16]
 800d226:	3301      	adds	r3, #1
 800d228:	d1d1      	bne.n	800d1ce <_vfiprintf_r+0x1c6>
 800d22a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d22c:	07db      	lsls	r3, r3, #31
 800d22e:	d405      	bmi.n	800d23c <_vfiprintf_r+0x234>
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	059b      	lsls	r3, r3, #22
 800d234:	d402      	bmi.n	800d23c <_vfiprintf_r+0x234>
 800d236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d238:	f7ff fe98 	bl	800cf6c <__retarget_lock_release_recursive>
 800d23c:	89a3      	ldrh	r3, [r4, #12]
 800d23e:	065b      	lsls	r3, r3, #25
 800d240:	d500      	bpl.n	800d244 <_vfiprintf_r+0x23c>
 800d242:	e70a      	b.n	800d05a <_vfiprintf_r+0x52>
 800d244:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d246:	e70a      	b.n	800d05e <_vfiprintf_r+0x56>
 800d248:	ab07      	add	r3, sp, #28
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	0022      	movs	r2, r4
 800d24e:	0029      	movs	r1, r5
 800d250:	0030      	movs	r0, r6
 800d252:	4b09      	ldr	r3, [pc, #36]	; (800d278 <_vfiprintf_r+0x270>)
 800d254:	f7fc fb4a 	bl	80098ec <_printf_i>
 800d258:	e7e3      	b.n	800d222 <_vfiprintf_r+0x21a>
 800d25a:	46c0      	nop			; (mov r8, r8)
 800d25c:	0800e0e4 	.word	0x0800e0e4
 800d260:	0800e104 	.word	0x0800e104
 800d264:	0800e0c4 	.word	0x0800e0c4
 800d268:	0800e074 	.word	0x0800e074
 800d26c:	0800e07a 	.word	0x0800e07a
 800d270:	0800e07e 	.word	0x0800e07e
 800d274:	08009371 	.word	0x08009371
 800d278:	0800cfe5 	.word	0x0800cfe5

0800d27c <__swbuf_r>:
 800d27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27e:	0005      	movs	r5, r0
 800d280:	000e      	movs	r6, r1
 800d282:	0014      	movs	r4, r2
 800d284:	2800      	cmp	r0, #0
 800d286:	d004      	beq.n	800d292 <__swbuf_r+0x16>
 800d288:	6983      	ldr	r3, [r0, #24]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <__swbuf_r+0x16>
 800d28e:	f000 f9f1 	bl	800d674 <__sinit>
 800d292:	4b22      	ldr	r3, [pc, #136]	; (800d31c <__swbuf_r+0xa0>)
 800d294:	429c      	cmp	r4, r3
 800d296:	d12e      	bne.n	800d2f6 <__swbuf_r+0x7a>
 800d298:	686c      	ldr	r4, [r5, #4]
 800d29a:	69a3      	ldr	r3, [r4, #24]
 800d29c:	60a3      	str	r3, [r4, #8]
 800d29e:	89a3      	ldrh	r3, [r4, #12]
 800d2a0:	071b      	lsls	r3, r3, #28
 800d2a2:	d532      	bpl.n	800d30a <__swbuf_r+0x8e>
 800d2a4:	6923      	ldr	r3, [r4, #16]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d02f      	beq.n	800d30a <__swbuf_r+0x8e>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	6922      	ldr	r2, [r4, #16]
 800d2ae:	b2f7      	uxtb	r7, r6
 800d2b0:	1a98      	subs	r0, r3, r2
 800d2b2:	6963      	ldr	r3, [r4, #20]
 800d2b4:	b2f6      	uxtb	r6, r6
 800d2b6:	4283      	cmp	r3, r0
 800d2b8:	dc05      	bgt.n	800d2c6 <__swbuf_r+0x4a>
 800d2ba:	0021      	movs	r1, r4
 800d2bc:	0028      	movs	r0, r5
 800d2be:	f000 f937 	bl	800d530 <_fflush_r>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d127      	bne.n	800d316 <__swbuf_r+0x9a>
 800d2c6:	68a3      	ldr	r3, [r4, #8]
 800d2c8:	3001      	adds	r0, #1
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	60a3      	str	r3, [r4, #8]
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	1c5a      	adds	r2, r3, #1
 800d2d2:	6022      	str	r2, [r4, #0]
 800d2d4:	701f      	strb	r7, [r3, #0]
 800d2d6:	6963      	ldr	r3, [r4, #20]
 800d2d8:	4283      	cmp	r3, r0
 800d2da:	d004      	beq.n	800d2e6 <__swbuf_r+0x6a>
 800d2dc:	89a3      	ldrh	r3, [r4, #12]
 800d2de:	07db      	lsls	r3, r3, #31
 800d2e0:	d507      	bpl.n	800d2f2 <__swbuf_r+0x76>
 800d2e2:	2e0a      	cmp	r6, #10
 800d2e4:	d105      	bne.n	800d2f2 <__swbuf_r+0x76>
 800d2e6:	0021      	movs	r1, r4
 800d2e8:	0028      	movs	r0, r5
 800d2ea:	f000 f921 	bl	800d530 <_fflush_r>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d111      	bne.n	800d316 <__swbuf_r+0x9a>
 800d2f2:	0030      	movs	r0, r6
 800d2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2f6:	4b0a      	ldr	r3, [pc, #40]	; (800d320 <__swbuf_r+0xa4>)
 800d2f8:	429c      	cmp	r4, r3
 800d2fa:	d101      	bne.n	800d300 <__swbuf_r+0x84>
 800d2fc:	68ac      	ldr	r4, [r5, #8]
 800d2fe:	e7cc      	b.n	800d29a <__swbuf_r+0x1e>
 800d300:	4b08      	ldr	r3, [pc, #32]	; (800d324 <__swbuf_r+0xa8>)
 800d302:	429c      	cmp	r4, r3
 800d304:	d1c9      	bne.n	800d29a <__swbuf_r+0x1e>
 800d306:	68ec      	ldr	r4, [r5, #12]
 800d308:	e7c7      	b.n	800d29a <__swbuf_r+0x1e>
 800d30a:	0021      	movs	r1, r4
 800d30c:	0028      	movs	r0, r5
 800d30e:	f000 f80b 	bl	800d328 <__swsetup_r>
 800d312:	2800      	cmp	r0, #0
 800d314:	d0c9      	beq.n	800d2aa <__swbuf_r+0x2e>
 800d316:	2601      	movs	r6, #1
 800d318:	4276      	negs	r6, r6
 800d31a:	e7ea      	b.n	800d2f2 <__swbuf_r+0x76>
 800d31c:	0800e0e4 	.word	0x0800e0e4
 800d320:	0800e104 	.word	0x0800e104
 800d324:	0800e0c4 	.word	0x0800e0c4

0800d328 <__swsetup_r>:
 800d328:	4b37      	ldr	r3, [pc, #220]	; (800d408 <__swsetup_r+0xe0>)
 800d32a:	b570      	push	{r4, r5, r6, lr}
 800d32c:	681d      	ldr	r5, [r3, #0]
 800d32e:	0006      	movs	r6, r0
 800d330:	000c      	movs	r4, r1
 800d332:	2d00      	cmp	r5, #0
 800d334:	d005      	beq.n	800d342 <__swsetup_r+0x1a>
 800d336:	69ab      	ldr	r3, [r5, #24]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <__swsetup_r+0x1a>
 800d33c:	0028      	movs	r0, r5
 800d33e:	f000 f999 	bl	800d674 <__sinit>
 800d342:	4b32      	ldr	r3, [pc, #200]	; (800d40c <__swsetup_r+0xe4>)
 800d344:	429c      	cmp	r4, r3
 800d346:	d10f      	bne.n	800d368 <__swsetup_r+0x40>
 800d348:	686c      	ldr	r4, [r5, #4]
 800d34a:	230c      	movs	r3, #12
 800d34c:	5ee2      	ldrsh	r2, [r4, r3]
 800d34e:	b293      	uxth	r3, r2
 800d350:	0711      	lsls	r1, r2, #28
 800d352:	d42d      	bmi.n	800d3b0 <__swsetup_r+0x88>
 800d354:	06d9      	lsls	r1, r3, #27
 800d356:	d411      	bmi.n	800d37c <__swsetup_r+0x54>
 800d358:	2309      	movs	r3, #9
 800d35a:	2001      	movs	r0, #1
 800d35c:	6033      	str	r3, [r6, #0]
 800d35e:	3337      	adds	r3, #55	; 0x37
 800d360:	4313      	orrs	r3, r2
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	4240      	negs	r0, r0
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	4b29      	ldr	r3, [pc, #164]	; (800d410 <__swsetup_r+0xe8>)
 800d36a:	429c      	cmp	r4, r3
 800d36c:	d101      	bne.n	800d372 <__swsetup_r+0x4a>
 800d36e:	68ac      	ldr	r4, [r5, #8]
 800d370:	e7eb      	b.n	800d34a <__swsetup_r+0x22>
 800d372:	4b28      	ldr	r3, [pc, #160]	; (800d414 <__swsetup_r+0xec>)
 800d374:	429c      	cmp	r4, r3
 800d376:	d1e8      	bne.n	800d34a <__swsetup_r+0x22>
 800d378:	68ec      	ldr	r4, [r5, #12]
 800d37a:	e7e6      	b.n	800d34a <__swsetup_r+0x22>
 800d37c:	075b      	lsls	r3, r3, #29
 800d37e:	d513      	bpl.n	800d3a8 <__swsetup_r+0x80>
 800d380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d382:	2900      	cmp	r1, #0
 800d384:	d008      	beq.n	800d398 <__swsetup_r+0x70>
 800d386:	0023      	movs	r3, r4
 800d388:	3344      	adds	r3, #68	; 0x44
 800d38a:	4299      	cmp	r1, r3
 800d38c:	d002      	beq.n	800d394 <__swsetup_r+0x6c>
 800d38e:	0030      	movs	r0, r6
 800d390:	f7fb fe9c 	bl	80090cc <_free_r>
 800d394:	2300      	movs	r3, #0
 800d396:	6363      	str	r3, [r4, #52]	; 0x34
 800d398:	2224      	movs	r2, #36	; 0x24
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	4393      	bics	r3, r2
 800d39e:	81a3      	strh	r3, [r4, #12]
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	6063      	str	r3, [r4, #4]
 800d3a4:	6923      	ldr	r3, [r4, #16]
 800d3a6:	6023      	str	r3, [r4, #0]
 800d3a8:	2308      	movs	r3, #8
 800d3aa:	89a2      	ldrh	r2, [r4, #12]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	81a3      	strh	r3, [r4, #12]
 800d3b0:	6923      	ldr	r3, [r4, #16]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10b      	bne.n	800d3ce <__swsetup_r+0xa6>
 800d3b6:	21a0      	movs	r1, #160	; 0xa0
 800d3b8:	2280      	movs	r2, #128	; 0x80
 800d3ba:	89a3      	ldrh	r3, [r4, #12]
 800d3bc:	0089      	lsls	r1, r1, #2
 800d3be:	0092      	lsls	r2, r2, #2
 800d3c0:	400b      	ands	r3, r1
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d003      	beq.n	800d3ce <__swsetup_r+0xa6>
 800d3c6:	0021      	movs	r1, r4
 800d3c8:	0030      	movs	r0, r6
 800d3ca:	f000 fa1b 	bl	800d804 <__smakebuf_r>
 800d3ce:	220c      	movs	r2, #12
 800d3d0:	5ea3      	ldrsh	r3, [r4, r2]
 800d3d2:	2001      	movs	r0, #1
 800d3d4:	001a      	movs	r2, r3
 800d3d6:	b299      	uxth	r1, r3
 800d3d8:	4002      	ands	r2, r0
 800d3da:	4203      	tst	r3, r0
 800d3dc:	d00f      	beq.n	800d3fe <__swsetup_r+0xd6>
 800d3de:	2200      	movs	r2, #0
 800d3e0:	60a2      	str	r2, [r4, #8]
 800d3e2:	6962      	ldr	r2, [r4, #20]
 800d3e4:	4252      	negs	r2, r2
 800d3e6:	61a2      	str	r2, [r4, #24]
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	6922      	ldr	r2, [r4, #16]
 800d3ec:	4282      	cmp	r2, r0
 800d3ee:	d1ba      	bne.n	800d366 <__swsetup_r+0x3e>
 800d3f0:	060a      	lsls	r2, r1, #24
 800d3f2:	d5b8      	bpl.n	800d366 <__swsetup_r+0x3e>
 800d3f4:	2240      	movs	r2, #64	; 0x40
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	3801      	subs	r0, #1
 800d3fc:	e7b3      	b.n	800d366 <__swsetup_r+0x3e>
 800d3fe:	0788      	lsls	r0, r1, #30
 800d400:	d400      	bmi.n	800d404 <__swsetup_r+0xdc>
 800d402:	6962      	ldr	r2, [r4, #20]
 800d404:	60a2      	str	r2, [r4, #8]
 800d406:	e7ef      	b.n	800d3e8 <__swsetup_r+0xc0>
 800d408:	20000008 	.word	0x20000008
 800d40c:	0800e0e4 	.word	0x0800e0e4
 800d410:	0800e104 	.word	0x0800e104
 800d414:	0800e0c4 	.word	0x0800e0c4

0800d418 <__sflush_r>:
 800d418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d41a:	898b      	ldrh	r3, [r1, #12]
 800d41c:	0005      	movs	r5, r0
 800d41e:	000c      	movs	r4, r1
 800d420:	071a      	lsls	r2, r3, #28
 800d422:	d45f      	bmi.n	800d4e4 <__sflush_r+0xcc>
 800d424:	684a      	ldr	r2, [r1, #4]
 800d426:	2a00      	cmp	r2, #0
 800d428:	dc04      	bgt.n	800d434 <__sflush_r+0x1c>
 800d42a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d42c:	2a00      	cmp	r2, #0
 800d42e:	dc01      	bgt.n	800d434 <__sflush_r+0x1c>
 800d430:	2000      	movs	r0, #0
 800d432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d434:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d436:	2f00      	cmp	r7, #0
 800d438:	d0fa      	beq.n	800d430 <__sflush_r+0x18>
 800d43a:	2200      	movs	r2, #0
 800d43c:	2180      	movs	r1, #128	; 0x80
 800d43e:	682e      	ldr	r6, [r5, #0]
 800d440:	602a      	str	r2, [r5, #0]
 800d442:	001a      	movs	r2, r3
 800d444:	0149      	lsls	r1, r1, #5
 800d446:	400a      	ands	r2, r1
 800d448:	420b      	tst	r3, r1
 800d44a:	d034      	beq.n	800d4b6 <__sflush_r+0x9e>
 800d44c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d44e:	89a3      	ldrh	r3, [r4, #12]
 800d450:	075b      	lsls	r3, r3, #29
 800d452:	d506      	bpl.n	800d462 <__sflush_r+0x4a>
 800d454:	6863      	ldr	r3, [r4, #4]
 800d456:	1ac0      	subs	r0, r0, r3
 800d458:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <__sflush_r+0x4a>
 800d45e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d460:	1ac0      	subs	r0, r0, r3
 800d462:	0002      	movs	r2, r0
 800d464:	6a21      	ldr	r1, [r4, #32]
 800d466:	2300      	movs	r3, #0
 800d468:	0028      	movs	r0, r5
 800d46a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d46c:	47b8      	blx	r7
 800d46e:	89a1      	ldrh	r1, [r4, #12]
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	d106      	bne.n	800d482 <__sflush_r+0x6a>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	2b1d      	cmp	r3, #29
 800d478:	d831      	bhi.n	800d4de <__sflush_r+0xc6>
 800d47a:	4a2c      	ldr	r2, [pc, #176]	; (800d52c <__sflush_r+0x114>)
 800d47c:	40da      	lsrs	r2, r3
 800d47e:	07d3      	lsls	r3, r2, #31
 800d480:	d52d      	bpl.n	800d4de <__sflush_r+0xc6>
 800d482:	2300      	movs	r3, #0
 800d484:	6063      	str	r3, [r4, #4]
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	6023      	str	r3, [r4, #0]
 800d48a:	04cb      	lsls	r3, r1, #19
 800d48c:	d505      	bpl.n	800d49a <__sflush_r+0x82>
 800d48e:	1c43      	adds	r3, r0, #1
 800d490:	d102      	bne.n	800d498 <__sflush_r+0x80>
 800d492:	682b      	ldr	r3, [r5, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d100      	bne.n	800d49a <__sflush_r+0x82>
 800d498:	6560      	str	r0, [r4, #84]	; 0x54
 800d49a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d49c:	602e      	str	r6, [r5, #0]
 800d49e:	2900      	cmp	r1, #0
 800d4a0:	d0c6      	beq.n	800d430 <__sflush_r+0x18>
 800d4a2:	0023      	movs	r3, r4
 800d4a4:	3344      	adds	r3, #68	; 0x44
 800d4a6:	4299      	cmp	r1, r3
 800d4a8:	d002      	beq.n	800d4b0 <__sflush_r+0x98>
 800d4aa:	0028      	movs	r0, r5
 800d4ac:	f7fb fe0e 	bl	80090cc <_free_r>
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	6360      	str	r0, [r4, #52]	; 0x34
 800d4b4:	e7bd      	b.n	800d432 <__sflush_r+0x1a>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	0028      	movs	r0, r5
 800d4ba:	6a21      	ldr	r1, [r4, #32]
 800d4bc:	47b8      	blx	r7
 800d4be:	1c43      	adds	r3, r0, #1
 800d4c0:	d1c5      	bne.n	800d44e <__sflush_r+0x36>
 800d4c2:	682b      	ldr	r3, [r5, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d0c2      	beq.n	800d44e <__sflush_r+0x36>
 800d4c8:	2b1d      	cmp	r3, #29
 800d4ca:	d001      	beq.n	800d4d0 <__sflush_r+0xb8>
 800d4cc:	2b16      	cmp	r3, #22
 800d4ce:	d101      	bne.n	800d4d4 <__sflush_r+0xbc>
 800d4d0:	602e      	str	r6, [r5, #0]
 800d4d2:	e7ad      	b.n	800d430 <__sflush_r+0x18>
 800d4d4:	2340      	movs	r3, #64	; 0x40
 800d4d6:	89a2      	ldrh	r2, [r4, #12]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	81a3      	strh	r3, [r4, #12]
 800d4dc:	e7a9      	b.n	800d432 <__sflush_r+0x1a>
 800d4de:	2340      	movs	r3, #64	; 0x40
 800d4e0:	430b      	orrs	r3, r1
 800d4e2:	e7fa      	b.n	800d4da <__sflush_r+0xc2>
 800d4e4:	690f      	ldr	r7, [r1, #16]
 800d4e6:	2f00      	cmp	r7, #0
 800d4e8:	d0a2      	beq.n	800d430 <__sflush_r+0x18>
 800d4ea:	680a      	ldr	r2, [r1, #0]
 800d4ec:	600f      	str	r7, [r1, #0]
 800d4ee:	1bd2      	subs	r2, r2, r7
 800d4f0:	9201      	str	r2, [sp, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	079b      	lsls	r3, r3, #30
 800d4f6:	d100      	bne.n	800d4fa <__sflush_r+0xe2>
 800d4f8:	694a      	ldr	r2, [r1, #20]
 800d4fa:	60a2      	str	r2, [r4, #8]
 800d4fc:	9b01      	ldr	r3, [sp, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	dc00      	bgt.n	800d504 <__sflush_r+0xec>
 800d502:	e795      	b.n	800d430 <__sflush_r+0x18>
 800d504:	003a      	movs	r2, r7
 800d506:	0028      	movs	r0, r5
 800d508:	9b01      	ldr	r3, [sp, #4]
 800d50a:	6a21      	ldr	r1, [r4, #32]
 800d50c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d50e:	47b0      	blx	r6
 800d510:	2800      	cmp	r0, #0
 800d512:	dc06      	bgt.n	800d522 <__sflush_r+0x10a>
 800d514:	2340      	movs	r3, #64	; 0x40
 800d516:	2001      	movs	r0, #1
 800d518:	89a2      	ldrh	r2, [r4, #12]
 800d51a:	4240      	negs	r0, r0
 800d51c:	4313      	orrs	r3, r2
 800d51e:	81a3      	strh	r3, [r4, #12]
 800d520:	e787      	b.n	800d432 <__sflush_r+0x1a>
 800d522:	9b01      	ldr	r3, [sp, #4]
 800d524:	183f      	adds	r7, r7, r0
 800d526:	1a1b      	subs	r3, r3, r0
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	e7e7      	b.n	800d4fc <__sflush_r+0xe4>
 800d52c:	20400001 	.word	0x20400001

0800d530 <_fflush_r>:
 800d530:	690b      	ldr	r3, [r1, #16]
 800d532:	b570      	push	{r4, r5, r6, lr}
 800d534:	0005      	movs	r5, r0
 800d536:	000c      	movs	r4, r1
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d102      	bne.n	800d542 <_fflush_r+0x12>
 800d53c:	2500      	movs	r5, #0
 800d53e:	0028      	movs	r0, r5
 800d540:	bd70      	pop	{r4, r5, r6, pc}
 800d542:	2800      	cmp	r0, #0
 800d544:	d004      	beq.n	800d550 <_fflush_r+0x20>
 800d546:	6983      	ldr	r3, [r0, #24]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d101      	bne.n	800d550 <_fflush_r+0x20>
 800d54c:	f000 f892 	bl	800d674 <__sinit>
 800d550:	4b14      	ldr	r3, [pc, #80]	; (800d5a4 <_fflush_r+0x74>)
 800d552:	429c      	cmp	r4, r3
 800d554:	d11b      	bne.n	800d58e <_fflush_r+0x5e>
 800d556:	686c      	ldr	r4, [r5, #4]
 800d558:	220c      	movs	r2, #12
 800d55a:	5ea3      	ldrsh	r3, [r4, r2]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d0ed      	beq.n	800d53c <_fflush_r+0xc>
 800d560:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d562:	07d2      	lsls	r2, r2, #31
 800d564:	d404      	bmi.n	800d570 <_fflush_r+0x40>
 800d566:	059b      	lsls	r3, r3, #22
 800d568:	d402      	bmi.n	800d570 <_fflush_r+0x40>
 800d56a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d56c:	f7ff fcfd 	bl	800cf6a <__retarget_lock_acquire_recursive>
 800d570:	0028      	movs	r0, r5
 800d572:	0021      	movs	r1, r4
 800d574:	f7ff ff50 	bl	800d418 <__sflush_r>
 800d578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d57a:	0005      	movs	r5, r0
 800d57c:	07db      	lsls	r3, r3, #31
 800d57e:	d4de      	bmi.n	800d53e <_fflush_r+0xe>
 800d580:	89a3      	ldrh	r3, [r4, #12]
 800d582:	059b      	lsls	r3, r3, #22
 800d584:	d4db      	bmi.n	800d53e <_fflush_r+0xe>
 800d586:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d588:	f7ff fcf0 	bl	800cf6c <__retarget_lock_release_recursive>
 800d58c:	e7d7      	b.n	800d53e <_fflush_r+0xe>
 800d58e:	4b06      	ldr	r3, [pc, #24]	; (800d5a8 <_fflush_r+0x78>)
 800d590:	429c      	cmp	r4, r3
 800d592:	d101      	bne.n	800d598 <_fflush_r+0x68>
 800d594:	68ac      	ldr	r4, [r5, #8]
 800d596:	e7df      	b.n	800d558 <_fflush_r+0x28>
 800d598:	4b04      	ldr	r3, [pc, #16]	; (800d5ac <_fflush_r+0x7c>)
 800d59a:	429c      	cmp	r4, r3
 800d59c:	d1dc      	bne.n	800d558 <_fflush_r+0x28>
 800d59e:	68ec      	ldr	r4, [r5, #12]
 800d5a0:	e7da      	b.n	800d558 <_fflush_r+0x28>
 800d5a2:	46c0      	nop			; (mov r8, r8)
 800d5a4:	0800e0e4 	.word	0x0800e0e4
 800d5a8:	0800e104 	.word	0x0800e104
 800d5ac:	0800e0c4 	.word	0x0800e0c4

0800d5b0 <std>:
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	b510      	push	{r4, lr}
 800d5b4:	0004      	movs	r4, r0
 800d5b6:	6003      	str	r3, [r0, #0]
 800d5b8:	6043      	str	r3, [r0, #4]
 800d5ba:	6083      	str	r3, [r0, #8]
 800d5bc:	8181      	strh	r1, [r0, #12]
 800d5be:	6643      	str	r3, [r0, #100]	; 0x64
 800d5c0:	0019      	movs	r1, r3
 800d5c2:	81c2      	strh	r2, [r0, #14]
 800d5c4:	6103      	str	r3, [r0, #16]
 800d5c6:	6143      	str	r3, [r0, #20]
 800d5c8:	6183      	str	r3, [r0, #24]
 800d5ca:	2208      	movs	r2, #8
 800d5cc:	305c      	adds	r0, #92	; 0x5c
 800d5ce:	f7fb fd74 	bl	80090ba <memset>
 800d5d2:	4b05      	ldr	r3, [pc, #20]	; (800d5e8 <std+0x38>)
 800d5d4:	6263      	str	r3, [r4, #36]	; 0x24
 800d5d6:	4b05      	ldr	r3, [pc, #20]	; (800d5ec <std+0x3c>)
 800d5d8:	6224      	str	r4, [r4, #32]
 800d5da:	62a3      	str	r3, [r4, #40]	; 0x28
 800d5dc:	4b04      	ldr	r3, [pc, #16]	; (800d5f0 <std+0x40>)
 800d5de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d5e0:	4b04      	ldr	r3, [pc, #16]	; (800d5f4 <std+0x44>)
 800d5e2:	6323      	str	r3, [r4, #48]	; 0x30
 800d5e4:	bd10      	pop	{r4, pc}
 800d5e6:	46c0      	nop			; (mov r8, r8)
 800d5e8:	0800d89d 	.word	0x0800d89d
 800d5ec:	0800d8c5 	.word	0x0800d8c5
 800d5f0:	0800d8fd 	.word	0x0800d8fd
 800d5f4:	0800d929 	.word	0x0800d929

0800d5f8 <_cleanup_r>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	4902      	ldr	r1, [pc, #8]	; (800d604 <_cleanup_r+0xc>)
 800d5fc:	f000 f8ba 	bl	800d774 <_fwalk_reent>
 800d600:	bd10      	pop	{r4, pc}
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	0800d531 	.word	0x0800d531

0800d608 <__sfmoreglue>:
 800d608:	b570      	push	{r4, r5, r6, lr}
 800d60a:	2568      	movs	r5, #104	; 0x68
 800d60c:	1e4a      	subs	r2, r1, #1
 800d60e:	4355      	muls	r5, r2
 800d610:	000e      	movs	r6, r1
 800d612:	0029      	movs	r1, r5
 800d614:	3174      	adds	r1, #116	; 0x74
 800d616:	f7fb fda3 	bl	8009160 <_malloc_r>
 800d61a:	1e04      	subs	r4, r0, #0
 800d61c:	d008      	beq.n	800d630 <__sfmoreglue+0x28>
 800d61e:	2100      	movs	r1, #0
 800d620:	002a      	movs	r2, r5
 800d622:	6001      	str	r1, [r0, #0]
 800d624:	6046      	str	r6, [r0, #4]
 800d626:	300c      	adds	r0, #12
 800d628:	60a0      	str	r0, [r4, #8]
 800d62a:	3268      	adds	r2, #104	; 0x68
 800d62c:	f7fb fd45 	bl	80090ba <memset>
 800d630:	0020      	movs	r0, r4
 800d632:	bd70      	pop	{r4, r5, r6, pc}

0800d634 <__sfp_lock_acquire>:
 800d634:	b510      	push	{r4, lr}
 800d636:	4802      	ldr	r0, [pc, #8]	; (800d640 <__sfp_lock_acquire+0xc>)
 800d638:	f7ff fc97 	bl	800cf6a <__retarget_lock_acquire_recursive>
 800d63c:	bd10      	pop	{r4, pc}
 800d63e:	46c0      	nop			; (mov r8, r8)
 800d640:	200004c0 	.word	0x200004c0

0800d644 <__sfp_lock_release>:
 800d644:	b510      	push	{r4, lr}
 800d646:	4802      	ldr	r0, [pc, #8]	; (800d650 <__sfp_lock_release+0xc>)
 800d648:	f7ff fc90 	bl	800cf6c <__retarget_lock_release_recursive>
 800d64c:	bd10      	pop	{r4, pc}
 800d64e:	46c0      	nop			; (mov r8, r8)
 800d650:	200004c0 	.word	0x200004c0

0800d654 <__sinit_lock_acquire>:
 800d654:	b510      	push	{r4, lr}
 800d656:	4802      	ldr	r0, [pc, #8]	; (800d660 <__sinit_lock_acquire+0xc>)
 800d658:	f7ff fc87 	bl	800cf6a <__retarget_lock_acquire_recursive>
 800d65c:	bd10      	pop	{r4, pc}
 800d65e:	46c0      	nop			; (mov r8, r8)
 800d660:	200004bb 	.word	0x200004bb

0800d664 <__sinit_lock_release>:
 800d664:	b510      	push	{r4, lr}
 800d666:	4802      	ldr	r0, [pc, #8]	; (800d670 <__sinit_lock_release+0xc>)
 800d668:	f7ff fc80 	bl	800cf6c <__retarget_lock_release_recursive>
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	46c0      	nop			; (mov r8, r8)
 800d670:	200004bb 	.word	0x200004bb

0800d674 <__sinit>:
 800d674:	b513      	push	{r0, r1, r4, lr}
 800d676:	0004      	movs	r4, r0
 800d678:	f7ff ffec 	bl	800d654 <__sinit_lock_acquire>
 800d67c:	69a3      	ldr	r3, [r4, #24]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <__sinit+0x14>
 800d682:	f7ff ffef 	bl	800d664 <__sinit_lock_release>
 800d686:	bd13      	pop	{r0, r1, r4, pc}
 800d688:	64a3      	str	r3, [r4, #72]	; 0x48
 800d68a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d68c:	6523      	str	r3, [r4, #80]	; 0x50
 800d68e:	4b13      	ldr	r3, [pc, #76]	; (800d6dc <__sinit+0x68>)
 800d690:	4a13      	ldr	r2, [pc, #76]	; (800d6e0 <__sinit+0x6c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	62a2      	str	r2, [r4, #40]	; 0x28
 800d696:	9301      	str	r3, [sp, #4]
 800d698:	42a3      	cmp	r3, r4
 800d69a:	d101      	bne.n	800d6a0 <__sinit+0x2c>
 800d69c:	2301      	movs	r3, #1
 800d69e:	61a3      	str	r3, [r4, #24]
 800d6a0:	0020      	movs	r0, r4
 800d6a2:	f000 f81f 	bl	800d6e4 <__sfp>
 800d6a6:	6060      	str	r0, [r4, #4]
 800d6a8:	0020      	movs	r0, r4
 800d6aa:	f000 f81b 	bl	800d6e4 <__sfp>
 800d6ae:	60a0      	str	r0, [r4, #8]
 800d6b0:	0020      	movs	r0, r4
 800d6b2:	f000 f817 	bl	800d6e4 <__sfp>
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2104      	movs	r1, #4
 800d6ba:	60e0      	str	r0, [r4, #12]
 800d6bc:	6860      	ldr	r0, [r4, #4]
 800d6be:	f7ff ff77 	bl	800d5b0 <std>
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	2109      	movs	r1, #9
 800d6c6:	68a0      	ldr	r0, [r4, #8]
 800d6c8:	f7ff ff72 	bl	800d5b0 <std>
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	2112      	movs	r1, #18
 800d6d0:	68e0      	ldr	r0, [r4, #12]
 800d6d2:	f7ff ff6d 	bl	800d5b0 <std>
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	61a3      	str	r3, [r4, #24]
 800d6da:	e7d2      	b.n	800d682 <__sinit+0xe>
 800d6dc:	0800dc6c 	.word	0x0800dc6c
 800d6e0:	0800d5f9 	.word	0x0800d5f9

0800d6e4 <__sfp>:
 800d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e6:	0007      	movs	r7, r0
 800d6e8:	f7ff ffa4 	bl	800d634 <__sfp_lock_acquire>
 800d6ec:	4b1f      	ldr	r3, [pc, #124]	; (800d76c <__sfp+0x88>)
 800d6ee:	681e      	ldr	r6, [r3, #0]
 800d6f0:	69b3      	ldr	r3, [r6, #24]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d102      	bne.n	800d6fc <__sfp+0x18>
 800d6f6:	0030      	movs	r0, r6
 800d6f8:	f7ff ffbc 	bl	800d674 <__sinit>
 800d6fc:	3648      	adds	r6, #72	; 0x48
 800d6fe:	68b4      	ldr	r4, [r6, #8]
 800d700:	6873      	ldr	r3, [r6, #4]
 800d702:	3b01      	subs	r3, #1
 800d704:	d504      	bpl.n	800d710 <__sfp+0x2c>
 800d706:	6833      	ldr	r3, [r6, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d022      	beq.n	800d752 <__sfp+0x6e>
 800d70c:	6836      	ldr	r6, [r6, #0]
 800d70e:	e7f6      	b.n	800d6fe <__sfp+0x1a>
 800d710:	220c      	movs	r2, #12
 800d712:	5ea5      	ldrsh	r5, [r4, r2]
 800d714:	2d00      	cmp	r5, #0
 800d716:	d11a      	bne.n	800d74e <__sfp+0x6a>
 800d718:	0020      	movs	r0, r4
 800d71a:	4b15      	ldr	r3, [pc, #84]	; (800d770 <__sfp+0x8c>)
 800d71c:	3058      	adds	r0, #88	; 0x58
 800d71e:	60e3      	str	r3, [r4, #12]
 800d720:	6665      	str	r5, [r4, #100]	; 0x64
 800d722:	f7ff fc21 	bl	800cf68 <__retarget_lock_init_recursive>
 800d726:	f7ff ff8d 	bl	800d644 <__sfp_lock_release>
 800d72a:	0020      	movs	r0, r4
 800d72c:	2208      	movs	r2, #8
 800d72e:	0029      	movs	r1, r5
 800d730:	6025      	str	r5, [r4, #0]
 800d732:	60a5      	str	r5, [r4, #8]
 800d734:	6065      	str	r5, [r4, #4]
 800d736:	6125      	str	r5, [r4, #16]
 800d738:	6165      	str	r5, [r4, #20]
 800d73a:	61a5      	str	r5, [r4, #24]
 800d73c:	305c      	adds	r0, #92	; 0x5c
 800d73e:	f7fb fcbc 	bl	80090ba <memset>
 800d742:	6365      	str	r5, [r4, #52]	; 0x34
 800d744:	63a5      	str	r5, [r4, #56]	; 0x38
 800d746:	64a5      	str	r5, [r4, #72]	; 0x48
 800d748:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d74a:	0020      	movs	r0, r4
 800d74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d74e:	3468      	adds	r4, #104	; 0x68
 800d750:	e7d7      	b.n	800d702 <__sfp+0x1e>
 800d752:	2104      	movs	r1, #4
 800d754:	0038      	movs	r0, r7
 800d756:	f7ff ff57 	bl	800d608 <__sfmoreglue>
 800d75a:	1e04      	subs	r4, r0, #0
 800d75c:	6030      	str	r0, [r6, #0]
 800d75e:	d1d5      	bne.n	800d70c <__sfp+0x28>
 800d760:	f7ff ff70 	bl	800d644 <__sfp_lock_release>
 800d764:	230c      	movs	r3, #12
 800d766:	603b      	str	r3, [r7, #0]
 800d768:	e7ef      	b.n	800d74a <__sfp+0x66>
 800d76a:	46c0      	nop			; (mov r8, r8)
 800d76c:	0800dc6c 	.word	0x0800dc6c
 800d770:	ffff0001 	.word	0xffff0001

0800d774 <_fwalk_reent>:
 800d774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d776:	0004      	movs	r4, r0
 800d778:	0006      	movs	r6, r0
 800d77a:	2700      	movs	r7, #0
 800d77c:	9101      	str	r1, [sp, #4]
 800d77e:	3448      	adds	r4, #72	; 0x48
 800d780:	6863      	ldr	r3, [r4, #4]
 800d782:	68a5      	ldr	r5, [r4, #8]
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	9b00      	ldr	r3, [sp, #0]
 800d788:	3b01      	subs	r3, #1
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	d504      	bpl.n	800d798 <_fwalk_reent+0x24>
 800d78e:	6824      	ldr	r4, [r4, #0]
 800d790:	2c00      	cmp	r4, #0
 800d792:	d1f5      	bne.n	800d780 <_fwalk_reent+0xc>
 800d794:	0038      	movs	r0, r7
 800d796:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d798:	89ab      	ldrh	r3, [r5, #12]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d908      	bls.n	800d7b0 <_fwalk_reent+0x3c>
 800d79e:	220e      	movs	r2, #14
 800d7a0:	5eab      	ldrsh	r3, [r5, r2]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	d004      	beq.n	800d7b0 <_fwalk_reent+0x3c>
 800d7a6:	0029      	movs	r1, r5
 800d7a8:	0030      	movs	r0, r6
 800d7aa:	9b01      	ldr	r3, [sp, #4]
 800d7ac:	4798      	blx	r3
 800d7ae:	4307      	orrs	r7, r0
 800d7b0:	3568      	adds	r5, #104	; 0x68
 800d7b2:	e7e8      	b.n	800d786 <_fwalk_reent+0x12>

0800d7b4 <__swhatbuf_r>:
 800d7b4:	b570      	push	{r4, r5, r6, lr}
 800d7b6:	000e      	movs	r6, r1
 800d7b8:	001d      	movs	r5, r3
 800d7ba:	230e      	movs	r3, #14
 800d7bc:	5ec9      	ldrsh	r1, [r1, r3]
 800d7be:	0014      	movs	r4, r2
 800d7c0:	b096      	sub	sp, #88	; 0x58
 800d7c2:	2900      	cmp	r1, #0
 800d7c4:	da07      	bge.n	800d7d6 <__swhatbuf_r+0x22>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	602b      	str	r3, [r5, #0]
 800d7ca:	89b3      	ldrh	r3, [r6, #12]
 800d7cc:	061b      	lsls	r3, r3, #24
 800d7ce:	d411      	bmi.n	800d7f4 <__swhatbuf_r+0x40>
 800d7d0:	2380      	movs	r3, #128	; 0x80
 800d7d2:	00db      	lsls	r3, r3, #3
 800d7d4:	e00f      	b.n	800d7f6 <__swhatbuf_r+0x42>
 800d7d6:	466a      	mov	r2, sp
 800d7d8:	f000 f8d2 	bl	800d980 <_fstat_r>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	dbf2      	blt.n	800d7c6 <__swhatbuf_r+0x12>
 800d7e0:	23f0      	movs	r3, #240	; 0xf0
 800d7e2:	9901      	ldr	r1, [sp, #4]
 800d7e4:	021b      	lsls	r3, r3, #8
 800d7e6:	4019      	ands	r1, r3
 800d7e8:	4b05      	ldr	r3, [pc, #20]	; (800d800 <__swhatbuf_r+0x4c>)
 800d7ea:	18c9      	adds	r1, r1, r3
 800d7ec:	424b      	negs	r3, r1
 800d7ee:	4159      	adcs	r1, r3
 800d7f0:	6029      	str	r1, [r5, #0]
 800d7f2:	e7ed      	b.n	800d7d0 <__swhatbuf_r+0x1c>
 800d7f4:	2340      	movs	r3, #64	; 0x40
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	b016      	add	sp, #88	; 0x58
 800d7fc:	bd70      	pop	{r4, r5, r6, pc}
 800d7fe:	46c0      	nop			; (mov r8, r8)
 800d800:	ffffe000 	.word	0xffffe000

0800d804 <__smakebuf_r>:
 800d804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d806:	2602      	movs	r6, #2
 800d808:	898b      	ldrh	r3, [r1, #12]
 800d80a:	0005      	movs	r5, r0
 800d80c:	000c      	movs	r4, r1
 800d80e:	4233      	tst	r3, r6
 800d810:	d006      	beq.n	800d820 <__smakebuf_r+0x1c>
 800d812:	0023      	movs	r3, r4
 800d814:	3347      	adds	r3, #71	; 0x47
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	6123      	str	r3, [r4, #16]
 800d81a:	2301      	movs	r3, #1
 800d81c:	6163      	str	r3, [r4, #20]
 800d81e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d820:	466a      	mov	r2, sp
 800d822:	ab01      	add	r3, sp, #4
 800d824:	f7ff ffc6 	bl	800d7b4 <__swhatbuf_r>
 800d828:	9900      	ldr	r1, [sp, #0]
 800d82a:	0007      	movs	r7, r0
 800d82c:	0028      	movs	r0, r5
 800d82e:	f7fb fc97 	bl	8009160 <_malloc_r>
 800d832:	2800      	cmp	r0, #0
 800d834:	d108      	bne.n	800d848 <__smakebuf_r+0x44>
 800d836:	220c      	movs	r2, #12
 800d838:	5ea3      	ldrsh	r3, [r4, r2]
 800d83a:	059a      	lsls	r2, r3, #22
 800d83c:	d4ef      	bmi.n	800d81e <__smakebuf_r+0x1a>
 800d83e:	2203      	movs	r2, #3
 800d840:	4393      	bics	r3, r2
 800d842:	431e      	orrs	r6, r3
 800d844:	81a6      	strh	r6, [r4, #12]
 800d846:	e7e4      	b.n	800d812 <__smakebuf_r+0xe>
 800d848:	4b0f      	ldr	r3, [pc, #60]	; (800d888 <__smakebuf_r+0x84>)
 800d84a:	62ab      	str	r3, [r5, #40]	; 0x28
 800d84c:	2380      	movs	r3, #128	; 0x80
 800d84e:	89a2      	ldrh	r2, [r4, #12]
 800d850:	6020      	str	r0, [r4, #0]
 800d852:	4313      	orrs	r3, r2
 800d854:	81a3      	strh	r3, [r4, #12]
 800d856:	9b00      	ldr	r3, [sp, #0]
 800d858:	6120      	str	r0, [r4, #16]
 800d85a:	6163      	str	r3, [r4, #20]
 800d85c:	9b01      	ldr	r3, [sp, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00d      	beq.n	800d87e <__smakebuf_r+0x7a>
 800d862:	0028      	movs	r0, r5
 800d864:	230e      	movs	r3, #14
 800d866:	5ee1      	ldrsh	r1, [r4, r3]
 800d868:	f000 f89c 	bl	800d9a4 <_isatty_r>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d006      	beq.n	800d87e <__smakebuf_r+0x7a>
 800d870:	2203      	movs	r2, #3
 800d872:	89a3      	ldrh	r3, [r4, #12]
 800d874:	4393      	bics	r3, r2
 800d876:	001a      	movs	r2, r3
 800d878:	2301      	movs	r3, #1
 800d87a:	4313      	orrs	r3, r2
 800d87c:	81a3      	strh	r3, [r4, #12]
 800d87e:	89a0      	ldrh	r0, [r4, #12]
 800d880:	4307      	orrs	r7, r0
 800d882:	81a7      	strh	r7, [r4, #12]
 800d884:	e7cb      	b.n	800d81e <__smakebuf_r+0x1a>
 800d886:	46c0      	nop			; (mov r8, r8)
 800d888:	0800d5f9 	.word	0x0800d5f9

0800d88c <_malloc_usable_size_r>:
 800d88c:	1f0b      	subs	r3, r1, #4
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	1f18      	subs	r0, r3, #4
 800d892:	2b00      	cmp	r3, #0
 800d894:	da01      	bge.n	800d89a <_malloc_usable_size_r+0xe>
 800d896:	580b      	ldr	r3, [r1, r0]
 800d898:	18c0      	adds	r0, r0, r3
 800d89a:	4770      	bx	lr

0800d89c <__sread>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	000c      	movs	r4, r1
 800d8a0:	250e      	movs	r5, #14
 800d8a2:	5f49      	ldrsh	r1, [r1, r5]
 800d8a4:	f000 f8a4 	bl	800d9f0 <_read_r>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	db03      	blt.n	800d8b4 <__sread+0x18>
 800d8ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d8ae:	181b      	adds	r3, r3, r0
 800d8b0:	6563      	str	r3, [r4, #84]	; 0x54
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	4a02      	ldr	r2, [pc, #8]	; (800d8c0 <__sread+0x24>)
 800d8b8:	4013      	ands	r3, r2
 800d8ba:	81a3      	strh	r3, [r4, #12]
 800d8bc:	e7f9      	b.n	800d8b2 <__sread+0x16>
 800d8be:	46c0      	nop			; (mov r8, r8)
 800d8c0:	ffffefff 	.word	0xffffefff

0800d8c4 <__swrite>:
 800d8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c6:	001f      	movs	r7, r3
 800d8c8:	898b      	ldrh	r3, [r1, #12]
 800d8ca:	0005      	movs	r5, r0
 800d8cc:	000c      	movs	r4, r1
 800d8ce:	0016      	movs	r6, r2
 800d8d0:	05db      	lsls	r3, r3, #23
 800d8d2:	d505      	bpl.n	800d8e0 <__swrite+0x1c>
 800d8d4:	230e      	movs	r3, #14
 800d8d6:	5ec9      	ldrsh	r1, [r1, r3]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	2302      	movs	r3, #2
 800d8dc:	f000 f874 	bl	800d9c8 <_lseek_r>
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	4a05      	ldr	r2, [pc, #20]	; (800d8f8 <__swrite+0x34>)
 800d8e4:	0028      	movs	r0, r5
 800d8e6:	4013      	ands	r3, r2
 800d8e8:	81a3      	strh	r3, [r4, #12]
 800d8ea:	0032      	movs	r2, r6
 800d8ec:	230e      	movs	r3, #14
 800d8ee:	5ee1      	ldrsh	r1, [r4, r3]
 800d8f0:	003b      	movs	r3, r7
 800d8f2:	f000 f81f 	bl	800d934 <_write_r>
 800d8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8f8:	ffffefff 	.word	0xffffefff

0800d8fc <__sseek>:
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	000c      	movs	r4, r1
 800d900:	250e      	movs	r5, #14
 800d902:	5f49      	ldrsh	r1, [r1, r5]
 800d904:	f000 f860 	bl	800d9c8 <_lseek_r>
 800d908:	89a3      	ldrh	r3, [r4, #12]
 800d90a:	1c42      	adds	r2, r0, #1
 800d90c:	d103      	bne.n	800d916 <__sseek+0x1a>
 800d90e:	4a05      	ldr	r2, [pc, #20]	; (800d924 <__sseek+0x28>)
 800d910:	4013      	ands	r3, r2
 800d912:	81a3      	strh	r3, [r4, #12]
 800d914:	bd70      	pop	{r4, r5, r6, pc}
 800d916:	2280      	movs	r2, #128	; 0x80
 800d918:	0152      	lsls	r2, r2, #5
 800d91a:	4313      	orrs	r3, r2
 800d91c:	81a3      	strh	r3, [r4, #12]
 800d91e:	6560      	str	r0, [r4, #84]	; 0x54
 800d920:	e7f8      	b.n	800d914 <__sseek+0x18>
 800d922:	46c0      	nop			; (mov r8, r8)
 800d924:	ffffefff 	.word	0xffffefff

0800d928 <__sclose>:
 800d928:	b510      	push	{r4, lr}
 800d92a:	230e      	movs	r3, #14
 800d92c:	5ec9      	ldrsh	r1, [r1, r3]
 800d92e:	f000 f815 	bl	800d95c <_close_r>
 800d932:	bd10      	pop	{r4, pc}

0800d934 <_write_r>:
 800d934:	b570      	push	{r4, r5, r6, lr}
 800d936:	0004      	movs	r4, r0
 800d938:	0008      	movs	r0, r1
 800d93a:	0011      	movs	r1, r2
 800d93c:	001a      	movs	r2, r3
 800d93e:	2300      	movs	r3, #0
 800d940:	4d05      	ldr	r5, [pc, #20]	; (800d958 <_write_r+0x24>)
 800d942:	602b      	str	r3, [r5, #0]
 800d944:	f7f5 f99d 	bl	8002c82 <_write>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d103      	bne.n	800d954 <_write_r+0x20>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d000      	beq.n	800d954 <_write_r+0x20>
 800d952:	6023      	str	r3, [r4, #0]
 800d954:	bd70      	pop	{r4, r5, r6, pc}
 800d956:	46c0      	nop			; (mov r8, r8)
 800d958:	200004b4 	.word	0x200004b4

0800d95c <_close_r>:
 800d95c:	2300      	movs	r3, #0
 800d95e:	b570      	push	{r4, r5, r6, lr}
 800d960:	4d06      	ldr	r5, [pc, #24]	; (800d97c <_close_r+0x20>)
 800d962:	0004      	movs	r4, r0
 800d964:	0008      	movs	r0, r1
 800d966:	602b      	str	r3, [r5, #0]
 800d968:	f7f5 f9a7 	bl	8002cba <_close>
 800d96c:	1c43      	adds	r3, r0, #1
 800d96e:	d103      	bne.n	800d978 <_close_r+0x1c>
 800d970:	682b      	ldr	r3, [r5, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d000      	beq.n	800d978 <_close_r+0x1c>
 800d976:	6023      	str	r3, [r4, #0]
 800d978:	bd70      	pop	{r4, r5, r6, pc}
 800d97a:	46c0      	nop			; (mov r8, r8)
 800d97c:	200004b4 	.word	0x200004b4

0800d980 <_fstat_r>:
 800d980:	2300      	movs	r3, #0
 800d982:	b570      	push	{r4, r5, r6, lr}
 800d984:	4d06      	ldr	r5, [pc, #24]	; (800d9a0 <_fstat_r+0x20>)
 800d986:	0004      	movs	r4, r0
 800d988:	0008      	movs	r0, r1
 800d98a:	0011      	movs	r1, r2
 800d98c:	602b      	str	r3, [r5, #0]
 800d98e:	f7f5 f99e 	bl	8002cce <_fstat>
 800d992:	1c43      	adds	r3, r0, #1
 800d994:	d103      	bne.n	800d99e <_fstat_r+0x1e>
 800d996:	682b      	ldr	r3, [r5, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d000      	beq.n	800d99e <_fstat_r+0x1e>
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	bd70      	pop	{r4, r5, r6, pc}
 800d9a0:	200004b4 	.word	0x200004b4

0800d9a4 <_isatty_r>:
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	b570      	push	{r4, r5, r6, lr}
 800d9a8:	4d06      	ldr	r5, [pc, #24]	; (800d9c4 <_isatty_r+0x20>)
 800d9aa:	0004      	movs	r4, r0
 800d9ac:	0008      	movs	r0, r1
 800d9ae:	602b      	str	r3, [r5, #0]
 800d9b0:	f7f5 f99b 	bl	8002cea <_isatty>
 800d9b4:	1c43      	adds	r3, r0, #1
 800d9b6:	d103      	bne.n	800d9c0 <_isatty_r+0x1c>
 800d9b8:	682b      	ldr	r3, [r5, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d000      	beq.n	800d9c0 <_isatty_r+0x1c>
 800d9be:	6023      	str	r3, [r4, #0]
 800d9c0:	bd70      	pop	{r4, r5, r6, pc}
 800d9c2:	46c0      	nop			; (mov r8, r8)
 800d9c4:	200004b4 	.word	0x200004b4

0800d9c8 <_lseek_r>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	0004      	movs	r4, r0
 800d9cc:	0008      	movs	r0, r1
 800d9ce:	0011      	movs	r1, r2
 800d9d0:	001a      	movs	r2, r3
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	4d05      	ldr	r5, [pc, #20]	; (800d9ec <_lseek_r+0x24>)
 800d9d6:	602b      	str	r3, [r5, #0]
 800d9d8:	f7f5 f990 	bl	8002cfc <_lseek>
 800d9dc:	1c43      	adds	r3, r0, #1
 800d9de:	d103      	bne.n	800d9e8 <_lseek_r+0x20>
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d000      	beq.n	800d9e8 <_lseek_r+0x20>
 800d9e6:	6023      	str	r3, [r4, #0]
 800d9e8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ea:	46c0      	nop			; (mov r8, r8)
 800d9ec:	200004b4 	.word	0x200004b4

0800d9f0 <_read_r>:
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	0004      	movs	r4, r0
 800d9f4:	0008      	movs	r0, r1
 800d9f6:	0011      	movs	r1, r2
 800d9f8:	001a      	movs	r2, r3
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	4d05      	ldr	r5, [pc, #20]	; (800da14 <_read_r+0x24>)
 800d9fe:	602b      	str	r3, [r5, #0]
 800da00:	f7f5 f922 	bl	8002c48 <_read>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d103      	bne.n	800da10 <_read_r+0x20>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d000      	beq.n	800da10 <_read_r+0x20>
 800da0e:	6023      	str	r3, [r4, #0]
 800da10:	bd70      	pop	{r4, r5, r6, pc}
 800da12:	46c0      	nop			; (mov r8, r8)
 800da14:	200004b4 	.word	0x200004b4

0800da18 <_init>:
 800da18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1a:	46c0      	nop			; (mov r8, r8)
 800da1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da1e:	bc08      	pop	{r3}
 800da20:	469e      	mov	lr, r3
 800da22:	4770      	bx	lr

0800da24 <_fini>:
 800da24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da26:	46c0      	nop			; (mov r8, r8)
 800da28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da2a:	bc08      	pop	{r3}
 800da2c:	469e      	mov	lr, r3
 800da2e:	4770      	bx	lr
