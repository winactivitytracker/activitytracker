
F0SensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a974  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800aa38  0800aa38  0001aa38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b044  0800b044  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b044  0800b044  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b044  0800b044  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b044  0800b044  0001b044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b048  0800b048  0001b048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b04c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  200001f4  0800b240  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  0800b240  00020c10  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012079  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc9  00000000  00000000  00032295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00034f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00035fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012db8  00000000  00000000  00036f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001495e  00000000  00000000  00049cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bcf0  00000000  00000000  0005e61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca30e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe8  00000000  00000000  000ca364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800aa1c 	.word	0x0800aa1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	0800aa1c 	.word	0x0800aa1c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8f5 	bl	800162c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f83f 	bl	80014d0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8e7 	bl	800162c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8dd 	bl	800162c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f861 	bl	8001548 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f857 	bl	8001548 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 ff41 	bl	8002344 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fb8a 	bl	8001be4 <__aeabi_dsub>
 80004d0:	f001 ff38 	bl	8002344 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f001 f8ef 	bl	800170c <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 ff6c 	bl	8002410 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f001 f8e6 	bl	800170c <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb4c 	bl	8001be4 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 ff25 	bl	80023b0 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f001 f8cf 	bl	800170c <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 ff4c 	bl	8002410 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f956 	bl	800082c <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_fdiv>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	0245      	lsls	r5, r0, #9
 8000592:	b5c0      	push	{r6, r7, lr}
 8000594:	0047      	lsls	r7, r0, #1
 8000596:	1c0c      	adds	r4, r1, #0
 8000598:	0a6d      	lsrs	r5, r5, #9
 800059a:	0e3f      	lsrs	r7, r7, #24
 800059c:	0fc6      	lsrs	r6, r0, #31
 800059e:	2f00      	cmp	r7, #0
 80005a0:	d066      	beq.n	8000670 <__aeabi_fdiv+0xe8>
 80005a2:	2fff      	cmp	r7, #255	; 0xff
 80005a4:	d06c      	beq.n	8000680 <__aeabi_fdiv+0xf8>
 80005a6:	2300      	movs	r3, #0
 80005a8:	00ea      	lsls	r2, r5, #3
 80005aa:	2580      	movs	r5, #128	; 0x80
 80005ac:	4699      	mov	r9, r3
 80005ae:	469a      	mov	sl, r3
 80005b0:	04ed      	lsls	r5, r5, #19
 80005b2:	4315      	orrs	r5, r2
 80005b4:	3f7f      	subs	r7, #127	; 0x7f
 80005b6:	0260      	lsls	r0, r4, #9
 80005b8:	0061      	lsls	r1, r4, #1
 80005ba:	0a43      	lsrs	r3, r0, #9
 80005bc:	4698      	mov	r8, r3
 80005be:	0e09      	lsrs	r1, r1, #24
 80005c0:	0fe4      	lsrs	r4, r4, #31
 80005c2:	2900      	cmp	r1, #0
 80005c4:	d048      	beq.n	8000658 <__aeabi_fdiv+0xd0>
 80005c6:	29ff      	cmp	r1, #255	; 0xff
 80005c8:	d010      	beq.n	80005ec <__aeabi_fdiv+0x64>
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	00d8      	lsls	r0, r3, #3
 80005ce:	04d2      	lsls	r2, r2, #19
 80005d0:	4302      	orrs	r2, r0
 80005d2:	4690      	mov	r8, r2
 80005d4:	2000      	movs	r0, #0
 80005d6:	397f      	subs	r1, #127	; 0x7f
 80005d8:	464a      	mov	r2, r9
 80005da:	0033      	movs	r3, r6
 80005dc:	1a7f      	subs	r7, r7, r1
 80005de:	4302      	orrs	r2, r0
 80005e0:	496c      	ldr	r1, [pc, #432]	; (8000794 <__aeabi_fdiv+0x20c>)
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	588a      	ldr	r2, [r1, r2]
 80005e6:	4063      	eors	r3, r4
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4697      	mov	pc, r2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d16d      	bne.n	80006cc <__aeabi_fdiv+0x144>
 80005f0:	2002      	movs	r0, #2
 80005f2:	3fff      	subs	r7, #255	; 0xff
 80005f4:	e033      	b.n	800065e <__aeabi_fdiv+0xd6>
 80005f6:	2300      	movs	r3, #0
 80005f8:	4698      	mov	r8, r3
 80005fa:	0026      	movs	r6, r4
 80005fc:	4645      	mov	r5, r8
 80005fe:	4682      	mov	sl, r0
 8000600:	4653      	mov	r3, sl
 8000602:	2b02      	cmp	r3, #2
 8000604:	d100      	bne.n	8000608 <__aeabi_fdiv+0x80>
 8000606:	e07f      	b.n	8000708 <__aeabi_fdiv+0x180>
 8000608:	2b03      	cmp	r3, #3
 800060a:	d100      	bne.n	800060e <__aeabi_fdiv+0x86>
 800060c:	e094      	b.n	8000738 <__aeabi_fdiv+0x1b0>
 800060e:	2b01      	cmp	r3, #1
 8000610:	d017      	beq.n	8000642 <__aeabi_fdiv+0xba>
 8000612:	0038      	movs	r0, r7
 8000614:	307f      	adds	r0, #127	; 0x7f
 8000616:	2800      	cmp	r0, #0
 8000618:	dd5f      	ble.n	80006da <__aeabi_fdiv+0x152>
 800061a:	076b      	lsls	r3, r5, #29
 800061c:	d004      	beq.n	8000628 <__aeabi_fdiv+0xa0>
 800061e:	230f      	movs	r3, #15
 8000620:	402b      	ands	r3, r5
 8000622:	2b04      	cmp	r3, #4
 8000624:	d000      	beq.n	8000628 <__aeabi_fdiv+0xa0>
 8000626:	3504      	adds	r5, #4
 8000628:	012b      	lsls	r3, r5, #4
 800062a:	d503      	bpl.n	8000634 <__aeabi_fdiv+0xac>
 800062c:	0038      	movs	r0, r7
 800062e:	4b5a      	ldr	r3, [pc, #360]	; (8000798 <__aeabi_fdiv+0x210>)
 8000630:	3080      	adds	r0, #128	; 0x80
 8000632:	401d      	ands	r5, r3
 8000634:	28fe      	cmp	r0, #254	; 0xfe
 8000636:	dc67      	bgt.n	8000708 <__aeabi_fdiv+0x180>
 8000638:	01ad      	lsls	r5, r5, #6
 800063a:	0a6d      	lsrs	r5, r5, #9
 800063c:	b2c0      	uxtb	r0, r0
 800063e:	e002      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000640:	001e      	movs	r6, r3
 8000642:	2000      	movs	r0, #0
 8000644:	2500      	movs	r5, #0
 8000646:	05c0      	lsls	r0, r0, #23
 8000648:	4328      	orrs	r0, r5
 800064a:	07f6      	lsls	r6, r6, #31
 800064c:	4330      	orrs	r0, r6
 800064e:	bce0      	pop	{r5, r6, r7}
 8000650:	46ba      	mov	sl, r7
 8000652:	46b1      	mov	r9, r6
 8000654:	46a8      	mov	r8, r5
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	2b00      	cmp	r3, #0
 800065a:	d12b      	bne.n	80006b4 <__aeabi_fdiv+0x12c>
 800065c:	2001      	movs	r0, #1
 800065e:	464a      	mov	r2, r9
 8000660:	0033      	movs	r3, r6
 8000662:	494e      	ldr	r1, [pc, #312]	; (800079c <__aeabi_fdiv+0x214>)
 8000664:	4302      	orrs	r2, r0
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	588a      	ldr	r2, [r1, r2]
 800066a:	4063      	eors	r3, r4
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4697      	mov	pc, r2
 8000670:	2d00      	cmp	r5, #0
 8000672:	d113      	bne.n	800069c <__aeabi_fdiv+0x114>
 8000674:	2304      	movs	r3, #4
 8000676:	4699      	mov	r9, r3
 8000678:	3b03      	subs	r3, #3
 800067a:	2700      	movs	r7, #0
 800067c:	469a      	mov	sl, r3
 800067e:	e79a      	b.n	80005b6 <__aeabi_fdiv+0x2e>
 8000680:	2d00      	cmp	r5, #0
 8000682:	d105      	bne.n	8000690 <__aeabi_fdiv+0x108>
 8000684:	2308      	movs	r3, #8
 8000686:	4699      	mov	r9, r3
 8000688:	3b06      	subs	r3, #6
 800068a:	27ff      	movs	r7, #255	; 0xff
 800068c:	469a      	mov	sl, r3
 800068e:	e792      	b.n	80005b6 <__aeabi_fdiv+0x2e>
 8000690:	230c      	movs	r3, #12
 8000692:	4699      	mov	r9, r3
 8000694:	3b09      	subs	r3, #9
 8000696:	27ff      	movs	r7, #255	; 0xff
 8000698:	469a      	mov	sl, r3
 800069a:	e78c      	b.n	80005b6 <__aeabi_fdiv+0x2e>
 800069c:	0028      	movs	r0, r5
 800069e:	f001 ffad 	bl	80025fc <__clzsi2>
 80006a2:	2776      	movs	r7, #118	; 0x76
 80006a4:	1f43      	subs	r3, r0, #5
 80006a6:	409d      	lsls	r5, r3
 80006a8:	2300      	movs	r3, #0
 80006aa:	427f      	negs	r7, r7
 80006ac:	4699      	mov	r9, r3
 80006ae:	469a      	mov	sl, r3
 80006b0:	1a3f      	subs	r7, r7, r0
 80006b2:	e780      	b.n	80005b6 <__aeabi_fdiv+0x2e>
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 ffa1 	bl	80025fc <__clzsi2>
 80006ba:	4642      	mov	r2, r8
 80006bc:	1f43      	subs	r3, r0, #5
 80006be:	2176      	movs	r1, #118	; 0x76
 80006c0:	409a      	lsls	r2, r3
 80006c2:	4249      	negs	r1, r1
 80006c4:	1a09      	subs	r1, r1, r0
 80006c6:	4690      	mov	r8, r2
 80006c8:	2000      	movs	r0, #0
 80006ca:	e785      	b.n	80005d8 <__aeabi_fdiv+0x50>
 80006cc:	21ff      	movs	r1, #255	; 0xff
 80006ce:	2003      	movs	r0, #3
 80006d0:	e782      	b.n	80005d8 <__aeabi_fdiv+0x50>
 80006d2:	001e      	movs	r6, r3
 80006d4:	20ff      	movs	r0, #255	; 0xff
 80006d6:	2500      	movs	r5, #0
 80006d8:	e7b5      	b.n	8000646 <__aeabi_fdiv+0xbe>
 80006da:	2301      	movs	r3, #1
 80006dc:	1a1b      	subs	r3, r3, r0
 80006de:	2b1b      	cmp	r3, #27
 80006e0:	dcaf      	bgt.n	8000642 <__aeabi_fdiv+0xba>
 80006e2:	379e      	adds	r7, #158	; 0x9e
 80006e4:	0029      	movs	r1, r5
 80006e6:	40bd      	lsls	r5, r7
 80006e8:	40d9      	lsrs	r1, r3
 80006ea:	1e6a      	subs	r2, r5, #1
 80006ec:	4195      	sbcs	r5, r2
 80006ee:	430d      	orrs	r5, r1
 80006f0:	076b      	lsls	r3, r5, #29
 80006f2:	d004      	beq.n	80006fe <__aeabi_fdiv+0x176>
 80006f4:	230f      	movs	r3, #15
 80006f6:	402b      	ands	r3, r5
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d000      	beq.n	80006fe <__aeabi_fdiv+0x176>
 80006fc:	3504      	adds	r5, #4
 80006fe:	016b      	lsls	r3, r5, #5
 8000700:	d544      	bpl.n	800078c <__aeabi_fdiv+0x204>
 8000702:	2001      	movs	r0, #1
 8000704:	2500      	movs	r5, #0
 8000706:	e79e      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000708:	20ff      	movs	r0, #255	; 0xff
 800070a:	2500      	movs	r5, #0
 800070c:	e79b      	b.n	8000646 <__aeabi_fdiv+0xbe>
 800070e:	2580      	movs	r5, #128	; 0x80
 8000710:	2600      	movs	r6, #0
 8000712:	20ff      	movs	r0, #255	; 0xff
 8000714:	03ed      	lsls	r5, r5, #15
 8000716:	e796      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000718:	2300      	movs	r3, #0
 800071a:	4698      	mov	r8, r3
 800071c:	2080      	movs	r0, #128	; 0x80
 800071e:	03c0      	lsls	r0, r0, #15
 8000720:	4205      	tst	r5, r0
 8000722:	d009      	beq.n	8000738 <__aeabi_fdiv+0x1b0>
 8000724:	4643      	mov	r3, r8
 8000726:	4203      	tst	r3, r0
 8000728:	d106      	bne.n	8000738 <__aeabi_fdiv+0x1b0>
 800072a:	4645      	mov	r5, r8
 800072c:	4305      	orrs	r5, r0
 800072e:	026d      	lsls	r5, r5, #9
 8000730:	0026      	movs	r6, r4
 8000732:	20ff      	movs	r0, #255	; 0xff
 8000734:	0a6d      	lsrs	r5, r5, #9
 8000736:	e786      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000738:	2080      	movs	r0, #128	; 0x80
 800073a:	03c0      	lsls	r0, r0, #15
 800073c:	4305      	orrs	r5, r0
 800073e:	026d      	lsls	r5, r5, #9
 8000740:	20ff      	movs	r0, #255	; 0xff
 8000742:	0a6d      	lsrs	r5, r5, #9
 8000744:	e77f      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000746:	4641      	mov	r1, r8
 8000748:	016a      	lsls	r2, r5, #5
 800074a:	0148      	lsls	r0, r1, #5
 800074c:	4282      	cmp	r2, r0
 800074e:	d219      	bcs.n	8000784 <__aeabi_fdiv+0x1fc>
 8000750:	211b      	movs	r1, #27
 8000752:	2500      	movs	r5, #0
 8000754:	3f01      	subs	r7, #1
 8000756:	2601      	movs	r6, #1
 8000758:	0014      	movs	r4, r2
 800075a:	006d      	lsls	r5, r5, #1
 800075c:	0052      	lsls	r2, r2, #1
 800075e:	2c00      	cmp	r4, #0
 8000760:	db01      	blt.n	8000766 <__aeabi_fdiv+0x1de>
 8000762:	4290      	cmp	r0, r2
 8000764:	d801      	bhi.n	800076a <__aeabi_fdiv+0x1e2>
 8000766:	1a12      	subs	r2, r2, r0
 8000768:	4335      	orrs	r5, r6
 800076a:	3901      	subs	r1, #1
 800076c:	2900      	cmp	r1, #0
 800076e:	d1f3      	bne.n	8000758 <__aeabi_fdiv+0x1d0>
 8000770:	1e50      	subs	r0, r2, #1
 8000772:	4182      	sbcs	r2, r0
 8000774:	0038      	movs	r0, r7
 8000776:	307f      	adds	r0, #127	; 0x7f
 8000778:	001e      	movs	r6, r3
 800077a:	4315      	orrs	r5, r2
 800077c:	2800      	cmp	r0, #0
 800077e:	dd00      	ble.n	8000782 <__aeabi_fdiv+0x1fa>
 8000780:	e74b      	b.n	800061a <__aeabi_fdiv+0x92>
 8000782:	e7aa      	b.n	80006da <__aeabi_fdiv+0x152>
 8000784:	211a      	movs	r1, #26
 8000786:	2501      	movs	r5, #1
 8000788:	1a12      	subs	r2, r2, r0
 800078a:	e7e4      	b.n	8000756 <__aeabi_fdiv+0x1ce>
 800078c:	01ad      	lsls	r5, r5, #6
 800078e:	2000      	movs	r0, #0
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	e758      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000794:	0800aa74 	.word	0x0800aa74
 8000798:	f7ffffff 	.word	0xf7ffffff
 800079c:	0800aab4 	.word	0x0800aab4

080007a0 <__aeabi_i2f>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d013      	beq.n	80007ce <__aeabi_i2f+0x2e>
 80007a6:	17c3      	asrs	r3, r0, #31
 80007a8:	18c5      	adds	r5, r0, r3
 80007aa:	405d      	eors	r5, r3
 80007ac:	0fc4      	lsrs	r4, r0, #31
 80007ae:	0028      	movs	r0, r5
 80007b0:	f001 ff24 	bl	80025fc <__clzsi2>
 80007b4:	239e      	movs	r3, #158	; 0x9e
 80007b6:	0001      	movs	r1, r0
 80007b8:	1a1b      	subs	r3, r3, r0
 80007ba:	2b96      	cmp	r3, #150	; 0x96
 80007bc:	dc0f      	bgt.n	80007de <__aeabi_i2f+0x3e>
 80007be:	2808      	cmp	r0, #8
 80007c0:	dd01      	ble.n	80007c6 <__aeabi_i2f+0x26>
 80007c2:	3908      	subs	r1, #8
 80007c4:	408d      	lsls	r5, r1
 80007c6:	026d      	lsls	r5, r5, #9
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	b2d8      	uxtb	r0, r3
 80007cc:	e002      	b.n	80007d4 <__aeabi_i2f+0x34>
 80007ce:	2400      	movs	r4, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	2500      	movs	r5, #0
 80007d4:	05c0      	lsls	r0, r0, #23
 80007d6:	4328      	orrs	r0, r5
 80007d8:	07e4      	lsls	r4, r4, #31
 80007da:	4320      	orrs	r0, r4
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
 80007de:	2b99      	cmp	r3, #153	; 0x99
 80007e0:	dd0b      	ble.n	80007fa <__aeabi_i2f+0x5a>
 80007e2:	2205      	movs	r2, #5
 80007e4:	002e      	movs	r6, r5
 80007e6:	1a12      	subs	r2, r2, r0
 80007e8:	40d6      	lsrs	r6, r2
 80007ea:	0002      	movs	r2, r0
 80007ec:	321b      	adds	r2, #27
 80007ee:	4095      	lsls	r5, r2
 80007f0:	0028      	movs	r0, r5
 80007f2:	1e45      	subs	r5, r0, #1
 80007f4:	41a8      	sbcs	r0, r5
 80007f6:	0035      	movs	r5, r6
 80007f8:	4305      	orrs	r5, r0
 80007fa:	2905      	cmp	r1, #5
 80007fc:	dd01      	ble.n	8000802 <__aeabi_i2f+0x62>
 80007fe:	1f4a      	subs	r2, r1, #5
 8000800:	4095      	lsls	r5, r2
 8000802:	002a      	movs	r2, r5
 8000804:	4e08      	ldr	r6, [pc, #32]	; (8000828 <__aeabi_i2f+0x88>)
 8000806:	4032      	ands	r2, r6
 8000808:	0768      	lsls	r0, r5, #29
 800080a:	d009      	beq.n	8000820 <__aeabi_i2f+0x80>
 800080c:	200f      	movs	r0, #15
 800080e:	4028      	ands	r0, r5
 8000810:	2804      	cmp	r0, #4
 8000812:	d005      	beq.n	8000820 <__aeabi_i2f+0x80>
 8000814:	3204      	adds	r2, #4
 8000816:	0150      	lsls	r0, r2, #5
 8000818:	d502      	bpl.n	8000820 <__aeabi_i2f+0x80>
 800081a:	239f      	movs	r3, #159	; 0x9f
 800081c:	4032      	ands	r2, r6
 800081e:	1a5b      	subs	r3, r3, r1
 8000820:	0192      	lsls	r2, r2, #6
 8000822:	0a55      	lsrs	r5, r2, #9
 8000824:	b2d8      	uxtb	r0, r3
 8000826:	e7d5      	b.n	80007d4 <__aeabi_i2f+0x34>
 8000828:	fbffffff 	.word	0xfbffffff

0800082c <__aeabi_dadd>:
 800082c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082e:	464f      	mov	r7, r9
 8000830:	46d6      	mov	lr, sl
 8000832:	4646      	mov	r6, r8
 8000834:	000d      	movs	r5, r1
 8000836:	0001      	movs	r1, r0
 8000838:	0018      	movs	r0, r3
 800083a:	b5c0      	push	{r6, r7, lr}
 800083c:	0017      	movs	r7, r2
 800083e:	032b      	lsls	r3, r5, #12
 8000840:	0a5a      	lsrs	r2, r3, #9
 8000842:	0f4b      	lsrs	r3, r1, #29
 8000844:	4313      	orrs	r3, r2
 8000846:	00ca      	lsls	r2, r1, #3
 8000848:	4691      	mov	r9, r2
 800084a:	0302      	lsls	r2, r0, #12
 800084c:	006e      	lsls	r6, r5, #1
 800084e:	0041      	lsls	r1, r0, #1
 8000850:	0a52      	lsrs	r2, r2, #9
 8000852:	0fec      	lsrs	r4, r5, #31
 8000854:	0f7d      	lsrs	r5, r7, #29
 8000856:	4315      	orrs	r5, r2
 8000858:	0d76      	lsrs	r6, r6, #21
 800085a:	0d49      	lsrs	r1, r1, #21
 800085c:	0fc0      	lsrs	r0, r0, #31
 800085e:	4682      	mov	sl, r0
 8000860:	46ac      	mov	ip, r5
 8000862:	00ff      	lsls	r7, r7, #3
 8000864:	1a72      	subs	r2, r6, r1
 8000866:	4284      	cmp	r4, r0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x40>
 800086a:	e098      	b.n	800099e <__aeabi_dadd+0x172>
 800086c:	2a00      	cmp	r2, #0
 800086e:	dc00      	bgt.n	8000872 <__aeabi_dadd+0x46>
 8000870:	e081      	b.n	8000976 <__aeabi_dadd+0x14a>
 8000872:	2900      	cmp	r1, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x4c>
 8000876:	e0b6      	b.n	80009e6 <__aeabi_dadd+0x1ba>
 8000878:	49c9      	ldr	r1, [pc, #804]	; (8000ba0 <__aeabi_dadd+0x374>)
 800087a:	428e      	cmp	r6, r1
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x54>
 800087e:	e172      	b.n	8000b66 <__aeabi_dadd+0x33a>
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0028      	movs	r0, r5
 8000884:	0409      	lsls	r1, r1, #16
 8000886:	4308      	orrs	r0, r1
 8000888:	4684      	mov	ip, r0
 800088a:	2a38      	cmp	r2, #56	; 0x38
 800088c:	dd00      	ble.n	8000890 <__aeabi_dadd+0x64>
 800088e:	e15e      	b.n	8000b4e <__aeabi_dadd+0x322>
 8000890:	2a1f      	cmp	r2, #31
 8000892:	dd00      	ble.n	8000896 <__aeabi_dadd+0x6a>
 8000894:	e1ee      	b.n	8000c74 <__aeabi_dadd+0x448>
 8000896:	2020      	movs	r0, #32
 8000898:	0039      	movs	r1, r7
 800089a:	4665      	mov	r5, ip
 800089c:	1a80      	subs	r0, r0, r2
 800089e:	4087      	lsls	r7, r0
 80008a0:	40d1      	lsrs	r1, r2
 80008a2:	4085      	lsls	r5, r0
 80008a4:	430d      	orrs	r5, r1
 80008a6:	0039      	movs	r1, r7
 80008a8:	1e4f      	subs	r7, r1, #1
 80008aa:	41b9      	sbcs	r1, r7
 80008ac:	4667      	mov	r7, ip
 80008ae:	40d7      	lsrs	r7, r2
 80008b0:	4329      	orrs	r1, r5
 80008b2:	1bdb      	subs	r3, r3, r7
 80008b4:	464a      	mov	r2, r9
 80008b6:	1a55      	subs	r5, r2, r1
 80008b8:	45a9      	cmp	r9, r5
 80008ba:	4189      	sbcs	r1, r1
 80008bc:	4249      	negs	r1, r1
 80008be:	1a5b      	subs	r3, r3, r1
 80008c0:	4698      	mov	r8, r3
 80008c2:	4643      	mov	r3, r8
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	d400      	bmi.n	80008ca <__aeabi_dadd+0x9e>
 80008c8:	e0cc      	b.n	8000a64 <__aeabi_dadd+0x238>
 80008ca:	4643      	mov	r3, r8
 80008cc:	025b      	lsls	r3, r3, #9
 80008ce:	0a5b      	lsrs	r3, r3, #9
 80008d0:	4698      	mov	r8, r3
 80008d2:	4643      	mov	r3, r8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0xae>
 80008d8:	e12c      	b.n	8000b34 <__aeabi_dadd+0x308>
 80008da:	4640      	mov	r0, r8
 80008dc:	f001 fe8e 	bl	80025fc <__clzsi2>
 80008e0:	0001      	movs	r1, r0
 80008e2:	3908      	subs	r1, #8
 80008e4:	2220      	movs	r2, #32
 80008e6:	0028      	movs	r0, r5
 80008e8:	4643      	mov	r3, r8
 80008ea:	1a52      	subs	r2, r2, r1
 80008ec:	408b      	lsls	r3, r1
 80008ee:	40d0      	lsrs	r0, r2
 80008f0:	408d      	lsls	r5, r1
 80008f2:	4303      	orrs	r3, r0
 80008f4:	428e      	cmp	r6, r1
 80008f6:	dd00      	ble.n	80008fa <__aeabi_dadd+0xce>
 80008f8:	e117      	b.n	8000b2a <__aeabi_dadd+0x2fe>
 80008fa:	1b8e      	subs	r6, r1, r6
 80008fc:	1c72      	adds	r2, r6, #1
 80008fe:	2a1f      	cmp	r2, #31
 8000900:	dd00      	ble.n	8000904 <__aeabi_dadd+0xd8>
 8000902:	e1a7      	b.n	8000c54 <__aeabi_dadd+0x428>
 8000904:	2120      	movs	r1, #32
 8000906:	0018      	movs	r0, r3
 8000908:	002e      	movs	r6, r5
 800090a:	1a89      	subs	r1, r1, r2
 800090c:	408d      	lsls	r5, r1
 800090e:	4088      	lsls	r0, r1
 8000910:	40d6      	lsrs	r6, r2
 8000912:	40d3      	lsrs	r3, r2
 8000914:	1e69      	subs	r1, r5, #1
 8000916:	418d      	sbcs	r5, r1
 8000918:	4330      	orrs	r0, r6
 800091a:	4698      	mov	r8, r3
 800091c:	2600      	movs	r6, #0
 800091e:	4305      	orrs	r5, r0
 8000920:	076b      	lsls	r3, r5, #29
 8000922:	d009      	beq.n	8000938 <__aeabi_dadd+0x10c>
 8000924:	230f      	movs	r3, #15
 8000926:	402b      	ands	r3, r5
 8000928:	2b04      	cmp	r3, #4
 800092a:	d005      	beq.n	8000938 <__aeabi_dadd+0x10c>
 800092c:	1d2b      	adds	r3, r5, #4
 800092e:	42ab      	cmp	r3, r5
 8000930:	41ad      	sbcs	r5, r5
 8000932:	426d      	negs	r5, r5
 8000934:	44a8      	add	r8, r5
 8000936:	001d      	movs	r5, r3
 8000938:	4643      	mov	r3, r8
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	d400      	bmi.n	8000940 <__aeabi_dadd+0x114>
 800093e:	e094      	b.n	8000a6a <__aeabi_dadd+0x23e>
 8000940:	4b97      	ldr	r3, [pc, #604]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000942:	1c72      	adds	r2, r6, #1
 8000944:	429a      	cmp	r2, r3
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x11e>
 8000948:	e09d      	b.n	8000a86 <__aeabi_dadd+0x25a>
 800094a:	4641      	mov	r1, r8
 800094c:	4b95      	ldr	r3, [pc, #596]	; (8000ba4 <__aeabi_dadd+0x378>)
 800094e:	08ed      	lsrs	r5, r5, #3
 8000950:	4019      	ands	r1, r3
 8000952:	000b      	movs	r3, r1
 8000954:	0552      	lsls	r2, r2, #21
 8000956:	0749      	lsls	r1, r1, #29
 8000958:	025b      	lsls	r3, r3, #9
 800095a:	4329      	orrs	r1, r5
 800095c:	0b1b      	lsrs	r3, r3, #12
 800095e:	0d52      	lsrs	r2, r2, #21
 8000960:	0512      	lsls	r2, r2, #20
 8000962:	4313      	orrs	r3, r2
 8000964:	07e4      	lsls	r4, r4, #31
 8000966:	4323      	orrs	r3, r4
 8000968:	0008      	movs	r0, r1
 800096a:	0019      	movs	r1, r3
 800096c:	bce0      	pop	{r5, r6, r7}
 800096e:	46ba      	mov	sl, r7
 8000970:	46b1      	mov	r9, r6
 8000972:	46a8      	mov	r8, r5
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	2a00      	cmp	r2, #0
 8000978:	d043      	beq.n	8000a02 <__aeabi_dadd+0x1d6>
 800097a:	1b8a      	subs	r2, r1, r6
 800097c:	2e00      	cmp	r6, #0
 800097e:	d000      	beq.n	8000982 <__aeabi_dadd+0x156>
 8000980:	e12a      	b.n	8000bd8 <__aeabi_dadd+0x3ac>
 8000982:	464c      	mov	r4, r9
 8000984:	431c      	orrs	r4, r3
 8000986:	d100      	bne.n	800098a <__aeabi_dadd+0x15e>
 8000988:	e1d1      	b.n	8000d2e <__aeabi_dadd+0x502>
 800098a:	1e54      	subs	r4, r2, #1
 800098c:	2a01      	cmp	r2, #1
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0x166>
 8000990:	e21f      	b.n	8000dd2 <__aeabi_dadd+0x5a6>
 8000992:	4d83      	ldr	r5, [pc, #524]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000994:	42aa      	cmp	r2, r5
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x16e>
 8000998:	e272      	b.n	8000e80 <__aeabi_dadd+0x654>
 800099a:	0022      	movs	r2, r4
 800099c:	e123      	b.n	8000be6 <__aeabi_dadd+0x3ba>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x178>
 80009a2:	e098      	b.n	8000ad6 <__aeabi_dadd+0x2aa>
 80009a4:	2900      	cmp	r1, #0
 80009a6:	d042      	beq.n	8000a2e <__aeabi_dadd+0x202>
 80009a8:	497d      	ldr	r1, [pc, #500]	; (8000ba0 <__aeabi_dadd+0x374>)
 80009aa:	428e      	cmp	r6, r1
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x184>
 80009ae:	e0da      	b.n	8000b66 <__aeabi_dadd+0x33a>
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	0028      	movs	r0, r5
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	4308      	orrs	r0, r1
 80009b8:	4684      	mov	ip, r0
 80009ba:	2a38      	cmp	r2, #56	; 0x38
 80009bc:	dd00      	ble.n	80009c0 <__aeabi_dadd+0x194>
 80009be:	e129      	b.n	8000c14 <__aeabi_dadd+0x3e8>
 80009c0:	2a1f      	cmp	r2, #31
 80009c2:	dc00      	bgt.n	80009c6 <__aeabi_dadd+0x19a>
 80009c4:	e187      	b.n	8000cd6 <__aeabi_dadd+0x4aa>
 80009c6:	0011      	movs	r1, r2
 80009c8:	4665      	mov	r5, ip
 80009ca:	3920      	subs	r1, #32
 80009cc:	40cd      	lsrs	r5, r1
 80009ce:	2a20      	cmp	r2, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x1b0>
 80009d2:	2040      	movs	r0, #64	; 0x40
 80009d4:	4661      	mov	r1, ip
 80009d6:	1a82      	subs	r2, r0, r2
 80009d8:	4091      	lsls	r1, r2
 80009da:	430f      	orrs	r7, r1
 80009dc:	0039      	movs	r1, r7
 80009de:	1e4f      	subs	r7, r1, #1
 80009e0:	41b9      	sbcs	r1, r7
 80009e2:	430d      	orrs	r5, r1
 80009e4:	e11b      	b.n	8000c1e <__aeabi_dadd+0x3f2>
 80009e6:	0029      	movs	r1, r5
 80009e8:	4339      	orrs	r1, r7
 80009ea:	d100      	bne.n	80009ee <__aeabi_dadd+0x1c2>
 80009ec:	e0b5      	b.n	8000b5a <__aeabi_dadd+0x32e>
 80009ee:	1e51      	subs	r1, r2, #1
 80009f0:	2a01      	cmp	r2, #1
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x1ca>
 80009f4:	e1ab      	b.n	8000d4e <__aeabi_dadd+0x522>
 80009f6:	486a      	ldr	r0, [pc, #424]	; (8000ba0 <__aeabi_dadd+0x374>)
 80009f8:	4282      	cmp	r2, r0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x1d2>
 80009fc:	e1b2      	b.n	8000d64 <__aeabi_dadd+0x538>
 80009fe:	000a      	movs	r2, r1
 8000a00:	e743      	b.n	800088a <__aeabi_dadd+0x5e>
 8000a02:	4969      	ldr	r1, [pc, #420]	; (8000ba8 <__aeabi_dadd+0x37c>)
 8000a04:	1c75      	adds	r5, r6, #1
 8000a06:	420d      	tst	r5, r1
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x1e0>
 8000a0a:	e0cf      	b.n	8000bac <__aeabi_dadd+0x380>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x1e6>
 8000a10:	e193      	b.n	8000d3a <__aeabi_dadd+0x50e>
 8000a12:	4649      	mov	r1, r9
 8000a14:	4319      	orrs	r1, r3
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x1ee>
 8000a18:	e1d1      	b.n	8000dbe <__aeabi_dadd+0x592>
 8000a1a:	4661      	mov	r1, ip
 8000a1c:	4339      	orrs	r1, r7
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x1f6>
 8000a20:	e1e3      	b.n	8000dea <__aeabi_dadd+0x5be>
 8000a22:	4649      	mov	r1, r9
 8000a24:	0758      	lsls	r0, r3, #29
 8000a26:	08c9      	lsrs	r1, r1, #3
 8000a28:	4301      	orrs	r1, r0
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	e026      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000a2e:	0029      	movs	r1, r5
 8000a30:	4339      	orrs	r1, r7
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x20a>
 8000a34:	e091      	b.n	8000b5a <__aeabi_dadd+0x32e>
 8000a36:	1e51      	subs	r1, r2, #1
 8000a38:	2a01      	cmp	r2, #1
 8000a3a:	d005      	beq.n	8000a48 <__aeabi_dadd+0x21c>
 8000a3c:	4858      	ldr	r0, [pc, #352]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000a3e:	4282      	cmp	r2, r0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x218>
 8000a42:	e18f      	b.n	8000d64 <__aeabi_dadd+0x538>
 8000a44:	000a      	movs	r2, r1
 8000a46:	e7b8      	b.n	80009ba <__aeabi_dadd+0x18e>
 8000a48:	003d      	movs	r5, r7
 8000a4a:	444d      	add	r5, r9
 8000a4c:	454d      	cmp	r5, r9
 8000a4e:	4189      	sbcs	r1, r1
 8000a50:	4463      	add	r3, ip
 8000a52:	4698      	mov	r8, r3
 8000a54:	4249      	negs	r1, r1
 8000a56:	4488      	add	r8, r1
 8000a58:	4643      	mov	r3, r8
 8000a5a:	2602      	movs	r6, #2
 8000a5c:	021b      	lsls	r3, r3, #8
 8000a5e:	d500      	bpl.n	8000a62 <__aeabi_dadd+0x236>
 8000a60:	e0eb      	b.n	8000c3a <__aeabi_dadd+0x40e>
 8000a62:	3e01      	subs	r6, #1
 8000a64:	076b      	lsls	r3, r5, #29
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dadd+0x23e>
 8000a68:	e75c      	b.n	8000924 <__aeabi_dadd+0xf8>
 8000a6a:	4643      	mov	r3, r8
 8000a6c:	08e9      	lsrs	r1, r5, #3
 8000a6e:	075a      	lsls	r2, r3, #29
 8000a70:	4311      	orrs	r1, r2
 8000a72:	0032      	movs	r2, r6
 8000a74:	08db      	lsrs	r3, r3, #3
 8000a76:	484a      	ldr	r0, [pc, #296]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000a78:	4282      	cmp	r2, r0
 8000a7a:	d021      	beq.n	8000ac0 <__aeabi_dadd+0x294>
 8000a7c:	031b      	lsls	r3, r3, #12
 8000a7e:	0552      	lsls	r2, r2, #21
 8000a80:	0b1b      	lsrs	r3, r3, #12
 8000a82:	0d52      	lsrs	r2, r2, #21
 8000a84:	e76c      	b.n	8000960 <__aeabi_dadd+0x134>
 8000a86:	2300      	movs	r3, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	e769      	b.n	8000960 <__aeabi_dadd+0x134>
 8000a8c:	002a      	movs	r2, r5
 8000a8e:	433a      	orrs	r2, r7
 8000a90:	d069      	beq.n	8000b66 <__aeabi_dadd+0x33a>
 8000a92:	464a      	mov	r2, r9
 8000a94:	0758      	lsls	r0, r3, #29
 8000a96:	08d1      	lsrs	r1, r2, #3
 8000a98:	08da      	lsrs	r2, r3, #3
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	031b      	lsls	r3, r3, #12
 8000a9e:	4308      	orrs	r0, r1
 8000aa0:	421a      	tst	r2, r3
 8000aa2:	d007      	beq.n	8000ab4 <__aeabi_dadd+0x288>
 8000aa4:	0029      	movs	r1, r5
 8000aa6:	08ed      	lsrs	r5, r5, #3
 8000aa8:	421d      	tst	r5, r3
 8000aaa:	d103      	bne.n	8000ab4 <__aeabi_dadd+0x288>
 8000aac:	002a      	movs	r2, r5
 8000aae:	08ff      	lsrs	r7, r7, #3
 8000ab0:	0748      	lsls	r0, r1, #29
 8000ab2:	4338      	orrs	r0, r7
 8000ab4:	0f43      	lsrs	r3, r0, #29
 8000ab6:	00c1      	lsls	r1, r0, #3
 8000ab8:	075b      	lsls	r3, r3, #29
 8000aba:	08c9      	lsrs	r1, r1, #3
 8000abc:	4319      	orrs	r1, r3
 8000abe:	0013      	movs	r3, r2
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x29c>
 8000ac6:	e213      	b.n	8000ef0 <__aeabi_dadd+0x6c4>
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0312      	lsls	r2, r2, #12
 8000acc:	4313      	orrs	r3, r2
 8000ace:	031b      	lsls	r3, r3, #12
 8000ad0:	4a33      	ldr	r2, [pc, #204]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000ad2:	0b1b      	lsrs	r3, r3, #12
 8000ad4:	e744      	b.n	8000960 <__aeabi_dadd+0x134>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	d04b      	beq.n	8000b72 <__aeabi_dadd+0x346>
 8000ada:	1b8a      	subs	r2, r1, r6
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x2b6>
 8000ae0:	e0e7      	b.n	8000cb2 <__aeabi_dadd+0x486>
 8000ae2:	482f      	ldr	r0, [pc, #188]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000ae4:	4281      	cmp	r1, r0
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dadd+0x2be>
 8000ae8:	e195      	b.n	8000e16 <__aeabi_dadd+0x5ea>
 8000aea:	2080      	movs	r0, #128	; 0x80
 8000aec:	0400      	lsls	r0, r0, #16
 8000aee:	4303      	orrs	r3, r0
 8000af0:	2a38      	cmp	r2, #56	; 0x38
 8000af2:	dd00      	ble.n	8000af6 <__aeabi_dadd+0x2ca>
 8000af4:	e143      	b.n	8000d7e <__aeabi_dadd+0x552>
 8000af6:	2a1f      	cmp	r2, #31
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dadd+0x2d0>
 8000afa:	e1db      	b.n	8000eb4 <__aeabi_dadd+0x688>
 8000afc:	2020      	movs	r0, #32
 8000afe:	001d      	movs	r5, r3
 8000b00:	464e      	mov	r6, r9
 8000b02:	1a80      	subs	r0, r0, r2
 8000b04:	4085      	lsls	r5, r0
 8000b06:	40d6      	lsrs	r6, r2
 8000b08:	4335      	orrs	r5, r6
 8000b0a:	464e      	mov	r6, r9
 8000b0c:	4086      	lsls	r6, r0
 8000b0e:	0030      	movs	r0, r6
 8000b10:	40d3      	lsrs	r3, r2
 8000b12:	1e46      	subs	r6, r0, #1
 8000b14:	41b0      	sbcs	r0, r6
 8000b16:	449c      	add	ip, r3
 8000b18:	4305      	orrs	r5, r0
 8000b1a:	19ed      	adds	r5, r5, r7
 8000b1c:	42bd      	cmp	r5, r7
 8000b1e:	419b      	sbcs	r3, r3
 8000b20:	425b      	negs	r3, r3
 8000b22:	4463      	add	r3, ip
 8000b24:	4698      	mov	r8, r3
 8000b26:	000e      	movs	r6, r1
 8000b28:	e07f      	b.n	8000c2a <__aeabi_dadd+0x3fe>
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <__aeabi_dadd+0x378>)
 8000b2c:	1a76      	subs	r6, r6, r1
 8000b2e:	4013      	ands	r3, r2
 8000b30:	4698      	mov	r8, r3
 8000b32:	e6f5      	b.n	8000920 <__aeabi_dadd+0xf4>
 8000b34:	0028      	movs	r0, r5
 8000b36:	f001 fd61 	bl	80025fc <__clzsi2>
 8000b3a:	0001      	movs	r1, r0
 8000b3c:	3118      	adds	r1, #24
 8000b3e:	291f      	cmp	r1, #31
 8000b40:	dc00      	bgt.n	8000b44 <__aeabi_dadd+0x318>
 8000b42:	e6cf      	b.n	80008e4 <__aeabi_dadd+0xb8>
 8000b44:	002b      	movs	r3, r5
 8000b46:	3808      	subs	r0, #8
 8000b48:	4083      	lsls	r3, r0
 8000b4a:	2500      	movs	r5, #0
 8000b4c:	e6d2      	b.n	80008f4 <__aeabi_dadd+0xc8>
 8000b4e:	4662      	mov	r2, ip
 8000b50:	433a      	orrs	r2, r7
 8000b52:	0011      	movs	r1, r2
 8000b54:	1e4f      	subs	r7, r1, #1
 8000b56:	41b9      	sbcs	r1, r7
 8000b58:	e6ac      	b.n	80008b4 <__aeabi_dadd+0x88>
 8000b5a:	4649      	mov	r1, r9
 8000b5c:	0758      	lsls	r0, r3, #29
 8000b5e:	08c9      	lsrs	r1, r1, #3
 8000b60:	4301      	orrs	r1, r0
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	e787      	b.n	8000a76 <__aeabi_dadd+0x24a>
 8000b66:	4649      	mov	r1, r9
 8000b68:	075a      	lsls	r2, r3, #29
 8000b6a:	08c9      	lsrs	r1, r1, #3
 8000b6c:	4311      	orrs	r1, r2
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	e7a6      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000b72:	490d      	ldr	r1, [pc, #52]	; (8000ba8 <__aeabi_dadd+0x37c>)
 8000b74:	1c70      	adds	r0, r6, #1
 8000b76:	4208      	tst	r0, r1
 8000b78:	d000      	beq.n	8000b7c <__aeabi_dadd+0x350>
 8000b7a:	e0bb      	b.n	8000cf4 <__aeabi_dadd+0x4c8>
 8000b7c:	2e00      	cmp	r6, #0
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_dadd+0x356>
 8000b80:	e114      	b.n	8000dac <__aeabi_dadd+0x580>
 8000b82:	4649      	mov	r1, r9
 8000b84:	4319      	orrs	r1, r3
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dadd+0x35e>
 8000b88:	e175      	b.n	8000e76 <__aeabi_dadd+0x64a>
 8000b8a:	0029      	movs	r1, r5
 8000b8c:	4339      	orrs	r1, r7
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_dadd+0x366>
 8000b90:	e17e      	b.n	8000e90 <__aeabi_dadd+0x664>
 8000b92:	4649      	mov	r1, r9
 8000b94:	0758      	lsls	r0, r3, #29
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	4301      	orrs	r1, r0
 8000b9a:	08db      	lsrs	r3, r3, #3
 8000b9c:	e76e      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	000007ff 	.word	0x000007ff
 8000ba4:	ff7fffff 	.word	0xff7fffff
 8000ba8:	000007fe 	.word	0x000007fe
 8000bac:	4649      	mov	r1, r9
 8000bae:	1bcd      	subs	r5, r1, r7
 8000bb0:	4661      	mov	r1, ip
 8000bb2:	1a58      	subs	r0, r3, r1
 8000bb4:	45a9      	cmp	r9, r5
 8000bb6:	4189      	sbcs	r1, r1
 8000bb8:	4249      	negs	r1, r1
 8000bba:	4688      	mov	r8, r1
 8000bbc:	0001      	movs	r1, r0
 8000bbe:	4640      	mov	r0, r8
 8000bc0:	1a09      	subs	r1, r1, r0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	0209      	lsls	r1, r1, #8
 8000bc6:	d500      	bpl.n	8000bca <__aeabi_dadd+0x39e>
 8000bc8:	e0a6      	b.n	8000d18 <__aeabi_dadd+0x4ec>
 8000bca:	4641      	mov	r1, r8
 8000bcc:	4329      	orrs	r1, r5
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_dadd+0x3a6>
 8000bd0:	e67f      	b.n	80008d2 <__aeabi_dadd+0xa6>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	e751      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000bd8:	4cc7      	ldr	r4, [pc, #796]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x3b4>
 8000bde:	e0c7      	b.n	8000d70 <__aeabi_dadd+0x544>
 8000be0:	2480      	movs	r4, #128	; 0x80
 8000be2:	0424      	lsls	r4, r4, #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	2a38      	cmp	r2, #56	; 0x38
 8000be8:	dc54      	bgt.n	8000c94 <__aeabi_dadd+0x468>
 8000bea:	2a1f      	cmp	r2, #31
 8000bec:	dd00      	ble.n	8000bf0 <__aeabi_dadd+0x3c4>
 8000bee:	e0cc      	b.n	8000d8a <__aeabi_dadd+0x55e>
 8000bf0:	2420      	movs	r4, #32
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	1aa4      	subs	r4, r4, r2
 8000bf6:	001d      	movs	r5, r3
 8000bf8:	464e      	mov	r6, r9
 8000bfa:	40a0      	lsls	r0, r4
 8000bfc:	40d6      	lsrs	r6, r2
 8000bfe:	40a5      	lsls	r5, r4
 8000c00:	0004      	movs	r4, r0
 8000c02:	40d3      	lsrs	r3, r2
 8000c04:	4662      	mov	r2, ip
 8000c06:	4335      	orrs	r5, r6
 8000c08:	1e66      	subs	r6, r4, #1
 8000c0a:	41b4      	sbcs	r4, r6
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	469c      	mov	ip, r3
 8000c10:	4325      	orrs	r5, r4
 8000c12:	e044      	b.n	8000c9e <__aeabi_dadd+0x472>
 8000c14:	4662      	mov	r2, ip
 8000c16:	433a      	orrs	r2, r7
 8000c18:	0015      	movs	r5, r2
 8000c1a:	1e6f      	subs	r7, r5, #1
 8000c1c:	41bd      	sbcs	r5, r7
 8000c1e:	444d      	add	r5, r9
 8000c20:	454d      	cmp	r5, r9
 8000c22:	4189      	sbcs	r1, r1
 8000c24:	4249      	negs	r1, r1
 8000c26:	4688      	mov	r8, r1
 8000c28:	4498      	add	r8, r3
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	d400      	bmi.n	8000c32 <__aeabi_dadd+0x406>
 8000c30:	e718      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000c32:	4bb1      	ldr	r3, [pc, #708]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000c34:	3601      	adds	r6, #1
 8000c36:	429e      	cmp	r6, r3
 8000c38:	d049      	beq.n	8000cce <__aeabi_dadd+0x4a2>
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	4baf      	ldr	r3, [pc, #700]	; (8000efc <__aeabi_dadd+0x6d0>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	401a      	ands	r2, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	086a      	lsrs	r2, r5, #1
 8000c46:	400d      	ands	r5, r1
 8000c48:	4315      	orrs	r5, r2
 8000c4a:	07d9      	lsls	r1, r3, #31
 8000c4c:	085b      	lsrs	r3, r3, #1
 8000c4e:	4698      	mov	r8, r3
 8000c50:	430d      	orrs	r5, r1
 8000c52:	e665      	b.n	8000920 <__aeabi_dadd+0xf4>
 8000c54:	0018      	movs	r0, r3
 8000c56:	3e1f      	subs	r6, #31
 8000c58:	40f0      	lsrs	r0, r6
 8000c5a:	2a20      	cmp	r2, #32
 8000c5c:	d003      	beq.n	8000c66 <__aeabi_dadd+0x43a>
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	4093      	lsls	r3, r2
 8000c64:	431d      	orrs	r5, r3
 8000c66:	1e69      	subs	r1, r5, #1
 8000c68:	418d      	sbcs	r5, r1
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	4698      	mov	r8, r3
 8000c70:	4305      	orrs	r5, r0
 8000c72:	e6f7      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000c74:	0011      	movs	r1, r2
 8000c76:	4665      	mov	r5, ip
 8000c78:	3920      	subs	r1, #32
 8000c7a:	40cd      	lsrs	r5, r1
 8000c7c:	2a20      	cmp	r2, #32
 8000c7e:	d004      	beq.n	8000c8a <__aeabi_dadd+0x45e>
 8000c80:	2040      	movs	r0, #64	; 0x40
 8000c82:	4661      	mov	r1, ip
 8000c84:	1a82      	subs	r2, r0, r2
 8000c86:	4091      	lsls	r1, r2
 8000c88:	430f      	orrs	r7, r1
 8000c8a:	0039      	movs	r1, r7
 8000c8c:	1e4f      	subs	r7, r1, #1
 8000c8e:	41b9      	sbcs	r1, r7
 8000c90:	4329      	orrs	r1, r5
 8000c92:	e60f      	b.n	80008b4 <__aeabi_dadd+0x88>
 8000c94:	464a      	mov	r2, r9
 8000c96:	4313      	orrs	r3, r2
 8000c98:	001d      	movs	r5, r3
 8000c9a:	1e6b      	subs	r3, r5, #1
 8000c9c:	419d      	sbcs	r5, r3
 8000c9e:	1b7d      	subs	r5, r7, r5
 8000ca0:	42af      	cmp	r7, r5
 8000ca2:	419b      	sbcs	r3, r3
 8000ca4:	4662      	mov	r2, ip
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	4698      	mov	r8, r3
 8000cac:	4654      	mov	r4, sl
 8000cae:	000e      	movs	r6, r1
 8000cb0:	e607      	b.n	80008c2 <__aeabi_dadd+0x96>
 8000cb2:	4648      	mov	r0, r9
 8000cb4:	4318      	orrs	r0, r3
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x48e>
 8000cb8:	e0b3      	b.n	8000e22 <__aeabi_dadd+0x5f6>
 8000cba:	1e50      	subs	r0, r2, #1
 8000cbc:	2a01      	cmp	r2, #1
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0x496>
 8000cc0:	e10d      	b.n	8000ede <__aeabi_dadd+0x6b2>
 8000cc2:	4d8d      	ldr	r5, [pc, #564]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000cc4:	42aa      	cmp	r2, r5
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x49e>
 8000cc8:	e0a5      	b.n	8000e16 <__aeabi_dadd+0x5ea>
 8000cca:	0002      	movs	r2, r0
 8000ccc:	e710      	b.n	8000af0 <__aeabi_dadd+0x2c4>
 8000cce:	0032      	movs	r2, r6
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	e644      	b.n	8000960 <__aeabi_dadd+0x134>
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	0038      	movs	r0, r7
 8000cda:	1a89      	subs	r1, r1, r2
 8000cdc:	4665      	mov	r5, ip
 8000cde:	408f      	lsls	r7, r1
 8000ce0:	408d      	lsls	r5, r1
 8000ce2:	40d0      	lsrs	r0, r2
 8000ce4:	1e79      	subs	r1, r7, #1
 8000ce6:	418f      	sbcs	r7, r1
 8000ce8:	4305      	orrs	r5, r0
 8000cea:	433d      	orrs	r5, r7
 8000cec:	4667      	mov	r7, ip
 8000cee:	40d7      	lsrs	r7, r2
 8000cf0:	19db      	adds	r3, r3, r7
 8000cf2:	e794      	b.n	8000c1e <__aeabi_dadd+0x3f2>
 8000cf4:	4a80      	ldr	r2, [pc, #512]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x4d0>
 8000cfa:	e0ec      	b.n	8000ed6 <__aeabi_dadd+0x6aa>
 8000cfc:	0039      	movs	r1, r7
 8000cfe:	4449      	add	r1, r9
 8000d00:	4549      	cmp	r1, r9
 8000d02:	4192      	sbcs	r2, r2
 8000d04:	4463      	add	r3, ip
 8000d06:	4252      	negs	r2, r2
 8000d08:	189b      	adds	r3, r3, r2
 8000d0a:	07dd      	lsls	r5, r3, #31
 8000d0c:	0849      	lsrs	r1, r1, #1
 8000d0e:	085b      	lsrs	r3, r3, #1
 8000d10:	4698      	mov	r8, r3
 8000d12:	0006      	movs	r6, r0
 8000d14:	430d      	orrs	r5, r1
 8000d16:	e6a5      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000d18:	464a      	mov	r2, r9
 8000d1a:	1abd      	subs	r5, r7, r2
 8000d1c:	42af      	cmp	r7, r5
 8000d1e:	4189      	sbcs	r1, r1
 8000d20:	4662      	mov	r2, ip
 8000d22:	4249      	negs	r1, r1
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	1a5b      	subs	r3, r3, r1
 8000d28:	4698      	mov	r8, r3
 8000d2a:	4654      	mov	r4, sl
 8000d2c:	e5d1      	b.n	80008d2 <__aeabi_dadd+0xa6>
 8000d2e:	076c      	lsls	r4, r5, #29
 8000d30:	08f9      	lsrs	r1, r7, #3
 8000d32:	4321      	orrs	r1, r4
 8000d34:	08eb      	lsrs	r3, r5, #3
 8000d36:	0004      	movs	r4, r0
 8000d38:	e69d      	b.n	8000a76 <__aeabi_dadd+0x24a>
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	d175      	bne.n	8000e2c <__aeabi_dadd+0x600>
 8000d40:	4661      	mov	r1, ip
 8000d42:	4339      	orrs	r1, r7
 8000d44:	d114      	bne.n	8000d70 <__aeabi_dadd+0x544>
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	2400      	movs	r4, #0
 8000d4a:	031b      	lsls	r3, r3, #12
 8000d4c:	e6bc      	b.n	8000ac8 <__aeabi_dadd+0x29c>
 8000d4e:	464a      	mov	r2, r9
 8000d50:	1bd5      	subs	r5, r2, r7
 8000d52:	45a9      	cmp	r9, r5
 8000d54:	4189      	sbcs	r1, r1
 8000d56:	4662      	mov	r2, ip
 8000d58:	4249      	negs	r1, r1
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	4698      	mov	r8, r3
 8000d60:	2601      	movs	r6, #1
 8000d62:	e5ae      	b.n	80008c2 <__aeabi_dadd+0x96>
 8000d64:	464a      	mov	r2, r9
 8000d66:	08d1      	lsrs	r1, r2, #3
 8000d68:	075a      	lsls	r2, r3, #29
 8000d6a:	4311      	orrs	r1, r2
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	e6a7      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000d70:	4663      	mov	r3, ip
 8000d72:	08f9      	lsrs	r1, r7, #3
 8000d74:	075a      	lsls	r2, r3, #29
 8000d76:	4654      	mov	r4, sl
 8000d78:	4311      	orrs	r1, r2
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	e6a0      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000d7e:	464a      	mov	r2, r9
 8000d80:	4313      	orrs	r3, r2
 8000d82:	001d      	movs	r5, r3
 8000d84:	1e6b      	subs	r3, r5, #1
 8000d86:	419d      	sbcs	r5, r3
 8000d88:	e6c7      	b.n	8000b1a <__aeabi_dadd+0x2ee>
 8000d8a:	0014      	movs	r4, r2
 8000d8c:	001e      	movs	r6, r3
 8000d8e:	3c20      	subs	r4, #32
 8000d90:	40e6      	lsrs	r6, r4
 8000d92:	2a20      	cmp	r2, #32
 8000d94:	d005      	beq.n	8000da2 <__aeabi_dadd+0x576>
 8000d96:	2440      	movs	r4, #64	; 0x40
 8000d98:	1aa2      	subs	r2, r4, r2
 8000d9a:	4093      	lsls	r3, r2
 8000d9c:	464a      	mov	r2, r9
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	4691      	mov	r9, r2
 8000da2:	464d      	mov	r5, r9
 8000da4:	1e6b      	subs	r3, r5, #1
 8000da6:	419d      	sbcs	r5, r3
 8000da8:	4335      	orrs	r5, r6
 8000daa:	e778      	b.n	8000c9e <__aeabi_dadd+0x472>
 8000dac:	464a      	mov	r2, r9
 8000dae:	431a      	orrs	r2, r3
 8000db0:	d000      	beq.n	8000db4 <__aeabi_dadd+0x588>
 8000db2:	e66b      	b.n	8000a8c <__aeabi_dadd+0x260>
 8000db4:	076b      	lsls	r3, r5, #29
 8000db6:	08f9      	lsrs	r1, r7, #3
 8000db8:	4319      	orrs	r1, r3
 8000dba:	08eb      	lsrs	r3, r5, #3
 8000dbc:	e680      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000dbe:	4661      	mov	r1, ip
 8000dc0:	4339      	orrs	r1, r7
 8000dc2:	d054      	beq.n	8000e6e <__aeabi_dadd+0x642>
 8000dc4:	4663      	mov	r3, ip
 8000dc6:	08f9      	lsrs	r1, r7, #3
 8000dc8:	075c      	lsls	r4, r3, #29
 8000dca:	4321      	orrs	r1, r4
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	0004      	movs	r4, r0
 8000dd0:	e654      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000dd2:	464a      	mov	r2, r9
 8000dd4:	1abd      	subs	r5, r7, r2
 8000dd6:	42af      	cmp	r7, r5
 8000dd8:	4189      	sbcs	r1, r1
 8000dda:	4662      	mov	r2, ip
 8000ddc:	4249      	negs	r1, r1
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	4698      	mov	r8, r3
 8000de4:	0004      	movs	r4, r0
 8000de6:	2601      	movs	r6, #1
 8000de8:	e56b      	b.n	80008c2 <__aeabi_dadd+0x96>
 8000dea:	464a      	mov	r2, r9
 8000dec:	1bd5      	subs	r5, r2, r7
 8000dee:	45a9      	cmp	r9, r5
 8000df0:	4189      	sbcs	r1, r1
 8000df2:	4662      	mov	r2, ip
 8000df4:	4249      	negs	r1, r1
 8000df6:	1a9a      	subs	r2, r3, r2
 8000df8:	1a52      	subs	r2, r2, r1
 8000dfa:	4690      	mov	r8, r2
 8000dfc:	0212      	lsls	r2, r2, #8
 8000dfe:	d532      	bpl.n	8000e66 <__aeabi_dadd+0x63a>
 8000e00:	464a      	mov	r2, r9
 8000e02:	1abd      	subs	r5, r7, r2
 8000e04:	42af      	cmp	r7, r5
 8000e06:	4189      	sbcs	r1, r1
 8000e08:	4662      	mov	r2, ip
 8000e0a:	4249      	negs	r1, r1
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	1a5b      	subs	r3, r3, r1
 8000e10:	4698      	mov	r8, r3
 8000e12:	0004      	movs	r4, r0
 8000e14:	e584      	b.n	8000920 <__aeabi_dadd+0xf4>
 8000e16:	4663      	mov	r3, ip
 8000e18:	08f9      	lsrs	r1, r7, #3
 8000e1a:	075a      	lsls	r2, r3, #29
 8000e1c:	4311      	orrs	r1, r2
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	e64e      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000e22:	08f9      	lsrs	r1, r7, #3
 8000e24:	0768      	lsls	r0, r5, #29
 8000e26:	4301      	orrs	r1, r0
 8000e28:	08eb      	lsrs	r3, r5, #3
 8000e2a:	e624      	b.n	8000a76 <__aeabi_dadd+0x24a>
 8000e2c:	4662      	mov	r2, ip
 8000e2e:	433a      	orrs	r2, r7
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dadd+0x608>
 8000e32:	e698      	b.n	8000b66 <__aeabi_dadd+0x33a>
 8000e34:	464a      	mov	r2, r9
 8000e36:	08d1      	lsrs	r1, r2, #3
 8000e38:	075a      	lsls	r2, r3, #29
 8000e3a:	4311      	orrs	r1, r2
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	031b      	lsls	r3, r3, #12
 8000e42:	421a      	tst	r2, r3
 8000e44:	d008      	beq.n	8000e58 <__aeabi_dadd+0x62c>
 8000e46:	4660      	mov	r0, ip
 8000e48:	08c5      	lsrs	r5, r0, #3
 8000e4a:	421d      	tst	r5, r3
 8000e4c:	d104      	bne.n	8000e58 <__aeabi_dadd+0x62c>
 8000e4e:	4654      	mov	r4, sl
 8000e50:	002a      	movs	r2, r5
 8000e52:	08f9      	lsrs	r1, r7, #3
 8000e54:	0743      	lsls	r3, r0, #29
 8000e56:	4319      	orrs	r1, r3
 8000e58:	0f4b      	lsrs	r3, r1, #29
 8000e5a:	00c9      	lsls	r1, r1, #3
 8000e5c:	075b      	lsls	r3, r3, #29
 8000e5e:	08c9      	lsrs	r1, r1, #3
 8000e60:	4319      	orrs	r1, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	e62c      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000e66:	4641      	mov	r1, r8
 8000e68:	4329      	orrs	r1, r5
 8000e6a:	d000      	beq.n	8000e6e <__aeabi_dadd+0x642>
 8000e6c:	e5fa      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	000a      	movs	r2, r1
 8000e72:	2400      	movs	r4, #0
 8000e74:	e602      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000e76:	076b      	lsls	r3, r5, #29
 8000e78:	08f9      	lsrs	r1, r7, #3
 8000e7a:	4319      	orrs	r1, r3
 8000e7c:	08eb      	lsrs	r3, r5, #3
 8000e7e:	e5fd      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000e80:	4663      	mov	r3, ip
 8000e82:	08f9      	lsrs	r1, r7, #3
 8000e84:	075b      	lsls	r3, r3, #29
 8000e86:	4319      	orrs	r1, r3
 8000e88:	4663      	mov	r3, ip
 8000e8a:	0004      	movs	r4, r0
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	e617      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000e90:	003d      	movs	r5, r7
 8000e92:	444d      	add	r5, r9
 8000e94:	4463      	add	r3, ip
 8000e96:	454d      	cmp	r5, r9
 8000e98:	4189      	sbcs	r1, r1
 8000e9a:	4698      	mov	r8, r3
 8000e9c:	4249      	negs	r1, r1
 8000e9e:	4488      	add	r8, r1
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	d400      	bmi.n	8000ea8 <__aeabi_dadd+0x67c>
 8000ea6:	e5dd      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000ea8:	4642      	mov	r2, r8
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <__aeabi_dadd+0x6d0>)
 8000eac:	2601      	movs	r6, #1
 8000eae:	401a      	ands	r2, r3
 8000eb0:	4690      	mov	r8, r2
 8000eb2:	e5d7      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000eb4:	0010      	movs	r0, r2
 8000eb6:	001e      	movs	r6, r3
 8000eb8:	3820      	subs	r0, #32
 8000eba:	40c6      	lsrs	r6, r0
 8000ebc:	2a20      	cmp	r2, #32
 8000ebe:	d005      	beq.n	8000ecc <__aeabi_dadd+0x6a0>
 8000ec0:	2040      	movs	r0, #64	; 0x40
 8000ec2:	1a82      	subs	r2, r0, r2
 8000ec4:	4093      	lsls	r3, r2
 8000ec6:	464a      	mov	r2, r9
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	4691      	mov	r9, r2
 8000ecc:	464d      	mov	r5, r9
 8000ece:	1e6b      	subs	r3, r5, #1
 8000ed0:	419d      	sbcs	r5, r3
 8000ed2:	4335      	orrs	r5, r6
 8000ed4:	e621      	b.n	8000b1a <__aeabi_dadd+0x2ee>
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	e540      	b.n	8000960 <__aeabi_dadd+0x134>
 8000ede:	464a      	mov	r2, r9
 8000ee0:	19d5      	adds	r5, r2, r7
 8000ee2:	42bd      	cmp	r5, r7
 8000ee4:	4189      	sbcs	r1, r1
 8000ee6:	4463      	add	r3, ip
 8000ee8:	4698      	mov	r8, r3
 8000eea:	4249      	negs	r1, r1
 8000eec:	4488      	add	r8, r1
 8000eee:	e5b3      	b.n	8000a58 <__aeabi_dadd+0x22c>
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4a01      	ldr	r2, [pc, #4]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000ef4:	000b      	movs	r3, r1
 8000ef6:	e533      	b.n	8000960 <__aeabi_dadd+0x134>
 8000ef8:	000007ff 	.word	0x000007ff
 8000efc:	ff7fffff 	.word	0xff7fffff

08000f00 <__aeabi_ddiv>:
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	4657      	mov	r7, sl
 8000f04:	464e      	mov	r6, r9
 8000f06:	4645      	mov	r5, r8
 8000f08:	46de      	mov	lr, fp
 8000f0a:	b5e0      	push	{r5, r6, r7, lr}
 8000f0c:	4681      	mov	r9, r0
 8000f0e:	0005      	movs	r5, r0
 8000f10:	030c      	lsls	r4, r1, #12
 8000f12:	0048      	lsls	r0, r1, #1
 8000f14:	4692      	mov	sl, r2
 8000f16:	001f      	movs	r7, r3
 8000f18:	b085      	sub	sp, #20
 8000f1a:	0b24      	lsrs	r4, r4, #12
 8000f1c:	0d40      	lsrs	r0, r0, #21
 8000f1e:	0fce      	lsrs	r6, r1, #31
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d059      	beq.n	8000fd8 <__aeabi_ddiv+0xd8>
 8000f24:	4b87      	ldr	r3, [pc, #540]	; (8001144 <__aeabi_ddiv+0x244>)
 8000f26:	4298      	cmp	r0, r3
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x2c>
 8000f2a:	e098      	b.n	800105e <__aeabi_ddiv+0x15e>
 8000f2c:	0f6b      	lsrs	r3, r5, #29
 8000f2e:	00e4      	lsls	r4, r4, #3
 8000f30:	431c      	orrs	r4, r3
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	4323      	orrs	r3, r4
 8000f38:	4698      	mov	r8, r3
 8000f3a:	4b83      	ldr	r3, [pc, #524]	; (8001148 <__aeabi_ddiv+0x248>)
 8000f3c:	00ed      	lsls	r5, r5, #3
 8000f3e:	469b      	mov	fp, r3
 8000f40:	2300      	movs	r3, #0
 8000f42:	4699      	mov	r9, r3
 8000f44:	4483      	add	fp, r0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	033c      	lsls	r4, r7, #12
 8000f4a:	007b      	lsls	r3, r7, #1
 8000f4c:	4650      	mov	r0, sl
 8000f4e:	0b24      	lsrs	r4, r4, #12
 8000f50:	0d5b      	lsrs	r3, r3, #21
 8000f52:	0fff      	lsrs	r7, r7, #31
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d067      	beq.n	8001028 <__aeabi_ddiv+0x128>
 8000f58:	4a7a      	ldr	r2, [pc, #488]	; (8001144 <__aeabi_ddiv+0x244>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d018      	beq.n	8000f90 <__aeabi_ddiv+0x90>
 8000f5e:	497a      	ldr	r1, [pc, #488]	; (8001148 <__aeabi_ddiv+0x248>)
 8000f60:	0f42      	lsrs	r2, r0, #29
 8000f62:	468c      	mov	ip, r1
 8000f64:	00e4      	lsls	r4, r4, #3
 8000f66:	4659      	mov	r1, fp
 8000f68:	4314      	orrs	r4, r2
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	4463      	add	r3, ip
 8000f6e:	0412      	lsls	r2, r2, #16
 8000f70:	1acb      	subs	r3, r1, r3
 8000f72:	4314      	orrs	r4, r2
 8000f74:	469b      	mov	fp, r3
 8000f76:	00c2      	lsls	r2, r0, #3
 8000f78:	2000      	movs	r0, #0
 8000f7a:	0033      	movs	r3, r6
 8000f7c:	407b      	eors	r3, r7
 8000f7e:	469a      	mov	sl, r3
 8000f80:	464b      	mov	r3, r9
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d900      	bls.n	8000f88 <__aeabi_ddiv+0x88>
 8000f86:	e0ef      	b.n	8001168 <__aeabi_ddiv+0x268>
 8000f88:	4970      	ldr	r1, [pc, #448]	; (800114c <__aeabi_ddiv+0x24c>)
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	58cb      	ldr	r3, [r1, r3]
 8000f8e:	469f      	mov	pc, r3
 8000f90:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <__aeabi_ddiv+0x250>)
 8000f92:	4652      	mov	r2, sl
 8000f94:	469c      	mov	ip, r3
 8000f96:	4322      	orrs	r2, r4
 8000f98:	44e3      	add	fp, ip
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_ddiv+0xa0>
 8000f9e:	e095      	b.n	80010cc <__aeabi_ddiv+0x1cc>
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	4319      	orrs	r1, r3
 8000fa6:	4689      	mov	r9, r1
 8000fa8:	2400      	movs	r4, #0
 8000faa:	2002      	movs	r0, #2
 8000fac:	e7e5      	b.n	8000f7a <__aeabi_ddiv+0x7a>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2400      	movs	r4, #0
 8000fb2:	2500      	movs	r5, #0
 8000fb4:	4652      	mov	r2, sl
 8000fb6:	051b      	lsls	r3, r3, #20
 8000fb8:	4323      	orrs	r3, r4
 8000fba:	07d2      	lsls	r2, r2, #31
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	0028      	movs	r0, r5
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	b005      	add	sp, #20
 8000fc4:	bcf0      	pop	{r4, r5, r6, r7}
 8000fc6:	46bb      	mov	fp, r7
 8000fc8:	46b2      	mov	sl, r6
 8000fca:	46a9      	mov	r9, r5
 8000fcc:	46a0      	mov	r8, r4
 8000fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd0:	2400      	movs	r4, #0
 8000fd2:	2500      	movs	r5, #0
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <__aeabi_ddiv+0x244>)
 8000fd6:	e7ed      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8000fd8:	464b      	mov	r3, r9
 8000fda:	4323      	orrs	r3, r4
 8000fdc:	4698      	mov	r8, r3
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0xe2>
 8000fe0:	e089      	b.n	80010f6 <__aeabi_ddiv+0x1f6>
 8000fe2:	2c00      	cmp	r4, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0xe8>
 8000fe6:	e1e0      	b.n	80013aa <__aeabi_ddiv+0x4aa>
 8000fe8:	0020      	movs	r0, r4
 8000fea:	f001 fb07 	bl	80025fc <__clzsi2>
 8000fee:	0001      	movs	r1, r0
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	390b      	subs	r1, #11
 8000ff4:	231d      	movs	r3, #29
 8000ff6:	1a5b      	subs	r3, r3, r1
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	0010      	movs	r0, r2
 8000ffc:	40d9      	lsrs	r1, r3
 8000ffe:	3808      	subs	r0, #8
 8001000:	4084      	lsls	r4, r0
 8001002:	000b      	movs	r3, r1
 8001004:	464d      	mov	r5, r9
 8001006:	4323      	orrs	r3, r4
 8001008:	4698      	mov	r8, r3
 800100a:	4085      	lsls	r5, r0
 800100c:	4851      	ldr	r0, [pc, #324]	; (8001154 <__aeabi_ddiv+0x254>)
 800100e:	033c      	lsls	r4, r7, #12
 8001010:	1a83      	subs	r3, r0, r2
 8001012:	469b      	mov	fp, r3
 8001014:	2300      	movs	r3, #0
 8001016:	4699      	mov	r9, r3
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	007b      	lsls	r3, r7, #1
 800101c:	4650      	mov	r0, sl
 800101e:	0b24      	lsrs	r4, r4, #12
 8001020:	0d5b      	lsrs	r3, r3, #21
 8001022:	0fff      	lsrs	r7, r7, #31
 8001024:	2b00      	cmp	r3, #0
 8001026:	d197      	bne.n	8000f58 <__aeabi_ddiv+0x58>
 8001028:	4652      	mov	r2, sl
 800102a:	4322      	orrs	r2, r4
 800102c:	d055      	beq.n	80010da <__aeabi_ddiv+0x1da>
 800102e:	2c00      	cmp	r4, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x134>
 8001032:	e1ca      	b.n	80013ca <__aeabi_ddiv+0x4ca>
 8001034:	0020      	movs	r0, r4
 8001036:	f001 fae1 	bl	80025fc <__clzsi2>
 800103a:	0002      	movs	r2, r0
 800103c:	3a0b      	subs	r2, #11
 800103e:	231d      	movs	r3, #29
 8001040:	0001      	movs	r1, r0
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	4652      	mov	r2, sl
 8001046:	3908      	subs	r1, #8
 8001048:	40da      	lsrs	r2, r3
 800104a:	408c      	lsls	r4, r1
 800104c:	4314      	orrs	r4, r2
 800104e:	4652      	mov	r2, sl
 8001050:	408a      	lsls	r2, r1
 8001052:	4b41      	ldr	r3, [pc, #260]	; (8001158 <__aeabi_ddiv+0x258>)
 8001054:	4458      	add	r0, fp
 8001056:	469b      	mov	fp, r3
 8001058:	4483      	add	fp, r0
 800105a:	2000      	movs	r0, #0
 800105c:	e78d      	b.n	8000f7a <__aeabi_ddiv+0x7a>
 800105e:	464b      	mov	r3, r9
 8001060:	4323      	orrs	r3, r4
 8001062:	4698      	mov	r8, r3
 8001064:	d140      	bne.n	80010e8 <__aeabi_ddiv+0x1e8>
 8001066:	2308      	movs	r3, #8
 8001068:	4699      	mov	r9, r3
 800106a:	3b06      	subs	r3, #6
 800106c:	2500      	movs	r5, #0
 800106e:	4683      	mov	fp, r0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	e769      	b.n	8000f48 <__aeabi_ddiv+0x48>
 8001074:	46b2      	mov	sl, r6
 8001076:	9b00      	ldr	r3, [sp, #0]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d0a9      	beq.n	8000fd0 <__aeabi_ddiv+0xd0>
 800107c:	2b03      	cmp	r3, #3
 800107e:	d100      	bne.n	8001082 <__aeabi_ddiv+0x182>
 8001080:	e211      	b.n	80014a6 <__aeabi_ddiv+0x5a6>
 8001082:	2b01      	cmp	r3, #1
 8001084:	d093      	beq.n	8000fae <__aeabi_ddiv+0xae>
 8001086:	4a35      	ldr	r2, [pc, #212]	; (800115c <__aeabi_ddiv+0x25c>)
 8001088:	445a      	add	r2, fp
 800108a:	2a00      	cmp	r2, #0
 800108c:	dc00      	bgt.n	8001090 <__aeabi_ddiv+0x190>
 800108e:	e13c      	b.n	800130a <__aeabi_ddiv+0x40a>
 8001090:	076b      	lsls	r3, r5, #29
 8001092:	d000      	beq.n	8001096 <__aeabi_ddiv+0x196>
 8001094:	e1a7      	b.n	80013e6 <__aeabi_ddiv+0x4e6>
 8001096:	08ed      	lsrs	r5, r5, #3
 8001098:	4643      	mov	r3, r8
 800109a:	01db      	lsls	r3, r3, #7
 800109c:	d506      	bpl.n	80010ac <__aeabi_ddiv+0x1ac>
 800109e:	4642      	mov	r2, r8
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <__aeabi_ddiv+0x260>)
 80010a2:	401a      	ands	r2, r3
 80010a4:	4690      	mov	r8, r2
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	445a      	add	r2, fp
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <__aeabi_ddiv+0x264>)
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dc8e      	bgt.n	8000fd0 <__aeabi_ddiv+0xd0>
 80010b2:	4643      	mov	r3, r8
 80010b4:	0552      	lsls	r2, r2, #21
 80010b6:	0758      	lsls	r0, r3, #29
 80010b8:	025c      	lsls	r4, r3, #9
 80010ba:	4305      	orrs	r5, r0
 80010bc:	0b24      	lsrs	r4, r4, #12
 80010be:	0d53      	lsrs	r3, r2, #21
 80010c0:	e778      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 80010c2:	46ba      	mov	sl, r7
 80010c4:	46a0      	mov	r8, r4
 80010c6:	0015      	movs	r5, r2
 80010c8:	9000      	str	r0, [sp, #0]
 80010ca:	e7d4      	b.n	8001076 <__aeabi_ddiv+0x176>
 80010cc:	464a      	mov	r2, r9
 80010ce:	2303      	movs	r3, #3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	4691      	mov	r9, r2
 80010d4:	2003      	movs	r0, #3
 80010d6:	4652      	mov	r2, sl
 80010d8:	e74f      	b.n	8000f7a <__aeabi_ddiv+0x7a>
 80010da:	4649      	mov	r1, r9
 80010dc:	2301      	movs	r3, #1
 80010de:	4319      	orrs	r1, r3
 80010e0:	4689      	mov	r9, r1
 80010e2:	2400      	movs	r4, #0
 80010e4:	2001      	movs	r0, #1
 80010e6:	e748      	b.n	8000f7a <__aeabi_ddiv+0x7a>
 80010e8:	230c      	movs	r3, #12
 80010ea:	4699      	mov	r9, r3
 80010ec:	3b09      	subs	r3, #9
 80010ee:	46a0      	mov	r8, r4
 80010f0:	4683      	mov	fp, r0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	e728      	b.n	8000f48 <__aeabi_ddiv+0x48>
 80010f6:	2304      	movs	r3, #4
 80010f8:	4699      	mov	r9, r3
 80010fa:	2300      	movs	r3, #0
 80010fc:	469b      	mov	fp, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	2500      	movs	r5, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	e720      	b.n	8000f48 <__aeabi_ddiv+0x48>
 8001106:	2300      	movs	r3, #0
 8001108:	2480      	movs	r4, #128	; 0x80
 800110a:	469a      	mov	sl, r3
 800110c:	2500      	movs	r5, #0
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <__aeabi_ddiv+0x244>)
 8001110:	0324      	lsls	r4, r4, #12
 8001112:	e74f      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	4641      	mov	r1, r8
 8001118:	031b      	lsls	r3, r3, #12
 800111a:	4219      	tst	r1, r3
 800111c:	d008      	beq.n	8001130 <__aeabi_ddiv+0x230>
 800111e:	421c      	tst	r4, r3
 8001120:	d106      	bne.n	8001130 <__aeabi_ddiv+0x230>
 8001122:	431c      	orrs	r4, r3
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	46ba      	mov	sl, r7
 8001128:	0015      	movs	r5, r2
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <__aeabi_ddiv+0x244>)
 800112c:	0b24      	lsrs	r4, r4, #12
 800112e:	e741      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	4643      	mov	r3, r8
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	431c      	orrs	r4, r3
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	46b2      	mov	sl, r6
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <__aeabi_ddiv+0x244>)
 800113e:	0b24      	lsrs	r4, r4, #12
 8001140:	e738      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff
 8001148:	fffffc01 	.word	0xfffffc01
 800114c:	0800aaf4 	.word	0x0800aaf4
 8001150:	fffff801 	.word	0xfffff801
 8001154:	fffffc0d 	.word	0xfffffc0d
 8001158:	000003f3 	.word	0x000003f3
 800115c:	000003ff 	.word	0x000003ff
 8001160:	feffffff 	.word	0xfeffffff
 8001164:	000007fe 	.word	0x000007fe
 8001168:	4544      	cmp	r4, r8
 800116a:	d200      	bcs.n	800116e <__aeabi_ddiv+0x26e>
 800116c:	e116      	b.n	800139c <__aeabi_ddiv+0x49c>
 800116e:	d100      	bne.n	8001172 <__aeabi_ddiv+0x272>
 8001170:	e111      	b.n	8001396 <__aeabi_ddiv+0x496>
 8001172:	2301      	movs	r3, #1
 8001174:	425b      	negs	r3, r3
 8001176:	469c      	mov	ip, r3
 8001178:	002e      	movs	r6, r5
 800117a:	4640      	mov	r0, r8
 800117c:	2500      	movs	r5, #0
 800117e:	44e3      	add	fp, ip
 8001180:	0223      	lsls	r3, r4, #8
 8001182:	0e14      	lsrs	r4, r2, #24
 8001184:	431c      	orrs	r4, r3
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	4699      	mov	r9, r3
 800118a:	0423      	lsls	r3, r4, #16
 800118c:	0c1f      	lsrs	r7, r3, #16
 800118e:	0212      	lsls	r2, r2, #8
 8001190:	4649      	mov	r1, r9
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	9701      	str	r7, [sp, #4]
 8001196:	f7ff f859 	bl	800024c <__aeabi_uidivmod>
 800119a:	0002      	movs	r2, r0
 800119c:	437a      	muls	r2, r7
 800119e:	040b      	lsls	r3, r1, #16
 80011a0:	0c31      	lsrs	r1, r6, #16
 80011a2:	4680      	mov	r8, r0
 80011a4:	4319      	orrs	r1, r3
 80011a6:	428a      	cmp	r2, r1
 80011a8:	d90b      	bls.n	80011c2 <__aeabi_ddiv+0x2c2>
 80011aa:	2301      	movs	r3, #1
 80011ac:	425b      	negs	r3, r3
 80011ae:	469c      	mov	ip, r3
 80011b0:	1909      	adds	r1, r1, r4
 80011b2:	44e0      	add	r8, ip
 80011b4:	428c      	cmp	r4, r1
 80011b6:	d804      	bhi.n	80011c2 <__aeabi_ddiv+0x2c2>
 80011b8:	428a      	cmp	r2, r1
 80011ba:	d902      	bls.n	80011c2 <__aeabi_ddiv+0x2c2>
 80011bc:	1e83      	subs	r3, r0, #2
 80011be:	4698      	mov	r8, r3
 80011c0:	1909      	adds	r1, r1, r4
 80011c2:	1a88      	subs	r0, r1, r2
 80011c4:	4649      	mov	r1, r9
 80011c6:	f7ff f841 	bl	800024c <__aeabi_uidivmod>
 80011ca:	0409      	lsls	r1, r1, #16
 80011cc:	468c      	mov	ip, r1
 80011ce:	0431      	lsls	r1, r6, #16
 80011d0:	4666      	mov	r6, ip
 80011d2:	9a01      	ldr	r2, [sp, #4]
 80011d4:	0c09      	lsrs	r1, r1, #16
 80011d6:	4342      	muls	r2, r0
 80011d8:	0003      	movs	r3, r0
 80011da:	4331      	orrs	r1, r6
 80011dc:	428a      	cmp	r2, r1
 80011de:	d904      	bls.n	80011ea <__aeabi_ddiv+0x2ea>
 80011e0:	1909      	adds	r1, r1, r4
 80011e2:	3b01      	subs	r3, #1
 80011e4:	428c      	cmp	r4, r1
 80011e6:	d800      	bhi.n	80011ea <__aeabi_ddiv+0x2ea>
 80011e8:	e111      	b.n	800140e <__aeabi_ddiv+0x50e>
 80011ea:	1a89      	subs	r1, r1, r2
 80011ec:	4642      	mov	r2, r8
 80011ee:	9e00      	ldr	r6, [sp, #0]
 80011f0:	0412      	lsls	r2, r2, #16
 80011f2:	431a      	orrs	r2, r3
 80011f4:	0c33      	lsrs	r3, r6, #16
 80011f6:	001f      	movs	r7, r3
 80011f8:	0c10      	lsrs	r0, r2, #16
 80011fa:	4690      	mov	r8, r2
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	0413      	lsls	r3, r2, #16
 8001200:	0432      	lsls	r2, r6, #16
 8001202:	0c16      	lsrs	r6, r2, #16
 8001204:	0032      	movs	r2, r6
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	435a      	muls	r2, r3
 800120a:	9603      	str	r6, [sp, #12]
 800120c:	437b      	muls	r3, r7
 800120e:	4346      	muls	r6, r0
 8001210:	4378      	muls	r0, r7
 8001212:	0c17      	lsrs	r7, r2, #16
 8001214:	46bc      	mov	ip, r7
 8001216:	199b      	adds	r3, r3, r6
 8001218:	4463      	add	r3, ip
 800121a:	429e      	cmp	r6, r3
 800121c:	d903      	bls.n	8001226 <__aeabi_ddiv+0x326>
 800121e:	2680      	movs	r6, #128	; 0x80
 8001220:	0276      	lsls	r6, r6, #9
 8001222:	46b4      	mov	ip, r6
 8001224:	4460      	add	r0, ip
 8001226:	0c1e      	lsrs	r6, r3, #16
 8001228:	1830      	adds	r0, r6, r0
 800122a:	0416      	lsls	r6, r2, #16
 800122c:	041b      	lsls	r3, r3, #16
 800122e:	0c36      	lsrs	r6, r6, #16
 8001230:	199e      	adds	r6, r3, r6
 8001232:	4281      	cmp	r1, r0
 8001234:	d200      	bcs.n	8001238 <__aeabi_ddiv+0x338>
 8001236:	e09c      	b.n	8001372 <__aeabi_ddiv+0x472>
 8001238:	d100      	bne.n	800123c <__aeabi_ddiv+0x33c>
 800123a:	e097      	b.n	800136c <__aeabi_ddiv+0x46c>
 800123c:	1bae      	subs	r6, r5, r6
 800123e:	1a09      	subs	r1, r1, r0
 8001240:	42b5      	cmp	r5, r6
 8001242:	4180      	sbcs	r0, r0
 8001244:	4240      	negs	r0, r0
 8001246:	1a08      	subs	r0, r1, r0
 8001248:	4284      	cmp	r4, r0
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x34e>
 800124c:	e111      	b.n	8001472 <__aeabi_ddiv+0x572>
 800124e:	4649      	mov	r1, r9
 8001250:	f7fe fffc 	bl	800024c <__aeabi_uidivmod>
 8001254:	9a01      	ldr	r2, [sp, #4]
 8001256:	040b      	lsls	r3, r1, #16
 8001258:	4342      	muls	r2, r0
 800125a:	0c31      	lsrs	r1, r6, #16
 800125c:	0005      	movs	r5, r0
 800125e:	4319      	orrs	r1, r3
 8001260:	428a      	cmp	r2, r1
 8001262:	d907      	bls.n	8001274 <__aeabi_ddiv+0x374>
 8001264:	1909      	adds	r1, r1, r4
 8001266:	3d01      	subs	r5, #1
 8001268:	428c      	cmp	r4, r1
 800126a:	d803      	bhi.n	8001274 <__aeabi_ddiv+0x374>
 800126c:	428a      	cmp	r2, r1
 800126e:	d901      	bls.n	8001274 <__aeabi_ddiv+0x374>
 8001270:	1e85      	subs	r5, r0, #2
 8001272:	1909      	adds	r1, r1, r4
 8001274:	1a88      	subs	r0, r1, r2
 8001276:	4649      	mov	r1, r9
 8001278:	f7fe ffe8 	bl	800024c <__aeabi_uidivmod>
 800127c:	0409      	lsls	r1, r1, #16
 800127e:	468c      	mov	ip, r1
 8001280:	0431      	lsls	r1, r6, #16
 8001282:	4666      	mov	r6, ip
 8001284:	9a01      	ldr	r2, [sp, #4]
 8001286:	0c09      	lsrs	r1, r1, #16
 8001288:	4342      	muls	r2, r0
 800128a:	0003      	movs	r3, r0
 800128c:	4331      	orrs	r1, r6
 800128e:	428a      	cmp	r2, r1
 8001290:	d907      	bls.n	80012a2 <__aeabi_ddiv+0x3a2>
 8001292:	1909      	adds	r1, r1, r4
 8001294:	3b01      	subs	r3, #1
 8001296:	428c      	cmp	r4, r1
 8001298:	d803      	bhi.n	80012a2 <__aeabi_ddiv+0x3a2>
 800129a:	428a      	cmp	r2, r1
 800129c:	d901      	bls.n	80012a2 <__aeabi_ddiv+0x3a2>
 800129e:	1e83      	subs	r3, r0, #2
 80012a0:	1909      	adds	r1, r1, r4
 80012a2:	9e03      	ldr	r6, [sp, #12]
 80012a4:	1a89      	subs	r1, r1, r2
 80012a6:	0032      	movs	r2, r6
 80012a8:	042d      	lsls	r5, r5, #16
 80012aa:	431d      	orrs	r5, r3
 80012ac:	9f02      	ldr	r7, [sp, #8]
 80012ae:	042b      	lsls	r3, r5, #16
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	435a      	muls	r2, r3
 80012b4:	437b      	muls	r3, r7
 80012b6:	469c      	mov	ip, r3
 80012b8:	0c28      	lsrs	r0, r5, #16
 80012ba:	4346      	muls	r6, r0
 80012bc:	0c13      	lsrs	r3, r2, #16
 80012be:	44b4      	add	ip, r6
 80012c0:	4463      	add	r3, ip
 80012c2:	4378      	muls	r0, r7
 80012c4:	429e      	cmp	r6, r3
 80012c6:	d903      	bls.n	80012d0 <__aeabi_ddiv+0x3d0>
 80012c8:	2680      	movs	r6, #128	; 0x80
 80012ca:	0276      	lsls	r6, r6, #9
 80012cc:	46b4      	mov	ip, r6
 80012ce:	4460      	add	r0, ip
 80012d0:	0c1e      	lsrs	r6, r3, #16
 80012d2:	0412      	lsls	r2, r2, #16
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	0c12      	lsrs	r2, r2, #16
 80012d8:	1830      	adds	r0, r6, r0
 80012da:	189b      	adds	r3, r3, r2
 80012dc:	4281      	cmp	r1, r0
 80012de:	d306      	bcc.n	80012ee <__aeabi_ddiv+0x3ee>
 80012e0:	d002      	beq.n	80012e8 <__aeabi_ddiv+0x3e8>
 80012e2:	2301      	movs	r3, #1
 80012e4:	431d      	orrs	r5, r3
 80012e6:	e6ce      	b.n	8001086 <__aeabi_ddiv+0x186>
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_ddiv+0x3ee>
 80012ec:	e6cb      	b.n	8001086 <__aeabi_ddiv+0x186>
 80012ee:	1861      	adds	r1, r4, r1
 80012f0:	1e6e      	subs	r6, r5, #1
 80012f2:	42a1      	cmp	r1, r4
 80012f4:	d200      	bcs.n	80012f8 <__aeabi_ddiv+0x3f8>
 80012f6:	e0a4      	b.n	8001442 <__aeabi_ddiv+0x542>
 80012f8:	4281      	cmp	r1, r0
 80012fa:	d200      	bcs.n	80012fe <__aeabi_ddiv+0x3fe>
 80012fc:	e0c9      	b.n	8001492 <__aeabi_ddiv+0x592>
 80012fe:	d100      	bne.n	8001302 <__aeabi_ddiv+0x402>
 8001300:	e0d9      	b.n	80014b6 <__aeabi_ddiv+0x5b6>
 8001302:	0035      	movs	r5, r6
 8001304:	e7ed      	b.n	80012e2 <__aeabi_ddiv+0x3e2>
 8001306:	2501      	movs	r5, #1
 8001308:	426d      	negs	r5, r5
 800130a:	2101      	movs	r1, #1
 800130c:	1a89      	subs	r1, r1, r2
 800130e:	2938      	cmp	r1, #56	; 0x38
 8001310:	dd00      	ble.n	8001314 <__aeabi_ddiv+0x414>
 8001312:	e64c      	b.n	8000fae <__aeabi_ddiv+0xae>
 8001314:	291f      	cmp	r1, #31
 8001316:	dc00      	bgt.n	800131a <__aeabi_ddiv+0x41a>
 8001318:	e07f      	b.n	800141a <__aeabi_ddiv+0x51a>
 800131a:	231f      	movs	r3, #31
 800131c:	425b      	negs	r3, r3
 800131e:	1a9a      	subs	r2, r3, r2
 8001320:	4643      	mov	r3, r8
 8001322:	40d3      	lsrs	r3, r2
 8001324:	2920      	cmp	r1, #32
 8001326:	d004      	beq.n	8001332 <__aeabi_ddiv+0x432>
 8001328:	4644      	mov	r4, r8
 800132a:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <__aeabi_ddiv+0x5c0>)
 800132c:	445a      	add	r2, fp
 800132e:	4094      	lsls	r4, r2
 8001330:	4325      	orrs	r5, r4
 8001332:	1e6a      	subs	r2, r5, #1
 8001334:	4195      	sbcs	r5, r2
 8001336:	2207      	movs	r2, #7
 8001338:	432b      	orrs	r3, r5
 800133a:	0015      	movs	r5, r2
 800133c:	2400      	movs	r4, #0
 800133e:	401d      	ands	r5, r3
 8001340:	421a      	tst	r2, r3
 8001342:	d100      	bne.n	8001346 <__aeabi_ddiv+0x446>
 8001344:	e0a1      	b.n	800148a <__aeabi_ddiv+0x58a>
 8001346:	220f      	movs	r2, #15
 8001348:	2400      	movs	r4, #0
 800134a:	401a      	ands	r2, r3
 800134c:	2a04      	cmp	r2, #4
 800134e:	d100      	bne.n	8001352 <__aeabi_ddiv+0x452>
 8001350:	e098      	b.n	8001484 <__aeabi_ddiv+0x584>
 8001352:	1d1a      	adds	r2, r3, #4
 8001354:	429a      	cmp	r2, r3
 8001356:	419b      	sbcs	r3, r3
 8001358:	425b      	negs	r3, r3
 800135a:	18e4      	adds	r4, r4, r3
 800135c:	0013      	movs	r3, r2
 800135e:	0222      	lsls	r2, r4, #8
 8001360:	d400      	bmi.n	8001364 <__aeabi_ddiv+0x464>
 8001362:	e08f      	b.n	8001484 <__aeabi_ddiv+0x584>
 8001364:	2301      	movs	r3, #1
 8001366:	2400      	movs	r4, #0
 8001368:	2500      	movs	r5, #0
 800136a:	e623      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 800136c:	42b5      	cmp	r5, r6
 800136e:	d300      	bcc.n	8001372 <__aeabi_ddiv+0x472>
 8001370:	e764      	b.n	800123c <__aeabi_ddiv+0x33c>
 8001372:	4643      	mov	r3, r8
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	9b00      	ldr	r3, [sp, #0]
 8001378:	469c      	mov	ip, r3
 800137a:	4465      	add	r5, ip
 800137c:	001f      	movs	r7, r3
 800137e:	429d      	cmp	r5, r3
 8001380:	419b      	sbcs	r3, r3
 8001382:	425b      	negs	r3, r3
 8001384:	191b      	adds	r3, r3, r4
 8001386:	18c9      	adds	r1, r1, r3
 8001388:	428c      	cmp	r4, r1
 800138a:	d23a      	bcs.n	8001402 <__aeabi_ddiv+0x502>
 800138c:	4288      	cmp	r0, r1
 800138e:	d863      	bhi.n	8001458 <__aeabi_ddiv+0x558>
 8001390:	d060      	beq.n	8001454 <__aeabi_ddiv+0x554>
 8001392:	4690      	mov	r8, r2
 8001394:	e752      	b.n	800123c <__aeabi_ddiv+0x33c>
 8001396:	42aa      	cmp	r2, r5
 8001398:	d900      	bls.n	800139c <__aeabi_ddiv+0x49c>
 800139a:	e6ea      	b.n	8001172 <__aeabi_ddiv+0x272>
 800139c:	4643      	mov	r3, r8
 800139e:	07de      	lsls	r6, r3, #31
 80013a0:	0858      	lsrs	r0, r3, #1
 80013a2:	086b      	lsrs	r3, r5, #1
 80013a4:	431e      	orrs	r6, r3
 80013a6:	07ed      	lsls	r5, r5, #31
 80013a8:	e6ea      	b.n	8001180 <__aeabi_ddiv+0x280>
 80013aa:	4648      	mov	r0, r9
 80013ac:	f001 f926 	bl	80025fc <__clzsi2>
 80013b0:	0001      	movs	r1, r0
 80013b2:	0002      	movs	r2, r0
 80013b4:	3115      	adds	r1, #21
 80013b6:	3220      	adds	r2, #32
 80013b8:	291c      	cmp	r1, #28
 80013ba:	dc00      	bgt.n	80013be <__aeabi_ddiv+0x4be>
 80013bc:	e61a      	b.n	8000ff4 <__aeabi_ddiv+0xf4>
 80013be:	464b      	mov	r3, r9
 80013c0:	3808      	subs	r0, #8
 80013c2:	4083      	lsls	r3, r0
 80013c4:	2500      	movs	r5, #0
 80013c6:	4698      	mov	r8, r3
 80013c8:	e620      	b.n	800100c <__aeabi_ddiv+0x10c>
 80013ca:	f001 f917 	bl	80025fc <__clzsi2>
 80013ce:	0003      	movs	r3, r0
 80013d0:	001a      	movs	r2, r3
 80013d2:	3215      	adds	r2, #21
 80013d4:	3020      	adds	r0, #32
 80013d6:	2a1c      	cmp	r2, #28
 80013d8:	dc00      	bgt.n	80013dc <__aeabi_ddiv+0x4dc>
 80013da:	e630      	b.n	800103e <__aeabi_ddiv+0x13e>
 80013dc:	4654      	mov	r4, sl
 80013de:	3b08      	subs	r3, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	409c      	lsls	r4, r3
 80013e4:	e635      	b.n	8001052 <__aeabi_ddiv+0x152>
 80013e6:	230f      	movs	r3, #15
 80013e8:	402b      	ands	r3, r5
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x4f0>
 80013ee:	e652      	b.n	8001096 <__aeabi_ddiv+0x196>
 80013f0:	2305      	movs	r3, #5
 80013f2:	425b      	negs	r3, r3
 80013f4:	42ab      	cmp	r3, r5
 80013f6:	419b      	sbcs	r3, r3
 80013f8:	3504      	adds	r5, #4
 80013fa:	425b      	negs	r3, r3
 80013fc:	08ed      	lsrs	r5, r5, #3
 80013fe:	4498      	add	r8, r3
 8001400:	e64a      	b.n	8001098 <__aeabi_ddiv+0x198>
 8001402:	428c      	cmp	r4, r1
 8001404:	d1c5      	bne.n	8001392 <__aeabi_ddiv+0x492>
 8001406:	42af      	cmp	r7, r5
 8001408:	d9c0      	bls.n	800138c <__aeabi_ddiv+0x48c>
 800140a:	4690      	mov	r8, r2
 800140c:	e716      	b.n	800123c <__aeabi_ddiv+0x33c>
 800140e:	428a      	cmp	r2, r1
 8001410:	d800      	bhi.n	8001414 <__aeabi_ddiv+0x514>
 8001412:	e6ea      	b.n	80011ea <__aeabi_ddiv+0x2ea>
 8001414:	1e83      	subs	r3, r0, #2
 8001416:	1909      	adds	r1, r1, r4
 8001418:	e6e7      	b.n	80011ea <__aeabi_ddiv+0x2ea>
 800141a:	4a2a      	ldr	r2, [pc, #168]	; (80014c4 <__aeabi_ddiv+0x5c4>)
 800141c:	0028      	movs	r0, r5
 800141e:	445a      	add	r2, fp
 8001420:	4643      	mov	r3, r8
 8001422:	4095      	lsls	r5, r2
 8001424:	4093      	lsls	r3, r2
 8001426:	40c8      	lsrs	r0, r1
 8001428:	1e6a      	subs	r2, r5, #1
 800142a:	4195      	sbcs	r5, r2
 800142c:	4644      	mov	r4, r8
 800142e:	4303      	orrs	r3, r0
 8001430:	432b      	orrs	r3, r5
 8001432:	40cc      	lsrs	r4, r1
 8001434:	075a      	lsls	r2, r3, #29
 8001436:	d092      	beq.n	800135e <__aeabi_ddiv+0x45e>
 8001438:	220f      	movs	r2, #15
 800143a:	401a      	ands	r2, r3
 800143c:	2a04      	cmp	r2, #4
 800143e:	d188      	bne.n	8001352 <__aeabi_ddiv+0x452>
 8001440:	e78d      	b.n	800135e <__aeabi_ddiv+0x45e>
 8001442:	0035      	movs	r5, r6
 8001444:	4281      	cmp	r1, r0
 8001446:	d000      	beq.n	800144a <__aeabi_ddiv+0x54a>
 8001448:	e74b      	b.n	80012e2 <__aeabi_ddiv+0x3e2>
 800144a:	9a00      	ldr	r2, [sp, #0]
 800144c:	4293      	cmp	r3, r2
 800144e:	d000      	beq.n	8001452 <__aeabi_ddiv+0x552>
 8001450:	e747      	b.n	80012e2 <__aeabi_ddiv+0x3e2>
 8001452:	e618      	b.n	8001086 <__aeabi_ddiv+0x186>
 8001454:	42ae      	cmp	r6, r5
 8001456:	d99c      	bls.n	8001392 <__aeabi_ddiv+0x492>
 8001458:	2302      	movs	r3, #2
 800145a:	425b      	negs	r3, r3
 800145c:	469c      	mov	ip, r3
 800145e:	9b00      	ldr	r3, [sp, #0]
 8001460:	44e0      	add	r8, ip
 8001462:	469c      	mov	ip, r3
 8001464:	4465      	add	r5, ip
 8001466:	429d      	cmp	r5, r3
 8001468:	419b      	sbcs	r3, r3
 800146a:	425b      	negs	r3, r3
 800146c:	191b      	adds	r3, r3, r4
 800146e:	18c9      	adds	r1, r1, r3
 8001470:	e6e4      	b.n	800123c <__aeabi_ddiv+0x33c>
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <__aeabi_ddiv+0x5c8>)
 8001474:	445a      	add	r2, fp
 8001476:	2a00      	cmp	r2, #0
 8001478:	dc00      	bgt.n	800147c <__aeabi_ddiv+0x57c>
 800147a:	e744      	b.n	8001306 <__aeabi_ddiv+0x406>
 800147c:	2301      	movs	r3, #1
 800147e:	2500      	movs	r5, #0
 8001480:	4498      	add	r8, r3
 8001482:	e609      	b.n	8001098 <__aeabi_ddiv+0x198>
 8001484:	0765      	lsls	r5, r4, #29
 8001486:	0264      	lsls	r4, r4, #9
 8001488:	0b24      	lsrs	r4, r4, #12
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	431d      	orrs	r5, r3
 800148e:	2300      	movs	r3, #0
 8001490:	e590      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8001492:	9e00      	ldr	r6, [sp, #0]
 8001494:	3d02      	subs	r5, #2
 8001496:	0072      	lsls	r2, r6, #1
 8001498:	42b2      	cmp	r2, r6
 800149a:	41bf      	sbcs	r7, r7
 800149c:	427f      	negs	r7, r7
 800149e:	193c      	adds	r4, r7, r4
 80014a0:	1909      	adds	r1, r1, r4
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	e7ce      	b.n	8001444 <__aeabi_ddiv+0x544>
 80014a6:	2480      	movs	r4, #128	; 0x80
 80014a8:	4643      	mov	r3, r8
 80014aa:	0324      	lsls	r4, r4, #12
 80014ac:	431c      	orrs	r4, r3
 80014ae:	0324      	lsls	r4, r4, #12
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <__aeabi_ddiv+0x5cc>)
 80014b2:	0b24      	lsrs	r4, r4, #12
 80014b4:	e57e      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 80014b6:	9a00      	ldr	r2, [sp, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3ea      	bcc.n	8001492 <__aeabi_ddiv+0x592>
 80014bc:	0035      	movs	r5, r6
 80014be:	e7c4      	b.n	800144a <__aeabi_ddiv+0x54a>
 80014c0:	0000043e 	.word	0x0000043e
 80014c4:	0000041e 	.word	0x0000041e
 80014c8:	000003ff 	.word	0x000003ff
 80014cc:	000007ff 	.word	0x000007ff

080014d0 <__eqdf2>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	464f      	mov	r7, r9
 80014d4:	4646      	mov	r6, r8
 80014d6:	46d6      	mov	lr, sl
 80014d8:	4694      	mov	ip, r2
 80014da:	4691      	mov	r9, r2
 80014dc:	031a      	lsls	r2, r3, #12
 80014de:	0b12      	lsrs	r2, r2, #12
 80014e0:	4d18      	ldr	r5, [pc, #96]	; (8001544 <__eqdf2+0x74>)
 80014e2:	b5c0      	push	{r6, r7, lr}
 80014e4:	004c      	lsls	r4, r1, #1
 80014e6:	030f      	lsls	r7, r1, #12
 80014e8:	4692      	mov	sl, r2
 80014ea:	005a      	lsls	r2, r3, #1
 80014ec:	0006      	movs	r6, r0
 80014ee:	4680      	mov	r8, r0
 80014f0:	0b3f      	lsrs	r7, r7, #12
 80014f2:	2001      	movs	r0, #1
 80014f4:	0d64      	lsrs	r4, r4, #21
 80014f6:	0fc9      	lsrs	r1, r1, #31
 80014f8:	0d52      	lsrs	r2, r2, #21
 80014fa:	0fdb      	lsrs	r3, r3, #31
 80014fc:	42ac      	cmp	r4, r5
 80014fe:	d00a      	beq.n	8001516 <__eqdf2+0x46>
 8001500:	42aa      	cmp	r2, r5
 8001502:	d003      	beq.n	800150c <__eqdf2+0x3c>
 8001504:	4294      	cmp	r4, r2
 8001506:	d101      	bne.n	800150c <__eqdf2+0x3c>
 8001508:	4557      	cmp	r7, sl
 800150a:	d00d      	beq.n	8001528 <__eqdf2+0x58>
 800150c:	bce0      	pop	{r5, r6, r7}
 800150e:	46ba      	mov	sl, r7
 8001510:	46b1      	mov	r9, r6
 8001512:	46a8      	mov	r8, r5
 8001514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001516:	003d      	movs	r5, r7
 8001518:	4335      	orrs	r5, r6
 800151a:	d1f7      	bne.n	800150c <__eqdf2+0x3c>
 800151c:	42a2      	cmp	r2, r4
 800151e:	d1f5      	bne.n	800150c <__eqdf2+0x3c>
 8001520:	4652      	mov	r2, sl
 8001522:	4665      	mov	r5, ip
 8001524:	432a      	orrs	r2, r5
 8001526:	d1f1      	bne.n	800150c <__eqdf2+0x3c>
 8001528:	2001      	movs	r0, #1
 800152a:	45c8      	cmp	r8, r9
 800152c:	d1ee      	bne.n	800150c <__eqdf2+0x3c>
 800152e:	4299      	cmp	r1, r3
 8001530:	d006      	beq.n	8001540 <__eqdf2+0x70>
 8001532:	2c00      	cmp	r4, #0
 8001534:	d1ea      	bne.n	800150c <__eqdf2+0x3c>
 8001536:	433e      	orrs	r6, r7
 8001538:	0030      	movs	r0, r6
 800153a:	1e46      	subs	r6, r0, #1
 800153c:	41b0      	sbcs	r0, r6
 800153e:	e7e5      	b.n	800150c <__eqdf2+0x3c>
 8001540:	2000      	movs	r0, #0
 8001542:	e7e3      	b.n	800150c <__eqdf2+0x3c>
 8001544:	000007ff 	.word	0x000007ff

08001548 <__gedf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	464e      	mov	r6, r9
 800154c:	4645      	mov	r5, r8
 800154e:	4657      	mov	r7, sl
 8001550:	46de      	mov	lr, fp
 8001552:	0004      	movs	r4, r0
 8001554:	0018      	movs	r0, r3
 8001556:	b5e0      	push	{r5, r6, r7, lr}
 8001558:	0016      	movs	r6, r2
 800155a:	031b      	lsls	r3, r3, #12
 800155c:	0b1b      	lsrs	r3, r3, #12
 800155e:	4d32      	ldr	r5, [pc, #200]	; (8001628 <__gedf2+0xe0>)
 8001560:	030f      	lsls	r7, r1, #12
 8001562:	004a      	lsls	r2, r1, #1
 8001564:	4699      	mov	r9, r3
 8001566:	0043      	lsls	r3, r0, #1
 8001568:	46a4      	mov	ip, r4
 800156a:	46b0      	mov	r8, r6
 800156c:	0b3f      	lsrs	r7, r7, #12
 800156e:	0d52      	lsrs	r2, r2, #21
 8001570:	0fc9      	lsrs	r1, r1, #31
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fc0      	lsrs	r0, r0, #31
 8001576:	42aa      	cmp	r2, r5
 8001578:	d029      	beq.n	80015ce <__gedf2+0x86>
 800157a:	42ab      	cmp	r3, r5
 800157c:	d018      	beq.n	80015b0 <__gedf2+0x68>
 800157e:	2a00      	cmp	r2, #0
 8001580:	d12a      	bne.n	80015d8 <__gedf2+0x90>
 8001582:	433c      	orrs	r4, r7
 8001584:	46a3      	mov	fp, r4
 8001586:	4265      	negs	r5, r4
 8001588:	4165      	adcs	r5, r4
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <__gedf2+0x4c>
 800158e:	464c      	mov	r4, r9
 8001590:	4326      	orrs	r6, r4
 8001592:	d027      	beq.n	80015e4 <__gedf2+0x9c>
 8001594:	2d00      	cmp	r5, #0
 8001596:	d115      	bne.n	80015c4 <__gedf2+0x7c>
 8001598:	4281      	cmp	r1, r0
 800159a:	d028      	beq.n	80015ee <__gedf2+0xa6>
 800159c:	2002      	movs	r0, #2
 800159e:	3901      	subs	r1, #1
 80015a0:	4008      	ands	r0, r1
 80015a2:	3801      	subs	r0, #1
 80015a4:	bcf0      	pop	{r4, r5, r6, r7}
 80015a6:	46bb      	mov	fp, r7
 80015a8:	46b2      	mov	sl, r6
 80015aa:	46a9      	mov	r9, r5
 80015ac:	46a0      	mov	r8, r4
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b0:	464d      	mov	r5, r9
 80015b2:	432e      	orrs	r6, r5
 80015b4:	d12f      	bne.n	8001616 <__gedf2+0xce>
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	d1ee      	bne.n	8001598 <__gedf2+0x50>
 80015ba:	433c      	orrs	r4, r7
 80015bc:	4265      	negs	r5, r4
 80015be:	4165      	adcs	r5, r4
 80015c0:	2d00      	cmp	r5, #0
 80015c2:	d0e9      	beq.n	8001598 <__gedf2+0x50>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d1ed      	bne.n	80015a4 <__gedf2+0x5c>
 80015c8:	2001      	movs	r0, #1
 80015ca:	4240      	negs	r0, r0
 80015cc:	e7ea      	b.n	80015a4 <__gedf2+0x5c>
 80015ce:	003d      	movs	r5, r7
 80015d0:	4325      	orrs	r5, r4
 80015d2:	d120      	bne.n	8001616 <__gedf2+0xce>
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d0eb      	beq.n	80015b0 <__gedf2+0x68>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1dd      	bne.n	8001598 <__gedf2+0x50>
 80015dc:	464c      	mov	r4, r9
 80015de:	4326      	orrs	r6, r4
 80015e0:	d1da      	bne.n	8001598 <__gedf2+0x50>
 80015e2:	e7db      	b.n	800159c <__gedf2+0x54>
 80015e4:	465b      	mov	r3, fp
 80015e6:	2000      	movs	r0, #0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0db      	beq.n	80015a4 <__gedf2+0x5c>
 80015ec:	e7d6      	b.n	800159c <__gedf2+0x54>
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dc0a      	bgt.n	8001608 <__gedf2+0xc0>
 80015f2:	dbe7      	blt.n	80015c4 <__gedf2+0x7c>
 80015f4:	454f      	cmp	r7, r9
 80015f6:	d8d1      	bhi.n	800159c <__gedf2+0x54>
 80015f8:	d010      	beq.n	800161c <__gedf2+0xd4>
 80015fa:	2000      	movs	r0, #0
 80015fc:	454f      	cmp	r7, r9
 80015fe:	d2d1      	bcs.n	80015a4 <__gedf2+0x5c>
 8001600:	2900      	cmp	r1, #0
 8001602:	d0e1      	beq.n	80015c8 <__gedf2+0x80>
 8001604:	0008      	movs	r0, r1
 8001606:	e7cd      	b.n	80015a4 <__gedf2+0x5c>
 8001608:	4243      	negs	r3, r0
 800160a:	4158      	adcs	r0, r3
 800160c:	2302      	movs	r3, #2
 800160e:	4240      	negs	r0, r0
 8001610:	4018      	ands	r0, r3
 8001612:	3801      	subs	r0, #1
 8001614:	e7c6      	b.n	80015a4 <__gedf2+0x5c>
 8001616:	2002      	movs	r0, #2
 8001618:	4240      	negs	r0, r0
 800161a:	e7c3      	b.n	80015a4 <__gedf2+0x5c>
 800161c:	45c4      	cmp	ip, r8
 800161e:	d8bd      	bhi.n	800159c <__gedf2+0x54>
 8001620:	2000      	movs	r0, #0
 8001622:	45c4      	cmp	ip, r8
 8001624:	d2be      	bcs.n	80015a4 <__gedf2+0x5c>
 8001626:	e7eb      	b.n	8001600 <__gedf2+0xb8>
 8001628:	000007ff 	.word	0x000007ff

0800162c <__ledf2>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	464e      	mov	r6, r9
 8001630:	4645      	mov	r5, r8
 8001632:	4657      	mov	r7, sl
 8001634:	46de      	mov	lr, fp
 8001636:	0004      	movs	r4, r0
 8001638:	0018      	movs	r0, r3
 800163a:	b5e0      	push	{r5, r6, r7, lr}
 800163c:	0016      	movs	r6, r2
 800163e:	031b      	lsls	r3, r3, #12
 8001640:	0b1b      	lsrs	r3, r3, #12
 8001642:	4d31      	ldr	r5, [pc, #196]	; (8001708 <__ledf2+0xdc>)
 8001644:	030f      	lsls	r7, r1, #12
 8001646:	004a      	lsls	r2, r1, #1
 8001648:	4699      	mov	r9, r3
 800164a:	0043      	lsls	r3, r0, #1
 800164c:	46a4      	mov	ip, r4
 800164e:	46b0      	mov	r8, r6
 8001650:	0b3f      	lsrs	r7, r7, #12
 8001652:	0d52      	lsrs	r2, r2, #21
 8001654:	0fc9      	lsrs	r1, r1, #31
 8001656:	0d5b      	lsrs	r3, r3, #21
 8001658:	0fc0      	lsrs	r0, r0, #31
 800165a:	42aa      	cmp	r2, r5
 800165c:	d011      	beq.n	8001682 <__ledf2+0x56>
 800165e:	42ab      	cmp	r3, r5
 8001660:	d014      	beq.n	800168c <__ledf2+0x60>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d12f      	bne.n	80016c6 <__ledf2+0x9a>
 8001666:	433c      	orrs	r4, r7
 8001668:	46a3      	mov	fp, r4
 800166a:	4265      	negs	r5, r4
 800166c:	4165      	adcs	r5, r4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d114      	bne.n	800169c <__ledf2+0x70>
 8001672:	464c      	mov	r4, r9
 8001674:	4326      	orrs	r6, r4
 8001676:	d111      	bne.n	800169c <__ledf2+0x70>
 8001678:	465b      	mov	r3, fp
 800167a:	2000      	movs	r0, #0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d017      	beq.n	80016b0 <__ledf2+0x84>
 8001680:	e010      	b.n	80016a4 <__ledf2+0x78>
 8001682:	003d      	movs	r5, r7
 8001684:	4325      	orrs	r5, r4
 8001686:	d112      	bne.n	80016ae <__ledf2+0x82>
 8001688:	4293      	cmp	r3, r2
 800168a:	d11c      	bne.n	80016c6 <__ledf2+0x9a>
 800168c:	464d      	mov	r5, r9
 800168e:	432e      	orrs	r6, r5
 8001690:	d10d      	bne.n	80016ae <__ledf2+0x82>
 8001692:	2a00      	cmp	r2, #0
 8001694:	d104      	bne.n	80016a0 <__ledf2+0x74>
 8001696:	433c      	orrs	r4, r7
 8001698:	4265      	negs	r5, r4
 800169a:	4165      	adcs	r5, r4
 800169c:	2d00      	cmp	r5, #0
 800169e:	d10d      	bne.n	80016bc <__ledf2+0x90>
 80016a0:	4281      	cmp	r1, r0
 80016a2:	d016      	beq.n	80016d2 <__ledf2+0xa6>
 80016a4:	2002      	movs	r0, #2
 80016a6:	3901      	subs	r1, #1
 80016a8:	4008      	ands	r0, r1
 80016aa:	3801      	subs	r0, #1
 80016ac:	e000      	b.n	80016b0 <__ledf2+0x84>
 80016ae:	2002      	movs	r0, #2
 80016b0:	bcf0      	pop	{r4, r5, r6, r7}
 80016b2:	46bb      	mov	fp, r7
 80016b4:	46b2      	mov	sl, r6
 80016b6:	46a9      	mov	r9, r5
 80016b8:	46a0      	mov	r8, r4
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016bc:	2800      	cmp	r0, #0
 80016be:	d1f7      	bne.n	80016b0 <__ledf2+0x84>
 80016c0:	2001      	movs	r0, #1
 80016c2:	4240      	negs	r0, r0
 80016c4:	e7f4      	b.n	80016b0 <__ledf2+0x84>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ea      	bne.n	80016a0 <__ledf2+0x74>
 80016ca:	464c      	mov	r4, r9
 80016cc:	4326      	orrs	r6, r4
 80016ce:	d1e7      	bne.n	80016a0 <__ledf2+0x74>
 80016d0:	e7e8      	b.n	80016a4 <__ledf2+0x78>
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dd06      	ble.n	80016e4 <__ledf2+0xb8>
 80016d6:	4243      	negs	r3, r0
 80016d8:	4158      	adcs	r0, r3
 80016da:	2302      	movs	r3, #2
 80016dc:	4240      	negs	r0, r0
 80016de:	4018      	ands	r0, r3
 80016e0:	3801      	subs	r0, #1
 80016e2:	e7e5      	b.n	80016b0 <__ledf2+0x84>
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbe9      	blt.n	80016bc <__ledf2+0x90>
 80016e8:	454f      	cmp	r7, r9
 80016ea:	d8db      	bhi.n	80016a4 <__ledf2+0x78>
 80016ec:	d006      	beq.n	80016fc <__ledf2+0xd0>
 80016ee:	2000      	movs	r0, #0
 80016f0:	454f      	cmp	r7, r9
 80016f2:	d2dd      	bcs.n	80016b0 <__ledf2+0x84>
 80016f4:	2900      	cmp	r1, #0
 80016f6:	d0e3      	beq.n	80016c0 <__ledf2+0x94>
 80016f8:	0008      	movs	r0, r1
 80016fa:	e7d9      	b.n	80016b0 <__ledf2+0x84>
 80016fc:	45c4      	cmp	ip, r8
 80016fe:	d8d1      	bhi.n	80016a4 <__ledf2+0x78>
 8001700:	2000      	movs	r0, #0
 8001702:	45c4      	cmp	ip, r8
 8001704:	d2d4      	bcs.n	80016b0 <__ledf2+0x84>
 8001706:	e7f5      	b.n	80016f4 <__ledf2+0xc8>
 8001708:	000007ff 	.word	0x000007ff

0800170c <__aeabi_dmul>:
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	4657      	mov	r7, sl
 8001710:	464e      	mov	r6, r9
 8001712:	4645      	mov	r5, r8
 8001714:	46de      	mov	lr, fp
 8001716:	b5e0      	push	{r5, r6, r7, lr}
 8001718:	4698      	mov	r8, r3
 800171a:	030c      	lsls	r4, r1, #12
 800171c:	004b      	lsls	r3, r1, #1
 800171e:	0006      	movs	r6, r0
 8001720:	4692      	mov	sl, r2
 8001722:	b087      	sub	sp, #28
 8001724:	0b24      	lsrs	r4, r4, #12
 8001726:	0d5b      	lsrs	r3, r3, #21
 8001728:	0fcf      	lsrs	r7, r1, #31
 800172a:	2b00      	cmp	r3, #0
 800172c:	d06c      	beq.n	8001808 <__aeabi_dmul+0xfc>
 800172e:	4add      	ldr	r2, [pc, #884]	; (8001aa4 <__aeabi_dmul+0x398>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d100      	bne.n	8001736 <__aeabi_dmul+0x2a>
 8001734:	e086      	b.n	8001844 <__aeabi_dmul+0x138>
 8001736:	0f42      	lsrs	r2, r0, #29
 8001738:	00e4      	lsls	r4, r4, #3
 800173a:	4314      	orrs	r4, r2
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	4314      	orrs	r4, r2
 8001742:	4ad9      	ldr	r2, [pc, #868]	; (8001aa8 <__aeabi_dmul+0x39c>)
 8001744:	00c5      	lsls	r5, r0, #3
 8001746:	4694      	mov	ip, r2
 8001748:	4463      	add	r3, ip
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2300      	movs	r3, #0
 800174e:	4699      	mov	r9, r3
 8001750:	469b      	mov	fp, r3
 8001752:	4643      	mov	r3, r8
 8001754:	4642      	mov	r2, r8
 8001756:	031e      	lsls	r6, r3, #12
 8001758:	0fd2      	lsrs	r2, r2, #31
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4650      	mov	r0, sl
 800175e:	4690      	mov	r8, r2
 8001760:	0b36      	lsrs	r6, r6, #12
 8001762:	0d5b      	lsrs	r3, r3, #21
 8001764:	d100      	bne.n	8001768 <__aeabi_dmul+0x5c>
 8001766:	e078      	b.n	800185a <__aeabi_dmul+0x14e>
 8001768:	4ace      	ldr	r2, [pc, #824]	; (8001aa4 <__aeabi_dmul+0x398>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01d      	beq.n	80017aa <__aeabi_dmul+0x9e>
 800176e:	49ce      	ldr	r1, [pc, #824]	; (8001aa8 <__aeabi_dmul+0x39c>)
 8001770:	0f42      	lsrs	r2, r0, #29
 8001772:	468c      	mov	ip, r1
 8001774:	9900      	ldr	r1, [sp, #0]
 8001776:	4463      	add	r3, ip
 8001778:	00f6      	lsls	r6, r6, #3
 800177a:	468c      	mov	ip, r1
 800177c:	4316      	orrs	r6, r2
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	449c      	add	ip, r3
 8001782:	0412      	lsls	r2, r2, #16
 8001784:	4663      	mov	r3, ip
 8001786:	4316      	orrs	r6, r2
 8001788:	00c2      	lsls	r2, r0, #3
 800178a:	2000      	movs	r0, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	9900      	ldr	r1, [sp, #0]
 8001790:	4643      	mov	r3, r8
 8001792:	3101      	adds	r1, #1
 8001794:	468c      	mov	ip, r1
 8001796:	4649      	mov	r1, r9
 8001798:	407b      	eors	r3, r7
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	290f      	cmp	r1, #15
 800179e:	d900      	bls.n	80017a2 <__aeabi_dmul+0x96>
 80017a0:	e07e      	b.n	80018a0 <__aeabi_dmul+0x194>
 80017a2:	4bc2      	ldr	r3, [pc, #776]	; (8001aac <__aeabi_dmul+0x3a0>)
 80017a4:	0089      	lsls	r1, r1, #2
 80017a6:	5859      	ldr	r1, [r3, r1]
 80017a8:	468f      	mov	pc, r1
 80017aa:	4652      	mov	r2, sl
 80017ac:	9b00      	ldr	r3, [sp, #0]
 80017ae:	4332      	orrs	r2, r6
 80017b0:	d000      	beq.n	80017b4 <__aeabi_dmul+0xa8>
 80017b2:	e156      	b.n	8001a62 <__aeabi_dmul+0x356>
 80017b4:	49bb      	ldr	r1, [pc, #748]	; (8001aa4 <__aeabi_dmul+0x398>)
 80017b6:	2600      	movs	r6, #0
 80017b8:	468c      	mov	ip, r1
 80017ba:	4463      	add	r3, ip
 80017bc:	4649      	mov	r1, r9
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2302      	movs	r3, #2
 80017c2:	4319      	orrs	r1, r3
 80017c4:	4689      	mov	r9, r1
 80017c6:	2002      	movs	r0, #2
 80017c8:	e7e1      	b.n	800178e <__aeabi_dmul+0x82>
 80017ca:	4643      	mov	r3, r8
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	0034      	movs	r4, r6
 80017d0:	0015      	movs	r5, r2
 80017d2:	4683      	mov	fp, r0
 80017d4:	465b      	mov	r3, fp
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d05e      	beq.n	8001898 <__aeabi_dmul+0x18c>
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dmul+0xd4>
 80017de:	e1f3      	b.n	8001bc8 <__aeabi_dmul+0x4bc>
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d000      	beq.n	80017e6 <__aeabi_dmul+0xda>
 80017e4:	e118      	b.n	8001a18 <__aeabi_dmul+0x30c>
 80017e6:	2200      	movs	r2, #0
 80017e8:	2400      	movs	r4, #0
 80017ea:	2500      	movs	r5, #0
 80017ec:	9b01      	ldr	r3, [sp, #4]
 80017ee:	0512      	lsls	r2, r2, #20
 80017f0:	4322      	orrs	r2, r4
 80017f2:	07db      	lsls	r3, r3, #31
 80017f4:	431a      	orrs	r2, r3
 80017f6:	0028      	movs	r0, r5
 80017f8:	0011      	movs	r1, r2
 80017fa:	b007      	add	sp, #28
 80017fc:	bcf0      	pop	{r4, r5, r6, r7}
 80017fe:	46bb      	mov	fp, r7
 8001800:	46b2      	mov	sl, r6
 8001802:	46a9      	mov	r9, r5
 8001804:	46a0      	mov	r8, r4
 8001806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001808:	0025      	movs	r5, r4
 800180a:	4305      	orrs	r5, r0
 800180c:	d100      	bne.n	8001810 <__aeabi_dmul+0x104>
 800180e:	e141      	b.n	8001a94 <__aeabi_dmul+0x388>
 8001810:	2c00      	cmp	r4, #0
 8001812:	d100      	bne.n	8001816 <__aeabi_dmul+0x10a>
 8001814:	e1ad      	b.n	8001b72 <__aeabi_dmul+0x466>
 8001816:	0020      	movs	r0, r4
 8001818:	f000 fef0 	bl	80025fc <__clzsi2>
 800181c:	0001      	movs	r1, r0
 800181e:	0002      	movs	r2, r0
 8001820:	390b      	subs	r1, #11
 8001822:	231d      	movs	r3, #29
 8001824:	0010      	movs	r0, r2
 8001826:	1a5b      	subs	r3, r3, r1
 8001828:	0031      	movs	r1, r6
 800182a:	0035      	movs	r5, r6
 800182c:	3808      	subs	r0, #8
 800182e:	4084      	lsls	r4, r0
 8001830:	40d9      	lsrs	r1, r3
 8001832:	4085      	lsls	r5, r0
 8001834:	430c      	orrs	r4, r1
 8001836:	489e      	ldr	r0, [pc, #632]	; (8001ab0 <__aeabi_dmul+0x3a4>)
 8001838:	1a83      	subs	r3, r0, r2
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2300      	movs	r3, #0
 800183e:	4699      	mov	r9, r3
 8001840:	469b      	mov	fp, r3
 8001842:	e786      	b.n	8001752 <__aeabi_dmul+0x46>
 8001844:	0005      	movs	r5, r0
 8001846:	4325      	orrs	r5, r4
 8001848:	d000      	beq.n	800184c <__aeabi_dmul+0x140>
 800184a:	e11c      	b.n	8001a86 <__aeabi_dmul+0x37a>
 800184c:	2208      	movs	r2, #8
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2302      	movs	r3, #2
 8001852:	2400      	movs	r4, #0
 8001854:	4691      	mov	r9, r2
 8001856:	469b      	mov	fp, r3
 8001858:	e77b      	b.n	8001752 <__aeabi_dmul+0x46>
 800185a:	4652      	mov	r2, sl
 800185c:	4332      	orrs	r2, r6
 800185e:	d100      	bne.n	8001862 <__aeabi_dmul+0x156>
 8001860:	e10a      	b.n	8001a78 <__aeabi_dmul+0x36c>
 8001862:	2e00      	cmp	r6, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dmul+0x15c>
 8001866:	e176      	b.n	8001b56 <__aeabi_dmul+0x44a>
 8001868:	0030      	movs	r0, r6
 800186a:	f000 fec7 	bl	80025fc <__clzsi2>
 800186e:	0002      	movs	r2, r0
 8001870:	3a0b      	subs	r2, #11
 8001872:	231d      	movs	r3, #29
 8001874:	0001      	movs	r1, r0
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	4652      	mov	r2, sl
 800187a:	3908      	subs	r1, #8
 800187c:	40da      	lsrs	r2, r3
 800187e:	408e      	lsls	r6, r1
 8001880:	4316      	orrs	r6, r2
 8001882:	4652      	mov	r2, sl
 8001884:	408a      	lsls	r2, r1
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4989      	ldr	r1, [pc, #548]	; (8001ab0 <__aeabi_dmul+0x3a4>)
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0003      	movs	r3, r0
 800188e:	468c      	mov	ip, r1
 8001890:	4463      	add	r3, ip
 8001892:	2000      	movs	r0, #0
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	e77a      	b.n	800178e <__aeabi_dmul+0x82>
 8001898:	2400      	movs	r4, #0
 800189a:	2500      	movs	r5, #0
 800189c:	4a81      	ldr	r2, [pc, #516]	; (8001aa4 <__aeabi_dmul+0x398>)
 800189e:	e7a5      	b.n	80017ec <__aeabi_dmul+0xe0>
 80018a0:	0c2f      	lsrs	r7, r5, #16
 80018a2:	042d      	lsls	r5, r5, #16
 80018a4:	0c2d      	lsrs	r5, r5, #16
 80018a6:	002b      	movs	r3, r5
 80018a8:	0c11      	lsrs	r1, r2, #16
 80018aa:	0412      	lsls	r2, r2, #16
 80018ac:	0c12      	lsrs	r2, r2, #16
 80018ae:	4353      	muls	r3, r2
 80018b0:	4698      	mov	r8, r3
 80018b2:	0013      	movs	r3, r2
 80018b4:	0028      	movs	r0, r5
 80018b6:	437b      	muls	r3, r7
 80018b8:	4699      	mov	r9, r3
 80018ba:	4348      	muls	r0, r1
 80018bc:	4448      	add	r0, r9
 80018be:	4683      	mov	fp, r0
 80018c0:	4640      	mov	r0, r8
 80018c2:	000b      	movs	r3, r1
 80018c4:	0c00      	lsrs	r0, r0, #16
 80018c6:	4682      	mov	sl, r0
 80018c8:	4658      	mov	r0, fp
 80018ca:	437b      	muls	r3, r7
 80018cc:	4450      	add	r0, sl
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	4581      	cmp	r9, r0
 80018d2:	d906      	bls.n	80018e2 <__aeabi_dmul+0x1d6>
 80018d4:	469a      	mov	sl, r3
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	025b      	lsls	r3, r3, #9
 80018da:	4699      	mov	r9, r3
 80018dc:	44ca      	add	sl, r9
 80018de:	4653      	mov	r3, sl
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	0c03      	lsrs	r3, r0, #16
 80018e4:	469b      	mov	fp, r3
 80018e6:	4643      	mov	r3, r8
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	0400      	lsls	r0, r0, #16
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	4698      	mov	r8, r3
 80018f0:	0003      	movs	r3, r0
 80018f2:	4443      	add	r3, r8
 80018f4:	9304      	str	r3, [sp, #16]
 80018f6:	0c33      	lsrs	r3, r6, #16
 80018f8:	4699      	mov	r9, r3
 80018fa:	002b      	movs	r3, r5
 80018fc:	0436      	lsls	r6, r6, #16
 80018fe:	0c36      	lsrs	r6, r6, #16
 8001900:	4373      	muls	r3, r6
 8001902:	4698      	mov	r8, r3
 8001904:	0033      	movs	r3, r6
 8001906:	437b      	muls	r3, r7
 8001908:	469a      	mov	sl, r3
 800190a:	464b      	mov	r3, r9
 800190c:	435d      	muls	r5, r3
 800190e:	435f      	muls	r7, r3
 8001910:	4643      	mov	r3, r8
 8001912:	4455      	add	r5, sl
 8001914:	0c18      	lsrs	r0, r3, #16
 8001916:	1940      	adds	r0, r0, r5
 8001918:	4582      	cmp	sl, r0
 800191a:	d903      	bls.n	8001924 <__aeabi_dmul+0x218>
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	469a      	mov	sl, r3
 8001922:	4457      	add	r7, sl
 8001924:	0c05      	lsrs	r5, r0, #16
 8001926:	19eb      	adds	r3, r5, r7
 8001928:	9305      	str	r3, [sp, #20]
 800192a:	4643      	mov	r3, r8
 800192c:	041d      	lsls	r5, r3, #16
 800192e:	0c2d      	lsrs	r5, r5, #16
 8001930:	0400      	lsls	r0, r0, #16
 8001932:	1940      	adds	r0, r0, r5
 8001934:	0c25      	lsrs	r5, r4, #16
 8001936:	0424      	lsls	r4, r4, #16
 8001938:	0c24      	lsrs	r4, r4, #16
 800193a:	0027      	movs	r7, r4
 800193c:	4357      	muls	r7, r2
 800193e:	436a      	muls	r2, r5
 8001940:	4690      	mov	r8, r2
 8001942:	002a      	movs	r2, r5
 8001944:	0c3b      	lsrs	r3, r7, #16
 8001946:	469a      	mov	sl, r3
 8001948:	434a      	muls	r2, r1
 800194a:	4361      	muls	r1, r4
 800194c:	4441      	add	r1, r8
 800194e:	4451      	add	r1, sl
 8001950:	4483      	add	fp, r0
 8001952:	4588      	cmp	r8, r1
 8001954:	d903      	bls.n	800195e <__aeabi_dmul+0x252>
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	4698      	mov	r8, r3
 800195c:	4442      	add	r2, r8
 800195e:	043f      	lsls	r7, r7, #16
 8001960:	0c0b      	lsrs	r3, r1, #16
 8001962:	0c3f      	lsrs	r7, r7, #16
 8001964:	0409      	lsls	r1, r1, #16
 8001966:	19c9      	adds	r1, r1, r7
 8001968:	0027      	movs	r7, r4
 800196a:	4698      	mov	r8, r3
 800196c:	464b      	mov	r3, r9
 800196e:	4377      	muls	r7, r6
 8001970:	435c      	muls	r4, r3
 8001972:	436e      	muls	r6, r5
 8001974:	435d      	muls	r5, r3
 8001976:	0c3b      	lsrs	r3, r7, #16
 8001978:	4699      	mov	r9, r3
 800197a:	19a4      	adds	r4, r4, r6
 800197c:	444c      	add	r4, r9
 800197e:	4442      	add	r2, r8
 8001980:	9503      	str	r5, [sp, #12]
 8001982:	42a6      	cmp	r6, r4
 8001984:	d904      	bls.n	8001990 <__aeabi_dmul+0x284>
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	025b      	lsls	r3, r3, #9
 800198a:	4698      	mov	r8, r3
 800198c:	4445      	add	r5, r8
 800198e:	9503      	str	r5, [sp, #12]
 8001990:	9b02      	ldr	r3, [sp, #8]
 8001992:	043f      	lsls	r7, r7, #16
 8001994:	445b      	add	r3, fp
 8001996:	001e      	movs	r6, r3
 8001998:	4283      	cmp	r3, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	0423      	lsls	r3, r4, #16
 800199e:	4698      	mov	r8, r3
 80019a0:	9b05      	ldr	r3, [sp, #20]
 80019a2:	0c3f      	lsrs	r7, r7, #16
 80019a4:	4447      	add	r7, r8
 80019a6:	4698      	mov	r8, r3
 80019a8:	1876      	adds	r6, r6, r1
 80019aa:	428e      	cmp	r6, r1
 80019ac:	4189      	sbcs	r1, r1
 80019ae:	4447      	add	r7, r8
 80019b0:	4240      	negs	r0, r0
 80019b2:	183d      	adds	r5, r7, r0
 80019b4:	46a8      	mov	r8, r5
 80019b6:	4693      	mov	fp, r2
 80019b8:	4249      	negs	r1, r1
 80019ba:	468a      	mov	sl, r1
 80019bc:	44c3      	add	fp, r8
 80019be:	429f      	cmp	r7, r3
 80019c0:	41bf      	sbcs	r7, r7
 80019c2:	4580      	cmp	r8, r0
 80019c4:	4180      	sbcs	r0, r0
 80019c6:	9b03      	ldr	r3, [sp, #12]
 80019c8:	44da      	add	sl, fp
 80019ca:	4698      	mov	r8, r3
 80019cc:	4653      	mov	r3, sl
 80019ce:	4240      	negs	r0, r0
 80019d0:	427f      	negs	r7, r7
 80019d2:	4307      	orrs	r7, r0
 80019d4:	0c24      	lsrs	r4, r4, #16
 80019d6:	4593      	cmp	fp, r2
 80019d8:	4192      	sbcs	r2, r2
 80019da:	458a      	cmp	sl, r1
 80019dc:	4189      	sbcs	r1, r1
 80019de:	193f      	adds	r7, r7, r4
 80019e0:	0ddc      	lsrs	r4, r3, #23
 80019e2:	9b04      	ldr	r3, [sp, #16]
 80019e4:	0275      	lsls	r5, r6, #9
 80019e6:	431d      	orrs	r5, r3
 80019e8:	1e68      	subs	r0, r5, #1
 80019ea:	4185      	sbcs	r5, r0
 80019ec:	4653      	mov	r3, sl
 80019ee:	4252      	negs	r2, r2
 80019f0:	4249      	negs	r1, r1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	18bf      	adds	r7, r7, r2
 80019f6:	4447      	add	r7, r8
 80019f8:	0df6      	lsrs	r6, r6, #23
 80019fa:	027f      	lsls	r7, r7, #9
 80019fc:	4335      	orrs	r5, r6
 80019fe:	025a      	lsls	r2, r3, #9
 8001a00:	433c      	orrs	r4, r7
 8001a02:	4315      	orrs	r5, r2
 8001a04:	01fb      	lsls	r3, r7, #7
 8001a06:	d400      	bmi.n	8001a0a <__aeabi_dmul+0x2fe>
 8001a08:	e0c1      	b.n	8001b8e <__aeabi_dmul+0x482>
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	086a      	lsrs	r2, r5, #1
 8001a0e:	400d      	ands	r5, r1
 8001a10:	4315      	orrs	r5, r2
 8001a12:	07e2      	lsls	r2, r4, #31
 8001a14:	4315      	orrs	r5, r2
 8001a16:	0864      	lsrs	r4, r4, #1
 8001a18:	4926      	ldr	r1, [pc, #152]	; (8001ab4 <__aeabi_dmul+0x3a8>)
 8001a1a:	4461      	add	r1, ip
 8001a1c:	2900      	cmp	r1, #0
 8001a1e:	dd56      	ble.n	8001ace <__aeabi_dmul+0x3c2>
 8001a20:	076b      	lsls	r3, r5, #29
 8001a22:	d009      	beq.n	8001a38 <__aeabi_dmul+0x32c>
 8001a24:	220f      	movs	r2, #15
 8001a26:	402a      	ands	r2, r5
 8001a28:	2a04      	cmp	r2, #4
 8001a2a:	d005      	beq.n	8001a38 <__aeabi_dmul+0x32c>
 8001a2c:	1d2a      	adds	r2, r5, #4
 8001a2e:	42aa      	cmp	r2, r5
 8001a30:	41ad      	sbcs	r5, r5
 8001a32:	426d      	negs	r5, r5
 8001a34:	1964      	adds	r4, r4, r5
 8001a36:	0015      	movs	r5, r2
 8001a38:	01e3      	lsls	r3, r4, #7
 8001a3a:	d504      	bpl.n	8001a46 <__aeabi_dmul+0x33a>
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <__aeabi_dmul+0x3ac>)
 8001a40:	00c9      	lsls	r1, r1, #3
 8001a42:	4014      	ands	r4, r2
 8001a44:	4461      	add	r1, ip
 8001a46:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <__aeabi_dmul+0x3b0>)
 8001a48:	4291      	cmp	r1, r2
 8001a4a:	dd00      	ble.n	8001a4e <__aeabi_dmul+0x342>
 8001a4c:	e724      	b.n	8001898 <__aeabi_dmul+0x18c>
 8001a4e:	0762      	lsls	r2, r4, #29
 8001a50:	08ed      	lsrs	r5, r5, #3
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0549      	lsls	r1, r1, #21
 8001a56:	4315      	orrs	r5, r2
 8001a58:	0b24      	lsrs	r4, r4, #12
 8001a5a:	0d4a      	lsrs	r2, r1, #21
 8001a5c:	e6c6      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001a5e:	9701      	str	r7, [sp, #4]
 8001a60:	e6b8      	b.n	80017d4 <__aeabi_dmul+0xc8>
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <__aeabi_dmul+0x398>)
 8001a64:	2003      	movs	r0, #3
 8001a66:	4694      	mov	ip, r2
 8001a68:	4463      	add	r3, ip
 8001a6a:	464a      	mov	r2, r9
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2303      	movs	r3, #3
 8001a70:	431a      	orrs	r2, r3
 8001a72:	4691      	mov	r9, r2
 8001a74:	4652      	mov	r2, sl
 8001a76:	e68a      	b.n	800178e <__aeabi_dmul+0x82>
 8001a78:	4649      	mov	r1, r9
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	4319      	orrs	r1, r3
 8001a7e:	4689      	mov	r9, r1
 8001a80:	2600      	movs	r6, #0
 8001a82:	2001      	movs	r0, #1
 8001a84:	e683      	b.n	800178e <__aeabi_dmul+0x82>
 8001a86:	220c      	movs	r2, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	0005      	movs	r5, r0
 8001a8e:	4691      	mov	r9, r2
 8001a90:	469b      	mov	fp, r3
 8001a92:	e65e      	b.n	8001752 <__aeabi_dmul+0x46>
 8001a94:	2304      	movs	r3, #4
 8001a96:	4699      	mov	r9, r3
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	2400      	movs	r4, #0
 8001aa0:	469b      	mov	fp, r3
 8001aa2:	e656      	b.n	8001752 <__aeabi_dmul+0x46>
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	fffffc01 	.word	0xfffffc01
 8001aac:	0800ab34 	.word	0x0800ab34
 8001ab0:	fffffc0d 	.word	0xfffffc0d
 8001ab4:	000003ff 	.word	0x000003ff
 8001ab8:	feffffff 	.word	0xfeffffff
 8001abc:	000007fe 	.word	0x000007fe
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2480      	movs	r4, #128	; 0x80
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4a44      	ldr	r2, [pc, #272]	; (8001bd8 <__aeabi_dmul+0x4cc>)
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	0324      	lsls	r4, r4, #12
 8001acc:	e68e      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001ace:	2001      	movs	r0, #1
 8001ad0:	1a40      	subs	r0, r0, r1
 8001ad2:	2838      	cmp	r0, #56	; 0x38
 8001ad4:	dd00      	ble.n	8001ad8 <__aeabi_dmul+0x3cc>
 8001ad6:	e686      	b.n	80017e6 <__aeabi_dmul+0xda>
 8001ad8:	281f      	cmp	r0, #31
 8001ada:	dd5b      	ble.n	8001b94 <__aeabi_dmul+0x488>
 8001adc:	221f      	movs	r2, #31
 8001ade:	0023      	movs	r3, r4
 8001ae0:	4252      	negs	r2, r2
 8001ae2:	1a51      	subs	r1, r2, r1
 8001ae4:	40cb      	lsrs	r3, r1
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	2820      	cmp	r0, #32
 8001aea:	d003      	beq.n	8001af4 <__aeabi_dmul+0x3e8>
 8001aec:	4a3b      	ldr	r2, [pc, #236]	; (8001bdc <__aeabi_dmul+0x4d0>)
 8001aee:	4462      	add	r2, ip
 8001af0:	4094      	lsls	r4, r2
 8001af2:	4325      	orrs	r5, r4
 8001af4:	1e6a      	subs	r2, r5, #1
 8001af6:	4195      	sbcs	r5, r2
 8001af8:	002a      	movs	r2, r5
 8001afa:	430a      	orrs	r2, r1
 8001afc:	2107      	movs	r1, #7
 8001afe:	000d      	movs	r5, r1
 8001b00:	2400      	movs	r4, #0
 8001b02:	4015      	ands	r5, r2
 8001b04:	4211      	tst	r1, r2
 8001b06:	d05b      	beq.n	8001bc0 <__aeabi_dmul+0x4b4>
 8001b08:	210f      	movs	r1, #15
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	4011      	ands	r1, r2
 8001b0e:	2904      	cmp	r1, #4
 8001b10:	d053      	beq.n	8001bba <__aeabi_dmul+0x4ae>
 8001b12:	1d11      	adds	r1, r2, #4
 8001b14:	4291      	cmp	r1, r2
 8001b16:	4192      	sbcs	r2, r2
 8001b18:	4252      	negs	r2, r2
 8001b1a:	18a4      	adds	r4, r4, r2
 8001b1c:	000a      	movs	r2, r1
 8001b1e:	0223      	lsls	r3, r4, #8
 8001b20:	d54b      	bpl.n	8001bba <__aeabi_dmul+0x4ae>
 8001b22:	2201      	movs	r2, #1
 8001b24:	2400      	movs	r4, #0
 8001b26:	2500      	movs	r5, #0
 8001b28:	e660      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	031b      	lsls	r3, r3, #12
 8001b2e:	421c      	tst	r4, r3
 8001b30:	d009      	beq.n	8001b46 <__aeabi_dmul+0x43a>
 8001b32:	421e      	tst	r6, r3
 8001b34:	d107      	bne.n	8001b46 <__aeabi_dmul+0x43a>
 8001b36:	4333      	orrs	r3, r6
 8001b38:	031c      	lsls	r4, r3, #12
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0015      	movs	r5, r2
 8001b3e:	0b24      	lsrs	r4, r4, #12
 8001b40:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <__aeabi_dmul+0x4cc>)
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	e652      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	0312      	lsls	r2, r2, #12
 8001b4a:	4314      	orrs	r4, r2
 8001b4c:	0324      	lsls	r4, r4, #12
 8001b4e:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <__aeabi_dmul+0x4cc>)
 8001b50:	0b24      	lsrs	r4, r4, #12
 8001b52:	9701      	str	r7, [sp, #4]
 8001b54:	e64a      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001b56:	f000 fd51 	bl	80025fc <__clzsi2>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	3215      	adds	r2, #21
 8001b60:	3020      	adds	r0, #32
 8001b62:	2a1c      	cmp	r2, #28
 8001b64:	dc00      	bgt.n	8001b68 <__aeabi_dmul+0x45c>
 8001b66:	e684      	b.n	8001872 <__aeabi_dmul+0x166>
 8001b68:	4656      	mov	r6, sl
 8001b6a:	3b08      	subs	r3, #8
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	409e      	lsls	r6, r3
 8001b70:	e689      	b.n	8001886 <__aeabi_dmul+0x17a>
 8001b72:	f000 fd43 	bl	80025fc <__clzsi2>
 8001b76:	0001      	movs	r1, r0
 8001b78:	0002      	movs	r2, r0
 8001b7a:	3115      	adds	r1, #21
 8001b7c:	3220      	adds	r2, #32
 8001b7e:	291c      	cmp	r1, #28
 8001b80:	dc00      	bgt.n	8001b84 <__aeabi_dmul+0x478>
 8001b82:	e64e      	b.n	8001822 <__aeabi_dmul+0x116>
 8001b84:	0034      	movs	r4, r6
 8001b86:	3808      	subs	r0, #8
 8001b88:	2500      	movs	r5, #0
 8001b8a:	4084      	lsls	r4, r0
 8001b8c:	e653      	b.n	8001836 <__aeabi_dmul+0x12a>
 8001b8e:	9b00      	ldr	r3, [sp, #0]
 8001b90:	469c      	mov	ip, r3
 8001b92:	e741      	b.n	8001a18 <__aeabi_dmul+0x30c>
 8001b94:	4912      	ldr	r1, [pc, #72]	; (8001be0 <__aeabi_dmul+0x4d4>)
 8001b96:	0022      	movs	r2, r4
 8001b98:	4461      	add	r1, ip
 8001b9a:	002e      	movs	r6, r5
 8001b9c:	408d      	lsls	r5, r1
 8001b9e:	408a      	lsls	r2, r1
 8001ba0:	40c6      	lsrs	r6, r0
 8001ba2:	1e69      	subs	r1, r5, #1
 8001ba4:	418d      	sbcs	r5, r1
 8001ba6:	4332      	orrs	r2, r6
 8001ba8:	432a      	orrs	r2, r5
 8001baa:	40c4      	lsrs	r4, r0
 8001bac:	0753      	lsls	r3, r2, #29
 8001bae:	d0b6      	beq.n	8001b1e <__aeabi_dmul+0x412>
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	4011      	ands	r1, r2
 8001bb4:	2904      	cmp	r1, #4
 8001bb6:	d1ac      	bne.n	8001b12 <__aeabi_dmul+0x406>
 8001bb8:	e7b1      	b.n	8001b1e <__aeabi_dmul+0x412>
 8001bba:	0765      	lsls	r5, r4, #29
 8001bbc:	0264      	lsls	r4, r4, #9
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	08d2      	lsrs	r2, r2, #3
 8001bc2:	4315      	orrs	r5, r2
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	e611      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	0312      	lsls	r2, r2, #12
 8001bcc:	4314      	orrs	r4, r2
 8001bce:	0324      	lsls	r4, r4, #12
 8001bd0:	4a01      	ldr	r2, [pc, #4]	; (8001bd8 <__aeabi_dmul+0x4cc>)
 8001bd2:	0b24      	lsrs	r4, r4, #12
 8001bd4:	e60a      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	000007ff 	.word	0x000007ff
 8001bdc:	0000043e 	.word	0x0000043e
 8001be0:	0000041e 	.word	0x0000041e

08001be4 <__aeabi_dsub>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	4657      	mov	r7, sl
 8001be8:	464e      	mov	r6, r9
 8001bea:	4645      	mov	r5, r8
 8001bec:	46de      	mov	lr, fp
 8001bee:	0004      	movs	r4, r0
 8001bf0:	b5e0      	push	{r5, r6, r7, lr}
 8001bf2:	001f      	movs	r7, r3
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	030b      	lsls	r3, r1, #12
 8001bf8:	0f62      	lsrs	r2, r4, #29
 8001bfa:	004e      	lsls	r6, r1, #1
 8001bfc:	0fcd      	lsrs	r5, r1, #31
 8001bfe:	0a5b      	lsrs	r3, r3, #9
 8001c00:	0339      	lsls	r1, r7, #12
 8001c02:	4313      	orrs	r3, r2
 8001c04:	0a49      	lsrs	r1, r1, #9
 8001c06:	00e2      	lsls	r2, r4, #3
 8001c08:	0f44      	lsrs	r4, r0, #29
 8001c0a:	4321      	orrs	r1, r4
 8001c0c:	4cc2      	ldr	r4, [pc, #776]	; (8001f18 <__aeabi_dsub+0x334>)
 8001c0e:	4691      	mov	r9, r2
 8001c10:	4692      	mov	sl, r2
 8001c12:	00c0      	lsls	r0, r0, #3
 8001c14:	007a      	lsls	r2, r7, #1
 8001c16:	4680      	mov	r8, r0
 8001c18:	0d76      	lsrs	r6, r6, #21
 8001c1a:	0d52      	lsrs	r2, r2, #21
 8001c1c:	0fff      	lsrs	r7, r7, #31
 8001c1e:	42a2      	cmp	r2, r4
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x40>
 8001c22:	e0b4      	b.n	8001d8e <__aeabi_dsub+0x1aa>
 8001c24:	2401      	movs	r4, #1
 8001c26:	4067      	eors	r7, r4
 8001c28:	46bb      	mov	fp, r7
 8001c2a:	42bd      	cmp	r5, r7
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x4c>
 8001c2e:	e088      	b.n	8001d42 <__aeabi_dsub+0x15e>
 8001c30:	1ab4      	subs	r4, r6, r2
 8001c32:	46a4      	mov	ip, r4
 8001c34:	2c00      	cmp	r4, #0
 8001c36:	dc00      	bgt.n	8001c3a <__aeabi_dsub+0x56>
 8001c38:	e0b2      	b.n	8001da0 <__aeabi_dsub+0x1bc>
 8001c3a:	2a00      	cmp	r2, #0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x5c>
 8001c3e:	e0c5      	b.n	8001dcc <__aeabi_dsub+0x1e8>
 8001c40:	4ab5      	ldr	r2, [pc, #724]	; (8001f18 <__aeabi_dsub+0x334>)
 8001c42:	4296      	cmp	r6, r2
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dsub+0x64>
 8001c46:	e28b      	b.n	8002160 <__aeabi_dsub+0x57c>
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	0412      	lsls	r2, r2, #16
 8001c4c:	4311      	orrs	r1, r2
 8001c4e:	4662      	mov	r2, ip
 8001c50:	2a38      	cmp	r2, #56	; 0x38
 8001c52:	dd00      	ble.n	8001c56 <__aeabi_dsub+0x72>
 8001c54:	e1a1      	b.n	8001f9a <__aeabi_dsub+0x3b6>
 8001c56:	2a1f      	cmp	r2, #31
 8001c58:	dd00      	ble.n	8001c5c <__aeabi_dsub+0x78>
 8001c5a:	e216      	b.n	800208a <__aeabi_dsub+0x4a6>
 8001c5c:	2720      	movs	r7, #32
 8001c5e:	000c      	movs	r4, r1
 8001c60:	1abf      	subs	r7, r7, r2
 8001c62:	40bc      	lsls	r4, r7
 8001c64:	0002      	movs	r2, r0
 8001c66:	46a0      	mov	r8, r4
 8001c68:	4664      	mov	r4, ip
 8001c6a:	40b8      	lsls	r0, r7
 8001c6c:	40e2      	lsrs	r2, r4
 8001c6e:	4644      	mov	r4, r8
 8001c70:	4314      	orrs	r4, r2
 8001c72:	0002      	movs	r2, r0
 8001c74:	1e50      	subs	r0, r2, #1
 8001c76:	4182      	sbcs	r2, r0
 8001c78:	4660      	mov	r0, ip
 8001c7a:	40c1      	lsrs	r1, r0
 8001c7c:	4322      	orrs	r2, r4
 8001c7e:	1a5b      	subs	r3, r3, r1
 8001c80:	4649      	mov	r1, r9
 8001c82:	1a8c      	subs	r4, r1, r2
 8001c84:	45a1      	cmp	r9, r4
 8001c86:	4192      	sbcs	r2, r2
 8001c88:	4252      	negs	r2, r2
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	4643      	mov	r3, r8
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	d400      	bmi.n	8001c96 <__aeabi_dsub+0xb2>
 8001c94:	e117      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 8001c96:	4643      	mov	r3, r8
 8001c98:	025b      	lsls	r3, r3, #9
 8001c9a:	0a5b      	lsrs	r3, r3, #9
 8001c9c:	4698      	mov	r8, r3
 8001c9e:	4643      	mov	r3, r8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dsub+0xc2>
 8001ca4:	e16c      	b.n	8001f80 <__aeabi_dsub+0x39c>
 8001ca6:	4640      	mov	r0, r8
 8001ca8:	f000 fca8 	bl	80025fc <__clzsi2>
 8001cac:	0002      	movs	r2, r0
 8001cae:	3a08      	subs	r2, #8
 8001cb0:	2120      	movs	r1, #32
 8001cb2:	0020      	movs	r0, r4
 8001cb4:	4643      	mov	r3, r8
 8001cb6:	1a89      	subs	r1, r1, r2
 8001cb8:	4093      	lsls	r3, r2
 8001cba:	40c8      	lsrs	r0, r1
 8001cbc:	4094      	lsls	r4, r2
 8001cbe:	4303      	orrs	r3, r0
 8001cc0:	4296      	cmp	r6, r2
 8001cc2:	dd00      	ble.n	8001cc6 <__aeabi_dsub+0xe2>
 8001cc4:	e157      	b.n	8001f76 <__aeabi_dsub+0x392>
 8001cc6:	1b96      	subs	r6, r2, r6
 8001cc8:	1c71      	adds	r1, r6, #1
 8001cca:	291f      	cmp	r1, #31
 8001ccc:	dd00      	ble.n	8001cd0 <__aeabi_dsub+0xec>
 8001cce:	e1cb      	b.n	8002068 <__aeabi_dsub+0x484>
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	0026      	movs	r6, r4
 8001cd6:	1a52      	subs	r2, r2, r1
 8001cd8:	4094      	lsls	r4, r2
 8001cda:	4090      	lsls	r0, r2
 8001cdc:	40ce      	lsrs	r6, r1
 8001cde:	40cb      	lsrs	r3, r1
 8001ce0:	1e62      	subs	r2, r4, #1
 8001ce2:	4194      	sbcs	r4, r2
 8001ce4:	4330      	orrs	r0, r6
 8001ce6:	4698      	mov	r8, r3
 8001ce8:	2600      	movs	r6, #0
 8001cea:	4304      	orrs	r4, r0
 8001cec:	0763      	lsls	r3, r4, #29
 8001cee:	d009      	beq.n	8001d04 <__aeabi_dsub+0x120>
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	4023      	ands	r3, r4
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d005      	beq.n	8001d04 <__aeabi_dsub+0x120>
 8001cf8:	1d23      	adds	r3, r4, #4
 8001cfa:	42a3      	cmp	r3, r4
 8001cfc:	41a4      	sbcs	r4, r4
 8001cfe:	4264      	negs	r4, r4
 8001d00:	44a0      	add	r8, r4
 8001d02:	001c      	movs	r4, r3
 8001d04:	4643      	mov	r3, r8
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	d400      	bmi.n	8001d0c <__aeabi_dsub+0x128>
 8001d0a:	e0df      	b.n	8001ecc <__aeabi_dsub+0x2e8>
 8001d0c:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <__aeabi_dsub+0x334>)
 8001d0e:	3601      	adds	r6, #1
 8001d10:	429e      	cmp	r6, r3
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x132>
 8001d14:	e0fb      	b.n	8001f0e <__aeabi_dsub+0x32a>
 8001d16:	4642      	mov	r2, r8
 8001d18:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <__aeabi_dsub+0x338>)
 8001d1a:	08e4      	lsrs	r4, r4, #3
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	0571      	lsls	r1, r6, #21
 8001d22:	0752      	lsls	r2, r2, #29
 8001d24:	025b      	lsls	r3, r3, #9
 8001d26:	4322      	orrs	r2, r4
 8001d28:	0b1b      	lsrs	r3, r3, #12
 8001d2a:	0d49      	lsrs	r1, r1, #21
 8001d2c:	0509      	lsls	r1, r1, #20
 8001d2e:	07ed      	lsls	r5, r5, #31
 8001d30:	4319      	orrs	r1, r3
 8001d32:	4329      	orrs	r1, r5
 8001d34:	0010      	movs	r0, r2
 8001d36:	bcf0      	pop	{r4, r5, r6, r7}
 8001d38:	46bb      	mov	fp, r7
 8001d3a:	46b2      	mov	sl, r6
 8001d3c:	46a9      	mov	r9, r5
 8001d3e:	46a0      	mov	r8, r4
 8001d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d42:	1ab4      	subs	r4, r6, r2
 8001d44:	46a4      	mov	ip, r4
 8001d46:	2c00      	cmp	r4, #0
 8001d48:	dd58      	ble.n	8001dfc <__aeabi_dsub+0x218>
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x16c>
 8001d4e:	e09e      	b.n	8001e8e <__aeabi_dsub+0x2aa>
 8001d50:	4a71      	ldr	r2, [pc, #452]	; (8001f18 <__aeabi_dsub+0x334>)
 8001d52:	4296      	cmp	r6, r2
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x174>
 8001d56:	e13b      	b.n	8001fd0 <__aeabi_dsub+0x3ec>
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	0412      	lsls	r2, r2, #16
 8001d5c:	4311      	orrs	r1, r2
 8001d5e:	4662      	mov	r2, ip
 8001d60:	2a38      	cmp	r2, #56	; 0x38
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dsub+0x182>
 8001d64:	e0c1      	b.n	8001eea <__aeabi_dsub+0x306>
 8001d66:	2a1f      	cmp	r2, #31
 8001d68:	dc00      	bgt.n	8001d6c <__aeabi_dsub+0x188>
 8001d6a:	e1bb      	b.n	80020e4 <__aeabi_dsub+0x500>
 8001d6c:	000c      	movs	r4, r1
 8001d6e:	3a20      	subs	r2, #32
 8001d70:	40d4      	lsrs	r4, r2
 8001d72:	0022      	movs	r2, r4
 8001d74:	4664      	mov	r4, ip
 8001d76:	2c20      	cmp	r4, #32
 8001d78:	d004      	beq.n	8001d84 <__aeabi_dsub+0x1a0>
 8001d7a:	2740      	movs	r7, #64	; 0x40
 8001d7c:	1b3f      	subs	r7, r7, r4
 8001d7e:	40b9      	lsls	r1, r7
 8001d80:	4308      	orrs	r0, r1
 8001d82:	4680      	mov	r8, r0
 8001d84:	4644      	mov	r4, r8
 8001d86:	1e61      	subs	r1, r4, #1
 8001d88:	418c      	sbcs	r4, r1
 8001d8a:	4314      	orrs	r4, r2
 8001d8c:	e0b1      	b.n	8001ef2 <__aeabi_dsub+0x30e>
 8001d8e:	000c      	movs	r4, r1
 8001d90:	4304      	orrs	r4, r0
 8001d92:	d02a      	beq.n	8001dea <__aeabi_dsub+0x206>
 8001d94:	46bb      	mov	fp, r7
 8001d96:	42bd      	cmp	r5, r7
 8001d98:	d02d      	beq.n	8001df6 <__aeabi_dsub+0x212>
 8001d9a:	4c61      	ldr	r4, [pc, #388]	; (8001f20 <__aeabi_dsub+0x33c>)
 8001d9c:	46a4      	mov	ip, r4
 8001d9e:	44b4      	add	ip, r6
 8001da0:	4664      	mov	r4, ip
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	d05c      	beq.n	8001e60 <__aeabi_dsub+0x27c>
 8001da6:	1b94      	subs	r4, r2, r6
 8001da8:	46a4      	mov	ip, r4
 8001daa:	2e00      	cmp	r6, #0
 8001dac:	d000      	beq.n	8001db0 <__aeabi_dsub+0x1cc>
 8001dae:	e115      	b.n	8001fdc <__aeabi_dsub+0x3f8>
 8001db0:	464d      	mov	r5, r9
 8001db2:	431d      	orrs	r5, r3
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x1d4>
 8001db6:	e1c3      	b.n	8002140 <__aeabi_dsub+0x55c>
 8001db8:	1e65      	subs	r5, r4, #1
 8001dba:	2c01      	cmp	r4, #1
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x1dc>
 8001dbe:	e20c      	b.n	80021da <__aeabi_dsub+0x5f6>
 8001dc0:	4e55      	ldr	r6, [pc, #340]	; (8001f18 <__aeabi_dsub+0x334>)
 8001dc2:	42b4      	cmp	r4, r6
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x1e4>
 8001dc6:	e1f8      	b.n	80021ba <__aeabi_dsub+0x5d6>
 8001dc8:	46ac      	mov	ip, r5
 8001dca:	e10e      	b.n	8001fea <__aeabi_dsub+0x406>
 8001dcc:	000a      	movs	r2, r1
 8001dce:	4302      	orrs	r2, r0
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1f0>
 8001dd2:	e136      	b.n	8002042 <__aeabi_dsub+0x45e>
 8001dd4:	0022      	movs	r2, r4
 8001dd6:	3a01      	subs	r2, #1
 8001dd8:	2c01      	cmp	r4, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1fa>
 8001ddc:	e1c6      	b.n	800216c <__aeabi_dsub+0x588>
 8001dde:	4c4e      	ldr	r4, [pc, #312]	; (8001f18 <__aeabi_dsub+0x334>)
 8001de0:	45a4      	cmp	ip, r4
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x202>
 8001de4:	e0f4      	b.n	8001fd0 <__aeabi_dsub+0x3ec>
 8001de6:	4694      	mov	ip, r2
 8001de8:	e731      	b.n	8001c4e <__aeabi_dsub+0x6a>
 8001dea:	2401      	movs	r4, #1
 8001dec:	4067      	eors	r7, r4
 8001dee:	46bb      	mov	fp, r7
 8001df0:	42bd      	cmp	r5, r7
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x212>
 8001df4:	e71c      	b.n	8001c30 <__aeabi_dsub+0x4c>
 8001df6:	4c4a      	ldr	r4, [pc, #296]	; (8001f20 <__aeabi_dsub+0x33c>)
 8001df8:	46a4      	mov	ip, r4
 8001dfa:	44b4      	add	ip, r6
 8001dfc:	4664      	mov	r4, ip
 8001dfe:	2c00      	cmp	r4, #0
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x220>
 8001e02:	e0cf      	b.n	8001fa4 <__aeabi_dsub+0x3c0>
 8001e04:	1b94      	subs	r4, r2, r6
 8001e06:	46a4      	mov	ip, r4
 8001e08:	2e00      	cmp	r6, #0
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x22a>
 8001e0c:	e15c      	b.n	80020c8 <__aeabi_dsub+0x4e4>
 8001e0e:	4e42      	ldr	r6, [pc, #264]	; (8001f18 <__aeabi_dsub+0x334>)
 8001e10:	42b2      	cmp	r2, r6
 8001e12:	d100      	bne.n	8001e16 <__aeabi_dsub+0x232>
 8001e14:	e1ec      	b.n	80021f0 <__aeabi_dsub+0x60c>
 8001e16:	2680      	movs	r6, #128	; 0x80
 8001e18:	0436      	lsls	r6, r6, #16
 8001e1a:	4333      	orrs	r3, r6
 8001e1c:	4664      	mov	r4, ip
 8001e1e:	2c38      	cmp	r4, #56	; 0x38
 8001e20:	dd00      	ble.n	8001e24 <__aeabi_dsub+0x240>
 8001e22:	e1b3      	b.n	800218c <__aeabi_dsub+0x5a8>
 8001e24:	2c1f      	cmp	r4, #31
 8001e26:	dd00      	ble.n	8001e2a <__aeabi_dsub+0x246>
 8001e28:	e238      	b.n	800229c <__aeabi_dsub+0x6b8>
 8001e2a:	2620      	movs	r6, #32
 8001e2c:	1b36      	subs	r6, r6, r4
 8001e2e:	001c      	movs	r4, r3
 8001e30:	40b4      	lsls	r4, r6
 8001e32:	464f      	mov	r7, r9
 8001e34:	46a0      	mov	r8, r4
 8001e36:	4664      	mov	r4, ip
 8001e38:	40e7      	lsrs	r7, r4
 8001e3a:	4644      	mov	r4, r8
 8001e3c:	433c      	orrs	r4, r7
 8001e3e:	464f      	mov	r7, r9
 8001e40:	40b7      	lsls	r7, r6
 8001e42:	003e      	movs	r6, r7
 8001e44:	1e77      	subs	r7, r6, #1
 8001e46:	41be      	sbcs	r6, r7
 8001e48:	4334      	orrs	r4, r6
 8001e4a:	4666      	mov	r6, ip
 8001e4c:	40f3      	lsrs	r3, r6
 8001e4e:	18c9      	adds	r1, r1, r3
 8001e50:	1824      	adds	r4, r4, r0
 8001e52:	4284      	cmp	r4, r0
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	425b      	negs	r3, r3
 8001e58:	4698      	mov	r8, r3
 8001e5a:	0016      	movs	r6, r2
 8001e5c:	4488      	add	r8, r1
 8001e5e:	e04e      	b.n	8001efe <__aeabi_dsub+0x31a>
 8001e60:	4a30      	ldr	r2, [pc, #192]	; (8001f24 <__aeabi_dsub+0x340>)
 8001e62:	1c74      	adds	r4, r6, #1
 8001e64:	4214      	tst	r4, r2
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dsub+0x286>
 8001e68:	e0d6      	b.n	8002018 <__aeabi_dsub+0x434>
 8001e6a:	464a      	mov	r2, r9
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	2e00      	cmp	r6, #0
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dsub+0x290>
 8001e72:	e15b      	b.n	800212c <__aeabi_dsub+0x548>
 8001e74:	2a00      	cmp	r2, #0
 8001e76:	d100      	bne.n	8001e7a <__aeabi_dsub+0x296>
 8001e78:	e1a5      	b.n	80021c6 <__aeabi_dsub+0x5e2>
 8001e7a:	000a      	movs	r2, r1
 8001e7c:	4302      	orrs	r2, r0
 8001e7e:	d000      	beq.n	8001e82 <__aeabi_dsub+0x29e>
 8001e80:	e1bb      	b.n	80021fa <__aeabi_dsub+0x616>
 8001e82:	464a      	mov	r2, r9
 8001e84:	0759      	lsls	r1, r3, #29
 8001e86:	08d2      	lsrs	r2, r2, #3
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	e027      	b.n	8001ede <__aeabi_dsub+0x2fa>
 8001e8e:	000a      	movs	r2, r1
 8001e90:	4302      	orrs	r2, r0
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x2b2>
 8001e94:	e174      	b.n	8002180 <__aeabi_dsub+0x59c>
 8001e96:	0022      	movs	r2, r4
 8001e98:	3a01      	subs	r2, #1
 8001e9a:	2c01      	cmp	r4, #1
 8001e9c:	d005      	beq.n	8001eaa <__aeabi_dsub+0x2c6>
 8001e9e:	4c1e      	ldr	r4, [pc, #120]	; (8001f18 <__aeabi_dsub+0x334>)
 8001ea0:	45a4      	cmp	ip, r4
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x2c2>
 8001ea4:	e094      	b.n	8001fd0 <__aeabi_dsub+0x3ec>
 8001ea6:	4694      	mov	ip, r2
 8001ea8:	e759      	b.n	8001d5e <__aeabi_dsub+0x17a>
 8001eaa:	4448      	add	r0, r9
 8001eac:	4548      	cmp	r0, r9
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	185b      	adds	r3, r3, r1
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	0004      	movs	r4, r0
 8001eb6:	4252      	negs	r2, r2
 8001eb8:	4490      	add	r8, r2
 8001eba:	4643      	mov	r3, r8
 8001ebc:	2602      	movs	r6, #2
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	d500      	bpl.n	8001ec4 <__aeabi_dsub+0x2e0>
 8001ec2:	e0c4      	b.n	800204e <__aeabi_dsub+0x46a>
 8001ec4:	3e01      	subs	r6, #1
 8001ec6:	0763      	lsls	r3, r4, #29
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_dsub+0x2e8>
 8001eca:	e711      	b.n	8001cf0 <__aeabi_dsub+0x10c>
 8001ecc:	4643      	mov	r3, r8
 8001ece:	46b4      	mov	ip, r6
 8001ed0:	0759      	lsls	r1, r3, #29
 8001ed2:	08e2      	lsrs	r2, r4, #3
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	490f      	ldr	r1, [pc, #60]	; (8001f18 <__aeabi_dsub+0x334>)
 8001eda:	458c      	cmp	ip, r1
 8001edc:	d040      	beq.n	8001f60 <__aeabi_dsub+0x37c>
 8001ede:	4661      	mov	r1, ip
 8001ee0:	031b      	lsls	r3, r3, #12
 8001ee2:	0549      	lsls	r1, r1, #21
 8001ee4:	0b1b      	lsrs	r3, r3, #12
 8001ee6:	0d49      	lsrs	r1, r1, #21
 8001ee8:	e720      	b.n	8001d2c <__aeabi_dsub+0x148>
 8001eea:	4301      	orrs	r1, r0
 8001eec:	000c      	movs	r4, r1
 8001eee:	1e61      	subs	r1, r4, #1
 8001ef0:	418c      	sbcs	r4, r1
 8001ef2:	444c      	add	r4, r9
 8001ef4:	454c      	cmp	r4, r9
 8001ef6:	4192      	sbcs	r2, r2
 8001ef8:	4252      	negs	r2, r2
 8001efa:	4690      	mov	r8, r2
 8001efc:	4498      	add	r8, r3
 8001efe:	4643      	mov	r3, r8
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	d5e0      	bpl.n	8001ec6 <__aeabi_dsub+0x2e2>
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <__aeabi_dsub+0x334>)
 8001f06:	3601      	adds	r6, #1
 8001f08:	429e      	cmp	r6, r3
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x32a>
 8001f0c:	e09f      	b.n	800204e <__aeabi_dsub+0x46a>
 8001f0e:	0031      	movs	r1, r6
 8001f10:	2300      	movs	r3, #0
 8001f12:	2200      	movs	r2, #0
 8001f14:	e70a      	b.n	8001d2c <__aeabi_dsub+0x148>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	000007ff 	.word	0x000007ff
 8001f1c:	ff7fffff 	.word	0xff7fffff
 8001f20:	fffff801 	.word	0xfffff801
 8001f24:	000007fe 	.word	0x000007fe
 8001f28:	2a00      	cmp	r2, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x34a>
 8001f2c:	e160      	b.n	80021f0 <__aeabi_dsub+0x60c>
 8001f2e:	000a      	movs	r2, r1
 8001f30:	4302      	orrs	r2, r0
 8001f32:	d04d      	beq.n	8001fd0 <__aeabi_dsub+0x3ec>
 8001f34:	464a      	mov	r2, r9
 8001f36:	075c      	lsls	r4, r3, #29
 8001f38:	08d2      	lsrs	r2, r2, #3
 8001f3a:	4322      	orrs	r2, r4
 8001f3c:	2480      	movs	r4, #128	; 0x80
 8001f3e:	08db      	lsrs	r3, r3, #3
 8001f40:	0324      	lsls	r4, r4, #12
 8001f42:	4223      	tst	r3, r4
 8001f44:	d007      	beq.n	8001f56 <__aeabi_dsub+0x372>
 8001f46:	08ce      	lsrs	r6, r1, #3
 8001f48:	4226      	tst	r6, r4
 8001f4a:	d104      	bne.n	8001f56 <__aeabi_dsub+0x372>
 8001f4c:	465d      	mov	r5, fp
 8001f4e:	0033      	movs	r3, r6
 8001f50:	08c2      	lsrs	r2, r0, #3
 8001f52:	0749      	lsls	r1, r1, #29
 8001f54:	430a      	orrs	r2, r1
 8001f56:	0f51      	lsrs	r1, r2, #29
 8001f58:	00d2      	lsls	r2, r2, #3
 8001f5a:	08d2      	lsrs	r2, r2, #3
 8001f5c:	0749      	lsls	r1, r1, #29
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	0011      	movs	r1, r2
 8001f62:	4319      	orrs	r1, r3
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x384>
 8001f66:	e1c8      	b.n	80022fa <__aeabi_dsub+0x716>
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0309      	lsls	r1, r1, #12
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	031b      	lsls	r3, r3, #12
 8001f70:	49d5      	ldr	r1, [pc, #852]	; (80022c8 <__aeabi_dsub+0x6e4>)
 8001f72:	0b1b      	lsrs	r3, r3, #12
 8001f74:	e6da      	b.n	8001d2c <__aeabi_dsub+0x148>
 8001f76:	49d5      	ldr	r1, [pc, #852]	; (80022cc <__aeabi_dsub+0x6e8>)
 8001f78:	1ab6      	subs	r6, r6, r2
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	4698      	mov	r8, r3
 8001f7e:	e6b5      	b.n	8001cec <__aeabi_dsub+0x108>
 8001f80:	0020      	movs	r0, r4
 8001f82:	f000 fb3b 	bl	80025fc <__clzsi2>
 8001f86:	0002      	movs	r2, r0
 8001f88:	3218      	adds	r2, #24
 8001f8a:	2a1f      	cmp	r2, #31
 8001f8c:	dc00      	bgt.n	8001f90 <__aeabi_dsub+0x3ac>
 8001f8e:	e68f      	b.n	8001cb0 <__aeabi_dsub+0xcc>
 8001f90:	0023      	movs	r3, r4
 8001f92:	3808      	subs	r0, #8
 8001f94:	4083      	lsls	r3, r0
 8001f96:	2400      	movs	r4, #0
 8001f98:	e692      	b.n	8001cc0 <__aeabi_dsub+0xdc>
 8001f9a:	4308      	orrs	r0, r1
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	1e50      	subs	r0, r2, #1
 8001fa0:	4182      	sbcs	r2, r0
 8001fa2:	e66d      	b.n	8001c80 <__aeabi_dsub+0x9c>
 8001fa4:	4cca      	ldr	r4, [pc, #808]	; (80022d0 <__aeabi_dsub+0x6ec>)
 8001fa6:	1c72      	adds	r2, r6, #1
 8001fa8:	4222      	tst	r2, r4
 8001faa:	d000      	beq.n	8001fae <__aeabi_dsub+0x3ca>
 8001fac:	e0ad      	b.n	800210a <__aeabi_dsub+0x526>
 8001fae:	464a      	mov	r2, r9
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	2e00      	cmp	r6, #0
 8001fb4:	d1b8      	bne.n	8001f28 <__aeabi_dsub+0x344>
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x3d8>
 8001fba:	e158      	b.n	800226e <__aeabi_dsub+0x68a>
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	4302      	orrs	r2, r0
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_dsub+0x3e0>
 8001fc2:	e159      	b.n	8002278 <__aeabi_dsub+0x694>
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	0759      	lsls	r1, r3, #29
 8001fc8:	08d2      	lsrs	r2, r2, #3
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	e786      	b.n	8001ede <__aeabi_dsub+0x2fa>
 8001fd0:	464a      	mov	r2, r9
 8001fd2:	0759      	lsls	r1, r3, #29
 8001fd4:	08d2      	lsrs	r2, r2, #3
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	e7c1      	b.n	8001f60 <__aeabi_dsub+0x37c>
 8001fdc:	4dba      	ldr	r5, [pc, #744]	; (80022c8 <__aeabi_dsub+0x6e4>)
 8001fde:	42aa      	cmp	r2, r5
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x400>
 8001fe2:	e11e      	b.n	8002222 <__aeabi_dsub+0x63e>
 8001fe4:	2580      	movs	r5, #128	; 0x80
 8001fe6:	042d      	lsls	r5, r5, #16
 8001fe8:	432b      	orrs	r3, r5
 8001fea:	4664      	mov	r4, ip
 8001fec:	2c38      	cmp	r4, #56	; 0x38
 8001fee:	dc5d      	bgt.n	80020ac <__aeabi_dsub+0x4c8>
 8001ff0:	2c1f      	cmp	r4, #31
 8001ff2:	dd00      	ble.n	8001ff6 <__aeabi_dsub+0x412>
 8001ff4:	e0d0      	b.n	8002198 <__aeabi_dsub+0x5b4>
 8001ff6:	2520      	movs	r5, #32
 8001ff8:	4667      	mov	r7, ip
 8001ffa:	1b2d      	subs	r5, r5, r4
 8001ffc:	464e      	mov	r6, r9
 8001ffe:	001c      	movs	r4, r3
 8002000:	40fe      	lsrs	r6, r7
 8002002:	40ac      	lsls	r4, r5
 8002004:	4334      	orrs	r4, r6
 8002006:	464e      	mov	r6, r9
 8002008:	40ae      	lsls	r6, r5
 800200a:	0035      	movs	r5, r6
 800200c:	40fb      	lsrs	r3, r7
 800200e:	1e6e      	subs	r6, r5, #1
 8002010:	41b5      	sbcs	r5, r6
 8002012:	1ac9      	subs	r1, r1, r3
 8002014:	432c      	orrs	r4, r5
 8002016:	e04e      	b.n	80020b6 <__aeabi_dsub+0x4d2>
 8002018:	464a      	mov	r2, r9
 800201a:	1a14      	subs	r4, r2, r0
 800201c:	45a1      	cmp	r9, r4
 800201e:	4192      	sbcs	r2, r2
 8002020:	4252      	negs	r2, r2
 8002022:	4690      	mov	r8, r2
 8002024:	1a5f      	subs	r7, r3, r1
 8002026:	003a      	movs	r2, r7
 8002028:	4647      	mov	r7, r8
 800202a:	1bd2      	subs	r2, r2, r7
 800202c:	4690      	mov	r8, r2
 800202e:	0212      	lsls	r2, r2, #8
 8002030:	d500      	bpl.n	8002034 <__aeabi_dsub+0x450>
 8002032:	e08b      	b.n	800214c <__aeabi_dsub+0x568>
 8002034:	4642      	mov	r2, r8
 8002036:	4322      	orrs	r2, r4
 8002038:	d000      	beq.n	800203c <__aeabi_dsub+0x458>
 800203a:	e630      	b.n	8001c9e <__aeabi_dsub+0xba>
 800203c:	2300      	movs	r3, #0
 800203e:	2500      	movs	r5, #0
 8002040:	e74d      	b.n	8001ede <__aeabi_dsub+0x2fa>
 8002042:	464a      	mov	r2, r9
 8002044:	0759      	lsls	r1, r3, #29
 8002046:	08d2      	lsrs	r2, r2, #3
 8002048:	430a      	orrs	r2, r1
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	e744      	b.n	8001ed8 <__aeabi_dsub+0x2f4>
 800204e:	4642      	mov	r2, r8
 8002050:	4b9e      	ldr	r3, [pc, #632]	; (80022cc <__aeabi_dsub+0x6e8>)
 8002052:	0861      	lsrs	r1, r4, #1
 8002054:	401a      	ands	r2, r3
 8002056:	0013      	movs	r3, r2
 8002058:	2201      	movs	r2, #1
 800205a:	4014      	ands	r4, r2
 800205c:	430c      	orrs	r4, r1
 800205e:	07da      	lsls	r2, r3, #31
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	4698      	mov	r8, r3
 8002064:	4314      	orrs	r4, r2
 8002066:	e641      	b.n	8001cec <__aeabi_dsub+0x108>
 8002068:	001a      	movs	r2, r3
 800206a:	3e1f      	subs	r6, #31
 800206c:	40f2      	lsrs	r2, r6
 800206e:	0016      	movs	r6, r2
 8002070:	2920      	cmp	r1, #32
 8002072:	d003      	beq.n	800207c <__aeabi_dsub+0x498>
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	1a51      	subs	r1, r2, r1
 8002078:	408b      	lsls	r3, r1
 800207a:	431c      	orrs	r4, r3
 800207c:	1e62      	subs	r2, r4, #1
 800207e:	4194      	sbcs	r4, r2
 8002080:	2300      	movs	r3, #0
 8002082:	4334      	orrs	r4, r6
 8002084:	4698      	mov	r8, r3
 8002086:	2600      	movs	r6, #0
 8002088:	e71d      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 800208a:	000c      	movs	r4, r1
 800208c:	3a20      	subs	r2, #32
 800208e:	40d4      	lsrs	r4, r2
 8002090:	0022      	movs	r2, r4
 8002092:	4664      	mov	r4, ip
 8002094:	2c20      	cmp	r4, #32
 8002096:	d004      	beq.n	80020a2 <__aeabi_dsub+0x4be>
 8002098:	2740      	movs	r7, #64	; 0x40
 800209a:	1b3f      	subs	r7, r7, r4
 800209c:	40b9      	lsls	r1, r7
 800209e:	4308      	orrs	r0, r1
 80020a0:	4680      	mov	r8, r0
 80020a2:	4644      	mov	r4, r8
 80020a4:	1e61      	subs	r1, r4, #1
 80020a6:	418c      	sbcs	r4, r1
 80020a8:	4322      	orrs	r2, r4
 80020aa:	e5e9      	b.n	8001c80 <__aeabi_dsub+0x9c>
 80020ac:	464c      	mov	r4, r9
 80020ae:	4323      	orrs	r3, r4
 80020b0:	001c      	movs	r4, r3
 80020b2:	1e63      	subs	r3, r4, #1
 80020b4:	419c      	sbcs	r4, r3
 80020b6:	1b04      	subs	r4, r0, r4
 80020b8:	42a0      	cmp	r0, r4
 80020ba:	419b      	sbcs	r3, r3
 80020bc:	425b      	negs	r3, r3
 80020be:	1acb      	subs	r3, r1, r3
 80020c0:	4698      	mov	r8, r3
 80020c2:	465d      	mov	r5, fp
 80020c4:	0016      	movs	r6, r2
 80020c6:	e5e2      	b.n	8001c8e <__aeabi_dsub+0xaa>
 80020c8:	464e      	mov	r6, r9
 80020ca:	431e      	orrs	r6, r3
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x4ec>
 80020ce:	e0ae      	b.n	800222e <__aeabi_dsub+0x64a>
 80020d0:	1e66      	subs	r6, r4, #1
 80020d2:	2c01      	cmp	r4, #1
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x4f4>
 80020d6:	e0fd      	b.n	80022d4 <__aeabi_dsub+0x6f0>
 80020d8:	4f7b      	ldr	r7, [pc, #492]	; (80022c8 <__aeabi_dsub+0x6e4>)
 80020da:	42bc      	cmp	r4, r7
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x4fc>
 80020de:	e107      	b.n	80022f0 <__aeabi_dsub+0x70c>
 80020e0:	46b4      	mov	ip, r6
 80020e2:	e69b      	b.n	8001e1c <__aeabi_dsub+0x238>
 80020e4:	4664      	mov	r4, ip
 80020e6:	2220      	movs	r2, #32
 80020e8:	1b12      	subs	r2, r2, r4
 80020ea:	000c      	movs	r4, r1
 80020ec:	4094      	lsls	r4, r2
 80020ee:	0007      	movs	r7, r0
 80020f0:	4090      	lsls	r0, r2
 80020f2:	46a0      	mov	r8, r4
 80020f4:	4664      	mov	r4, ip
 80020f6:	1e42      	subs	r2, r0, #1
 80020f8:	4190      	sbcs	r0, r2
 80020fa:	4662      	mov	r2, ip
 80020fc:	40e7      	lsrs	r7, r4
 80020fe:	4644      	mov	r4, r8
 8002100:	40d1      	lsrs	r1, r2
 8002102:	433c      	orrs	r4, r7
 8002104:	4304      	orrs	r4, r0
 8002106:	185b      	adds	r3, r3, r1
 8002108:	e6f3      	b.n	8001ef2 <__aeabi_dsub+0x30e>
 800210a:	4c6f      	ldr	r4, [pc, #444]	; (80022c8 <__aeabi_dsub+0x6e4>)
 800210c:	42a2      	cmp	r2, r4
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x52e>
 8002110:	e0d5      	b.n	80022be <__aeabi_dsub+0x6da>
 8002112:	4448      	add	r0, r9
 8002114:	185b      	adds	r3, r3, r1
 8002116:	4548      	cmp	r0, r9
 8002118:	4189      	sbcs	r1, r1
 800211a:	4249      	negs	r1, r1
 800211c:	185b      	adds	r3, r3, r1
 800211e:	07dc      	lsls	r4, r3, #31
 8002120:	0840      	lsrs	r0, r0, #1
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	4698      	mov	r8, r3
 8002126:	0016      	movs	r6, r2
 8002128:	4304      	orrs	r4, r0
 800212a:	e6cc      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 800212c:	2a00      	cmp	r2, #0
 800212e:	d000      	beq.n	8002132 <__aeabi_dsub+0x54e>
 8002130:	e082      	b.n	8002238 <__aeabi_dsub+0x654>
 8002132:	000a      	movs	r2, r1
 8002134:	4302      	orrs	r2, r0
 8002136:	d140      	bne.n	80021ba <__aeabi_dsub+0x5d6>
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	2500      	movs	r5, #0
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	e713      	b.n	8001f68 <__aeabi_dsub+0x384>
 8002140:	074b      	lsls	r3, r1, #29
 8002142:	08c2      	lsrs	r2, r0, #3
 8002144:	431a      	orrs	r2, r3
 8002146:	465d      	mov	r5, fp
 8002148:	08cb      	lsrs	r3, r1, #3
 800214a:	e6c5      	b.n	8001ed8 <__aeabi_dsub+0x2f4>
 800214c:	464a      	mov	r2, r9
 800214e:	1a84      	subs	r4, r0, r2
 8002150:	42a0      	cmp	r0, r4
 8002152:	4192      	sbcs	r2, r2
 8002154:	1acb      	subs	r3, r1, r3
 8002156:	4252      	negs	r2, r2
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	4698      	mov	r8, r3
 800215c:	465d      	mov	r5, fp
 800215e:	e59e      	b.n	8001c9e <__aeabi_dsub+0xba>
 8002160:	464a      	mov	r2, r9
 8002162:	0759      	lsls	r1, r3, #29
 8002164:	08d2      	lsrs	r2, r2, #3
 8002166:	430a      	orrs	r2, r1
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	e6f9      	b.n	8001f60 <__aeabi_dsub+0x37c>
 800216c:	464a      	mov	r2, r9
 800216e:	1a14      	subs	r4, r2, r0
 8002170:	45a1      	cmp	r9, r4
 8002172:	4192      	sbcs	r2, r2
 8002174:	1a5b      	subs	r3, r3, r1
 8002176:	4252      	negs	r2, r2
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	4698      	mov	r8, r3
 800217c:	2601      	movs	r6, #1
 800217e:	e586      	b.n	8001c8e <__aeabi_dsub+0xaa>
 8002180:	464a      	mov	r2, r9
 8002182:	0759      	lsls	r1, r3, #29
 8002184:	08d2      	lsrs	r2, r2, #3
 8002186:	430a      	orrs	r2, r1
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	e6a5      	b.n	8001ed8 <__aeabi_dsub+0x2f4>
 800218c:	464c      	mov	r4, r9
 800218e:	4323      	orrs	r3, r4
 8002190:	001c      	movs	r4, r3
 8002192:	1e63      	subs	r3, r4, #1
 8002194:	419c      	sbcs	r4, r3
 8002196:	e65b      	b.n	8001e50 <__aeabi_dsub+0x26c>
 8002198:	4665      	mov	r5, ip
 800219a:	001e      	movs	r6, r3
 800219c:	3d20      	subs	r5, #32
 800219e:	40ee      	lsrs	r6, r5
 80021a0:	2c20      	cmp	r4, #32
 80021a2:	d005      	beq.n	80021b0 <__aeabi_dsub+0x5cc>
 80021a4:	2540      	movs	r5, #64	; 0x40
 80021a6:	1b2d      	subs	r5, r5, r4
 80021a8:	40ab      	lsls	r3, r5
 80021aa:	464c      	mov	r4, r9
 80021ac:	431c      	orrs	r4, r3
 80021ae:	46a2      	mov	sl, r4
 80021b0:	4654      	mov	r4, sl
 80021b2:	1e63      	subs	r3, r4, #1
 80021b4:	419c      	sbcs	r4, r3
 80021b6:	4334      	orrs	r4, r6
 80021b8:	e77d      	b.n	80020b6 <__aeabi_dsub+0x4d2>
 80021ba:	074b      	lsls	r3, r1, #29
 80021bc:	08c2      	lsrs	r2, r0, #3
 80021be:	431a      	orrs	r2, r3
 80021c0:	465d      	mov	r5, fp
 80021c2:	08cb      	lsrs	r3, r1, #3
 80021c4:	e6cc      	b.n	8001f60 <__aeabi_dsub+0x37c>
 80021c6:	000a      	movs	r2, r1
 80021c8:	4302      	orrs	r2, r0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x5ea>
 80021cc:	e736      	b.n	800203c <__aeabi_dsub+0x458>
 80021ce:	074b      	lsls	r3, r1, #29
 80021d0:	08c2      	lsrs	r2, r0, #3
 80021d2:	431a      	orrs	r2, r3
 80021d4:	465d      	mov	r5, fp
 80021d6:	08cb      	lsrs	r3, r1, #3
 80021d8:	e681      	b.n	8001ede <__aeabi_dsub+0x2fa>
 80021da:	464a      	mov	r2, r9
 80021dc:	1a84      	subs	r4, r0, r2
 80021de:	42a0      	cmp	r0, r4
 80021e0:	4192      	sbcs	r2, r2
 80021e2:	1acb      	subs	r3, r1, r3
 80021e4:	4252      	negs	r2, r2
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	4698      	mov	r8, r3
 80021ea:	465d      	mov	r5, fp
 80021ec:	2601      	movs	r6, #1
 80021ee:	e54e      	b.n	8001c8e <__aeabi_dsub+0xaa>
 80021f0:	074b      	lsls	r3, r1, #29
 80021f2:	08c2      	lsrs	r2, r0, #3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	08cb      	lsrs	r3, r1, #3
 80021f8:	e6b2      	b.n	8001f60 <__aeabi_dsub+0x37c>
 80021fa:	464a      	mov	r2, r9
 80021fc:	1a14      	subs	r4, r2, r0
 80021fe:	45a1      	cmp	r9, r4
 8002200:	4192      	sbcs	r2, r2
 8002202:	1a5f      	subs	r7, r3, r1
 8002204:	4252      	negs	r2, r2
 8002206:	1aba      	subs	r2, r7, r2
 8002208:	4690      	mov	r8, r2
 800220a:	0212      	lsls	r2, r2, #8
 800220c:	d56b      	bpl.n	80022e6 <__aeabi_dsub+0x702>
 800220e:	464a      	mov	r2, r9
 8002210:	1a84      	subs	r4, r0, r2
 8002212:	42a0      	cmp	r0, r4
 8002214:	4192      	sbcs	r2, r2
 8002216:	1acb      	subs	r3, r1, r3
 8002218:	4252      	negs	r2, r2
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	4698      	mov	r8, r3
 800221e:	465d      	mov	r5, fp
 8002220:	e564      	b.n	8001cec <__aeabi_dsub+0x108>
 8002222:	074b      	lsls	r3, r1, #29
 8002224:	08c2      	lsrs	r2, r0, #3
 8002226:	431a      	orrs	r2, r3
 8002228:	465d      	mov	r5, fp
 800222a:	08cb      	lsrs	r3, r1, #3
 800222c:	e698      	b.n	8001f60 <__aeabi_dsub+0x37c>
 800222e:	074b      	lsls	r3, r1, #29
 8002230:	08c2      	lsrs	r2, r0, #3
 8002232:	431a      	orrs	r2, r3
 8002234:	08cb      	lsrs	r3, r1, #3
 8002236:	e64f      	b.n	8001ed8 <__aeabi_dsub+0x2f4>
 8002238:	000a      	movs	r2, r1
 800223a:	4302      	orrs	r2, r0
 800223c:	d090      	beq.n	8002160 <__aeabi_dsub+0x57c>
 800223e:	464a      	mov	r2, r9
 8002240:	075c      	lsls	r4, r3, #29
 8002242:	08d2      	lsrs	r2, r2, #3
 8002244:	4314      	orrs	r4, r2
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	0312      	lsls	r2, r2, #12
 800224c:	4213      	tst	r3, r2
 800224e:	d008      	beq.n	8002262 <__aeabi_dsub+0x67e>
 8002250:	08ce      	lsrs	r6, r1, #3
 8002252:	4216      	tst	r6, r2
 8002254:	d105      	bne.n	8002262 <__aeabi_dsub+0x67e>
 8002256:	08c0      	lsrs	r0, r0, #3
 8002258:	0749      	lsls	r1, r1, #29
 800225a:	4308      	orrs	r0, r1
 800225c:	0004      	movs	r4, r0
 800225e:	465d      	mov	r5, fp
 8002260:	0033      	movs	r3, r6
 8002262:	0f61      	lsrs	r1, r4, #29
 8002264:	00e2      	lsls	r2, r4, #3
 8002266:	0749      	lsls	r1, r1, #29
 8002268:	08d2      	lsrs	r2, r2, #3
 800226a:	430a      	orrs	r2, r1
 800226c:	e678      	b.n	8001f60 <__aeabi_dsub+0x37c>
 800226e:	074b      	lsls	r3, r1, #29
 8002270:	08c2      	lsrs	r2, r0, #3
 8002272:	431a      	orrs	r2, r3
 8002274:	08cb      	lsrs	r3, r1, #3
 8002276:	e632      	b.n	8001ede <__aeabi_dsub+0x2fa>
 8002278:	4448      	add	r0, r9
 800227a:	185b      	adds	r3, r3, r1
 800227c:	4548      	cmp	r0, r9
 800227e:	4192      	sbcs	r2, r2
 8002280:	4698      	mov	r8, r3
 8002282:	4252      	negs	r2, r2
 8002284:	4490      	add	r8, r2
 8002286:	4643      	mov	r3, r8
 8002288:	0004      	movs	r4, r0
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	d400      	bmi.n	8002290 <__aeabi_dsub+0x6ac>
 800228e:	e61a      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 8002290:	4642      	mov	r2, r8
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <__aeabi_dsub+0x6e8>)
 8002294:	2601      	movs	r6, #1
 8002296:	401a      	ands	r2, r3
 8002298:	4690      	mov	r8, r2
 800229a:	e614      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 800229c:	4666      	mov	r6, ip
 800229e:	001f      	movs	r7, r3
 80022a0:	3e20      	subs	r6, #32
 80022a2:	40f7      	lsrs	r7, r6
 80022a4:	2c20      	cmp	r4, #32
 80022a6:	d005      	beq.n	80022b4 <__aeabi_dsub+0x6d0>
 80022a8:	2640      	movs	r6, #64	; 0x40
 80022aa:	1b36      	subs	r6, r6, r4
 80022ac:	40b3      	lsls	r3, r6
 80022ae:	464c      	mov	r4, r9
 80022b0:	431c      	orrs	r4, r3
 80022b2:	46a2      	mov	sl, r4
 80022b4:	4654      	mov	r4, sl
 80022b6:	1e63      	subs	r3, r4, #1
 80022b8:	419c      	sbcs	r4, r3
 80022ba:	433c      	orrs	r4, r7
 80022bc:	e5c8      	b.n	8001e50 <__aeabi_dsub+0x26c>
 80022be:	0011      	movs	r1, r2
 80022c0:	2300      	movs	r3, #0
 80022c2:	2200      	movs	r2, #0
 80022c4:	e532      	b.n	8001d2c <__aeabi_dsub+0x148>
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	000007ff 	.word	0x000007ff
 80022cc:	ff7fffff 	.word	0xff7fffff
 80022d0:	000007fe 	.word	0x000007fe
 80022d4:	464a      	mov	r2, r9
 80022d6:	1814      	adds	r4, r2, r0
 80022d8:	4284      	cmp	r4, r0
 80022da:	4192      	sbcs	r2, r2
 80022dc:	185b      	adds	r3, r3, r1
 80022de:	4698      	mov	r8, r3
 80022e0:	4252      	negs	r2, r2
 80022e2:	4490      	add	r8, r2
 80022e4:	e5e9      	b.n	8001eba <__aeabi_dsub+0x2d6>
 80022e6:	4642      	mov	r2, r8
 80022e8:	4322      	orrs	r2, r4
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x70a>
 80022ec:	e6a6      	b.n	800203c <__aeabi_dsub+0x458>
 80022ee:	e5ea      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 80022f0:	074b      	lsls	r3, r1, #29
 80022f2:	08c2      	lsrs	r2, r0, #3
 80022f4:	431a      	orrs	r2, r3
 80022f6:	08cb      	lsrs	r3, r1, #3
 80022f8:	e632      	b.n	8001f60 <__aeabi_dsub+0x37c>
 80022fa:	2200      	movs	r2, #0
 80022fc:	4901      	ldr	r1, [pc, #4]	; (8002304 <__aeabi_dsub+0x720>)
 80022fe:	0013      	movs	r3, r2
 8002300:	e514      	b.n	8001d2c <__aeabi_dsub+0x148>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	000007ff 	.word	0x000007ff

08002308 <__aeabi_dcmpun>:
 8002308:	b570      	push	{r4, r5, r6, lr}
 800230a:	0005      	movs	r5, r0
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <__aeabi_dcmpun+0x38>)
 800230e:	030c      	lsls	r4, r1, #12
 8002310:	0016      	movs	r6, r2
 8002312:	0049      	lsls	r1, r1, #1
 8002314:	031a      	lsls	r2, r3, #12
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	0b24      	lsrs	r4, r4, #12
 800231a:	0d49      	lsrs	r1, r1, #21
 800231c:	0b12      	lsrs	r2, r2, #12
 800231e:	0d5b      	lsrs	r3, r3, #21
 8002320:	4281      	cmp	r1, r0
 8002322:	d008      	beq.n	8002336 <__aeabi_dcmpun+0x2e>
 8002324:	4906      	ldr	r1, [pc, #24]	; (8002340 <__aeabi_dcmpun+0x38>)
 8002326:	2000      	movs	r0, #0
 8002328:	428b      	cmp	r3, r1
 800232a:	d103      	bne.n	8002334 <__aeabi_dcmpun+0x2c>
 800232c:	4332      	orrs	r2, r6
 800232e:	0010      	movs	r0, r2
 8002330:	1e42      	subs	r2, r0, #1
 8002332:	4190      	sbcs	r0, r2
 8002334:	bd70      	pop	{r4, r5, r6, pc}
 8002336:	2001      	movs	r0, #1
 8002338:	432c      	orrs	r4, r5
 800233a:	d1fb      	bne.n	8002334 <__aeabi_dcmpun+0x2c>
 800233c:	e7f2      	b.n	8002324 <__aeabi_dcmpun+0x1c>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	000007ff 	.word	0x000007ff

08002344 <__aeabi_d2iz>:
 8002344:	000a      	movs	r2, r1
 8002346:	b530      	push	{r4, r5, lr}
 8002348:	4c13      	ldr	r4, [pc, #76]	; (8002398 <__aeabi_d2iz+0x54>)
 800234a:	0053      	lsls	r3, r2, #1
 800234c:	0309      	lsls	r1, r1, #12
 800234e:	0005      	movs	r5, r0
 8002350:	0b09      	lsrs	r1, r1, #12
 8002352:	2000      	movs	r0, #0
 8002354:	0d5b      	lsrs	r3, r3, #21
 8002356:	0fd2      	lsrs	r2, r2, #31
 8002358:	42a3      	cmp	r3, r4
 800235a:	dd04      	ble.n	8002366 <__aeabi_d2iz+0x22>
 800235c:	480f      	ldr	r0, [pc, #60]	; (800239c <__aeabi_d2iz+0x58>)
 800235e:	4283      	cmp	r3, r0
 8002360:	dd02      	ble.n	8002368 <__aeabi_d2iz+0x24>
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <__aeabi_d2iz+0x5c>)
 8002364:	18d0      	adds	r0, r2, r3
 8002366:	bd30      	pop	{r4, r5, pc}
 8002368:	2080      	movs	r0, #128	; 0x80
 800236a:	0340      	lsls	r0, r0, #13
 800236c:	4301      	orrs	r1, r0
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <__aeabi_d2iz+0x60>)
 8002370:	1ac0      	subs	r0, r0, r3
 8002372:	281f      	cmp	r0, #31
 8002374:	dd08      	ble.n	8002388 <__aeabi_d2iz+0x44>
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <__aeabi_d2iz+0x64>)
 8002378:	1ac3      	subs	r3, r0, r3
 800237a:	40d9      	lsrs	r1, r3
 800237c:	000b      	movs	r3, r1
 800237e:	4258      	negs	r0, r3
 8002380:	2a00      	cmp	r2, #0
 8002382:	d1f0      	bne.n	8002366 <__aeabi_d2iz+0x22>
 8002384:	0018      	movs	r0, r3
 8002386:	e7ee      	b.n	8002366 <__aeabi_d2iz+0x22>
 8002388:	4c08      	ldr	r4, [pc, #32]	; (80023ac <__aeabi_d2iz+0x68>)
 800238a:	40c5      	lsrs	r5, r0
 800238c:	46a4      	mov	ip, r4
 800238e:	4463      	add	r3, ip
 8002390:	4099      	lsls	r1, r3
 8002392:	000b      	movs	r3, r1
 8002394:	432b      	orrs	r3, r5
 8002396:	e7f2      	b.n	800237e <__aeabi_d2iz+0x3a>
 8002398:	000003fe 	.word	0x000003fe
 800239c:	0000041d 	.word	0x0000041d
 80023a0:	7fffffff 	.word	0x7fffffff
 80023a4:	00000433 	.word	0x00000433
 80023a8:	00000413 	.word	0x00000413
 80023ac:	fffffbed 	.word	0xfffffbed

080023b0 <__aeabi_i2d>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d016      	beq.n	80023e4 <__aeabi_i2d+0x34>
 80023b6:	17c3      	asrs	r3, r0, #31
 80023b8:	18c5      	adds	r5, r0, r3
 80023ba:	405d      	eors	r5, r3
 80023bc:	0fc4      	lsrs	r4, r0, #31
 80023be:	0028      	movs	r0, r5
 80023c0:	f000 f91c 	bl	80025fc <__clzsi2>
 80023c4:	4a11      	ldr	r2, [pc, #68]	; (800240c <__aeabi_i2d+0x5c>)
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	280a      	cmp	r0, #10
 80023ca:	dc16      	bgt.n	80023fa <__aeabi_i2d+0x4a>
 80023cc:	0003      	movs	r3, r0
 80023ce:	002e      	movs	r6, r5
 80023d0:	3315      	adds	r3, #21
 80023d2:	409e      	lsls	r6, r3
 80023d4:	230b      	movs	r3, #11
 80023d6:	1a18      	subs	r0, r3, r0
 80023d8:	40c5      	lsrs	r5, r0
 80023da:	0553      	lsls	r3, r2, #21
 80023dc:	032d      	lsls	r5, r5, #12
 80023de:	0b2d      	lsrs	r5, r5, #12
 80023e0:	0d5b      	lsrs	r3, r3, #21
 80023e2:	e003      	b.n	80023ec <__aeabi_i2d+0x3c>
 80023e4:	2400      	movs	r4, #0
 80023e6:	2300      	movs	r3, #0
 80023e8:	2500      	movs	r5, #0
 80023ea:	2600      	movs	r6, #0
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	432b      	orrs	r3, r5
 80023f0:	07e4      	lsls	r4, r4, #31
 80023f2:	4323      	orrs	r3, r4
 80023f4:	0030      	movs	r0, r6
 80023f6:	0019      	movs	r1, r3
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
 80023fa:	380b      	subs	r0, #11
 80023fc:	4085      	lsls	r5, r0
 80023fe:	0553      	lsls	r3, r2, #21
 8002400:	032d      	lsls	r5, r5, #12
 8002402:	2600      	movs	r6, #0
 8002404:	0b2d      	lsrs	r5, r5, #12
 8002406:	0d5b      	lsrs	r3, r3, #21
 8002408:	e7f0      	b.n	80023ec <__aeabi_i2d+0x3c>
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	0000041e 	.word	0x0000041e

08002410 <__aeabi_ui2d>:
 8002410:	b510      	push	{r4, lr}
 8002412:	1e04      	subs	r4, r0, #0
 8002414:	d010      	beq.n	8002438 <__aeabi_ui2d+0x28>
 8002416:	f000 f8f1 	bl	80025fc <__clzsi2>
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <__aeabi_ui2d+0x48>)
 800241c:	1a1b      	subs	r3, r3, r0
 800241e:	280a      	cmp	r0, #10
 8002420:	dc11      	bgt.n	8002446 <__aeabi_ui2d+0x36>
 8002422:	220b      	movs	r2, #11
 8002424:	0021      	movs	r1, r4
 8002426:	1a12      	subs	r2, r2, r0
 8002428:	40d1      	lsrs	r1, r2
 800242a:	3015      	adds	r0, #21
 800242c:	030a      	lsls	r2, r1, #12
 800242e:	055b      	lsls	r3, r3, #21
 8002430:	4084      	lsls	r4, r0
 8002432:	0b12      	lsrs	r2, r2, #12
 8002434:	0d5b      	lsrs	r3, r3, #21
 8002436:	e001      	b.n	800243c <__aeabi_ui2d+0x2c>
 8002438:	2300      	movs	r3, #0
 800243a:	2200      	movs	r2, #0
 800243c:	051b      	lsls	r3, r3, #20
 800243e:	4313      	orrs	r3, r2
 8002440:	0020      	movs	r0, r4
 8002442:	0019      	movs	r1, r3
 8002444:	bd10      	pop	{r4, pc}
 8002446:	0022      	movs	r2, r4
 8002448:	380b      	subs	r0, #11
 800244a:	4082      	lsls	r2, r0
 800244c:	055b      	lsls	r3, r3, #21
 800244e:	0312      	lsls	r2, r2, #12
 8002450:	2400      	movs	r4, #0
 8002452:	0b12      	lsrs	r2, r2, #12
 8002454:	0d5b      	lsrs	r3, r3, #21
 8002456:	e7f1      	b.n	800243c <__aeabi_ui2d+0x2c>
 8002458:	0000041e 	.word	0x0000041e

0800245c <__aeabi_f2d>:
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	0043      	lsls	r3, r0, #1
 8002460:	0246      	lsls	r6, r0, #9
 8002462:	0fc4      	lsrs	r4, r0, #31
 8002464:	20fe      	movs	r0, #254	; 0xfe
 8002466:	0e1b      	lsrs	r3, r3, #24
 8002468:	1c59      	adds	r1, r3, #1
 800246a:	0a75      	lsrs	r5, r6, #9
 800246c:	4208      	tst	r0, r1
 800246e:	d00c      	beq.n	800248a <__aeabi_f2d+0x2e>
 8002470:	22e0      	movs	r2, #224	; 0xe0
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4694      	mov	ip, r2
 8002476:	076d      	lsls	r5, r5, #29
 8002478:	0b36      	lsrs	r6, r6, #12
 800247a:	4463      	add	r3, ip
 800247c:	051b      	lsls	r3, r3, #20
 800247e:	4333      	orrs	r3, r6
 8002480:	07e4      	lsls	r4, r4, #31
 8002482:	4323      	orrs	r3, r4
 8002484:	0028      	movs	r0, r5
 8002486:	0019      	movs	r1, r3
 8002488:	bd70      	pop	{r4, r5, r6, pc}
 800248a:	2b00      	cmp	r3, #0
 800248c:	d114      	bne.n	80024b8 <__aeabi_f2d+0x5c>
 800248e:	2d00      	cmp	r5, #0
 8002490:	d01b      	beq.n	80024ca <__aeabi_f2d+0x6e>
 8002492:	0028      	movs	r0, r5
 8002494:	f000 f8b2 	bl	80025fc <__clzsi2>
 8002498:	280a      	cmp	r0, #10
 800249a:	dc1c      	bgt.n	80024d6 <__aeabi_f2d+0x7a>
 800249c:	230b      	movs	r3, #11
 800249e:	002a      	movs	r2, r5
 80024a0:	1a1b      	subs	r3, r3, r0
 80024a2:	40da      	lsrs	r2, r3
 80024a4:	0003      	movs	r3, r0
 80024a6:	3315      	adds	r3, #21
 80024a8:	409d      	lsls	r5, r3
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <__aeabi_f2d+0x88>)
 80024ac:	0312      	lsls	r2, r2, #12
 80024ae:	1a1b      	subs	r3, r3, r0
 80024b0:	055b      	lsls	r3, r3, #21
 80024b2:	0b16      	lsrs	r6, r2, #12
 80024b4:	0d5b      	lsrs	r3, r3, #21
 80024b6:	e7e1      	b.n	800247c <__aeabi_f2d+0x20>
 80024b8:	2d00      	cmp	r5, #0
 80024ba:	d009      	beq.n	80024d0 <__aeabi_f2d+0x74>
 80024bc:	0b32      	lsrs	r2, r6, #12
 80024be:	2680      	movs	r6, #128	; 0x80
 80024c0:	0336      	lsls	r6, r6, #12
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <__aeabi_f2d+0x8c>)
 80024c4:	076d      	lsls	r5, r5, #29
 80024c6:	4316      	orrs	r6, r2
 80024c8:	e7d8      	b.n	800247c <__aeabi_f2d+0x20>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2600      	movs	r6, #0
 80024ce:	e7d5      	b.n	800247c <__aeabi_f2d+0x20>
 80024d0:	2600      	movs	r6, #0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <__aeabi_f2d+0x8c>)
 80024d4:	e7d2      	b.n	800247c <__aeabi_f2d+0x20>
 80024d6:	0003      	movs	r3, r0
 80024d8:	002a      	movs	r2, r5
 80024da:	3b0b      	subs	r3, #11
 80024dc:	409a      	lsls	r2, r3
 80024de:	2500      	movs	r5, #0
 80024e0:	e7e3      	b.n	80024aa <__aeabi_f2d+0x4e>
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	00000389 	.word	0x00000389
 80024e8:	000007ff 	.word	0x000007ff

080024ec <__aeabi_d2f>:
 80024ec:	0002      	movs	r2, r0
 80024ee:	004b      	lsls	r3, r1, #1
 80024f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f2:	0308      	lsls	r0, r1, #12
 80024f4:	0d5b      	lsrs	r3, r3, #21
 80024f6:	4e3d      	ldr	r6, [pc, #244]	; (80025ec <__aeabi_d2f+0x100>)
 80024f8:	0fcc      	lsrs	r4, r1, #31
 80024fa:	0a40      	lsrs	r0, r0, #9
 80024fc:	0f51      	lsrs	r1, r2, #29
 80024fe:	1c5f      	adds	r7, r3, #1
 8002500:	4308      	orrs	r0, r1
 8002502:	00d5      	lsls	r5, r2, #3
 8002504:	4237      	tst	r7, r6
 8002506:	d00a      	beq.n	800251e <__aeabi_d2f+0x32>
 8002508:	4939      	ldr	r1, [pc, #228]	; (80025f0 <__aeabi_d2f+0x104>)
 800250a:	185e      	adds	r6, r3, r1
 800250c:	2efe      	cmp	r6, #254	; 0xfe
 800250e:	dd16      	ble.n	800253e <__aeabi_d2f+0x52>
 8002510:	23ff      	movs	r3, #255	; 0xff
 8002512:	2100      	movs	r1, #0
 8002514:	05db      	lsls	r3, r3, #23
 8002516:	430b      	orrs	r3, r1
 8002518:	07e0      	lsls	r0, r4, #31
 800251a:	4318      	orrs	r0, r3
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <__aeabi_d2f+0x44>
 8002522:	4328      	orrs	r0, r5
 8002524:	d027      	beq.n	8002576 <__aeabi_d2f+0x8a>
 8002526:	2105      	movs	r1, #5
 8002528:	0189      	lsls	r1, r1, #6
 800252a:	0a49      	lsrs	r1, r1, #9
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e7f1      	b.n	8002514 <__aeabi_d2f+0x28>
 8002530:	4305      	orrs	r5, r0
 8002532:	d0ed      	beq.n	8002510 <__aeabi_d2f+0x24>
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	03c9      	lsls	r1, r1, #15
 8002538:	23ff      	movs	r3, #255	; 0xff
 800253a:	4301      	orrs	r1, r0
 800253c:	e7ea      	b.n	8002514 <__aeabi_d2f+0x28>
 800253e:	2e00      	cmp	r6, #0
 8002540:	dd1c      	ble.n	800257c <__aeabi_d2f+0x90>
 8002542:	0192      	lsls	r2, r2, #6
 8002544:	0011      	movs	r1, r2
 8002546:	1e4a      	subs	r2, r1, #1
 8002548:	4191      	sbcs	r1, r2
 800254a:	00c0      	lsls	r0, r0, #3
 800254c:	0f6d      	lsrs	r5, r5, #29
 800254e:	4301      	orrs	r1, r0
 8002550:	4329      	orrs	r1, r5
 8002552:	074b      	lsls	r3, r1, #29
 8002554:	d048      	beq.n	80025e8 <__aeabi_d2f+0xfc>
 8002556:	230f      	movs	r3, #15
 8002558:	400b      	ands	r3, r1
 800255a:	2b04      	cmp	r3, #4
 800255c:	d000      	beq.n	8002560 <__aeabi_d2f+0x74>
 800255e:	3104      	adds	r1, #4
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	04db      	lsls	r3, r3, #19
 8002564:	400b      	ands	r3, r1
 8002566:	d03f      	beq.n	80025e8 <__aeabi_d2f+0xfc>
 8002568:	1c72      	adds	r2, r6, #1
 800256a:	2efe      	cmp	r6, #254	; 0xfe
 800256c:	d0d0      	beq.n	8002510 <__aeabi_d2f+0x24>
 800256e:	0189      	lsls	r1, r1, #6
 8002570:	0a49      	lsrs	r1, r1, #9
 8002572:	b2d3      	uxtb	r3, r2
 8002574:	e7ce      	b.n	8002514 <__aeabi_d2f+0x28>
 8002576:	2300      	movs	r3, #0
 8002578:	2100      	movs	r1, #0
 800257a:	e7cb      	b.n	8002514 <__aeabi_d2f+0x28>
 800257c:	0032      	movs	r2, r6
 800257e:	3217      	adds	r2, #23
 8002580:	db22      	blt.n	80025c8 <__aeabi_d2f+0xdc>
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	221e      	movs	r2, #30
 8002586:	0409      	lsls	r1, r1, #16
 8002588:	4308      	orrs	r0, r1
 800258a:	1b92      	subs	r2, r2, r6
 800258c:	2a1f      	cmp	r2, #31
 800258e:	dd1d      	ble.n	80025cc <__aeabi_d2f+0xe0>
 8002590:	2102      	movs	r1, #2
 8002592:	4249      	negs	r1, r1
 8002594:	1b8e      	subs	r6, r1, r6
 8002596:	0001      	movs	r1, r0
 8002598:	40f1      	lsrs	r1, r6
 800259a:	000e      	movs	r6, r1
 800259c:	2a20      	cmp	r2, #32
 800259e:	d004      	beq.n	80025aa <__aeabi_d2f+0xbe>
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <__aeabi_d2f+0x108>)
 80025a2:	4694      	mov	ip, r2
 80025a4:	4463      	add	r3, ip
 80025a6:	4098      	lsls	r0, r3
 80025a8:	4305      	orrs	r5, r0
 80025aa:	0029      	movs	r1, r5
 80025ac:	1e4d      	subs	r5, r1, #1
 80025ae:	41a9      	sbcs	r1, r5
 80025b0:	4331      	orrs	r1, r6
 80025b2:	2600      	movs	r6, #0
 80025b4:	074b      	lsls	r3, r1, #29
 80025b6:	d1ce      	bne.n	8002556 <__aeabi_d2f+0x6a>
 80025b8:	2080      	movs	r0, #128	; 0x80
 80025ba:	000b      	movs	r3, r1
 80025bc:	04c0      	lsls	r0, r0, #19
 80025be:	2201      	movs	r2, #1
 80025c0:	4003      	ands	r3, r0
 80025c2:	4201      	tst	r1, r0
 80025c4:	d1d3      	bne.n	800256e <__aeabi_d2f+0x82>
 80025c6:	e7af      	b.n	8002528 <__aeabi_d2f+0x3c>
 80025c8:	2300      	movs	r3, #0
 80025ca:	e7ac      	b.n	8002526 <__aeabi_d2f+0x3a>
 80025cc:	490a      	ldr	r1, [pc, #40]	; (80025f8 <__aeabi_d2f+0x10c>)
 80025ce:	468c      	mov	ip, r1
 80025d0:	0029      	movs	r1, r5
 80025d2:	4463      	add	r3, ip
 80025d4:	40d1      	lsrs	r1, r2
 80025d6:	409d      	lsls	r5, r3
 80025d8:	000a      	movs	r2, r1
 80025da:	0029      	movs	r1, r5
 80025dc:	4098      	lsls	r0, r3
 80025de:	1e4d      	subs	r5, r1, #1
 80025e0:	41a9      	sbcs	r1, r5
 80025e2:	4301      	orrs	r1, r0
 80025e4:	4311      	orrs	r1, r2
 80025e6:	e7e4      	b.n	80025b2 <__aeabi_d2f+0xc6>
 80025e8:	0033      	movs	r3, r6
 80025ea:	e79d      	b.n	8002528 <__aeabi_d2f+0x3c>
 80025ec:	000007fe 	.word	0x000007fe
 80025f0:	fffffc80 	.word	0xfffffc80
 80025f4:	fffffca2 	.word	0xfffffca2
 80025f8:	fffffc82 	.word	0xfffffc82

080025fc <__clzsi2>:
 80025fc:	211c      	movs	r1, #28
 80025fe:	2301      	movs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	4298      	cmp	r0, r3
 8002604:	d301      	bcc.n	800260a <__clzsi2+0xe>
 8002606:	0c00      	lsrs	r0, r0, #16
 8002608:	3910      	subs	r1, #16
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	4298      	cmp	r0, r3
 800260e:	d301      	bcc.n	8002614 <__clzsi2+0x18>
 8002610:	0a00      	lsrs	r0, r0, #8
 8002612:	3908      	subs	r1, #8
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	4298      	cmp	r0, r3
 8002618:	d301      	bcc.n	800261e <__clzsi2+0x22>
 800261a:	0900      	lsrs	r0, r0, #4
 800261c:	3904      	subs	r1, #4
 800261e:	a202      	add	r2, pc, #8	; (adr r2, 8002628 <__clzsi2+0x2c>)
 8002620:	5c10      	ldrb	r0, [r2, r0]
 8002622:	1840      	adds	r0, r0, r1
 8002624:	4770      	bx	lr
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	02020304 	.word	0x02020304
 800262c:	01010101 	.word	0x01010101
	...

08002638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263e:	240c      	movs	r4, #12
 8002640:	193b      	adds	r3, r7, r4
 8002642:	0018      	movs	r0, r3
 8002644:	2314      	movs	r3, #20
 8002646:	001a      	movs	r2, r3
 8002648:	2100      	movs	r1, #0
 800264a:	f003 fcfd 	bl	8006048 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <MX_GPIO_Init+0xdc>)
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	4b30      	ldr	r3, [pc, #192]	; (8002714 <MX_GPIO_Init+0xdc>)
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	0289      	lsls	r1, r1, #10
 8002658:	430a      	orrs	r2, r1
 800265a:	615a      	str	r2, [r3, #20]
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <MX_GPIO_Init+0xdc>)
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <MX_GPIO_Init+0xdc>)
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <MX_GPIO_Init+0xdc>)
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	02c9      	lsls	r1, r1, #11
 8002674:	430a      	orrs	r2, r1
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <MX_GPIO_Init+0xdc>)
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	02db      	lsls	r3, r3, #11
 8002680:	4013      	ands	r3, r2
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002686:	2390      	movs	r3, #144	; 0x90
 8002688:	05db      	lsls	r3, r3, #23
 800268a:	2200      	movs	r2, #0
 800268c:	2104      	movs	r1, #4
 800268e:	0018      	movs	r0, r3
 8002690:	f001 f8c2 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002694:	4b20      	ldr	r3, [pc, #128]	; (8002718 <MX_GPIO_Init+0xe0>)
 8002696:	2200      	movs	r2, #0
 8002698:	210c      	movs	r1, #12
 800269a:	0018      	movs	r0, r3
 800269c:	f001 f8bc 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	2204      	movs	r2, #4
 80026a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	2201      	movs	r2, #1
 80026aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	193b      	adds	r3, r7, r4
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	193a      	adds	r2, r7, r4
 80026ba:	2390      	movs	r3, #144	; 0x90
 80026bc:	05db      	lsls	r3, r3, #23
 80026be:	0011      	movs	r1, r2
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 ff39 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026c6:	193b      	adds	r3, r7, r4
 80026c8:	2202      	movs	r2, #2
 80026ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <MX_GPIO_Init+0xe0>)
 80026dc:	0019      	movs	r1, r3
 80026de:	0010      	movs	r0, r2
 80026e0:	f000 ff2a 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026e4:	0021      	movs	r1, r4
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	220c      	movs	r2, #12
 80026ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2201      	movs	r2, #1
 80026f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <MX_GPIO_Init+0xe0>)
 8002702:	0019      	movs	r1, r3
 8002704:	0010      	movs	r0, r2
 8002706:	f000 ff17 	bl	8003538 <HAL_GPIO_Init>

}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b009      	add	sp, #36	; 0x24
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	40021000 	.word	0x40021000
 8002718:	48000400 	.word	0x48000400

0800271c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <MX_I2C1_Init+0x74>)
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <MX_I2C1_Init+0x78>)
 8002724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8002726:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MX_I2C1_Init+0x74>)
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <MX_I2C1_Init+0x7c>)
 800272a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800272c:	4b18      	ldr	r3, [pc, #96]	; (8002790 <MX_I2C1_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_I2C1_Init+0x74>)
 8002734:	2201      	movs	r2, #1
 8002736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <MX_I2C1_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <MX_I2C1_Init+0x74>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <MX_I2C1_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_I2C1_Init+0x74>)
 800274c:	2200      	movs	r2, #0
 800274e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <MX_I2C1_Init+0x74>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_I2C1_Init+0x74>)
 8002758:	0018      	movs	r0, r3
 800275a:	f001 f895 	bl	8003888 <HAL_I2C_Init>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d001      	beq.n	8002766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002762:	f000 fa1f 	bl	8002ba4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <MX_I2C1_Init+0x74>)
 8002768:	2100      	movs	r1, #0
 800276a:	0018      	movs	r0, r3
 800276c:	f001 fdc2 	bl	80042f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d001      	beq.n	8002778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002774:	f000 fa16 	bl	8002ba4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <MX_I2C1_Init+0x74>)
 800277a:	2100      	movs	r1, #0
 800277c:	0018      	movs	r0, r3
 800277e:	f001 fe05 	bl	800438c <HAL_I2CEx_ConfigDigitalFilter>
 8002782:	1e03      	subs	r3, r0, #0
 8002784:	d001      	beq.n	800278a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002786:	f000 fa0d 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000220 	.word	0x20000220
 8002794:	40005400 	.word	0x40005400
 8002798:	20303e5d 	.word	0x20303e5d

0800279c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b08b      	sub	sp, #44	; 0x2c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	2414      	movs	r4, #20
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	0018      	movs	r0, r3
 80027aa:	2314      	movs	r3, #20
 80027ac:	001a      	movs	r2, r3
 80027ae:	2100      	movs	r1, #0
 80027b0:	f003 fc4a 	bl	8006048 <memset>
  if(i2cHandle->Instance==I2C1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_I2C_MspInit+0x90>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d131      	bne.n	8002822 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_I2C_MspInit+0x94>)
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_I2C_MspInit+0x94>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	02c9      	lsls	r1, r1, #11
 80027c8:	430a      	orrs	r2, r1
 80027ca:	615a      	str	r2, [r3, #20]
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_I2C_MspInit+0x94>)
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	02db      	lsls	r3, r3, #11
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027da:	0021      	movs	r1, r4
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	22c0      	movs	r2, #192	; 0xc0
 80027e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2212      	movs	r2, #18
 80027e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2201      	movs	r2, #1
 80027ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	2203      	movs	r2, #3
 80027f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2201      	movs	r2, #1
 80027f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <HAL_I2C_MspInit+0x98>)
 80027fe:	0019      	movs	r1, r3
 8002800:	0010      	movs	r0, r2
 8002802:	f000 fe99 	bl	8003538 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_I2C_MspInit+0x94>)
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_I2C_MspInit+0x94>)
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0389      	lsls	r1, r1, #14
 8002810:	430a      	orrs	r2, r1
 8002812:	61da      	str	r2, [r3, #28]
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_I2C_MspInit+0x94>)
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	039b      	lsls	r3, r3, #14
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b00b      	add	sp, #44	; 0x2c
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	40005400 	.word	0x40005400
 8002830:	40021000 	.word	0x40021000
 8002834:	48000400 	.word	0x48000400

08002838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283a:	b08b      	sub	sp, #44	; 0x2c
 800283c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800283e:	f000 fd79 	bl	8003334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002842:	f000 f92f 	bl	8002aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002846:	f7ff fef7 	bl	8002638 <MX_GPIO_Init>
  MX_I2C1_Init();
 800284a:	f7ff ff67 	bl	800271c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800284e:	f000 fcc9 	bl	80031e4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002852:	f000 fae7 	bl	8002e24 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  MPU6050Init();
 8002856:	f000 f9ab 	bl	8002bb0 <MPU6050Init>
  MPUSetAccel(MPU_A16G);
 800285a:	2018      	movs	r0, #24
 800285c:	f000 faa2 	bl	8002da4 <MPUSetAccel>
  MPUSetGyro(MPU_G2000G);
 8002860:	2018      	movs	r0, #24
 8002862:	f000 fabf 	bl	8002de4 <MPUSetGyro>

  for(uint8_t i = 0; i < 3; i++)
 8002866:	231f      	movs	r3, #31
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e028      	b.n	80028c2 <main+0x8a>
  {
	  HAL_UART_Transmit(&huart1, nameArray[i], sizeof(nameArray[i]), HAL_MAX_DELAY);
 8002870:	241f      	movs	r4, #31
 8002872:	193b      	adds	r3, r7, r4
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4b7e      	ldr	r3, [pc, #504]	; (8002a70 <main+0x238>)
 8002878:	0092      	lsls	r2, r2, #2
 800287a:	58d1      	ldr	r1, [r2, r3]
 800287c:	2301      	movs	r3, #1
 800287e:	425b      	negs	r3, r3
 8002880:	487c      	ldr	r0, [pc, #496]	; (8002a74 <main+0x23c>)
 8002882:	2204      	movs	r2, #4
 8002884:	f003 f852 	bl	800592c <HAL_UART_Transmit>
	  if(i != 2)
 8002888:	193b      	adds	r3, r7, r4
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d006      	beq.n	800289e <main+0x66>
	  {
		  HAL_UART_Transmit(&huart1, ",", sizeof(","), HAL_MAX_DELAY);
 8002890:	2301      	movs	r3, #1
 8002892:	425b      	negs	r3, r3
 8002894:	4978      	ldr	r1, [pc, #480]	; (8002a78 <main+0x240>)
 8002896:	4877      	ldr	r0, [pc, #476]	; (8002a74 <main+0x23c>)
 8002898:	2202      	movs	r2, #2
 800289a:	f003 f847 	bl	800592c <HAL_UART_Transmit>
	  }
	  if(i == 2)
 800289e:	231f      	movs	r3, #31
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d106      	bne.n	80028b6 <main+0x7e>
	  {
		  HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 80028a8:	2301      	movs	r3, #1
 80028aa:	425b      	negs	r3, r3
 80028ac:	4973      	ldr	r1, [pc, #460]	; (8002a7c <main+0x244>)
 80028ae:	4871      	ldr	r0, [pc, #452]	; (8002a74 <main+0x23c>)
 80028b0:	2202      	movs	r2, #2
 80028b2:	f003 f83b 	bl	800592c <HAL_UART_Transmit>
  for(uint8_t i = 0; i < 3; i++)
 80028b6:	211f      	movs	r1, #31
 80028b8:	187b      	adds	r3, r7, r1
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	3201      	adds	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	231f      	movs	r3, #31
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d9d1      	bls.n	8002870 <main+0x38>
//			 forCounter++;
//		  }
//		   counter = 0;
//		   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
//	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80028cc:	2390      	movs	r3, #144	; 0x90
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	2104      	movs	r1, #4
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 ffbd 	bl	8003852 <HAL_GPIO_TogglePin>
	  MPUReadAll(&allData[counter][0], &allData[counter][1], &allData[counter][2], &allData[counter][3], &allData[counter][4], &allData[counter][5]);
 80028d8:	4b69      	ldr	r3, [pc, #420]	; (8002a80 <main+0x248>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	001a      	movs	r2, r3
 80028de:	0013      	movs	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4a67      	ldr	r2, [pc, #412]	; (8002a84 <main+0x24c>)
 80028e8:	1898      	adds	r0, r3, r2
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <main+0x248>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	001a      	movs	r2, r3
 80028f0:	0013      	movs	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	189b      	adds	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	1c9a      	adds	r2, r3, #2
 80028fa:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <main+0x24c>)
 80028fc:	18d4      	adds	r4, r2, r3
 80028fe:	4b60      	ldr	r3, [pc, #384]	; (8002a80 <main+0x248>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	001a      	movs	r2, r3
 8002904:	0013      	movs	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	189b      	adds	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	1d1a      	adds	r2, r3, #4
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <main+0x24c>)
 8002910:	18d5      	adds	r5, r2, r3
 8002912:	4b5b      	ldr	r3, [pc, #364]	; (8002a80 <main+0x248>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	001a      	movs	r2, r3
 8002918:	0013      	movs	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	189b      	adds	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	1d9a      	adds	r2, r3, #6
 8002922:	4b58      	ldr	r3, [pc, #352]	; (8002a84 <main+0x24c>)
 8002924:	18d6      	adds	r6, r2, r3
 8002926:	4b56      	ldr	r3, [pc, #344]	; (8002a80 <main+0x248>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	001a      	movs	r2, r3
 800292c:	0013      	movs	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	189b      	adds	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3308      	adds	r3, #8
 8002936:	001a      	movs	r2, r3
 8002938:	4b52      	ldr	r3, [pc, #328]	; (8002a84 <main+0x24c>)
 800293a:	18d2      	adds	r2, r2, r3
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <main+0x248>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	0019      	movs	r1, r3
 8002942:	000b      	movs	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	185b      	adds	r3, r3, r1
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	330a      	adds	r3, #10
 800294c:	0019      	movs	r1, r3
 800294e:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <main+0x24c>)
 8002950:	18cb      	adds	r3, r1, r3
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	9200      	str	r2, [sp, #0]
 8002956:	0033      	movs	r3, r6
 8002958:	002a      	movs	r2, r5
 800295a:	0021      	movs	r1, r4
 800295c:	f000 fa0a 	bl	8002d74 <MPUReadAll>
	  //counter++;

	  forCounter = 0;
 8002960:	4b49      	ldr	r3, [pc, #292]	; (8002a88 <main+0x250>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
	  		  while(forCounter < 3)
 8002966:	e07a      	b.n	8002a5e <main+0x226>
	  		  {
	  			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8002968:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <main+0x254>)
 800296a:	2104      	movs	r1, #4
 800296c:	0018      	movs	r0, r3
 800296e:	f000 ff70 	bl	8003852 <HAL_GPIO_TogglePin>
	  			  //MPUData[forCounter] = MPUData[forCounter] / counter;
	  			  if(forCounter < 3)
 8002972:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <main+0x250>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d811      	bhi.n	800299e <main+0x166>
	  			  {
	  			  	  current = (float)allData[0][forCounter] / 2048.0;
 800297a:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <main+0x250>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	001a      	movs	r2, r3
 8002980:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <main+0x24c>)
 8002982:	0052      	lsls	r2, r2, #1
 8002984:	5ed3      	ldrsh	r3, [r2, r3]
 8002986:	0018      	movs	r0, r3
 8002988:	f7fd ff0a 	bl	80007a0 <__aeabi_i2f>
 800298c:	1c03      	adds	r3, r0, #0
 800298e:	218a      	movs	r1, #138	; 0x8a
 8002990:	05c9      	lsls	r1, r1, #23
 8002992:	1c18      	adds	r0, r3, #0
 8002994:	f7fd fdf8 	bl	8000588 <__aeabi_fdiv>
 8002998:	1c03      	adds	r3, r0, #0
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	e018      	b.n	80029d0 <main+0x198>
	  			  } else
	  			  {
	  			   	  current = (float)allData[0][forCounter] / 16.4;
 800299e:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <main+0x250>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	001a      	movs	r2, r3
 80029a4:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <main+0x24c>)
 80029a6:	0052      	lsls	r2, r2, #1
 80029a8:	5ed3      	ldrsh	r3, [r2, r3]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fd fef8 	bl	80007a0 <__aeabi_i2f>
 80029b0:	1c03      	adds	r3, r0, #0
 80029b2:	1c18      	adds	r0, r3, #0
 80029b4:	f7ff fd52 	bl	800245c <__aeabi_f2d>
 80029b8:	4a35      	ldr	r2, [pc, #212]	; (8002a90 <main+0x258>)
 80029ba:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <main+0x25c>)
 80029bc:	f7fe faa0 	bl	8000f00 <__aeabi_ddiv>
 80029c0:	0002      	movs	r2, r0
 80029c2:	000b      	movs	r3, r1
 80029c4:	0010      	movs	r0, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	f7ff fd90 	bl	80024ec <__aeabi_d2f>
 80029cc:	1c03      	adds	r3, r0, #0
 80029ce:	61bb      	str	r3, [r7, #24]
	  			  }
	  			  allData[0][forCounter] = 0;
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <main+0x250>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	001a      	movs	r2, r3
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <main+0x24c>)
 80029d8:	0052      	lsls	r2, r2, #1
 80029da:	2100      	movs	r1, #0
 80029dc:	52d1      	strh	r1, [r2, r3]

	  			  if(forCounter == 2 && current > previous[forCounter] + 0.8)
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <main+0x250>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d123      	bne.n	8002a2e <main+0x1f6>
 80029e6:	69b8      	ldr	r0, [r7, #24]
 80029e8:	f7ff fd38 	bl	800245c <__aeabi_f2d>
 80029ec:	0004      	movs	r4, r0
 80029ee:	000d      	movs	r5, r1
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <main+0x250>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	001a      	movs	r2, r3
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	58d3      	ldr	r3, [r2, r3]
 80029fc:	1c18      	adds	r0, r3, #0
 80029fe:	f7ff fd2d 	bl	800245c <__aeabi_f2d>
 8002a02:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <main+0x260>)
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <main+0x264>)
 8002a06:	f7fd ff11 	bl	800082c <__aeabi_dadd>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	000b      	movs	r3, r1
 8002a0e:	0020      	movs	r0, r4
 8002a10:	0029      	movs	r1, r5
 8002a12:	f7fd fd35 	bl	8000480 <__aeabi_dcmpgt>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d009      	beq.n	8002a2e <main+0x1f6>
	  			  {
					  HAL_UART_Transmit(&huart1, "STAP", sizeof(numbers), HAL_MAX_DELAY);
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	425b      	negs	r3, r3
 8002a1e:	4920      	ldr	r1, [pc, #128]	; (8002aa0 <main+0x268>)
 8002a20:	4814      	ldr	r0, [pc, #80]	; (8002a74 <main+0x23c>)
 8002a22:	2206      	movs	r2, #6
 8002a24:	f002 ff82 	bl	800592c <HAL_UART_Transmit>
					  forCounter = 2;
 8002a28:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <main+0x250>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
//
//	  			  if(forCounter != 2)
//	  			 {
//	  				 HAL_UART_Transmit(&huart1, ", ", sizeof(", "), HAL_MAX_DELAY);
//	  			 }
	  			 if(forCounter == 2)
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <main+0x250>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d106      	bne.n	8002a44 <main+0x20c>
	  			 {
	  				HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 8002a36:	2301      	movs	r3, #1
 8002a38:	425b      	negs	r3, r3
 8002a3a:	4910      	ldr	r1, [pc, #64]	; (8002a7c <main+0x244>)
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <main+0x23c>)
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f002 ff74 	bl	800592c <HAL_UART_Transmit>

	  			 }
	  			 previous[forCounter] = current;
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <main+0x250>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	001a      	movs	r2, r3
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	0092      	lsls	r2, r2, #2
 8002a4e:	69b9      	ldr	r1, [r7, #24]
 8002a50:	50d1      	str	r1, [r2, r3]
	  			 forCounter++;
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <main+0x250>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <main+0x250>)
 8002a5c:	701a      	strb	r2, [r3, #0]
	  		  while(forCounter < 3)
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <main+0x250>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d800      	bhi.n	8002a68 <main+0x230>
 8002a66:	e77f      	b.n	8002968 <main+0x130>
	  		  }
	  HAL_Delay(250);
 8002a68:	20fa      	movs	r0, #250	; 0xfa
 8002a6a:	f000 fc93 	bl	8003394 <HAL_Delay>
  {
 8002a6e:	e72d      	b.n	80028cc <main+0x94>
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20000b78 	.word	0x20000b78
 8002a78:	0800aa44 	.word	0x0800aa44
 8002a7c:	0800aa48 	.word	0x0800aa48
 8002a80:	20000210 	.word	0x20000210
 8002a84:	20000a08 	.word	0x20000a08
 8002a88:	20000284 	.word	0x20000284
 8002a8c:	48000400 	.word	0x48000400
 8002a90:	66666666 	.word	0x66666666
 8002a94:	40306666 	.word	0x40306666
 8002a98:	9999999a 	.word	0x9999999a
 8002a9c:	3fe99999 	.word	0x3fe99999
 8002aa0:	0800aa4c 	.word	0x0800aa4c

08002aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b095      	sub	sp, #84	; 0x54
 8002aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aaa:	2420      	movs	r4, #32
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	0018      	movs	r0, r3
 8002ab0:	2330      	movs	r3, #48	; 0x30
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	f003 fac7 	bl	8006048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aba:	2310      	movs	r3, #16
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	0018      	movs	r0, r3
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f003 fabf 	bl	8006048 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aca:	003b      	movs	r3, r7
 8002acc:	0018      	movs	r0, r3
 8002ace:	2310      	movs	r3, #16
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	f003 fab8 	bl	8006048 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002ad8:	0021      	movs	r1, r4
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	220a      	movs	r2, #10
 8002ade:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2210      	movs	r2, #16
 8002aea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2201      	movs	r2, #1
 8002af0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2202      	movs	r2, #2
 8002af6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	22a0      	movs	r2, #160	; 0xa0
 8002b02:	0392      	lsls	r2, r2, #14
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	2200      	movs	r2, #0
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f001 fc88 	bl	8004424 <HAL_RCC_OscConfig>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d001      	beq.n	8002b1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002b18:	f000 f844 	bl	8002ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	2207      	movs	r2, #7
 8002b22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b24:	187b      	adds	r3, r7, r1
 8002b26:	2202      	movs	r2, #2
 8002b28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b2a:	187b      	adds	r3, r7, r1
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b36:	187b      	adds	r3, r7, r1
 8002b38:	2101      	movs	r1, #1
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f001 ff8c 	bl	8004a58 <HAL_RCC_ClockConfig>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d001      	beq.n	8002b48 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002b44:	f000 f82e 	bl	8002ba4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002b48:	003b      	movs	r3, r7
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <SystemClock_Config+0xd8>)
 8002b4c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b4e:	003b      	movs	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002b54:	003b      	movs	r3, r7
 8002b56:	2210      	movs	r2, #16
 8002b58:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b5a:	003b      	movs	r3, r7
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b62:	003b      	movs	r3, r7
 8002b64:	0018      	movs	r0, r3
 8002b66:	f002 f8f3 	bl	8004d50 <HAL_RCCEx_PeriphCLKConfig>
 8002b6a:	1e03      	subs	r3, r0, #0
 8002b6c:	d001      	beq.n	8002b72 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002b6e:	f000 f819 	bl	8002ba4 <Error_Handler>
  }
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b015      	add	sp, #84	; 0x54
 8002b78:	bd90      	pop	{r4, r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	00010021 	.word	0x00010021

08002b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b92:	f000 fbe3 	bl	800335c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b002      	add	sp, #8
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	40000400 	.word	0x40000400

08002ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bac:	e7fe      	b.n	8002bac <Error_Handler+0x8>
	...

08002bb0 <MPU6050Init>:
#include "mpu.h"

uint8_t currentAccelScale, currentGyroScale;

bool MPU6050Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002bb6:	4830      	ldr	r0, [pc, #192]	; (8002c78 <MPU6050Init+0xc8>)
 8002bb8:	23fa      	movs	r3, #250	; 0xfa
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	9302      	str	r3, [sp, #8]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	2275      	movs	r2, #117	; 0x75
 8002bca:	21d0      	movs	r1, #208	; 0xd0
 8002bcc:	f001 f820 	bl	8003c10 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002bd0:	1dfb      	adds	r3, r7, #7
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b68      	cmp	r3, #104	; 0x68
 8002bd6:	d149      	bne.n	8002c6c <MPU6050Init+0xbc>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		data = 0;
 8002bd8:	1dbb      	adds	r3, r7, #6
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&data, 1, 1000);
 8002bde:	4826      	ldr	r0, [pc, #152]	; (8002c78 <MPU6050Init+0xc8>)
 8002be0:	23fa      	movs	r3, #250	; 0xfa
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	2301      	movs	r3, #1
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	1dbb      	adds	r3, r7, #6
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	226b      	movs	r2, #107	; 0x6b
 8002bf2:	21d0      	movs	r1, #208	; 0xd0
 8002bf4:	f000 fede 	bl	80039b4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data = 0x07;
 8002bf8:	1dbb      	adds	r3, r7, #6
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8002bfe:	481e      	ldr	r0, [pc, #120]	; (8002c78 <MPU6050Init+0xc8>)
 8002c00:	23fa      	movs	r3, #250	; 0xfa
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	9302      	str	r3, [sp, #8]
 8002c06:	2301      	movs	r3, #1
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	1dbb      	adds	r3, r7, #6
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	2219      	movs	r2, #25
 8002c12:	21d0      	movs	r1, #208	; 0xd0
 8002c14:	f000 fece 	bl	80039b4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		data = MPU_A2G;
 8002c18:	1dbb      	adds	r3, r7, #6
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
		currentAccelScale = data;
 8002c1e:	1dbb      	adds	r3, r7, #6
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <MPU6050Init+0xcc>)
 8002c24:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8002c26:	4814      	ldr	r0, [pc, #80]	; (8002c78 <MPU6050Init+0xc8>)
 8002c28:	23fa      	movs	r3, #250	; 0xfa
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	9302      	str	r3, [sp, #8]
 8002c2e:	2301      	movs	r3, #1
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	1dbb      	adds	r3, r7, #6
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2301      	movs	r3, #1
 8002c38:	221c      	movs	r2, #28
 8002c3a:	21d0      	movs	r1, #208	; 0xd0
 8002c3c:	f000 feba 	bl	80039b4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		data = MPU_G250G;
 8002c40:	1dbb      	adds	r3, r7, #6
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
		currentGyroScale = data;
 8002c46:	1dbb      	adds	r3, r7, #6
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <MPU6050Init+0xd0>)
 8002c4c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8002c4e:	480a      	ldr	r0, [pc, #40]	; (8002c78 <MPU6050Init+0xc8>)
 8002c50:	23fa      	movs	r3, #250	; 0xfa
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	9302      	str	r3, [sp, #8]
 8002c56:	2301      	movs	r3, #1
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	1dbb      	adds	r3, r7, #6
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2301      	movs	r3, #1
 8002c60:	221b      	movs	r2, #27
 8002c62:	21d0      	movs	r1, #208	; 0xd0
 8002c64:	f000 fea6 	bl	80039b4 <HAL_I2C_Mem_Write>
		return true;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <MPU6050Init+0xbe>
	} else 
	{
		return false;
 8002c6c:	2300      	movs	r3, #0
	}

}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	20000220 	.word	0x20000220
 8002c7c:	20000b0d 	.word	0x20000b0d
 8002c80:	20000b0c 	.word	0x20000b0c

08002c84 <MPU6050ReadAccel>:

void MPU6050ReadAccel(int16_t *aXRaw, int16_t *aYRaw, int16_t *aZRaw)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b08b      	sub	sp, #44	; 0x2c
 8002c88:	af04      	add	r7, sp, #16
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
	uint8_t RecData[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, RecData, 6, 1000);
 8002c90:	4819      	ldr	r0, [pc, #100]	; (8002cf8 <MPU6050ReadAccel+0x74>)
 8002c92:	23fa      	movs	r3, #250	; 0xfa
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	9302      	str	r3, [sp, #8]
 8002c98:	2306      	movs	r3, #6
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	2410      	movs	r4, #16
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	223b      	movs	r2, #59	; 0x3b
 8002ca6:	21d0      	movs	r1, #208	; 0xd0
 8002ca8:	f000 ffb2 	bl	8003c10 <HAL_I2C_Mem_Read>

	*aXRaw = (int16_t)(RecData[0] << 8 | RecData [1]);
 8002cac:	0021      	movs	r1, r4
 8002cae:	187b      	adds	r3, r7, r1
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	b21a      	sxth	r2, r3
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	801a      	strh	r2, [r3, #0]
	*aYRaw = (int16_t)(RecData[2] << 8 | RecData [3]);
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	789b      	ldrb	r3, [r3, #2]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	78db      	ldrb	r3, [r3, #3]
 8002cd0:	b21b      	sxth	r3, r3
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	b21a      	sxth	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	801a      	strh	r2, [r3, #0]
	*aZRaw = (int16_t)(RecData[4] << 8 | RecData [5]);
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	791b      	ldrb	r3, [r3, #4]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	b21a      	sxth	r2, r3
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	795b      	ldrb	r3, [r3, #5]
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	801a      	strh	r2, [r3, #0]
	     for more details check ACCEL_CONFIG Register              ****/

	//Ax = Accel_X_RAW/16384.0;
	//Ay = Accel_Y_RAW/16384.0;
	//Az = Accel_Z_RAW/16384.0;
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b007      	add	sp, #28
 8002cf6:	bd90      	pop	{r4, r7, pc}
 8002cf8:	20000220 	.word	0x20000220

08002cfc <MPU6050ReadGyro>:

void MPU6050ReadGyro(int16_t *gXRaw, int16_t *gYRaw, int16_t *gZRaw)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b08b      	sub	sp, #44	; 0x2c
 8002d00:	af04      	add	r7, sp, #16
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
	uint8_t RecData[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, RecData, 6, 1000);
 8002d08:	4819      	ldr	r0, [pc, #100]	; (8002d70 <MPU6050ReadGyro+0x74>)
 8002d0a:	23fa      	movs	r3, #250	; 0xfa
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	2306      	movs	r3, #6
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	2410      	movs	r4, #16
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2243      	movs	r2, #67	; 0x43
 8002d1e:	21d0      	movs	r1, #208	; 0xd0
 8002d20:	f000 ff76 	bl	8003c10 <HAL_I2C_Mem_Read>

	*gXRaw = (int16_t)(RecData[0] << 8 | RecData [1]);
 8002d24:	0021      	movs	r1, r4
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	b21a      	sxth	r2, r3
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	b21b      	sxth	r3, r3
 8002d34:	4313      	orrs	r3, r2
 8002d36:	b21a      	sxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	801a      	strh	r2, [r3, #0]
	*gYRaw = (int16_t)(RecData[2] << 8 | RecData [3]);
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	789b      	ldrb	r3, [r3, #2]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	78db      	ldrb	r3, [r3, #3]
 8002d48:	b21b      	sxth	r3, r3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	801a      	strh	r2, [r3, #0]
	*gZRaw = (int16_t)(RecData[4] << 8 | RecData [5]);
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	791b      	ldrb	r3, [r3, #4]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	795b      	ldrb	r3, [r3, #5]
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	4313      	orrs	r3, r2
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	801a      	strh	r2, [r3, #0]
	     for more details check GYRO_CONFIG Register              ****/

	//Gx = Gyro_X_RAW/131.0;
	//Gy = Gyro_Y_RAW/131.0;
	//Gz = Gyro_Z_RAW/131.0;
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b007      	add	sp, #28
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	20000220 	.word	0x20000220

08002d74 <MPUReadAll>:

void MPUReadAll(int16_t *aXRaw, int16_t *aYRaw, int16_t *aZRaw, int16_t *gXRaw, int16_t *gYRaw, int16_t *gZRaw)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
	MPU6050ReadAccel(aXRaw, aYRaw, aZRaw);
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7ff ff7b 	bl	8002c84 <MPU6050ReadAccel>
	MPU6050ReadGyro(gXRaw, gYRaw, gZRaw);
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	69b9      	ldr	r1, [r7, #24]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7ff ffb1 	bl	8002cfc <MPU6050ReadGyro>
}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b004      	add	sp, #16
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <MPUSetAccel>:

void MPUSetAccel(uint8_t acceleration)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af04      	add	r7, sp, #16
 8002daa:	0002      	movs	r2, r0
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	701a      	strb	r2, [r3, #0]

	currentAccelScale = acceleration;
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <MPUSetAccel+0x38>)
 8002db6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &acceleration, 1, 1000);
 8002db8:	4809      	ldr	r0, [pc, #36]	; (8002de0 <MPUSetAccel+0x3c>)
 8002dba:	23fa      	movs	r3, #250	; 0xfa
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	221c      	movs	r2, #28
 8002dcc:	21d0      	movs	r1, #208	; 0xd0
 8002dce:	f000 fdf1 	bl	80039b4 <HAL_I2C_Mem_Write>
}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	20000b0d 	.word	0x20000b0d
 8002de0:	20000220 	.word	0x20000220

08002de4 <MPUSetGyro>:

void MPUSetGyro(uint8_t gyroSpeed)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af04      	add	r7, sp, #16
 8002dea:	0002      	movs	r2, r0
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	701a      	strb	r2, [r3, #0]
	currentGyroScale = gyroSpeed;
 8002df0:	1dfb      	adds	r3, r7, #7
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <MPUSetGyro+0x38>)
 8002df6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &gyroSpeed, 1, 1000);
 8002df8:	4809      	ldr	r0, [pc, #36]	; (8002e20 <MPUSetGyro+0x3c>)
 8002dfa:	23fa      	movs	r3, #250	; 0xfa
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	9302      	str	r3, [sp, #8]
 8002e00:	2301      	movs	r3, #1
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	221b      	movs	r2, #27
 8002e0c:	21d0      	movs	r1, #208	; 0xd0
 8002e0e:	f000 fdd1 	bl	80039b4 <HAL_I2C_Mem_Write>
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b002      	add	sp, #8
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20000b0c 	.word	0x20000b0c
 8002e20:	20000220 	.word	0x20000220

08002e24 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	2314      	movs	r3, #20
 8002e30:	001a      	movs	r2, r3
 8002e32:	2100      	movs	r1, #0
 8002e34:	f003 f908 	bl	8006048 <memset>
  RTC_DateTypeDef sDate = {0};
 8002e38:	003b      	movs	r3, r7
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e3e:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002e40:	4a28      	ldr	r2, [pc, #160]	; (8002ee4 <MX_RTC_Init+0xc0>)
 8002e42:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002e4a:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002e4c:	227f      	movs	r2, #127	; 0x7f
 8002e4e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002e50:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002e52:	22ff      	movs	r2, #255	; 0xff
 8002e54:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e56:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e5c:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e62:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f002 f83e 	bl	8004eec <HAL_RTC_Init>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d001      	beq.n	8002e78 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002e74:	f7ff fe96 	bl	8002ba4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	2200      	movs	r2, #0
 8002e82:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	2200      	movs	r2, #0
 8002e88:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002e96:	1d39      	adds	r1, r7, #4
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f002 f8b9 	bl	8005014 <HAL_RTC_SetTime>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8002ea6:	f7ff fe7d 	bl	8002ba4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002eaa:	003b      	movs	r3, r7
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002eb0:	003b      	movs	r3, r7
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002eb6:	003b      	movs	r3, r7
 8002eb8:	2201      	movs	r2, #1
 8002eba:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002ebc:	003b      	movs	r3, r7
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002ec2:	0039      	movs	r1, r7
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <MX_RTC_Init+0xbc>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f002 f95f 	bl	800518c <HAL_RTC_SetDate>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8002ed2:	f7ff fe67 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b006      	add	sp, #24
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000b10 	.word	0x20000b10
 8002ee4:	40002800 	.word	0x40002800

08002ee8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_RTC_MspInit+0x28>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d106      	bne.n	8002f08 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RTC_MspInit+0x2c>)
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RTC_MspInit+0x2c>)
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	0209      	lsls	r1, r1, #8
 8002f04:	430a      	orrs	r2, r1
 8002f06:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40002800 	.word	0x40002800
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_MspInit+0x44>)
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_MspInit+0x44>)
 8002f24:	2101      	movs	r1, #1
 8002f26:	430a      	orrs	r2, r1
 8002f28:	619a      	str	r2, [r3, #24]
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_MspInit+0x44>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4013      	ands	r3, r2
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_MspInit+0x44>)
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_MspInit+0x44>)
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	0549      	lsls	r1, r1, #21
 8002f40:	430a      	orrs	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_MspInit+0x44>)
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	055b      	lsls	r3, r3, #21
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	40021000 	.word	0x40021000

08002f60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	0019      	movs	r1, r3
 8002f76:	2010      	movs	r0, #16
 8002f78:	f000 fab8 	bl	80034ec <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f7c:	2010      	movs	r0, #16
 8002f7e:	f000 faca 	bl	8003516 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_InitTick+0xa4>)
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <HAL_InitTick+0xa4>)
 8002f88:	2102      	movs	r1, #2
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	61da      	str	r2, [r3, #28]
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_InitTick+0xa4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	2202      	movs	r2, #2
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	18fa      	adds	r2, r7, r3
 8002f9e:	2310      	movs	r3, #16
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f001 fea9 	bl	8004cfc <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002faa:	f001 fe91 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	4914      	ldr	r1, [pc, #80]	; (8003008 <HAL_InitTick+0xa8>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7fd f8c2 	bl	8000140 <__udivsi3>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_InitTick+0xac>)
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_InitTick+0xb0>)
 8002fc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_InitTick+0xac>)
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <HAL_InitTick+0xb4>)
 8002fcc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_InitTick+0xac>)
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_InitTick+0xac>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_InitTick+0xac>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_InitTick+0xac>)
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f002 f9ee 	bl	80053c4 <HAL_TIM_Base_Init>
 8002fe8:	1e03      	subs	r3, r0, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_InitTick+0xac>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f002 fa40 	bl	8005474 <HAL_TIM_Base_Start_IT>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	e000      	b.n	8002ffa <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b00a      	add	sp, #40	; 0x28
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	40021000 	.word	0x40021000
 8003008:	000f4240 	.word	0x000f4240
 800300c:	20000b30 	.word	0x20000b30
 8003010:	40000400 	.word	0x40000400
 8003014:	000003e7 	.word	0x000003e7

08003018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800301c:	e7fe      	b.n	800301c <NMI_Handler+0x4>

0800301e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003022:	e7fe      	b.n	8003022 <HardFault_Handler+0x4>

08003024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <TIM3_IRQHandler+0x14>)
 800304a:	0018      	movs	r0, r3
 800304c:	f002 fa5e 	bl	800550c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20000b30 	.word	0x20000b30

0800305c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
	return 1;
 8003060:	2301      	movs	r3, #1
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <_kill>:

int _kill(int pid, int sig)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003072:	f002 ffbf 	bl	8005ff4 <__errno>
 8003076:	0003      	movs	r3, r0
 8003078:	2216      	movs	r2, #22
 800307a:	601a      	str	r2, [r3, #0]
	return -1;
 800307c:	2301      	movs	r3, #1
 800307e:	425b      	negs	r3, r3
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}

08003088 <_exit>:

void _exit (int status)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003090:	2301      	movs	r3, #1
 8003092:	425a      	negs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0011      	movs	r1, r2
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff ffe5 	bl	8003068 <_kill>
	while (1) {}		/* Make sure we hang here */
 800309e:	e7fe      	b.n	800309e <_exit+0x16>

080030a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e00a      	b.n	80030c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030b2:	e000      	b.n	80030b6 <_read+0x16>
 80030b4:	bf00      	nop
 80030b6:	0001      	movs	r1, r0
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	60ba      	str	r2, [r7, #8]
 80030be:	b2ca      	uxtb	r2, r1
 80030c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	dbf0      	blt.n	80030b2 <_read+0x12>
	}

return len;
 80030d0:	687b      	ldr	r3, [r7, #4]
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b006      	add	sp, #24
 80030d8:	bd80      	pop	{r7, pc}

080030da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e009      	b.n	8003100 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	60ba      	str	r2, [r7, #8]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	0018      	movs	r0, r3
 80030f6:	e000      	b.n	80030fa <_write+0x20>
 80030f8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3301      	adds	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	dbf1      	blt.n	80030ec <_write+0x12>
	}
	return len;
 8003108:	687b      	ldr	r3, [r7, #4]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b006      	add	sp, #24
 8003110:	bd80      	pop	{r7, pc}

08003112 <_close>:

int _close(int file)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
	return -1;
 800311a:	2301      	movs	r3, #1
 800311c:	425b      	negs	r3, r3
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b002      	add	sp, #8
 8003124:	bd80      	pop	{r7, pc}

08003126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	0192      	lsls	r2, r2, #6
 8003136:	605a      	str	r2, [r3, #4]
	return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b002      	add	sp, #8
 8003140:	bd80      	pop	{r7, pc}

08003142 <_isatty>:

int _isatty(int file)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
	return 1;
 800314a:	2301      	movs	r3, #1
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}

08003154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
	return 0;
 8003160:	2300      	movs	r3, #0
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <_sbrk+0x5c>)
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <_sbrk+0x60>)
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003180:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <_sbrk+0x64>)
 800318a:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <_sbrk+0x68>)
 800318c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <_sbrk+0x64>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	18d3      	adds	r3, r2, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	429a      	cmp	r2, r3
 800319a:	d207      	bcs.n	80031ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800319c:	f002 ff2a 	bl	8005ff4 <__errno>
 80031a0:	0003      	movs	r3, r0
 80031a2:	220c      	movs	r2, #12
 80031a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	425b      	negs	r3, r3
 80031aa:	e009      	b.n	80031c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <_sbrk+0x64>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <_sbrk+0x64>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	18d2      	adds	r2, r2, r3
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <_sbrk+0x64>)
 80031bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80031be:	68fb      	ldr	r3, [r7, #12]
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b006      	add	sp, #24
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20002000 	.word	0x20002000
 80031cc:	00000400 	.word	0x00000400
 80031d0:	20000214 	.word	0x20000214
 80031d4:	20000c10 	.word	0x20000c10

080031d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <MX_USART1_UART_Init+0x58>)
 80031ea:	4a15      	ldr	r2, [pc, #84]	; (8003240 <MX_USART1_UART_Init+0x5c>)
 80031ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <MX_USART1_UART_Init+0x58>)
 80031f0:	22e1      	movs	r2, #225	; 0xe1
 80031f2:	0252      	lsls	r2, r2, #9
 80031f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <MX_USART1_UART_Init+0x58>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <MX_USART1_UART_Init+0x58>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <MX_USART1_UART_Init+0x58>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <MX_USART1_UART_Init+0x58>)
 800320a:	220c      	movs	r2, #12
 800320c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <MX_USART1_UART_Init+0x58>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <MX_USART1_UART_Init+0x58>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <MX_USART1_UART_Init+0x58>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <MX_USART1_UART_Init+0x58>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <MX_USART1_UART_Init+0x58>)
 8003228:	0018      	movs	r0, r3
 800322a:	f002 fb2b 	bl	8005884 <HAL_UART_Init>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d001      	beq.n	8003236 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003232:	f7ff fcb7 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000b78 	.word	0x20000b78
 8003240:	40013800 	.word	0x40013800

08003244 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b08b      	sub	sp, #44	; 0x2c
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	2414      	movs	r4, #20
 800324e:	193b      	adds	r3, r7, r4
 8003250:	0018      	movs	r0, r3
 8003252:	2314      	movs	r3, #20
 8003254:	001a      	movs	r2, r3
 8003256:	2100      	movs	r1, #0
 8003258:	f002 fef6 	bl	8006048 <memset>
  if(uartHandle->Instance==USART1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_UART_MspInit+0x94>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d133      	bne.n	80032ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_UART_MspInit+0x98>)
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <HAL_UART_MspInit+0x98>)
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	01c9      	lsls	r1, r1, #7
 8003270:	430a      	orrs	r2, r1
 8003272:	619a      	str	r2, [r3, #24]
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_UART_MspInit+0x98>)
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	01db      	lsls	r3, r3, #7
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <HAL_UART_MspInit+0x98>)
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_UART_MspInit+0x98>)
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	0289      	lsls	r1, r1, #10
 800328c:	430a      	orrs	r2, r1
 800328e:	615a      	str	r2, [r3, #20]
 8003290:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_UART_MspInit+0x98>)
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	22c0      	movs	r2, #192	; 0xc0
 80032a2:	00d2      	lsls	r2, r2, #3
 80032a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	0021      	movs	r1, r4
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	2202      	movs	r2, #2
 80032ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	2203      	movs	r2, #3
 80032b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80032ba:	187b      	adds	r3, r7, r1
 80032bc:	2201      	movs	r2, #1
 80032be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c0:	187a      	adds	r2, r7, r1
 80032c2:	2390      	movs	r3, #144	; 0x90
 80032c4:	05db      	lsls	r3, r3, #23
 80032c6:	0011      	movs	r1, r2
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 f935 	bl	8003538 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b00b      	add	sp, #44	; 0x2c
 80032d4:	bd90      	pop	{r4, r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40021000 	.word	0x40021000

080032e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032e0:	480d      	ldr	r0, [pc, #52]	; (8003318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032e4:	480d      	ldr	r0, [pc, #52]	; (800331c <LoopForever+0x6>)
  ldr r1, =_edata
 80032e6:	490e      	ldr	r1, [pc, #56]	; (8003320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032e8:	4a0e      	ldr	r2, [pc, #56]	; (8003324 <LoopForever+0xe>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032ec:	e002      	b.n	80032f4 <LoopCopyDataInit>

080032ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032f2:	3304      	adds	r3, #4

080032f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f8:	d3f9      	bcc.n	80032ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032fa:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032fc:	4c0b      	ldr	r4, [pc, #44]	; (800332c <LoopForever+0x16>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003300:	e001      	b.n	8003306 <LoopFillZerobss>

08003302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003304:	3204      	adds	r2, #4

08003306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003308:	d3fb      	bcc.n	8003302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800330a:	f7ff ff65 	bl	80031d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800330e:	f002 fe77 	bl	8006000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003312:	f7ff fa91 	bl	8002838 <main>

08003316 <LoopForever>:

LoopForever:
    b LoopForever
 8003316:	e7fe      	b.n	8003316 <LoopForever>
  ldr   r0, =_estack
 8003318:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800331c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003320:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003324:	0800b04c 	.word	0x0800b04c
  ldr r2, =_sbss
 8003328:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800332c:	20000c10 	.word	0x20000c10

08003330 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003330:	e7fe      	b.n	8003330 <ADC1_IRQHandler>
	...

08003334 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_Init+0x24>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_Init+0x24>)
 800333e:	2110      	movs	r1, #16
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003344:	2000      	movs	r0, #0
 8003346:	f7ff fe0b 	bl	8002f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800334a:	f7ff fde5 	bl	8002f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	40022000 	.word	0x40022000

0800335c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_IncTick+0x1c>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	001a      	movs	r2, r3
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_IncTick+0x20>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	18d2      	adds	r2, r2, r3
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_IncTick+0x20>)
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	2000001c 	.word	0x2000001c
 800337c:	20000bfc 	.word	0x20000bfc

08003380 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <HAL_GetTick+0x10>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	20000bfc 	.word	0x20000bfc

08003394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff fff0 	bl	8003380 <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	d005      	beq.n	80033ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_Delay+0x44>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	001a      	movs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	189b      	adds	r3, r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	f7ff ffe0 	bl	8003380 <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d8f7      	bhi.n	80033bc <HAL_Delay+0x28>
  {
  }
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b004      	add	sp, #16
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	2000001c 	.word	0x2000001c

080033dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	0002      	movs	r2, r0
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b7f      	cmp	r3, #127	; 0x7f
 80033ee:	d809      	bhi.n	8003404 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f0:	1dfb      	adds	r3, r7, #7
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	001a      	movs	r2, r3
 80033f6:	231f      	movs	r3, #31
 80033f8:	401a      	ands	r2, r3
 80033fa:	4b04      	ldr	r3, [pc, #16]	; (800340c <__NVIC_EnableIRQ+0x30>)
 80033fc:	2101      	movs	r1, #1
 80033fe:	4091      	lsls	r1, r2
 8003400:	000a      	movs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
  }
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}
 800340c:	e000e100 	.word	0xe000e100

08003410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	0002      	movs	r2, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800341e:	1dfb      	adds	r3, r7, #7
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b7f      	cmp	r3, #127	; 0x7f
 8003424:	d828      	bhi.n	8003478 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003426:	4a2f      	ldr	r2, [pc, #188]	; (80034e4 <__NVIC_SetPriority+0xd4>)
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b25b      	sxtb	r3, r3
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	33c0      	adds	r3, #192	; 0xc0
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	589b      	ldr	r3, [r3, r2]
 8003436:	1dfa      	adds	r2, r7, #7
 8003438:	7812      	ldrb	r2, [r2, #0]
 800343a:	0011      	movs	r1, r2
 800343c:	2203      	movs	r2, #3
 800343e:	400a      	ands	r2, r1
 8003440:	00d2      	lsls	r2, r2, #3
 8003442:	21ff      	movs	r1, #255	; 0xff
 8003444:	4091      	lsls	r1, r2
 8003446:	000a      	movs	r2, r1
 8003448:	43d2      	mvns	r2, r2
 800344a:	401a      	ands	r2, r3
 800344c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	22ff      	movs	r2, #255	; 0xff
 8003454:	401a      	ands	r2, r3
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	0018      	movs	r0, r3
 800345c:	2303      	movs	r3, #3
 800345e:	4003      	ands	r3, r0
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003464:	481f      	ldr	r0, [pc, #124]	; (80034e4 <__NVIC_SetPriority+0xd4>)
 8003466:	1dfb      	adds	r3, r7, #7
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b25b      	sxtb	r3, r3
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	430a      	orrs	r2, r1
 8003470:	33c0      	adds	r3, #192	; 0xc0
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003476:	e031      	b.n	80034dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003478:	4a1b      	ldr	r2, [pc, #108]	; (80034e8 <__NVIC_SetPriority+0xd8>)
 800347a:	1dfb      	adds	r3, r7, #7
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	0019      	movs	r1, r3
 8003480:	230f      	movs	r3, #15
 8003482:	400b      	ands	r3, r1
 8003484:	3b08      	subs	r3, #8
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3306      	adds	r3, #6
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	18d3      	adds	r3, r2, r3
 800348e:	3304      	adds	r3, #4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1dfa      	adds	r2, r7, #7
 8003494:	7812      	ldrb	r2, [r2, #0]
 8003496:	0011      	movs	r1, r2
 8003498:	2203      	movs	r2, #3
 800349a:	400a      	ands	r2, r1
 800349c:	00d2      	lsls	r2, r2, #3
 800349e:	21ff      	movs	r1, #255	; 0xff
 80034a0:	4091      	lsls	r1, r2
 80034a2:	000a      	movs	r2, r1
 80034a4:	43d2      	mvns	r2, r2
 80034a6:	401a      	ands	r2, r3
 80034a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	019b      	lsls	r3, r3, #6
 80034ae:	22ff      	movs	r2, #255	; 0xff
 80034b0:	401a      	ands	r2, r3
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	0018      	movs	r0, r3
 80034b8:	2303      	movs	r3, #3
 80034ba:	4003      	ands	r3, r0
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034c0:	4809      	ldr	r0, [pc, #36]	; (80034e8 <__NVIC_SetPriority+0xd8>)
 80034c2:	1dfb      	adds	r3, r7, #7
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	001c      	movs	r4, r3
 80034c8:	230f      	movs	r3, #15
 80034ca:	4023      	ands	r3, r4
 80034cc:	3b08      	subs	r3, #8
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	430a      	orrs	r2, r1
 80034d2:	3306      	adds	r3, #6
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	18c3      	adds	r3, r0, r3
 80034d8:	3304      	adds	r3, #4
 80034da:	601a      	str	r2, [r3, #0]
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b003      	add	sp, #12
 80034e2:	bd90      	pop	{r4, r7, pc}
 80034e4:	e000e100 	.word	0xe000e100
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	210f      	movs	r1, #15
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	1c02      	adds	r2, r0, #0
 80034fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	187b      	adds	r3, r7, r1
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	b25b      	sxtb	r3, r3
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff ff81 	bl	8003410 <__NVIC_SetPriority>
}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b004      	add	sp, #16
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	0002      	movs	r2, r0
 800351e:	1dfb      	adds	r3, r7, #7
 8003520:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b25b      	sxtb	r3, r3
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff ff57 	bl	80033dc <__NVIC_EnableIRQ>
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b002      	add	sp, #8
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003546:	e14f      	b.n	80037e8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4091      	lsls	r1, r2
 8003552:	000a      	movs	r2, r1
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d100      	bne.n	8003560 <HAL_GPIO_Init+0x28>
 800355e:	e140      	b.n	80037e2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d00b      	beq.n	8003580 <HAL_GPIO_Init+0x48>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d007      	beq.n	8003580 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003574:	2b11      	cmp	r3, #17
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b12      	cmp	r3, #18
 800357e:	d130      	bne.n	80035e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	409a      	lsls	r2, r3
 800358e:	0013      	movs	r3, r2
 8003590:	43da      	mvns	r2, r3
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	409a      	lsls	r2, r3
 80035a2:	0013      	movs	r3, r2
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b6:	2201      	movs	r2, #1
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	409a      	lsls	r2, r3
 80035bc:	0013      	movs	r3, r2
 80035be:	43da      	mvns	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	2201      	movs	r2, #1
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
 80035d4:	0013      	movs	r3, r2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	2203      	movs	r2, #3
 80035ee:	409a      	lsls	r2, r3
 80035f0:	0013      	movs	r3, r2
 80035f2:	43da      	mvns	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	409a      	lsls	r2, r3
 8003604:	0013      	movs	r3, r2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0xea>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b12      	cmp	r3, #18
 8003620:	d123      	bne.n	800366a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	58d3      	ldr	r3, [r2, r3]
 800362e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2207      	movs	r2, #7
 8003634:	4013      	ands	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	220f      	movs	r2, #15
 800363a:	409a      	lsls	r2, r3
 800363c:	0013      	movs	r3, r2
 800363e:	43da      	mvns	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2107      	movs	r1, #7
 800364e:	400b      	ands	r3, r1
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	409a      	lsls	r2, r3
 8003654:	0013      	movs	r3, r2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	0092      	lsls	r2, r2, #2
 8003666:	6939      	ldr	r1, [r7, #16]
 8003668:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	409a      	lsls	r2, r3
 8003678:	0013      	movs	r3, r2
 800367a:	43da      	mvns	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2203      	movs	r2, #3
 8003688:	401a      	ands	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	409a      	lsls	r2, r3
 8003690:	0013      	movs	r3, r2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	055b      	lsls	r3, r3, #21
 80036a6:	4013      	ands	r3, r2
 80036a8:	d100      	bne.n	80036ac <HAL_GPIO_Init+0x174>
 80036aa:	e09a      	b.n	80037e2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ac:	4b54      	ldr	r3, [pc, #336]	; (8003800 <HAL_GPIO_Init+0x2c8>)
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_GPIO_Init+0x2c8>)
 80036b2:	2101      	movs	r1, #1
 80036b4:	430a      	orrs	r2, r1
 80036b6:	619a      	str	r2, [r3, #24]
 80036b8:	4b51      	ldr	r3, [pc, #324]	; (8003800 <HAL_GPIO_Init+0x2c8>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036c4:	4a4f      	ldr	r2, [pc, #316]	; (8003804 <HAL_GPIO_Init+0x2cc>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	589b      	ldr	r3, [r3, r2]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2203      	movs	r2, #3
 80036d6:	4013      	ands	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	220f      	movs	r2, #15
 80036dc:	409a      	lsls	r2, r3
 80036de:	0013      	movs	r3, r2
 80036e0:	43da      	mvns	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	2390      	movs	r3, #144	; 0x90
 80036ec:	05db      	lsls	r3, r3, #23
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d013      	beq.n	800371a <HAL_GPIO_Init+0x1e2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a44      	ldr	r2, [pc, #272]	; (8003808 <HAL_GPIO_Init+0x2d0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00d      	beq.n	8003716 <HAL_GPIO_Init+0x1de>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a43      	ldr	r2, [pc, #268]	; (800380c <HAL_GPIO_Init+0x2d4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <HAL_GPIO_Init+0x1da>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a42      	ldr	r2, [pc, #264]	; (8003810 <HAL_GPIO_Init+0x2d8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_GPIO_Init+0x1d6>
 800370a:	2303      	movs	r3, #3
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x1e4>
 800370e:	2305      	movs	r3, #5
 8003710:	e004      	b.n	800371c <HAL_GPIO_Init+0x1e4>
 8003712:	2302      	movs	r3, #2
 8003714:	e002      	b.n	800371c <HAL_GPIO_Init+0x1e4>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_GPIO_Init+0x1e4>
 800371a:	2300      	movs	r3, #0
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	2103      	movs	r1, #3
 8003720:	400a      	ands	r2, r1
 8003722:	0092      	lsls	r2, r2, #2
 8003724:	4093      	lsls	r3, r2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800372c:	4935      	ldr	r1, [pc, #212]	; (8003804 <HAL_GPIO_Init+0x2cc>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_GPIO_Init+0x2dc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43da      	mvns	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	025b      	lsls	r3, r3, #9
 8003752:	4013      	ands	r3, r2
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_GPIO_Init+0x2dc>)
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003764:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <HAL_GPIO_Init+0x2dc>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	43da      	mvns	r2, r3
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	4013      	ands	r3, r2
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003788:	4b22      	ldr	r3, [pc, #136]	; (8003814 <HAL_GPIO_Init+0x2dc>)
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_GPIO_Init+0x2dc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43da      	mvns	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	035b      	lsls	r3, r3, #13
 80037a6:	4013      	ands	r3, r2
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_GPIO_Init+0x2dc>)
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <HAL_GPIO_Init+0x2dc>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43da      	mvns	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	039b      	lsls	r3, r3, #14
 80037d0:	4013      	ands	r3, r2
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <HAL_GPIO_Init+0x2dc>)
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	3301      	adds	r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	40da      	lsrs	r2, r3
 80037f0:	1e13      	subs	r3, r2, #0
 80037f2:	d000      	beq.n	80037f6 <HAL_GPIO_Init+0x2be>
 80037f4:	e6a8      	b.n	8003548 <HAL_GPIO_Init+0x10>
  } 
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b006      	add	sp, #24
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	40010000 	.word	0x40010000
 8003808:	48000400 	.word	0x48000400
 800380c:	48000800 	.word	0x48000800
 8003810:	48000c00 	.word	0x48000c00
 8003814:	40010400 	.word	0x40010400

08003818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	0008      	movs	r0, r1
 8003822:	0011      	movs	r1, r2
 8003824:	1cbb      	adds	r3, r7, #2
 8003826:	1c02      	adds	r2, r0, #0
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	1c7b      	adds	r3, r7, #1
 800382c:	1c0a      	adds	r2, r1, #0
 800382e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003830:	1c7b      	adds	r3, r7, #1
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003838:	1cbb      	adds	r3, r7, #2
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003840:	e003      	b.n	800384a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003842:	1cbb      	adds	r3, r7, #2
 8003844:	881a      	ldrh	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	000a      	movs	r2, r1
 800385c:	1cbb      	adds	r3, r7, #2
 800385e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003866:	1cbb      	adds	r3, r7, #2
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4013      	ands	r3, r2
 800386e:	041a      	lsls	r2, r3, #16
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	43db      	mvns	r3, r3
 8003874:	1cb9      	adds	r1, r7, #2
 8003876:	8809      	ldrh	r1, [r1, #0]
 8003878:	400b      	ands	r3, r1
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b004      	add	sp, #16
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e082      	b.n	80039a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2241      	movs	r2, #65	; 0x41
 800389e:	5c9b      	ldrb	r3, [r3, r2]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2240      	movs	r2, #64	; 0x40
 80038aa:	2100      	movs	r1, #0
 80038ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7fe ff73 	bl	800279c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2241      	movs	r2, #65	; 0x41
 80038ba:	2124      	movs	r1, #36	; 0x24
 80038bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2101      	movs	r1, #1
 80038ca:	438a      	bics	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4934      	ldr	r1, [pc, #208]	; (80039a8 <HAL_I2C_Init+0x120>)
 80038d8:	400a      	ands	r2, r1
 80038da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4931      	ldr	r1, [pc, #196]	; (80039ac <HAL_I2C_Init+0x124>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d108      	bne.n	8003906 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2180      	movs	r1, #128	; 0x80
 80038fe:	0209      	lsls	r1, r1, #8
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	e007      	b.n	8003916 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2184      	movs	r1, #132	; 0x84
 8003910:	0209      	lsls	r1, r1, #8
 8003912:	430a      	orrs	r2, r1
 8003914:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d104      	bne.n	8003928 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	491f      	ldr	r1, [pc, #124]	; (80039b0 <HAL_I2C_Init+0x128>)
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	491a      	ldr	r1, [pc, #104]	; (80039ac <HAL_I2C_Init+0x124>)
 8003944:	400a      	ands	r2, r1
 8003946:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	431a      	orrs	r2, r3
 8003952:	0011      	movs	r1, r2
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	021a      	lsls	r2, r3, #8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69d9      	ldr	r1, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2101      	movs	r1, #1
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2241      	movs	r2, #65	; 0x41
 800398c:	2120      	movs	r1, #32
 800398e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2242      	movs	r2, #66	; 0x42
 800399a:	2100      	movs	r1, #0
 800399c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	f0ffffff 	.word	0xf0ffffff
 80039ac:	ffff7fff 	.word	0xffff7fff
 80039b0:	02008000 	.word	0x02008000

080039b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b089      	sub	sp, #36	; 0x24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	000c      	movs	r4, r1
 80039be:	0010      	movs	r0, r2
 80039c0:	0019      	movs	r1, r3
 80039c2:	230a      	movs	r3, #10
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	1c22      	adds	r2, r4, #0
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	2308      	movs	r3, #8
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	1c02      	adds	r2, r0, #0
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	1dbb      	adds	r3, r7, #6
 80039d4:	1c0a      	adds	r2, r1, #0
 80039d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2241      	movs	r2, #65	; 0x41
 80039dc:	5c9b      	ldrb	r3, [r3, r2]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d000      	beq.n	80039e6 <HAL_I2C_Mem_Write+0x32>
 80039e4:	e10c      	b.n	8003c00 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_I2C_Mem_Write+0x42>
 80039ec:	232c      	movs	r3, #44	; 0x2c
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	0092      	lsls	r2, r2, #2
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0ff      	b.n	8003c02 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2240      	movs	r2, #64	; 0x40
 8003a06:	5c9b      	ldrb	r3, [r3, r2]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_I2C_Mem_Write+0x5c>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e0f8      	b.n	8003c02 <HAL_I2C_Mem_Write+0x24e>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	2101      	movs	r1, #1
 8003a16:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a18:	f7ff fcb2 	bl	8003380 <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	0219      	lsls	r1, r3, #8
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2319      	movs	r3, #25
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f000 fb0b 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003a32:	1e03      	subs	r3, r0, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0e3      	b.n	8003c02 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2241      	movs	r2, #65	; 0x41
 8003a3e:	2121      	movs	r1, #33	; 0x21
 8003a40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2242      	movs	r2, #66	; 0x42
 8003a46:	2140      	movs	r1, #64	; 0x40
 8003a48:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	222c      	movs	r2, #44	; 0x2c
 8003a5a:	18ba      	adds	r2, r7, r2
 8003a5c:	8812      	ldrh	r2, [r2, #0]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a66:	1dbb      	adds	r3, r7, #6
 8003a68:	881c      	ldrh	r4, [r3, #0]
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	881a      	ldrh	r2, [r3, #0]
 8003a70:	230a      	movs	r3, #10
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	8819      	ldrh	r1, [r3, #0]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	0023      	movs	r3, r4
 8003a82:	f000 f9f9 	bl	8003e78 <I2C_RequestMemoryWrite>
 8003a86:	1e03      	subs	r3, r0, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2240      	movs	r2, #64	; 0x40
 8003a8e:	2100      	movs	r1, #0
 8003a90:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0b5      	b.n	8003c02 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2bff      	cmp	r3, #255	; 0xff
 8003a9e:	d911      	bls.n	8003ac4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	22ff      	movs	r2, #255	; 0xff
 8003aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	045c      	lsls	r4, r3, #17
 8003ab0:	230a      	movs	r3, #10
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	8819      	ldrh	r1, [r3, #0]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	0023      	movs	r3, r4
 8003abe:	f000 fbe3 	bl	8004288 <I2C_TransferConfig>
 8003ac2:	e012      	b.n	8003aea <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	049c      	lsls	r4, r3, #18
 8003ad8:	230a      	movs	r3, #10
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	8819      	ldrh	r1, [r3, #0]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	0023      	movs	r3, r4
 8003ae6:	f000 fbcf 	bl	8004288 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 fae8 	bl	80040c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003af6:	1e03      	subs	r3, r0, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e081      	b.n	8003c02 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d03a      	beq.n	8003bae <HAL_I2C_Mem_Write+0x1fa>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d136      	bne.n	8003bae <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	0013      	movs	r3, r2
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2180      	movs	r1, #128	; 0x80
 8003b4e:	f000 fa7b 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e053      	b.n	8003c02 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2bff      	cmp	r3, #255	; 0xff
 8003b62:	d911      	bls.n	8003b88 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	22ff      	movs	r2, #255	; 0xff
 8003b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	045c      	lsls	r4, r3, #17
 8003b74:	230a      	movs	r3, #10
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	8819      	ldrh	r1, [r3, #0]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	0023      	movs	r3, r4
 8003b82:	f000 fb81 	bl	8004288 <I2C_TransferConfig>
 8003b86:	e012      	b.n	8003bae <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	049c      	lsls	r4, r3, #18
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	8819      	ldrh	r1, [r3, #0]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	0023      	movs	r3, r4
 8003baa:	f000 fb6d 	bl	8004288 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d198      	bne.n	8003aea <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 fac0 	bl	8004144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bc4:	1e03      	subs	r3, r0, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e01a      	b.n	8003c02 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	490b      	ldr	r1, [pc, #44]	; (8003c0c <HAL_I2C_Mem_Write+0x258>)
 8003be0:	400a      	ands	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2241      	movs	r2, #65	; 0x41
 8003be8:	2120      	movs	r1, #32
 8003bea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2242      	movs	r2, #66	; 0x42
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2240      	movs	r2, #64	; 0x40
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b007      	add	sp, #28
 8003c08:	bd90      	pop	{r4, r7, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	fe00e800 	.word	0xfe00e800

08003c10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	000c      	movs	r4, r1
 8003c1a:	0010      	movs	r0, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	230a      	movs	r3, #10
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	1c22      	adds	r2, r4, #0
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	2308      	movs	r3, #8
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	1c02      	adds	r2, r0, #0
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	1dbb      	adds	r3, r7, #6
 8003c30:	1c0a      	adds	r2, r1, #0
 8003c32:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2241      	movs	r2, #65	; 0x41
 8003c38:	5c9b      	ldrb	r3, [r3, r2]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d000      	beq.n	8003c42 <HAL_I2C_Mem_Read+0x32>
 8003c40:	e110      	b.n	8003e64 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_I2C_Mem_Read+0x42>
 8003c48:	232c      	movs	r3, #44	; 0x2c
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	0092      	lsls	r2, r2, #2
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e103      	b.n	8003e66 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2240      	movs	r2, #64	; 0x40
 8003c62:	5c9b      	ldrb	r3, [r3, r2]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_I2C_Mem_Read+0x5c>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e0fc      	b.n	8003e66 <HAL_I2C_Mem_Read+0x256>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2240      	movs	r2, #64	; 0x40
 8003c70:	2101      	movs	r1, #1
 8003c72:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c74:	f7ff fb84 	bl	8003380 <HAL_GetTick>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	0219      	lsls	r1, r3, #8
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2319      	movs	r3, #25
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f000 f9dd 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003c8e:	1e03      	subs	r3, r0, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0e7      	b.n	8003e66 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2241      	movs	r2, #65	; 0x41
 8003c9a:	2122      	movs	r1, #34	; 0x22
 8003c9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2242      	movs	r2, #66	; 0x42
 8003ca2:	2140      	movs	r1, #64	; 0x40
 8003ca4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	222c      	movs	r2, #44	; 0x2c
 8003cb6:	18ba      	adds	r2, r7, r2
 8003cb8:	8812      	ldrh	r2, [r2, #0]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cc2:	1dbb      	adds	r3, r7, #6
 8003cc4:	881c      	ldrh	r4, [r3, #0]
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	881a      	ldrh	r2, [r3, #0]
 8003ccc:	230a      	movs	r3, #10
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	8819      	ldrh	r1, [r3, #0]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	0023      	movs	r3, r4
 8003cde:	f000 f92f 	bl	8003f40 <I2C_RequestMemoryRead>
 8003ce2:	1e03      	subs	r3, r0, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2240      	movs	r2, #64	; 0x40
 8003cea:	2100      	movs	r1, #0
 8003cec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e0b9      	b.n	8003e66 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2bff      	cmp	r3, #255	; 0xff
 8003cfa:	d911      	bls.n	8003d20 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	22ff      	movs	r2, #255	; 0xff
 8003d00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	045c      	lsls	r4, r3, #17
 8003d0c:	230a      	movs	r3, #10
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	8819      	ldrh	r1, [r3, #0]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	4b56      	ldr	r3, [pc, #344]	; (8003e70 <HAL_I2C_Mem_Read+0x260>)
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	0023      	movs	r3, r4
 8003d1a:	f000 fab5 	bl	8004288 <I2C_TransferConfig>
 8003d1e:	e012      	b.n	8003d46 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	049c      	lsls	r4, r3, #18
 8003d34:	230a      	movs	r3, #10
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	8819      	ldrh	r1, [r3, #0]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	4b4c      	ldr	r3, [pc, #304]	; (8003e70 <HAL_I2C_Mem_Read+0x260>)
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	0023      	movs	r3, r4
 8003d42:	f000 faa1 	bl	8004288 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	0013      	movs	r3, r2
 8003d50:	2200      	movs	r2, #0
 8003d52:	2104      	movs	r1, #4
 8003d54:	f000 f978 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003d58:	1e03      	subs	r3, r0, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e082      	b.n	8003e66 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d03a      	beq.n	8003e12 <HAL_I2C_Mem_Read+0x202>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d136      	bne.n	8003e12 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	0013      	movs	r3, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	f000 f949 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003db6:	1e03      	subs	r3, r0, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e053      	b.n	8003e66 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d911      	bls.n	8003dec <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	22ff      	movs	r2, #255	; 0xff
 8003dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	045c      	lsls	r4, r3, #17
 8003dd8:	230a      	movs	r3, #10
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	8819      	ldrh	r1, [r3, #0]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	2300      	movs	r3, #0
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	0023      	movs	r3, r4
 8003de6:	f000 fa4f 	bl	8004288 <I2C_TransferConfig>
 8003dea:	e012      	b.n	8003e12 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	049c      	lsls	r4, r3, #18
 8003e00:	230a      	movs	r3, #10
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	8819      	ldrh	r1, [r3, #0]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	0023      	movs	r3, r4
 8003e0e:	f000 fa3b 	bl	8004288 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d194      	bne.n	8003d46 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	0018      	movs	r0, r3
 8003e24:	f000 f98e 	bl	8004144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e28:	1e03      	subs	r3, r0, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e01a      	b.n	8003e66 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2220      	movs	r2, #32
 8003e36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	490c      	ldr	r1, [pc, #48]	; (8003e74 <HAL_I2C_Mem_Read+0x264>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2241      	movs	r2, #65	; 0x41
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2242      	movs	r2, #66	; 0x42
 8003e54:	2100      	movs	r1, #0
 8003e56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	0018      	movs	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b007      	add	sp, #28
 8003e6c:	bd90      	pop	{r4, r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	80002400 	.word	0x80002400
 8003e74:	fe00e800 	.word	0xfe00e800

08003e78 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b5b0      	push	{r4, r5, r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	000c      	movs	r4, r1
 8003e82:	0010      	movs	r0, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	250a      	movs	r5, #10
 8003e88:	197b      	adds	r3, r7, r5
 8003e8a:	1c22      	adds	r2, r4, #0
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	2308      	movs	r3, #8
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	1c02      	adds	r2, r0, #0
 8003e94:	801a      	strh	r2, [r3, #0]
 8003e96:	1dbb      	adds	r3, r7, #6
 8003e98:	1c0a      	adds	r2, r1, #0
 8003e9a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e9c:	1dbb      	adds	r3, r7, #6
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	045c      	lsls	r4, r3, #17
 8003ea6:	197b      	adds	r3, r7, r5
 8003ea8:	8819      	ldrh	r1, [r3, #0]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <I2C_RequestMemoryWrite+0xc4>)
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	0023      	movs	r3, r4
 8003eb2:	f000 f9e9 	bl	8004288 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	6a39      	ldr	r1, [r7, #32]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 f902 	bl	80040c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d001      	beq.n	8003eca <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e033      	b.n	8003f32 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eca:	1dbb      	adds	r3, r7, #6
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee0:	e019      	b.n	8003f16 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef6:	6a39      	ldr	r1, [r7, #32]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f000 f8e3 	bl	80040c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f00:	1e03      	subs	r3, r0, #0
 8003f02:	d001      	beq.n	8003f08 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e014      	b.n	8003f32 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f08:	2308      	movs	r3, #8
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a3a      	ldr	r2, [r7, #32]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	0013      	movs	r3, r2
 8003f20:	2200      	movs	r2, #0
 8003f22:	2180      	movs	r1, #128	; 0x80
 8003f24:	f000 f890 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003f28:	1e03      	subs	r3, r0, #0
 8003f2a:	d001      	beq.n	8003f30 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b004      	add	sp, #16
 8003f38:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	80002000 	.word	0x80002000

08003f40 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b5b0      	push	{r4, r5, r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	000c      	movs	r4, r1
 8003f4a:	0010      	movs	r0, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	250a      	movs	r5, #10
 8003f50:	197b      	adds	r3, r7, r5
 8003f52:	1c22      	adds	r2, r4, #0
 8003f54:	801a      	strh	r2, [r3, #0]
 8003f56:	2308      	movs	r3, #8
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	1c02      	adds	r2, r0, #0
 8003f5c:	801a      	strh	r2, [r3, #0]
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	1c0a      	adds	r2, r1, #0
 8003f62:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f64:	1dbb      	adds	r3, r7, #6
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	197b      	adds	r3, r7, r5
 8003f6c:	8819      	ldrh	r1, [r3, #0]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	4b23      	ldr	r3, [pc, #140]	; (8004000 <I2C_RequestMemoryRead+0xc0>)
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2300      	movs	r3, #0
 8003f76:	f000 f987 	bl	8004288 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	6a39      	ldr	r1, [r7, #32]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 f8a0 	bl	80040c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f86:	1e03      	subs	r3, r0, #0
 8003f88:	d001      	beq.n	8003f8e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e033      	b.n	8003ff6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f8e:	1dbb      	adds	r3, r7, #6
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d107      	bne.n	8003fa6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f96:	2308      	movs	r3, #8
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa4:	e019      	b.n	8003fda <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	6a39      	ldr	r1, [r7, #32]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 f881 	bl	80040c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fc4:	1e03      	subs	r3, r0, #0
 8003fc6:	d001      	beq.n	8003fcc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e014      	b.n	8003ff6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fcc:	2308      	movs	r3, #8
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	0013      	movs	r3, r2
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2140      	movs	r1, #64	; 0x40
 8003fe8:	f000 f82e 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d001      	beq.n	8003ff4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b004      	add	sp, #16
 8003ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	80002000 	.word	0x80002000

08004004 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2202      	movs	r2, #2
 8004014:	4013      	ands	r3, r2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d103      	bne.n	8004022 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2201      	movs	r2, #1
 800402a:	4013      	ands	r3, r2
 800402c:	2b01      	cmp	r3, #1
 800402e:	d007      	beq.n	8004040 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2101      	movs	r1, #1
 800403c:	430a      	orrs	r2, r1
 800403e:	619a      	str	r2, [r3, #24]
  }
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b002      	add	sp, #8
 8004046:	bd80      	pop	{r7, pc}

08004048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	1dfb      	adds	r3, r7, #7
 8004056:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004058:	e021      	b.n	800409e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	d01e      	beq.n	800409e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004060:	f7ff f98e 	bl	8003380 <HAL_GetTick>
 8004064:	0002      	movs	r2, r0
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d302      	bcc.n	8004076 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d113      	bne.n	800409e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	2220      	movs	r2, #32
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2241      	movs	r2, #65	; 0x41
 8004086:	2120      	movs	r1, #32
 8004088:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2242      	movs	r2, #66	; 0x42
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2240      	movs	r2, #64	; 0x40
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e00f      	b.n	80040be <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	425a      	negs	r2, r3
 80040ae:	4153      	adcs	r3, r2
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	001a      	movs	r2, r3
 80040b4:	1dfb      	adds	r3, r7, #7
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d0ce      	beq.n	800405a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b004      	add	sp, #16
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040d2:	e02b      	b.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 f86e 	bl	80041bc <I2C_IsAcknowledgeFailed>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d001      	beq.n	80040e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e029      	b.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	3301      	adds	r3, #1
 80040ec:	d01e      	beq.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7ff f947 	bl	8003380 <HAL_GetTick>
 80040f2:	0002      	movs	r2, r0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d113      	bne.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	2220      	movs	r2, #32
 800410a:	431a      	orrs	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2241      	movs	r2, #65	; 0x41
 8004114:	2120      	movs	r1, #32
 8004116:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2242      	movs	r2, #66	; 0x42
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2240      	movs	r2, #64	; 0x40
 8004124:	2100      	movs	r1, #0
 8004126:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e007      	b.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2202      	movs	r2, #2
 8004134:	4013      	ands	r3, r2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d1cc      	bne.n	80040d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b004      	add	sp, #16
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004150:	e028      	b.n	80041a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	0018      	movs	r0, r3
 800415a:	f000 f82f 	bl	80041bc <I2C_IsAcknowledgeFailed>
 800415e:	1e03      	subs	r3, r0, #0
 8004160:	d001      	beq.n	8004166 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e026      	b.n	80041b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004166:	f7ff f90b 	bl	8003380 <HAL_GetTick>
 800416a:	0002      	movs	r2, r0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d302      	bcc.n	800417c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d113      	bne.n	80041a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004180:	2220      	movs	r2, #32
 8004182:	431a      	orrs	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2241      	movs	r2, #65	; 0x41
 800418c:	2120      	movs	r1, #32
 800418e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2242      	movs	r2, #66	; 0x42
 8004194:	2100      	movs	r1, #0
 8004196:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2240      	movs	r2, #64	; 0x40
 800419c:	2100      	movs	r1, #0
 800419e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e007      	b.n	80041b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2220      	movs	r2, #32
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d1cf      	bne.n	8004152 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b004      	add	sp, #16
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2210      	movs	r2, #16
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d151      	bne.n	800427a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041d6:	e021      	b.n	800421c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	3301      	adds	r3, #1
 80041dc:	d01e      	beq.n	800421c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041de:	f7ff f8cf 	bl	8003380 <HAL_GetTick>
 80041e2:	0002      	movs	r2, r0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d302      	bcc.n	80041f4 <I2C_IsAcknowledgeFailed+0x38>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d113      	bne.n	800421c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	2220      	movs	r2, #32
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2241      	movs	r2, #65	; 0x41
 8004204:	2120      	movs	r1, #32
 8004206:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2242      	movs	r2, #66	; 0x42
 800420c:	2100      	movs	r1, #0
 800420e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	2100      	movs	r1, #0
 8004216:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e02f      	b.n	800427c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2220      	movs	r2, #32
 8004224:	4013      	ands	r3, r2
 8004226:	2b20      	cmp	r3, #32
 8004228:	d1d6      	bne.n	80041d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2210      	movs	r2, #16
 8004230:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2220      	movs	r2, #32
 8004238:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff fee1 	bl	8004004 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	490d      	ldr	r1, [pc, #52]	; (8004284 <I2C_IsAcknowledgeFailed+0xc8>)
 800424e:	400a      	ands	r2, r1
 8004250:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	2204      	movs	r2, #4
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2241      	movs	r2, #65	; 0x41
 8004262:	2120      	movs	r1, #32
 8004264:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2242      	movs	r2, #66	; 0x42
 800426a:	2100      	movs	r1, #0
 800426c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2240      	movs	r2, #64	; 0x40
 8004272:	2100      	movs	r1, #0
 8004274:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	b004      	add	sp, #16
 8004282:	bd80      	pop	{r7, pc}
 8004284:	fe00e800 	.word	0xfe00e800

08004288 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	0008      	movs	r0, r1
 8004292:	0011      	movs	r1, r2
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	240a      	movs	r4, #10
 8004298:	193b      	adds	r3, r7, r4
 800429a:	1c02      	adds	r2, r0, #0
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	2009      	movs	r0, #9
 80042a0:	183b      	adds	r3, r7, r0
 80042a2:	1c0a      	adds	r2, r1, #0
 80042a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	6a3a      	ldr	r2, [r7, #32]
 80042ae:	0d51      	lsrs	r1, r2, #21
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	00d2      	lsls	r2, r2, #3
 80042b4:	400a      	ands	r2, r1
 80042b6:	490e      	ldr	r1, [pc, #56]	; (80042f0 <I2C_TransferConfig+0x68>)
 80042b8:	430a      	orrs	r2, r1
 80042ba:	43d2      	mvns	r2, r2
 80042bc:	401a      	ands	r2, r3
 80042be:	0011      	movs	r1, r2
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	059b      	lsls	r3, r3, #22
 80042c6:	0d9a      	lsrs	r2, r3, #22
 80042c8:	183b      	adds	r3, r7, r0
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	0418      	lsls	r0, r3, #16
 80042ce:	23ff      	movs	r3, #255	; 0xff
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	4003      	ands	r3, r0
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	431a      	orrs	r2, r3
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b005      	add	sp, #20
 80042ec:	bd90      	pop	{r4, r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	03ff63ff 	.word	0x03ff63ff

080042f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2241      	movs	r2, #65	; 0x41
 8004302:	5c9b      	ldrb	r3, [r3, r2]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b20      	cmp	r3, #32
 8004308:	d138      	bne.n	800437c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2240      	movs	r2, #64	; 0x40
 800430e:	5c9b      	ldrb	r3, [r3, r2]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004314:	2302      	movs	r3, #2
 8004316:	e032      	b.n	800437e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2240      	movs	r2, #64	; 0x40
 800431c:	2101      	movs	r1, #1
 800431e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2241      	movs	r2, #65	; 0x41
 8004324:	2124      	movs	r1, #36	; 0x24
 8004326:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2101      	movs	r1, #1
 8004334:	438a      	bics	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4911      	ldr	r1, [pc, #68]	; (8004388 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004344:	400a      	ands	r2, r1
 8004346:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6819      	ldr	r1, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2101      	movs	r1, #1
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2241      	movs	r2, #65	; 0x41
 800436c:	2120      	movs	r1, #32
 800436e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2240      	movs	r2, #64	; 0x40
 8004374:	2100      	movs	r1, #0
 8004376:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b002      	add	sp, #8
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	ffffefff 	.word	0xffffefff

0800438c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2241      	movs	r2, #65	; 0x41
 800439a:	5c9b      	ldrb	r3, [r3, r2]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d139      	bne.n	8004416 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2240      	movs	r2, #64	; 0x40
 80043a6:	5c9b      	ldrb	r3, [r3, r2]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e033      	b.n	8004418 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2240      	movs	r2, #64	; 0x40
 80043b4:	2101      	movs	r1, #1
 80043b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2241      	movs	r2, #65	; 0x41
 80043bc:	2124      	movs	r1, #36	; 0x24
 80043be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2101      	movs	r1, #1
 80043cc:	438a      	bics	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a11      	ldr	r2, [pc, #68]	; (8004420 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80043dc:	4013      	ands	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2101      	movs	r1, #1
 80043fe:	430a      	orrs	r2, r1
 8004400:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2241      	movs	r2, #65	; 0x41
 8004406:	2120      	movs	r1, #32
 8004408:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	2100      	movs	r1, #0
 8004410:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b004      	add	sp, #16
 800441e:	bd80      	pop	{r7, pc}
 8004420:	fffff0ff 	.word	0xfffff0ff

08004424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e301      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	4013      	ands	r3, r2
 800443e:	d100      	bne.n	8004442 <HAL_RCC_OscConfig+0x1e>
 8004440:	e08d      	b.n	800455e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004442:	4bc3      	ldr	r3, [pc, #780]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	220c      	movs	r2, #12
 8004448:	4013      	ands	r3, r2
 800444a:	2b04      	cmp	r3, #4
 800444c:	d00e      	beq.n	800446c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800444e:	4bc0      	ldr	r3, [pc, #768]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	220c      	movs	r2, #12
 8004454:	4013      	ands	r3, r2
 8004456:	2b08      	cmp	r3, #8
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x64>
 800445a:	4bbd      	ldr	r3, [pc, #756]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	025b      	lsls	r3, r3, #9
 8004462:	401a      	ands	r2, r3
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	025b      	lsls	r3, r3, #9
 8004468:	429a      	cmp	r2, r3
 800446a:	d10d      	bne.n	8004488 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	4bb8      	ldr	r3, [pc, #736]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	029b      	lsls	r3, r3, #10
 8004474:	4013      	ands	r3, r2
 8004476:	d100      	bne.n	800447a <HAL_RCC_OscConfig+0x56>
 8004478:	e070      	b.n	800455c <HAL_RCC_OscConfig+0x138>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d000      	beq.n	8004484 <HAL_RCC_OscConfig+0x60>
 8004482:	e06b      	b.n	800455c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e2d8      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_OscConfig+0x7c>
 8004490:	4baf      	ldr	r3, [pc, #700]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4bae      	ldr	r3, [pc, #696]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004496:	2180      	movs	r1, #128	; 0x80
 8004498:	0249      	lsls	r1, r1, #9
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e02f      	b.n	8004500 <HAL_RCC_OscConfig+0xdc>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCC_OscConfig+0x9e>
 80044a8:	4ba9      	ldr	r3, [pc, #676]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4ba8      	ldr	r3, [pc, #672]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044ae:	49a9      	ldr	r1, [pc, #676]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80044b0:	400a      	ands	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	4ba6      	ldr	r3, [pc, #664]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4ba5      	ldr	r3, [pc, #660]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044ba:	49a7      	ldr	r1, [pc, #668]	; (8004758 <HAL_RCC_OscConfig+0x334>)
 80044bc:	400a      	ands	r2, r1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e01e      	b.n	8004500 <HAL_RCC_OscConfig+0xdc>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	d10e      	bne.n	80044e8 <HAL_RCC_OscConfig+0xc4>
 80044ca:	4ba1      	ldr	r3, [pc, #644]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4ba0      	ldr	r3, [pc, #640]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044d0:	2180      	movs	r1, #128	; 0x80
 80044d2:	02c9      	lsls	r1, r1, #11
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	4b9d      	ldr	r3, [pc, #628]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b9c      	ldr	r3, [pc, #624]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	0249      	lsls	r1, r1, #9
 80044e2:	430a      	orrs	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e00b      	b.n	8004500 <HAL_RCC_OscConfig+0xdc>
 80044e8:	4b99      	ldr	r3, [pc, #612]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b98      	ldr	r3, [pc, #608]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044ee:	4999      	ldr	r1, [pc, #612]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80044f0:	400a      	ands	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	4b96      	ldr	r3, [pc, #600]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b95      	ldr	r3, [pc, #596]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80044fa:	4997      	ldr	r1, [pc, #604]	; (8004758 <HAL_RCC_OscConfig+0x334>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d014      	beq.n	8004532 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fe ff3a 	bl	8003380 <HAL_GetTick>
 800450c:	0003      	movs	r3, r0
 800450e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004512:	f7fe ff35 	bl	8003380 <HAL_GetTick>
 8004516:	0002      	movs	r2, r0
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b64      	cmp	r3, #100	; 0x64
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e28a      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004524:	4b8a      	ldr	r3, [pc, #552]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	029b      	lsls	r3, r3, #10
 800452c:	4013      	ands	r3, r2
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0xee>
 8004530:	e015      	b.n	800455e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004532:	f7fe ff25 	bl	8003380 <HAL_GetTick>
 8004536:	0003      	movs	r3, r0
 8004538:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800453c:	f7fe ff20 	bl	8003380 <HAL_GetTick>
 8004540:	0002      	movs	r2, r0
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e275      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454e:	4b80      	ldr	r3, [pc, #512]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	029b      	lsls	r3, r3, #10
 8004556:	4013      	ands	r3, r2
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x118>
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2202      	movs	r2, #2
 8004564:	4013      	ands	r3, r2
 8004566:	d100      	bne.n	800456a <HAL_RCC_OscConfig+0x146>
 8004568:	e069      	b.n	800463e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800456a:	4b79      	ldr	r3, [pc, #484]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	220c      	movs	r2, #12
 8004570:	4013      	ands	r3, r2
 8004572:	d00b      	beq.n	800458c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004574:	4b76      	ldr	r3, [pc, #472]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	220c      	movs	r2, #12
 800457a:	4013      	ands	r3, r2
 800457c:	2b08      	cmp	r3, #8
 800457e:	d11c      	bne.n	80045ba <HAL_RCC_OscConfig+0x196>
 8004580:	4b73      	ldr	r3, [pc, #460]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	025b      	lsls	r3, r3, #9
 8004588:	4013      	ands	r3, r2
 800458a:	d116      	bne.n	80045ba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458c:	4b70      	ldr	r3, [pc, #448]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2202      	movs	r2, #2
 8004592:	4013      	ands	r3, r2
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x17e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e24b      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	4b6b      	ldr	r3, [pc, #428]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	22f8      	movs	r2, #248	; 0xf8
 80045a8:	4393      	bics	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	00da      	lsls	r2, r3, #3
 80045b2:	4b67      	ldr	r3, [pc, #412]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b8:	e041      	b.n	800463e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d024      	beq.n	800460c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c2:	4b63      	ldr	r3, [pc, #396]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b62      	ldr	r3, [pc, #392]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80045c8:	2101      	movs	r1, #1
 80045ca:	430a      	orrs	r2, r1
 80045cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fe fed7 	bl	8003380 <HAL_GetTick>
 80045d2:	0003      	movs	r3, r0
 80045d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d8:	f7fe fed2 	bl	8003380 <HAL_GetTick>
 80045dc:	0002      	movs	r2, r0
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e227      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	4b59      	ldr	r3, [pc, #356]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2202      	movs	r2, #2
 80045f0:	4013      	ands	r3, r2
 80045f2:	d0f1      	beq.n	80045d8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f4:	4b56      	ldr	r3, [pc, #344]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	22f8      	movs	r2, #248	; 0xf8
 80045fa:	4393      	bics	r3, r2
 80045fc:	0019      	movs	r1, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	00da      	lsls	r2, r3, #3
 8004604:	4b52      	ldr	r3, [pc, #328]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e018      	b.n	800463e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460c:	4b50      	ldr	r3, [pc, #320]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004612:	2101      	movs	r1, #1
 8004614:	438a      	bics	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fe feb2 	bl	8003380 <HAL_GetTick>
 800461c:	0003      	movs	r3, r0
 800461e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004622:	f7fe fead 	bl	8003380 <HAL_GetTick>
 8004626:	0002      	movs	r2, r0
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e202      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004634:	4b46      	ldr	r3, [pc, #280]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d1f1      	bne.n	8004622 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2208      	movs	r2, #8
 8004644:	4013      	ands	r3, r2
 8004646:	d036      	beq.n	80046b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d019      	beq.n	8004684 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004650:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004654:	4b3e      	ldr	r3, [pc, #248]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004656:	2101      	movs	r1, #1
 8004658:	430a      	orrs	r2, r1
 800465a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465c:	f7fe fe90 	bl	8003380 <HAL_GetTick>
 8004660:	0003      	movs	r3, r0
 8004662:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004666:	f7fe fe8b 	bl	8003380 <HAL_GetTick>
 800466a:	0002      	movs	r2, r0
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e1e0      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	2202      	movs	r2, #2
 800467e:	4013      	ands	r3, r2
 8004680:	d0f1      	beq.n	8004666 <HAL_RCC_OscConfig+0x242>
 8004682:	e018      	b.n	80046b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004684:	4b32      	ldr	r3, [pc, #200]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004688:	4b31      	ldr	r3, [pc, #196]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 800468a:	2101      	movs	r1, #1
 800468c:	438a      	bics	r2, r1
 800468e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004690:	f7fe fe76 	bl	8003380 <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469a:	f7fe fe71 	bl	8003380 <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e1c6      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ac:	4b28      	ldr	r3, [pc, #160]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2202      	movs	r2, #2
 80046b2:	4013      	ands	r3, r2
 80046b4:	d1f1      	bne.n	800469a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2204      	movs	r2, #4
 80046bc:	4013      	ands	r3, r2
 80046be:	d100      	bne.n	80046c2 <HAL_RCC_OscConfig+0x29e>
 80046c0:	e0b4      	b.n	800482c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	201f      	movs	r0, #31
 80046c4:	183b      	adds	r3, r7, r0
 80046c6:	2200      	movs	r2, #0
 80046c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ca:	4b21      	ldr	r3, [pc, #132]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	055b      	lsls	r3, r3, #21
 80046d2:	4013      	ands	r3, r2
 80046d4:	d110      	bne.n	80046f8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	0549      	lsls	r1, r1, #21
 80046e0:	430a      	orrs	r2, r1
 80046e2:	61da      	str	r2, [r3, #28]
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	055b      	lsls	r3, r3, #21
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046f2:	183b      	adds	r3, r7, r0
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_RCC_OscConfig+0x338>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4013      	ands	r3, r2
 8004702:	d11a      	bne.n	800473a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x338>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <HAL_RCC_OscConfig+0x338>)
 800470a:	2180      	movs	r1, #128	; 0x80
 800470c:	0049      	lsls	r1, r1, #1
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004712:	f7fe fe35 	bl	8003380 <HAL_GetTick>
 8004716:	0003      	movs	r3, r0
 8004718:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471c:	f7fe fe30 	bl	8003380 <HAL_GetTick>
 8004720:	0002      	movs	r2, r0
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e185      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_OscConfig+0x338>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4013      	ands	r3, r2
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10e      	bne.n	8004760 <HAL_RCC_OscConfig+0x33c>
 8004742:	4b03      	ldr	r3, [pc, #12]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	4b02      	ldr	r3, [pc, #8]	; (8004750 <HAL_RCC_OscConfig+0x32c>)
 8004748:	2101      	movs	r1, #1
 800474a:	430a      	orrs	r2, r1
 800474c:	621a      	str	r2, [r3, #32]
 800474e:	e035      	b.n	80047bc <HAL_RCC_OscConfig+0x398>
 8004750:	40021000 	.word	0x40021000
 8004754:	fffeffff 	.word	0xfffeffff
 8004758:	fffbffff 	.word	0xfffbffff
 800475c:	40007000 	.word	0x40007000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10c      	bne.n	8004782 <HAL_RCC_OscConfig+0x35e>
 8004768:	4bb6      	ldr	r3, [pc, #728]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	4bb5      	ldr	r3, [pc, #724]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800476e:	2101      	movs	r1, #1
 8004770:	438a      	bics	r2, r1
 8004772:	621a      	str	r2, [r3, #32]
 8004774:	4bb3      	ldr	r3, [pc, #716]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	4bb2      	ldr	r3, [pc, #712]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800477a:	2104      	movs	r1, #4
 800477c:	438a      	bics	r2, r1
 800477e:	621a      	str	r2, [r3, #32]
 8004780:	e01c      	b.n	80047bc <HAL_RCC_OscConfig+0x398>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b05      	cmp	r3, #5
 8004788:	d10c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x380>
 800478a:	4bae      	ldr	r3, [pc, #696]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800478c:	6a1a      	ldr	r2, [r3, #32]
 800478e:	4bad      	ldr	r3, [pc, #692]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004790:	2104      	movs	r1, #4
 8004792:	430a      	orrs	r2, r1
 8004794:	621a      	str	r2, [r3, #32]
 8004796:	4bab      	ldr	r3, [pc, #684]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004798:	6a1a      	ldr	r2, [r3, #32]
 800479a:	4baa      	ldr	r3, [pc, #680]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800479c:	2101      	movs	r1, #1
 800479e:	430a      	orrs	r2, r1
 80047a0:	621a      	str	r2, [r3, #32]
 80047a2:	e00b      	b.n	80047bc <HAL_RCC_OscConfig+0x398>
 80047a4:	4ba7      	ldr	r3, [pc, #668]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	4ba6      	ldr	r3, [pc, #664]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80047aa:	2101      	movs	r1, #1
 80047ac:	438a      	bics	r2, r1
 80047ae:	621a      	str	r2, [r3, #32]
 80047b0:	4ba4      	ldr	r3, [pc, #656]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80047b2:	6a1a      	ldr	r2, [r3, #32]
 80047b4:	4ba3      	ldr	r3, [pc, #652]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80047b6:	2104      	movs	r1, #4
 80047b8:	438a      	bics	r2, r1
 80047ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d014      	beq.n	80047ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7fe fddc 	bl	8003380 <HAL_GetTick>
 80047c8:	0003      	movs	r3, r0
 80047ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047cc:	e009      	b.n	80047e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ce:	f7fe fdd7 	bl	8003380 <HAL_GetTick>
 80047d2:	0002      	movs	r2, r0
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	4a9b      	ldr	r2, [pc, #620]	; (8004a48 <HAL_RCC_OscConfig+0x624>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e12b      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e2:	4b98      	ldr	r3, [pc, #608]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	2202      	movs	r2, #2
 80047e8:	4013      	ands	r3, r2
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x3aa>
 80047ec:	e013      	b.n	8004816 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ee:	f7fe fdc7 	bl	8003380 <HAL_GetTick>
 80047f2:	0003      	movs	r3, r0
 80047f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f6:	e009      	b.n	800480c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f8:	f7fe fdc2 	bl	8003380 <HAL_GetTick>
 80047fc:	0002      	movs	r2, r0
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	4a91      	ldr	r2, [pc, #580]	; (8004a48 <HAL_RCC_OscConfig+0x624>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e116      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480c:	4b8d      	ldr	r3, [pc, #564]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	2202      	movs	r2, #2
 8004812:	4013      	ands	r3, r2
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004816:	231f      	movs	r3, #31
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d105      	bne.n	800482c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004820:	4b88      	ldr	r3, [pc, #544]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	4b87      	ldr	r3, [pc, #540]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004826:	4989      	ldr	r1, [pc, #548]	; (8004a4c <HAL_RCC_OscConfig+0x628>)
 8004828:	400a      	ands	r2, r1
 800482a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2210      	movs	r2, #16
 8004832:	4013      	ands	r3, r2
 8004834:	d063      	beq.n	80048fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d12a      	bne.n	8004894 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800483e:	4b81      	ldr	r3, [pc, #516]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004842:	4b80      	ldr	r3, [pc, #512]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004844:	2104      	movs	r1, #4
 8004846:	430a      	orrs	r2, r1
 8004848:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800484a:	4b7e      	ldr	r3, [pc, #504]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800484c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800484e:	4b7d      	ldr	r3, [pc, #500]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004850:	2101      	movs	r1, #1
 8004852:	430a      	orrs	r2, r1
 8004854:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004856:	f7fe fd93 	bl	8003380 <HAL_GetTick>
 800485a:	0003      	movs	r3, r0
 800485c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004860:	f7fe fd8e 	bl	8003380 <HAL_GetTick>
 8004864:	0002      	movs	r2, r0
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0e3      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004872:	4b74      	ldr	r3, [pc, #464]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	2202      	movs	r2, #2
 8004878:	4013      	ands	r3, r2
 800487a:	d0f1      	beq.n	8004860 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800487c:	4b71      	ldr	r3, [pc, #452]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	22f8      	movs	r2, #248	; 0xf8
 8004882:	4393      	bics	r3, r2
 8004884:	0019      	movs	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	00da      	lsls	r2, r3, #3
 800488c:	4b6d      	ldr	r3, [pc, #436]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800488e:	430a      	orrs	r2, r1
 8004890:	635a      	str	r2, [r3, #52]	; 0x34
 8004892:	e034      	b.n	80048fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	3305      	adds	r3, #5
 800489a:	d111      	bne.n	80048c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800489c:	4b69      	ldr	r3, [pc, #420]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800489e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a0:	4b68      	ldr	r3, [pc, #416]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80048a2:	2104      	movs	r1, #4
 80048a4:	438a      	bics	r2, r1
 80048a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80048a8:	4b66      	ldr	r3, [pc, #408]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	22f8      	movs	r2, #248	; 0xf8
 80048ae:	4393      	bics	r3, r2
 80048b0:	0019      	movs	r1, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	00da      	lsls	r2, r3, #3
 80048b8:	4b62      	ldr	r3, [pc, #392]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80048ba:	430a      	orrs	r2, r1
 80048bc:	635a      	str	r2, [r3, #52]	; 0x34
 80048be:	e01e      	b.n	80048fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80048c0:	4b60      	ldr	r3, [pc, #384]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80048c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c4:	4b5f      	ldr	r3, [pc, #380]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80048c6:	2104      	movs	r1, #4
 80048c8:	430a      	orrs	r2, r1
 80048ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80048cc:	4b5d      	ldr	r3, [pc, #372]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80048ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d0:	4b5c      	ldr	r3, [pc, #368]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80048d2:	2101      	movs	r1, #1
 80048d4:	438a      	bics	r2, r1
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d8:	f7fe fd52 	bl	8003380 <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048e2:	f7fe fd4d 	bl	8003380 <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0a2      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048f4:	4b53      	ldr	r3, [pc, #332]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	2202      	movs	r2, #2
 80048fa:	4013      	ands	r3, r2
 80048fc:	d1f1      	bne.n	80048e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d100      	bne.n	8004908 <HAL_RCC_OscConfig+0x4e4>
 8004906:	e097      	b.n	8004a38 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004908:	4b4e      	ldr	r3, [pc, #312]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	220c      	movs	r2, #12
 800490e:	4013      	ands	r3, r2
 8004910:	2b08      	cmp	r3, #8
 8004912:	d100      	bne.n	8004916 <HAL_RCC_OscConfig+0x4f2>
 8004914:	e06b      	b.n	80049ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d14c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491e:	4b49      	ldr	r3, [pc, #292]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b48      	ldr	r3, [pc, #288]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004924:	494a      	ldr	r1, [pc, #296]	; (8004a50 <HAL_RCC_OscConfig+0x62c>)
 8004926:	400a      	ands	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7fe fd29 	bl	8003380 <HAL_GetTick>
 800492e:	0003      	movs	r3, r0
 8004930:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004934:	f7fe fd24 	bl	8003380 <HAL_GetTick>
 8004938:	0002      	movs	r2, r0
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e079      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004946:	4b3f      	ldr	r3, [pc, #252]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	049b      	lsls	r3, r3, #18
 800494e:	4013      	ands	r3, r2
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004952:	4b3c      	ldr	r3, [pc, #240]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	220f      	movs	r2, #15
 8004958:	4393      	bics	r3, r2
 800495a:	0019      	movs	r1, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004960:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004962:	430a      	orrs	r2, r1
 8004964:	62da      	str	r2, [r3, #44]	; 0x2c
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4a3a      	ldr	r2, [pc, #232]	; (8004a54 <HAL_RCC_OscConfig+0x630>)
 800496c:	4013      	ands	r3, r2
 800496e:	0019      	movs	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	431a      	orrs	r2, r3
 800497a:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 800497c:	430a      	orrs	r2, r1
 800497e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004980:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004986:	2180      	movs	r1, #128	; 0x80
 8004988:	0449      	lsls	r1, r1, #17
 800498a:	430a      	orrs	r2, r1
 800498c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fe fcf7 	bl	8003380 <HAL_GetTick>
 8004992:	0003      	movs	r3, r0
 8004994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004998:	f7fe fcf2 	bl	8003380 <HAL_GetTick>
 800499c:	0002      	movs	r2, r0
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e047      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049aa:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	049b      	lsls	r3, r3, #18
 80049b2:	4013      	ands	r3, r2
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x574>
 80049b6:	e03f      	b.n	8004a38 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b8:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80049be:	4924      	ldr	r1, [pc, #144]	; (8004a50 <HAL_RCC_OscConfig+0x62c>)
 80049c0:	400a      	ands	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fe fcdc 	bl	8003380 <HAL_GetTick>
 80049c8:	0003      	movs	r3, r0
 80049ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fe fcd7 	bl	8003380 <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e02c      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e0:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	049b      	lsls	r3, r3, #18
 80049e8:	4013      	ands	r3, r2
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCC_OscConfig+0x5aa>
 80049ec:	e024      	b.n	8004a38 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e01f      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004a00:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <HAL_RCC_OscConfig+0x620>)
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	025b      	lsls	r3, r3, #9
 8004a0c:	401a      	ands	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d10e      	bne.n	8004a34 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	220f      	movs	r2, #15
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	23f0      	movs	r3, #240	; 0xf0
 8004a28:	039b      	lsls	r3, r3, #14
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b008      	add	sp, #32
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	40021000 	.word	0x40021000
 8004a48:	00001388 	.word	0x00001388
 8004a4c:	efffffff 	.word	0xefffffff
 8004a50:	feffffff 	.word	0xfeffffff
 8004a54:	ffc2ffff 	.word	0xffc2ffff

08004a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0b3      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b5b      	ldr	r3, [pc, #364]	; (8004bdc <HAL_RCC_ClockConfig+0x184>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	4013      	ands	r3, r2
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d911      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b58      	ldr	r3, [pc, #352]	; (8004bdc <HAL_RCC_ClockConfig+0x184>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	4393      	bics	r3, r2
 8004a82:	0019      	movs	r1, r3
 8004a84:	4b55      	ldr	r3, [pc, #340]	; (8004bdc <HAL_RCC_ClockConfig+0x184>)
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8c:	4b53      	ldr	r3, [pc, #332]	; (8004bdc <HAL_RCC_ClockConfig+0x184>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	4013      	ands	r3, r2
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e09a      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d015      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2204      	movs	r2, #4
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d006      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ab2:	4b4b      	ldr	r3, [pc, #300]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	4b4a      	ldr	r3, [pc, #296]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004ab8:	21e0      	movs	r1, #224	; 0xe0
 8004aba:	00c9      	lsls	r1, r1, #3
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	22f0      	movs	r2, #240	; 0xf0
 8004ac6:	4393      	bics	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	4b44      	ldr	r3, [pc, #272]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	4013      	ands	r3, r2
 8004adc:	d040      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	029b      	lsls	r3, r3, #10
 8004aee:	4013      	ands	r3, r2
 8004af0:	d114      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06e      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afe:	4b38      	ldr	r3, [pc, #224]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	049b      	lsls	r3, r3, #18
 8004b06:	4013      	ands	r3, r2
 8004b08:	d108      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e062      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0e:	4b34      	ldr	r3, [pc, #208]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2202      	movs	r2, #2
 8004b14:	4013      	ands	r3, r2
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e05b      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1c:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2203      	movs	r2, #3
 8004b22:	4393      	bics	r3, r2
 8004b24:	0019      	movs	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b30:	f7fe fc26 	bl	8003380 <HAL_GetTick>
 8004b34:	0003      	movs	r3, r0
 8004b36:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b38:	e009      	b.n	8004b4e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3a:	f7fe fc21 	bl	8003380 <HAL_GetTick>
 8004b3e:	0002      	movs	r2, r0
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	4a27      	ldr	r2, [pc, #156]	; (8004be4 <HAL_RCC_ClockConfig+0x18c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e042      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	220c      	movs	r2, #12
 8004b54:	401a      	ands	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d1ec      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b60:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <HAL_RCC_ClockConfig+0x184>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2201      	movs	r2, #1
 8004b66:	4013      	ands	r3, r2
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d211      	bcs.n	8004b92 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <HAL_RCC_ClockConfig+0x184>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	4393      	bics	r3, r2
 8004b76:	0019      	movs	r1, r3
 8004b78:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <HAL_RCC_ClockConfig+0x184>)
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b80:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <HAL_RCC_ClockConfig+0x184>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2201      	movs	r2, #1
 8004b86:	4013      	ands	r3, r2
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e020      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2204      	movs	r2, #4
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <HAL_RCC_ClockConfig+0x190>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bb0:	f000 f820 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb4:	0001      	movs	r1, r0
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_RCC_ClockConfig+0x188>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <HAL_RCC_ClockConfig+0x194>)
 8004bc2:	5cd3      	ldrb	r3, [r2, r3]
 8004bc4:	000a      	movs	r2, r1
 8004bc6:	40da      	lsrs	r2, r3
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x198>)
 8004bca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004bcc:	2000      	movs	r0, #0
 8004bce:	f7fe f9c7 	bl	8002f60 <HAL_InitTick>
  
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b004      	add	sp, #16
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40022000 	.word	0x40022000
 8004be0:	40021000 	.word	0x40021000
 8004be4:	00001388 	.word	0x00001388
 8004be8:	fffff8ff 	.word	0xfffff8ff
 8004bec:	0800ab74 	.word	0x0800ab74
 8004bf0:	20000018 	.word	0x20000018

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b08f      	sub	sp, #60	; 0x3c
 8004bf8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004bfa:	2314      	movs	r3, #20
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	4a2b      	ldr	r2, [pc, #172]	; (8004cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c02:	c313      	stmia	r3!, {r0, r1, r4}
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004c08:	1d3b      	adds	r3, r7, #4
 8004c0a:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c0e:	c313      	stmia	r3!, {r0, r1, r4}
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c20:	2300      	movs	r3, #0
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004c28:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	220c      	movs	r2, #12
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d002      	beq.n	8004c3e <HAL_RCC_GetSysClockFreq+0x4a>
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0x50>
 8004c3c:	e02d      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c3e:	4b1e      	ldr	r3, [pc, #120]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c42:	e02d      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	0c9b      	lsrs	r3, r3, #18
 8004c48:	220f      	movs	r2, #15
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2214      	movs	r2, #20
 8004c4e:	18ba      	adds	r2, r7, r2
 8004c50:	5cd3      	ldrb	r3, [r2, r3]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c54:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	220f      	movs	r2, #15
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	1d3a      	adds	r2, r7, #4
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	025b      	lsls	r3, r3, #9
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c6e:	4812      	ldr	r0, [pc, #72]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c70:	f7fb fa66 	bl	8000140 <__udivsi3>
 8004c74:	0003      	movs	r3, r0
 8004c76:	001a      	movs	r2, r3
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	4353      	muls	r3, r2
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7e:	e009      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c82:	000a      	movs	r2, r1
 8004c84:	0152      	lsls	r2, r2, #5
 8004c86:	1a52      	subs	r2, r2, r1
 8004c88:	0193      	lsls	r3, r2, #6
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	185b      	adds	r3, r3, r1
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c98:	e002      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c9e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b00f      	add	sp, #60	; 0x3c
 8004ca8:	bd90      	pop	{r4, r7, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	0800aa54 	.word	0x0800aa54
 8004cb0:	0800aa64 	.word	0x0800aa64
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	007a1200 	.word	0x007a1200

08004cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	20000018 	.word	0x20000018

08004cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004cd4:	f7ff fff2 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004cd8:	0001      	movs	r1, r0
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	0a1b      	lsrs	r3, r3, #8
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ce6:	5cd3      	ldrb	r3, [r2, r3]
 8004ce8:	40d9      	lsrs	r1, r3
 8004cea:	000b      	movs	r3, r1
}    
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	0800ab84 	.word	0x0800ab84

08004cfc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <HAL_RCC_GetClockConfig+0x4c>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2203      	movs	r2, #3
 8004d12:	401a      	ands	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_GetClockConfig+0x4c>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	22f0      	movs	r2, #240	; 0xf0
 8004d1e:	401a      	ands	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004d24:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <HAL_RCC_GetClockConfig+0x4c>)
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	23e0      	movs	r3, #224	; 0xe0
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	401a      	ands	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_RCC_GetClockConfig+0x50>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2201      	movs	r2, #1
 8004d38:	401a      	ands	r2, r3
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	601a      	str	r2, [r3, #0]
}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b002      	add	sp, #8
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40022000 	.word	0x40022000

08004d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	025b      	lsls	r3, r3, #9
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d100      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004d6c:	e08e      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004d6e:	2017      	movs	r0, #23
 8004d70:	183b      	adds	r3, r7, r0
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d76:	4b57      	ldr	r3, [pc, #348]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	055b      	lsls	r3, r3, #21
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d110      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d82:	4b54      	ldr	r3, [pc, #336]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d84:	69da      	ldr	r2, [r3, #28]
 8004d86:	4b53      	ldr	r3, [pc, #332]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	0549      	lsls	r1, r1, #21
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	61da      	str	r2, [r3, #28]
 8004d90:	4b50      	ldr	r3, [pc, #320]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	055b      	lsls	r3, r3, #21
 8004d98:	4013      	ands	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d9e:	183b      	adds	r3, r7, r0
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4013      	ands	r3, r2
 8004dae:	d11a      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db0:	4b49      	ldr	r3, [pc, #292]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b48      	ldr	r3, [pc, #288]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	0049      	lsls	r1, r1, #1
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dbe:	f7fe fadf 	bl	8003380 <HAL_GetTick>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc6:	e008      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc8:	f7fe fada 	bl	8003380 <HAL_GetTick>
 8004dcc:	0002      	movs	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	; 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e077      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4013      	ands	r3, r2
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004de6:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	23c0      	movs	r3, #192	; 0xc0
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4013      	ands	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d034      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	23c0      	movs	r3, #192	; 0xc0
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4013      	ands	r3, r2
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d02c      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e08:	4b32      	ldr	r3, [pc, #200]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	4a33      	ldr	r2, [pc, #204]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e12:	4b30      	ldr	r3, [pc, #192]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e14:	6a1a      	ldr	r2, [r3, #32]
 8004e16:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	0249      	lsls	r1, r1, #9
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e20:	4b2c      	ldr	r3, [pc, #176]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e22:	6a1a      	ldr	r2, [r3, #32]
 8004e24:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e26:	492e      	ldr	r1, [pc, #184]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e28:	400a      	ands	r2, r1
 8004e2a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e2c:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	4013      	ands	r3, r2
 8004e38:	d013      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fe faa1 	bl	8003380 <HAL_GetTick>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e42:	e009      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fe fa9c 	bl	8003380 <HAL_GetTick>
 8004e48:	0002      	movs	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e038      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e62:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e72:	430a      	orrs	r2, r1
 8004e74:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e76:	2317      	movs	r3, #23
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e80:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e86:	4918      	ldr	r1, [pc, #96]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004e88:	400a      	ands	r2, r1
 8004e8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2201      	movs	r2, #1
 8004e92:	4013      	ands	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e96:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	4393      	bics	r3, r2
 8004e9e:	0019      	movs	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb4:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	2210      	movs	r2, #16
 8004eba:	4393      	bics	r3, r2
 8004ebc:	0019      	movs	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	0018      	movs	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b006      	add	sp, #24
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	fffffcff 	.word	0xfffffcff
 8004ee0:	fffeffff 	.word	0xfffeffff
 8004ee4:	00001388 	.word	0x00001388
 8004ee8:	efffffff 	.word	0xefffffff

08004eec <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e081      	b.n	8005002 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	7f5b      	ldrb	r3, [r3, #29]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f7fd ffe9 	bl	8002ee8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	22ca      	movs	r2, #202	; 0xca
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2253      	movs	r2, #83	; 0x53
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f000 f9fb 	bl	800532a <RTC_EnterInitMode>
 8004f34:	1e03      	subs	r3, r0, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	22ff      	movs	r2, #255	; 0xff
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2204      	movs	r2, #4
 8004f44:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e05b      	b.n	8005002 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	492d      	ldr	r1, [pc, #180]	; (800500c <HAL_RTC_Init+0x120>)
 8004f56:	400a      	ands	r2, r1
 8004f58:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6899      	ldr	r1, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68d2      	ldr	r2, [r2, #12]
 8004f80:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6919      	ldr	r1, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	041a      	lsls	r2, r3, #16
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	438a      	bics	r2, r1
 8004fa4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2220      	movs	r2, #32
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 f98f 	bl	80052d8 <HAL_RTC_WaitForSynchro>
 8004fba:	1e03      	subs	r3, r0, #0
 8004fbc:	d008      	beq.n	8004fd0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	22ff      	movs	r2, #255	; 0xff
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e018      	b.n	8005002 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	490d      	ldr	r1, [pc, #52]	; (8005010 <HAL_RTC_Init+0x124>)
 8004fdc:	400a      	ands	r2, r1
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	22ff      	movs	r2, #255	; 0xff
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005000:	2300      	movs	r3, #0
  }
}
 8005002:	0018      	movs	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	ff8fffbf 	.word	0xff8fffbf
 8005010:	fffbffff 	.word	0xfffbffff

08005014 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	7f1b      	ldrb	r3, [r3, #28]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_RTC_SetTime+0x1c>
 800502c:	2302      	movs	r3, #2
 800502e:	e0a5      	b.n	800517c <HAL_RTC_SetTime+0x168>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2202      	movs	r2, #2
 800503a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d125      	bne.n	800508e <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2240      	movs	r2, #64	; 0x40
 800504a:	4013      	ands	r3, r2
 800504c:	d102      	bne.n	8005054 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2200      	movs	r2, #0
 8005052:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 f992 	bl	8005382 <RTC_ByteToBcd2>
 800505e:	0003      	movs	r3, r0
 8005060:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	0018      	movs	r0, r3
 8005068:	f000 f98b 	bl	8005382 <RTC_ByteToBcd2>
 800506c:	0003      	movs	r3, r0
 800506e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005070:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	789b      	ldrb	r3, [r3, #2]
 8005076:	0018      	movs	r0, r3
 8005078:	f000 f983 	bl	8005382 <RTC_ByteToBcd2>
 800507c:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800507e:	0022      	movs	r2, r4
 8005080:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e017      	b.n	80050be <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2240      	movs	r2, #64	; 0x40
 8005096:	4013      	ands	r3, r2
 8005098:	d102      	bne.n	80050a0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80050ac:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80050b2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	78db      	ldrb	r3, [r3, #3]
 80050b8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	22ca      	movs	r2, #202	; 0xca
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2253      	movs	r2, #83	; 0x53
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	0018      	movs	r0, r3
 80050d2:	f000 f92a 	bl	800532a <RTC_EnterInitMode>
 80050d6:	1e03      	subs	r3, r0, #0
 80050d8:	d00b      	beq.n	80050f2 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	22ff      	movs	r2, #255	; 0xff
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2204      	movs	r2, #4
 80050e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e044      	b.n	800517c <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4922      	ldr	r1, [pc, #136]	; (8005184 <HAL_RTC_SetTime+0x170>)
 80050fa:	400a      	ands	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	491f      	ldr	r1, [pc, #124]	; (8005188 <HAL_RTC_SetTime+0x174>)
 800510a:	400a      	ands	r2, r1
 800510c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6899      	ldr	r1, [r3, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	431a      	orrs	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2180      	movs	r1, #128	; 0x80
 8005132:	438a      	bics	r2, r1
 8005134:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2220      	movs	r2, #32
 800513e:	4013      	ands	r3, r2
 8005140:	d111      	bne.n	8005166 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	0018      	movs	r0, r3
 8005146:	f000 f8c7 	bl	80052d8 <HAL_RTC_WaitForSynchro>
 800514a:	1e03      	subs	r3, r0, #0
 800514c:	d00b      	beq.n	8005166 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	22ff      	movs	r2, #255	; 0xff
 8005154:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2204      	movs	r2, #4
 800515a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e00a      	b.n	800517c <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	22ff      	movs	r2, #255	; 0xff
 800516c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800517a:	2300      	movs	r3, #0
  }
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b007      	add	sp, #28
 8005182:	bd90      	pop	{r4, r7, pc}
 8005184:	007f7f7f 	.word	0x007f7f7f
 8005188:	fffbffff 	.word	0xfffbffff

0800518c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	7f1b      	ldrb	r3, [r3, #28]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_RTC_SetDate+0x1c>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e091      	b.n	80052cc <HAL_RTC_SetDate+0x140>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2202      	movs	r2, #2
 80051b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10e      	bne.n	80051d8 <HAL_RTC_SetDate+0x4c>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	001a      	movs	r2, r3
 80051c0:	2310      	movs	r3, #16
 80051c2:	4013      	ands	r3, r2
 80051c4:	d008      	beq.n	80051d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	2210      	movs	r2, #16
 80051cc:	4393      	bics	r3, r2
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	330a      	adds	r3, #10
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d11c      	bne.n	8005218 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	78db      	ldrb	r3, [r3, #3]
 80051e2:	0018      	movs	r0, r3
 80051e4:	f000 f8cd 	bl	8005382 <RTC_ByteToBcd2>
 80051e8:	0003      	movs	r3, r0
 80051ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 f8c6 	bl	8005382 <RTC_ByteToBcd2>
 80051f6:	0003      	movs	r3, r0
 80051f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80051fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	789b      	ldrb	r3, [r3, #2]
 8005200:	0018      	movs	r0, r3
 8005202:	f000 f8be 	bl	8005382 <RTC_ByteToBcd2>
 8005206:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005208:	0022      	movs	r2, r4
 800520a:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e00e      	b.n	8005236 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005224:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800522a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	22ca      	movs	r2, #202	; 0xca
 800523c:	625a      	str	r2, [r3, #36]	; 0x24
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2253      	movs	r2, #83	; 0x53
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	0018      	movs	r0, r3
 800524a:	f000 f86e 	bl	800532a <RTC_EnterInitMode>
 800524e:	1e03      	subs	r3, r0, #0
 8005250:	d00b      	beq.n	800526a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	22ff      	movs	r2, #255	; 0xff
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2204      	movs	r2, #4
 800525e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e030      	b.n	80052cc <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4918      	ldr	r1, [pc, #96]	; (80052d4 <HAL_RTC_SetDate+0x148>)
 8005272:	400a      	ands	r2, r1
 8005274:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	438a      	bics	r2, r1
 8005284:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2220      	movs	r2, #32
 800528e:	4013      	ands	r3, r2
 8005290:	d111      	bne.n	80052b6 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 f81f 	bl	80052d8 <HAL_RTC_WaitForSynchro>
 800529a:	1e03      	subs	r3, r0, #0
 800529c:	d00b      	beq.n	80052b6 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	22ff      	movs	r2, #255	; 0xff
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2204      	movs	r2, #4
 80052aa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e00a      	b.n	80052cc <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	22ff      	movs	r2, #255	; 0xff
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80052ca:	2300      	movs	r3, #0
  }
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b007      	add	sp, #28
 80052d2:	bd90      	pop	{r4, r7, pc}
 80052d4:	00ffff3f 	.word	0x00ffff3f

080052d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	21a0      	movs	r1, #160	; 0xa0
 80052f0:	438a      	bics	r2, r1
 80052f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80052f4:	f7fe f844 	bl	8003380 <HAL_GetTick>
 80052f8:	0003      	movs	r3, r0
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80052fc:	e00a      	b.n	8005314 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052fe:	f7fe f83f 	bl	8003380 <HAL_GetTick>
 8005302:	0002      	movs	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad2      	subs	r2, r2, r3
 8005308:	23fa      	movs	r3, #250	; 0xfa
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	429a      	cmp	r2, r3
 800530e:	d901      	bls.n	8005314 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e006      	b.n	8005322 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	4013      	ands	r3, r2
 800531e:	d0ee      	beq.n	80052fe <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	0018      	movs	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	b004      	add	sp, #16
 8005328:	bd80      	pop	{r7, pc}

0800532a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2240      	movs	r2, #64	; 0x40
 800533e:	4013      	ands	r3, r2
 8005340:	d11a      	bne.n	8005378 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2201      	movs	r2, #1
 8005348:	4252      	negs	r2, r2
 800534a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800534c:	f7fe f818 	bl	8003380 <HAL_GetTick>
 8005350:	0003      	movs	r3, r0
 8005352:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005354:	e00a      	b.n	800536c <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005356:	f7fe f813 	bl	8003380 <HAL_GetTick>
 800535a:	0002      	movs	r2, r0
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	23fa      	movs	r3, #250	; 0xfa
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	429a      	cmp	r2, r3
 8005366:	d901      	bls.n	800536c <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e006      	b.n	800537a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2240      	movs	r2, #64	; 0x40
 8005374:	4013      	ands	r3, r2
 8005376:	d0ee      	beq.n	8005356 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	0018      	movs	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	b004      	add	sp, #16
 8005380:	bd80      	pop	{r7, pc}

08005382 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	0002      	movs	r2, r0
 800538a:	1dfb      	adds	r3, r7, #7
 800538c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005392:	e007      	b.n	80053a4 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3301      	adds	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800539a:	1dfb      	adds	r3, r7, #7
 800539c:	1dfa      	adds	r2, r7, #7
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	3a0a      	subs	r2, #10
 80053a2:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 80053a4:	1dfb      	adds	r3, r7, #7
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b09      	cmp	r3, #9
 80053aa:	d8f3      	bhi.n	8005394 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	1dfb      	adds	r3, r7, #7
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	b2db      	uxtb	r3, r3
}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b004      	add	sp, #16
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e042      	b.n	800545c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	223d      	movs	r2, #61	; 0x3d
 80053da:	5c9b      	ldrb	r3, [r3, r2]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	223c      	movs	r2, #60	; 0x3c
 80053e6:	2100      	movs	r1, #0
 80053e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	0018      	movs	r0, r3
 80053ee:	f000 f839 	bl	8005464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	223d      	movs	r2, #61	; 0x3d
 80053f6:	2102      	movs	r1, #2
 80053f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	0019      	movs	r1, r3
 8005404:	0010      	movs	r0, r2
 8005406:	f000 f9b7 	bl	8005778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2246      	movs	r2, #70	; 0x46
 800540e:	2101      	movs	r1, #1
 8005410:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	223e      	movs	r2, #62	; 0x3e
 8005416:	2101      	movs	r1, #1
 8005418:	5499      	strb	r1, [r3, r2]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	223f      	movs	r2, #63	; 0x3f
 800541e:	2101      	movs	r1, #1
 8005420:	5499      	strb	r1, [r3, r2]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2240      	movs	r2, #64	; 0x40
 8005426:	2101      	movs	r1, #1
 8005428:	5499      	strb	r1, [r3, r2]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2241      	movs	r2, #65	; 0x41
 800542e:	2101      	movs	r1, #1
 8005430:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2242      	movs	r2, #66	; 0x42
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2243      	movs	r2, #67	; 0x43
 800543e:	2101      	movs	r1, #1
 8005440:	5499      	strb	r1, [r3, r2]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2244      	movs	r2, #68	; 0x44
 8005446:	2101      	movs	r1, #1
 8005448:	5499      	strb	r1, [r3, r2]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2245      	movs	r2, #69	; 0x45
 800544e:	2101      	movs	r1, #1
 8005450:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	223d      	movs	r2, #61	; 0x3d
 8005456:	2101      	movs	r1, #1
 8005458:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b002      	add	sp, #8
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	b002      	add	sp, #8
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	223d      	movs	r2, #61	; 0x3d
 8005480:	5c9b      	ldrb	r3, [r3, r2]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d001      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e035      	b.n	80054f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	223d      	movs	r2, #61	; 0x3d
 8005490:	2102      	movs	r1, #2
 8005492:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2101      	movs	r1, #1
 80054a0:	430a      	orrs	r2, r1
 80054a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a15      	ldr	r2, [pc, #84]	; (8005500 <HAL_TIM_Base_Start_IT+0x8c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d009      	beq.n	80054c2 <HAL_TIM_Base_Start_IT+0x4e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a14      	ldr	r2, [pc, #80]	; (8005504 <HAL_TIM_Base_Start_IT+0x90>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d004      	beq.n	80054c2 <HAL_TIM_Base_Start_IT+0x4e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a12      	ldr	r2, [pc, #72]	; (8005508 <HAL_TIM_Base_Start_IT+0x94>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d111      	bne.n	80054e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2207      	movs	r2, #7
 80054ca:	4013      	ands	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b06      	cmp	r3, #6
 80054d2:	d010      	beq.n	80054f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2101      	movs	r1, #1
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e4:	e007      	b.n	80054f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2101      	movs	r1, #1
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	0018      	movs	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	b004      	add	sp, #16
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40000400 	.word	0x40000400
 8005508:	40014000 	.word	0x40014000

0800550c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2202      	movs	r2, #2
 800551c:	4013      	ands	r3, r2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d124      	bne.n	800556c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2202      	movs	r2, #2
 800552a:	4013      	ands	r3, r2
 800552c:	2b02      	cmp	r3, #2
 800552e:	d11d      	bne.n	800556c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2203      	movs	r2, #3
 8005536:	4252      	negs	r2, r2
 8005538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2203      	movs	r2, #3
 8005548:	4013      	ands	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 f8fa 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 8005554:	e007      	b.n	8005566 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	0018      	movs	r0, r3
 800555a:	f000 f8ed 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	0018      	movs	r0, r3
 8005562:	f000 f8f9 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	2204      	movs	r2, #4
 8005574:	4013      	ands	r3, r2
 8005576:	2b04      	cmp	r3, #4
 8005578:	d125      	bne.n	80055c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2204      	movs	r2, #4
 8005582:	4013      	ands	r3, r2
 8005584:	2b04      	cmp	r3, #4
 8005586:	d11e      	bne.n	80055c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2205      	movs	r2, #5
 800558e:	4252      	negs	r2, r2
 8005590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	23c0      	movs	r3, #192	; 0xc0
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4013      	ands	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f000 f8cd 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 80055ae:	e007      	b.n	80055c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	0018      	movs	r0, r3
 80055b4:	f000 f8c0 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	0018      	movs	r0, r3
 80055bc:	f000 f8cc 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2208      	movs	r2, #8
 80055ce:	4013      	ands	r3, r2
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d124      	bne.n	800561e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2208      	movs	r2, #8
 80055dc:	4013      	ands	r3, r2
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d11d      	bne.n	800561e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2209      	movs	r2, #9
 80055e8:	4252      	negs	r2, r2
 80055ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2204      	movs	r2, #4
 80055f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	2203      	movs	r2, #3
 80055fa:	4013      	ands	r3, r2
 80055fc:	d004      	beq.n	8005608 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	0018      	movs	r0, r3
 8005602:	f000 f8a1 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 8005606:	e007      	b.n	8005618 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	0018      	movs	r0, r3
 800560c:	f000 f894 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	0018      	movs	r0, r3
 8005614:	f000 f8a0 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2210      	movs	r2, #16
 8005626:	4013      	ands	r3, r2
 8005628:	2b10      	cmp	r3, #16
 800562a:	d125      	bne.n	8005678 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2210      	movs	r2, #16
 8005634:	4013      	ands	r3, r2
 8005636:	2b10      	cmp	r3, #16
 8005638:	d11e      	bne.n	8005678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2211      	movs	r2, #17
 8005640:	4252      	negs	r2, r2
 8005642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2208      	movs	r2, #8
 8005648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	23c0      	movs	r3, #192	; 0xc0
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4013      	ands	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	0018      	movs	r0, r3
 800565c:	f000 f874 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 8005660:	e007      	b.n	8005672 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 f867 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0018      	movs	r0, r3
 800566e:	f000 f873 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2201      	movs	r2, #1
 8005680:	4013      	ands	r3, r2
 8005682:	2b01      	cmp	r3, #1
 8005684:	d10f      	bne.n	80056a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	4013      	ands	r3, r2
 8005690:	2b01      	cmp	r3, #1
 8005692:	d108      	bne.n	80056a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2202      	movs	r2, #2
 800569a:	4252      	negs	r2, r2
 800569c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f7fd fa6d 	bl	8002b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2280      	movs	r2, #128	; 0x80
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b80      	cmp	r3, #128	; 0x80
 80056b2:	d10f      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	4013      	ands	r3, r2
 80056be:	2b80      	cmp	r3, #128	; 0x80
 80056c0:	d108      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2281      	movs	r2, #129	; 0x81
 80056c8:	4252      	negs	r2, r2
 80056ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 f8d0 	bl	8005874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2240      	movs	r2, #64	; 0x40
 80056dc:	4013      	ands	r3, r2
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d10f      	bne.n	8005702 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2240      	movs	r2, #64	; 0x40
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d108      	bne.n	8005702 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2241      	movs	r2, #65	; 0x41
 80056f6:	4252      	negs	r2, r2
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 f833 	bl	8005768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2220      	movs	r2, #32
 800570a:	4013      	ands	r3, r2
 800570c:	2b20      	cmp	r3, #32
 800570e:	d10f      	bne.n	8005730 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	4013      	ands	r3, r2
 800571a:	2b20      	cmp	r3, #32
 800571c:	d108      	bne.n	8005730 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2221      	movs	r2, #33	; 0x21
 8005724:	4252      	negs	r2, r2
 8005726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0018      	movs	r0, r3
 800572c:	f000 f89a 	bl	8005864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b002      	add	sp, #8
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005740:	46c0      	nop			; (mov r8, r8)
 8005742:	46bd      	mov	sp, r7
 8005744:	b002      	add	sp, #8
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	b002      	add	sp, #8
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005770:	46c0      	nop			; (mov r8, r8)
 8005772:	46bd      	mov	sp, r7
 8005774:	b002      	add	sp, #8
 8005776:	bd80      	pop	{r7, pc}

08005778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a2f      	ldr	r2, [pc, #188]	; (8005848 <TIM_Base_SetConfig+0xd0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_Base_SetConfig+0x20>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a2e      	ldr	r2, [pc, #184]	; (800584c <TIM_Base_SetConfig+0xd4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d108      	bne.n	80057aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2270      	movs	r2, #112	; 0x70
 800579c:	4393      	bics	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a26      	ldr	r2, [pc, #152]	; (8005848 <TIM_Base_SetConfig+0xd0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <TIM_Base_SetConfig+0x62>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a25      	ldr	r2, [pc, #148]	; (800584c <TIM_Base_SetConfig+0xd4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00f      	beq.n	80057da <TIM_Base_SetConfig+0x62>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a24      	ldr	r2, [pc, #144]	; (8005850 <TIM_Base_SetConfig+0xd8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00b      	beq.n	80057da <TIM_Base_SetConfig+0x62>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a23      	ldr	r2, [pc, #140]	; (8005854 <TIM_Base_SetConfig+0xdc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d007      	beq.n	80057da <TIM_Base_SetConfig+0x62>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a22      	ldr	r2, [pc, #136]	; (8005858 <TIM_Base_SetConfig+0xe0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d003      	beq.n	80057da <TIM_Base_SetConfig+0x62>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a21      	ldr	r2, [pc, #132]	; (800585c <TIM_Base_SetConfig+0xe4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d108      	bne.n	80057ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a20      	ldr	r2, [pc, #128]	; (8005860 <TIM_Base_SetConfig+0xe8>)
 80057de:	4013      	ands	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2280      	movs	r2, #128	; 0x80
 80057f0:	4393      	bics	r3, r2
 80057f2:	001a      	movs	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a0c      	ldr	r2, [pc, #48]	; (8005848 <TIM_Base_SetConfig+0xd0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_Base_SetConfig+0xba>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a0d      	ldr	r2, [pc, #52]	; (8005854 <TIM_Base_SetConfig+0xdc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_Base_SetConfig+0xba>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <TIM_Base_SetConfig+0xe0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_Base_SetConfig+0xba>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a0b      	ldr	r2, [pc, #44]	; (800585c <TIM_Base_SetConfig+0xe4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d103      	bne.n	800583a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	615a      	str	r2, [r3, #20]
}
 8005840:	46c0      	nop			; (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b004      	add	sp, #16
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40000400 	.word	0x40000400
 8005850:	40002000 	.word	0x40002000
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800
 8005860:	fffffcff 	.word	0xfffffcff

08005864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b002      	add	sp, #8
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e044      	b.n	8005920 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2274      	movs	r2, #116	; 0x74
 80058a2:	2100      	movs	r1, #0
 80058a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7fd fccb 	bl	8003244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2224      	movs	r2, #36	; 0x24
 80058b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2101      	movs	r1, #1
 80058c0:	438a      	bics	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 f8da 	bl	8005a80 <UART_SetConfig>
 80058cc:	0003      	movs	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e024      	b.n	8005920 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f000 fa0d 	bl	8005d00 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	490d      	ldr	r1, [pc, #52]	; (8005928 <HAL_UART_Init+0xa4>)
 80058f2:	400a      	ands	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2108      	movs	r1, #8
 8005902:	438a      	bics	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2101      	movs	r1, #1
 8005912:	430a      	orrs	r2, r1
 8005914:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	0018      	movs	r0, r3
 800591a:	f000 faa5 	bl	8005e68 <UART_CheckIdleState>
 800591e:	0003      	movs	r3, r0
}
 8005920:	0018      	movs	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	b002      	add	sp, #8
 8005926:	bd80      	pop	{r7, pc}
 8005928:	fffff7ff 	.word	0xfffff7ff

0800592c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	af02      	add	r7, sp, #8
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	1dbb      	adds	r3, r7, #6
 800593a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005940:	2b20      	cmp	r3, #32
 8005942:	d000      	beq.n	8005946 <HAL_UART_Transmit+0x1a>
 8005944:	e096      	b.n	8005a74 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_UART_Transmit+0x28>
 800594c:	1dbb      	adds	r3, r7, #6
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e08e      	b.n	8005a76 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	015b      	lsls	r3, r3, #5
 8005960:	429a      	cmp	r2, r3
 8005962:	d109      	bne.n	8005978 <HAL_UART_Transmit+0x4c>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2201      	movs	r2, #1
 8005970:	4013      	ands	r3, r2
 8005972:	d001      	beq.n	8005978 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e07e      	b.n	8005a76 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2274      	movs	r2, #116	; 0x74
 800597c:	5c9b      	ldrb	r3, [r3, r2]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Transmit+0x5a>
 8005982:	2302      	movs	r3, #2
 8005984:	e077      	b.n	8005a76 <HAL_UART_Transmit+0x14a>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2274      	movs	r2, #116	; 0x74
 800598a:	2101      	movs	r1, #1
 800598c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2280      	movs	r2, #128	; 0x80
 8005992:	2100      	movs	r1, #0
 8005994:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2221      	movs	r2, #33	; 0x21
 800599a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800599c:	f7fd fcf0 	bl	8003380 <HAL_GetTick>
 80059a0:	0003      	movs	r3, r0
 80059a2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1dba      	adds	r2, r7, #6
 80059a8:	2150      	movs	r1, #80	; 0x50
 80059aa:	8812      	ldrh	r2, [r2, #0]
 80059ac:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1dba      	adds	r2, r7, #6
 80059b2:	2152      	movs	r1, #82	; 0x52
 80059b4:	8812      	ldrh	r2, [r2, #0]
 80059b6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	015b      	lsls	r3, r3, #5
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d108      	bne.n	80059d6 <HAL_UART_Transmit+0xaa>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	e003      	b.n	80059de <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2274      	movs	r2, #116	; 0x74
 80059e2:	2100      	movs	r1, #0
 80059e4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80059e6:	e02d      	b.n	8005a44 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	0013      	movs	r3, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	f000 fa7f 	bl	8005ef8 <UART_WaitOnFlagUntilTimeout>
 80059fa:	1e03      	subs	r3, r0, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e039      	b.n	8005a76 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	05d2      	lsls	r2, r2, #23
 8005a12:	0dd2      	lsrs	r2, r2, #23
 8005a14:	b292      	uxth	r2, r2
 8005a16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	e008      	b.n	8005a32 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	b292      	uxth	r2, r2
 8005a2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2252      	movs	r2, #82	; 0x52
 8005a36:	5a9b      	ldrh	r3, [r3, r2]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b299      	uxth	r1, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2252      	movs	r2, #82	; 0x52
 8005a42:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2252      	movs	r2, #82	; 0x52
 8005a48:	5a9b      	ldrh	r3, [r3, r2]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1cb      	bne.n	80059e8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	0013      	movs	r3, r2
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2140      	movs	r1, #64	; 0x40
 8005a5e:	f000 fa4b 	bl	8005ef8 <UART_WaitOnFlagUntilTimeout>
 8005a62:	1e03      	subs	r3, r0, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e005      	b.n	8005a76 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e000      	b.n	8005a76 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
  }
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b008      	add	sp, #32
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a88:	231e      	movs	r3, #30
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a8d      	ldr	r2, [pc, #564]	; (8005ce4 <UART_SetConfig+0x264>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	0019      	movs	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4a88      	ldr	r2, [pc, #544]	; (8005ce8 <UART_SetConfig+0x268>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	0019      	movs	r1, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	4a7f      	ldr	r2, [pc, #508]	; (8005cec <UART_SetConfig+0x26c>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	0019      	movs	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a7b      	ldr	r2, [pc, #492]	; (8005cf0 <UART_SetConfig+0x270>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d127      	bne.n	8005b56 <UART_SetConfig+0xd6>
 8005b06:	4b7b      	ldr	r3, [pc, #492]	; (8005cf4 <UART_SetConfig+0x274>)
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d00d      	beq.n	8005b2e <UART_SetConfig+0xae>
 8005b12:	d81b      	bhi.n	8005b4c <UART_SetConfig+0xcc>
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d014      	beq.n	8005b42 <UART_SetConfig+0xc2>
 8005b18:	d818      	bhi.n	8005b4c <UART_SetConfig+0xcc>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <UART_SetConfig+0xa4>
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d00a      	beq.n	8005b38 <UART_SetConfig+0xb8>
 8005b22:	e013      	b.n	8005b4c <UART_SetConfig+0xcc>
 8005b24:	231f      	movs	r3, #31
 8005b26:	18fb      	adds	r3, r7, r3
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e021      	b.n	8005b72 <UART_SetConfig+0xf2>
 8005b2e:	231f      	movs	r3, #31
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	2202      	movs	r2, #2
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	e01c      	b.n	8005b72 <UART_SetConfig+0xf2>
 8005b38:	231f      	movs	r3, #31
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e017      	b.n	8005b72 <UART_SetConfig+0xf2>
 8005b42:	231f      	movs	r3, #31
 8005b44:	18fb      	adds	r3, r7, r3
 8005b46:	2208      	movs	r2, #8
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	e012      	b.n	8005b72 <UART_SetConfig+0xf2>
 8005b4c:	231f      	movs	r3, #31
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	2210      	movs	r2, #16
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	e00d      	b.n	8005b72 <UART_SetConfig+0xf2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a67      	ldr	r2, [pc, #412]	; (8005cf8 <UART_SetConfig+0x278>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d104      	bne.n	8005b6a <UART_SetConfig+0xea>
 8005b60:	231f      	movs	r3, #31
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	2200      	movs	r2, #0
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	e003      	b.n	8005b72 <UART_SetConfig+0xf2>
 8005b6a:	231f      	movs	r3, #31
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	2210      	movs	r2, #16
 8005b70:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	2380      	movs	r3, #128	; 0x80
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d15d      	bne.n	8005c3a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005b7e:	231f      	movs	r3, #31
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d015      	beq.n	8005bb4 <UART_SetConfig+0x134>
 8005b88:	dc18      	bgt.n	8005bbc <UART_SetConfig+0x13c>
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d00d      	beq.n	8005baa <UART_SetConfig+0x12a>
 8005b8e:	dc15      	bgt.n	8005bbc <UART_SetConfig+0x13c>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <UART_SetConfig+0x11a>
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d005      	beq.n	8005ba4 <UART_SetConfig+0x124>
 8005b98:	e010      	b.n	8005bbc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b9a:	f7ff f899 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	61bb      	str	r3, [r7, #24]
        break;
 8005ba2:	e012      	b.n	8005bca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba4:	4b55      	ldr	r3, [pc, #340]	; (8005cfc <UART_SetConfig+0x27c>)
 8005ba6:	61bb      	str	r3, [r7, #24]
        break;
 8005ba8:	e00f      	b.n	8005bca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005baa:	f7ff f823 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	61bb      	str	r3, [r7, #24]
        break;
 8005bb2:	e00a      	b.n	8005bca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	61bb      	str	r3, [r7, #24]
        break;
 8005bba:	e006      	b.n	8005bca <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bc0:	231e      	movs	r3, #30
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]
        break;
 8005bc8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d100      	bne.n	8005bd2 <UART_SetConfig+0x152>
 8005bd0:	e07b      	b.n	8005cca <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	005a      	lsls	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	18d2      	adds	r2, r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	0019      	movs	r1, r3
 8005be4:	0010      	movs	r0, r2
 8005be6:	f7fa faab 	bl	8000140 <__udivsi3>
 8005bea:	0003      	movs	r3, r0
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b0f      	cmp	r3, #15
 8005bf4:	d91c      	bls.n	8005c30 <UART_SetConfig+0x1b0>
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	2380      	movs	r3, #128	; 0x80
 8005bfa:	025b      	lsls	r3, r3, #9
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d217      	bcs.n	8005c30 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	200e      	movs	r0, #14
 8005c06:	183b      	adds	r3, r7, r0
 8005c08:	210f      	movs	r1, #15
 8005c0a:	438a      	bics	r2, r1
 8005c0c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2207      	movs	r2, #7
 8005c16:	4013      	ands	r3, r2
 8005c18:	b299      	uxth	r1, r3
 8005c1a:	183b      	adds	r3, r7, r0
 8005c1c:	183a      	adds	r2, r7, r0
 8005c1e:	8812      	ldrh	r2, [r2, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	183a      	adds	r2, r7, r0
 8005c2a:	8812      	ldrh	r2, [r2, #0]
 8005c2c:	60da      	str	r2, [r3, #12]
 8005c2e:	e04c      	b.n	8005cca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005c30:	231e      	movs	r3, #30
 8005c32:	18fb      	adds	r3, r7, r3
 8005c34:	2201      	movs	r2, #1
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	e047      	b.n	8005cca <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c3a:	231f      	movs	r3, #31
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d015      	beq.n	8005c70 <UART_SetConfig+0x1f0>
 8005c44:	dc18      	bgt.n	8005c78 <UART_SetConfig+0x1f8>
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d00d      	beq.n	8005c66 <UART_SetConfig+0x1e6>
 8005c4a:	dc15      	bgt.n	8005c78 <UART_SetConfig+0x1f8>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <UART_SetConfig+0x1d6>
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d005      	beq.n	8005c60 <UART_SetConfig+0x1e0>
 8005c54:	e010      	b.n	8005c78 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c56:	f7ff f83b 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	61bb      	str	r3, [r7, #24]
        break;
 8005c5e:	e012      	b.n	8005c86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c60:	4b26      	ldr	r3, [pc, #152]	; (8005cfc <UART_SetConfig+0x27c>)
 8005c62:	61bb      	str	r3, [r7, #24]
        break;
 8005c64:	e00f      	b.n	8005c86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c66:	f7fe ffc5 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	61bb      	str	r3, [r7, #24]
        break;
 8005c6e:	e00a      	b.n	8005c86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	021b      	lsls	r3, r3, #8
 8005c74:	61bb      	str	r3, [r7, #24]
        break;
 8005c76:	e006      	b.n	8005c86 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c7c:	231e      	movs	r3, #30
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	2201      	movs	r2, #1
 8005c82:	701a      	strb	r2, [r3, #0]
        break;
 8005c84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01e      	beq.n	8005cca <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	085a      	lsrs	r2, r3, #1
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	18d2      	adds	r2, r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	0010      	movs	r0, r2
 8005c9e:	f7fa fa4f 	bl	8000140 <__udivsi3>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b0f      	cmp	r3, #15
 8005cac:	d909      	bls.n	8005cc2 <UART_SetConfig+0x242>
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	2380      	movs	r3, #128	; 0x80
 8005cb2:	025b      	lsls	r3, r3, #9
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d204      	bcs.n	8005cc2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	60da      	str	r2, [r3, #12]
 8005cc0:	e003      	b.n	8005cca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc2:	231e      	movs	r3, #30
 8005cc4:	18fb      	adds	r3, r7, r3
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005cd6:	231e      	movs	r3, #30
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	781b      	ldrb	r3, [r3, #0]
}
 8005cdc:	0018      	movs	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	b008      	add	sp, #32
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	ffff69f3 	.word	0xffff69f3
 8005ce8:	ffffcfff 	.word	0xffffcfff
 8005cec:	fffff4ff 	.word	0xfffff4ff
 8005cf0:	40013800 	.word	0x40013800
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40004400 	.word	0x40004400
 8005cfc:	007a1200 	.word	0x007a1200

08005d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d00b      	beq.n	8005d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a4a      	ldr	r2, [pc, #296]	; (8005e44 <UART_AdvFeatureConfig+0x144>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	0019      	movs	r1, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2202      	movs	r2, #2
 8005d30:	4013      	ands	r3, r2
 8005d32:	d00b      	beq.n	8005d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	4a43      	ldr	r2, [pc, #268]	; (8005e48 <UART_AdvFeatureConfig+0x148>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	0019      	movs	r1, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2204      	movs	r2, #4
 8005d52:	4013      	ands	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4a3b      	ldr	r2, [pc, #236]	; (8005e4c <UART_AdvFeatureConfig+0x14c>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	0019      	movs	r1, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2208      	movs	r2, #8
 8005d74:	4013      	ands	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	4a34      	ldr	r2, [pc, #208]	; (8005e50 <UART_AdvFeatureConfig+0x150>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	0019      	movs	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2210      	movs	r2, #16
 8005d96:	4013      	ands	r3, r2
 8005d98:	d00b      	beq.n	8005db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4a2c      	ldr	r2, [pc, #176]	; (8005e54 <UART_AdvFeatureConfig+0x154>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	0019      	movs	r1, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	2220      	movs	r2, #32
 8005db8:	4013      	ands	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	4a25      	ldr	r2, [pc, #148]	; (8005e58 <UART_AdvFeatureConfig+0x158>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	0019      	movs	r1, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2240      	movs	r2, #64	; 0x40
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d01d      	beq.n	8005e1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	4a1d      	ldr	r2, [pc, #116]	; (8005e5c <UART_AdvFeatureConfig+0x15c>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	0019      	movs	r1, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dfa:	2380      	movs	r3, #128	; 0x80
 8005dfc:	035b      	lsls	r3, r3, #13
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d10b      	bne.n	8005e1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <UART_AdvFeatureConfig+0x160>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2280      	movs	r2, #128	; 0x80
 8005e20:	4013      	ands	r3, r2
 8005e22:	d00b      	beq.n	8005e3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4a0e      	ldr	r2, [pc, #56]	; (8005e64 <UART_AdvFeatureConfig+0x164>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	0019      	movs	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b002      	add	sp, #8
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	fffdffff 	.word	0xfffdffff
 8005e48:	fffeffff 	.word	0xfffeffff
 8005e4c:	fffbffff 	.word	0xfffbffff
 8005e50:	ffff7fff 	.word	0xffff7fff
 8005e54:	ffffefff 	.word	0xffffefff
 8005e58:	ffffdfff 	.word	0xffffdfff
 8005e5c:	ffefffff 	.word	0xffefffff
 8005e60:	ff9fffff 	.word	0xff9fffff
 8005e64:	fff7ffff 	.word	0xfff7ffff

08005e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	2100      	movs	r1, #0
 8005e76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e78:	f7fd fa82 	bl	8003380 <HAL_GetTick>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2208      	movs	r2, #8
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d10c      	bne.n	8005ea8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2280      	movs	r2, #128	; 0x80
 8005e92:	0391      	lsls	r1, r2, #14
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <UART_CheckIdleState+0x8c>)
 8005e98:	9200      	str	r2, [sp, #0]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f000 f82c 	bl	8005ef8 <UART_WaitOnFlagUntilTimeout>
 8005ea0:	1e03      	subs	r3, r0, #0
 8005ea2:	d001      	beq.n	8005ea8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e021      	b.n	8005eec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d10c      	bne.n	8005ed0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2280      	movs	r2, #128	; 0x80
 8005eba:	03d1      	lsls	r1, r2, #15
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	4a0d      	ldr	r2, [pc, #52]	; (8005ef4 <UART_CheckIdleState+0x8c>)
 8005ec0:	9200      	str	r2, [sp, #0]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f000 f818 	bl	8005ef8 <UART_WaitOnFlagUntilTimeout>
 8005ec8:	1e03      	subs	r3, r0, #0
 8005eca:	d001      	beq.n	8005ed0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e00d      	b.n	8005eec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2274      	movs	r2, #116	; 0x74
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	0018      	movs	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b004      	add	sp, #16
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	01ffffff 	.word	0x01ffffff

08005ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	1dfb      	adds	r3, r7, #7
 8005f06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f08:	e05e      	b.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	d05b      	beq.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f10:	f7fd fa36 	bl	8003380 <HAL_GetTick>
 8005f14:	0002      	movs	r2, r0
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d302      	bcc.n	8005f26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d11b      	bne.n	8005f5e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	492f      	ldr	r1, [pc, #188]	; (8005ff0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005f32:	400a      	ands	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2101      	movs	r1, #1
 8005f42:	438a      	bics	r2, r1
 8005f44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2274      	movs	r2, #116	; 0x74
 8005f56:	2100      	movs	r1, #0
 8005f58:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e044      	b.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2204      	movs	r2, #4
 8005f66:	4013      	ands	r3, r2
 8005f68:	d02e      	beq.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	401a      	ands	r2, r3
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d124      	bne.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	0112      	lsls	r2, r2, #4
 8005f86:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4917      	ldr	r1, [pc, #92]	; (8005ff0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005f94:	400a      	ands	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	438a      	bics	r2, r1
 8005fa6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2280      	movs	r2, #128	; 0x80
 8005fb8:	2120      	movs	r1, #32
 8005fba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2274      	movs	r2, #116	; 0x74
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e00f      	b.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	425a      	negs	r2, r3
 8005fd8:	4153      	adcs	r3, r2
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	001a      	movs	r2, r3
 8005fde:	1dfb      	adds	r3, r7, #7
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d091      	beq.n	8005f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	0018      	movs	r0, r3
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b004      	add	sp, #16
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	fffffe5f 	.word	0xfffffe5f

08005ff4 <__errno>:
 8005ff4:	4b01      	ldr	r3, [pc, #4]	; (8005ffc <__errno+0x8>)
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	4770      	bx	lr
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	20000020 	.word	0x20000020

08006000 <__libc_init_array>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	2600      	movs	r6, #0
 8006004:	4d0c      	ldr	r5, [pc, #48]	; (8006038 <__libc_init_array+0x38>)
 8006006:	4c0d      	ldr	r4, [pc, #52]	; (800603c <__libc_init_array+0x3c>)
 8006008:	1b64      	subs	r4, r4, r5
 800600a:	10a4      	asrs	r4, r4, #2
 800600c:	42a6      	cmp	r6, r4
 800600e:	d109      	bne.n	8006024 <__libc_init_array+0x24>
 8006010:	2600      	movs	r6, #0
 8006012:	f004 fd03 	bl	800aa1c <_init>
 8006016:	4d0a      	ldr	r5, [pc, #40]	; (8006040 <__libc_init_array+0x40>)
 8006018:	4c0a      	ldr	r4, [pc, #40]	; (8006044 <__libc_init_array+0x44>)
 800601a:	1b64      	subs	r4, r4, r5
 800601c:	10a4      	asrs	r4, r4, #2
 800601e:	42a6      	cmp	r6, r4
 8006020:	d105      	bne.n	800602e <__libc_init_array+0x2e>
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	00b3      	lsls	r3, r6, #2
 8006026:	58eb      	ldr	r3, [r5, r3]
 8006028:	4798      	blx	r3
 800602a:	3601      	adds	r6, #1
 800602c:	e7ee      	b.n	800600c <__libc_init_array+0xc>
 800602e:	00b3      	lsls	r3, r6, #2
 8006030:	58eb      	ldr	r3, [r5, r3]
 8006032:	4798      	blx	r3
 8006034:	3601      	adds	r6, #1
 8006036:	e7f2      	b.n	800601e <__libc_init_array+0x1e>
 8006038:	0800b044 	.word	0x0800b044
 800603c:	0800b044 	.word	0x0800b044
 8006040:	0800b044 	.word	0x0800b044
 8006044:	0800b048 	.word	0x0800b048

08006048 <memset>:
 8006048:	0003      	movs	r3, r0
 800604a:	1882      	adds	r2, r0, r2
 800604c:	4293      	cmp	r3, r2
 800604e:	d100      	bne.n	8006052 <memset+0xa>
 8006050:	4770      	bx	lr
 8006052:	7019      	strb	r1, [r3, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	e7f9      	b.n	800604c <memset+0x4>

08006058 <__cvt>:
 8006058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800605a:	001e      	movs	r6, r3
 800605c:	2300      	movs	r3, #0
 800605e:	0014      	movs	r4, r2
 8006060:	b08b      	sub	sp, #44	; 0x2c
 8006062:	429e      	cmp	r6, r3
 8006064:	da04      	bge.n	8006070 <__cvt+0x18>
 8006066:	2180      	movs	r1, #128	; 0x80
 8006068:	0609      	lsls	r1, r1, #24
 800606a:	1873      	adds	r3, r6, r1
 800606c:	001e      	movs	r6, r3
 800606e:	232d      	movs	r3, #45	; 0x2d
 8006070:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006072:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006074:	7013      	strb	r3, [r2, #0]
 8006076:	2320      	movs	r3, #32
 8006078:	2203      	movs	r2, #3
 800607a:	439f      	bics	r7, r3
 800607c:	2f46      	cmp	r7, #70	; 0x46
 800607e:	d007      	beq.n	8006090 <__cvt+0x38>
 8006080:	003b      	movs	r3, r7
 8006082:	3b45      	subs	r3, #69	; 0x45
 8006084:	4259      	negs	r1, r3
 8006086:	414b      	adcs	r3, r1
 8006088:	9910      	ldr	r1, [sp, #64]	; 0x40
 800608a:	3a01      	subs	r2, #1
 800608c:	18cb      	adds	r3, r1, r3
 800608e:	9310      	str	r3, [sp, #64]	; 0x40
 8006090:	ab09      	add	r3, sp, #36	; 0x24
 8006092:	9304      	str	r3, [sp, #16]
 8006094:	ab08      	add	r3, sp, #32
 8006096:	9303      	str	r3, [sp, #12]
 8006098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800609a:	9200      	str	r2, [sp, #0]
 800609c:	9302      	str	r3, [sp, #8]
 800609e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060a0:	0022      	movs	r2, r4
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	0033      	movs	r3, r6
 80060a6:	f001 fddf 	bl	8007c68 <_dtoa_r>
 80060aa:	0005      	movs	r5, r0
 80060ac:	2f47      	cmp	r7, #71	; 0x47
 80060ae:	d102      	bne.n	80060b6 <__cvt+0x5e>
 80060b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060b2:	07db      	lsls	r3, r3, #31
 80060b4:	d528      	bpl.n	8006108 <__cvt+0xb0>
 80060b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060b8:	18eb      	adds	r3, r5, r3
 80060ba:	9307      	str	r3, [sp, #28]
 80060bc:	2f46      	cmp	r7, #70	; 0x46
 80060be:	d114      	bne.n	80060ea <__cvt+0x92>
 80060c0:	782b      	ldrb	r3, [r5, #0]
 80060c2:	2b30      	cmp	r3, #48	; 0x30
 80060c4:	d10c      	bne.n	80060e0 <__cvt+0x88>
 80060c6:	2200      	movs	r2, #0
 80060c8:	2300      	movs	r3, #0
 80060ca:	0020      	movs	r0, r4
 80060cc:	0031      	movs	r1, r6
 80060ce:	f7fa f9bd 	bl	800044c <__aeabi_dcmpeq>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d104      	bne.n	80060e0 <__cvt+0x88>
 80060d6:	2301      	movs	r3, #1
 80060d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060e2:	9a07      	ldr	r2, [sp, #28]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	18d3      	adds	r3, r2, r3
 80060e8:	9307      	str	r3, [sp, #28]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2300      	movs	r3, #0
 80060ee:	0020      	movs	r0, r4
 80060f0:	0031      	movs	r1, r6
 80060f2:	f7fa f9ab 	bl	800044c <__aeabi_dcmpeq>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d001      	beq.n	80060fe <__cvt+0xa6>
 80060fa:	9b07      	ldr	r3, [sp, #28]
 80060fc:	9309      	str	r3, [sp, #36]	; 0x24
 80060fe:	2230      	movs	r2, #48	; 0x30
 8006100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006102:	9907      	ldr	r1, [sp, #28]
 8006104:	428b      	cmp	r3, r1
 8006106:	d306      	bcc.n	8006116 <__cvt+0xbe>
 8006108:	0028      	movs	r0, r5
 800610a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800610c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800610e:	1b5b      	subs	r3, r3, r5
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	b00b      	add	sp, #44	; 0x2c
 8006114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006116:	1c59      	adds	r1, r3, #1
 8006118:	9109      	str	r1, [sp, #36]	; 0x24
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e7f0      	b.n	8006100 <__cvt+0xa8>

0800611e <__exponent>:
 800611e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006120:	1c83      	adds	r3, r0, #2
 8006122:	b087      	sub	sp, #28
 8006124:	9303      	str	r3, [sp, #12]
 8006126:	0005      	movs	r5, r0
 8006128:	000c      	movs	r4, r1
 800612a:	232b      	movs	r3, #43	; 0x2b
 800612c:	7002      	strb	r2, [r0, #0]
 800612e:	2900      	cmp	r1, #0
 8006130:	da01      	bge.n	8006136 <__exponent+0x18>
 8006132:	424c      	negs	r4, r1
 8006134:	3302      	adds	r3, #2
 8006136:	706b      	strb	r3, [r5, #1]
 8006138:	2c09      	cmp	r4, #9
 800613a:	dd31      	ble.n	80061a0 <__exponent+0x82>
 800613c:	270a      	movs	r7, #10
 800613e:	ab04      	add	r3, sp, #16
 8006140:	1dde      	adds	r6, r3, #7
 8006142:	0020      	movs	r0, r4
 8006144:	0039      	movs	r1, r7
 8006146:	9601      	str	r6, [sp, #4]
 8006148:	f7fa f96a 	bl	8000420 <__aeabi_idivmod>
 800614c:	3e01      	subs	r6, #1
 800614e:	3130      	adds	r1, #48	; 0x30
 8006150:	0020      	movs	r0, r4
 8006152:	7031      	strb	r1, [r6, #0]
 8006154:	0039      	movs	r1, r7
 8006156:	9402      	str	r4, [sp, #8]
 8006158:	f7fa f87c 	bl	8000254 <__divsi3>
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	0004      	movs	r4, r0
 8006160:	2b63      	cmp	r3, #99	; 0x63
 8006162:	dcee      	bgt.n	8006142 <__exponent+0x24>
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	3430      	adds	r4, #48	; 0x30
 8006168:	1e9a      	subs	r2, r3, #2
 800616a:	0013      	movs	r3, r2
 800616c:	9903      	ldr	r1, [sp, #12]
 800616e:	7014      	strb	r4, [r2, #0]
 8006170:	a804      	add	r0, sp, #16
 8006172:	3007      	adds	r0, #7
 8006174:	4298      	cmp	r0, r3
 8006176:	d80e      	bhi.n	8006196 <__exponent+0x78>
 8006178:	ab04      	add	r3, sp, #16
 800617a:	3307      	adds	r3, #7
 800617c:	2000      	movs	r0, #0
 800617e:	429a      	cmp	r2, r3
 8006180:	d804      	bhi.n	800618c <__exponent+0x6e>
 8006182:	ab04      	add	r3, sp, #16
 8006184:	3009      	adds	r0, #9
 8006186:	18c0      	adds	r0, r0, r3
 8006188:	9b01      	ldr	r3, [sp, #4]
 800618a:	1ac0      	subs	r0, r0, r3
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	1818      	adds	r0, r3, r0
 8006190:	1b40      	subs	r0, r0, r5
 8006192:	b007      	add	sp, #28
 8006194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006196:	7818      	ldrb	r0, [r3, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	7008      	strb	r0, [r1, #0]
 800619c:	3101      	adds	r1, #1
 800619e:	e7e7      	b.n	8006170 <__exponent+0x52>
 80061a0:	2330      	movs	r3, #48	; 0x30
 80061a2:	18e4      	adds	r4, r4, r3
 80061a4:	70ab      	strb	r3, [r5, #2]
 80061a6:	1d28      	adds	r0, r5, #4
 80061a8:	70ec      	strb	r4, [r5, #3]
 80061aa:	e7f1      	b.n	8006190 <__exponent+0x72>

080061ac <_printf_float>:
 80061ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ae:	b095      	sub	sp, #84	; 0x54
 80061b0:	000c      	movs	r4, r1
 80061b2:	9208      	str	r2, [sp, #32]
 80061b4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80061b6:	9309      	str	r3, [sp, #36]	; 0x24
 80061b8:	0007      	movs	r7, r0
 80061ba:	f002 fee5 	bl	8008f88 <_localeconv_r>
 80061be:	6803      	ldr	r3, [r0, #0]
 80061c0:	0018      	movs	r0, r3
 80061c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80061c4:	f7f9 ffa0 	bl	8000108 <strlen>
 80061c8:	2300      	movs	r3, #0
 80061ca:	9312      	str	r3, [sp, #72]	; 0x48
 80061cc:	7e23      	ldrb	r3, [r4, #24]
 80061ce:	2207      	movs	r2, #7
 80061d0:	001e      	movs	r6, r3
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	900d      	str	r0, [sp, #52]	; 0x34
 80061d6:	930c      	str	r3, [sp, #48]	; 0x30
 80061d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	05c9      	lsls	r1, r1, #23
 80061de:	d547      	bpl.n	8006270 <_printf_float+0xc4>
 80061e0:	189b      	adds	r3, r3, r2
 80061e2:	4393      	bics	r3, r2
 80061e4:	001a      	movs	r2, r3
 80061e6:	3208      	adds	r2, #8
 80061e8:	602a      	str	r2, [r5, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	64a2      	str	r2, [r4, #72]	; 0x48
 80061f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80061f2:	2201      	movs	r2, #1
 80061f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80061f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80061f8:	930a      	str	r3, [sp, #40]	; 0x28
 80061fa:	006b      	lsls	r3, r5, #1
 80061fc:	085b      	lsrs	r3, r3, #1
 80061fe:	930e      	str	r3, [sp, #56]	; 0x38
 8006200:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006202:	4ba8      	ldr	r3, [pc, #672]	; (80064a4 <_printf_float+0x2f8>)
 8006204:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006206:	4252      	negs	r2, r2
 8006208:	f7fc f87e 	bl	8002308 <__aeabi_dcmpun>
 800620c:	2800      	cmp	r0, #0
 800620e:	d131      	bne.n	8006274 <_printf_float+0xc8>
 8006210:	2201      	movs	r2, #1
 8006212:	4ba4      	ldr	r3, [pc, #656]	; (80064a4 <_printf_float+0x2f8>)
 8006214:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006216:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006218:	4252      	negs	r2, r2
 800621a:	f7fa f927 	bl	800046c <__aeabi_dcmple>
 800621e:	2800      	cmp	r0, #0
 8006220:	d128      	bne.n	8006274 <_printf_float+0xc8>
 8006222:	2200      	movs	r2, #0
 8006224:	2300      	movs	r3, #0
 8006226:	0029      	movs	r1, r5
 8006228:	980a      	ldr	r0, [sp, #40]	; 0x28
 800622a:	f7fa f915 	bl	8000458 <__aeabi_dcmplt>
 800622e:	2800      	cmp	r0, #0
 8006230:	d003      	beq.n	800623a <_printf_float+0x8e>
 8006232:	0023      	movs	r3, r4
 8006234:	222d      	movs	r2, #45	; 0x2d
 8006236:	3343      	adds	r3, #67	; 0x43
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	4d9b      	ldr	r5, [pc, #620]	; (80064a8 <_printf_float+0x2fc>)
 800623c:	2e47      	cmp	r6, #71	; 0x47
 800623e:	d900      	bls.n	8006242 <_printf_float+0x96>
 8006240:	4d9a      	ldr	r5, [pc, #616]	; (80064ac <_printf_float+0x300>)
 8006242:	2303      	movs	r3, #3
 8006244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006246:	6123      	str	r3, [r4, #16]
 8006248:	3301      	adds	r3, #1
 800624a:	439a      	bics	r2, r3
 800624c:	2300      	movs	r3, #0
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	930a      	str	r3, [sp, #40]	; 0x28
 8006252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006254:	0021      	movs	r1, r4
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	0038      	movs	r0, r7
 800625a:	9b08      	ldr	r3, [sp, #32]
 800625c:	aa13      	add	r2, sp, #76	; 0x4c
 800625e:	f000 f9f3 	bl	8006648 <_printf_common>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d000      	beq.n	8006268 <_printf_float+0xbc>
 8006266:	e09e      	b.n	80063a6 <_printf_float+0x1fa>
 8006268:	2001      	movs	r0, #1
 800626a:	4240      	negs	r0, r0
 800626c:	b015      	add	sp, #84	; 0x54
 800626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006270:	3307      	adds	r3, #7
 8006272:	e7b6      	b.n	80061e2 <_printf_float+0x36>
 8006274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006276:	002b      	movs	r3, r5
 8006278:	0010      	movs	r0, r2
 800627a:	0029      	movs	r1, r5
 800627c:	f7fc f844 	bl	8002308 <__aeabi_dcmpun>
 8006280:	2800      	cmp	r0, #0
 8006282:	d00a      	beq.n	800629a <_printf_float+0xee>
 8006284:	2d00      	cmp	r5, #0
 8006286:	da03      	bge.n	8006290 <_printf_float+0xe4>
 8006288:	0023      	movs	r3, r4
 800628a:	222d      	movs	r2, #45	; 0x2d
 800628c:	3343      	adds	r3, #67	; 0x43
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	4d87      	ldr	r5, [pc, #540]	; (80064b0 <_printf_float+0x304>)
 8006292:	2e47      	cmp	r6, #71	; 0x47
 8006294:	d9d5      	bls.n	8006242 <_printf_float+0x96>
 8006296:	4d87      	ldr	r5, [pc, #540]	; (80064b4 <_printf_float+0x308>)
 8006298:	e7d3      	b.n	8006242 <_printf_float+0x96>
 800629a:	2220      	movs	r2, #32
 800629c:	0031      	movs	r1, r6
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	4391      	bics	r1, r2
 80062a2:	910e      	str	r1, [sp, #56]	; 0x38
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	d147      	bne.n	8006338 <_printf_float+0x18c>
 80062a8:	3307      	adds	r3, #7
 80062aa:	6063      	str	r3, [r4, #4]
 80062ac:	2380      	movs	r3, #128	; 0x80
 80062ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4313      	orrs	r3, r2
 80062b4:	2200      	movs	r2, #0
 80062b6:	9206      	str	r2, [sp, #24]
 80062b8:	aa12      	add	r2, sp, #72	; 0x48
 80062ba:	9205      	str	r2, [sp, #20]
 80062bc:	aa11      	add	r2, sp, #68	; 0x44
 80062be:	9203      	str	r2, [sp, #12]
 80062c0:	2223      	movs	r2, #35	; 0x23
 80062c2:	a908      	add	r1, sp, #32
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	1852      	adds	r2, r2, r1
 80062cc:	9202      	str	r2, [sp, #8]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	0038      	movs	r0, r7
 80062d2:	002b      	movs	r3, r5
 80062d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d6:	9604      	str	r6, [sp, #16]
 80062d8:	f7ff febe 	bl	8006058 <__cvt>
 80062dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062de:	0005      	movs	r5, r0
 80062e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80062e2:	2b47      	cmp	r3, #71	; 0x47
 80062e4:	d108      	bne.n	80062f8 <_printf_float+0x14c>
 80062e6:	1ccb      	adds	r3, r1, #3
 80062e8:	db02      	blt.n	80062f0 <_printf_float+0x144>
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	4299      	cmp	r1, r3
 80062ee:	dd46      	ble.n	800637e <_printf_float+0x1d2>
 80062f0:	0033      	movs	r3, r6
 80062f2:	3b02      	subs	r3, #2
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	001e      	movs	r6, r3
 80062f8:	2e65      	cmp	r6, #101	; 0x65
 80062fa:	d824      	bhi.n	8006346 <_printf_float+0x19a>
 80062fc:	0020      	movs	r0, r4
 80062fe:	0032      	movs	r2, r6
 8006300:	3901      	subs	r1, #1
 8006302:	3050      	adds	r0, #80	; 0x50
 8006304:	9111      	str	r1, [sp, #68]	; 0x44
 8006306:	f7ff ff0a 	bl	800611e <__exponent>
 800630a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800630c:	900a      	str	r0, [sp, #40]	; 0x28
 800630e:	1813      	adds	r3, r2, r0
 8006310:	6123      	str	r3, [r4, #16]
 8006312:	2a01      	cmp	r2, #1
 8006314:	dc02      	bgt.n	800631c <_printf_float+0x170>
 8006316:	6822      	ldr	r2, [r4, #0]
 8006318:	07d2      	lsls	r2, r2, #31
 800631a:	d501      	bpl.n	8006320 <_printf_float+0x174>
 800631c:	3301      	adds	r3, #1
 800631e:	6123      	str	r3, [r4, #16]
 8006320:	2323      	movs	r3, #35	; 0x23
 8006322:	aa08      	add	r2, sp, #32
 8006324:	189b      	adds	r3, r3, r2
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d100      	bne.n	800632e <_printf_float+0x182>
 800632c:	e791      	b.n	8006252 <_printf_float+0xa6>
 800632e:	0023      	movs	r3, r4
 8006330:	222d      	movs	r2, #45	; 0x2d
 8006332:	3343      	adds	r3, #67	; 0x43
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	e78c      	b.n	8006252 <_printf_float+0xa6>
 8006338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800633a:	2a47      	cmp	r2, #71	; 0x47
 800633c:	d1b6      	bne.n	80062ac <_printf_float+0x100>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1b4      	bne.n	80062ac <_printf_float+0x100>
 8006342:	3301      	adds	r3, #1
 8006344:	e7b1      	b.n	80062aa <_printf_float+0xfe>
 8006346:	2e66      	cmp	r6, #102	; 0x66
 8006348:	d11b      	bne.n	8006382 <_printf_float+0x1d6>
 800634a:	6863      	ldr	r3, [r4, #4]
 800634c:	2900      	cmp	r1, #0
 800634e:	dd0d      	ble.n	800636c <_printf_float+0x1c0>
 8006350:	6121      	str	r1, [r4, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <_printf_float+0x1b0>
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	07d2      	lsls	r2, r2, #31
 800635a:	d502      	bpl.n	8006362 <_printf_float+0x1b6>
 800635c:	3301      	adds	r3, #1
 800635e:	1859      	adds	r1, r3, r1
 8006360:	6121      	str	r1, [r4, #16]
 8006362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006364:	65a3      	str	r3, [r4, #88]	; 0x58
 8006366:	2300      	movs	r3, #0
 8006368:	930a      	str	r3, [sp, #40]	; 0x28
 800636a:	e7d9      	b.n	8006320 <_printf_float+0x174>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d103      	bne.n	8006378 <_printf_float+0x1cc>
 8006370:	2201      	movs	r2, #1
 8006372:	6821      	ldr	r1, [r4, #0]
 8006374:	4211      	tst	r1, r2
 8006376:	d000      	beq.n	800637a <_printf_float+0x1ce>
 8006378:	1c9a      	adds	r2, r3, #2
 800637a:	6122      	str	r2, [r4, #16]
 800637c:	e7f1      	b.n	8006362 <_printf_float+0x1b6>
 800637e:	2367      	movs	r3, #103	; 0x67
 8006380:	001e      	movs	r6, r3
 8006382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006386:	4293      	cmp	r3, r2
 8006388:	db06      	blt.n	8006398 <_printf_float+0x1ec>
 800638a:	6822      	ldr	r2, [r4, #0]
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	07d2      	lsls	r2, r2, #31
 8006390:	d5e7      	bpl.n	8006362 <_printf_float+0x1b6>
 8006392:	3301      	adds	r3, #1
 8006394:	6123      	str	r3, [r4, #16]
 8006396:	e7e4      	b.n	8006362 <_printf_float+0x1b6>
 8006398:	2101      	movs	r1, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	dc01      	bgt.n	80063a2 <_printf_float+0x1f6>
 800639e:	1849      	adds	r1, r1, r1
 80063a0:	1ac9      	subs	r1, r1, r3
 80063a2:	1852      	adds	r2, r2, r1
 80063a4:	e7e9      	b.n	800637a <_printf_float+0x1ce>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	0553      	lsls	r3, r2, #21
 80063aa:	d408      	bmi.n	80063be <_printf_float+0x212>
 80063ac:	6923      	ldr	r3, [r4, #16]
 80063ae:	002a      	movs	r2, r5
 80063b0:	0038      	movs	r0, r7
 80063b2:	9908      	ldr	r1, [sp, #32]
 80063b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063b6:	47a8      	blx	r5
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d129      	bne.n	8006410 <_printf_float+0x264>
 80063bc:	e754      	b.n	8006268 <_printf_float+0xbc>
 80063be:	2e65      	cmp	r6, #101	; 0x65
 80063c0:	d800      	bhi.n	80063c4 <_printf_float+0x218>
 80063c2:	e0ec      	b.n	800659e <_printf_float+0x3f2>
 80063c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80063c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80063c8:	2200      	movs	r2, #0
 80063ca:	2300      	movs	r3, #0
 80063cc:	f7fa f83e 	bl	800044c <__aeabi_dcmpeq>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d034      	beq.n	800643e <_printf_float+0x292>
 80063d4:	2301      	movs	r3, #1
 80063d6:	0038      	movs	r0, r7
 80063d8:	4a37      	ldr	r2, [pc, #220]	; (80064b8 <_printf_float+0x30c>)
 80063da:	9908      	ldr	r1, [sp, #32]
 80063dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063de:	47a8      	blx	r5
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d100      	bne.n	80063e6 <_printf_float+0x23a>
 80063e4:	e740      	b.n	8006268 <_printf_float+0xbc>
 80063e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063ea:	4293      	cmp	r3, r2
 80063ec:	db02      	blt.n	80063f4 <_printf_float+0x248>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	07db      	lsls	r3, r3, #31
 80063f2:	d50d      	bpl.n	8006410 <_printf_float+0x264>
 80063f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063f6:	0038      	movs	r0, r7
 80063f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063fc:	9908      	ldr	r1, [sp, #32]
 80063fe:	47a8      	blx	r5
 8006400:	2500      	movs	r5, #0
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	d100      	bne.n	8006408 <_printf_float+0x25c>
 8006406:	e72f      	b.n	8006268 <_printf_float+0xbc>
 8006408:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800640a:	3b01      	subs	r3, #1
 800640c:	42ab      	cmp	r3, r5
 800640e:	dc0a      	bgt.n	8006426 <_printf_float+0x27a>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	079b      	lsls	r3, r3, #30
 8006414:	d500      	bpl.n	8006418 <_printf_float+0x26c>
 8006416:	e114      	b.n	8006642 <_printf_float+0x496>
 8006418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800641a:	68e0      	ldr	r0, [r4, #12]
 800641c:	4298      	cmp	r0, r3
 800641e:	db00      	blt.n	8006422 <_printf_float+0x276>
 8006420:	e724      	b.n	800626c <_printf_float+0xc0>
 8006422:	0018      	movs	r0, r3
 8006424:	e722      	b.n	800626c <_printf_float+0xc0>
 8006426:	0022      	movs	r2, r4
 8006428:	2301      	movs	r3, #1
 800642a:	0038      	movs	r0, r7
 800642c:	9908      	ldr	r1, [sp, #32]
 800642e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006430:	321a      	adds	r2, #26
 8006432:	47b0      	blx	r6
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d100      	bne.n	800643a <_printf_float+0x28e>
 8006438:	e716      	b.n	8006268 <_printf_float+0xbc>
 800643a:	3501      	adds	r5, #1
 800643c:	e7e4      	b.n	8006408 <_printf_float+0x25c>
 800643e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006440:	2b00      	cmp	r3, #0
 8006442:	dc3b      	bgt.n	80064bc <_printf_float+0x310>
 8006444:	2301      	movs	r3, #1
 8006446:	0038      	movs	r0, r7
 8006448:	4a1b      	ldr	r2, [pc, #108]	; (80064b8 <_printf_float+0x30c>)
 800644a:	9908      	ldr	r1, [sp, #32]
 800644c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800644e:	47b0      	blx	r6
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d100      	bne.n	8006456 <_printf_float+0x2aa>
 8006454:	e708      	b.n	8006268 <_printf_float+0xbc>
 8006456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006458:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800645a:	4313      	orrs	r3, r2
 800645c:	d102      	bne.n	8006464 <_printf_float+0x2b8>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	07db      	lsls	r3, r3, #31
 8006462:	d5d5      	bpl.n	8006410 <_printf_float+0x264>
 8006464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006466:	0038      	movs	r0, r7
 8006468:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800646a:	9908      	ldr	r1, [sp, #32]
 800646c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800646e:	47b0      	blx	r6
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d100      	bne.n	8006476 <_printf_float+0x2ca>
 8006474:	e6f8      	b.n	8006268 <_printf_float+0xbc>
 8006476:	2300      	movs	r3, #0
 8006478:	930a      	str	r3, [sp, #40]	; 0x28
 800647a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800647c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800647e:	425b      	negs	r3, r3
 8006480:	4293      	cmp	r3, r2
 8006482:	dc01      	bgt.n	8006488 <_printf_float+0x2dc>
 8006484:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006486:	e792      	b.n	80063ae <_printf_float+0x202>
 8006488:	0022      	movs	r2, r4
 800648a:	2301      	movs	r3, #1
 800648c:	0038      	movs	r0, r7
 800648e:	9908      	ldr	r1, [sp, #32]
 8006490:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006492:	321a      	adds	r2, #26
 8006494:	47b0      	blx	r6
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	d100      	bne.n	800649c <_printf_float+0x2f0>
 800649a:	e6e5      	b.n	8006268 <_printf_float+0xbc>
 800649c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649e:	3301      	adds	r3, #1
 80064a0:	e7ea      	b.n	8006478 <_printf_float+0x2cc>
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	7fefffff 	.word	0x7fefffff
 80064a8:	0800ab90 	.word	0x0800ab90
 80064ac:	0800ab94 	.word	0x0800ab94
 80064b0:	0800ab98 	.word	0x0800ab98
 80064b4:	0800ab9c 	.word	0x0800ab9c
 80064b8:	0800aba0 	.word	0x0800aba0
 80064bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064c0:	920a      	str	r2, [sp, #40]	; 0x28
 80064c2:	429a      	cmp	r2, r3
 80064c4:	dd00      	ble.n	80064c8 <_printf_float+0x31c>
 80064c6:	930a      	str	r3, [sp, #40]	; 0x28
 80064c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dc3d      	bgt.n	800654a <_printf_float+0x39e>
 80064ce:	2300      	movs	r3, #0
 80064d0:	930e      	str	r3, [sp, #56]	; 0x38
 80064d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d4:	43db      	mvns	r3, r3
 80064d6:	17db      	asrs	r3, r3, #31
 80064d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80064da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064de:	930c      	str	r3, [sp, #48]	; 0x30
 80064e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e2:	4013      	ands	r3, r2
 80064e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ea:	4293      	cmp	r3, r2
 80064ec:	dc36      	bgt.n	800655c <_printf_float+0x3b0>
 80064ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064f2:	4293      	cmp	r3, r2
 80064f4:	db40      	blt.n	8006578 <_printf_float+0x3cc>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	07db      	lsls	r3, r3, #31
 80064fa:	d43d      	bmi.n	8006578 <_printf_float+0x3cc>
 80064fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006500:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	1a52      	subs	r2, r2, r1
 8006506:	920a      	str	r2, [sp, #40]	; 0x28
 8006508:	429a      	cmp	r2, r3
 800650a:	dd00      	ble.n	800650e <_printf_float+0x362>
 800650c:	930a      	str	r3, [sp, #40]	; 0x28
 800650e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006510:	2b00      	cmp	r3, #0
 8006512:	dc3a      	bgt.n	800658a <_printf_float+0x3de>
 8006514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006516:	2500      	movs	r5, #0
 8006518:	43db      	mvns	r3, r3
 800651a:	17db      	asrs	r3, r3, #31
 800651c:	930b      	str	r3, [sp, #44]	; 0x2c
 800651e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006528:	400a      	ands	r2, r1
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	42ab      	cmp	r3, r5
 800652e:	dc00      	bgt.n	8006532 <_printf_float+0x386>
 8006530:	e76e      	b.n	8006410 <_printf_float+0x264>
 8006532:	0022      	movs	r2, r4
 8006534:	2301      	movs	r3, #1
 8006536:	0038      	movs	r0, r7
 8006538:	9908      	ldr	r1, [sp, #32]
 800653a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800653c:	321a      	adds	r2, #26
 800653e:	47b0      	blx	r6
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d100      	bne.n	8006546 <_printf_float+0x39a>
 8006544:	e690      	b.n	8006268 <_printf_float+0xbc>
 8006546:	3501      	adds	r5, #1
 8006548:	e7e9      	b.n	800651e <_printf_float+0x372>
 800654a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654c:	002a      	movs	r2, r5
 800654e:	0038      	movs	r0, r7
 8006550:	9908      	ldr	r1, [sp, #32]
 8006552:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006554:	47b0      	blx	r6
 8006556:	1c43      	adds	r3, r0, #1
 8006558:	d1b9      	bne.n	80064ce <_printf_float+0x322>
 800655a:	e685      	b.n	8006268 <_printf_float+0xbc>
 800655c:	0022      	movs	r2, r4
 800655e:	2301      	movs	r3, #1
 8006560:	0038      	movs	r0, r7
 8006562:	9908      	ldr	r1, [sp, #32]
 8006564:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006566:	321a      	adds	r2, #26
 8006568:	47b0      	blx	r6
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d100      	bne.n	8006570 <_printf_float+0x3c4>
 800656e:	e67b      	b.n	8006268 <_printf_float+0xbc>
 8006570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006572:	3301      	adds	r3, #1
 8006574:	930e      	str	r3, [sp, #56]	; 0x38
 8006576:	e7b0      	b.n	80064da <_printf_float+0x32e>
 8006578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800657a:	0038      	movs	r0, r7
 800657c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800657e:	9908      	ldr	r1, [sp, #32]
 8006580:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006582:	47b0      	blx	r6
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d1b9      	bne.n	80064fc <_printf_float+0x350>
 8006588:	e66e      	b.n	8006268 <_printf_float+0xbc>
 800658a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800658c:	0038      	movs	r0, r7
 800658e:	18ea      	adds	r2, r5, r3
 8006590:	9908      	ldr	r1, [sp, #32]
 8006592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006594:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006596:	47a8      	blx	r5
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d1bb      	bne.n	8006514 <_printf_float+0x368>
 800659c:	e664      	b.n	8006268 <_printf_float+0xbc>
 800659e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	dc02      	bgt.n	80065aa <_printf_float+0x3fe>
 80065a4:	2301      	movs	r3, #1
 80065a6:	421a      	tst	r2, r3
 80065a8:	d038      	beq.n	800661c <_printf_float+0x470>
 80065aa:	2301      	movs	r3, #1
 80065ac:	002a      	movs	r2, r5
 80065ae:	0038      	movs	r0, r7
 80065b0:	9908      	ldr	r1, [sp, #32]
 80065b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065b4:	47b0      	blx	r6
 80065b6:	1c43      	adds	r3, r0, #1
 80065b8:	d100      	bne.n	80065bc <_printf_float+0x410>
 80065ba:	e655      	b.n	8006268 <_printf_float+0xbc>
 80065bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065be:	0038      	movs	r0, r7
 80065c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065c2:	9908      	ldr	r1, [sp, #32]
 80065c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065c6:	47b0      	blx	r6
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d100      	bne.n	80065ce <_printf_float+0x422>
 80065cc:	e64c      	b.n	8006268 <_printf_float+0xbc>
 80065ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80065d0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80065d2:	2200      	movs	r2, #0
 80065d4:	2300      	movs	r3, #0
 80065d6:	f7f9 ff39 	bl	800044c <__aeabi_dcmpeq>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d11c      	bne.n	8006618 <_printf_float+0x46c>
 80065de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065e0:	1c6a      	adds	r2, r5, #1
 80065e2:	3b01      	subs	r3, #1
 80065e4:	0038      	movs	r0, r7
 80065e6:	9908      	ldr	r1, [sp, #32]
 80065e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065ea:	47a8      	blx	r5
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d10f      	bne.n	8006610 <_printf_float+0x464>
 80065f0:	e63a      	b.n	8006268 <_printf_float+0xbc>
 80065f2:	0022      	movs	r2, r4
 80065f4:	2301      	movs	r3, #1
 80065f6:	0038      	movs	r0, r7
 80065f8:	9908      	ldr	r1, [sp, #32]
 80065fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065fc:	321a      	adds	r2, #26
 80065fe:	47b0      	blx	r6
 8006600:	1c43      	adds	r3, r0, #1
 8006602:	d100      	bne.n	8006606 <_printf_float+0x45a>
 8006604:	e630      	b.n	8006268 <_printf_float+0xbc>
 8006606:	3501      	adds	r5, #1
 8006608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800660a:	3b01      	subs	r3, #1
 800660c:	42ab      	cmp	r3, r5
 800660e:	dcf0      	bgt.n	80065f2 <_printf_float+0x446>
 8006610:	0022      	movs	r2, r4
 8006612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006614:	3250      	adds	r2, #80	; 0x50
 8006616:	e6cb      	b.n	80063b0 <_printf_float+0x204>
 8006618:	2500      	movs	r5, #0
 800661a:	e7f5      	b.n	8006608 <_printf_float+0x45c>
 800661c:	002a      	movs	r2, r5
 800661e:	e7e1      	b.n	80065e4 <_printf_float+0x438>
 8006620:	0022      	movs	r2, r4
 8006622:	2301      	movs	r3, #1
 8006624:	0038      	movs	r0, r7
 8006626:	9908      	ldr	r1, [sp, #32]
 8006628:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800662a:	3219      	adds	r2, #25
 800662c:	47b0      	blx	r6
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	d100      	bne.n	8006634 <_printf_float+0x488>
 8006632:	e619      	b.n	8006268 <_printf_float+0xbc>
 8006634:	3501      	adds	r5, #1
 8006636:	68e3      	ldr	r3, [r4, #12]
 8006638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	42ab      	cmp	r3, r5
 800663e:	dcef      	bgt.n	8006620 <_printf_float+0x474>
 8006640:	e6ea      	b.n	8006418 <_printf_float+0x26c>
 8006642:	2500      	movs	r5, #0
 8006644:	e7f7      	b.n	8006636 <_printf_float+0x48a>
 8006646:	46c0      	nop			; (mov r8, r8)

08006648 <_printf_common>:
 8006648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800664a:	0015      	movs	r5, r2
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	688a      	ldr	r2, [r1, #8]
 8006650:	690b      	ldr	r3, [r1, #16]
 8006652:	000c      	movs	r4, r1
 8006654:	9000      	str	r0, [sp, #0]
 8006656:	4293      	cmp	r3, r2
 8006658:	da00      	bge.n	800665c <_printf_common+0x14>
 800665a:	0013      	movs	r3, r2
 800665c:	0022      	movs	r2, r4
 800665e:	602b      	str	r3, [r5, #0]
 8006660:	3243      	adds	r2, #67	; 0x43
 8006662:	7812      	ldrb	r2, [r2, #0]
 8006664:	2a00      	cmp	r2, #0
 8006666:	d001      	beq.n	800666c <_printf_common+0x24>
 8006668:	3301      	adds	r3, #1
 800666a:	602b      	str	r3, [r5, #0]
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	069b      	lsls	r3, r3, #26
 8006670:	d502      	bpl.n	8006678 <_printf_common+0x30>
 8006672:	682b      	ldr	r3, [r5, #0]
 8006674:	3302      	adds	r3, #2
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	2306      	movs	r3, #6
 800667c:	0017      	movs	r7, r2
 800667e:	401f      	ands	r7, r3
 8006680:	421a      	tst	r2, r3
 8006682:	d027      	beq.n	80066d4 <_printf_common+0x8c>
 8006684:	0023      	movs	r3, r4
 8006686:	3343      	adds	r3, #67	; 0x43
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	1e5a      	subs	r2, r3, #1
 800668c:	4193      	sbcs	r3, r2
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	0692      	lsls	r2, r2, #26
 8006692:	d430      	bmi.n	80066f6 <_printf_common+0xae>
 8006694:	0022      	movs	r2, r4
 8006696:	9901      	ldr	r1, [sp, #4]
 8006698:	9800      	ldr	r0, [sp, #0]
 800669a:	9e08      	ldr	r6, [sp, #32]
 800669c:	3243      	adds	r2, #67	; 0x43
 800669e:	47b0      	blx	r6
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d025      	beq.n	80066f0 <_printf_common+0xa8>
 80066a4:	2306      	movs	r3, #6
 80066a6:	6820      	ldr	r0, [r4, #0]
 80066a8:	682a      	ldr	r2, [r5, #0]
 80066aa:	68e1      	ldr	r1, [r4, #12]
 80066ac:	2500      	movs	r5, #0
 80066ae:	4003      	ands	r3, r0
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d103      	bne.n	80066bc <_printf_common+0x74>
 80066b4:	1a8d      	subs	r5, r1, r2
 80066b6:	43eb      	mvns	r3, r5
 80066b8:	17db      	asrs	r3, r3, #31
 80066ba:	401d      	ands	r5, r3
 80066bc:	68a3      	ldr	r3, [r4, #8]
 80066be:	6922      	ldr	r2, [r4, #16]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	dd01      	ble.n	80066c8 <_printf_common+0x80>
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	18ed      	adds	r5, r5, r3
 80066c8:	2700      	movs	r7, #0
 80066ca:	42bd      	cmp	r5, r7
 80066cc:	d120      	bne.n	8006710 <_printf_common+0xc8>
 80066ce:	2000      	movs	r0, #0
 80066d0:	e010      	b.n	80066f4 <_printf_common+0xac>
 80066d2:	3701      	adds	r7, #1
 80066d4:	68e3      	ldr	r3, [r4, #12]
 80066d6:	682a      	ldr	r2, [r5, #0]
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	42bb      	cmp	r3, r7
 80066dc:	ddd2      	ble.n	8006684 <_printf_common+0x3c>
 80066de:	0022      	movs	r2, r4
 80066e0:	2301      	movs	r3, #1
 80066e2:	9901      	ldr	r1, [sp, #4]
 80066e4:	9800      	ldr	r0, [sp, #0]
 80066e6:	9e08      	ldr	r6, [sp, #32]
 80066e8:	3219      	adds	r2, #25
 80066ea:	47b0      	blx	r6
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d1f0      	bne.n	80066d2 <_printf_common+0x8a>
 80066f0:	2001      	movs	r0, #1
 80066f2:	4240      	negs	r0, r0
 80066f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066f6:	2030      	movs	r0, #48	; 0x30
 80066f8:	18e1      	adds	r1, r4, r3
 80066fa:	3143      	adds	r1, #67	; 0x43
 80066fc:	7008      	strb	r0, [r1, #0]
 80066fe:	0021      	movs	r1, r4
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	3145      	adds	r1, #69	; 0x45
 8006704:	7809      	ldrb	r1, [r1, #0]
 8006706:	18a2      	adds	r2, r4, r2
 8006708:	3243      	adds	r2, #67	; 0x43
 800670a:	3302      	adds	r3, #2
 800670c:	7011      	strb	r1, [r2, #0]
 800670e:	e7c1      	b.n	8006694 <_printf_common+0x4c>
 8006710:	0022      	movs	r2, r4
 8006712:	2301      	movs	r3, #1
 8006714:	9901      	ldr	r1, [sp, #4]
 8006716:	9800      	ldr	r0, [sp, #0]
 8006718:	9e08      	ldr	r6, [sp, #32]
 800671a:	321a      	adds	r2, #26
 800671c:	47b0      	blx	r6
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	d0e6      	beq.n	80066f0 <_printf_common+0xa8>
 8006722:	3701      	adds	r7, #1
 8006724:	e7d1      	b.n	80066ca <_printf_common+0x82>
	...

08006728 <_printf_i>:
 8006728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672a:	b08b      	sub	sp, #44	; 0x2c
 800672c:	9206      	str	r2, [sp, #24]
 800672e:	000a      	movs	r2, r1
 8006730:	3243      	adds	r2, #67	; 0x43
 8006732:	9307      	str	r3, [sp, #28]
 8006734:	9005      	str	r0, [sp, #20]
 8006736:	9204      	str	r2, [sp, #16]
 8006738:	7e0a      	ldrb	r2, [r1, #24]
 800673a:	000c      	movs	r4, r1
 800673c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800673e:	2a78      	cmp	r2, #120	; 0x78
 8006740:	d806      	bhi.n	8006750 <_printf_i+0x28>
 8006742:	2a62      	cmp	r2, #98	; 0x62
 8006744:	d808      	bhi.n	8006758 <_printf_i+0x30>
 8006746:	2a00      	cmp	r2, #0
 8006748:	d100      	bne.n	800674c <_printf_i+0x24>
 800674a:	e0c0      	b.n	80068ce <_printf_i+0x1a6>
 800674c:	2a58      	cmp	r2, #88	; 0x58
 800674e:	d052      	beq.n	80067f6 <_printf_i+0xce>
 8006750:	0026      	movs	r6, r4
 8006752:	3642      	adds	r6, #66	; 0x42
 8006754:	7032      	strb	r2, [r6, #0]
 8006756:	e022      	b.n	800679e <_printf_i+0x76>
 8006758:	0010      	movs	r0, r2
 800675a:	3863      	subs	r0, #99	; 0x63
 800675c:	2815      	cmp	r0, #21
 800675e:	d8f7      	bhi.n	8006750 <_printf_i+0x28>
 8006760:	f7f9 fce4 	bl	800012c <__gnu_thumb1_case_shi>
 8006764:	001f0016 	.word	0x001f0016
 8006768:	fff6fff6 	.word	0xfff6fff6
 800676c:	fff6fff6 	.word	0xfff6fff6
 8006770:	fff6001f 	.word	0xfff6001f
 8006774:	fff6fff6 	.word	0xfff6fff6
 8006778:	00a8fff6 	.word	0x00a8fff6
 800677c:	009a0036 	.word	0x009a0036
 8006780:	fff6fff6 	.word	0xfff6fff6
 8006784:	fff600b9 	.word	0xfff600b9
 8006788:	fff60036 	.word	0xfff60036
 800678c:	009efff6 	.word	0x009efff6
 8006790:	0026      	movs	r6, r4
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	3642      	adds	r6, #66	; 0x42
 8006796:	1d11      	adds	r1, r2, #4
 8006798:	6019      	str	r1, [r3, #0]
 800679a:	6813      	ldr	r3, [r2, #0]
 800679c:	7033      	strb	r3, [r6, #0]
 800679e:	2301      	movs	r3, #1
 80067a0:	e0a7      	b.n	80068f2 <_printf_i+0x1ca>
 80067a2:	6808      	ldr	r0, [r1, #0]
 80067a4:	6819      	ldr	r1, [r3, #0]
 80067a6:	1d0a      	adds	r2, r1, #4
 80067a8:	0605      	lsls	r5, r0, #24
 80067aa:	d50b      	bpl.n	80067c4 <_printf_i+0x9c>
 80067ac:	680d      	ldr	r5, [r1, #0]
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	da03      	bge.n	80067bc <_printf_i+0x94>
 80067b4:	232d      	movs	r3, #45	; 0x2d
 80067b6:	9a04      	ldr	r2, [sp, #16]
 80067b8:	426d      	negs	r5, r5
 80067ba:	7013      	strb	r3, [r2, #0]
 80067bc:	4b61      	ldr	r3, [pc, #388]	; (8006944 <_printf_i+0x21c>)
 80067be:	270a      	movs	r7, #10
 80067c0:	9303      	str	r3, [sp, #12]
 80067c2:	e032      	b.n	800682a <_printf_i+0x102>
 80067c4:	680d      	ldr	r5, [r1, #0]
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	0641      	lsls	r1, r0, #25
 80067ca:	d5f1      	bpl.n	80067b0 <_printf_i+0x88>
 80067cc:	b22d      	sxth	r5, r5
 80067ce:	e7ef      	b.n	80067b0 <_printf_i+0x88>
 80067d0:	680d      	ldr	r5, [r1, #0]
 80067d2:	6819      	ldr	r1, [r3, #0]
 80067d4:	1d08      	adds	r0, r1, #4
 80067d6:	6018      	str	r0, [r3, #0]
 80067d8:	062e      	lsls	r6, r5, #24
 80067da:	d501      	bpl.n	80067e0 <_printf_i+0xb8>
 80067dc:	680d      	ldr	r5, [r1, #0]
 80067de:	e003      	b.n	80067e8 <_printf_i+0xc0>
 80067e0:	066d      	lsls	r5, r5, #25
 80067e2:	d5fb      	bpl.n	80067dc <_printf_i+0xb4>
 80067e4:	680d      	ldr	r5, [r1, #0]
 80067e6:	b2ad      	uxth	r5, r5
 80067e8:	4b56      	ldr	r3, [pc, #344]	; (8006944 <_printf_i+0x21c>)
 80067ea:	270a      	movs	r7, #10
 80067ec:	9303      	str	r3, [sp, #12]
 80067ee:	2a6f      	cmp	r2, #111	; 0x6f
 80067f0:	d117      	bne.n	8006822 <_printf_i+0xfa>
 80067f2:	2708      	movs	r7, #8
 80067f4:	e015      	b.n	8006822 <_printf_i+0xfa>
 80067f6:	3145      	adds	r1, #69	; 0x45
 80067f8:	700a      	strb	r2, [r1, #0]
 80067fa:	4a52      	ldr	r2, [pc, #328]	; (8006944 <_printf_i+0x21c>)
 80067fc:	9203      	str	r2, [sp, #12]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	6821      	ldr	r1, [r4, #0]
 8006802:	ca20      	ldmia	r2!, {r5}
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	0608      	lsls	r0, r1, #24
 8006808:	d550      	bpl.n	80068ac <_printf_i+0x184>
 800680a:	07cb      	lsls	r3, r1, #31
 800680c:	d502      	bpl.n	8006814 <_printf_i+0xec>
 800680e:	2320      	movs	r3, #32
 8006810:	4319      	orrs	r1, r3
 8006812:	6021      	str	r1, [r4, #0]
 8006814:	2710      	movs	r7, #16
 8006816:	2d00      	cmp	r5, #0
 8006818:	d103      	bne.n	8006822 <_printf_i+0xfa>
 800681a:	2320      	movs	r3, #32
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	439a      	bics	r2, r3
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	0023      	movs	r3, r4
 8006824:	2200      	movs	r2, #0
 8006826:	3343      	adds	r3, #67	; 0x43
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	6863      	ldr	r3, [r4, #4]
 800682c:	60a3      	str	r3, [r4, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	db03      	blt.n	800683a <_printf_i+0x112>
 8006832:	2204      	movs	r2, #4
 8006834:	6821      	ldr	r1, [r4, #0]
 8006836:	4391      	bics	r1, r2
 8006838:	6021      	str	r1, [r4, #0]
 800683a:	2d00      	cmp	r5, #0
 800683c:	d102      	bne.n	8006844 <_printf_i+0x11c>
 800683e:	9e04      	ldr	r6, [sp, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00c      	beq.n	800685e <_printf_i+0x136>
 8006844:	9e04      	ldr	r6, [sp, #16]
 8006846:	0028      	movs	r0, r5
 8006848:	0039      	movs	r1, r7
 800684a:	f7f9 fcff 	bl	800024c <__aeabi_uidivmod>
 800684e:	9b03      	ldr	r3, [sp, #12]
 8006850:	3e01      	subs	r6, #1
 8006852:	5c5b      	ldrb	r3, [r3, r1]
 8006854:	7033      	strb	r3, [r6, #0]
 8006856:	002b      	movs	r3, r5
 8006858:	0005      	movs	r5, r0
 800685a:	429f      	cmp	r7, r3
 800685c:	d9f3      	bls.n	8006846 <_printf_i+0x11e>
 800685e:	2f08      	cmp	r7, #8
 8006860:	d109      	bne.n	8006876 <_printf_i+0x14e>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	07db      	lsls	r3, r3, #31
 8006866:	d506      	bpl.n	8006876 <_printf_i+0x14e>
 8006868:	6863      	ldr	r3, [r4, #4]
 800686a:	6922      	ldr	r2, [r4, #16]
 800686c:	4293      	cmp	r3, r2
 800686e:	dc02      	bgt.n	8006876 <_printf_i+0x14e>
 8006870:	2330      	movs	r3, #48	; 0x30
 8006872:	3e01      	subs	r6, #1
 8006874:	7033      	strb	r3, [r6, #0]
 8006876:	9b04      	ldr	r3, [sp, #16]
 8006878:	1b9b      	subs	r3, r3, r6
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	0021      	movs	r1, r4
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	9805      	ldr	r0, [sp, #20]
 8006884:	9b06      	ldr	r3, [sp, #24]
 8006886:	aa09      	add	r2, sp, #36	; 0x24
 8006888:	f7ff fede 	bl	8006648 <_printf_common>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	d135      	bne.n	80068fc <_printf_i+0x1d4>
 8006890:	2001      	movs	r0, #1
 8006892:	4240      	negs	r0, r0
 8006894:	b00b      	add	sp, #44	; 0x2c
 8006896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006898:	2220      	movs	r2, #32
 800689a:	6809      	ldr	r1, [r1, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	6022      	str	r2, [r4, #0]
 80068a0:	0022      	movs	r2, r4
 80068a2:	2178      	movs	r1, #120	; 0x78
 80068a4:	3245      	adds	r2, #69	; 0x45
 80068a6:	7011      	strb	r1, [r2, #0]
 80068a8:	4a27      	ldr	r2, [pc, #156]	; (8006948 <_printf_i+0x220>)
 80068aa:	e7a7      	b.n	80067fc <_printf_i+0xd4>
 80068ac:	0648      	lsls	r0, r1, #25
 80068ae:	d5ac      	bpl.n	800680a <_printf_i+0xe2>
 80068b0:	b2ad      	uxth	r5, r5
 80068b2:	e7aa      	b.n	800680a <_printf_i+0xe2>
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	680d      	ldr	r5, [r1, #0]
 80068b8:	1d10      	adds	r0, r2, #4
 80068ba:	6949      	ldr	r1, [r1, #20]
 80068bc:	6018      	str	r0, [r3, #0]
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	062e      	lsls	r6, r5, #24
 80068c2:	d501      	bpl.n	80068c8 <_printf_i+0x1a0>
 80068c4:	6019      	str	r1, [r3, #0]
 80068c6:	e002      	b.n	80068ce <_printf_i+0x1a6>
 80068c8:	066d      	lsls	r5, r5, #25
 80068ca:	d5fb      	bpl.n	80068c4 <_printf_i+0x19c>
 80068cc:	8019      	strh	r1, [r3, #0]
 80068ce:	2300      	movs	r3, #0
 80068d0:	9e04      	ldr	r6, [sp, #16]
 80068d2:	6123      	str	r3, [r4, #16]
 80068d4:	e7d2      	b.n	800687c <_printf_i+0x154>
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	1d11      	adds	r1, r2, #4
 80068da:	6019      	str	r1, [r3, #0]
 80068dc:	6816      	ldr	r6, [r2, #0]
 80068de:	2100      	movs	r1, #0
 80068e0:	0030      	movs	r0, r6
 80068e2:	6862      	ldr	r2, [r4, #4]
 80068e4:	f002 fb70 	bl	8008fc8 <memchr>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d001      	beq.n	80068f0 <_printf_i+0x1c8>
 80068ec:	1b80      	subs	r0, r0, r6
 80068ee:	6060      	str	r0, [r4, #4]
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	6123      	str	r3, [r4, #16]
 80068f4:	2300      	movs	r3, #0
 80068f6:	9a04      	ldr	r2, [sp, #16]
 80068f8:	7013      	strb	r3, [r2, #0]
 80068fa:	e7bf      	b.n	800687c <_printf_i+0x154>
 80068fc:	6923      	ldr	r3, [r4, #16]
 80068fe:	0032      	movs	r2, r6
 8006900:	9906      	ldr	r1, [sp, #24]
 8006902:	9805      	ldr	r0, [sp, #20]
 8006904:	9d07      	ldr	r5, [sp, #28]
 8006906:	47a8      	blx	r5
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d0c1      	beq.n	8006890 <_printf_i+0x168>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	079b      	lsls	r3, r3, #30
 8006910:	d415      	bmi.n	800693e <_printf_i+0x216>
 8006912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006914:	68e0      	ldr	r0, [r4, #12]
 8006916:	4298      	cmp	r0, r3
 8006918:	dabc      	bge.n	8006894 <_printf_i+0x16c>
 800691a:	0018      	movs	r0, r3
 800691c:	e7ba      	b.n	8006894 <_printf_i+0x16c>
 800691e:	0022      	movs	r2, r4
 8006920:	2301      	movs	r3, #1
 8006922:	9906      	ldr	r1, [sp, #24]
 8006924:	9805      	ldr	r0, [sp, #20]
 8006926:	9e07      	ldr	r6, [sp, #28]
 8006928:	3219      	adds	r2, #25
 800692a:	47b0      	blx	r6
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d0af      	beq.n	8006890 <_printf_i+0x168>
 8006930:	3501      	adds	r5, #1
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	42ab      	cmp	r3, r5
 800693a:	dcf0      	bgt.n	800691e <_printf_i+0x1f6>
 800693c:	e7e9      	b.n	8006912 <_printf_i+0x1ea>
 800693e:	2500      	movs	r5, #0
 8006940:	e7f7      	b.n	8006932 <_printf_i+0x20a>
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	0800aba2 	.word	0x0800aba2
 8006948:	0800abb3 	.word	0x0800abb3

0800694c <_scanf_float>:
 800694c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800694e:	b08b      	sub	sp, #44	; 0x2c
 8006950:	0015      	movs	r5, r2
 8006952:	9001      	str	r0, [sp, #4]
 8006954:	22ae      	movs	r2, #174	; 0xae
 8006956:	2000      	movs	r0, #0
 8006958:	9306      	str	r3, [sp, #24]
 800695a:	688b      	ldr	r3, [r1, #8]
 800695c:	000e      	movs	r6, r1
 800695e:	1e59      	subs	r1, r3, #1
 8006960:	0052      	lsls	r2, r2, #1
 8006962:	9005      	str	r0, [sp, #20]
 8006964:	4291      	cmp	r1, r2
 8006966:	d905      	bls.n	8006974 <_scanf_float+0x28>
 8006968:	3b5e      	subs	r3, #94	; 0x5e
 800696a:	3bff      	subs	r3, #255	; 0xff
 800696c:	9305      	str	r3, [sp, #20]
 800696e:	235e      	movs	r3, #94	; 0x5e
 8006970:	33ff      	adds	r3, #255	; 0xff
 8006972:	60b3      	str	r3, [r6, #8]
 8006974:	23f0      	movs	r3, #240	; 0xf0
 8006976:	6832      	ldr	r2, [r6, #0]
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	4313      	orrs	r3, r2
 800697c:	6033      	str	r3, [r6, #0]
 800697e:	0033      	movs	r3, r6
 8006980:	2400      	movs	r4, #0
 8006982:	331c      	adds	r3, #28
 8006984:	001f      	movs	r7, r3
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	9402      	str	r4, [sp, #8]
 800698a:	9408      	str	r4, [sp, #32]
 800698c:	9407      	str	r4, [sp, #28]
 800698e:	9400      	str	r4, [sp, #0]
 8006990:	9404      	str	r4, [sp, #16]
 8006992:	68b2      	ldr	r2, [r6, #8]
 8006994:	2a00      	cmp	r2, #0
 8006996:	d00a      	beq.n	80069ae <_scanf_float+0x62>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b4e      	cmp	r3, #78	; 0x4e
 800699e:	d844      	bhi.n	8006a2a <_scanf_float+0xde>
 80069a0:	0018      	movs	r0, r3
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d82c      	bhi.n	8006a00 <_scanf_float+0xb4>
 80069a6:	382b      	subs	r0, #43	; 0x2b
 80069a8:	b2c1      	uxtb	r1, r0
 80069aa:	290e      	cmp	r1, #14
 80069ac:	d92a      	bls.n	8006a04 <_scanf_float+0xb8>
 80069ae:	9b00      	ldr	r3, [sp, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <_scanf_float+0x70>
 80069b4:	6832      	ldr	r2, [r6, #0]
 80069b6:	4ba4      	ldr	r3, [pc, #656]	; (8006c48 <_scanf_float+0x2fc>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	6033      	str	r3, [r6, #0]
 80069bc:	9b02      	ldr	r3, [sp, #8]
 80069be:	3b01      	subs	r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d900      	bls.n	80069c6 <_scanf_float+0x7a>
 80069c4:	e0f9      	b.n	8006bba <_scanf_float+0x26e>
 80069c6:	24be      	movs	r4, #190	; 0xbe
 80069c8:	0064      	lsls	r4, r4, #1
 80069ca:	9b03      	ldr	r3, [sp, #12]
 80069cc:	429f      	cmp	r7, r3
 80069ce:	d900      	bls.n	80069d2 <_scanf_float+0x86>
 80069d0:	e0e9      	b.n	8006ba6 <_scanf_float+0x25a>
 80069d2:	2301      	movs	r3, #1
 80069d4:	9302      	str	r3, [sp, #8]
 80069d6:	e185      	b.n	8006ce4 <_scanf_float+0x398>
 80069d8:	0018      	movs	r0, r3
 80069da:	3861      	subs	r0, #97	; 0x61
 80069dc:	280d      	cmp	r0, #13
 80069de:	d8e6      	bhi.n	80069ae <_scanf_float+0x62>
 80069e0:	f7f9 fba4 	bl	800012c <__gnu_thumb1_case_shi>
 80069e4:	ffe50083 	.word	0xffe50083
 80069e8:	ffe5ffe5 	.word	0xffe5ffe5
 80069ec:	00a200b6 	.word	0x00a200b6
 80069f0:	ffe5ffe5 	.word	0xffe5ffe5
 80069f4:	ffe50089 	.word	0xffe50089
 80069f8:	ffe5ffe5 	.word	0xffe5ffe5
 80069fc:	0065ffe5 	.word	0x0065ffe5
 8006a00:	3841      	subs	r0, #65	; 0x41
 8006a02:	e7eb      	b.n	80069dc <_scanf_float+0x90>
 8006a04:	280e      	cmp	r0, #14
 8006a06:	d8d2      	bhi.n	80069ae <_scanf_float+0x62>
 8006a08:	f7f9 fb90 	bl	800012c <__gnu_thumb1_case_shi>
 8006a0c:	ffd1004b 	.word	0xffd1004b
 8006a10:	0098004b 	.word	0x0098004b
 8006a14:	0020ffd1 	.word	0x0020ffd1
 8006a18:	00400040 	.word	0x00400040
 8006a1c:	00400040 	.word	0x00400040
 8006a20:	00400040 	.word	0x00400040
 8006a24:	00400040 	.word	0x00400040
 8006a28:	0040      	.short	0x0040
 8006a2a:	2b6e      	cmp	r3, #110	; 0x6e
 8006a2c:	d809      	bhi.n	8006a42 <_scanf_float+0xf6>
 8006a2e:	2b60      	cmp	r3, #96	; 0x60
 8006a30:	d8d2      	bhi.n	80069d8 <_scanf_float+0x8c>
 8006a32:	2b54      	cmp	r3, #84	; 0x54
 8006a34:	d07d      	beq.n	8006b32 <_scanf_float+0x1e6>
 8006a36:	2b59      	cmp	r3, #89	; 0x59
 8006a38:	d1b9      	bne.n	80069ae <_scanf_float+0x62>
 8006a3a:	2c07      	cmp	r4, #7
 8006a3c:	d1b7      	bne.n	80069ae <_scanf_float+0x62>
 8006a3e:	2408      	movs	r4, #8
 8006a40:	e02c      	b.n	8006a9c <_scanf_float+0x150>
 8006a42:	2b74      	cmp	r3, #116	; 0x74
 8006a44:	d075      	beq.n	8006b32 <_scanf_float+0x1e6>
 8006a46:	2b79      	cmp	r3, #121	; 0x79
 8006a48:	d0f7      	beq.n	8006a3a <_scanf_float+0xee>
 8006a4a:	e7b0      	b.n	80069ae <_scanf_float+0x62>
 8006a4c:	6831      	ldr	r1, [r6, #0]
 8006a4e:	05c8      	lsls	r0, r1, #23
 8006a50:	d51c      	bpl.n	8006a8c <_scanf_float+0x140>
 8006a52:	2380      	movs	r3, #128	; 0x80
 8006a54:	4399      	bics	r1, r3
 8006a56:	9b00      	ldr	r3, [sp, #0]
 8006a58:	6031      	str	r1, [r6, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	9b05      	ldr	r3, [sp, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <_scanf_float+0x120>
 8006a64:	3b01      	subs	r3, #1
 8006a66:	3201      	adds	r2, #1
 8006a68:	9305      	str	r3, [sp, #20]
 8006a6a:	60b2      	str	r2, [r6, #8]
 8006a6c:	68b3      	ldr	r3, [r6, #8]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	60b3      	str	r3, [r6, #8]
 8006a72:	6933      	ldr	r3, [r6, #16]
 8006a74:	3301      	adds	r3, #1
 8006a76:	6133      	str	r3, [r6, #16]
 8006a78:	686b      	ldr	r3, [r5, #4]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	606b      	str	r3, [r5, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dc00      	bgt.n	8006a84 <_scanf_float+0x138>
 8006a82:	e086      	b.n	8006b92 <_scanf_float+0x246>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	e782      	b.n	8006992 <_scanf_float+0x46>
 8006a8c:	9a02      	ldr	r2, [sp, #8]
 8006a8e:	1912      	adds	r2, r2, r4
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d18c      	bne.n	80069ae <_scanf_float+0x62>
 8006a94:	4a6d      	ldr	r2, [pc, #436]	; (8006c4c <_scanf_float+0x300>)
 8006a96:	6831      	ldr	r1, [r6, #0]
 8006a98:	400a      	ands	r2, r1
 8006a9a:	6032      	str	r2, [r6, #0]
 8006a9c:	703b      	strb	r3, [r7, #0]
 8006a9e:	3701      	adds	r7, #1
 8006aa0:	e7e4      	b.n	8006a6c <_scanf_float+0x120>
 8006aa2:	2180      	movs	r1, #128	; 0x80
 8006aa4:	6832      	ldr	r2, [r6, #0]
 8006aa6:	420a      	tst	r2, r1
 8006aa8:	d081      	beq.n	80069ae <_scanf_float+0x62>
 8006aaa:	438a      	bics	r2, r1
 8006aac:	e7f5      	b.n	8006a9a <_scanf_float+0x14e>
 8006aae:	9a02      	ldr	r2, [sp, #8]
 8006ab0:	2a00      	cmp	r2, #0
 8006ab2:	d10f      	bne.n	8006ad4 <_scanf_float+0x188>
 8006ab4:	9a00      	ldr	r2, [sp, #0]
 8006ab6:	2a00      	cmp	r2, #0
 8006ab8:	d10f      	bne.n	8006ada <_scanf_float+0x18e>
 8006aba:	6832      	ldr	r2, [r6, #0]
 8006abc:	21e0      	movs	r1, #224	; 0xe0
 8006abe:	0010      	movs	r0, r2
 8006ac0:	00c9      	lsls	r1, r1, #3
 8006ac2:	4008      	ands	r0, r1
 8006ac4:	4288      	cmp	r0, r1
 8006ac6:	d108      	bne.n	8006ada <_scanf_float+0x18e>
 8006ac8:	4961      	ldr	r1, [pc, #388]	; (8006c50 <_scanf_float+0x304>)
 8006aca:	400a      	ands	r2, r1
 8006acc:	6032      	str	r2, [r6, #0]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	9202      	str	r2, [sp, #8]
 8006ad2:	e7e3      	b.n	8006a9c <_scanf_float+0x150>
 8006ad4:	9a02      	ldr	r2, [sp, #8]
 8006ad6:	2a02      	cmp	r2, #2
 8006ad8:	d059      	beq.n	8006b8e <_scanf_float+0x242>
 8006ada:	2c01      	cmp	r4, #1
 8006adc:	d002      	beq.n	8006ae4 <_scanf_float+0x198>
 8006ade:	2c04      	cmp	r4, #4
 8006ae0:	d000      	beq.n	8006ae4 <_scanf_float+0x198>
 8006ae2:	e764      	b.n	80069ae <_scanf_float+0x62>
 8006ae4:	3401      	adds	r4, #1
 8006ae6:	b2e4      	uxtb	r4, r4
 8006ae8:	e7d8      	b.n	8006a9c <_scanf_float+0x150>
 8006aea:	9a02      	ldr	r2, [sp, #8]
 8006aec:	2a01      	cmp	r2, #1
 8006aee:	d000      	beq.n	8006af2 <_scanf_float+0x1a6>
 8006af0:	e75d      	b.n	80069ae <_scanf_float+0x62>
 8006af2:	2202      	movs	r2, #2
 8006af4:	e7ec      	b.n	8006ad0 <_scanf_float+0x184>
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	d110      	bne.n	8006b1c <_scanf_float+0x1d0>
 8006afa:	9a00      	ldr	r2, [sp, #0]
 8006afc:	2a00      	cmp	r2, #0
 8006afe:	d000      	beq.n	8006b02 <_scanf_float+0x1b6>
 8006b00:	e758      	b.n	80069b4 <_scanf_float+0x68>
 8006b02:	6832      	ldr	r2, [r6, #0]
 8006b04:	21e0      	movs	r1, #224	; 0xe0
 8006b06:	0010      	movs	r0, r2
 8006b08:	00c9      	lsls	r1, r1, #3
 8006b0a:	4008      	ands	r0, r1
 8006b0c:	4288      	cmp	r0, r1
 8006b0e:	d000      	beq.n	8006b12 <_scanf_float+0x1c6>
 8006b10:	e754      	b.n	80069bc <_scanf_float+0x70>
 8006b12:	494f      	ldr	r1, [pc, #316]	; (8006c50 <_scanf_float+0x304>)
 8006b14:	3401      	adds	r4, #1
 8006b16:	400a      	ands	r2, r1
 8006b18:	6032      	str	r2, [r6, #0]
 8006b1a:	e7bf      	b.n	8006a9c <_scanf_float+0x150>
 8006b1c:	21fd      	movs	r1, #253	; 0xfd
 8006b1e:	1ee2      	subs	r2, r4, #3
 8006b20:	420a      	tst	r2, r1
 8006b22:	d000      	beq.n	8006b26 <_scanf_float+0x1da>
 8006b24:	e743      	b.n	80069ae <_scanf_float+0x62>
 8006b26:	e7dd      	b.n	8006ae4 <_scanf_float+0x198>
 8006b28:	2c02      	cmp	r4, #2
 8006b2a:	d000      	beq.n	8006b2e <_scanf_float+0x1e2>
 8006b2c:	e73f      	b.n	80069ae <_scanf_float+0x62>
 8006b2e:	2403      	movs	r4, #3
 8006b30:	e7b4      	b.n	8006a9c <_scanf_float+0x150>
 8006b32:	2c06      	cmp	r4, #6
 8006b34:	d000      	beq.n	8006b38 <_scanf_float+0x1ec>
 8006b36:	e73a      	b.n	80069ae <_scanf_float+0x62>
 8006b38:	2407      	movs	r4, #7
 8006b3a:	e7af      	b.n	8006a9c <_scanf_float+0x150>
 8006b3c:	6832      	ldr	r2, [r6, #0]
 8006b3e:	0591      	lsls	r1, r2, #22
 8006b40:	d400      	bmi.n	8006b44 <_scanf_float+0x1f8>
 8006b42:	e734      	b.n	80069ae <_scanf_float+0x62>
 8006b44:	4943      	ldr	r1, [pc, #268]	; (8006c54 <_scanf_float+0x308>)
 8006b46:	400a      	ands	r2, r1
 8006b48:	6032      	str	r2, [r6, #0]
 8006b4a:	9a00      	ldr	r2, [sp, #0]
 8006b4c:	9204      	str	r2, [sp, #16]
 8006b4e:	e7a5      	b.n	8006a9c <_scanf_float+0x150>
 8006b50:	21a0      	movs	r1, #160	; 0xa0
 8006b52:	2080      	movs	r0, #128	; 0x80
 8006b54:	6832      	ldr	r2, [r6, #0]
 8006b56:	00c9      	lsls	r1, r1, #3
 8006b58:	4011      	ands	r1, r2
 8006b5a:	00c0      	lsls	r0, r0, #3
 8006b5c:	4281      	cmp	r1, r0
 8006b5e:	d006      	beq.n	8006b6e <_scanf_float+0x222>
 8006b60:	4202      	tst	r2, r0
 8006b62:	d100      	bne.n	8006b66 <_scanf_float+0x21a>
 8006b64:	e723      	b.n	80069ae <_scanf_float+0x62>
 8006b66:	9900      	ldr	r1, [sp, #0]
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	d100      	bne.n	8006b6e <_scanf_float+0x222>
 8006b6c:	e726      	b.n	80069bc <_scanf_float+0x70>
 8006b6e:	0591      	lsls	r1, r2, #22
 8006b70:	d404      	bmi.n	8006b7c <_scanf_float+0x230>
 8006b72:	9900      	ldr	r1, [sp, #0]
 8006b74:	9804      	ldr	r0, [sp, #16]
 8006b76:	9708      	str	r7, [sp, #32]
 8006b78:	1a09      	subs	r1, r1, r0
 8006b7a:	9107      	str	r1, [sp, #28]
 8006b7c:	4934      	ldr	r1, [pc, #208]	; (8006c50 <_scanf_float+0x304>)
 8006b7e:	400a      	ands	r2, r1
 8006b80:	21c0      	movs	r1, #192	; 0xc0
 8006b82:	0049      	lsls	r1, r1, #1
 8006b84:	430a      	orrs	r2, r1
 8006b86:	6032      	str	r2, [r6, #0]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	9200      	str	r2, [sp, #0]
 8006b8c:	e786      	b.n	8006a9c <_scanf_float+0x150>
 8006b8e:	2203      	movs	r2, #3
 8006b90:	e79e      	b.n	8006ad0 <_scanf_float+0x184>
 8006b92:	23c0      	movs	r3, #192	; 0xc0
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	0029      	movs	r1, r5
 8006b98:	58f3      	ldr	r3, [r6, r3]
 8006b9a:	9801      	ldr	r0, [sp, #4]
 8006b9c:	4798      	blx	r3
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d100      	bne.n	8006ba4 <_scanf_float+0x258>
 8006ba2:	e6f6      	b.n	8006992 <_scanf_float+0x46>
 8006ba4:	e703      	b.n	80069ae <_scanf_float+0x62>
 8006ba6:	3f01      	subs	r7, #1
 8006ba8:	5933      	ldr	r3, [r6, r4]
 8006baa:	002a      	movs	r2, r5
 8006bac:	7839      	ldrb	r1, [r7, #0]
 8006bae:	9801      	ldr	r0, [sp, #4]
 8006bb0:	4798      	blx	r3
 8006bb2:	6933      	ldr	r3, [r6, #16]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	6133      	str	r3, [r6, #16]
 8006bb8:	e707      	b.n	80069ca <_scanf_float+0x7e>
 8006bba:	1e63      	subs	r3, r4, #1
 8006bbc:	2b06      	cmp	r3, #6
 8006bbe:	d80e      	bhi.n	8006bde <_scanf_float+0x292>
 8006bc0:	9702      	str	r7, [sp, #8]
 8006bc2:	2c02      	cmp	r4, #2
 8006bc4:	d920      	bls.n	8006c08 <_scanf_float+0x2bc>
 8006bc6:	1be3      	subs	r3, r4, r7
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	9b02      	ldr	r3, [sp, #8]
 8006bce:	9a05      	ldr	r2, [sp, #20]
 8006bd0:	189b      	adds	r3, r3, r2
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d827      	bhi.n	8006c28 <_scanf_float+0x2dc>
 8006bd8:	3c03      	subs	r4, #3
 8006bda:	b2e4      	uxtb	r4, r4
 8006bdc:	1b3f      	subs	r7, r7, r4
 8006bde:	6833      	ldr	r3, [r6, #0]
 8006be0:	05da      	lsls	r2, r3, #23
 8006be2:	d554      	bpl.n	8006c8e <_scanf_float+0x342>
 8006be4:	055b      	lsls	r3, r3, #21
 8006be6:	d537      	bpl.n	8006c58 <_scanf_float+0x30c>
 8006be8:	24be      	movs	r4, #190	; 0xbe
 8006bea:	0064      	lsls	r4, r4, #1
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	429f      	cmp	r7, r3
 8006bf0:	d800      	bhi.n	8006bf4 <_scanf_float+0x2a8>
 8006bf2:	e6ee      	b.n	80069d2 <_scanf_float+0x86>
 8006bf4:	3f01      	subs	r7, #1
 8006bf6:	5933      	ldr	r3, [r6, r4]
 8006bf8:	002a      	movs	r2, r5
 8006bfa:	7839      	ldrb	r1, [r7, #0]
 8006bfc:	9801      	ldr	r0, [sp, #4]
 8006bfe:	4798      	blx	r3
 8006c00:	6933      	ldr	r3, [r6, #16]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	6133      	str	r3, [r6, #16]
 8006c06:	e7f1      	b.n	8006bec <_scanf_float+0x2a0>
 8006c08:	24be      	movs	r4, #190	; 0xbe
 8006c0a:	0064      	lsls	r4, r4, #1
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	429f      	cmp	r7, r3
 8006c10:	d800      	bhi.n	8006c14 <_scanf_float+0x2c8>
 8006c12:	e6de      	b.n	80069d2 <_scanf_float+0x86>
 8006c14:	3f01      	subs	r7, #1
 8006c16:	5933      	ldr	r3, [r6, r4]
 8006c18:	002a      	movs	r2, r5
 8006c1a:	7839      	ldrb	r1, [r7, #0]
 8006c1c:	9801      	ldr	r0, [sp, #4]
 8006c1e:	4798      	blx	r3
 8006c20:	6933      	ldr	r3, [r6, #16]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	6133      	str	r3, [r6, #16]
 8006c26:	e7f1      	b.n	8006c0c <_scanf_float+0x2c0>
 8006c28:	9b02      	ldr	r3, [sp, #8]
 8006c2a:	002a      	movs	r2, r5
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	7819      	ldrb	r1, [r3, #0]
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	23be      	movs	r3, #190	; 0xbe
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	58f3      	ldr	r3, [r6, r3]
 8006c38:	9801      	ldr	r0, [sp, #4]
 8006c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3c:	4798      	blx	r3
 8006c3e:	6933      	ldr	r3, [r6, #16]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	6133      	str	r3, [r6, #16]
 8006c44:	e7c2      	b.n	8006bcc <_scanf_float+0x280>
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	fffffeff 	.word	0xfffffeff
 8006c4c:	fffffe7f 	.word	0xfffffe7f
 8006c50:	fffff87f 	.word	0xfffff87f
 8006c54:	fffffd7f 	.word	0xfffffd7f
 8006c58:	6933      	ldr	r3, [r6, #16]
 8006c5a:	1e7c      	subs	r4, r7, #1
 8006c5c:	7821      	ldrb	r1, [r4, #0]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	6133      	str	r3, [r6, #16]
 8006c62:	2965      	cmp	r1, #101	; 0x65
 8006c64:	d00c      	beq.n	8006c80 <_scanf_float+0x334>
 8006c66:	2945      	cmp	r1, #69	; 0x45
 8006c68:	d00a      	beq.n	8006c80 <_scanf_float+0x334>
 8006c6a:	23be      	movs	r3, #190	; 0xbe
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	58f3      	ldr	r3, [r6, r3]
 8006c70:	002a      	movs	r2, r5
 8006c72:	9801      	ldr	r0, [sp, #4]
 8006c74:	4798      	blx	r3
 8006c76:	6933      	ldr	r3, [r6, #16]
 8006c78:	1ebc      	subs	r4, r7, #2
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	7821      	ldrb	r1, [r4, #0]
 8006c7e:	6133      	str	r3, [r6, #16]
 8006c80:	23be      	movs	r3, #190	; 0xbe
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	002a      	movs	r2, r5
 8006c86:	58f3      	ldr	r3, [r6, r3]
 8006c88:	9801      	ldr	r0, [sp, #4]
 8006c8a:	4798      	blx	r3
 8006c8c:	0027      	movs	r7, r4
 8006c8e:	6832      	ldr	r2, [r6, #0]
 8006c90:	2310      	movs	r3, #16
 8006c92:	0011      	movs	r1, r2
 8006c94:	4019      	ands	r1, r3
 8006c96:	9102      	str	r1, [sp, #8]
 8006c98:	421a      	tst	r2, r3
 8006c9a:	d158      	bne.n	8006d4e <_scanf_float+0x402>
 8006c9c:	23c0      	movs	r3, #192	; 0xc0
 8006c9e:	7039      	strb	r1, [r7, #0]
 8006ca0:	6832      	ldr	r2, [r6, #0]
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2280      	movs	r2, #128	; 0x80
 8006ca8:	00d2      	lsls	r2, r2, #3
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d11d      	bne.n	8006cea <_scanf_float+0x39e>
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	9a00      	ldr	r2, [sp, #0]
 8006cb2:	9900      	ldr	r1, [sp, #0]
 8006cb4:	1a9a      	subs	r2, r3, r2
 8006cb6:	428b      	cmp	r3, r1
 8006cb8:	d124      	bne.n	8006d04 <_scanf_float+0x3b8>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	9903      	ldr	r1, [sp, #12]
 8006cbe:	9801      	ldr	r0, [sp, #4]
 8006cc0:	f000 feac 	bl	8007a1c <_strtod_r>
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	000d      	movs	r5, r1
 8006cc8:	6831      	ldr	r1, [r6, #0]
 8006cca:	0004      	movs	r4, r0
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	078a      	lsls	r2, r1, #30
 8006cd0:	d525      	bpl.n	8006d1e <_scanf_float+0x3d2>
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	9906      	ldr	r1, [sp, #24]
 8006cd6:	600a      	str	r2, [r1, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	601c      	str	r4, [r3, #0]
 8006cdc:	605d      	str	r5, [r3, #4]
 8006cde:	68f3      	ldr	r3, [r6, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60f3      	str	r3, [r6, #12]
 8006ce4:	9802      	ldr	r0, [sp, #8]
 8006ce6:	b00b      	add	sp, #44	; 0x2c
 8006ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cea:	9b07      	ldr	r3, [sp, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0e4      	beq.n	8006cba <_scanf_float+0x36e>
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	9a02      	ldr	r2, [sp, #8]
 8006cf4:	1c59      	adds	r1, r3, #1
 8006cf6:	9801      	ldr	r0, [sp, #4]
 8006cf8:	230a      	movs	r3, #10
 8006cfa:	f000 ff25 	bl	8007b48 <_strtol_r>
 8006cfe:	9b07      	ldr	r3, [sp, #28]
 8006d00:	9f08      	ldr	r7, [sp, #32]
 8006d02:	1ac2      	subs	r2, r0, r3
 8006d04:	0033      	movs	r3, r6
 8006d06:	3370      	adds	r3, #112	; 0x70
 8006d08:	33ff      	adds	r3, #255	; 0xff
 8006d0a:	429f      	cmp	r7, r3
 8006d0c:	d302      	bcc.n	8006d14 <_scanf_float+0x3c8>
 8006d0e:	0037      	movs	r7, r6
 8006d10:	376f      	adds	r7, #111	; 0x6f
 8006d12:	37ff      	adds	r7, #255	; 0xff
 8006d14:	0038      	movs	r0, r7
 8006d16:	490f      	ldr	r1, [pc, #60]	; (8006d54 <_scanf_float+0x408>)
 8006d18:	f000 f824 	bl	8006d64 <siprintf>
 8006d1c:	e7cd      	b.n	8006cba <_scanf_float+0x36e>
 8006d1e:	1d1a      	adds	r2, r3, #4
 8006d20:	0749      	lsls	r1, r1, #29
 8006d22:	d4d7      	bmi.n	8006cd4 <_scanf_float+0x388>
 8006d24:	9906      	ldr	r1, [sp, #24]
 8006d26:	0020      	movs	r0, r4
 8006d28:	600a      	str	r2, [r1, #0]
 8006d2a:	681f      	ldr	r7, [r3, #0]
 8006d2c:	0022      	movs	r2, r4
 8006d2e:	002b      	movs	r3, r5
 8006d30:	0029      	movs	r1, r5
 8006d32:	f7fb fae9 	bl	8002308 <__aeabi_dcmpun>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d004      	beq.n	8006d44 <_scanf_float+0x3f8>
 8006d3a:	4807      	ldr	r0, [pc, #28]	; (8006d58 <_scanf_float+0x40c>)
 8006d3c:	f000 f80e 	bl	8006d5c <nanf>
 8006d40:	6038      	str	r0, [r7, #0]
 8006d42:	e7cc      	b.n	8006cde <_scanf_float+0x392>
 8006d44:	0020      	movs	r0, r4
 8006d46:	0029      	movs	r1, r5
 8006d48:	f7fb fbd0 	bl	80024ec <__aeabi_d2f>
 8006d4c:	e7f8      	b.n	8006d40 <_scanf_float+0x3f4>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e640      	b.n	80069d4 <_scanf_float+0x88>
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	0800abc4 	.word	0x0800abc4
 8006d58:	0800afe0 	.word	0x0800afe0

08006d5c <nanf>:
 8006d5c:	4800      	ldr	r0, [pc, #0]	; (8006d60 <nanf+0x4>)
 8006d5e:	4770      	bx	lr
 8006d60:	7fc00000 	.word	0x7fc00000

08006d64 <siprintf>:
 8006d64:	b40e      	push	{r1, r2, r3}
 8006d66:	b500      	push	{lr}
 8006d68:	490b      	ldr	r1, [pc, #44]	; (8006d98 <siprintf+0x34>)
 8006d6a:	b09c      	sub	sp, #112	; 0x70
 8006d6c:	ab1d      	add	r3, sp, #116	; 0x74
 8006d6e:	9002      	str	r0, [sp, #8]
 8006d70:	9006      	str	r0, [sp, #24]
 8006d72:	9107      	str	r1, [sp, #28]
 8006d74:	9104      	str	r1, [sp, #16]
 8006d76:	4809      	ldr	r0, [pc, #36]	; (8006d9c <siprintf+0x38>)
 8006d78:	4909      	ldr	r1, [pc, #36]	; (8006da0 <siprintf+0x3c>)
 8006d7a:	cb04      	ldmia	r3!, {r2}
 8006d7c:	9105      	str	r1, [sp, #20]
 8006d7e:	6800      	ldr	r0, [r0, #0]
 8006d80:	a902      	add	r1, sp, #8
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	f002 ff16 	bl	8009bb4 <_svfiprintf_r>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9a02      	ldr	r2, [sp, #8]
 8006d8c:	7013      	strb	r3, [r2, #0]
 8006d8e:	b01c      	add	sp, #112	; 0x70
 8006d90:	bc08      	pop	{r3}
 8006d92:	b003      	add	sp, #12
 8006d94:	4718      	bx	r3
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	7fffffff 	.word	0x7fffffff
 8006d9c:	20000020 	.word	0x20000020
 8006da0:	ffff0208 	.word	0xffff0208

08006da4 <sulp>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	0016      	movs	r6, r2
 8006da8:	000d      	movs	r5, r1
 8006daa:	f002 fca7 	bl	80096fc <__ulp>
 8006dae:	2e00      	cmp	r6, #0
 8006db0:	d00d      	beq.n	8006dce <sulp+0x2a>
 8006db2:	236b      	movs	r3, #107	; 0x6b
 8006db4:	006a      	lsls	r2, r5, #1
 8006db6:	0d52      	lsrs	r2, r2, #21
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	dd07      	ble.n	8006dce <sulp+0x2a>
 8006dbe:	2400      	movs	r4, #0
 8006dc0:	4a03      	ldr	r2, [pc, #12]	; (8006dd0 <sulp+0x2c>)
 8006dc2:	051b      	lsls	r3, r3, #20
 8006dc4:	189d      	adds	r5, r3, r2
 8006dc6:	002b      	movs	r3, r5
 8006dc8:	0022      	movs	r2, r4
 8006dca:	f7fa fc9f 	bl	800170c <__aeabi_dmul>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	3ff00000 	.word	0x3ff00000

08006dd4 <_strtod_l>:
 8006dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dd6:	001d      	movs	r5, r3
 8006dd8:	2300      	movs	r3, #0
 8006dda:	b0a7      	sub	sp, #156	; 0x9c
 8006ddc:	9322      	str	r3, [sp, #136]	; 0x88
 8006dde:	4bae      	ldr	r3, [pc, #696]	; (8007098 <_strtod_l+0x2c4>)
 8006de0:	9005      	str	r0, [sp, #20]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	9108      	str	r1, [sp, #32]
 8006de6:	0018      	movs	r0, r3
 8006de8:	9307      	str	r3, [sp, #28]
 8006dea:	921d      	str	r2, [sp, #116]	; 0x74
 8006dec:	f7f9 f98c 	bl	8000108 <strlen>
 8006df0:	2600      	movs	r6, #0
 8006df2:	0004      	movs	r4, r0
 8006df4:	2700      	movs	r7, #0
 8006df6:	9b08      	ldr	r3, [sp, #32]
 8006df8:	9321      	str	r3, [sp, #132]	; 0x84
 8006dfa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dfc:	7813      	ldrb	r3, [r2, #0]
 8006dfe:	2b2b      	cmp	r3, #43	; 0x2b
 8006e00:	d058      	beq.n	8006eb4 <_strtod_l+0xe0>
 8006e02:	d844      	bhi.n	8006e8e <_strtod_l+0xba>
 8006e04:	2b0d      	cmp	r3, #13
 8006e06:	d83d      	bhi.n	8006e84 <_strtod_l+0xb0>
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d83d      	bhi.n	8006e88 <_strtod_l+0xb4>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d047      	beq.n	8006ea0 <_strtod_l+0xcc>
 8006e10:	2300      	movs	r3, #0
 8006e12:	9310      	str	r3, [sp, #64]	; 0x40
 8006e14:	2200      	movs	r2, #0
 8006e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e18:	920a      	str	r2, [sp, #40]	; 0x28
 8006e1a:	9306      	str	r3, [sp, #24]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b30      	cmp	r3, #48	; 0x30
 8006e20:	d000      	beq.n	8006e24 <_strtod_l+0x50>
 8006e22:	e083      	b.n	8006f2c <_strtod_l+0x158>
 8006e24:	9b06      	ldr	r3, [sp, #24]
 8006e26:	3220      	adds	r2, #32
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	4393      	bics	r3, r2
 8006e2c:	2b58      	cmp	r3, #88	; 0x58
 8006e2e:	d000      	beq.n	8006e32 <_strtod_l+0x5e>
 8006e30:	e072      	b.n	8006f18 <_strtod_l+0x144>
 8006e32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e34:	9502      	str	r5, [sp, #8]
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	ab22      	add	r3, sp, #136	; 0x88
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	4a97      	ldr	r2, [pc, #604]	; (800709c <_strtod_l+0x2c8>)
 8006e3e:	ab23      	add	r3, sp, #140	; 0x8c
 8006e40:	9805      	ldr	r0, [sp, #20]
 8006e42:	a921      	add	r1, sp, #132	; 0x84
 8006e44:	f001 fd98 	bl	8008978 <__gethex>
 8006e48:	2307      	movs	r3, #7
 8006e4a:	0005      	movs	r5, r0
 8006e4c:	0004      	movs	r4, r0
 8006e4e:	401d      	ands	r5, r3
 8006e50:	4218      	tst	r0, r3
 8006e52:	d006      	beq.n	8006e62 <_strtod_l+0x8e>
 8006e54:	2d06      	cmp	r5, #6
 8006e56:	d12f      	bne.n	8006eb8 <_strtod_l+0xe4>
 8006e58:	9b06      	ldr	r3, [sp, #24]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	9321      	str	r3, [sp, #132]	; 0x84
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9310      	str	r3, [sp, #64]	; 0x40
 8006e62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <_strtod_l+0x9a>
 8006e68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e6a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01c      	beq.n	8006eae <_strtod_l+0xda>
 8006e74:	2380      	movs	r3, #128	; 0x80
 8006e76:	0032      	movs	r2, r6
 8006e78:	061b      	lsls	r3, r3, #24
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	0010      	movs	r0, r2
 8006e7e:	0019      	movs	r1, r3
 8006e80:	b027      	add	sp, #156	; 0x9c
 8006e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d1c3      	bne.n	8006e10 <_strtod_l+0x3c>
 8006e88:	3201      	adds	r2, #1
 8006e8a:	9221      	str	r2, [sp, #132]	; 0x84
 8006e8c:	e7b5      	b.n	8006dfa <_strtod_l+0x26>
 8006e8e:	2b2d      	cmp	r3, #45	; 0x2d
 8006e90:	d1be      	bne.n	8006e10 <_strtod_l+0x3c>
 8006e92:	3b2c      	subs	r3, #44	; 0x2c
 8006e94:	9310      	str	r3, [sp, #64]	; 0x40
 8006e96:	1c53      	adds	r3, r2, #1
 8006e98:	9321      	str	r3, [sp, #132]	; 0x84
 8006e9a:	7853      	ldrb	r3, [r2, #1]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1b9      	bne.n	8006e14 <_strtod_l+0x40>
 8006ea0:	9b08      	ldr	r3, [sp, #32]
 8006ea2:	9321      	str	r3, [sp, #132]	; 0x84
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1dc      	bne.n	8006e68 <_strtod_l+0x94>
 8006eae:	0032      	movs	r2, r6
 8006eb0:	003b      	movs	r3, r7
 8006eb2:	e7e3      	b.n	8006e7c <_strtod_l+0xa8>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e7ed      	b.n	8006e94 <_strtod_l+0xc0>
 8006eb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006eba:	2a00      	cmp	r2, #0
 8006ebc:	d007      	beq.n	8006ece <_strtod_l+0xfa>
 8006ebe:	2135      	movs	r1, #53	; 0x35
 8006ec0:	a824      	add	r0, sp, #144	; 0x90
 8006ec2:	f002 fd1a 	bl	80098fa <__copybits>
 8006ec6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006ec8:	9805      	ldr	r0, [sp, #20]
 8006eca:	f002 f8d5 	bl	8009078 <_Bfree>
 8006ece:	1e68      	subs	r0, r5, #1
 8006ed0:	2805      	cmp	r0, #5
 8006ed2:	d806      	bhi.n	8006ee2 <_strtod_l+0x10e>
 8006ed4:	f7f9 f920 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006ed8:	1c190b0e 	.word	0x1c190b0e
 8006edc:	030e      	.short	0x030e
 8006ede:	2700      	movs	r7, #0
 8006ee0:	003e      	movs	r6, r7
 8006ee2:	0723      	lsls	r3, r4, #28
 8006ee4:	d5bd      	bpl.n	8006e62 <_strtod_l+0x8e>
 8006ee6:	2380      	movs	r3, #128	; 0x80
 8006ee8:	061b      	lsls	r3, r3, #24
 8006eea:	431f      	orrs	r7, r3
 8006eec:	e7b9      	b.n	8006e62 <_strtod_l+0x8e>
 8006eee:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006ef0:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006ef2:	e7f6      	b.n	8006ee2 <_strtod_l+0x10e>
 8006ef4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006ef6:	4a6a      	ldr	r2, [pc, #424]	; (80070a0 <_strtod_l+0x2cc>)
 8006ef8:	496a      	ldr	r1, [pc, #424]	; (80070a4 <_strtod_l+0x2d0>)
 8006efa:	401a      	ands	r2, r3
 8006efc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006efe:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006f00:	185b      	adds	r3, r3, r1
 8006f02:	051b      	lsls	r3, r3, #20
 8006f04:	431a      	orrs	r2, r3
 8006f06:	0017      	movs	r7, r2
 8006f08:	e7eb      	b.n	8006ee2 <_strtod_l+0x10e>
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	4f66      	ldr	r7, [pc, #408]	; (80070a8 <_strtod_l+0x2d4>)
 8006f0e:	e7e8      	b.n	8006ee2 <_strtod_l+0x10e>
 8006f10:	2601      	movs	r6, #1
 8006f12:	4f66      	ldr	r7, [pc, #408]	; (80070ac <_strtod_l+0x2d8>)
 8006f14:	4276      	negs	r6, r6
 8006f16:	e7e4      	b.n	8006ee2 <_strtod_l+0x10e>
 8006f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	9221      	str	r2, [sp, #132]	; 0x84
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b30      	cmp	r3, #48	; 0x30
 8006f22:	d0f9      	beq.n	8006f18 <_strtod_l+0x144>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d09c      	beq.n	8006e62 <_strtod_l+0x8e>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f2e:	220a      	movs	r2, #10
 8006f30:	9311      	str	r3, [sp, #68]	; 0x44
 8006f32:	2300      	movs	r3, #0
 8006f34:	930e      	str	r3, [sp, #56]	; 0x38
 8006f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f38:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006f3c:	7805      	ldrb	r5, [r0, #0]
 8006f3e:	002b      	movs	r3, r5
 8006f40:	3b30      	subs	r3, #48	; 0x30
 8006f42:	b2d9      	uxtb	r1, r3
 8006f44:	2909      	cmp	r1, #9
 8006f46:	d927      	bls.n	8006f98 <_strtod_l+0x1c4>
 8006f48:	0022      	movs	r2, r4
 8006f4a:	9907      	ldr	r1, [sp, #28]
 8006f4c:	f002 ff4a 	bl	8009de4 <strncmp>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d033      	beq.n	8006fbc <_strtod_l+0x1e8>
 8006f54:	2000      	movs	r0, #0
 8006f56:	002b      	movs	r3, r5
 8006f58:	4684      	mov	ip, r0
 8006f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f5c:	900c      	str	r0, [sp, #48]	; 0x30
 8006f5e:	9206      	str	r2, [sp, #24]
 8006f60:	2220      	movs	r2, #32
 8006f62:	0019      	movs	r1, r3
 8006f64:	4391      	bics	r1, r2
 8006f66:	000a      	movs	r2, r1
 8006f68:	2100      	movs	r1, #0
 8006f6a:	9107      	str	r1, [sp, #28]
 8006f6c:	2a45      	cmp	r2, #69	; 0x45
 8006f6e:	d000      	beq.n	8006f72 <_strtod_l+0x19e>
 8006f70:	e0c5      	b.n	80070fe <_strtod_l+0x32a>
 8006f72:	9b06      	ldr	r3, [sp, #24]
 8006f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f76:	4303      	orrs	r3, r0
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	428b      	cmp	r3, r1
 8006f7c:	d090      	beq.n	8006ea0 <_strtod_l+0xcc>
 8006f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f80:	9308      	str	r3, [sp, #32]
 8006f82:	3301      	adds	r3, #1
 8006f84:	9321      	str	r3, [sp, #132]	; 0x84
 8006f86:	9b08      	ldr	r3, [sp, #32]
 8006f88:	785b      	ldrb	r3, [r3, #1]
 8006f8a:	2b2b      	cmp	r3, #43	; 0x2b
 8006f8c:	d075      	beq.n	800707a <_strtod_l+0x2a6>
 8006f8e:	000c      	movs	r4, r1
 8006f90:	2b2d      	cmp	r3, #45	; 0x2d
 8006f92:	d178      	bne.n	8007086 <_strtod_l+0x2b2>
 8006f94:	2401      	movs	r4, #1
 8006f96:	e071      	b.n	800707c <_strtod_l+0x2a8>
 8006f98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f9a:	2908      	cmp	r1, #8
 8006f9c:	dc09      	bgt.n	8006fb2 <_strtod_l+0x1de>
 8006f9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fa0:	4351      	muls	r1, r2
 8006fa2:	185b      	adds	r3, r3, r1
 8006fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa8:	3001      	adds	r0, #1
 8006faa:	3301      	adds	r3, #1
 8006fac:	9309      	str	r3, [sp, #36]	; 0x24
 8006fae:	9021      	str	r0, [sp, #132]	; 0x84
 8006fb0:	e7c3      	b.n	8006f3a <_strtod_l+0x166>
 8006fb2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006fb4:	4351      	muls	r1, r2
 8006fb6:	185b      	adds	r3, r3, r1
 8006fb8:	930e      	str	r3, [sp, #56]	; 0x38
 8006fba:	e7f4      	b.n	8006fa6 <_strtod_l+0x1d2>
 8006fbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc0:	191c      	adds	r4, r3, r4
 8006fc2:	9421      	str	r4, [sp, #132]	; 0x84
 8006fc4:	7823      	ldrb	r3, [r4, #0]
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	d039      	beq.n	800703e <_strtod_l+0x26a>
 8006fca:	900c      	str	r0, [sp, #48]	; 0x30
 8006fcc:	9206      	str	r2, [sp, #24]
 8006fce:	001a      	movs	r2, r3
 8006fd0:	3a30      	subs	r2, #48	; 0x30
 8006fd2:	2a09      	cmp	r2, #9
 8006fd4:	d912      	bls.n	8006ffc <_strtod_l+0x228>
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4694      	mov	ip, r2
 8006fda:	e7c1      	b.n	8006f60 <_strtod_l+0x18c>
 8006fdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fde:	3001      	adds	r0, #1
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	9221      	str	r2, [sp, #132]	; 0x84
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b30      	cmp	r3, #48	; 0x30
 8006fe8:	d0f8      	beq.n	8006fdc <_strtod_l+0x208>
 8006fea:	001a      	movs	r2, r3
 8006fec:	3a31      	subs	r2, #49	; 0x31
 8006fee:	2a08      	cmp	r2, #8
 8006ff0:	d83e      	bhi.n	8007070 <_strtod_l+0x29c>
 8006ff2:	900c      	str	r0, [sp, #48]	; 0x30
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ff8:	9006      	str	r0, [sp, #24]
 8006ffa:	9211      	str	r2, [sp, #68]	; 0x44
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	9906      	ldr	r1, [sp, #24]
 8007000:	1c44      	adds	r4, r0, #1
 8007002:	3a30      	subs	r2, #48	; 0x30
 8007004:	2b30      	cmp	r3, #48	; 0x30
 8007006:	d013      	beq.n	8007030 <_strtod_l+0x25c>
 8007008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800700a:	191b      	adds	r3, r3, r4
 800700c:	930c      	str	r3, [sp, #48]	; 0x30
 800700e:	1844      	adds	r4, r0, r1
 8007010:	000b      	movs	r3, r1
 8007012:	210a      	movs	r1, #10
 8007014:	429c      	cmp	r4, r3
 8007016:	d114      	bne.n	8007042 <_strtod_l+0x26e>
 8007018:	9b06      	ldr	r3, [sp, #24]
 800701a:	1c59      	adds	r1, r3, #1
 800701c:	1809      	adds	r1, r1, r0
 800701e:	1818      	adds	r0, r3, r0
 8007020:	2808      	cmp	r0, #8
 8007022:	dc1c      	bgt.n	800705e <_strtod_l+0x28a>
 8007024:	230a      	movs	r3, #10
 8007026:	2400      	movs	r4, #0
 8007028:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800702a:	4343      	muls	r3, r0
 800702c:	18d3      	adds	r3, r2, r3
 800702e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007032:	0020      	movs	r0, r4
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	9221      	str	r2, [sp, #132]	; 0x84
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	9106      	str	r1, [sp, #24]
 800703c:	e7c7      	b.n	8006fce <_strtod_l+0x1fa>
 800703e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007040:	e7d1      	b.n	8006fe6 <_strtod_l+0x212>
 8007042:	2b08      	cmp	r3, #8
 8007044:	dc04      	bgt.n	8007050 <_strtod_l+0x27c>
 8007046:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007048:	434d      	muls	r5, r1
 800704a:	950b      	str	r5, [sp, #44]	; 0x2c
 800704c:	3301      	adds	r3, #1
 800704e:	e7e1      	b.n	8007014 <_strtod_l+0x240>
 8007050:	1c5d      	adds	r5, r3, #1
 8007052:	2d10      	cmp	r5, #16
 8007054:	dcfa      	bgt.n	800704c <_strtod_l+0x278>
 8007056:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007058:	434d      	muls	r5, r1
 800705a:	950e      	str	r5, [sp, #56]	; 0x38
 800705c:	e7f6      	b.n	800704c <_strtod_l+0x278>
 800705e:	2400      	movs	r4, #0
 8007060:	2910      	cmp	r1, #16
 8007062:	dce5      	bgt.n	8007030 <_strtod_l+0x25c>
 8007064:	230a      	movs	r3, #10
 8007066:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007068:	4343      	muls	r3, r0
 800706a:	18d3      	adds	r3, r2, r3
 800706c:	930e      	str	r3, [sp, #56]	; 0x38
 800706e:	e7df      	b.n	8007030 <_strtod_l+0x25c>
 8007070:	2200      	movs	r2, #0
 8007072:	920c      	str	r2, [sp, #48]	; 0x30
 8007074:	9206      	str	r2, [sp, #24]
 8007076:	3201      	adds	r2, #1
 8007078:	e7ae      	b.n	8006fd8 <_strtod_l+0x204>
 800707a:	2400      	movs	r4, #0
 800707c:	9b08      	ldr	r3, [sp, #32]
 800707e:	3302      	adds	r3, #2
 8007080:	9321      	str	r3, [sp, #132]	; 0x84
 8007082:	9b08      	ldr	r3, [sp, #32]
 8007084:	789b      	ldrb	r3, [r3, #2]
 8007086:	001a      	movs	r2, r3
 8007088:	3a30      	subs	r2, #48	; 0x30
 800708a:	2a09      	cmp	r2, #9
 800708c:	d914      	bls.n	80070b8 <_strtod_l+0x2e4>
 800708e:	9a08      	ldr	r2, [sp, #32]
 8007090:	9221      	str	r2, [sp, #132]	; 0x84
 8007092:	2200      	movs	r2, #0
 8007094:	e032      	b.n	80070fc <_strtod_l+0x328>
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	0800ae20 	.word	0x0800ae20
 800709c:	0800abcc 	.word	0x0800abcc
 80070a0:	ffefffff 	.word	0xffefffff
 80070a4:	00000433 	.word	0x00000433
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	7fffffff 	.word	0x7fffffff
 80070b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	9221      	str	r2, [sp, #132]	; 0x84
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b30      	cmp	r3, #48	; 0x30
 80070ba:	d0f9      	beq.n	80070b0 <_strtod_l+0x2dc>
 80070bc:	2200      	movs	r2, #0
 80070be:	9207      	str	r2, [sp, #28]
 80070c0:	001a      	movs	r2, r3
 80070c2:	3a31      	subs	r2, #49	; 0x31
 80070c4:	2a08      	cmp	r2, #8
 80070c6:	d81a      	bhi.n	80070fe <_strtod_l+0x32a>
 80070c8:	3b30      	subs	r3, #48	; 0x30
 80070ca:	001a      	movs	r2, r3
 80070cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ce:	9307      	str	r3, [sp, #28]
 80070d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d2:	1c59      	adds	r1, r3, #1
 80070d4:	9121      	str	r1, [sp, #132]	; 0x84
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	001d      	movs	r5, r3
 80070da:	3d30      	subs	r5, #48	; 0x30
 80070dc:	2d09      	cmp	r5, #9
 80070de:	d939      	bls.n	8007154 <_strtod_l+0x380>
 80070e0:	9d07      	ldr	r5, [sp, #28]
 80070e2:	1b49      	subs	r1, r1, r5
 80070e4:	4daf      	ldr	r5, [pc, #700]	; (80073a4 <_strtod_l+0x5d0>)
 80070e6:	9507      	str	r5, [sp, #28]
 80070e8:	2908      	cmp	r1, #8
 80070ea:	dc03      	bgt.n	80070f4 <_strtod_l+0x320>
 80070ec:	9207      	str	r2, [sp, #28]
 80070ee:	42aa      	cmp	r2, r5
 80070f0:	dd00      	ble.n	80070f4 <_strtod_l+0x320>
 80070f2:	9507      	str	r5, [sp, #28]
 80070f4:	2c00      	cmp	r4, #0
 80070f6:	d002      	beq.n	80070fe <_strtod_l+0x32a>
 80070f8:	9a07      	ldr	r2, [sp, #28]
 80070fa:	4252      	negs	r2, r2
 80070fc:	9207      	str	r2, [sp, #28]
 80070fe:	9a06      	ldr	r2, [sp, #24]
 8007100:	2a00      	cmp	r2, #0
 8007102:	d14b      	bne.n	800719c <_strtod_l+0x3c8>
 8007104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007106:	4310      	orrs	r0, r2
 8007108:	d000      	beq.n	800710c <_strtod_l+0x338>
 800710a:	e6aa      	b.n	8006e62 <_strtod_l+0x8e>
 800710c:	4662      	mov	r2, ip
 800710e:	2a00      	cmp	r2, #0
 8007110:	d000      	beq.n	8007114 <_strtod_l+0x340>
 8007112:	e6c5      	b.n	8006ea0 <_strtod_l+0xcc>
 8007114:	2b69      	cmp	r3, #105	; 0x69
 8007116:	d025      	beq.n	8007164 <_strtod_l+0x390>
 8007118:	dc21      	bgt.n	800715e <_strtod_l+0x38a>
 800711a:	2b49      	cmp	r3, #73	; 0x49
 800711c:	d022      	beq.n	8007164 <_strtod_l+0x390>
 800711e:	2b4e      	cmp	r3, #78	; 0x4e
 8007120:	d000      	beq.n	8007124 <_strtod_l+0x350>
 8007122:	e6bd      	b.n	8006ea0 <_strtod_l+0xcc>
 8007124:	49a0      	ldr	r1, [pc, #640]	; (80073a8 <_strtod_l+0x5d4>)
 8007126:	a821      	add	r0, sp, #132	; 0x84
 8007128:	f001 fe74 	bl	8008e14 <__match>
 800712c:	2800      	cmp	r0, #0
 800712e:	d100      	bne.n	8007132 <_strtod_l+0x35e>
 8007130:	e6b6      	b.n	8006ea0 <_strtod_l+0xcc>
 8007132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b28      	cmp	r3, #40	; 0x28
 8007138:	d12a      	bne.n	8007190 <_strtod_l+0x3bc>
 800713a:	499c      	ldr	r1, [pc, #624]	; (80073ac <_strtod_l+0x5d8>)
 800713c:	aa24      	add	r2, sp, #144	; 0x90
 800713e:	a821      	add	r0, sp, #132	; 0x84
 8007140:	f001 fe7c 	bl	8008e3c <__hexnan>
 8007144:	2805      	cmp	r0, #5
 8007146:	d123      	bne.n	8007190 <_strtod_l+0x3bc>
 8007148:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800714a:	4a99      	ldr	r2, [pc, #612]	; (80073b0 <_strtod_l+0x5dc>)
 800714c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800714e:	431a      	orrs	r2, r3
 8007150:	0017      	movs	r7, r2
 8007152:	e686      	b.n	8006e62 <_strtod_l+0x8e>
 8007154:	210a      	movs	r1, #10
 8007156:	434a      	muls	r2, r1
 8007158:	18d2      	adds	r2, r2, r3
 800715a:	3a30      	subs	r2, #48	; 0x30
 800715c:	e7b8      	b.n	80070d0 <_strtod_l+0x2fc>
 800715e:	2b6e      	cmp	r3, #110	; 0x6e
 8007160:	d0e0      	beq.n	8007124 <_strtod_l+0x350>
 8007162:	e69d      	b.n	8006ea0 <_strtod_l+0xcc>
 8007164:	4993      	ldr	r1, [pc, #588]	; (80073b4 <_strtod_l+0x5e0>)
 8007166:	a821      	add	r0, sp, #132	; 0x84
 8007168:	f001 fe54 	bl	8008e14 <__match>
 800716c:	2800      	cmp	r0, #0
 800716e:	d100      	bne.n	8007172 <_strtod_l+0x39e>
 8007170:	e696      	b.n	8006ea0 <_strtod_l+0xcc>
 8007172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007174:	4990      	ldr	r1, [pc, #576]	; (80073b8 <_strtod_l+0x5e4>)
 8007176:	3b01      	subs	r3, #1
 8007178:	a821      	add	r0, sp, #132	; 0x84
 800717a:	9321      	str	r3, [sp, #132]	; 0x84
 800717c:	f001 fe4a 	bl	8008e14 <__match>
 8007180:	2800      	cmp	r0, #0
 8007182:	d102      	bne.n	800718a <_strtod_l+0x3b6>
 8007184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007186:	3301      	adds	r3, #1
 8007188:	9321      	str	r3, [sp, #132]	; 0x84
 800718a:	2600      	movs	r6, #0
 800718c:	4f88      	ldr	r7, [pc, #544]	; (80073b0 <_strtod_l+0x5dc>)
 800718e:	e668      	b.n	8006e62 <_strtod_l+0x8e>
 8007190:	488a      	ldr	r0, [pc, #552]	; (80073bc <_strtod_l+0x5e8>)
 8007192:	f002 fe0f 	bl	8009db4 <nan>
 8007196:	0006      	movs	r6, r0
 8007198:	000f      	movs	r7, r1
 800719a:	e662      	b.n	8006e62 <_strtod_l+0x8e>
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	930a      	str	r3, [sp, #40]	; 0x28
 80071a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <_strtod_l+0x3da>
 80071aa:	9b06      	ldr	r3, [sp, #24]
 80071ac:	9309      	str	r3, [sp, #36]	; 0x24
 80071ae:	9c06      	ldr	r4, [sp, #24]
 80071b0:	2c10      	cmp	r4, #16
 80071b2:	dd00      	ble.n	80071b6 <_strtod_l+0x3e2>
 80071b4:	2410      	movs	r4, #16
 80071b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071b8:	f7fb f92a 	bl	8002410 <__aeabi_ui2d>
 80071bc:	9b06      	ldr	r3, [sp, #24]
 80071be:	0006      	movs	r6, r0
 80071c0:	000f      	movs	r7, r1
 80071c2:	2b09      	cmp	r3, #9
 80071c4:	dd15      	ble.n	80071f2 <_strtod_l+0x41e>
 80071c6:	0022      	movs	r2, r4
 80071c8:	4b7d      	ldr	r3, [pc, #500]	; (80073c0 <_strtod_l+0x5ec>)
 80071ca:	3a09      	subs	r2, #9
 80071cc:	00d2      	lsls	r2, r2, #3
 80071ce:	189b      	adds	r3, r3, r2
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f7fa fa9a 	bl	800170c <__aeabi_dmul>
 80071d8:	0006      	movs	r6, r0
 80071da:	980e      	ldr	r0, [sp, #56]	; 0x38
 80071dc:	000f      	movs	r7, r1
 80071de:	f7fb f917 	bl	8002410 <__aeabi_ui2d>
 80071e2:	0002      	movs	r2, r0
 80071e4:	000b      	movs	r3, r1
 80071e6:	0030      	movs	r0, r6
 80071e8:	0039      	movs	r1, r7
 80071ea:	f7f9 fb1f 	bl	800082c <__aeabi_dadd>
 80071ee:	0006      	movs	r6, r0
 80071f0:	000f      	movs	r7, r1
 80071f2:	9b06      	ldr	r3, [sp, #24]
 80071f4:	2b0f      	cmp	r3, #15
 80071f6:	dc39      	bgt.n	800726c <_strtod_l+0x498>
 80071f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d100      	bne.n	8007200 <_strtod_l+0x42c>
 80071fe:	e630      	b.n	8006e62 <_strtod_l+0x8e>
 8007200:	dd24      	ble.n	800724c <_strtod_l+0x478>
 8007202:	2b16      	cmp	r3, #22
 8007204:	dc09      	bgt.n	800721a <_strtod_l+0x446>
 8007206:	00dd      	lsls	r5, r3, #3
 8007208:	0032      	movs	r2, r6
 800720a:	003b      	movs	r3, r7
 800720c:	4c6c      	ldr	r4, [pc, #432]	; (80073c0 <_strtod_l+0x5ec>)
 800720e:	1964      	adds	r4, r4, r5
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	6861      	ldr	r1, [r4, #4]
 8007214:	f7fa fa7a 	bl	800170c <__aeabi_dmul>
 8007218:	e7bd      	b.n	8007196 <_strtod_l+0x3c2>
 800721a:	2325      	movs	r3, #37	; 0x25
 800721c:	9a06      	ldr	r2, [sp, #24]
 800721e:	1a9b      	subs	r3, r3, r2
 8007220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007222:	4293      	cmp	r3, r2
 8007224:	db22      	blt.n	800726c <_strtod_l+0x498>
 8007226:	240f      	movs	r4, #15
 8007228:	9b06      	ldr	r3, [sp, #24]
 800722a:	4d65      	ldr	r5, [pc, #404]	; (80073c0 <_strtod_l+0x5ec>)
 800722c:	1ae4      	subs	r4, r4, r3
 800722e:	00e1      	lsls	r1, r4, #3
 8007230:	1869      	adds	r1, r5, r1
 8007232:	0032      	movs	r2, r6
 8007234:	6808      	ldr	r0, [r1, #0]
 8007236:	6849      	ldr	r1, [r1, #4]
 8007238:	003b      	movs	r3, r7
 800723a:	f7fa fa67 	bl	800170c <__aeabi_dmul>
 800723e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007240:	1b1c      	subs	r4, r3, r4
 8007242:	00e4      	lsls	r4, r4, #3
 8007244:	192c      	adds	r4, r5, r4
 8007246:	6822      	ldr	r2, [r4, #0]
 8007248:	6863      	ldr	r3, [r4, #4]
 800724a:	e7e3      	b.n	8007214 <_strtod_l+0x440>
 800724c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724e:	3316      	adds	r3, #22
 8007250:	db0c      	blt.n	800726c <_strtod_l+0x498>
 8007252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007254:	9a07      	ldr	r2, [sp, #28]
 8007256:	0030      	movs	r0, r6
 8007258:	1a9a      	subs	r2, r3, r2
 800725a:	4b59      	ldr	r3, [pc, #356]	; (80073c0 <_strtod_l+0x5ec>)
 800725c:	00d2      	lsls	r2, r2, #3
 800725e:	189b      	adds	r3, r3, r2
 8007260:	0039      	movs	r1, r7
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f7f9 fe4b 	bl	8000f00 <__aeabi_ddiv>
 800726a:	e794      	b.n	8007196 <_strtod_l+0x3c2>
 800726c:	9b06      	ldr	r3, [sp, #24]
 800726e:	1b1c      	subs	r4, r3, r4
 8007270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007272:	18e4      	adds	r4, r4, r3
 8007274:	2c00      	cmp	r4, #0
 8007276:	dd70      	ble.n	800735a <_strtod_l+0x586>
 8007278:	230f      	movs	r3, #15
 800727a:	0021      	movs	r1, r4
 800727c:	4019      	ands	r1, r3
 800727e:	421c      	tst	r4, r3
 8007280:	d00a      	beq.n	8007298 <_strtod_l+0x4c4>
 8007282:	00cb      	lsls	r3, r1, #3
 8007284:	494e      	ldr	r1, [pc, #312]	; (80073c0 <_strtod_l+0x5ec>)
 8007286:	0032      	movs	r2, r6
 8007288:	18c9      	adds	r1, r1, r3
 800728a:	6808      	ldr	r0, [r1, #0]
 800728c:	6849      	ldr	r1, [r1, #4]
 800728e:	003b      	movs	r3, r7
 8007290:	f7fa fa3c 	bl	800170c <__aeabi_dmul>
 8007294:	0006      	movs	r6, r0
 8007296:	000f      	movs	r7, r1
 8007298:	230f      	movs	r3, #15
 800729a:	439c      	bics	r4, r3
 800729c:	d048      	beq.n	8007330 <_strtod_l+0x55c>
 800729e:	3326      	adds	r3, #38	; 0x26
 80072a0:	33ff      	adds	r3, #255	; 0xff
 80072a2:	429c      	cmp	r4, r3
 80072a4:	dd22      	ble.n	80072ec <_strtod_l+0x518>
 80072a6:	2300      	movs	r3, #0
 80072a8:	9306      	str	r3, [sp, #24]
 80072aa:	9307      	str	r3, [sp, #28]
 80072ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80072ae:	9309      	str	r3, [sp, #36]	; 0x24
 80072b0:	2322      	movs	r3, #34	; 0x22
 80072b2:	2600      	movs	r6, #0
 80072b4:	9a05      	ldr	r2, [sp, #20]
 80072b6:	4f3e      	ldr	r7, [pc, #248]	; (80073b0 <_strtod_l+0x5dc>)
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072bc:	42b3      	cmp	r3, r6
 80072be:	d100      	bne.n	80072c2 <_strtod_l+0x4ee>
 80072c0:	e5cf      	b.n	8006e62 <_strtod_l+0x8e>
 80072c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80072c4:	9805      	ldr	r0, [sp, #20]
 80072c6:	f001 fed7 	bl	8009078 <_Bfree>
 80072ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072cc:	9805      	ldr	r0, [sp, #20]
 80072ce:	f001 fed3 	bl	8009078 <_Bfree>
 80072d2:	9907      	ldr	r1, [sp, #28]
 80072d4:	9805      	ldr	r0, [sp, #20]
 80072d6:	f001 fecf 	bl	8009078 <_Bfree>
 80072da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072dc:	9805      	ldr	r0, [sp, #20]
 80072de:	f001 fecb 	bl	8009078 <_Bfree>
 80072e2:	9906      	ldr	r1, [sp, #24]
 80072e4:	9805      	ldr	r0, [sp, #20]
 80072e6:	f001 fec7 	bl	8009078 <_Bfree>
 80072ea:	e5ba      	b.n	8006e62 <_strtod_l+0x8e>
 80072ec:	2300      	movs	r3, #0
 80072ee:	0030      	movs	r0, r6
 80072f0:	0039      	movs	r1, r7
 80072f2:	001d      	movs	r5, r3
 80072f4:	1124      	asrs	r4, r4, #4
 80072f6:	2c01      	cmp	r4, #1
 80072f8:	dc1d      	bgt.n	8007336 <_strtod_l+0x562>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <_strtod_l+0x52e>
 80072fe:	0006      	movs	r6, r0
 8007300:	000f      	movs	r7, r1
 8007302:	4b30      	ldr	r3, [pc, #192]	; (80073c4 <_strtod_l+0x5f0>)
 8007304:	00ed      	lsls	r5, r5, #3
 8007306:	18ff      	adds	r7, r7, r3
 8007308:	4b2f      	ldr	r3, [pc, #188]	; (80073c8 <_strtod_l+0x5f4>)
 800730a:	0032      	movs	r2, r6
 800730c:	195d      	adds	r5, r3, r5
 800730e:	6828      	ldr	r0, [r5, #0]
 8007310:	6869      	ldr	r1, [r5, #4]
 8007312:	003b      	movs	r3, r7
 8007314:	f7fa f9fa 	bl	800170c <__aeabi_dmul>
 8007318:	4b25      	ldr	r3, [pc, #148]	; (80073b0 <_strtod_l+0x5dc>)
 800731a:	4a2c      	ldr	r2, [pc, #176]	; (80073cc <_strtod_l+0x5f8>)
 800731c:	0006      	movs	r6, r0
 800731e:	400b      	ands	r3, r1
 8007320:	4293      	cmp	r3, r2
 8007322:	d8c0      	bhi.n	80072a6 <_strtod_l+0x4d2>
 8007324:	4a2a      	ldr	r2, [pc, #168]	; (80073d0 <_strtod_l+0x5fc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d913      	bls.n	8007352 <_strtod_l+0x57e>
 800732a:	2601      	movs	r6, #1
 800732c:	4f29      	ldr	r7, [pc, #164]	; (80073d4 <_strtod_l+0x600>)
 800732e:	4276      	negs	r6, r6
 8007330:	2300      	movs	r3, #0
 8007332:	9308      	str	r3, [sp, #32]
 8007334:	e087      	b.n	8007446 <_strtod_l+0x672>
 8007336:	2201      	movs	r2, #1
 8007338:	4214      	tst	r4, r2
 800733a:	d007      	beq.n	800734c <_strtod_l+0x578>
 800733c:	4a22      	ldr	r2, [pc, #136]	; (80073c8 <_strtod_l+0x5f4>)
 800733e:	00eb      	lsls	r3, r5, #3
 8007340:	189b      	adds	r3, r3, r2
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f7fa f9e1 	bl	800170c <__aeabi_dmul>
 800734a:	2301      	movs	r3, #1
 800734c:	3501      	adds	r5, #1
 800734e:	1064      	asrs	r4, r4, #1
 8007350:	e7d1      	b.n	80072f6 <_strtod_l+0x522>
 8007352:	23d4      	movs	r3, #212	; 0xd4
 8007354:	049b      	lsls	r3, r3, #18
 8007356:	18cf      	adds	r7, r1, r3
 8007358:	e7ea      	b.n	8007330 <_strtod_l+0x55c>
 800735a:	2c00      	cmp	r4, #0
 800735c:	d0e8      	beq.n	8007330 <_strtod_l+0x55c>
 800735e:	4264      	negs	r4, r4
 8007360:	220f      	movs	r2, #15
 8007362:	0023      	movs	r3, r4
 8007364:	4013      	ands	r3, r2
 8007366:	4214      	tst	r4, r2
 8007368:	d00a      	beq.n	8007380 <_strtod_l+0x5ac>
 800736a:	00da      	lsls	r2, r3, #3
 800736c:	4b14      	ldr	r3, [pc, #80]	; (80073c0 <_strtod_l+0x5ec>)
 800736e:	0030      	movs	r0, r6
 8007370:	189b      	adds	r3, r3, r2
 8007372:	0039      	movs	r1, r7
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f7f9 fdc2 	bl	8000f00 <__aeabi_ddiv>
 800737c:	0006      	movs	r6, r0
 800737e:	000f      	movs	r7, r1
 8007380:	1124      	asrs	r4, r4, #4
 8007382:	d0d5      	beq.n	8007330 <_strtod_l+0x55c>
 8007384:	2c1f      	cmp	r4, #31
 8007386:	dd27      	ble.n	80073d8 <_strtod_l+0x604>
 8007388:	2300      	movs	r3, #0
 800738a:	9306      	str	r3, [sp, #24]
 800738c:	9307      	str	r3, [sp, #28]
 800738e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007390:	9309      	str	r3, [sp, #36]	; 0x24
 8007392:	2322      	movs	r3, #34	; 0x22
 8007394:	9a05      	ldr	r2, [sp, #20]
 8007396:	2600      	movs	r6, #0
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800739c:	2700      	movs	r7, #0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d18f      	bne.n	80072c2 <_strtod_l+0x4ee>
 80073a2:	e55e      	b.n	8006e62 <_strtod_l+0x8e>
 80073a4:	00004e1f 	.word	0x00004e1f
 80073a8:	0800ab9d 	.word	0x0800ab9d
 80073ac:	0800abe0 	.word	0x0800abe0
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	0800ab95 	.word	0x0800ab95
 80073b8:	0800ad24 	.word	0x0800ad24
 80073bc:	0800afe0 	.word	0x0800afe0
 80073c0:	0800aec0 	.word	0x0800aec0
 80073c4:	fcb00000 	.word	0xfcb00000
 80073c8:	0800ae98 	.word	0x0800ae98
 80073cc:	7ca00000 	.word	0x7ca00000
 80073d0:	7c900000 	.word	0x7c900000
 80073d4:	7fefffff 	.word	0x7fefffff
 80073d8:	2310      	movs	r3, #16
 80073da:	0022      	movs	r2, r4
 80073dc:	401a      	ands	r2, r3
 80073de:	9208      	str	r2, [sp, #32]
 80073e0:	421c      	tst	r4, r3
 80073e2:	d001      	beq.n	80073e8 <_strtod_l+0x614>
 80073e4:	335a      	adds	r3, #90	; 0x5a
 80073e6:	9308      	str	r3, [sp, #32]
 80073e8:	0030      	movs	r0, r6
 80073ea:	0039      	movs	r1, r7
 80073ec:	2300      	movs	r3, #0
 80073ee:	4dca      	ldr	r5, [pc, #808]	; (8007718 <_strtod_l+0x944>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	4214      	tst	r4, r2
 80073f4:	d004      	beq.n	8007400 <_strtod_l+0x62c>
 80073f6:	682a      	ldr	r2, [r5, #0]
 80073f8:	686b      	ldr	r3, [r5, #4]
 80073fa:	f7fa f987 	bl	800170c <__aeabi_dmul>
 80073fe:	2301      	movs	r3, #1
 8007400:	1064      	asrs	r4, r4, #1
 8007402:	3508      	adds	r5, #8
 8007404:	2c00      	cmp	r4, #0
 8007406:	d1f3      	bne.n	80073f0 <_strtod_l+0x61c>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <_strtod_l+0x63c>
 800740c:	0006      	movs	r6, r0
 800740e:	000f      	movs	r7, r1
 8007410:	9b08      	ldr	r3, [sp, #32]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00f      	beq.n	8007436 <_strtod_l+0x662>
 8007416:	236b      	movs	r3, #107	; 0x6b
 8007418:	0079      	lsls	r1, r7, #1
 800741a:	0d49      	lsrs	r1, r1, #21
 800741c:	003a      	movs	r2, r7
 800741e:	1a5b      	subs	r3, r3, r1
 8007420:	2b00      	cmp	r3, #0
 8007422:	dd08      	ble.n	8007436 <_strtod_l+0x662>
 8007424:	2b1f      	cmp	r3, #31
 8007426:	dc00      	bgt.n	800742a <_strtod_l+0x656>
 8007428:	e126      	b.n	8007678 <_strtod_l+0x8a4>
 800742a:	2600      	movs	r6, #0
 800742c:	2b34      	cmp	r3, #52	; 0x34
 800742e:	dc00      	bgt.n	8007432 <_strtod_l+0x65e>
 8007430:	e11b      	b.n	800766a <_strtod_l+0x896>
 8007432:	27dc      	movs	r7, #220	; 0xdc
 8007434:	04bf      	lsls	r7, r7, #18
 8007436:	2200      	movs	r2, #0
 8007438:	2300      	movs	r3, #0
 800743a:	0030      	movs	r0, r6
 800743c:	0039      	movs	r1, r7
 800743e:	f7f9 f805 	bl	800044c <__aeabi_dcmpeq>
 8007442:	2800      	cmp	r0, #0
 8007444:	d1a0      	bne.n	8007388 <_strtod_l+0x5b4>
 8007446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	9805      	ldr	r0, [sp, #20]
 8007452:	f001 fe79 	bl	8009148 <__s2b>
 8007456:	900b      	str	r0, [sp, #44]	; 0x2c
 8007458:	2800      	cmp	r0, #0
 800745a:	d100      	bne.n	800745e <_strtod_l+0x68a>
 800745c:	e723      	b.n	80072a6 <_strtod_l+0x4d2>
 800745e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007460:	9907      	ldr	r1, [sp, #28]
 8007462:	17da      	asrs	r2, r3, #31
 8007464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007466:	1a5b      	subs	r3, r3, r1
 8007468:	401a      	ands	r2, r3
 800746a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746c:	9215      	str	r2, [sp, #84]	; 0x54
 800746e:	43db      	mvns	r3, r3
 8007470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007472:	17db      	asrs	r3, r3, #31
 8007474:	401a      	ands	r2, r3
 8007476:	2300      	movs	r3, #0
 8007478:	921c      	str	r2, [sp, #112]	; 0x70
 800747a:	9306      	str	r3, [sp, #24]
 800747c:	9307      	str	r3, [sp, #28]
 800747e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007480:	9805      	ldr	r0, [sp, #20]
 8007482:	6859      	ldr	r1, [r3, #4]
 8007484:	f001 fdb4 	bl	8008ff0 <_Balloc>
 8007488:	9009      	str	r0, [sp, #36]	; 0x24
 800748a:	2800      	cmp	r0, #0
 800748c:	d100      	bne.n	8007490 <_strtod_l+0x6bc>
 800748e:	e70f      	b.n	80072b0 <_strtod_l+0x4dc>
 8007490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007492:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	310c      	adds	r1, #12
 8007498:	1c9a      	adds	r2, r3, #2
 800749a:	0092      	lsls	r2, r2, #2
 800749c:	300c      	adds	r0, #12
 800749e:	930c      	str	r3, [sp, #48]	; 0x30
 80074a0:	f001 fd9d 	bl	8008fde <memcpy>
 80074a4:	ab24      	add	r3, sp, #144	; 0x90
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	ab23      	add	r3, sp, #140	; 0x8c
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	0032      	movs	r2, r6
 80074ae:	003b      	movs	r3, r7
 80074b0:	9805      	ldr	r0, [sp, #20]
 80074b2:	960e      	str	r6, [sp, #56]	; 0x38
 80074b4:	970f      	str	r7, [sp, #60]	; 0x3c
 80074b6:	f002 f995 	bl	80097e4 <__d2b>
 80074ba:	9022      	str	r0, [sp, #136]	; 0x88
 80074bc:	2800      	cmp	r0, #0
 80074be:	d100      	bne.n	80074c2 <_strtod_l+0x6ee>
 80074c0:	e6f6      	b.n	80072b0 <_strtod_l+0x4dc>
 80074c2:	2101      	movs	r1, #1
 80074c4:	9805      	ldr	r0, [sp, #20]
 80074c6:	f001 fed3 	bl	8009270 <__i2b>
 80074ca:	9007      	str	r0, [sp, #28]
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d100      	bne.n	80074d2 <_strtod_l+0x6fe>
 80074d0:	e6ee      	b.n	80072b0 <_strtod_l+0x4dc>
 80074d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	da00      	bge.n	80074da <_strtod_l+0x706>
 80074d8:	e0d3      	b.n	8007682 <_strtod_l+0x8ae>
 80074da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80074de:	189d      	adds	r5, r3, r2
 80074e0:	9908      	ldr	r1, [sp, #32]
 80074e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074e4:	1a5b      	subs	r3, r3, r1
 80074e6:	2136      	movs	r1, #54	; 0x36
 80074e8:	189b      	adds	r3, r3, r2
 80074ea:	1a8a      	subs	r2, r1, r2
 80074ec:	498b      	ldr	r1, [pc, #556]	; (800771c <_strtod_l+0x948>)
 80074ee:	3b01      	subs	r3, #1
 80074f0:	2001      	movs	r0, #1
 80074f2:	428b      	cmp	r3, r1
 80074f4:	db00      	blt.n	80074f8 <_strtod_l+0x724>
 80074f6:	e0cf      	b.n	8007698 <_strtod_l+0x8c4>
 80074f8:	1ac9      	subs	r1, r1, r3
 80074fa:	1a52      	subs	r2, r2, r1
 80074fc:	291f      	cmp	r1, #31
 80074fe:	dd00      	ble.n	8007502 <_strtod_l+0x72e>
 8007500:	e0c3      	b.n	800768a <_strtod_l+0x8b6>
 8007502:	4088      	lsls	r0, r1
 8007504:	2300      	movs	r3, #0
 8007506:	9014      	str	r0, [sp, #80]	; 0x50
 8007508:	9312      	str	r3, [sp, #72]	; 0x48
 800750a:	18ab      	adds	r3, r5, r2
 800750c:	930c      	str	r3, [sp, #48]	; 0x30
 800750e:	18a4      	adds	r4, r4, r2
 8007510:	9b08      	ldr	r3, [sp, #32]
 8007512:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007514:	191c      	adds	r4, r3, r4
 8007516:	002b      	movs	r3, r5
 8007518:	4295      	cmp	r5, r2
 800751a:	dd00      	ble.n	800751e <_strtod_l+0x74a>
 800751c:	0013      	movs	r3, r2
 800751e:	42a3      	cmp	r3, r4
 8007520:	dd00      	ble.n	8007524 <_strtod_l+0x750>
 8007522:	0023      	movs	r3, r4
 8007524:	2b00      	cmp	r3, #0
 8007526:	dd04      	ble.n	8007532 <_strtod_l+0x75e>
 8007528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800752a:	1ae4      	subs	r4, r4, r3
 800752c:	1ad2      	subs	r2, r2, r3
 800752e:	920c      	str	r2, [sp, #48]	; 0x30
 8007530:	1aed      	subs	r5, r5, r3
 8007532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007534:	2b00      	cmp	r3, #0
 8007536:	dd17      	ble.n	8007568 <_strtod_l+0x794>
 8007538:	001a      	movs	r2, r3
 800753a:	9907      	ldr	r1, [sp, #28]
 800753c:	9805      	ldr	r0, [sp, #20]
 800753e:	f001 ff5d 	bl	80093fc <__pow5mult>
 8007542:	9007      	str	r0, [sp, #28]
 8007544:	2800      	cmp	r0, #0
 8007546:	d100      	bne.n	800754a <_strtod_l+0x776>
 8007548:	e6b2      	b.n	80072b0 <_strtod_l+0x4dc>
 800754a:	0001      	movs	r1, r0
 800754c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800754e:	9805      	ldr	r0, [sp, #20]
 8007550:	f001 fea4 	bl	800929c <__multiply>
 8007554:	9011      	str	r0, [sp, #68]	; 0x44
 8007556:	2800      	cmp	r0, #0
 8007558:	d100      	bne.n	800755c <_strtod_l+0x788>
 800755a:	e6a9      	b.n	80072b0 <_strtod_l+0x4dc>
 800755c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800755e:	9805      	ldr	r0, [sp, #20]
 8007560:	f001 fd8a 	bl	8009078 <_Bfree>
 8007564:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007566:	9322      	str	r3, [sp, #136]	; 0x88
 8007568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756a:	2b00      	cmp	r3, #0
 800756c:	dd00      	ble.n	8007570 <_strtod_l+0x79c>
 800756e:	e096      	b.n	800769e <_strtod_l+0x8ca>
 8007570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	dd08      	ble.n	8007588 <_strtod_l+0x7b4>
 8007576:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800757a:	9805      	ldr	r0, [sp, #20]
 800757c:	f001 ff3e 	bl	80093fc <__pow5mult>
 8007580:	9009      	str	r0, [sp, #36]	; 0x24
 8007582:	2800      	cmp	r0, #0
 8007584:	d100      	bne.n	8007588 <_strtod_l+0x7b4>
 8007586:	e693      	b.n	80072b0 <_strtod_l+0x4dc>
 8007588:	2c00      	cmp	r4, #0
 800758a:	dd08      	ble.n	800759e <_strtod_l+0x7ca>
 800758c:	0022      	movs	r2, r4
 800758e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007590:	9805      	ldr	r0, [sp, #20]
 8007592:	f001 ff8f 	bl	80094b4 <__lshift>
 8007596:	9009      	str	r0, [sp, #36]	; 0x24
 8007598:	2800      	cmp	r0, #0
 800759a:	d100      	bne.n	800759e <_strtod_l+0x7ca>
 800759c:	e688      	b.n	80072b0 <_strtod_l+0x4dc>
 800759e:	2d00      	cmp	r5, #0
 80075a0:	dd08      	ble.n	80075b4 <_strtod_l+0x7e0>
 80075a2:	002a      	movs	r2, r5
 80075a4:	9907      	ldr	r1, [sp, #28]
 80075a6:	9805      	ldr	r0, [sp, #20]
 80075a8:	f001 ff84 	bl	80094b4 <__lshift>
 80075ac:	9007      	str	r0, [sp, #28]
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d100      	bne.n	80075b4 <_strtod_l+0x7e0>
 80075b2:	e67d      	b.n	80072b0 <_strtod_l+0x4dc>
 80075b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075b6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80075b8:	9805      	ldr	r0, [sp, #20]
 80075ba:	f002 f807 	bl	80095cc <__mdiff>
 80075be:	9006      	str	r0, [sp, #24]
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d100      	bne.n	80075c6 <_strtod_l+0x7f2>
 80075c4:	e674      	b.n	80072b0 <_strtod_l+0x4dc>
 80075c6:	2200      	movs	r2, #0
 80075c8:	68c3      	ldr	r3, [r0, #12]
 80075ca:	9907      	ldr	r1, [sp, #28]
 80075cc:	60c2      	str	r2, [r0, #12]
 80075ce:	9311      	str	r3, [sp, #68]	; 0x44
 80075d0:	f001 ffe0 	bl	8009594 <__mcmp>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	da6c      	bge.n	80076b2 <_strtod_l+0x8de>
 80075d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075da:	4333      	orrs	r3, r6
 80075dc:	d000      	beq.n	80075e0 <_strtod_l+0x80c>
 80075de:	e097      	b.n	8007710 <_strtod_l+0x93c>
 80075e0:	033b      	lsls	r3, r7, #12
 80075e2:	d000      	beq.n	80075e6 <_strtod_l+0x812>
 80075e4:	e094      	b.n	8007710 <_strtod_l+0x93c>
 80075e6:	22d6      	movs	r2, #214	; 0xd6
 80075e8:	4b4d      	ldr	r3, [pc, #308]	; (8007720 <_strtod_l+0x94c>)
 80075ea:	04d2      	lsls	r2, r2, #19
 80075ec:	403b      	ands	r3, r7
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d800      	bhi.n	80075f4 <_strtod_l+0x820>
 80075f2:	e08d      	b.n	8007710 <_strtod_l+0x93c>
 80075f4:	9b06      	ldr	r3, [sp, #24]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	930a      	str	r3, [sp, #40]	; 0x28
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <_strtod_l+0x836>
 80075fe:	9b06      	ldr	r3, [sp, #24]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	930a      	str	r3, [sp, #40]	; 0x28
 8007604:	2b01      	cmp	r3, #1
 8007606:	dc00      	bgt.n	800760a <_strtod_l+0x836>
 8007608:	e082      	b.n	8007710 <_strtod_l+0x93c>
 800760a:	9906      	ldr	r1, [sp, #24]
 800760c:	2201      	movs	r2, #1
 800760e:	9805      	ldr	r0, [sp, #20]
 8007610:	f001 ff50 	bl	80094b4 <__lshift>
 8007614:	9907      	ldr	r1, [sp, #28]
 8007616:	9006      	str	r0, [sp, #24]
 8007618:	f001 ffbc 	bl	8009594 <__mcmp>
 800761c:	2800      	cmp	r0, #0
 800761e:	dd77      	ble.n	8007710 <_strtod_l+0x93c>
 8007620:	9908      	ldr	r1, [sp, #32]
 8007622:	003b      	movs	r3, r7
 8007624:	4a3e      	ldr	r2, [pc, #248]	; (8007720 <_strtod_l+0x94c>)
 8007626:	2900      	cmp	r1, #0
 8007628:	d100      	bne.n	800762c <_strtod_l+0x858>
 800762a:	e09e      	b.n	800776a <_strtod_l+0x996>
 800762c:	0011      	movs	r1, r2
 800762e:	20d6      	movs	r0, #214	; 0xd6
 8007630:	4039      	ands	r1, r7
 8007632:	04c0      	lsls	r0, r0, #19
 8007634:	4281      	cmp	r1, r0
 8007636:	dd00      	ble.n	800763a <_strtod_l+0x866>
 8007638:	e097      	b.n	800776a <_strtod_l+0x996>
 800763a:	23dc      	movs	r3, #220	; 0xdc
 800763c:	049b      	lsls	r3, r3, #18
 800763e:	4299      	cmp	r1, r3
 8007640:	dc00      	bgt.n	8007644 <_strtod_l+0x870>
 8007642:	e6a6      	b.n	8007392 <_strtod_l+0x5be>
 8007644:	4b37      	ldr	r3, [pc, #220]	; (8007724 <_strtod_l+0x950>)
 8007646:	0030      	movs	r0, r6
 8007648:	931b      	str	r3, [sp, #108]	; 0x6c
 800764a:	2300      	movs	r3, #0
 800764c:	931a      	str	r3, [sp, #104]	; 0x68
 800764e:	0039      	movs	r1, r7
 8007650:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007652:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007654:	f7fa f85a 	bl	800170c <__aeabi_dmul>
 8007658:	0006      	movs	r6, r0
 800765a:	000f      	movs	r7, r1
 800765c:	4308      	orrs	r0, r1
 800765e:	d000      	beq.n	8007662 <_strtod_l+0x88e>
 8007660:	e62f      	b.n	80072c2 <_strtod_l+0x4ee>
 8007662:	2322      	movs	r3, #34	; 0x22
 8007664:	9a05      	ldr	r2, [sp, #20]
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	e62b      	b.n	80072c2 <_strtod_l+0x4ee>
 800766a:	2101      	movs	r1, #1
 800766c:	3b20      	subs	r3, #32
 800766e:	4249      	negs	r1, r1
 8007670:	4099      	lsls	r1, r3
 8007672:	400a      	ands	r2, r1
 8007674:	0017      	movs	r7, r2
 8007676:	e6de      	b.n	8007436 <_strtod_l+0x662>
 8007678:	2201      	movs	r2, #1
 800767a:	4252      	negs	r2, r2
 800767c:	409a      	lsls	r2, r3
 800767e:	4016      	ands	r6, r2
 8007680:	e6d9      	b.n	8007436 <_strtod_l+0x662>
 8007682:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007684:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007686:	1ad4      	subs	r4, r2, r3
 8007688:	e72a      	b.n	80074e0 <_strtod_l+0x70c>
 800768a:	4927      	ldr	r1, [pc, #156]	; (8007728 <_strtod_l+0x954>)
 800768c:	1acb      	subs	r3, r1, r3
 800768e:	0001      	movs	r1, r0
 8007690:	4099      	lsls	r1, r3
 8007692:	9112      	str	r1, [sp, #72]	; 0x48
 8007694:	9014      	str	r0, [sp, #80]	; 0x50
 8007696:	e738      	b.n	800750a <_strtod_l+0x736>
 8007698:	2300      	movs	r3, #0
 800769a:	9312      	str	r3, [sp, #72]	; 0x48
 800769c:	e7fa      	b.n	8007694 <_strtod_l+0x8c0>
 800769e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80076a2:	9805      	ldr	r0, [sp, #20]
 80076a4:	f001 ff06 	bl	80094b4 <__lshift>
 80076a8:	9022      	str	r0, [sp, #136]	; 0x88
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d000      	beq.n	80076b0 <_strtod_l+0x8dc>
 80076ae:	e75f      	b.n	8007570 <_strtod_l+0x79c>
 80076b0:	e5fe      	b.n	80072b0 <_strtod_l+0x4dc>
 80076b2:	970c      	str	r7, [sp, #48]	; 0x30
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d176      	bne.n	80077a6 <_strtod_l+0x9d2>
 80076b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076ba:	033b      	lsls	r3, r7, #12
 80076bc:	0b1b      	lsrs	r3, r3, #12
 80076be:	2a00      	cmp	r2, #0
 80076c0:	d038      	beq.n	8007734 <_strtod_l+0x960>
 80076c2:	4a1a      	ldr	r2, [pc, #104]	; (800772c <_strtod_l+0x958>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d138      	bne.n	800773a <_strtod_l+0x966>
 80076c8:	2201      	movs	r2, #1
 80076ca:	9b08      	ldr	r3, [sp, #32]
 80076cc:	4252      	negs	r2, r2
 80076ce:	0031      	movs	r1, r6
 80076d0:	0010      	movs	r0, r2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <_strtod_l+0x91a>
 80076d6:	24d4      	movs	r4, #212	; 0xd4
 80076d8:	4b11      	ldr	r3, [pc, #68]	; (8007720 <_strtod_l+0x94c>)
 80076da:	0010      	movs	r0, r2
 80076dc:	403b      	ands	r3, r7
 80076de:	04e4      	lsls	r4, r4, #19
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d804      	bhi.n	80076ee <_strtod_l+0x91a>
 80076e4:	306c      	adds	r0, #108	; 0x6c
 80076e6:	0d1b      	lsrs	r3, r3, #20
 80076e8:	1ac3      	subs	r3, r0, r3
 80076ea:	409a      	lsls	r2, r3
 80076ec:	0010      	movs	r0, r2
 80076ee:	4281      	cmp	r1, r0
 80076f0:	d123      	bne.n	800773a <_strtod_l+0x966>
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <_strtod_l+0x95c>)
 80076f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d102      	bne.n	8007700 <_strtod_l+0x92c>
 80076fa:	1c4b      	adds	r3, r1, #1
 80076fc:	d100      	bne.n	8007700 <_strtod_l+0x92c>
 80076fe:	e5d7      	b.n	80072b0 <_strtod_l+0x4dc>
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <_strtod_l+0x94c>)
 8007702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007704:	2600      	movs	r6, #0
 8007706:	401a      	ands	r2, r3
 8007708:	0013      	movs	r3, r2
 800770a:	2280      	movs	r2, #128	; 0x80
 800770c:	0352      	lsls	r2, r2, #13
 800770e:	189f      	adds	r7, r3, r2
 8007710:	9b08      	ldr	r3, [sp, #32]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d196      	bne.n	8007644 <_strtod_l+0x870>
 8007716:	e5d4      	b.n	80072c2 <_strtod_l+0x4ee>
 8007718:	0800abf8 	.word	0x0800abf8
 800771c:	fffffc02 	.word	0xfffffc02
 8007720:	7ff00000 	.word	0x7ff00000
 8007724:	39500000 	.word	0x39500000
 8007728:	fffffbe2 	.word	0xfffffbe2
 800772c:	000fffff 	.word	0x000fffff
 8007730:	7fefffff 	.word	0x7fefffff
 8007734:	4333      	orrs	r3, r6
 8007736:	d100      	bne.n	800773a <_strtod_l+0x966>
 8007738:	e772      	b.n	8007620 <_strtod_l+0x84c>
 800773a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01d      	beq.n	800777c <_strtod_l+0x9a8>
 8007740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007742:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007744:	4213      	tst	r3, r2
 8007746:	d0e3      	beq.n	8007710 <_strtod_l+0x93c>
 8007748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800774a:	0030      	movs	r0, r6
 800774c:	0039      	movs	r1, r7
 800774e:	9a08      	ldr	r2, [sp, #32]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d017      	beq.n	8007784 <_strtod_l+0x9b0>
 8007754:	f7ff fb26 	bl	8006da4 <sulp>
 8007758:	0002      	movs	r2, r0
 800775a:	000b      	movs	r3, r1
 800775c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800775e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007760:	f7f9 f864 	bl	800082c <__aeabi_dadd>
 8007764:	0006      	movs	r6, r0
 8007766:	000f      	movs	r7, r1
 8007768:	e7d2      	b.n	8007710 <_strtod_l+0x93c>
 800776a:	2601      	movs	r6, #1
 800776c:	4013      	ands	r3, r2
 800776e:	4a9b      	ldr	r2, [pc, #620]	; (80079dc <_strtod_l+0xc08>)
 8007770:	4276      	negs	r6, r6
 8007772:	189b      	adds	r3, r3, r2
 8007774:	4a9a      	ldr	r2, [pc, #616]	; (80079e0 <_strtod_l+0xc0c>)
 8007776:	431a      	orrs	r2, r3
 8007778:	0017      	movs	r7, r2
 800777a:	e7c9      	b.n	8007710 <_strtod_l+0x93c>
 800777c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800777e:	4233      	tst	r3, r6
 8007780:	d0c6      	beq.n	8007710 <_strtod_l+0x93c>
 8007782:	e7e1      	b.n	8007748 <_strtod_l+0x974>
 8007784:	f7ff fb0e 	bl	8006da4 <sulp>
 8007788:	0002      	movs	r2, r0
 800778a:	000b      	movs	r3, r1
 800778c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800778e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007790:	f7fa fa28 	bl	8001be4 <__aeabi_dsub>
 8007794:	2200      	movs	r2, #0
 8007796:	2300      	movs	r3, #0
 8007798:	0006      	movs	r6, r0
 800779a:	000f      	movs	r7, r1
 800779c:	f7f8 fe56 	bl	800044c <__aeabi_dcmpeq>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d0b5      	beq.n	8007710 <_strtod_l+0x93c>
 80077a4:	e5f5      	b.n	8007392 <_strtod_l+0x5be>
 80077a6:	9907      	ldr	r1, [sp, #28]
 80077a8:	9806      	ldr	r0, [sp, #24]
 80077aa:	f002 f87f 	bl	80098ac <__ratio>
 80077ae:	2380      	movs	r3, #128	; 0x80
 80077b0:	2200      	movs	r2, #0
 80077b2:	05db      	lsls	r3, r3, #23
 80077b4:	0004      	movs	r4, r0
 80077b6:	000d      	movs	r5, r1
 80077b8:	f7f8 fe58 	bl	800046c <__aeabi_dcmple>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d079      	beq.n	80078b4 <_strtod_l+0xae0>
 80077c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d04b      	beq.n	800785e <_strtod_l+0xa8a>
 80077c6:	2300      	movs	r3, #0
 80077c8:	4c86      	ldr	r4, [pc, #536]	; (80079e4 <_strtod_l+0xc10>)
 80077ca:	2500      	movs	r5, #0
 80077cc:	9312      	str	r3, [sp, #72]	; 0x48
 80077ce:	9413      	str	r4, [sp, #76]	; 0x4c
 80077d0:	4c84      	ldr	r4, [pc, #528]	; (80079e4 <_strtod_l+0xc10>)
 80077d2:	4a85      	ldr	r2, [pc, #532]	; (80079e8 <_strtod_l+0xc14>)
 80077d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d6:	4013      	ands	r3, r2
 80077d8:	9314      	str	r3, [sp, #80]	; 0x50
 80077da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077dc:	4b83      	ldr	r3, [pc, #524]	; (80079ec <_strtod_l+0xc18>)
 80077de:	429a      	cmp	r2, r3
 80077e0:	d000      	beq.n	80077e4 <_strtod_l+0xa10>
 80077e2:	e0b0      	b.n	8007946 <_strtod_l+0xb72>
 80077e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077e8:	921a      	str	r2, [sp, #104]	; 0x68
 80077ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80077ec:	4a80      	ldr	r2, [pc, #512]	; (80079f0 <_strtod_l+0xc1c>)
 80077ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077f0:	4694      	mov	ip, r2
 80077f2:	4463      	add	r3, ip
 80077f4:	001f      	movs	r7, r3
 80077f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077fa:	0030      	movs	r0, r6
 80077fc:	0039      	movs	r1, r7
 80077fe:	920c      	str	r2, [sp, #48]	; 0x30
 8007800:	930d      	str	r3, [sp, #52]	; 0x34
 8007802:	f001 ff7b 	bl	80096fc <__ulp>
 8007806:	0002      	movs	r2, r0
 8007808:	000b      	movs	r3, r1
 800780a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800780c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800780e:	f7f9 ff7d 	bl	800170c <__aeabi_dmul>
 8007812:	0032      	movs	r2, r6
 8007814:	003b      	movs	r3, r7
 8007816:	f7f9 f809 	bl	800082c <__aeabi_dadd>
 800781a:	4a73      	ldr	r2, [pc, #460]	; (80079e8 <_strtod_l+0xc14>)
 800781c:	4b75      	ldr	r3, [pc, #468]	; (80079f4 <_strtod_l+0xc20>)
 800781e:	0006      	movs	r6, r0
 8007820:	400a      	ands	r2, r1
 8007822:	429a      	cmp	r2, r3
 8007824:	d95e      	bls.n	80078e4 <_strtod_l+0xb10>
 8007826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007828:	4a73      	ldr	r2, [pc, #460]	; (80079f8 <_strtod_l+0xc24>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d103      	bne.n	8007836 <_strtod_l+0xa62>
 800782e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007830:	3301      	adds	r3, #1
 8007832:	d100      	bne.n	8007836 <_strtod_l+0xa62>
 8007834:	e53c      	b.n	80072b0 <_strtod_l+0x4dc>
 8007836:	2601      	movs	r6, #1
 8007838:	4f6f      	ldr	r7, [pc, #444]	; (80079f8 <_strtod_l+0xc24>)
 800783a:	4276      	negs	r6, r6
 800783c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800783e:	9805      	ldr	r0, [sp, #20]
 8007840:	f001 fc1a 	bl	8009078 <_Bfree>
 8007844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007846:	9805      	ldr	r0, [sp, #20]
 8007848:	f001 fc16 	bl	8009078 <_Bfree>
 800784c:	9907      	ldr	r1, [sp, #28]
 800784e:	9805      	ldr	r0, [sp, #20]
 8007850:	f001 fc12 	bl	8009078 <_Bfree>
 8007854:	9906      	ldr	r1, [sp, #24]
 8007856:	9805      	ldr	r0, [sp, #20]
 8007858:	f001 fc0e 	bl	8009078 <_Bfree>
 800785c:	e60f      	b.n	800747e <_strtod_l+0x6aa>
 800785e:	2e00      	cmp	r6, #0
 8007860:	d11c      	bne.n	800789c <_strtod_l+0xac8>
 8007862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007864:	031b      	lsls	r3, r3, #12
 8007866:	d11f      	bne.n	80078a8 <_strtod_l+0xad4>
 8007868:	2200      	movs	r2, #0
 800786a:	0020      	movs	r0, r4
 800786c:	0029      	movs	r1, r5
 800786e:	4b5d      	ldr	r3, [pc, #372]	; (80079e4 <_strtod_l+0xc10>)
 8007870:	f7f8 fdf2 	bl	8000458 <__aeabi_dcmplt>
 8007874:	2800      	cmp	r0, #0
 8007876:	d11a      	bne.n	80078ae <_strtod_l+0xada>
 8007878:	0020      	movs	r0, r4
 800787a:	0029      	movs	r1, r5
 800787c:	2200      	movs	r2, #0
 800787e:	4b5f      	ldr	r3, [pc, #380]	; (80079fc <_strtod_l+0xc28>)
 8007880:	f7f9 ff44 	bl	800170c <__aeabi_dmul>
 8007884:	0005      	movs	r5, r0
 8007886:	000c      	movs	r4, r1
 8007888:	2380      	movs	r3, #128	; 0x80
 800788a:	061b      	lsls	r3, r3, #24
 800788c:	18e3      	adds	r3, r4, r3
 800788e:	951e      	str	r5, [sp, #120]	; 0x78
 8007890:	931f      	str	r3, [sp, #124]	; 0x7c
 8007892:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007894:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007896:	9212      	str	r2, [sp, #72]	; 0x48
 8007898:	9313      	str	r3, [sp, #76]	; 0x4c
 800789a:	e79a      	b.n	80077d2 <_strtod_l+0x9fe>
 800789c:	2e01      	cmp	r6, #1
 800789e:	d103      	bne.n	80078a8 <_strtod_l+0xad4>
 80078a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d100      	bne.n	80078a8 <_strtod_l+0xad4>
 80078a6:	e574      	b.n	8007392 <_strtod_l+0x5be>
 80078a8:	2300      	movs	r3, #0
 80078aa:	4c55      	ldr	r4, [pc, #340]	; (8007a00 <_strtod_l+0xc2c>)
 80078ac:	e78d      	b.n	80077ca <_strtod_l+0x9f6>
 80078ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80078b0:	4c52      	ldr	r4, [pc, #328]	; (80079fc <_strtod_l+0xc28>)
 80078b2:	e7e9      	b.n	8007888 <_strtod_l+0xab4>
 80078b4:	2200      	movs	r2, #0
 80078b6:	0020      	movs	r0, r4
 80078b8:	0029      	movs	r1, r5
 80078ba:	4b50      	ldr	r3, [pc, #320]	; (80079fc <_strtod_l+0xc28>)
 80078bc:	f7f9 ff26 	bl	800170c <__aeabi_dmul>
 80078c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80078c2:	0005      	movs	r5, r0
 80078c4:	000b      	movs	r3, r1
 80078c6:	000c      	movs	r4, r1
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	d107      	bne.n	80078dc <_strtod_l+0xb08>
 80078cc:	2280      	movs	r2, #128	; 0x80
 80078ce:	0612      	lsls	r2, r2, #24
 80078d0:	188b      	adds	r3, r1, r2
 80078d2:	9016      	str	r0, [sp, #88]	; 0x58
 80078d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80078d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078da:	e7dc      	b.n	8007896 <_strtod_l+0xac2>
 80078dc:	0002      	movs	r2, r0
 80078de:	9216      	str	r2, [sp, #88]	; 0x58
 80078e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80078e2:	e7f8      	b.n	80078d6 <_strtod_l+0xb02>
 80078e4:	23d4      	movs	r3, #212	; 0xd4
 80078e6:	049b      	lsls	r3, r3, #18
 80078e8:	18cf      	adds	r7, r1, r3
 80078ea:	9b08      	ldr	r3, [sp, #32]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1a5      	bne.n	800783c <_strtod_l+0xa68>
 80078f0:	4b3d      	ldr	r3, [pc, #244]	; (80079e8 <_strtod_l+0xc14>)
 80078f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078f4:	403b      	ands	r3, r7
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d1a0      	bne.n	800783c <_strtod_l+0xa68>
 80078fa:	0028      	movs	r0, r5
 80078fc:	0021      	movs	r1, r4
 80078fe:	f7f8 fdf1 	bl	80004e4 <__aeabi_d2lz>
 8007902:	f7f8 fe2b 	bl	800055c <__aeabi_l2d>
 8007906:	0002      	movs	r2, r0
 8007908:	000b      	movs	r3, r1
 800790a:	0028      	movs	r0, r5
 800790c:	0021      	movs	r1, r4
 800790e:	f7fa f969 	bl	8001be4 <__aeabi_dsub>
 8007912:	033b      	lsls	r3, r7, #12
 8007914:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007916:	0b1b      	lsrs	r3, r3, #12
 8007918:	4333      	orrs	r3, r6
 800791a:	4313      	orrs	r3, r2
 800791c:	0004      	movs	r4, r0
 800791e:	000d      	movs	r5, r1
 8007920:	4a38      	ldr	r2, [pc, #224]	; (8007a04 <_strtod_l+0xc30>)
 8007922:	2b00      	cmp	r3, #0
 8007924:	d055      	beq.n	80079d2 <_strtod_l+0xbfe>
 8007926:	4b38      	ldr	r3, [pc, #224]	; (8007a08 <_strtod_l+0xc34>)
 8007928:	f7f8 fd96 	bl	8000458 <__aeabi_dcmplt>
 800792c:	2800      	cmp	r0, #0
 800792e:	d000      	beq.n	8007932 <_strtod_l+0xb5e>
 8007930:	e4c7      	b.n	80072c2 <_strtod_l+0x4ee>
 8007932:	0020      	movs	r0, r4
 8007934:	0029      	movs	r1, r5
 8007936:	4a35      	ldr	r2, [pc, #212]	; (8007a0c <_strtod_l+0xc38>)
 8007938:	4b30      	ldr	r3, [pc, #192]	; (80079fc <_strtod_l+0xc28>)
 800793a:	f7f8 fda1 	bl	8000480 <__aeabi_dcmpgt>
 800793e:	2800      	cmp	r0, #0
 8007940:	d100      	bne.n	8007944 <_strtod_l+0xb70>
 8007942:	e77b      	b.n	800783c <_strtod_l+0xa68>
 8007944:	e4bd      	b.n	80072c2 <_strtod_l+0x4ee>
 8007946:	9b08      	ldr	r3, [sp, #32]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d02b      	beq.n	80079a4 <_strtod_l+0xbd0>
 800794c:	23d4      	movs	r3, #212	; 0xd4
 800794e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007950:	04db      	lsls	r3, r3, #19
 8007952:	429a      	cmp	r2, r3
 8007954:	d826      	bhi.n	80079a4 <_strtod_l+0xbd0>
 8007956:	0028      	movs	r0, r5
 8007958:	0021      	movs	r1, r4
 800795a:	4a2d      	ldr	r2, [pc, #180]	; (8007a10 <_strtod_l+0xc3c>)
 800795c:	4b2d      	ldr	r3, [pc, #180]	; (8007a14 <_strtod_l+0xc40>)
 800795e:	f7f8 fd85 	bl	800046c <__aeabi_dcmple>
 8007962:	2800      	cmp	r0, #0
 8007964:	d017      	beq.n	8007996 <_strtod_l+0xbc2>
 8007966:	0028      	movs	r0, r5
 8007968:	0021      	movs	r1, r4
 800796a:	f7f8 fd9d 	bl	80004a8 <__aeabi_d2uiz>
 800796e:	2800      	cmp	r0, #0
 8007970:	d100      	bne.n	8007974 <_strtod_l+0xba0>
 8007972:	3001      	adds	r0, #1
 8007974:	f7fa fd4c 	bl	8002410 <__aeabi_ui2d>
 8007978:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800797a:	0005      	movs	r5, r0
 800797c:	000b      	movs	r3, r1
 800797e:	000c      	movs	r4, r1
 8007980:	2a00      	cmp	r2, #0
 8007982:	d122      	bne.n	80079ca <_strtod_l+0xbf6>
 8007984:	2280      	movs	r2, #128	; 0x80
 8007986:	0612      	lsls	r2, r2, #24
 8007988:	188b      	adds	r3, r1, r2
 800798a:	9018      	str	r0, [sp, #96]	; 0x60
 800798c:	9319      	str	r3, [sp, #100]	; 0x64
 800798e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007990:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007992:	9212      	str	r2, [sp, #72]	; 0x48
 8007994:	9313      	str	r3, [sp, #76]	; 0x4c
 8007996:	22d6      	movs	r2, #214	; 0xd6
 8007998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800799a:	04d2      	lsls	r2, r2, #19
 800799c:	189b      	adds	r3, r3, r2
 800799e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079a0:	1a9b      	subs	r3, r3, r2
 80079a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80079a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80079a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079a8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80079aa:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80079ac:	f001 fea6 	bl	80096fc <__ulp>
 80079b0:	0002      	movs	r2, r0
 80079b2:	000b      	movs	r3, r1
 80079b4:	0030      	movs	r0, r6
 80079b6:	0039      	movs	r1, r7
 80079b8:	f7f9 fea8 	bl	800170c <__aeabi_dmul>
 80079bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079c0:	f7f8 ff34 	bl	800082c <__aeabi_dadd>
 80079c4:	0006      	movs	r6, r0
 80079c6:	000f      	movs	r7, r1
 80079c8:	e78f      	b.n	80078ea <_strtod_l+0xb16>
 80079ca:	0002      	movs	r2, r0
 80079cc:	9218      	str	r2, [sp, #96]	; 0x60
 80079ce:	9319      	str	r3, [sp, #100]	; 0x64
 80079d0:	e7dd      	b.n	800798e <_strtod_l+0xbba>
 80079d2:	4b11      	ldr	r3, [pc, #68]	; (8007a18 <_strtod_l+0xc44>)
 80079d4:	f7f8 fd40 	bl	8000458 <__aeabi_dcmplt>
 80079d8:	e7b1      	b.n	800793e <_strtod_l+0xb6a>
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	fff00000 	.word	0xfff00000
 80079e0:	000fffff 	.word	0x000fffff
 80079e4:	3ff00000 	.word	0x3ff00000
 80079e8:	7ff00000 	.word	0x7ff00000
 80079ec:	7fe00000 	.word	0x7fe00000
 80079f0:	fcb00000 	.word	0xfcb00000
 80079f4:	7c9fffff 	.word	0x7c9fffff
 80079f8:	7fefffff 	.word	0x7fefffff
 80079fc:	3fe00000 	.word	0x3fe00000
 8007a00:	bff00000 	.word	0xbff00000
 8007a04:	94a03595 	.word	0x94a03595
 8007a08:	3fdfffff 	.word	0x3fdfffff
 8007a0c:	35afe535 	.word	0x35afe535
 8007a10:	ffc00000 	.word	0xffc00000
 8007a14:	41dfffff 	.word	0x41dfffff
 8007a18:	3fcfffff 	.word	0x3fcfffff

08007a1c <_strtod_r>:
 8007a1c:	b510      	push	{r4, lr}
 8007a1e:	4b02      	ldr	r3, [pc, #8]	; (8007a28 <_strtod_r+0xc>)
 8007a20:	f7ff f9d8 	bl	8006dd4 <_strtod_l>
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	46c0      	nop			; (mov r8, r8)
 8007a28:	20000088 	.word	0x20000088

08007a2c <_strtol_l.isra.0>:
 8007a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	001e      	movs	r6, r3
 8007a32:	9005      	str	r0, [sp, #20]
 8007a34:	9101      	str	r1, [sp, #4]
 8007a36:	9202      	str	r2, [sp, #8]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d045      	beq.n	8007ac8 <_strtol_l.isra.0+0x9c>
 8007a3c:	0008      	movs	r0, r1
 8007a3e:	2b24      	cmp	r3, #36	; 0x24
 8007a40:	d842      	bhi.n	8007ac8 <_strtol_l.isra.0+0x9c>
 8007a42:	4b3f      	ldr	r3, [pc, #252]	; (8007b40 <_strtol_l.isra.0+0x114>)
 8007a44:	2208      	movs	r2, #8
 8007a46:	469c      	mov	ip, r3
 8007a48:	0003      	movs	r3, r0
 8007a4a:	4661      	mov	r1, ip
 8007a4c:	781c      	ldrb	r4, [r3, #0]
 8007a4e:	1c45      	adds	r5, r0, #1
 8007a50:	5d09      	ldrb	r1, [r1, r4]
 8007a52:	0028      	movs	r0, r5
 8007a54:	000f      	movs	r7, r1
 8007a56:	4017      	ands	r7, r2
 8007a58:	4211      	tst	r1, r2
 8007a5a:	d1f5      	bne.n	8007a48 <_strtol_l.isra.0+0x1c>
 8007a5c:	2c2d      	cmp	r4, #45	; 0x2d
 8007a5e:	d13a      	bne.n	8007ad6 <_strtol_l.isra.0+0xaa>
 8007a60:	2701      	movs	r7, #1
 8007a62:	782c      	ldrb	r4, [r5, #0]
 8007a64:	1c9d      	adds	r5, r3, #2
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	d065      	beq.n	8007b36 <_strtol_l.isra.0+0x10a>
 8007a6a:	2e10      	cmp	r6, #16
 8007a6c:	d109      	bne.n	8007a82 <_strtol_l.isra.0+0x56>
 8007a6e:	2c30      	cmp	r4, #48	; 0x30
 8007a70:	d107      	bne.n	8007a82 <_strtol_l.isra.0+0x56>
 8007a72:	2220      	movs	r2, #32
 8007a74:	782b      	ldrb	r3, [r5, #0]
 8007a76:	4393      	bics	r3, r2
 8007a78:	2b58      	cmp	r3, #88	; 0x58
 8007a7a:	d157      	bne.n	8007b2c <_strtol_l.isra.0+0x100>
 8007a7c:	2610      	movs	r6, #16
 8007a7e:	786c      	ldrb	r4, [r5, #1]
 8007a80:	3502      	adds	r5, #2
 8007a82:	4b30      	ldr	r3, [pc, #192]	; (8007b44 <_strtol_l.isra.0+0x118>)
 8007a84:	0031      	movs	r1, r6
 8007a86:	18fb      	adds	r3, r7, r3
 8007a88:	0018      	movs	r0, r3
 8007a8a:	9303      	str	r3, [sp, #12]
 8007a8c:	f7f8 fbde 	bl	800024c <__aeabi_uidivmod>
 8007a90:	2300      	movs	r3, #0
 8007a92:	2201      	movs	r2, #1
 8007a94:	4684      	mov	ip, r0
 8007a96:	0018      	movs	r0, r3
 8007a98:	9104      	str	r1, [sp, #16]
 8007a9a:	4252      	negs	r2, r2
 8007a9c:	0021      	movs	r1, r4
 8007a9e:	3930      	subs	r1, #48	; 0x30
 8007aa0:	2909      	cmp	r1, #9
 8007aa2:	d81d      	bhi.n	8007ae0 <_strtol_l.isra.0+0xb4>
 8007aa4:	000c      	movs	r4, r1
 8007aa6:	42a6      	cmp	r6, r4
 8007aa8:	dd28      	ble.n	8007afc <_strtol_l.isra.0+0xd0>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	db24      	blt.n	8007af8 <_strtol_l.isra.0+0xcc>
 8007aae:	0013      	movs	r3, r2
 8007ab0:	4584      	cmp	ip, r0
 8007ab2:	d306      	bcc.n	8007ac2 <_strtol_l.isra.0+0x96>
 8007ab4:	d102      	bne.n	8007abc <_strtol_l.isra.0+0x90>
 8007ab6:	9904      	ldr	r1, [sp, #16]
 8007ab8:	42a1      	cmp	r1, r4
 8007aba:	db02      	blt.n	8007ac2 <_strtol_l.isra.0+0x96>
 8007abc:	2301      	movs	r3, #1
 8007abe:	4370      	muls	r0, r6
 8007ac0:	1820      	adds	r0, r4, r0
 8007ac2:	782c      	ldrb	r4, [r5, #0]
 8007ac4:	3501      	adds	r5, #1
 8007ac6:	e7e9      	b.n	8007a9c <_strtol_l.isra.0+0x70>
 8007ac8:	f7fe fa94 	bl	8005ff4 <__errno>
 8007acc:	2316      	movs	r3, #22
 8007ace:	6003      	str	r3, [r0, #0]
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	b007      	add	sp, #28
 8007ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad6:	2c2b      	cmp	r4, #43	; 0x2b
 8007ad8:	d1c5      	bne.n	8007a66 <_strtol_l.isra.0+0x3a>
 8007ada:	782c      	ldrb	r4, [r5, #0]
 8007adc:	1c9d      	adds	r5, r3, #2
 8007ade:	e7c2      	b.n	8007a66 <_strtol_l.isra.0+0x3a>
 8007ae0:	0021      	movs	r1, r4
 8007ae2:	3941      	subs	r1, #65	; 0x41
 8007ae4:	2919      	cmp	r1, #25
 8007ae6:	d801      	bhi.n	8007aec <_strtol_l.isra.0+0xc0>
 8007ae8:	3c37      	subs	r4, #55	; 0x37
 8007aea:	e7dc      	b.n	8007aa6 <_strtol_l.isra.0+0x7a>
 8007aec:	0021      	movs	r1, r4
 8007aee:	3961      	subs	r1, #97	; 0x61
 8007af0:	2919      	cmp	r1, #25
 8007af2:	d803      	bhi.n	8007afc <_strtol_l.isra.0+0xd0>
 8007af4:	3c57      	subs	r4, #87	; 0x57
 8007af6:	e7d6      	b.n	8007aa6 <_strtol_l.isra.0+0x7a>
 8007af8:	0013      	movs	r3, r2
 8007afa:	e7e2      	b.n	8007ac2 <_strtol_l.isra.0+0x96>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da09      	bge.n	8007b14 <_strtol_l.isra.0+0xe8>
 8007b00:	2322      	movs	r3, #34	; 0x22
 8007b02:	9a05      	ldr	r2, [sp, #20]
 8007b04:	9803      	ldr	r0, [sp, #12]
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	9b02      	ldr	r3, [sp, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0e1      	beq.n	8007ad2 <_strtol_l.isra.0+0xa6>
 8007b0e:	1e6b      	subs	r3, r5, #1
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	e007      	b.n	8007b24 <_strtol_l.isra.0+0xf8>
 8007b14:	2f00      	cmp	r7, #0
 8007b16:	d000      	beq.n	8007b1a <_strtol_l.isra.0+0xee>
 8007b18:	4240      	negs	r0, r0
 8007b1a:	9a02      	ldr	r2, [sp, #8]
 8007b1c:	2a00      	cmp	r2, #0
 8007b1e:	d0d8      	beq.n	8007ad2 <_strtol_l.isra.0+0xa6>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1f4      	bne.n	8007b0e <_strtol_l.isra.0+0xe2>
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	9a01      	ldr	r2, [sp, #4]
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	e7d2      	b.n	8007ad2 <_strtol_l.isra.0+0xa6>
 8007b2c:	2430      	movs	r4, #48	; 0x30
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	d1a7      	bne.n	8007a82 <_strtol_l.isra.0+0x56>
 8007b32:	3608      	adds	r6, #8
 8007b34:	e7a5      	b.n	8007a82 <_strtol_l.isra.0+0x56>
 8007b36:	2c30      	cmp	r4, #48	; 0x30
 8007b38:	d09b      	beq.n	8007a72 <_strtol_l.isra.0+0x46>
 8007b3a:	260a      	movs	r6, #10
 8007b3c:	e7a1      	b.n	8007a82 <_strtol_l.isra.0+0x56>
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	0800ac21 	.word	0x0800ac21
 8007b44:	7fffffff 	.word	0x7fffffff

08007b48 <_strtol_r>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	f7ff ff6f 	bl	8007a2c <_strtol_l.isra.0>
 8007b4e:	bd10      	pop	{r4, pc}

08007b50 <quorem>:
 8007b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b52:	0006      	movs	r6, r0
 8007b54:	690d      	ldr	r5, [r1, #16]
 8007b56:	6933      	ldr	r3, [r6, #16]
 8007b58:	b087      	sub	sp, #28
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	9102      	str	r1, [sp, #8]
 8007b5e:	42ab      	cmp	r3, r5
 8007b60:	db6b      	blt.n	8007c3a <quorem+0xea>
 8007b62:	000b      	movs	r3, r1
 8007b64:	3d01      	subs	r5, #1
 8007b66:	00ac      	lsls	r4, r5, #2
 8007b68:	3314      	adds	r3, #20
 8007b6a:	9305      	str	r3, [sp, #20]
 8007b6c:	191b      	adds	r3, r3, r4
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	0033      	movs	r3, r6
 8007b72:	3314      	adds	r3, #20
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	191c      	adds	r4, r3, r4
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	6827      	ldr	r7, [r4, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	0038      	movs	r0, r7
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	0019      	movs	r1, r3
 8007b86:	9304      	str	r3, [sp, #16]
 8007b88:	f7f8 fada 	bl	8000140 <__udivsi3>
 8007b8c:	9b04      	ldr	r3, [sp, #16]
 8007b8e:	9000      	str	r0, [sp, #0]
 8007b90:	429f      	cmp	r7, r3
 8007b92:	d329      	bcc.n	8007be8 <quorem+0x98>
 8007b94:	2300      	movs	r3, #0
 8007b96:	469c      	mov	ip, r3
 8007b98:	9801      	ldr	r0, [sp, #4]
 8007b9a:	9f05      	ldr	r7, [sp, #20]
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	cf08      	ldmia	r7!, {r3}
 8007ba0:	9a00      	ldr	r2, [sp, #0]
 8007ba2:	b299      	uxth	r1, r3
 8007ba4:	4351      	muls	r1, r2
 8007ba6:	0c1b      	lsrs	r3, r3, #16
 8007ba8:	4353      	muls	r3, r2
 8007baa:	4461      	add	r1, ip
 8007bac:	0c0a      	lsrs	r2, r1, #16
 8007bae:	189b      	adds	r3, r3, r2
 8007bb0:	0c1a      	lsrs	r2, r3, #16
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	6803      	ldr	r3, [r0, #0]
 8007bb6:	4694      	mov	ip, r2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	9b04      	ldr	r3, [sp, #16]
 8007bbc:	b289      	uxth	r1, r1
 8007bbe:	18d2      	adds	r2, r2, r3
 8007bc0:	6803      	ldr	r3, [r0, #0]
 8007bc2:	1a52      	subs	r2, r2, r1
 8007bc4:	0c19      	lsrs	r1, r3, #16
 8007bc6:	466b      	mov	r3, sp
 8007bc8:	8a9b      	ldrh	r3, [r3, #20]
 8007bca:	1acb      	subs	r3, r1, r3
 8007bcc:	1411      	asrs	r1, r2, #16
 8007bce:	185b      	adds	r3, r3, r1
 8007bd0:	1419      	asrs	r1, r3, #16
 8007bd2:	b292      	uxth	r2, r2
 8007bd4:	041b      	lsls	r3, r3, #16
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	9b03      	ldr	r3, [sp, #12]
 8007bda:	9104      	str	r1, [sp, #16]
 8007bdc:	c004      	stmia	r0!, {r2}
 8007bde:	42bb      	cmp	r3, r7
 8007be0:	d2dd      	bcs.n	8007b9e <quorem+0x4e>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d02e      	beq.n	8007c46 <quorem+0xf6>
 8007be8:	0030      	movs	r0, r6
 8007bea:	9902      	ldr	r1, [sp, #8]
 8007bec:	f001 fcd2 	bl	8009594 <__mcmp>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	db21      	blt.n	8007c38 <quorem+0xe8>
 8007bf4:	0030      	movs	r0, r6
 8007bf6:	2400      	movs	r4, #0
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	9902      	ldr	r1, [sp, #8]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	3014      	adds	r0, #20
 8007c02:	3114      	adds	r1, #20
 8007c04:	6802      	ldr	r2, [r0, #0]
 8007c06:	c908      	ldmia	r1!, {r3}
 8007c08:	b292      	uxth	r2, r2
 8007c0a:	1914      	adds	r4, r2, r4
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	1aa2      	subs	r2, r4, r2
 8007c10:	6804      	ldr	r4, [r0, #0]
 8007c12:	0c1b      	lsrs	r3, r3, #16
 8007c14:	0c24      	lsrs	r4, r4, #16
 8007c16:	1ae3      	subs	r3, r4, r3
 8007c18:	1414      	asrs	r4, r2, #16
 8007c1a:	191b      	adds	r3, r3, r4
 8007c1c:	141c      	asrs	r4, r3, #16
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	041b      	lsls	r3, r3, #16
 8007c22:	4313      	orrs	r3, r2
 8007c24:	c008      	stmia	r0!, {r3}
 8007c26:	9b03      	ldr	r3, [sp, #12]
 8007c28:	428b      	cmp	r3, r1
 8007c2a:	d2eb      	bcs.n	8007c04 <quorem+0xb4>
 8007c2c:	9a01      	ldr	r2, [sp, #4]
 8007c2e:	00ab      	lsls	r3, r5, #2
 8007c30:	18d3      	adds	r3, r2, r3
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	d010      	beq.n	8007c5a <quorem+0x10a>
 8007c38:	9800      	ldr	r0, [sp, #0]
 8007c3a:	b007      	add	sp, #28
 8007c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d104      	bne.n	8007c4e <quorem+0xfe>
 8007c44:	3d01      	subs	r5, #1
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	3c04      	subs	r4, #4
 8007c4a:	42a3      	cmp	r3, r4
 8007c4c:	d3f7      	bcc.n	8007c3e <quorem+0xee>
 8007c4e:	6135      	str	r5, [r6, #16]
 8007c50:	e7ca      	b.n	8007be8 <quorem+0x98>
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	2a00      	cmp	r2, #0
 8007c56:	d104      	bne.n	8007c62 <quorem+0x112>
 8007c58:	3d01      	subs	r5, #1
 8007c5a:	9a01      	ldr	r2, [sp, #4]
 8007c5c:	3b04      	subs	r3, #4
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d3f7      	bcc.n	8007c52 <quorem+0x102>
 8007c62:	6135      	str	r5, [r6, #16]
 8007c64:	e7e8      	b.n	8007c38 <quorem+0xe8>
	...

08007c68 <_dtoa_r>:
 8007c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6a:	b09d      	sub	sp, #116	; 0x74
 8007c6c:	9202      	str	r2, [sp, #8]
 8007c6e:	9303      	str	r3, [sp, #12]
 8007c70:	9b02      	ldr	r3, [sp, #8]
 8007c72:	9c03      	ldr	r4, [sp, #12]
 8007c74:	930a      	str	r3, [sp, #40]	; 0x28
 8007c76:	940b      	str	r4, [sp, #44]	; 0x2c
 8007c78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c7a:	0007      	movs	r7, r0
 8007c7c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007c7e:	2c00      	cmp	r4, #0
 8007c80:	d10e      	bne.n	8007ca0 <_dtoa_r+0x38>
 8007c82:	2010      	movs	r0, #16
 8007c84:	f001 f984 	bl	8008f90 <malloc>
 8007c88:	1e02      	subs	r2, r0, #0
 8007c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8007c8c:	d104      	bne.n	8007c98 <_dtoa_r+0x30>
 8007c8e:	21ea      	movs	r1, #234	; 0xea
 8007c90:	4bc0      	ldr	r3, [pc, #768]	; (8007f94 <_dtoa_r+0x32c>)
 8007c92:	48c1      	ldr	r0, [pc, #772]	; (8007f98 <_dtoa_r+0x330>)
 8007c94:	f002 f8c4 	bl	8009e20 <__assert_func>
 8007c98:	6044      	str	r4, [r0, #4]
 8007c9a:	6084      	str	r4, [r0, #8]
 8007c9c:	6004      	str	r4, [r0, #0]
 8007c9e:	60c4      	str	r4, [r0, #12]
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d00a      	beq.n	8007cbe <_dtoa_r+0x56>
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	2301      	movs	r3, #1
 8007cac:	4093      	lsls	r3, r2
 8007cae:	604a      	str	r2, [r1, #4]
 8007cb0:	608b      	str	r3, [r1, #8]
 8007cb2:	0038      	movs	r0, r7
 8007cb4:	f001 f9e0 	bl	8009078 <_Bfree>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	da21      	bge.n	8007d08 <_dtoa_r+0xa0>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007cd2:	4bb2      	ldr	r3, [pc, #712]	; (8007f9c <_dtoa_r+0x334>)
 8007cd4:	002a      	movs	r2, r5
 8007cd6:	9318      	str	r3, [sp, #96]	; 0x60
 8007cd8:	401a      	ands	r2, r3
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d117      	bne.n	8007d0e <_dtoa_r+0xa6>
 8007cde:	4bb0      	ldr	r3, [pc, #704]	; (8007fa0 <_dtoa_r+0x338>)
 8007ce0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ce2:	0328      	lsls	r0, r5, #12
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	9b02      	ldr	r3, [sp, #8]
 8007ce8:	0b00      	lsrs	r0, r0, #12
 8007cea:	4318      	orrs	r0, r3
 8007cec:	d101      	bne.n	8007cf2 <_dtoa_r+0x8a>
 8007cee:	f000 fdc3 	bl	8008878 <_dtoa_r+0xc10>
 8007cf2:	48ac      	ldr	r0, [pc, #688]	; (8007fa4 <_dtoa_r+0x33c>)
 8007cf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cf6:	9005      	str	r0, [sp, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <_dtoa_r+0x9a>
 8007cfc:	4baa      	ldr	r3, [pc, #680]	; (8007fa8 <_dtoa_r+0x340>)
 8007cfe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	9805      	ldr	r0, [sp, #20]
 8007d04:	b01d      	add	sp, #116	; 0x74
 8007d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d08:	2300      	movs	r3, #0
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	e7e0      	b.n	8007cd0 <_dtoa_r+0x68>
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007d12:	9312      	str	r3, [sp, #72]	; 0x48
 8007d14:	9413      	str	r4, [sp, #76]	; 0x4c
 8007d16:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d18:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f7f8 fb95 	bl	800044c <__aeabi_dcmpeq>
 8007d22:	1e04      	subs	r4, r0, #0
 8007d24:	d00b      	beq.n	8007d3e <_dtoa_r+0xd6>
 8007d26:	2301      	movs	r3, #1
 8007d28:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4b9f      	ldr	r3, [pc, #636]	; (8007fac <_dtoa_r+0x344>)
 8007d2e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	2a00      	cmp	r2, #0
 8007d34:	d0e5      	beq.n	8007d02 <_dtoa_r+0x9a>
 8007d36:	4a9e      	ldr	r2, [pc, #632]	; (8007fb0 <_dtoa_r+0x348>)
 8007d38:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007d3a:	600a      	str	r2, [r1, #0]
 8007d3c:	e7e1      	b.n	8007d02 <_dtoa_r+0x9a>
 8007d3e:	ab1a      	add	r3, sp, #104	; 0x68
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	0038      	movs	r0, r7
 8007d48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d4c:	f001 fd4a 	bl	80097e4 <__d2b>
 8007d50:	006e      	lsls	r6, r5, #1
 8007d52:	9004      	str	r0, [sp, #16]
 8007d54:	0d76      	lsrs	r6, r6, #21
 8007d56:	d100      	bne.n	8007d5a <_dtoa_r+0xf2>
 8007d58:	e07c      	b.n	8007e54 <_dtoa_r+0x1ec>
 8007d5a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d60:	4a94      	ldr	r2, [pc, #592]	; (8007fb4 <_dtoa_r+0x34c>)
 8007d62:	031b      	lsls	r3, r3, #12
 8007d64:	0b1b      	lsrs	r3, r3, #12
 8007d66:	431a      	orrs	r2, r3
 8007d68:	0011      	movs	r1, r2
 8007d6a:	4b93      	ldr	r3, [pc, #588]	; (8007fb8 <_dtoa_r+0x350>)
 8007d6c:	9416      	str	r4, [sp, #88]	; 0x58
 8007d6e:	18f6      	adds	r6, r6, r3
 8007d70:	2200      	movs	r2, #0
 8007d72:	4b92      	ldr	r3, [pc, #584]	; (8007fbc <_dtoa_r+0x354>)
 8007d74:	f7f9 ff36 	bl	8001be4 <__aeabi_dsub>
 8007d78:	4a91      	ldr	r2, [pc, #580]	; (8007fc0 <_dtoa_r+0x358>)
 8007d7a:	4b92      	ldr	r3, [pc, #584]	; (8007fc4 <_dtoa_r+0x35c>)
 8007d7c:	f7f9 fcc6 	bl	800170c <__aeabi_dmul>
 8007d80:	4a91      	ldr	r2, [pc, #580]	; (8007fc8 <_dtoa_r+0x360>)
 8007d82:	4b92      	ldr	r3, [pc, #584]	; (8007fcc <_dtoa_r+0x364>)
 8007d84:	f7f8 fd52 	bl	800082c <__aeabi_dadd>
 8007d88:	0004      	movs	r4, r0
 8007d8a:	0030      	movs	r0, r6
 8007d8c:	000d      	movs	r5, r1
 8007d8e:	f7fa fb0f 	bl	80023b0 <__aeabi_i2d>
 8007d92:	4a8f      	ldr	r2, [pc, #572]	; (8007fd0 <_dtoa_r+0x368>)
 8007d94:	4b8f      	ldr	r3, [pc, #572]	; (8007fd4 <_dtoa_r+0x36c>)
 8007d96:	f7f9 fcb9 	bl	800170c <__aeabi_dmul>
 8007d9a:	0002      	movs	r2, r0
 8007d9c:	000b      	movs	r3, r1
 8007d9e:	0020      	movs	r0, r4
 8007da0:	0029      	movs	r1, r5
 8007da2:	f7f8 fd43 	bl	800082c <__aeabi_dadd>
 8007da6:	0004      	movs	r4, r0
 8007da8:	000d      	movs	r5, r1
 8007daa:	f7fa facb 	bl	8002344 <__aeabi_d2iz>
 8007dae:	2200      	movs	r2, #0
 8007db0:	9002      	str	r0, [sp, #8]
 8007db2:	2300      	movs	r3, #0
 8007db4:	0020      	movs	r0, r4
 8007db6:	0029      	movs	r1, r5
 8007db8:	f7f8 fb4e 	bl	8000458 <__aeabi_dcmplt>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d00b      	beq.n	8007dd8 <_dtoa_r+0x170>
 8007dc0:	9802      	ldr	r0, [sp, #8]
 8007dc2:	f7fa faf5 	bl	80023b0 <__aeabi_i2d>
 8007dc6:	002b      	movs	r3, r5
 8007dc8:	0022      	movs	r2, r4
 8007dca:	f7f8 fb3f 	bl	800044c <__aeabi_dcmpeq>
 8007dce:	4243      	negs	r3, r0
 8007dd0:	4158      	adcs	r0, r3
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	1a1b      	subs	r3, r3, r0
 8007dd6:	9302      	str	r3, [sp, #8]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	9315      	str	r3, [sp, #84]	; 0x54
 8007ddc:	9b02      	ldr	r3, [sp, #8]
 8007dde:	2b16      	cmp	r3, #22
 8007de0:	d80f      	bhi.n	8007e02 <_dtoa_r+0x19a>
 8007de2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007de4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007de6:	00da      	lsls	r2, r3, #3
 8007de8:	4b7b      	ldr	r3, [pc, #492]	; (8007fd8 <_dtoa_r+0x370>)
 8007dea:	189b      	adds	r3, r3, r2
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f7f8 fb32 	bl	8000458 <__aeabi_dcmplt>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d049      	beq.n	8007e8c <_dtoa_r+0x224>
 8007df8:	9b02      	ldr	r3, [sp, #8]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	9302      	str	r3, [sp, #8]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9315      	str	r3, [sp, #84]	; 0x54
 8007e02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e04:	1b9e      	subs	r6, r3, r6
 8007e06:	2300      	movs	r3, #0
 8007e08:	9308      	str	r3, [sp, #32]
 8007e0a:	0033      	movs	r3, r6
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e10:	d504      	bpl.n	8007e1c <_dtoa_r+0x1b4>
 8007e12:	2301      	movs	r3, #1
 8007e14:	1b9b      	subs	r3, r3, r6
 8007e16:	9308      	str	r3, [sp, #32]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e1c:	9b02      	ldr	r3, [sp, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	db36      	blt.n	8007e90 <_dtoa_r+0x228>
 8007e22:	9a02      	ldr	r2, [sp, #8]
 8007e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e26:	4694      	mov	ip, r2
 8007e28:	4463      	add	r3, ip
 8007e2a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9214      	str	r2, [sp, #80]	; 0x50
 8007e30:	930e      	str	r3, [sp, #56]	; 0x38
 8007e32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e34:	2401      	movs	r4, #1
 8007e36:	2b09      	cmp	r3, #9
 8007e38:	d862      	bhi.n	8007f00 <_dtoa_r+0x298>
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	dd02      	ble.n	8007e44 <_dtoa_r+0x1dc>
 8007e3e:	2400      	movs	r4, #0
 8007e40:	3b04      	subs	r3, #4
 8007e42:	9322      	str	r3, [sp, #136]	; 0x88
 8007e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e46:	1e98      	subs	r0, r3, #2
 8007e48:	2803      	cmp	r0, #3
 8007e4a:	d862      	bhi.n	8007f12 <_dtoa_r+0x2aa>
 8007e4c:	f7f8 f964 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007e50:	56343629 	.word	0x56343629
 8007e54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e56:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e58:	189e      	adds	r6, r3, r2
 8007e5a:	4b60      	ldr	r3, [pc, #384]	; (8007fdc <_dtoa_r+0x374>)
 8007e5c:	18f2      	adds	r2, r6, r3
 8007e5e:	2a20      	cmp	r2, #32
 8007e60:	dd0f      	ble.n	8007e82 <_dtoa_r+0x21a>
 8007e62:	2340      	movs	r3, #64	; 0x40
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	409d      	lsls	r5, r3
 8007e68:	4b5d      	ldr	r3, [pc, #372]	; (8007fe0 <_dtoa_r+0x378>)
 8007e6a:	9802      	ldr	r0, [sp, #8]
 8007e6c:	18f3      	adds	r3, r6, r3
 8007e6e:	40d8      	lsrs	r0, r3
 8007e70:	4328      	orrs	r0, r5
 8007e72:	f7fa facd 	bl	8002410 <__aeabi_ui2d>
 8007e76:	2301      	movs	r3, #1
 8007e78:	4c5a      	ldr	r4, [pc, #360]	; (8007fe4 <_dtoa_r+0x37c>)
 8007e7a:	3e01      	subs	r6, #1
 8007e7c:	1909      	adds	r1, r1, r4
 8007e7e:	9316      	str	r3, [sp, #88]	; 0x58
 8007e80:	e776      	b.n	8007d70 <_dtoa_r+0x108>
 8007e82:	2320      	movs	r3, #32
 8007e84:	9802      	ldr	r0, [sp, #8]
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	4098      	lsls	r0, r3
 8007e8a:	e7f2      	b.n	8007e72 <_dtoa_r+0x20a>
 8007e8c:	9015      	str	r0, [sp, #84]	; 0x54
 8007e8e:	e7b8      	b.n	8007e02 <_dtoa_r+0x19a>
 8007e90:	9b08      	ldr	r3, [sp, #32]
 8007e92:	9a02      	ldr	r2, [sp, #8]
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	9308      	str	r3, [sp, #32]
 8007e98:	4253      	negs	r3, r2
 8007e9a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9314      	str	r3, [sp, #80]	; 0x50
 8007ea0:	e7c7      	b.n	8007e32 <_dtoa_r+0x1ca>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ea6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dc36      	bgt.n	8007f1a <_dtoa_r+0x2b2>
 8007eac:	2301      	movs	r3, #1
 8007eae:	001a      	movs	r2, r3
 8007eb0:	930c      	str	r3, [sp, #48]	; 0x30
 8007eb2:	9306      	str	r3, [sp, #24]
 8007eb4:	9223      	str	r2, [sp, #140]	; 0x8c
 8007eb6:	e00d      	b.n	8007ed4 <_dtoa_r+0x26c>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e7f3      	b.n	8007ea4 <_dtoa_r+0x23c>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec2:	4694      	mov	ip, r2
 8007ec4:	9b02      	ldr	r3, [sp, #8]
 8007ec6:	4463      	add	r3, ip
 8007ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8007eca:	3301      	adds	r3, #1
 8007ecc:	9306      	str	r3, [sp, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dc00      	bgt.n	8007ed4 <_dtoa_r+0x26c>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ed8:	6042      	str	r2, [r0, #4]
 8007eda:	3204      	adds	r2, #4
 8007edc:	0015      	movs	r5, r2
 8007ede:	3514      	adds	r5, #20
 8007ee0:	6841      	ldr	r1, [r0, #4]
 8007ee2:	429d      	cmp	r5, r3
 8007ee4:	d91d      	bls.n	8007f22 <_dtoa_r+0x2ba>
 8007ee6:	0038      	movs	r0, r7
 8007ee8:	f001 f882 	bl	8008ff0 <_Balloc>
 8007eec:	9005      	str	r0, [sp, #20]
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d11b      	bne.n	8007f2a <_dtoa_r+0x2c2>
 8007ef2:	21d5      	movs	r1, #213	; 0xd5
 8007ef4:	0002      	movs	r2, r0
 8007ef6:	4b3c      	ldr	r3, [pc, #240]	; (8007fe8 <_dtoa_r+0x380>)
 8007ef8:	0049      	lsls	r1, r1, #1
 8007efa:	e6ca      	b.n	8007c92 <_dtoa_r+0x2a>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e7de      	b.n	8007ebe <_dtoa_r+0x256>
 8007f00:	2300      	movs	r3, #0
 8007f02:	940f      	str	r4, [sp, #60]	; 0x3c
 8007f04:	9322      	str	r3, [sp, #136]	; 0x88
 8007f06:	3b01      	subs	r3, #1
 8007f08:	930c      	str	r3, [sp, #48]	; 0x30
 8007f0a:	9306      	str	r3, [sp, #24]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	3313      	adds	r3, #19
 8007f10:	e7d0      	b.n	8007eb4 <_dtoa_r+0x24c>
 8007f12:	2301      	movs	r3, #1
 8007f14:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f16:	3b02      	subs	r3, #2
 8007f18:	e7f6      	b.n	8007f08 <_dtoa_r+0x2a0>
 8007f1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007f1e:	9306      	str	r3, [sp, #24]
 8007f20:	e7d8      	b.n	8007ed4 <_dtoa_r+0x26c>
 8007f22:	3101      	adds	r1, #1
 8007f24:	6041      	str	r1, [r0, #4]
 8007f26:	0052      	lsls	r2, r2, #1
 8007f28:	e7d8      	b.n	8007edc <_dtoa_r+0x274>
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	9a05      	ldr	r2, [sp, #20]
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	9b06      	ldr	r3, [sp, #24]
 8007f32:	2b0e      	cmp	r3, #14
 8007f34:	d900      	bls.n	8007f38 <_dtoa_r+0x2d0>
 8007f36:	e0eb      	b.n	8008110 <_dtoa_r+0x4a8>
 8007f38:	2c00      	cmp	r4, #0
 8007f3a:	d100      	bne.n	8007f3e <_dtoa_r+0x2d6>
 8007f3c:	e0e8      	b.n	8008110 <_dtoa_r+0x4a8>
 8007f3e:	9b02      	ldr	r3, [sp, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	dd68      	ble.n	8008016 <_dtoa_r+0x3ae>
 8007f44:	001a      	movs	r2, r3
 8007f46:	210f      	movs	r1, #15
 8007f48:	4b23      	ldr	r3, [pc, #140]	; (8007fd8 <_dtoa_r+0x370>)
 8007f4a:	400a      	ands	r2, r1
 8007f4c:	00d2      	lsls	r2, r2, #3
 8007f4e:	189b      	adds	r3, r3, r2
 8007f50:	681d      	ldr	r5, [r3, #0]
 8007f52:	685e      	ldr	r6, [r3, #4]
 8007f54:	9b02      	ldr	r3, [sp, #8]
 8007f56:	111c      	asrs	r4, r3, #4
 8007f58:	2302      	movs	r3, #2
 8007f5a:	9310      	str	r3, [sp, #64]	; 0x40
 8007f5c:	9b02      	ldr	r3, [sp, #8]
 8007f5e:	05db      	lsls	r3, r3, #23
 8007f60:	d50b      	bpl.n	8007f7a <_dtoa_r+0x312>
 8007f62:	4b22      	ldr	r3, [pc, #136]	; (8007fec <_dtoa_r+0x384>)
 8007f64:	400c      	ands	r4, r1
 8007f66:	6a1a      	ldr	r2, [r3, #32]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f6c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f6e:	f7f8 ffc7 	bl	8000f00 <__aeabi_ddiv>
 8007f72:	2303      	movs	r3, #3
 8007f74:	900a      	str	r0, [sp, #40]	; 0x28
 8007f76:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f78:	9310      	str	r3, [sp, #64]	; 0x40
 8007f7a:	4b1c      	ldr	r3, [pc, #112]	; (8007fec <_dtoa_r+0x384>)
 8007f7c:	9307      	str	r3, [sp, #28]
 8007f7e:	2c00      	cmp	r4, #0
 8007f80:	d136      	bne.n	8007ff0 <_dtoa_r+0x388>
 8007f82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f86:	002a      	movs	r2, r5
 8007f88:	0033      	movs	r3, r6
 8007f8a:	f7f8 ffb9 	bl	8000f00 <__aeabi_ddiv>
 8007f8e:	900a      	str	r0, [sp, #40]	; 0x28
 8007f90:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f92:	e05c      	b.n	800804e <_dtoa_r+0x3e6>
 8007f94:	0800ad2e 	.word	0x0800ad2e
 8007f98:	0800ad45 	.word	0x0800ad45
 8007f9c:	7ff00000 	.word	0x7ff00000
 8007fa0:	0000270f 	.word	0x0000270f
 8007fa4:	0800ad2a 	.word	0x0800ad2a
 8007fa8:	0800ad2d 	.word	0x0800ad2d
 8007fac:	0800aba0 	.word	0x0800aba0
 8007fb0:	0800aba1 	.word	0x0800aba1
 8007fb4:	3ff00000 	.word	0x3ff00000
 8007fb8:	fffffc01 	.word	0xfffffc01
 8007fbc:	3ff80000 	.word	0x3ff80000
 8007fc0:	636f4361 	.word	0x636f4361
 8007fc4:	3fd287a7 	.word	0x3fd287a7
 8007fc8:	8b60c8b3 	.word	0x8b60c8b3
 8007fcc:	3fc68a28 	.word	0x3fc68a28
 8007fd0:	509f79fb 	.word	0x509f79fb
 8007fd4:	3fd34413 	.word	0x3fd34413
 8007fd8:	0800aec0 	.word	0x0800aec0
 8007fdc:	00000432 	.word	0x00000432
 8007fe0:	00000412 	.word	0x00000412
 8007fe4:	fe100000 	.word	0xfe100000
 8007fe8:	0800ada4 	.word	0x0800ada4
 8007fec:	0800ae98 	.word	0x0800ae98
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	421c      	tst	r4, r3
 8007ff4:	d00b      	beq.n	800800e <_dtoa_r+0x3a6>
 8007ff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ff8:	0028      	movs	r0, r5
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	9310      	str	r3, [sp, #64]	; 0x40
 8007ffe:	9b07      	ldr	r3, [sp, #28]
 8008000:	0031      	movs	r1, r6
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f7f9 fb81 	bl	800170c <__aeabi_dmul>
 800800a:	0005      	movs	r5, r0
 800800c:	000e      	movs	r6, r1
 800800e:	9b07      	ldr	r3, [sp, #28]
 8008010:	1064      	asrs	r4, r4, #1
 8008012:	3308      	adds	r3, #8
 8008014:	e7b2      	b.n	8007f7c <_dtoa_r+0x314>
 8008016:	2302      	movs	r3, #2
 8008018:	9310      	str	r3, [sp, #64]	; 0x40
 800801a:	9b02      	ldr	r3, [sp, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d016      	beq.n	800804e <_dtoa_r+0x3e6>
 8008020:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008022:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008024:	425c      	negs	r4, r3
 8008026:	230f      	movs	r3, #15
 8008028:	4ab5      	ldr	r2, [pc, #724]	; (8008300 <_dtoa_r+0x698>)
 800802a:	4023      	ands	r3, r4
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	18d3      	adds	r3, r2, r3
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f7f9 fb6a 	bl	800170c <__aeabi_dmul>
 8008038:	2601      	movs	r6, #1
 800803a:	2300      	movs	r3, #0
 800803c:	900a      	str	r0, [sp, #40]	; 0x28
 800803e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008040:	4db0      	ldr	r5, [pc, #704]	; (8008304 <_dtoa_r+0x69c>)
 8008042:	1124      	asrs	r4, r4, #4
 8008044:	2c00      	cmp	r4, #0
 8008046:	d000      	beq.n	800804a <_dtoa_r+0x3e2>
 8008048:	e094      	b.n	8008174 <_dtoa_r+0x50c>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d19f      	bne.n	8007f8e <_dtoa_r+0x326>
 800804e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008050:	2b00      	cmp	r3, #0
 8008052:	d100      	bne.n	8008056 <_dtoa_r+0x3ee>
 8008054:	e09b      	b.n	800818e <_dtoa_r+0x526>
 8008056:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008058:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800805a:	2200      	movs	r2, #0
 800805c:	0020      	movs	r0, r4
 800805e:	0029      	movs	r1, r5
 8008060:	4ba9      	ldr	r3, [pc, #676]	; (8008308 <_dtoa_r+0x6a0>)
 8008062:	f7f8 f9f9 	bl	8000458 <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	d100      	bne.n	800806c <_dtoa_r+0x404>
 800806a:	e090      	b.n	800818e <_dtoa_r+0x526>
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d100      	bne.n	8008074 <_dtoa_r+0x40c>
 8008072:	e08c      	b.n	800818e <_dtoa_r+0x526>
 8008074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008076:	2b00      	cmp	r3, #0
 8008078:	dd46      	ble.n	8008108 <_dtoa_r+0x4a0>
 800807a:	9b02      	ldr	r3, [sp, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	0020      	movs	r0, r4
 8008080:	0029      	movs	r1, r5
 8008082:	1e5e      	subs	r6, r3, #1
 8008084:	4ba1      	ldr	r3, [pc, #644]	; (800830c <_dtoa_r+0x6a4>)
 8008086:	f7f9 fb41 	bl	800170c <__aeabi_dmul>
 800808a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800808c:	900a      	str	r0, [sp, #40]	; 0x28
 800808e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008090:	3301      	adds	r3, #1
 8008092:	9310      	str	r3, [sp, #64]	; 0x40
 8008094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008096:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008098:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800809a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800809c:	9307      	str	r3, [sp, #28]
 800809e:	f7fa f987 	bl	80023b0 <__aeabi_i2d>
 80080a2:	0022      	movs	r2, r4
 80080a4:	002b      	movs	r3, r5
 80080a6:	f7f9 fb31 	bl	800170c <__aeabi_dmul>
 80080aa:	2200      	movs	r2, #0
 80080ac:	4b98      	ldr	r3, [pc, #608]	; (8008310 <_dtoa_r+0x6a8>)
 80080ae:	f7f8 fbbd 	bl	800082c <__aeabi_dadd>
 80080b2:	9010      	str	r0, [sp, #64]	; 0x40
 80080b4:	9111      	str	r1, [sp, #68]	; 0x44
 80080b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080ba:	920a      	str	r2, [sp, #40]	; 0x28
 80080bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80080be:	4a95      	ldr	r2, [pc, #596]	; (8008314 <_dtoa_r+0x6ac>)
 80080c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080c2:	4694      	mov	ip, r2
 80080c4:	4463      	add	r3, ip
 80080c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80080c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ca:	9b07      	ldr	r3, [sp, #28]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d161      	bne.n	8008194 <_dtoa_r+0x52c>
 80080d0:	2200      	movs	r2, #0
 80080d2:	0020      	movs	r0, r4
 80080d4:	0029      	movs	r1, r5
 80080d6:	4b90      	ldr	r3, [pc, #576]	; (8008318 <_dtoa_r+0x6b0>)
 80080d8:	f7f9 fd84 	bl	8001be4 <__aeabi_dsub>
 80080dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080e0:	0004      	movs	r4, r0
 80080e2:	000d      	movs	r5, r1
 80080e4:	f7f8 f9cc 	bl	8000480 <__aeabi_dcmpgt>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d000      	beq.n	80080ee <_dtoa_r+0x486>
 80080ec:	e2b5      	b.n	800865a <_dtoa_r+0x9f2>
 80080ee:	488b      	ldr	r0, [pc, #556]	; (800831c <_dtoa_r+0x6b4>)
 80080f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080f2:	4684      	mov	ip, r0
 80080f4:	4461      	add	r1, ip
 80080f6:	000b      	movs	r3, r1
 80080f8:	0020      	movs	r0, r4
 80080fa:	0029      	movs	r1, r5
 80080fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080fe:	f7f8 f9ab 	bl	8000458 <__aeabi_dcmplt>
 8008102:	2800      	cmp	r0, #0
 8008104:	d000      	beq.n	8008108 <_dtoa_r+0x4a0>
 8008106:	e2a5      	b.n	8008654 <_dtoa_r+0x9ec>
 8008108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800810a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800810c:	930a      	str	r3, [sp, #40]	; 0x28
 800810e:	940b      	str	r4, [sp, #44]	; 0x2c
 8008110:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008112:	2b00      	cmp	r3, #0
 8008114:	da00      	bge.n	8008118 <_dtoa_r+0x4b0>
 8008116:	e171      	b.n	80083fc <_dtoa_r+0x794>
 8008118:	9a02      	ldr	r2, [sp, #8]
 800811a:	2a0e      	cmp	r2, #14
 800811c:	dd00      	ble.n	8008120 <_dtoa_r+0x4b8>
 800811e:	e16d      	b.n	80083fc <_dtoa_r+0x794>
 8008120:	4b77      	ldr	r3, [pc, #476]	; (8008300 <_dtoa_r+0x698>)
 8008122:	00d2      	lsls	r2, r2, #3
 8008124:	189b      	adds	r3, r3, r2
 8008126:	685c      	ldr	r4, [r3, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	9308      	str	r3, [sp, #32]
 800812c:	9409      	str	r4, [sp, #36]	; 0x24
 800812e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008130:	2b00      	cmp	r3, #0
 8008132:	db00      	blt.n	8008136 <_dtoa_r+0x4ce>
 8008134:	e0f6      	b.n	8008324 <_dtoa_r+0x6bc>
 8008136:	9b06      	ldr	r3, [sp, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	dd00      	ble.n	800813e <_dtoa_r+0x4d6>
 800813c:	e0f2      	b.n	8008324 <_dtoa_r+0x6bc>
 800813e:	d000      	beq.n	8008142 <_dtoa_r+0x4da>
 8008140:	e288      	b.n	8008654 <_dtoa_r+0x9ec>
 8008142:	9808      	ldr	r0, [sp, #32]
 8008144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008146:	2200      	movs	r2, #0
 8008148:	4b73      	ldr	r3, [pc, #460]	; (8008318 <_dtoa_r+0x6b0>)
 800814a:	f7f9 fadf 	bl	800170c <__aeabi_dmul>
 800814e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008152:	f7f8 f99f 	bl	8000494 <__aeabi_dcmpge>
 8008156:	9e06      	ldr	r6, [sp, #24]
 8008158:	0035      	movs	r5, r6
 800815a:	2800      	cmp	r0, #0
 800815c:	d000      	beq.n	8008160 <_dtoa_r+0x4f8>
 800815e:	e25f      	b.n	8008620 <_dtoa_r+0x9b8>
 8008160:	9b05      	ldr	r3, [sp, #20]
 8008162:	9a05      	ldr	r2, [sp, #20]
 8008164:	3301      	adds	r3, #1
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	2331      	movs	r3, #49	; 0x31
 800816a:	7013      	strb	r3, [r2, #0]
 800816c:	9b02      	ldr	r3, [sp, #8]
 800816e:	3301      	adds	r3, #1
 8008170:	9302      	str	r3, [sp, #8]
 8008172:	e25a      	b.n	800862a <_dtoa_r+0x9c2>
 8008174:	4234      	tst	r4, r6
 8008176:	d007      	beq.n	8008188 <_dtoa_r+0x520>
 8008178:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800817a:	3301      	adds	r3, #1
 800817c:	9310      	str	r3, [sp, #64]	; 0x40
 800817e:	682a      	ldr	r2, [r5, #0]
 8008180:	686b      	ldr	r3, [r5, #4]
 8008182:	f7f9 fac3 	bl	800170c <__aeabi_dmul>
 8008186:	0033      	movs	r3, r6
 8008188:	1064      	asrs	r4, r4, #1
 800818a:	3508      	adds	r5, #8
 800818c:	e75a      	b.n	8008044 <_dtoa_r+0x3dc>
 800818e:	9e02      	ldr	r6, [sp, #8]
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	e780      	b.n	8008096 <_dtoa_r+0x42e>
 8008194:	9b07      	ldr	r3, [sp, #28]
 8008196:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008198:	1e5a      	subs	r2, r3, #1
 800819a:	4b59      	ldr	r3, [pc, #356]	; (8008300 <_dtoa_r+0x698>)
 800819c:	00d2      	lsls	r2, r2, #3
 800819e:	189b      	adds	r3, r3, r2
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2900      	cmp	r1, #0
 80081a6:	d051      	beq.n	800824c <_dtoa_r+0x5e4>
 80081a8:	2000      	movs	r0, #0
 80081aa:	495d      	ldr	r1, [pc, #372]	; (8008320 <_dtoa_r+0x6b8>)
 80081ac:	f7f8 fea8 	bl	8000f00 <__aeabi_ddiv>
 80081b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081b4:	f7f9 fd16 	bl	8001be4 <__aeabi_dsub>
 80081b8:	9a05      	ldr	r2, [sp, #20]
 80081ba:	9b05      	ldr	r3, [sp, #20]
 80081bc:	4694      	mov	ip, r2
 80081be:	9310      	str	r3, [sp, #64]	; 0x40
 80081c0:	9b07      	ldr	r3, [sp, #28]
 80081c2:	900a      	str	r0, [sp, #40]	; 0x28
 80081c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80081c6:	4463      	add	r3, ip
 80081c8:	9319      	str	r3, [sp, #100]	; 0x64
 80081ca:	0029      	movs	r1, r5
 80081cc:	0020      	movs	r0, r4
 80081ce:	f7fa f8b9 	bl	8002344 <__aeabi_d2iz>
 80081d2:	9017      	str	r0, [sp, #92]	; 0x5c
 80081d4:	f7fa f8ec 	bl	80023b0 <__aeabi_i2d>
 80081d8:	0002      	movs	r2, r0
 80081da:	000b      	movs	r3, r1
 80081dc:	0020      	movs	r0, r4
 80081de:	0029      	movs	r1, r5
 80081e0:	f7f9 fd00 	bl	8001be4 <__aeabi_dsub>
 80081e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081e8:	3301      	adds	r3, #1
 80081ea:	9307      	str	r3, [sp, #28]
 80081ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ee:	0004      	movs	r4, r0
 80081f0:	3330      	adds	r3, #48	; 0x30
 80081f2:	7013      	strb	r3, [r2, #0]
 80081f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f8:	000d      	movs	r5, r1
 80081fa:	f7f8 f92d 	bl	8000458 <__aeabi_dcmplt>
 80081fe:	2800      	cmp	r0, #0
 8008200:	d175      	bne.n	80082ee <_dtoa_r+0x686>
 8008202:	0022      	movs	r2, r4
 8008204:	002b      	movs	r3, r5
 8008206:	2000      	movs	r0, #0
 8008208:	493f      	ldr	r1, [pc, #252]	; (8008308 <_dtoa_r+0x6a0>)
 800820a:	f7f9 fceb 	bl	8001be4 <__aeabi_dsub>
 800820e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008212:	f7f8 f921 	bl	8000458 <__aeabi_dcmplt>
 8008216:	2800      	cmp	r0, #0
 8008218:	d000      	beq.n	800821c <_dtoa_r+0x5b4>
 800821a:	e0d1      	b.n	80083c0 <_dtoa_r+0x758>
 800821c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800821e:	9a07      	ldr	r2, [sp, #28]
 8008220:	4293      	cmp	r3, r2
 8008222:	d100      	bne.n	8008226 <_dtoa_r+0x5be>
 8008224:	e770      	b.n	8008108 <_dtoa_r+0x4a0>
 8008226:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800822a:	2200      	movs	r2, #0
 800822c:	4b37      	ldr	r3, [pc, #220]	; (800830c <_dtoa_r+0x6a4>)
 800822e:	f7f9 fa6d 	bl	800170c <__aeabi_dmul>
 8008232:	4b36      	ldr	r3, [pc, #216]	; (800830c <_dtoa_r+0x6a4>)
 8008234:	900a      	str	r0, [sp, #40]	; 0x28
 8008236:	910b      	str	r1, [sp, #44]	; 0x2c
 8008238:	2200      	movs	r2, #0
 800823a:	0020      	movs	r0, r4
 800823c:	0029      	movs	r1, r5
 800823e:	f7f9 fa65 	bl	800170c <__aeabi_dmul>
 8008242:	9b07      	ldr	r3, [sp, #28]
 8008244:	0004      	movs	r4, r0
 8008246:	000d      	movs	r5, r1
 8008248:	9310      	str	r3, [sp, #64]	; 0x40
 800824a:	e7be      	b.n	80081ca <_dtoa_r+0x562>
 800824c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800824e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008250:	f7f9 fa5c 	bl	800170c <__aeabi_dmul>
 8008254:	9a05      	ldr	r2, [sp, #20]
 8008256:	9b05      	ldr	r3, [sp, #20]
 8008258:	4694      	mov	ip, r2
 800825a:	930a      	str	r3, [sp, #40]	; 0x28
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	9010      	str	r0, [sp, #64]	; 0x40
 8008260:	9111      	str	r1, [sp, #68]	; 0x44
 8008262:	4463      	add	r3, ip
 8008264:	9319      	str	r3, [sp, #100]	; 0x64
 8008266:	0029      	movs	r1, r5
 8008268:	0020      	movs	r0, r4
 800826a:	f7fa f86b 	bl	8002344 <__aeabi_d2iz>
 800826e:	9017      	str	r0, [sp, #92]	; 0x5c
 8008270:	f7fa f89e 	bl	80023b0 <__aeabi_i2d>
 8008274:	0002      	movs	r2, r0
 8008276:	000b      	movs	r3, r1
 8008278:	0020      	movs	r0, r4
 800827a:	0029      	movs	r1, r5
 800827c:	f7f9 fcb2 	bl	8001be4 <__aeabi_dsub>
 8008280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008284:	3330      	adds	r3, #48	; 0x30
 8008286:	7013      	strb	r3, [r2, #0]
 8008288:	0013      	movs	r3, r2
 800828a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800828c:	3301      	adds	r3, #1
 800828e:	0004      	movs	r4, r0
 8008290:	000d      	movs	r5, r1
 8008292:	930a      	str	r3, [sp, #40]	; 0x28
 8008294:	4293      	cmp	r3, r2
 8008296:	d12c      	bne.n	80082f2 <_dtoa_r+0x68a>
 8008298:	9810      	ldr	r0, [sp, #64]	; 0x40
 800829a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800829c:	9a05      	ldr	r2, [sp, #20]
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	4694      	mov	ip, r2
 80082a2:	4463      	add	r3, ip
 80082a4:	2200      	movs	r2, #0
 80082a6:	9307      	str	r3, [sp, #28]
 80082a8:	4b1d      	ldr	r3, [pc, #116]	; (8008320 <_dtoa_r+0x6b8>)
 80082aa:	f7f8 fabf 	bl	800082c <__aeabi_dadd>
 80082ae:	0002      	movs	r2, r0
 80082b0:	000b      	movs	r3, r1
 80082b2:	0020      	movs	r0, r4
 80082b4:	0029      	movs	r1, r5
 80082b6:	f7f8 f8e3 	bl	8000480 <__aeabi_dcmpgt>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d000      	beq.n	80082c0 <_dtoa_r+0x658>
 80082be:	e07f      	b.n	80083c0 <_dtoa_r+0x758>
 80082c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082c4:	2000      	movs	r0, #0
 80082c6:	4916      	ldr	r1, [pc, #88]	; (8008320 <_dtoa_r+0x6b8>)
 80082c8:	f7f9 fc8c 	bl	8001be4 <__aeabi_dsub>
 80082cc:	0002      	movs	r2, r0
 80082ce:	000b      	movs	r3, r1
 80082d0:	0020      	movs	r0, r4
 80082d2:	0029      	movs	r1, r5
 80082d4:	f7f8 f8c0 	bl	8000458 <__aeabi_dcmplt>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d100      	bne.n	80082de <_dtoa_r+0x676>
 80082dc:	e714      	b.n	8008108 <_dtoa_r+0x4a0>
 80082de:	9b07      	ldr	r3, [sp, #28]
 80082e0:	001a      	movs	r2, r3
 80082e2:	3a01      	subs	r2, #1
 80082e4:	9207      	str	r2, [sp, #28]
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	2a30      	cmp	r2, #48	; 0x30
 80082ea:	d0f8      	beq.n	80082de <_dtoa_r+0x676>
 80082ec:	9307      	str	r3, [sp, #28]
 80082ee:	9602      	str	r6, [sp, #8]
 80082f0:	e054      	b.n	800839c <_dtoa_r+0x734>
 80082f2:	2200      	movs	r2, #0
 80082f4:	4b05      	ldr	r3, [pc, #20]	; (800830c <_dtoa_r+0x6a4>)
 80082f6:	f7f9 fa09 	bl	800170c <__aeabi_dmul>
 80082fa:	0004      	movs	r4, r0
 80082fc:	000d      	movs	r5, r1
 80082fe:	e7b2      	b.n	8008266 <_dtoa_r+0x5fe>
 8008300:	0800aec0 	.word	0x0800aec0
 8008304:	0800ae98 	.word	0x0800ae98
 8008308:	3ff00000 	.word	0x3ff00000
 800830c:	40240000 	.word	0x40240000
 8008310:	401c0000 	.word	0x401c0000
 8008314:	fcc00000 	.word	0xfcc00000
 8008318:	40140000 	.word	0x40140000
 800831c:	7cc00000 	.word	0x7cc00000
 8008320:	3fe00000 	.word	0x3fe00000
 8008324:	9b06      	ldr	r3, [sp, #24]
 8008326:	9e05      	ldr	r6, [sp, #20]
 8008328:	3b01      	subs	r3, #1
 800832a:	199b      	adds	r3, r3, r6
 800832c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800832e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008330:	930a      	str	r3, [sp, #40]	; 0x28
 8008332:	9a08      	ldr	r2, [sp, #32]
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	0020      	movs	r0, r4
 8008338:	0029      	movs	r1, r5
 800833a:	f7f8 fde1 	bl	8000f00 <__aeabi_ddiv>
 800833e:	f7fa f801 	bl	8002344 <__aeabi_d2iz>
 8008342:	9006      	str	r0, [sp, #24]
 8008344:	f7fa f834 	bl	80023b0 <__aeabi_i2d>
 8008348:	9a08      	ldr	r2, [sp, #32]
 800834a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834c:	f7f9 f9de 	bl	800170c <__aeabi_dmul>
 8008350:	0002      	movs	r2, r0
 8008352:	000b      	movs	r3, r1
 8008354:	0020      	movs	r0, r4
 8008356:	0029      	movs	r1, r5
 8008358:	f7f9 fc44 	bl	8001be4 <__aeabi_dsub>
 800835c:	0033      	movs	r3, r6
 800835e:	9a06      	ldr	r2, [sp, #24]
 8008360:	3601      	adds	r6, #1
 8008362:	3230      	adds	r2, #48	; 0x30
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008368:	9607      	str	r6, [sp, #28]
 800836a:	429a      	cmp	r2, r3
 800836c:	d139      	bne.n	80083e2 <_dtoa_r+0x77a>
 800836e:	0002      	movs	r2, r0
 8008370:	000b      	movs	r3, r1
 8008372:	f7f8 fa5b 	bl	800082c <__aeabi_dadd>
 8008376:	9a08      	ldr	r2, [sp, #32]
 8008378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837a:	0004      	movs	r4, r0
 800837c:	000d      	movs	r5, r1
 800837e:	f7f8 f87f 	bl	8000480 <__aeabi_dcmpgt>
 8008382:	2800      	cmp	r0, #0
 8008384:	d11b      	bne.n	80083be <_dtoa_r+0x756>
 8008386:	9a08      	ldr	r2, [sp, #32]
 8008388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800838a:	0020      	movs	r0, r4
 800838c:	0029      	movs	r1, r5
 800838e:	f7f8 f85d 	bl	800044c <__aeabi_dcmpeq>
 8008392:	2800      	cmp	r0, #0
 8008394:	d002      	beq.n	800839c <_dtoa_r+0x734>
 8008396:	9b06      	ldr	r3, [sp, #24]
 8008398:	07db      	lsls	r3, r3, #31
 800839a:	d410      	bmi.n	80083be <_dtoa_r+0x756>
 800839c:	0038      	movs	r0, r7
 800839e:	9904      	ldr	r1, [sp, #16]
 80083a0:	f000 fe6a 	bl	8009078 <_Bfree>
 80083a4:	2300      	movs	r3, #0
 80083a6:	9a07      	ldr	r2, [sp, #28]
 80083a8:	9802      	ldr	r0, [sp, #8]
 80083aa:	7013      	strb	r3, [r2, #0]
 80083ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80083ae:	3001      	adds	r0, #1
 80083b0:	6018      	str	r0, [r3, #0]
 80083b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d100      	bne.n	80083ba <_dtoa_r+0x752>
 80083b8:	e4a3      	b.n	8007d02 <_dtoa_r+0x9a>
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	e4a1      	b.n	8007d02 <_dtoa_r+0x9a>
 80083be:	9e02      	ldr	r6, [sp, #8]
 80083c0:	9b07      	ldr	r3, [sp, #28]
 80083c2:	9307      	str	r3, [sp, #28]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	2a39      	cmp	r2, #57	; 0x39
 80083ca:	d106      	bne.n	80083da <_dtoa_r+0x772>
 80083cc:	9a05      	ldr	r2, [sp, #20]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d1f7      	bne.n	80083c2 <_dtoa_r+0x75a>
 80083d2:	2230      	movs	r2, #48	; 0x30
 80083d4:	9905      	ldr	r1, [sp, #20]
 80083d6:	3601      	adds	r6, #1
 80083d8:	700a      	strb	r2, [r1, #0]
 80083da:	781a      	ldrb	r2, [r3, #0]
 80083dc:	3201      	adds	r2, #1
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	e785      	b.n	80082ee <_dtoa_r+0x686>
 80083e2:	2200      	movs	r2, #0
 80083e4:	4bad      	ldr	r3, [pc, #692]	; (800869c <_dtoa_r+0xa34>)
 80083e6:	f7f9 f991 	bl	800170c <__aeabi_dmul>
 80083ea:	2200      	movs	r2, #0
 80083ec:	2300      	movs	r3, #0
 80083ee:	0004      	movs	r4, r0
 80083f0:	000d      	movs	r5, r1
 80083f2:	f7f8 f82b 	bl	800044c <__aeabi_dcmpeq>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d09b      	beq.n	8008332 <_dtoa_r+0x6ca>
 80083fa:	e7cf      	b.n	800839c <_dtoa_r+0x734>
 80083fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083fe:	2a00      	cmp	r2, #0
 8008400:	d100      	bne.n	8008404 <_dtoa_r+0x79c>
 8008402:	e082      	b.n	800850a <_dtoa_r+0x8a2>
 8008404:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008406:	2a01      	cmp	r2, #1
 8008408:	dc66      	bgt.n	80084d8 <_dtoa_r+0x870>
 800840a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800840c:	2a00      	cmp	r2, #0
 800840e:	d05f      	beq.n	80084d0 <_dtoa_r+0x868>
 8008410:	4aa3      	ldr	r2, [pc, #652]	; (80086a0 <_dtoa_r+0xa38>)
 8008412:	189b      	adds	r3, r3, r2
 8008414:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008416:	9c08      	ldr	r4, [sp, #32]
 8008418:	9a08      	ldr	r2, [sp, #32]
 800841a:	2101      	movs	r1, #1
 800841c:	18d2      	adds	r2, r2, r3
 800841e:	9208      	str	r2, [sp, #32]
 8008420:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008422:	0038      	movs	r0, r7
 8008424:	18d3      	adds	r3, r2, r3
 8008426:	930d      	str	r3, [sp, #52]	; 0x34
 8008428:	f000 ff22 	bl	8009270 <__i2b>
 800842c:	0005      	movs	r5, r0
 800842e:	2c00      	cmp	r4, #0
 8008430:	dd0e      	ble.n	8008450 <_dtoa_r+0x7e8>
 8008432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008434:	2b00      	cmp	r3, #0
 8008436:	dd0b      	ble.n	8008450 <_dtoa_r+0x7e8>
 8008438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800843a:	0023      	movs	r3, r4
 800843c:	4294      	cmp	r4, r2
 800843e:	dd00      	ble.n	8008442 <_dtoa_r+0x7da>
 8008440:	0013      	movs	r3, r2
 8008442:	9a08      	ldr	r2, [sp, #32]
 8008444:	1ae4      	subs	r4, r4, r3
 8008446:	1ad2      	subs	r2, r2, r3
 8008448:	9208      	str	r2, [sp, #32]
 800844a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	930d      	str	r3, [sp, #52]	; 0x34
 8008450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01f      	beq.n	8008496 <_dtoa_r+0x82e>
 8008456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d05a      	beq.n	8008512 <_dtoa_r+0x8aa>
 800845c:	2e00      	cmp	r6, #0
 800845e:	dd11      	ble.n	8008484 <_dtoa_r+0x81c>
 8008460:	0029      	movs	r1, r5
 8008462:	0032      	movs	r2, r6
 8008464:	0038      	movs	r0, r7
 8008466:	f000 ffc9 	bl	80093fc <__pow5mult>
 800846a:	9a04      	ldr	r2, [sp, #16]
 800846c:	0001      	movs	r1, r0
 800846e:	0005      	movs	r5, r0
 8008470:	0038      	movs	r0, r7
 8008472:	f000 ff13 	bl	800929c <__multiply>
 8008476:	9904      	ldr	r1, [sp, #16]
 8008478:	9007      	str	r0, [sp, #28]
 800847a:	0038      	movs	r0, r7
 800847c:	f000 fdfc 	bl	8009078 <_Bfree>
 8008480:	9b07      	ldr	r3, [sp, #28]
 8008482:	9304      	str	r3, [sp, #16]
 8008484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008486:	1b9a      	subs	r2, r3, r6
 8008488:	42b3      	cmp	r3, r6
 800848a:	d004      	beq.n	8008496 <_dtoa_r+0x82e>
 800848c:	0038      	movs	r0, r7
 800848e:	9904      	ldr	r1, [sp, #16]
 8008490:	f000 ffb4 	bl	80093fc <__pow5mult>
 8008494:	9004      	str	r0, [sp, #16]
 8008496:	2101      	movs	r1, #1
 8008498:	0038      	movs	r0, r7
 800849a:	f000 fee9 	bl	8009270 <__i2b>
 800849e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084a0:	0006      	movs	r6, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dd37      	ble.n	8008516 <_dtoa_r+0x8ae>
 80084a6:	001a      	movs	r2, r3
 80084a8:	0001      	movs	r1, r0
 80084aa:	0038      	movs	r0, r7
 80084ac:	f000 ffa6 	bl	80093fc <__pow5mult>
 80084b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084b2:	0006      	movs	r6, r0
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	dd33      	ble.n	8008520 <_dtoa_r+0x8b8>
 80084b8:	2300      	movs	r3, #0
 80084ba:	9307      	str	r3, [sp, #28]
 80084bc:	6933      	ldr	r3, [r6, #16]
 80084be:	3303      	adds	r3, #3
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	18f3      	adds	r3, r6, r3
 80084c4:	6858      	ldr	r0, [r3, #4]
 80084c6:	f000 fe8b 	bl	80091e0 <__hi0bits>
 80084ca:	2320      	movs	r3, #32
 80084cc:	1a18      	subs	r0, r3, r0
 80084ce:	e03f      	b.n	8008550 <_dtoa_r+0x8e8>
 80084d0:	2336      	movs	r3, #54	; 0x36
 80084d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	e79d      	b.n	8008414 <_dtoa_r+0x7ac>
 80084d8:	9b06      	ldr	r3, [sp, #24]
 80084da:	1e5e      	subs	r6, r3, #1
 80084dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084de:	42b3      	cmp	r3, r6
 80084e0:	db08      	blt.n	80084f4 <_dtoa_r+0x88c>
 80084e2:	1b9e      	subs	r6, r3, r6
 80084e4:	9b06      	ldr	r3, [sp, #24]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	da0c      	bge.n	8008504 <_dtoa_r+0x89c>
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	9a06      	ldr	r2, [sp, #24]
 80084ee:	1a9c      	subs	r4, r3, r2
 80084f0:	2300      	movs	r3, #0
 80084f2:	e791      	b.n	8008418 <_dtoa_r+0x7b0>
 80084f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084f8:	1af3      	subs	r3, r6, r3
 80084fa:	18d3      	adds	r3, r2, r3
 80084fc:	960e      	str	r6, [sp, #56]	; 0x38
 80084fe:	9314      	str	r3, [sp, #80]	; 0x50
 8008500:	2600      	movs	r6, #0
 8008502:	e7ef      	b.n	80084e4 <_dtoa_r+0x87c>
 8008504:	9c08      	ldr	r4, [sp, #32]
 8008506:	9b06      	ldr	r3, [sp, #24]
 8008508:	e786      	b.n	8008418 <_dtoa_r+0x7b0>
 800850a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800850c:	9c08      	ldr	r4, [sp, #32]
 800850e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008510:	e78d      	b.n	800842e <_dtoa_r+0x7c6>
 8008512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008514:	e7ba      	b.n	800848c <_dtoa_r+0x824>
 8008516:	2300      	movs	r3, #0
 8008518:	9307      	str	r3, [sp, #28]
 800851a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800851c:	2b01      	cmp	r3, #1
 800851e:	dc13      	bgt.n	8008548 <_dtoa_r+0x8e0>
 8008520:	2300      	movs	r3, #0
 8008522:	9307      	str	r3, [sp, #28]
 8008524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10e      	bne.n	8008548 <_dtoa_r+0x8e0>
 800852a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800852c:	031b      	lsls	r3, r3, #12
 800852e:	d10b      	bne.n	8008548 <_dtoa_r+0x8e0>
 8008530:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008534:	4213      	tst	r3, r2
 8008536:	d007      	beq.n	8008548 <_dtoa_r+0x8e0>
 8008538:	9b08      	ldr	r3, [sp, #32]
 800853a:	3301      	adds	r3, #1
 800853c:	9308      	str	r3, [sp, #32]
 800853e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008540:	3301      	adds	r3, #1
 8008542:	930d      	str	r3, [sp, #52]	; 0x34
 8008544:	2301      	movs	r3, #1
 8008546:	9307      	str	r3, [sp, #28]
 8008548:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800854a:	2001      	movs	r0, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1b5      	bne.n	80084bc <_dtoa_r+0x854>
 8008550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008552:	221f      	movs	r2, #31
 8008554:	1818      	adds	r0, r3, r0
 8008556:	0003      	movs	r3, r0
 8008558:	4013      	ands	r3, r2
 800855a:	4210      	tst	r0, r2
 800855c:	d046      	beq.n	80085ec <_dtoa_r+0x984>
 800855e:	3201      	adds	r2, #1
 8008560:	1ad2      	subs	r2, r2, r3
 8008562:	2a04      	cmp	r2, #4
 8008564:	dd3f      	ble.n	80085e6 <_dtoa_r+0x97e>
 8008566:	221c      	movs	r2, #28
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	9a08      	ldr	r2, [sp, #32]
 800856c:	18e4      	adds	r4, r4, r3
 800856e:	18d2      	adds	r2, r2, r3
 8008570:	9208      	str	r2, [sp, #32]
 8008572:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008574:	18d3      	adds	r3, r2, r3
 8008576:	930d      	str	r3, [sp, #52]	; 0x34
 8008578:	9b08      	ldr	r3, [sp, #32]
 800857a:	2b00      	cmp	r3, #0
 800857c:	dd05      	ble.n	800858a <_dtoa_r+0x922>
 800857e:	001a      	movs	r2, r3
 8008580:	0038      	movs	r0, r7
 8008582:	9904      	ldr	r1, [sp, #16]
 8008584:	f000 ff96 	bl	80094b4 <__lshift>
 8008588:	9004      	str	r0, [sp, #16]
 800858a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800858c:	2b00      	cmp	r3, #0
 800858e:	dd05      	ble.n	800859c <_dtoa_r+0x934>
 8008590:	0031      	movs	r1, r6
 8008592:	001a      	movs	r2, r3
 8008594:	0038      	movs	r0, r7
 8008596:	f000 ff8d 	bl	80094b4 <__lshift>
 800859a:	0006      	movs	r6, r0
 800859c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d026      	beq.n	80085f0 <_dtoa_r+0x988>
 80085a2:	0031      	movs	r1, r6
 80085a4:	9804      	ldr	r0, [sp, #16]
 80085a6:	f000 fff5 	bl	8009594 <__mcmp>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	da20      	bge.n	80085f0 <_dtoa_r+0x988>
 80085ae:	9b02      	ldr	r3, [sp, #8]
 80085b0:	220a      	movs	r2, #10
 80085b2:	3b01      	subs	r3, #1
 80085b4:	9302      	str	r3, [sp, #8]
 80085b6:	0038      	movs	r0, r7
 80085b8:	2300      	movs	r3, #0
 80085ba:	9904      	ldr	r1, [sp, #16]
 80085bc:	f000 fd80 	bl	80090c0 <__multadd>
 80085c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085c2:	9004      	str	r0, [sp, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d100      	bne.n	80085ca <_dtoa_r+0x962>
 80085c8:	e160      	b.n	800888c <_dtoa_r+0xc24>
 80085ca:	2300      	movs	r3, #0
 80085cc:	0029      	movs	r1, r5
 80085ce:	220a      	movs	r2, #10
 80085d0:	0038      	movs	r0, r7
 80085d2:	f000 fd75 	bl	80090c0 <__multadd>
 80085d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085d8:	0005      	movs	r5, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dc47      	bgt.n	800866e <_dtoa_r+0xa06>
 80085de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	dc0d      	bgt.n	8008600 <_dtoa_r+0x998>
 80085e4:	e043      	b.n	800866e <_dtoa_r+0xa06>
 80085e6:	2a04      	cmp	r2, #4
 80085e8:	d0c6      	beq.n	8008578 <_dtoa_r+0x910>
 80085ea:	0013      	movs	r3, r2
 80085ec:	331c      	adds	r3, #28
 80085ee:	e7bc      	b.n	800856a <_dtoa_r+0x902>
 80085f0:	9b06      	ldr	r3, [sp, #24]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	dc35      	bgt.n	8008662 <_dtoa_r+0x9fa>
 80085f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	dd32      	ble.n	8008662 <_dtoa_r+0x9fa>
 80085fc:	9b06      	ldr	r3, [sp, #24]
 80085fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10c      	bne.n	8008620 <_dtoa_r+0x9b8>
 8008606:	0031      	movs	r1, r6
 8008608:	2205      	movs	r2, #5
 800860a:	0038      	movs	r0, r7
 800860c:	f000 fd58 	bl	80090c0 <__multadd>
 8008610:	0006      	movs	r6, r0
 8008612:	0001      	movs	r1, r0
 8008614:	9804      	ldr	r0, [sp, #16]
 8008616:	f000 ffbd 	bl	8009594 <__mcmp>
 800861a:	2800      	cmp	r0, #0
 800861c:	dd00      	ble.n	8008620 <_dtoa_r+0x9b8>
 800861e:	e59f      	b.n	8008160 <_dtoa_r+0x4f8>
 8008620:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008622:	43db      	mvns	r3, r3
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	9b05      	ldr	r3, [sp, #20]
 8008628:	9307      	str	r3, [sp, #28]
 800862a:	2400      	movs	r4, #0
 800862c:	0031      	movs	r1, r6
 800862e:	0038      	movs	r0, r7
 8008630:	f000 fd22 	bl	8009078 <_Bfree>
 8008634:	2d00      	cmp	r5, #0
 8008636:	d100      	bne.n	800863a <_dtoa_r+0x9d2>
 8008638:	e6b0      	b.n	800839c <_dtoa_r+0x734>
 800863a:	2c00      	cmp	r4, #0
 800863c:	d005      	beq.n	800864a <_dtoa_r+0x9e2>
 800863e:	42ac      	cmp	r4, r5
 8008640:	d003      	beq.n	800864a <_dtoa_r+0x9e2>
 8008642:	0021      	movs	r1, r4
 8008644:	0038      	movs	r0, r7
 8008646:	f000 fd17 	bl	8009078 <_Bfree>
 800864a:	0029      	movs	r1, r5
 800864c:	0038      	movs	r0, r7
 800864e:	f000 fd13 	bl	8009078 <_Bfree>
 8008652:	e6a3      	b.n	800839c <_dtoa_r+0x734>
 8008654:	2600      	movs	r6, #0
 8008656:	0035      	movs	r5, r6
 8008658:	e7e2      	b.n	8008620 <_dtoa_r+0x9b8>
 800865a:	9602      	str	r6, [sp, #8]
 800865c:	9e07      	ldr	r6, [sp, #28]
 800865e:	0035      	movs	r5, r6
 8008660:	e57e      	b.n	8008160 <_dtoa_r+0x4f8>
 8008662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008664:	2b00      	cmp	r3, #0
 8008666:	d100      	bne.n	800866a <_dtoa_r+0xa02>
 8008668:	e0c8      	b.n	80087fc <_dtoa_r+0xb94>
 800866a:	9b06      	ldr	r3, [sp, #24]
 800866c:	930c      	str	r3, [sp, #48]	; 0x30
 800866e:	2c00      	cmp	r4, #0
 8008670:	dd05      	ble.n	800867e <_dtoa_r+0xa16>
 8008672:	0029      	movs	r1, r5
 8008674:	0022      	movs	r2, r4
 8008676:	0038      	movs	r0, r7
 8008678:	f000 ff1c 	bl	80094b4 <__lshift>
 800867c:	0005      	movs	r5, r0
 800867e:	9b07      	ldr	r3, [sp, #28]
 8008680:	0028      	movs	r0, r5
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01f      	beq.n	80086c6 <_dtoa_r+0xa5e>
 8008686:	0038      	movs	r0, r7
 8008688:	6869      	ldr	r1, [r5, #4]
 800868a:	f000 fcb1 	bl	8008ff0 <_Balloc>
 800868e:	1e04      	subs	r4, r0, #0
 8008690:	d10c      	bne.n	80086ac <_dtoa_r+0xa44>
 8008692:	0002      	movs	r2, r0
 8008694:	4b03      	ldr	r3, [pc, #12]	; (80086a4 <_dtoa_r+0xa3c>)
 8008696:	4904      	ldr	r1, [pc, #16]	; (80086a8 <_dtoa_r+0xa40>)
 8008698:	f7ff fafb 	bl	8007c92 <_dtoa_r+0x2a>
 800869c:	40240000 	.word	0x40240000
 80086a0:	00000433 	.word	0x00000433
 80086a4:	0800ada4 	.word	0x0800ada4
 80086a8:	000002ea 	.word	0x000002ea
 80086ac:	0029      	movs	r1, r5
 80086ae:	692b      	ldr	r3, [r5, #16]
 80086b0:	310c      	adds	r1, #12
 80086b2:	1c9a      	adds	r2, r3, #2
 80086b4:	0092      	lsls	r2, r2, #2
 80086b6:	300c      	adds	r0, #12
 80086b8:	f000 fc91 	bl	8008fde <memcpy>
 80086bc:	2201      	movs	r2, #1
 80086be:	0021      	movs	r1, r4
 80086c0:	0038      	movs	r0, r7
 80086c2:	f000 fef7 	bl	80094b4 <__lshift>
 80086c6:	002c      	movs	r4, r5
 80086c8:	0005      	movs	r5, r0
 80086ca:	9b05      	ldr	r3, [sp, #20]
 80086cc:	9308      	str	r3, [sp, #32]
 80086ce:	0031      	movs	r1, r6
 80086d0:	9804      	ldr	r0, [sp, #16]
 80086d2:	f7ff fa3d 	bl	8007b50 <quorem>
 80086d6:	0003      	movs	r3, r0
 80086d8:	0021      	movs	r1, r4
 80086da:	3330      	adds	r3, #48	; 0x30
 80086dc:	900e      	str	r0, [sp, #56]	; 0x38
 80086de:	9804      	ldr	r0, [sp, #16]
 80086e0:	9306      	str	r3, [sp, #24]
 80086e2:	f000 ff57 	bl	8009594 <__mcmp>
 80086e6:	002a      	movs	r2, r5
 80086e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80086ea:	0031      	movs	r1, r6
 80086ec:	0038      	movs	r0, r7
 80086ee:	f000 ff6d 	bl	80095cc <__mdiff>
 80086f2:	68c3      	ldr	r3, [r0, #12]
 80086f4:	9007      	str	r0, [sp, #28]
 80086f6:	9310      	str	r3, [sp, #64]	; 0x40
 80086f8:	2301      	movs	r3, #1
 80086fa:	930d      	str	r3, [sp, #52]	; 0x34
 80086fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d104      	bne.n	800870c <_dtoa_r+0xaa4>
 8008702:	0001      	movs	r1, r0
 8008704:	9804      	ldr	r0, [sp, #16]
 8008706:	f000 ff45 	bl	8009594 <__mcmp>
 800870a:	900d      	str	r0, [sp, #52]	; 0x34
 800870c:	0038      	movs	r0, r7
 800870e:	9907      	ldr	r1, [sp, #28]
 8008710:	f000 fcb2 	bl	8009078 <_Bfree>
 8008714:	2301      	movs	r3, #1
 8008716:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008718:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800871a:	4018      	ands	r0, r3
 800871c:	9b08      	ldr	r3, [sp, #32]
 800871e:	3301      	adds	r3, #1
 8008720:	9307      	str	r3, [sp, #28]
 8008722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008724:	4313      	orrs	r3, r2
 8008726:	4303      	orrs	r3, r0
 8008728:	d10c      	bne.n	8008744 <_dtoa_r+0xadc>
 800872a:	9b06      	ldr	r3, [sp, #24]
 800872c:	2b39      	cmp	r3, #57	; 0x39
 800872e:	d025      	beq.n	800877c <_dtoa_r+0xb14>
 8008730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008732:	2b00      	cmp	r3, #0
 8008734:	dd02      	ble.n	800873c <_dtoa_r+0xad4>
 8008736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008738:	3331      	adds	r3, #49	; 0x31
 800873a:	9306      	str	r3, [sp, #24]
 800873c:	9b08      	ldr	r3, [sp, #32]
 800873e:	9a06      	ldr	r2, [sp, #24]
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	e773      	b.n	800862c <_dtoa_r+0x9c4>
 8008744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008746:	2b00      	cmp	r3, #0
 8008748:	db03      	blt.n	8008752 <_dtoa_r+0xaea>
 800874a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800874c:	4313      	orrs	r3, r2
 800874e:	4303      	orrs	r3, r0
 8008750:	d11f      	bne.n	8008792 <_dtoa_r+0xb2a>
 8008752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008754:	2b00      	cmp	r3, #0
 8008756:	ddf1      	ble.n	800873c <_dtoa_r+0xad4>
 8008758:	9904      	ldr	r1, [sp, #16]
 800875a:	2201      	movs	r2, #1
 800875c:	0038      	movs	r0, r7
 800875e:	f000 fea9 	bl	80094b4 <__lshift>
 8008762:	0031      	movs	r1, r6
 8008764:	9004      	str	r0, [sp, #16]
 8008766:	f000 ff15 	bl	8009594 <__mcmp>
 800876a:	2800      	cmp	r0, #0
 800876c:	dc03      	bgt.n	8008776 <_dtoa_r+0xb0e>
 800876e:	d1e5      	bne.n	800873c <_dtoa_r+0xad4>
 8008770:	9b06      	ldr	r3, [sp, #24]
 8008772:	07db      	lsls	r3, r3, #31
 8008774:	d5e2      	bpl.n	800873c <_dtoa_r+0xad4>
 8008776:	9b06      	ldr	r3, [sp, #24]
 8008778:	2b39      	cmp	r3, #57	; 0x39
 800877a:	d1dc      	bne.n	8008736 <_dtoa_r+0xace>
 800877c:	2339      	movs	r3, #57	; 0x39
 800877e:	9a08      	ldr	r2, [sp, #32]
 8008780:	7013      	strb	r3, [r2, #0]
 8008782:	9b07      	ldr	r3, [sp, #28]
 8008784:	9307      	str	r3, [sp, #28]
 8008786:	3b01      	subs	r3, #1
 8008788:	781a      	ldrb	r2, [r3, #0]
 800878a:	2a39      	cmp	r2, #57	; 0x39
 800878c:	d06c      	beq.n	8008868 <_dtoa_r+0xc00>
 800878e:	3201      	adds	r2, #1
 8008790:	e7d6      	b.n	8008740 <_dtoa_r+0xad8>
 8008792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd07      	ble.n	80087a8 <_dtoa_r+0xb40>
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	2b39      	cmp	r3, #57	; 0x39
 800879c:	d0ee      	beq.n	800877c <_dtoa_r+0xb14>
 800879e:	9b06      	ldr	r3, [sp, #24]
 80087a0:	9a08      	ldr	r2, [sp, #32]
 80087a2:	3301      	adds	r3, #1
 80087a4:	7013      	strb	r3, [r2, #0]
 80087a6:	e741      	b.n	800862c <_dtoa_r+0x9c4>
 80087a8:	9b08      	ldr	r3, [sp, #32]
 80087aa:	9a06      	ldr	r2, [sp, #24]
 80087ac:	701a      	strb	r2, [r3, #0]
 80087ae:	2301      	movs	r3, #1
 80087b0:	9a05      	ldr	r2, [sp, #20]
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	9a08      	ldr	r2, [sp, #32]
 80087b6:	189b      	adds	r3, r3, r2
 80087b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d03e      	beq.n	800883c <_dtoa_r+0xbd4>
 80087be:	2300      	movs	r3, #0
 80087c0:	220a      	movs	r2, #10
 80087c2:	9904      	ldr	r1, [sp, #16]
 80087c4:	0038      	movs	r0, r7
 80087c6:	f000 fc7b 	bl	80090c0 <__multadd>
 80087ca:	2300      	movs	r3, #0
 80087cc:	9004      	str	r0, [sp, #16]
 80087ce:	220a      	movs	r2, #10
 80087d0:	0021      	movs	r1, r4
 80087d2:	0038      	movs	r0, r7
 80087d4:	42ac      	cmp	r4, r5
 80087d6:	d106      	bne.n	80087e6 <_dtoa_r+0xb7e>
 80087d8:	f000 fc72 	bl	80090c0 <__multadd>
 80087dc:	0004      	movs	r4, r0
 80087de:	0005      	movs	r5, r0
 80087e0:	9b07      	ldr	r3, [sp, #28]
 80087e2:	9308      	str	r3, [sp, #32]
 80087e4:	e773      	b.n	80086ce <_dtoa_r+0xa66>
 80087e6:	f000 fc6b 	bl	80090c0 <__multadd>
 80087ea:	0029      	movs	r1, r5
 80087ec:	0004      	movs	r4, r0
 80087ee:	2300      	movs	r3, #0
 80087f0:	220a      	movs	r2, #10
 80087f2:	0038      	movs	r0, r7
 80087f4:	f000 fc64 	bl	80090c0 <__multadd>
 80087f8:	0005      	movs	r5, r0
 80087fa:	e7f1      	b.n	80087e0 <_dtoa_r+0xb78>
 80087fc:	9b06      	ldr	r3, [sp, #24]
 80087fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008800:	2400      	movs	r4, #0
 8008802:	0031      	movs	r1, r6
 8008804:	9804      	ldr	r0, [sp, #16]
 8008806:	f7ff f9a3 	bl	8007b50 <quorem>
 800880a:	9b05      	ldr	r3, [sp, #20]
 800880c:	3030      	adds	r0, #48	; 0x30
 800880e:	5518      	strb	r0, [r3, r4]
 8008810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008812:	3401      	adds	r4, #1
 8008814:	9006      	str	r0, [sp, #24]
 8008816:	42a3      	cmp	r3, r4
 8008818:	dd07      	ble.n	800882a <_dtoa_r+0xbc2>
 800881a:	2300      	movs	r3, #0
 800881c:	220a      	movs	r2, #10
 800881e:	0038      	movs	r0, r7
 8008820:	9904      	ldr	r1, [sp, #16]
 8008822:	f000 fc4d 	bl	80090c0 <__multadd>
 8008826:	9004      	str	r0, [sp, #16]
 8008828:	e7eb      	b.n	8008802 <_dtoa_r+0xb9a>
 800882a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800882c:	2001      	movs	r0, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	dd00      	ble.n	8008834 <_dtoa_r+0xbcc>
 8008832:	0018      	movs	r0, r3
 8008834:	2400      	movs	r4, #0
 8008836:	9b05      	ldr	r3, [sp, #20]
 8008838:	181b      	adds	r3, r3, r0
 800883a:	9307      	str	r3, [sp, #28]
 800883c:	9904      	ldr	r1, [sp, #16]
 800883e:	2201      	movs	r2, #1
 8008840:	0038      	movs	r0, r7
 8008842:	f000 fe37 	bl	80094b4 <__lshift>
 8008846:	0031      	movs	r1, r6
 8008848:	9004      	str	r0, [sp, #16]
 800884a:	f000 fea3 	bl	8009594 <__mcmp>
 800884e:	2800      	cmp	r0, #0
 8008850:	dc97      	bgt.n	8008782 <_dtoa_r+0xb1a>
 8008852:	d102      	bne.n	800885a <_dtoa_r+0xbf2>
 8008854:	9b06      	ldr	r3, [sp, #24]
 8008856:	07db      	lsls	r3, r3, #31
 8008858:	d493      	bmi.n	8008782 <_dtoa_r+0xb1a>
 800885a:	9b07      	ldr	r3, [sp, #28]
 800885c:	9307      	str	r3, [sp, #28]
 800885e:	3b01      	subs	r3, #1
 8008860:	781a      	ldrb	r2, [r3, #0]
 8008862:	2a30      	cmp	r2, #48	; 0x30
 8008864:	d0fa      	beq.n	800885c <_dtoa_r+0xbf4>
 8008866:	e6e1      	b.n	800862c <_dtoa_r+0x9c4>
 8008868:	9a05      	ldr	r2, [sp, #20]
 800886a:	429a      	cmp	r2, r3
 800886c:	d18a      	bne.n	8008784 <_dtoa_r+0xb1c>
 800886e:	9b02      	ldr	r3, [sp, #8]
 8008870:	3301      	adds	r3, #1
 8008872:	9302      	str	r3, [sp, #8]
 8008874:	2331      	movs	r3, #49	; 0x31
 8008876:	e795      	b.n	80087a4 <_dtoa_r+0xb3c>
 8008878:	4b08      	ldr	r3, [pc, #32]	; (800889c <_dtoa_r+0xc34>)
 800887a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800887c:	9305      	str	r3, [sp, #20]
 800887e:	4b08      	ldr	r3, [pc, #32]	; (80088a0 <_dtoa_r+0xc38>)
 8008880:	2a00      	cmp	r2, #0
 8008882:	d001      	beq.n	8008888 <_dtoa_r+0xc20>
 8008884:	f7ff fa3b 	bl	8007cfe <_dtoa_r+0x96>
 8008888:	f7ff fa3b 	bl	8007d02 <_dtoa_r+0x9a>
 800888c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800888e:	2b00      	cmp	r3, #0
 8008890:	dcb6      	bgt.n	8008800 <_dtoa_r+0xb98>
 8008892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008894:	2b02      	cmp	r3, #2
 8008896:	dd00      	ble.n	800889a <_dtoa_r+0xc32>
 8008898:	e6b2      	b.n	8008600 <_dtoa_r+0x998>
 800889a:	e7b1      	b.n	8008800 <_dtoa_r+0xb98>
 800889c:	0800ad21 	.word	0x0800ad21
 80088a0:	0800ad29 	.word	0x0800ad29

080088a4 <rshift>:
 80088a4:	0002      	movs	r2, r0
 80088a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088a8:	6907      	ldr	r7, [r0, #16]
 80088aa:	3214      	adds	r2, #20
 80088ac:	0013      	movs	r3, r2
 80088ae:	b085      	sub	sp, #20
 80088b0:	114e      	asrs	r6, r1, #5
 80088b2:	42b7      	cmp	r7, r6
 80088b4:	dd31      	ble.n	800891a <rshift+0x76>
 80088b6:	00b3      	lsls	r3, r6, #2
 80088b8:	18d3      	adds	r3, r2, r3
 80088ba:	251f      	movs	r5, #31
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	000b      	movs	r3, r1
 80088c0:	00bc      	lsls	r4, r7, #2
 80088c2:	402b      	ands	r3, r5
 80088c4:	1914      	adds	r4, r2, r4
 80088c6:	9302      	str	r3, [sp, #8]
 80088c8:	4229      	tst	r1, r5
 80088ca:	d10c      	bne.n	80088e6 <rshift+0x42>
 80088cc:	0015      	movs	r5, r2
 80088ce:	9901      	ldr	r1, [sp, #4]
 80088d0:	428c      	cmp	r4, r1
 80088d2:	d838      	bhi.n	8008946 <rshift+0xa2>
 80088d4:	9901      	ldr	r1, [sp, #4]
 80088d6:	2300      	movs	r3, #0
 80088d8:	3903      	subs	r1, #3
 80088da:	428c      	cmp	r4, r1
 80088dc:	d301      	bcc.n	80088e2 <rshift+0x3e>
 80088de:	1bbb      	subs	r3, r7, r6
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	18d3      	adds	r3, r2, r3
 80088e4:	e019      	b.n	800891a <rshift+0x76>
 80088e6:	2120      	movs	r1, #32
 80088e8:	9b02      	ldr	r3, [sp, #8]
 80088ea:	9d01      	ldr	r5, [sp, #4]
 80088ec:	1acb      	subs	r3, r1, r3
 80088ee:	9303      	str	r3, [sp, #12]
 80088f0:	cd02      	ldmia	r5!, {r1}
 80088f2:	9b02      	ldr	r3, [sp, #8]
 80088f4:	4694      	mov	ip, r2
 80088f6:	40d9      	lsrs	r1, r3
 80088f8:	9100      	str	r1, [sp, #0]
 80088fa:	42ac      	cmp	r4, r5
 80088fc:	d816      	bhi.n	800892c <rshift+0x88>
 80088fe:	9d01      	ldr	r5, [sp, #4]
 8008900:	2300      	movs	r3, #0
 8008902:	3501      	adds	r5, #1
 8008904:	42ac      	cmp	r4, r5
 8008906:	d302      	bcc.n	800890e <rshift+0x6a>
 8008908:	1bbb      	subs	r3, r7, r6
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	3b04      	subs	r3, #4
 800890e:	9900      	ldr	r1, [sp, #0]
 8008910:	18d3      	adds	r3, r2, r3
 8008912:	6019      	str	r1, [r3, #0]
 8008914:	2900      	cmp	r1, #0
 8008916:	d000      	beq.n	800891a <rshift+0x76>
 8008918:	3304      	adds	r3, #4
 800891a:	1a99      	subs	r1, r3, r2
 800891c:	1089      	asrs	r1, r1, #2
 800891e:	6101      	str	r1, [r0, #16]
 8008920:	4293      	cmp	r3, r2
 8008922:	d101      	bne.n	8008928 <rshift+0x84>
 8008924:	2300      	movs	r3, #0
 8008926:	6143      	str	r3, [r0, #20]
 8008928:	b005      	add	sp, #20
 800892a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	9903      	ldr	r1, [sp, #12]
 8008930:	408b      	lsls	r3, r1
 8008932:	9900      	ldr	r1, [sp, #0]
 8008934:	4319      	orrs	r1, r3
 8008936:	4663      	mov	r3, ip
 8008938:	c302      	stmia	r3!, {r1}
 800893a:	469c      	mov	ip, r3
 800893c:	cd02      	ldmia	r5!, {r1}
 800893e:	9b02      	ldr	r3, [sp, #8]
 8008940:	40d9      	lsrs	r1, r3
 8008942:	9100      	str	r1, [sp, #0]
 8008944:	e7d9      	b.n	80088fa <rshift+0x56>
 8008946:	c908      	ldmia	r1!, {r3}
 8008948:	c508      	stmia	r5!, {r3}
 800894a:	e7c1      	b.n	80088d0 <rshift+0x2c>

0800894c <__hexdig_fun>:
 800894c:	0002      	movs	r2, r0
 800894e:	3a30      	subs	r2, #48	; 0x30
 8008950:	0003      	movs	r3, r0
 8008952:	2a09      	cmp	r2, #9
 8008954:	d802      	bhi.n	800895c <__hexdig_fun+0x10>
 8008956:	3b20      	subs	r3, #32
 8008958:	b2d8      	uxtb	r0, r3
 800895a:	4770      	bx	lr
 800895c:	0002      	movs	r2, r0
 800895e:	3a61      	subs	r2, #97	; 0x61
 8008960:	2a05      	cmp	r2, #5
 8008962:	d801      	bhi.n	8008968 <__hexdig_fun+0x1c>
 8008964:	3b47      	subs	r3, #71	; 0x47
 8008966:	e7f7      	b.n	8008958 <__hexdig_fun+0xc>
 8008968:	001a      	movs	r2, r3
 800896a:	3a41      	subs	r2, #65	; 0x41
 800896c:	2000      	movs	r0, #0
 800896e:	2a05      	cmp	r2, #5
 8008970:	d8f3      	bhi.n	800895a <__hexdig_fun+0xe>
 8008972:	3b27      	subs	r3, #39	; 0x27
 8008974:	e7f0      	b.n	8008958 <__hexdig_fun+0xc>
	...

08008978 <__gethex>:
 8008978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800897a:	b08d      	sub	sp, #52	; 0x34
 800897c:	930a      	str	r3, [sp, #40]	; 0x28
 800897e:	4bbd      	ldr	r3, [pc, #756]	; (8008c74 <__gethex+0x2fc>)
 8008980:	9005      	str	r0, [sp, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	9109      	str	r1, [sp, #36]	; 0x24
 8008986:	0018      	movs	r0, r3
 8008988:	9202      	str	r2, [sp, #8]
 800898a:	9307      	str	r3, [sp, #28]
 800898c:	f7f7 fbbc 	bl	8000108 <strlen>
 8008990:	2202      	movs	r2, #2
 8008992:	9b07      	ldr	r3, [sp, #28]
 8008994:	4252      	negs	r2, r2
 8008996:	181b      	adds	r3, r3, r0
 8008998:	3b01      	subs	r3, #1
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	9003      	str	r0, [sp, #12]
 800899e:	930b      	str	r3, [sp, #44]	; 0x2c
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	6819      	ldr	r1, [r3, #0]
 80089a4:	1c8b      	adds	r3, r1, #2
 80089a6:	1a52      	subs	r2, r2, r1
 80089a8:	18d1      	adds	r1, r2, r3
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	9108      	str	r1, [sp, #32]
 80089ae:	9901      	ldr	r1, [sp, #4]
 80089b0:	3301      	adds	r3, #1
 80089b2:	7808      	ldrb	r0, [r1, #0]
 80089b4:	2830      	cmp	r0, #48	; 0x30
 80089b6:	d0f7      	beq.n	80089a8 <__gethex+0x30>
 80089b8:	f7ff ffc8 	bl	800894c <__hexdig_fun>
 80089bc:	1e04      	subs	r4, r0, #0
 80089be:	d13e      	bne.n	8008a3e <__gethex+0xc6>
 80089c0:	9a03      	ldr	r2, [sp, #12]
 80089c2:	9907      	ldr	r1, [sp, #28]
 80089c4:	9801      	ldr	r0, [sp, #4]
 80089c6:	f001 fa0d 	bl	8009de4 <strncmp>
 80089ca:	1e07      	subs	r7, r0, #0
 80089cc:	d000      	beq.n	80089d0 <__gethex+0x58>
 80089ce:	e06f      	b.n	8008ab0 <__gethex+0x138>
 80089d0:	9b01      	ldr	r3, [sp, #4]
 80089d2:	9a03      	ldr	r2, [sp, #12]
 80089d4:	5c98      	ldrb	r0, [r3, r2]
 80089d6:	189d      	adds	r5, r3, r2
 80089d8:	f7ff ffb8 	bl	800894c <__hexdig_fun>
 80089dc:	2301      	movs	r3, #1
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d034      	beq.n	8008a4e <__gethex+0xd6>
 80089e4:	9501      	str	r5, [sp, #4]
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	7818      	ldrb	r0, [r3, #0]
 80089ea:	2830      	cmp	r0, #48	; 0x30
 80089ec:	d009      	beq.n	8008a02 <__gethex+0x8a>
 80089ee:	f7ff ffad 	bl	800894c <__hexdig_fun>
 80089f2:	4243      	negs	r3, r0
 80089f4:	4143      	adcs	r3, r0
 80089f6:	9304      	str	r3, [sp, #16]
 80089f8:	2301      	movs	r3, #1
 80089fa:	002c      	movs	r4, r5
 80089fc:	9308      	str	r3, [sp, #32]
 80089fe:	9d01      	ldr	r5, [sp, #4]
 8008a00:	e004      	b.n	8008a0c <__gethex+0x94>
 8008a02:	9b01      	ldr	r3, [sp, #4]
 8008a04:	3301      	adds	r3, #1
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	e7ed      	b.n	80089e6 <__gethex+0x6e>
 8008a0a:	3501      	adds	r5, #1
 8008a0c:	7828      	ldrb	r0, [r5, #0]
 8008a0e:	f7ff ff9d 	bl	800894c <__hexdig_fun>
 8008a12:	1e07      	subs	r7, r0, #0
 8008a14:	d1f9      	bne.n	8008a0a <__gethex+0x92>
 8008a16:	0028      	movs	r0, r5
 8008a18:	9a03      	ldr	r2, [sp, #12]
 8008a1a:	9907      	ldr	r1, [sp, #28]
 8008a1c:	f001 f9e2 	bl	8009de4 <strncmp>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d112      	bne.n	8008a4a <__gethex+0xd2>
 8008a24:	2c00      	cmp	r4, #0
 8008a26:	d107      	bne.n	8008a38 <__gethex+0xc0>
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	18ed      	adds	r5, r5, r3
 8008a2c:	002c      	movs	r4, r5
 8008a2e:	7828      	ldrb	r0, [r5, #0]
 8008a30:	f7ff ff8c 	bl	800894c <__hexdig_fun>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d106      	bne.n	8008a46 <__gethex+0xce>
 8008a38:	1b67      	subs	r7, r4, r5
 8008a3a:	00bf      	lsls	r7, r7, #2
 8008a3c:	e007      	b.n	8008a4e <__gethex+0xd6>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	001c      	movs	r4, r3
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	e7db      	b.n	80089fe <__gethex+0x86>
 8008a46:	3501      	adds	r5, #1
 8008a48:	e7f1      	b.n	8008a2e <__gethex+0xb6>
 8008a4a:	2c00      	cmp	r4, #0
 8008a4c:	d1f4      	bne.n	8008a38 <__gethex+0xc0>
 8008a4e:	2220      	movs	r2, #32
 8008a50:	782b      	ldrb	r3, [r5, #0]
 8008a52:	002e      	movs	r6, r5
 8008a54:	4393      	bics	r3, r2
 8008a56:	2b50      	cmp	r3, #80	; 0x50
 8008a58:	d11d      	bne.n	8008a96 <__gethex+0x11e>
 8008a5a:	786b      	ldrb	r3, [r5, #1]
 8008a5c:	2b2b      	cmp	r3, #43	; 0x2b
 8008a5e:	d02c      	beq.n	8008aba <__gethex+0x142>
 8008a60:	2b2d      	cmp	r3, #45	; 0x2d
 8008a62:	d02e      	beq.n	8008ac2 <__gethex+0x14a>
 8008a64:	2300      	movs	r3, #0
 8008a66:	1c6e      	adds	r6, r5, #1
 8008a68:	9306      	str	r3, [sp, #24]
 8008a6a:	7830      	ldrb	r0, [r6, #0]
 8008a6c:	f7ff ff6e 	bl	800894c <__hexdig_fun>
 8008a70:	1e43      	subs	r3, r0, #1
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b18      	cmp	r3, #24
 8008a76:	d82b      	bhi.n	8008ad0 <__gethex+0x158>
 8008a78:	3810      	subs	r0, #16
 8008a7a:	0004      	movs	r4, r0
 8008a7c:	7870      	ldrb	r0, [r6, #1]
 8008a7e:	f7ff ff65 	bl	800894c <__hexdig_fun>
 8008a82:	1e43      	subs	r3, r0, #1
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	3601      	adds	r6, #1
 8008a88:	2b18      	cmp	r3, #24
 8008a8a:	d91c      	bls.n	8008ac6 <__gethex+0x14e>
 8008a8c:	9b06      	ldr	r3, [sp, #24]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d000      	beq.n	8008a94 <__gethex+0x11c>
 8008a92:	4264      	negs	r4, r4
 8008a94:	193f      	adds	r7, r7, r4
 8008a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a98:	601e      	str	r6, [r3, #0]
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d019      	beq.n	8008ad4 <__gethex+0x15c>
 8008aa0:	2600      	movs	r6, #0
 8008aa2:	9b08      	ldr	r3, [sp, #32]
 8008aa4:	42b3      	cmp	r3, r6
 8008aa6:	d100      	bne.n	8008aaa <__gethex+0x132>
 8008aa8:	3606      	adds	r6, #6
 8008aaa:	0030      	movs	r0, r6
 8008aac:	b00d      	add	sp, #52	; 0x34
 8008aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	0027      	movs	r7, r4
 8008ab4:	9d01      	ldr	r5, [sp, #4]
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	e7c9      	b.n	8008a4e <__gethex+0xd6>
 8008aba:	2300      	movs	r3, #0
 8008abc:	9306      	str	r3, [sp, #24]
 8008abe:	1cae      	adds	r6, r5, #2
 8008ac0:	e7d3      	b.n	8008a6a <__gethex+0xf2>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e7fa      	b.n	8008abc <__gethex+0x144>
 8008ac6:	230a      	movs	r3, #10
 8008ac8:	435c      	muls	r4, r3
 8008aca:	1824      	adds	r4, r4, r0
 8008acc:	3c10      	subs	r4, #16
 8008ace:	e7d5      	b.n	8008a7c <__gethex+0x104>
 8008ad0:	002e      	movs	r6, r5
 8008ad2:	e7e0      	b.n	8008a96 <__gethex+0x11e>
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	9904      	ldr	r1, [sp, #16]
 8008ad8:	1aeb      	subs	r3, r5, r3
 8008ada:	3b01      	subs	r3, #1
 8008adc:	2b07      	cmp	r3, #7
 8008ade:	dc0a      	bgt.n	8008af6 <__gethex+0x17e>
 8008ae0:	9805      	ldr	r0, [sp, #20]
 8008ae2:	f000 fa85 	bl	8008ff0 <_Balloc>
 8008ae6:	1e04      	subs	r4, r0, #0
 8008ae8:	d108      	bne.n	8008afc <__gethex+0x184>
 8008aea:	0002      	movs	r2, r0
 8008aec:	21de      	movs	r1, #222	; 0xde
 8008aee:	4b62      	ldr	r3, [pc, #392]	; (8008c78 <__gethex+0x300>)
 8008af0:	4862      	ldr	r0, [pc, #392]	; (8008c7c <__gethex+0x304>)
 8008af2:	f001 f995 	bl	8009e20 <__assert_func>
 8008af6:	3101      	adds	r1, #1
 8008af8:	105b      	asrs	r3, r3, #1
 8008afa:	e7ef      	b.n	8008adc <__gethex+0x164>
 8008afc:	0003      	movs	r3, r0
 8008afe:	3314      	adds	r3, #20
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	9309      	str	r3, [sp, #36]	; 0x24
 8008b04:	2300      	movs	r3, #0
 8008b06:	001e      	movs	r6, r3
 8008b08:	9306      	str	r3, [sp, #24]
 8008b0a:	9b01      	ldr	r3, [sp, #4]
 8008b0c:	42ab      	cmp	r3, r5
 8008b0e:	d340      	bcc.n	8008b92 <__gethex+0x21a>
 8008b10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b12:	9b04      	ldr	r3, [sp, #16]
 8008b14:	c540      	stmia	r5!, {r6}
 8008b16:	1aed      	subs	r5, r5, r3
 8008b18:	10ad      	asrs	r5, r5, #2
 8008b1a:	0030      	movs	r0, r6
 8008b1c:	6125      	str	r5, [r4, #16]
 8008b1e:	f000 fb5f 	bl	80091e0 <__hi0bits>
 8008b22:	9b02      	ldr	r3, [sp, #8]
 8008b24:	016d      	lsls	r5, r5, #5
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	1a2e      	subs	r6, r5, r0
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	429e      	cmp	r6, r3
 8008b2e:	dd5a      	ble.n	8008be6 <__gethex+0x26e>
 8008b30:	1af6      	subs	r6, r6, r3
 8008b32:	0031      	movs	r1, r6
 8008b34:	0020      	movs	r0, r4
 8008b36:	f000 ff02 	bl	800993e <__any_on>
 8008b3a:	1e05      	subs	r5, r0, #0
 8008b3c:	d016      	beq.n	8008b6c <__gethex+0x1f4>
 8008b3e:	2501      	movs	r5, #1
 8008b40:	211f      	movs	r1, #31
 8008b42:	0028      	movs	r0, r5
 8008b44:	1e73      	subs	r3, r6, #1
 8008b46:	4019      	ands	r1, r3
 8008b48:	4088      	lsls	r0, r1
 8008b4a:	0001      	movs	r1, r0
 8008b4c:	115a      	asrs	r2, r3, #5
 8008b4e:	9804      	ldr	r0, [sp, #16]
 8008b50:	0092      	lsls	r2, r2, #2
 8008b52:	5812      	ldr	r2, [r2, r0]
 8008b54:	420a      	tst	r2, r1
 8008b56:	d009      	beq.n	8008b6c <__gethex+0x1f4>
 8008b58:	42ab      	cmp	r3, r5
 8008b5a:	dd06      	ble.n	8008b6a <__gethex+0x1f2>
 8008b5c:	0020      	movs	r0, r4
 8008b5e:	1eb1      	subs	r1, r6, #2
 8008b60:	f000 feed 	bl	800993e <__any_on>
 8008b64:	3502      	adds	r5, #2
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d100      	bne.n	8008b6c <__gethex+0x1f4>
 8008b6a:	2502      	movs	r5, #2
 8008b6c:	0031      	movs	r1, r6
 8008b6e:	0020      	movs	r0, r4
 8008b70:	f7ff fe98 	bl	80088a4 <rshift>
 8008b74:	19bf      	adds	r7, r7, r6
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	9303      	str	r3, [sp, #12]
 8008b7c:	42bb      	cmp	r3, r7
 8008b7e:	da42      	bge.n	8008c06 <__gethex+0x28e>
 8008b80:	0021      	movs	r1, r4
 8008b82:	9805      	ldr	r0, [sp, #20]
 8008b84:	f000 fa78 	bl	8009078 <_Bfree>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b8c:	26a3      	movs	r6, #163	; 0xa3
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	e78b      	b.n	8008aaa <__gethex+0x132>
 8008b92:	1e6b      	subs	r3, r5, #1
 8008b94:	9308      	str	r3, [sp, #32]
 8008b96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d014      	beq.n	8008bc8 <__gethex+0x250>
 8008b9e:	9b06      	ldr	r3, [sp, #24]
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d104      	bne.n	8008bae <__gethex+0x236>
 8008ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba6:	c340      	stmia	r3!, {r6}
 8008ba8:	2600      	movs	r6, #0
 8008baa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bac:	9606      	str	r6, [sp, #24]
 8008bae:	9b08      	ldr	r3, [sp, #32]
 8008bb0:	7818      	ldrb	r0, [r3, #0]
 8008bb2:	f7ff fecb 	bl	800894c <__hexdig_fun>
 8008bb6:	230f      	movs	r3, #15
 8008bb8:	4018      	ands	r0, r3
 8008bba:	9b06      	ldr	r3, [sp, #24]
 8008bbc:	9d08      	ldr	r5, [sp, #32]
 8008bbe:	4098      	lsls	r0, r3
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	4306      	orrs	r6, r0
 8008bc4:	9306      	str	r3, [sp, #24]
 8008bc6:	e7a0      	b.n	8008b0a <__gethex+0x192>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	9a03      	ldr	r2, [sp, #12]
 8008bcc:	1a9d      	subs	r5, r3, r2
 8008bce:	9b08      	ldr	r3, [sp, #32]
 8008bd0:	195d      	adds	r5, r3, r5
 8008bd2:	9b01      	ldr	r3, [sp, #4]
 8008bd4:	429d      	cmp	r5, r3
 8008bd6:	d3e2      	bcc.n	8008b9e <__gethex+0x226>
 8008bd8:	0028      	movs	r0, r5
 8008bda:	9907      	ldr	r1, [sp, #28]
 8008bdc:	f001 f902 	bl	8009de4 <strncmp>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d1dc      	bne.n	8008b9e <__gethex+0x226>
 8008be4:	e791      	b.n	8008b0a <__gethex+0x192>
 8008be6:	9b01      	ldr	r3, [sp, #4]
 8008be8:	2500      	movs	r5, #0
 8008bea:	429e      	cmp	r6, r3
 8008bec:	dac3      	bge.n	8008b76 <__gethex+0x1fe>
 8008bee:	1b9e      	subs	r6, r3, r6
 8008bf0:	0021      	movs	r1, r4
 8008bf2:	0032      	movs	r2, r6
 8008bf4:	9805      	ldr	r0, [sp, #20]
 8008bf6:	f000 fc5d 	bl	80094b4 <__lshift>
 8008bfa:	0003      	movs	r3, r0
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	0004      	movs	r4, r0
 8008c00:	1bbf      	subs	r7, r7, r6
 8008c02:	9304      	str	r3, [sp, #16]
 8008c04:	e7b7      	b.n	8008b76 <__gethex+0x1fe>
 8008c06:	9b02      	ldr	r3, [sp, #8]
 8008c08:	685e      	ldr	r6, [r3, #4]
 8008c0a:	42be      	cmp	r6, r7
 8008c0c:	dd71      	ble.n	8008cf2 <__gethex+0x37a>
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	1bf6      	subs	r6, r6, r7
 8008c12:	42b3      	cmp	r3, r6
 8008c14:	dc38      	bgt.n	8008c88 <__gethex+0x310>
 8008c16:	9b02      	ldr	r3, [sp, #8]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d026      	beq.n	8008c6c <__gethex+0x2f4>
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d02e      	beq.n	8008c80 <__gethex+0x308>
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d119      	bne.n	8008c5a <__gethex+0x2e2>
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	42b3      	cmp	r3, r6
 8008c2a:	d116      	bne.n	8008c5a <__gethex+0x2e2>
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d10d      	bne.n	8008c4c <__gethex+0x2d4>
 8008c30:	9b02      	ldr	r3, [sp, #8]
 8008c32:	2662      	movs	r6, #98	; 0x62
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	9a01      	ldr	r2, [sp, #4]
 8008c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	2301      	movs	r3, #1
 8008c40:	9a04      	ldr	r2, [sp, #16]
 8008c42:	6123      	str	r3, [r4, #16]
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c48:	601c      	str	r4, [r3, #0]
 8008c4a:	e72e      	b.n	8008aaa <__gethex+0x132>
 8008c4c:	9901      	ldr	r1, [sp, #4]
 8008c4e:	0020      	movs	r0, r4
 8008c50:	3901      	subs	r1, #1
 8008c52:	f000 fe74 	bl	800993e <__any_on>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d1ea      	bne.n	8008c30 <__gethex+0x2b8>
 8008c5a:	0021      	movs	r1, r4
 8008c5c:	9805      	ldr	r0, [sp, #20]
 8008c5e:	f000 fa0b 	bl	8009078 <_Bfree>
 8008c62:	2300      	movs	r3, #0
 8008c64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c66:	2650      	movs	r6, #80	; 0x50
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	e71e      	b.n	8008aaa <__gethex+0x132>
 8008c6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f3      	bne.n	8008c5a <__gethex+0x2e2>
 8008c72:	e7dd      	b.n	8008c30 <__gethex+0x2b8>
 8008c74:	0800ae20 	.word	0x0800ae20
 8008c78:	0800ada4 	.word	0x0800ada4
 8008c7c:	0800adb5 	.word	0x0800adb5
 8008c80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1d4      	bne.n	8008c30 <__gethex+0x2b8>
 8008c86:	e7e8      	b.n	8008c5a <__gethex+0x2e2>
 8008c88:	1e77      	subs	r7, r6, #1
 8008c8a:	2d00      	cmp	r5, #0
 8008c8c:	d12f      	bne.n	8008cee <__gethex+0x376>
 8008c8e:	2f00      	cmp	r7, #0
 8008c90:	d004      	beq.n	8008c9c <__gethex+0x324>
 8008c92:	0039      	movs	r1, r7
 8008c94:	0020      	movs	r0, r4
 8008c96:	f000 fe52 	bl	800993e <__any_on>
 8008c9a:	0005      	movs	r5, r0
 8008c9c:	231f      	movs	r3, #31
 8008c9e:	117a      	asrs	r2, r7, #5
 8008ca0:	401f      	ands	r7, r3
 8008ca2:	3b1e      	subs	r3, #30
 8008ca4:	40bb      	lsls	r3, r7
 8008ca6:	9904      	ldr	r1, [sp, #16]
 8008ca8:	0092      	lsls	r2, r2, #2
 8008caa:	5852      	ldr	r2, [r2, r1]
 8008cac:	421a      	tst	r2, r3
 8008cae:	d001      	beq.n	8008cb4 <__gethex+0x33c>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	431d      	orrs	r5, r3
 8008cb4:	9b01      	ldr	r3, [sp, #4]
 8008cb6:	0031      	movs	r1, r6
 8008cb8:	1b9b      	subs	r3, r3, r6
 8008cba:	2602      	movs	r6, #2
 8008cbc:	0020      	movs	r0, r4
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	f7ff fdf0 	bl	80088a4 <rshift>
 8008cc4:	9b02      	ldr	r3, [sp, #8]
 8008cc6:	685f      	ldr	r7, [r3, #4]
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	d041      	beq.n	8008d50 <__gethex+0x3d8>
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d010      	beq.n	8008cf6 <__gethex+0x37e>
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d012      	beq.n	8008cfe <__gethex+0x386>
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d106      	bne.n	8008cea <__gethex+0x372>
 8008cdc:	07aa      	lsls	r2, r5, #30
 8008cde:	d504      	bpl.n	8008cea <__gethex+0x372>
 8008ce0:	9a04      	ldr	r2, [sp, #16]
 8008ce2:	6810      	ldr	r0, [r2, #0]
 8008ce4:	4305      	orrs	r5, r0
 8008ce6:	421d      	tst	r5, r3
 8008ce8:	d10c      	bne.n	8008d04 <__gethex+0x38c>
 8008cea:	2310      	movs	r3, #16
 8008cec:	e02f      	b.n	8008d4e <__gethex+0x3d6>
 8008cee:	2501      	movs	r5, #1
 8008cf0:	e7d4      	b.n	8008c9c <__gethex+0x324>
 8008cf2:	2601      	movs	r6, #1
 8008cf4:	e7e8      	b.n	8008cc8 <__gethex+0x350>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8008cfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0f2      	beq.n	8008cea <__gethex+0x372>
 8008d04:	6923      	ldr	r3, [r4, #16]
 8008d06:	2000      	movs	r0, #0
 8008d08:	9303      	str	r3, [sp, #12]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	0023      	movs	r3, r4
 8008d10:	9a04      	ldr	r2, [sp, #16]
 8008d12:	3314      	adds	r3, #20
 8008d14:	1899      	adds	r1, r3, r2
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	1c55      	adds	r5, r2, #1
 8008d1a:	d01e      	beq.n	8008d5a <__gethex+0x3e2>
 8008d1c:	3201      	adds	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	0023      	movs	r3, r4
 8008d22:	3314      	adds	r3, #20
 8008d24:	2e02      	cmp	r6, #2
 8008d26:	d140      	bne.n	8008daa <__gethex+0x432>
 8008d28:	9a02      	ldr	r2, [sp, #8]
 8008d2a:	9901      	ldr	r1, [sp, #4]
 8008d2c:	6812      	ldr	r2, [r2, #0]
 8008d2e:	3a01      	subs	r2, #1
 8008d30:	428a      	cmp	r2, r1
 8008d32:	d10b      	bne.n	8008d4c <__gethex+0x3d4>
 8008d34:	114a      	asrs	r2, r1, #5
 8008d36:	211f      	movs	r1, #31
 8008d38:	9801      	ldr	r0, [sp, #4]
 8008d3a:	0092      	lsls	r2, r2, #2
 8008d3c:	4001      	ands	r1, r0
 8008d3e:	2001      	movs	r0, #1
 8008d40:	0005      	movs	r5, r0
 8008d42:	408d      	lsls	r5, r1
 8008d44:	58d3      	ldr	r3, [r2, r3]
 8008d46:	422b      	tst	r3, r5
 8008d48:	d000      	beq.n	8008d4c <__gethex+0x3d4>
 8008d4a:	2601      	movs	r6, #1
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	431e      	orrs	r6, r3
 8008d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d52:	601c      	str	r4, [r3, #0]
 8008d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d56:	601f      	str	r7, [r3, #0]
 8008d58:	e6a7      	b.n	8008aaa <__gethex+0x132>
 8008d5a:	c301      	stmia	r3!, {r0}
 8008d5c:	4299      	cmp	r1, r3
 8008d5e:	d8da      	bhi.n	8008d16 <__gethex+0x39e>
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	68a2      	ldr	r2, [r4, #8]
 8008d64:	4293      	cmp	r3, r2
 8008d66:	db17      	blt.n	8008d98 <__gethex+0x420>
 8008d68:	6863      	ldr	r3, [r4, #4]
 8008d6a:	9805      	ldr	r0, [sp, #20]
 8008d6c:	1c59      	adds	r1, r3, #1
 8008d6e:	f000 f93f 	bl	8008ff0 <_Balloc>
 8008d72:	1e05      	subs	r5, r0, #0
 8008d74:	d103      	bne.n	8008d7e <__gethex+0x406>
 8008d76:	0002      	movs	r2, r0
 8008d78:	2184      	movs	r1, #132	; 0x84
 8008d7a:	4b1c      	ldr	r3, [pc, #112]	; (8008dec <__gethex+0x474>)
 8008d7c:	e6b8      	b.n	8008af0 <__gethex+0x178>
 8008d7e:	0021      	movs	r1, r4
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	310c      	adds	r1, #12
 8008d84:	1c9a      	adds	r2, r3, #2
 8008d86:	0092      	lsls	r2, r2, #2
 8008d88:	300c      	adds	r0, #12
 8008d8a:	f000 f928 	bl	8008fde <memcpy>
 8008d8e:	0021      	movs	r1, r4
 8008d90:	9805      	ldr	r0, [sp, #20]
 8008d92:	f000 f971 	bl	8009078 <_Bfree>
 8008d96:	002c      	movs	r4, r5
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	6122      	str	r2, [r4, #16]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	3304      	adds	r3, #4
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	18e3      	adds	r3, r4, r3
 8008da6:	605a      	str	r2, [r3, #4]
 8008da8:	e7ba      	b.n	8008d20 <__gethex+0x3a8>
 8008daa:	6922      	ldr	r2, [r4, #16]
 8008dac:	9903      	ldr	r1, [sp, #12]
 8008dae:	428a      	cmp	r2, r1
 8008db0:	dd09      	ble.n	8008dc6 <__gethex+0x44e>
 8008db2:	2101      	movs	r1, #1
 8008db4:	0020      	movs	r0, r4
 8008db6:	f7ff fd75 	bl	80088a4 <rshift>
 8008dba:	9b02      	ldr	r3, [sp, #8]
 8008dbc:	3701      	adds	r7, #1
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	42bb      	cmp	r3, r7
 8008dc2:	dac2      	bge.n	8008d4a <__gethex+0x3d2>
 8008dc4:	e6dc      	b.n	8008b80 <__gethex+0x208>
 8008dc6:	221f      	movs	r2, #31
 8008dc8:	9d01      	ldr	r5, [sp, #4]
 8008dca:	9901      	ldr	r1, [sp, #4]
 8008dcc:	2601      	movs	r6, #1
 8008dce:	4015      	ands	r5, r2
 8008dd0:	4211      	tst	r1, r2
 8008dd2:	d0bb      	beq.n	8008d4c <__gethex+0x3d4>
 8008dd4:	9a04      	ldr	r2, [sp, #16]
 8008dd6:	189b      	adds	r3, r3, r2
 8008dd8:	3b04      	subs	r3, #4
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	f000 fa00 	bl	80091e0 <__hi0bits>
 8008de0:	2320      	movs	r3, #32
 8008de2:	1b5d      	subs	r5, r3, r5
 8008de4:	42a8      	cmp	r0, r5
 8008de6:	dbe4      	blt.n	8008db2 <__gethex+0x43a>
 8008de8:	e7b0      	b.n	8008d4c <__gethex+0x3d4>
 8008dea:	46c0      	nop			; (mov r8, r8)
 8008dec:	0800ada4 	.word	0x0800ada4

08008df0 <L_shift>:
 8008df0:	2308      	movs	r3, #8
 8008df2:	b570      	push	{r4, r5, r6, lr}
 8008df4:	2520      	movs	r5, #32
 8008df6:	1a9a      	subs	r2, r3, r2
 8008df8:	0092      	lsls	r2, r2, #2
 8008dfa:	1aad      	subs	r5, r5, r2
 8008dfc:	6843      	ldr	r3, [r0, #4]
 8008dfe:	6806      	ldr	r6, [r0, #0]
 8008e00:	001c      	movs	r4, r3
 8008e02:	40ac      	lsls	r4, r5
 8008e04:	40d3      	lsrs	r3, r2
 8008e06:	4334      	orrs	r4, r6
 8008e08:	6004      	str	r4, [r0, #0]
 8008e0a:	6043      	str	r3, [r0, #4]
 8008e0c:	3004      	adds	r0, #4
 8008e0e:	4288      	cmp	r0, r1
 8008e10:	d3f4      	bcc.n	8008dfc <L_shift+0xc>
 8008e12:	bd70      	pop	{r4, r5, r6, pc}

08008e14 <__match>:
 8008e14:	b530      	push	{r4, r5, lr}
 8008e16:	6803      	ldr	r3, [r0, #0]
 8008e18:	780c      	ldrb	r4, [r1, #0]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	2c00      	cmp	r4, #0
 8008e1e:	d102      	bne.n	8008e26 <__match+0x12>
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	2001      	movs	r0, #1
 8008e24:	bd30      	pop	{r4, r5, pc}
 8008e26:	781a      	ldrb	r2, [r3, #0]
 8008e28:	0015      	movs	r5, r2
 8008e2a:	3d41      	subs	r5, #65	; 0x41
 8008e2c:	2d19      	cmp	r5, #25
 8008e2e:	d800      	bhi.n	8008e32 <__match+0x1e>
 8008e30:	3220      	adds	r2, #32
 8008e32:	3101      	adds	r1, #1
 8008e34:	42a2      	cmp	r2, r4
 8008e36:	d0ef      	beq.n	8008e18 <__match+0x4>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7f3      	b.n	8008e24 <__match+0x10>

08008e3c <__hexnan>:
 8008e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e3e:	680b      	ldr	r3, [r1, #0]
 8008e40:	b08b      	sub	sp, #44	; 0x2c
 8008e42:	115c      	asrs	r4, r3, #5
 8008e44:	00a4      	lsls	r4, r4, #2
 8008e46:	9201      	str	r2, [sp, #4]
 8008e48:	1912      	adds	r2, r2, r4
 8008e4a:	0019      	movs	r1, r3
 8008e4c:	9202      	str	r2, [sp, #8]
 8008e4e:	221f      	movs	r2, #31
 8008e50:	4011      	ands	r1, r2
 8008e52:	9008      	str	r0, [sp, #32]
 8008e54:	9106      	str	r1, [sp, #24]
 8008e56:	4213      	tst	r3, r2
 8008e58:	d002      	beq.n	8008e60 <__hexnan+0x24>
 8008e5a:	9b02      	ldr	r3, [sp, #8]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	9302      	str	r3, [sp, #8]
 8008e60:	9b02      	ldr	r3, [sp, #8]
 8008e62:	2500      	movs	r5, #0
 8008e64:	1f1e      	subs	r6, r3, #4
 8008e66:	0037      	movs	r7, r6
 8008e68:	0034      	movs	r4, r6
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	6035      	str	r5, [r6, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	9507      	str	r5, [sp, #28]
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	9503      	str	r5, [sp, #12]
 8008e76:	9b05      	ldr	r3, [sp, #20]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7c:	9b05      	ldr	r3, [sp, #20]
 8008e7e:	785b      	ldrb	r3, [r3, #1]
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d028      	beq.n	8008ed8 <__hexnan+0x9c>
 8008e86:	9804      	ldr	r0, [sp, #16]
 8008e88:	f7ff fd60 	bl	800894c <__hexdig_fun>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d154      	bne.n	8008f3a <__hexnan+0xfe>
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	2b20      	cmp	r3, #32
 8008e94:	d819      	bhi.n	8008eca <__hexnan+0x8e>
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	9a07      	ldr	r2, [sp, #28]
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	dd12      	ble.n	8008ec4 <__hexnan+0x88>
 8008e9e:	42bc      	cmp	r4, r7
 8008ea0:	d206      	bcs.n	8008eb0 <__hexnan+0x74>
 8008ea2:	2d07      	cmp	r5, #7
 8008ea4:	dc04      	bgt.n	8008eb0 <__hexnan+0x74>
 8008ea6:	002a      	movs	r2, r5
 8008ea8:	0039      	movs	r1, r7
 8008eaa:	0020      	movs	r0, r4
 8008eac:	f7ff ffa0 	bl	8008df0 <L_shift>
 8008eb0:	9b01      	ldr	r3, [sp, #4]
 8008eb2:	2508      	movs	r5, #8
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	d905      	bls.n	8008ec4 <__hexnan+0x88>
 8008eb8:	1f27      	subs	r7, r4, #4
 8008eba:	2500      	movs	r5, #0
 8008ebc:	003c      	movs	r4, r7
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	603d      	str	r5, [r7, #0]
 8008ec2:	9307      	str	r3, [sp, #28]
 8008ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec6:	9305      	str	r3, [sp, #20]
 8008ec8:	e7d5      	b.n	8008e76 <__hexnan+0x3a>
 8008eca:	9b04      	ldr	r3, [sp, #16]
 8008ecc:	2b29      	cmp	r3, #41	; 0x29
 8008ece:	d158      	bne.n	8008f82 <__hexnan+0x146>
 8008ed0:	9b05      	ldr	r3, [sp, #20]
 8008ed2:	9a08      	ldr	r2, [sp, #32]
 8008ed4:	3302      	adds	r3, #2
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d051      	beq.n	8008f82 <__hexnan+0x146>
 8008ede:	42bc      	cmp	r4, r7
 8008ee0:	d206      	bcs.n	8008ef0 <__hexnan+0xb4>
 8008ee2:	2d07      	cmp	r5, #7
 8008ee4:	dc04      	bgt.n	8008ef0 <__hexnan+0xb4>
 8008ee6:	002a      	movs	r2, r5
 8008ee8:	0039      	movs	r1, r7
 8008eea:	0020      	movs	r0, r4
 8008eec:	f7ff ff80 	bl	8008df0 <L_shift>
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	429c      	cmp	r4, r3
 8008ef4:	d935      	bls.n	8008f62 <__hexnan+0x126>
 8008ef6:	001a      	movs	r2, r3
 8008ef8:	0023      	movs	r3, r4
 8008efa:	cb02      	ldmia	r3!, {r1}
 8008efc:	c202      	stmia	r2!, {r1}
 8008efe:	429e      	cmp	r6, r3
 8008f00:	d2fb      	bcs.n	8008efa <__hexnan+0xbe>
 8008f02:	9b02      	ldr	r3, [sp, #8]
 8008f04:	1c61      	adds	r1, r4, #1
 8008f06:	1eda      	subs	r2, r3, #3
 8008f08:	2304      	movs	r3, #4
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	d805      	bhi.n	8008f1a <__hexnan+0xde>
 8008f0e:	9b02      	ldr	r3, [sp, #8]
 8008f10:	3b04      	subs	r3, #4
 8008f12:	1b1c      	subs	r4, r3, r4
 8008f14:	08a4      	lsrs	r4, r4, #2
 8008f16:	3401      	adds	r4, #1
 8008f18:	00a3      	lsls	r3, r4, #2
 8008f1a:	9a01      	ldr	r2, [sp, #4]
 8008f1c:	18d4      	adds	r4, r2, r3
 8008f1e:	2300      	movs	r3, #0
 8008f20:	c408      	stmia	r4!, {r3}
 8008f22:	42a6      	cmp	r6, r4
 8008f24:	d2fc      	bcs.n	8008f20 <__hexnan+0xe4>
 8008f26:	6833      	ldr	r3, [r6, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <__hexnan+0xfa>
 8008f2c:	9b01      	ldr	r3, [sp, #4]
 8008f2e:	429e      	cmp	r6, r3
 8008f30:	d125      	bne.n	8008f7e <__hexnan+0x142>
 8008f32:	2301      	movs	r3, #1
 8008f34:	6033      	str	r3, [r6, #0]
 8008f36:	2005      	movs	r0, #5
 8008f38:	e024      	b.n	8008f84 <__hexnan+0x148>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	3301      	adds	r3, #1
 8008f40:	9303      	str	r3, [sp, #12]
 8008f42:	2d08      	cmp	r5, #8
 8008f44:	dd06      	ble.n	8008f54 <__hexnan+0x118>
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	429c      	cmp	r4, r3
 8008f4a:	d9bb      	bls.n	8008ec4 <__hexnan+0x88>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	2501      	movs	r5, #1
 8008f50:	3c04      	subs	r4, #4
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	220f      	movs	r2, #15
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	4010      	ands	r0, r2
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	4318      	orrs	r0, r3
 8008f5e:	6020      	str	r0, [r4, #0]
 8008f60:	e7b0      	b.n	8008ec4 <__hexnan+0x88>
 8008f62:	9b06      	ldr	r3, [sp, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0de      	beq.n	8008f26 <__hexnan+0xea>
 8008f68:	2220      	movs	r2, #32
 8008f6a:	1ad2      	subs	r2, r2, r3
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	425b      	negs	r3, r3
 8008f70:	40d3      	lsrs	r3, r2
 8008f72:	9c02      	ldr	r4, [sp, #8]
 8008f74:	3c04      	subs	r4, #4
 8008f76:	6822      	ldr	r2, [r4, #0]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	e7d3      	b.n	8008f26 <__hexnan+0xea>
 8008f7e:	3e04      	subs	r6, #4
 8008f80:	e7d1      	b.n	8008f26 <__hexnan+0xea>
 8008f82:	2004      	movs	r0, #4
 8008f84:	b00b      	add	sp, #44	; 0x2c
 8008f86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f88 <_localeconv_r>:
 8008f88:	4800      	ldr	r0, [pc, #0]	; (8008f8c <_localeconv_r+0x4>)
 8008f8a:	4770      	bx	lr
 8008f8c:	20000178 	.word	0x20000178

08008f90 <malloc>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	4b03      	ldr	r3, [pc, #12]	; (8008fa0 <malloc+0x10>)
 8008f94:	0001      	movs	r1, r0
 8008f96:	6818      	ldr	r0, [r3, #0]
 8008f98:	f000 fd4c 	bl	8009a34 <_malloc_r>
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	46c0      	nop			; (mov r8, r8)
 8008fa0:	20000020 	.word	0x20000020

08008fa4 <__ascii_mbtowc>:
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	2900      	cmp	r1, #0
 8008fa8:	d100      	bne.n	8008fac <__ascii_mbtowc+0x8>
 8008faa:	a901      	add	r1, sp, #4
 8008fac:	1e10      	subs	r0, r2, #0
 8008fae:	d006      	beq.n	8008fbe <__ascii_mbtowc+0x1a>
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d006      	beq.n	8008fc2 <__ascii_mbtowc+0x1e>
 8008fb4:	7813      	ldrb	r3, [r2, #0]
 8008fb6:	600b      	str	r3, [r1, #0]
 8008fb8:	7810      	ldrb	r0, [r2, #0]
 8008fba:	1e43      	subs	r3, r0, #1
 8008fbc:	4198      	sbcs	r0, r3
 8008fbe:	b002      	add	sp, #8
 8008fc0:	4770      	bx	lr
 8008fc2:	2002      	movs	r0, #2
 8008fc4:	4240      	negs	r0, r0
 8008fc6:	e7fa      	b.n	8008fbe <__ascii_mbtowc+0x1a>

08008fc8 <memchr>:
 8008fc8:	b2c9      	uxtb	r1, r1
 8008fca:	1882      	adds	r2, r0, r2
 8008fcc:	4290      	cmp	r0, r2
 8008fce:	d101      	bne.n	8008fd4 <memchr+0xc>
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	4770      	bx	lr
 8008fd4:	7803      	ldrb	r3, [r0, #0]
 8008fd6:	428b      	cmp	r3, r1
 8008fd8:	d0fb      	beq.n	8008fd2 <memchr+0xa>
 8008fda:	3001      	adds	r0, #1
 8008fdc:	e7f6      	b.n	8008fcc <memchr+0x4>

08008fde <memcpy>:
 8008fde:	2300      	movs	r3, #0
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d100      	bne.n	8008fe8 <memcpy+0xa>
 8008fe6:	bd10      	pop	{r4, pc}
 8008fe8:	5ccc      	ldrb	r4, [r1, r3]
 8008fea:	54c4      	strb	r4, [r0, r3]
 8008fec:	3301      	adds	r3, #1
 8008fee:	e7f8      	b.n	8008fe2 <memcpy+0x4>

08008ff0 <_Balloc>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ff4:	0006      	movs	r6, r0
 8008ff6:	000c      	movs	r4, r1
 8008ff8:	2d00      	cmp	r5, #0
 8008ffa:	d10e      	bne.n	800901a <_Balloc+0x2a>
 8008ffc:	2010      	movs	r0, #16
 8008ffe:	f7ff ffc7 	bl	8008f90 <malloc>
 8009002:	1e02      	subs	r2, r0, #0
 8009004:	6270      	str	r0, [r6, #36]	; 0x24
 8009006:	d104      	bne.n	8009012 <_Balloc+0x22>
 8009008:	2166      	movs	r1, #102	; 0x66
 800900a:	4b19      	ldr	r3, [pc, #100]	; (8009070 <_Balloc+0x80>)
 800900c:	4819      	ldr	r0, [pc, #100]	; (8009074 <_Balloc+0x84>)
 800900e:	f000 ff07 	bl	8009e20 <__assert_func>
 8009012:	6045      	str	r5, [r0, #4]
 8009014:	6085      	str	r5, [r0, #8]
 8009016:	6005      	str	r5, [r0, #0]
 8009018:	60c5      	str	r5, [r0, #12]
 800901a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800901c:	68eb      	ldr	r3, [r5, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d013      	beq.n	800904a <_Balloc+0x5a>
 8009022:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009024:	00a2      	lsls	r2, r4, #2
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	189b      	adds	r3, r3, r2
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	2800      	cmp	r0, #0
 800902e:	d118      	bne.n	8009062 <_Balloc+0x72>
 8009030:	2101      	movs	r1, #1
 8009032:	000d      	movs	r5, r1
 8009034:	40a5      	lsls	r5, r4
 8009036:	1d6a      	adds	r2, r5, #5
 8009038:	0030      	movs	r0, r6
 800903a:	0092      	lsls	r2, r2, #2
 800903c:	f000 fca2 	bl	8009984 <_calloc_r>
 8009040:	2800      	cmp	r0, #0
 8009042:	d00c      	beq.n	800905e <_Balloc+0x6e>
 8009044:	6044      	str	r4, [r0, #4]
 8009046:	6085      	str	r5, [r0, #8]
 8009048:	e00d      	b.n	8009066 <_Balloc+0x76>
 800904a:	2221      	movs	r2, #33	; 0x21
 800904c:	2104      	movs	r1, #4
 800904e:	0030      	movs	r0, r6
 8009050:	f000 fc98 	bl	8009984 <_calloc_r>
 8009054:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009056:	60e8      	str	r0, [r5, #12]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e1      	bne.n	8009022 <_Balloc+0x32>
 800905e:	2000      	movs	r0, #0
 8009060:	bd70      	pop	{r4, r5, r6, pc}
 8009062:	6802      	ldr	r2, [r0, #0]
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	2300      	movs	r3, #0
 8009068:	6103      	str	r3, [r0, #16]
 800906a:	60c3      	str	r3, [r0, #12]
 800906c:	e7f8      	b.n	8009060 <_Balloc+0x70>
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	0800ad2e 	.word	0x0800ad2e
 8009074:	0800ae34 	.word	0x0800ae34

08009078 <_Bfree>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800907c:	0005      	movs	r5, r0
 800907e:	000c      	movs	r4, r1
 8009080:	2e00      	cmp	r6, #0
 8009082:	d10e      	bne.n	80090a2 <_Bfree+0x2a>
 8009084:	2010      	movs	r0, #16
 8009086:	f7ff ff83 	bl	8008f90 <malloc>
 800908a:	1e02      	subs	r2, r0, #0
 800908c:	6268      	str	r0, [r5, #36]	; 0x24
 800908e:	d104      	bne.n	800909a <_Bfree+0x22>
 8009090:	218a      	movs	r1, #138	; 0x8a
 8009092:	4b09      	ldr	r3, [pc, #36]	; (80090b8 <_Bfree+0x40>)
 8009094:	4809      	ldr	r0, [pc, #36]	; (80090bc <_Bfree+0x44>)
 8009096:	f000 fec3 	bl	8009e20 <__assert_func>
 800909a:	6046      	str	r6, [r0, #4]
 800909c:	6086      	str	r6, [r0, #8]
 800909e:	6006      	str	r6, [r0, #0]
 80090a0:	60c6      	str	r6, [r0, #12]
 80090a2:	2c00      	cmp	r4, #0
 80090a4:	d007      	beq.n	80090b6 <_Bfree+0x3e>
 80090a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090a8:	6862      	ldr	r2, [r4, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	0092      	lsls	r2, r2, #2
 80090ae:	189b      	adds	r3, r3, r2
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	6022      	str	r2, [r4, #0]
 80090b4:	601c      	str	r4, [r3, #0]
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	0800ad2e 	.word	0x0800ad2e
 80090bc:	0800ae34 	.word	0x0800ae34

080090c0 <__multadd>:
 80090c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c2:	000e      	movs	r6, r1
 80090c4:	9001      	str	r0, [sp, #4]
 80090c6:	000c      	movs	r4, r1
 80090c8:	001d      	movs	r5, r3
 80090ca:	2000      	movs	r0, #0
 80090cc:	690f      	ldr	r7, [r1, #16]
 80090ce:	3614      	adds	r6, #20
 80090d0:	6833      	ldr	r3, [r6, #0]
 80090d2:	3001      	adds	r0, #1
 80090d4:	b299      	uxth	r1, r3
 80090d6:	4351      	muls	r1, r2
 80090d8:	0c1b      	lsrs	r3, r3, #16
 80090da:	4353      	muls	r3, r2
 80090dc:	1949      	adds	r1, r1, r5
 80090de:	0c0d      	lsrs	r5, r1, #16
 80090e0:	195b      	adds	r3, r3, r5
 80090e2:	0c1d      	lsrs	r5, r3, #16
 80090e4:	b289      	uxth	r1, r1
 80090e6:	041b      	lsls	r3, r3, #16
 80090e8:	185b      	adds	r3, r3, r1
 80090ea:	c608      	stmia	r6!, {r3}
 80090ec:	4287      	cmp	r7, r0
 80090ee:	dcef      	bgt.n	80090d0 <__multadd+0x10>
 80090f0:	2d00      	cmp	r5, #0
 80090f2:	d022      	beq.n	800913a <__multadd+0x7a>
 80090f4:	68a3      	ldr	r3, [r4, #8]
 80090f6:	42bb      	cmp	r3, r7
 80090f8:	dc19      	bgt.n	800912e <__multadd+0x6e>
 80090fa:	6863      	ldr	r3, [r4, #4]
 80090fc:	9801      	ldr	r0, [sp, #4]
 80090fe:	1c59      	adds	r1, r3, #1
 8009100:	f7ff ff76 	bl	8008ff0 <_Balloc>
 8009104:	1e06      	subs	r6, r0, #0
 8009106:	d105      	bne.n	8009114 <__multadd+0x54>
 8009108:	0002      	movs	r2, r0
 800910a:	21b5      	movs	r1, #181	; 0xb5
 800910c:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <__multadd+0x80>)
 800910e:	480d      	ldr	r0, [pc, #52]	; (8009144 <__multadd+0x84>)
 8009110:	f000 fe86 	bl	8009e20 <__assert_func>
 8009114:	0021      	movs	r1, r4
 8009116:	6923      	ldr	r3, [r4, #16]
 8009118:	310c      	adds	r1, #12
 800911a:	1c9a      	adds	r2, r3, #2
 800911c:	0092      	lsls	r2, r2, #2
 800911e:	300c      	adds	r0, #12
 8009120:	f7ff ff5d 	bl	8008fde <memcpy>
 8009124:	0021      	movs	r1, r4
 8009126:	9801      	ldr	r0, [sp, #4]
 8009128:	f7ff ffa6 	bl	8009078 <_Bfree>
 800912c:	0034      	movs	r4, r6
 800912e:	1d3b      	adds	r3, r7, #4
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	18e3      	adds	r3, r4, r3
 8009134:	605d      	str	r5, [r3, #4]
 8009136:	1c7b      	adds	r3, r7, #1
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	0020      	movs	r0, r4
 800913c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800913e:	46c0      	nop			; (mov r8, r8)
 8009140:	0800ada4 	.word	0x0800ada4
 8009144:	0800ae34 	.word	0x0800ae34

08009148 <__s2b>:
 8009148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800914a:	0006      	movs	r6, r0
 800914c:	0018      	movs	r0, r3
 800914e:	000c      	movs	r4, r1
 8009150:	3008      	adds	r0, #8
 8009152:	2109      	movs	r1, #9
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	0015      	movs	r5, r2
 8009158:	f7f7 f87c 	bl	8000254 <__divsi3>
 800915c:	2301      	movs	r3, #1
 800915e:	2100      	movs	r1, #0
 8009160:	4283      	cmp	r3, r0
 8009162:	db0a      	blt.n	800917a <__s2b+0x32>
 8009164:	0030      	movs	r0, r6
 8009166:	f7ff ff43 	bl	8008ff0 <_Balloc>
 800916a:	1e01      	subs	r1, r0, #0
 800916c:	d108      	bne.n	8009180 <__s2b+0x38>
 800916e:	0002      	movs	r2, r0
 8009170:	4b19      	ldr	r3, [pc, #100]	; (80091d8 <__s2b+0x90>)
 8009172:	481a      	ldr	r0, [pc, #104]	; (80091dc <__s2b+0x94>)
 8009174:	31ce      	adds	r1, #206	; 0xce
 8009176:	f000 fe53 	bl	8009e20 <__assert_func>
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	3101      	adds	r1, #1
 800917e:	e7ef      	b.n	8009160 <__s2b+0x18>
 8009180:	9b08      	ldr	r3, [sp, #32]
 8009182:	6143      	str	r3, [r0, #20]
 8009184:	2301      	movs	r3, #1
 8009186:	6103      	str	r3, [r0, #16]
 8009188:	2d09      	cmp	r5, #9
 800918a:	dd18      	ble.n	80091be <__s2b+0x76>
 800918c:	0023      	movs	r3, r4
 800918e:	3309      	adds	r3, #9
 8009190:	001f      	movs	r7, r3
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	1964      	adds	r4, r4, r5
 8009196:	783b      	ldrb	r3, [r7, #0]
 8009198:	220a      	movs	r2, #10
 800919a:	0030      	movs	r0, r6
 800919c:	3b30      	subs	r3, #48	; 0x30
 800919e:	f7ff ff8f 	bl	80090c0 <__multadd>
 80091a2:	3701      	adds	r7, #1
 80091a4:	0001      	movs	r1, r0
 80091a6:	42a7      	cmp	r7, r4
 80091a8:	d1f5      	bne.n	8009196 <__s2b+0x4e>
 80091aa:	002c      	movs	r4, r5
 80091ac:	9b00      	ldr	r3, [sp, #0]
 80091ae:	3c08      	subs	r4, #8
 80091b0:	191c      	adds	r4, r3, r4
 80091b2:	002f      	movs	r7, r5
 80091b4:	9b01      	ldr	r3, [sp, #4]
 80091b6:	429f      	cmp	r7, r3
 80091b8:	db04      	blt.n	80091c4 <__s2b+0x7c>
 80091ba:	0008      	movs	r0, r1
 80091bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091be:	2509      	movs	r5, #9
 80091c0:	340a      	adds	r4, #10
 80091c2:	e7f6      	b.n	80091b2 <__s2b+0x6a>
 80091c4:	1b63      	subs	r3, r4, r5
 80091c6:	5ddb      	ldrb	r3, [r3, r7]
 80091c8:	220a      	movs	r2, #10
 80091ca:	0030      	movs	r0, r6
 80091cc:	3b30      	subs	r3, #48	; 0x30
 80091ce:	f7ff ff77 	bl	80090c0 <__multadd>
 80091d2:	3701      	adds	r7, #1
 80091d4:	0001      	movs	r1, r0
 80091d6:	e7ed      	b.n	80091b4 <__s2b+0x6c>
 80091d8:	0800ada4 	.word	0x0800ada4
 80091dc:	0800ae34 	.word	0x0800ae34

080091e0 <__hi0bits>:
 80091e0:	0003      	movs	r3, r0
 80091e2:	0c02      	lsrs	r2, r0, #16
 80091e4:	2000      	movs	r0, #0
 80091e6:	4282      	cmp	r2, r0
 80091e8:	d101      	bne.n	80091ee <__hi0bits+0xe>
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	3010      	adds	r0, #16
 80091ee:	0e1a      	lsrs	r2, r3, #24
 80091f0:	d101      	bne.n	80091f6 <__hi0bits+0x16>
 80091f2:	3008      	adds	r0, #8
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	0f1a      	lsrs	r2, r3, #28
 80091f8:	d101      	bne.n	80091fe <__hi0bits+0x1e>
 80091fa:	3004      	adds	r0, #4
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	0f9a      	lsrs	r2, r3, #30
 8009200:	d101      	bne.n	8009206 <__hi0bits+0x26>
 8009202:	3002      	adds	r0, #2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	2b00      	cmp	r3, #0
 8009208:	db03      	blt.n	8009212 <__hi0bits+0x32>
 800920a:	3001      	adds	r0, #1
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	d400      	bmi.n	8009212 <__hi0bits+0x32>
 8009210:	2020      	movs	r0, #32
 8009212:	4770      	bx	lr

08009214 <__lo0bits>:
 8009214:	6803      	ldr	r3, [r0, #0]
 8009216:	0002      	movs	r2, r0
 8009218:	2107      	movs	r1, #7
 800921a:	0018      	movs	r0, r3
 800921c:	4008      	ands	r0, r1
 800921e:	420b      	tst	r3, r1
 8009220:	d00d      	beq.n	800923e <__lo0bits+0x2a>
 8009222:	3906      	subs	r1, #6
 8009224:	2000      	movs	r0, #0
 8009226:	420b      	tst	r3, r1
 8009228:	d105      	bne.n	8009236 <__lo0bits+0x22>
 800922a:	3002      	adds	r0, #2
 800922c:	4203      	tst	r3, r0
 800922e:	d003      	beq.n	8009238 <__lo0bits+0x24>
 8009230:	40cb      	lsrs	r3, r1
 8009232:	0008      	movs	r0, r1
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	4770      	bx	lr
 8009238:	089b      	lsrs	r3, r3, #2
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	e7fb      	b.n	8009236 <__lo0bits+0x22>
 800923e:	b299      	uxth	r1, r3
 8009240:	2900      	cmp	r1, #0
 8009242:	d101      	bne.n	8009248 <__lo0bits+0x34>
 8009244:	2010      	movs	r0, #16
 8009246:	0c1b      	lsrs	r3, r3, #16
 8009248:	b2d9      	uxtb	r1, r3
 800924a:	2900      	cmp	r1, #0
 800924c:	d101      	bne.n	8009252 <__lo0bits+0x3e>
 800924e:	3008      	adds	r0, #8
 8009250:	0a1b      	lsrs	r3, r3, #8
 8009252:	0719      	lsls	r1, r3, #28
 8009254:	d101      	bne.n	800925a <__lo0bits+0x46>
 8009256:	3004      	adds	r0, #4
 8009258:	091b      	lsrs	r3, r3, #4
 800925a:	0799      	lsls	r1, r3, #30
 800925c:	d101      	bne.n	8009262 <__lo0bits+0x4e>
 800925e:	3002      	adds	r0, #2
 8009260:	089b      	lsrs	r3, r3, #2
 8009262:	07d9      	lsls	r1, r3, #31
 8009264:	d4e9      	bmi.n	800923a <__lo0bits+0x26>
 8009266:	3001      	adds	r0, #1
 8009268:	085b      	lsrs	r3, r3, #1
 800926a:	d1e6      	bne.n	800923a <__lo0bits+0x26>
 800926c:	2020      	movs	r0, #32
 800926e:	e7e2      	b.n	8009236 <__lo0bits+0x22>

08009270 <__i2b>:
 8009270:	b510      	push	{r4, lr}
 8009272:	000c      	movs	r4, r1
 8009274:	2101      	movs	r1, #1
 8009276:	f7ff febb 	bl	8008ff0 <_Balloc>
 800927a:	2800      	cmp	r0, #0
 800927c:	d106      	bne.n	800928c <__i2b+0x1c>
 800927e:	21a0      	movs	r1, #160	; 0xa0
 8009280:	0002      	movs	r2, r0
 8009282:	4b04      	ldr	r3, [pc, #16]	; (8009294 <__i2b+0x24>)
 8009284:	4804      	ldr	r0, [pc, #16]	; (8009298 <__i2b+0x28>)
 8009286:	0049      	lsls	r1, r1, #1
 8009288:	f000 fdca 	bl	8009e20 <__assert_func>
 800928c:	2301      	movs	r3, #1
 800928e:	6144      	str	r4, [r0, #20]
 8009290:	6103      	str	r3, [r0, #16]
 8009292:	bd10      	pop	{r4, pc}
 8009294:	0800ada4 	.word	0x0800ada4
 8009298:	0800ae34 	.word	0x0800ae34

0800929c <__multiply>:
 800929c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800929e:	690b      	ldr	r3, [r1, #16]
 80092a0:	0014      	movs	r4, r2
 80092a2:	6912      	ldr	r2, [r2, #16]
 80092a4:	000d      	movs	r5, r1
 80092a6:	b089      	sub	sp, #36	; 0x24
 80092a8:	4293      	cmp	r3, r2
 80092aa:	da01      	bge.n	80092b0 <__multiply+0x14>
 80092ac:	0025      	movs	r5, r4
 80092ae:	000c      	movs	r4, r1
 80092b0:	692f      	ldr	r7, [r5, #16]
 80092b2:	6926      	ldr	r6, [r4, #16]
 80092b4:	6869      	ldr	r1, [r5, #4]
 80092b6:	19bb      	adds	r3, r7, r6
 80092b8:	9302      	str	r3, [sp, #8]
 80092ba:	68ab      	ldr	r3, [r5, #8]
 80092bc:	19ba      	adds	r2, r7, r6
 80092be:	4293      	cmp	r3, r2
 80092c0:	da00      	bge.n	80092c4 <__multiply+0x28>
 80092c2:	3101      	adds	r1, #1
 80092c4:	f7ff fe94 	bl	8008ff0 <_Balloc>
 80092c8:	9001      	str	r0, [sp, #4]
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d106      	bne.n	80092dc <__multiply+0x40>
 80092ce:	215e      	movs	r1, #94	; 0x5e
 80092d0:	0002      	movs	r2, r0
 80092d2:	4b48      	ldr	r3, [pc, #288]	; (80093f4 <__multiply+0x158>)
 80092d4:	4848      	ldr	r0, [pc, #288]	; (80093f8 <__multiply+0x15c>)
 80092d6:	31ff      	adds	r1, #255	; 0xff
 80092d8:	f000 fda2 	bl	8009e20 <__assert_func>
 80092dc:	9b01      	ldr	r3, [sp, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	3314      	adds	r3, #20
 80092e2:	469c      	mov	ip, r3
 80092e4:	19bb      	adds	r3, r7, r6
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4463      	add	r3, ip
 80092ea:	9303      	str	r3, [sp, #12]
 80092ec:	4663      	mov	r3, ip
 80092ee:	9903      	ldr	r1, [sp, #12]
 80092f0:	428b      	cmp	r3, r1
 80092f2:	d32c      	bcc.n	800934e <__multiply+0xb2>
 80092f4:	002b      	movs	r3, r5
 80092f6:	0022      	movs	r2, r4
 80092f8:	3314      	adds	r3, #20
 80092fa:	00bf      	lsls	r7, r7, #2
 80092fc:	3214      	adds	r2, #20
 80092fe:	9306      	str	r3, [sp, #24]
 8009300:	00b6      	lsls	r6, r6, #2
 8009302:	19db      	adds	r3, r3, r7
 8009304:	9304      	str	r3, [sp, #16]
 8009306:	1993      	adds	r3, r2, r6
 8009308:	9307      	str	r3, [sp, #28]
 800930a:	2304      	movs	r3, #4
 800930c:	9305      	str	r3, [sp, #20]
 800930e:	002b      	movs	r3, r5
 8009310:	9904      	ldr	r1, [sp, #16]
 8009312:	3315      	adds	r3, #21
 8009314:	9200      	str	r2, [sp, #0]
 8009316:	4299      	cmp	r1, r3
 8009318:	d305      	bcc.n	8009326 <__multiply+0x8a>
 800931a:	1b4b      	subs	r3, r1, r5
 800931c:	3b15      	subs	r3, #21
 800931e:	089b      	lsrs	r3, r3, #2
 8009320:	3301      	adds	r3, #1
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	9305      	str	r3, [sp, #20]
 8009326:	9b07      	ldr	r3, [sp, #28]
 8009328:	9a00      	ldr	r2, [sp, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d311      	bcc.n	8009352 <__multiply+0xb6>
 800932e:	9b02      	ldr	r3, [sp, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	dd06      	ble.n	8009342 <__multiply+0xa6>
 8009334:	9b03      	ldr	r3, [sp, #12]
 8009336:	3b04      	subs	r3, #4
 8009338:	9303      	str	r3, [sp, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d054      	beq.n	80093ec <__multiply+0x150>
 8009342:	9b01      	ldr	r3, [sp, #4]
 8009344:	9a02      	ldr	r2, [sp, #8]
 8009346:	0018      	movs	r0, r3
 8009348:	611a      	str	r2, [r3, #16]
 800934a:	b009      	add	sp, #36	; 0x24
 800934c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800934e:	c304      	stmia	r3!, {r2}
 8009350:	e7cd      	b.n	80092ee <__multiply+0x52>
 8009352:	9b00      	ldr	r3, [sp, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	b298      	uxth	r0, r3
 8009358:	2800      	cmp	r0, #0
 800935a:	d01c      	beq.n	8009396 <__multiply+0xfa>
 800935c:	4667      	mov	r7, ip
 800935e:	2400      	movs	r4, #0
 8009360:	9e06      	ldr	r6, [sp, #24]
 8009362:	ce02      	ldmia	r6!, {r1}
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	b28b      	uxth	r3, r1
 8009368:	4343      	muls	r3, r0
 800936a:	0c09      	lsrs	r1, r1, #16
 800936c:	4341      	muls	r1, r0
 800936e:	b292      	uxth	r2, r2
 8009370:	189b      	adds	r3, r3, r2
 8009372:	191b      	adds	r3, r3, r4
 8009374:	000c      	movs	r4, r1
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	0c11      	lsrs	r1, r2, #16
 800937a:	1861      	adds	r1, r4, r1
 800937c:	0c1c      	lsrs	r4, r3, #16
 800937e:	1909      	adds	r1, r1, r4
 8009380:	0c0c      	lsrs	r4, r1, #16
 8009382:	b29b      	uxth	r3, r3
 8009384:	0409      	lsls	r1, r1, #16
 8009386:	430b      	orrs	r3, r1
 8009388:	c708      	stmia	r7!, {r3}
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	42b3      	cmp	r3, r6
 800938e:	d8e8      	bhi.n	8009362 <__multiply+0xc6>
 8009390:	4663      	mov	r3, ip
 8009392:	9a05      	ldr	r2, [sp, #20]
 8009394:	509c      	str	r4, [r3, r2]
 8009396:	9b00      	ldr	r3, [sp, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	0c1e      	lsrs	r6, r3, #16
 800939c:	d020      	beq.n	80093e0 <__multiply+0x144>
 800939e:	4663      	mov	r3, ip
 80093a0:	002c      	movs	r4, r5
 80093a2:	4660      	mov	r0, ip
 80093a4:	2700      	movs	r7, #0
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3414      	adds	r4, #20
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	b291      	uxth	r1, r2
 80093b0:	4371      	muls	r1, r6
 80093b2:	6802      	ldr	r2, [r0, #0]
 80093b4:	0c12      	lsrs	r2, r2, #16
 80093b6:	1889      	adds	r1, r1, r2
 80093b8:	19cf      	adds	r7, r1, r7
 80093ba:	0439      	lsls	r1, r7, #16
 80093bc:	430b      	orrs	r3, r1
 80093be:	6003      	str	r3, [r0, #0]
 80093c0:	cc02      	ldmia	r4!, {r1}
 80093c2:	6843      	ldr	r3, [r0, #4]
 80093c4:	0c09      	lsrs	r1, r1, #16
 80093c6:	4371      	muls	r1, r6
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	0c3f      	lsrs	r7, r7, #16
 80093cc:	18cb      	adds	r3, r1, r3
 80093ce:	9a04      	ldr	r2, [sp, #16]
 80093d0:	19db      	adds	r3, r3, r7
 80093d2:	0c1f      	lsrs	r7, r3, #16
 80093d4:	3004      	adds	r0, #4
 80093d6:	42a2      	cmp	r2, r4
 80093d8:	d8e7      	bhi.n	80093aa <__multiply+0x10e>
 80093da:	4662      	mov	r2, ip
 80093dc:	9905      	ldr	r1, [sp, #20]
 80093de:	5053      	str	r3, [r2, r1]
 80093e0:	9b00      	ldr	r3, [sp, #0]
 80093e2:	3304      	adds	r3, #4
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	2304      	movs	r3, #4
 80093e8:	449c      	add	ip, r3
 80093ea:	e79c      	b.n	8009326 <__multiply+0x8a>
 80093ec:	9b02      	ldr	r3, [sp, #8]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	9302      	str	r3, [sp, #8]
 80093f2:	e79c      	b.n	800932e <__multiply+0x92>
 80093f4:	0800ada4 	.word	0x0800ada4
 80093f8:	0800ae34 	.word	0x0800ae34

080093fc <__pow5mult>:
 80093fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093fe:	2303      	movs	r3, #3
 8009400:	0015      	movs	r5, r2
 8009402:	0007      	movs	r7, r0
 8009404:	000e      	movs	r6, r1
 8009406:	401a      	ands	r2, r3
 8009408:	421d      	tst	r5, r3
 800940a:	d008      	beq.n	800941e <__pow5mult+0x22>
 800940c:	4925      	ldr	r1, [pc, #148]	; (80094a4 <__pow5mult+0xa8>)
 800940e:	3a01      	subs	r2, #1
 8009410:	0092      	lsls	r2, r2, #2
 8009412:	5852      	ldr	r2, [r2, r1]
 8009414:	2300      	movs	r3, #0
 8009416:	0031      	movs	r1, r6
 8009418:	f7ff fe52 	bl	80090c0 <__multadd>
 800941c:	0006      	movs	r6, r0
 800941e:	10ad      	asrs	r5, r5, #2
 8009420:	d03d      	beq.n	800949e <__pow5mult+0xa2>
 8009422:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009424:	2c00      	cmp	r4, #0
 8009426:	d10f      	bne.n	8009448 <__pow5mult+0x4c>
 8009428:	2010      	movs	r0, #16
 800942a:	f7ff fdb1 	bl	8008f90 <malloc>
 800942e:	1e02      	subs	r2, r0, #0
 8009430:	6278      	str	r0, [r7, #36]	; 0x24
 8009432:	d105      	bne.n	8009440 <__pow5mult+0x44>
 8009434:	21d7      	movs	r1, #215	; 0xd7
 8009436:	4b1c      	ldr	r3, [pc, #112]	; (80094a8 <__pow5mult+0xac>)
 8009438:	481c      	ldr	r0, [pc, #112]	; (80094ac <__pow5mult+0xb0>)
 800943a:	0049      	lsls	r1, r1, #1
 800943c:	f000 fcf0 	bl	8009e20 <__assert_func>
 8009440:	6044      	str	r4, [r0, #4]
 8009442:	6084      	str	r4, [r0, #8]
 8009444:	6004      	str	r4, [r0, #0]
 8009446:	60c4      	str	r4, [r0, #12]
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	689c      	ldr	r4, [r3, #8]
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	2c00      	cmp	r4, #0
 8009450:	d108      	bne.n	8009464 <__pow5mult+0x68>
 8009452:	0038      	movs	r0, r7
 8009454:	4916      	ldr	r1, [pc, #88]	; (80094b0 <__pow5mult+0xb4>)
 8009456:	f7ff ff0b 	bl	8009270 <__i2b>
 800945a:	9b01      	ldr	r3, [sp, #4]
 800945c:	0004      	movs	r4, r0
 800945e:	6098      	str	r0, [r3, #8]
 8009460:	2300      	movs	r3, #0
 8009462:	6003      	str	r3, [r0, #0]
 8009464:	2301      	movs	r3, #1
 8009466:	421d      	tst	r5, r3
 8009468:	d00a      	beq.n	8009480 <__pow5mult+0x84>
 800946a:	0031      	movs	r1, r6
 800946c:	0022      	movs	r2, r4
 800946e:	0038      	movs	r0, r7
 8009470:	f7ff ff14 	bl	800929c <__multiply>
 8009474:	0031      	movs	r1, r6
 8009476:	9001      	str	r0, [sp, #4]
 8009478:	0038      	movs	r0, r7
 800947a:	f7ff fdfd 	bl	8009078 <_Bfree>
 800947e:	9e01      	ldr	r6, [sp, #4]
 8009480:	106d      	asrs	r5, r5, #1
 8009482:	d00c      	beq.n	800949e <__pow5mult+0xa2>
 8009484:	6820      	ldr	r0, [r4, #0]
 8009486:	2800      	cmp	r0, #0
 8009488:	d107      	bne.n	800949a <__pow5mult+0x9e>
 800948a:	0022      	movs	r2, r4
 800948c:	0021      	movs	r1, r4
 800948e:	0038      	movs	r0, r7
 8009490:	f7ff ff04 	bl	800929c <__multiply>
 8009494:	2300      	movs	r3, #0
 8009496:	6020      	str	r0, [r4, #0]
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	0004      	movs	r4, r0
 800949c:	e7e2      	b.n	8009464 <__pow5mult+0x68>
 800949e:	0030      	movs	r0, r6
 80094a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	0800af88 	.word	0x0800af88
 80094a8:	0800ad2e 	.word	0x0800ad2e
 80094ac:	0800ae34 	.word	0x0800ae34
 80094b0:	00000271 	.word	0x00000271

080094b4 <__lshift>:
 80094b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094b6:	000c      	movs	r4, r1
 80094b8:	0017      	movs	r7, r2
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	1155      	asrs	r5, r2, #5
 80094be:	b087      	sub	sp, #28
 80094c0:	18eb      	adds	r3, r5, r3
 80094c2:	9302      	str	r3, [sp, #8]
 80094c4:	3301      	adds	r3, #1
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	6849      	ldr	r1, [r1, #4]
 80094ca:	68a3      	ldr	r3, [r4, #8]
 80094cc:	9004      	str	r0, [sp, #16]
 80094ce:	9a01      	ldr	r2, [sp, #4]
 80094d0:	4293      	cmp	r3, r2
 80094d2:	db11      	blt.n	80094f8 <__lshift+0x44>
 80094d4:	9804      	ldr	r0, [sp, #16]
 80094d6:	f7ff fd8b 	bl	8008ff0 <_Balloc>
 80094da:	0002      	movs	r2, r0
 80094dc:	2300      	movs	r3, #0
 80094de:	3214      	adds	r2, #20
 80094e0:	0006      	movs	r6, r0
 80094e2:	0011      	movs	r1, r2
 80094e4:	9203      	str	r2, [sp, #12]
 80094e6:	4298      	cmp	r0, r3
 80094e8:	d10d      	bne.n	8009506 <__lshift+0x52>
 80094ea:	21da      	movs	r1, #218	; 0xda
 80094ec:	0002      	movs	r2, r0
 80094ee:	4b27      	ldr	r3, [pc, #156]	; (800958c <__lshift+0xd8>)
 80094f0:	4827      	ldr	r0, [pc, #156]	; (8009590 <__lshift+0xdc>)
 80094f2:	31ff      	adds	r1, #255	; 0xff
 80094f4:	f000 fc94 	bl	8009e20 <__assert_func>
 80094f8:	3101      	adds	r1, #1
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	e7e7      	b.n	80094ce <__lshift+0x1a>
 80094fe:	2200      	movs	r2, #0
 8009500:	0098      	lsls	r0, r3, #2
 8009502:	500a      	str	r2, [r1, r0]
 8009504:	3301      	adds	r3, #1
 8009506:	42ab      	cmp	r3, r5
 8009508:	dbf9      	blt.n	80094fe <__lshift+0x4a>
 800950a:	43eb      	mvns	r3, r5
 800950c:	17db      	asrs	r3, r3, #31
 800950e:	401d      	ands	r5, r3
 8009510:	9b03      	ldr	r3, [sp, #12]
 8009512:	00ad      	lsls	r5, r5, #2
 8009514:	211f      	movs	r1, #31
 8009516:	0038      	movs	r0, r7
 8009518:	195d      	adds	r5, r3, r5
 800951a:	0023      	movs	r3, r4
 800951c:	6922      	ldr	r2, [r4, #16]
 800951e:	3314      	adds	r3, #20
 8009520:	0092      	lsls	r2, r2, #2
 8009522:	4008      	ands	r0, r1
 8009524:	4684      	mov	ip, r0
 8009526:	189a      	adds	r2, r3, r2
 8009528:	420f      	tst	r7, r1
 800952a:	d02a      	beq.n	8009582 <__lshift+0xce>
 800952c:	3101      	adds	r1, #1
 800952e:	1a09      	subs	r1, r1, r0
 8009530:	9105      	str	r1, [sp, #20]
 8009532:	2100      	movs	r1, #0
 8009534:	9503      	str	r5, [sp, #12]
 8009536:	4667      	mov	r7, ip
 8009538:	6818      	ldr	r0, [r3, #0]
 800953a:	40b8      	lsls	r0, r7
 800953c:	4301      	orrs	r1, r0
 800953e:	9803      	ldr	r0, [sp, #12]
 8009540:	c002      	stmia	r0!, {r1}
 8009542:	cb02      	ldmia	r3!, {r1}
 8009544:	9003      	str	r0, [sp, #12]
 8009546:	9805      	ldr	r0, [sp, #20]
 8009548:	40c1      	lsrs	r1, r0
 800954a:	429a      	cmp	r2, r3
 800954c:	d8f3      	bhi.n	8009536 <__lshift+0x82>
 800954e:	0020      	movs	r0, r4
 8009550:	3015      	adds	r0, #21
 8009552:	2304      	movs	r3, #4
 8009554:	4282      	cmp	r2, r0
 8009556:	d304      	bcc.n	8009562 <__lshift+0xae>
 8009558:	1b13      	subs	r3, r2, r4
 800955a:	3b15      	subs	r3, #21
 800955c:	089b      	lsrs	r3, r3, #2
 800955e:	3301      	adds	r3, #1
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	50e9      	str	r1, [r5, r3]
 8009564:	2900      	cmp	r1, #0
 8009566:	d002      	beq.n	800956e <__lshift+0xba>
 8009568:	9b02      	ldr	r3, [sp, #8]
 800956a:	3302      	adds	r3, #2
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	9804      	ldr	r0, [sp, #16]
 8009572:	3b01      	subs	r3, #1
 8009574:	0021      	movs	r1, r4
 8009576:	6133      	str	r3, [r6, #16]
 8009578:	f7ff fd7e 	bl	8009078 <_Bfree>
 800957c:	0030      	movs	r0, r6
 800957e:	b007      	add	sp, #28
 8009580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009582:	cb02      	ldmia	r3!, {r1}
 8009584:	c502      	stmia	r5!, {r1}
 8009586:	429a      	cmp	r2, r3
 8009588:	d8fb      	bhi.n	8009582 <__lshift+0xce>
 800958a:	e7f0      	b.n	800956e <__lshift+0xba>
 800958c:	0800ada4 	.word	0x0800ada4
 8009590:	0800ae34 	.word	0x0800ae34

08009594 <__mcmp>:
 8009594:	6902      	ldr	r2, [r0, #16]
 8009596:	690b      	ldr	r3, [r1, #16]
 8009598:	b530      	push	{r4, r5, lr}
 800959a:	0004      	movs	r4, r0
 800959c:	1ad0      	subs	r0, r2, r3
 800959e:	429a      	cmp	r2, r3
 80095a0:	d10d      	bne.n	80095be <__mcmp+0x2a>
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	3414      	adds	r4, #20
 80095a6:	3114      	adds	r1, #20
 80095a8:	18e2      	adds	r2, r4, r3
 80095aa:	18c9      	adds	r1, r1, r3
 80095ac:	3a04      	subs	r2, #4
 80095ae:	3904      	subs	r1, #4
 80095b0:	6815      	ldr	r5, [r2, #0]
 80095b2:	680b      	ldr	r3, [r1, #0]
 80095b4:	429d      	cmp	r5, r3
 80095b6:	d003      	beq.n	80095c0 <__mcmp+0x2c>
 80095b8:	2001      	movs	r0, #1
 80095ba:	429d      	cmp	r5, r3
 80095bc:	d303      	bcc.n	80095c6 <__mcmp+0x32>
 80095be:	bd30      	pop	{r4, r5, pc}
 80095c0:	4294      	cmp	r4, r2
 80095c2:	d3f3      	bcc.n	80095ac <__mcmp+0x18>
 80095c4:	e7fb      	b.n	80095be <__mcmp+0x2a>
 80095c6:	4240      	negs	r0, r0
 80095c8:	e7f9      	b.n	80095be <__mcmp+0x2a>
	...

080095cc <__mdiff>:
 80095cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ce:	000e      	movs	r6, r1
 80095d0:	0007      	movs	r7, r0
 80095d2:	0011      	movs	r1, r2
 80095d4:	0030      	movs	r0, r6
 80095d6:	b087      	sub	sp, #28
 80095d8:	0014      	movs	r4, r2
 80095da:	f7ff ffdb 	bl	8009594 <__mcmp>
 80095de:	1e05      	subs	r5, r0, #0
 80095e0:	d110      	bne.n	8009604 <__mdiff+0x38>
 80095e2:	0001      	movs	r1, r0
 80095e4:	0038      	movs	r0, r7
 80095e6:	f7ff fd03 	bl	8008ff0 <_Balloc>
 80095ea:	1e02      	subs	r2, r0, #0
 80095ec:	d104      	bne.n	80095f8 <__mdiff+0x2c>
 80095ee:	4b40      	ldr	r3, [pc, #256]	; (80096f0 <__mdiff+0x124>)
 80095f0:	4940      	ldr	r1, [pc, #256]	; (80096f4 <__mdiff+0x128>)
 80095f2:	4841      	ldr	r0, [pc, #260]	; (80096f8 <__mdiff+0x12c>)
 80095f4:	f000 fc14 	bl	8009e20 <__assert_func>
 80095f8:	2301      	movs	r3, #1
 80095fa:	6145      	str	r5, [r0, #20]
 80095fc:	6103      	str	r3, [r0, #16]
 80095fe:	0010      	movs	r0, r2
 8009600:	b007      	add	sp, #28
 8009602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009604:	2301      	movs	r3, #1
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	2800      	cmp	r0, #0
 800960a:	db04      	blt.n	8009616 <__mdiff+0x4a>
 800960c:	0023      	movs	r3, r4
 800960e:	0034      	movs	r4, r6
 8009610:	001e      	movs	r6, r3
 8009612:	2300      	movs	r3, #0
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	0038      	movs	r0, r7
 8009618:	6861      	ldr	r1, [r4, #4]
 800961a:	f7ff fce9 	bl	8008ff0 <_Balloc>
 800961e:	1e02      	subs	r2, r0, #0
 8009620:	d103      	bne.n	800962a <__mdiff+0x5e>
 8009622:	2190      	movs	r1, #144	; 0x90
 8009624:	4b32      	ldr	r3, [pc, #200]	; (80096f0 <__mdiff+0x124>)
 8009626:	0089      	lsls	r1, r1, #2
 8009628:	e7e3      	b.n	80095f2 <__mdiff+0x26>
 800962a:	9b01      	ldr	r3, [sp, #4]
 800962c:	2700      	movs	r7, #0
 800962e:	60c3      	str	r3, [r0, #12]
 8009630:	6920      	ldr	r0, [r4, #16]
 8009632:	3414      	adds	r4, #20
 8009634:	9401      	str	r4, [sp, #4]
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	0084      	lsls	r4, r0, #2
 800963a:	191b      	adds	r3, r3, r4
 800963c:	0034      	movs	r4, r6
 800963e:	9302      	str	r3, [sp, #8]
 8009640:	6933      	ldr	r3, [r6, #16]
 8009642:	3414      	adds	r4, #20
 8009644:	0099      	lsls	r1, r3, #2
 8009646:	1863      	adds	r3, r4, r1
 8009648:	9303      	str	r3, [sp, #12]
 800964a:	0013      	movs	r3, r2
 800964c:	3314      	adds	r3, #20
 800964e:	469c      	mov	ip, r3
 8009650:	9305      	str	r3, [sp, #20]
 8009652:	9b01      	ldr	r3, [sp, #4]
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	9b04      	ldr	r3, [sp, #16]
 8009658:	cc02      	ldmia	r4!, {r1}
 800965a:	cb20      	ldmia	r3!, {r5}
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	b2ab      	uxth	r3, r5
 8009660:	19df      	adds	r7, r3, r7
 8009662:	b28b      	uxth	r3, r1
 8009664:	1afb      	subs	r3, r7, r3
 8009666:	0c2d      	lsrs	r5, r5, #16
 8009668:	0c09      	lsrs	r1, r1, #16
 800966a:	1a69      	subs	r1, r5, r1
 800966c:	141d      	asrs	r5, r3, #16
 800966e:	1949      	adds	r1, r1, r5
 8009670:	140f      	asrs	r7, r1, #16
 8009672:	b29b      	uxth	r3, r3
 8009674:	0409      	lsls	r1, r1, #16
 8009676:	430b      	orrs	r3, r1
 8009678:	4661      	mov	r1, ip
 800967a:	c108      	stmia	r1!, {r3}
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	468c      	mov	ip, r1
 8009680:	42a3      	cmp	r3, r4
 8009682:	d8e8      	bhi.n	8009656 <__mdiff+0x8a>
 8009684:	0031      	movs	r1, r6
 8009686:	9c03      	ldr	r4, [sp, #12]
 8009688:	3115      	adds	r1, #21
 800968a:	2304      	movs	r3, #4
 800968c:	428c      	cmp	r4, r1
 800968e:	d304      	bcc.n	800969a <__mdiff+0xce>
 8009690:	1ba3      	subs	r3, r4, r6
 8009692:	3b15      	subs	r3, #21
 8009694:	089b      	lsrs	r3, r3, #2
 8009696:	3301      	adds	r3, #1
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	9901      	ldr	r1, [sp, #4]
 800969c:	18cc      	adds	r4, r1, r3
 800969e:	9905      	ldr	r1, [sp, #20]
 80096a0:	0026      	movs	r6, r4
 80096a2:	18cb      	adds	r3, r1, r3
 80096a4:	469c      	mov	ip, r3
 80096a6:	9902      	ldr	r1, [sp, #8]
 80096a8:	428e      	cmp	r6, r1
 80096aa:	d310      	bcc.n	80096ce <__mdiff+0x102>
 80096ac:	9e02      	ldr	r6, [sp, #8]
 80096ae:	1ee5      	subs	r5, r4, #3
 80096b0:	2100      	movs	r1, #0
 80096b2:	42ae      	cmp	r6, r5
 80096b4:	d304      	bcc.n	80096c0 <__mdiff+0xf4>
 80096b6:	0031      	movs	r1, r6
 80096b8:	3103      	adds	r1, #3
 80096ba:	1b09      	subs	r1, r1, r4
 80096bc:	0889      	lsrs	r1, r1, #2
 80096be:	0089      	lsls	r1, r1, #2
 80096c0:	185b      	adds	r3, r3, r1
 80096c2:	3b04      	subs	r3, #4
 80096c4:	6819      	ldr	r1, [r3, #0]
 80096c6:	2900      	cmp	r1, #0
 80096c8:	d00f      	beq.n	80096ea <__mdiff+0x11e>
 80096ca:	6110      	str	r0, [r2, #16]
 80096cc:	e797      	b.n	80095fe <__mdiff+0x32>
 80096ce:	ce02      	ldmia	r6!, {r1}
 80096d0:	b28d      	uxth	r5, r1
 80096d2:	19ed      	adds	r5, r5, r7
 80096d4:	0c0f      	lsrs	r7, r1, #16
 80096d6:	1429      	asrs	r1, r5, #16
 80096d8:	1879      	adds	r1, r7, r1
 80096da:	140f      	asrs	r7, r1, #16
 80096dc:	b2ad      	uxth	r5, r5
 80096de:	0409      	lsls	r1, r1, #16
 80096e0:	430d      	orrs	r5, r1
 80096e2:	4661      	mov	r1, ip
 80096e4:	c120      	stmia	r1!, {r5}
 80096e6:	468c      	mov	ip, r1
 80096e8:	e7dd      	b.n	80096a6 <__mdiff+0xda>
 80096ea:	3801      	subs	r0, #1
 80096ec:	e7e9      	b.n	80096c2 <__mdiff+0xf6>
 80096ee:	46c0      	nop			; (mov r8, r8)
 80096f0:	0800ada4 	.word	0x0800ada4
 80096f4:	00000232 	.word	0x00000232
 80096f8:	0800ae34 	.word	0x0800ae34

080096fc <__ulp>:
 80096fc:	4b0f      	ldr	r3, [pc, #60]	; (800973c <__ulp+0x40>)
 80096fe:	4019      	ands	r1, r3
 8009700:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <__ulp+0x44>)
 8009702:	18c9      	adds	r1, r1, r3
 8009704:	2900      	cmp	r1, #0
 8009706:	dd04      	ble.n	8009712 <__ulp+0x16>
 8009708:	2200      	movs	r2, #0
 800970a:	000b      	movs	r3, r1
 800970c:	0010      	movs	r0, r2
 800970e:	0019      	movs	r1, r3
 8009710:	4770      	bx	lr
 8009712:	4249      	negs	r1, r1
 8009714:	2200      	movs	r2, #0
 8009716:	2300      	movs	r3, #0
 8009718:	1509      	asrs	r1, r1, #20
 800971a:	2913      	cmp	r1, #19
 800971c:	dc04      	bgt.n	8009728 <__ulp+0x2c>
 800971e:	2080      	movs	r0, #128	; 0x80
 8009720:	0300      	lsls	r0, r0, #12
 8009722:	4108      	asrs	r0, r1
 8009724:	0003      	movs	r3, r0
 8009726:	e7f1      	b.n	800970c <__ulp+0x10>
 8009728:	3914      	subs	r1, #20
 800972a:	2001      	movs	r0, #1
 800972c:	291e      	cmp	r1, #30
 800972e:	dc02      	bgt.n	8009736 <__ulp+0x3a>
 8009730:	2080      	movs	r0, #128	; 0x80
 8009732:	0600      	lsls	r0, r0, #24
 8009734:	40c8      	lsrs	r0, r1
 8009736:	0002      	movs	r2, r0
 8009738:	e7e8      	b.n	800970c <__ulp+0x10>
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	7ff00000 	.word	0x7ff00000
 8009740:	fcc00000 	.word	0xfcc00000

08009744 <__b2d>:
 8009744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009746:	0006      	movs	r6, r0
 8009748:	6903      	ldr	r3, [r0, #16]
 800974a:	3614      	adds	r6, #20
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	18f3      	adds	r3, r6, r3
 8009750:	1f1d      	subs	r5, r3, #4
 8009752:	682c      	ldr	r4, [r5, #0]
 8009754:	000f      	movs	r7, r1
 8009756:	0020      	movs	r0, r4
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	f7ff fd41 	bl	80091e0 <__hi0bits>
 800975e:	2320      	movs	r3, #32
 8009760:	1a1b      	subs	r3, r3, r0
 8009762:	491f      	ldr	r1, [pc, #124]	; (80097e0 <__b2d+0x9c>)
 8009764:	603b      	str	r3, [r7, #0]
 8009766:	280a      	cmp	r0, #10
 8009768:	dc16      	bgt.n	8009798 <__b2d+0x54>
 800976a:	230b      	movs	r3, #11
 800976c:	0027      	movs	r7, r4
 800976e:	1a1b      	subs	r3, r3, r0
 8009770:	40df      	lsrs	r7, r3
 8009772:	4339      	orrs	r1, r7
 8009774:	469c      	mov	ip, r3
 8009776:	000b      	movs	r3, r1
 8009778:	2100      	movs	r1, #0
 800977a:	42ae      	cmp	r6, r5
 800977c:	d202      	bcs.n	8009784 <__b2d+0x40>
 800977e:	9901      	ldr	r1, [sp, #4]
 8009780:	3908      	subs	r1, #8
 8009782:	6809      	ldr	r1, [r1, #0]
 8009784:	3015      	adds	r0, #21
 8009786:	4084      	lsls	r4, r0
 8009788:	4660      	mov	r0, ip
 800978a:	40c1      	lsrs	r1, r0
 800978c:	430c      	orrs	r4, r1
 800978e:	0022      	movs	r2, r4
 8009790:	0010      	movs	r0, r2
 8009792:	0019      	movs	r1, r3
 8009794:	b003      	add	sp, #12
 8009796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009798:	2700      	movs	r7, #0
 800979a:	42ae      	cmp	r6, r5
 800979c:	d202      	bcs.n	80097a4 <__b2d+0x60>
 800979e:	9d01      	ldr	r5, [sp, #4]
 80097a0:	3d08      	subs	r5, #8
 80097a2:	682f      	ldr	r7, [r5, #0]
 80097a4:	230b      	movs	r3, #11
 80097a6:	425b      	negs	r3, r3
 80097a8:	469c      	mov	ip, r3
 80097aa:	4484      	add	ip, r0
 80097ac:	280b      	cmp	r0, #11
 80097ae:	d013      	beq.n	80097d8 <__b2d+0x94>
 80097b0:	4663      	mov	r3, ip
 80097b2:	2020      	movs	r0, #32
 80097b4:	409c      	lsls	r4, r3
 80097b6:	1ac0      	subs	r0, r0, r3
 80097b8:	003b      	movs	r3, r7
 80097ba:	40c3      	lsrs	r3, r0
 80097bc:	431c      	orrs	r4, r3
 80097be:	4321      	orrs	r1, r4
 80097c0:	000b      	movs	r3, r1
 80097c2:	2100      	movs	r1, #0
 80097c4:	42b5      	cmp	r5, r6
 80097c6:	d901      	bls.n	80097cc <__b2d+0x88>
 80097c8:	3d04      	subs	r5, #4
 80097ca:	6829      	ldr	r1, [r5, #0]
 80097cc:	4664      	mov	r4, ip
 80097ce:	40c1      	lsrs	r1, r0
 80097d0:	40a7      	lsls	r7, r4
 80097d2:	430f      	orrs	r7, r1
 80097d4:	003a      	movs	r2, r7
 80097d6:	e7db      	b.n	8009790 <__b2d+0x4c>
 80097d8:	4321      	orrs	r1, r4
 80097da:	000b      	movs	r3, r1
 80097dc:	e7fa      	b.n	80097d4 <__b2d+0x90>
 80097de:	46c0      	nop			; (mov r8, r8)
 80097e0:	3ff00000 	.word	0x3ff00000

080097e4 <__d2b>:
 80097e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097e6:	2101      	movs	r1, #1
 80097e8:	0014      	movs	r4, r2
 80097ea:	001e      	movs	r6, r3
 80097ec:	9f08      	ldr	r7, [sp, #32]
 80097ee:	f7ff fbff 	bl	8008ff0 <_Balloc>
 80097f2:	1e05      	subs	r5, r0, #0
 80097f4:	d105      	bne.n	8009802 <__d2b+0x1e>
 80097f6:	0002      	movs	r2, r0
 80097f8:	4b26      	ldr	r3, [pc, #152]	; (8009894 <__d2b+0xb0>)
 80097fa:	4927      	ldr	r1, [pc, #156]	; (8009898 <__d2b+0xb4>)
 80097fc:	4827      	ldr	r0, [pc, #156]	; (800989c <__d2b+0xb8>)
 80097fe:	f000 fb0f 	bl	8009e20 <__assert_func>
 8009802:	0333      	lsls	r3, r6, #12
 8009804:	0076      	lsls	r6, r6, #1
 8009806:	0b1b      	lsrs	r3, r3, #12
 8009808:	0d76      	lsrs	r6, r6, #21
 800980a:	d124      	bne.n	8009856 <__d2b+0x72>
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	2c00      	cmp	r4, #0
 8009810:	d027      	beq.n	8009862 <__d2b+0x7e>
 8009812:	4668      	mov	r0, sp
 8009814:	9400      	str	r4, [sp, #0]
 8009816:	f7ff fcfd 	bl	8009214 <__lo0bits>
 800981a:	9c00      	ldr	r4, [sp, #0]
 800981c:	2800      	cmp	r0, #0
 800981e:	d01e      	beq.n	800985e <__d2b+0x7a>
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	2120      	movs	r1, #32
 8009824:	001a      	movs	r2, r3
 8009826:	1a09      	subs	r1, r1, r0
 8009828:	408a      	lsls	r2, r1
 800982a:	40c3      	lsrs	r3, r0
 800982c:	4322      	orrs	r2, r4
 800982e:	616a      	str	r2, [r5, #20]
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	9c01      	ldr	r4, [sp, #4]
 8009834:	61ac      	str	r4, [r5, #24]
 8009836:	1e63      	subs	r3, r4, #1
 8009838:	419c      	sbcs	r4, r3
 800983a:	3401      	adds	r4, #1
 800983c:	612c      	str	r4, [r5, #16]
 800983e:	2e00      	cmp	r6, #0
 8009840:	d018      	beq.n	8009874 <__d2b+0x90>
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <__d2b+0xbc>)
 8009844:	18f6      	adds	r6, r6, r3
 8009846:	2335      	movs	r3, #53	; 0x35
 8009848:	1836      	adds	r6, r6, r0
 800984a:	1a18      	subs	r0, r3, r0
 800984c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800984e:	603e      	str	r6, [r7, #0]
 8009850:	6018      	str	r0, [r3, #0]
 8009852:	0028      	movs	r0, r5
 8009854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009856:	2280      	movs	r2, #128	; 0x80
 8009858:	0352      	lsls	r2, r2, #13
 800985a:	4313      	orrs	r3, r2
 800985c:	e7d6      	b.n	800980c <__d2b+0x28>
 800985e:	616c      	str	r4, [r5, #20]
 8009860:	e7e7      	b.n	8009832 <__d2b+0x4e>
 8009862:	a801      	add	r0, sp, #4
 8009864:	f7ff fcd6 	bl	8009214 <__lo0bits>
 8009868:	2401      	movs	r4, #1
 800986a:	9b01      	ldr	r3, [sp, #4]
 800986c:	612c      	str	r4, [r5, #16]
 800986e:	616b      	str	r3, [r5, #20]
 8009870:	3020      	adds	r0, #32
 8009872:	e7e4      	b.n	800983e <__d2b+0x5a>
 8009874:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <__d2b+0xc0>)
 8009876:	18c0      	adds	r0, r0, r3
 8009878:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <__d2b+0xc4>)
 800987a:	6038      	str	r0, [r7, #0]
 800987c:	18e3      	adds	r3, r4, r3
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	18eb      	adds	r3, r5, r3
 8009882:	6958      	ldr	r0, [r3, #20]
 8009884:	f7ff fcac 	bl	80091e0 <__hi0bits>
 8009888:	0164      	lsls	r4, r4, #5
 800988a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988c:	1a24      	subs	r4, r4, r0
 800988e:	601c      	str	r4, [r3, #0]
 8009890:	e7df      	b.n	8009852 <__d2b+0x6e>
 8009892:	46c0      	nop			; (mov r8, r8)
 8009894:	0800ada4 	.word	0x0800ada4
 8009898:	0000030a 	.word	0x0000030a
 800989c:	0800ae34 	.word	0x0800ae34
 80098a0:	fffffbcd 	.word	0xfffffbcd
 80098a4:	fffffbce 	.word	0xfffffbce
 80098a8:	3fffffff 	.word	0x3fffffff

080098ac <__ratio>:
 80098ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ae:	b085      	sub	sp, #20
 80098b0:	000d      	movs	r5, r1
 80098b2:	a902      	add	r1, sp, #8
 80098b4:	0004      	movs	r4, r0
 80098b6:	f7ff ff45 	bl	8009744 <__b2d>
 80098ba:	9000      	str	r0, [sp, #0]
 80098bc:	9101      	str	r1, [sp, #4]
 80098be:	9e00      	ldr	r6, [sp, #0]
 80098c0:	9f01      	ldr	r7, [sp, #4]
 80098c2:	0028      	movs	r0, r5
 80098c4:	a903      	add	r1, sp, #12
 80098c6:	f7ff ff3d 	bl	8009744 <__b2d>
 80098ca:	6924      	ldr	r4, [r4, #16]
 80098cc:	692d      	ldr	r5, [r5, #16]
 80098ce:	0002      	movs	r2, r0
 80098d0:	1b65      	subs	r5, r4, r5
 80098d2:	016c      	lsls	r4, r5, #5
 80098d4:	46a4      	mov	ip, r4
 80098d6:	9d03      	ldr	r5, [sp, #12]
 80098d8:	9c02      	ldr	r4, [sp, #8]
 80098da:	000b      	movs	r3, r1
 80098dc:	1b64      	subs	r4, r4, r5
 80098de:	4464      	add	r4, ip
 80098e0:	0525      	lsls	r5, r4, #20
 80098e2:	2c00      	cmp	r4, #0
 80098e4:	dd07      	ble.n	80098f6 <__ratio+0x4a>
 80098e6:	9901      	ldr	r1, [sp, #4]
 80098e8:	186f      	adds	r7, r5, r1
 80098ea:	0030      	movs	r0, r6
 80098ec:	0039      	movs	r1, r7
 80098ee:	f7f7 fb07 	bl	8000f00 <__aeabi_ddiv>
 80098f2:	b005      	add	sp, #20
 80098f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f6:	1b4b      	subs	r3, r1, r5
 80098f8:	e7f7      	b.n	80098ea <__ratio+0x3e>

080098fa <__copybits>:
 80098fa:	b570      	push	{r4, r5, r6, lr}
 80098fc:	0015      	movs	r5, r2
 80098fe:	6913      	ldr	r3, [r2, #16]
 8009900:	3514      	adds	r5, #20
 8009902:	009c      	lsls	r4, r3, #2
 8009904:	0006      	movs	r6, r0
 8009906:	002b      	movs	r3, r5
 8009908:	3901      	subs	r1, #1
 800990a:	1149      	asrs	r1, r1, #5
 800990c:	3101      	adds	r1, #1
 800990e:	0089      	lsls	r1, r1, #2
 8009910:	1841      	adds	r1, r0, r1
 8009912:	192c      	adds	r4, r5, r4
 8009914:	429c      	cmp	r4, r3
 8009916:	d80d      	bhi.n	8009934 <__copybits+0x3a>
 8009918:	0015      	movs	r5, r2
 800991a:	3511      	adds	r5, #17
 800991c:	2300      	movs	r3, #0
 800991e:	42a5      	cmp	r5, r4
 8009920:	d803      	bhi.n	800992a <__copybits+0x30>
 8009922:	1aa3      	subs	r3, r4, r2
 8009924:	3b11      	subs	r3, #17
 8009926:	089b      	lsrs	r3, r3, #2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	18c0      	adds	r0, r0, r3
 800992c:	2300      	movs	r3, #0
 800992e:	4281      	cmp	r1, r0
 8009930:	d803      	bhi.n	800993a <__copybits+0x40>
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	cb20      	ldmia	r3!, {r5}
 8009936:	c620      	stmia	r6!, {r5}
 8009938:	e7ec      	b.n	8009914 <__copybits+0x1a>
 800993a:	c008      	stmia	r0!, {r3}
 800993c:	e7f7      	b.n	800992e <__copybits+0x34>

0800993e <__any_on>:
 800993e:	0002      	movs	r2, r0
 8009940:	6900      	ldr	r0, [r0, #16]
 8009942:	b510      	push	{r4, lr}
 8009944:	3214      	adds	r2, #20
 8009946:	114b      	asrs	r3, r1, #5
 8009948:	4298      	cmp	r0, r3
 800994a:	db13      	blt.n	8009974 <__any_on+0x36>
 800994c:	dd0c      	ble.n	8009968 <__any_on+0x2a>
 800994e:	241f      	movs	r4, #31
 8009950:	0008      	movs	r0, r1
 8009952:	4020      	ands	r0, r4
 8009954:	4221      	tst	r1, r4
 8009956:	d007      	beq.n	8009968 <__any_on+0x2a>
 8009958:	0099      	lsls	r1, r3, #2
 800995a:	588c      	ldr	r4, [r1, r2]
 800995c:	0021      	movs	r1, r4
 800995e:	40c1      	lsrs	r1, r0
 8009960:	4081      	lsls	r1, r0
 8009962:	2001      	movs	r0, #1
 8009964:	428c      	cmp	r4, r1
 8009966:	d104      	bne.n	8009972 <__any_on+0x34>
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	18d3      	adds	r3, r2, r3
 800996c:	4293      	cmp	r3, r2
 800996e:	d803      	bhi.n	8009978 <__any_on+0x3a>
 8009970:	2000      	movs	r0, #0
 8009972:	bd10      	pop	{r4, pc}
 8009974:	0003      	movs	r3, r0
 8009976:	e7f7      	b.n	8009968 <__any_on+0x2a>
 8009978:	3b04      	subs	r3, #4
 800997a:	6819      	ldr	r1, [r3, #0]
 800997c:	2900      	cmp	r1, #0
 800997e:	d0f5      	beq.n	800996c <__any_on+0x2e>
 8009980:	2001      	movs	r0, #1
 8009982:	e7f6      	b.n	8009972 <__any_on+0x34>

08009984 <_calloc_r>:
 8009984:	434a      	muls	r2, r1
 8009986:	b570      	push	{r4, r5, r6, lr}
 8009988:	0011      	movs	r1, r2
 800998a:	0015      	movs	r5, r2
 800998c:	f000 f852 	bl	8009a34 <_malloc_r>
 8009990:	1e04      	subs	r4, r0, #0
 8009992:	d003      	beq.n	800999c <_calloc_r+0x18>
 8009994:	002a      	movs	r2, r5
 8009996:	2100      	movs	r1, #0
 8009998:	f7fc fb56 	bl	8006048 <memset>
 800999c:	0020      	movs	r0, r4
 800999e:	bd70      	pop	{r4, r5, r6, pc}

080099a0 <_free_r>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	0005      	movs	r5, r0
 80099a4:	2900      	cmp	r1, #0
 80099a6:	d010      	beq.n	80099ca <_free_r+0x2a>
 80099a8:	1f0c      	subs	r4, r1, #4
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	da00      	bge.n	80099b2 <_free_r+0x12>
 80099b0:	18e4      	adds	r4, r4, r3
 80099b2:	0028      	movs	r0, r5
 80099b4:	f000 fa76 	bl	8009ea4 <__malloc_lock>
 80099b8:	4a1d      	ldr	r2, [pc, #116]	; (8009a30 <_free_r+0x90>)
 80099ba:	6813      	ldr	r3, [r2, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d105      	bne.n	80099cc <_free_r+0x2c>
 80099c0:	6063      	str	r3, [r4, #4]
 80099c2:	6014      	str	r4, [r2, #0]
 80099c4:	0028      	movs	r0, r5
 80099c6:	f000 fa75 	bl	8009eb4 <__malloc_unlock>
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	d908      	bls.n	80099e2 <_free_r+0x42>
 80099d0:	6821      	ldr	r1, [r4, #0]
 80099d2:	1860      	adds	r0, r4, r1
 80099d4:	4283      	cmp	r3, r0
 80099d6:	d1f3      	bne.n	80099c0 <_free_r+0x20>
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	1841      	adds	r1, r0, r1
 80099de:	6021      	str	r1, [r4, #0]
 80099e0:	e7ee      	b.n	80099c0 <_free_r+0x20>
 80099e2:	001a      	movs	r2, r3
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <_free_r+0x4e>
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	d9f9      	bls.n	80099e2 <_free_r+0x42>
 80099ee:	6811      	ldr	r1, [r2, #0]
 80099f0:	1850      	adds	r0, r2, r1
 80099f2:	42a0      	cmp	r0, r4
 80099f4:	d10b      	bne.n	8009a0e <_free_r+0x6e>
 80099f6:	6820      	ldr	r0, [r4, #0]
 80099f8:	1809      	adds	r1, r1, r0
 80099fa:	1850      	adds	r0, r2, r1
 80099fc:	6011      	str	r1, [r2, #0]
 80099fe:	4283      	cmp	r3, r0
 8009a00:	d1e0      	bne.n	80099c4 <_free_r+0x24>
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	1841      	adds	r1, r0, r1
 8009a08:	6011      	str	r1, [r2, #0]
 8009a0a:	6053      	str	r3, [r2, #4]
 8009a0c:	e7da      	b.n	80099c4 <_free_r+0x24>
 8009a0e:	42a0      	cmp	r0, r4
 8009a10:	d902      	bls.n	8009a18 <_free_r+0x78>
 8009a12:	230c      	movs	r3, #12
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	e7d5      	b.n	80099c4 <_free_r+0x24>
 8009a18:	6821      	ldr	r1, [r4, #0]
 8009a1a:	1860      	adds	r0, r4, r1
 8009a1c:	4283      	cmp	r3, r0
 8009a1e:	d103      	bne.n	8009a28 <_free_r+0x88>
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	1841      	adds	r1, r0, r1
 8009a26:	6021      	str	r1, [r4, #0]
 8009a28:	6063      	str	r3, [r4, #4]
 8009a2a:	6054      	str	r4, [r2, #4]
 8009a2c:	e7ca      	b.n	80099c4 <_free_r+0x24>
 8009a2e:	46c0      	nop			; (mov r8, r8)
 8009a30:	20000218 	.word	0x20000218

08009a34 <_malloc_r>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	2303      	movs	r3, #3
 8009a38:	1ccd      	adds	r5, r1, #3
 8009a3a:	439d      	bics	r5, r3
 8009a3c:	3508      	adds	r5, #8
 8009a3e:	0006      	movs	r6, r0
 8009a40:	2d0c      	cmp	r5, #12
 8009a42:	d21f      	bcs.n	8009a84 <_malloc_r+0x50>
 8009a44:	250c      	movs	r5, #12
 8009a46:	42a9      	cmp	r1, r5
 8009a48:	d81e      	bhi.n	8009a88 <_malloc_r+0x54>
 8009a4a:	0030      	movs	r0, r6
 8009a4c:	f000 fa2a 	bl	8009ea4 <__malloc_lock>
 8009a50:	4925      	ldr	r1, [pc, #148]	; (8009ae8 <_malloc_r+0xb4>)
 8009a52:	680a      	ldr	r2, [r1, #0]
 8009a54:	0014      	movs	r4, r2
 8009a56:	2c00      	cmp	r4, #0
 8009a58:	d11a      	bne.n	8009a90 <_malloc_r+0x5c>
 8009a5a:	4f24      	ldr	r7, [pc, #144]	; (8009aec <_malloc_r+0xb8>)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d104      	bne.n	8009a6c <_malloc_r+0x38>
 8009a62:	0021      	movs	r1, r4
 8009a64:	0030      	movs	r0, r6
 8009a66:	f000 f9ab 	bl	8009dc0 <_sbrk_r>
 8009a6a:	6038      	str	r0, [r7, #0]
 8009a6c:	0029      	movs	r1, r5
 8009a6e:	0030      	movs	r0, r6
 8009a70:	f000 f9a6 	bl	8009dc0 <_sbrk_r>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d12b      	bne.n	8009ad0 <_malloc_r+0x9c>
 8009a78:	230c      	movs	r3, #12
 8009a7a:	0030      	movs	r0, r6
 8009a7c:	6033      	str	r3, [r6, #0]
 8009a7e:	f000 fa19 	bl	8009eb4 <__malloc_unlock>
 8009a82:	e003      	b.n	8009a8c <_malloc_r+0x58>
 8009a84:	2d00      	cmp	r5, #0
 8009a86:	dade      	bge.n	8009a46 <_malloc_r+0x12>
 8009a88:	230c      	movs	r3, #12
 8009a8a:	6033      	str	r3, [r6, #0]
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	1b5b      	subs	r3, r3, r5
 8009a94:	d419      	bmi.n	8009aca <_malloc_r+0x96>
 8009a96:	2b0b      	cmp	r3, #11
 8009a98:	d903      	bls.n	8009aa2 <_malloc_r+0x6e>
 8009a9a:	6023      	str	r3, [r4, #0]
 8009a9c:	18e4      	adds	r4, r4, r3
 8009a9e:	6025      	str	r5, [r4, #0]
 8009aa0:	e003      	b.n	8009aaa <_malloc_r+0x76>
 8009aa2:	6863      	ldr	r3, [r4, #4]
 8009aa4:	42a2      	cmp	r2, r4
 8009aa6:	d10e      	bne.n	8009ac6 <_malloc_r+0x92>
 8009aa8:	600b      	str	r3, [r1, #0]
 8009aaa:	0030      	movs	r0, r6
 8009aac:	f000 fa02 	bl	8009eb4 <__malloc_unlock>
 8009ab0:	0020      	movs	r0, r4
 8009ab2:	2207      	movs	r2, #7
 8009ab4:	300b      	adds	r0, #11
 8009ab6:	1d23      	adds	r3, r4, #4
 8009ab8:	4390      	bics	r0, r2
 8009aba:	1ac2      	subs	r2, r0, r3
 8009abc:	4298      	cmp	r0, r3
 8009abe:	d0e6      	beq.n	8009a8e <_malloc_r+0x5a>
 8009ac0:	1a1b      	subs	r3, r3, r0
 8009ac2:	50a3      	str	r3, [r4, r2]
 8009ac4:	e7e3      	b.n	8009a8e <_malloc_r+0x5a>
 8009ac6:	6053      	str	r3, [r2, #4]
 8009ac8:	e7ef      	b.n	8009aaa <_malloc_r+0x76>
 8009aca:	0022      	movs	r2, r4
 8009acc:	6864      	ldr	r4, [r4, #4]
 8009ace:	e7c2      	b.n	8009a56 <_malloc_r+0x22>
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	1cc4      	adds	r4, r0, #3
 8009ad4:	439c      	bics	r4, r3
 8009ad6:	42a0      	cmp	r0, r4
 8009ad8:	d0e1      	beq.n	8009a9e <_malloc_r+0x6a>
 8009ada:	1a21      	subs	r1, r4, r0
 8009adc:	0030      	movs	r0, r6
 8009ade:	f000 f96f 	bl	8009dc0 <_sbrk_r>
 8009ae2:	1c43      	adds	r3, r0, #1
 8009ae4:	d1db      	bne.n	8009a9e <_malloc_r+0x6a>
 8009ae6:	e7c7      	b.n	8009a78 <_malloc_r+0x44>
 8009ae8:	20000218 	.word	0x20000218
 8009aec:	2000021c 	.word	0x2000021c

08009af0 <__ssputs_r>:
 8009af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009af2:	688e      	ldr	r6, [r1, #8]
 8009af4:	b085      	sub	sp, #20
 8009af6:	0007      	movs	r7, r0
 8009af8:	000c      	movs	r4, r1
 8009afa:	9203      	str	r2, [sp, #12]
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	429e      	cmp	r6, r3
 8009b00:	d83c      	bhi.n	8009b7c <__ssputs_r+0x8c>
 8009b02:	2390      	movs	r3, #144	; 0x90
 8009b04:	898a      	ldrh	r2, [r1, #12]
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	421a      	tst	r2, r3
 8009b0a:	d034      	beq.n	8009b76 <__ssputs_r+0x86>
 8009b0c:	2503      	movs	r5, #3
 8009b0e:	6909      	ldr	r1, [r1, #16]
 8009b10:	6823      	ldr	r3, [r4, #0]
 8009b12:	1a5b      	subs	r3, r3, r1
 8009b14:	9302      	str	r3, [sp, #8]
 8009b16:	6963      	ldr	r3, [r4, #20]
 8009b18:	9802      	ldr	r0, [sp, #8]
 8009b1a:	435d      	muls	r5, r3
 8009b1c:	0feb      	lsrs	r3, r5, #31
 8009b1e:	195d      	adds	r5, r3, r5
 8009b20:	9b01      	ldr	r3, [sp, #4]
 8009b22:	106d      	asrs	r5, r5, #1
 8009b24:	3301      	adds	r3, #1
 8009b26:	181b      	adds	r3, r3, r0
 8009b28:	42ab      	cmp	r3, r5
 8009b2a:	d900      	bls.n	8009b2e <__ssputs_r+0x3e>
 8009b2c:	001d      	movs	r5, r3
 8009b2e:	0553      	lsls	r3, r2, #21
 8009b30:	d532      	bpl.n	8009b98 <__ssputs_r+0xa8>
 8009b32:	0029      	movs	r1, r5
 8009b34:	0038      	movs	r0, r7
 8009b36:	f7ff ff7d 	bl	8009a34 <_malloc_r>
 8009b3a:	1e06      	subs	r6, r0, #0
 8009b3c:	d109      	bne.n	8009b52 <__ssputs_r+0x62>
 8009b3e:	230c      	movs	r3, #12
 8009b40:	603b      	str	r3, [r7, #0]
 8009b42:	2340      	movs	r3, #64	; 0x40
 8009b44:	2001      	movs	r0, #1
 8009b46:	89a2      	ldrh	r2, [r4, #12]
 8009b48:	4240      	negs	r0, r0
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	81a3      	strh	r3, [r4, #12]
 8009b4e:	b005      	add	sp, #20
 8009b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b52:	9a02      	ldr	r2, [sp, #8]
 8009b54:	6921      	ldr	r1, [r4, #16]
 8009b56:	f7ff fa42 	bl	8008fde <memcpy>
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	4a14      	ldr	r2, [pc, #80]	; (8009bb0 <__ssputs_r+0xc0>)
 8009b5e:	401a      	ands	r2, r3
 8009b60:	2380      	movs	r3, #128	; 0x80
 8009b62:	4313      	orrs	r3, r2
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	9b02      	ldr	r3, [sp, #8]
 8009b68:	6126      	str	r6, [r4, #16]
 8009b6a:	18f6      	adds	r6, r6, r3
 8009b6c:	6026      	str	r6, [r4, #0]
 8009b6e:	6165      	str	r5, [r4, #20]
 8009b70:	9e01      	ldr	r6, [sp, #4]
 8009b72:	1aed      	subs	r5, r5, r3
 8009b74:	60a5      	str	r5, [r4, #8]
 8009b76:	9b01      	ldr	r3, [sp, #4]
 8009b78:	429e      	cmp	r6, r3
 8009b7a:	d900      	bls.n	8009b7e <__ssputs_r+0x8e>
 8009b7c:	9e01      	ldr	r6, [sp, #4]
 8009b7e:	0032      	movs	r2, r6
 8009b80:	9903      	ldr	r1, [sp, #12]
 8009b82:	6820      	ldr	r0, [r4, #0]
 8009b84:	f000 f97a 	bl	8009e7c <memmove>
 8009b88:	68a3      	ldr	r3, [r4, #8]
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	1b9b      	subs	r3, r3, r6
 8009b8e:	60a3      	str	r3, [r4, #8]
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	199e      	adds	r6, r3, r6
 8009b94:	6026      	str	r6, [r4, #0]
 8009b96:	e7da      	b.n	8009b4e <__ssputs_r+0x5e>
 8009b98:	002a      	movs	r2, r5
 8009b9a:	0038      	movs	r0, r7
 8009b9c:	f000 f992 	bl	8009ec4 <_realloc_r>
 8009ba0:	1e06      	subs	r6, r0, #0
 8009ba2:	d1e0      	bne.n	8009b66 <__ssputs_r+0x76>
 8009ba4:	0038      	movs	r0, r7
 8009ba6:	6921      	ldr	r1, [r4, #16]
 8009ba8:	f7ff fefa 	bl	80099a0 <_free_r>
 8009bac:	e7c7      	b.n	8009b3e <__ssputs_r+0x4e>
 8009bae:	46c0      	nop			; (mov r8, r8)
 8009bb0:	fffffb7f 	.word	0xfffffb7f

08009bb4 <_svfiprintf_r>:
 8009bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bb6:	b0a1      	sub	sp, #132	; 0x84
 8009bb8:	9003      	str	r0, [sp, #12]
 8009bba:	001d      	movs	r5, r3
 8009bbc:	898b      	ldrh	r3, [r1, #12]
 8009bbe:	000f      	movs	r7, r1
 8009bc0:	0016      	movs	r6, r2
 8009bc2:	061b      	lsls	r3, r3, #24
 8009bc4:	d511      	bpl.n	8009bea <_svfiprintf_r+0x36>
 8009bc6:	690b      	ldr	r3, [r1, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10e      	bne.n	8009bea <_svfiprintf_r+0x36>
 8009bcc:	2140      	movs	r1, #64	; 0x40
 8009bce:	f7ff ff31 	bl	8009a34 <_malloc_r>
 8009bd2:	6038      	str	r0, [r7, #0]
 8009bd4:	6138      	str	r0, [r7, #16]
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d105      	bne.n	8009be6 <_svfiprintf_r+0x32>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	9a03      	ldr	r2, [sp, #12]
 8009bde:	3801      	subs	r0, #1
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	b021      	add	sp, #132	; 0x84
 8009be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009be6:	2340      	movs	r3, #64	; 0x40
 8009be8:	617b      	str	r3, [r7, #20]
 8009bea:	2300      	movs	r3, #0
 8009bec:	ac08      	add	r4, sp, #32
 8009bee:	6163      	str	r3, [r4, #20]
 8009bf0:	3320      	adds	r3, #32
 8009bf2:	7663      	strb	r3, [r4, #25]
 8009bf4:	3310      	adds	r3, #16
 8009bf6:	76a3      	strb	r3, [r4, #26]
 8009bf8:	9507      	str	r5, [sp, #28]
 8009bfa:	0035      	movs	r5, r6
 8009bfc:	782b      	ldrb	r3, [r5, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <_svfiprintf_r+0x52>
 8009c02:	2b25      	cmp	r3, #37	; 0x25
 8009c04:	d147      	bne.n	8009c96 <_svfiprintf_r+0xe2>
 8009c06:	1bab      	subs	r3, r5, r6
 8009c08:	9305      	str	r3, [sp, #20]
 8009c0a:	42b5      	cmp	r5, r6
 8009c0c:	d00c      	beq.n	8009c28 <_svfiprintf_r+0x74>
 8009c0e:	0032      	movs	r2, r6
 8009c10:	0039      	movs	r1, r7
 8009c12:	9803      	ldr	r0, [sp, #12]
 8009c14:	f7ff ff6c 	bl	8009af0 <__ssputs_r>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d100      	bne.n	8009c1e <_svfiprintf_r+0x6a>
 8009c1c:	e0ae      	b.n	8009d7c <_svfiprintf_r+0x1c8>
 8009c1e:	6962      	ldr	r2, [r4, #20]
 8009c20:	9b05      	ldr	r3, [sp, #20]
 8009c22:	4694      	mov	ip, r2
 8009c24:	4463      	add	r3, ip
 8009c26:	6163      	str	r3, [r4, #20]
 8009c28:	782b      	ldrb	r3, [r5, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d100      	bne.n	8009c30 <_svfiprintf_r+0x7c>
 8009c2e:	e0a5      	b.n	8009d7c <_svfiprintf_r+0x1c8>
 8009c30:	2201      	movs	r2, #1
 8009c32:	2300      	movs	r3, #0
 8009c34:	4252      	negs	r2, r2
 8009c36:	6062      	str	r2, [r4, #4]
 8009c38:	a904      	add	r1, sp, #16
 8009c3a:	3254      	adds	r2, #84	; 0x54
 8009c3c:	1852      	adds	r2, r2, r1
 8009c3e:	1c6e      	adds	r6, r5, #1
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	60e3      	str	r3, [r4, #12]
 8009c44:	60a3      	str	r3, [r4, #8]
 8009c46:	7013      	strb	r3, [r2, #0]
 8009c48:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c4a:	2205      	movs	r2, #5
 8009c4c:	7831      	ldrb	r1, [r6, #0]
 8009c4e:	4854      	ldr	r0, [pc, #336]	; (8009da0 <_svfiprintf_r+0x1ec>)
 8009c50:	f7ff f9ba 	bl	8008fc8 <memchr>
 8009c54:	1c75      	adds	r5, r6, #1
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d11f      	bne.n	8009c9a <_svfiprintf_r+0xe6>
 8009c5a:	6822      	ldr	r2, [r4, #0]
 8009c5c:	06d3      	lsls	r3, r2, #27
 8009c5e:	d504      	bpl.n	8009c6a <_svfiprintf_r+0xb6>
 8009c60:	2353      	movs	r3, #83	; 0x53
 8009c62:	a904      	add	r1, sp, #16
 8009c64:	185b      	adds	r3, r3, r1
 8009c66:	2120      	movs	r1, #32
 8009c68:	7019      	strb	r1, [r3, #0]
 8009c6a:	0713      	lsls	r3, r2, #28
 8009c6c:	d504      	bpl.n	8009c78 <_svfiprintf_r+0xc4>
 8009c6e:	2353      	movs	r3, #83	; 0x53
 8009c70:	a904      	add	r1, sp, #16
 8009c72:	185b      	adds	r3, r3, r1
 8009c74:	212b      	movs	r1, #43	; 0x2b
 8009c76:	7019      	strb	r1, [r3, #0]
 8009c78:	7833      	ldrb	r3, [r6, #0]
 8009c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c7c:	d016      	beq.n	8009cac <_svfiprintf_r+0xf8>
 8009c7e:	0035      	movs	r5, r6
 8009c80:	2100      	movs	r1, #0
 8009c82:	200a      	movs	r0, #10
 8009c84:	68e3      	ldr	r3, [r4, #12]
 8009c86:	782a      	ldrb	r2, [r5, #0]
 8009c88:	1c6e      	adds	r6, r5, #1
 8009c8a:	3a30      	subs	r2, #48	; 0x30
 8009c8c:	2a09      	cmp	r2, #9
 8009c8e:	d94e      	bls.n	8009d2e <_svfiprintf_r+0x17a>
 8009c90:	2900      	cmp	r1, #0
 8009c92:	d111      	bne.n	8009cb8 <_svfiprintf_r+0x104>
 8009c94:	e017      	b.n	8009cc6 <_svfiprintf_r+0x112>
 8009c96:	3501      	adds	r5, #1
 8009c98:	e7b0      	b.n	8009bfc <_svfiprintf_r+0x48>
 8009c9a:	4b41      	ldr	r3, [pc, #260]	; (8009da0 <_svfiprintf_r+0x1ec>)
 8009c9c:	6822      	ldr	r2, [r4, #0]
 8009c9e:	1ac0      	subs	r0, r0, r3
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4083      	lsls	r3, r0
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	002e      	movs	r6, r5
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	e7ce      	b.n	8009c4a <_svfiprintf_r+0x96>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	1d19      	adds	r1, r3, #4
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	9107      	str	r1, [sp, #28]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	db01      	blt.n	8009cbc <_svfiprintf_r+0x108>
 8009cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cba:	e004      	b.n	8009cc6 <_svfiprintf_r+0x112>
 8009cbc:	425b      	negs	r3, r3
 8009cbe:	60e3      	str	r3, [r4, #12]
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	782b      	ldrb	r3, [r5, #0]
 8009cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8009cca:	d10a      	bne.n	8009ce2 <_svfiprintf_r+0x12e>
 8009ccc:	786b      	ldrb	r3, [r5, #1]
 8009cce:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd0:	d135      	bne.n	8009d3e <_svfiprintf_r+0x18a>
 8009cd2:	9b07      	ldr	r3, [sp, #28]
 8009cd4:	3502      	adds	r5, #2
 8009cd6:	1d1a      	adds	r2, r3, #4
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	9207      	str	r2, [sp, #28]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	db2b      	blt.n	8009d38 <_svfiprintf_r+0x184>
 8009ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce2:	4e30      	ldr	r6, [pc, #192]	; (8009da4 <_svfiprintf_r+0x1f0>)
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	0030      	movs	r0, r6
 8009ce8:	7829      	ldrb	r1, [r5, #0]
 8009cea:	f7ff f96d 	bl	8008fc8 <memchr>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d006      	beq.n	8009d00 <_svfiprintf_r+0x14c>
 8009cf2:	2340      	movs	r3, #64	; 0x40
 8009cf4:	1b80      	subs	r0, r0, r6
 8009cf6:	4083      	lsls	r3, r0
 8009cf8:	6822      	ldr	r2, [r4, #0]
 8009cfa:	3501      	adds	r5, #1
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	6023      	str	r3, [r4, #0]
 8009d00:	7829      	ldrb	r1, [r5, #0]
 8009d02:	2206      	movs	r2, #6
 8009d04:	4828      	ldr	r0, [pc, #160]	; (8009da8 <_svfiprintf_r+0x1f4>)
 8009d06:	1c6e      	adds	r6, r5, #1
 8009d08:	7621      	strb	r1, [r4, #24]
 8009d0a:	f7ff f95d 	bl	8008fc8 <memchr>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d03c      	beq.n	8009d8c <_svfiprintf_r+0x1d8>
 8009d12:	4b26      	ldr	r3, [pc, #152]	; (8009dac <_svfiprintf_r+0x1f8>)
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d125      	bne.n	8009d64 <_svfiprintf_r+0x1b0>
 8009d18:	2207      	movs	r2, #7
 8009d1a:	9b07      	ldr	r3, [sp, #28]
 8009d1c:	3307      	adds	r3, #7
 8009d1e:	4393      	bics	r3, r2
 8009d20:	3308      	adds	r3, #8
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	6963      	ldr	r3, [r4, #20]
 8009d26:	9a04      	ldr	r2, [sp, #16]
 8009d28:	189b      	adds	r3, r3, r2
 8009d2a:	6163      	str	r3, [r4, #20]
 8009d2c:	e765      	b.n	8009bfa <_svfiprintf_r+0x46>
 8009d2e:	4343      	muls	r3, r0
 8009d30:	0035      	movs	r5, r6
 8009d32:	2101      	movs	r1, #1
 8009d34:	189b      	adds	r3, r3, r2
 8009d36:	e7a6      	b.n	8009c86 <_svfiprintf_r+0xd2>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	425b      	negs	r3, r3
 8009d3c:	e7d0      	b.n	8009ce0 <_svfiprintf_r+0x12c>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	200a      	movs	r0, #10
 8009d42:	001a      	movs	r2, r3
 8009d44:	3501      	adds	r5, #1
 8009d46:	6063      	str	r3, [r4, #4]
 8009d48:	7829      	ldrb	r1, [r5, #0]
 8009d4a:	1c6e      	adds	r6, r5, #1
 8009d4c:	3930      	subs	r1, #48	; 0x30
 8009d4e:	2909      	cmp	r1, #9
 8009d50:	d903      	bls.n	8009d5a <_svfiprintf_r+0x1a6>
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0c5      	beq.n	8009ce2 <_svfiprintf_r+0x12e>
 8009d56:	9209      	str	r2, [sp, #36]	; 0x24
 8009d58:	e7c3      	b.n	8009ce2 <_svfiprintf_r+0x12e>
 8009d5a:	4342      	muls	r2, r0
 8009d5c:	0035      	movs	r5, r6
 8009d5e:	2301      	movs	r3, #1
 8009d60:	1852      	adds	r2, r2, r1
 8009d62:	e7f1      	b.n	8009d48 <_svfiprintf_r+0x194>
 8009d64:	ab07      	add	r3, sp, #28
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	003a      	movs	r2, r7
 8009d6a:	0021      	movs	r1, r4
 8009d6c:	4b10      	ldr	r3, [pc, #64]	; (8009db0 <_svfiprintf_r+0x1fc>)
 8009d6e:	9803      	ldr	r0, [sp, #12]
 8009d70:	f7fc fa1c 	bl	80061ac <_printf_float>
 8009d74:	9004      	str	r0, [sp, #16]
 8009d76:	9b04      	ldr	r3, [sp, #16]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	d1d3      	bne.n	8009d24 <_svfiprintf_r+0x170>
 8009d7c:	89bb      	ldrh	r3, [r7, #12]
 8009d7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009d80:	065b      	lsls	r3, r3, #25
 8009d82:	d400      	bmi.n	8009d86 <_svfiprintf_r+0x1d2>
 8009d84:	e72d      	b.n	8009be2 <_svfiprintf_r+0x2e>
 8009d86:	2001      	movs	r0, #1
 8009d88:	4240      	negs	r0, r0
 8009d8a:	e72a      	b.n	8009be2 <_svfiprintf_r+0x2e>
 8009d8c:	ab07      	add	r3, sp, #28
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	003a      	movs	r2, r7
 8009d92:	0021      	movs	r1, r4
 8009d94:	4b06      	ldr	r3, [pc, #24]	; (8009db0 <_svfiprintf_r+0x1fc>)
 8009d96:	9803      	ldr	r0, [sp, #12]
 8009d98:	f7fc fcc6 	bl	8006728 <_printf_i>
 8009d9c:	e7ea      	b.n	8009d74 <_svfiprintf_r+0x1c0>
 8009d9e:	46c0      	nop			; (mov r8, r8)
 8009da0:	0800af94 	.word	0x0800af94
 8009da4:	0800af9a 	.word	0x0800af9a
 8009da8:	0800af9e 	.word	0x0800af9e
 8009dac:	080061ad 	.word	0x080061ad
 8009db0:	08009af1 	.word	0x08009af1

08009db4 <nan>:
 8009db4:	2000      	movs	r0, #0
 8009db6:	4901      	ldr	r1, [pc, #4]	; (8009dbc <nan+0x8>)
 8009db8:	4770      	bx	lr
 8009dba:	46c0      	nop			; (mov r8, r8)
 8009dbc:	7ff80000 	.word	0x7ff80000

08009dc0 <_sbrk_r>:
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	b570      	push	{r4, r5, r6, lr}
 8009dc4:	4d06      	ldr	r5, [pc, #24]	; (8009de0 <_sbrk_r+0x20>)
 8009dc6:	0004      	movs	r4, r0
 8009dc8:	0008      	movs	r0, r1
 8009dca:	602b      	str	r3, [r5, #0]
 8009dcc:	f7f9 f9ce 	bl	800316c <_sbrk>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d103      	bne.n	8009ddc <_sbrk_r+0x1c>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d000      	beq.n	8009ddc <_sbrk_r+0x1c>
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	bd70      	pop	{r4, r5, r6, pc}
 8009dde:	46c0      	nop			; (mov r8, r8)
 8009de0:	20000c00 	.word	0x20000c00

08009de4 <strncmp>:
 8009de4:	b530      	push	{r4, r5, lr}
 8009de6:	0005      	movs	r5, r0
 8009de8:	1e10      	subs	r0, r2, #0
 8009dea:	d00b      	beq.n	8009e04 <strncmp+0x20>
 8009dec:	2400      	movs	r4, #0
 8009dee:	3a01      	subs	r2, #1
 8009df0:	5d2b      	ldrb	r3, [r5, r4]
 8009df2:	5d08      	ldrb	r0, [r1, r4]
 8009df4:	4283      	cmp	r3, r0
 8009df6:	d104      	bne.n	8009e02 <strncmp+0x1e>
 8009df8:	4294      	cmp	r4, r2
 8009dfa:	d002      	beq.n	8009e02 <strncmp+0x1e>
 8009dfc:	3401      	adds	r4, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1f6      	bne.n	8009df0 <strncmp+0xc>
 8009e02:	1a18      	subs	r0, r3, r0
 8009e04:	bd30      	pop	{r4, r5, pc}

08009e06 <__ascii_wctomb>:
 8009e06:	0003      	movs	r3, r0
 8009e08:	1e08      	subs	r0, r1, #0
 8009e0a:	d005      	beq.n	8009e18 <__ascii_wctomb+0x12>
 8009e0c:	2aff      	cmp	r2, #255	; 0xff
 8009e0e:	d904      	bls.n	8009e1a <__ascii_wctomb+0x14>
 8009e10:	228a      	movs	r2, #138	; 0x8a
 8009e12:	2001      	movs	r0, #1
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	4240      	negs	r0, r0
 8009e18:	4770      	bx	lr
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	700a      	strb	r2, [r1, #0]
 8009e1e:	e7fb      	b.n	8009e18 <__ascii_wctomb+0x12>

08009e20 <__assert_func>:
 8009e20:	b530      	push	{r4, r5, lr}
 8009e22:	0014      	movs	r4, r2
 8009e24:	001a      	movs	r2, r3
 8009e26:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <__assert_func+0x2c>)
 8009e28:	0005      	movs	r5, r0
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	b085      	sub	sp, #20
 8009e2e:	68d8      	ldr	r0, [r3, #12]
 8009e30:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <__assert_func+0x30>)
 8009e32:	2c00      	cmp	r4, #0
 8009e34:	d101      	bne.n	8009e3a <__assert_func+0x1a>
 8009e36:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <__assert_func+0x34>)
 8009e38:	001c      	movs	r4, r3
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	9100      	str	r1, [sp, #0]
 8009e3e:	002b      	movs	r3, r5
 8009e40:	4905      	ldr	r1, [pc, #20]	; (8009e58 <__assert_func+0x38>)
 8009e42:	9402      	str	r4, [sp, #8]
 8009e44:	f000 f80a 	bl	8009e5c <fiprintf>
 8009e48:	f000 fa92 	bl	800a370 <abort>
 8009e4c:	20000020 	.word	0x20000020
 8009e50:	0800afa5 	.word	0x0800afa5
 8009e54:	0800afe0 	.word	0x0800afe0
 8009e58:	0800afb2 	.word	0x0800afb2

08009e5c <fiprintf>:
 8009e5c:	b40e      	push	{r1, r2, r3}
 8009e5e:	b503      	push	{r0, r1, lr}
 8009e60:	0001      	movs	r1, r0
 8009e62:	ab03      	add	r3, sp, #12
 8009e64:	4804      	ldr	r0, [pc, #16]	; (8009e78 <fiprintf+0x1c>)
 8009e66:	cb04      	ldmia	r3!, {r2}
 8009e68:	6800      	ldr	r0, [r0, #0]
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	f000 f878 	bl	8009f60 <_vfiprintf_r>
 8009e70:	b002      	add	sp, #8
 8009e72:	bc08      	pop	{r3}
 8009e74:	b003      	add	sp, #12
 8009e76:	4718      	bx	r3
 8009e78:	20000020 	.word	0x20000020

08009e7c <memmove>:
 8009e7c:	b510      	push	{r4, lr}
 8009e7e:	4288      	cmp	r0, r1
 8009e80:	d902      	bls.n	8009e88 <memmove+0xc>
 8009e82:	188b      	adds	r3, r1, r2
 8009e84:	4298      	cmp	r0, r3
 8009e86:	d303      	bcc.n	8009e90 <memmove+0x14>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	e007      	b.n	8009e9c <memmove+0x20>
 8009e8c:	5c8b      	ldrb	r3, [r1, r2]
 8009e8e:	5483      	strb	r3, [r0, r2]
 8009e90:	3a01      	subs	r2, #1
 8009e92:	d2fb      	bcs.n	8009e8c <memmove+0x10>
 8009e94:	bd10      	pop	{r4, pc}
 8009e96:	5ccc      	ldrb	r4, [r1, r3]
 8009e98:	54c4      	strb	r4, [r0, r3]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d1fa      	bne.n	8009e96 <memmove+0x1a>
 8009ea0:	e7f8      	b.n	8009e94 <memmove+0x18>
	...

08009ea4 <__malloc_lock>:
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	4802      	ldr	r0, [pc, #8]	; (8009eb0 <__malloc_lock+0xc>)
 8009ea8:	f000 fc39 	bl	800a71e <__retarget_lock_acquire_recursive>
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	20000c08 	.word	0x20000c08

08009eb4 <__malloc_unlock>:
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	4802      	ldr	r0, [pc, #8]	; (8009ec0 <__malloc_unlock+0xc>)
 8009eb8:	f000 fc32 	bl	800a720 <__retarget_lock_release_recursive>
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	46c0      	nop			; (mov r8, r8)
 8009ec0:	20000c08 	.word	0x20000c08

08009ec4 <_realloc_r>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	0007      	movs	r7, r0
 8009ec8:	000d      	movs	r5, r1
 8009eca:	0016      	movs	r6, r2
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d105      	bne.n	8009edc <_realloc_r+0x18>
 8009ed0:	0011      	movs	r1, r2
 8009ed2:	f7ff fdaf 	bl	8009a34 <_malloc_r>
 8009ed6:	0004      	movs	r4, r0
 8009ed8:	0020      	movs	r0, r4
 8009eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009edc:	2a00      	cmp	r2, #0
 8009ede:	d103      	bne.n	8009ee8 <_realloc_r+0x24>
 8009ee0:	f7ff fd5e 	bl	80099a0 <_free_r>
 8009ee4:	0034      	movs	r4, r6
 8009ee6:	e7f7      	b.n	8009ed8 <_realloc_r+0x14>
 8009ee8:	f000 fc88 	bl	800a7fc <_malloc_usable_size_r>
 8009eec:	002c      	movs	r4, r5
 8009eee:	42b0      	cmp	r0, r6
 8009ef0:	d2f2      	bcs.n	8009ed8 <_realloc_r+0x14>
 8009ef2:	0031      	movs	r1, r6
 8009ef4:	0038      	movs	r0, r7
 8009ef6:	f7ff fd9d 	bl	8009a34 <_malloc_r>
 8009efa:	1e04      	subs	r4, r0, #0
 8009efc:	d0ec      	beq.n	8009ed8 <_realloc_r+0x14>
 8009efe:	0029      	movs	r1, r5
 8009f00:	0032      	movs	r2, r6
 8009f02:	f7ff f86c 	bl	8008fde <memcpy>
 8009f06:	0029      	movs	r1, r5
 8009f08:	0038      	movs	r0, r7
 8009f0a:	f7ff fd49 	bl	80099a0 <_free_r>
 8009f0e:	e7e3      	b.n	8009ed8 <_realloc_r+0x14>

08009f10 <__sfputc_r>:
 8009f10:	6893      	ldr	r3, [r2, #8]
 8009f12:	b510      	push	{r4, lr}
 8009f14:	3b01      	subs	r3, #1
 8009f16:	6093      	str	r3, [r2, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	da04      	bge.n	8009f26 <__sfputc_r+0x16>
 8009f1c:	6994      	ldr	r4, [r2, #24]
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	db07      	blt.n	8009f32 <__sfputc_r+0x22>
 8009f22:	290a      	cmp	r1, #10
 8009f24:	d005      	beq.n	8009f32 <__sfputc_r+0x22>
 8009f26:	6813      	ldr	r3, [r2, #0]
 8009f28:	1c58      	adds	r0, r3, #1
 8009f2a:	6010      	str	r0, [r2, #0]
 8009f2c:	7019      	strb	r1, [r3, #0]
 8009f2e:	0008      	movs	r0, r1
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	f000 f94f 	bl	800a1d4 <__swbuf_r>
 8009f36:	0001      	movs	r1, r0
 8009f38:	e7f9      	b.n	8009f2e <__sfputc_r+0x1e>

08009f3a <__sfputs_r>:
 8009f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3c:	0006      	movs	r6, r0
 8009f3e:	000f      	movs	r7, r1
 8009f40:	0014      	movs	r4, r2
 8009f42:	18d5      	adds	r5, r2, r3
 8009f44:	42ac      	cmp	r4, r5
 8009f46:	d101      	bne.n	8009f4c <__sfputs_r+0x12>
 8009f48:	2000      	movs	r0, #0
 8009f4a:	e007      	b.n	8009f5c <__sfputs_r+0x22>
 8009f4c:	7821      	ldrb	r1, [r4, #0]
 8009f4e:	003a      	movs	r2, r7
 8009f50:	0030      	movs	r0, r6
 8009f52:	f7ff ffdd 	bl	8009f10 <__sfputc_r>
 8009f56:	3401      	adds	r4, #1
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d1f3      	bne.n	8009f44 <__sfputs_r+0xa>
 8009f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f60 <_vfiprintf_r>:
 8009f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f62:	b0a1      	sub	sp, #132	; 0x84
 8009f64:	0006      	movs	r6, r0
 8009f66:	000c      	movs	r4, r1
 8009f68:	001f      	movs	r7, r3
 8009f6a:	9203      	str	r2, [sp, #12]
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d004      	beq.n	8009f7a <_vfiprintf_r+0x1a>
 8009f70:	6983      	ldr	r3, [r0, #24]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <_vfiprintf_r+0x1a>
 8009f76:	f000 fb31 	bl	800a5dc <__sinit>
 8009f7a:	4b8e      	ldr	r3, [pc, #568]	; (800a1b4 <_vfiprintf_r+0x254>)
 8009f7c:	429c      	cmp	r4, r3
 8009f7e:	d11c      	bne.n	8009fba <_vfiprintf_r+0x5a>
 8009f80:	6874      	ldr	r4, [r6, #4]
 8009f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f84:	07db      	lsls	r3, r3, #31
 8009f86:	d405      	bmi.n	8009f94 <_vfiprintf_r+0x34>
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	059b      	lsls	r3, r3, #22
 8009f8c:	d402      	bmi.n	8009f94 <_vfiprintf_r+0x34>
 8009f8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f90:	f000 fbc5 	bl	800a71e <__retarget_lock_acquire_recursive>
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	071b      	lsls	r3, r3, #28
 8009f98:	d502      	bpl.n	8009fa0 <_vfiprintf_r+0x40>
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d11d      	bne.n	8009fdc <_vfiprintf_r+0x7c>
 8009fa0:	0021      	movs	r1, r4
 8009fa2:	0030      	movs	r0, r6
 8009fa4:	f000 f96c 	bl	800a280 <__swsetup_r>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d017      	beq.n	8009fdc <_vfiprintf_r+0x7c>
 8009fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fae:	07db      	lsls	r3, r3, #31
 8009fb0:	d50d      	bpl.n	8009fce <_vfiprintf_r+0x6e>
 8009fb2:	2001      	movs	r0, #1
 8009fb4:	4240      	negs	r0, r0
 8009fb6:	b021      	add	sp, #132	; 0x84
 8009fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fba:	4b7f      	ldr	r3, [pc, #508]	; (800a1b8 <_vfiprintf_r+0x258>)
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	d101      	bne.n	8009fc4 <_vfiprintf_r+0x64>
 8009fc0:	68b4      	ldr	r4, [r6, #8]
 8009fc2:	e7de      	b.n	8009f82 <_vfiprintf_r+0x22>
 8009fc4:	4b7d      	ldr	r3, [pc, #500]	; (800a1bc <_vfiprintf_r+0x25c>)
 8009fc6:	429c      	cmp	r4, r3
 8009fc8:	d1db      	bne.n	8009f82 <_vfiprintf_r+0x22>
 8009fca:	68f4      	ldr	r4, [r6, #12]
 8009fcc:	e7d9      	b.n	8009f82 <_vfiprintf_r+0x22>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	059b      	lsls	r3, r3, #22
 8009fd2:	d4ee      	bmi.n	8009fb2 <_vfiprintf_r+0x52>
 8009fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fd6:	f000 fba3 	bl	800a720 <__retarget_lock_release_recursive>
 8009fda:	e7ea      	b.n	8009fb2 <_vfiprintf_r+0x52>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	ad08      	add	r5, sp, #32
 8009fe0:	616b      	str	r3, [r5, #20]
 8009fe2:	3320      	adds	r3, #32
 8009fe4:	766b      	strb	r3, [r5, #25]
 8009fe6:	3310      	adds	r3, #16
 8009fe8:	76ab      	strb	r3, [r5, #26]
 8009fea:	9707      	str	r7, [sp, #28]
 8009fec:	9f03      	ldr	r7, [sp, #12]
 8009fee:	783b      	ldrb	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <_vfiprintf_r+0x98>
 8009ff4:	2b25      	cmp	r3, #37	; 0x25
 8009ff6:	d14e      	bne.n	800a096 <_vfiprintf_r+0x136>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	1afb      	subs	r3, r7, r3
 8009ffc:	9305      	str	r3, [sp, #20]
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	429f      	cmp	r7, r3
 800a002:	d00d      	beq.n	800a020 <_vfiprintf_r+0xc0>
 800a004:	9b05      	ldr	r3, [sp, #20]
 800a006:	0021      	movs	r1, r4
 800a008:	0030      	movs	r0, r6
 800a00a:	9a03      	ldr	r2, [sp, #12]
 800a00c:	f7ff ff95 	bl	8009f3a <__sfputs_r>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d100      	bne.n	800a016 <_vfiprintf_r+0xb6>
 800a014:	e0b5      	b.n	800a182 <_vfiprintf_r+0x222>
 800a016:	696a      	ldr	r2, [r5, #20]
 800a018:	9b05      	ldr	r3, [sp, #20]
 800a01a:	4694      	mov	ip, r2
 800a01c:	4463      	add	r3, ip
 800a01e:	616b      	str	r3, [r5, #20]
 800a020:	783b      	ldrb	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d100      	bne.n	800a028 <_vfiprintf_r+0xc8>
 800a026:	e0ac      	b.n	800a182 <_vfiprintf_r+0x222>
 800a028:	2201      	movs	r2, #1
 800a02a:	1c7b      	adds	r3, r7, #1
 800a02c:	9303      	str	r3, [sp, #12]
 800a02e:	2300      	movs	r3, #0
 800a030:	4252      	negs	r2, r2
 800a032:	606a      	str	r2, [r5, #4]
 800a034:	a904      	add	r1, sp, #16
 800a036:	3254      	adds	r2, #84	; 0x54
 800a038:	1852      	adds	r2, r2, r1
 800a03a:	602b      	str	r3, [r5, #0]
 800a03c:	60eb      	str	r3, [r5, #12]
 800a03e:	60ab      	str	r3, [r5, #8]
 800a040:	7013      	strb	r3, [r2, #0]
 800a042:	65ab      	str	r3, [r5, #88]	; 0x58
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	2205      	movs	r2, #5
 800a048:	7819      	ldrb	r1, [r3, #0]
 800a04a:	485d      	ldr	r0, [pc, #372]	; (800a1c0 <_vfiprintf_r+0x260>)
 800a04c:	f7fe ffbc 	bl	8008fc8 <memchr>
 800a050:	9b03      	ldr	r3, [sp, #12]
 800a052:	1c5f      	adds	r7, r3, #1
 800a054:	2800      	cmp	r0, #0
 800a056:	d120      	bne.n	800a09a <_vfiprintf_r+0x13a>
 800a058:	682a      	ldr	r2, [r5, #0]
 800a05a:	06d3      	lsls	r3, r2, #27
 800a05c:	d504      	bpl.n	800a068 <_vfiprintf_r+0x108>
 800a05e:	2353      	movs	r3, #83	; 0x53
 800a060:	a904      	add	r1, sp, #16
 800a062:	185b      	adds	r3, r3, r1
 800a064:	2120      	movs	r1, #32
 800a066:	7019      	strb	r1, [r3, #0]
 800a068:	0713      	lsls	r3, r2, #28
 800a06a:	d504      	bpl.n	800a076 <_vfiprintf_r+0x116>
 800a06c:	2353      	movs	r3, #83	; 0x53
 800a06e:	a904      	add	r1, sp, #16
 800a070:	185b      	adds	r3, r3, r1
 800a072:	212b      	movs	r1, #43	; 0x2b
 800a074:	7019      	strb	r1, [r3, #0]
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b2a      	cmp	r3, #42	; 0x2a
 800a07c:	d016      	beq.n	800a0ac <_vfiprintf_r+0x14c>
 800a07e:	2100      	movs	r1, #0
 800a080:	68eb      	ldr	r3, [r5, #12]
 800a082:	9f03      	ldr	r7, [sp, #12]
 800a084:	783a      	ldrb	r2, [r7, #0]
 800a086:	1c78      	adds	r0, r7, #1
 800a088:	3a30      	subs	r2, #48	; 0x30
 800a08a:	4684      	mov	ip, r0
 800a08c:	2a09      	cmp	r2, #9
 800a08e:	d94f      	bls.n	800a130 <_vfiprintf_r+0x1d0>
 800a090:	2900      	cmp	r1, #0
 800a092:	d111      	bne.n	800a0b8 <_vfiprintf_r+0x158>
 800a094:	e017      	b.n	800a0c6 <_vfiprintf_r+0x166>
 800a096:	3701      	adds	r7, #1
 800a098:	e7a9      	b.n	8009fee <_vfiprintf_r+0x8e>
 800a09a:	4b49      	ldr	r3, [pc, #292]	; (800a1c0 <_vfiprintf_r+0x260>)
 800a09c:	682a      	ldr	r2, [r5, #0]
 800a09e:	1ac0      	subs	r0, r0, r3
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4083      	lsls	r3, r0
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	602b      	str	r3, [r5, #0]
 800a0a8:	9703      	str	r7, [sp, #12]
 800a0aa:	e7cb      	b.n	800a044 <_vfiprintf_r+0xe4>
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	1d19      	adds	r1, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	9107      	str	r1, [sp, #28]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	db01      	blt.n	800a0bc <_vfiprintf_r+0x15c>
 800a0b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0ba:	e004      	b.n	800a0c6 <_vfiprintf_r+0x166>
 800a0bc:	425b      	negs	r3, r3
 800a0be:	60eb      	str	r3, [r5, #12]
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	602b      	str	r3, [r5, #0]
 800a0c6:	783b      	ldrb	r3, [r7, #0]
 800a0c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ca:	d10a      	bne.n	800a0e2 <_vfiprintf_r+0x182>
 800a0cc:	787b      	ldrb	r3, [r7, #1]
 800a0ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d0:	d137      	bne.n	800a142 <_vfiprintf_r+0x1e2>
 800a0d2:	9b07      	ldr	r3, [sp, #28]
 800a0d4:	3702      	adds	r7, #2
 800a0d6:	1d1a      	adds	r2, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	9207      	str	r2, [sp, #28]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	db2d      	blt.n	800a13c <_vfiprintf_r+0x1dc>
 800a0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	7839      	ldrb	r1, [r7, #0]
 800a0e6:	4837      	ldr	r0, [pc, #220]	; (800a1c4 <_vfiprintf_r+0x264>)
 800a0e8:	f7fe ff6e 	bl	8008fc8 <memchr>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d007      	beq.n	800a100 <_vfiprintf_r+0x1a0>
 800a0f0:	4b34      	ldr	r3, [pc, #208]	; (800a1c4 <_vfiprintf_r+0x264>)
 800a0f2:	682a      	ldr	r2, [r5, #0]
 800a0f4:	1ac0      	subs	r0, r0, r3
 800a0f6:	2340      	movs	r3, #64	; 0x40
 800a0f8:	4083      	lsls	r3, r0
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	3701      	adds	r7, #1
 800a0fe:	602b      	str	r3, [r5, #0]
 800a100:	7839      	ldrb	r1, [r7, #0]
 800a102:	1c7b      	adds	r3, r7, #1
 800a104:	2206      	movs	r2, #6
 800a106:	4830      	ldr	r0, [pc, #192]	; (800a1c8 <_vfiprintf_r+0x268>)
 800a108:	9303      	str	r3, [sp, #12]
 800a10a:	7629      	strb	r1, [r5, #24]
 800a10c:	f7fe ff5c 	bl	8008fc8 <memchr>
 800a110:	2800      	cmp	r0, #0
 800a112:	d045      	beq.n	800a1a0 <_vfiprintf_r+0x240>
 800a114:	4b2d      	ldr	r3, [pc, #180]	; (800a1cc <_vfiprintf_r+0x26c>)
 800a116:	2b00      	cmp	r3, #0
 800a118:	d127      	bne.n	800a16a <_vfiprintf_r+0x20a>
 800a11a:	2207      	movs	r2, #7
 800a11c:	9b07      	ldr	r3, [sp, #28]
 800a11e:	3307      	adds	r3, #7
 800a120:	4393      	bics	r3, r2
 800a122:	3308      	adds	r3, #8
 800a124:	9307      	str	r3, [sp, #28]
 800a126:	696b      	ldr	r3, [r5, #20]
 800a128:	9a04      	ldr	r2, [sp, #16]
 800a12a:	189b      	adds	r3, r3, r2
 800a12c:	616b      	str	r3, [r5, #20]
 800a12e:	e75d      	b.n	8009fec <_vfiprintf_r+0x8c>
 800a130:	210a      	movs	r1, #10
 800a132:	434b      	muls	r3, r1
 800a134:	4667      	mov	r7, ip
 800a136:	189b      	adds	r3, r3, r2
 800a138:	3909      	subs	r1, #9
 800a13a:	e7a3      	b.n	800a084 <_vfiprintf_r+0x124>
 800a13c:	2301      	movs	r3, #1
 800a13e:	425b      	negs	r3, r3
 800a140:	e7ce      	b.n	800a0e0 <_vfiprintf_r+0x180>
 800a142:	2300      	movs	r3, #0
 800a144:	001a      	movs	r2, r3
 800a146:	3701      	adds	r7, #1
 800a148:	606b      	str	r3, [r5, #4]
 800a14a:	7839      	ldrb	r1, [r7, #0]
 800a14c:	1c78      	adds	r0, r7, #1
 800a14e:	3930      	subs	r1, #48	; 0x30
 800a150:	4684      	mov	ip, r0
 800a152:	2909      	cmp	r1, #9
 800a154:	d903      	bls.n	800a15e <_vfiprintf_r+0x1fe>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0c3      	beq.n	800a0e2 <_vfiprintf_r+0x182>
 800a15a:	9209      	str	r2, [sp, #36]	; 0x24
 800a15c:	e7c1      	b.n	800a0e2 <_vfiprintf_r+0x182>
 800a15e:	230a      	movs	r3, #10
 800a160:	435a      	muls	r2, r3
 800a162:	4667      	mov	r7, ip
 800a164:	1852      	adds	r2, r2, r1
 800a166:	3b09      	subs	r3, #9
 800a168:	e7ef      	b.n	800a14a <_vfiprintf_r+0x1ea>
 800a16a:	ab07      	add	r3, sp, #28
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	0022      	movs	r2, r4
 800a170:	0029      	movs	r1, r5
 800a172:	0030      	movs	r0, r6
 800a174:	4b16      	ldr	r3, [pc, #88]	; (800a1d0 <_vfiprintf_r+0x270>)
 800a176:	f7fc f819 	bl	80061ac <_printf_float>
 800a17a:	9004      	str	r0, [sp, #16]
 800a17c:	9b04      	ldr	r3, [sp, #16]
 800a17e:	3301      	adds	r3, #1
 800a180:	d1d1      	bne.n	800a126 <_vfiprintf_r+0x1c6>
 800a182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a184:	07db      	lsls	r3, r3, #31
 800a186:	d405      	bmi.n	800a194 <_vfiprintf_r+0x234>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	059b      	lsls	r3, r3, #22
 800a18c:	d402      	bmi.n	800a194 <_vfiprintf_r+0x234>
 800a18e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a190:	f000 fac6 	bl	800a720 <__retarget_lock_release_recursive>
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	065b      	lsls	r3, r3, #25
 800a198:	d500      	bpl.n	800a19c <_vfiprintf_r+0x23c>
 800a19a:	e70a      	b.n	8009fb2 <_vfiprintf_r+0x52>
 800a19c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a19e:	e70a      	b.n	8009fb6 <_vfiprintf_r+0x56>
 800a1a0:	ab07      	add	r3, sp, #28
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	0022      	movs	r2, r4
 800a1a6:	0029      	movs	r1, r5
 800a1a8:	0030      	movs	r0, r6
 800a1aa:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <_vfiprintf_r+0x270>)
 800a1ac:	f7fc fabc 	bl	8006728 <_printf_i>
 800a1b0:	e7e3      	b.n	800a17a <_vfiprintf_r+0x21a>
 800a1b2:	46c0      	nop			; (mov r8, r8)
 800a1b4:	0800b004 	.word	0x0800b004
 800a1b8:	0800b024 	.word	0x0800b024
 800a1bc:	0800afe4 	.word	0x0800afe4
 800a1c0:	0800af94 	.word	0x0800af94
 800a1c4:	0800af9a 	.word	0x0800af9a
 800a1c8:	0800af9e 	.word	0x0800af9e
 800a1cc:	080061ad 	.word	0x080061ad
 800a1d0:	08009f3b 	.word	0x08009f3b

0800a1d4 <__swbuf_r>:
 800a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d6:	0005      	movs	r5, r0
 800a1d8:	000e      	movs	r6, r1
 800a1da:	0014      	movs	r4, r2
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d004      	beq.n	800a1ea <__swbuf_r+0x16>
 800a1e0:	6983      	ldr	r3, [r0, #24]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <__swbuf_r+0x16>
 800a1e6:	f000 f9f9 	bl	800a5dc <__sinit>
 800a1ea:	4b22      	ldr	r3, [pc, #136]	; (800a274 <__swbuf_r+0xa0>)
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	d12e      	bne.n	800a24e <__swbuf_r+0x7a>
 800a1f0:	686c      	ldr	r4, [r5, #4]
 800a1f2:	69a3      	ldr	r3, [r4, #24]
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	071b      	lsls	r3, r3, #28
 800a1fa:	d532      	bpl.n	800a262 <__swbuf_r+0x8e>
 800a1fc:	6923      	ldr	r3, [r4, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d02f      	beq.n	800a262 <__swbuf_r+0x8e>
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	6922      	ldr	r2, [r4, #16]
 800a206:	b2f7      	uxtb	r7, r6
 800a208:	1a98      	subs	r0, r3, r2
 800a20a:	6963      	ldr	r3, [r4, #20]
 800a20c:	b2f6      	uxtb	r6, r6
 800a20e:	4283      	cmp	r3, r0
 800a210:	dc05      	bgt.n	800a21e <__swbuf_r+0x4a>
 800a212:	0021      	movs	r1, r4
 800a214:	0028      	movs	r0, r5
 800a216:	f000 f93f 	bl	800a498 <_fflush_r>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d127      	bne.n	800a26e <__swbuf_r+0x9a>
 800a21e:	68a3      	ldr	r3, [r4, #8]
 800a220:	3001      	adds	r0, #1
 800a222:	3b01      	subs	r3, #1
 800a224:	60a3      	str	r3, [r4, #8]
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	6022      	str	r2, [r4, #0]
 800a22c:	701f      	strb	r7, [r3, #0]
 800a22e:	6963      	ldr	r3, [r4, #20]
 800a230:	4283      	cmp	r3, r0
 800a232:	d004      	beq.n	800a23e <__swbuf_r+0x6a>
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	07db      	lsls	r3, r3, #31
 800a238:	d507      	bpl.n	800a24a <__swbuf_r+0x76>
 800a23a:	2e0a      	cmp	r6, #10
 800a23c:	d105      	bne.n	800a24a <__swbuf_r+0x76>
 800a23e:	0021      	movs	r1, r4
 800a240:	0028      	movs	r0, r5
 800a242:	f000 f929 	bl	800a498 <_fflush_r>
 800a246:	2800      	cmp	r0, #0
 800a248:	d111      	bne.n	800a26e <__swbuf_r+0x9a>
 800a24a:	0030      	movs	r0, r6
 800a24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a24e:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <__swbuf_r+0xa4>)
 800a250:	429c      	cmp	r4, r3
 800a252:	d101      	bne.n	800a258 <__swbuf_r+0x84>
 800a254:	68ac      	ldr	r4, [r5, #8]
 800a256:	e7cc      	b.n	800a1f2 <__swbuf_r+0x1e>
 800a258:	4b08      	ldr	r3, [pc, #32]	; (800a27c <__swbuf_r+0xa8>)
 800a25a:	429c      	cmp	r4, r3
 800a25c:	d1c9      	bne.n	800a1f2 <__swbuf_r+0x1e>
 800a25e:	68ec      	ldr	r4, [r5, #12]
 800a260:	e7c7      	b.n	800a1f2 <__swbuf_r+0x1e>
 800a262:	0021      	movs	r1, r4
 800a264:	0028      	movs	r0, r5
 800a266:	f000 f80b 	bl	800a280 <__swsetup_r>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d0c9      	beq.n	800a202 <__swbuf_r+0x2e>
 800a26e:	2601      	movs	r6, #1
 800a270:	4276      	negs	r6, r6
 800a272:	e7ea      	b.n	800a24a <__swbuf_r+0x76>
 800a274:	0800b004 	.word	0x0800b004
 800a278:	0800b024 	.word	0x0800b024
 800a27c:	0800afe4 	.word	0x0800afe4

0800a280 <__swsetup_r>:
 800a280:	4b37      	ldr	r3, [pc, #220]	; (800a360 <__swsetup_r+0xe0>)
 800a282:	b570      	push	{r4, r5, r6, lr}
 800a284:	681d      	ldr	r5, [r3, #0]
 800a286:	0006      	movs	r6, r0
 800a288:	000c      	movs	r4, r1
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	d005      	beq.n	800a29a <__swsetup_r+0x1a>
 800a28e:	69ab      	ldr	r3, [r5, #24]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d102      	bne.n	800a29a <__swsetup_r+0x1a>
 800a294:	0028      	movs	r0, r5
 800a296:	f000 f9a1 	bl	800a5dc <__sinit>
 800a29a:	4b32      	ldr	r3, [pc, #200]	; (800a364 <__swsetup_r+0xe4>)
 800a29c:	429c      	cmp	r4, r3
 800a29e:	d10f      	bne.n	800a2c0 <__swsetup_r+0x40>
 800a2a0:	686c      	ldr	r4, [r5, #4]
 800a2a2:	230c      	movs	r3, #12
 800a2a4:	5ee2      	ldrsh	r2, [r4, r3]
 800a2a6:	b293      	uxth	r3, r2
 800a2a8:	0711      	lsls	r1, r2, #28
 800a2aa:	d42d      	bmi.n	800a308 <__swsetup_r+0x88>
 800a2ac:	06d9      	lsls	r1, r3, #27
 800a2ae:	d411      	bmi.n	800a2d4 <__swsetup_r+0x54>
 800a2b0:	2309      	movs	r3, #9
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	6033      	str	r3, [r6, #0]
 800a2b6:	3337      	adds	r3, #55	; 0x37
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	4240      	negs	r0, r0
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	4b29      	ldr	r3, [pc, #164]	; (800a368 <__swsetup_r+0xe8>)
 800a2c2:	429c      	cmp	r4, r3
 800a2c4:	d101      	bne.n	800a2ca <__swsetup_r+0x4a>
 800a2c6:	68ac      	ldr	r4, [r5, #8]
 800a2c8:	e7eb      	b.n	800a2a2 <__swsetup_r+0x22>
 800a2ca:	4b28      	ldr	r3, [pc, #160]	; (800a36c <__swsetup_r+0xec>)
 800a2cc:	429c      	cmp	r4, r3
 800a2ce:	d1e8      	bne.n	800a2a2 <__swsetup_r+0x22>
 800a2d0:	68ec      	ldr	r4, [r5, #12]
 800a2d2:	e7e6      	b.n	800a2a2 <__swsetup_r+0x22>
 800a2d4:	075b      	lsls	r3, r3, #29
 800a2d6:	d513      	bpl.n	800a300 <__swsetup_r+0x80>
 800a2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2da:	2900      	cmp	r1, #0
 800a2dc:	d008      	beq.n	800a2f0 <__swsetup_r+0x70>
 800a2de:	0023      	movs	r3, r4
 800a2e0:	3344      	adds	r3, #68	; 0x44
 800a2e2:	4299      	cmp	r1, r3
 800a2e4:	d002      	beq.n	800a2ec <__swsetup_r+0x6c>
 800a2e6:	0030      	movs	r0, r6
 800a2e8:	f7ff fb5a 	bl	80099a0 <_free_r>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	6363      	str	r3, [r4, #52]	; 0x34
 800a2f0:	2224      	movs	r2, #36	; 0x24
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	4393      	bics	r3, r2
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	6063      	str	r3, [r4, #4]
 800a2fc:	6923      	ldr	r3, [r4, #16]
 800a2fe:	6023      	str	r3, [r4, #0]
 800a300:	2308      	movs	r3, #8
 800a302:	89a2      	ldrh	r2, [r4, #12]
 800a304:	4313      	orrs	r3, r2
 800a306:	81a3      	strh	r3, [r4, #12]
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10b      	bne.n	800a326 <__swsetup_r+0xa6>
 800a30e:	21a0      	movs	r1, #160	; 0xa0
 800a310:	2280      	movs	r2, #128	; 0x80
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	0089      	lsls	r1, r1, #2
 800a316:	0092      	lsls	r2, r2, #2
 800a318:	400b      	ands	r3, r1
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d003      	beq.n	800a326 <__swsetup_r+0xa6>
 800a31e:	0021      	movs	r1, r4
 800a320:	0030      	movs	r0, r6
 800a322:	f000 fa27 	bl	800a774 <__smakebuf_r>
 800a326:	220c      	movs	r2, #12
 800a328:	5ea3      	ldrsh	r3, [r4, r2]
 800a32a:	2001      	movs	r0, #1
 800a32c:	001a      	movs	r2, r3
 800a32e:	b299      	uxth	r1, r3
 800a330:	4002      	ands	r2, r0
 800a332:	4203      	tst	r3, r0
 800a334:	d00f      	beq.n	800a356 <__swsetup_r+0xd6>
 800a336:	2200      	movs	r2, #0
 800a338:	60a2      	str	r2, [r4, #8]
 800a33a:	6962      	ldr	r2, [r4, #20]
 800a33c:	4252      	negs	r2, r2
 800a33e:	61a2      	str	r2, [r4, #24]
 800a340:	2000      	movs	r0, #0
 800a342:	6922      	ldr	r2, [r4, #16]
 800a344:	4282      	cmp	r2, r0
 800a346:	d1ba      	bne.n	800a2be <__swsetup_r+0x3e>
 800a348:	060a      	lsls	r2, r1, #24
 800a34a:	d5b8      	bpl.n	800a2be <__swsetup_r+0x3e>
 800a34c:	2240      	movs	r2, #64	; 0x40
 800a34e:	4313      	orrs	r3, r2
 800a350:	81a3      	strh	r3, [r4, #12]
 800a352:	3801      	subs	r0, #1
 800a354:	e7b3      	b.n	800a2be <__swsetup_r+0x3e>
 800a356:	0788      	lsls	r0, r1, #30
 800a358:	d400      	bmi.n	800a35c <__swsetup_r+0xdc>
 800a35a:	6962      	ldr	r2, [r4, #20]
 800a35c:	60a2      	str	r2, [r4, #8]
 800a35e:	e7ef      	b.n	800a340 <__swsetup_r+0xc0>
 800a360:	20000020 	.word	0x20000020
 800a364:	0800b004 	.word	0x0800b004
 800a368:	0800b024 	.word	0x0800b024
 800a36c:	0800afe4 	.word	0x0800afe4

0800a370 <abort>:
 800a370:	2006      	movs	r0, #6
 800a372:	b510      	push	{r4, lr}
 800a374:	f000 fa74 	bl	800a860 <raise>
 800a378:	2001      	movs	r0, #1
 800a37a:	f7f8 fe85 	bl	8003088 <_exit>
	...

0800a380 <__sflush_r>:
 800a380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a382:	898b      	ldrh	r3, [r1, #12]
 800a384:	0005      	movs	r5, r0
 800a386:	000c      	movs	r4, r1
 800a388:	071a      	lsls	r2, r3, #28
 800a38a:	d45f      	bmi.n	800a44c <__sflush_r+0xcc>
 800a38c:	684a      	ldr	r2, [r1, #4]
 800a38e:	2a00      	cmp	r2, #0
 800a390:	dc04      	bgt.n	800a39c <__sflush_r+0x1c>
 800a392:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a394:	2a00      	cmp	r2, #0
 800a396:	dc01      	bgt.n	800a39c <__sflush_r+0x1c>
 800a398:	2000      	movs	r0, #0
 800a39a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a39c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a39e:	2f00      	cmp	r7, #0
 800a3a0:	d0fa      	beq.n	800a398 <__sflush_r+0x18>
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2180      	movs	r1, #128	; 0x80
 800a3a6:	682e      	ldr	r6, [r5, #0]
 800a3a8:	602a      	str	r2, [r5, #0]
 800a3aa:	001a      	movs	r2, r3
 800a3ac:	0149      	lsls	r1, r1, #5
 800a3ae:	400a      	ands	r2, r1
 800a3b0:	420b      	tst	r3, r1
 800a3b2:	d034      	beq.n	800a41e <__sflush_r+0x9e>
 800a3b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	075b      	lsls	r3, r3, #29
 800a3ba:	d506      	bpl.n	800a3ca <__sflush_r+0x4a>
 800a3bc:	6863      	ldr	r3, [r4, #4]
 800a3be:	1ac0      	subs	r0, r0, r3
 800a3c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <__sflush_r+0x4a>
 800a3c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3c8:	1ac0      	subs	r0, r0, r3
 800a3ca:	0002      	movs	r2, r0
 800a3cc:	6a21      	ldr	r1, [r4, #32]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	0028      	movs	r0, r5
 800a3d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a3d4:	47b8      	blx	r7
 800a3d6:	89a1      	ldrh	r1, [r4, #12]
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d106      	bne.n	800a3ea <__sflush_r+0x6a>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	2b1d      	cmp	r3, #29
 800a3e0:	d831      	bhi.n	800a446 <__sflush_r+0xc6>
 800a3e2:	4a2c      	ldr	r2, [pc, #176]	; (800a494 <__sflush_r+0x114>)
 800a3e4:	40da      	lsrs	r2, r3
 800a3e6:	07d3      	lsls	r3, r2, #31
 800a3e8:	d52d      	bpl.n	800a446 <__sflush_r+0xc6>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	6063      	str	r3, [r4, #4]
 800a3ee:	6923      	ldr	r3, [r4, #16]
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	04cb      	lsls	r3, r1, #19
 800a3f4:	d505      	bpl.n	800a402 <__sflush_r+0x82>
 800a3f6:	1c43      	adds	r3, r0, #1
 800a3f8:	d102      	bne.n	800a400 <__sflush_r+0x80>
 800a3fa:	682b      	ldr	r3, [r5, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d100      	bne.n	800a402 <__sflush_r+0x82>
 800a400:	6560      	str	r0, [r4, #84]	; 0x54
 800a402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a404:	602e      	str	r6, [r5, #0]
 800a406:	2900      	cmp	r1, #0
 800a408:	d0c6      	beq.n	800a398 <__sflush_r+0x18>
 800a40a:	0023      	movs	r3, r4
 800a40c:	3344      	adds	r3, #68	; 0x44
 800a40e:	4299      	cmp	r1, r3
 800a410:	d002      	beq.n	800a418 <__sflush_r+0x98>
 800a412:	0028      	movs	r0, r5
 800a414:	f7ff fac4 	bl	80099a0 <_free_r>
 800a418:	2000      	movs	r0, #0
 800a41a:	6360      	str	r0, [r4, #52]	; 0x34
 800a41c:	e7bd      	b.n	800a39a <__sflush_r+0x1a>
 800a41e:	2301      	movs	r3, #1
 800a420:	0028      	movs	r0, r5
 800a422:	6a21      	ldr	r1, [r4, #32]
 800a424:	47b8      	blx	r7
 800a426:	1c43      	adds	r3, r0, #1
 800a428:	d1c5      	bne.n	800a3b6 <__sflush_r+0x36>
 800a42a:	682b      	ldr	r3, [r5, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d0c2      	beq.n	800a3b6 <__sflush_r+0x36>
 800a430:	2b1d      	cmp	r3, #29
 800a432:	d001      	beq.n	800a438 <__sflush_r+0xb8>
 800a434:	2b16      	cmp	r3, #22
 800a436:	d101      	bne.n	800a43c <__sflush_r+0xbc>
 800a438:	602e      	str	r6, [r5, #0]
 800a43a:	e7ad      	b.n	800a398 <__sflush_r+0x18>
 800a43c:	2340      	movs	r3, #64	; 0x40
 800a43e:	89a2      	ldrh	r2, [r4, #12]
 800a440:	4313      	orrs	r3, r2
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	e7a9      	b.n	800a39a <__sflush_r+0x1a>
 800a446:	2340      	movs	r3, #64	; 0x40
 800a448:	430b      	orrs	r3, r1
 800a44a:	e7fa      	b.n	800a442 <__sflush_r+0xc2>
 800a44c:	690f      	ldr	r7, [r1, #16]
 800a44e:	2f00      	cmp	r7, #0
 800a450:	d0a2      	beq.n	800a398 <__sflush_r+0x18>
 800a452:	680a      	ldr	r2, [r1, #0]
 800a454:	600f      	str	r7, [r1, #0]
 800a456:	1bd2      	subs	r2, r2, r7
 800a458:	9201      	str	r2, [sp, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	079b      	lsls	r3, r3, #30
 800a45e:	d100      	bne.n	800a462 <__sflush_r+0xe2>
 800a460:	694a      	ldr	r2, [r1, #20]
 800a462:	60a2      	str	r2, [r4, #8]
 800a464:	9b01      	ldr	r3, [sp, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	dc00      	bgt.n	800a46c <__sflush_r+0xec>
 800a46a:	e795      	b.n	800a398 <__sflush_r+0x18>
 800a46c:	003a      	movs	r2, r7
 800a46e:	0028      	movs	r0, r5
 800a470:	9b01      	ldr	r3, [sp, #4]
 800a472:	6a21      	ldr	r1, [r4, #32]
 800a474:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a476:	47b0      	blx	r6
 800a478:	2800      	cmp	r0, #0
 800a47a:	dc06      	bgt.n	800a48a <__sflush_r+0x10a>
 800a47c:	2340      	movs	r3, #64	; 0x40
 800a47e:	2001      	movs	r0, #1
 800a480:	89a2      	ldrh	r2, [r4, #12]
 800a482:	4240      	negs	r0, r0
 800a484:	4313      	orrs	r3, r2
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	e787      	b.n	800a39a <__sflush_r+0x1a>
 800a48a:	9b01      	ldr	r3, [sp, #4]
 800a48c:	183f      	adds	r7, r7, r0
 800a48e:	1a1b      	subs	r3, r3, r0
 800a490:	9301      	str	r3, [sp, #4]
 800a492:	e7e7      	b.n	800a464 <__sflush_r+0xe4>
 800a494:	20400001 	.word	0x20400001

0800a498 <_fflush_r>:
 800a498:	690b      	ldr	r3, [r1, #16]
 800a49a:	b570      	push	{r4, r5, r6, lr}
 800a49c:	0005      	movs	r5, r0
 800a49e:	000c      	movs	r4, r1
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <_fflush_r+0x12>
 800a4a4:	2500      	movs	r5, #0
 800a4a6:	0028      	movs	r0, r5
 800a4a8:	bd70      	pop	{r4, r5, r6, pc}
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d004      	beq.n	800a4b8 <_fflush_r+0x20>
 800a4ae:	6983      	ldr	r3, [r0, #24]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <_fflush_r+0x20>
 800a4b4:	f000 f892 	bl	800a5dc <__sinit>
 800a4b8:	4b14      	ldr	r3, [pc, #80]	; (800a50c <_fflush_r+0x74>)
 800a4ba:	429c      	cmp	r4, r3
 800a4bc:	d11b      	bne.n	800a4f6 <_fflush_r+0x5e>
 800a4be:	686c      	ldr	r4, [r5, #4]
 800a4c0:	220c      	movs	r2, #12
 800a4c2:	5ea3      	ldrsh	r3, [r4, r2]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d0ed      	beq.n	800a4a4 <_fflush_r+0xc>
 800a4c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4ca:	07d2      	lsls	r2, r2, #31
 800a4cc:	d404      	bmi.n	800a4d8 <_fflush_r+0x40>
 800a4ce:	059b      	lsls	r3, r3, #22
 800a4d0:	d402      	bmi.n	800a4d8 <_fflush_r+0x40>
 800a4d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4d4:	f000 f923 	bl	800a71e <__retarget_lock_acquire_recursive>
 800a4d8:	0028      	movs	r0, r5
 800a4da:	0021      	movs	r1, r4
 800a4dc:	f7ff ff50 	bl	800a380 <__sflush_r>
 800a4e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4e2:	0005      	movs	r5, r0
 800a4e4:	07db      	lsls	r3, r3, #31
 800a4e6:	d4de      	bmi.n	800a4a6 <_fflush_r+0xe>
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	059b      	lsls	r3, r3, #22
 800a4ec:	d4db      	bmi.n	800a4a6 <_fflush_r+0xe>
 800a4ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4f0:	f000 f916 	bl	800a720 <__retarget_lock_release_recursive>
 800a4f4:	e7d7      	b.n	800a4a6 <_fflush_r+0xe>
 800a4f6:	4b06      	ldr	r3, [pc, #24]	; (800a510 <_fflush_r+0x78>)
 800a4f8:	429c      	cmp	r4, r3
 800a4fa:	d101      	bne.n	800a500 <_fflush_r+0x68>
 800a4fc:	68ac      	ldr	r4, [r5, #8]
 800a4fe:	e7df      	b.n	800a4c0 <_fflush_r+0x28>
 800a500:	4b04      	ldr	r3, [pc, #16]	; (800a514 <_fflush_r+0x7c>)
 800a502:	429c      	cmp	r4, r3
 800a504:	d1dc      	bne.n	800a4c0 <_fflush_r+0x28>
 800a506:	68ec      	ldr	r4, [r5, #12]
 800a508:	e7da      	b.n	800a4c0 <_fflush_r+0x28>
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	0800b004 	.word	0x0800b004
 800a510:	0800b024 	.word	0x0800b024
 800a514:	0800afe4 	.word	0x0800afe4

0800a518 <std>:
 800a518:	2300      	movs	r3, #0
 800a51a:	b510      	push	{r4, lr}
 800a51c:	0004      	movs	r4, r0
 800a51e:	6003      	str	r3, [r0, #0]
 800a520:	6043      	str	r3, [r0, #4]
 800a522:	6083      	str	r3, [r0, #8]
 800a524:	8181      	strh	r1, [r0, #12]
 800a526:	6643      	str	r3, [r0, #100]	; 0x64
 800a528:	0019      	movs	r1, r3
 800a52a:	81c2      	strh	r2, [r0, #14]
 800a52c:	6103      	str	r3, [r0, #16]
 800a52e:	6143      	str	r3, [r0, #20]
 800a530:	6183      	str	r3, [r0, #24]
 800a532:	2208      	movs	r2, #8
 800a534:	305c      	adds	r0, #92	; 0x5c
 800a536:	f7fb fd87 	bl	8006048 <memset>
 800a53a:	4b05      	ldr	r3, [pc, #20]	; (800a550 <std+0x38>)
 800a53c:	6263      	str	r3, [r4, #36]	; 0x24
 800a53e:	4b05      	ldr	r3, [pc, #20]	; (800a554 <std+0x3c>)
 800a540:	6224      	str	r4, [r4, #32]
 800a542:	62a3      	str	r3, [r4, #40]	; 0x28
 800a544:	4b04      	ldr	r3, [pc, #16]	; (800a558 <std+0x40>)
 800a546:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a548:	4b04      	ldr	r3, [pc, #16]	; (800a55c <std+0x44>)
 800a54a:	6323      	str	r3, [r4, #48]	; 0x30
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	0800a8a1 	.word	0x0800a8a1
 800a554:	0800a8c9 	.word	0x0800a8c9
 800a558:	0800a901 	.word	0x0800a901
 800a55c:	0800a92d 	.word	0x0800a92d

0800a560 <_cleanup_r>:
 800a560:	b510      	push	{r4, lr}
 800a562:	4902      	ldr	r1, [pc, #8]	; (800a56c <_cleanup_r+0xc>)
 800a564:	f000 f8ba 	bl	800a6dc <_fwalk_reent>
 800a568:	bd10      	pop	{r4, pc}
 800a56a:	46c0      	nop			; (mov r8, r8)
 800a56c:	0800a499 	.word	0x0800a499

0800a570 <__sfmoreglue>:
 800a570:	b570      	push	{r4, r5, r6, lr}
 800a572:	2568      	movs	r5, #104	; 0x68
 800a574:	1e4a      	subs	r2, r1, #1
 800a576:	4355      	muls	r5, r2
 800a578:	000e      	movs	r6, r1
 800a57a:	0029      	movs	r1, r5
 800a57c:	3174      	adds	r1, #116	; 0x74
 800a57e:	f7ff fa59 	bl	8009a34 <_malloc_r>
 800a582:	1e04      	subs	r4, r0, #0
 800a584:	d008      	beq.n	800a598 <__sfmoreglue+0x28>
 800a586:	2100      	movs	r1, #0
 800a588:	002a      	movs	r2, r5
 800a58a:	6001      	str	r1, [r0, #0]
 800a58c:	6046      	str	r6, [r0, #4]
 800a58e:	300c      	adds	r0, #12
 800a590:	60a0      	str	r0, [r4, #8]
 800a592:	3268      	adds	r2, #104	; 0x68
 800a594:	f7fb fd58 	bl	8006048 <memset>
 800a598:	0020      	movs	r0, r4
 800a59a:	bd70      	pop	{r4, r5, r6, pc}

0800a59c <__sfp_lock_acquire>:
 800a59c:	b510      	push	{r4, lr}
 800a59e:	4802      	ldr	r0, [pc, #8]	; (800a5a8 <__sfp_lock_acquire+0xc>)
 800a5a0:	f000 f8bd 	bl	800a71e <__retarget_lock_acquire_recursive>
 800a5a4:	bd10      	pop	{r4, pc}
 800a5a6:	46c0      	nop			; (mov r8, r8)
 800a5a8:	20000c0c 	.word	0x20000c0c

0800a5ac <__sfp_lock_release>:
 800a5ac:	b510      	push	{r4, lr}
 800a5ae:	4802      	ldr	r0, [pc, #8]	; (800a5b8 <__sfp_lock_release+0xc>)
 800a5b0:	f000 f8b6 	bl	800a720 <__retarget_lock_release_recursive>
 800a5b4:	bd10      	pop	{r4, pc}
 800a5b6:	46c0      	nop			; (mov r8, r8)
 800a5b8:	20000c0c 	.word	0x20000c0c

0800a5bc <__sinit_lock_acquire>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	4802      	ldr	r0, [pc, #8]	; (800a5c8 <__sinit_lock_acquire+0xc>)
 800a5c0:	f000 f8ad 	bl	800a71e <__retarget_lock_acquire_recursive>
 800a5c4:	bd10      	pop	{r4, pc}
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	20000c07 	.word	0x20000c07

0800a5cc <__sinit_lock_release>:
 800a5cc:	b510      	push	{r4, lr}
 800a5ce:	4802      	ldr	r0, [pc, #8]	; (800a5d8 <__sinit_lock_release+0xc>)
 800a5d0:	f000 f8a6 	bl	800a720 <__retarget_lock_release_recursive>
 800a5d4:	bd10      	pop	{r4, pc}
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	20000c07 	.word	0x20000c07

0800a5dc <__sinit>:
 800a5dc:	b513      	push	{r0, r1, r4, lr}
 800a5de:	0004      	movs	r4, r0
 800a5e0:	f7ff ffec 	bl	800a5bc <__sinit_lock_acquire>
 800a5e4:	69a3      	ldr	r3, [r4, #24]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <__sinit+0x14>
 800a5ea:	f7ff ffef 	bl	800a5cc <__sinit_lock_release>
 800a5ee:	bd13      	pop	{r0, r1, r4, pc}
 800a5f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800a5f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a5f4:	6523      	str	r3, [r4, #80]	; 0x50
 800a5f6:	4b13      	ldr	r3, [pc, #76]	; (800a644 <__sinit+0x68>)
 800a5f8:	4a13      	ldr	r2, [pc, #76]	; (800a648 <__sinit+0x6c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	42a3      	cmp	r3, r4
 800a602:	d101      	bne.n	800a608 <__sinit+0x2c>
 800a604:	2301      	movs	r3, #1
 800a606:	61a3      	str	r3, [r4, #24]
 800a608:	0020      	movs	r0, r4
 800a60a:	f000 f81f 	bl	800a64c <__sfp>
 800a60e:	6060      	str	r0, [r4, #4]
 800a610:	0020      	movs	r0, r4
 800a612:	f000 f81b 	bl	800a64c <__sfp>
 800a616:	60a0      	str	r0, [r4, #8]
 800a618:	0020      	movs	r0, r4
 800a61a:	f000 f817 	bl	800a64c <__sfp>
 800a61e:	2200      	movs	r2, #0
 800a620:	2104      	movs	r1, #4
 800a622:	60e0      	str	r0, [r4, #12]
 800a624:	6860      	ldr	r0, [r4, #4]
 800a626:	f7ff ff77 	bl	800a518 <std>
 800a62a:	2201      	movs	r2, #1
 800a62c:	2109      	movs	r1, #9
 800a62e:	68a0      	ldr	r0, [r4, #8]
 800a630:	f7ff ff72 	bl	800a518 <std>
 800a634:	2202      	movs	r2, #2
 800a636:	2112      	movs	r1, #18
 800a638:	68e0      	ldr	r0, [r4, #12]
 800a63a:	f7ff ff6d 	bl	800a518 <std>
 800a63e:	2301      	movs	r3, #1
 800a640:	61a3      	str	r3, [r4, #24]
 800a642:	e7d2      	b.n	800a5ea <__sinit+0xe>
 800a644:	0800ab8c 	.word	0x0800ab8c
 800a648:	0800a561 	.word	0x0800a561

0800a64c <__sfp>:
 800a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64e:	0007      	movs	r7, r0
 800a650:	f7ff ffa4 	bl	800a59c <__sfp_lock_acquire>
 800a654:	4b1f      	ldr	r3, [pc, #124]	; (800a6d4 <__sfp+0x88>)
 800a656:	681e      	ldr	r6, [r3, #0]
 800a658:	69b3      	ldr	r3, [r6, #24]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d102      	bne.n	800a664 <__sfp+0x18>
 800a65e:	0030      	movs	r0, r6
 800a660:	f7ff ffbc 	bl	800a5dc <__sinit>
 800a664:	3648      	adds	r6, #72	; 0x48
 800a666:	68b4      	ldr	r4, [r6, #8]
 800a668:	6873      	ldr	r3, [r6, #4]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	d504      	bpl.n	800a678 <__sfp+0x2c>
 800a66e:	6833      	ldr	r3, [r6, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d022      	beq.n	800a6ba <__sfp+0x6e>
 800a674:	6836      	ldr	r6, [r6, #0]
 800a676:	e7f6      	b.n	800a666 <__sfp+0x1a>
 800a678:	220c      	movs	r2, #12
 800a67a:	5ea5      	ldrsh	r5, [r4, r2]
 800a67c:	2d00      	cmp	r5, #0
 800a67e:	d11a      	bne.n	800a6b6 <__sfp+0x6a>
 800a680:	0020      	movs	r0, r4
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <__sfp+0x8c>)
 800a684:	3058      	adds	r0, #88	; 0x58
 800a686:	60e3      	str	r3, [r4, #12]
 800a688:	6665      	str	r5, [r4, #100]	; 0x64
 800a68a:	f000 f847 	bl	800a71c <__retarget_lock_init_recursive>
 800a68e:	f7ff ff8d 	bl	800a5ac <__sfp_lock_release>
 800a692:	0020      	movs	r0, r4
 800a694:	2208      	movs	r2, #8
 800a696:	0029      	movs	r1, r5
 800a698:	6025      	str	r5, [r4, #0]
 800a69a:	60a5      	str	r5, [r4, #8]
 800a69c:	6065      	str	r5, [r4, #4]
 800a69e:	6125      	str	r5, [r4, #16]
 800a6a0:	6165      	str	r5, [r4, #20]
 800a6a2:	61a5      	str	r5, [r4, #24]
 800a6a4:	305c      	adds	r0, #92	; 0x5c
 800a6a6:	f7fb fccf 	bl	8006048 <memset>
 800a6aa:	6365      	str	r5, [r4, #52]	; 0x34
 800a6ac:	63a5      	str	r5, [r4, #56]	; 0x38
 800a6ae:	64a5      	str	r5, [r4, #72]	; 0x48
 800a6b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a6b2:	0020      	movs	r0, r4
 800a6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b6:	3468      	adds	r4, #104	; 0x68
 800a6b8:	e7d7      	b.n	800a66a <__sfp+0x1e>
 800a6ba:	2104      	movs	r1, #4
 800a6bc:	0038      	movs	r0, r7
 800a6be:	f7ff ff57 	bl	800a570 <__sfmoreglue>
 800a6c2:	1e04      	subs	r4, r0, #0
 800a6c4:	6030      	str	r0, [r6, #0]
 800a6c6:	d1d5      	bne.n	800a674 <__sfp+0x28>
 800a6c8:	f7ff ff70 	bl	800a5ac <__sfp_lock_release>
 800a6cc:	230c      	movs	r3, #12
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	e7ef      	b.n	800a6b2 <__sfp+0x66>
 800a6d2:	46c0      	nop			; (mov r8, r8)
 800a6d4:	0800ab8c 	.word	0x0800ab8c
 800a6d8:	ffff0001 	.word	0xffff0001

0800a6dc <_fwalk_reent>:
 800a6dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6de:	0004      	movs	r4, r0
 800a6e0:	0006      	movs	r6, r0
 800a6e2:	2700      	movs	r7, #0
 800a6e4:	9101      	str	r1, [sp, #4]
 800a6e6:	3448      	adds	r4, #72	; 0x48
 800a6e8:	6863      	ldr	r3, [r4, #4]
 800a6ea:	68a5      	ldr	r5, [r4, #8]
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	9b00      	ldr	r3, [sp, #0]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	d504      	bpl.n	800a700 <_fwalk_reent+0x24>
 800a6f6:	6824      	ldr	r4, [r4, #0]
 800a6f8:	2c00      	cmp	r4, #0
 800a6fa:	d1f5      	bne.n	800a6e8 <_fwalk_reent+0xc>
 800a6fc:	0038      	movs	r0, r7
 800a6fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a700:	89ab      	ldrh	r3, [r5, #12]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d908      	bls.n	800a718 <_fwalk_reent+0x3c>
 800a706:	220e      	movs	r2, #14
 800a708:	5eab      	ldrsh	r3, [r5, r2]
 800a70a:	3301      	adds	r3, #1
 800a70c:	d004      	beq.n	800a718 <_fwalk_reent+0x3c>
 800a70e:	0029      	movs	r1, r5
 800a710:	0030      	movs	r0, r6
 800a712:	9b01      	ldr	r3, [sp, #4]
 800a714:	4798      	blx	r3
 800a716:	4307      	orrs	r7, r0
 800a718:	3568      	adds	r5, #104	; 0x68
 800a71a:	e7e8      	b.n	800a6ee <_fwalk_reent+0x12>

0800a71c <__retarget_lock_init_recursive>:
 800a71c:	4770      	bx	lr

0800a71e <__retarget_lock_acquire_recursive>:
 800a71e:	4770      	bx	lr

0800a720 <__retarget_lock_release_recursive>:
 800a720:	4770      	bx	lr
	...

0800a724 <__swhatbuf_r>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	000e      	movs	r6, r1
 800a728:	001d      	movs	r5, r3
 800a72a:	230e      	movs	r3, #14
 800a72c:	5ec9      	ldrsh	r1, [r1, r3]
 800a72e:	0014      	movs	r4, r2
 800a730:	b096      	sub	sp, #88	; 0x58
 800a732:	2900      	cmp	r1, #0
 800a734:	da07      	bge.n	800a746 <__swhatbuf_r+0x22>
 800a736:	2300      	movs	r3, #0
 800a738:	602b      	str	r3, [r5, #0]
 800a73a:	89b3      	ldrh	r3, [r6, #12]
 800a73c:	061b      	lsls	r3, r3, #24
 800a73e:	d411      	bmi.n	800a764 <__swhatbuf_r+0x40>
 800a740:	2380      	movs	r3, #128	; 0x80
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	e00f      	b.n	800a766 <__swhatbuf_r+0x42>
 800a746:	466a      	mov	r2, sp
 800a748:	f000 f91c 	bl	800a984 <_fstat_r>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	dbf2      	blt.n	800a736 <__swhatbuf_r+0x12>
 800a750:	23f0      	movs	r3, #240	; 0xf0
 800a752:	9901      	ldr	r1, [sp, #4]
 800a754:	021b      	lsls	r3, r3, #8
 800a756:	4019      	ands	r1, r3
 800a758:	4b05      	ldr	r3, [pc, #20]	; (800a770 <__swhatbuf_r+0x4c>)
 800a75a:	18c9      	adds	r1, r1, r3
 800a75c:	424b      	negs	r3, r1
 800a75e:	4159      	adcs	r1, r3
 800a760:	6029      	str	r1, [r5, #0]
 800a762:	e7ed      	b.n	800a740 <__swhatbuf_r+0x1c>
 800a764:	2340      	movs	r3, #64	; 0x40
 800a766:	2000      	movs	r0, #0
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	b016      	add	sp, #88	; 0x58
 800a76c:	bd70      	pop	{r4, r5, r6, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	ffffe000 	.word	0xffffe000

0800a774 <__smakebuf_r>:
 800a774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a776:	2602      	movs	r6, #2
 800a778:	898b      	ldrh	r3, [r1, #12]
 800a77a:	0005      	movs	r5, r0
 800a77c:	000c      	movs	r4, r1
 800a77e:	4233      	tst	r3, r6
 800a780:	d006      	beq.n	800a790 <__smakebuf_r+0x1c>
 800a782:	0023      	movs	r3, r4
 800a784:	3347      	adds	r3, #71	; 0x47
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	6123      	str	r3, [r4, #16]
 800a78a:	2301      	movs	r3, #1
 800a78c:	6163      	str	r3, [r4, #20]
 800a78e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a790:	466a      	mov	r2, sp
 800a792:	ab01      	add	r3, sp, #4
 800a794:	f7ff ffc6 	bl	800a724 <__swhatbuf_r>
 800a798:	9900      	ldr	r1, [sp, #0]
 800a79a:	0007      	movs	r7, r0
 800a79c:	0028      	movs	r0, r5
 800a79e:	f7ff f949 	bl	8009a34 <_malloc_r>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d108      	bne.n	800a7b8 <__smakebuf_r+0x44>
 800a7a6:	220c      	movs	r2, #12
 800a7a8:	5ea3      	ldrsh	r3, [r4, r2]
 800a7aa:	059a      	lsls	r2, r3, #22
 800a7ac:	d4ef      	bmi.n	800a78e <__smakebuf_r+0x1a>
 800a7ae:	2203      	movs	r2, #3
 800a7b0:	4393      	bics	r3, r2
 800a7b2:	431e      	orrs	r6, r3
 800a7b4:	81a6      	strh	r6, [r4, #12]
 800a7b6:	e7e4      	b.n	800a782 <__smakebuf_r+0xe>
 800a7b8:	4b0f      	ldr	r3, [pc, #60]	; (800a7f8 <__smakebuf_r+0x84>)
 800a7ba:	62ab      	str	r3, [r5, #40]	; 0x28
 800a7bc:	2380      	movs	r3, #128	; 0x80
 800a7be:	89a2      	ldrh	r2, [r4, #12]
 800a7c0:	6020      	str	r0, [r4, #0]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	81a3      	strh	r3, [r4, #12]
 800a7c6:	9b00      	ldr	r3, [sp, #0]
 800a7c8:	6120      	str	r0, [r4, #16]
 800a7ca:	6163      	str	r3, [r4, #20]
 800a7cc:	9b01      	ldr	r3, [sp, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00d      	beq.n	800a7ee <__smakebuf_r+0x7a>
 800a7d2:	0028      	movs	r0, r5
 800a7d4:	230e      	movs	r3, #14
 800a7d6:	5ee1      	ldrsh	r1, [r4, r3]
 800a7d8:	f000 f8e6 	bl	800a9a8 <_isatty_r>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d006      	beq.n	800a7ee <__smakebuf_r+0x7a>
 800a7e0:	2203      	movs	r2, #3
 800a7e2:	89a3      	ldrh	r3, [r4, #12]
 800a7e4:	4393      	bics	r3, r2
 800a7e6:	001a      	movs	r2, r3
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	89a0      	ldrh	r0, [r4, #12]
 800a7f0:	4307      	orrs	r7, r0
 800a7f2:	81a7      	strh	r7, [r4, #12]
 800a7f4:	e7cb      	b.n	800a78e <__smakebuf_r+0x1a>
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	0800a561 	.word	0x0800a561

0800a7fc <_malloc_usable_size_r>:
 800a7fc:	1f0b      	subs	r3, r1, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	1f18      	subs	r0, r3, #4
 800a802:	2b00      	cmp	r3, #0
 800a804:	da01      	bge.n	800a80a <_malloc_usable_size_r+0xe>
 800a806:	580b      	ldr	r3, [r1, r0]
 800a808:	18c0      	adds	r0, r0, r3
 800a80a:	4770      	bx	lr

0800a80c <_raise_r>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	0004      	movs	r4, r0
 800a810:	000d      	movs	r5, r1
 800a812:	291f      	cmp	r1, #31
 800a814:	d904      	bls.n	800a820 <_raise_r+0x14>
 800a816:	2316      	movs	r3, #22
 800a818:	6003      	str	r3, [r0, #0]
 800a81a:	2001      	movs	r0, #1
 800a81c:	4240      	negs	r0, r0
 800a81e:	bd70      	pop	{r4, r5, r6, pc}
 800a820:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a822:	2b00      	cmp	r3, #0
 800a824:	d004      	beq.n	800a830 <_raise_r+0x24>
 800a826:	008a      	lsls	r2, r1, #2
 800a828:	189b      	adds	r3, r3, r2
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	2a00      	cmp	r2, #0
 800a82e:	d108      	bne.n	800a842 <_raise_r+0x36>
 800a830:	0020      	movs	r0, r4
 800a832:	f000 f831 	bl	800a898 <_getpid_r>
 800a836:	002a      	movs	r2, r5
 800a838:	0001      	movs	r1, r0
 800a83a:	0020      	movs	r0, r4
 800a83c:	f000 f81a 	bl	800a874 <_kill_r>
 800a840:	e7ed      	b.n	800a81e <_raise_r+0x12>
 800a842:	2000      	movs	r0, #0
 800a844:	2a01      	cmp	r2, #1
 800a846:	d0ea      	beq.n	800a81e <_raise_r+0x12>
 800a848:	1c51      	adds	r1, r2, #1
 800a84a:	d103      	bne.n	800a854 <_raise_r+0x48>
 800a84c:	2316      	movs	r3, #22
 800a84e:	3001      	adds	r0, #1
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	e7e4      	b.n	800a81e <_raise_r+0x12>
 800a854:	2400      	movs	r4, #0
 800a856:	0028      	movs	r0, r5
 800a858:	601c      	str	r4, [r3, #0]
 800a85a:	4790      	blx	r2
 800a85c:	0020      	movs	r0, r4
 800a85e:	e7de      	b.n	800a81e <_raise_r+0x12>

0800a860 <raise>:
 800a860:	b510      	push	{r4, lr}
 800a862:	4b03      	ldr	r3, [pc, #12]	; (800a870 <raise+0x10>)
 800a864:	0001      	movs	r1, r0
 800a866:	6818      	ldr	r0, [r3, #0]
 800a868:	f7ff ffd0 	bl	800a80c <_raise_r>
 800a86c:	bd10      	pop	{r4, pc}
 800a86e:	46c0      	nop			; (mov r8, r8)
 800a870:	20000020 	.word	0x20000020

0800a874 <_kill_r>:
 800a874:	2300      	movs	r3, #0
 800a876:	b570      	push	{r4, r5, r6, lr}
 800a878:	4d06      	ldr	r5, [pc, #24]	; (800a894 <_kill_r+0x20>)
 800a87a:	0004      	movs	r4, r0
 800a87c:	0008      	movs	r0, r1
 800a87e:	0011      	movs	r1, r2
 800a880:	602b      	str	r3, [r5, #0]
 800a882:	f7f8 fbf1 	bl	8003068 <_kill>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	d103      	bne.n	800a892 <_kill_r+0x1e>
 800a88a:	682b      	ldr	r3, [r5, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d000      	beq.n	800a892 <_kill_r+0x1e>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd70      	pop	{r4, r5, r6, pc}
 800a894:	20000c00 	.word	0x20000c00

0800a898 <_getpid_r>:
 800a898:	b510      	push	{r4, lr}
 800a89a:	f7f8 fbdf 	bl	800305c <_getpid>
 800a89e:	bd10      	pop	{r4, pc}

0800a8a0 <__sread>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	000c      	movs	r4, r1
 800a8a4:	250e      	movs	r5, #14
 800a8a6:	5f49      	ldrsh	r1, [r1, r5]
 800a8a8:	f000 f8a4 	bl	800a9f4 <_read_r>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	db03      	blt.n	800a8b8 <__sread+0x18>
 800a8b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a8b2:	181b      	adds	r3, r3, r0
 800a8b4:	6563      	str	r3, [r4, #84]	; 0x54
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	4a02      	ldr	r2, [pc, #8]	; (800a8c4 <__sread+0x24>)
 800a8bc:	4013      	ands	r3, r2
 800a8be:	81a3      	strh	r3, [r4, #12]
 800a8c0:	e7f9      	b.n	800a8b6 <__sread+0x16>
 800a8c2:	46c0      	nop			; (mov r8, r8)
 800a8c4:	ffffefff 	.word	0xffffefff

0800a8c8 <__swrite>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	001f      	movs	r7, r3
 800a8cc:	898b      	ldrh	r3, [r1, #12]
 800a8ce:	0005      	movs	r5, r0
 800a8d0:	000c      	movs	r4, r1
 800a8d2:	0016      	movs	r6, r2
 800a8d4:	05db      	lsls	r3, r3, #23
 800a8d6:	d505      	bpl.n	800a8e4 <__swrite+0x1c>
 800a8d8:	230e      	movs	r3, #14
 800a8da:	5ec9      	ldrsh	r1, [r1, r3]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2302      	movs	r3, #2
 800a8e0:	f000 f874 	bl	800a9cc <_lseek_r>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	4a05      	ldr	r2, [pc, #20]	; (800a8fc <__swrite+0x34>)
 800a8e8:	0028      	movs	r0, r5
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	81a3      	strh	r3, [r4, #12]
 800a8ee:	0032      	movs	r2, r6
 800a8f0:	230e      	movs	r3, #14
 800a8f2:	5ee1      	ldrsh	r1, [r4, r3]
 800a8f4:	003b      	movs	r3, r7
 800a8f6:	f000 f81f 	bl	800a938 <_write_r>
 800a8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fc:	ffffefff 	.word	0xffffefff

0800a900 <__sseek>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	000c      	movs	r4, r1
 800a904:	250e      	movs	r5, #14
 800a906:	5f49      	ldrsh	r1, [r1, r5]
 800a908:	f000 f860 	bl	800a9cc <_lseek_r>
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	1c42      	adds	r2, r0, #1
 800a910:	d103      	bne.n	800a91a <__sseek+0x1a>
 800a912:	4a05      	ldr	r2, [pc, #20]	; (800a928 <__sseek+0x28>)
 800a914:	4013      	ands	r3, r2
 800a916:	81a3      	strh	r3, [r4, #12]
 800a918:	bd70      	pop	{r4, r5, r6, pc}
 800a91a:	2280      	movs	r2, #128	; 0x80
 800a91c:	0152      	lsls	r2, r2, #5
 800a91e:	4313      	orrs	r3, r2
 800a920:	81a3      	strh	r3, [r4, #12]
 800a922:	6560      	str	r0, [r4, #84]	; 0x54
 800a924:	e7f8      	b.n	800a918 <__sseek+0x18>
 800a926:	46c0      	nop			; (mov r8, r8)
 800a928:	ffffefff 	.word	0xffffefff

0800a92c <__sclose>:
 800a92c:	b510      	push	{r4, lr}
 800a92e:	230e      	movs	r3, #14
 800a930:	5ec9      	ldrsh	r1, [r1, r3]
 800a932:	f000 f815 	bl	800a960 <_close_r>
 800a936:	bd10      	pop	{r4, pc}

0800a938 <_write_r>:
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	0004      	movs	r4, r0
 800a93c:	0008      	movs	r0, r1
 800a93e:	0011      	movs	r1, r2
 800a940:	001a      	movs	r2, r3
 800a942:	2300      	movs	r3, #0
 800a944:	4d05      	ldr	r5, [pc, #20]	; (800a95c <_write_r+0x24>)
 800a946:	602b      	str	r3, [r5, #0]
 800a948:	f7f8 fbc7 	bl	80030da <_write>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d103      	bne.n	800a958 <_write_r+0x20>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d000      	beq.n	800a958 <_write_r+0x20>
 800a956:	6023      	str	r3, [r4, #0]
 800a958:	bd70      	pop	{r4, r5, r6, pc}
 800a95a:	46c0      	nop			; (mov r8, r8)
 800a95c:	20000c00 	.word	0x20000c00

0800a960 <_close_r>:
 800a960:	2300      	movs	r3, #0
 800a962:	b570      	push	{r4, r5, r6, lr}
 800a964:	4d06      	ldr	r5, [pc, #24]	; (800a980 <_close_r+0x20>)
 800a966:	0004      	movs	r4, r0
 800a968:	0008      	movs	r0, r1
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	f7f8 fbd1 	bl	8003112 <_close>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d103      	bne.n	800a97c <_close_r+0x1c>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d000      	beq.n	800a97c <_close_r+0x1c>
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	bd70      	pop	{r4, r5, r6, pc}
 800a97e:	46c0      	nop			; (mov r8, r8)
 800a980:	20000c00 	.word	0x20000c00

0800a984 <_fstat_r>:
 800a984:	2300      	movs	r3, #0
 800a986:	b570      	push	{r4, r5, r6, lr}
 800a988:	4d06      	ldr	r5, [pc, #24]	; (800a9a4 <_fstat_r+0x20>)
 800a98a:	0004      	movs	r4, r0
 800a98c:	0008      	movs	r0, r1
 800a98e:	0011      	movs	r1, r2
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	f7f8 fbc8 	bl	8003126 <_fstat>
 800a996:	1c43      	adds	r3, r0, #1
 800a998:	d103      	bne.n	800a9a2 <_fstat_r+0x1e>
 800a99a:	682b      	ldr	r3, [r5, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d000      	beq.n	800a9a2 <_fstat_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	20000c00 	.word	0x20000c00

0800a9a8 <_isatty_r>:
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	b570      	push	{r4, r5, r6, lr}
 800a9ac:	4d06      	ldr	r5, [pc, #24]	; (800a9c8 <_isatty_r+0x20>)
 800a9ae:	0004      	movs	r4, r0
 800a9b0:	0008      	movs	r0, r1
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	f7f8 fbc5 	bl	8003142 <_isatty>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d103      	bne.n	800a9c4 <_isatty_r+0x1c>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d000      	beq.n	800a9c4 <_isatty_r+0x1c>
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	bd70      	pop	{r4, r5, r6, pc}
 800a9c6:	46c0      	nop			; (mov r8, r8)
 800a9c8:	20000c00 	.word	0x20000c00

0800a9cc <_lseek_r>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	0004      	movs	r4, r0
 800a9d0:	0008      	movs	r0, r1
 800a9d2:	0011      	movs	r1, r2
 800a9d4:	001a      	movs	r2, r3
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4d05      	ldr	r5, [pc, #20]	; (800a9f0 <_lseek_r+0x24>)
 800a9da:	602b      	str	r3, [r5, #0]
 800a9dc:	f7f8 fbba 	bl	8003154 <_lseek>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d103      	bne.n	800a9ec <_lseek_r+0x20>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d000      	beq.n	800a9ec <_lseek_r+0x20>
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	bd70      	pop	{r4, r5, r6, pc}
 800a9ee:	46c0      	nop			; (mov r8, r8)
 800a9f0:	20000c00 	.word	0x20000c00

0800a9f4 <_read_r>:
 800a9f4:	b570      	push	{r4, r5, r6, lr}
 800a9f6:	0004      	movs	r4, r0
 800a9f8:	0008      	movs	r0, r1
 800a9fa:	0011      	movs	r1, r2
 800a9fc:	001a      	movs	r2, r3
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4d05      	ldr	r5, [pc, #20]	; (800aa18 <_read_r+0x24>)
 800aa02:	602b      	str	r3, [r5, #0]
 800aa04:	f7f8 fb4c 	bl	80030a0 <_read>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	d103      	bne.n	800aa14 <_read_r+0x20>
 800aa0c:	682b      	ldr	r3, [r5, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d000      	beq.n	800aa14 <_read_r+0x20>
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	bd70      	pop	{r4, r5, r6, pc}
 800aa16:	46c0      	nop			; (mov r8, r8)
 800aa18:	20000c00 	.word	0x20000c00

0800aa1c <_init>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	46c0      	nop			; (mov r8, r8)
 800aa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa22:	bc08      	pop	{r3}
 800aa24:	469e      	mov	lr, r3
 800aa26:	4770      	bx	lr

0800aa28 <_fini>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr
