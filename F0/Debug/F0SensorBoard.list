
F0SensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a948  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800aa08  0800aa08  0001aa08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b024  0800b024  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b024  0800b024  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b024  0800b024  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b024  0800b024  0001b024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b028  0800b028  0001b028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  200001f4  0800b220  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  0800b220  00020c10  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001205a  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc9  00000000  00000000  00032276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00034f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00035fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012db8  00000000  00000000  00036ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148f7  00000000  00000000  00049ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bceb  00000000  00000000  0005e597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd8  00000000  00000000  000ca2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a9f0 	.word	0x0800a9f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	0800a9f0 	.word	0x0800a9f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8f5 	bl	800162c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f83f 	bl	80014d0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8e7 	bl	800162c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8dd 	bl	800162c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f861 	bl	8001548 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f857 	bl	8001548 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 ff41 	bl	8002344 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fb8a 	bl	8001be4 <__aeabi_dsub>
 80004d0:	f001 ff38 	bl	8002344 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f001 f8ef 	bl	800170c <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 ff6c 	bl	8002410 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f001 f8e6 	bl	800170c <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb4c 	bl	8001be4 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 ff25 	bl	80023b0 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f001 f8cf 	bl	800170c <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 ff4c 	bl	8002410 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f956 	bl	800082c <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_fdiv>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	0245      	lsls	r5, r0, #9
 8000592:	b5c0      	push	{r6, r7, lr}
 8000594:	0047      	lsls	r7, r0, #1
 8000596:	1c0c      	adds	r4, r1, #0
 8000598:	0a6d      	lsrs	r5, r5, #9
 800059a:	0e3f      	lsrs	r7, r7, #24
 800059c:	0fc6      	lsrs	r6, r0, #31
 800059e:	2f00      	cmp	r7, #0
 80005a0:	d066      	beq.n	8000670 <__aeabi_fdiv+0xe8>
 80005a2:	2fff      	cmp	r7, #255	; 0xff
 80005a4:	d06c      	beq.n	8000680 <__aeabi_fdiv+0xf8>
 80005a6:	2300      	movs	r3, #0
 80005a8:	00ea      	lsls	r2, r5, #3
 80005aa:	2580      	movs	r5, #128	; 0x80
 80005ac:	4699      	mov	r9, r3
 80005ae:	469a      	mov	sl, r3
 80005b0:	04ed      	lsls	r5, r5, #19
 80005b2:	4315      	orrs	r5, r2
 80005b4:	3f7f      	subs	r7, #127	; 0x7f
 80005b6:	0260      	lsls	r0, r4, #9
 80005b8:	0061      	lsls	r1, r4, #1
 80005ba:	0a43      	lsrs	r3, r0, #9
 80005bc:	4698      	mov	r8, r3
 80005be:	0e09      	lsrs	r1, r1, #24
 80005c0:	0fe4      	lsrs	r4, r4, #31
 80005c2:	2900      	cmp	r1, #0
 80005c4:	d048      	beq.n	8000658 <__aeabi_fdiv+0xd0>
 80005c6:	29ff      	cmp	r1, #255	; 0xff
 80005c8:	d010      	beq.n	80005ec <__aeabi_fdiv+0x64>
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	00d8      	lsls	r0, r3, #3
 80005ce:	04d2      	lsls	r2, r2, #19
 80005d0:	4302      	orrs	r2, r0
 80005d2:	4690      	mov	r8, r2
 80005d4:	2000      	movs	r0, #0
 80005d6:	397f      	subs	r1, #127	; 0x7f
 80005d8:	464a      	mov	r2, r9
 80005da:	0033      	movs	r3, r6
 80005dc:	1a7f      	subs	r7, r7, r1
 80005de:	4302      	orrs	r2, r0
 80005e0:	496c      	ldr	r1, [pc, #432]	; (8000794 <__aeabi_fdiv+0x20c>)
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	588a      	ldr	r2, [r1, r2]
 80005e6:	4063      	eors	r3, r4
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4697      	mov	pc, r2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d16d      	bne.n	80006cc <__aeabi_fdiv+0x144>
 80005f0:	2002      	movs	r0, #2
 80005f2:	3fff      	subs	r7, #255	; 0xff
 80005f4:	e033      	b.n	800065e <__aeabi_fdiv+0xd6>
 80005f6:	2300      	movs	r3, #0
 80005f8:	4698      	mov	r8, r3
 80005fa:	0026      	movs	r6, r4
 80005fc:	4645      	mov	r5, r8
 80005fe:	4682      	mov	sl, r0
 8000600:	4653      	mov	r3, sl
 8000602:	2b02      	cmp	r3, #2
 8000604:	d100      	bne.n	8000608 <__aeabi_fdiv+0x80>
 8000606:	e07f      	b.n	8000708 <__aeabi_fdiv+0x180>
 8000608:	2b03      	cmp	r3, #3
 800060a:	d100      	bne.n	800060e <__aeabi_fdiv+0x86>
 800060c:	e094      	b.n	8000738 <__aeabi_fdiv+0x1b0>
 800060e:	2b01      	cmp	r3, #1
 8000610:	d017      	beq.n	8000642 <__aeabi_fdiv+0xba>
 8000612:	0038      	movs	r0, r7
 8000614:	307f      	adds	r0, #127	; 0x7f
 8000616:	2800      	cmp	r0, #0
 8000618:	dd5f      	ble.n	80006da <__aeabi_fdiv+0x152>
 800061a:	076b      	lsls	r3, r5, #29
 800061c:	d004      	beq.n	8000628 <__aeabi_fdiv+0xa0>
 800061e:	230f      	movs	r3, #15
 8000620:	402b      	ands	r3, r5
 8000622:	2b04      	cmp	r3, #4
 8000624:	d000      	beq.n	8000628 <__aeabi_fdiv+0xa0>
 8000626:	3504      	adds	r5, #4
 8000628:	012b      	lsls	r3, r5, #4
 800062a:	d503      	bpl.n	8000634 <__aeabi_fdiv+0xac>
 800062c:	0038      	movs	r0, r7
 800062e:	4b5a      	ldr	r3, [pc, #360]	; (8000798 <__aeabi_fdiv+0x210>)
 8000630:	3080      	adds	r0, #128	; 0x80
 8000632:	401d      	ands	r5, r3
 8000634:	28fe      	cmp	r0, #254	; 0xfe
 8000636:	dc67      	bgt.n	8000708 <__aeabi_fdiv+0x180>
 8000638:	01ad      	lsls	r5, r5, #6
 800063a:	0a6d      	lsrs	r5, r5, #9
 800063c:	b2c0      	uxtb	r0, r0
 800063e:	e002      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000640:	001e      	movs	r6, r3
 8000642:	2000      	movs	r0, #0
 8000644:	2500      	movs	r5, #0
 8000646:	05c0      	lsls	r0, r0, #23
 8000648:	4328      	orrs	r0, r5
 800064a:	07f6      	lsls	r6, r6, #31
 800064c:	4330      	orrs	r0, r6
 800064e:	bce0      	pop	{r5, r6, r7}
 8000650:	46ba      	mov	sl, r7
 8000652:	46b1      	mov	r9, r6
 8000654:	46a8      	mov	r8, r5
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	2b00      	cmp	r3, #0
 800065a:	d12b      	bne.n	80006b4 <__aeabi_fdiv+0x12c>
 800065c:	2001      	movs	r0, #1
 800065e:	464a      	mov	r2, r9
 8000660:	0033      	movs	r3, r6
 8000662:	494e      	ldr	r1, [pc, #312]	; (800079c <__aeabi_fdiv+0x214>)
 8000664:	4302      	orrs	r2, r0
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	588a      	ldr	r2, [r1, r2]
 800066a:	4063      	eors	r3, r4
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4697      	mov	pc, r2
 8000670:	2d00      	cmp	r5, #0
 8000672:	d113      	bne.n	800069c <__aeabi_fdiv+0x114>
 8000674:	2304      	movs	r3, #4
 8000676:	4699      	mov	r9, r3
 8000678:	3b03      	subs	r3, #3
 800067a:	2700      	movs	r7, #0
 800067c:	469a      	mov	sl, r3
 800067e:	e79a      	b.n	80005b6 <__aeabi_fdiv+0x2e>
 8000680:	2d00      	cmp	r5, #0
 8000682:	d105      	bne.n	8000690 <__aeabi_fdiv+0x108>
 8000684:	2308      	movs	r3, #8
 8000686:	4699      	mov	r9, r3
 8000688:	3b06      	subs	r3, #6
 800068a:	27ff      	movs	r7, #255	; 0xff
 800068c:	469a      	mov	sl, r3
 800068e:	e792      	b.n	80005b6 <__aeabi_fdiv+0x2e>
 8000690:	230c      	movs	r3, #12
 8000692:	4699      	mov	r9, r3
 8000694:	3b09      	subs	r3, #9
 8000696:	27ff      	movs	r7, #255	; 0xff
 8000698:	469a      	mov	sl, r3
 800069a:	e78c      	b.n	80005b6 <__aeabi_fdiv+0x2e>
 800069c:	0028      	movs	r0, r5
 800069e:	f001 ffad 	bl	80025fc <__clzsi2>
 80006a2:	2776      	movs	r7, #118	; 0x76
 80006a4:	1f43      	subs	r3, r0, #5
 80006a6:	409d      	lsls	r5, r3
 80006a8:	2300      	movs	r3, #0
 80006aa:	427f      	negs	r7, r7
 80006ac:	4699      	mov	r9, r3
 80006ae:	469a      	mov	sl, r3
 80006b0:	1a3f      	subs	r7, r7, r0
 80006b2:	e780      	b.n	80005b6 <__aeabi_fdiv+0x2e>
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 ffa1 	bl	80025fc <__clzsi2>
 80006ba:	4642      	mov	r2, r8
 80006bc:	1f43      	subs	r3, r0, #5
 80006be:	2176      	movs	r1, #118	; 0x76
 80006c0:	409a      	lsls	r2, r3
 80006c2:	4249      	negs	r1, r1
 80006c4:	1a09      	subs	r1, r1, r0
 80006c6:	4690      	mov	r8, r2
 80006c8:	2000      	movs	r0, #0
 80006ca:	e785      	b.n	80005d8 <__aeabi_fdiv+0x50>
 80006cc:	21ff      	movs	r1, #255	; 0xff
 80006ce:	2003      	movs	r0, #3
 80006d0:	e782      	b.n	80005d8 <__aeabi_fdiv+0x50>
 80006d2:	001e      	movs	r6, r3
 80006d4:	20ff      	movs	r0, #255	; 0xff
 80006d6:	2500      	movs	r5, #0
 80006d8:	e7b5      	b.n	8000646 <__aeabi_fdiv+0xbe>
 80006da:	2301      	movs	r3, #1
 80006dc:	1a1b      	subs	r3, r3, r0
 80006de:	2b1b      	cmp	r3, #27
 80006e0:	dcaf      	bgt.n	8000642 <__aeabi_fdiv+0xba>
 80006e2:	379e      	adds	r7, #158	; 0x9e
 80006e4:	0029      	movs	r1, r5
 80006e6:	40bd      	lsls	r5, r7
 80006e8:	40d9      	lsrs	r1, r3
 80006ea:	1e6a      	subs	r2, r5, #1
 80006ec:	4195      	sbcs	r5, r2
 80006ee:	430d      	orrs	r5, r1
 80006f0:	076b      	lsls	r3, r5, #29
 80006f2:	d004      	beq.n	80006fe <__aeabi_fdiv+0x176>
 80006f4:	230f      	movs	r3, #15
 80006f6:	402b      	ands	r3, r5
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d000      	beq.n	80006fe <__aeabi_fdiv+0x176>
 80006fc:	3504      	adds	r5, #4
 80006fe:	016b      	lsls	r3, r5, #5
 8000700:	d544      	bpl.n	800078c <__aeabi_fdiv+0x204>
 8000702:	2001      	movs	r0, #1
 8000704:	2500      	movs	r5, #0
 8000706:	e79e      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000708:	20ff      	movs	r0, #255	; 0xff
 800070a:	2500      	movs	r5, #0
 800070c:	e79b      	b.n	8000646 <__aeabi_fdiv+0xbe>
 800070e:	2580      	movs	r5, #128	; 0x80
 8000710:	2600      	movs	r6, #0
 8000712:	20ff      	movs	r0, #255	; 0xff
 8000714:	03ed      	lsls	r5, r5, #15
 8000716:	e796      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000718:	2300      	movs	r3, #0
 800071a:	4698      	mov	r8, r3
 800071c:	2080      	movs	r0, #128	; 0x80
 800071e:	03c0      	lsls	r0, r0, #15
 8000720:	4205      	tst	r5, r0
 8000722:	d009      	beq.n	8000738 <__aeabi_fdiv+0x1b0>
 8000724:	4643      	mov	r3, r8
 8000726:	4203      	tst	r3, r0
 8000728:	d106      	bne.n	8000738 <__aeabi_fdiv+0x1b0>
 800072a:	4645      	mov	r5, r8
 800072c:	4305      	orrs	r5, r0
 800072e:	026d      	lsls	r5, r5, #9
 8000730:	0026      	movs	r6, r4
 8000732:	20ff      	movs	r0, #255	; 0xff
 8000734:	0a6d      	lsrs	r5, r5, #9
 8000736:	e786      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000738:	2080      	movs	r0, #128	; 0x80
 800073a:	03c0      	lsls	r0, r0, #15
 800073c:	4305      	orrs	r5, r0
 800073e:	026d      	lsls	r5, r5, #9
 8000740:	20ff      	movs	r0, #255	; 0xff
 8000742:	0a6d      	lsrs	r5, r5, #9
 8000744:	e77f      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000746:	4641      	mov	r1, r8
 8000748:	016a      	lsls	r2, r5, #5
 800074a:	0148      	lsls	r0, r1, #5
 800074c:	4282      	cmp	r2, r0
 800074e:	d219      	bcs.n	8000784 <__aeabi_fdiv+0x1fc>
 8000750:	211b      	movs	r1, #27
 8000752:	2500      	movs	r5, #0
 8000754:	3f01      	subs	r7, #1
 8000756:	2601      	movs	r6, #1
 8000758:	0014      	movs	r4, r2
 800075a:	006d      	lsls	r5, r5, #1
 800075c:	0052      	lsls	r2, r2, #1
 800075e:	2c00      	cmp	r4, #0
 8000760:	db01      	blt.n	8000766 <__aeabi_fdiv+0x1de>
 8000762:	4290      	cmp	r0, r2
 8000764:	d801      	bhi.n	800076a <__aeabi_fdiv+0x1e2>
 8000766:	1a12      	subs	r2, r2, r0
 8000768:	4335      	orrs	r5, r6
 800076a:	3901      	subs	r1, #1
 800076c:	2900      	cmp	r1, #0
 800076e:	d1f3      	bne.n	8000758 <__aeabi_fdiv+0x1d0>
 8000770:	1e50      	subs	r0, r2, #1
 8000772:	4182      	sbcs	r2, r0
 8000774:	0038      	movs	r0, r7
 8000776:	307f      	adds	r0, #127	; 0x7f
 8000778:	001e      	movs	r6, r3
 800077a:	4315      	orrs	r5, r2
 800077c:	2800      	cmp	r0, #0
 800077e:	dd00      	ble.n	8000782 <__aeabi_fdiv+0x1fa>
 8000780:	e74b      	b.n	800061a <__aeabi_fdiv+0x92>
 8000782:	e7aa      	b.n	80006da <__aeabi_fdiv+0x152>
 8000784:	211a      	movs	r1, #26
 8000786:	2501      	movs	r5, #1
 8000788:	1a12      	subs	r2, r2, r0
 800078a:	e7e4      	b.n	8000756 <__aeabi_fdiv+0x1ce>
 800078c:	01ad      	lsls	r5, r5, #6
 800078e:	2000      	movs	r0, #0
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	e758      	b.n	8000646 <__aeabi_fdiv+0xbe>
 8000794:	0800aa54 	.word	0x0800aa54
 8000798:	f7ffffff 	.word	0xf7ffffff
 800079c:	0800aa94 	.word	0x0800aa94

080007a0 <__aeabi_i2f>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d013      	beq.n	80007ce <__aeabi_i2f+0x2e>
 80007a6:	17c3      	asrs	r3, r0, #31
 80007a8:	18c5      	adds	r5, r0, r3
 80007aa:	405d      	eors	r5, r3
 80007ac:	0fc4      	lsrs	r4, r0, #31
 80007ae:	0028      	movs	r0, r5
 80007b0:	f001 ff24 	bl	80025fc <__clzsi2>
 80007b4:	239e      	movs	r3, #158	; 0x9e
 80007b6:	0001      	movs	r1, r0
 80007b8:	1a1b      	subs	r3, r3, r0
 80007ba:	2b96      	cmp	r3, #150	; 0x96
 80007bc:	dc0f      	bgt.n	80007de <__aeabi_i2f+0x3e>
 80007be:	2808      	cmp	r0, #8
 80007c0:	dd01      	ble.n	80007c6 <__aeabi_i2f+0x26>
 80007c2:	3908      	subs	r1, #8
 80007c4:	408d      	lsls	r5, r1
 80007c6:	026d      	lsls	r5, r5, #9
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	b2d8      	uxtb	r0, r3
 80007cc:	e002      	b.n	80007d4 <__aeabi_i2f+0x34>
 80007ce:	2400      	movs	r4, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	2500      	movs	r5, #0
 80007d4:	05c0      	lsls	r0, r0, #23
 80007d6:	4328      	orrs	r0, r5
 80007d8:	07e4      	lsls	r4, r4, #31
 80007da:	4320      	orrs	r0, r4
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
 80007de:	2b99      	cmp	r3, #153	; 0x99
 80007e0:	dd0b      	ble.n	80007fa <__aeabi_i2f+0x5a>
 80007e2:	2205      	movs	r2, #5
 80007e4:	002e      	movs	r6, r5
 80007e6:	1a12      	subs	r2, r2, r0
 80007e8:	40d6      	lsrs	r6, r2
 80007ea:	0002      	movs	r2, r0
 80007ec:	321b      	adds	r2, #27
 80007ee:	4095      	lsls	r5, r2
 80007f0:	0028      	movs	r0, r5
 80007f2:	1e45      	subs	r5, r0, #1
 80007f4:	41a8      	sbcs	r0, r5
 80007f6:	0035      	movs	r5, r6
 80007f8:	4305      	orrs	r5, r0
 80007fa:	2905      	cmp	r1, #5
 80007fc:	dd01      	ble.n	8000802 <__aeabi_i2f+0x62>
 80007fe:	1f4a      	subs	r2, r1, #5
 8000800:	4095      	lsls	r5, r2
 8000802:	002a      	movs	r2, r5
 8000804:	4e08      	ldr	r6, [pc, #32]	; (8000828 <__aeabi_i2f+0x88>)
 8000806:	4032      	ands	r2, r6
 8000808:	0768      	lsls	r0, r5, #29
 800080a:	d009      	beq.n	8000820 <__aeabi_i2f+0x80>
 800080c:	200f      	movs	r0, #15
 800080e:	4028      	ands	r0, r5
 8000810:	2804      	cmp	r0, #4
 8000812:	d005      	beq.n	8000820 <__aeabi_i2f+0x80>
 8000814:	3204      	adds	r2, #4
 8000816:	0150      	lsls	r0, r2, #5
 8000818:	d502      	bpl.n	8000820 <__aeabi_i2f+0x80>
 800081a:	239f      	movs	r3, #159	; 0x9f
 800081c:	4032      	ands	r2, r6
 800081e:	1a5b      	subs	r3, r3, r1
 8000820:	0192      	lsls	r2, r2, #6
 8000822:	0a55      	lsrs	r5, r2, #9
 8000824:	b2d8      	uxtb	r0, r3
 8000826:	e7d5      	b.n	80007d4 <__aeabi_i2f+0x34>
 8000828:	fbffffff 	.word	0xfbffffff

0800082c <__aeabi_dadd>:
 800082c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082e:	464f      	mov	r7, r9
 8000830:	46d6      	mov	lr, sl
 8000832:	4646      	mov	r6, r8
 8000834:	000d      	movs	r5, r1
 8000836:	0001      	movs	r1, r0
 8000838:	0018      	movs	r0, r3
 800083a:	b5c0      	push	{r6, r7, lr}
 800083c:	0017      	movs	r7, r2
 800083e:	032b      	lsls	r3, r5, #12
 8000840:	0a5a      	lsrs	r2, r3, #9
 8000842:	0f4b      	lsrs	r3, r1, #29
 8000844:	4313      	orrs	r3, r2
 8000846:	00ca      	lsls	r2, r1, #3
 8000848:	4691      	mov	r9, r2
 800084a:	0302      	lsls	r2, r0, #12
 800084c:	006e      	lsls	r6, r5, #1
 800084e:	0041      	lsls	r1, r0, #1
 8000850:	0a52      	lsrs	r2, r2, #9
 8000852:	0fec      	lsrs	r4, r5, #31
 8000854:	0f7d      	lsrs	r5, r7, #29
 8000856:	4315      	orrs	r5, r2
 8000858:	0d76      	lsrs	r6, r6, #21
 800085a:	0d49      	lsrs	r1, r1, #21
 800085c:	0fc0      	lsrs	r0, r0, #31
 800085e:	4682      	mov	sl, r0
 8000860:	46ac      	mov	ip, r5
 8000862:	00ff      	lsls	r7, r7, #3
 8000864:	1a72      	subs	r2, r6, r1
 8000866:	4284      	cmp	r4, r0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x40>
 800086a:	e098      	b.n	800099e <__aeabi_dadd+0x172>
 800086c:	2a00      	cmp	r2, #0
 800086e:	dc00      	bgt.n	8000872 <__aeabi_dadd+0x46>
 8000870:	e081      	b.n	8000976 <__aeabi_dadd+0x14a>
 8000872:	2900      	cmp	r1, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x4c>
 8000876:	e0b6      	b.n	80009e6 <__aeabi_dadd+0x1ba>
 8000878:	49c9      	ldr	r1, [pc, #804]	; (8000ba0 <__aeabi_dadd+0x374>)
 800087a:	428e      	cmp	r6, r1
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x54>
 800087e:	e172      	b.n	8000b66 <__aeabi_dadd+0x33a>
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0028      	movs	r0, r5
 8000884:	0409      	lsls	r1, r1, #16
 8000886:	4308      	orrs	r0, r1
 8000888:	4684      	mov	ip, r0
 800088a:	2a38      	cmp	r2, #56	; 0x38
 800088c:	dd00      	ble.n	8000890 <__aeabi_dadd+0x64>
 800088e:	e15e      	b.n	8000b4e <__aeabi_dadd+0x322>
 8000890:	2a1f      	cmp	r2, #31
 8000892:	dd00      	ble.n	8000896 <__aeabi_dadd+0x6a>
 8000894:	e1ee      	b.n	8000c74 <__aeabi_dadd+0x448>
 8000896:	2020      	movs	r0, #32
 8000898:	0039      	movs	r1, r7
 800089a:	4665      	mov	r5, ip
 800089c:	1a80      	subs	r0, r0, r2
 800089e:	4087      	lsls	r7, r0
 80008a0:	40d1      	lsrs	r1, r2
 80008a2:	4085      	lsls	r5, r0
 80008a4:	430d      	orrs	r5, r1
 80008a6:	0039      	movs	r1, r7
 80008a8:	1e4f      	subs	r7, r1, #1
 80008aa:	41b9      	sbcs	r1, r7
 80008ac:	4667      	mov	r7, ip
 80008ae:	40d7      	lsrs	r7, r2
 80008b0:	4329      	orrs	r1, r5
 80008b2:	1bdb      	subs	r3, r3, r7
 80008b4:	464a      	mov	r2, r9
 80008b6:	1a55      	subs	r5, r2, r1
 80008b8:	45a9      	cmp	r9, r5
 80008ba:	4189      	sbcs	r1, r1
 80008bc:	4249      	negs	r1, r1
 80008be:	1a5b      	subs	r3, r3, r1
 80008c0:	4698      	mov	r8, r3
 80008c2:	4643      	mov	r3, r8
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	d400      	bmi.n	80008ca <__aeabi_dadd+0x9e>
 80008c8:	e0cc      	b.n	8000a64 <__aeabi_dadd+0x238>
 80008ca:	4643      	mov	r3, r8
 80008cc:	025b      	lsls	r3, r3, #9
 80008ce:	0a5b      	lsrs	r3, r3, #9
 80008d0:	4698      	mov	r8, r3
 80008d2:	4643      	mov	r3, r8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0xae>
 80008d8:	e12c      	b.n	8000b34 <__aeabi_dadd+0x308>
 80008da:	4640      	mov	r0, r8
 80008dc:	f001 fe8e 	bl	80025fc <__clzsi2>
 80008e0:	0001      	movs	r1, r0
 80008e2:	3908      	subs	r1, #8
 80008e4:	2220      	movs	r2, #32
 80008e6:	0028      	movs	r0, r5
 80008e8:	4643      	mov	r3, r8
 80008ea:	1a52      	subs	r2, r2, r1
 80008ec:	408b      	lsls	r3, r1
 80008ee:	40d0      	lsrs	r0, r2
 80008f0:	408d      	lsls	r5, r1
 80008f2:	4303      	orrs	r3, r0
 80008f4:	428e      	cmp	r6, r1
 80008f6:	dd00      	ble.n	80008fa <__aeabi_dadd+0xce>
 80008f8:	e117      	b.n	8000b2a <__aeabi_dadd+0x2fe>
 80008fa:	1b8e      	subs	r6, r1, r6
 80008fc:	1c72      	adds	r2, r6, #1
 80008fe:	2a1f      	cmp	r2, #31
 8000900:	dd00      	ble.n	8000904 <__aeabi_dadd+0xd8>
 8000902:	e1a7      	b.n	8000c54 <__aeabi_dadd+0x428>
 8000904:	2120      	movs	r1, #32
 8000906:	0018      	movs	r0, r3
 8000908:	002e      	movs	r6, r5
 800090a:	1a89      	subs	r1, r1, r2
 800090c:	408d      	lsls	r5, r1
 800090e:	4088      	lsls	r0, r1
 8000910:	40d6      	lsrs	r6, r2
 8000912:	40d3      	lsrs	r3, r2
 8000914:	1e69      	subs	r1, r5, #1
 8000916:	418d      	sbcs	r5, r1
 8000918:	4330      	orrs	r0, r6
 800091a:	4698      	mov	r8, r3
 800091c:	2600      	movs	r6, #0
 800091e:	4305      	orrs	r5, r0
 8000920:	076b      	lsls	r3, r5, #29
 8000922:	d009      	beq.n	8000938 <__aeabi_dadd+0x10c>
 8000924:	230f      	movs	r3, #15
 8000926:	402b      	ands	r3, r5
 8000928:	2b04      	cmp	r3, #4
 800092a:	d005      	beq.n	8000938 <__aeabi_dadd+0x10c>
 800092c:	1d2b      	adds	r3, r5, #4
 800092e:	42ab      	cmp	r3, r5
 8000930:	41ad      	sbcs	r5, r5
 8000932:	426d      	negs	r5, r5
 8000934:	44a8      	add	r8, r5
 8000936:	001d      	movs	r5, r3
 8000938:	4643      	mov	r3, r8
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	d400      	bmi.n	8000940 <__aeabi_dadd+0x114>
 800093e:	e094      	b.n	8000a6a <__aeabi_dadd+0x23e>
 8000940:	4b97      	ldr	r3, [pc, #604]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000942:	1c72      	adds	r2, r6, #1
 8000944:	429a      	cmp	r2, r3
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x11e>
 8000948:	e09d      	b.n	8000a86 <__aeabi_dadd+0x25a>
 800094a:	4641      	mov	r1, r8
 800094c:	4b95      	ldr	r3, [pc, #596]	; (8000ba4 <__aeabi_dadd+0x378>)
 800094e:	08ed      	lsrs	r5, r5, #3
 8000950:	4019      	ands	r1, r3
 8000952:	000b      	movs	r3, r1
 8000954:	0552      	lsls	r2, r2, #21
 8000956:	0749      	lsls	r1, r1, #29
 8000958:	025b      	lsls	r3, r3, #9
 800095a:	4329      	orrs	r1, r5
 800095c:	0b1b      	lsrs	r3, r3, #12
 800095e:	0d52      	lsrs	r2, r2, #21
 8000960:	0512      	lsls	r2, r2, #20
 8000962:	4313      	orrs	r3, r2
 8000964:	07e4      	lsls	r4, r4, #31
 8000966:	4323      	orrs	r3, r4
 8000968:	0008      	movs	r0, r1
 800096a:	0019      	movs	r1, r3
 800096c:	bce0      	pop	{r5, r6, r7}
 800096e:	46ba      	mov	sl, r7
 8000970:	46b1      	mov	r9, r6
 8000972:	46a8      	mov	r8, r5
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	2a00      	cmp	r2, #0
 8000978:	d043      	beq.n	8000a02 <__aeabi_dadd+0x1d6>
 800097a:	1b8a      	subs	r2, r1, r6
 800097c:	2e00      	cmp	r6, #0
 800097e:	d000      	beq.n	8000982 <__aeabi_dadd+0x156>
 8000980:	e12a      	b.n	8000bd8 <__aeabi_dadd+0x3ac>
 8000982:	464c      	mov	r4, r9
 8000984:	431c      	orrs	r4, r3
 8000986:	d100      	bne.n	800098a <__aeabi_dadd+0x15e>
 8000988:	e1d1      	b.n	8000d2e <__aeabi_dadd+0x502>
 800098a:	1e54      	subs	r4, r2, #1
 800098c:	2a01      	cmp	r2, #1
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0x166>
 8000990:	e21f      	b.n	8000dd2 <__aeabi_dadd+0x5a6>
 8000992:	4d83      	ldr	r5, [pc, #524]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000994:	42aa      	cmp	r2, r5
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x16e>
 8000998:	e272      	b.n	8000e80 <__aeabi_dadd+0x654>
 800099a:	0022      	movs	r2, r4
 800099c:	e123      	b.n	8000be6 <__aeabi_dadd+0x3ba>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x178>
 80009a2:	e098      	b.n	8000ad6 <__aeabi_dadd+0x2aa>
 80009a4:	2900      	cmp	r1, #0
 80009a6:	d042      	beq.n	8000a2e <__aeabi_dadd+0x202>
 80009a8:	497d      	ldr	r1, [pc, #500]	; (8000ba0 <__aeabi_dadd+0x374>)
 80009aa:	428e      	cmp	r6, r1
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x184>
 80009ae:	e0da      	b.n	8000b66 <__aeabi_dadd+0x33a>
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	0028      	movs	r0, r5
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	4308      	orrs	r0, r1
 80009b8:	4684      	mov	ip, r0
 80009ba:	2a38      	cmp	r2, #56	; 0x38
 80009bc:	dd00      	ble.n	80009c0 <__aeabi_dadd+0x194>
 80009be:	e129      	b.n	8000c14 <__aeabi_dadd+0x3e8>
 80009c0:	2a1f      	cmp	r2, #31
 80009c2:	dc00      	bgt.n	80009c6 <__aeabi_dadd+0x19a>
 80009c4:	e187      	b.n	8000cd6 <__aeabi_dadd+0x4aa>
 80009c6:	0011      	movs	r1, r2
 80009c8:	4665      	mov	r5, ip
 80009ca:	3920      	subs	r1, #32
 80009cc:	40cd      	lsrs	r5, r1
 80009ce:	2a20      	cmp	r2, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x1b0>
 80009d2:	2040      	movs	r0, #64	; 0x40
 80009d4:	4661      	mov	r1, ip
 80009d6:	1a82      	subs	r2, r0, r2
 80009d8:	4091      	lsls	r1, r2
 80009da:	430f      	orrs	r7, r1
 80009dc:	0039      	movs	r1, r7
 80009de:	1e4f      	subs	r7, r1, #1
 80009e0:	41b9      	sbcs	r1, r7
 80009e2:	430d      	orrs	r5, r1
 80009e4:	e11b      	b.n	8000c1e <__aeabi_dadd+0x3f2>
 80009e6:	0029      	movs	r1, r5
 80009e8:	4339      	orrs	r1, r7
 80009ea:	d100      	bne.n	80009ee <__aeabi_dadd+0x1c2>
 80009ec:	e0b5      	b.n	8000b5a <__aeabi_dadd+0x32e>
 80009ee:	1e51      	subs	r1, r2, #1
 80009f0:	2a01      	cmp	r2, #1
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x1ca>
 80009f4:	e1ab      	b.n	8000d4e <__aeabi_dadd+0x522>
 80009f6:	486a      	ldr	r0, [pc, #424]	; (8000ba0 <__aeabi_dadd+0x374>)
 80009f8:	4282      	cmp	r2, r0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x1d2>
 80009fc:	e1b2      	b.n	8000d64 <__aeabi_dadd+0x538>
 80009fe:	000a      	movs	r2, r1
 8000a00:	e743      	b.n	800088a <__aeabi_dadd+0x5e>
 8000a02:	4969      	ldr	r1, [pc, #420]	; (8000ba8 <__aeabi_dadd+0x37c>)
 8000a04:	1c75      	adds	r5, r6, #1
 8000a06:	420d      	tst	r5, r1
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x1e0>
 8000a0a:	e0cf      	b.n	8000bac <__aeabi_dadd+0x380>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x1e6>
 8000a10:	e193      	b.n	8000d3a <__aeabi_dadd+0x50e>
 8000a12:	4649      	mov	r1, r9
 8000a14:	4319      	orrs	r1, r3
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x1ee>
 8000a18:	e1d1      	b.n	8000dbe <__aeabi_dadd+0x592>
 8000a1a:	4661      	mov	r1, ip
 8000a1c:	4339      	orrs	r1, r7
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x1f6>
 8000a20:	e1e3      	b.n	8000dea <__aeabi_dadd+0x5be>
 8000a22:	4649      	mov	r1, r9
 8000a24:	0758      	lsls	r0, r3, #29
 8000a26:	08c9      	lsrs	r1, r1, #3
 8000a28:	4301      	orrs	r1, r0
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	e026      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000a2e:	0029      	movs	r1, r5
 8000a30:	4339      	orrs	r1, r7
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x20a>
 8000a34:	e091      	b.n	8000b5a <__aeabi_dadd+0x32e>
 8000a36:	1e51      	subs	r1, r2, #1
 8000a38:	2a01      	cmp	r2, #1
 8000a3a:	d005      	beq.n	8000a48 <__aeabi_dadd+0x21c>
 8000a3c:	4858      	ldr	r0, [pc, #352]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000a3e:	4282      	cmp	r2, r0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x218>
 8000a42:	e18f      	b.n	8000d64 <__aeabi_dadd+0x538>
 8000a44:	000a      	movs	r2, r1
 8000a46:	e7b8      	b.n	80009ba <__aeabi_dadd+0x18e>
 8000a48:	003d      	movs	r5, r7
 8000a4a:	444d      	add	r5, r9
 8000a4c:	454d      	cmp	r5, r9
 8000a4e:	4189      	sbcs	r1, r1
 8000a50:	4463      	add	r3, ip
 8000a52:	4698      	mov	r8, r3
 8000a54:	4249      	negs	r1, r1
 8000a56:	4488      	add	r8, r1
 8000a58:	4643      	mov	r3, r8
 8000a5a:	2602      	movs	r6, #2
 8000a5c:	021b      	lsls	r3, r3, #8
 8000a5e:	d500      	bpl.n	8000a62 <__aeabi_dadd+0x236>
 8000a60:	e0eb      	b.n	8000c3a <__aeabi_dadd+0x40e>
 8000a62:	3e01      	subs	r6, #1
 8000a64:	076b      	lsls	r3, r5, #29
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dadd+0x23e>
 8000a68:	e75c      	b.n	8000924 <__aeabi_dadd+0xf8>
 8000a6a:	4643      	mov	r3, r8
 8000a6c:	08e9      	lsrs	r1, r5, #3
 8000a6e:	075a      	lsls	r2, r3, #29
 8000a70:	4311      	orrs	r1, r2
 8000a72:	0032      	movs	r2, r6
 8000a74:	08db      	lsrs	r3, r3, #3
 8000a76:	484a      	ldr	r0, [pc, #296]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000a78:	4282      	cmp	r2, r0
 8000a7a:	d021      	beq.n	8000ac0 <__aeabi_dadd+0x294>
 8000a7c:	031b      	lsls	r3, r3, #12
 8000a7e:	0552      	lsls	r2, r2, #21
 8000a80:	0b1b      	lsrs	r3, r3, #12
 8000a82:	0d52      	lsrs	r2, r2, #21
 8000a84:	e76c      	b.n	8000960 <__aeabi_dadd+0x134>
 8000a86:	2300      	movs	r3, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	e769      	b.n	8000960 <__aeabi_dadd+0x134>
 8000a8c:	002a      	movs	r2, r5
 8000a8e:	433a      	orrs	r2, r7
 8000a90:	d069      	beq.n	8000b66 <__aeabi_dadd+0x33a>
 8000a92:	464a      	mov	r2, r9
 8000a94:	0758      	lsls	r0, r3, #29
 8000a96:	08d1      	lsrs	r1, r2, #3
 8000a98:	08da      	lsrs	r2, r3, #3
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	031b      	lsls	r3, r3, #12
 8000a9e:	4308      	orrs	r0, r1
 8000aa0:	421a      	tst	r2, r3
 8000aa2:	d007      	beq.n	8000ab4 <__aeabi_dadd+0x288>
 8000aa4:	0029      	movs	r1, r5
 8000aa6:	08ed      	lsrs	r5, r5, #3
 8000aa8:	421d      	tst	r5, r3
 8000aaa:	d103      	bne.n	8000ab4 <__aeabi_dadd+0x288>
 8000aac:	002a      	movs	r2, r5
 8000aae:	08ff      	lsrs	r7, r7, #3
 8000ab0:	0748      	lsls	r0, r1, #29
 8000ab2:	4338      	orrs	r0, r7
 8000ab4:	0f43      	lsrs	r3, r0, #29
 8000ab6:	00c1      	lsls	r1, r0, #3
 8000ab8:	075b      	lsls	r3, r3, #29
 8000aba:	08c9      	lsrs	r1, r1, #3
 8000abc:	4319      	orrs	r1, r3
 8000abe:	0013      	movs	r3, r2
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x29c>
 8000ac6:	e213      	b.n	8000ef0 <__aeabi_dadd+0x6c4>
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0312      	lsls	r2, r2, #12
 8000acc:	4313      	orrs	r3, r2
 8000ace:	031b      	lsls	r3, r3, #12
 8000ad0:	4a33      	ldr	r2, [pc, #204]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000ad2:	0b1b      	lsrs	r3, r3, #12
 8000ad4:	e744      	b.n	8000960 <__aeabi_dadd+0x134>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	d04b      	beq.n	8000b72 <__aeabi_dadd+0x346>
 8000ada:	1b8a      	subs	r2, r1, r6
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x2b6>
 8000ae0:	e0e7      	b.n	8000cb2 <__aeabi_dadd+0x486>
 8000ae2:	482f      	ldr	r0, [pc, #188]	; (8000ba0 <__aeabi_dadd+0x374>)
 8000ae4:	4281      	cmp	r1, r0
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dadd+0x2be>
 8000ae8:	e195      	b.n	8000e16 <__aeabi_dadd+0x5ea>
 8000aea:	2080      	movs	r0, #128	; 0x80
 8000aec:	0400      	lsls	r0, r0, #16
 8000aee:	4303      	orrs	r3, r0
 8000af0:	2a38      	cmp	r2, #56	; 0x38
 8000af2:	dd00      	ble.n	8000af6 <__aeabi_dadd+0x2ca>
 8000af4:	e143      	b.n	8000d7e <__aeabi_dadd+0x552>
 8000af6:	2a1f      	cmp	r2, #31
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dadd+0x2d0>
 8000afa:	e1db      	b.n	8000eb4 <__aeabi_dadd+0x688>
 8000afc:	2020      	movs	r0, #32
 8000afe:	001d      	movs	r5, r3
 8000b00:	464e      	mov	r6, r9
 8000b02:	1a80      	subs	r0, r0, r2
 8000b04:	4085      	lsls	r5, r0
 8000b06:	40d6      	lsrs	r6, r2
 8000b08:	4335      	orrs	r5, r6
 8000b0a:	464e      	mov	r6, r9
 8000b0c:	4086      	lsls	r6, r0
 8000b0e:	0030      	movs	r0, r6
 8000b10:	40d3      	lsrs	r3, r2
 8000b12:	1e46      	subs	r6, r0, #1
 8000b14:	41b0      	sbcs	r0, r6
 8000b16:	449c      	add	ip, r3
 8000b18:	4305      	orrs	r5, r0
 8000b1a:	19ed      	adds	r5, r5, r7
 8000b1c:	42bd      	cmp	r5, r7
 8000b1e:	419b      	sbcs	r3, r3
 8000b20:	425b      	negs	r3, r3
 8000b22:	4463      	add	r3, ip
 8000b24:	4698      	mov	r8, r3
 8000b26:	000e      	movs	r6, r1
 8000b28:	e07f      	b.n	8000c2a <__aeabi_dadd+0x3fe>
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <__aeabi_dadd+0x378>)
 8000b2c:	1a76      	subs	r6, r6, r1
 8000b2e:	4013      	ands	r3, r2
 8000b30:	4698      	mov	r8, r3
 8000b32:	e6f5      	b.n	8000920 <__aeabi_dadd+0xf4>
 8000b34:	0028      	movs	r0, r5
 8000b36:	f001 fd61 	bl	80025fc <__clzsi2>
 8000b3a:	0001      	movs	r1, r0
 8000b3c:	3118      	adds	r1, #24
 8000b3e:	291f      	cmp	r1, #31
 8000b40:	dc00      	bgt.n	8000b44 <__aeabi_dadd+0x318>
 8000b42:	e6cf      	b.n	80008e4 <__aeabi_dadd+0xb8>
 8000b44:	002b      	movs	r3, r5
 8000b46:	3808      	subs	r0, #8
 8000b48:	4083      	lsls	r3, r0
 8000b4a:	2500      	movs	r5, #0
 8000b4c:	e6d2      	b.n	80008f4 <__aeabi_dadd+0xc8>
 8000b4e:	4662      	mov	r2, ip
 8000b50:	433a      	orrs	r2, r7
 8000b52:	0011      	movs	r1, r2
 8000b54:	1e4f      	subs	r7, r1, #1
 8000b56:	41b9      	sbcs	r1, r7
 8000b58:	e6ac      	b.n	80008b4 <__aeabi_dadd+0x88>
 8000b5a:	4649      	mov	r1, r9
 8000b5c:	0758      	lsls	r0, r3, #29
 8000b5e:	08c9      	lsrs	r1, r1, #3
 8000b60:	4301      	orrs	r1, r0
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	e787      	b.n	8000a76 <__aeabi_dadd+0x24a>
 8000b66:	4649      	mov	r1, r9
 8000b68:	075a      	lsls	r2, r3, #29
 8000b6a:	08c9      	lsrs	r1, r1, #3
 8000b6c:	4311      	orrs	r1, r2
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	e7a6      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000b72:	490d      	ldr	r1, [pc, #52]	; (8000ba8 <__aeabi_dadd+0x37c>)
 8000b74:	1c70      	adds	r0, r6, #1
 8000b76:	4208      	tst	r0, r1
 8000b78:	d000      	beq.n	8000b7c <__aeabi_dadd+0x350>
 8000b7a:	e0bb      	b.n	8000cf4 <__aeabi_dadd+0x4c8>
 8000b7c:	2e00      	cmp	r6, #0
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_dadd+0x356>
 8000b80:	e114      	b.n	8000dac <__aeabi_dadd+0x580>
 8000b82:	4649      	mov	r1, r9
 8000b84:	4319      	orrs	r1, r3
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dadd+0x35e>
 8000b88:	e175      	b.n	8000e76 <__aeabi_dadd+0x64a>
 8000b8a:	0029      	movs	r1, r5
 8000b8c:	4339      	orrs	r1, r7
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_dadd+0x366>
 8000b90:	e17e      	b.n	8000e90 <__aeabi_dadd+0x664>
 8000b92:	4649      	mov	r1, r9
 8000b94:	0758      	lsls	r0, r3, #29
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	4301      	orrs	r1, r0
 8000b9a:	08db      	lsrs	r3, r3, #3
 8000b9c:	e76e      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	000007ff 	.word	0x000007ff
 8000ba4:	ff7fffff 	.word	0xff7fffff
 8000ba8:	000007fe 	.word	0x000007fe
 8000bac:	4649      	mov	r1, r9
 8000bae:	1bcd      	subs	r5, r1, r7
 8000bb0:	4661      	mov	r1, ip
 8000bb2:	1a58      	subs	r0, r3, r1
 8000bb4:	45a9      	cmp	r9, r5
 8000bb6:	4189      	sbcs	r1, r1
 8000bb8:	4249      	negs	r1, r1
 8000bba:	4688      	mov	r8, r1
 8000bbc:	0001      	movs	r1, r0
 8000bbe:	4640      	mov	r0, r8
 8000bc0:	1a09      	subs	r1, r1, r0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	0209      	lsls	r1, r1, #8
 8000bc6:	d500      	bpl.n	8000bca <__aeabi_dadd+0x39e>
 8000bc8:	e0a6      	b.n	8000d18 <__aeabi_dadd+0x4ec>
 8000bca:	4641      	mov	r1, r8
 8000bcc:	4329      	orrs	r1, r5
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_dadd+0x3a6>
 8000bd0:	e67f      	b.n	80008d2 <__aeabi_dadd+0xa6>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	e751      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000bd8:	4cc7      	ldr	r4, [pc, #796]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x3b4>
 8000bde:	e0c7      	b.n	8000d70 <__aeabi_dadd+0x544>
 8000be0:	2480      	movs	r4, #128	; 0x80
 8000be2:	0424      	lsls	r4, r4, #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	2a38      	cmp	r2, #56	; 0x38
 8000be8:	dc54      	bgt.n	8000c94 <__aeabi_dadd+0x468>
 8000bea:	2a1f      	cmp	r2, #31
 8000bec:	dd00      	ble.n	8000bf0 <__aeabi_dadd+0x3c4>
 8000bee:	e0cc      	b.n	8000d8a <__aeabi_dadd+0x55e>
 8000bf0:	2420      	movs	r4, #32
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	1aa4      	subs	r4, r4, r2
 8000bf6:	001d      	movs	r5, r3
 8000bf8:	464e      	mov	r6, r9
 8000bfa:	40a0      	lsls	r0, r4
 8000bfc:	40d6      	lsrs	r6, r2
 8000bfe:	40a5      	lsls	r5, r4
 8000c00:	0004      	movs	r4, r0
 8000c02:	40d3      	lsrs	r3, r2
 8000c04:	4662      	mov	r2, ip
 8000c06:	4335      	orrs	r5, r6
 8000c08:	1e66      	subs	r6, r4, #1
 8000c0a:	41b4      	sbcs	r4, r6
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	469c      	mov	ip, r3
 8000c10:	4325      	orrs	r5, r4
 8000c12:	e044      	b.n	8000c9e <__aeabi_dadd+0x472>
 8000c14:	4662      	mov	r2, ip
 8000c16:	433a      	orrs	r2, r7
 8000c18:	0015      	movs	r5, r2
 8000c1a:	1e6f      	subs	r7, r5, #1
 8000c1c:	41bd      	sbcs	r5, r7
 8000c1e:	444d      	add	r5, r9
 8000c20:	454d      	cmp	r5, r9
 8000c22:	4189      	sbcs	r1, r1
 8000c24:	4249      	negs	r1, r1
 8000c26:	4688      	mov	r8, r1
 8000c28:	4498      	add	r8, r3
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	d400      	bmi.n	8000c32 <__aeabi_dadd+0x406>
 8000c30:	e718      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000c32:	4bb1      	ldr	r3, [pc, #708]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000c34:	3601      	adds	r6, #1
 8000c36:	429e      	cmp	r6, r3
 8000c38:	d049      	beq.n	8000cce <__aeabi_dadd+0x4a2>
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	4baf      	ldr	r3, [pc, #700]	; (8000efc <__aeabi_dadd+0x6d0>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	401a      	ands	r2, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	086a      	lsrs	r2, r5, #1
 8000c46:	400d      	ands	r5, r1
 8000c48:	4315      	orrs	r5, r2
 8000c4a:	07d9      	lsls	r1, r3, #31
 8000c4c:	085b      	lsrs	r3, r3, #1
 8000c4e:	4698      	mov	r8, r3
 8000c50:	430d      	orrs	r5, r1
 8000c52:	e665      	b.n	8000920 <__aeabi_dadd+0xf4>
 8000c54:	0018      	movs	r0, r3
 8000c56:	3e1f      	subs	r6, #31
 8000c58:	40f0      	lsrs	r0, r6
 8000c5a:	2a20      	cmp	r2, #32
 8000c5c:	d003      	beq.n	8000c66 <__aeabi_dadd+0x43a>
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	4093      	lsls	r3, r2
 8000c64:	431d      	orrs	r5, r3
 8000c66:	1e69      	subs	r1, r5, #1
 8000c68:	418d      	sbcs	r5, r1
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	4698      	mov	r8, r3
 8000c70:	4305      	orrs	r5, r0
 8000c72:	e6f7      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000c74:	0011      	movs	r1, r2
 8000c76:	4665      	mov	r5, ip
 8000c78:	3920      	subs	r1, #32
 8000c7a:	40cd      	lsrs	r5, r1
 8000c7c:	2a20      	cmp	r2, #32
 8000c7e:	d004      	beq.n	8000c8a <__aeabi_dadd+0x45e>
 8000c80:	2040      	movs	r0, #64	; 0x40
 8000c82:	4661      	mov	r1, ip
 8000c84:	1a82      	subs	r2, r0, r2
 8000c86:	4091      	lsls	r1, r2
 8000c88:	430f      	orrs	r7, r1
 8000c8a:	0039      	movs	r1, r7
 8000c8c:	1e4f      	subs	r7, r1, #1
 8000c8e:	41b9      	sbcs	r1, r7
 8000c90:	4329      	orrs	r1, r5
 8000c92:	e60f      	b.n	80008b4 <__aeabi_dadd+0x88>
 8000c94:	464a      	mov	r2, r9
 8000c96:	4313      	orrs	r3, r2
 8000c98:	001d      	movs	r5, r3
 8000c9a:	1e6b      	subs	r3, r5, #1
 8000c9c:	419d      	sbcs	r5, r3
 8000c9e:	1b7d      	subs	r5, r7, r5
 8000ca0:	42af      	cmp	r7, r5
 8000ca2:	419b      	sbcs	r3, r3
 8000ca4:	4662      	mov	r2, ip
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	4698      	mov	r8, r3
 8000cac:	4654      	mov	r4, sl
 8000cae:	000e      	movs	r6, r1
 8000cb0:	e607      	b.n	80008c2 <__aeabi_dadd+0x96>
 8000cb2:	4648      	mov	r0, r9
 8000cb4:	4318      	orrs	r0, r3
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x48e>
 8000cb8:	e0b3      	b.n	8000e22 <__aeabi_dadd+0x5f6>
 8000cba:	1e50      	subs	r0, r2, #1
 8000cbc:	2a01      	cmp	r2, #1
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0x496>
 8000cc0:	e10d      	b.n	8000ede <__aeabi_dadd+0x6b2>
 8000cc2:	4d8d      	ldr	r5, [pc, #564]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000cc4:	42aa      	cmp	r2, r5
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x49e>
 8000cc8:	e0a5      	b.n	8000e16 <__aeabi_dadd+0x5ea>
 8000cca:	0002      	movs	r2, r0
 8000ccc:	e710      	b.n	8000af0 <__aeabi_dadd+0x2c4>
 8000cce:	0032      	movs	r2, r6
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	e644      	b.n	8000960 <__aeabi_dadd+0x134>
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	0038      	movs	r0, r7
 8000cda:	1a89      	subs	r1, r1, r2
 8000cdc:	4665      	mov	r5, ip
 8000cde:	408f      	lsls	r7, r1
 8000ce0:	408d      	lsls	r5, r1
 8000ce2:	40d0      	lsrs	r0, r2
 8000ce4:	1e79      	subs	r1, r7, #1
 8000ce6:	418f      	sbcs	r7, r1
 8000ce8:	4305      	orrs	r5, r0
 8000cea:	433d      	orrs	r5, r7
 8000cec:	4667      	mov	r7, ip
 8000cee:	40d7      	lsrs	r7, r2
 8000cf0:	19db      	adds	r3, r3, r7
 8000cf2:	e794      	b.n	8000c1e <__aeabi_dadd+0x3f2>
 8000cf4:	4a80      	ldr	r2, [pc, #512]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x4d0>
 8000cfa:	e0ec      	b.n	8000ed6 <__aeabi_dadd+0x6aa>
 8000cfc:	0039      	movs	r1, r7
 8000cfe:	4449      	add	r1, r9
 8000d00:	4549      	cmp	r1, r9
 8000d02:	4192      	sbcs	r2, r2
 8000d04:	4463      	add	r3, ip
 8000d06:	4252      	negs	r2, r2
 8000d08:	189b      	adds	r3, r3, r2
 8000d0a:	07dd      	lsls	r5, r3, #31
 8000d0c:	0849      	lsrs	r1, r1, #1
 8000d0e:	085b      	lsrs	r3, r3, #1
 8000d10:	4698      	mov	r8, r3
 8000d12:	0006      	movs	r6, r0
 8000d14:	430d      	orrs	r5, r1
 8000d16:	e6a5      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000d18:	464a      	mov	r2, r9
 8000d1a:	1abd      	subs	r5, r7, r2
 8000d1c:	42af      	cmp	r7, r5
 8000d1e:	4189      	sbcs	r1, r1
 8000d20:	4662      	mov	r2, ip
 8000d22:	4249      	negs	r1, r1
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	1a5b      	subs	r3, r3, r1
 8000d28:	4698      	mov	r8, r3
 8000d2a:	4654      	mov	r4, sl
 8000d2c:	e5d1      	b.n	80008d2 <__aeabi_dadd+0xa6>
 8000d2e:	076c      	lsls	r4, r5, #29
 8000d30:	08f9      	lsrs	r1, r7, #3
 8000d32:	4321      	orrs	r1, r4
 8000d34:	08eb      	lsrs	r3, r5, #3
 8000d36:	0004      	movs	r4, r0
 8000d38:	e69d      	b.n	8000a76 <__aeabi_dadd+0x24a>
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	d175      	bne.n	8000e2c <__aeabi_dadd+0x600>
 8000d40:	4661      	mov	r1, ip
 8000d42:	4339      	orrs	r1, r7
 8000d44:	d114      	bne.n	8000d70 <__aeabi_dadd+0x544>
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	2400      	movs	r4, #0
 8000d4a:	031b      	lsls	r3, r3, #12
 8000d4c:	e6bc      	b.n	8000ac8 <__aeabi_dadd+0x29c>
 8000d4e:	464a      	mov	r2, r9
 8000d50:	1bd5      	subs	r5, r2, r7
 8000d52:	45a9      	cmp	r9, r5
 8000d54:	4189      	sbcs	r1, r1
 8000d56:	4662      	mov	r2, ip
 8000d58:	4249      	negs	r1, r1
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	4698      	mov	r8, r3
 8000d60:	2601      	movs	r6, #1
 8000d62:	e5ae      	b.n	80008c2 <__aeabi_dadd+0x96>
 8000d64:	464a      	mov	r2, r9
 8000d66:	08d1      	lsrs	r1, r2, #3
 8000d68:	075a      	lsls	r2, r3, #29
 8000d6a:	4311      	orrs	r1, r2
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	e6a7      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000d70:	4663      	mov	r3, ip
 8000d72:	08f9      	lsrs	r1, r7, #3
 8000d74:	075a      	lsls	r2, r3, #29
 8000d76:	4654      	mov	r4, sl
 8000d78:	4311      	orrs	r1, r2
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	e6a0      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000d7e:	464a      	mov	r2, r9
 8000d80:	4313      	orrs	r3, r2
 8000d82:	001d      	movs	r5, r3
 8000d84:	1e6b      	subs	r3, r5, #1
 8000d86:	419d      	sbcs	r5, r3
 8000d88:	e6c7      	b.n	8000b1a <__aeabi_dadd+0x2ee>
 8000d8a:	0014      	movs	r4, r2
 8000d8c:	001e      	movs	r6, r3
 8000d8e:	3c20      	subs	r4, #32
 8000d90:	40e6      	lsrs	r6, r4
 8000d92:	2a20      	cmp	r2, #32
 8000d94:	d005      	beq.n	8000da2 <__aeabi_dadd+0x576>
 8000d96:	2440      	movs	r4, #64	; 0x40
 8000d98:	1aa2      	subs	r2, r4, r2
 8000d9a:	4093      	lsls	r3, r2
 8000d9c:	464a      	mov	r2, r9
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	4691      	mov	r9, r2
 8000da2:	464d      	mov	r5, r9
 8000da4:	1e6b      	subs	r3, r5, #1
 8000da6:	419d      	sbcs	r5, r3
 8000da8:	4335      	orrs	r5, r6
 8000daa:	e778      	b.n	8000c9e <__aeabi_dadd+0x472>
 8000dac:	464a      	mov	r2, r9
 8000dae:	431a      	orrs	r2, r3
 8000db0:	d000      	beq.n	8000db4 <__aeabi_dadd+0x588>
 8000db2:	e66b      	b.n	8000a8c <__aeabi_dadd+0x260>
 8000db4:	076b      	lsls	r3, r5, #29
 8000db6:	08f9      	lsrs	r1, r7, #3
 8000db8:	4319      	orrs	r1, r3
 8000dba:	08eb      	lsrs	r3, r5, #3
 8000dbc:	e680      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000dbe:	4661      	mov	r1, ip
 8000dc0:	4339      	orrs	r1, r7
 8000dc2:	d054      	beq.n	8000e6e <__aeabi_dadd+0x642>
 8000dc4:	4663      	mov	r3, ip
 8000dc6:	08f9      	lsrs	r1, r7, #3
 8000dc8:	075c      	lsls	r4, r3, #29
 8000dca:	4321      	orrs	r1, r4
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	0004      	movs	r4, r0
 8000dd0:	e654      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000dd2:	464a      	mov	r2, r9
 8000dd4:	1abd      	subs	r5, r7, r2
 8000dd6:	42af      	cmp	r7, r5
 8000dd8:	4189      	sbcs	r1, r1
 8000dda:	4662      	mov	r2, ip
 8000ddc:	4249      	negs	r1, r1
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	4698      	mov	r8, r3
 8000de4:	0004      	movs	r4, r0
 8000de6:	2601      	movs	r6, #1
 8000de8:	e56b      	b.n	80008c2 <__aeabi_dadd+0x96>
 8000dea:	464a      	mov	r2, r9
 8000dec:	1bd5      	subs	r5, r2, r7
 8000dee:	45a9      	cmp	r9, r5
 8000df0:	4189      	sbcs	r1, r1
 8000df2:	4662      	mov	r2, ip
 8000df4:	4249      	negs	r1, r1
 8000df6:	1a9a      	subs	r2, r3, r2
 8000df8:	1a52      	subs	r2, r2, r1
 8000dfa:	4690      	mov	r8, r2
 8000dfc:	0212      	lsls	r2, r2, #8
 8000dfe:	d532      	bpl.n	8000e66 <__aeabi_dadd+0x63a>
 8000e00:	464a      	mov	r2, r9
 8000e02:	1abd      	subs	r5, r7, r2
 8000e04:	42af      	cmp	r7, r5
 8000e06:	4189      	sbcs	r1, r1
 8000e08:	4662      	mov	r2, ip
 8000e0a:	4249      	negs	r1, r1
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	1a5b      	subs	r3, r3, r1
 8000e10:	4698      	mov	r8, r3
 8000e12:	0004      	movs	r4, r0
 8000e14:	e584      	b.n	8000920 <__aeabi_dadd+0xf4>
 8000e16:	4663      	mov	r3, ip
 8000e18:	08f9      	lsrs	r1, r7, #3
 8000e1a:	075a      	lsls	r2, r3, #29
 8000e1c:	4311      	orrs	r1, r2
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	e64e      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000e22:	08f9      	lsrs	r1, r7, #3
 8000e24:	0768      	lsls	r0, r5, #29
 8000e26:	4301      	orrs	r1, r0
 8000e28:	08eb      	lsrs	r3, r5, #3
 8000e2a:	e624      	b.n	8000a76 <__aeabi_dadd+0x24a>
 8000e2c:	4662      	mov	r2, ip
 8000e2e:	433a      	orrs	r2, r7
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dadd+0x608>
 8000e32:	e698      	b.n	8000b66 <__aeabi_dadd+0x33a>
 8000e34:	464a      	mov	r2, r9
 8000e36:	08d1      	lsrs	r1, r2, #3
 8000e38:	075a      	lsls	r2, r3, #29
 8000e3a:	4311      	orrs	r1, r2
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	031b      	lsls	r3, r3, #12
 8000e42:	421a      	tst	r2, r3
 8000e44:	d008      	beq.n	8000e58 <__aeabi_dadd+0x62c>
 8000e46:	4660      	mov	r0, ip
 8000e48:	08c5      	lsrs	r5, r0, #3
 8000e4a:	421d      	tst	r5, r3
 8000e4c:	d104      	bne.n	8000e58 <__aeabi_dadd+0x62c>
 8000e4e:	4654      	mov	r4, sl
 8000e50:	002a      	movs	r2, r5
 8000e52:	08f9      	lsrs	r1, r7, #3
 8000e54:	0743      	lsls	r3, r0, #29
 8000e56:	4319      	orrs	r1, r3
 8000e58:	0f4b      	lsrs	r3, r1, #29
 8000e5a:	00c9      	lsls	r1, r1, #3
 8000e5c:	075b      	lsls	r3, r3, #29
 8000e5e:	08c9      	lsrs	r1, r1, #3
 8000e60:	4319      	orrs	r1, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	e62c      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000e66:	4641      	mov	r1, r8
 8000e68:	4329      	orrs	r1, r5
 8000e6a:	d000      	beq.n	8000e6e <__aeabi_dadd+0x642>
 8000e6c:	e5fa      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	000a      	movs	r2, r1
 8000e72:	2400      	movs	r4, #0
 8000e74:	e602      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000e76:	076b      	lsls	r3, r5, #29
 8000e78:	08f9      	lsrs	r1, r7, #3
 8000e7a:	4319      	orrs	r1, r3
 8000e7c:	08eb      	lsrs	r3, r5, #3
 8000e7e:	e5fd      	b.n	8000a7c <__aeabi_dadd+0x250>
 8000e80:	4663      	mov	r3, ip
 8000e82:	08f9      	lsrs	r1, r7, #3
 8000e84:	075b      	lsls	r3, r3, #29
 8000e86:	4319      	orrs	r1, r3
 8000e88:	4663      	mov	r3, ip
 8000e8a:	0004      	movs	r4, r0
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	e617      	b.n	8000ac0 <__aeabi_dadd+0x294>
 8000e90:	003d      	movs	r5, r7
 8000e92:	444d      	add	r5, r9
 8000e94:	4463      	add	r3, ip
 8000e96:	454d      	cmp	r5, r9
 8000e98:	4189      	sbcs	r1, r1
 8000e9a:	4698      	mov	r8, r3
 8000e9c:	4249      	negs	r1, r1
 8000e9e:	4488      	add	r8, r1
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	d400      	bmi.n	8000ea8 <__aeabi_dadd+0x67c>
 8000ea6:	e5dd      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000ea8:	4642      	mov	r2, r8
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <__aeabi_dadd+0x6d0>)
 8000eac:	2601      	movs	r6, #1
 8000eae:	401a      	ands	r2, r3
 8000eb0:	4690      	mov	r8, r2
 8000eb2:	e5d7      	b.n	8000a64 <__aeabi_dadd+0x238>
 8000eb4:	0010      	movs	r0, r2
 8000eb6:	001e      	movs	r6, r3
 8000eb8:	3820      	subs	r0, #32
 8000eba:	40c6      	lsrs	r6, r0
 8000ebc:	2a20      	cmp	r2, #32
 8000ebe:	d005      	beq.n	8000ecc <__aeabi_dadd+0x6a0>
 8000ec0:	2040      	movs	r0, #64	; 0x40
 8000ec2:	1a82      	subs	r2, r0, r2
 8000ec4:	4093      	lsls	r3, r2
 8000ec6:	464a      	mov	r2, r9
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	4691      	mov	r9, r2
 8000ecc:	464d      	mov	r5, r9
 8000ece:	1e6b      	subs	r3, r5, #1
 8000ed0:	419d      	sbcs	r5, r3
 8000ed2:	4335      	orrs	r5, r6
 8000ed4:	e621      	b.n	8000b1a <__aeabi_dadd+0x2ee>
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	e540      	b.n	8000960 <__aeabi_dadd+0x134>
 8000ede:	464a      	mov	r2, r9
 8000ee0:	19d5      	adds	r5, r2, r7
 8000ee2:	42bd      	cmp	r5, r7
 8000ee4:	4189      	sbcs	r1, r1
 8000ee6:	4463      	add	r3, ip
 8000ee8:	4698      	mov	r8, r3
 8000eea:	4249      	negs	r1, r1
 8000eec:	4488      	add	r8, r1
 8000eee:	e5b3      	b.n	8000a58 <__aeabi_dadd+0x22c>
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4a01      	ldr	r2, [pc, #4]	; (8000ef8 <__aeabi_dadd+0x6cc>)
 8000ef4:	000b      	movs	r3, r1
 8000ef6:	e533      	b.n	8000960 <__aeabi_dadd+0x134>
 8000ef8:	000007ff 	.word	0x000007ff
 8000efc:	ff7fffff 	.word	0xff7fffff

08000f00 <__aeabi_ddiv>:
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	4657      	mov	r7, sl
 8000f04:	464e      	mov	r6, r9
 8000f06:	4645      	mov	r5, r8
 8000f08:	46de      	mov	lr, fp
 8000f0a:	b5e0      	push	{r5, r6, r7, lr}
 8000f0c:	4681      	mov	r9, r0
 8000f0e:	0005      	movs	r5, r0
 8000f10:	030c      	lsls	r4, r1, #12
 8000f12:	0048      	lsls	r0, r1, #1
 8000f14:	4692      	mov	sl, r2
 8000f16:	001f      	movs	r7, r3
 8000f18:	b085      	sub	sp, #20
 8000f1a:	0b24      	lsrs	r4, r4, #12
 8000f1c:	0d40      	lsrs	r0, r0, #21
 8000f1e:	0fce      	lsrs	r6, r1, #31
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d059      	beq.n	8000fd8 <__aeabi_ddiv+0xd8>
 8000f24:	4b87      	ldr	r3, [pc, #540]	; (8001144 <__aeabi_ddiv+0x244>)
 8000f26:	4298      	cmp	r0, r3
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x2c>
 8000f2a:	e098      	b.n	800105e <__aeabi_ddiv+0x15e>
 8000f2c:	0f6b      	lsrs	r3, r5, #29
 8000f2e:	00e4      	lsls	r4, r4, #3
 8000f30:	431c      	orrs	r4, r3
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	4323      	orrs	r3, r4
 8000f38:	4698      	mov	r8, r3
 8000f3a:	4b83      	ldr	r3, [pc, #524]	; (8001148 <__aeabi_ddiv+0x248>)
 8000f3c:	00ed      	lsls	r5, r5, #3
 8000f3e:	469b      	mov	fp, r3
 8000f40:	2300      	movs	r3, #0
 8000f42:	4699      	mov	r9, r3
 8000f44:	4483      	add	fp, r0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	033c      	lsls	r4, r7, #12
 8000f4a:	007b      	lsls	r3, r7, #1
 8000f4c:	4650      	mov	r0, sl
 8000f4e:	0b24      	lsrs	r4, r4, #12
 8000f50:	0d5b      	lsrs	r3, r3, #21
 8000f52:	0fff      	lsrs	r7, r7, #31
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d067      	beq.n	8001028 <__aeabi_ddiv+0x128>
 8000f58:	4a7a      	ldr	r2, [pc, #488]	; (8001144 <__aeabi_ddiv+0x244>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d018      	beq.n	8000f90 <__aeabi_ddiv+0x90>
 8000f5e:	497a      	ldr	r1, [pc, #488]	; (8001148 <__aeabi_ddiv+0x248>)
 8000f60:	0f42      	lsrs	r2, r0, #29
 8000f62:	468c      	mov	ip, r1
 8000f64:	00e4      	lsls	r4, r4, #3
 8000f66:	4659      	mov	r1, fp
 8000f68:	4314      	orrs	r4, r2
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	4463      	add	r3, ip
 8000f6e:	0412      	lsls	r2, r2, #16
 8000f70:	1acb      	subs	r3, r1, r3
 8000f72:	4314      	orrs	r4, r2
 8000f74:	469b      	mov	fp, r3
 8000f76:	00c2      	lsls	r2, r0, #3
 8000f78:	2000      	movs	r0, #0
 8000f7a:	0033      	movs	r3, r6
 8000f7c:	407b      	eors	r3, r7
 8000f7e:	469a      	mov	sl, r3
 8000f80:	464b      	mov	r3, r9
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d900      	bls.n	8000f88 <__aeabi_ddiv+0x88>
 8000f86:	e0ef      	b.n	8001168 <__aeabi_ddiv+0x268>
 8000f88:	4970      	ldr	r1, [pc, #448]	; (800114c <__aeabi_ddiv+0x24c>)
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	58cb      	ldr	r3, [r1, r3]
 8000f8e:	469f      	mov	pc, r3
 8000f90:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <__aeabi_ddiv+0x250>)
 8000f92:	4652      	mov	r2, sl
 8000f94:	469c      	mov	ip, r3
 8000f96:	4322      	orrs	r2, r4
 8000f98:	44e3      	add	fp, ip
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_ddiv+0xa0>
 8000f9e:	e095      	b.n	80010cc <__aeabi_ddiv+0x1cc>
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	4319      	orrs	r1, r3
 8000fa6:	4689      	mov	r9, r1
 8000fa8:	2400      	movs	r4, #0
 8000faa:	2002      	movs	r0, #2
 8000fac:	e7e5      	b.n	8000f7a <__aeabi_ddiv+0x7a>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2400      	movs	r4, #0
 8000fb2:	2500      	movs	r5, #0
 8000fb4:	4652      	mov	r2, sl
 8000fb6:	051b      	lsls	r3, r3, #20
 8000fb8:	4323      	orrs	r3, r4
 8000fba:	07d2      	lsls	r2, r2, #31
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	0028      	movs	r0, r5
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	b005      	add	sp, #20
 8000fc4:	bcf0      	pop	{r4, r5, r6, r7}
 8000fc6:	46bb      	mov	fp, r7
 8000fc8:	46b2      	mov	sl, r6
 8000fca:	46a9      	mov	r9, r5
 8000fcc:	46a0      	mov	r8, r4
 8000fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd0:	2400      	movs	r4, #0
 8000fd2:	2500      	movs	r5, #0
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <__aeabi_ddiv+0x244>)
 8000fd6:	e7ed      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8000fd8:	464b      	mov	r3, r9
 8000fda:	4323      	orrs	r3, r4
 8000fdc:	4698      	mov	r8, r3
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0xe2>
 8000fe0:	e089      	b.n	80010f6 <__aeabi_ddiv+0x1f6>
 8000fe2:	2c00      	cmp	r4, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0xe8>
 8000fe6:	e1e0      	b.n	80013aa <__aeabi_ddiv+0x4aa>
 8000fe8:	0020      	movs	r0, r4
 8000fea:	f001 fb07 	bl	80025fc <__clzsi2>
 8000fee:	0001      	movs	r1, r0
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	390b      	subs	r1, #11
 8000ff4:	231d      	movs	r3, #29
 8000ff6:	1a5b      	subs	r3, r3, r1
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	0010      	movs	r0, r2
 8000ffc:	40d9      	lsrs	r1, r3
 8000ffe:	3808      	subs	r0, #8
 8001000:	4084      	lsls	r4, r0
 8001002:	000b      	movs	r3, r1
 8001004:	464d      	mov	r5, r9
 8001006:	4323      	orrs	r3, r4
 8001008:	4698      	mov	r8, r3
 800100a:	4085      	lsls	r5, r0
 800100c:	4851      	ldr	r0, [pc, #324]	; (8001154 <__aeabi_ddiv+0x254>)
 800100e:	033c      	lsls	r4, r7, #12
 8001010:	1a83      	subs	r3, r0, r2
 8001012:	469b      	mov	fp, r3
 8001014:	2300      	movs	r3, #0
 8001016:	4699      	mov	r9, r3
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	007b      	lsls	r3, r7, #1
 800101c:	4650      	mov	r0, sl
 800101e:	0b24      	lsrs	r4, r4, #12
 8001020:	0d5b      	lsrs	r3, r3, #21
 8001022:	0fff      	lsrs	r7, r7, #31
 8001024:	2b00      	cmp	r3, #0
 8001026:	d197      	bne.n	8000f58 <__aeabi_ddiv+0x58>
 8001028:	4652      	mov	r2, sl
 800102a:	4322      	orrs	r2, r4
 800102c:	d055      	beq.n	80010da <__aeabi_ddiv+0x1da>
 800102e:	2c00      	cmp	r4, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x134>
 8001032:	e1ca      	b.n	80013ca <__aeabi_ddiv+0x4ca>
 8001034:	0020      	movs	r0, r4
 8001036:	f001 fae1 	bl	80025fc <__clzsi2>
 800103a:	0002      	movs	r2, r0
 800103c:	3a0b      	subs	r2, #11
 800103e:	231d      	movs	r3, #29
 8001040:	0001      	movs	r1, r0
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	4652      	mov	r2, sl
 8001046:	3908      	subs	r1, #8
 8001048:	40da      	lsrs	r2, r3
 800104a:	408c      	lsls	r4, r1
 800104c:	4314      	orrs	r4, r2
 800104e:	4652      	mov	r2, sl
 8001050:	408a      	lsls	r2, r1
 8001052:	4b41      	ldr	r3, [pc, #260]	; (8001158 <__aeabi_ddiv+0x258>)
 8001054:	4458      	add	r0, fp
 8001056:	469b      	mov	fp, r3
 8001058:	4483      	add	fp, r0
 800105a:	2000      	movs	r0, #0
 800105c:	e78d      	b.n	8000f7a <__aeabi_ddiv+0x7a>
 800105e:	464b      	mov	r3, r9
 8001060:	4323      	orrs	r3, r4
 8001062:	4698      	mov	r8, r3
 8001064:	d140      	bne.n	80010e8 <__aeabi_ddiv+0x1e8>
 8001066:	2308      	movs	r3, #8
 8001068:	4699      	mov	r9, r3
 800106a:	3b06      	subs	r3, #6
 800106c:	2500      	movs	r5, #0
 800106e:	4683      	mov	fp, r0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	e769      	b.n	8000f48 <__aeabi_ddiv+0x48>
 8001074:	46b2      	mov	sl, r6
 8001076:	9b00      	ldr	r3, [sp, #0]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d0a9      	beq.n	8000fd0 <__aeabi_ddiv+0xd0>
 800107c:	2b03      	cmp	r3, #3
 800107e:	d100      	bne.n	8001082 <__aeabi_ddiv+0x182>
 8001080:	e211      	b.n	80014a6 <__aeabi_ddiv+0x5a6>
 8001082:	2b01      	cmp	r3, #1
 8001084:	d093      	beq.n	8000fae <__aeabi_ddiv+0xae>
 8001086:	4a35      	ldr	r2, [pc, #212]	; (800115c <__aeabi_ddiv+0x25c>)
 8001088:	445a      	add	r2, fp
 800108a:	2a00      	cmp	r2, #0
 800108c:	dc00      	bgt.n	8001090 <__aeabi_ddiv+0x190>
 800108e:	e13c      	b.n	800130a <__aeabi_ddiv+0x40a>
 8001090:	076b      	lsls	r3, r5, #29
 8001092:	d000      	beq.n	8001096 <__aeabi_ddiv+0x196>
 8001094:	e1a7      	b.n	80013e6 <__aeabi_ddiv+0x4e6>
 8001096:	08ed      	lsrs	r5, r5, #3
 8001098:	4643      	mov	r3, r8
 800109a:	01db      	lsls	r3, r3, #7
 800109c:	d506      	bpl.n	80010ac <__aeabi_ddiv+0x1ac>
 800109e:	4642      	mov	r2, r8
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <__aeabi_ddiv+0x260>)
 80010a2:	401a      	ands	r2, r3
 80010a4:	4690      	mov	r8, r2
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	445a      	add	r2, fp
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <__aeabi_ddiv+0x264>)
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dc8e      	bgt.n	8000fd0 <__aeabi_ddiv+0xd0>
 80010b2:	4643      	mov	r3, r8
 80010b4:	0552      	lsls	r2, r2, #21
 80010b6:	0758      	lsls	r0, r3, #29
 80010b8:	025c      	lsls	r4, r3, #9
 80010ba:	4305      	orrs	r5, r0
 80010bc:	0b24      	lsrs	r4, r4, #12
 80010be:	0d53      	lsrs	r3, r2, #21
 80010c0:	e778      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 80010c2:	46ba      	mov	sl, r7
 80010c4:	46a0      	mov	r8, r4
 80010c6:	0015      	movs	r5, r2
 80010c8:	9000      	str	r0, [sp, #0]
 80010ca:	e7d4      	b.n	8001076 <__aeabi_ddiv+0x176>
 80010cc:	464a      	mov	r2, r9
 80010ce:	2303      	movs	r3, #3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	4691      	mov	r9, r2
 80010d4:	2003      	movs	r0, #3
 80010d6:	4652      	mov	r2, sl
 80010d8:	e74f      	b.n	8000f7a <__aeabi_ddiv+0x7a>
 80010da:	4649      	mov	r1, r9
 80010dc:	2301      	movs	r3, #1
 80010de:	4319      	orrs	r1, r3
 80010e0:	4689      	mov	r9, r1
 80010e2:	2400      	movs	r4, #0
 80010e4:	2001      	movs	r0, #1
 80010e6:	e748      	b.n	8000f7a <__aeabi_ddiv+0x7a>
 80010e8:	230c      	movs	r3, #12
 80010ea:	4699      	mov	r9, r3
 80010ec:	3b09      	subs	r3, #9
 80010ee:	46a0      	mov	r8, r4
 80010f0:	4683      	mov	fp, r0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	e728      	b.n	8000f48 <__aeabi_ddiv+0x48>
 80010f6:	2304      	movs	r3, #4
 80010f8:	4699      	mov	r9, r3
 80010fa:	2300      	movs	r3, #0
 80010fc:	469b      	mov	fp, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	2500      	movs	r5, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	e720      	b.n	8000f48 <__aeabi_ddiv+0x48>
 8001106:	2300      	movs	r3, #0
 8001108:	2480      	movs	r4, #128	; 0x80
 800110a:	469a      	mov	sl, r3
 800110c:	2500      	movs	r5, #0
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <__aeabi_ddiv+0x244>)
 8001110:	0324      	lsls	r4, r4, #12
 8001112:	e74f      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	4641      	mov	r1, r8
 8001118:	031b      	lsls	r3, r3, #12
 800111a:	4219      	tst	r1, r3
 800111c:	d008      	beq.n	8001130 <__aeabi_ddiv+0x230>
 800111e:	421c      	tst	r4, r3
 8001120:	d106      	bne.n	8001130 <__aeabi_ddiv+0x230>
 8001122:	431c      	orrs	r4, r3
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	46ba      	mov	sl, r7
 8001128:	0015      	movs	r5, r2
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <__aeabi_ddiv+0x244>)
 800112c:	0b24      	lsrs	r4, r4, #12
 800112e:	e741      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	4643      	mov	r3, r8
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	431c      	orrs	r4, r3
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	46b2      	mov	sl, r6
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <__aeabi_ddiv+0x244>)
 800113e:	0b24      	lsrs	r4, r4, #12
 8001140:	e738      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff
 8001148:	fffffc01 	.word	0xfffffc01
 800114c:	0800aad4 	.word	0x0800aad4
 8001150:	fffff801 	.word	0xfffff801
 8001154:	fffffc0d 	.word	0xfffffc0d
 8001158:	000003f3 	.word	0x000003f3
 800115c:	000003ff 	.word	0x000003ff
 8001160:	feffffff 	.word	0xfeffffff
 8001164:	000007fe 	.word	0x000007fe
 8001168:	4544      	cmp	r4, r8
 800116a:	d200      	bcs.n	800116e <__aeabi_ddiv+0x26e>
 800116c:	e116      	b.n	800139c <__aeabi_ddiv+0x49c>
 800116e:	d100      	bne.n	8001172 <__aeabi_ddiv+0x272>
 8001170:	e111      	b.n	8001396 <__aeabi_ddiv+0x496>
 8001172:	2301      	movs	r3, #1
 8001174:	425b      	negs	r3, r3
 8001176:	469c      	mov	ip, r3
 8001178:	002e      	movs	r6, r5
 800117a:	4640      	mov	r0, r8
 800117c:	2500      	movs	r5, #0
 800117e:	44e3      	add	fp, ip
 8001180:	0223      	lsls	r3, r4, #8
 8001182:	0e14      	lsrs	r4, r2, #24
 8001184:	431c      	orrs	r4, r3
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	4699      	mov	r9, r3
 800118a:	0423      	lsls	r3, r4, #16
 800118c:	0c1f      	lsrs	r7, r3, #16
 800118e:	0212      	lsls	r2, r2, #8
 8001190:	4649      	mov	r1, r9
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	9701      	str	r7, [sp, #4]
 8001196:	f7ff f859 	bl	800024c <__aeabi_uidivmod>
 800119a:	0002      	movs	r2, r0
 800119c:	437a      	muls	r2, r7
 800119e:	040b      	lsls	r3, r1, #16
 80011a0:	0c31      	lsrs	r1, r6, #16
 80011a2:	4680      	mov	r8, r0
 80011a4:	4319      	orrs	r1, r3
 80011a6:	428a      	cmp	r2, r1
 80011a8:	d90b      	bls.n	80011c2 <__aeabi_ddiv+0x2c2>
 80011aa:	2301      	movs	r3, #1
 80011ac:	425b      	negs	r3, r3
 80011ae:	469c      	mov	ip, r3
 80011b0:	1909      	adds	r1, r1, r4
 80011b2:	44e0      	add	r8, ip
 80011b4:	428c      	cmp	r4, r1
 80011b6:	d804      	bhi.n	80011c2 <__aeabi_ddiv+0x2c2>
 80011b8:	428a      	cmp	r2, r1
 80011ba:	d902      	bls.n	80011c2 <__aeabi_ddiv+0x2c2>
 80011bc:	1e83      	subs	r3, r0, #2
 80011be:	4698      	mov	r8, r3
 80011c0:	1909      	adds	r1, r1, r4
 80011c2:	1a88      	subs	r0, r1, r2
 80011c4:	4649      	mov	r1, r9
 80011c6:	f7ff f841 	bl	800024c <__aeabi_uidivmod>
 80011ca:	0409      	lsls	r1, r1, #16
 80011cc:	468c      	mov	ip, r1
 80011ce:	0431      	lsls	r1, r6, #16
 80011d0:	4666      	mov	r6, ip
 80011d2:	9a01      	ldr	r2, [sp, #4]
 80011d4:	0c09      	lsrs	r1, r1, #16
 80011d6:	4342      	muls	r2, r0
 80011d8:	0003      	movs	r3, r0
 80011da:	4331      	orrs	r1, r6
 80011dc:	428a      	cmp	r2, r1
 80011de:	d904      	bls.n	80011ea <__aeabi_ddiv+0x2ea>
 80011e0:	1909      	adds	r1, r1, r4
 80011e2:	3b01      	subs	r3, #1
 80011e4:	428c      	cmp	r4, r1
 80011e6:	d800      	bhi.n	80011ea <__aeabi_ddiv+0x2ea>
 80011e8:	e111      	b.n	800140e <__aeabi_ddiv+0x50e>
 80011ea:	1a89      	subs	r1, r1, r2
 80011ec:	4642      	mov	r2, r8
 80011ee:	9e00      	ldr	r6, [sp, #0]
 80011f0:	0412      	lsls	r2, r2, #16
 80011f2:	431a      	orrs	r2, r3
 80011f4:	0c33      	lsrs	r3, r6, #16
 80011f6:	001f      	movs	r7, r3
 80011f8:	0c10      	lsrs	r0, r2, #16
 80011fa:	4690      	mov	r8, r2
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	0413      	lsls	r3, r2, #16
 8001200:	0432      	lsls	r2, r6, #16
 8001202:	0c16      	lsrs	r6, r2, #16
 8001204:	0032      	movs	r2, r6
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	435a      	muls	r2, r3
 800120a:	9603      	str	r6, [sp, #12]
 800120c:	437b      	muls	r3, r7
 800120e:	4346      	muls	r6, r0
 8001210:	4378      	muls	r0, r7
 8001212:	0c17      	lsrs	r7, r2, #16
 8001214:	46bc      	mov	ip, r7
 8001216:	199b      	adds	r3, r3, r6
 8001218:	4463      	add	r3, ip
 800121a:	429e      	cmp	r6, r3
 800121c:	d903      	bls.n	8001226 <__aeabi_ddiv+0x326>
 800121e:	2680      	movs	r6, #128	; 0x80
 8001220:	0276      	lsls	r6, r6, #9
 8001222:	46b4      	mov	ip, r6
 8001224:	4460      	add	r0, ip
 8001226:	0c1e      	lsrs	r6, r3, #16
 8001228:	1830      	adds	r0, r6, r0
 800122a:	0416      	lsls	r6, r2, #16
 800122c:	041b      	lsls	r3, r3, #16
 800122e:	0c36      	lsrs	r6, r6, #16
 8001230:	199e      	adds	r6, r3, r6
 8001232:	4281      	cmp	r1, r0
 8001234:	d200      	bcs.n	8001238 <__aeabi_ddiv+0x338>
 8001236:	e09c      	b.n	8001372 <__aeabi_ddiv+0x472>
 8001238:	d100      	bne.n	800123c <__aeabi_ddiv+0x33c>
 800123a:	e097      	b.n	800136c <__aeabi_ddiv+0x46c>
 800123c:	1bae      	subs	r6, r5, r6
 800123e:	1a09      	subs	r1, r1, r0
 8001240:	42b5      	cmp	r5, r6
 8001242:	4180      	sbcs	r0, r0
 8001244:	4240      	negs	r0, r0
 8001246:	1a08      	subs	r0, r1, r0
 8001248:	4284      	cmp	r4, r0
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x34e>
 800124c:	e111      	b.n	8001472 <__aeabi_ddiv+0x572>
 800124e:	4649      	mov	r1, r9
 8001250:	f7fe fffc 	bl	800024c <__aeabi_uidivmod>
 8001254:	9a01      	ldr	r2, [sp, #4]
 8001256:	040b      	lsls	r3, r1, #16
 8001258:	4342      	muls	r2, r0
 800125a:	0c31      	lsrs	r1, r6, #16
 800125c:	0005      	movs	r5, r0
 800125e:	4319      	orrs	r1, r3
 8001260:	428a      	cmp	r2, r1
 8001262:	d907      	bls.n	8001274 <__aeabi_ddiv+0x374>
 8001264:	1909      	adds	r1, r1, r4
 8001266:	3d01      	subs	r5, #1
 8001268:	428c      	cmp	r4, r1
 800126a:	d803      	bhi.n	8001274 <__aeabi_ddiv+0x374>
 800126c:	428a      	cmp	r2, r1
 800126e:	d901      	bls.n	8001274 <__aeabi_ddiv+0x374>
 8001270:	1e85      	subs	r5, r0, #2
 8001272:	1909      	adds	r1, r1, r4
 8001274:	1a88      	subs	r0, r1, r2
 8001276:	4649      	mov	r1, r9
 8001278:	f7fe ffe8 	bl	800024c <__aeabi_uidivmod>
 800127c:	0409      	lsls	r1, r1, #16
 800127e:	468c      	mov	ip, r1
 8001280:	0431      	lsls	r1, r6, #16
 8001282:	4666      	mov	r6, ip
 8001284:	9a01      	ldr	r2, [sp, #4]
 8001286:	0c09      	lsrs	r1, r1, #16
 8001288:	4342      	muls	r2, r0
 800128a:	0003      	movs	r3, r0
 800128c:	4331      	orrs	r1, r6
 800128e:	428a      	cmp	r2, r1
 8001290:	d907      	bls.n	80012a2 <__aeabi_ddiv+0x3a2>
 8001292:	1909      	adds	r1, r1, r4
 8001294:	3b01      	subs	r3, #1
 8001296:	428c      	cmp	r4, r1
 8001298:	d803      	bhi.n	80012a2 <__aeabi_ddiv+0x3a2>
 800129a:	428a      	cmp	r2, r1
 800129c:	d901      	bls.n	80012a2 <__aeabi_ddiv+0x3a2>
 800129e:	1e83      	subs	r3, r0, #2
 80012a0:	1909      	adds	r1, r1, r4
 80012a2:	9e03      	ldr	r6, [sp, #12]
 80012a4:	1a89      	subs	r1, r1, r2
 80012a6:	0032      	movs	r2, r6
 80012a8:	042d      	lsls	r5, r5, #16
 80012aa:	431d      	orrs	r5, r3
 80012ac:	9f02      	ldr	r7, [sp, #8]
 80012ae:	042b      	lsls	r3, r5, #16
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	435a      	muls	r2, r3
 80012b4:	437b      	muls	r3, r7
 80012b6:	469c      	mov	ip, r3
 80012b8:	0c28      	lsrs	r0, r5, #16
 80012ba:	4346      	muls	r6, r0
 80012bc:	0c13      	lsrs	r3, r2, #16
 80012be:	44b4      	add	ip, r6
 80012c0:	4463      	add	r3, ip
 80012c2:	4378      	muls	r0, r7
 80012c4:	429e      	cmp	r6, r3
 80012c6:	d903      	bls.n	80012d0 <__aeabi_ddiv+0x3d0>
 80012c8:	2680      	movs	r6, #128	; 0x80
 80012ca:	0276      	lsls	r6, r6, #9
 80012cc:	46b4      	mov	ip, r6
 80012ce:	4460      	add	r0, ip
 80012d0:	0c1e      	lsrs	r6, r3, #16
 80012d2:	0412      	lsls	r2, r2, #16
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	0c12      	lsrs	r2, r2, #16
 80012d8:	1830      	adds	r0, r6, r0
 80012da:	189b      	adds	r3, r3, r2
 80012dc:	4281      	cmp	r1, r0
 80012de:	d306      	bcc.n	80012ee <__aeabi_ddiv+0x3ee>
 80012e0:	d002      	beq.n	80012e8 <__aeabi_ddiv+0x3e8>
 80012e2:	2301      	movs	r3, #1
 80012e4:	431d      	orrs	r5, r3
 80012e6:	e6ce      	b.n	8001086 <__aeabi_ddiv+0x186>
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_ddiv+0x3ee>
 80012ec:	e6cb      	b.n	8001086 <__aeabi_ddiv+0x186>
 80012ee:	1861      	adds	r1, r4, r1
 80012f0:	1e6e      	subs	r6, r5, #1
 80012f2:	42a1      	cmp	r1, r4
 80012f4:	d200      	bcs.n	80012f8 <__aeabi_ddiv+0x3f8>
 80012f6:	e0a4      	b.n	8001442 <__aeabi_ddiv+0x542>
 80012f8:	4281      	cmp	r1, r0
 80012fa:	d200      	bcs.n	80012fe <__aeabi_ddiv+0x3fe>
 80012fc:	e0c9      	b.n	8001492 <__aeabi_ddiv+0x592>
 80012fe:	d100      	bne.n	8001302 <__aeabi_ddiv+0x402>
 8001300:	e0d9      	b.n	80014b6 <__aeabi_ddiv+0x5b6>
 8001302:	0035      	movs	r5, r6
 8001304:	e7ed      	b.n	80012e2 <__aeabi_ddiv+0x3e2>
 8001306:	2501      	movs	r5, #1
 8001308:	426d      	negs	r5, r5
 800130a:	2101      	movs	r1, #1
 800130c:	1a89      	subs	r1, r1, r2
 800130e:	2938      	cmp	r1, #56	; 0x38
 8001310:	dd00      	ble.n	8001314 <__aeabi_ddiv+0x414>
 8001312:	e64c      	b.n	8000fae <__aeabi_ddiv+0xae>
 8001314:	291f      	cmp	r1, #31
 8001316:	dc00      	bgt.n	800131a <__aeabi_ddiv+0x41a>
 8001318:	e07f      	b.n	800141a <__aeabi_ddiv+0x51a>
 800131a:	231f      	movs	r3, #31
 800131c:	425b      	negs	r3, r3
 800131e:	1a9a      	subs	r2, r3, r2
 8001320:	4643      	mov	r3, r8
 8001322:	40d3      	lsrs	r3, r2
 8001324:	2920      	cmp	r1, #32
 8001326:	d004      	beq.n	8001332 <__aeabi_ddiv+0x432>
 8001328:	4644      	mov	r4, r8
 800132a:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <__aeabi_ddiv+0x5c0>)
 800132c:	445a      	add	r2, fp
 800132e:	4094      	lsls	r4, r2
 8001330:	4325      	orrs	r5, r4
 8001332:	1e6a      	subs	r2, r5, #1
 8001334:	4195      	sbcs	r5, r2
 8001336:	2207      	movs	r2, #7
 8001338:	432b      	orrs	r3, r5
 800133a:	0015      	movs	r5, r2
 800133c:	2400      	movs	r4, #0
 800133e:	401d      	ands	r5, r3
 8001340:	421a      	tst	r2, r3
 8001342:	d100      	bne.n	8001346 <__aeabi_ddiv+0x446>
 8001344:	e0a1      	b.n	800148a <__aeabi_ddiv+0x58a>
 8001346:	220f      	movs	r2, #15
 8001348:	2400      	movs	r4, #0
 800134a:	401a      	ands	r2, r3
 800134c:	2a04      	cmp	r2, #4
 800134e:	d100      	bne.n	8001352 <__aeabi_ddiv+0x452>
 8001350:	e098      	b.n	8001484 <__aeabi_ddiv+0x584>
 8001352:	1d1a      	adds	r2, r3, #4
 8001354:	429a      	cmp	r2, r3
 8001356:	419b      	sbcs	r3, r3
 8001358:	425b      	negs	r3, r3
 800135a:	18e4      	adds	r4, r4, r3
 800135c:	0013      	movs	r3, r2
 800135e:	0222      	lsls	r2, r4, #8
 8001360:	d400      	bmi.n	8001364 <__aeabi_ddiv+0x464>
 8001362:	e08f      	b.n	8001484 <__aeabi_ddiv+0x584>
 8001364:	2301      	movs	r3, #1
 8001366:	2400      	movs	r4, #0
 8001368:	2500      	movs	r5, #0
 800136a:	e623      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 800136c:	42b5      	cmp	r5, r6
 800136e:	d300      	bcc.n	8001372 <__aeabi_ddiv+0x472>
 8001370:	e764      	b.n	800123c <__aeabi_ddiv+0x33c>
 8001372:	4643      	mov	r3, r8
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	9b00      	ldr	r3, [sp, #0]
 8001378:	469c      	mov	ip, r3
 800137a:	4465      	add	r5, ip
 800137c:	001f      	movs	r7, r3
 800137e:	429d      	cmp	r5, r3
 8001380:	419b      	sbcs	r3, r3
 8001382:	425b      	negs	r3, r3
 8001384:	191b      	adds	r3, r3, r4
 8001386:	18c9      	adds	r1, r1, r3
 8001388:	428c      	cmp	r4, r1
 800138a:	d23a      	bcs.n	8001402 <__aeabi_ddiv+0x502>
 800138c:	4288      	cmp	r0, r1
 800138e:	d863      	bhi.n	8001458 <__aeabi_ddiv+0x558>
 8001390:	d060      	beq.n	8001454 <__aeabi_ddiv+0x554>
 8001392:	4690      	mov	r8, r2
 8001394:	e752      	b.n	800123c <__aeabi_ddiv+0x33c>
 8001396:	42aa      	cmp	r2, r5
 8001398:	d900      	bls.n	800139c <__aeabi_ddiv+0x49c>
 800139a:	e6ea      	b.n	8001172 <__aeabi_ddiv+0x272>
 800139c:	4643      	mov	r3, r8
 800139e:	07de      	lsls	r6, r3, #31
 80013a0:	0858      	lsrs	r0, r3, #1
 80013a2:	086b      	lsrs	r3, r5, #1
 80013a4:	431e      	orrs	r6, r3
 80013a6:	07ed      	lsls	r5, r5, #31
 80013a8:	e6ea      	b.n	8001180 <__aeabi_ddiv+0x280>
 80013aa:	4648      	mov	r0, r9
 80013ac:	f001 f926 	bl	80025fc <__clzsi2>
 80013b0:	0001      	movs	r1, r0
 80013b2:	0002      	movs	r2, r0
 80013b4:	3115      	adds	r1, #21
 80013b6:	3220      	adds	r2, #32
 80013b8:	291c      	cmp	r1, #28
 80013ba:	dc00      	bgt.n	80013be <__aeabi_ddiv+0x4be>
 80013bc:	e61a      	b.n	8000ff4 <__aeabi_ddiv+0xf4>
 80013be:	464b      	mov	r3, r9
 80013c0:	3808      	subs	r0, #8
 80013c2:	4083      	lsls	r3, r0
 80013c4:	2500      	movs	r5, #0
 80013c6:	4698      	mov	r8, r3
 80013c8:	e620      	b.n	800100c <__aeabi_ddiv+0x10c>
 80013ca:	f001 f917 	bl	80025fc <__clzsi2>
 80013ce:	0003      	movs	r3, r0
 80013d0:	001a      	movs	r2, r3
 80013d2:	3215      	adds	r2, #21
 80013d4:	3020      	adds	r0, #32
 80013d6:	2a1c      	cmp	r2, #28
 80013d8:	dc00      	bgt.n	80013dc <__aeabi_ddiv+0x4dc>
 80013da:	e630      	b.n	800103e <__aeabi_ddiv+0x13e>
 80013dc:	4654      	mov	r4, sl
 80013de:	3b08      	subs	r3, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	409c      	lsls	r4, r3
 80013e4:	e635      	b.n	8001052 <__aeabi_ddiv+0x152>
 80013e6:	230f      	movs	r3, #15
 80013e8:	402b      	ands	r3, r5
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x4f0>
 80013ee:	e652      	b.n	8001096 <__aeabi_ddiv+0x196>
 80013f0:	2305      	movs	r3, #5
 80013f2:	425b      	negs	r3, r3
 80013f4:	42ab      	cmp	r3, r5
 80013f6:	419b      	sbcs	r3, r3
 80013f8:	3504      	adds	r5, #4
 80013fa:	425b      	negs	r3, r3
 80013fc:	08ed      	lsrs	r5, r5, #3
 80013fe:	4498      	add	r8, r3
 8001400:	e64a      	b.n	8001098 <__aeabi_ddiv+0x198>
 8001402:	428c      	cmp	r4, r1
 8001404:	d1c5      	bne.n	8001392 <__aeabi_ddiv+0x492>
 8001406:	42af      	cmp	r7, r5
 8001408:	d9c0      	bls.n	800138c <__aeabi_ddiv+0x48c>
 800140a:	4690      	mov	r8, r2
 800140c:	e716      	b.n	800123c <__aeabi_ddiv+0x33c>
 800140e:	428a      	cmp	r2, r1
 8001410:	d800      	bhi.n	8001414 <__aeabi_ddiv+0x514>
 8001412:	e6ea      	b.n	80011ea <__aeabi_ddiv+0x2ea>
 8001414:	1e83      	subs	r3, r0, #2
 8001416:	1909      	adds	r1, r1, r4
 8001418:	e6e7      	b.n	80011ea <__aeabi_ddiv+0x2ea>
 800141a:	4a2a      	ldr	r2, [pc, #168]	; (80014c4 <__aeabi_ddiv+0x5c4>)
 800141c:	0028      	movs	r0, r5
 800141e:	445a      	add	r2, fp
 8001420:	4643      	mov	r3, r8
 8001422:	4095      	lsls	r5, r2
 8001424:	4093      	lsls	r3, r2
 8001426:	40c8      	lsrs	r0, r1
 8001428:	1e6a      	subs	r2, r5, #1
 800142a:	4195      	sbcs	r5, r2
 800142c:	4644      	mov	r4, r8
 800142e:	4303      	orrs	r3, r0
 8001430:	432b      	orrs	r3, r5
 8001432:	40cc      	lsrs	r4, r1
 8001434:	075a      	lsls	r2, r3, #29
 8001436:	d092      	beq.n	800135e <__aeabi_ddiv+0x45e>
 8001438:	220f      	movs	r2, #15
 800143a:	401a      	ands	r2, r3
 800143c:	2a04      	cmp	r2, #4
 800143e:	d188      	bne.n	8001352 <__aeabi_ddiv+0x452>
 8001440:	e78d      	b.n	800135e <__aeabi_ddiv+0x45e>
 8001442:	0035      	movs	r5, r6
 8001444:	4281      	cmp	r1, r0
 8001446:	d000      	beq.n	800144a <__aeabi_ddiv+0x54a>
 8001448:	e74b      	b.n	80012e2 <__aeabi_ddiv+0x3e2>
 800144a:	9a00      	ldr	r2, [sp, #0]
 800144c:	4293      	cmp	r3, r2
 800144e:	d000      	beq.n	8001452 <__aeabi_ddiv+0x552>
 8001450:	e747      	b.n	80012e2 <__aeabi_ddiv+0x3e2>
 8001452:	e618      	b.n	8001086 <__aeabi_ddiv+0x186>
 8001454:	42ae      	cmp	r6, r5
 8001456:	d99c      	bls.n	8001392 <__aeabi_ddiv+0x492>
 8001458:	2302      	movs	r3, #2
 800145a:	425b      	negs	r3, r3
 800145c:	469c      	mov	ip, r3
 800145e:	9b00      	ldr	r3, [sp, #0]
 8001460:	44e0      	add	r8, ip
 8001462:	469c      	mov	ip, r3
 8001464:	4465      	add	r5, ip
 8001466:	429d      	cmp	r5, r3
 8001468:	419b      	sbcs	r3, r3
 800146a:	425b      	negs	r3, r3
 800146c:	191b      	adds	r3, r3, r4
 800146e:	18c9      	adds	r1, r1, r3
 8001470:	e6e4      	b.n	800123c <__aeabi_ddiv+0x33c>
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <__aeabi_ddiv+0x5c8>)
 8001474:	445a      	add	r2, fp
 8001476:	2a00      	cmp	r2, #0
 8001478:	dc00      	bgt.n	800147c <__aeabi_ddiv+0x57c>
 800147a:	e744      	b.n	8001306 <__aeabi_ddiv+0x406>
 800147c:	2301      	movs	r3, #1
 800147e:	2500      	movs	r5, #0
 8001480:	4498      	add	r8, r3
 8001482:	e609      	b.n	8001098 <__aeabi_ddiv+0x198>
 8001484:	0765      	lsls	r5, r4, #29
 8001486:	0264      	lsls	r4, r4, #9
 8001488:	0b24      	lsrs	r4, r4, #12
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	431d      	orrs	r5, r3
 800148e:	2300      	movs	r3, #0
 8001490:	e590      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 8001492:	9e00      	ldr	r6, [sp, #0]
 8001494:	3d02      	subs	r5, #2
 8001496:	0072      	lsls	r2, r6, #1
 8001498:	42b2      	cmp	r2, r6
 800149a:	41bf      	sbcs	r7, r7
 800149c:	427f      	negs	r7, r7
 800149e:	193c      	adds	r4, r7, r4
 80014a0:	1909      	adds	r1, r1, r4
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	e7ce      	b.n	8001444 <__aeabi_ddiv+0x544>
 80014a6:	2480      	movs	r4, #128	; 0x80
 80014a8:	4643      	mov	r3, r8
 80014aa:	0324      	lsls	r4, r4, #12
 80014ac:	431c      	orrs	r4, r3
 80014ae:	0324      	lsls	r4, r4, #12
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <__aeabi_ddiv+0x5cc>)
 80014b2:	0b24      	lsrs	r4, r4, #12
 80014b4:	e57e      	b.n	8000fb4 <__aeabi_ddiv+0xb4>
 80014b6:	9a00      	ldr	r2, [sp, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3ea      	bcc.n	8001492 <__aeabi_ddiv+0x592>
 80014bc:	0035      	movs	r5, r6
 80014be:	e7c4      	b.n	800144a <__aeabi_ddiv+0x54a>
 80014c0:	0000043e 	.word	0x0000043e
 80014c4:	0000041e 	.word	0x0000041e
 80014c8:	000003ff 	.word	0x000003ff
 80014cc:	000007ff 	.word	0x000007ff

080014d0 <__eqdf2>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	464f      	mov	r7, r9
 80014d4:	4646      	mov	r6, r8
 80014d6:	46d6      	mov	lr, sl
 80014d8:	4694      	mov	ip, r2
 80014da:	4691      	mov	r9, r2
 80014dc:	031a      	lsls	r2, r3, #12
 80014de:	0b12      	lsrs	r2, r2, #12
 80014e0:	4d18      	ldr	r5, [pc, #96]	; (8001544 <__eqdf2+0x74>)
 80014e2:	b5c0      	push	{r6, r7, lr}
 80014e4:	004c      	lsls	r4, r1, #1
 80014e6:	030f      	lsls	r7, r1, #12
 80014e8:	4692      	mov	sl, r2
 80014ea:	005a      	lsls	r2, r3, #1
 80014ec:	0006      	movs	r6, r0
 80014ee:	4680      	mov	r8, r0
 80014f0:	0b3f      	lsrs	r7, r7, #12
 80014f2:	2001      	movs	r0, #1
 80014f4:	0d64      	lsrs	r4, r4, #21
 80014f6:	0fc9      	lsrs	r1, r1, #31
 80014f8:	0d52      	lsrs	r2, r2, #21
 80014fa:	0fdb      	lsrs	r3, r3, #31
 80014fc:	42ac      	cmp	r4, r5
 80014fe:	d00a      	beq.n	8001516 <__eqdf2+0x46>
 8001500:	42aa      	cmp	r2, r5
 8001502:	d003      	beq.n	800150c <__eqdf2+0x3c>
 8001504:	4294      	cmp	r4, r2
 8001506:	d101      	bne.n	800150c <__eqdf2+0x3c>
 8001508:	4557      	cmp	r7, sl
 800150a:	d00d      	beq.n	8001528 <__eqdf2+0x58>
 800150c:	bce0      	pop	{r5, r6, r7}
 800150e:	46ba      	mov	sl, r7
 8001510:	46b1      	mov	r9, r6
 8001512:	46a8      	mov	r8, r5
 8001514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001516:	003d      	movs	r5, r7
 8001518:	4335      	orrs	r5, r6
 800151a:	d1f7      	bne.n	800150c <__eqdf2+0x3c>
 800151c:	42a2      	cmp	r2, r4
 800151e:	d1f5      	bne.n	800150c <__eqdf2+0x3c>
 8001520:	4652      	mov	r2, sl
 8001522:	4665      	mov	r5, ip
 8001524:	432a      	orrs	r2, r5
 8001526:	d1f1      	bne.n	800150c <__eqdf2+0x3c>
 8001528:	2001      	movs	r0, #1
 800152a:	45c8      	cmp	r8, r9
 800152c:	d1ee      	bne.n	800150c <__eqdf2+0x3c>
 800152e:	4299      	cmp	r1, r3
 8001530:	d006      	beq.n	8001540 <__eqdf2+0x70>
 8001532:	2c00      	cmp	r4, #0
 8001534:	d1ea      	bne.n	800150c <__eqdf2+0x3c>
 8001536:	433e      	orrs	r6, r7
 8001538:	0030      	movs	r0, r6
 800153a:	1e46      	subs	r6, r0, #1
 800153c:	41b0      	sbcs	r0, r6
 800153e:	e7e5      	b.n	800150c <__eqdf2+0x3c>
 8001540:	2000      	movs	r0, #0
 8001542:	e7e3      	b.n	800150c <__eqdf2+0x3c>
 8001544:	000007ff 	.word	0x000007ff

08001548 <__gedf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	464e      	mov	r6, r9
 800154c:	4645      	mov	r5, r8
 800154e:	4657      	mov	r7, sl
 8001550:	46de      	mov	lr, fp
 8001552:	0004      	movs	r4, r0
 8001554:	0018      	movs	r0, r3
 8001556:	b5e0      	push	{r5, r6, r7, lr}
 8001558:	0016      	movs	r6, r2
 800155a:	031b      	lsls	r3, r3, #12
 800155c:	0b1b      	lsrs	r3, r3, #12
 800155e:	4d32      	ldr	r5, [pc, #200]	; (8001628 <__gedf2+0xe0>)
 8001560:	030f      	lsls	r7, r1, #12
 8001562:	004a      	lsls	r2, r1, #1
 8001564:	4699      	mov	r9, r3
 8001566:	0043      	lsls	r3, r0, #1
 8001568:	46a4      	mov	ip, r4
 800156a:	46b0      	mov	r8, r6
 800156c:	0b3f      	lsrs	r7, r7, #12
 800156e:	0d52      	lsrs	r2, r2, #21
 8001570:	0fc9      	lsrs	r1, r1, #31
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fc0      	lsrs	r0, r0, #31
 8001576:	42aa      	cmp	r2, r5
 8001578:	d029      	beq.n	80015ce <__gedf2+0x86>
 800157a:	42ab      	cmp	r3, r5
 800157c:	d018      	beq.n	80015b0 <__gedf2+0x68>
 800157e:	2a00      	cmp	r2, #0
 8001580:	d12a      	bne.n	80015d8 <__gedf2+0x90>
 8001582:	433c      	orrs	r4, r7
 8001584:	46a3      	mov	fp, r4
 8001586:	4265      	negs	r5, r4
 8001588:	4165      	adcs	r5, r4
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <__gedf2+0x4c>
 800158e:	464c      	mov	r4, r9
 8001590:	4326      	orrs	r6, r4
 8001592:	d027      	beq.n	80015e4 <__gedf2+0x9c>
 8001594:	2d00      	cmp	r5, #0
 8001596:	d115      	bne.n	80015c4 <__gedf2+0x7c>
 8001598:	4281      	cmp	r1, r0
 800159a:	d028      	beq.n	80015ee <__gedf2+0xa6>
 800159c:	2002      	movs	r0, #2
 800159e:	3901      	subs	r1, #1
 80015a0:	4008      	ands	r0, r1
 80015a2:	3801      	subs	r0, #1
 80015a4:	bcf0      	pop	{r4, r5, r6, r7}
 80015a6:	46bb      	mov	fp, r7
 80015a8:	46b2      	mov	sl, r6
 80015aa:	46a9      	mov	r9, r5
 80015ac:	46a0      	mov	r8, r4
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b0:	464d      	mov	r5, r9
 80015b2:	432e      	orrs	r6, r5
 80015b4:	d12f      	bne.n	8001616 <__gedf2+0xce>
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	d1ee      	bne.n	8001598 <__gedf2+0x50>
 80015ba:	433c      	orrs	r4, r7
 80015bc:	4265      	negs	r5, r4
 80015be:	4165      	adcs	r5, r4
 80015c0:	2d00      	cmp	r5, #0
 80015c2:	d0e9      	beq.n	8001598 <__gedf2+0x50>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d1ed      	bne.n	80015a4 <__gedf2+0x5c>
 80015c8:	2001      	movs	r0, #1
 80015ca:	4240      	negs	r0, r0
 80015cc:	e7ea      	b.n	80015a4 <__gedf2+0x5c>
 80015ce:	003d      	movs	r5, r7
 80015d0:	4325      	orrs	r5, r4
 80015d2:	d120      	bne.n	8001616 <__gedf2+0xce>
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d0eb      	beq.n	80015b0 <__gedf2+0x68>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1dd      	bne.n	8001598 <__gedf2+0x50>
 80015dc:	464c      	mov	r4, r9
 80015de:	4326      	orrs	r6, r4
 80015e0:	d1da      	bne.n	8001598 <__gedf2+0x50>
 80015e2:	e7db      	b.n	800159c <__gedf2+0x54>
 80015e4:	465b      	mov	r3, fp
 80015e6:	2000      	movs	r0, #0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0db      	beq.n	80015a4 <__gedf2+0x5c>
 80015ec:	e7d6      	b.n	800159c <__gedf2+0x54>
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dc0a      	bgt.n	8001608 <__gedf2+0xc0>
 80015f2:	dbe7      	blt.n	80015c4 <__gedf2+0x7c>
 80015f4:	454f      	cmp	r7, r9
 80015f6:	d8d1      	bhi.n	800159c <__gedf2+0x54>
 80015f8:	d010      	beq.n	800161c <__gedf2+0xd4>
 80015fa:	2000      	movs	r0, #0
 80015fc:	454f      	cmp	r7, r9
 80015fe:	d2d1      	bcs.n	80015a4 <__gedf2+0x5c>
 8001600:	2900      	cmp	r1, #0
 8001602:	d0e1      	beq.n	80015c8 <__gedf2+0x80>
 8001604:	0008      	movs	r0, r1
 8001606:	e7cd      	b.n	80015a4 <__gedf2+0x5c>
 8001608:	4243      	negs	r3, r0
 800160a:	4158      	adcs	r0, r3
 800160c:	2302      	movs	r3, #2
 800160e:	4240      	negs	r0, r0
 8001610:	4018      	ands	r0, r3
 8001612:	3801      	subs	r0, #1
 8001614:	e7c6      	b.n	80015a4 <__gedf2+0x5c>
 8001616:	2002      	movs	r0, #2
 8001618:	4240      	negs	r0, r0
 800161a:	e7c3      	b.n	80015a4 <__gedf2+0x5c>
 800161c:	45c4      	cmp	ip, r8
 800161e:	d8bd      	bhi.n	800159c <__gedf2+0x54>
 8001620:	2000      	movs	r0, #0
 8001622:	45c4      	cmp	ip, r8
 8001624:	d2be      	bcs.n	80015a4 <__gedf2+0x5c>
 8001626:	e7eb      	b.n	8001600 <__gedf2+0xb8>
 8001628:	000007ff 	.word	0x000007ff

0800162c <__ledf2>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	464e      	mov	r6, r9
 8001630:	4645      	mov	r5, r8
 8001632:	4657      	mov	r7, sl
 8001634:	46de      	mov	lr, fp
 8001636:	0004      	movs	r4, r0
 8001638:	0018      	movs	r0, r3
 800163a:	b5e0      	push	{r5, r6, r7, lr}
 800163c:	0016      	movs	r6, r2
 800163e:	031b      	lsls	r3, r3, #12
 8001640:	0b1b      	lsrs	r3, r3, #12
 8001642:	4d31      	ldr	r5, [pc, #196]	; (8001708 <__ledf2+0xdc>)
 8001644:	030f      	lsls	r7, r1, #12
 8001646:	004a      	lsls	r2, r1, #1
 8001648:	4699      	mov	r9, r3
 800164a:	0043      	lsls	r3, r0, #1
 800164c:	46a4      	mov	ip, r4
 800164e:	46b0      	mov	r8, r6
 8001650:	0b3f      	lsrs	r7, r7, #12
 8001652:	0d52      	lsrs	r2, r2, #21
 8001654:	0fc9      	lsrs	r1, r1, #31
 8001656:	0d5b      	lsrs	r3, r3, #21
 8001658:	0fc0      	lsrs	r0, r0, #31
 800165a:	42aa      	cmp	r2, r5
 800165c:	d011      	beq.n	8001682 <__ledf2+0x56>
 800165e:	42ab      	cmp	r3, r5
 8001660:	d014      	beq.n	800168c <__ledf2+0x60>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d12f      	bne.n	80016c6 <__ledf2+0x9a>
 8001666:	433c      	orrs	r4, r7
 8001668:	46a3      	mov	fp, r4
 800166a:	4265      	negs	r5, r4
 800166c:	4165      	adcs	r5, r4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d114      	bne.n	800169c <__ledf2+0x70>
 8001672:	464c      	mov	r4, r9
 8001674:	4326      	orrs	r6, r4
 8001676:	d111      	bne.n	800169c <__ledf2+0x70>
 8001678:	465b      	mov	r3, fp
 800167a:	2000      	movs	r0, #0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d017      	beq.n	80016b0 <__ledf2+0x84>
 8001680:	e010      	b.n	80016a4 <__ledf2+0x78>
 8001682:	003d      	movs	r5, r7
 8001684:	4325      	orrs	r5, r4
 8001686:	d112      	bne.n	80016ae <__ledf2+0x82>
 8001688:	4293      	cmp	r3, r2
 800168a:	d11c      	bne.n	80016c6 <__ledf2+0x9a>
 800168c:	464d      	mov	r5, r9
 800168e:	432e      	orrs	r6, r5
 8001690:	d10d      	bne.n	80016ae <__ledf2+0x82>
 8001692:	2a00      	cmp	r2, #0
 8001694:	d104      	bne.n	80016a0 <__ledf2+0x74>
 8001696:	433c      	orrs	r4, r7
 8001698:	4265      	negs	r5, r4
 800169a:	4165      	adcs	r5, r4
 800169c:	2d00      	cmp	r5, #0
 800169e:	d10d      	bne.n	80016bc <__ledf2+0x90>
 80016a0:	4281      	cmp	r1, r0
 80016a2:	d016      	beq.n	80016d2 <__ledf2+0xa6>
 80016a4:	2002      	movs	r0, #2
 80016a6:	3901      	subs	r1, #1
 80016a8:	4008      	ands	r0, r1
 80016aa:	3801      	subs	r0, #1
 80016ac:	e000      	b.n	80016b0 <__ledf2+0x84>
 80016ae:	2002      	movs	r0, #2
 80016b0:	bcf0      	pop	{r4, r5, r6, r7}
 80016b2:	46bb      	mov	fp, r7
 80016b4:	46b2      	mov	sl, r6
 80016b6:	46a9      	mov	r9, r5
 80016b8:	46a0      	mov	r8, r4
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016bc:	2800      	cmp	r0, #0
 80016be:	d1f7      	bne.n	80016b0 <__ledf2+0x84>
 80016c0:	2001      	movs	r0, #1
 80016c2:	4240      	negs	r0, r0
 80016c4:	e7f4      	b.n	80016b0 <__ledf2+0x84>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ea      	bne.n	80016a0 <__ledf2+0x74>
 80016ca:	464c      	mov	r4, r9
 80016cc:	4326      	orrs	r6, r4
 80016ce:	d1e7      	bne.n	80016a0 <__ledf2+0x74>
 80016d0:	e7e8      	b.n	80016a4 <__ledf2+0x78>
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dd06      	ble.n	80016e4 <__ledf2+0xb8>
 80016d6:	4243      	negs	r3, r0
 80016d8:	4158      	adcs	r0, r3
 80016da:	2302      	movs	r3, #2
 80016dc:	4240      	negs	r0, r0
 80016de:	4018      	ands	r0, r3
 80016e0:	3801      	subs	r0, #1
 80016e2:	e7e5      	b.n	80016b0 <__ledf2+0x84>
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbe9      	blt.n	80016bc <__ledf2+0x90>
 80016e8:	454f      	cmp	r7, r9
 80016ea:	d8db      	bhi.n	80016a4 <__ledf2+0x78>
 80016ec:	d006      	beq.n	80016fc <__ledf2+0xd0>
 80016ee:	2000      	movs	r0, #0
 80016f0:	454f      	cmp	r7, r9
 80016f2:	d2dd      	bcs.n	80016b0 <__ledf2+0x84>
 80016f4:	2900      	cmp	r1, #0
 80016f6:	d0e3      	beq.n	80016c0 <__ledf2+0x94>
 80016f8:	0008      	movs	r0, r1
 80016fa:	e7d9      	b.n	80016b0 <__ledf2+0x84>
 80016fc:	45c4      	cmp	ip, r8
 80016fe:	d8d1      	bhi.n	80016a4 <__ledf2+0x78>
 8001700:	2000      	movs	r0, #0
 8001702:	45c4      	cmp	ip, r8
 8001704:	d2d4      	bcs.n	80016b0 <__ledf2+0x84>
 8001706:	e7f5      	b.n	80016f4 <__ledf2+0xc8>
 8001708:	000007ff 	.word	0x000007ff

0800170c <__aeabi_dmul>:
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	4657      	mov	r7, sl
 8001710:	464e      	mov	r6, r9
 8001712:	4645      	mov	r5, r8
 8001714:	46de      	mov	lr, fp
 8001716:	b5e0      	push	{r5, r6, r7, lr}
 8001718:	4698      	mov	r8, r3
 800171a:	030c      	lsls	r4, r1, #12
 800171c:	004b      	lsls	r3, r1, #1
 800171e:	0006      	movs	r6, r0
 8001720:	4692      	mov	sl, r2
 8001722:	b087      	sub	sp, #28
 8001724:	0b24      	lsrs	r4, r4, #12
 8001726:	0d5b      	lsrs	r3, r3, #21
 8001728:	0fcf      	lsrs	r7, r1, #31
 800172a:	2b00      	cmp	r3, #0
 800172c:	d06c      	beq.n	8001808 <__aeabi_dmul+0xfc>
 800172e:	4add      	ldr	r2, [pc, #884]	; (8001aa4 <__aeabi_dmul+0x398>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d100      	bne.n	8001736 <__aeabi_dmul+0x2a>
 8001734:	e086      	b.n	8001844 <__aeabi_dmul+0x138>
 8001736:	0f42      	lsrs	r2, r0, #29
 8001738:	00e4      	lsls	r4, r4, #3
 800173a:	4314      	orrs	r4, r2
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	4314      	orrs	r4, r2
 8001742:	4ad9      	ldr	r2, [pc, #868]	; (8001aa8 <__aeabi_dmul+0x39c>)
 8001744:	00c5      	lsls	r5, r0, #3
 8001746:	4694      	mov	ip, r2
 8001748:	4463      	add	r3, ip
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2300      	movs	r3, #0
 800174e:	4699      	mov	r9, r3
 8001750:	469b      	mov	fp, r3
 8001752:	4643      	mov	r3, r8
 8001754:	4642      	mov	r2, r8
 8001756:	031e      	lsls	r6, r3, #12
 8001758:	0fd2      	lsrs	r2, r2, #31
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4650      	mov	r0, sl
 800175e:	4690      	mov	r8, r2
 8001760:	0b36      	lsrs	r6, r6, #12
 8001762:	0d5b      	lsrs	r3, r3, #21
 8001764:	d100      	bne.n	8001768 <__aeabi_dmul+0x5c>
 8001766:	e078      	b.n	800185a <__aeabi_dmul+0x14e>
 8001768:	4ace      	ldr	r2, [pc, #824]	; (8001aa4 <__aeabi_dmul+0x398>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01d      	beq.n	80017aa <__aeabi_dmul+0x9e>
 800176e:	49ce      	ldr	r1, [pc, #824]	; (8001aa8 <__aeabi_dmul+0x39c>)
 8001770:	0f42      	lsrs	r2, r0, #29
 8001772:	468c      	mov	ip, r1
 8001774:	9900      	ldr	r1, [sp, #0]
 8001776:	4463      	add	r3, ip
 8001778:	00f6      	lsls	r6, r6, #3
 800177a:	468c      	mov	ip, r1
 800177c:	4316      	orrs	r6, r2
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	449c      	add	ip, r3
 8001782:	0412      	lsls	r2, r2, #16
 8001784:	4663      	mov	r3, ip
 8001786:	4316      	orrs	r6, r2
 8001788:	00c2      	lsls	r2, r0, #3
 800178a:	2000      	movs	r0, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	9900      	ldr	r1, [sp, #0]
 8001790:	4643      	mov	r3, r8
 8001792:	3101      	adds	r1, #1
 8001794:	468c      	mov	ip, r1
 8001796:	4649      	mov	r1, r9
 8001798:	407b      	eors	r3, r7
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	290f      	cmp	r1, #15
 800179e:	d900      	bls.n	80017a2 <__aeabi_dmul+0x96>
 80017a0:	e07e      	b.n	80018a0 <__aeabi_dmul+0x194>
 80017a2:	4bc2      	ldr	r3, [pc, #776]	; (8001aac <__aeabi_dmul+0x3a0>)
 80017a4:	0089      	lsls	r1, r1, #2
 80017a6:	5859      	ldr	r1, [r3, r1]
 80017a8:	468f      	mov	pc, r1
 80017aa:	4652      	mov	r2, sl
 80017ac:	9b00      	ldr	r3, [sp, #0]
 80017ae:	4332      	orrs	r2, r6
 80017b0:	d000      	beq.n	80017b4 <__aeabi_dmul+0xa8>
 80017b2:	e156      	b.n	8001a62 <__aeabi_dmul+0x356>
 80017b4:	49bb      	ldr	r1, [pc, #748]	; (8001aa4 <__aeabi_dmul+0x398>)
 80017b6:	2600      	movs	r6, #0
 80017b8:	468c      	mov	ip, r1
 80017ba:	4463      	add	r3, ip
 80017bc:	4649      	mov	r1, r9
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2302      	movs	r3, #2
 80017c2:	4319      	orrs	r1, r3
 80017c4:	4689      	mov	r9, r1
 80017c6:	2002      	movs	r0, #2
 80017c8:	e7e1      	b.n	800178e <__aeabi_dmul+0x82>
 80017ca:	4643      	mov	r3, r8
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	0034      	movs	r4, r6
 80017d0:	0015      	movs	r5, r2
 80017d2:	4683      	mov	fp, r0
 80017d4:	465b      	mov	r3, fp
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d05e      	beq.n	8001898 <__aeabi_dmul+0x18c>
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dmul+0xd4>
 80017de:	e1f3      	b.n	8001bc8 <__aeabi_dmul+0x4bc>
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d000      	beq.n	80017e6 <__aeabi_dmul+0xda>
 80017e4:	e118      	b.n	8001a18 <__aeabi_dmul+0x30c>
 80017e6:	2200      	movs	r2, #0
 80017e8:	2400      	movs	r4, #0
 80017ea:	2500      	movs	r5, #0
 80017ec:	9b01      	ldr	r3, [sp, #4]
 80017ee:	0512      	lsls	r2, r2, #20
 80017f0:	4322      	orrs	r2, r4
 80017f2:	07db      	lsls	r3, r3, #31
 80017f4:	431a      	orrs	r2, r3
 80017f6:	0028      	movs	r0, r5
 80017f8:	0011      	movs	r1, r2
 80017fa:	b007      	add	sp, #28
 80017fc:	bcf0      	pop	{r4, r5, r6, r7}
 80017fe:	46bb      	mov	fp, r7
 8001800:	46b2      	mov	sl, r6
 8001802:	46a9      	mov	r9, r5
 8001804:	46a0      	mov	r8, r4
 8001806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001808:	0025      	movs	r5, r4
 800180a:	4305      	orrs	r5, r0
 800180c:	d100      	bne.n	8001810 <__aeabi_dmul+0x104>
 800180e:	e141      	b.n	8001a94 <__aeabi_dmul+0x388>
 8001810:	2c00      	cmp	r4, #0
 8001812:	d100      	bne.n	8001816 <__aeabi_dmul+0x10a>
 8001814:	e1ad      	b.n	8001b72 <__aeabi_dmul+0x466>
 8001816:	0020      	movs	r0, r4
 8001818:	f000 fef0 	bl	80025fc <__clzsi2>
 800181c:	0001      	movs	r1, r0
 800181e:	0002      	movs	r2, r0
 8001820:	390b      	subs	r1, #11
 8001822:	231d      	movs	r3, #29
 8001824:	0010      	movs	r0, r2
 8001826:	1a5b      	subs	r3, r3, r1
 8001828:	0031      	movs	r1, r6
 800182a:	0035      	movs	r5, r6
 800182c:	3808      	subs	r0, #8
 800182e:	4084      	lsls	r4, r0
 8001830:	40d9      	lsrs	r1, r3
 8001832:	4085      	lsls	r5, r0
 8001834:	430c      	orrs	r4, r1
 8001836:	489e      	ldr	r0, [pc, #632]	; (8001ab0 <__aeabi_dmul+0x3a4>)
 8001838:	1a83      	subs	r3, r0, r2
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2300      	movs	r3, #0
 800183e:	4699      	mov	r9, r3
 8001840:	469b      	mov	fp, r3
 8001842:	e786      	b.n	8001752 <__aeabi_dmul+0x46>
 8001844:	0005      	movs	r5, r0
 8001846:	4325      	orrs	r5, r4
 8001848:	d000      	beq.n	800184c <__aeabi_dmul+0x140>
 800184a:	e11c      	b.n	8001a86 <__aeabi_dmul+0x37a>
 800184c:	2208      	movs	r2, #8
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2302      	movs	r3, #2
 8001852:	2400      	movs	r4, #0
 8001854:	4691      	mov	r9, r2
 8001856:	469b      	mov	fp, r3
 8001858:	e77b      	b.n	8001752 <__aeabi_dmul+0x46>
 800185a:	4652      	mov	r2, sl
 800185c:	4332      	orrs	r2, r6
 800185e:	d100      	bne.n	8001862 <__aeabi_dmul+0x156>
 8001860:	e10a      	b.n	8001a78 <__aeabi_dmul+0x36c>
 8001862:	2e00      	cmp	r6, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dmul+0x15c>
 8001866:	e176      	b.n	8001b56 <__aeabi_dmul+0x44a>
 8001868:	0030      	movs	r0, r6
 800186a:	f000 fec7 	bl	80025fc <__clzsi2>
 800186e:	0002      	movs	r2, r0
 8001870:	3a0b      	subs	r2, #11
 8001872:	231d      	movs	r3, #29
 8001874:	0001      	movs	r1, r0
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	4652      	mov	r2, sl
 800187a:	3908      	subs	r1, #8
 800187c:	40da      	lsrs	r2, r3
 800187e:	408e      	lsls	r6, r1
 8001880:	4316      	orrs	r6, r2
 8001882:	4652      	mov	r2, sl
 8001884:	408a      	lsls	r2, r1
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4989      	ldr	r1, [pc, #548]	; (8001ab0 <__aeabi_dmul+0x3a4>)
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0003      	movs	r3, r0
 800188e:	468c      	mov	ip, r1
 8001890:	4463      	add	r3, ip
 8001892:	2000      	movs	r0, #0
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	e77a      	b.n	800178e <__aeabi_dmul+0x82>
 8001898:	2400      	movs	r4, #0
 800189a:	2500      	movs	r5, #0
 800189c:	4a81      	ldr	r2, [pc, #516]	; (8001aa4 <__aeabi_dmul+0x398>)
 800189e:	e7a5      	b.n	80017ec <__aeabi_dmul+0xe0>
 80018a0:	0c2f      	lsrs	r7, r5, #16
 80018a2:	042d      	lsls	r5, r5, #16
 80018a4:	0c2d      	lsrs	r5, r5, #16
 80018a6:	002b      	movs	r3, r5
 80018a8:	0c11      	lsrs	r1, r2, #16
 80018aa:	0412      	lsls	r2, r2, #16
 80018ac:	0c12      	lsrs	r2, r2, #16
 80018ae:	4353      	muls	r3, r2
 80018b0:	4698      	mov	r8, r3
 80018b2:	0013      	movs	r3, r2
 80018b4:	0028      	movs	r0, r5
 80018b6:	437b      	muls	r3, r7
 80018b8:	4699      	mov	r9, r3
 80018ba:	4348      	muls	r0, r1
 80018bc:	4448      	add	r0, r9
 80018be:	4683      	mov	fp, r0
 80018c0:	4640      	mov	r0, r8
 80018c2:	000b      	movs	r3, r1
 80018c4:	0c00      	lsrs	r0, r0, #16
 80018c6:	4682      	mov	sl, r0
 80018c8:	4658      	mov	r0, fp
 80018ca:	437b      	muls	r3, r7
 80018cc:	4450      	add	r0, sl
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	4581      	cmp	r9, r0
 80018d2:	d906      	bls.n	80018e2 <__aeabi_dmul+0x1d6>
 80018d4:	469a      	mov	sl, r3
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	025b      	lsls	r3, r3, #9
 80018da:	4699      	mov	r9, r3
 80018dc:	44ca      	add	sl, r9
 80018de:	4653      	mov	r3, sl
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	0c03      	lsrs	r3, r0, #16
 80018e4:	469b      	mov	fp, r3
 80018e6:	4643      	mov	r3, r8
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	0400      	lsls	r0, r0, #16
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	4698      	mov	r8, r3
 80018f0:	0003      	movs	r3, r0
 80018f2:	4443      	add	r3, r8
 80018f4:	9304      	str	r3, [sp, #16]
 80018f6:	0c33      	lsrs	r3, r6, #16
 80018f8:	4699      	mov	r9, r3
 80018fa:	002b      	movs	r3, r5
 80018fc:	0436      	lsls	r6, r6, #16
 80018fe:	0c36      	lsrs	r6, r6, #16
 8001900:	4373      	muls	r3, r6
 8001902:	4698      	mov	r8, r3
 8001904:	0033      	movs	r3, r6
 8001906:	437b      	muls	r3, r7
 8001908:	469a      	mov	sl, r3
 800190a:	464b      	mov	r3, r9
 800190c:	435d      	muls	r5, r3
 800190e:	435f      	muls	r7, r3
 8001910:	4643      	mov	r3, r8
 8001912:	4455      	add	r5, sl
 8001914:	0c18      	lsrs	r0, r3, #16
 8001916:	1940      	adds	r0, r0, r5
 8001918:	4582      	cmp	sl, r0
 800191a:	d903      	bls.n	8001924 <__aeabi_dmul+0x218>
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	469a      	mov	sl, r3
 8001922:	4457      	add	r7, sl
 8001924:	0c05      	lsrs	r5, r0, #16
 8001926:	19eb      	adds	r3, r5, r7
 8001928:	9305      	str	r3, [sp, #20]
 800192a:	4643      	mov	r3, r8
 800192c:	041d      	lsls	r5, r3, #16
 800192e:	0c2d      	lsrs	r5, r5, #16
 8001930:	0400      	lsls	r0, r0, #16
 8001932:	1940      	adds	r0, r0, r5
 8001934:	0c25      	lsrs	r5, r4, #16
 8001936:	0424      	lsls	r4, r4, #16
 8001938:	0c24      	lsrs	r4, r4, #16
 800193a:	0027      	movs	r7, r4
 800193c:	4357      	muls	r7, r2
 800193e:	436a      	muls	r2, r5
 8001940:	4690      	mov	r8, r2
 8001942:	002a      	movs	r2, r5
 8001944:	0c3b      	lsrs	r3, r7, #16
 8001946:	469a      	mov	sl, r3
 8001948:	434a      	muls	r2, r1
 800194a:	4361      	muls	r1, r4
 800194c:	4441      	add	r1, r8
 800194e:	4451      	add	r1, sl
 8001950:	4483      	add	fp, r0
 8001952:	4588      	cmp	r8, r1
 8001954:	d903      	bls.n	800195e <__aeabi_dmul+0x252>
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	4698      	mov	r8, r3
 800195c:	4442      	add	r2, r8
 800195e:	043f      	lsls	r7, r7, #16
 8001960:	0c0b      	lsrs	r3, r1, #16
 8001962:	0c3f      	lsrs	r7, r7, #16
 8001964:	0409      	lsls	r1, r1, #16
 8001966:	19c9      	adds	r1, r1, r7
 8001968:	0027      	movs	r7, r4
 800196a:	4698      	mov	r8, r3
 800196c:	464b      	mov	r3, r9
 800196e:	4377      	muls	r7, r6
 8001970:	435c      	muls	r4, r3
 8001972:	436e      	muls	r6, r5
 8001974:	435d      	muls	r5, r3
 8001976:	0c3b      	lsrs	r3, r7, #16
 8001978:	4699      	mov	r9, r3
 800197a:	19a4      	adds	r4, r4, r6
 800197c:	444c      	add	r4, r9
 800197e:	4442      	add	r2, r8
 8001980:	9503      	str	r5, [sp, #12]
 8001982:	42a6      	cmp	r6, r4
 8001984:	d904      	bls.n	8001990 <__aeabi_dmul+0x284>
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	025b      	lsls	r3, r3, #9
 800198a:	4698      	mov	r8, r3
 800198c:	4445      	add	r5, r8
 800198e:	9503      	str	r5, [sp, #12]
 8001990:	9b02      	ldr	r3, [sp, #8]
 8001992:	043f      	lsls	r7, r7, #16
 8001994:	445b      	add	r3, fp
 8001996:	001e      	movs	r6, r3
 8001998:	4283      	cmp	r3, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	0423      	lsls	r3, r4, #16
 800199e:	4698      	mov	r8, r3
 80019a0:	9b05      	ldr	r3, [sp, #20]
 80019a2:	0c3f      	lsrs	r7, r7, #16
 80019a4:	4447      	add	r7, r8
 80019a6:	4698      	mov	r8, r3
 80019a8:	1876      	adds	r6, r6, r1
 80019aa:	428e      	cmp	r6, r1
 80019ac:	4189      	sbcs	r1, r1
 80019ae:	4447      	add	r7, r8
 80019b0:	4240      	negs	r0, r0
 80019b2:	183d      	adds	r5, r7, r0
 80019b4:	46a8      	mov	r8, r5
 80019b6:	4693      	mov	fp, r2
 80019b8:	4249      	negs	r1, r1
 80019ba:	468a      	mov	sl, r1
 80019bc:	44c3      	add	fp, r8
 80019be:	429f      	cmp	r7, r3
 80019c0:	41bf      	sbcs	r7, r7
 80019c2:	4580      	cmp	r8, r0
 80019c4:	4180      	sbcs	r0, r0
 80019c6:	9b03      	ldr	r3, [sp, #12]
 80019c8:	44da      	add	sl, fp
 80019ca:	4698      	mov	r8, r3
 80019cc:	4653      	mov	r3, sl
 80019ce:	4240      	negs	r0, r0
 80019d0:	427f      	negs	r7, r7
 80019d2:	4307      	orrs	r7, r0
 80019d4:	0c24      	lsrs	r4, r4, #16
 80019d6:	4593      	cmp	fp, r2
 80019d8:	4192      	sbcs	r2, r2
 80019da:	458a      	cmp	sl, r1
 80019dc:	4189      	sbcs	r1, r1
 80019de:	193f      	adds	r7, r7, r4
 80019e0:	0ddc      	lsrs	r4, r3, #23
 80019e2:	9b04      	ldr	r3, [sp, #16]
 80019e4:	0275      	lsls	r5, r6, #9
 80019e6:	431d      	orrs	r5, r3
 80019e8:	1e68      	subs	r0, r5, #1
 80019ea:	4185      	sbcs	r5, r0
 80019ec:	4653      	mov	r3, sl
 80019ee:	4252      	negs	r2, r2
 80019f0:	4249      	negs	r1, r1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	18bf      	adds	r7, r7, r2
 80019f6:	4447      	add	r7, r8
 80019f8:	0df6      	lsrs	r6, r6, #23
 80019fa:	027f      	lsls	r7, r7, #9
 80019fc:	4335      	orrs	r5, r6
 80019fe:	025a      	lsls	r2, r3, #9
 8001a00:	433c      	orrs	r4, r7
 8001a02:	4315      	orrs	r5, r2
 8001a04:	01fb      	lsls	r3, r7, #7
 8001a06:	d400      	bmi.n	8001a0a <__aeabi_dmul+0x2fe>
 8001a08:	e0c1      	b.n	8001b8e <__aeabi_dmul+0x482>
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	086a      	lsrs	r2, r5, #1
 8001a0e:	400d      	ands	r5, r1
 8001a10:	4315      	orrs	r5, r2
 8001a12:	07e2      	lsls	r2, r4, #31
 8001a14:	4315      	orrs	r5, r2
 8001a16:	0864      	lsrs	r4, r4, #1
 8001a18:	4926      	ldr	r1, [pc, #152]	; (8001ab4 <__aeabi_dmul+0x3a8>)
 8001a1a:	4461      	add	r1, ip
 8001a1c:	2900      	cmp	r1, #0
 8001a1e:	dd56      	ble.n	8001ace <__aeabi_dmul+0x3c2>
 8001a20:	076b      	lsls	r3, r5, #29
 8001a22:	d009      	beq.n	8001a38 <__aeabi_dmul+0x32c>
 8001a24:	220f      	movs	r2, #15
 8001a26:	402a      	ands	r2, r5
 8001a28:	2a04      	cmp	r2, #4
 8001a2a:	d005      	beq.n	8001a38 <__aeabi_dmul+0x32c>
 8001a2c:	1d2a      	adds	r2, r5, #4
 8001a2e:	42aa      	cmp	r2, r5
 8001a30:	41ad      	sbcs	r5, r5
 8001a32:	426d      	negs	r5, r5
 8001a34:	1964      	adds	r4, r4, r5
 8001a36:	0015      	movs	r5, r2
 8001a38:	01e3      	lsls	r3, r4, #7
 8001a3a:	d504      	bpl.n	8001a46 <__aeabi_dmul+0x33a>
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <__aeabi_dmul+0x3ac>)
 8001a40:	00c9      	lsls	r1, r1, #3
 8001a42:	4014      	ands	r4, r2
 8001a44:	4461      	add	r1, ip
 8001a46:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <__aeabi_dmul+0x3b0>)
 8001a48:	4291      	cmp	r1, r2
 8001a4a:	dd00      	ble.n	8001a4e <__aeabi_dmul+0x342>
 8001a4c:	e724      	b.n	8001898 <__aeabi_dmul+0x18c>
 8001a4e:	0762      	lsls	r2, r4, #29
 8001a50:	08ed      	lsrs	r5, r5, #3
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0549      	lsls	r1, r1, #21
 8001a56:	4315      	orrs	r5, r2
 8001a58:	0b24      	lsrs	r4, r4, #12
 8001a5a:	0d4a      	lsrs	r2, r1, #21
 8001a5c:	e6c6      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001a5e:	9701      	str	r7, [sp, #4]
 8001a60:	e6b8      	b.n	80017d4 <__aeabi_dmul+0xc8>
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <__aeabi_dmul+0x398>)
 8001a64:	2003      	movs	r0, #3
 8001a66:	4694      	mov	ip, r2
 8001a68:	4463      	add	r3, ip
 8001a6a:	464a      	mov	r2, r9
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2303      	movs	r3, #3
 8001a70:	431a      	orrs	r2, r3
 8001a72:	4691      	mov	r9, r2
 8001a74:	4652      	mov	r2, sl
 8001a76:	e68a      	b.n	800178e <__aeabi_dmul+0x82>
 8001a78:	4649      	mov	r1, r9
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	4319      	orrs	r1, r3
 8001a7e:	4689      	mov	r9, r1
 8001a80:	2600      	movs	r6, #0
 8001a82:	2001      	movs	r0, #1
 8001a84:	e683      	b.n	800178e <__aeabi_dmul+0x82>
 8001a86:	220c      	movs	r2, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	0005      	movs	r5, r0
 8001a8e:	4691      	mov	r9, r2
 8001a90:	469b      	mov	fp, r3
 8001a92:	e65e      	b.n	8001752 <__aeabi_dmul+0x46>
 8001a94:	2304      	movs	r3, #4
 8001a96:	4699      	mov	r9, r3
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	2400      	movs	r4, #0
 8001aa0:	469b      	mov	fp, r3
 8001aa2:	e656      	b.n	8001752 <__aeabi_dmul+0x46>
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	fffffc01 	.word	0xfffffc01
 8001aac:	0800ab14 	.word	0x0800ab14
 8001ab0:	fffffc0d 	.word	0xfffffc0d
 8001ab4:	000003ff 	.word	0x000003ff
 8001ab8:	feffffff 	.word	0xfeffffff
 8001abc:	000007fe 	.word	0x000007fe
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2480      	movs	r4, #128	; 0x80
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4a44      	ldr	r2, [pc, #272]	; (8001bd8 <__aeabi_dmul+0x4cc>)
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	0324      	lsls	r4, r4, #12
 8001acc:	e68e      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001ace:	2001      	movs	r0, #1
 8001ad0:	1a40      	subs	r0, r0, r1
 8001ad2:	2838      	cmp	r0, #56	; 0x38
 8001ad4:	dd00      	ble.n	8001ad8 <__aeabi_dmul+0x3cc>
 8001ad6:	e686      	b.n	80017e6 <__aeabi_dmul+0xda>
 8001ad8:	281f      	cmp	r0, #31
 8001ada:	dd5b      	ble.n	8001b94 <__aeabi_dmul+0x488>
 8001adc:	221f      	movs	r2, #31
 8001ade:	0023      	movs	r3, r4
 8001ae0:	4252      	negs	r2, r2
 8001ae2:	1a51      	subs	r1, r2, r1
 8001ae4:	40cb      	lsrs	r3, r1
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	2820      	cmp	r0, #32
 8001aea:	d003      	beq.n	8001af4 <__aeabi_dmul+0x3e8>
 8001aec:	4a3b      	ldr	r2, [pc, #236]	; (8001bdc <__aeabi_dmul+0x4d0>)
 8001aee:	4462      	add	r2, ip
 8001af0:	4094      	lsls	r4, r2
 8001af2:	4325      	orrs	r5, r4
 8001af4:	1e6a      	subs	r2, r5, #1
 8001af6:	4195      	sbcs	r5, r2
 8001af8:	002a      	movs	r2, r5
 8001afa:	430a      	orrs	r2, r1
 8001afc:	2107      	movs	r1, #7
 8001afe:	000d      	movs	r5, r1
 8001b00:	2400      	movs	r4, #0
 8001b02:	4015      	ands	r5, r2
 8001b04:	4211      	tst	r1, r2
 8001b06:	d05b      	beq.n	8001bc0 <__aeabi_dmul+0x4b4>
 8001b08:	210f      	movs	r1, #15
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	4011      	ands	r1, r2
 8001b0e:	2904      	cmp	r1, #4
 8001b10:	d053      	beq.n	8001bba <__aeabi_dmul+0x4ae>
 8001b12:	1d11      	adds	r1, r2, #4
 8001b14:	4291      	cmp	r1, r2
 8001b16:	4192      	sbcs	r2, r2
 8001b18:	4252      	negs	r2, r2
 8001b1a:	18a4      	adds	r4, r4, r2
 8001b1c:	000a      	movs	r2, r1
 8001b1e:	0223      	lsls	r3, r4, #8
 8001b20:	d54b      	bpl.n	8001bba <__aeabi_dmul+0x4ae>
 8001b22:	2201      	movs	r2, #1
 8001b24:	2400      	movs	r4, #0
 8001b26:	2500      	movs	r5, #0
 8001b28:	e660      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	031b      	lsls	r3, r3, #12
 8001b2e:	421c      	tst	r4, r3
 8001b30:	d009      	beq.n	8001b46 <__aeabi_dmul+0x43a>
 8001b32:	421e      	tst	r6, r3
 8001b34:	d107      	bne.n	8001b46 <__aeabi_dmul+0x43a>
 8001b36:	4333      	orrs	r3, r6
 8001b38:	031c      	lsls	r4, r3, #12
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0015      	movs	r5, r2
 8001b3e:	0b24      	lsrs	r4, r4, #12
 8001b40:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <__aeabi_dmul+0x4cc>)
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	e652      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	0312      	lsls	r2, r2, #12
 8001b4a:	4314      	orrs	r4, r2
 8001b4c:	0324      	lsls	r4, r4, #12
 8001b4e:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <__aeabi_dmul+0x4cc>)
 8001b50:	0b24      	lsrs	r4, r4, #12
 8001b52:	9701      	str	r7, [sp, #4]
 8001b54:	e64a      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001b56:	f000 fd51 	bl	80025fc <__clzsi2>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	3215      	adds	r2, #21
 8001b60:	3020      	adds	r0, #32
 8001b62:	2a1c      	cmp	r2, #28
 8001b64:	dc00      	bgt.n	8001b68 <__aeabi_dmul+0x45c>
 8001b66:	e684      	b.n	8001872 <__aeabi_dmul+0x166>
 8001b68:	4656      	mov	r6, sl
 8001b6a:	3b08      	subs	r3, #8
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	409e      	lsls	r6, r3
 8001b70:	e689      	b.n	8001886 <__aeabi_dmul+0x17a>
 8001b72:	f000 fd43 	bl	80025fc <__clzsi2>
 8001b76:	0001      	movs	r1, r0
 8001b78:	0002      	movs	r2, r0
 8001b7a:	3115      	adds	r1, #21
 8001b7c:	3220      	adds	r2, #32
 8001b7e:	291c      	cmp	r1, #28
 8001b80:	dc00      	bgt.n	8001b84 <__aeabi_dmul+0x478>
 8001b82:	e64e      	b.n	8001822 <__aeabi_dmul+0x116>
 8001b84:	0034      	movs	r4, r6
 8001b86:	3808      	subs	r0, #8
 8001b88:	2500      	movs	r5, #0
 8001b8a:	4084      	lsls	r4, r0
 8001b8c:	e653      	b.n	8001836 <__aeabi_dmul+0x12a>
 8001b8e:	9b00      	ldr	r3, [sp, #0]
 8001b90:	469c      	mov	ip, r3
 8001b92:	e741      	b.n	8001a18 <__aeabi_dmul+0x30c>
 8001b94:	4912      	ldr	r1, [pc, #72]	; (8001be0 <__aeabi_dmul+0x4d4>)
 8001b96:	0022      	movs	r2, r4
 8001b98:	4461      	add	r1, ip
 8001b9a:	002e      	movs	r6, r5
 8001b9c:	408d      	lsls	r5, r1
 8001b9e:	408a      	lsls	r2, r1
 8001ba0:	40c6      	lsrs	r6, r0
 8001ba2:	1e69      	subs	r1, r5, #1
 8001ba4:	418d      	sbcs	r5, r1
 8001ba6:	4332      	orrs	r2, r6
 8001ba8:	432a      	orrs	r2, r5
 8001baa:	40c4      	lsrs	r4, r0
 8001bac:	0753      	lsls	r3, r2, #29
 8001bae:	d0b6      	beq.n	8001b1e <__aeabi_dmul+0x412>
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	4011      	ands	r1, r2
 8001bb4:	2904      	cmp	r1, #4
 8001bb6:	d1ac      	bne.n	8001b12 <__aeabi_dmul+0x406>
 8001bb8:	e7b1      	b.n	8001b1e <__aeabi_dmul+0x412>
 8001bba:	0765      	lsls	r5, r4, #29
 8001bbc:	0264      	lsls	r4, r4, #9
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	08d2      	lsrs	r2, r2, #3
 8001bc2:	4315      	orrs	r5, r2
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	e611      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	0312      	lsls	r2, r2, #12
 8001bcc:	4314      	orrs	r4, r2
 8001bce:	0324      	lsls	r4, r4, #12
 8001bd0:	4a01      	ldr	r2, [pc, #4]	; (8001bd8 <__aeabi_dmul+0x4cc>)
 8001bd2:	0b24      	lsrs	r4, r4, #12
 8001bd4:	e60a      	b.n	80017ec <__aeabi_dmul+0xe0>
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	000007ff 	.word	0x000007ff
 8001bdc:	0000043e 	.word	0x0000043e
 8001be0:	0000041e 	.word	0x0000041e

08001be4 <__aeabi_dsub>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	4657      	mov	r7, sl
 8001be8:	464e      	mov	r6, r9
 8001bea:	4645      	mov	r5, r8
 8001bec:	46de      	mov	lr, fp
 8001bee:	0004      	movs	r4, r0
 8001bf0:	b5e0      	push	{r5, r6, r7, lr}
 8001bf2:	001f      	movs	r7, r3
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	030b      	lsls	r3, r1, #12
 8001bf8:	0f62      	lsrs	r2, r4, #29
 8001bfa:	004e      	lsls	r6, r1, #1
 8001bfc:	0fcd      	lsrs	r5, r1, #31
 8001bfe:	0a5b      	lsrs	r3, r3, #9
 8001c00:	0339      	lsls	r1, r7, #12
 8001c02:	4313      	orrs	r3, r2
 8001c04:	0a49      	lsrs	r1, r1, #9
 8001c06:	00e2      	lsls	r2, r4, #3
 8001c08:	0f44      	lsrs	r4, r0, #29
 8001c0a:	4321      	orrs	r1, r4
 8001c0c:	4cc2      	ldr	r4, [pc, #776]	; (8001f18 <__aeabi_dsub+0x334>)
 8001c0e:	4691      	mov	r9, r2
 8001c10:	4692      	mov	sl, r2
 8001c12:	00c0      	lsls	r0, r0, #3
 8001c14:	007a      	lsls	r2, r7, #1
 8001c16:	4680      	mov	r8, r0
 8001c18:	0d76      	lsrs	r6, r6, #21
 8001c1a:	0d52      	lsrs	r2, r2, #21
 8001c1c:	0fff      	lsrs	r7, r7, #31
 8001c1e:	42a2      	cmp	r2, r4
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x40>
 8001c22:	e0b4      	b.n	8001d8e <__aeabi_dsub+0x1aa>
 8001c24:	2401      	movs	r4, #1
 8001c26:	4067      	eors	r7, r4
 8001c28:	46bb      	mov	fp, r7
 8001c2a:	42bd      	cmp	r5, r7
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x4c>
 8001c2e:	e088      	b.n	8001d42 <__aeabi_dsub+0x15e>
 8001c30:	1ab4      	subs	r4, r6, r2
 8001c32:	46a4      	mov	ip, r4
 8001c34:	2c00      	cmp	r4, #0
 8001c36:	dc00      	bgt.n	8001c3a <__aeabi_dsub+0x56>
 8001c38:	e0b2      	b.n	8001da0 <__aeabi_dsub+0x1bc>
 8001c3a:	2a00      	cmp	r2, #0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x5c>
 8001c3e:	e0c5      	b.n	8001dcc <__aeabi_dsub+0x1e8>
 8001c40:	4ab5      	ldr	r2, [pc, #724]	; (8001f18 <__aeabi_dsub+0x334>)
 8001c42:	4296      	cmp	r6, r2
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dsub+0x64>
 8001c46:	e28b      	b.n	8002160 <__aeabi_dsub+0x57c>
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	0412      	lsls	r2, r2, #16
 8001c4c:	4311      	orrs	r1, r2
 8001c4e:	4662      	mov	r2, ip
 8001c50:	2a38      	cmp	r2, #56	; 0x38
 8001c52:	dd00      	ble.n	8001c56 <__aeabi_dsub+0x72>
 8001c54:	e1a1      	b.n	8001f9a <__aeabi_dsub+0x3b6>
 8001c56:	2a1f      	cmp	r2, #31
 8001c58:	dd00      	ble.n	8001c5c <__aeabi_dsub+0x78>
 8001c5a:	e216      	b.n	800208a <__aeabi_dsub+0x4a6>
 8001c5c:	2720      	movs	r7, #32
 8001c5e:	000c      	movs	r4, r1
 8001c60:	1abf      	subs	r7, r7, r2
 8001c62:	40bc      	lsls	r4, r7
 8001c64:	0002      	movs	r2, r0
 8001c66:	46a0      	mov	r8, r4
 8001c68:	4664      	mov	r4, ip
 8001c6a:	40b8      	lsls	r0, r7
 8001c6c:	40e2      	lsrs	r2, r4
 8001c6e:	4644      	mov	r4, r8
 8001c70:	4314      	orrs	r4, r2
 8001c72:	0002      	movs	r2, r0
 8001c74:	1e50      	subs	r0, r2, #1
 8001c76:	4182      	sbcs	r2, r0
 8001c78:	4660      	mov	r0, ip
 8001c7a:	40c1      	lsrs	r1, r0
 8001c7c:	4322      	orrs	r2, r4
 8001c7e:	1a5b      	subs	r3, r3, r1
 8001c80:	4649      	mov	r1, r9
 8001c82:	1a8c      	subs	r4, r1, r2
 8001c84:	45a1      	cmp	r9, r4
 8001c86:	4192      	sbcs	r2, r2
 8001c88:	4252      	negs	r2, r2
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	4643      	mov	r3, r8
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	d400      	bmi.n	8001c96 <__aeabi_dsub+0xb2>
 8001c94:	e117      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 8001c96:	4643      	mov	r3, r8
 8001c98:	025b      	lsls	r3, r3, #9
 8001c9a:	0a5b      	lsrs	r3, r3, #9
 8001c9c:	4698      	mov	r8, r3
 8001c9e:	4643      	mov	r3, r8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dsub+0xc2>
 8001ca4:	e16c      	b.n	8001f80 <__aeabi_dsub+0x39c>
 8001ca6:	4640      	mov	r0, r8
 8001ca8:	f000 fca8 	bl	80025fc <__clzsi2>
 8001cac:	0002      	movs	r2, r0
 8001cae:	3a08      	subs	r2, #8
 8001cb0:	2120      	movs	r1, #32
 8001cb2:	0020      	movs	r0, r4
 8001cb4:	4643      	mov	r3, r8
 8001cb6:	1a89      	subs	r1, r1, r2
 8001cb8:	4093      	lsls	r3, r2
 8001cba:	40c8      	lsrs	r0, r1
 8001cbc:	4094      	lsls	r4, r2
 8001cbe:	4303      	orrs	r3, r0
 8001cc0:	4296      	cmp	r6, r2
 8001cc2:	dd00      	ble.n	8001cc6 <__aeabi_dsub+0xe2>
 8001cc4:	e157      	b.n	8001f76 <__aeabi_dsub+0x392>
 8001cc6:	1b96      	subs	r6, r2, r6
 8001cc8:	1c71      	adds	r1, r6, #1
 8001cca:	291f      	cmp	r1, #31
 8001ccc:	dd00      	ble.n	8001cd0 <__aeabi_dsub+0xec>
 8001cce:	e1cb      	b.n	8002068 <__aeabi_dsub+0x484>
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	0026      	movs	r6, r4
 8001cd6:	1a52      	subs	r2, r2, r1
 8001cd8:	4094      	lsls	r4, r2
 8001cda:	4090      	lsls	r0, r2
 8001cdc:	40ce      	lsrs	r6, r1
 8001cde:	40cb      	lsrs	r3, r1
 8001ce0:	1e62      	subs	r2, r4, #1
 8001ce2:	4194      	sbcs	r4, r2
 8001ce4:	4330      	orrs	r0, r6
 8001ce6:	4698      	mov	r8, r3
 8001ce8:	2600      	movs	r6, #0
 8001cea:	4304      	orrs	r4, r0
 8001cec:	0763      	lsls	r3, r4, #29
 8001cee:	d009      	beq.n	8001d04 <__aeabi_dsub+0x120>
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	4023      	ands	r3, r4
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d005      	beq.n	8001d04 <__aeabi_dsub+0x120>
 8001cf8:	1d23      	adds	r3, r4, #4
 8001cfa:	42a3      	cmp	r3, r4
 8001cfc:	41a4      	sbcs	r4, r4
 8001cfe:	4264      	negs	r4, r4
 8001d00:	44a0      	add	r8, r4
 8001d02:	001c      	movs	r4, r3
 8001d04:	4643      	mov	r3, r8
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	d400      	bmi.n	8001d0c <__aeabi_dsub+0x128>
 8001d0a:	e0df      	b.n	8001ecc <__aeabi_dsub+0x2e8>
 8001d0c:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <__aeabi_dsub+0x334>)
 8001d0e:	3601      	adds	r6, #1
 8001d10:	429e      	cmp	r6, r3
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x132>
 8001d14:	e0fb      	b.n	8001f0e <__aeabi_dsub+0x32a>
 8001d16:	4642      	mov	r2, r8
 8001d18:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <__aeabi_dsub+0x338>)
 8001d1a:	08e4      	lsrs	r4, r4, #3
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	0571      	lsls	r1, r6, #21
 8001d22:	0752      	lsls	r2, r2, #29
 8001d24:	025b      	lsls	r3, r3, #9
 8001d26:	4322      	orrs	r2, r4
 8001d28:	0b1b      	lsrs	r3, r3, #12
 8001d2a:	0d49      	lsrs	r1, r1, #21
 8001d2c:	0509      	lsls	r1, r1, #20
 8001d2e:	07ed      	lsls	r5, r5, #31
 8001d30:	4319      	orrs	r1, r3
 8001d32:	4329      	orrs	r1, r5
 8001d34:	0010      	movs	r0, r2
 8001d36:	bcf0      	pop	{r4, r5, r6, r7}
 8001d38:	46bb      	mov	fp, r7
 8001d3a:	46b2      	mov	sl, r6
 8001d3c:	46a9      	mov	r9, r5
 8001d3e:	46a0      	mov	r8, r4
 8001d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d42:	1ab4      	subs	r4, r6, r2
 8001d44:	46a4      	mov	ip, r4
 8001d46:	2c00      	cmp	r4, #0
 8001d48:	dd58      	ble.n	8001dfc <__aeabi_dsub+0x218>
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x16c>
 8001d4e:	e09e      	b.n	8001e8e <__aeabi_dsub+0x2aa>
 8001d50:	4a71      	ldr	r2, [pc, #452]	; (8001f18 <__aeabi_dsub+0x334>)
 8001d52:	4296      	cmp	r6, r2
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x174>
 8001d56:	e13b      	b.n	8001fd0 <__aeabi_dsub+0x3ec>
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	0412      	lsls	r2, r2, #16
 8001d5c:	4311      	orrs	r1, r2
 8001d5e:	4662      	mov	r2, ip
 8001d60:	2a38      	cmp	r2, #56	; 0x38
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dsub+0x182>
 8001d64:	e0c1      	b.n	8001eea <__aeabi_dsub+0x306>
 8001d66:	2a1f      	cmp	r2, #31
 8001d68:	dc00      	bgt.n	8001d6c <__aeabi_dsub+0x188>
 8001d6a:	e1bb      	b.n	80020e4 <__aeabi_dsub+0x500>
 8001d6c:	000c      	movs	r4, r1
 8001d6e:	3a20      	subs	r2, #32
 8001d70:	40d4      	lsrs	r4, r2
 8001d72:	0022      	movs	r2, r4
 8001d74:	4664      	mov	r4, ip
 8001d76:	2c20      	cmp	r4, #32
 8001d78:	d004      	beq.n	8001d84 <__aeabi_dsub+0x1a0>
 8001d7a:	2740      	movs	r7, #64	; 0x40
 8001d7c:	1b3f      	subs	r7, r7, r4
 8001d7e:	40b9      	lsls	r1, r7
 8001d80:	4308      	orrs	r0, r1
 8001d82:	4680      	mov	r8, r0
 8001d84:	4644      	mov	r4, r8
 8001d86:	1e61      	subs	r1, r4, #1
 8001d88:	418c      	sbcs	r4, r1
 8001d8a:	4314      	orrs	r4, r2
 8001d8c:	e0b1      	b.n	8001ef2 <__aeabi_dsub+0x30e>
 8001d8e:	000c      	movs	r4, r1
 8001d90:	4304      	orrs	r4, r0
 8001d92:	d02a      	beq.n	8001dea <__aeabi_dsub+0x206>
 8001d94:	46bb      	mov	fp, r7
 8001d96:	42bd      	cmp	r5, r7
 8001d98:	d02d      	beq.n	8001df6 <__aeabi_dsub+0x212>
 8001d9a:	4c61      	ldr	r4, [pc, #388]	; (8001f20 <__aeabi_dsub+0x33c>)
 8001d9c:	46a4      	mov	ip, r4
 8001d9e:	44b4      	add	ip, r6
 8001da0:	4664      	mov	r4, ip
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	d05c      	beq.n	8001e60 <__aeabi_dsub+0x27c>
 8001da6:	1b94      	subs	r4, r2, r6
 8001da8:	46a4      	mov	ip, r4
 8001daa:	2e00      	cmp	r6, #0
 8001dac:	d000      	beq.n	8001db0 <__aeabi_dsub+0x1cc>
 8001dae:	e115      	b.n	8001fdc <__aeabi_dsub+0x3f8>
 8001db0:	464d      	mov	r5, r9
 8001db2:	431d      	orrs	r5, r3
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x1d4>
 8001db6:	e1c3      	b.n	8002140 <__aeabi_dsub+0x55c>
 8001db8:	1e65      	subs	r5, r4, #1
 8001dba:	2c01      	cmp	r4, #1
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x1dc>
 8001dbe:	e20c      	b.n	80021da <__aeabi_dsub+0x5f6>
 8001dc0:	4e55      	ldr	r6, [pc, #340]	; (8001f18 <__aeabi_dsub+0x334>)
 8001dc2:	42b4      	cmp	r4, r6
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x1e4>
 8001dc6:	e1f8      	b.n	80021ba <__aeabi_dsub+0x5d6>
 8001dc8:	46ac      	mov	ip, r5
 8001dca:	e10e      	b.n	8001fea <__aeabi_dsub+0x406>
 8001dcc:	000a      	movs	r2, r1
 8001dce:	4302      	orrs	r2, r0
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1f0>
 8001dd2:	e136      	b.n	8002042 <__aeabi_dsub+0x45e>
 8001dd4:	0022      	movs	r2, r4
 8001dd6:	3a01      	subs	r2, #1
 8001dd8:	2c01      	cmp	r4, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1fa>
 8001ddc:	e1c6      	b.n	800216c <__aeabi_dsub+0x588>
 8001dde:	4c4e      	ldr	r4, [pc, #312]	; (8001f18 <__aeabi_dsub+0x334>)
 8001de0:	45a4      	cmp	ip, r4
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x202>
 8001de4:	e0f4      	b.n	8001fd0 <__aeabi_dsub+0x3ec>
 8001de6:	4694      	mov	ip, r2
 8001de8:	e731      	b.n	8001c4e <__aeabi_dsub+0x6a>
 8001dea:	2401      	movs	r4, #1
 8001dec:	4067      	eors	r7, r4
 8001dee:	46bb      	mov	fp, r7
 8001df0:	42bd      	cmp	r5, r7
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x212>
 8001df4:	e71c      	b.n	8001c30 <__aeabi_dsub+0x4c>
 8001df6:	4c4a      	ldr	r4, [pc, #296]	; (8001f20 <__aeabi_dsub+0x33c>)
 8001df8:	46a4      	mov	ip, r4
 8001dfa:	44b4      	add	ip, r6
 8001dfc:	4664      	mov	r4, ip
 8001dfe:	2c00      	cmp	r4, #0
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x220>
 8001e02:	e0cf      	b.n	8001fa4 <__aeabi_dsub+0x3c0>
 8001e04:	1b94      	subs	r4, r2, r6
 8001e06:	46a4      	mov	ip, r4
 8001e08:	2e00      	cmp	r6, #0
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x22a>
 8001e0c:	e15c      	b.n	80020c8 <__aeabi_dsub+0x4e4>
 8001e0e:	4e42      	ldr	r6, [pc, #264]	; (8001f18 <__aeabi_dsub+0x334>)
 8001e10:	42b2      	cmp	r2, r6
 8001e12:	d100      	bne.n	8001e16 <__aeabi_dsub+0x232>
 8001e14:	e1ec      	b.n	80021f0 <__aeabi_dsub+0x60c>
 8001e16:	2680      	movs	r6, #128	; 0x80
 8001e18:	0436      	lsls	r6, r6, #16
 8001e1a:	4333      	orrs	r3, r6
 8001e1c:	4664      	mov	r4, ip
 8001e1e:	2c38      	cmp	r4, #56	; 0x38
 8001e20:	dd00      	ble.n	8001e24 <__aeabi_dsub+0x240>
 8001e22:	e1b3      	b.n	800218c <__aeabi_dsub+0x5a8>
 8001e24:	2c1f      	cmp	r4, #31
 8001e26:	dd00      	ble.n	8001e2a <__aeabi_dsub+0x246>
 8001e28:	e238      	b.n	800229c <__aeabi_dsub+0x6b8>
 8001e2a:	2620      	movs	r6, #32
 8001e2c:	1b36      	subs	r6, r6, r4
 8001e2e:	001c      	movs	r4, r3
 8001e30:	40b4      	lsls	r4, r6
 8001e32:	464f      	mov	r7, r9
 8001e34:	46a0      	mov	r8, r4
 8001e36:	4664      	mov	r4, ip
 8001e38:	40e7      	lsrs	r7, r4
 8001e3a:	4644      	mov	r4, r8
 8001e3c:	433c      	orrs	r4, r7
 8001e3e:	464f      	mov	r7, r9
 8001e40:	40b7      	lsls	r7, r6
 8001e42:	003e      	movs	r6, r7
 8001e44:	1e77      	subs	r7, r6, #1
 8001e46:	41be      	sbcs	r6, r7
 8001e48:	4334      	orrs	r4, r6
 8001e4a:	4666      	mov	r6, ip
 8001e4c:	40f3      	lsrs	r3, r6
 8001e4e:	18c9      	adds	r1, r1, r3
 8001e50:	1824      	adds	r4, r4, r0
 8001e52:	4284      	cmp	r4, r0
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	425b      	negs	r3, r3
 8001e58:	4698      	mov	r8, r3
 8001e5a:	0016      	movs	r6, r2
 8001e5c:	4488      	add	r8, r1
 8001e5e:	e04e      	b.n	8001efe <__aeabi_dsub+0x31a>
 8001e60:	4a30      	ldr	r2, [pc, #192]	; (8001f24 <__aeabi_dsub+0x340>)
 8001e62:	1c74      	adds	r4, r6, #1
 8001e64:	4214      	tst	r4, r2
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dsub+0x286>
 8001e68:	e0d6      	b.n	8002018 <__aeabi_dsub+0x434>
 8001e6a:	464a      	mov	r2, r9
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	2e00      	cmp	r6, #0
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dsub+0x290>
 8001e72:	e15b      	b.n	800212c <__aeabi_dsub+0x548>
 8001e74:	2a00      	cmp	r2, #0
 8001e76:	d100      	bne.n	8001e7a <__aeabi_dsub+0x296>
 8001e78:	e1a5      	b.n	80021c6 <__aeabi_dsub+0x5e2>
 8001e7a:	000a      	movs	r2, r1
 8001e7c:	4302      	orrs	r2, r0
 8001e7e:	d000      	beq.n	8001e82 <__aeabi_dsub+0x29e>
 8001e80:	e1bb      	b.n	80021fa <__aeabi_dsub+0x616>
 8001e82:	464a      	mov	r2, r9
 8001e84:	0759      	lsls	r1, r3, #29
 8001e86:	08d2      	lsrs	r2, r2, #3
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	e027      	b.n	8001ede <__aeabi_dsub+0x2fa>
 8001e8e:	000a      	movs	r2, r1
 8001e90:	4302      	orrs	r2, r0
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x2b2>
 8001e94:	e174      	b.n	8002180 <__aeabi_dsub+0x59c>
 8001e96:	0022      	movs	r2, r4
 8001e98:	3a01      	subs	r2, #1
 8001e9a:	2c01      	cmp	r4, #1
 8001e9c:	d005      	beq.n	8001eaa <__aeabi_dsub+0x2c6>
 8001e9e:	4c1e      	ldr	r4, [pc, #120]	; (8001f18 <__aeabi_dsub+0x334>)
 8001ea0:	45a4      	cmp	ip, r4
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x2c2>
 8001ea4:	e094      	b.n	8001fd0 <__aeabi_dsub+0x3ec>
 8001ea6:	4694      	mov	ip, r2
 8001ea8:	e759      	b.n	8001d5e <__aeabi_dsub+0x17a>
 8001eaa:	4448      	add	r0, r9
 8001eac:	4548      	cmp	r0, r9
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	185b      	adds	r3, r3, r1
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	0004      	movs	r4, r0
 8001eb6:	4252      	negs	r2, r2
 8001eb8:	4490      	add	r8, r2
 8001eba:	4643      	mov	r3, r8
 8001ebc:	2602      	movs	r6, #2
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	d500      	bpl.n	8001ec4 <__aeabi_dsub+0x2e0>
 8001ec2:	e0c4      	b.n	800204e <__aeabi_dsub+0x46a>
 8001ec4:	3e01      	subs	r6, #1
 8001ec6:	0763      	lsls	r3, r4, #29
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_dsub+0x2e8>
 8001eca:	e711      	b.n	8001cf0 <__aeabi_dsub+0x10c>
 8001ecc:	4643      	mov	r3, r8
 8001ece:	46b4      	mov	ip, r6
 8001ed0:	0759      	lsls	r1, r3, #29
 8001ed2:	08e2      	lsrs	r2, r4, #3
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	490f      	ldr	r1, [pc, #60]	; (8001f18 <__aeabi_dsub+0x334>)
 8001eda:	458c      	cmp	ip, r1
 8001edc:	d040      	beq.n	8001f60 <__aeabi_dsub+0x37c>
 8001ede:	4661      	mov	r1, ip
 8001ee0:	031b      	lsls	r3, r3, #12
 8001ee2:	0549      	lsls	r1, r1, #21
 8001ee4:	0b1b      	lsrs	r3, r3, #12
 8001ee6:	0d49      	lsrs	r1, r1, #21
 8001ee8:	e720      	b.n	8001d2c <__aeabi_dsub+0x148>
 8001eea:	4301      	orrs	r1, r0
 8001eec:	000c      	movs	r4, r1
 8001eee:	1e61      	subs	r1, r4, #1
 8001ef0:	418c      	sbcs	r4, r1
 8001ef2:	444c      	add	r4, r9
 8001ef4:	454c      	cmp	r4, r9
 8001ef6:	4192      	sbcs	r2, r2
 8001ef8:	4252      	negs	r2, r2
 8001efa:	4690      	mov	r8, r2
 8001efc:	4498      	add	r8, r3
 8001efe:	4643      	mov	r3, r8
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	d5e0      	bpl.n	8001ec6 <__aeabi_dsub+0x2e2>
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <__aeabi_dsub+0x334>)
 8001f06:	3601      	adds	r6, #1
 8001f08:	429e      	cmp	r6, r3
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x32a>
 8001f0c:	e09f      	b.n	800204e <__aeabi_dsub+0x46a>
 8001f0e:	0031      	movs	r1, r6
 8001f10:	2300      	movs	r3, #0
 8001f12:	2200      	movs	r2, #0
 8001f14:	e70a      	b.n	8001d2c <__aeabi_dsub+0x148>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	000007ff 	.word	0x000007ff
 8001f1c:	ff7fffff 	.word	0xff7fffff
 8001f20:	fffff801 	.word	0xfffff801
 8001f24:	000007fe 	.word	0x000007fe
 8001f28:	2a00      	cmp	r2, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x34a>
 8001f2c:	e160      	b.n	80021f0 <__aeabi_dsub+0x60c>
 8001f2e:	000a      	movs	r2, r1
 8001f30:	4302      	orrs	r2, r0
 8001f32:	d04d      	beq.n	8001fd0 <__aeabi_dsub+0x3ec>
 8001f34:	464a      	mov	r2, r9
 8001f36:	075c      	lsls	r4, r3, #29
 8001f38:	08d2      	lsrs	r2, r2, #3
 8001f3a:	4322      	orrs	r2, r4
 8001f3c:	2480      	movs	r4, #128	; 0x80
 8001f3e:	08db      	lsrs	r3, r3, #3
 8001f40:	0324      	lsls	r4, r4, #12
 8001f42:	4223      	tst	r3, r4
 8001f44:	d007      	beq.n	8001f56 <__aeabi_dsub+0x372>
 8001f46:	08ce      	lsrs	r6, r1, #3
 8001f48:	4226      	tst	r6, r4
 8001f4a:	d104      	bne.n	8001f56 <__aeabi_dsub+0x372>
 8001f4c:	465d      	mov	r5, fp
 8001f4e:	0033      	movs	r3, r6
 8001f50:	08c2      	lsrs	r2, r0, #3
 8001f52:	0749      	lsls	r1, r1, #29
 8001f54:	430a      	orrs	r2, r1
 8001f56:	0f51      	lsrs	r1, r2, #29
 8001f58:	00d2      	lsls	r2, r2, #3
 8001f5a:	08d2      	lsrs	r2, r2, #3
 8001f5c:	0749      	lsls	r1, r1, #29
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	0011      	movs	r1, r2
 8001f62:	4319      	orrs	r1, r3
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x384>
 8001f66:	e1c8      	b.n	80022fa <__aeabi_dsub+0x716>
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0309      	lsls	r1, r1, #12
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	031b      	lsls	r3, r3, #12
 8001f70:	49d5      	ldr	r1, [pc, #852]	; (80022c8 <__aeabi_dsub+0x6e4>)
 8001f72:	0b1b      	lsrs	r3, r3, #12
 8001f74:	e6da      	b.n	8001d2c <__aeabi_dsub+0x148>
 8001f76:	49d5      	ldr	r1, [pc, #852]	; (80022cc <__aeabi_dsub+0x6e8>)
 8001f78:	1ab6      	subs	r6, r6, r2
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	4698      	mov	r8, r3
 8001f7e:	e6b5      	b.n	8001cec <__aeabi_dsub+0x108>
 8001f80:	0020      	movs	r0, r4
 8001f82:	f000 fb3b 	bl	80025fc <__clzsi2>
 8001f86:	0002      	movs	r2, r0
 8001f88:	3218      	adds	r2, #24
 8001f8a:	2a1f      	cmp	r2, #31
 8001f8c:	dc00      	bgt.n	8001f90 <__aeabi_dsub+0x3ac>
 8001f8e:	e68f      	b.n	8001cb0 <__aeabi_dsub+0xcc>
 8001f90:	0023      	movs	r3, r4
 8001f92:	3808      	subs	r0, #8
 8001f94:	4083      	lsls	r3, r0
 8001f96:	2400      	movs	r4, #0
 8001f98:	e692      	b.n	8001cc0 <__aeabi_dsub+0xdc>
 8001f9a:	4308      	orrs	r0, r1
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	1e50      	subs	r0, r2, #1
 8001fa0:	4182      	sbcs	r2, r0
 8001fa2:	e66d      	b.n	8001c80 <__aeabi_dsub+0x9c>
 8001fa4:	4cca      	ldr	r4, [pc, #808]	; (80022d0 <__aeabi_dsub+0x6ec>)
 8001fa6:	1c72      	adds	r2, r6, #1
 8001fa8:	4222      	tst	r2, r4
 8001faa:	d000      	beq.n	8001fae <__aeabi_dsub+0x3ca>
 8001fac:	e0ad      	b.n	800210a <__aeabi_dsub+0x526>
 8001fae:	464a      	mov	r2, r9
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	2e00      	cmp	r6, #0
 8001fb4:	d1b8      	bne.n	8001f28 <__aeabi_dsub+0x344>
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x3d8>
 8001fba:	e158      	b.n	800226e <__aeabi_dsub+0x68a>
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	4302      	orrs	r2, r0
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_dsub+0x3e0>
 8001fc2:	e159      	b.n	8002278 <__aeabi_dsub+0x694>
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	0759      	lsls	r1, r3, #29
 8001fc8:	08d2      	lsrs	r2, r2, #3
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	e786      	b.n	8001ede <__aeabi_dsub+0x2fa>
 8001fd0:	464a      	mov	r2, r9
 8001fd2:	0759      	lsls	r1, r3, #29
 8001fd4:	08d2      	lsrs	r2, r2, #3
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	e7c1      	b.n	8001f60 <__aeabi_dsub+0x37c>
 8001fdc:	4dba      	ldr	r5, [pc, #744]	; (80022c8 <__aeabi_dsub+0x6e4>)
 8001fde:	42aa      	cmp	r2, r5
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x400>
 8001fe2:	e11e      	b.n	8002222 <__aeabi_dsub+0x63e>
 8001fe4:	2580      	movs	r5, #128	; 0x80
 8001fe6:	042d      	lsls	r5, r5, #16
 8001fe8:	432b      	orrs	r3, r5
 8001fea:	4664      	mov	r4, ip
 8001fec:	2c38      	cmp	r4, #56	; 0x38
 8001fee:	dc5d      	bgt.n	80020ac <__aeabi_dsub+0x4c8>
 8001ff0:	2c1f      	cmp	r4, #31
 8001ff2:	dd00      	ble.n	8001ff6 <__aeabi_dsub+0x412>
 8001ff4:	e0d0      	b.n	8002198 <__aeabi_dsub+0x5b4>
 8001ff6:	2520      	movs	r5, #32
 8001ff8:	4667      	mov	r7, ip
 8001ffa:	1b2d      	subs	r5, r5, r4
 8001ffc:	464e      	mov	r6, r9
 8001ffe:	001c      	movs	r4, r3
 8002000:	40fe      	lsrs	r6, r7
 8002002:	40ac      	lsls	r4, r5
 8002004:	4334      	orrs	r4, r6
 8002006:	464e      	mov	r6, r9
 8002008:	40ae      	lsls	r6, r5
 800200a:	0035      	movs	r5, r6
 800200c:	40fb      	lsrs	r3, r7
 800200e:	1e6e      	subs	r6, r5, #1
 8002010:	41b5      	sbcs	r5, r6
 8002012:	1ac9      	subs	r1, r1, r3
 8002014:	432c      	orrs	r4, r5
 8002016:	e04e      	b.n	80020b6 <__aeabi_dsub+0x4d2>
 8002018:	464a      	mov	r2, r9
 800201a:	1a14      	subs	r4, r2, r0
 800201c:	45a1      	cmp	r9, r4
 800201e:	4192      	sbcs	r2, r2
 8002020:	4252      	negs	r2, r2
 8002022:	4690      	mov	r8, r2
 8002024:	1a5f      	subs	r7, r3, r1
 8002026:	003a      	movs	r2, r7
 8002028:	4647      	mov	r7, r8
 800202a:	1bd2      	subs	r2, r2, r7
 800202c:	4690      	mov	r8, r2
 800202e:	0212      	lsls	r2, r2, #8
 8002030:	d500      	bpl.n	8002034 <__aeabi_dsub+0x450>
 8002032:	e08b      	b.n	800214c <__aeabi_dsub+0x568>
 8002034:	4642      	mov	r2, r8
 8002036:	4322      	orrs	r2, r4
 8002038:	d000      	beq.n	800203c <__aeabi_dsub+0x458>
 800203a:	e630      	b.n	8001c9e <__aeabi_dsub+0xba>
 800203c:	2300      	movs	r3, #0
 800203e:	2500      	movs	r5, #0
 8002040:	e74d      	b.n	8001ede <__aeabi_dsub+0x2fa>
 8002042:	464a      	mov	r2, r9
 8002044:	0759      	lsls	r1, r3, #29
 8002046:	08d2      	lsrs	r2, r2, #3
 8002048:	430a      	orrs	r2, r1
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	e744      	b.n	8001ed8 <__aeabi_dsub+0x2f4>
 800204e:	4642      	mov	r2, r8
 8002050:	4b9e      	ldr	r3, [pc, #632]	; (80022cc <__aeabi_dsub+0x6e8>)
 8002052:	0861      	lsrs	r1, r4, #1
 8002054:	401a      	ands	r2, r3
 8002056:	0013      	movs	r3, r2
 8002058:	2201      	movs	r2, #1
 800205a:	4014      	ands	r4, r2
 800205c:	430c      	orrs	r4, r1
 800205e:	07da      	lsls	r2, r3, #31
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	4698      	mov	r8, r3
 8002064:	4314      	orrs	r4, r2
 8002066:	e641      	b.n	8001cec <__aeabi_dsub+0x108>
 8002068:	001a      	movs	r2, r3
 800206a:	3e1f      	subs	r6, #31
 800206c:	40f2      	lsrs	r2, r6
 800206e:	0016      	movs	r6, r2
 8002070:	2920      	cmp	r1, #32
 8002072:	d003      	beq.n	800207c <__aeabi_dsub+0x498>
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	1a51      	subs	r1, r2, r1
 8002078:	408b      	lsls	r3, r1
 800207a:	431c      	orrs	r4, r3
 800207c:	1e62      	subs	r2, r4, #1
 800207e:	4194      	sbcs	r4, r2
 8002080:	2300      	movs	r3, #0
 8002082:	4334      	orrs	r4, r6
 8002084:	4698      	mov	r8, r3
 8002086:	2600      	movs	r6, #0
 8002088:	e71d      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 800208a:	000c      	movs	r4, r1
 800208c:	3a20      	subs	r2, #32
 800208e:	40d4      	lsrs	r4, r2
 8002090:	0022      	movs	r2, r4
 8002092:	4664      	mov	r4, ip
 8002094:	2c20      	cmp	r4, #32
 8002096:	d004      	beq.n	80020a2 <__aeabi_dsub+0x4be>
 8002098:	2740      	movs	r7, #64	; 0x40
 800209a:	1b3f      	subs	r7, r7, r4
 800209c:	40b9      	lsls	r1, r7
 800209e:	4308      	orrs	r0, r1
 80020a0:	4680      	mov	r8, r0
 80020a2:	4644      	mov	r4, r8
 80020a4:	1e61      	subs	r1, r4, #1
 80020a6:	418c      	sbcs	r4, r1
 80020a8:	4322      	orrs	r2, r4
 80020aa:	e5e9      	b.n	8001c80 <__aeabi_dsub+0x9c>
 80020ac:	464c      	mov	r4, r9
 80020ae:	4323      	orrs	r3, r4
 80020b0:	001c      	movs	r4, r3
 80020b2:	1e63      	subs	r3, r4, #1
 80020b4:	419c      	sbcs	r4, r3
 80020b6:	1b04      	subs	r4, r0, r4
 80020b8:	42a0      	cmp	r0, r4
 80020ba:	419b      	sbcs	r3, r3
 80020bc:	425b      	negs	r3, r3
 80020be:	1acb      	subs	r3, r1, r3
 80020c0:	4698      	mov	r8, r3
 80020c2:	465d      	mov	r5, fp
 80020c4:	0016      	movs	r6, r2
 80020c6:	e5e2      	b.n	8001c8e <__aeabi_dsub+0xaa>
 80020c8:	464e      	mov	r6, r9
 80020ca:	431e      	orrs	r6, r3
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x4ec>
 80020ce:	e0ae      	b.n	800222e <__aeabi_dsub+0x64a>
 80020d0:	1e66      	subs	r6, r4, #1
 80020d2:	2c01      	cmp	r4, #1
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x4f4>
 80020d6:	e0fd      	b.n	80022d4 <__aeabi_dsub+0x6f0>
 80020d8:	4f7b      	ldr	r7, [pc, #492]	; (80022c8 <__aeabi_dsub+0x6e4>)
 80020da:	42bc      	cmp	r4, r7
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x4fc>
 80020de:	e107      	b.n	80022f0 <__aeabi_dsub+0x70c>
 80020e0:	46b4      	mov	ip, r6
 80020e2:	e69b      	b.n	8001e1c <__aeabi_dsub+0x238>
 80020e4:	4664      	mov	r4, ip
 80020e6:	2220      	movs	r2, #32
 80020e8:	1b12      	subs	r2, r2, r4
 80020ea:	000c      	movs	r4, r1
 80020ec:	4094      	lsls	r4, r2
 80020ee:	0007      	movs	r7, r0
 80020f0:	4090      	lsls	r0, r2
 80020f2:	46a0      	mov	r8, r4
 80020f4:	4664      	mov	r4, ip
 80020f6:	1e42      	subs	r2, r0, #1
 80020f8:	4190      	sbcs	r0, r2
 80020fa:	4662      	mov	r2, ip
 80020fc:	40e7      	lsrs	r7, r4
 80020fe:	4644      	mov	r4, r8
 8002100:	40d1      	lsrs	r1, r2
 8002102:	433c      	orrs	r4, r7
 8002104:	4304      	orrs	r4, r0
 8002106:	185b      	adds	r3, r3, r1
 8002108:	e6f3      	b.n	8001ef2 <__aeabi_dsub+0x30e>
 800210a:	4c6f      	ldr	r4, [pc, #444]	; (80022c8 <__aeabi_dsub+0x6e4>)
 800210c:	42a2      	cmp	r2, r4
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x52e>
 8002110:	e0d5      	b.n	80022be <__aeabi_dsub+0x6da>
 8002112:	4448      	add	r0, r9
 8002114:	185b      	adds	r3, r3, r1
 8002116:	4548      	cmp	r0, r9
 8002118:	4189      	sbcs	r1, r1
 800211a:	4249      	negs	r1, r1
 800211c:	185b      	adds	r3, r3, r1
 800211e:	07dc      	lsls	r4, r3, #31
 8002120:	0840      	lsrs	r0, r0, #1
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	4698      	mov	r8, r3
 8002126:	0016      	movs	r6, r2
 8002128:	4304      	orrs	r4, r0
 800212a:	e6cc      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 800212c:	2a00      	cmp	r2, #0
 800212e:	d000      	beq.n	8002132 <__aeabi_dsub+0x54e>
 8002130:	e082      	b.n	8002238 <__aeabi_dsub+0x654>
 8002132:	000a      	movs	r2, r1
 8002134:	4302      	orrs	r2, r0
 8002136:	d140      	bne.n	80021ba <__aeabi_dsub+0x5d6>
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	2500      	movs	r5, #0
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	e713      	b.n	8001f68 <__aeabi_dsub+0x384>
 8002140:	074b      	lsls	r3, r1, #29
 8002142:	08c2      	lsrs	r2, r0, #3
 8002144:	431a      	orrs	r2, r3
 8002146:	465d      	mov	r5, fp
 8002148:	08cb      	lsrs	r3, r1, #3
 800214a:	e6c5      	b.n	8001ed8 <__aeabi_dsub+0x2f4>
 800214c:	464a      	mov	r2, r9
 800214e:	1a84      	subs	r4, r0, r2
 8002150:	42a0      	cmp	r0, r4
 8002152:	4192      	sbcs	r2, r2
 8002154:	1acb      	subs	r3, r1, r3
 8002156:	4252      	negs	r2, r2
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	4698      	mov	r8, r3
 800215c:	465d      	mov	r5, fp
 800215e:	e59e      	b.n	8001c9e <__aeabi_dsub+0xba>
 8002160:	464a      	mov	r2, r9
 8002162:	0759      	lsls	r1, r3, #29
 8002164:	08d2      	lsrs	r2, r2, #3
 8002166:	430a      	orrs	r2, r1
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	e6f9      	b.n	8001f60 <__aeabi_dsub+0x37c>
 800216c:	464a      	mov	r2, r9
 800216e:	1a14      	subs	r4, r2, r0
 8002170:	45a1      	cmp	r9, r4
 8002172:	4192      	sbcs	r2, r2
 8002174:	1a5b      	subs	r3, r3, r1
 8002176:	4252      	negs	r2, r2
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	4698      	mov	r8, r3
 800217c:	2601      	movs	r6, #1
 800217e:	e586      	b.n	8001c8e <__aeabi_dsub+0xaa>
 8002180:	464a      	mov	r2, r9
 8002182:	0759      	lsls	r1, r3, #29
 8002184:	08d2      	lsrs	r2, r2, #3
 8002186:	430a      	orrs	r2, r1
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	e6a5      	b.n	8001ed8 <__aeabi_dsub+0x2f4>
 800218c:	464c      	mov	r4, r9
 800218e:	4323      	orrs	r3, r4
 8002190:	001c      	movs	r4, r3
 8002192:	1e63      	subs	r3, r4, #1
 8002194:	419c      	sbcs	r4, r3
 8002196:	e65b      	b.n	8001e50 <__aeabi_dsub+0x26c>
 8002198:	4665      	mov	r5, ip
 800219a:	001e      	movs	r6, r3
 800219c:	3d20      	subs	r5, #32
 800219e:	40ee      	lsrs	r6, r5
 80021a0:	2c20      	cmp	r4, #32
 80021a2:	d005      	beq.n	80021b0 <__aeabi_dsub+0x5cc>
 80021a4:	2540      	movs	r5, #64	; 0x40
 80021a6:	1b2d      	subs	r5, r5, r4
 80021a8:	40ab      	lsls	r3, r5
 80021aa:	464c      	mov	r4, r9
 80021ac:	431c      	orrs	r4, r3
 80021ae:	46a2      	mov	sl, r4
 80021b0:	4654      	mov	r4, sl
 80021b2:	1e63      	subs	r3, r4, #1
 80021b4:	419c      	sbcs	r4, r3
 80021b6:	4334      	orrs	r4, r6
 80021b8:	e77d      	b.n	80020b6 <__aeabi_dsub+0x4d2>
 80021ba:	074b      	lsls	r3, r1, #29
 80021bc:	08c2      	lsrs	r2, r0, #3
 80021be:	431a      	orrs	r2, r3
 80021c0:	465d      	mov	r5, fp
 80021c2:	08cb      	lsrs	r3, r1, #3
 80021c4:	e6cc      	b.n	8001f60 <__aeabi_dsub+0x37c>
 80021c6:	000a      	movs	r2, r1
 80021c8:	4302      	orrs	r2, r0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x5ea>
 80021cc:	e736      	b.n	800203c <__aeabi_dsub+0x458>
 80021ce:	074b      	lsls	r3, r1, #29
 80021d0:	08c2      	lsrs	r2, r0, #3
 80021d2:	431a      	orrs	r2, r3
 80021d4:	465d      	mov	r5, fp
 80021d6:	08cb      	lsrs	r3, r1, #3
 80021d8:	e681      	b.n	8001ede <__aeabi_dsub+0x2fa>
 80021da:	464a      	mov	r2, r9
 80021dc:	1a84      	subs	r4, r0, r2
 80021de:	42a0      	cmp	r0, r4
 80021e0:	4192      	sbcs	r2, r2
 80021e2:	1acb      	subs	r3, r1, r3
 80021e4:	4252      	negs	r2, r2
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	4698      	mov	r8, r3
 80021ea:	465d      	mov	r5, fp
 80021ec:	2601      	movs	r6, #1
 80021ee:	e54e      	b.n	8001c8e <__aeabi_dsub+0xaa>
 80021f0:	074b      	lsls	r3, r1, #29
 80021f2:	08c2      	lsrs	r2, r0, #3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	08cb      	lsrs	r3, r1, #3
 80021f8:	e6b2      	b.n	8001f60 <__aeabi_dsub+0x37c>
 80021fa:	464a      	mov	r2, r9
 80021fc:	1a14      	subs	r4, r2, r0
 80021fe:	45a1      	cmp	r9, r4
 8002200:	4192      	sbcs	r2, r2
 8002202:	1a5f      	subs	r7, r3, r1
 8002204:	4252      	negs	r2, r2
 8002206:	1aba      	subs	r2, r7, r2
 8002208:	4690      	mov	r8, r2
 800220a:	0212      	lsls	r2, r2, #8
 800220c:	d56b      	bpl.n	80022e6 <__aeabi_dsub+0x702>
 800220e:	464a      	mov	r2, r9
 8002210:	1a84      	subs	r4, r0, r2
 8002212:	42a0      	cmp	r0, r4
 8002214:	4192      	sbcs	r2, r2
 8002216:	1acb      	subs	r3, r1, r3
 8002218:	4252      	negs	r2, r2
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	4698      	mov	r8, r3
 800221e:	465d      	mov	r5, fp
 8002220:	e564      	b.n	8001cec <__aeabi_dsub+0x108>
 8002222:	074b      	lsls	r3, r1, #29
 8002224:	08c2      	lsrs	r2, r0, #3
 8002226:	431a      	orrs	r2, r3
 8002228:	465d      	mov	r5, fp
 800222a:	08cb      	lsrs	r3, r1, #3
 800222c:	e698      	b.n	8001f60 <__aeabi_dsub+0x37c>
 800222e:	074b      	lsls	r3, r1, #29
 8002230:	08c2      	lsrs	r2, r0, #3
 8002232:	431a      	orrs	r2, r3
 8002234:	08cb      	lsrs	r3, r1, #3
 8002236:	e64f      	b.n	8001ed8 <__aeabi_dsub+0x2f4>
 8002238:	000a      	movs	r2, r1
 800223a:	4302      	orrs	r2, r0
 800223c:	d090      	beq.n	8002160 <__aeabi_dsub+0x57c>
 800223e:	464a      	mov	r2, r9
 8002240:	075c      	lsls	r4, r3, #29
 8002242:	08d2      	lsrs	r2, r2, #3
 8002244:	4314      	orrs	r4, r2
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	0312      	lsls	r2, r2, #12
 800224c:	4213      	tst	r3, r2
 800224e:	d008      	beq.n	8002262 <__aeabi_dsub+0x67e>
 8002250:	08ce      	lsrs	r6, r1, #3
 8002252:	4216      	tst	r6, r2
 8002254:	d105      	bne.n	8002262 <__aeabi_dsub+0x67e>
 8002256:	08c0      	lsrs	r0, r0, #3
 8002258:	0749      	lsls	r1, r1, #29
 800225a:	4308      	orrs	r0, r1
 800225c:	0004      	movs	r4, r0
 800225e:	465d      	mov	r5, fp
 8002260:	0033      	movs	r3, r6
 8002262:	0f61      	lsrs	r1, r4, #29
 8002264:	00e2      	lsls	r2, r4, #3
 8002266:	0749      	lsls	r1, r1, #29
 8002268:	08d2      	lsrs	r2, r2, #3
 800226a:	430a      	orrs	r2, r1
 800226c:	e678      	b.n	8001f60 <__aeabi_dsub+0x37c>
 800226e:	074b      	lsls	r3, r1, #29
 8002270:	08c2      	lsrs	r2, r0, #3
 8002272:	431a      	orrs	r2, r3
 8002274:	08cb      	lsrs	r3, r1, #3
 8002276:	e632      	b.n	8001ede <__aeabi_dsub+0x2fa>
 8002278:	4448      	add	r0, r9
 800227a:	185b      	adds	r3, r3, r1
 800227c:	4548      	cmp	r0, r9
 800227e:	4192      	sbcs	r2, r2
 8002280:	4698      	mov	r8, r3
 8002282:	4252      	negs	r2, r2
 8002284:	4490      	add	r8, r2
 8002286:	4643      	mov	r3, r8
 8002288:	0004      	movs	r4, r0
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	d400      	bmi.n	8002290 <__aeabi_dsub+0x6ac>
 800228e:	e61a      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 8002290:	4642      	mov	r2, r8
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <__aeabi_dsub+0x6e8>)
 8002294:	2601      	movs	r6, #1
 8002296:	401a      	ands	r2, r3
 8002298:	4690      	mov	r8, r2
 800229a:	e614      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 800229c:	4666      	mov	r6, ip
 800229e:	001f      	movs	r7, r3
 80022a0:	3e20      	subs	r6, #32
 80022a2:	40f7      	lsrs	r7, r6
 80022a4:	2c20      	cmp	r4, #32
 80022a6:	d005      	beq.n	80022b4 <__aeabi_dsub+0x6d0>
 80022a8:	2640      	movs	r6, #64	; 0x40
 80022aa:	1b36      	subs	r6, r6, r4
 80022ac:	40b3      	lsls	r3, r6
 80022ae:	464c      	mov	r4, r9
 80022b0:	431c      	orrs	r4, r3
 80022b2:	46a2      	mov	sl, r4
 80022b4:	4654      	mov	r4, sl
 80022b6:	1e63      	subs	r3, r4, #1
 80022b8:	419c      	sbcs	r4, r3
 80022ba:	433c      	orrs	r4, r7
 80022bc:	e5c8      	b.n	8001e50 <__aeabi_dsub+0x26c>
 80022be:	0011      	movs	r1, r2
 80022c0:	2300      	movs	r3, #0
 80022c2:	2200      	movs	r2, #0
 80022c4:	e532      	b.n	8001d2c <__aeabi_dsub+0x148>
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	000007ff 	.word	0x000007ff
 80022cc:	ff7fffff 	.word	0xff7fffff
 80022d0:	000007fe 	.word	0x000007fe
 80022d4:	464a      	mov	r2, r9
 80022d6:	1814      	adds	r4, r2, r0
 80022d8:	4284      	cmp	r4, r0
 80022da:	4192      	sbcs	r2, r2
 80022dc:	185b      	adds	r3, r3, r1
 80022de:	4698      	mov	r8, r3
 80022e0:	4252      	negs	r2, r2
 80022e2:	4490      	add	r8, r2
 80022e4:	e5e9      	b.n	8001eba <__aeabi_dsub+0x2d6>
 80022e6:	4642      	mov	r2, r8
 80022e8:	4322      	orrs	r2, r4
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x70a>
 80022ec:	e6a6      	b.n	800203c <__aeabi_dsub+0x458>
 80022ee:	e5ea      	b.n	8001ec6 <__aeabi_dsub+0x2e2>
 80022f0:	074b      	lsls	r3, r1, #29
 80022f2:	08c2      	lsrs	r2, r0, #3
 80022f4:	431a      	orrs	r2, r3
 80022f6:	08cb      	lsrs	r3, r1, #3
 80022f8:	e632      	b.n	8001f60 <__aeabi_dsub+0x37c>
 80022fa:	2200      	movs	r2, #0
 80022fc:	4901      	ldr	r1, [pc, #4]	; (8002304 <__aeabi_dsub+0x720>)
 80022fe:	0013      	movs	r3, r2
 8002300:	e514      	b.n	8001d2c <__aeabi_dsub+0x148>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	000007ff 	.word	0x000007ff

08002308 <__aeabi_dcmpun>:
 8002308:	b570      	push	{r4, r5, r6, lr}
 800230a:	0005      	movs	r5, r0
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <__aeabi_dcmpun+0x38>)
 800230e:	030c      	lsls	r4, r1, #12
 8002310:	0016      	movs	r6, r2
 8002312:	0049      	lsls	r1, r1, #1
 8002314:	031a      	lsls	r2, r3, #12
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	0b24      	lsrs	r4, r4, #12
 800231a:	0d49      	lsrs	r1, r1, #21
 800231c:	0b12      	lsrs	r2, r2, #12
 800231e:	0d5b      	lsrs	r3, r3, #21
 8002320:	4281      	cmp	r1, r0
 8002322:	d008      	beq.n	8002336 <__aeabi_dcmpun+0x2e>
 8002324:	4906      	ldr	r1, [pc, #24]	; (8002340 <__aeabi_dcmpun+0x38>)
 8002326:	2000      	movs	r0, #0
 8002328:	428b      	cmp	r3, r1
 800232a:	d103      	bne.n	8002334 <__aeabi_dcmpun+0x2c>
 800232c:	4332      	orrs	r2, r6
 800232e:	0010      	movs	r0, r2
 8002330:	1e42      	subs	r2, r0, #1
 8002332:	4190      	sbcs	r0, r2
 8002334:	bd70      	pop	{r4, r5, r6, pc}
 8002336:	2001      	movs	r0, #1
 8002338:	432c      	orrs	r4, r5
 800233a:	d1fb      	bne.n	8002334 <__aeabi_dcmpun+0x2c>
 800233c:	e7f2      	b.n	8002324 <__aeabi_dcmpun+0x1c>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	000007ff 	.word	0x000007ff

08002344 <__aeabi_d2iz>:
 8002344:	000a      	movs	r2, r1
 8002346:	b530      	push	{r4, r5, lr}
 8002348:	4c13      	ldr	r4, [pc, #76]	; (8002398 <__aeabi_d2iz+0x54>)
 800234a:	0053      	lsls	r3, r2, #1
 800234c:	0309      	lsls	r1, r1, #12
 800234e:	0005      	movs	r5, r0
 8002350:	0b09      	lsrs	r1, r1, #12
 8002352:	2000      	movs	r0, #0
 8002354:	0d5b      	lsrs	r3, r3, #21
 8002356:	0fd2      	lsrs	r2, r2, #31
 8002358:	42a3      	cmp	r3, r4
 800235a:	dd04      	ble.n	8002366 <__aeabi_d2iz+0x22>
 800235c:	480f      	ldr	r0, [pc, #60]	; (800239c <__aeabi_d2iz+0x58>)
 800235e:	4283      	cmp	r3, r0
 8002360:	dd02      	ble.n	8002368 <__aeabi_d2iz+0x24>
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <__aeabi_d2iz+0x5c>)
 8002364:	18d0      	adds	r0, r2, r3
 8002366:	bd30      	pop	{r4, r5, pc}
 8002368:	2080      	movs	r0, #128	; 0x80
 800236a:	0340      	lsls	r0, r0, #13
 800236c:	4301      	orrs	r1, r0
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <__aeabi_d2iz+0x60>)
 8002370:	1ac0      	subs	r0, r0, r3
 8002372:	281f      	cmp	r0, #31
 8002374:	dd08      	ble.n	8002388 <__aeabi_d2iz+0x44>
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <__aeabi_d2iz+0x64>)
 8002378:	1ac3      	subs	r3, r0, r3
 800237a:	40d9      	lsrs	r1, r3
 800237c:	000b      	movs	r3, r1
 800237e:	4258      	negs	r0, r3
 8002380:	2a00      	cmp	r2, #0
 8002382:	d1f0      	bne.n	8002366 <__aeabi_d2iz+0x22>
 8002384:	0018      	movs	r0, r3
 8002386:	e7ee      	b.n	8002366 <__aeabi_d2iz+0x22>
 8002388:	4c08      	ldr	r4, [pc, #32]	; (80023ac <__aeabi_d2iz+0x68>)
 800238a:	40c5      	lsrs	r5, r0
 800238c:	46a4      	mov	ip, r4
 800238e:	4463      	add	r3, ip
 8002390:	4099      	lsls	r1, r3
 8002392:	000b      	movs	r3, r1
 8002394:	432b      	orrs	r3, r5
 8002396:	e7f2      	b.n	800237e <__aeabi_d2iz+0x3a>
 8002398:	000003fe 	.word	0x000003fe
 800239c:	0000041d 	.word	0x0000041d
 80023a0:	7fffffff 	.word	0x7fffffff
 80023a4:	00000433 	.word	0x00000433
 80023a8:	00000413 	.word	0x00000413
 80023ac:	fffffbed 	.word	0xfffffbed

080023b0 <__aeabi_i2d>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d016      	beq.n	80023e4 <__aeabi_i2d+0x34>
 80023b6:	17c3      	asrs	r3, r0, #31
 80023b8:	18c5      	adds	r5, r0, r3
 80023ba:	405d      	eors	r5, r3
 80023bc:	0fc4      	lsrs	r4, r0, #31
 80023be:	0028      	movs	r0, r5
 80023c0:	f000 f91c 	bl	80025fc <__clzsi2>
 80023c4:	4a11      	ldr	r2, [pc, #68]	; (800240c <__aeabi_i2d+0x5c>)
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	280a      	cmp	r0, #10
 80023ca:	dc16      	bgt.n	80023fa <__aeabi_i2d+0x4a>
 80023cc:	0003      	movs	r3, r0
 80023ce:	002e      	movs	r6, r5
 80023d0:	3315      	adds	r3, #21
 80023d2:	409e      	lsls	r6, r3
 80023d4:	230b      	movs	r3, #11
 80023d6:	1a18      	subs	r0, r3, r0
 80023d8:	40c5      	lsrs	r5, r0
 80023da:	0553      	lsls	r3, r2, #21
 80023dc:	032d      	lsls	r5, r5, #12
 80023de:	0b2d      	lsrs	r5, r5, #12
 80023e0:	0d5b      	lsrs	r3, r3, #21
 80023e2:	e003      	b.n	80023ec <__aeabi_i2d+0x3c>
 80023e4:	2400      	movs	r4, #0
 80023e6:	2300      	movs	r3, #0
 80023e8:	2500      	movs	r5, #0
 80023ea:	2600      	movs	r6, #0
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	432b      	orrs	r3, r5
 80023f0:	07e4      	lsls	r4, r4, #31
 80023f2:	4323      	orrs	r3, r4
 80023f4:	0030      	movs	r0, r6
 80023f6:	0019      	movs	r1, r3
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
 80023fa:	380b      	subs	r0, #11
 80023fc:	4085      	lsls	r5, r0
 80023fe:	0553      	lsls	r3, r2, #21
 8002400:	032d      	lsls	r5, r5, #12
 8002402:	2600      	movs	r6, #0
 8002404:	0b2d      	lsrs	r5, r5, #12
 8002406:	0d5b      	lsrs	r3, r3, #21
 8002408:	e7f0      	b.n	80023ec <__aeabi_i2d+0x3c>
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	0000041e 	.word	0x0000041e

08002410 <__aeabi_ui2d>:
 8002410:	b510      	push	{r4, lr}
 8002412:	1e04      	subs	r4, r0, #0
 8002414:	d010      	beq.n	8002438 <__aeabi_ui2d+0x28>
 8002416:	f000 f8f1 	bl	80025fc <__clzsi2>
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <__aeabi_ui2d+0x48>)
 800241c:	1a1b      	subs	r3, r3, r0
 800241e:	280a      	cmp	r0, #10
 8002420:	dc11      	bgt.n	8002446 <__aeabi_ui2d+0x36>
 8002422:	220b      	movs	r2, #11
 8002424:	0021      	movs	r1, r4
 8002426:	1a12      	subs	r2, r2, r0
 8002428:	40d1      	lsrs	r1, r2
 800242a:	3015      	adds	r0, #21
 800242c:	030a      	lsls	r2, r1, #12
 800242e:	055b      	lsls	r3, r3, #21
 8002430:	4084      	lsls	r4, r0
 8002432:	0b12      	lsrs	r2, r2, #12
 8002434:	0d5b      	lsrs	r3, r3, #21
 8002436:	e001      	b.n	800243c <__aeabi_ui2d+0x2c>
 8002438:	2300      	movs	r3, #0
 800243a:	2200      	movs	r2, #0
 800243c:	051b      	lsls	r3, r3, #20
 800243e:	4313      	orrs	r3, r2
 8002440:	0020      	movs	r0, r4
 8002442:	0019      	movs	r1, r3
 8002444:	bd10      	pop	{r4, pc}
 8002446:	0022      	movs	r2, r4
 8002448:	380b      	subs	r0, #11
 800244a:	4082      	lsls	r2, r0
 800244c:	055b      	lsls	r3, r3, #21
 800244e:	0312      	lsls	r2, r2, #12
 8002450:	2400      	movs	r4, #0
 8002452:	0b12      	lsrs	r2, r2, #12
 8002454:	0d5b      	lsrs	r3, r3, #21
 8002456:	e7f1      	b.n	800243c <__aeabi_ui2d+0x2c>
 8002458:	0000041e 	.word	0x0000041e

0800245c <__aeabi_f2d>:
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	0043      	lsls	r3, r0, #1
 8002460:	0246      	lsls	r6, r0, #9
 8002462:	0fc4      	lsrs	r4, r0, #31
 8002464:	20fe      	movs	r0, #254	; 0xfe
 8002466:	0e1b      	lsrs	r3, r3, #24
 8002468:	1c59      	adds	r1, r3, #1
 800246a:	0a75      	lsrs	r5, r6, #9
 800246c:	4208      	tst	r0, r1
 800246e:	d00c      	beq.n	800248a <__aeabi_f2d+0x2e>
 8002470:	22e0      	movs	r2, #224	; 0xe0
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4694      	mov	ip, r2
 8002476:	076d      	lsls	r5, r5, #29
 8002478:	0b36      	lsrs	r6, r6, #12
 800247a:	4463      	add	r3, ip
 800247c:	051b      	lsls	r3, r3, #20
 800247e:	4333      	orrs	r3, r6
 8002480:	07e4      	lsls	r4, r4, #31
 8002482:	4323      	orrs	r3, r4
 8002484:	0028      	movs	r0, r5
 8002486:	0019      	movs	r1, r3
 8002488:	bd70      	pop	{r4, r5, r6, pc}
 800248a:	2b00      	cmp	r3, #0
 800248c:	d114      	bne.n	80024b8 <__aeabi_f2d+0x5c>
 800248e:	2d00      	cmp	r5, #0
 8002490:	d01b      	beq.n	80024ca <__aeabi_f2d+0x6e>
 8002492:	0028      	movs	r0, r5
 8002494:	f000 f8b2 	bl	80025fc <__clzsi2>
 8002498:	280a      	cmp	r0, #10
 800249a:	dc1c      	bgt.n	80024d6 <__aeabi_f2d+0x7a>
 800249c:	230b      	movs	r3, #11
 800249e:	002a      	movs	r2, r5
 80024a0:	1a1b      	subs	r3, r3, r0
 80024a2:	40da      	lsrs	r2, r3
 80024a4:	0003      	movs	r3, r0
 80024a6:	3315      	adds	r3, #21
 80024a8:	409d      	lsls	r5, r3
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <__aeabi_f2d+0x88>)
 80024ac:	0312      	lsls	r2, r2, #12
 80024ae:	1a1b      	subs	r3, r3, r0
 80024b0:	055b      	lsls	r3, r3, #21
 80024b2:	0b16      	lsrs	r6, r2, #12
 80024b4:	0d5b      	lsrs	r3, r3, #21
 80024b6:	e7e1      	b.n	800247c <__aeabi_f2d+0x20>
 80024b8:	2d00      	cmp	r5, #0
 80024ba:	d009      	beq.n	80024d0 <__aeabi_f2d+0x74>
 80024bc:	0b32      	lsrs	r2, r6, #12
 80024be:	2680      	movs	r6, #128	; 0x80
 80024c0:	0336      	lsls	r6, r6, #12
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <__aeabi_f2d+0x8c>)
 80024c4:	076d      	lsls	r5, r5, #29
 80024c6:	4316      	orrs	r6, r2
 80024c8:	e7d8      	b.n	800247c <__aeabi_f2d+0x20>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2600      	movs	r6, #0
 80024ce:	e7d5      	b.n	800247c <__aeabi_f2d+0x20>
 80024d0:	2600      	movs	r6, #0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <__aeabi_f2d+0x8c>)
 80024d4:	e7d2      	b.n	800247c <__aeabi_f2d+0x20>
 80024d6:	0003      	movs	r3, r0
 80024d8:	002a      	movs	r2, r5
 80024da:	3b0b      	subs	r3, #11
 80024dc:	409a      	lsls	r2, r3
 80024de:	2500      	movs	r5, #0
 80024e0:	e7e3      	b.n	80024aa <__aeabi_f2d+0x4e>
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	00000389 	.word	0x00000389
 80024e8:	000007ff 	.word	0x000007ff

080024ec <__aeabi_d2f>:
 80024ec:	0002      	movs	r2, r0
 80024ee:	004b      	lsls	r3, r1, #1
 80024f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f2:	0308      	lsls	r0, r1, #12
 80024f4:	0d5b      	lsrs	r3, r3, #21
 80024f6:	4e3d      	ldr	r6, [pc, #244]	; (80025ec <__aeabi_d2f+0x100>)
 80024f8:	0fcc      	lsrs	r4, r1, #31
 80024fa:	0a40      	lsrs	r0, r0, #9
 80024fc:	0f51      	lsrs	r1, r2, #29
 80024fe:	1c5f      	adds	r7, r3, #1
 8002500:	4308      	orrs	r0, r1
 8002502:	00d5      	lsls	r5, r2, #3
 8002504:	4237      	tst	r7, r6
 8002506:	d00a      	beq.n	800251e <__aeabi_d2f+0x32>
 8002508:	4939      	ldr	r1, [pc, #228]	; (80025f0 <__aeabi_d2f+0x104>)
 800250a:	185e      	adds	r6, r3, r1
 800250c:	2efe      	cmp	r6, #254	; 0xfe
 800250e:	dd16      	ble.n	800253e <__aeabi_d2f+0x52>
 8002510:	23ff      	movs	r3, #255	; 0xff
 8002512:	2100      	movs	r1, #0
 8002514:	05db      	lsls	r3, r3, #23
 8002516:	430b      	orrs	r3, r1
 8002518:	07e0      	lsls	r0, r4, #31
 800251a:	4318      	orrs	r0, r3
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <__aeabi_d2f+0x44>
 8002522:	4328      	orrs	r0, r5
 8002524:	d027      	beq.n	8002576 <__aeabi_d2f+0x8a>
 8002526:	2105      	movs	r1, #5
 8002528:	0189      	lsls	r1, r1, #6
 800252a:	0a49      	lsrs	r1, r1, #9
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e7f1      	b.n	8002514 <__aeabi_d2f+0x28>
 8002530:	4305      	orrs	r5, r0
 8002532:	d0ed      	beq.n	8002510 <__aeabi_d2f+0x24>
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	03c9      	lsls	r1, r1, #15
 8002538:	23ff      	movs	r3, #255	; 0xff
 800253a:	4301      	orrs	r1, r0
 800253c:	e7ea      	b.n	8002514 <__aeabi_d2f+0x28>
 800253e:	2e00      	cmp	r6, #0
 8002540:	dd1c      	ble.n	800257c <__aeabi_d2f+0x90>
 8002542:	0192      	lsls	r2, r2, #6
 8002544:	0011      	movs	r1, r2
 8002546:	1e4a      	subs	r2, r1, #1
 8002548:	4191      	sbcs	r1, r2
 800254a:	00c0      	lsls	r0, r0, #3
 800254c:	0f6d      	lsrs	r5, r5, #29
 800254e:	4301      	orrs	r1, r0
 8002550:	4329      	orrs	r1, r5
 8002552:	074b      	lsls	r3, r1, #29
 8002554:	d048      	beq.n	80025e8 <__aeabi_d2f+0xfc>
 8002556:	230f      	movs	r3, #15
 8002558:	400b      	ands	r3, r1
 800255a:	2b04      	cmp	r3, #4
 800255c:	d000      	beq.n	8002560 <__aeabi_d2f+0x74>
 800255e:	3104      	adds	r1, #4
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	04db      	lsls	r3, r3, #19
 8002564:	400b      	ands	r3, r1
 8002566:	d03f      	beq.n	80025e8 <__aeabi_d2f+0xfc>
 8002568:	1c72      	adds	r2, r6, #1
 800256a:	2efe      	cmp	r6, #254	; 0xfe
 800256c:	d0d0      	beq.n	8002510 <__aeabi_d2f+0x24>
 800256e:	0189      	lsls	r1, r1, #6
 8002570:	0a49      	lsrs	r1, r1, #9
 8002572:	b2d3      	uxtb	r3, r2
 8002574:	e7ce      	b.n	8002514 <__aeabi_d2f+0x28>
 8002576:	2300      	movs	r3, #0
 8002578:	2100      	movs	r1, #0
 800257a:	e7cb      	b.n	8002514 <__aeabi_d2f+0x28>
 800257c:	0032      	movs	r2, r6
 800257e:	3217      	adds	r2, #23
 8002580:	db22      	blt.n	80025c8 <__aeabi_d2f+0xdc>
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	221e      	movs	r2, #30
 8002586:	0409      	lsls	r1, r1, #16
 8002588:	4308      	orrs	r0, r1
 800258a:	1b92      	subs	r2, r2, r6
 800258c:	2a1f      	cmp	r2, #31
 800258e:	dd1d      	ble.n	80025cc <__aeabi_d2f+0xe0>
 8002590:	2102      	movs	r1, #2
 8002592:	4249      	negs	r1, r1
 8002594:	1b8e      	subs	r6, r1, r6
 8002596:	0001      	movs	r1, r0
 8002598:	40f1      	lsrs	r1, r6
 800259a:	000e      	movs	r6, r1
 800259c:	2a20      	cmp	r2, #32
 800259e:	d004      	beq.n	80025aa <__aeabi_d2f+0xbe>
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <__aeabi_d2f+0x108>)
 80025a2:	4694      	mov	ip, r2
 80025a4:	4463      	add	r3, ip
 80025a6:	4098      	lsls	r0, r3
 80025a8:	4305      	orrs	r5, r0
 80025aa:	0029      	movs	r1, r5
 80025ac:	1e4d      	subs	r5, r1, #1
 80025ae:	41a9      	sbcs	r1, r5
 80025b0:	4331      	orrs	r1, r6
 80025b2:	2600      	movs	r6, #0
 80025b4:	074b      	lsls	r3, r1, #29
 80025b6:	d1ce      	bne.n	8002556 <__aeabi_d2f+0x6a>
 80025b8:	2080      	movs	r0, #128	; 0x80
 80025ba:	000b      	movs	r3, r1
 80025bc:	04c0      	lsls	r0, r0, #19
 80025be:	2201      	movs	r2, #1
 80025c0:	4003      	ands	r3, r0
 80025c2:	4201      	tst	r1, r0
 80025c4:	d1d3      	bne.n	800256e <__aeabi_d2f+0x82>
 80025c6:	e7af      	b.n	8002528 <__aeabi_d2f+0x3c>
 80025c8:	2300      	movs	r3, #0
 80025ca:	e7ac      	b.n	8002526 <__aeabi_d2f+0x3a>
 80025cc:	490a      	ldr	r1, [pc, #40]	; (80025f8 <__aeabi_d2f+0x10c>)
 80025ce:	468c      	mov	ip, r1
 80025d0:	0029      	movs	r1, r5
 80025d2:	4463      	add	r3, ip
 80025d4:	40d1      	lsrs	r1, r2
 80025d6:	409d      	lsls	r5, r3
 80025d8:	000a      	movs	r2, r1
 80025da:	0029      	movs	r1, r5
 80025dc:	4098      	lsls	r0, r3
 80025de:	1e4d      	subs	r5, r1, #1
 80025e0:	41a9      	sbcs	r1, r5
 80025e2:	4301      	orrs	r1, r0
 80025e4:	4311      	orrs	r1, r2
 80025e6:	e7e4      	b.n	80025b2 <__aeabi_d2f+0xc6>
 80025e8:	0033      	movs	r3, r6
 80025ea:	e79d      	b.n	8002528 <__aeabi_d2f+0x3c>
 80025ec:	000007fe 	.word	0x000007fe
 80025f0:	fffffc80 	.word	0xfffffc80
 80025f4:	fffffca2 	.word	0xfffffca2
 80025f8:	fffffc82 	.word	0xfffffc82

080025fc <__clzsi2>:
 80025fc:	211c      	movs	r1, #28
 80025fe:	2301      	movs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	4298      	cmp	r0, r3
 8002604:	d301      	bcc.n	800260a <__clzsi2+0xe>
 8002606:	0c00      	lsrs	r0, r0, #16
 8002608:	3910      	subs	r1, #16
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	4298      	cmp	r0, r3
 800260e:	d301      	bcc.n	8002614 <__clzsi2+0x18>
 8002610:	0a00      	lsrs	r0, r0, #8
 8002612:	3908      	subs	r1, #8
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	4298      	cmp	r0, r3
 8002618:	d301      	bcc.n	800261e <__clzsi2+0x22>
 800261a:	0900      	lsrs	r0, r0, #4
 800261c:	3904      	subs	r1, #4
 800261e:	a202      	add	r2, pc, #8	; (adr r2, 8002628 <__clzsi2+0x2c>)
 8002620:	5c10      	ldrb	r0, [r2, r0]
 8002622:	1840      	adds	r0, r0, r1
 8002624:	4770      	bx	lr
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	02020304 	.word	0x02020304
 800262c:	01010101 	.word	0x01010101
	...

08002638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263e:	240c      	movs	r4, #12
 8002640:	193b      	adds	r3, r7, r4
 8002642:	0018      	movs	r0, r3
 8002644:	2314      	movs	r3, #20
 8002646:	001a      	movs	r2, r3
 8002648:	2100      	movs	r1, #0
 800264a:	f003 fce7 	bl	800601c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <MX_GPIO_Init+0xdc>)
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	4b30      	ldr	r3, [pc, #192]	; (8002714 <MX_GPIO_Init+0xdc>)
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	0289      	lsls	r1, r1, #10
 8002658:	430a      	orrs	r2, r1
 800265a:	615a      	str	r2, [r3, #20]
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <MX_GPIO_Init+0xdc>)
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <MX_GPIO_Init+0xdc>)
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <MX_GPIO_Init+0xdc>)
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	02c9      	lsls	r1, r1, #11
 8002674:	430a      	orrs	r2, r1
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <MX_GPIO_Init+0xdc>)
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	02db      	lsls	r3, r3, #11
 8002680:	4013      	ands	r3, r2
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002686:	2390      	movs	r3, #144	; 0x90
 8002688:	05db      	lsls	r3, r3, #23
 800268a:	2200      	movs	r2, #0
 800268c:	2104      	movs	r1, #4
 800268e:	0018      	movs	r0, r3
 8002690:	f001 f8ac 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002694:	4b20      	ldr	r3, [pc, #128]	; (8002718 <MX_GPIO_Init+0xe0>)
 8002696:	2200      	movs	r2, #0
 8002698:	210c      	movs	r1, #12
 800269a:	0018      	movs	r0, r3
 800269c:	f001 f8a6 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	2204      	movs	r2, #4
 80026a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	2201      	movs	r2, #1
 80026aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	193b      	adds	r3, r7, r4
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	193a      	adds	r2, r7, r4
 80026ba:	2390      	movs	r3, #144	; 0x90
 80026bc:	05db      	lsls	r3, r3, #23
 80026be:	0011      	movs	r1, r2
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 ff23 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026c6:	193b      	adds	r3, r7, r4
 80026c8:	2202      	movs	r2, #2
 80026ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <MX_GPIO_Init+0xe0>)
 80026dc:	0019      	movs	r1, r3
 80026de:	0010      	movs	r0, r2
 80026e0:	f000 ff14 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026e4:	0021      	movs	r1, r4
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	220c      	movs	r2, #12
 80026ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2201      	movs	r2, #1
 80026f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <MX_GPIO_Init+0xe0>)
 8002702:	0019      	movs	r1, r3
 8002704:	0010      	movs	r0, r2
 8002706:	f000 ff01 	bl	800350c <HAL_GPIO_Init>

}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b009      	add	sp, #36	; 0x24
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	40021000 	.word	0x40021000
 8002718:	48000400 	.word	0x48000400

0800271c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <MX_I2C1_Init+0x74>)
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <MX_I2C1_Init+0x78>)
 8002724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8002726:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MX_I2C1_Init+0x74>)
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <MX_I2C1_Init+0x7c>)
 800272a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800272c:	4b18      	ldr	r3, [pc, #96]	; (8002790 <MX_I2C1_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_I2C1_Init+0x74>)
 8002734:	2201      	movs	r2, #1
 8002736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <MX_I2C1_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <MX_I2C1_Init+0x74>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <MX_I2C1_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_I2C1_Init+0x74>)
 800274c:	2200      	movs	r2, #0
 800274e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <MX_I2C1_Init+0x74>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_I2C1_Init+0x74>)
 8002758:	0018      	movs	r0, r3
 800275a:	f001 f87f 	bl	800385c <HAL_I2C_Init>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d001      	beq.n	8002766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002762:	f000 fa09 	bl	8002b78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <MX_I2C1_Init+0x74>)
 8002768:	2100      	movs	r1, #0
 800276a:	0018      	movs	r0, r3
 800276c:	f001 fdac 	bl	80042c8 <HAL_I2CEx_ConfigAnalogFilter>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d001      	beq.n	8002778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002774:	f000 fa00 	bl	8002b78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <MX_I2C1_Init+0x74>)
 800277a:	2100      	movs	r1, #0
 800277c:	0018      	movs	r0, r3
 800277e:	f001 fdef 	bl	8004360 <HAL_I2CEx_ConfigDigitalFilter>
 8002782:	1e03      	subs	r3, r0, #0
 8002784:	d001      	beq.n	800278a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002786:	f000 f9f7 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000220 	.word	0x20000220
 8002794:	40005400 	.word	0x40005400
 8002798:	20303e5d 	.word	0x20303e5d

0800279c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b08b      	sub	sp, #44	; 0x2c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	2414      	movs	r4, #20
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	0018      	movs	r0, r3
 80027aa:	2314      	movs	r3, #20
 80027ac:	001a      	movs	r2, r3
 80027ae:	2100      	movs	r1, #0
 80027b0:	f003 fc34 	bl	800601c <memset>
  if(i2cHandle->Instance==I2C1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_I2C_MspInit+0x90>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d131      	bne.n	8002822 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_I2C_MspInit+0x94>)
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_I2C_MspInit+0x94>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	02c9      	lsls	r1, r1, #11
 80027c8:	430a      	orrs	r2, r1
 80027ca:	615a      	str	r2, [r3, #20]
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_I2C_MspInit+0x94>)
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	02db      	lsls	r3, r3, #11
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027da:	0021      	movs	r1, r4
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	22c0      	movs	r2, #192	; 0xc0
 80027e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2212      	movs	r2, #18
 80027e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2201      	movs	r2, #1
 80027ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	2203      	movs	r2, #3
 80027f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2201      	movs	r2, #1
 80027f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <HAL_I2C_MspInit+0x98>)
 80027fe:	0019      	movs	r1, r3
 8002800:	0010      	movs	r0, r2
 8002802:	f000 fe83 	bl	800350c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_I2C_MspInit+0x94>)
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_I2C_MspInit+0x94>)
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0389      	lsls	r1, r1, #14
 8002810:	430a      	orrs	r2, r1
 8002812:	61da      	str	r2, [r3, #28]
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_I2C_MspInit+0x94>)
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	039b      	lsls	r3, r3, #14
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b00b      	add	sp, #44	; 0x2c
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	40005400 	.word	0x40005400
 8002830:	40021000 	.word	0x40021000
 8002834:	48000400 	.word	0x48000400

08002838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283a:	b087      	sub	sp, #28
 800283c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800283e:	f000 fd63 	bl	8003308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002842:	f000 f919 	bl	8002a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002846:	f7ff fef7 	bl	8002638 <MX_GPIO_Init>
  MX_I2C1_Init();
 800284a:	f7ff ff67 	bl	800271c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800284e:	f000 fcb3 	bl	80031b8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002852:	f000 fad1 	bl	8002df8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  MPU6050Init();
 8002856:	f000 f995 	bl	8002b84 <MPU6050Init>
  MPUSetAccel(MPU_A16G);
 800285a:	2018      	movs	r0, #24
 800285c:	f000 fa8c 	bl	8002d78 <MPUSetAccel>
  MPUSetGyro(MPU_G2000G);
 8002860:	2018      	movs	r0, #24
 8002862:	f000 faa9 	bl	8002db8 <MPUSetGyro>

  for(uint8_t i = 0; i < 6; i++)
 8002866:	230f      	movs	r3, #15
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e028      	b.n	80028c2 <main+0x8a>
  {
	  HAL_UART_Transmit(&huart1, nameArray[i], sizeof(nameArray[i]), HAL_MAX_DELAY);
 8002870:	240f      	movs	r4, #15
 8002872:	193b      	adds	r3, r7, r4
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4b74      	ldr	r3, [pc, #464]	; (8002a48 <main+0x210>)
 8002878:	0092      	lsls	r2, r2, #2
 800287a:	58d1      	ldr	r1, [r2, r3]
 800287c:	2301      	movs	r3, #1
 800287e:	425b      	negs	r3, r3
 8002880:	4872      	ldr	r0, [pc, #456]	; (8002a4c <main+0x214>)
 8002882:	2204      	movs	r2, #4
 8002884:	f003 f83c 	bl	8005900 <HAL_UART_Transmit>
	  if(i != 5)
 8002888:	193b      	adds	r3, r7, r4
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d006      	beq.n	800289e <main+0x66>
	  {
		  HAL_UART_Transmit(&huart1, ",", sizeof(","), HAL_MAX_DELAY);
 8002890:	2301      	movs	r3, #1
 8002892:	425b      	negs	r3, r3
 8002894:	496e      	ldr	r1, [pc, #440]	; (8002a50 <main+0x218>)
 8002896:	486d      	ldr	r0, [pc, #436]	; (8002a4c <main+0x214>)
 8002898:	2202      	movs	r2, #2
 800289a:	f003 f831 	bl	8005900 <HAL_UART_Transmit>
	  }
	  if(i == 5)
 800289e:	230f      	movs	r3, #15
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d106      	bne.n	80028b6 <main+0x7e>
	  {
		  HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 80028a8:	2301      	movs	r3, #1
 80028aa:	425b      	negs	r3, r3
 80028ac:	4969      	ldr	r1, [pc, #420]	; (8002a54 <main+0x21c>)
 80028ae:	4867      	ldr	r0, [pc, #412]	; (8002a4c <main+0x214>)
 80028b0:	2202      	movs	r2, #2
 80028b2:	f003 f825 	bl	8005900 <HAL_UART_Transmit>
  for(uint8_t i = 0; i < 6; i++)
 80028b6:	210f      	movs	r1, #15
 80028b8:	187b      	adds	r3, r7, r1
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	3201      	adds	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	230f      	movs	r3, #15
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d9d1      	bls.n	8002870 <main+0x38>
//			 forCounter++;
//		  }
//		   counter = 0;
//		   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
//	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80028cc:	2390      	movs	r3, #144	; 0x90
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	2104      	movs	r1, #4
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 ffa7 	bl	8003826 <HAL_GPIO_TogglePin>
	  MPUReadAll(&allData[counter][0], &allData[counter][1], &allData[counter][2], &allData[counter][3], &allData[counter][4], &allData[counter][5]);
 80028d8:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <main+0x220>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	001a      	movs	r2, r3
 80028de:	0013      	movs	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <main+0x224>)
 80028e8:	1898      	adds	r0, r3, r2
 80028ea:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <main+0x220>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	001a      	movs	r2, r3
 80028f0:	0013      	movs	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	189b      	adds	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	1c9a      	adds	r2, r3, #2
 80028fa:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <main+0x224>)
 80028fc:	18d4      	adds	r4, r2, r3
 80028fe:	4b56      	ldr	r3, [pc, #344]	; (8002a58 <main+0x220>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	001a      	movs	r2, r3
 8002904:	0013      	movs	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	189b      	adds	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	1d1a      	adds	r2, r3, #4
 800290e:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <main+0x224>)
 8002910:	18d5      	adds	r5, r2, r3
 8002912:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <main+0x220>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	001a      	movs	r2, r3
 8002918:	0013      	movs	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	189b      	adds	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	1d9a      	adds	r2, r3, #6
 8002922:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <main+0x224>)
 8002924:	18d6      	adds	r6, r2, r3
 8002926:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <main+0x220>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	001a      	movs	r2, r3
 800292c:	0013      	movs	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	189b      	adds	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3308      	adds	r3, #8
 8002936:	001a      	movs	r2, r3
 8002938:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <main+0x224>)
 800293a:	18d2      	adds	r2, r2, r3
 800293c:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <main+0x220>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	0019      	movs	r1, r3
 8002942:	000b      	movs	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	185b      	adds	r3, r3, r1
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	330a      	adds	r3, #10
 800294c:	0019      	movs	r1, r3
 800294e:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <main+0x224>)
 8002950:	18cb      	adds	r3, r1, r3
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	9200      	str	r2, [sp, #0]
 8002956:	0033      	movs	r3, r6
 8002958:	002a      	movs	r2, r5
 800295a:	0021      	movs	r1, r4
 800295c:	f000 f9f4 	bl	8002d48 <MPUReadAll>
	  //counter++;

	  forCounter = 0;
 8002960:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <main+0x228>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
	  		  while(forCounter < 6)
 8002966:	e066      	b.n	8002a36 <main+0x1fe>
	  		  {
	  			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8002968:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <main+0x22c>)
 800296a:	2104      	movs	r1, #4
 800296c:	0018      	movs	r0, r3
 800296e:	f000 ff5a 	bl	8003826 <HAL_GPIO_TogglePin>
	  			  //MPUData[forCounter] = MPUData[forCounter] / counter;
	  			  if(forCounter < 3)
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <main+0x228>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d811      	bhi.n	800299e <main+0x166>
	  			  {
	  			  	  current = (float)allData[0][forCounter] / 2048.0;
 800297a:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <main+0x228>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	001a      	movs	r2, r3
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <main+0x224>)
 8002982:	0052      	lsls	r2, r2, #1
 8002984:	5ed3      	ldrsh	r3, [r2, r3]
 8002986:	0018      	movs	r0, r3
 8002988:	f7fd ff0a 	bl	80007a0 <__aeabi_i2f>
 800298c:	1c03      	adds	r3, r0, #0
 800298e:	218a      	movs	r1, #138	; 0x8a
 8002990:	05c9      	lsls	r1, r1, #23
 8002992:	1c18      	adds	r0, r3, #0
 8002994:	f7fd fdf8 	bl	8000588 <__aeabi_fdiv>
 8002998:	1c03      	adds	r3, r0, #0
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	e018      	b.n	80029d0 <main+0x198>
	  			  } else
	  			  {
	  			   	  current = (float)allData[0][forCounter] / 16.4;
 800299e:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <main+0x228>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	001a      	movs	r2, r3
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <main+0x224>)
 80029a6:	0052      	lsls	r2, r2, #1
 80029a8:	5ed3      	ldrsh	r3, [r2, r3]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fd fef8 	bl	80007a0 <__aeabi_i2f>
 80029b0:	1c03      	adds	r3, r0, #0
 80029b2:	1c18      	adds	r0, r3, #0
 80029b4:	f7ff fd52 	bl	800245c <__aeabi_f2d>
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <main+0x230>)
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <main+0x234>)
 80029bc:	f7fe faa0 	bl	8000f00 <__aeabi_ddiv>
 80029c0:	0002      	movs	r2, r0
 80029c2:	000b      	movs	r3, r1
 80029c4:	0010      	movs	r0, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	f7ff fd90 	bl	80024ec <__aeabi_d2f>
 80029cc:	1c03      	adds	r3, r0, #0
 80029ce:	60bb      	str	r3, [r7, #8]
	  			  }
	  			  allData[0][forCounter] = 0;
 80029d0:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <main+0x228>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	001a      	movs	r2, r3
 80029d6:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <main+0x224>)
 80029d8:	0052      	lsls	r2, r2, #1
 80029da:	2100      	movs	r1, #0
 80029dc:	52d1      	strh	r1, [r2, r3]
	  			  sprintf(numbers, "%.3f", current);
 80029de:	68b8      	ldr	r0, [r7, #8]
 80029e0:	f7ff fd3c 	bl	800245c <__aeabi_f2d>
 80029e4:	0002      	movs	r2, r0
 80029e6:	000b      	movs	r3, r1
 80029e8:	4921      	ldr	r1, [pc, #132]	; (8002a70 <main+0x238>)
 80029ea:	0038      	movs	r0, r7
 80029ec:	f004 f9a4 	bl	8006d38 <siprintf>
	  			  HAL_UART_Transmit(&huart1, numbers, sizeof(numbers), HAL_MAX_DELAY);
 80029f0:	2301      	movs	r3, #1
 80029f2:	425b      	negs	r3, r3
 80029f4:	0039      	movs	r1, r7
 80029f6:	4815      	ldr	r0, [pc, #84]	; (8002a4c <main+0x214>)
 80029f8:	2206      	movs	r2, #6
 80029fa:	f002 ff81 	bl	8005900 <HAL_UART_Transmit>
	  			 if(forCounter != 5)
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <main+0x228>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d006      	beq.n	8002a14 <main+0x1dc>
	  			 {
	  				 HAL_UART_Transmit(&huart1, ", ", sizeof(", "), HAL_MAX_DELAY);
 8002a06:	2301      	movs	r3, #1
 8002a08:	425b      	negs	r3, r3
 8002a0a:	491a      	ldr	r1, [pc, #104]	; (8002a74 <main+0x23c>)
 8002a0c:	480f      	ldr	r0, [pc, #60]	; (8002a4c <main+0x214>)
 8002a0e:	2203      	movs	r2, #3
 8002a10:	f002 ff76 	bl	8005900 <HAL_UART_Transmit>
	  			 }
	  			 if(forCounter == 5)
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <main+0x228>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d106      	bne.n	8002a2a <main+0x1f2>
	  			 {
	  				HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	425b      	negs	r3, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <main+0x21c>)
 8002a22:	480a      	ldr	r0, [pc, #40]	; (8002a4c <main+0x214>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	f002 ff6b 	bl	8005900 <HAL_UART_Transmit>

	  			 }
	  			 forCounter++;
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <main+0x228>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <main+0x228>)
 8002a34:	701a      	strb	r2, [r3, #0]
	  		  while(forCounter < 6)
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <main+0x228>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d994      	bls.n	8002968 <main+0x130>
	  		  }
	  HAL_Delay(250);
 8002a3e:	20fa      	movs	r0, #250	; 0xfa
 8002a40:	f000 fc92 	bl	8003368 <HAL_Delay>
  {
 8002a44:	e742      	b.n	80028cc <main+0x94>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	20000b78 	.word	0x20000b78
 8002a50:	0800aa20 	.word	0x0800aa20
 8002a54:	0800aa24 	.word	0x0800aa24
 8002a58:	20000210 	.word	0x20000210
 8002a5c:	20000a08 	.word	0x20000a08
 8002a60:	20000284 	.word	0x20000284
 8002a64:	48000400 	.word	0x48000400
 8002a68:	66666666 	.word	0x66666666
 8002a6c:	40306666 	.word	0x40306666
 8002a70:	0800aa28 	.word	0x0800aa28
 8002a74:	0800aa30 	.word	0x0800aa30

08002a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b095      	sub	sp, #84	; 0x54
 8002a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a7e:	2420      	movs	r4, #32
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	0018      	movs	r0, r3
 8002a84:	2330      	movs	r3, #48	; 0x30
 8002a86:	001a      	movs	r2, r3
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f003 fac7 	bl	800601c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a8e:	2310      	movs	r3, #16
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	0018      	movs	r0, r3
 8002a94:	2310      	movs	r3, #16
 8002a96:	001a      	movs	r2, r3
 8002a98:	2100      	movs	r1, #0
 8002a9a:	f003 fabf 	bl	800601c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a9e:	003b      	movs	r3, r7
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	f003 fab8 	bl	800601c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002aac:	0021      	movs	r1, r4
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	220a      	movs	r2, #10
 8002ab2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2210      	movs	r2, #16
 8002abe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2202      	movs	r2, #2
 8002aca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2200      	movs	r2, #0
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	22a0      	movs	r2, #160	; 0xa0
 8002ad6:	0392      	lsls	r2, r2, #14
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f001 fc88 	bl	80043f8 <HAL_RCC_OscConfig>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d001      	beq.n	8002af0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002aec:	f000 f844 	bl	8002b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af0:	2110      	movs	r1, #16
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2202      	movs	r2, #2
 8002afc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f001 ff8c 	bl	8004a2c <HAL_RCC_ClockConfig>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d001      	beq.n	8002b1c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002b18:	f000 f82e 	bl	8002b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002b1c:	003b      	movs	r3, r7
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <SystemClock_Config+0xd8>)
 8002b20:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b22:	003b      	movs	r3, r7
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002b28:	003b      	movs	r3, r7
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b2e:	003b      	movs	r3, r7
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b36:	003b      	movs	r3, r7
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f002 f8f3 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8002b3e:	1e03      	subs	r3, r0, #0
 8002b40:	d001      	beq.n	8002b46 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002b42:	f000 f819 	bl	8002b78 <Error_Handler>
  }
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b015      	add	sp, #84	; 0x54
 8002b4c:	bd90      	pop	{r4, r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	00010021 	.word	0x00010021

08002b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b66:	f000 fbe3 	bl	8003330 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40000400 	.word	0x40000400

08002b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x8>
	...

08002b84 <MPU6050Init>:
#include "mpu.h"

uint8_t currentAccelScale, currentGyroScale;

bool MPU6050Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002b8a:	4830      	ldr	r0, [pc, #192]	; (8002c4c <MPU6050Init+0xc8>)
 8002b8c:	23fa      	movs	r3, #250	; 0xfa
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	9302      	str	r3, [sp, #8]
 8002b92:	2301      	movs	r3, #1
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	2275      	movs	r2, #117	; 0x75
 8002b9e:	21d0      	movs	r1, #208	; 0xd0
 8002ba0:	f001 f820 	bl	8003be4 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002ba4:	1dfb      	adds	r3, r7, #7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b68      	cmp	r3, #104	; 0x68
 8002baa:	d149      	bne.n	8002c40 <MPU6050Init+0xbc>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		data = 0;
 8002bac:	1dbb      	adds	r3, r7, #6
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&data, 1, 1000);
 8002bb2:	4826      	ldr	r0, [pc, #152]	; (8002c4c <MPU6050Init+0xc8>)
 8002bb4:	23fa      	movs	r3, #250	; 0xfa
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	1dbb      	adds	r3, r7, #6
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	226b      	movs	r2, #107	; 0x6b
 8002bc6:	21d0      	movs	r1, #208	; 0xd0
 8002bc8:	f000 fede 	bl	8003988 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data = 0x07;
 8002bcc:	1dbb      	adds	r3, r7, #6
 8002bce:	2207      	movs	r2, #7
 8002bd0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8002bd2:	481e      	ldr	r0, [pc, #120]	; (8002c4c <MPU6050Init+0xc8>)
 8002bd4:	23fa      	movs	r3, #250	; 0xfa
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	9302      	str	r3, [sp, #8]
 8002bda:	2301      	movs	r3, #1
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	1dbb      	adds	r3, r7, #6
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	2301      	movs	r3, #1
 8002be4:	2219      	movs	r2, #25
 8002be6:	21d0      	movs	r1, #208	; 0xd0
 8002be8:	f000 fece 	bl	8003988 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		data = MPU_A2G;
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
		currentAccelScale = data;
 8002bf2:	1dbb      	adds	r3, r7, #6
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <MPU6050Init+0xcc>)
 8002bf8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8002bfa:	4814      	ldr	r0, [pc, #80]	; (8002c4c <MPU6050Init+0xc8>)
 8002bfc:	23fa      	movs	r3, #250	; 0xfa
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	9302      	str	r3, [sp, #8]
 8002c02:	2301      	movs	r3, #1
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	1dbb      	adds	r3, r7, #6
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	221c      	movs	r2, #28
 8002c0e:	21d0      	movs	r1, #208	; 0xd0
 8002c10:	f000 feba 	bl	8003988 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		data = MPU_G250G;
 8002c14:	1dbb      	adds	r3, r7, #6
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
		currentGyroScale = data;
 8002c1a:	1dbb      	adds	r3, r7, #6
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <MPU6050Init+0xd0>)
 8002c20:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8002c22:	480a      	ldr	r0, [pc, #40]	; (8002c4c <MPU6050Init+0xc8>)
 8002c24:	23fa      	movs	r3, #250	; 0xfa
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	9302      	str	r3, [sp, #8]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	1dbb      	adds	r3, r7, #6
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2301      	movs	r3, #1
 8002c34:	221b      	movs	r2, #27
 8002c36:	21d0      	movs	r1, #208	; 0xd0
 8002c38:	f000 fea6 	bl	8003988 <HAL_I2C_Mem_Write>
		return true;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <MPU6050Init+0xbe>
	} else 
	{
		return false;
 8002c40:	2300      	movs	r3, #0
	}

}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b002      	add	sp, #8
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	20000220 	.word	0x20000220
 8002c50:	20000b0d 	.word	0x20000b0d
 8002c54:	20000b0c 	.word	0x20000b0c

08002c58 <MPU6050ReadAccel>:

void MPU6050ReadAccel(int16_t *aXRaw, int16_t *aYRaw, int16_t *aZRaw)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af04      	add	r7, sp, #16
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
	uint8_t RecData[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, RecData, 6, 1000);
 8002c64:	4819      	ldr	r0, [pc, #100]	; (8002ccc <MPU6050ReadAccel+0x74>)
 8002c66:	23fa      	movs	r3, #250	; 0xfa
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	2306      	movs	r3, #6
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	2410      	movs	r4, #16
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2301      	movs	r3, #1
 8002c78:	223b      	movs	r2, #59	; 0x3b
 8002c7a:	21d0      	movs	r1, #208	; 0xd0
 8002c7c:	f000 ffb2 	bl	8003be4 <HAL_I2C_Mem_Read>

	*aXRaw = (int16_t)(RecData[0] << 8 | RecData [1]);
 8002c80:	0021      	movs	r1, r4
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b21a      	sxth	r2, r3
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	785b      	ldrb	r3, [r3, #1]
 8002c8e:	b21b      	sxth	r3, r3
 8002c90:	4313      	orrs	r3, r2
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	801a      	strh	r2, [r3, #0]
	*aYRaw = (int16_t)(RecData[2] << 8 | RecData [3]);
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	789b      	ldrb	r3, [r3, #2]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	b21a      	sxth	r2, r3
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	78db      	ldrb	r3, [r3, #3]
 8002ca4:	b21b      	sxth	r3, r3
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	801a      	strh	r2, [r3, #0]
	*aZRaw = (int16_t)(RecData[4] << 8 | RecData [5]);
 8002cae:	187b      	adds	r3, r7, r1
 8002cb0:	791b      	ldrb	r3, [r3, #4]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	b21a      	sxth	r2, r3
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	795b      	ldrb	r3, [r3, #5]
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	801a      	strh	r2, [r3, #0]
	     for more details check ACCEL_CONFIG Register              ****/

	//Ax = Accel_X_RAW/16384.0;
	//Ay = Accel_Y_RAW/16384.0;
	//Az = Accel_Z_RAW/16384.0;
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b007      	add	sp, #28
 8002cca:	bd90      	pop	{r4, r7, pc}
 8002ccc:	20000220 	.word	0x20000220

08002cd0 <MPU6050ReadGyro>:

void MPU6050ReadGyro(int16_t *gXRaw, int16_t *gYRaw, int16_t *gZRaw)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b08b      	sub	sp, #44	; 0x2c
 8002cd4:	af04      	add	r7, sp, #16
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
	uint8_t RecData[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, RecData, 6, 1000);
 8002cdc:	4819      	ldr	r0, [pc, #100]	; (8002d44 <MPU6050ReadGyro+0x74>)
 8002cde:	23fa      	movs	r3, #250	; 0xfa
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	9302      	str	r3, [sp, #8]
 8002ce4:	2306      	movs	r3, #6
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	2410      	movs	r4, #16
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	2243      	movs	r2, #67	; 0x43
 8002cf2:	21d0      	movs	r1, #208	; 0xd0
 8002cf4:	f000 ff76 	bl	8003be4 <HAL_I2C_Mem_Read>

	*gXRaw = (int16_t)(RecData[0] << 8 | RecData [1]);
 8002cf8:	0021      	movs	r1, r4
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	b21a      	sxth	r2, r3
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	b21b      	sxth	r3, r3
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	801a      	strh	r2, [r3, #0]
	*gYRaw = (int16_t)(RecData[2] << 8 | RecData [3]);
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	789b      	ldrb	r3, [r3, #2]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	78db      	ldrb	r3, [r3, #3]
 8002d1c:	b21b      	sxth	r3, r3
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	b21a      	sxth	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	801a      	strh	r2, [r3, #0]
	*gZRaw = (int16_t)(RecData[4] << 8 | RecData [5]);
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	791b      	ldrb	r3, [r3, #4]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	b21a      	sxth	r2, r3
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	795b      	ldrb	r3, [r3, #5]
 8002d32:	b21b      	sxth	r3, r3
 8002d34:	4313      	orrs	r3, r2
 8002d36:	b21a      	sxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	801a      	strh	r2, [r3, #0]
	     for more details check GYRO_CONFIG Register              ****/

	//Gx = Gyro_X_RAW/131.0;
	//Gy = Gyro_Y_RAW/131.0;
	//Gz = Gyro_Z_RAW/131.0;
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b007      	add	sp, #28
 8002d42:	bd90      	pop	{r4, r7, pc}
 8002d44:	20000220 	.word	0x20000220

08002d48 <MPUReadAll>:

void MPUReadAll(int16_t *aXRaw, int16_t *aYRaw, int16_t *aZRaw, int16_t *gXRaw, int16_t *gYRaw, int16_t *gZRaw)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
	MPU6050ReadAccel(aXRaw, aYRaw, aZRaw);
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7ff ff7b 	bl	8002c58 <MPU6050ReadAccel>
	MPU6050ReadGyro(gXRaw, gYRaw, gZRaw);
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	69b9      	ldr	r1, [r7, #24]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ffb1 	bl	8002cd0 <MPU6050ReadGyro>
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b004      	add	sp, #16
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <MPUSetAccel>:

void MPUSetAccel(uint8_t acceleration)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af04      	add	r7, sp, #16
 8002d7e:	0002      	movs	r2, r0
 8002d80:	1dfb      	adds	r3, r7, #7
 8002d82:	701a      	strb	r2, [r3, #0]

	currentAccelScale = acceleration;
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <MPUSetAccel+0x38>)
 8002d8a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &acceleration, 1, 1000);
 8002d8c:	4809      	ldr	r0, [pc, #36]	; (8002db4 <MPUSetAccel+0x3c>)
 8002d8e:	23fa      	movs	r3, #250	; 0xfa
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	9302      	str	r3, [sp, #8]
 8002d94:	2301      	movs	r3, #1
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	221c      	movs	r2, #28
 8002da0:	21d0      	movs	r1, #208	; 0xd0
 8002da2:	f000 fdf1 	bl	8003988 <HAL_I2C_Mem_Write>
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	20000b0d 	.word	0x20000b0d
 8002db4:	20000220 	.word	0x20000220

08002db8 <MPUSetGyro>:

void MPUSetGyro(uint8_t gyroSpeed)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	701a      	strb	r2, [r3, #0]
	currentGyroScale = gyroSpeed;
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <MPUSetGyro+0x38>)
 8002dca:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &gyroSpeed, 1, 1000);
 8002dcc:	4809      	ldr	r0, [pc, #36]	; (8002df4 <MPUSetGyro+0x3c>)
 8002dce:	23fa      	movs	r3, #250	; 0xfa
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	9302      	str	r3, [sp, #8]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	1dfb      	adds	r3, r7, #7
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2301      	movs	r3, #1
 8002dde:	221b      	movs	r2, #27
 8002de0:	21d0      	movs	r1, #208	; 0xd0
 8002de2:	f000 fdd1 	bl	8003988 <HAL_I2C_Mem_Write>
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b002      	add	sp, #8
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	20000b0c 	.word	0x20000b0c
 8002df4:	20000220 	.word	0x20000220

08002df8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	0018      	movs	r0, r3
 8002e02:	2314      	movs	r3, #20
 8002e04:	001a      	movs	r2, r3
 8002e06:	2100      	movs	r1, #0
 8002e08:	f003 f908 	bl	800601c <memset>
  RTC_DateTypeDef sDate = {0};
 8002e0c:	003b      	movs	r3, r7
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e12:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e14:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <MX_RTC_Init+0xc0>)
 8002e16:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e18:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002e1e:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e20:	227f      	movs	r2, #127	; 0x7f
 8002e22:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e26:	22ff      	movs	r2, #255	; 0xff
 8002e28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e36:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f002 f83e 	bl	8004ec0 <HAL_RTC_Init>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002e48:	f7ff fe96 	bl	8002b78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	2200      	movs	r2, #0
 8002e56:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	2200      	movs	r2, #0
 8002e62:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002e6a:	1d39      	adds	r1, r7, #4
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	0018      	movs	r0, r3
 8002e72:	f002 f8b9 	bl	8004fe8 <HAL_RTC_SetTime>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d001      	beq.n	8002e7e <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8002e7a:	f7ff fe7d 	bl	8002b78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e7e:	003b      	movs	r3, r7
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002e84:	003b      	movs	r3, r7
 8002e86:	2201      	movs	r2, #1
 8002e88:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002e8a:	003b      	movs	r3, r7
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002e90:	003b      	movs	r3, r7
 8002e92:	2200      	movs	r2, #0
 8002e94:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e96:	0039      	movs	r1, r7
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <MX_RTC_Init+0xbc>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f002 f95f 	bl	8005160 <HAL_RTC_SetDate>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8002ea6:	f7ff fe67 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b006      	add	sp, #24
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	20000b10 	.word	0x20000b10
 8002eb8:	40002800 	.word	0x40002800

08002ebc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <HAL_RTC_MspInit+0x28>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d106      	bne.n	8002edc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RTC_MspInit+0x2c>)
 8002ed0:	6a1a      	ldr	r2, [r3, #32]
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RTC_MspInit+0x2c>)
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0209      	lsls	r1, r1, #8
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40002800 	.word	0x40002800
 8002ee8:	40021000 	.word	0x40021000

08002eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_MspInit+0x44>)
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <HAL_MspInit+0x44>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	619a      	str	r2, [r3, #24]
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_MspInit+0x44>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_MspInit+0x44>)
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <HAL_MspInit+0x44>)
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	0549      	lsls	r1, r1, #21
 8002f14:	430a      	orrs	r2, r1
 8002f16:	61da      	str	r2, [r3, #28]
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_MspInit+0x44>)
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	055b      	lsls	r3, r3, #21
 8002f20:	4013      	ands	r3, r2
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b002      	add	sp, #8
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	40021000 	.word	0x40021000

08002f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	0019      	movs	r1, r3
 8002f4a:	2010      	movs	r0, #16
 8002f4c:	f000 fab8 	bl	80034c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f50:	2010      	movs	r0, #16
 8002f52:	f000 faca 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	61da      	str	r2, [r3, #28]
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2202      	movs	r2, #2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f6e:	230c      	movs	r3, #12
 8002f70:	18fa      	adds	r2, r7, r3
 8002f72:	2310      	movs	r3, #16
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	0011      	movs	r1, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f001 fea9 	bl	8004cd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f7e:	f001 fe91 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 8002f82:	0003      	movs	r3, r0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	4914      	ldr	r1, [pc, #80]	; (8002fdc <HAL_InitTick+0xa8>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7fd f8d8 	bl	8000140 <__udivsi3>
 8002f90:	0003      	movs	r3, r0
 8002f92:	3b01      	subs	r3, #1
 8002f94:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_InitTick+0xac>)
 8002f98:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <HAL_InitTick+0xb0>)
 8002f9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <HAL_InitTick+0xac>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <HAL_InitTick+0xb4>)
 8002fa0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <HAL_InitTick+0xac>)
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <HAL_InitTick+0xac>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_InitTick+0xac>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_InitTick+0xac>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f002 f9ee 	bl	8005398 <HAL_TIM_Base_Init>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d105      	bne.n	8002fcc <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <HAL_InitTick+0xac>)
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f002 fa40 	bl	8005448 <HAL_TIM_Base_Start_IT>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	e000      	b.n	8002fce <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b00a      	add	sp, #40	; 0x28
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	000f4240 	.word	0x000f4240
 8002fe0:	20000b30 	.word	0x20000b30
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	000003e7 	.word	0x000003e7

08002fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <NMI_Handler+0x4>

08002ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff6:	e7fe      	b.n	8002ff6 <HardFault_Handler+0x4>

08002ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <TIM3_IRQHandler+0x14>)
 800301e:	0018      	movs	r0, r3
 8003020:	f002 fa5e 	bl	80054e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	20000b30 	.word	0x20000b30

08003030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
	return 1;
 8003034:	2301      	movs	r3, #1
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_kill>:

int _kill(int pid, int sig)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003046:	f002 ffbf 	bl	8005fc8 <__errno>
 800304a:	0003      	movs	r3, r0
 800304c:	2216      	movs	r2, #22
 800304e:	601a      	str	r2, [r3, #0]
	return -1;
 8003050:	2301      	movs	r3, #1
 8003052:	425b      	negs	r3, r3
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <_exit>:

void _exit (int status)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003064:	2301      	movs	r3, #1
 8003066:	425a      	negs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0011      	movs	r1, r2
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff ffe5 	bl	800303c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003072:	e7fe      	b.n	8003072 <_exit+0x16>

08003074 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e00a      	b.n	800309c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003086:	e000      	b.n	800308a <_read+0x16>
 8003088:	bf00      	nop
 800308a:	0001      	movs	r1, r0
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	60ba      	str	r2, [r7, #8]
 8003092:	b2ca      	uxtb	r2, r1
 8003094:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3301      	adds	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	dbf0      	blt.n	8003086 <_read+0x12>
	}

return len;
 80030a4:	687b      	ldr	r3, [r7, #4]
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b006      	add	sp, #24
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e009      	b.n	80030d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	60ba      	str	r2, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	0018      	movs	r0, r3
 80030ca:	e000      	b.n	80030ce <_write+0x20>
 80030cc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3301      	adds	r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	dbf1      	blt.n	80030c0 <_write+0x12>
	}
	return len;
 80030dc:	687b      	ldr	r3, [r7, #4]
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b006      	add	sp, #24
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_close>:

int _close(int file)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
	return -1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	425b      	negs	r3, r3
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2280      	movs	r2, #128	; 0x80
 8003108:	0192      	lsls	r2, r2, #6
 800310a:	605a      	str	r2, [r3, #4]
	return 0;
 800310c:	2300      	movs	r3, #0
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b002      	add	sp, #8
 8003114:	bd80      	pop	{r7, pc}

08003116 <_isatty>:

int _isatty(int file)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
	return 1;
 800311e:	2301      	movs	r3, #1
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b002      	add	sp, #8
 8003126:	bd80      	pop	{r7, pc}

08003128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
	return 0;
 8003134:	2300      	movs	r3, #0
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b004      	add	sp, #16
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <_sbrk+0x5c>)
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <_sbrk+0x60>)
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003154:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <_sbrk+0x64>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <_sbrk+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	18d3      	adds	r3, r2, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003170:	f002 ff2a 	bl	8005fc8 <__errno>
 8003174:	0003      	movs	r3, r0
 8003176:	220c      	movs	r2, #12
 8003178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800317a:	2301      	movs	r3, #1
 800317c:	425b      	negs	r3, r3
 800317e:	e009      	b.n	8003194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	18d2      	adds	r2, r2, r3
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <_sbrk+0x64>)
 8003190:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20002000 	.word	0x20002000
 80031a0:	00000400 	.word	0x00000400
 80031a4:	20000214 	.word	0x20000214
 80031a8:	20000c10 	.word	0x20000c10

080031ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031be:	4a15      	ldr	r2, [pc, #84]	; (8003214 <MX_USART1_UART_Init+0x5c>)
 80031c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031c4:	22e1      	movs	r2, #225	; 0xe1
 80031c6:	0252      	lsls	r2, r2, #9
 80031c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031de:	220c      	movs	r2, #12
 80031e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <MX_USART1_UART_Init+0x58>)
 80031fc:	0018      	movs	r0, r3
 80031fe:	f002 fb2b 	bl	8005858 <HAL_UART_Init>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d001      	beq.n	800320a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003206:	f7ff fcb7 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000b78 	.word	0x20000b78
 8003214:	40013800 	.word	0x40013800

08003218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b08b      	sub	sp, #44	; 0x2c
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	2414      	movs	r4, #20
 8003222:	193b      	adds	r3, r7, r4
 8003224:	0018      	movs	r0, r3
 8003226:	2314      	movs	r3, #20
 8003228:	001a      	movs	r2, r3
 800322a:	2100      	movs	r1, #0
 800322c:	f002 fef6 	bl	800601c <memset>
  if(uartHandle->Instance==USART1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_UART_MspInit+0x94>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d133      	bne.n	80032a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_UART_MspInit+0x98>)
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <HAL_UART_MspInit+0x98>)
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	01c9      	lsls	r1, r1, #7
 8003244:	430a      	orrs	r2, r1
 8003246:	619a      	str	r2, [r3, #24]
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_UART_MspInit+0x98>)
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	01db      	lsls	r3, r3, #7
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <HAL_UART_MspInit+0x98>)
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_UART_MspInit+0x98>)
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	0289      	lsls	r1, r1, #10
 8003260:	430a      	orrs	r2, r1
 8003262:	615a      	str	r2, [r3, #20]
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_UART_MspInit+0x98>)
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	029b      	lsls	r3, r3, #10
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003272:	193b      	adds	r3, r7, r4
 8003274:	22c0      	movs	r2, #192	; 0xc0
 8003276:	00d2      	lsls	r2, r2, #3
 8003278:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	0021      	movs	r1, r4
 800327c:	187b      	adds	r3, r7, r1
 800327e:	2202      	movs	r2, #2
 8003280:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003288:	187b      	adds	r3, r7, r1
 800328a:	2203      	movs	r2, #3
 800328c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800328e:	187b      	adds	r3, r7, r1
 8003290:	2201      	movs	r2, #1
 8003292:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003294:	187a      	adds	r2, r7, r1
 8003296:	2390      	movs	r3, #144	; 0x90
 8003298:	05db      	lsls	r3, r3, #23
 800329a:	0011      	movs	r1, r2
 800329c:	0018      	movs	r0, r3
 800329e:	f000 f935 	bl	800350c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b00b      	add	sp, #44	; 0x2c
 80032a8:	bd90      	pop	{r4, r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	40013800 	.word	0x40013800
 80032b0:	40021000 	.word	0x40021000

080032b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032b8:	480d      	ldr	r0, [pc, #52]	; (80032f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80032ba:	490e      	ldr	r1, [pc, #56]	; (80032f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032bc:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <LoopForever+0xe>)
  movs r3, #0
 80032be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c0:	e002      	b.n	80032c8 <LoopCopyDataInit>

080032c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032c6:	3304      	adds	r3, #4

080032c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032cc:	d3f9      	bcc.n	80032c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80032d0:	4c0b      	ldr	r4, [pc, #44]	; (8003300 <LoopForever+0x16>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d4:	e001      	b.n	80032da <LoopFillZerobss>

080032d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032d8:	3204      	adds	r2, #4

080032da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032dc:	d3fb      	bcc.n	80032d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032de:	f7ff ff65 	bl	80031ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80032e2:	f002 fe77 	bl	8005fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032e6:	f7ff faa7 	bl	8002838 <main>

080032ea <LoopForever>:

LoopForever:
    b LoopForever
 80032ea:	e7fe      	b.n	80032ea <LoopForever>
  ldr   r0, =_estack
 80032ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80032f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80032f8:	0800b02c 	.word	0x0800b02c
  ldr r2, =_sbss
 80032fc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003300:	20000c10 	.word	0x20000c10

08003304 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003304:	e7fe      	b.n	8003304 <ADC1_IRQHandler>
	...

08003308 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800330c:	4b07      	ldr	r3, [pc, #28]	; (800332c <HAL_Init+0x24>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_Init+0x24>)
 8003312:	2110      	movs	r1, #16
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003318:	2000      	movs	r0, #0
 800331a:	f7ff fe0b 	bl	8002f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800331e:	f7ff fde5 	bl	8002eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	40022000 	.word	0x40022000

08003330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_IncTick+0x1c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	001a      	movs	r2, r3
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_IncTick+0x20>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	18d2      	adds	r2, r2, r3
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_IncTick+0x20>)
 8003342:	601a      	str	r2, [r3, #0]
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	2000001c 	.word	0x2000001c
 8003350:	20000bfc 	.word	0x20000bfc

08003354 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  return uwTick;
 8003358:	4b02      	ldr	r3, [pc, #8]	; (8003364 <HAL_GetTick+0x10>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	20000bfc 	.word	0x20000bfc

08003368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff fff0 	bl	8003354 <HAL_GetTick>
 8003374:	0003      	movs	r3, r0
 8003376:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3301      	adds	r3, #1
 8003380:	d005      	beq.n	800338e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_Delay+0x44>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	001a      	movs	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	189b      	adds	r3, r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	f7ff ffe0 	bl	8003354 <HAL_GetTick>
 8003394:	0002      	movs	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	429a      	cmp	r2, r3
 800339e:	d8f7      	bhi.n	8003390 <HAL_Delay+0x28>
  {
  }
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b004      	add	sp, #16
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	2000001c 	.word	0x2000001c

080033b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	0002      	movs	r2, r0
 80033b8:	1dfb      	adds	r3, r7, #7
 80033ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b7f      	cmp	r3, #127	; 0x7f
 80033c2:	d809      	bhi.n	80033d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c4:	1dfb      	adds	r3, r7, #7
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	001a      	movs	r2, r3
 80033ca:	231f      	movs	r3, #31
 80033cc:	401a      	ands	r2, r3
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <__NVIC_EnableIRQ+0x30>)
 80033d0:	2101      	movs	r1, #1
 80033d2:	4091      	lsls	r1, r2
 80033d4:	000a      	movs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
  }
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	0002      	movs	r2, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b7f      	cmp	r3, #127	; 0x7f
 80033f8:	d828      	bhi.n	800344c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033fa:	4a2f      	ldr	r2, [pc, #188]	; (80034b8 <__NVIC_SetPriority+0xd4>)
 80033fc:	1dfb      	adds	r3, r7, #7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b25b      	sxtb	r3, r3
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	33c0      	adds	r3, #192	; 0xc0
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	589b      	ldr	r3, [r3, r2]
 800340a:	1dfa      	adds	r2, r7, #7
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	0011      	movs	r1, r2
 8003410:	2203      	movs	r2, #3
 8003412:	400a      	ands	r2, r1
 8003414:	00d2      	lsls	r2, r2, #3
 8003416:	21ff      	movs	r1, #255	; 0xff
 8003418:	4091      	lsls	r1, r2
 800341a:	000a      	movs	r2, r1
 800341c:	43d2      	mvns	r2, r2
 800341e:	401a      	ands	r2, r3
 8003420:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	019b      	lsls	r3, r3, #6
 8003426:	22ff      	movs	r2, #255	; 0xff
 8003428:	401a      	ands	r2, r3
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	0018      	movs	r0, r3
 8003430:	2303      	movs	r3, #3
 8003432:	4003      	ands	r3, r0
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003438:	481f      	ldr	r0, [pc, #124]	; (80034b8 <__NVIC_SetPriority+0xd4>)
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	b25b      	sxtb	r3, r3
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	430a      	orrs	r2, r1
 8003444:	33c0      	adds	r3, #192	; 0xc0
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800344a:	e031      	b.n	80034b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <__NVIC_SetPriority+0xd8>)
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	0019      	movs	r1, r3
 8003454:	230f      	movs	r3, #15
 8003456:	400b      	ands	r3, r1
 8003458:	3b08      	subs	r3, #8
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3306      	adds	r3, #6
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	18d3      	adds	r3, r2, r3
 8003462:	3304      	adds	r3, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	1dfa      	adds	r2, r7, #7
 8003468:	7812      	ldrb	r2, [r2, #0]
 800346a:	0011      	movs	r1, r2
 800346c:	2203      	movs	r2, #3
 800346e:	400a      	ands	r2, r1
 8003470:	00d2      	lsls	r2, r2, #3
 8003472:	21ff      	movs	r1, #255	; 0xff
 8003474:	4091      	lsls	r1, r2
 8003476:	000a      	movs	r2, r1
 8003478:	43d2      	mvns	r2, r2
 800347a:	401a      	ands	r2, r3
 800347c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	401a      	ands	r2, r3
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	0018      	movs	r0, r3
 800348c:	2303      	movs	r3, #3
 800348e:	4003      	ands	r3, r0
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003494:	4809      	ldr	r0, [pc, #36]	; (80034bc <__NVIC_SetPriority+0xd8>)
 8003496:	1dfb      	adds	r3, r7, #7
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	001c      	movs	r4, r3
 800349c:	230f      	movs	r3, #15
 800349e:	4023      	ands	r3, r4
 80034a0:	3b08      	subs	r3, #8
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	430a      	orrs	r2, r1
 80034a6:	3306      	adds	r3, #6
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	18c3      	adds	r3, r0, r3
 80034ac:	3304      	adds	r3, #4
 80034ae:	601a      	str	r2, [r3, #0]
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b003      	add	sp, #12
 80034b6:	bd90      	pop	{r4, r7, pc}
 80034b8:	e000e100 	.word	0xe000e100
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	210f      	movs	r1, #15
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	1c02      	adds	r2, r0, #0
 80034d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	0011      	movs	r1, r2
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff ff81 	bl	80033e4 <__NVIC_SetPriority>
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	0002      	movs	r2, r0
 80034f2:	1dfb      	adds	r3, r7, #7
 80034f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7ff ff57 	bl	80033b0 <__NVIC_EnableIRQ>
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b002      	add	sp, #8
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351a:	e14f      	b.n	80037bc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4091      	lsls	r1, r2
 8003526:	000a      	movs	r2, r1
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <HAL_GPIO_Init+0x28>
 8003532:	e140      	b.n	80037b6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d00b      	beq.n	8003554 <HAL_GPIO_Init+0x48>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d007      	beq.n	8003554 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003548:	2b11      	cmp	r3, #17
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b12      	cmp	r3, #18
 8003552:	d130      	bne.n	80035b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	409a      	lsls	r2, r3
 8003562:	0013      	movs	r3, r2
 8003564:	43da      	mvns	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	0013      	movs	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800358a:	2201      	movs	r2, #1
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	409a      	lsls	r2, r3
 8003590:	0013      	movs	r3, r2
 8003592:	43da      	mvns	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	2201      	movs	r2, #1
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
 80035a8:	0013      	movs	r3, r2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	409a      	lsls	r2, r3
 80035c4:	0013      	movs	r3, r2
 80035c6:	43da      	mvns	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	0013      	movs	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0xea>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b12      	cmp	r3, #18
 80035f4:	d123      	bne.n	800363e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	58d3      	ldr	r3, [r2, r3]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2207      	movs	r2, #7
 8003608:	4013      	ands	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	220f      	movs	r2, #15
 800360e:	409a      	lsls	r2, r3
 8003610:	0013      	movs	r3, r2
 8003612:	43da      	mvns	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2107      	movs	r1, #7
 8003622:	400b      	ands	r3, r1
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	409a      	lsls	r2, r3
 8003628:	0013      	movs	r3, r2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	0092      	lsls	r2, r2, #2
 800363a:	6939      	ldr	r1, [r7, #16]
 800363c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	409a      	lsls	r2, r3
 800364c:	0013      	movs	r3, r2
 800364e:	43da      	mvns	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2203      	movs	r2, #3
 800365c:	401a      	ands	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	409a      	lsls	r2, r3
 8003664:	0013      	movs	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	055b      	lsls	r3, r3, #21
 800367a:	4013      	ands	r3, r2
 800367c:	d100      	bne.n	8003680 <HAL_GPIO_Init+0x174>
 800367e:	e09a      	b.n	80037b6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003680:	4b54      	ldr	r3, [pc, #336]	; (80037d4 <HAL_GPIO_Init+0x2c8>)
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_GPIO_Init+0x2c8>)
 8003686:	2101      	movs	r1, #1
 8003688:	430a      	orrs	r2, r1
 800368a:	619a      	str	r2, [r3, #24]
 800368c:	4b51      	ldr	r3, [pc, #324]	; (80037d4 <HAL_GPIO_Init+0x2c8>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2201      	movs	r2, #1
 8003692:	4013      	ands	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003698:	4a4f      	ldr	r2, [pc, #316]	; (80037d8 <HAL_GPIO_Init+0x2cc>)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	3302      	adds	r3, #2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	589b      	ldr	r3, [r3, r2]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2203      	movs	r2, #3
 80036aa:	4013      	ands	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	409a      	lsls	r2, r3
 80036b2:	0013      	movs	r3, r2
 80036b4:	43da      	mvns	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	2390      	movs	r3, #144	; 0x90
 80036c0:	05db      	lsls	r3, r3, #23
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d013      	beq.n	80036ee <HAL_GPIO_Init+0x1e2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a44      	ldr	r2, [pc, #272]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00d      	beq.n	80036ea <HAL_GPIO_Init+0x1de>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a43      	ldr	r2, [pc, #268]	; (80037e0 <HAL_GPIO_Init+0x2d4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <HAL_GPIO_Init+0x1da>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a42      	ldr	r2, [pc, #264]	; (80037e4 <HAL_GPIO_Init+0x2d8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_GPIO_Init+0x1d6>
 80036de:	2303      	movs	r3, #3
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036e2:	2305      	movs	r3, #5
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036ee:	2300      	movs	r3, #0
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	2103      	movs	r1, #3
 80036f4:	400a      	ands	r2, r1
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	4093      	lsls	r3, r2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003700:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HAL_GPIO_Init+0x2cc>)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	43da      	mvns	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	025b      	lsls	r3, r3, #9
 8003726:	4013      	ands	r3, r2
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003732:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	43da      	mvns	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	4013      	ands	r3, r2
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800375c:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003762:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	43da      	mvns	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	035b      	lsls	r3, r3, #13
 800377a:	4013      	ands	r3, r2
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800378c:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	43da      	mvns	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	039b      	lsls	r3, r3, #14
 80037a4:	4013      	ands	r3, r2
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	40da      	lsrs	r2, r3
 80037c4:	1e13      	subs	r3, r2, #0
 80037c6:	d000      	beq.n	80037ca <HAL_GPIO_Init+0x2be>
 80037c8:	e6a8      	b.n	800351c <HAL_GPIO_Init+0x10>
  } 
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b006      	add	sp, #24
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40010000 	.word	0x40010000
 80037dc:	48000400 	.word	0x48000400
 80037e0:	48000800 	.word	0x48000800
 80037e4:	48000c00 	.word	0x48000c00
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	0008      	movs	r0, r1
 80037f6:	0011      	movs	r1, r2
 80037f8:	1cbb      	adds	r3, r7, #2
 80037fa:	1c02      	adds	r2, r0, #0
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	1c7b      	adds	r3, r7, #1
 8003800:	1c0a      	adds	r2, r1, #0
 8003802:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003804:	1c7b      	adds	r3, r7, #1
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800380c:	1cbb      	adds	r3, r7, #2
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003814:	e003      	b.n	800381e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003816:	1cbb      	adds	r3, r7, #2
 8003818:	881a      	ldrh	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b002      	add	sp, #8
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	000a      	movs	r2, r1
 8003830:	1cbb      	adds	r3, r7, #2
 8003832:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800383a:	1cbb      	adds	r3, r7, #2
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4013      	ands	r3, r2
 8003842:	041a      	lsls	r2, r3, #16
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	43db      	mvns	r3, r3
 8003848:	1cb9      	adds	r1, r7, #2
 800384a:	8809      	ldrh	r1, [r1, #0]
 800384c:	400b      	ands	r3, r1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e082      	b.n	8003974 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2241      	movs	r2, #65	; 0x41
 8003872:	5c9b      	ldrb	r3, [r3, r2]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d107      	bne.n	800388a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2240      	movs	r2, #64	; 0x40
 800387e:	2100      	movs	r1, #0
 8003880:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0018      	movs	r0, r3
 8003886:	f7fe ff89 	bl	800279c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2241      	movs	r2, #65	; 0x41
 800388e:	2124      	movs	r1, #36	; 0x24
 8003890:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	438a      	bics	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4934      	ldr	r1, [pc, #208]	; (800397c <HAL_I2C_Init+0x120>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4931      	ldr	r1, [pc, #196]	; (8003980 <HAL_I2C_Init+0x124>)
 80038bc:	400a      	ands	r2, r1
 80038be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d108      	bne.n	80038da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	0209      	lsls	r1, r1, #8
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	e007      	b.n	80038ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2184      	movs	r1, #132	; 0x84
 80038e4:	0209      	lsls	r1, r1, #8
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d104      	bne.n	80038fc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	0112      	lsls	r2, r2, #4
 80038fa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	491f      	ldr	r1, [pc, #124]	; (8003984 <HAL_I2C_Init+0x128>)
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	491a      	ldr	r1, [pc, #104]	; (8003980 <HAL_I2C_Init+0x124>)
 8003918:	400a      	ands	r2, r1
 800391a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	431a      	orrs	r2, r3
 8003926:	0011      	movs	r1, r2
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	021a      	lsls	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69d9      	ldr	r1, [r3, #28]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2241      	movs	r2, #65	; 0x41
 8003960:	2120      	movs	r1, #32
 8003962:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2242      	movs	r2, #66	; 0x42
 800396e:	2100      	movs	r1, #0
 8003970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}
 800397c:	f0ffffff 	.word	0xf0ffffff
 8003980:	ffff7fff 	.word	0xffff7fff
 8003984:	02008000 	.word	0x02008000

08003988 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	000c      	movs	r4, r1
 8003992:	0010      	movs	r0, r2
 8003994:	0019      	movs	r1, r3
 8003996:	230a      	movs	r3, #10
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	1c22      	adds	r2, r4, #0
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	2308      	movs	r3, #8
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	1c02      	adds	r2, r0, #0
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	1dbb      	adds	r3, r7, #6
 80039a8:	1c0a      	adds	r2, r1, #0
 80039aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2241      	movs	r2, #65	; 0x41
 80039b0:	5c9b      	ldrb	r3, [r3, r2]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d000      	beq.n	80039ba <HAL_I2C_Mem_Write+0x32>
 80039b8:	e10c      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <HAL_I2C_Mem_Write+0x42>
 80039c0:	232c      	movs	r3, #44	; 0x2c
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0ff      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2240      	movs	r2, #64	; 0x40
 80039da:	5c9b      	ldrb	r3, [r3, r2]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_I2C_Mem_Write+0x5c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0f8      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	2101      	movs	r1, #1
 80039ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039ec:	f7ff fcb2 	bl	8003354 <HAL_GetTick>
 80039f0:	0003      	movs	r3, r0
 80039f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	0219      	lsls	r1, r3, #8
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2319      	movs	r3, #25
 8003a00:	2201      	movs	r2, #1
 8003a02:	f000 fb0b 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003a06:	1e03      	subs	r3, r0, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0e3      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2241      	movs	r2, #65	; 0x41
 8003a12:	2121      	movs	r1, #33	; 0x21
 8003a14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2242      	movs	r2, #66	; 0x42
 8003a1a:	2140      	movs	r1, #64	; 0x40
 8003a1c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	222c      	movs	r2, #44	; 0x2c
 8003a2e:	18ba      	adds	r2, r7, r2
 8003a30:	8812      	ldrh	r2, [r2, #0]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	881c      	ldrh	r4, [r3, #0]
 8003a3e:	2308      	movs	r3, #8
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	881a      	ldrh	r2, [r3, #0]
 8003a44:	230a      	movs	r3, #10
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	8819      	ldrh	r1, [r3, #0]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	0023      	movs	r3, r4
 8003a56:	f000 f9f9 	bl	8003e4c <I2C_RequestMemoryWrite>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2240      	movs	r2, #64	; 0x40
 8003a62:	2100      	movs	r1, #0
 8003a64:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0b5      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2bff      	cmp	r3, #255	; 0xff
 8003a72:	d911      	bls.n	8003a98 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	22ff      	movs	r2, #255	; 0xff
 8003a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	045c      	lsls	r4, r3, #17
 8003a84:	230a      	movs	r3, #10
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	8819      	ldrh	r1, [r3, #0]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	0023      	movs	r3, r4
 8003a92:	f000 fbe3 	bl	800425c <I2C_TransferConfig>
 8003a96:	e012      	b.n	8003abe <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	049c      	lsls	r4, r3, #18
 8003aac:	230a      	movs	r3, #10
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	8819      	ldrh	r1, [r3, #0]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	0023      	movs	r3, r4
 8003aba:	f000 fbcf 	bl	800425c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f000 fae8 	bl	800409a <I2C_WaitOnTXISFlagUntilTimeout>
 8003aca:	1e03      	subs	r3, r0, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e081      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d03a      	beq.n	8003b82 <HAL_I2C_Mem_Write+0x1fa>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d136      	bne.n	8003b82 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	0013      	movs	r3, r2
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	f000 fa7b 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003b26:	1e03      	subs	r3, r0, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e053      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2bff      	cmp	r3, #255	; 0xff
 8003b36:	d911      	bls.n	8003b5c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	045c      	lsls	r4, r3, #17
 8003b48:	230a      	movs	r3, #10
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	8819      	ldrh	r1, [r3, #0]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	0023      	movs	r3, r4
 8003b56:	f000 fb81 	bl	800425c <I2C_TransferConfig>
 8003b5a:	e012      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	049c      	lsls	r4, r3, #18
 8003b70:	230a      	movs	r3, #10
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	8819      	ldrh	r1, [r3, #0]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	0023      	movs	r3, r4
 8003b7e:	f000 fb6d 	bl	800425c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d198      	bne.n	8003abe <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 fac0 	bl	8004118 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b98:	1e03      	subs	r3, r0, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e01a      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	490b      	ldr	r1, [pc, #44]	; (8003be0 <HAL_I2C_Mem_Write+0x258>)
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2241      	movs	r2, #65	; 0x41
 8003bbc:	2120      	movs	r1, #32
 8003bbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2242      	movs	r2, #66	; 0x42
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2240      	movs	r2, #64	; 0x40
 8003bcc:	2100      	movs	r1, #0
 8003bce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b007      	add	sp, #28
 8003bdc:	bd90      	pop	{r4, r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	fe00e800 	.word	0xfe00e800

08003be4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	000c      	movs	r4, r1
 8003bee:	0010      	movs	r0, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	230a      	movs	r3, #10
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	1c22      	adds	r2, r4, #0
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	1c02      	adds	r2, r0, #0
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	1dbb      	adds	r3, r7, #6
 8003c04:	1c0a      	adds	r2, r1, #0
 8003c06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2241      	movs	r2, #65	; 0x41
 8003c0c:	5c9b      	ldrb	r3, [r3, r2]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d000      	beq.n	8003c16 <HAL_I2C_Mem_Read+0x32>
 8003c14:	e110      	b.n	8003e38 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <HAL_I2C_Mem_Read+0x42>
 8003c1c:	232c      	movs	r3, #44	; 0x2c
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2280      	movs	r2, #128	; 0x80
 8003c2a:	0092      	lsls	r2, r2, #2
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e103      	b.n	8003e3a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2240      	movs	r2, #64	; 0x40
 8003c36:	5c9b      	ldrb	r3, [r3, r2]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2C_Mem_Read+0x5c>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0fc      	b.n	8003e3a <HAL_I2C_Mem_Read+0x256>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2240      	movs	r2, #64	; 0x40
 8003c44:	2101      	movs	r1, #1
 8003c46:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c48:	f7ff fb84 	bl	8003354 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	0219      	lsls	r1, r3, #8
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2319      	movs	r3, #25
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f000 f9dd 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0e7      	b.n	8003e3a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2241      	movs	r2, #65	; 0x41
 8003c6e:	2122      	movs	r1, #34	; 0x22
 8003c70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2242      	movs	r2, #66	; 0x42
 8003c76:	2140      	movs	r1, #64	; 0x40
 8003c78:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	222c      	movs	r2, #44	; 0x2c
 8003c8a:	18ba      	adds	r2, r7, r2
 8003c8c:	8812      	ldrh	r2, [r2, #0]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c96:	1dbb      	adds	r3, r7, #6
 8003c98:	881c      	ldrh	r4, [r3, #0]
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	881a      	ldrh	r2, [r3, #0]
 8003ca0:	230a      	movs	r3, #10
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	8819      	ldrh	r1, [r3, #0]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	0023      	movs	r3, r4
 8003cb2:	f000 f92f 	bl	8003f14 <I2C_RequestMemoryRead>
 8003cb6:	1e03      	subs	r3, r0, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2240      	movs	r2, #64	; 0x40
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0b9      	b.n	8003e3a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2bff      	cmp	r3, #255	; 0xff
 8003cce:	d911      	bls.n	8003cf4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	22ff      	movs	r2, #255	; 0xff
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	045c      	lsls	r4, r3, #17
 8003ce0:	230a      	movs	r3, #10
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	8819      	ldrh	r1, [r3, #0]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	4b56      	ldr	r3, [pc, #344]	; (8003e44 <HAL_I2C_Mem_Read+0x260>)
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	0023      	movs	r3, r4
 8003cee:	f000 fab5 	bl	800425c <I2C_TransferConfig>
 8003cf2:	e012      	b.n	8003d1a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	049c      	lsls	r4, r3, #18
 8003d08:	230a      	movs	r3, #10
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	8819      	ldrh	r1, [r3, #0]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <HAL_I2C_Mem_Read+0x260>)
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	0023      	movs	r3, r4
 8003d16:	f000 faa1 	bl	800425c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	0013      	movs	r3, r2
 8003d24:	2200      	movs	r2, #0
 8003d26:	2104      	movs	r1, #4
 8003d28:	f000 f978 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003d2c:	1e03      	subs	r3, r0, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e082      	b.n	8003e3a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03a      	beq.n	8003de6 <HAL_I2C_Mem_Read+0x202>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d136      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	0013      	movs	r3, r2
 8003d82:	2200      	movs	r2, #0
 8003d84:	2180      	movs	r1, #128	; 0x80
 8003d86:	f000 f949 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	1e03      	subs	r3, r0, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e053      	b.n	8003e3a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2bff      	cmp	r3, #255	; 0xff
 8003d9a:	d911      	bls.n	8003dc0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	22ff      	movs	r2, #255	; 0xff
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	045c      	lsls	r4, r3, #17
 8003dac:	230a      	movs	r3, #10
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	8819      	ldrh	r1, [r3, #0]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	2300      	movs	r3, #0
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	0023      	movs	r3, r4
 8003dba:	f000 fa4f 	bl	800425c <I2C_TransferConfig>
 8003dbe:	e012      	b.n	8003de6 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	049c      	lsls	r4, r3, #18
 8003dd4:	230a      	movs	r3, #10
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	8819      	ldrh	r1, [r3, #0]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	0023      	movs	r3, r4
 8003de2:	f000 fa3b 	bl	800425c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d194      	bne.n	8003d1a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 f98e 	bl	8004118 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e01a      	b.n	8003e3a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	490c      	ldr	r1, [pc, #48]	; (8003e48 <HAL_I2C_Mem_Read+0x264>)
 8003e18:	400a      	ands	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2241      	movs	r2, #65	; 0x41
 8003e20:	2120      	movs	r1, #32
 8003e22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2242      	movs	r2, #66	; 0x42
 8003e28:	2100      	movs	r1, #0
 8003e2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	2100      	movs	r1, #0
 8003e32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
  }
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b007      	add	sp, #28
 8003e40:	bd90      	pop	{r4, r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	80002400 	.word	0x80002400
 8003e48:	fe00e800 	.word	0xfe00e800

08003e4c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b5b0      	push	{r4, r5, r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	000c      	movs	r4, r1
 8003e56:	0010      	movs	r0, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	250a      	movs	r5, #10
 8003e5c:	197b      	adds	r3, r7, r5
 8003e5e:	1c22      	adds	r2, r4, #0
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	2308      	movs	r3, #8
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	1c02      	adds	r2, r0, #0
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	1dbb      	adds	r3, r7, #6
 8003e6c:	1c0a      	adds	r2, r1, #0
 8003e6e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e70:	1dbb      	adds	r3, r7, #6
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	045c      	lsls	r4, r3, #17
 8003e7a:	197b      	adds	r3, r7, r5
 8003e7c:	8819      	ldrh	r1, [r3, #0]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <I2C_RequestMemoryWrite+0xc4>)
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	0023      	movs	r3, r4
 8003e86:	f000 f9e9 	bl	800425c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 f902 	bl	800409a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e033      	b.n	8003f06 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e9e:	1dbb      	adds	r3, r7, #6
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb4:	e019      	b.n	8003eea <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	0a1b      	lsrs	r3, r3, #8
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eca:	6a39      	ldr	r1, [r7, #32]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 f8e3 	bl	800409a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ed4:	1e03      	subs	r3, r0, #0
 8003ed6:	d001      	beq.n	8003edc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e014      	b.n	8003f06 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003edc:	2308      	movs	r3, #8
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003eea:	6a3a      	ldr	r2, [r7, #32]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	0013      	movs	r3, r2
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	f000 f890 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003efc:	1e03      	subs	r3, r0, #0
 8003efe:	d001      	beq.n	8003f04 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	80002000 	.word	0x80002000

08003f14 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b5b0      	push	{r4, r5, r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	000c      	movs	r4, r1
 8003f1e:	0010      	movs	r0, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	250a      	movs	r5, #10
 8003f24:	197b      	adds	r3, r7, r5
 8003f26:	1c22      	adds	r2, r4, #0
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	1c02      	adds	r2, r0, #0
 8003f30:	801a      	strh	r2, [r3, #0]
 8003f32:	1dbb      	adds	r3, r7, #6
 8003f34:	1c0a      	adds	r2, r1, #0
 8003f36:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f38:	1dbb      	adds	r3, r7, #6
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	197b      	adds	r3, r7, r5
 8003f40:	8819      	ldrh	r1, [r3, #0]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <I2C_RequestMemoryRead+0xc0>)
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f000 f987 	bl	800425c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f000 f8a0 	bl	800409a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d001      	beq.n	8003f62 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e033      	b.n	8003fca <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f62:	1dbb      	adds	r3, r7, #6
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d107      	bne.n	8003f7a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
 8003f78:	e019      	b.n	8003fae <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	0a1b      	lsrs	r3, r3, #8
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8e:	6a39      	ldr	r1, [r7, #32]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 f881 	bl	800409a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f98:	1e03      	subs	r3, r0, #0
 8003f9a:	d001      	beq.n	8003fa0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e014      	b.n	8003fca <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	0013      	movs	r3, r2
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	f000 f82e 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003fc0:	1e03      	subs	r3, r0, #0
 8003fc2:	d001      	beq.n	8003fc8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b004      	add	sp, #16
 8003fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	80002000 	.word	0x80002000

08003fd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d103      	bne.n	8003ff6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b01      	cmp	r3, #1
 8004002:	d007      	beq.n	8004014 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	430a      	orrs	r2, r1
 8004012:	619a      	str	r2, [r3, #24]
  }
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	b002      	add	sp, #8
 800401a:	bd80      	pop	{r7, pc}

0800401c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	1dfb      	adds	r3, r7, #7
 800402a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402c:	e021      	b.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	d01e      	beq.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004034:	f7ff f98e 	bl	8003354 <HAL_GetTick>
 8004038:	0002      	movs	r2, r0
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d302      	bcc.n	800404a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d113      	bne.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	2220      	movs	r2, #32
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2241      	movs	r2, #65	; 0x41
 800405a:	2120      	movs	r1, #32
 800405c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2242      	movs	r2, #66	; 0x42
 8004062:	2100      	movs	r1, #0
 8004064:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2240      	movs	r2, #64	; 0x40
 800406a:	2100      	movs	r1, #0
 800406c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e00f      	b.n	8004092 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	4013      	ands	r3, r2
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	425a      	negs	r2, r3
 8004082:	4153      	adcs	r3, r2
 8004084:	b2db      	uxtb	r3, r3
 8004086:	001a      	movs	r2, r3
 8004088:	1dfb      	adds	r3, r7, #7
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d0ce      	beq.n	800402e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b004      	add	sp, #16
 8004098:	bd80      	pop	{r7, pc}

0800409a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040a6:	e02b      	b.n	8004100 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	0018      	movs	r0, r3
 80040b0:	f000 f86e 	bl	8004190 <I2C_IsAcknowledgeFailed>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e029      	b.n	8004110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	3301      	adds	r3, #1
 80040c0:	d01e      	beq.n	8004100 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7ff f947 	bl	8003354 <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d113      	bne.n	8004100 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	2220      	movs	r2, #32
 80040de:	431a      	orrs	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2241      	movs	r2, #65	; 0x41
 80040e8:	2120      	movs	r1, #32
 80040ea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2242      	movs	r2, #66	; 0x42
 80040f0:	2100      	movs	r1, #0
 80040f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2240      	movs	r2, #64	; 0x40
 80040f8:	2100      	movs	r1, #0
 80040fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e007      	b.n	8004110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2202      	movs	r2, #2
 8004108:	4013      	ands	r3, r2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d1cc      	bne.n	80040a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b004      	add	sp, #16
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004124:	e028      	b.n	8004178 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	0018      	movs	r0, r3
 800412e:	f000 f82f 	bl	8004190 <I2C_IsAcknowledgeFailed>
 8004132:	1e03      	subs	r3, r0, #0
 8004134:	d001      	beq.n	800413a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e026      	b.n	8004188 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7ff f90b 	bl	8003354 <HAL_GetTick>
 800413e:	0002      	movs	r2, r0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d113      	bne.n	8004178 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	2220      	movs	r2, #32
 8004156:	431a      	orrs	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2241      	movs	r2, #65	; 0x41
 8004160:	2120      	movs	r1, #32
 8004162:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2242      	movs	r2, #66	; 0x42
 8004168:	2100      	movs	r1, #0
 800416a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2240      	movs	r2, #64	; 0x40
 8004170:	2100      	movs	r1, #0
 8004172:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e007      	b.n	8004188 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2220      	movs	r2, #32
 8004180:	4013      	ands	r3, r2
 8004182:	2b20      	cmp	r3, #32
 8004184:	d1cf      	bne.n	8004126 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	0018      	movs	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	b004      	add	sp, #16
 800418e:	bd80      	pop	{r7, pc}

08004190 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2210      	movs	r2, #16
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d151      	bne.n	800424e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041aa:	e021      	b.n	80041f0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	3301      	adds	r3, #1
 80041b0:	d01e      	beq.n	80041f0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7ff f8cf 	bl	8003354 <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <I2C_IsAcknowledgeFailed+0x38>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d113      	bne.n	80041f0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	2220      	movs	r2, #32
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2241      	movs	r2, #65	; 0x41
 80041d8:	2120      	movs	r1, #32
 80041da:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2242      	movs	r2, #66	; 0x42
 80041e0:	2100      	movs	r1, #0
 80041e2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2240      	movs	r2, #64	; 0x40
 80041e8:	2100      	movs	r1, #0
 80041ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e02f      	b.n	8004250 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2220      	movs	r2, #32
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d1d6      	bne.n	80041ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2210      	movs	r2, #16
 8004204:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2220      	movs	r2, #32
 800420c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	0018      	movs	r0, r3
 8004212:	f7ff fee1 	bl	8003fd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	490d      	ldr	r1, [pc, #52]	; (8004258 <I2C_IsAcknowledgeFailed+0xc8>)
 8004222:	400a      	ands	r2, r1
 8004224:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	2204      	movs	r2, #4
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2241      	movs	r2, #65	; 0x41
 8004236:	2120      	movs	r1, #32
 8004238:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2242      	movs	r2, #66	; 0x42
 800423e:	2100      	movs	r1, #0
 8004240:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2240      	movs	r2, #64	; 0x40
 8004246:	2100      	movs	r1, #0
 8004248:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b004      	add	sp, #16
 8004256:	bd80      	pop	{r7, pc}
 8004258:	fe00e800 	.word	0xfe00e800

0800425c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800425c:	b590      	push	{r4, r7, lr}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	0008      	movs	r0, r1
 8004266:	0011      	movs	r1, r2
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	240a      	movs	r4, #10
 800426c:	193b      	adds	r3, r7, r4
 800426e:	1c02      	adds	r2, r0, #0
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	2009      	movs	r0, #9
 8004274:	183b      	adds	r3, r7, r0
 8004276:	1c0a      	adds	r2, r1, #0
 8004278:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	6a3a      	ldr	r2, [r7, #32]
 8004282:	0d51      	lsrs	r1, r2, #21
 8004284:	2280      	movs	r2, #128	; 0x80
 8004286:	00d2      	lsls	r2, r2, #3
 8004288:	400a      	ands	r2, r1
 800428a:	490e      	ldr	r1, [pc, #56]	; (80042c4 <I2C_TransferConfig+0x68>)
 800428c:	430a      	orrs	r2, r1
 800428e:	43d2      	mvns	r2, r2
 8004290:	401a      	ands	r2, r3
 8004292:	0011      	movs	r1, r2
 8004294:	193b      	adds	r3, r7, r4
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	059b      	lsls	r3, r3, #22
 800429a:	0d9a      	lsrs	r2, r3, #22
 800429c:	183b      	adds	r3, r7, r0
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	0418      	lsls	r0, r3, #16
 80042a2:	23ff      	movs	r3, #255	; 0xff
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	4003      	ands	r3, r0
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	b005      	add	sp, #20
 80042c0:	bd90      	pop	{r4, r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	03ff63ff 	.word	0x03ff63ff

080042c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2241      	movs	r2, #65	; 0x41
 80042d6:	5c9b      	ldrb	r3, [r3, r2]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d138      	bne.n	8004350 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2240      	movs	r2, #64	; 0x40
 80042e2:	5c9b      	ldrb	r3, [r3, r2]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e032      	b.n	8004352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	2101      	movs	r1, #1
 80042f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2241      	movs	r2, #65	; 0x41
 80042f8:	2124      	movs	r1, #36	; 0x24
 80042fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	438a      	bics	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4911      	ldr	r1, [pc, #68]	; (800435c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004318:	400a      	ands	r2, r1
 800431a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2101      	movs	r1, #1
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2241      	movs	r2, #65	; 0x41
 8004340:	2120      	movs	r1, #32
 8004342:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	2100      	movs	r1, #0
 800434a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	e000      	b.n	8004352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004350:	2302      	movs	r3, #2
  }
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b002      	add	sp, #8
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	ffffefff 	.word	0xffffefff

08004360 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2241      	movs	r2, #65	; 0x41
 800436e:	5c9b      	ldrb	r3, [r3, r2]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b20      	cmp	r3, #32
 8004374:	d139      	bne.n	80043ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2240      	movs	r2, #64	; 0x40
 800437a:	5c9b      	ldrb	r3, [r3, r2]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004380:	2302      	movs	r3, #2
 8004382:	e033      	b.n	80043ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	2101      	movs	r1, #1
 800438a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2241      	movs	r2, #65	; 0x41
 8004390:	2124      	movs	r1, #36	; 0x24
 8004392:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2101      	movs	r1, #1
 80043a0:	438a      	bics	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2101      	movs	r1, #1
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2241      	movs	r2, #65	; 0x41
 80043da:	2120      	movs	r1, #32
 80043dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2240      	movs	r2, #64	; 0x40
 80043e2:	2100      	movs	r1, #0
 80043e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e000      	b.n	80043ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
  }
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b004      	add	sp, #16
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	fffff0ff 	.word	0xfffff0ff

080043f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e301      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2201      	movs	r2, #1
 8004410:	4013      	ands	r3, r2
 8004412:	d100      	bne.n	8004416 <HAL_RCC_OscConfig+0x1e>
 8004414:	e08d      	b.n	8004532 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004416:	4bc3      	ldr	r3, [pc, #780]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	220c      	movs	r2, #12
 800441c:	4013      	ands	r3, r2
 800441e:	2b04      	cmp	r3, #4
 8004420:	d00e      	beq.n	8004440 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004422:	4bc0      	ldr	r3, [pc, #768]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	220c      	movs	r2, #12
 8004428:	4013      	ands	r3, r2
 800442a:	2b08      	cmp	r3, #8
 800442c:	d116      	bne.n	800445c <HAL_RCC_OscConfig+0x64>
 800442e:	4bbd      	ldr	r3, [pc, #756]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	025b      	lsls	r3, r3, #9
 8004436:	401a      	ands	r2, r3
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	025b      	lsls	r3, r3, #9
 800443c:	429a      	cmp	r2, r3
 800443e:	d10d      	bne.n	800445c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	4bb8      	ldr	r3, [pc, #736]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	029b      	lsls	r3, r3, #10
 8004448:	4013      	ands	r3, r2
 800444a:	d100      	bne.n	800444e <HAL_RCC_OscConfig+0x56>
 800444c:	e070      	b.n	8004530 <HAL_RCC_OscConfig+0x138>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d000      	beq.n	8004458 <HAL_RCC_OscConfig+0x60>
 8004456:	e06b      	b.n	8004530 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e2d8      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_RCC_OscConfig+0x7c>
 8004464:	4baf      	ldr	r3, [pc, #700]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4bae      	ldr	r3, [pc, #696]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800446a:	2180      	movs	r1, #128	; 0x80
 800446c:	0249      	lsls	r1, r1, #9
 800446e:	430a      	orrs	r2, r1
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e02f      	b.n	80044d4 <HAL_RCC_OscConfig+0xdc>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10c      	bne.n	8004496 <HAL_RCC_OscConfig+0x9e>
 800447c:	4ba9      	ldr	r3, [pc, #676]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4ba8      	ldr	r3, [pc, #672]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004482:	49a9      	ldr	r1, [pc, #676]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004484:	400a      	ands	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	4ba6      	ldr	r3, [pc, #664]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4ba5      	ldr	r3, [pc, #660]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800448e:	49a7      	ldr	r1, [pc, #668]	; (800472c <HAL_RCC_OscConfig+0x334>)
 8004490:	400a      	ands	r2, r1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e01e      	b.n	80044d4 <HAL_RCC_OscConfig+0xdc>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b05      	cmp	r3, #5
 800449c:	d10e      	bne.n	80044bc <HAL_RCC_OscConfig+0xc4>
 800449e:	4ba1      	ldr	r3, [pc, #644]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4ba0      	ldr	r3, [pc, #640]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80044a4:	2180      	movs	r1, #128	; 0x80
 80044a6:	02c9      	lsls	r1, r1, #11
 80044a8:	430a      	orrs	r2, r1
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	4b9d      	ldr	r3, [pc, #628]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b9c      	ldr	r3, [pc, #624]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	0249      	lsls	r1, r1, #9
 80044b6:	430a      	orrs	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	e00b      	b.n	80044d4 <HAL_RCC_OscConfig+0xdc>
 80044bc:	4b99      	ldr	r3, [pc, #612]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b98      	ldr	r3, [pc, #608]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80044c2:	4999      	ldr	r1, [pc, #612]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80044c4:	400a      	ands	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	4b96      	ldr	r3, [pc, #600]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b95      	ldr	r3, [pc, #596]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80044ce:	4997      	ldr	r1, [pc, #604]	; (800472c <HAL_RCC_OscConfig+0x334>)
 80044d0:	400a      	ands	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d014      	beq.n	8004506 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe ff3a 	bl	8003354 <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e6:	f7fe ff35 	bl	8003354 <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b64      	cmp	r3, #100	; 0x64
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e28a      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f8:	4b8a      	ldr	r3, [pc, #552]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	4013      	ands	r3, r2
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0xee>
 8004504:	e015      	b.n	8004532 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fe ff25 	bl	8003354 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004510:	f7fe ff20 	bl	8003354 <HAL_GetTick>
 8004514:	0002      	movs	r2, r0
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e275      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004522:	4b80      	ldr	r3, [pc, #512]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	029b      	lsls	r3, r3, #10
 800452a:	4013      	ands	r3, r2
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x118>
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004530:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2202      	movs	r2, #2
 8004538:	4013      	ands	r3, r2
 800453a:	d100      	bne.n	800453e <HAL_RCC_OscConfig+0x146>
 800453c:	e069      	b.n	8004612 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800453e:	4b79      	ldr	r3, [pc, #484]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d00b      	beq.n	8004560 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004548:	4b76      	ldr	r3, [pc, #472]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	220c      	movs	r2, #12
 800454e:	4013      	ands	r3, r2
 8004550:	2b08      	cmp	r3, #8
 8004552:	d11c      	bne.n	800458e <HAL_RCC_OscConfig+0x196>
 8004554:	4b73      	ldr	r3, [pc, #460]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	025b      	lsls	r3, r3, #9
 800455c:	4013      	ands	r3, r2
 800455e:	d116      	bne.n	800458e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004560:	4b70      	ldr	r3, [pc, #448]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2202      	movs	r2, #2
 8004566:	4013      	ands	r3, r2
 8004568:	d005      	beq.n	8004576 <HAL_RCC_OscConfig+0x17e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d001      	beq.n	8004576 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e24b      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004576:	4b6b      	ldr	r3, [pc, #428]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	22f8      	movs	r2, #248	; 0xf8
 800457c:	4393      	bics	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	00da      	lsls	r2, r3, #3
 8004586:	4b67      	ldr	r3, [pc, #412]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458c:	e041      	b.n	8004612 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d024      	beq.n	80045e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004596:	4b63      	ldr	r3, [pc, #396]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b62      	ldr	r3, [pc, #392]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800459c:	2101      	movs	r1, #1
 800459e:	430a      	orrs	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fe fed7 	bl	8003354 <HAL_GetTick>
 80045a6:	0003      	movs	r3, r0
 80045a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ac:	f7fe fed2 	bl	8003354 <HAL_GetTick>
 80045b0:	0002      	movs	r2, r0
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e227      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045be:	4b59      	ldr	r3, [pc, #356]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2202      	movs	r2, #2
 80045c4:	4013      	ands	r3, r2
 80045c6:	d0f1      	beq.n	80045ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b56      	ldr	r3, [pc, #344]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	22f8      	movs	r2, #248	; 0xf8
 80045ce:	4393      	bics	r3, r2
 80045d0:	0019      	movs	r1, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	00da      	lsls	r2, r3, #3
 80045d8:	4b52      	ldr	r3, [pc, #328]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80045da:	430a      	orrs	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e018      	b.n	8004612 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e0:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80045e6:	2101      	movs	r1, #1
 80045e8:	438a      	bics	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fe feb2 	bl	8003354 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f6:	f7fe fead 	bl	8003354 <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e202      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004608:	4b46      	ldr	r3, [pc, #280]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2202      	movs	r2, #2
 800460e:	4013      	ands	r3, r2
 8004610:	d1f1      	bne.n	80045f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2208      	movs	r2, #8
 8004618:	4013      	ands	r3, r2
 800461a:	d036      	beq.n	800468a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d019      	beq.n	8004658 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004624:	4b3f      	ldr	r3, [pc, #252]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004628:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800462a:	2101      	movs	r1, #1
 800462c:	430a      	orrs	r2, r1
 800462e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004630:	f7fe fe90 	bl	8003354 <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800463a:	f7fe fe8b 	bl	8003354 <HAL_GetTick>
 800463e:	0002      	movs	r2, r0
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e1e0      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464c:	4b35      	ldr	r3, [pc, #212]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2202      	movs	r2, #2
 8004652:	4013      	ands	r3, r2
 8004654:	d0f1      	beq.n	800463a <HAL_RCC_OscConfig+0x242>
 8004656:	e018      	b.n	800468a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004658:	4b32      	ldr	r3, [pc, #200]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800465a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800465c:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800465e:	2101      	movs	r1, #1
 8004660:	438a      	bics	r2, r1
 8004662:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004664:	f7fe fe76 	bl	8003354 <HAL_GetTick>
 8004668:	0003      	movs	r3, r0
 800466a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466e:	f7fe fe71 	bl	8003354 <HAL_GetTick>
 8004672:	0002      	movs	r2, r0
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1c6      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004680:	4b28      	ldr	r3, [pc, #160]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	2202      	movs	r2, #2
 8004686:	4013      	ands	r3, r2
 8004688:	d1f1      	bne.n	800466e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2204      	movs	r2, #4
 8004690:	4013      	ands	r3, r2
 8004692:	d100      	bne.n	8004696 <HAL_RCC_OscConfig+0x29e>
 8004694:	e0b4      	b.n	8004800 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004696:	201f      	movs	r0, #31
 8004698:	183b      	adds	r3, r7, r0
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469e:	4b21      	ldr	r3, [pc, #132]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	055b      	lsls	r3, r3, #21
 80046a6:	4013      	ands	r3, r2
 80046a8:	d110      	bne.n	80046cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80046b0:	2180      	movs	r1, #128	; 0x80
 80046b2:	0549      	lsls	r1, r1, #21
 80046b4:	430a      	orrs	r2, r1
 80046b6:	61da      	str	r2, [r3, #28]
 80046b8:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	055b      	lsls	r3, r3, #21
 80046c0:	4013      	ands	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046c6:	183b      	adds	r3, r7, r0
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <HAL_RCC_OscConfig+0x338>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4013      	ands	r3, r2
 80046d6:	d11a      	bne.n	800470e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <HAL_RCC_OscConfig+0x338>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b14      	ldr	r3, [pc, #80]	; (8004730 <HAL_RCC_OscConfig+0x338>)
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	0049      	lsls	r1, r1, #1
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e6:	f7fe fe35 	bl	8003354 <HAL_GetTick>
 80046ea:	0003      	movs	r3, r0
 80046ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f0:	f7fe fe30 	bl	8003354 <HAL_GetTick>
 80046f4:	0002      	movs	r2, r0
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b64      	cmp	r3, #100	; 0x64
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e185      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_RCC_OscConfig+0x338>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4013      	ands	r3, r2
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10e      	bne.n	8004734 <HAL_RCC_OscConfig+0x33c>
 8004716:	4b03      	ldr	r3, [pc, #12]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 8004718:	6a1a      	ldr	r2, [r3, #32]
 800471a:	4b02      	ldr	r3, [pc, #8]	; (8004724 <HAL_RCC_OscConfig+0x32c>)
 800471c:	2101      	movs	r1, #1
 800471e:	430a      	orrs	r2, r1
 8004720:	621a      	str	r2, [r3, #32]
 8004722:	e035      	b.n	8004790 <HAL_RCC_OscConfig+0x398>
 8004724:	40021000 	.word	0x40021000
 8004728:	fffeffff 	.word	0xfffeffff
 800472c:	fffbffff 	.word	0xfffbffff
 8004730:	40007000 	.word	0x40007000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10c      	bne.n	8004756 <HAL_RCC_OscConfig+0x35e>
 800473c:	4bb6      	ldr	r3, [pc, #728]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	4bb5      	ldr	r3, [pc, #724]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004742:	2101      	movs	r1, #1
 8004744:	438a      	bics	r2, r1
 8004746:	621a      	str	r2, [r3, #32]
 8004748:	4bb3      	ldr	r3, [pc, #716]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	4bb2      	ldr	r3, [pc, #712]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800474e:	2104      	movs	r1, #4
 8004750:	438a      	bics	r2, r1
 8004752:	621a      	str	r2, [r3, #32]
 8004754:	e01c      	b.n	8004790 <HAL_RCC_OscConfig+0x398>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x380>
 800475e:	4bae      	ldr	r3, [pc, #696]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004760:	6a1a      	ldr	r2, [r3, #32]
 8004762:	4bad      	ldr	r3, [pc, #692]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004764:	2104      	movs	r1, #4
 8004766:	430a      	orrs	r2, r1
 8004768:	621a      	str	r2, [r3, #32]
 800476a:	4bab      	ldr	r3, [pc, #684]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	4baa      	ldr	r3, [pc, #680]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004770:	2101      	movs	r1, #1
 8004772:	430a      	orrs	r2, r1
 8004774:	621a      	str	r2, [r3, #32]
 8004776:	e00b      	b.n	8004790 <HAL_RCC_OscConfig+0x398>
 8004778:	4ba7      	ldr	r3, [pc, #668]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	4ba6      	ldr	r3, [pc, #664]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800477e:	2101      	movs	r1, #1
 8004780:	438a      	bics	r2, r1
 8004782:	621a      	str	r2, [r3, #32]
 8004784:	4ba4      	ldr	r3, [pc, #656]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004786:	6a1a      	ldr	r2, [r3, #32]
 8004788:	4ba3      	ldr	r3, [pc, #652]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800478a:	2104      	movs	r1, #4
 800478c:	438a      	bics	r2, r1
 800478e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d014      	beq.n	80047c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004798:	f7fe fddc 	bl	8003354 <HAL_GetTick>
 800479c:	0003      	movs	r3, r0
 800479e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	e009      	b.n	80047b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a2:	f7fe fdd7 	bl	8003354 <HAL_GetTick>
 80047a6:	0002      	movs	r2, r0
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	4a9b      	ldr	r2, [pc, #620]	; (8004a1c <HAL_RCC_OscConfig+0x624>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e12b      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b6:	4b98      	ldr	r3, [pc, #608]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	2202      	movs	r2, #2
 80047bc:	4013      	ands	r3, r2
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x3aa>
 80047c0:	e013      	b.n	80047ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c2:	f7fe fdc7 	bl	8003354 <HAL_GetTick>
 80047c6:	0003      	movs	r3, r0
 80047c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ca:	e009      	b.n	80047e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fe fdc2 	bl	8003354 <HAL_GetTick>
 80047d0:	0002      	movs	r2, r0
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	4a91      	ldr	r2, [pc, #580]	; (8004a1c <HAL_RCC_OscConfig+0x624>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e116      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e0:	4b8d      	ldr	r3, [pc, #564]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	2202      	movs	r2, #2
 80047e6:	4013      	ands	r3, r2
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047ea:	231f      	movs	r3, #31
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f4:	4b88      	ldr	r3, [pc, #544]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	4b87      	ldr	r3, [pc, #540]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80047fa:	4989      	ldr	r1, [pc, #548]	; (8004a20 <HAL_RCC_OscConfig+0x628>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2210      	movs	r2, #16
 8004806:	4013      	ands	r3, r2
 8004808:	d063      	beq.n	80048d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d12a      	bne.n	8004868 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004812:	4b81      	ldr	r3, [pc, #516]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004816:	4b80      	ldr	r3, [pc, #512]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004818:	2104      	movs	r1, #4
 800481a:	430a      	orrs	r2, r1
 800481c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800481e:	4b7e      	ldr	r3, [pc, #504]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004822:	4b7d      	ldr	r3, [pc, #500]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004824:	2101      	movs	r1, #1
 8004826:	430a      	orrs	r2, r1
 8004828:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482a:	f7fe fd93 	bl	8003354 <HAL_GetTick>
 800482e:	0003      	movs	r3, r0
 8004830:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004834:	f7fe fd8e 	bl	8003354 <HAL_GetTick>
 8004838:	0002      	movs	r2, r0
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e0e3      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004846:	4b74      	ldr	r3, [pc, #464]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	2202      	movs	r2, #2
 800484c:	4013      	ands	r3, r2
 800484e:	d0f1      	beq.n	8004834 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004850:	4b71      	ldr	r3, [pc, #452]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004854:	22f8      	movs	r2, #248	; 0xf8
 8004856:	4393      	bics	r3, r2
 8004858:	0019      	movs	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	00da      	lsls	r2, r3, #3
 8004860:	4b6d      	ldr	r3, [pc, #436]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004862:	430a      	orrs	r2, r1
 8004864:	635a      	str	r2, [r3, #52]	; 0x34
 8004866:	e034      	b.n	80048d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	3305      	adds	r3, #5
 800486e:	d111      	bne.n	8004894 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004870:	4b69      	ldr	r3, [pc, #420]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004874:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004876:	2104      	movs	r1, #4
 8004878:	438a      	bics	r2, r1
 800487a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800487c:	4b66      	ldr	r3, [pc, #408]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	22f8      	movs	r2, #248	; 0xf8
 8004882:	4393      	bics	r3, r2
 8004884:	0019      	movs	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	00da      	lsls	r2, r3, #3
 800488c:	4b62      	ldr	r3, [pc, #392]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800488e:	430a      	orrs	r2, r1
 8004890:	635a      	str	r2, [r3, #52]	; 0x34
 8004892:	e01e      	b.n	80048d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004894:	4b60      	ldr	r3, [pc, #384]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004898:	4b5f      	ldr	r3, [pc, #380]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800489a:	2104      	movs	r1, #4
 800489c:	430a      	orrs	r2, r1
 800489e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80048a0:	4b5d      	ldr	r3, [pc, #372]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80048a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a4:	4b5c      	ldr	r3, [pc, #368]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80048a6:	2101      	movs	r1, #1
 80048a8:	438a      	bics	r2, r1
 80048aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ac:	f7fe fd52 	bl	8003354 <HAL_GetTick>
 80048b0:	0003      	movs	r3, r0
 80048b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048b6:	f7fe fd4d 	bl	8003354 <HAL_GetTick>
 80048ba:	0002      	movs	r2, r0
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e0a2      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048c8:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	2202      	movs	r2, #2
 80048ce:	4013      	ands	r3, r2
 80048d0:	d1f1      	bne.n	80048b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d100      	bne.n	80048dc <HAL_RCC_OscConfig+0x4e4>
 80048da:	e097      	b.n	8004a0c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048dc:	4b4e      	ldr	r3, [pc, #312]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	220c      	movs	r2, #12
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d100      	bne.n	80048ea <HAL_RCC_OscConfig+0x4f2>
 80048e8:	e06b      	b.n	80049c2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d14c      	bne.n	800498c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f2:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b48      	ldr	r3, [pc, #288]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80048f8:	494a      	ldr	r1, [pc, #296]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80048fa:	400a      	ands	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fe:	f7fe fd29 	bl	8003354 <HAL_GetTick>
 8004902:	0003      	movs	r3, r0
 8004904:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004908:	f7fe fd24 	bl	8003354 <HAL_GetTick>
 800490c:	0002      	movs	r2, r0
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e079      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800491a:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	049b      	lsls	r3, r3, #18
 8004922:	4013      	ands	r3, r2
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004926:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	220f      	movs	r2, #15
 800492c:	4393      	bics	r3, r2
 800492e:	0019      	movs	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004934:	4b38      	ldr	r3, [pc, #224]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004936:	430a      	orrs	r2, r1
 8004938:	62da      	str	r2, [r3, #44]	; 0x2c
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4a3a      	ldr	r2, [pc, #232]	; (8004a28 <HAL_RCC_OscConfig+0x630>)
 8004940:	4013      	ands	r3, r2
 8004942:	0019      	movs	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	431a      	orrs	r2, r3
 800494e:	4b32      	ldr	r3, [pc, #200]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004954:	4b30      	ldr	r3, [pc, #192]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b2f      	ldr	r3, [pc, #188]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	0449      	lsls	r1, r1, #17
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7fe fcf7 	bl	8003354 <HAL_GetTick>
 8004966:	0003      	movs	r3, r0
 8004968:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496c:	f7fe fcf2 	bl	8003354 <HAL_GetTick>
 8004970:	0002      	movs	r2, r0
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e047      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800497e:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	049b      	lsls	r3, r3, #18
 8004986:	4013      	ands	r3, r2
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0x574>
 800498a:	e03f      	b.n	8004a0c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498c:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b21      	ldr	r3, [pc, #132]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 8004992:	4924      	ldr	r1, [pc, #144]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004994:	400a      	ands	r2, r1
 8004996:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f7fe fcdc 	bl	8003354 <HAL_GetTick>
 800499c:	0003      	movs	r3, r0
 800499e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a2:	f7fe fcd7 	bl	8003354 <HAL_GetTick>
 80049a6:	0002      	movs	r2, r0
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e02c      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b4:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	049b      	lsls	r3, r3, #18
 80049bc:	4013      	ands	r3, r2
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x5aa>
 80049c0:	e024      	b.n	8004a0c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e01f      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80049d4:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <HAL_RCC_OscConfig+0x620>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	025b      	lsls	r3, r3, #9
 80049e0:	401a      	ands	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d10e      	bne.n	8004a08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	220f      	movs	r2, #15
 80049ee:	401a      	ands	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	23f0      	movs	r3, #240	; 0xf0
 80049fc:	039b      	lsls	r3, r3, #14
 80049fe:	401a      	ands	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b008      	add	sp, #32
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	00001388 	.word	0x00001388
 8004a20:	efffffff 	.word	0xefffffff
 8004a24:	feffffff 	.word	0xfeffffff
 8004a28:	ffc2ffff 	.word	0xffc2ffff

08004a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b3      	b.n	8004ba8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a40:	4b5b      	ldr	r3, [pc, #364]	; (8004bb0 <HAL_RCC_ClockConfig+0x184>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2201      	movs	r2, #1
 8004a46:	4013      	ands	r3, r2
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d911      	bls.n	8004a72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b58      	ldr	r3, [pc, #352]	; (8004bb0 <HAL_RCC_ClockConfig+0x184>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	4393      	bics	r3, r2
 8004a56:	0019      	movs	r1, r3
 8004a58:	4b55      	ldr	r3, [pc, #340]	; (8004bb0 <HAL_RCC_ClockConfig+0x184>)
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_ClockConfig+0x184>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2201      	movs	r2, #1
 8004a66:	4013      	ands	r3, r2
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d001      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e09a      	b.n	8004ba8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2202      	movs	r2, #2
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d015      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2204      	movs	r2, #4
 8004a82:	4013      	ands	r3, r2
 8004a84:	d006      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a86:	4b4b      	ldr	r3, [pc, #300]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004a8c:	21e0      	movs	r1, #224	; 0xe0
 8004a8e:	00c9      	lsls	r1, r1, #3
 8004a90:	430a      	orrs	r2, r1
 8004a92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a94:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	22f0      	movs	r2, #240	; 0xf0
 8004a9a:	4393      	bics	r3, r2
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	4b44      	ldr	r3, [pc, #272]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d040      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b3e      	ldr	r3, [pc, #248]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	029b      	lsls	r3, r3, #10
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d114      	bne.n	8004af0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e06e      	b.n	8004ba8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad2:	4b38      	ldr	r3, [pc, #224]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	049b      	lsls	r3, r3, #18
 8004ada:	4013      	ands	r3, r2
 8004adc:	d108      	bne.n	8004af0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e062      	b.n	8004ba8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae2:	4b34      	ldr	r3, [pc, #208]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d101      	bne.n	8004af0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e05b      	b.n	8004ba8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af0:	4b30      	ldr	r3, [pc, #192]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2203      	movs	r2, #3
 8004af6:	4393      	bics	r3, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b04:	f7fe fc26 	bl	8003354 <HAL_GetTick>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0c:	e009      	b.n	8004b22 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0e:	f7fe fc21 	bl	8003354 <HAL_GetTick>
 8004b12:	0002      	movs	r2, r0
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <HAL_RCC_ClockConfig+0x18c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e042      	b.n	8004ba8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	220c      	movs	r2, #12
 8004b28:	401a      	ands	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d1ec      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b34:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <HAL_RCC_ClockConfig+0x184>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d211      	bcs.n	8004b66 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <HAL_RCC_ClockConfig+0x184>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2201      	movs	r2, #1
 8004b48:	4393      	bics	r3, r2
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <HAL_RCC_ClockConfig+0x184>)
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b54:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <HAL_RCC_ClockConfig+0x184>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e020      	b.n	8004ba8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b70:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <HAL_RCC_ClockConfig+0x190>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b84:	f000 f820 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8004b88:	0001      	movs	r1, r0
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <HAL_RCC_ClockConfig+0x188>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	220f      	movs	r2, #15
 8004b92:	4013      	ands	r3, r2
 8004b94:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <HAL_RCC_ClockConfig+0x194>)
 8004b96:	5cd3      	ldrb	r3, [r2, r3]
 8004b98:	000a      	movs	r2, r1
 8004b9a:	40da      	lsrs	r2, r3
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_ClockConfig+0x198>)
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f7fe f9c7 	bl	8002f34 <HAL_InitTick>
  
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b004      	add	sp, #16
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40022000 	.word	0x40022000
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	00001388 	.word	0x00001388
 8004bbc:	fffff8ff 	.word	0xfffff8ff
 8004bc0:	0800ab54 	.word	0x0800ab54
 8004bc4:	20000018 	.word	0x20000018

08004bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b08f      	sub	sp, #60	; 0x3c
 8004bcc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004bce:	2314      	movs	r3, #20
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	4a2b      	ldr	r2, [pc, #172]	; (8004c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bd6:	c313      	stmia	r3!, {r0, r1, r4}
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004bdc:	1d3b      	adds	r3, r7, #4
 8004bde:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004be0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004be2:	c313      	stmia	r3!, {r0, r1, r4}
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bec:	2300      	movs	r3, #0
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004bfc:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	220c      	movs	r2, #12
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d002      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0x4a>
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d003      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x50>
 8004c10:	e02d      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c12:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c16:	e02d      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	0c9b      	lsrs	r3, r3, #18
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2214      	movs	r2, #20
 8004c22:	18ba      	adds	r2, r7, r2
 8004c24:	5cd3      	ldrb	r3, [r2, r3]
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c28:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	4013      	ands	r3, r2
 8004c30:	1d3a      	adds	r2, r7, #4
 8004c32:	5cd3      	ldrb	r3, [r2, r3]
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	025b      	lsls	r3, r3, #9
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c42:	4812      	ldr	r0, [pc, #72]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c44:	f7fb fa7c 	bl	8000140 <__udivsi3>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	001a      	movs	r2, r3
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	4353      	muls	r3, r2
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
 8004c52:	e009      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c56:	000a      	movs	r2, r1
 8004c58:	0152      	lsls	r2, r2, #5
 8004c5a:	1a52      	subs	r2, r2, r1
 8004c5c:	0193      	lsls	r3, r2, #6
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	185b      	adds	r3, r3, r1
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c6c:	e002      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c6e:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004c76:	0018      	movs	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b00f      	add	sp, #60	; 0x3c
 8004c7c:	bd90      	pop	{r4, r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	0800aa34 	.word	0x0800aa34
 8004c84:	0800aa44 	.word	0x0800aa44
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	007a1200 	.word	0x007a1200

08004c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c94:	4b02      	ldr	r3, [pc, #8]	; (8004ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	0018      	movs	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	20000018 	.word	0x20000018

08004ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004ca8:	f7ff fff2 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cac:	0001      	movs	r1, r0
 8004cae:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	0a1b      	lsrs	r3, r3, #8
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	40d9      	lsrs	r1, r3
 8004cbe:	000b      	movs	r3, r1
}    
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	0800ab64 	.word	0x0800ab64

08004cd0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2207      	movs	r2, #7
 8004cde:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <HAL_RCC_GetClockConfig+0x4c>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_GetClockConfig+0x4c>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	22f0      	movs	r2, #240	; 0xf0
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004cf8:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <HAL_RCC_GetClockConfig+0x4c>)
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	23e0      	movs	r3, #224	; 0xe0
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	401a      	ands	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCC_GetClockConfig+0x50>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	401a      	ands	r2, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	601a      	str	r2, [r3, #0]
}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40022000 	.word	0x40022000

08004d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	025b      	lsls	r3, r3, #9
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004d40:	e08e      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004d42:	2017      	movs	r0, #23
 8004d44:	183b      	adds	r3, r7, r0
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4a:	4b57      	ldr	r3, [pc, #348]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	055b      	lsls	r3, r3, #21
 8004d52:	4013      	ands	r3, r2
 8004d54:	d110      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	4b54      	ldr	r3, [pc, #336]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d58:	69da      	ldr	r2, [r3, #28]
 8004d5a:	4b53      	ldr	r3, [pc, #332]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d5c:	2180      	movs	r1, #128	; 0x80
 8004d5e:	0549      	lsls	r1, r1, #21
 8004d60:	430a      	orrs	r2, r1
 8004d62:	61da      	str	r2, [r3, #28]
 8004d64:	4b50      	ldr	r3, [pc, #320]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	055b      	lsls	r3, r3, #21
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	183b      	adds	r3, r7, r0
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b4c      	ldr	r3, [pc, #304]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	d11a      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d84:	4b49      	ldr	r3, [pc, #292]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b48      	ldr	r3, [pc, #288]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004d8a:	2180      	movs	r1, #128	; 0x80
 8004d8c:	0049      	lsls	r1, r1, #1
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fe fadf 	bl	8003354 <HAL_GetTick>
 8004d96:	0003      	movs	r3, r0
 8004d98:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9a:	e008      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9c:	f7fe fada 	bl	8003354 <HAL_GetTick>
 8004da0:	0002      	movs	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e077      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dae:	4b3f      	ldr	r3, [pc, #252]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	4013      	ands	r3, r2
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dba:	4b3b      	ldr	r3, [pc, #236]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004dbc:	6a1a      	ldr	r2, [r3, #32]
 8004dbe:	23c0      	movs	r3, #192	; 0xc0
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d034      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	23c0      	movs	r3, #192	; 0xc0
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d02c      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ddc:	4b32      	ldr	r3, [pc, #200]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	4a33      	ldr	r2, [pc, #204]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004de6:	4b30      	ldr	r3, [pc, #192]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004dec:	2180      	movs	r1, #128	; 0x80
 8004dee:	0249      	lsls	r1, r1, #9
 8004df0:	430a      	orrs	r2, r1
 8004df2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004df4:	4b2c      	ldr	r3, [pc, #176]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004df6:	6a1a      	ldr	r2, [r3, #32]
 8004df8:	4b2b      	ldr	r3, [pc, #172]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004dfa:	492e      	ldr	r1, [pc, #184]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e00:	4b29      	ldr	r3, [pc, #164]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7fe faa1 	bl	8003354 <HAL_GetTick>
 8004e12:	0003      	movs	r3, r0
 8004e14:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	e009      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fe fa9c 	bl	8003354 <HAL_GetTick>
 8004e1c:	0002      	movs	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e038      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	2202      	movs	r2, #2
 8004e32:	4013      	ands	r3, r2
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e36:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	4b18      	ldr	r3, [pc, #96]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e46:	430a      	orrs	r2, r1
 8004e48:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e4a:	2317      	movs	r3, #23
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e54:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e5a:	4918      	ldr	r1, [pc, #96]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2201      	movs	r2, #1
 8004e66:	4013      	ands	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4393      	bics	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2220      	movs	r2, #32
 8004e84:	4013      	ands	r3, r2
 8004e86:	d009      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	4393      	bics	r3, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b006      	add	sp, #24
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	fffffcff 	.word	0xfffffcff
 8004eb4:	fffeffff 	.word	0xfffeffff
 8004eb8:	00001388 	.word	0x00001388
 8004ebc:	efffffff 	.word	0xefffffff

08004ec0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e081      	b.n	8004fd6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7f5b      	ldrb	r3, [r3, #29]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7fd ffe9 	bl	8002ebc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	22ca      	movs	r2, #202	; 0xca
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2253      	movs	r2, #83	; 0x53
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 f9fb 	bl	80052fe <RTC_EnterInitMode>
 8004f08:	1e03      	subs	r3, r0, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	22ff      	movs	r2, #255	; 0xff
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2204      	movs	r2, #4
 8004f18:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e05b      	b.n	8004fd6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	492d      	ldr	r1, [pc, #180]	; (8004fe0 <HAL_RTC_Init+0x120>)
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6899      	ldr	r1, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68d2      	ldr	r2, [r2, #12]
 8004f54:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6919      	ldr	r1, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	041a      	lsls	r2, r3, #16
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2180      	movs	r1, #128	; 0x80
 8004f76:	438a      	bics	r2, r1
 8004f78:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2220      	movs	r2, #32
 8004f82:	4013      	ands	r3, r2
 8004f84:	d10e      	bne.n	8004fa4 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f000 f98f 	bl	80052ac <HAL_RTC_WaitForSynchro>
 8004f8e:	1e03      	subs	r3, r0, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	22ff      	movs	r2, #255	; 0xff
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e018      	b.n	8004fd6 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	490d      	ldr	r1, [pc, #52]	; (8004fe4 <HAL_RTC_Init+0x124>)
 8004fb0:	400a      	ands	r2, r1
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	22ff      	movs	r2, #255	; 0xff
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
  }
}
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b002      	add	sp, #8
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	ff8fffbf 	.word	0xff8fffbf
 8004fe4:	fffbffff 	.word	0xfffbffff

08004fe8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	7f1b      	ldrb	r3, [r3, #28]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_RTC_SetTime+0x1c>
 8005000:	2302      	movs	r3, #2
 8005002:	e0a5      	b.n	8005150 <HAL_RTC_SetTime+0x168>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2202      	movs	r2, #2
 800500e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d125      	bne.n	8005062 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2240      	movs	r2, #64	; 0x40
 800501e:	4013      	ands	r3, r2
 8005020:	d102      	bne.n	8005028 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2200      	movs	r2, #0
 8005026:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	0018      	movs	r0, r3
 800502e:	f000 f992 	bl	8005356 <RTC_ByteToBcd2>
 8005032:	0003      	movs	r3, r0
 8005034:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	0018      	movs	r0, r3
 800503c:	f000 f98b 	bl	8005356 <RTC_ByteToBcd2>
 8005040:	0003      	movs	r3, r0
 8005042:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005044:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	789b      	ldrb	r3, [r3, #2]
 800504a:	0018      	movs	r0, r3
 800504c:	f000 f983 	bl	8005356 <RTC_ByteToBcd2>
 8005050:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005052:	0022      	movs	r2, r4
 8005054:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	78db      	ldrb	r3, [r3, #3]
 800505a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	e017      	b.n	8005092 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2240      	movs	r2, #64	; 0x40
 800506a:	4013      	ands	r3, r2
 800506c:	d102      	bne.n	8005074 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2200      	movs	r2, #0
 8005072:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005080:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005086:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	78db      	ldrb	r3, [r3, #3]
 800508c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	22ca      	movs	r2, #202	; 0xca
 8005098:	625a      	str	r2, [r3, #36]	; 0x24
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2253      	movs	r2, #83	; 0x53
 80050a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 f92a 	bl	80052fe <RTC_EnterInitMode>
 80050aa:	1e03      	subs	r3, r0, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	22ff      	movs	r2, #255	; 0xff
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2204      	movs	r2, #4
 80050ba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e044      	b.n	8005150 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4922      	ldr	r1, [pc, #136]	; (8005158 <HAL_RTC_SetTime+0x170>)
 80050ce:	400a      	ands	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	491f      	ldr	r1, [pc, #124]	; (800515c <HAL_RTC_SetTime+0x174>)
 80050de:	400a      	ands	r2, r1
 80050e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6899      	ldr	r1, [r3, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2180      	movs	r1, #128	; 0x80
 8005106:	438a      	bics	r2, r1
 8005108:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2220      	movs	r2, #32
 8005112:	4013      	ands	r3, r2
 8005114:	d111      	bne.n	800513a <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	0018      	movs	r0, r3
 800511a:	f000 f8c7 	bl	80052ac <HAL_RTC_WaitForSynchro>
 800511e:	1e03      	subs	r3, r0, #0
 8005120:	d00b      	beq.n	800513a <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	22ff      	movs	r2, #255	; 0xff
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2204      	movs	r2, #4
 800512e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e00a      	b.n	8005150 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	22ff      	movs	r2, #255	; 0xff
 8005140:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800514e:	2300      	movs	r3, #0
  }
}
 8005150:	0018      	movs	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	b007      	add	sp, #28
 8005156:	bd90      	pop	{r4, r7, pc}
 8005158:	007f7f7f 	.word	0x007f7f7f
 800515c:	fffbffff 	.word	0xfffbffff

08005160 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	7f1b      	ldrb	r3, [r3, #28]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_RTC_SetDate+0x1c>
 8005178:	2302      	movs	r3, #2
 800517a:	e091      	b.n	80052a0 <HAL_RTC_SetDate+0x140>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2202      	movs	r2, #2
 8005186:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10e      	bne.n	80051ac <HAL_RTC_SetDate+0x4c>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	001a      	movs	r2, r3
 8005194:	2310      	movs	r3, #16
 8005196:	4013      	ands	r3, r2
 8005198:	d008      	beq.n	80051ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	785b      	ldrb	r3, [r3, #1]
 800519e:	2210      	movs	r2, #16
 80051a0:	4393      	bics	r3, r2
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	330a      	adds	r3, #10
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11c      	bne.n	80051ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	78db      	ldrb	r3, [r3, #3]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 f8cd 	bl	8005356 <RTC_ByteToBcd2>
 80051bc:	0003      	movs	r3, r0
 80051be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	0018      	movs	r0, r3
 80051c6:	f000 f8c6 	bl	8005356 <RTC_ByteToBcd2>
 80051ca:	0003      	movs	r3, r0
 80051cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80051ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	789b      	ldrb	r3, [r3, #2]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 f8be 	bl	8005356 <RTC_ByteToBcd2>
 80051da:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80051dc:	0022      	movs	r2, r4
 80051de:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e00e      	b.n	800520a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	78db      	ldrb	r3, [r3, #3]
 80051f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80051f8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80051fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	22ca      	movs	r2, #202	; 0xca
 8005210:	625a      	str	r2, [r3, #36]	; 0x24
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2253      	movs	r2, #83	; 0x53
 8005218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	0018      	movs	r0, r3
 800521e:	f000 f86e 	bl	80052fe <RTC_EnterInitMode>
 8005222:	1e03      	subs	r3, r0, #0
 8005224:	d00b      	beq.n	800523e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	22ff      	movs	r2, #255	; 0xff
 800522c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2204      	movs	r2, #4
 8005232:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e030      	b.n	80052a0 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4918      	ldr	r1, [pc, #96]	; (80052a8 <HAL_RTC_SetDate+0x148>)
 8005246:	400a      	ands	r2, r1
 8005248:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2180      	movs	r1, #128	; 0x80
 8005256:	438a      	bics	r2, r1
 8005258:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2220      	movs	r2, #32
 8005262:	4013      	ands	r3, r2
 8005264:	d111      	bne.n	800528a <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	0018      	movs	r0, r3
 800526a:	f000 f81f 	bl	80052ac <HAL_RTC_WaitForSynchro>
 800526e:	1e03      	subs	r3, r0, #0
 8005270:	d00b      	beq.n	800528a <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2204      	movs	r2, #4
 800527e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e00a      	b.n	80052a0 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	22ff      	movs	r2, #255	; 0xff
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800529e:	2300      	movs	r3, #0
  }
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b007      	add	sp, #28
 80052a6:	bd90      	pop	{r4, r7, pc}
 80052a8:	00ffff3f 	.word	0x00ffff3f

080052ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	21a0      	movs	r1, #160	; 0xa0
 80052c4:	438a      	bics	r2, r1
 80052c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80052c8:	f7fe f844 	bl	8003354 <HAL_GetTick>
 80052cc:	0003      	movs	r3, r0
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80052d0:	e00a      	b.n	80052e8 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052d2:	f7fe f83f 	bl	8003354 <HAL_GetTick>
 80052d6:	0002      	movs	r2, r0
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1ad2      	subs	r2, r2, r3
 80052dc:	23fa      	movs	r3, #250	; 0xfa
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d901      	bls.n	80052e8 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e006      	b.n	80052f6 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	4013      	ands	r3, r2
 80052f2:	d0ee      	beq.n	80052d2 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	0018      	movs	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b004      	add	sp, #16
 80052fc:	bd80      	pop	{r7, pc}

080052fe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2240      	movs	r2, #64	; 0x40
 8005312:	4013      	ands	r3, r2
 8005314:	d11a      	bne.n	800534c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2201      	movs	r2, #1
 800531c:	4252      	negs	r2, r2
 800531e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005320:	f7fe f818 	bl	8003354 <HAL_GetTick>
 8005324:	0003      	movs	r3, r0
 8005326:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005328:	e00a      	b.n	8005340 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800532a:	f7fe f813 	bl	8003354 <HAL_GetTick>
 800532e:	0002      	movs	r2, r0
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	23fa      	movs	r3, #250	; 0xfa
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	429a      	cmp	r2, r3
 800533a:	d901      	bls.n	8005340 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e006      	b.n	800534e <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2240      	movs	r2, #64	; 0x40
 8005348:	4013      	ands	r3, r2
 800534a:	d0ee      	beq.n	800532a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	0018      	movs	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	b004      	add	sp, #16
 8005354:	bd80      	pop	{r7, pc}

08005356 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	0002      	movs	r2, r0
 800535e:	1dfb      	adds	r3, r7, #7
 8005360:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005366:	e007      	b.n	8005378 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800536e:	1dfb      	adds	r3, r7, #7
 8005370:	1dfa      	adds	r2, r7, #7
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	3a0a      	subs	r2, #10
 8005376:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8005378:	1dfb      	adds	r3, r7, #7
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b09      	cmp	r3, #9
 800537e:	d8f3      	bhi.n	8005368 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	b2da      	uxtb	r2, r3
 8005388:	1dfb      	adds	r3, r7, #7
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	4313      	orrs	r3, r2
 800538e:	b2db      	uxtb	r3, r3
}
 8005390:	0018      	movs	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	b004      	add	sp, #16
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e042      	b.n	8005430 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	223d      	movs	r2, #61	; 0x3d
 80053ae:	5c9b      	ldrb	r3, [r3, r2]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	223c      	movs	r2, #60	; 0x3c
 80053ba:	2100      	movs	r1, #0
 80053bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	0018      	movs	r0, r3
 80053c2:	f000 f839 	bl	8005438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	223d      	movs	r2, #61	; 0x3d
 80053ca:	2102      	movs	r1, #2
 80053cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	0019      	movs	r1, r3
 80053d8:	0010      	movs	r0, r2
 80053da:	f000 f9b7 	bl	800574c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2246      	movs	r2, #70	; 0x46
 80053e2:	2101      	movs	r1, #1
 80053e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	223e      	movs	r2, #62	; 0x3e
 80053ea:	2101      	movs	r1, #1
 80053ec:	5499      	strb	r1, [r3, r2]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	223f      	movs	r2, #63	; 0x3f
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2240      	movs	r2, #64	; 0x40
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2241      	movs	r2, #65	; 0x41
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2242      	movs	r2, #66	; 0x42
 800540a:	2101      	movs	r1, #1
 800540c:	5499      	strb	r1, [r3, r2]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2243      	movs	r2, #67	; 0x43
 8005412:	2101      	movs	r1, #1
 8005414:	5499      	strb	r1, [r3, r2]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2244      	movs	r2, #68	; 0x44
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2245      	movs	r2, #69	; 0x45
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	223d      	movs	r2, #61	; 0x3d
 800542a:	2101      	movs	r1, #1
 800542c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	0018      	movs	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	b002      	add	sp, #8
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005440:	46c0      	nop			; (mov r8, r8)
 8005442:	46bd      	mov	sp, r7
 8005444:	b002      	add	sp, #8
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	223d      	movs	r2, #61	; 0x3d
 8005454:	5c9b      	ldrb	r3, [r3, r2]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e035      	b.n	80054cc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	223d      	movs	r2, #61	; 0x3d
 8005464:	2102      	movs	r1, #2
 8005466:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2101      	movs	r1, #1
 8005474:	430a      	orrs	r2, r1
 8005476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <HAL_TIM_Base_Start_IT+0x8c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_TIM_Base_Start_IT+0x4e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <HAL_TIM_Base_Start_IT+0x90>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_TIM_Base_Start_IT+0x4e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a12      	ldr	r2, [pc, #72]	; (80054dc <HAL_TIM_Base_Start_IT+0x94>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d111      	bne.n	80054ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2207      	movs	r2, #7
 800549e:	4013      	ands	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b06      	cmp	r3, #6
 80054a6:	d010      	beq.n	80054ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2101      	movs	r1, #1
 80054b4:	430a      	orrs	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	e007      	b.n	80054ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2101      	movs	r1, #1
 80054c6:	430a      	orrs	r2, r1
 80054c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b004      	add	sp, #16
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40014000 	.word	0x40014000

080054e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2202      	movs	r2, #2
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d124      	bne.n	8005540 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2202      	movs	r2, #2
 80054fe:	4013      	ands	r3, r2
 8005500:	2b02      	cmp	r3, #2
 8005502:	d11d      	bne.n	8005540 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2203      	movs	r2, #3
 800550a:	4252      	negs	r2, r2
 800550c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2203      	movs	r2, #3
 800551c:	4013      	ands	r3, r2
 800551e:	d004      	beq.n	800552a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	0018      	movs	r0, r3
 8005524:	f000 f8fa 	bl	800571c <HAL_TIM_IC_CaptureCallback>
 8005528:	e007      	b.n	800553a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0018      	movs	r0, r3
 800552e:	f000 f8ed 	bl	800570c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	0018      	movs	r0, r3
 8005536:	f000 f8f9 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2204      	movs	r2, #4
 8005548:	4013      	ands	r3, r2
 800554a:	2b04      	cmp	r3, #4
 800554c:	d125      	bne.n	800559a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2204      	movs	r2, #4
 8005556:	4013      	ands	r3, r2
 8005558:	2b04      	cmp	r3, #4
 800555a:	d11e      	bne.n	800559a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2205      	movs	r2, #5
 8005562:	4252      	negs	r2, r2
 8005564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	23c0      	movs	r3, #192	; 0xc0
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4013      	ands	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 f8cd 	bl	800571c <HAL_TIM_IC_CaptureCallback>
 8005582:	e007      	b.n	8005594 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	0018      	movs	r0, r3
 8005588:	f000 f8c0 	bl	800570c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	0018      	movs	r0, r3
 8005590:	f000 f8cc 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2208      	movs	r2, #8
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d124      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2208      	movs	r2, #8
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d11d      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2209      	movs	r2, #9
 80055bc:	4252      	negs	r2, r2
 80055be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2204      	movs	r2, #4
 80055c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2203      	movs	r2, #3
 80055ce:	4013      	ands	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	0018      	movs	r0, r3
 80055d6:	f000 f8a1 	bl	800571c <HAL_TIM_IC_CaptureCallback>
 80055da:	e007      	b.n	80055ec <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	0018      	movs	r0, r3
 80055e0:	f000 f894 	bl	800570c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 f8a0 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2210      	movs	r2, #16
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d125      	bne.n	800564c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2210      	movs	r2, #16
 8005608:	4013      	ands	r3, r2
 800560a:	2b10      	cmp	r3, #16
 800560c:	d11e      	bne.n	800564c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2211      	movs	r2, #17
 8005614:	4252      	negs	r2, r2
 8005616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2208      	movs	r2, #8
 800561c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	23c0      	movs	r3, #192	; 0xc0
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4013      	ands	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	0018      	movs	r0, r3
 8005630:	f000 f874 	bl	800571c <HAL_TIM_IC_CaptureCallback>
 8005634:	e007      	b.n	8005646 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f000 f867 	bl	800570c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0018      	movs	r0, r3
 8005642:	f000 f873 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2201      	movs	r2, #1
 8005654:	4013      	ands	r3, r2
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10f      	bne.n	800567a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	4013      	ands	r3, r2
 8005664:	2b01      	cmp	r3, #1
 8005666:	d108      	bne.n	800567a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2202      	movs	r2, #2
 800566e:	4252      	negs	r2, r2
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0018      	movs	r0, r3
 8005676:	f7fd fa6d 	bl	8002b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2280      	movs	r2, #128	; 0x80
 8005682:	4013      	ands	r3, r2
 8005684:	2b80      	cmp	r3, #128	; 0x80
 8005686:	d10f      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	2280      	movs	r2, #128	; 0x80
 8005690:	4013      	ands	r3, r2
 8005692:	2b80      	cmp	r3, #128	; 0x80
 8005694:	d108      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2281      	movs	r2, #129	; 0x81
 800569c:	4252      	negs	r2, r2
 800569e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	0018      	movs	r0, r3
 80056a4:	f000 f8d0 	bl	8005848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2240      	movs	r2, #64	; 0x40
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d10f      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2240      	movs	r2, #64	; 0x40
 80056be:	4013      	ands	r3, r2
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d108      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2241      	movs	r2, #65	; 0x41
 80056ca:	4252      	negs	r2, r2
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f000 f833 	bl	800573c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2220      	movs	r2, #32
 80056de:	4013      	ands	r3, r2
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d10f      	bne.n	8005704 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d108      	bne.n	8005704 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2221      	movs	r2, #33	; 0x21
 80056f8:	4252      	negs	r2, r2
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 f89a 	bl	8005838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b002      	add	sp, #8
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005724:	46c0      	nop			; (mov r8, r8)
 8005726:	46bd      	mov	sp, r7
 8005728:	b002      	add	sp, #8
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005734:	46c0      	nop			; (mov r8, r8)
 8005736:	46bd      	mov	sp, r7
 8005738:	b002      	add	sp, #8
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005744:	46c0      	nop			; (mov r8, r8)
 8005746:	46bd      	mov	sp, r7
 8005748:	b002      	add	sp, #8
 800574a:	bd80      	pop	{r7, pc}

0800574c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a2f      	ldr	r2, [pc, #188]	; (800581c <TIM_Base_SetConfig+0xd0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_Base_SetConfig+0x20>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2e      	ldr	r2, [pc, #184]	; (8005820 <TIM_Base_SetConfig+0xd4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d108      	bne.n	800577e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2270      	movs	r2, #112	; 0x70
 8005770:	4393      	bics	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a26      	ldr	r2, [pc, #152]	; (800581c <TIM_Base_SetConfig+0xd0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <TIM_Base_SetConfig+0x62>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a25      	ldr	r2, [pc, #148]	; (8005820 <TIM_Base_SetConfig+0xd4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00f      	beq.n	80057ae <TIM_Base_SetConfig+0x62>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a24      	ldr	r2, [pc, #144]	; (8005824 <TIM_Base_SetConfig+0xd8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00b      	beq.n	80057ae <TIM_Base_SetConfig+0x62>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a23      	ldr	r2, [pc, #140]	; (8005828 <TIM_Base_SetConfig+0xdc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d007      	beq.n	80057ae <TIM_Base_SetConfig+0x62>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a22      	ldr	r2, [pc, #136]	; (800582c <TIM_Base_SetConfig+0xe0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_Base_SetConfig+0x62>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a21      	ldr	r2, [pc, #132]	; (8005830 <TIM_Base_SetConfig+0xe4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d108      	bne.n	80057c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a20      	ldr	r2, [pc, #128]	; (8005834 <TIM_Base_SetConfig+0xe8>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2280      	movs	r2, #128	; 0x80
 80057c4:	4393      	bics	r3, r2
 80057c6:	001a      	movs	r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a0c      	ldr	r2, [pc, #48]	; (800581c <TIM_Base_SetConfig+0xd0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_Base_SetConfig+0xba>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a0d      	ldr	r2, [pc, #52]	; (8005828 <TIM_Base_SetConfig+0xdc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_Base_SetConfig+0xba>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a0c      	ldr	r2, [pc, #48]	; (800582c <TIM_Base_SetConfig+0xe0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_Base_SetConfig+0xba>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a0b      	ldr	r2, [pc, #44]	; (8005830 <TIM_Base_SetConfig+0xe4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d103      	bne.n	800580e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	615a      	str	r2, [r3, #20]
}
 8005814:	46c0      	nop			; (mov r8, r8)
 8005816:	46bd      	mov	sp, r7
 8005818:	b004      	add	sp, #16
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40000400 	.word	0x40000400
 8005824:	40002000 	.word	0x40002000
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800
 8005834:	fffffcff 	.word	0xfffffcff

08005838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005840:	46c0      	nop			; (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b002      	add	sp, #8
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005850:	46c0      	nop			; (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b002      	add	sp, #8
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e044      	b.n	80058f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2274      	movs	r2, #116	; 0x74
 8005876:	2100      	movs	r1, #0
 8005878:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	0018      	movs	r0, r3
 800587e:	f7fd fccb 	bl	8003218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2224      	movs	r2, #36	; 0x24
 8005886:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2101      	movs	r1, #1
 8005894:	438a      	bics	r2, r1
 8005896:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	0018      	movs	r0, r3
 800589c:	f000 f8da 	bl	8005a54 <UART_SetConfig>
 80058a0:	0003      	movs	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e024      	b.n	80058f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 fa0d 	bl	8005cd4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	490d      	ldr	r1, [pc, #52]	; (80058fc <HAL_UART_Init+0xa4>)
 80058c6:	400a      	ands	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2108      	movs	r1, #8
 80058d6:	438a      	bics	r2, r1
 80058d8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2101      	movs	r1, #1
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f000 faa5 	bl	8005e3c <UART_CheckIdleState>
 80058f2:	0003      	movs	r3, r0
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b002      	add	sp, #8
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	fffff7ff 	.word	0xfffff7ff

08005900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	1dbb      	adds	r3, r7, #6
 800590e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005914:	2b20      	cmp	r3, #32
 8005916:	d000      	beq.n	800591a <HAL_UART_Transmit+0x1a>
 8005918:	e096      	b.n	8005a48 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <HAL_UART_Transmit+0x28>
 8005920:	1dbb      	adds	r3, r7, #6
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e08e      	b.n	8005a4a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	015b      	lsls	r3, r3, #5
 8005934:	429a      	cmp	r2, r3
 8005936:	d109      	bne.n	800594c <HAL_UART_Transmit+0x4c>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2201      	movs	r2, #1
 8005944:	4013      	ands	r3, r2
 8005946:	d001      	beq.n	800594c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e07e      	b.n	8005a4a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2274      	movs	r2, #116	; 0x74
 8005950:	5c9b      	ldrb	r3, [r3, r2]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_UART_Transmit+0x5a>
 8005956:	2302      	movs	r3, #2
 8005958:	e077      	b.n	8005a4a <HAL_UART_Transmit+0x14a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2274      	movs	r2, #116	; 0x74
 800595e:	2101      	movs	r1, #1
 8005960:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2280      	movs	r2, #128	; 0x80
 8005966:	2100      	movs	r1, #0
 8005968:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2221      	movs	r2, #33	; 0x21
 800596e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005970:	f7fd fcf0 	bl	8003354 <HAL_GetTick>
 8005974:	0003      	movs	r3, r0
 8005976:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	1dba      	adds	r2, r7, #6
 800597c:	2150      	movs	r1, #80	; 0x50
 800597e:	8812      	ldrh	r2, [r2, #0]
 8005980:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1dba      	adds	r2, r7, #6
 8005986:	2152      	movs	r1, #82	; 0x52
 8005988:	8812      	ldrh	r2, [r2, #0]
 800598a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	015b      	lsls	r3, r3, #5
 8005994:	429a      	cmp	r2, r3
 8005996:	d108      	bne.n	80059aa <HAL_UART_Transmit+0xaa>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	61bb      	str	r3, [r7, #24]
 80059a8:	e003      	b.n	80059b2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2274      	movs	r2, #116	; 0x74
 80059b6:	2100      	movs	r1, #0
 80059b8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80059ba:	e02d      	b.n	8005a18 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	0013      	movs	r3, r2
 80059c6:	2200      	movs	r2, #0
 80059c8:	2180      	movs	r1, #128	; 0x80
 80059ca:	f000 fa7f 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 80059ce:	1e03      	subs	r3, r0, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e039      	b.n	8005a4a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10b      	bne.n	80059f4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	881a      	ldrh	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	05d2      	lsls	r2, r2, #23
 80059e6:	0dd2      	lsrs	r2, r2, #23
 80059e8:	b292      	uxth	r2, r2
 80059ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	3302      	adds	r3, #2
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e008      	b.n	8005a06 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	b292      	uxth	r2, r2
 80059fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2252      	movs	r2, #82	; 0x52
 8005a0a:	5a9b      	ldrh	r3, [r3, r2]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b299      	uxth	r1, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2252      	movs	r2, #82	; 0x52
 8005a16:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2252      	movs	r2, #82	; 0x52
 8005a1c:	5a9b      	ldrh	r3, [r3, r2]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1cb      	bne.n	80059bc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	0013      	movs	r3, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2140      	movs	r1, #64	; 0x40
 8005a32:	f000 fa4b 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 8005a36:	1e03      	subs	r3, r0, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e005      	b.n	8005a4a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	e000      	b.n	8005a4a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005a48:	2302      	movs	r3, #2
  }
}
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b008      	add	sp, #32
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a5c:	231e      	movs	r3, #30
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a8d      	ldr	r2, [pc, #564]	; (8005cb8 <UART_SetConfig+0x264>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	0019      	movs	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a88      	ldr	r2, [pc, #544]	; (8005cbc <UART_SetConfig+0x268>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	0019      	movs	r1, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	4a7f      	ldr	r2, [pc, #508]	; (8005cc0 <UART_SetConfig+0x26c>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	0019      	movs	r1, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a7b      	ldr	r2, [pc, #492]	; (8005cc4 <UART_SetConfig+0x270>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d127      	bne.n	8005b2a <UART_SetConfig+0xd6>
 8005ada:	4b7b      	ldr	r3, [pc, #492]	; (8005cc8 <UART_SetConfig+0x274>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	2203      	movs	r2, #3
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d00d      	beq.n	8005b02 <UART_SetConfig+0xae>
 8005ae6:	d81b      	bhi.n	8005b20 <UART_SetConfig+0xcc>
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d014      	beq.n	8005b16 <UART_SetConfig+0xc2>
 8005aec:	d818      	bhi.n	8005b20 <UART_SetConfig+0xcc>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <UART_SetConfig+0xa4>
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d00a      	beq.n	8005b0c <UART_SetConfig+0xb8>
 8005af6:	e013      	b.n	8005b20 <UART_SetConfig+0xcc>
 8005af8:	231f      	movs	r3, #31
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e021      	b.n	8005b46 <UART_SetConfig+0xf2>
 8005b02:	231f      	movs	r3, #31
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	2202      	movs	r2, #2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e01c      	b.n	8005b46 <UART_SetConfig+0xf2>
 8005b0c:	231f      	movs	r3, #31
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	2204      	movs	r2, #4
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e017      	b.n	8005b46 <UART_SetConfig+0xf2>
 8005b16:	231f      	movs	r3, #31
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e012      	b.n	8005b46 <UART_SetConfig+0xf2>
 8005b20:	231f      	movs	r3, #31
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	2210      	movs	r2, #16
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	e00d      	b.n	8005b46 <UART_SetConfig+0xf2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a67      	ldr	r2, [pc, #412]	; (8005ccc <UART_SetConfig+0x278>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d104      	bne.n	8005b3e <UART_SetConfig+0xea>
 8005b34:	231f      	movs	r3, #31
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	e003      	b.n	8005b46 <UART_SetConfig+0xf2>
 8005b3e:	231f      	movs	r3, #31
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	2210      	movs	r2, #16
 8005b44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69da      	ldr	r2, [r3, #28]
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d15d      	bne.n	8005c0e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005b52:	231f      	movs	r3, #31
 8005b54:	18fb      	adds	r3, r7, r3
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d015      	beq.n	8005b88 <UART_SetConfig+0x134>
 8005b5c:	dc18      	bgt.n	8005b90 <UART_SetConfig+0x13c>
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d00d      	beq.n	8005b7e <UART_SetConfig+0x12a>
 8005b62:	dc15      	bgt.n	8005b90 <UART_SetConfig+0x13c>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <UART_SetConfig+0x11a>
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d005      	beq.n	8005b78 <UART_SetConfig+0x124>
 8005b6c:	e010      	b.n	8005b90 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b6e:	f7ff f899 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 8005b72:	0003      	movs	r3, r0
 8005b74:	61bb      	str	r3, [r7, #24]
        break;
 8005b76:	e012      	b.n	8005b9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b78:	4b55      	ldr	r3, [pc, #340]	; (8005cd0 <UART_SetConfig+0x27c>)
 8005b7a:	61bb      	str	r3, [r7, #24]
        break;
 8005b7c:	e00f      	b.n	8005b9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7e:	f7ff f823 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8005b82:	0003      	movs	r3, r0
 8005b84:	61bb      	str	r3, [r7, #24]
        break;
 8005b86:	e00a      	b.n	8005b9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	61bb      	str	r3, [r7, #24]
        break;
 8005b8e:	e006      	b.n	8005b9e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b94:	231e      	movs	r3, #30
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
        break;
 8005b9c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d100      	bne.n	8005ba6 <UART_SetConfig+0x152>
 8005ba4:	e07b      	b.n	8005c9e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	005a      	lsls	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	18d2      	adds	r2, r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	0010      	movs	r0, r2
 8005bba:	f7fa fac1 	bl	8000140 <__udivsi3>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d91c      	bls.n	8005c04 <UART_SetConfig+0x1b0>
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	025b      	lsls	r3, r3, #9
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d217      	bcs.n	8005c04 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	200e      	movs	r0, #14
 8005bda:	183b      	adds	r3, r7, r0
 8005bdc:	210f      	movs	r1, #15
 8005bde:	438a      	bics	r2, r1
 8005be0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2207      	movs	r2, #7
 8005bea:	4013      	ands	r3, r2
 8005bec:	b299      	uxth	r1, r3
 8005bee:	183b      	adds	r3, r7, r0
 8005bf0:	183a      	adds	r2, r7, r0
 8005bf2:	8812      	ldrh	r2, [r2, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	183a      	adds	r2, r7, r0
 8005bfe:	8812      	ldrh	r2, [r2, #0]
 8005c00:	60da      	str	r2, [r3, #12]
 8005c02:	e04c      	b.n	8005c9e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005c04:	231e      	movs	r3, #30
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	2201      	movs	r2, #1
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	e047      	b.n	8005c9e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c0e:	231f      	movs	r3, #31
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d015      	beq.n	8005c44 <UART_SetConfig+0x1f0>
 8005c18:	dc18      	bgt.n	8005c4c <UART_SetConfig+0x1f8>
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d00d      	beq.n	8005c3a <UART_SetConfig+0x1e6>
 8005c1e:	dc15      	bgt.n	8005c4c <UART_SetConfig+0x1f8>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <UART_SetConfig+0x1d6>
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d005      	beq.n	8005c34 <UART_SetConfig+0x1e0>
 8005c28:	e010      	b.n	8005c4c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c2a:	f7ff f83b 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	61bb      	str	r3, [r7, #24]
        break;
 8005c32:	e012      	b.n	8005c5a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c34:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <UART_SetConfig+0x27c>)
 8005c36:	61bb      	str	r3, [r7, #24]
        break;
 8005c38:	e00f      	b.n	8005c5a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3a:	f7fe ffc5 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8005c3e:	0003      	movs	r3, r0
 8005c40:	61bb      	str	r3, [r7, #24]
        break;
 8005c42:	e00a      	b.n	8005c5a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	61bb      	str	r3, [r7, #24]
        break;
 8005c4a:	e006      	b.n	8005c5a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c50:	231e      	movs	r3, #30
 8005c52:	18fb      	adds	r3, r7, r3
 8005c54:	2201      	movs	r2, #1
 8005c56:	701a      	strb	r2, [r3, #0]
        break;
 8005c58:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01e      	beq.n	8005c9e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	085a      	lsrs	r2, r3, #1
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	18d2      	adds	r2, r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	0019      	movs	r1, r3
 8005c70:	0010      	movs	r0, r2
 8005c72:	f7fa fa65 	bl	8000140 <__udivsi3>
 8005c76:	0003      	movs	r3, r0
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	d909      	bls.n	8005c96 <UART_SetConfig+0x242>
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	2380      	movs	r3, #128	; 0x80
 8005c86:	025b      	lsls	r3, r3, #9
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d204      	bcs.n	8005c96 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	e003      	b.n	8005c9e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005c96:	231e      	movs	r3, #30
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005caa:	231e      	movs	r3, #30
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	781b      	ldrb	r3, [r3, #0]
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b008      	add	sp, #32
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	ffff69f3 	.word	0xffff69f3
 8005cbc:	ffffcfff 	.word	0xffffcfff
 8005cc0:	fffff4ff 	.word	0xfffff4ff
 8005cc4:	40013800 	.word	0x40013800
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40004400 	.word	0x40004400
 8005cd0:	007a1200 	.word	0x007a1200

08005cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a4a      	ldr	r2, [pc, #296]	; (8005e18 <UART_AdvFeatureConfig+0x144>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2202      	movs	r2, #2
 8005d04:	4013      	ands	r3, r2
 8005d06:	d00b      	beq.n	8005d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4a43      	ldr	r2, [pc, #268]	; (8005e1c <UART_AdvFeatureConfig+0x148>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2204      	movs	r2, #4
 8005d26:	4013      	ands	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4a3b      	ldr	r2, [pc, #236]	; (8005e20 <UART_AdvFeatureConfig+0x14c>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	0019      	movs	r1, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2208      	movs	r2, #8
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d00b      	beq.n	8005d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4a34      	ldr	r2, [pc, #208]	; (8005e24 <UART_AdvFeatureConfig+0x150>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	0019      	movs	r1, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2210      	movs	r2, #16
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d00b      	beq.n	8005d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <UART_AdvFeatureConfig+0x154>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	0019      	movs	r1, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d00b      	beq.n	8005da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	4a25      	ldr	r2, [pc, #148]	; (8005e2c <UART_AdvFeatureConfig+0x158>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2240      	movs	r2, #64	; 0x40
 8005dae:	4013      	ands	r3, r2
 8005db0:	d01d      	beq.n	8005dee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <UART_AdvFeatureConfig+0x15c>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	0019      	movs	r1, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	035b      	lsls	r3, r3, #13
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d10b      	bne.n	8005dee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <UART_AdvFeatureConfig+0x160>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	0019      	movs	r1, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	4013      	ands	r3, r2
 8005df6:	d00b      	beq.n	8005e10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	4a0e      	ldr	r2, [pc, #56]	; (8005e38 <UART_AdvFeatureConfig+0x164>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	0019      	movs	r1, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }
}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b002      	add	sp, #8
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	fffdffff 	.word	0xfffdffff
 8005e1c:	fffeffff 	.word	0xfffeffff
 8005e20:	fffbffff 	.word	0xfffbffff
 8005e24:	ffff7fff 	.word	0xffff7fff
 8005e28:	ffffefff 	.word	0xffffefff
 8005e2c:	ffffdfff 	.word	0xffffdfff
 8005e30:	ffefffff 	.word	0xffefffff
 8005e34:	ff9fffff 	.word	0xff9fffff
 8005e38:	fff7ffff 	.word	0xfff7ffff

08005e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2280      	movs	r2, #128	; 0x80
 8005e48:	2100      	movs	r1, #0
 8005e4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e4c:	f7fd fa82 	bl	8003354 <HAL_GetTick>
 8005e50:	0003      	movs	r3, r0
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d10c      	bne.n	8005e7c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2280      	movs	r2, #128	; 0x80
 8005e66:	0391      	lsls	r1, r2, #14
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <UART_CheckIdleState+0x8c>)
 8005e6c:	9200      	str	r2, [sp, #0]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f000 f82c 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 8005e74:	1e03      	subs	r3, r0, #0
 8005e76:	d001      	beq.n	8005e7c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e021      	b.n	8005ec0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2204      	movs	r2, #4
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d10c      	bne.n	8005ea4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2280      	movs	r2, #128	; 0x80
 8005e8e:	03d1      	lsls	r1, r2, #15
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4a0d      	ldr	r2, [pc, #52]	; (8005ec8 <UART_CheckIdleState+0x8c>)
 8005e94:	9200      	str	r2, [sp, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f000 f818 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 8005e9c:	1e03      	subs	r3, r0, #0
 8005e9e:	d001      	beq.n	8005ea4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e00d      	b.n	8005ec0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2274      	movs	r2, #116	; 0x74
 8005eba:	2100      	movs	r1, #0
 8005ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b004      	add	sp, #16
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	01ffffff 	.word	0x01ffffff

08005ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	1dfb      	adds	r3, r7, #7
 8005eda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005edc:	e05e      	b.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	d05b      	beq.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee4:	f7fd fa36 	bl	8003354 <HAL_GetTick>
 8005ee8:	0002      	movs	r2, r0
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d11b      	bne.n	8005f32 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	492f      	ldr	r1, [pc, #188]	; (8005fc4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005f06:	400a      	ands	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2101      	movs	r1, #1
 8005f16:	438a      	bics	r2, r1
 8005f18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2274      	movs	r2, #116	; 0x74
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e044      	b.n	8005fbc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	d02e      	beq.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	401a      	ands	r2, r3
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d124      	bne.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2280      	movs	r2, #128	; 0x80
 8005f58:	0112      	lsls	r2, r2, #4
 8005f5a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4917      	ldr	r1, [pc, #92]	; (8005fc4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005f68:	400a      	ands	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2101      	movs	r1, #1
 8005f78:	438a      	bics	r2, r1
 8005f7a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2280      	movs	r2, #128	; 0x80
 8005f8c:	2120      	movs	r1, #32
 8005f8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2274      	movs	r2, #116	; 0x74
 8005f94:	2100      	movs	r1, #0
 8005f96:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e00f      	b.n	8005fbc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	425a      	negs	r2, r3
 8005fac:	4153      	adcs	r3, r2
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	1dfb      	adds	r3, r7, #7
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d091      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b004      	add	sp, #16
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	fffffe5f 	.word	0xfffffe5f

08005fc8 <__errno>:
 8005fc8:	4b01      	ldr	r3, [pc, #4]	; (8005fd0 <__errno+0x8>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	4770      	bx	lr
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	20000020 	.word	0x20000020

08005fd4 <__libc_init_array>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	4d0c      	ldr	r5, [pc, #48]	; (800600c <__libc_init_array+0x38>)
 8005fda:	4c0d      	ldr	r4, [pc, #52]	; (8006010 <__libc_init_array+0x3c>)
 8005fdc:	1b64      	subs	r4, r4, r5
 8005fde:	10a4      	asrs	r4, r4, #2
 8005fe0:	42a6      	cmp	r6, r4
 8005fe2:	d109      	bne.n	8005ff8 <__libc_init_array+0x24>
 8005fe4:	2600      	movs	r6, #0
 8005fe6:	f004 fd03 	bl	800a9f0 <_init>
 8005fea:	4d0a      	ldr	r5, [pc, #40]	; (8006014 <__libc_init_array+0x40>)
 8005fec:	4c0a      	ldr	r4, [pc, #40]	; (8006018 <__libc_init_array+0x44>)
 8005fee:	1b64      	subs	r4, r4, r5
 8005ff0:	10a4      	asrs	r4, r4, #2
 8005ff2:	42a6      	cmp	r6, r4
 8005ff4:	d105      	bne.n	8006002 <__libc_init_array+0x2e>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	00b3      	lsls	r3, r6, #2
 8005ffa:	58eb      	ldr	r3, [r5, r3]
 8005ffc:	4798      	blx	r3
 8005ffe:	3601      	adds	r6, #1
 8006000:	e7ee      	b.n	8005fe0 <__libc_init_array+0xc>
 8006002:	00b3      	lsls	r3, r6, #2
 8006004:	58eb      	ldr	r3, [r5, r3]
 8006006:	4798      	blx	r3
 8006008:	3601      	adds	r6, #1
 800600a:	e7f2      	b.n	8005ff2 <__libc_init_array+0x1e>
 800600c:	0800b024 	.word	0x0800b024
 8006010:	0800b024 	.word	0x0800b024
 8006014:	0800b024 	.word	0x0800b024
 8006018:	0800b028 	.word	0x0800b028

0800601c <memset>:
 800601c:	0003      	movs	r3, r0
 800601e:	1882      	adds	r2, r0, r2
 8006020:	4293      	cmp	r3, r2
 8006022:	d100      	bne.n	8006026 <memset+0xa>
 8006024:	4770      	bx	lr
 8006026:	7019      	strb	r1, [r3, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	e7f9      	b.n	8006020 <memset+0x4>

0800602c <__cvt>:
 800602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602e:	001e      	movs	r6, r3
 8006030:	2300      	movs	r3, #0
 8006032:	0014      	movs	r4, r2
 8006034:	b08b      	sub	sp, #44	; 0x2c
 8006036:	429e      	cmp	r6, r3
 8006038:	da04      	bge.n	8006044 <__cvt+0x18>
 800603a:	2180      	movs	r1, #128	; 0x80
 800603c:	0609      	lsls	r1, r1, #24
 800603e:	1873      	adds	r3, r6, r1
 8006040:	001e      	movs	r6, r3
 8006042:	232d      	movs	r3, #45	; 0x2d
 8006044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006046:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006048:	7013      	strb	r3, [r2, #0]
 800604a:	2320      	movs	r3, #32
 800604c:	2203      	movs	r2, #3
 800604e:	439f      	bics	r7, r3
 8006050:	2f46      	cmp	r7, #70	; 0x46
 8006052:	d007      	beq.n	8006064 <__cvt+0x38>
 8006054:	003b      	movs	r3, r7
 8006056:	3b45      	subs	r3, #69	; 0x45
 8006058:	4259      	negs	r1, r3
 800605a:	414b      	adcs	r3, r1
 800605c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800605e:	3a01      	subs	r2, #1
 8006060:	18cb      	adds	r3, r1, r3
 8006062:	9310      	str	r3, [sp, #64]	; 0x40
 8006064:	ab09      	add	r3, sp, #36	; 0x24
 8006066:	9304      	str	r3, [sp, #16]
 8006068:	ab08      	add	r3, sp, #32
 800606a:	9303      	str	r3, [sp, #12]
 800606c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800606e:	9200      	str	r2, [sp, #0]
 8006070:	9302      	str	r3, [sp, #8]
 8006072:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006074:	0022      	movs	r2, r4
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	0033      	movs	r3, r6
 800607a:	f001 fddf 	bl	8007c3c <_dtoa_r>
 800607e:	0005      	movs	r5, r0
 8006080:	2f47      	cmp	r7, #71	; 0x47
 8006082:	d102      	bne.n	800608a <__cvt+0x5e>
 8006084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006086:	07db      	lsls	r3, r3, #31
 8006088:	d528      	bpl.n	80060dc <__cvt+0xb0>
 800608a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800608c:	18eb      	adds	r3, r5, r3
 800608e:	9307      	str	r3, [sp, #28]
 8006090:	2f46      	cmp	r7, #70	; 0x46
 8006092:	d114      	bne.n	80060be <__cvt+0x92>
 8006094:	782b      	ldrb	r3, [r5, #0]
 8006096:	2b30      	cmp	r3, #48	; 0x30
 8006098:	d10c      	bne.n	80060b4 <__cvt+0x88>
 800609a:	2200      	movs	r2, #0
 800609c:	2300      	movs	r3, #0
 800609e:	0020      	movs	r0, r4
 80060a0:	0031      	movs	r1, r6
 80060a2:	f7fa f9d3 	bl	800044c <__aeabi_dcmpeq>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d104      	bne.n	80060b4 <__cvt+0x88>
 80060aa:	2301      	movs	r3, #1
 80060ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060b6:	9a07      	ldr	r2, [sp, #28]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	18d3      	adds	r3, r2, r3
 80060bc:	9307      	str	r3, [sp, #28]
 80060be:	2200      	movs	r2, #0
 80060c0:	2300      	movs	r3, #0
 80060c2:	0020      	movs	r0, r4
 80060c4:	0031      	movs	r1, r6
 80060c6:	f7fa f9c1 	bl	800044c <__aeabi_dcmpeq>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d001      	beq.n	80060d2 <__cvt+0xa6>
 80060ce:	9b07      	ldr	r3, [sp, #28]
 80060d0:	9309      	str	r3, [sp, #36]	; 0x24
 80060d2:	2230      	movs	r2, #48	; 0x30
 80060d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d6:	9907      	ldr	r1, [sp, #28]
 80060d8:	428b      	cmp	r3, r1
 80060da:	d306      	bcc.n	80060ea <__cvt+0xbe>
 80060dc:	0028      	movs	r0, r5
 80060de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80060e2:	1b5b      	subs	r3, r3, r5
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	b00b      	add	sp, #44	; 0x2c
 80060e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ea:	1c59      	adds	r1, r3, #1
 80060ec:	9109      	str	r1, [sp, #36]	; 0x24
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e7f0      	b.n	80060d4 <__cvt+0xa8>

080060f2 <__exponent>:
 80060f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060f4:	1c83      	adds	r3, r0, #2
 80060f6:	b087      	sub	sp, #28
 80060f8:	9303      	str	r3, [sp, #12]
 80060fa:	0005      	movs	r5, r0
 80060fc:	000c      	movs	r4, r1
 80060fe:	232b      	movs	r3, #43	; 0x2b
 8006100:	7002      	strb	r2, [r0, #0]
 8006102:	2900      	cmp	r1, #0
 8006104:	da01      	bge.n	800610a <__exponent+0x18>
 8006106:	424c      	negs	r4, r1
 8006108:	3302      	adds	r3, #2
 800610a:	706b      	strb	r3, [r5, #1]
 800610c:	2c09      	cmp	r4, #9
 800610e:	dd31      	ble.n	8006174 <__exponent+0x82>
 8006110:	270a      	movs	r7, #10
 8006112:	ab04      	add	r3, sp, #16
 8006114:	1dde      	adds	r6, r3, #7
 8006116:	0020      	movs	r0, r4
 8006118:	0039      	movs	r1, r7
 800611a:	9601      	str	r6, [sp, #4]
 800611c:	f7fa f980 	bl	8000420 <__aeabi_idivmod>
 8006120:	3e01      	subs	r6, #1
 8006122:	3130      	adds	r1, #48	; 0x30
 8006124:	0020      	movs	r0, r4
 8006126:	7031      	strb	r1, [r6, #0]
 8006128:	0039      	movs	r1, r7
 800612a:	9402      	str	r4, [sp, #8]
 800612c:	f7fa f892 	bl	8000254 <__divsi3>
 8006130:	9b02      	ldr	r3, [sp, #8]
 8006132:	0004      	movs	r4, r0
 8006134:	2b63      	cmp	r3, #99	; 0x63
 8006136:	dcee      	bgt.n	8006116 <__exponent+0x24>
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	3430      	adds	r4, #48	; 0x30
 800613c:	1e9a      	subs	r2, r3, #2
 800613e:	0013      	movs	r3, r2
 8006140:	9903      	ldr	r1, [sp, #12]
 8006142:	7014      	strb	r4, [r2, #0]
 8006144:	a804      	add	r0, sp, #16
 8006146:	3007      	adds	r0, #7
 8006148:	4298      	cmp	r0, r3
 800614a:	d80e      	bhi.n	800616a <__exponent+0x78>
 800614c:	ab04      	add	r3, sp, #16
 800614e:	3307      	adds	r3, #7
 8006150:	2000      	movs	r0, #0
 8006152:	429a      	cmp	r2, r3
 8006154:	d804      	bhi.n	8006160 <__exponent+0x6e>
 8006156:	ab04      	add	r3, sp, #16
 8006158:	3009      	adds	r0, #9
 800615a:	18c0      	adds	r0, r0, r3
 800615c:	9b01      	ldr	r3, [sp, #4]
 800615e:	1ac0      	subs	r0, r0, r3
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	1818      	adds	r0, r3, r0
 8006164:	1b40      	subs	r0, r0, r5
 8006166:	b007      	add	sp, #28
 8006168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616a:	7818      	ldrb	r0, [r3, #0]
 800616c:	3301      	adds	r3, #1
 800616e:	7008      	strb	r0, [r1, #0]
 8006170:	3101      	adds	r1, #1
 8006172:	e7e7      	b.n	8006144 <__exponent+0x52>
 8006174:	2330      	movs	r3, #48	; 0x30
 8006176:	18e4      	adds	r4, r4, r3
 8006178:	70ab      	strb	r3, [r5, #2]
 800617a:	1d28      	adds	r0, r5, #4
 800617c:	70ec      	strb	r4, [r5, #3]
 800617e:	e7f1      	b.n	8006164 <__exponent+0x72>

08006180 <_printf_float>:
 8006180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006182:	b095      	sub	sp, #84	; 0x54
 8006184:	000c      	movs	r4, r1
 8006186:	9208      	str	r2, [sp, #32]
 8006188:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800618a:	9309      	str	r3, [sp, #36]	; 0x24
 800618c:	0007      	movs	r7, r0
 800618e:	f002 fee5 	bl	8008f5c <_localeconv_r>
 8006192:	6803      	ldr	r3, [r0, #0]
 8006194:	0018      	movs	r0, r3
 8006196:	930b      	str	r3, [sp, #44]	; 0x2c
 8006198:	f7f9 ffb6 	bl	8000108 <strlen>
 800619c:	2300      	movs	r3, #0
 800619e:	9312      	str	r3, [sp, #72]	; 0x48
 80061a0:	7e23      	ldrb	r3, [r4, #24]
 80061a2:	2207      	movs	r2, #7
 80061a4:	001e      	movs	r6, r3
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	900d      	str	r0, [sp, #52]	; 0x34
 80061aa:	930c      	str	r3, [sp, #48]	; 0x30
 80061ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061ae:	682b      	ldr	r3, [r5, #0]
 80061b0:	05c9      	lsls	r1, r1, #23
 80061b2:	d547      	bpl.n	8006244 <_printf_float+0xc4>
 80061b4:	189b      	adds	r3, r3, r2
 80061b6:	4393      	bics	r3, r2
 80061b8:	001a      	movs	r2, r3
 80061ba:	3208      	adds	r2, #8
 80061bc:	602a      	str	r2, [r5, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	64a2      	str	r2, [r4, #72]	; 0x48
 80061c4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80061c6:	2201      	movs	r2, #1
 80061c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80061ca:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80061cc:	930a      	str	r3, [sp, #40]	; 0x28
 80061ce:	006b      	lsls	r3, r5, #1
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	930e      	str	r3, [sp, #56]	; 0x38
 80061d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80061d6:	4ba8      	ldr	r3, [pc, #672]	; (8006478 <_printf_float+0x2f8>)
 80061d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80061da:	4252      	negs	r2, r2
 80061dc:	f7fc f894 	bl	8002308 <__aeabi_dcmpun>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d131      	bne.n	8006248 <_printf_float+0xc8>
 80061e4:	2201      	movs	r2, #1
 80061e6:	4ba4      	ldr	r3, [pc, #656]	; (8006478 <_printf_float+0x2f8>)
 80061e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80061ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80061ec:	4252      	negs	r2, r2
 80061ee:	f7fa f93d 	bl	800046c <__aeabi_dcmple>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	d128      	bne.n	8006248 <_printf_float+0xc8>
 80061f6:	2200      	movs	r2, #0
 80061f8:	2300      	movs	r3, #0
 80061fa:	0029      	movs	r1, r5
 80061fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80061fe:	f7fa f92b 	bl	8000458 <__aeabi_dcmplt>
 8006202:	2800      	cmp	r0, #0
 8006204:	d003      	beq.n	800620e <_printf_float+0x8e>
 8006206:	0023      	movs	r3, r4
 8006208:	222d      	movs	r2, #45	; 0x2d
 800620a:	3343      	adds	r3, #67	; 0x43
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	4d9b      	ldr	r5, [pc, #620]	; (800647c <_printf_float+0x2fc>)
 8006210:	2e47      	cmp	r6, #71	; 0x47
 8006212:	d900      	bls.n	8006216 <_printf_float+0x96>
 8006214:	4d9a      	ldr	r5, [pc, #616]	; (8006480 <_printf_float+0x300>)
 8006216:	2303      	movs	r3, #3
 8006218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800621a:	6123      	str	r3, [r4, #16]
 800621c:	3301      	adds	r3, #1
 800621e:	439a      	bics	r2, r3
 8006220:	2300      	movs	r3, #0
 8006222:	6022      	str	r2, [r4, #0]
 8006224:	930a      	str	r3, [sp, #40]	; 0x28
 8006226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006228:	0021      	movs	r1, r4
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	0038      	movs	r0, r7
 800622e:	9b08      	ldr	r3, [sp, #32]
 8006230:	aa13      	add	r2, sp, #76	; 0x4c
 8006232:	f000 f9f3 	bl	800661c <_printf_common>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d000      	beq.n	800623c <_printf_float+0xbc>
 800623a:	e09e      	b.n	800637a <_printf_float+0x1fa>
 800623c:	2001      	movs	r0, #1
 800623e:	4240      	negs	r0, r0
 8006240:	b015      	add	sp, #84	; 0x54
 8006242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006244:	3307      	adds	r3, #7
 8006246:	e7b6      	b.n	80061b6 <_printf_float+0x36>
 8006248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800624a:	002b      	movs	r3, r5
 800624c:	0010      	movs	r0, r2
 800624e:	0029      	movs	r1, r5
 8006250:	f7fc f85a 	bl	8002308 <__aeabi_dcmpun>
 8006254:	2800      	cmp	r0, #0
 8006256:	d00a      	beq.n	800626e <_printf_float+0xee>
 8006258:	2d00      	cmp	r5, #0
 800625a:	da03      	bge.n	8006264 <_printf_float+0xe4>
 800625c:	0023      	movs	r3, r4
 800625e:	222d      	movs	r2, #45	; 0x2d
 8006260:	3343      	adds	r3, #67	; 0x43
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	4d87      	ldr	r5, [pc, #540]	; (8006484 <_printf_float+0x304>)
 8006266:	2e47      	cmp	r6, #71	; 0x47
 8006268:	d9d5      	bls.n	8006216 <_printf_float+0x96>
 800626a:	4d87      	ldr	r5, [pc, #540]	; (8006488 <_printf_float+0x308>)
 800626c:	e7d3      	b.n	8006216 <_printf_float+0x96>
 800626e:	2220      	movs	r2, #32
 8006270:	0031      	movs	r1, r6
 8006272:	6863      	ldr	r3, [r4, #4]
 8006274:	4391      	bics	r1, r2
 8006276:	910e      	str	r1, [sp, #56]	; 0x38
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	d147      	bne.n	800630c <_printf_float+0x18c>
 800627c:	3307      	adds	r3, #7
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	2380      	movs	r3, #128	; 0x80
 8006282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4313      	orrs	r3, r2
 8006288:	2200      	movs	r2, #0
 800628a:	9206      	str	r2, [sp, #24]
 800628c:	aa12      	add	r2, sp, #72	; 0x48
 800628e:	9205      	str	r2, [sp, #20]
 8006290:	aa11      	add	r2, sp, #68	; 0x44
 8006292:	9203      	str	r2, [sp, #12]
 8006294:	2223      	movs	r2, #35	; 0x23
 8006296:	a908      	add	r1, sp, #32
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	6863      	ldr	r3, [r4, #4]
 800629e:	1852      	adds	r2, r2, r1
 80062a0:	9202      	str	r2, [sp, #8]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	0038      	movs	r0, r7
 80062a6:	002b      	movs	r3, r5
 80062a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062aa:	9604      	str	r6, [sp, #16]
 80062ac:	f7ff febe 	bl	800602c <__cvt>
 80062b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062b2:	0005      	movs	r5, r0
 80062b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80062b6:	2b47      	cmp	r3, #71	; 0x47
 80062b8:	d108      	bne.n	80062cc <_printf_float+0x14c>
 80062ba:	1ccb      	adds	r3, r1, #3
 80062bc:	db02      	blt.n	80062c4 <_printf_float+0x144>
 80062be:	6863      	ldr	r3, [r4, #4]
 80062c0:	4299      	cmp	r1, r3
 80062c2:	dd46      	ble.n	8006352 <_printf_float+0x1d2>
 80062c4:	0033      	movs	r3, r6
 80062c6:	3b02      	subs	r3, #2
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	001e      	movs	r6, r3
 80062cc:	2e65      	cmp	r6, #101	; 0x65
 80062ce:	d824      	bhi.n	800631a <_printf_float+0x19a>
 80062d0:	0020      	movs	r0, r4
 80062d2:	0032      	movs	r2, r6
 80062d4:	3901      	subs	r1, #1
 80062d6:	3050      	adds	r0, #80	; 0x50
 80062d8:	9111      	str	r1, [sp, #68]	; 0x44
 80062da:	f7ff ff0a 	bl	80060f2 <__exponent>
 80062de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062e0:	900a      	str	r0, [sp, #40]	; 0x28
 80062e2:	1813      	adds	r3, r2, r0
 80062e4:	6123      	str	r3, [r4, #16]
 80062e6:	2a01      	cmp	r2, #1
 80062e8:	dc02      	bgt.n	80062f0 <_printf_float+0x170>
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	07d2      	lsls	r2, r2, #31
 80062ee:	d501      	bpl.n	80062f4 <_printf_float+0x174>
 80062f0:	3301      	adds	r3, #1
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	2323      	movs	r3, #35	; 0x23
 80062f6:	aa08      	add	r2, sp, #32
 80062f8:	189b      	adds	r3, r3, r2
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d100      	bne.n	8006302 <_printf_float+0x182>
 8006300:	e791      	b.n	8006226 <_printf_float+0xa6>
 8006302:	0023      	movs	r3, r4
 8006304:	222d      	movs	r2, #45	; 0x2d
 8006306:	3343      	adds	r3, #67	; 0x43
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	e78c      	b.n	8006226 <_printf_float+0xa6>
 800630c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800630e:	2a47      	cmp	r2, #71	; 0x47
 8006310:	d1b6      	bne.n	8006280 <_printf_float+0x100>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1b4      	bne.n	8006280 <_printf_float+0x100>
 8006316:	3301      	adds	r3, #1
 8006318:	e7b1      	b.n	800627e <_printf_float+0xfe>
 800631a:	2e66      	cmp	r6, #102	; 0x66
 800631c:	d11b      	bne.n	8006356 <_printf_float+0x1d6>
 800631e:	6863      	ldr	r3, [r4, #4]
 8006320:	2900      	cmp	r1, #0
 8006322:	dd0d      	ble.n	8006340 <_printf_float+0x1c0>
 8006324:	6121      	str	r1, [r4, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d102      	bne.n	8006330 <_printf_float+0x1b0>
 800632a:	6822      	ldr	r2, [r4, #0]
 800632c:	07d2      	lsls	r2, r2, #31
 800632e:	d502      	bpl.n	8006336 <_printf_float+0x1b6>
 8006330:	3301      	adds	r3, #1
 8006332:	1859      	adds	r1, r3, r1
 8006334:	6121      	str	r1, [r4, #16]
 8006336:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006338:	65a3      	str	r3, [r4, #88]	; 0x58
 800633a:	2300      	movs	r3, #0
 800633c:	930a      	str	r3, [sp, #40]	; 0x28
 800633e:	e7d9      	b.n	80062f4 <_printf_float+0x174>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <_printf_float+0x1cc>
 8006344:	2201      	movs	r2, #1
 8006346:	6821      	ldr	r1, [r4, #0]
 8006348:	4211      	tst	r1, r2
 800634a:	d000      	beq.n	800634e <_printf_float+0x1ce>
 800634c:	1c9a      	adds	r2, r3, #2
 800634e:	6122      	str	r2, [r4, #16]
 8006350:	e7f1      	b.n	8006336 <_printf_float+0x1b6>
 8006352:	2367      	movs	r3, #103	; 0x67
 8006354:	001e      	movs	r6, r3
 8006356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006358:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800635a:	4293      	cmp	r3, r2
 800635c:	db06      	blt.n	800636c <_printf_float+0x1ec>
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	07d2      	lsls	r2, r2, #31
 8006364:	d5e7      	bpl.n	8006336 <_printf_float+0x1b6>
 8006366:	3301      	adds	r3, #1
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	e7e4      	b.n	8006336 <_printf_float+0x1b6>
 800636c:	2101      	movs	r1, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	dc01      	bgt.n	8006376 <_printf_float+0x1f6>
 8006372:	1849      	adds	r1, r1, r1
 8006374:	1ac9      	subs	r1, r1, r3
 8006376:	1852      	adds	r2, r2, r1
 8006378:	e7e9      	b.n	800634e <_printf_float+0x1ce>
 800637a:	6822      	ldr	r2, [r4, #0]
 800637c:	0553      	lsls	r3, r2, #21
 800637e:	d408      	bmi.n	8006392 <_printf_float+0x212>
 8006380:	6923      	ldr	r3, [r4, #16]
 8006382:	002a      	movs	r2, r5
 8006384:	0038      	movs	r0, r7
 8006386:	9908      	ldr	r1, [sp, #32]
 8006388:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800638a:	47a8      	blx	r5
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d129      	bne.n	80063e4 <_printf_float+0x264>
 8006390:	e754      	b.n	800623c <_printf_float+0xbc>
 8006392:	2e65      	cmp	r6, #101	; 0x65
 8006394:	d800      	bhi.n	8006398 <_printf_float+0x218>
 8006396:	e0ec      	b.n	8006572 <_printf_float+0x3f2>
 8006398:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800639a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800639c:	2200      	movs	r2, #0
 800639e:	2300      	movs	r3, #0
 80063a0:	f7fa f854 	bl	800044c <__aeabi_dcmpeq>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d034      	beq.n	8006412 <_printf_float+0x292>
 80063a8:	2301      	movs	r3, #1
 80063aa:	0038      	movs	r0, r7
 80063ac:	4a37      	ldr	r2, [pc, #220]	; (800648c <_printf_float+0x30c>)
 80063ae:	9908      	ldr	r1, [sp, #32]
 80063b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063b2:	47a8      	blx	r5
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d100      	bne.n	80063ba <_printf_float+0x23a>
 80063b8:	e740      	b.n	800623c <_printf_float+0xbc>
 80063ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063be:	4293      	cmp	r3, r2
 80063c0:	db02      	blt.n	80063c8 <_printf_float+0x248>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	07db      	lsls	r3, r3, #31
 80063c6:	d50d      	bpl.n	80063e4 <_printf_float+0x264>
 80063c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063ca:	0038      	movs	r0, r7
 80063cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063d0:	9908      	ldr	r1, [sp, #32]
 80063d2:	47a8      	blx	r5
 80063d4:	2500      	movs	r5, #0
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	d100      	bne.n	80063dc <_printf_float+0x25c>
 80063da:	e72f      	b.n	800623c <_printf_float+0xbc>
 80063dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063de:	3b01      	subs	r3, #1
 80063e0:	42ab      	cmp	r3, r5
 80063e2:	dc0a      	bgt.n	80063fa <_printf_float+0x27a>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	079b      	lsls	r3, r3, #30
 80063e8:	d500      	bpl.n	80063ec <_printf_float+0x26c>
 80063ea:	e114      	b.n	8006616 <_printf_float+0x496>
 80063ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063ee:	68e0      	ldr	r0, [r4, #12]
 80063f0:	4298      	cmp	r0, r3
 80063f2:	db00      	blt.n	80063f6 <_printf_float+0x276>
 80063f4:	e724      	b.n	8006240 <_printf_float+0xc0>
 80063f6:	0018      	movs	r0, r3
 80063f8:	e722      	b.n	8006240 <_printf_float+0xc0>
 80063fa:	0022      	movs	r2, r4
 80063fc:	2301      	movs	r3, #1
 80063fe:	0038      	movs	r0, r7
 8006400:	9908      	ldr	r1, [sp, #32]
 8006402:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006404:	321a      	adds	r2, #26
 8006406:	47b0      	blx	r6
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d100      	bne.n	800640e <_printf_float+0x28e>
 800640c:	e716      	b.n	800623c <_printf_float+0xbc>
 800640e:	3501      	adds	r5, #1
 8006410:	e7e4      	b.n	80063dc <_printf_float+0x25c>
 8006412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006414:	2b00      	cmp	r3, #0
 8006416:	dc3b      	bgt.n	8006490 <_printf_float+0x310>
 8006418:	2301      	movs	r3, #1
 800641a:	0038      	movs	r0, r7
 800641c:	4a1b      	ldr	r2, [pc, #108]	; (800648c <_printf_float+0x30c>)
 800641e:	9908      	ldr	r1, [sp, #32]
 8006420:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006422:	47b0      	blx	r6
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d100      	bne.n	800642a <_printf_float+0x2aa>
 8006428:	e708      	b.n	800623c <_printf_float+0xbc>
 800642a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800642c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800642e:	4313      	orrs	r3, r2
 8006430:	d102      	bne.n	8006438 <_printf_float+0x2b8>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	07db      	lsls	r3, r3, #31
 8006436:	d5d5      	bpl.n	80063e4 <_printf_float+0x264>
 8006438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800643a:	0038      	movs	r0, r7
 800643c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800643e:	9908      	ldr	r1, [sp, #32]
 8006440:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006442:	47b0      	blx	r6
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d100      	bne.n	800644a <_printf_float+0x2ca>
 8006448:	e6f8      	b.n	800623c <_printf_float+0xbc>
 800644a:	2300      	movs	r3, #0
 800644c:	930a      	str	r3, [sp, #40]	; 0x28
 800644e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006452:	425b      	negs	r3, r3
 8006454:	4293      	cmp	r3, r2
 8006456:	dc01      	bgt.n	800645c <_printf_float+0x2dc>
 8006458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800645a:	e792      	b.n	8006382 <_printf_float+0x202>
 800645c:	0022      	movs	r2, r4
 800645e:	2301      	movs	r3, #1
 8006460:	0038      	movs	r0, r7
 8006462:	9908      	ldr	r1, [sp, #32]
 8006464:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006466:	321a      	adds	r2, #26
 8006468:	47b0      	blx	r6
 800646a:	1c43      	adds	r3, r0, #1
 800646c:	d100      	bne.n	8006470 <_printf_float+0x2f0>
 800646e:	e6e5      	b.n	800623c <_printf_float+0xbc>
 8006470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006472:	3301      	adds	r3, #1
 8006474:	e7ea      	b.n	800644c <_printf_float+0x2cc>
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	7fefffff 	.word	0x7fefffff
 800647c:	0800ab70 	.word	0x0800ab70
 8006480:	0800ab74 	.word	0x0800ab74
 8006484:	0800ab78 	.word	0x0800ab78
 8006488:	0800ab7c 	.word	0x0800ab7c
 800648c:	0800ab80 	.word	0x0800ab80
 8006490:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006494:	920a      	str	r2, [sp, #40]	; 0x28
 8006496:	429a      	cmp	r2, r3
 8006498:	dd00      	ble.n	800649c <_printf_float+0x31c>
 800649a:	930a      	str	r3, [sp, #40]	; 0x28
 800649c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	dc3d      	bgt.n	800651e <_printf_float+0x39e>
 80064a2:	2300      	movs	r3, #0
 80064a4:	930e      	str	r3, [sp, #56]	; 0x38
 80064a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a8:	43db      	mvns	r3, r3
 80064aa:	17db      	asrs	r3, r3, #31
 80064ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80064ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064b2:	930c      	str	r3, [sp, #48]	; 0x30
 80064b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b6:	4013      	ands	r3, r2
 80064b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064be:	4293      	cmp	r3, r2
 80064c0:	dc36      	bgt.n	8006530 <_printf_float+0x3b0>
 80064c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064c6:	4293      	cmp	r3, r2
 80064c8:	db40      	blt.n	800654c <_printf_float+0x3cc>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	07db      	lsls	r3, r3, #31
 80064ce:	d43d      	bmi.n	800654c <_printf_float+0x3cc>
 80064d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	1a52      	subs	r2, r2, r1
 80064da:	920a      	str	r2, [sp, #40]	; 0x28
 80064dc:	429a      	cmp	r2, r3
 80064de:	dd00      	ble.n	80064e2 <_printf_float+0x362>
 80064e0:	930a      	str	r3, [sp, #40]	; 0x28
 80064e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dc3a      	bgt.n	800655e <_printf_float+0x3de>
 80064e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ea:	2500      	movs	r5, #0
 80064ec:	43db      	mvns	r3, r3
 80064ee:	17db      	asrs	r3, r3, #31
 80064f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80064f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80064f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064fc:	400a      	ands	r2, r1
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	42ab      	cmp	r3, r5
 8006502:	dc00      	bgt.n	8006506 <_printf_float+0x386>
 8006504:	e76e      	b.n	80063e4 <_printf_float+0x264>
 8006506:	0022      	movs	r2, r4
 8006508:	2301      	movs	r3, #1
 800650a:	0038      	movs	r0, r7
 800650c:	9908      	ldr	r1, [sp, #32]
 800650e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006510:	321a      	adds	r2, #26
 8006512:	47b0      	blx	r6
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d100      	bne.n	800651a <_printf_float+0x39a>
 8006518:	e690      	b.n	800623c <_printf_float+0xbc>
 800651a:	3501      	adds	r5, #1
 800651c:	e7e9      	b.n	80064f2 <_printf_float+0x372>
 800651e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006520:	002a      	movs	r2, r5
 8006522:	0038      	movs	r0, r7
 8006524:	9908      	ldr	r1, [sp, #32]
 8006526:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006528:	47b0      	blx	r6
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	d1b9      	bne.n	80064a2 <_printf_float+0x322>
 800652e:	e685      	b.n	800623c <_printf_float+0xbc>
 8006530:	0022      	movs	r2, r4
 8006532:	2301      	movs	r3, #1
 8006534:	0038      	movs	r0, r7
 8006536:	9908      	ldr	r1, [sp, #32]
 8006538:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800653a:	321a      	adds	r2, #26
 800653c:	47b0      	blx	r6
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	d100      	bne.n	8006544 <_printf_float+0x3c4>
 8006542:	e67b      	b.n	800623c <_printf_float+0xbc>
 8006544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006546:	3301      	adds	r3, #1
 8006548:	930e      	str	r3, [sp, #56]	; 0x38
 800654a:	e7b0      	b.n	80064ae <_printf_float+0x32e>
 800654c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800654e:	0038      	movs	r0, r7
 8006550:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006552:	9908      	ldr	r1, [sp, #32]
 8006554:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006556:	47b0      	blx	r6
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d1b9      	bne.n	80064d0 <_printf_float+0x350>
 800655c:	e66e      	b.n	800623c <_printf_float+0xbc>
 800655e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006560:	0038      	movs	r0, r7
 8006562:	18ea      	adds	r2, r5, r3
 8006564:	9908      	ldr	r1, [sp, #32]
 8006566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006568:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800656a:	47a8      	blx	r5
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d1bb      	bne.n	80064e8 <_printf_float+0x368>
 8006570:	e664      	b.n	800623c <_printf_float+0xbc>
 8006572:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006574:	2b01      	cmp	r3, #1
 8006576:	dc02      	bgt.n	800657e <_printf_float+0x3fe>
 8006578:	2301      	movs	r3, #1
 800657a:	421a      	tst	r2, r3
 800657c:	d038      	beq.n	80065f0 <_printf_float+0x470>
 800657e:	2301      	movs	r3, #1
 8006580:	002a      	movs	r2, r5
 8006582:	0038      	movs	r0, r7
 8006584:	9908      	ldr	r1, [sp, #32]
 8006586:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006588:	47b0      	blx	r6
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	d100      	bne.n	8006590 <_printf_float+0x410>
 800658e:	e655      	b.n	800623c <_printf_float+0xbc>
 8006590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006592:	0038      	movs	r0, r7
 8006594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006596:	9908      	ldr	r1, [sp, #32]
 8006598:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800659a:	47b0      	blx	r6
 800659c:	1c43      	adds	r3, r0, #1
 800659e:	d100      	bne.n	80065a2 <_printf_float+0x422>
 80065a0:	e64c      	b.n	800623c <_printf_float+0xbc>
 80065a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80065a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80065a6:	2200      	movs	r2, #0
 80065a8:	2300      	movs	r3, #0
 80065aa:	f7f9 ff4f 	bl	800044c <__aeabi_dcmpeq>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d11c      	bne.n	80065ec <_printf_float+0x46c>
 80065b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065b4:	1c6a      	adds	r2, r5, #1
 80065b6:	3b01      	subs	r3, #1
 80065b8:	0038      	movs	r0, r7
 80065ba:	9908      	ldr	r1, [sp, #32]
 80065bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065be:	47a8      	blx	r5
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d10f      	bne.n	80065e4 <_printf_float+0x464>
 80065c4:	e63a      	b.n	800623c <_printf_float+0xbc>
 80065c6:	0022      	movs	r2, r4
 80065c8:	2301      	movs	r3, #1
 80065ca:	0038      	movs	r0, r7
 80065cc:	9908      	ldr	r1, [sp, #32]
 80065ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065d0:	321a      	adds	r2, #26
 80065d2:	47b0      	blx	r6
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d100      	bne.n	80065da <_printf_float+0x45a>
 80065d8:	e630      	b.n	800623c <_printf_float+0xbc>
 80065da:	3501      	adds	r5, #1
 80065dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065de:	3b01      	subs	r3, #1
 80065e0:	42ab      	cmp	r3, r5
 80065e2:	dcf0      	bgt.n	80065c6 <_printf_float+0x446>
 80065e4:	0022      	movs	r2, r4
 80065e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e8:	3250      	adds	r2, #80	; 0x50
 80065ea:	e6cb      	b.n	8006384 <_printf_float+0x204>
 80065ec:	2500      	movs	r5, #0
 80065ee:	e7f5      	b.n	80065dc <_printf_float+0x45c>
 80065f0:	002a      	movs	r2, r5
 80065f2:	e7e1      	b.n	80065b8 <_printf_float+0x438>
 80065f4:	0022      	movs	r2, r4
 80065f6:	2301      	movs	r3, #1
 80065f8:	0038      	movs	r0, r7
 80065fa:	9908      	ldr	r1, [sp, #32]
 80065fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065fe:	3219      	adds	r2, #25
 8006600:	47b0      	blx	r6
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	d100      	bne.n	8006608 <_printf_float+0x488>
 8006606:	e619      	b.n	800623c <_printf_float+0xbc>
 8006608:	3501      	adds	r5, #1
 800660a:	68e3      	ldr	r3, [r4, #12]
 800660c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	42ab      	cmp	r3, r5
 8006612:	dcef      	bgt.n	80065f4 <_printf_float+0x474>
 8006614:	e6ea      	b.n	80063ec <_printf_float+0x26c>
 8006616:	2500      	movs	r5, #0
 8006618:	e7f7      	b.n	800660a <_printf_float+0x48a>
 800661a:	46c0      	nop			; (mov r8, r8)

0800661c <_printf_common>:
 800661c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800661e:	0015      	movs	r5, r2
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	688a      	ldr	r2, [r1, #8]
 8006624:	690b      	ldr	r3, [r1, #16]
 8006626:	000c      	movs	r4, r1
 8006628:	9000      	str	r0, [sp, #0]
 800662a:	4293      	cmp	r3, r2
 800662c:	da00      	bge.n	8006630 <_printf_common+0x14>
 800662e:	0013      	movs	r3, r2
 8006630:	0022      	movs	r2, r4
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	3243      	adds	r2, #67	; 0x43
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	2a00      	cmp	r2, #0
 800663a:	d001      	beq.n	8006640 <_printf_common+0x24>
 800663c:	3301      	adds	r3, #1
 800663e:	602b      	str	r3, [r5, #0]
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	069b      	lsls	r3, r3, #26
 8006644:	d502      	bpl.n	800664c <_printf_common+0x30>
 8006646:	682b      	ldr	r3, [r5, #0]
 8006648:	3302      	adds	r3, #2
 800664a:	602b      	str	r3, [r5, #0]
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	2306      	movs	r3, #6
 8006650:	0017      	movs	r7, r2
 8006652:	401f      	ands	r7, r3
 8006654:	421a      	tst	r2, r3
 8006656:	d027      	beq.n	80066a8 <_printf_common+0x8c>
 8006658:	0023      	movs	r3, r4
 800665a:	3343      	adds	r3, #67	; 0x43
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	1e5a      	subs	r2, r3, #1
 8006660:	4193      	sbcs	r3, r2
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	0692      	lsls	r2, r2, #26
 8006666:	d430      	bmi.n	80066ca <_printf_common+0xae>
 8006668:	0022      	movs	r2, r4
 800666a:	9901      	ldr	r1, [sp, #4]
 800666c:	9800      	ldr	r0, [sp, #0]
 800666e:	9e08      	ldr	r6, [sp, #32]
 8006670:	3243      	adds	r2, #67	; 0x43
 8006672:	47b0      	blx	r6
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d025      	beq.n	80066c4 <_printf_common+0xa8>
 8006678:	2306      	movs	r3, #6
 800667a:	6820      	ldr	r0, [r4, #0]
 800667c:	682a      	ldr	r2, [r5, #0]
 800667e:	68e1      	ldr	r1, [r4, #12]
 8006680:	2500      	movs	r5, #0
 8006682:	4003      	ands	r3, r0
 8006684:	2b04      	cmp	r3, #4
 8006686:	d103      	bne.n	8006690 <_printf_common+0x74>
 8006688:	1a8d      	subs	r5, r1, r2
 800668a:	43eb      	mvns	r3, r5
 800668c:	17db      	asrs	r3, r3, #31
 800668e:	401d      	ands	r5, r3
 8006690:	68a3      	ldr	r3, [r4, #8]
 8006692:	6922      	ldr	r2, [r4, #16]
 8006694:	4293      	cmp	r3, r2
 8006696:	dd01      	ble.n	800669c <_printf_common+0x80>
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	18ed      	adds	r5, r5, r3
 800669c:	2700      	movs	r7, #0
 800669e:	42bd      	cmp	r5, r7
 80066a0:	d120      	bne.n	80066e4 <_printf_common+0xc8>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e010      	b.n	80066c8 <_printf_common+0xac>
 80066a6:	3701      	adds	r7, #1
 80066a8:	68e3      	ldr	r3, [r4, #12]
 80066aa:	682a      	ldr	r2, [r5, #0]
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	42bb      	cmp	r3, r7
 80066b0:	ddd2      	ble.n	8006658 <_printf_common+0x3c>
 80066b2:	0022      	movs	r2, r4
 80066b4:	2301      	movs	r3, #1
 80066b6:	9901      	ldr	r1, [sp, #4]
 80066b8:	9800      	ldr	r0, [sp, #0]
 80066ba:	9e08      	ldr	r6, [sp, #32]
 80066bc:	3219      	adds	r2, #25
 80066be:	47b0      	blx	r6
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d1f0      	bne.n	80066a6 <_printf_common+0x8a>
 80066c4:	2001      	movs	r0, #1
 80066c6:	4240      	negs	r0, r0
 80066c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066ca:	2030      	movs	r0, #48	; 0x30
 80066cc:	18e1      	adds	r1, r4, r3
 80066ce:	3143      	adds	r1, #67	; 0x43
 80066d0:	7008      	strb	r0, [r1, #0]
 80066d2:	0021      	movs	r1, r4
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	3145      	adds	r1, #69	; 0x45
 80066d8:	7809      	ldrb	r1, [r1, #0]
 80066da:	18a2      	adds	r2, r4, r2
 80066dc:	3243      	adds	r2, #67	; 0x43
 80066de:	3302      	adds	r3, #2
 80066e0:	7011      	strb	r1, [r2, #0]
 80066e2:	e7c1      	b.n	8006668 <_printf_common+0x4c>
 80066e4:	0022      	movs	r2, r4
 80066e6:	2301      	movs	r3, #1
 80066e8:	9901      	ldr	r1, [sp, #4]
 80066ea:	9800      	ldr	r0, [sp, #0]
 80066ec:	9e08      	ldr	r6, [sp, #32]
 80066ee:	321a      	adds	r2, #26
 80066f0:	47b0      	blx	r6
 80066f2:	1c43      	adds	r3, r0, #1
 80066f4:	d0e6      	beq.n	80066c4 <_printf_common+0xa8>
 80066f6:	3701      	adds	r7, #1
 80066f8:	e7d1      	b.n	800669e <_printf_common+0x82>
	...

080066fc <_printf_i>:
 80066fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066fe:	b08b      	sub	sp, #44	; 0x2c
 8006700:	9206      	str	r2, [sp, #24]
 8006702:	000a      	movs	r2, r1
 8006704:	3243      	adds	r2, #67	; 0x43
 8006706:	9307      	str	r3, [sp, #28]
 8006708:	9005      	str	r0, [sp, #20]
 800670a:	9204      	str	r2, [sp, #16]
 800670c:	7e0a      	ldrb	r2, [r1, #24]
 800670e:	000c      	movs	r4, r1
 8006710:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006712:	2a78      	cmp	r2, #120	; 0x78
 8006714:	d806      	bhi.n	8006724 <_printf_i+0x28>
 8006716:	2a62      	cmp	r2, #98	; 0x62
 8006718:	d808      	bhi.n	800672c <_printf_i+0x30>
 800671a:	2a00      	cmp	r2, #0
 800671c:	d100      	bne.n	8006720 <_printf_i+0x24>
 800671e:	e0c0      	b.n	80068a2 <_printf_i+0x1a6>
 8006720:	2a58      	cmp	r2, #88	; 0x58
 8006722:	d052      	beq.n	80067ca <_printf_i+0xce>
 8006724:	0026      	movs	r6, r4
 8006726:	3642      	adds	r6, #66	; 0x42
 8006728:	7032      	strb	r2, [r6, #0]
 800672a:	e022      	b.n	8006772 <_printf_i+0x76>
 800672c:	0010      	movs	r0, r2
 800672e:	3863      	subs	r0, #99	; 0x63
 8006730:	2815      	cmp	r0, #21
 8006732:	d8f7      	bhi.n	8006724 <_printf_i+0x28>
 8006734:	f7f9 fcfa 	bl	800012c <__gnu_thumb1_case_shi>
 8006738:	001f0016 	.word	0x001f0016
 800673c:	fff6fff6 	.word	0xfff6fff6
 8006740:	fff6fff6 	.word	0xfff6fff6
 8006744:	fff6001f 	.word	0xfff6001f
 8006748:	fff6fff6 	.word	0xfff6fff6
 800674c:	00a8fff6 	.word	0x00a8fff6
 8006750:	009a0036 	.word	0x009a0036
 8006754:	fff6fff6 	.word	0xfff6fff6
 8006758:	fff600b9 	.word	0xfff600b9
 800675c:	fff60036 	.word	0xfff60036
 8006760:	009efff6 	.word	0x009efff6
 8006764:	0026      	movs	r6, r4
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	3642      	adds	r6, #66	; 0x42
 800676a:	1d11      	adds	r1, r2, #4
 800676c:	6019      	str	r1, [r3, #0]
 800676e:	6813      	ldr	r3, [r2, #0]
 8006770:	7033      	strb	r3, [r6, #0]
 8006772:	2301      	movs	r3, #1
 8006774:	e0a7      	b.n	80068c6 <_printf_i+0x1ca>
 8006776:	6808      	ldr	r0, [r1, #0]
 8006778:	6819      	ldr	r1, [r3, #0]
 800677a:	1d0a      	adds	r2, r1, #4
 800677c:	0605      	lsls	r5, r0, #24
 800677e:	d50b      	bpl.n	8006798 <_printf_i+0x9c>
 8006780:	680d      	ldr	r5, [r1, #0]
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	2d00      	cmp	r5, #0
 8006786:	da03      	bge.n	8006790 <_printf_i+0x94>
 8006788:	232d      	movs	r3, #45	; 0x2d
 800678a:	9a04      	ldr	r2, [sp, #16]
 800678c:	426d      	negs	r5, r5
 800678e:	7013      	strb	r3, [r2, #0]
 8006790:	4b61      	ldr	r3, [pc, #388]	; (8006918 <_printf_i+0x21c>)
 8006792:	270a      	movs	r7, #10
 8006794:	9303      	str	r3, [sp, #12]
 8006796:	e032      	b.n	80067fe <_printf_i+0x102>
 8006798:	680d      	ldr	r5, [r1, #0]
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	0641      	lsls	r1, r0, #25
 800679e:	d5f1      	bpl.n	8006784 <_printf_i+0x88>
 80067a0:	b22d      	sxth	r5, r5
 80067a2:	e7ef      	b.n	8006784 <_printf_i+0x88>
 80067a4:	680d      	ldr	r5, [r1, #0]
 80067a6:	6819      	ldr	r1, [r3, #0]
 80067a8:	1d08      	adds	r0, r1, #4
 80067aa:	6018      	str	r0, [r3, #0]
 80067ac:	062e      	lsls	r6, r5, #24
 80067ae:	d501      	bpl.n	80067b4 <_printf_i+0xb8>
 80067b0:	680d      	ldr	r5, [r1, #0]
 80067b2:	e003      	b.n	80067bc <_printf_i+0xc0>
 80067b4:	066d      	lsls	r5, r5, #25
 80067b6:	d5fb      	bpl.n	80067b0 <_printf_i+0xb4>
 80067b8:	680d      	ldr	r5, [r1, #0]
 80067ba:	b2ad      	uxth	r5, r5
 80067bc:	4b56      	ldr	r3, [pc, #344]	; (8006918 <_printf_i+0x21c>)
 80067be:	270a      	movs	r7, #10
 80067c0:	9303      	str	r3, [sp, #12]
 80067c2:	2a6f      	cmp	r2, #111	; 0x6f
 80067c4:	d117      	bne.n	80067f6 <_printf_i+0xfa>
 80067c6:	2708      	movs	r7, #8
 80067c8:	e015      	b.n	80067f6 <_printf_i+0xfa>
 80067ca:	3145      	adds	r1, #69	; 0x45
 80067cc:	700a      	strb	r2, [r1, #0]
 80067ce:	4a52      	ldr	r2, [pc, #328]	; (8006918 <_printf_i+0x21c>)
 80067d0:	9203      	str	r2, [sp, #12]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	6821      	ldr	r1, [r4, #0]
 80067d6:	ca20      	ldmia	r2!, {r5}
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	0608      	lsls	r0, r1, #24
 80067dc:	d550      	bpl.n	8006880 <_printf_i+0x184>
 80067de:	07cb      	lsls	r3, r1, #31
 80067e0:	d502      	bpl.n	80067e8 <_printf_i+0xec>
 80067e2:	2320      	movs	r3, #32
 80067e4:	4319      	orrs	r1, r3
 80067e6:	6021      	str	r1, [r4, #0]
 80067e8:	2710      	movs	r7, #16
 80067ea:	2d00      	cmp	r5, #0
 80067ec:	d103      	bne.n	80067f6 <_printf_i+0xfa>
 80067ee:	2320      	movs	r3, #32
 80067f0:	6822      	ldr	r2, [r4, #0]
 80067f2:	439a      	bics	r2, r3
 80067f4:	6022      	str	r2, [r4, #0]
 80067f6:	0023      	movs	r3, r4
 80067f8:	2200      	movs	r2, #0
 80067fa:	3343      	adds	r3, #67	; 0x43
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	60a3      	str	r3, [r4, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	db03      	blt.n	800680e <_printf_i+0x112>
 8006806:	2204      	movs	r2, #4
 8006808:	6821      	ldr	r1, [r4, #0]
 800680a:	4391      	bics	r1, r2
 800680c:	6021      	str	r1, [r4, #0]
 800680e:	2d00      	cmp	r5, #0
 8006810:	d102      	bne.n	8006818 <_printf_i+0x11c>
 8006812:	9e04      	ldr	r6, [sp, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00c      	beq.n	8006832 <_printf_i+0x136>
 8006818:	9e04      	ldr	r6, [sp, #16]
 800681a:	0028      	movs	r0, r5
 800681c:	0039      	movs	r1, r7
 800681e:	f7f9 fd15 	bl	800024c <__aeabi_uidivmod>
 8006822:	9b03      	ldr	r3, [sp, #12]
 8006824:	3e01      	subs	r6, #1
 8006826:	5c5b      	ldrb	r3, [r3, r1]
 8006828:	7033      	strb	r3, [r6, #0]
 800682a:	002b      	movs	r3, r5
 800682c:	0005      	movs	r5, r0
 800682e:	429f      	cmp	r7, r3
 8006830:	d9f3      	bls.n	800681a <_printf_i+0x11e>
 8006832:	2f08      	cmp	r7, #8
 8006834:	d109      	bne.n	800684a <_printf_i+0x14e>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	07db      	lsls	r3, r3, #31
 800683a:	d506      	bpl.n	800684a <_printf_i+0x14e>
 800683c:	6863      	ldr	r3, [r4, #4]
 800683e:	6922      	ldr	r2, [r4, #16]
 8006840:	4293      	cmp	r3, r2
 8006842:	dc02      	bgt.n	800684a <_printf_i+0x14e>
 8006844:	2330      	movs	r3, #48	; 0x30
 8006846:	3e01      	subs	r6, #1
 8006848:	7033      	strb	r3, [r6, #0]
 800684a:	9b04      	ldr	r3, [sp, #16]
 800684c:	1b9b      	subs	r3, r3, r6
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	9b07      	ldr	r3, [sp, #28]
 8006852:	0021      	movs	r1, r4
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	9805      	ldr	r0, [sp, #20]
 8006858:	9b06      	ldr	r3, [sp, #24]
 800685a:	aa09      	add	r2, sp, #36	; 0x24
 800685c:	f7ff fede 	bl	800661c <_printf_common>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d135      	bne.n	80068d0 <_printf_i+0x1d4>
 8006864:	2001      	movs	r0, #1
 8006866:	4240      	negs	r0, r0
 8006868:	b00b      	add	sp, #44	; 0x2c
 800686a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686c:	2220      	movs	r2, #32
 800686e:	6809      	ldr	r1, [r1, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	6022      	str	r2, [r4, #0]
 8006874:	0022      	movs	r2, r4
 8006876:	2178      	movs	r1, #120	; 0x78
 8006878:	3245      	adds	r2, #69	; 0x45
 800687a:	7011      	strb	r1, [r2, #0]
 800687c:	4a27      	ldr	r2, [pc, #156]	; (800691c <_printf_i+0x220>)
 800687e:	e7a7      	b.n	80067d0 <_printf_i+0xd4>
 8006880:	0648      	lsls	r0, r1, #25
 8006882:	d5ac      	bpl.n	80067de <_printf_i+0xe2>
 8006884:	b2ad      	uxth	r5, r5
 8006886:	e7aa      	b.n	80067de <_printf_i+0xe2>
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	680d      	ldr	r5, [r1, #0]
 800688c:	1d10      	adds	r0, r2, #4
 800688e:	6949      	ldr	r1, [r1, #20]
 8006890:	6018      	str	r0, [r3, #0]
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	062e      	lsls	r6, r5, #24
 8006896:	d501      	bpl.n	800689c <_printf_i+0x1a0>
 8006898:	6019      	str	r1, [r3, #0]
 800689a:	e002      	b.n	80068a2 <_printf_i+0x1a6>
 800689c:	066d      	lsls	r5, r5, #25
 800689e:	d5fb      	bpl.n	8006898 <_printf_i+0x19c>
 80068a0:	8019      	strh	r1, [r3, #0]
 80068a2:	2300      	movs	r3, #0
 80068a4:	9e04      	ldr	r6, [sp, #16]
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	e7d2      	b.n	8006850 <_printf_i+0x154>
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	1d11      	adds	r1, r2, #4
 80068ae:	6019      	str	r1, [r3, #0]
 80068b0:	6816      	ldr	r6, [r2, #0]
 80068b2:	2100      	movs	r1, #0
 80068b4:	0030      	movs	r0, r6
 80068b6:	6862      	ldr	r2, [r4, #4]
 80068b8:	f002 fb70 	bl	8008f9c <memchr>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d001      	beq.n	80068c4 <_printf_i+0x1c8>
 80068c0:	1b80      	subs	r0, r0, r6
 80068c2:	6060      	str	r0, [r4, #4]
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	6123      	str	r3, [r4, #16]
 80068c8:	2300      	movs	r3, #0
 80068ca:	9a04      	ldr	r2, [sp, #16]
 80068cc:	7013      	strb	r3, [r2, #0]
 80068ce:	e7bf      	b.n	8006850 <_printf_i+0x154>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	0032      	movs	r2, r6
 80068d4:	9906      	ldr	r1, [sp, #24]
 80068d6:	9805      	ldr	r0, [sp, #20]
 80068d8:	9d07      	ldr	r5, [sp, #28]
 80068da:	47a8      	blx	r5
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d0c1      	beq.n	8006864 <_printf_i+0x168>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	079b      	lsls	r3, r3, #30
 80068e4:	d415      	bmi.n	8006912 <_printf_i+0x216>
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	68e0      	ldr	r0, [r4, #12]
 80068ea:	4298      	cmp	r0, r3
 80068ec:	dabc      	bge.n	8006868 <_printf_i+0x16c>
 80068ee:	0018      	movs	r0, r3
 80068f0:	e7ba      	b.n	8006868 <_printf_i+0x16c>
 80068f2:	0022      	movs	r2, r4
 80068f4:	2301      	movs	r3, #1
 80068f6:	9906      	ldr	r1, [sp, #24]
 80068f8:	9805      	ldr	r0, [sp, #20]
 80068fa:	9e07      	ldr	r6, [sp, #28]
 80068fc:	3219      	adds	r2, #25
 80068fe:	47b0      	blx	r6
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d0af      	beq.n	8006864 <_printf_i+0x168>
 8006904:	3501      	adds	r5, #1
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	42ab      	cmp	r3, r5
 800690e:	dcf0      	bgt.n	80068f2 <_printf_i+0x1f6>
 8006910:	e7e9      	b.n	80068e6 <_printf_i+0x1ea>
 8006912:	2500      	movs	r5, #0
 8006914:	e7f7      	b.n	8006906 <_printf_i+0x20a>
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	0800ab82 	.word	0x0800ab82
 800691c:	0800ab93 	.word	0x0800ab93

08006920 <_scanf_float>:
 8006920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006922:	b08b      	sub	sp, #44	; 0x2c
 8006924:	0015      	movs	r5, r2
 8006926:	9001      	str	r0, [sp, #4]
 8006928:	22ae      	movs	r2, #174	; 0xae
 800692a:	2000      	movs	r0, #0
 800692c:	9306      	str	r3, [sp, #24]
 800692e:	688b      	ldr	r3, [r1, #8]
 8006930:	000e      	movs	r6, r1
 8006932:	1e59      	subs	r1, r3, #1
 8006934:	0052      	lsls	r2, r2, #1
 8006936:	9005      	str	r0, [sp, #20]
 8006938:	4291      	cmp	r1, r2
 800693a:	d905      	bls.n	8006948 <_scanf_float+0x28>
 800693c:	3b5e      	subs	r3, #94	; 0x5e
 800693e:	3bff      	subs	r3, #255	; 0xff
 8006940:	9305      	str	r3, [sp, #20]
 8006942:	235e      	movs	r3, #94	; 0x5e
 8006944:	33ff      	adds	r3, #255	; 0xff
 8006946:	60b3      	str	r3, [r6, #8]
 8006948:	23f0      	movs	r3, #240	; 0xf0
 800694a:	6832      	ldr	r2, [r6, #0]
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	4313      	orrs	r3, r2
 8006950:	6033      	str	r3, [r6, #0]
 8006952:	0033      	movs	r3, r6
 8006954:	2400      	movs	r4, #0
 8006956:	331c      	adds	r3, #28
 8006958:	001f      	movs	r7, r3
 800695a:	9303      	str	r3, [sp, #12]
 800695c:	9402      	str	r4, [sp, #8]
 800695e:	9408      	str	r4, [sp, #32]
 8006960:	9407      	str	r4, [sp, #28]
 8006962:	9400      	str	r4, [sp, #0]
 8006964:	9404      	str	r4, [sp, #16]
 8006966:	68b2      	ldr	r2, [r6, #8]
 8006968:	2a00      	cmp	r2, #0
 800696a:	d00a      	beq.n	8006982 <_scanf_float+0x62>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b4e      	cmp	r3, #78	; 0x4e
 8006972:	d844      	bhi.n	80069fe <_scanf_float+0xde>
 8006974:	0018      	movs	r0, r3
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d82c      	bhi.n	80069d4 <_scanf_float+0xb4>
 800697a:	382b      	subs	r0, #43	; 0x2b
 800697c:	b2c1      	uxtb	r1, r0
 800697e:	290e      	cmp	r1, #14
 8006980:	d92a      	bls.n	80069d8 <_scanf_float+0xb8>
 8006982:	9b00      	ldr	r3, [sp, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <_scanf_float+0x70>
 8006988:	6832      	ldr	r2, [r6, #0]
 800698a:	4ba4      	ldr	r3, [pc, #656]	; (8006c1c <_scanf_float+0x2fc>)
 800698c:	4013      	ands	r3, r2
 800698e:	6033      	str	r3, [r6, #0]
 8006990:	9b02      	ldr	r3, [sp, #8]
 8006992:	3b01      	subs	r3, #1
 8006994:	2b01      	cmp	r3, #1
 8006996:	d900      	bls.n	800699a <_scanf_float+0x7a>
 8006998:	e0f9      	b.n	8006b8e <_scanf_float+0x26e>
 800699a:	24be      	movs	r4, #190	; 0xbe
 800699c:	0064      	lsls	r4, r4, #1
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	429f      	cmp	r7, r3
 80069a2:	d900      	bls.n	80069a6 <_scanf_float+0x86>
 80069a4:	e0e9      	b.n	8006b7a <_scanf_float+0x25a>
 80069a6:	2301      	movs	r3, #1
 80069a8:	9302      	str	r3, [sp, #8]
 80069aa:	e185      	b.n	8006cb8 <_scanf_float+0x398>
 80069ac:	0018      	movs	r0, r3
 80069ae:	3861      	subs	r0, #97	; 0x61
 80069b0:	280d      	cmp	r0, #13
 80069b2:	d8e6      	bhi.n	8006982 <_scanf_float+0x62>
 80069b4:	f7f9 fbba 	bl	800012c <__gnu_thumb1_case_shi>
 80069b8:	ffe50083 	.word	0xffe50083
 80069bc:	ffe5ffe5 	.word	0xffe5ffe5
 80069c0:	00a200b6 	.word	0x00a200b6
 80069c4:	ffe5ffe5 	.word	0xffe5ffe5
 80069c8:	ffe50089 	.word	0xffe50089
 80069cc:	ffe5ffe5 	.word	0xffe5ffe5
 80069d0:	0065ffe5 	.word	0x0065ffe5
 80069d4:	3841      	subs	r0, #65	; 0x41
 80069d6:	e7eb      	b.n	80069b0 <_scanf_float+0x90>
 80069d8:	280e      	cmp	r0, #14
 80069da:	d8d2      	bhi.n	8006982 <_scanf_float+0x62>
 80069dc:	f7f9 fba6 	bl	800012c <__gnu_thumb1_case_shi>
 80069e0:	ffd1004b 	.word	0xffd1004b
 80069e4:	0098004b 	.word	0x0098004b
 80069e8:	0020ffd1 	.word	0x0020ffd1
 80069ec:	00400040 	.word	0x00400040
 80069f0:	00400040 	.word	0x00400040
 80069f4:	00400040 	.word	0x00400040
 80069f8:	00400040 	.word	0x00400040
 80069fc:	0040      	.short	0x0040
 80069fe:	2b6e      	cmp	r3, #110	; 0x6e
 8006a00:	d809      	bhi.n	8006a16 <_scanf_float+0xf6>
 8006a02:	2b60      	cmp	r3, #96	; 0x60
 8006a04:	d8d2      	bhi.n	80069ac <_scanf_float+0x8c>
 8006a06:	2b54      	cmp	r3, #84	; 0x54
 8006a08:	d07d      	beq.n	8006b06 <_scanf_float+0x1e6>
 8006a0a:	2b59      	cmp	r3, #89	; 0x59
 8006a0c:	d1b9      	bne.n	8006982 <_scanf_float+0x62>
 8006a0e:	2c07      	cmp	r4, #7
 8006a10:	d1b7      	bne.n	8006982 <_scanf_float+0x62>
 8006a12:	2408      	movs	r4, #8
 8006a14:	e02c      	b.n	8006a70 <_scanf_float+0x150>
 8006a16:	2b74      	cmp	r3, #116	; 0x74
 8006a18:	d075      	beq.n	8006b06 <_scanf_float+0x1e6>
 8006a1a:	2b79      	cmp	r3, #121	; 0x79
 8006a1c:	d0f7      	beq.n	8006a0e <_scanf_float+0xee>
 8006a1e:	e7b0      	b.n	8006982 <_scanf_float+0x62>
 8006a20:	6831      	ldr	r1, [r6, #0]
 8006a22:	05c8      	lsls	r0, r1, #23
 8006a24:	d51c      	bpl.n	8006a60 <_scanf_float+0x140>
 8006a26:	2380      	movs	r3, #128	; 0x80
 8006a28:	4399      	bics	r1, r3
 8006a2a:	9b00      	ldr	r3, [sp, #0]
 8006a2c:	6031      	str	r1, [r6, #0]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	9b05      	ldr	r3, [sp, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <_scanf_float+0x120>
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	3201      	adds	r2, #1
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	60b2      	str	r2, [r6, #8]
 8006a40:	68b3      	ldr	r3, [r6, #8]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	60b3      	str	r3, [r6, #8]
 8006a46:	6933      	ldr	r3, [r6, #16]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	6133      	str	r3, [r6, #16]
 8006a4c:	686b      	ldr	r3, [r5, #4]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	606b      	str	r3, [r5, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dc00      	bgt.n	8006a58 <_scanf_float+0x138>
 8006a56:	e086      	b.n	8006b66 <_scanf_float+0x246>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	602b      	str	r3, [r5, #0]
 8006a5e:	e782      	b.n	8006966 <_scanf_float+0x46>
 8006a60:	9a02      	ldr	r2, [sp, #8]
 8006a62:	1912      	adds	r2, r2, r4
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	d18c      	bne.n	8006982 <_scanf_float+0x62>
 8006a68:	4a6d      	ldr	r2, [pc, #436]	; (8006c20 <_scanf_float+0x300>)
 8006a6a:	6831      	ldr	r1, [r6, #0]
 8006a6c:	400a      	ands	r2, r1
 8006a6e:	6032      	str	r2, [r6, #0]
 8006a70:	703b      	strb	r3, [r7, #0]
 8006a72:	3701      	adds	r7, #1
 8006a74:	e7e4      	b.n	8006a40 <_scanf_float+0x120>
 8006a76:	2180      	movs	r1, #128	; 0x80
 8006a78:	6832      	ldr	r2, [r6, #0]
 8006a7a:	420a      	tst	r2, r1
 8006a7c:	d081      	beq.n	8006982 <_scanf_float+0x62>
 8006a7e:	438a      	bics	r2, r1
 8006a80:	e7f5      	b.n	8006a6e <_scanf_float+0x14e>
 8006a82:	9a02      	ldr	r2, [sp, #8]
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	d10f      	bne.n	8006aa8 <_scanf_float+0x188>
 8006a88:	9a00      	ldr	r2, [sp, #0]
 8006a8a:	2a00      	cmp	r2, #0
 8006a8c:	d10f      	bne.n	8006aae <_scanf_float+0x18e>
 8006a8e:	6832      	ldr	r2, [r6, #0]
 8006a90:	21e0      	movs	r1, #224	; 0xe0
 8006a92:	0010      	movs	r0, r2
 8006a94:	00c9      	lsls	r1, r1, #3
 8006a96:	4008      	ands	r0, r1
 8006a98:	4288      	cmp	r0, r1
 8006a9a:	d108      	bne.n	8006aae <_scanf_float+0x18e>
 8006a9c:	4961      	ldr	r1, [pc, #388]	; (8006c24 <_scanf_float+0x304>)
 8006a9e:	400a      	ands	r2, r1
 8006aa0:	6032      	str	r2, [r6, #0]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	9202      	str	r2, [sp, #8]
 8006aa6:	e7e3      	b.n	8006a70 <_scanf_float+0x150>
 8006aa8:	9a02      	ldr	r2, [sp, #8]
 8006aaa:	2a02      	cmp	r2, #2
 8006aac:	d059      	beq.n	8006b62 <_scanf_float+0x242>
 8006aae:	2c01      	cmp	r4, #1
 8006ab0:	d002      	beq.n	8006ab8 <_scanf_float+0x198>
 8006ab2:	2c04      	cmp	r4, #4
 8006ab4:	d000      	beq.n	8006ab8 <_scanf_float+0x198>
 8006ab6:	e764      	b.n	8006982 <_scanf_float+0x62>
 8006ab8:	3401      	adds	r4, #1
 8006aba:	b2e4      	uxtb	r4, r4
 8006abc:	e7d8      	b.n	8006a70 <_scanf_float+0x150>
 8006abe:	9a02      	ldr	r2, [sp, #8]
 8006ac0:	2a01      	cmp	r2, #1
 8006ac2:	d000      	beq.n	8006ac6 <_scanf_float+0x1a6>
 8006ac4:	e75d      	b.n	8006982 <_scanf_float+0x62>
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	e7ec      	b.n	8006aa4 <_scanf_float+0x184>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	d110      	bne.n	8006af0 <_scanf_float+0x1d0>
 8006ace:	9a00      	ldr	r2, [sp, #0]
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	d000      	beq.n	8006ad6 <_scanf_float+0x1b6>
 8006ad4:	e758      	b.n	8006988 <_scanf_float+0x68>
 8006ad6:	6832      	ldr	r2, [r6, #0]
 8006ad8:	21e0      	movs	r1, #224	; 0xe0
 8006ada:	0010      	movs	r0, r2
 8006adc:	00c9      	lsls	r1, r1, #3
 8006ade:	4008      	ands	r0, r1
 8006ae0:	4288      	cmp	r0, r1
 8006ae2:	d000      	beq.n	8006ae6 <_scanf_float+0x1c6>
 8006ae4:	e754      	b.n	8006990 <_scanf_float+0x70>
 8006ae6:	494f      	ldr	r1, [pc, #316]	; (8006c24 <_scanf_float+0x304>)
 8006ae8:	3401      	adds	r4, #1
 8006aea:	400a      	ands	r2, r1
 8006aec:	6032      	str	r2, [r6, #0]
 8006aee:	e7bf      	b.n	8006a70 <_scanf_float+0x150>
 8006af0:	21fd      	movs	r1, #253	; 0xfd
 8006af2:	1ee2      	subs	r2, r4, #3
 8006af4:	420a      	tst	r2, r1
 8006af6:	d000      	beq.n	8006afa <_scanf_float+0x1da>
 8006af8:	e743      	b.n	8006982 <_scanf_float+0x62>
 8006afa:	e7dd      	b.n	8006ab8 <_scanf_float+0x198>
 8006afc:	2c02      	cmp	r4, #2
 8006afe:	d000      	beq.n	8006b02 <_scanf_float+0x1e2>
 8006b00:	e73f      	b.n	8006982 <_scanf_float+0x62>
 8006b02:	2403      	movs	r4, #3
 8006b04:	e7b4      	b.n	8006a70 <_scanf_float+0x150>
 8006b06:	2c06      	cmp	r4, #6
 8006b08:	d000      	beq.n	8006b0c <_scanf_float+0x1ec>
 8006b0a:	e73a      	b.n	8006982 <_scanf_float+0x62>
 8006b0c:	2407      	movs	r4, #7
 8006b0e:	e7af      	b.n	8006a70 <_scanf_float+0x150>
 8006b10:	6832      	ldr	r2, [r6, #0]
 8006b12:	0591      	lsls	r1, r2, #22
 8006b14:	d400      	bmi.n	8006b18 <_scanf_float+0x1f8>
 8006b16:	e734      	b.n	8006982 <_scanf_float+0x62>
 8006b18:	4943      	ldr	r1, [pc, #268]	; (8006c28 <_scanf_float+0x308>)
 8006b1a:	400a      	ands	r2, r1
 8006b1c:	6032      	str	r2, [r6, #0]
 8006b1e:	9a00      	ldr	r2, [sp, #0]
 8006b20:	9204      	str	r2, [sp, #16]
 8006b22:	e7a5      	b.n	8006a70 <_scanf_float+0x150>
 8006b24:	21a0      	movs	r1, #160	; 0xa0
 8006b26:	2080      	movs	r0, #128	; 0x80
 8006b28:	6832      	ldr	r2, [r6, #0]
 8006b2a:	00c9      	lsls	r1, r1, #3
 8006b2c:	4011      	ands	r1, r2
 8006b2e:	00c0      	lsls	r0, r0, #3
 8006b30:	4281      	cmp	r1, r0
 8006b32:	d006      	beq.n	8006b42 <_scanf_float+0x222>
 8006b34:	4202      	tst	r2, r0
 8006b36:	d100      	bne.n	8006b3a <_scanf_float+0x21a>
 8006b38:	e723      	b.n	8006982 <_scanf_float+0x62>
 8006b3a:	9900      	ldr	r1, [sp, #0]
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	d100      	bne.n	8006b42 <_scanf_float+0x222>
 8006b40:	e726      	b.n	8006990 <_scanf_float+0x70>
 8006b42:	0591      	lsls	r1, r2, #22
 8006b44:	d404      	bmi.n	8006b50 <_scanf_float+0x230>
 8006b46:	9900      	ldr	r1, [sp, #0]
 8006b48:	9804      	ldr	r0, [sp, #16]
 8006b4a:	9708      	str	r7, [sp, #32]
 8006b4c:	1a09      	subs	r1, r1, r0
 8006b4e:	9107      	str	r1, [sp, #28]
 8006b50:	4934      	ldr	r1, [pc, #208]	; (8006c24 <_scanf_float+0x304>)
 8006b52:	400a      	ands	r2, r1
 8006b54:	21c0      	movs	r1, #192	; 0xc0
 8006b56:	0049      	lsls	r1, r1, #1
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	6032      	str	r2, [r6, #0]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	9200      	str	r2, [sp, #0]
 8006b60:	e786      	b.n	8006a70 <_scanf_float+0x150>
 8006b62:	2203      	movs	r2, #3
 8006b64:	e79e      	b.n	8006aa4 <_scanf_float+0x184>
 8006b66:	23c0      	movs	r3, #192	; 0xc0
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	0029      	movs	r1, r5
 8006b6c:	58f3      	ldr	r3, [r6, r3]
 8006b6e:	9801      	ldr	r0, [sp, #4]
 8006b70:	4798      	blx	r3
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d100      	bne.n	8006b78 <_scanf_float+0x258>
 8006b76:	e6f6      	b.n	8006966 <_scanf_float+0x46>
 8006b78:	e703      	b.n	8006982 <_scanf_float+0x62>
 8006b7a:	3f01      	subs	r7, #1
 8006b7c:	5933      	ldr	r3, [r6, r4]
 8006b7e:	002a      	movs	r2, r5
 8006b80:	7839      	ldrb	r1, [r7, #0]
 8006b82:	9801      	ldr	r0, [sp, #4]
 8006b84:	4798      	blx	r3
 8006b86:	6933      	ldr	r3, [r6, #16]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	6133      	str	r3, [r6, #16]
 8006b8c:	e707      	b.n	800699e <_scanf_float+0x7e>
 8006b8e:	1e63      	subs	r3, r4, #1
 8006b90:	2b06      	cmp	r3, #6
 8006b92:	d80e      	bhi.n	8006bb2 <_scanf_float+0x292>
 8006b94:	9702      	str	r7, [sp, #8]
 8006b96:	2c02      	cmp	r4, #2
 8006b98:	d920      	bls.n	8006bdc <_scanf_float+0x2bc>
 8006b9a:	1be3      	subs	r3, r4, r7
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	9305      	str	r3, [sp, #20]
 8006ba0:	9b02      	ldr	r3, [sp, #8]
 8006ba2:	9a05      	ldr	r2, [sp, #20]
 8006ba4:	189b      	adds	r3, r3, r2
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d827      	bhi.n	8006bfc <_scanf_float+0x2dc>
 8006bac:	3c03      	subs	r4, #3
 8006bae:	b2e4      	uxtb	r4, r4
 8006bb0:	1b3f      	subs	r7, r7, r4
 8006bb2:	6833      	ldr	r3, [r6, #0]
 8006bb4:	05da      	lsls	r2, r3, #23
 8006bb6:	d554      	bpl.n	8006c62 <_scanf_float+0x342>
 8006bb8:	055b      	lsls	r3, r3, #21
 8006bba:	d537      	bpl.n	8006c2c <_scanf_float+0x30c>
 8006bbc:	24be      	movs	r4, #190	; 0xbe
 8006bbe:	0064      	lsls	r4, r4, #1
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	429f      	cmp	r7, r3
 8006bc4:	d800      	bhi.n	8006bc8 <_scanf_float+0x2a8>
 8006bc6:	e6ee      	b.n	80069a6 <_scanf_float+0x86>
 8006bc8:	3f01      	subs	r7, #1
 8006bca:	5933      	ldr	r3, [r6, r4]
 8006bcc:	002a      	movs	r2, r5
 8006bce:	7839      	ldrb	r1, [r7, #0]
 8006bd0:	9801      	ldr	r0, [sp, #4]
 8006bd2:	4798      	blx	r3
 8006bd4:	6933      	ldr	r3, [r6, #16]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	6133      	str	r3, [r6, #16]
 8006bda:	e7f1      	b.n	8006bc0 <_scanf_float+0x2a0>
 8006bdc:	24be      	movs	r4, #190	; 0xbe
 8006bde:	0064      	lsls	r4, r4, #1
 8006be0:	9b03      	ldr	r3, [sp, #12]
 8006be2:	429f      	cmp	r7, r3
 8006be4:	d800      	bhi.n	8006be8 <_scanf_float+0x2c8>
 8006be6:	e6de      	b.n	80069a6 <_scanf_float+0x86>
 8006be8:	3f01      	subs	r7, #1
 8006bea:	5933      	ldr	r3, [r6, r4]
 8006bec:	002a      	movs	r2, r5
 8006bee:	7839      	ldrb	r1, [r7, #0]
 8006bf0:	9801      	ldr	r0, [sp, #4]
 8006bf2:	4798      	blx	r3
 8006bf4:	6933      	ldr	r3, [r6, #16]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	6133      	str	r3, [r6, #16]
 8006bfa:	e7f1      	b.n	8006be0 <_scanf_float+0x2c0>
 8006bfc:	9b02      	ldr	r3, [sp, #8]
 8006bfe:	002a      	movs	r2, r5
 8006c00:	3b01      	subs	r3, #1
 8006c02:	7819      	ldrb	r1, [r3, #0]
 8006c04:	9302      	str	r3, [sp, #8]
 8006c06:	23be      	movs	r3, #190	; 0xbe
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	58f3      	ldr	r3, [r6, r3]
 8006c0c:	9801      	ldr	r0, [sp, #4]
 8006c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c10:	4798      	blx	r3
 8006c12:	6933      	ldr	r3, [r6, #16]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	6133      	str	r3, [r6, #16]
 8006c18:	e7c2      	b.n	8006ba0 <_scanf_float+0x280>
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	fffffeff 	.word	0xfffffeff
 8006c20:	fffffe7f 	.word	0xfffffe7f
 8006c24:	fffff87f 	.word	0xfffff87f
 8006c28:	fffffd7f 	.word	0xfffffd7f
 8006c2c:	6933      	ldr	r3, [r6, #16]
 8006c2e:	1e7c      	subs	r4, r7, #1
 8006c30:	7821      	ldrb	r1, [r4, #0]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	6133      	str	r3, [r6, #16]
 8006c36:	2965      	cmp	r1, #101	; 0x65
 8006c38:	d00c      	beq.n	8006c54 <_scanf_float+0x334>
 8006c3a:	2945      	cmp	r1, #69	; 0x45
 8006c3c:	d00a      	beq.n	8006c54 <_scanf_float+0x334>
 8006c3e:	23be      	movs	r3, #190	; 0xbe
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	58f3      	ldr	r3, [r6, r3]
 8006c44:	002a      	movs	r2, r5
 8006c46:	9801      	ldr	r0, [sp, #4]
 8006c48:	4798      	blx	r3
 8006c4a:	6933      	ldr	r3, [r6, #16]
 8006c4c:	1ebc      	subs	r4, r7, #2
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	7821      	ldrb	r1, [r4, #0]
 8006c52:	6133      	str	r3, [r6, #16]
 8006c54:	23be      	movs	r3, #190	; 0xbe
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	002a      	movs	r2, r5
 8006c5a:	58f3      	ldr	r3, [r6, r3]
 8006c5c:	9801      	ldr	r0, [sp, #4]
 8006c5e:	4798      	blx	r3
 8006c60:	0027      	movs	r7, r4
 8006c62:	6832      	ldr	r2, [r6, #0]
 8006c64:	2310      	movs	r3, #16
 8006c66:	0011      	movs	r1, r2
 8006c68:	4019      	ands	r1, r3
 8006c6a:	9102      	str	r1, [sp, #8]
 8006c6c:	421a      	tst	r2, r3
 8006c6e:	d158      	bne.n	8006d22 <_scanf_float+0x402>
 8006c70:	23c0      	movs	r3, #192	; 0xc0
 8006c72:	7039      	strb	r1, [r7, #0]
 8006c74:	6832      	ldr	r2, [r6, #0]
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2280      	movs	r2, #128	; 0x80
 8006c7c:	00d2      	lsls	r2, r2, #3
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d11d      	bne.n	8006cbe <_scanf_float+0x39e>
 8006c82:	9b04      	ldr	r3, [sp, #16]
 8006c84:	9a00      	ldr	r2, [sp, #0]
 8006c86:	9900      	ldr	r1, [sp, #0]
 8006c88:	1a9a      	subs	r2, r3, r2
 8006c8a:	428b      	cmp	r3, r1
 8006c8c:	d124      	bne.n	8006cd8 <_scanf_float+0x3b8>
 8006c8e:	2200      	movs	r2, #0
 8006c90:	9903      	ldr	r1, [sp, #12]
 8006c92:	9801      	ldr	r0, [sp, #4]
 8006c94:	f000 feac 	bl	80079f0 <_strtod_r>
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	000d      	movs	r5, r1
 8006c9c:	6831      	ldr	r1, [r6, #0]
 8006c9e:	0004      	movs	r4, r0
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	078a      	lsls	r2, r1, #30
 8006ca4:	d525      	bpl.n	8006cf2 <_scanf_float+0x3d2>
 8006ca6:	1d1a      	adds	r2, r3, #4
 8006ca8:	9906      	ldr	r1, [sp, #24]
 8006caa:	600a      	str	r2, [r1, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	601c      	str	r4, [r3, #0]
 8006cb0:	605d      	str	r5, [r3, #4]
 8006cb2:	68f3      	ldr	r3, [r6, #12]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	60f3      	str	r3, [r6, #12]
 8006cb8:	9802      	ldr	r0, [sp, #8]
 8006cba:	b00b      	add	sp, #44	; 0x2c
 8006cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cbe:	9b07      	ldr	r3, [sp, #28]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0e4      	beq.n	8006c8e <_scanf_float+0x36e>
 8006cc4:	9b08      	ldr	r3, [sp, #32]
 8006cc6:	9a02      	ldr	r2, [sp, #8]
 8006cc8:	1c59      	adds	r1, r3, #1
 8006cca:	9801      	ldr	r0, [sp, #4]
 8006ccc:	230a      	movs	r3, #10
 8006cce:	f000 ff25 	bl	8007b1c <_strtol_r>
 8006cd2:	9b07      	ldr	r3, [sp, #28]
 8006cd4:	9f08      	ldr	r7, [sp, #32]
 8006cd6:	1ac2      	subs	r2, r0, r3
 8006cd8:	0033      	movs	r3, r6
 8006cda:	3370      	adds	r3, #112	; 0x70
 8006cdc:	33ff      	adds	r3, #255	; 0xff
 8006cde:	429f      	cmp	r7, r3
 8006ce0:	d302      	bcc.n	8006ce8 <_scanf_float+0x3c8>
 8006ce2:	0037      	movs	r7, r6
 8006ce4:	376f      	adds	r7, #111	; 0x6f
 8006ce6:	37ff      	adds	r7, #255	; 0xff
 8006ce8:	0038      	movs	r0, r7
 8006cea:	490f      	ldr	r1, [pc, #60]	; (8006d28 <_scanf_float+0x408>)
 8006cec:	f000 f824 	bl	8006d38 <siprintf>
 8006cf0:	e7cd      	b.n	8006c8e <_scanf_float+0x36e>
 8006cf2:	1d1a      	adds	r2, r3, #4
 8006cf4:	0749      	lsls	r1, r1, #29
 8006cf6:	d4d7      	bmi.n	8006ca8 <_scanf_float+0x388>
 8006cf8:	9906      	ldr	r1, [sp, #24]
 8006cfa:	0020      	movs	r0, r4
 8006cfc:	600a      	str	r2, [r1, #0]
 8006cfe:	681f      	ldr	r7, [r3, #0]
 8006d00:	0022      	movs	r2, r4
 8006d02:	002b      	movs	r3, r5
 8006d04:	0029      	movs	r1, r5
 8006d06:	f7fb faff 	bl	8002308 <__aeabi_dcmpun>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d004      	beq.n	8006d18 <_scanf_float+0x3f8>
 8006d0e:	4807      	ldr	r0, [pc, #28]	; (8006d2c <_scanf_float+0x40c>)
 8006d10:	f000 f80e 	bl	8006d30 <nanf>
 8006d14:	6038      	str	r0, [r7, #0]
 8006d16:	e7cc      	b.n	8006cb2 <_scanf_float+0x392>
 8006d18:	0020      	movs	r0, r4
 8006d1a:	0029      	movs	r1, r5
 8006d1c:	f7fb fbe6 	bl	80024ec <__aeabi_d2f>
 8006d20:	e7f8      	b.n	8006d14 <_scanf_float+0x3f4>
 8006d22:	2300      	movs	r3, #0
 8006d24:	e640      	b.n	80069a8 <_scanf_float+0x88>
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	0800aba4 	.word	0x0800aba4
 8006d2c:	0800afc0 	.word	0x0800afc0

08006d30 <nanf>:
 8006d30:	4800      	ldr	r0, [pc, #0]	; (8006d34 <nanf+0x4>)
 8006d32:	4770      	bx	lr
 8006d34:	7fc00000 	.word	0x7fc00000

08006d38 <siprintf>:
 8006d38:	b40e      	push	{r1, r2, r3}
 8006d3a:	b500      	push	{lr}
 8006d3c:	490b      	ldr	r1, [pc, #44]	; (8006d6c <siprintf+0x34>)
 8006d3e:	b09c      	sub	sp, #112	; 0x70
 8006d40:	ab1d      	add	r3, sp, #116	; 0x74
 8006d42:	9002      	str	r0, [sp, #8]
 8006d44:	9006      	str	r0, [sp, #24]
 8006d46:	9107      	str	r1, [sp, #28]
 8006d48:	9104      	str	r1, [sp, #16]
 8006d4a:	4809      	ldr	r0, [pc, #36]	; (8006d70 <siprintf+0x38>)
 8006d4c:	4909      	ldr	r1, [pc, #36]	; (8006d74 <siprintf+0x3c>)
 8006d4e:	cb04      	ldmia	r3!, {r2}
 8006d50:	9105      	str	r1, [sp, #20]
 8006d52:	6800      	ldr	r0, [r0, #0]
 8006d54:	a902      	add	r1, sp, #8
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	f002 ff16 	bl	8009b88 <_svfiprintf_r>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9a02      	ldr	r2, [sp, #8]
 8006d60:	7013      	strb	r3, [r2, #0]
 8006d62:	b01c      	add	sp, #112	; 0x70
 8006d64:	bc08      	pop	{r3}
 8006d66:	b003      	add	sp, #12
 8006d68:	4718      	bx	r3
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	7fffffff 	.word	0x7fffffff
 8006d70:	20000020 	.word	0x20000020
 8006d74:	ffff0208 	.word	0xffff0208

08006d78 <sulp>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	0016      	movs	r6, r2
 8006d7c:	000d      	movs	r5, r1
 8006d7e:	f002 fca7 	bl	80096d0 <__ulp>
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d00d      	beq.n	8006da2 <sulp+0x2a>
 8006d86:	236b      	movs	r3, #107	; 0x6b
 8006d88:	006a      	lsls	r2, r5, #1
 8006d8a:	0d52      	lsrs	r2, r2, #21
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	dd07      	ble.n	8006da2 <sulp+0x2a>
 8006d92:	2400      	movs	r4, #0
 8006d94:	4a03      	ldr	r2, [pc, #12]	; (8006da4 <sulp+0x2c>)
 8006d96:	051b      	lsls	r3, r3, #20
 8006d98:	189d      	adds	r5, r3, r2
 8006d9a:	002b      	movs	r3, r5
 8006d9c:	0022      	movs	r2, r4
 8006d9e:	f7fa fcb5 	bl	800170c <__aeabi_dmul>
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
 8006da4:	3ff00000 	.word	0x3ff00000

08006da8 <_strtod_l>:
 8006da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006daa:	001d      	movs	r5, r3
 8006dac:	2300      	movs	r3, #0
 8006dae:	b0a7      	sub	sp, #156	; 0x9c
 8006db0:	9322      	str	r3, [sp, #136]	; 0x88
 8006db2:	4bae      	ldr	r3, [pc, #696]	; (800706c <_strtod_l+0x2c4>)
 8006db4:	9005      	str	r0, [sp, #20]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	9108      	str	r1, [sp, #32]
 8006dba:	0018      	movs	r0, r3
 8006dbc:	9307      	str	r3, [sp, #28]
 8006dbe:	921d      	str	r2, [sp, #116]	; 0x74
 8006dc0:	f7f9 f9a2 	bl	8000108 <strlen>
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	0004      	movs	r4, r0
 8006dc8:	2700      	movs	r7, #0
 8006dca:	9b08      	ldr	r3, [sp, #32]
 8006dcc:	9321      	str	r3, [sp, #132]	; 0x84
 8006dce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dd0:	7813      	ldrb	r3, [r2, #0]
 8006dd2:	2b2b      	cmp	r3, #43	; 0x2b
 8006dd4:	d058      	beq.n	8006e88 <_strtod_l+0xe0>
 8006dd6:	d844      	bhi.n	8006e62 <_strtod_l+0xba>
 8006dd8:	2b0d      	cmp	r3, #13
 8006dda:	d83d      	bhi.n	8006e58 <_strtod_l+0xb0>
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d83d      	bhi.n	8006e5c <_strtod_l+0xb4>
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d047      	beq.n	8006e74 <_strtod_l+0xcc>
 8006de4:	2300      	movs	r3, #0
 8006de6:	9310      	str	r3, [sp, #64]	; 0x40
 8006de8:	2200      	movs	r2, #0
 8006dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dec:	920a      	str	r2, [sp, #40]	; 0x28
 8006dee:	9306      	str	r3, [sp, #24]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b30      	cmp	r3, #48	; 0x30
 8006df4:	d000      	beq.n	8006df8 <_strtod_l+0x50>
 8006df6:	e083      	b.n	8006f00 <_strtod_l+0x158>
 8006df8:	9b06      	ldr	r3, [sp, #24]
 8006dfa:	3220      	adds	r2, #32
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	4393      	bics	r3, r2
 8006e00:	2b58      	cmp	r3, #88	; 0x58
 8006e02:	d000      	beq.n	8006e06 <_strtod_l+0x5e>
 8006e04:	e072      	b.n	8006eec <_strtod_l+0x144>
 8006e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e08:	9502      	str	r5, [sp, #8]
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	ab22      	add	r3, sp, #136	; 0x88
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	4a97      	ldr	r2, [pc, #604]	; (8007070 <_strtod_l+0x2c8>)
 8006e12:	ab23      	add	r3, sp, #140	; 0x8c
 8006e14:	9805      	ldr	r0, [sp, #20]
 8006e16:	a921      	add	r1, sp, #132	; 0x84
 8006e18:	f001 fd98 	bl	800894c <__gethex>
 8006e1c:	2307      	movs	r3, #7
 8006e1e:	0005      	movs	r5, r0
 8006e20:	0004      	movs	r4, r0
 8006e22:	401d      	ands	r5, r3
 8006e24:	4218      	tst	r0, r3
 8006e26:	d006      	beq.n	8006e36 <_strtod_l+0x8e>
 8006e28:	2d06      	cmp	r5, #6
 8006e2a:	d12f      	bne.n	8006e8c <_strtod_l+0xe4>
 8006e2c:	9b06      	ldr	r3, [sp, #24]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	9321      	str	r3, [sp, #132]	; 0x84
 8006e32:	2300      	movs	r3, #0
 8006e34:	9310      	str	r3, [sp, #64]	; 0x40
 8006e36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <_strtod_l+0x9a>
 8006e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01c      	beq.n	8006e82 <_strtod_l+0xda>
 8006e48:	2380      	movs	r3, #128	; 0x80
 8006e4a:	0032      	movs	r2, r6
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	0010      	movs	r0, r2
 8006e52:	0019      	movs	r1, r3
 8006e54:	b027      	add	sp, #156	; 0x9c
 8006e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d1c3      	bne.n	8006de4 <_strtod_l+0x3c>
 8006e5c:	3201      	adds	r2, #1
 8006e5e:	9221      	str	r2, [sp, #132]	; 0x84
 8006e60:	e7b5      	b.n	8006dce <_strtod_l+0x26>
 8006e62:	2b2d      	cmp	r3, #45	; 0x2d
 8006e64:	d1be      	bne.n	8006de4 <_strtod_l+0x3c>
 8006e66:	3b2c      	subs	r3, #44	; 0x2c
 8006e68:	9310      	str	r3, [sp, #64]	; 0x40
 8006e6a:	1c53      	adds	r3, r2, #1
 8006e6c:	9321      	str	r3, [sp, #132]	; 0x84
 8006e6e:	7853      	ldrb	r3, [r2, #1]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1b9      	bne.n	8006de8 <_strtod_l+0x40>
 8006e74:	9b08      	ldr	r3, [sp, #32]
 8006e76:	9321      	str	r3, [sp, #132]	; 0x84
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9310      	str	r3, [sp, #64]	; 0x40
 8006e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1dc      	bne.n	8006e3c <_strtod_l+0x94>
 8006e82:	0032      	movs	r2, r6
 8006e84:	003b      	movs	r3, r7
 8006e86:	e7e3      	b.n	8006e50 <_strtod_l+0xa8>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e7ed      	b.n	8006e68 <_strtod_l+0xc0>
 8006e8c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e8e:	2a00      	cmp	r2, #0
 8006e90:	d007      	beq.n	8006ea2 <_strtod_l+0xfa>
 8006e92:	2135      	movs	r1, #53	; 0x35
 8006e94:	a824      	add	r0, sp, #144	; 0x90
 8006e96:	f002 fd1a 	bl	80098ce <__copybits>
 8006e9a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006e9c:	9805      	ldr	r0, [sp, #20]
 8006e9e:	f002 f8d5 	bl	800904c <_Bfree>
 8006ea2:	1e68      	subs	r0, r5, #1
 8006ea4:	2805      	cmp	r0, #5
 8006ea6:	d806      	bhi.n	8006eb6 <_strtod_l+0x10e>
 8006ea8:	f7f9 f936 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006eac:	1c190b0e 	.word	0x1c190b0e
 8006eb0:	030e      	.short	0x030e
 8006eb2:	2700      	movs	r7, #0
 8006eb4:	003e      	movs	r6, r7
 8006eb6:	0723      	lsls	r3, r4, #28
 8006eb8:	d5bd      	bpl.n	8006e36 <_strtod_l+0x8e>
 8006eba:	2380      	movs	r3, #128	; 0x80
 8006ebc:	061b      	lsls	r3, r3, #24
 8006ebe:	431f      	orrs	r7, r3
 8006ec0:	e7b9      	b.n	8006e36 <_strtod_l+0x8e>
 8006ec2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006ec4:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006ec6:	e7f6      	b.n	8006eb6 <_strtod_l+0x10e>
 8006ec8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006eca:	4a6a      	ldr	r2, [pc, #424]	; (8007074 <_strtod_l+0x2cc>)
 8006ecc:	496a      	ldr	r1, [pc, #424]	; (8007078 <_strtod_l+0x2d0>)
 8006ece:	401a      	ands	r2, r3
 8006ed0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ed2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006ed4:	185b      	adds	r3, r3, r1
 8006ed6:	051b      	lsls	r3, r3, #20
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	0017      	movs	r7, r2
 8006edc:	e7eb      	b.n	8006eb6 <_strtod_l+0x10e>
 8006ede:	2600      	movs	r6, #0
 8006ee0:	4f66      	ldr	r7, [pc, #408]	; (800707c <_strtod_l+0x2d4>)
 8006ee2:	e7e8      	b.n	8006eb6 <_strtod_l+0x10e>
 8006ee4:	2601      	movs	r6, #1
 8006ee6:	4f66      	ldr	r7, [pc, #408]	; (8007080 <_strtod_l+0x2d8>)
 8006ee8:	4276      	negs	r6, r6
 8006eea:	e7e4      	b.n	8006eb6 <_strtod_l+0x10e>
 8006eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	9221      	str	r2, [sp, #132]	; 0x84
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b30      	cmp	r3, #48	; 0x30
 8006ef6:	d0f9      	beq.n	8006eec <_strtod_l+0x144>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d09c      	beq.n	8006e36 <_strtod_l+0x8e>
 8006efc:	2301      	movs	r3, #1
 8006efe:	930a      	str	r3, [sp, #40]	; 0x28
 8006f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f02:	220a      	movs	r2, #10
 8006f04:	9311      	str	r3, [sp, #68]	; 0x44
 8006f06:	2300      	movs	r3, #0
 8006f08:	930e      	str	r3, [sp, #56]	; 0x38
 8006f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f0e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006f10:	7805      	ldrb	r5, [r0, #0]
 8006f12:	002b      	movs	r3, r5
 8006f14:	3b30      	subs	r3, #48	; 0x30
 8006f16:	b2d9      	uxtb	r1, r3
 8006f18:	2909      	cmp	r1, #9
 8006f1a:	d927      	bls.n	8006f6c <_strtod_l+0x1c4>
 8006f1c:	0022      	movs	r2, r4
 8006f1e:	9907      	ldr	r1, [sp, #28]
 8006f20:	f002 ff4a 	bl	8009db8 <strncmp>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d033      	beq.n	8006f90 <_strtod_l+0x1e8>
 8006f28:	2000      	movs	r0, #0
 8006f2a:	002b      	movs	r3, r5
 8006f2c:	4684      	mov	ip, r0
 8006f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f30:	900c      	str	r0, [sp, #48]	; 0x30
 8006f32:	9206      	str	r2, [sp, #24]
 8006f34:	2220      	movs	r2, #32
 8006f36:	0019      	movs	r1, r3
 8006f38:	4391      	bics	r1, r2
 8006f3a:	000a      	movs	r2, r1
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	9107      	str	r1, [sp, #28]
 8006f40:	2a45      	cmp	r2, #69	; 0x45
 8006f42:	d000      	beq.n	8006f46 <_strtod_l+0x19e>
 8006f44:	e0c5      	b.n	80070d2 <_strtod_l+0x32a>
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4a:	4303      	orrs	r3, r0
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	428b      	cmp	r3, r1
 8006f50:	d090      	beq.n	8006e74 <_strtod_l+0xcc>
 8006f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f54:	9308      	str	r3, [sp, #32]
 8006f56:	3301      	adds	r3, #1
 8006f58:	9321      	str	r3, [sp, #132]	; 0x84
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	785b      	ldrb	r3, [r3, #1]
 8006f5e:	2b2b      	cmp	r3, #43	; 0x2b
 8006f60:	d075      	beq.n	800704e <_strtod_l+0x2a6>
 8006f62:	000c      	movs	r4, r1
 8006f64:	2b2d      	cmp	r3, #45	; 0x2d
 8006f66:	d178      	bne.n	800705a <_strtod_l+0x2b2>
 8006f68:	2401      	movs	r4, #1
 8006f6a:	e071      	b.n	8007050 <_strtod_l+0x2a8>
 8006f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f6e:	2908      	cmp	r1, #8
 8006f70:	dc09      	bgt.n	8006f86 <_strtod_l+0x1de>
 8006f72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f74:	4351      	muls	r1, r2
 8006f76:	185b      	adds	r3, r3, r1
 8006f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	3301      	adds	r3, #1
 8006f80:	9309      	str	r3, [sp, #36]	; 0x24
 8006f82:	9021      	str	r0, [sp, #132]	; 0x84
 8006f84:	e7c3      	b.n	8006f0e <_strtod_l+0x166>
 8006f86:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006f88:	4351      	muls	r1, r2
 8006f8a:	185b      	adds	r3, r3, r1
 8006f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8006f8e:	e7f4      	b.n	8006f7a <_strtod_l+0x1d2>
 8006f90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f94:	191c      	adds	r4, r3, r4
 8006f96:	9421      	str	r4, [sp, #132]	; 0x84
 8006f98:	7823      	ldrb	r3, [r4, #0]
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	d039      	beq.n	8007012 <_strtod_l+0x26a>
 8006f9e:	900c      	str	r0, [sp, #48]	; 0x30
 8006fa0:	9206      	str	r2, [sp, #24]
 8006fa2:	001a      	movs	r2, r3
 8006fa4:	3a30      	subs	r2, #48	; 0x30
 8006fa6:	2a09      	cmp	r2, #9
 8006fa8:	d912      	bls.n	8006fd0 <_strtod_l+0x228>
 8006faa:	2201      	movs	r2, #1
 8006fac:	4694      	mov	ip, r2
 8006fae:	e7c1      	b.n	8006f34 <_strtod_l+0x18c>
 8006fb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	9221      	str	r2, [sp, #132]	; 0x84
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	2b30      	cmp	r3, #48	; 0x30
 8006fbc:	d0f8      	beq.n	8006fb0 <_strtod_l+0x208>
 8006fbe:	001a      	movs	r2, r3
 8006fc0:	3a31      	subs	r2, #49	; 0x31
 8006fc2:	2a08      	cmp	r2, #8
 8006fc4:	d83e      	bhi.n	8007044 <_strtod_l+0x29c>
 8006fc6:	900c      	str	r0, [sp, #48]	; 0x30
 8006fc8:	2000      	movs	r0, #0
 8006fca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fcc:	9006      	str	r0, [sp, #24]
 8006fce:	9211      	str	r2, [sp, #68]	; 0x44
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	9906      	ldr	r1, [sp, #24]
 8006fd4:	1c44      	adds	r4, r0, #1
 8006fd6:	3a30      	subs	r2, #48	; 0x30
 8006fd8:	2b30      	cmp	r3, #48	; 0x30
 8006fda:	d013      	beq.n	8007004 <_strtod_l+0x25c>
 8006fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fde:	191b      	adds	r3, r3, r4
 8006fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8006fe2:	1844      	adds	r4, r0, r1
 8006fe4:	000b      	movs	r3, r1
 8006fe6:	210a      	movs	r1, #10
 8006fe8:	429c      	cmp	r4, r3
 8006fea:	d114      	bne.n	8007016 <_strtod_l+0x26e>
 8006fec:	9b06      	ldr	r3, [sp, #24]
 8006fee:	1c59      	adds	r1, r3, #1
 8006ff0:	1809      	adds	r1, r1, r0
 8006ff2:	1818      	adds	r0, r3, r0
 8006ff4:	2808      	cmp	r0, #8
 8006ff6:	dc1c      	bgt.n	8007032 <_strtod_l+0x28a>
 8006ff8:	230a      	movs	r3, #10
 8006ffa:	2400      	movs	r4, #0
 8006ffc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ffe:	4343      	muls	r3, r0
 8007000:	18d3      	adds	r3, r2, r3
 8007002:	930b      	str	r3, [sp, #44]	; 0x2c
 8007004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007006:	0020      	movs	r0, r4
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	9221      	str	r2, [sp, #132]	; 0x84
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	9106      	str	r1, [sp, #24]
 8007010:	e7c7      	b.n	8006fa2 <_strtod_l+0x1fa>
 8007012:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007014:	e7d1      	b.n	8006fba <_strtod_l+0x212>
 8007016:	2b08      	cmp	r3, #8
 8007018:	dc04      	bgt.n	8007024 <_strtod_l+0x27c>
 800701a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800701c:	434d      	muls	r5, r1
 800701e:	950b      	str	r5, [sp, #44]	; 0x2c
 8007020:	3301      	adds	r3, #1
 8007022:	e7e1      	b.n	8006fe8 <_strtod_l+0x240>
 8007024:	1c5d      	adds	r5, r3, #1
 8007026:	2d10      	cmp	r5, #16
 8007028:	dcfa      	bgt.n	8007020 <_strtod_l+0x278>
 800702a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800702c:	434d      	muls	r5, r1
 800702e:	950e      	str	r5, [sp, #56]	; 0x38
 8007030:	e7f6      	b.n	8007020 <_strtod_l+0x278>
 8007032:	2400      	movs	r4, #0
 8007034:	2910      	cmp	r1, #16
 8007036:	dce5      	bgt.n	8007004 <_strtod_l+0x25c>
 8007038:	230a      	movs	r3, #10
 800703a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800703c:	4343      	muls	r3, r0
 800703e:	18d3      	adds	r3, r2, r3
 8007040:	930e      	str	r3, [sp, #56]	; 0x38
 8007042:	e7df      	b.n	8007004 <_strtod_l+0x25c>
 8007044:	2200      	movs	r2, #0
 8007046:	920c      	str	r2, [sp, #48]	; 0x30
 8007048:	9206      	str	r2, [sp, #24]
 800704a:	3201      	adds	r2, #1
 800704c:	e7ae      	b.n	8006fac <_strtod_l+0x204>
 800704e:	2400      	movs	r4, #0
 8007050:	9b08      	ldr	r3, [sp, #32]
 8007052:	3302      	adds	r3, #2
 8007054:	9321      	str	r3, [sp, #132]	; 0x84
 8007056:	9b08      	ldr	r3, [sp, #32]
 8007058:	789b      	ldrb	r3, [r3, #2]
 800705a:	001a      	movs	r2, r3
 800705c:	3a30      	subs	r2, #48	; 0x30
 800705e:	2a09      	cmp	r2, #9
 8007060:	d914      	bls.n	800708c <_strtod_l+0x2e4>
 8007062:	9a08      	ldr	r2, [sp, #32]
 8007064:	9221      	str	r2, [sp, #132]	; 0x84
 8007066:	2200      	movs	r2, #0
 8007068:	e032      	b.n	80070d0 <_strtod_l+0x328>
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	0800ae00 	.word	0x0800ae00
 8007070:	0800abac 	.word	0x0800abac
 8007074:	ffefffff 	.word	0xffefffff
 8007078:	00000433 	.word	0x00000433
 800707c:	7ff00000 	.word	0x7ff00000
 8007080:	7fffffff 	.word	0x7fffffff
 8007084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	9221      	str	r2, [sp, #132]	; 0x84
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b30      	cmp	r3, #48	; 0x30
 800708e:	d0f9      	beq.n	8007084 <_strtod_l+0x2dc>
 8007090:	2200      	movs	r2, #0
 8007092:	9207      	str	r2, [sp, #28]
 8007094:	001a      	movs	r2, r3
 8007096:	3a31      	subs	r2, #49	; 0x31
 8007098:	2a08      	cmp	r2, #8
 800709a:	d81a      	bhi.n	80070d2 <_strtod_l+0x32a>
 800709c:	3b30      	subs	r3, #48	; 0x30
 800709e:	001a      	movs	r2, r3
 80070a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a2:	9307      	str	r3, [sp, #28]
 80070a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a6:	1c59      	adds	r1, r3, #1
 80070a8:	9121      	str	r1, [sp, #132]	; 0x84
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	001d      	movs	r5, r3
 80070ae:	3d30      	subs	r5, #48	; 0x30
 80070b0:	2d09      	cmp	r5, #9
 80070b2:	d939      	bls.n	8007128 <_strtod_l+0x380>
 80070b4:	9d07      	ldr	r5, [sp, #28]
 80070b6:	1b49      	subs	r1, r1, r5
 80070b8:	4daf      	ldr	r5, [pc, #700]	; (8007378 <_strtod_l+0x5d0>)
 80070ba:	9507      	str	r5, [sp, #28]
 80070bc:	2908      	cmp	r1, #8
 80070be:	dc03      	bgt.n	80070c8 <_strtod_l+0x320>
 80070c0:	9207      	str	r2, [sp, #28]
 80070c2:	42aa      	cmp	r2, r5
 80070c4:	dd00      	ble.n	80070c8 <_strtod_l+0x320>
 80070c6:	9507      	str	r5, [sp, #28]
 80070c8:	2c00      	cmp	r4, #0
 80070ca:	d002      	beq.n	80070d2 <_strtod_l+0x32a>
 80070cc:	9a07      	ldr	r2, [sp, #28]
 80070ce:	4252      	negs	r2, r2
 80070d0:	9207      	str	r2, [sp, #28]
 80070d2:	9a06      	ldr	r2, [sp, #24]
 80070d4:	2a00      	cmp	r2, #0
 80070d6:	d14b      	bne.n	8007170 <_strtod_l+0x3c8>
 80070d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070da:	4310      	orrs	r0, r2
 80070dc:	d000      	beq.n	80070e0 <_strtod_l+0x338>
 80070de:	e6aa      	b.n	8006e36 <_strtod_l+0x8e>
 80070e0:	4662      	mov	r2, ip
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	d000      	beq.n	80070e8 <_strtod_l+0x340>
 80070e6:	e6c5      	b.n	8006e74 <_strtod_l+0xcc>
 80070e8:	2b69      	cmp	r3, #105	; 0x69
 80070ea:	d025      	beq.n	8007138 <_strtod_l+0x390>
 80070ec:	dc21      	bgt.n	8007132 <_strtod_l+0x38a>
 80070ee:	2b49      	cmp	r3, #73	; 0x49
 80070f0:	d022      	beq.n	8007138 <_strtod_l+0x390>
 80070f2:	2b4e      	cmp	r3, #78	; 0x4e
 80070f4:	d000      	beq.n	80070f8 <_strtod_l+0x350>
 80070f6:	e6bd      	b.n	8006e74 <_strtod_l+0xcc>
 80070f8:	49a0      	ldr	r1, [pc, #640]	; (800737c <_strtod_l+0x5d4>)
 80070fa:	a821      	add	r0, sp, #132	; 0x84
 80070fc:	f001 fe74 	bl	8008de8 <__match>
 8007100:	2800      	cmp	r0, #0
 8007102:	d100      	bne.n	8007106 <_strtod_l+0x35e>
 8007104:	e6b6      	b.n	8006e74 <_strtod_l+0xcc>
 8007106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b28      	cmp	r3, #40	; 0x28
 800710c:	d12a      	bne.n	8007164 <_strtod_l+0x3bc>
 800710e:	499c      	ldr	r1, [pc, #624]	; (8007380 <_strtod_l+0x5d8>)
 8007110:	aa24      	add	r2, sp, #144	; 0x90
 8007112:	a821      	add	r0, sp, #132	; 0x84
 8007114:	f001 fe7c 	bl	8008e10 <__hexnan>
 8007118:	2805      	cmp	r0, #5
 800711a:	d123      	bne.n	8007164 <_strtod_l+0x3bc>
 800711c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800711e:	4a99      	ldr	r2, [pc, #612]	; (8007384 <_strtod_l+0x5dc>)
 8007120:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007122:	431a      	orrs	r2, r3
 8007124:	0017      	movs	r7, r2
 8007126:	e686      	b.n	8006e36 <_strtod_l+0x8e>
 8007128:	210a      	movs	r1, #10
 800712a:	434a      	muls	r2, r1
 800712c:	18d2      	adds	r2, r2, r3
 800712e:	3a30      	subs	r2, #48	; 0x30
 8007130:	e7b8      	b.n	80070a4 <_strtod_l+0x2fc>
 8007132:	2b6e      	cmp	r3, #110	; 0x6e
 8007134:	d0e0      	beq.n	80070f8 <_strtod_l+0x350>
 8007136:	e69d      	b.n	8006e74 <_strtod_l+0xcc>
 8007138:	4993      	ldr	r1, [pc, #588]	; (8007388 <_strtod_l+0x5e0>)
 800713a:	a821      	add	r0, sp, #132	; 0x84
 800713c:	f001 fe54 	bl	8008de8 <__match>
 8007140:	2800      	cmp	r0, #0
 8007142:	d100      	bne.n	8007146 <_strtod_l+0x39e>
 8007144:	e696      	b.n	8006e74 <_strtod_l+0xcc>
 8007146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007148:	4990      	ldr	r1, [pc, #576]	; (800738c <_strtod_l+0x5e4>)
 800714a:	3b01      	subs	r3, #1
 800714c:	a821      	add	r0, sp, #132	; 0x84
 800714e:	9321      	str	r3, [sp, #132]	; 0x84
 8007150:	f001 fe4a 	bl	8008de8 <__match>
 8007154:	2800      	cmp	r0, #0
 8007156:	d102      	bne.n	800715e <_strtod_l+0x3b6>
 8007158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800715a:	3301      	adds	r3, #1
 800715c:	9321      	str	r3, [sp, #132]	; 0x84
 800715e:	2600      	movs	r6, #0
 8007160:	4f88      	ldr	r7, [pc, #544]	; (8007384 <_strtod_l+0x5dc>)
 8007162:	e668      	b.n	8006e36 <_strtod_l+0x8e>
 8007164:	488a      	ldr	r0, [pc, #552]	; (8007390 <_strtod_l+0x5e8>)
 8007166:	f002 fe0f 	bl	8009d88 <nan>
 800716a:	0006      	movs	r6, r0
 800716c:	000f      	movs	r7, r1
 800716e:	e662      	b.n	8006e36 <_strtod_l+0x8e>
 8007170:	9b07      	ldr	r3, [sp, #28]
 8007172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	930a      	str	r3, [sp, #40]	; 0x28
 8007178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <_strtod_l+0x3da>
 800717e:	9b06      	ldr	r3, [sp, #24]
 8007180:	9309      	str	r3, [sp, #36]	; 0x24
 8007182:	9c06      	ldr	r4, [sp, #24]
 8007184:	2c10      	cmp	r4, #16
 8007186:	dd00      	ble.n	800718a <_strtod_l+0x3e2>
 8007188:	2410      	movs	r4, #16
 800718a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800718c:	f7fb f940 	bl	8002410 <__aeabi_ui2d>
 8007190:	9b06      	ldr	r3, [sp, #24]
 8007192:	0006      	movs	r6, r0
 8007194:	000f      	movs	r7, r1
 8007196:	2b09      	cmp	r3, #9
 8007198:	dd15      	ble.n	80071c6 <_strtod_l+0x41e>
 800719a:	0022      	movs	r2, r4
 800719c:	4b7d      	ldr	r3, [pc, #500]	; (8007394 <_strtod_l+0x5ec>)
 800719e:	3a09      	subs	r2, #9
 80071a0:	00d2      	lsls	r2, r2, #3
 80071a2:	189b      	adds	r3, r3, r2
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f7fa fab0 	bl	800170c <__aeabi_dmul>
 80071ac:	0006      	movs	r6, r0
 80071ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80071b0:	000f      	movs	r7, r1
 80071b2:	f7fb f92d 	bl	8002410 <__aeabi_ui2d>
 80071b6:	0002      	movs	r2, r0
 80071b8:	000b      	movs	r3, r1
 80071ba:	0030      	movs	r0, r6
 80071bc:	0039      	movs	r1, r7
 80071be:	f7f9 fb35 	bl	800082c <__aeabi_dadd>
 80071c2:	0006      	movs	r6, r0
 80071c4:	000f      	movs	r7, r1
 80071c6:	9b06      	ldr	r3, [sp, #24]
 80071c8:	2b0f      	cmp	r3, #15
 80071ca:	dc39      	bgt.n	8007240 <_strtod_l+0x498>
 80071cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d100      	bne.n	80071d4 <_strtod_l+0x42c>
 80071d2:	e630      	b.n	8006e36 <_strtod_l+0x8e>
 80071d4:	dd24      	ble.n	8007220 <_strtod_l+0x478>
 80071d6:	2b16      	cmp	r3, #22
 80071d8:	dc09      	bgt.n	80071ee <_strtod_l+0x446>
 80071da:	00dd      	lsls	r5, r3, #3
 80071dc:	0032      	movs	r2, r6
 80071de:	003b      	movs	r3, r7
 80071e0:	4c6c      	ldr	r4, [pc, #432]	; (8007394 <_strtod_l+0x5ec>)
 80071e2:	1964      	adds	r4, r4, r5
 80071e4:	6820      	ldr	r0, [r4, #0]
 80071e6:	6861      	ldr	r1, [r4, #4]
 80071e8:	f7fa fa90 	bl	800170c <__aeabi_dmul>
 80071ec:	e7bd      	b.n	800716a <_strtod_l+0x3c2>
 80071ee:	2325      	movs	r3, #37	; 0x25
 80071f0:	9a06      	ldr	r2, [sp, #24]
 80071f2:	1a9b      	subs	r3, r3, r2
 80071f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f6:	4293      	cmp	r3, r2
 80071f8:	db22      	blt.n	8007240 <_strtod_l+0x498>
 80071fa:	240f      	movs	r4, #15
 80071fc:	9b06      	ldr	r3, [sp, #24]
 80071fe:	4d65      	ldr	r5, [pc, #404]	; (8007394 <_strtod_l+0x5ec>)
 8007200:	1ae4      	subs	r4, r4, r3
 8007202:	00e1      	lsls	r1, r4, #3
 8007204:	1869      	adds	r1, r5, r1
 8007206:	0032      	movs	r2, r6
 8007208:	6808      	ldr	r0, [r1, #0]
 800720a:	6849      	ldr	r1, [r1, #4]
 800720c:	003b      	movs	r3, r7
 800720e:	f7fa fa7d 	bl	800170c <__aeabi_dmul>
 8007212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007214:	1b1c      	subs	r4, r3, r4
 8007216:	00e4      	lsls	r4, r4, #3
 8007218:	192c      	adds	r4, r5, r4
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	e7e3      	b.n	80071e8 <_strtod_l+0x440>
 8007220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007222:	3316      	adds	r3, #22
 8007224:	db0c      	blt.n	8007240 <_strtod_l+0x498>
 8007226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007228:	9a07      	ldr	r2, [sp, #28]
 800722a:	0030      	movs	r0, r6
 800722c:	1a9a      	subs	r2, r3, r2
 800722e:	4b59      	ldr	r3, [pc, #356]	; (8007394 <_strtod_l+0x5ec>)
 8007230:	00d2      	lsls	r2, r2, #3
 8007232:	189b      	adds	r3, r3, r2
 8007234:	0039      	movs	r1, r7
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f7f9 fe61 	bl	8000f00 <__aeabi_ddiv>
 800723e:	e794      	b.n	800716a <_strtod_l+0x3c2>
 8007240:	9b06      	ldr	r3, [sp, #24]
 8007242:	1b1c      	subs	r4, r3, r4
 8007244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007246:	18e4      	adds	r4, r4, r3
 8007248:	2c00      	cmp	r4, #0
 800724a:	dd70      	ble.n	800732e <_strtod_l+0x586>
 800724c:	230f      	movs	r3, #15
 800724e:	0021      	movs	r1, r4
 8007250:	4019      	ands	r1, r3
 8007252:	421c      	tst	r4, r3
 8007254:	d00a      	beq.n	800726c <_strtod_l+0x4c4>
 8007256:	00cb      	lsls	r3, r1, #3
 8007258:	494e      	ldr	r1, [pc, #312]	; (8007394 <_strtod_l+0x5ec>)
 800725a:	0032      	movs	r2, r6
 800725c:	18c9      	adds	r1, r1, r3
 800725e:	6808      	ldr	r0, [r1, #0]
 8007260:	6849      	ldr	r1, [r1, #4]
 8007262:	003b      	movs	r3, r7
 8007264:	f7fa fa52 	bl	800170c <__aeabi_dmul>
 8007268:	0006      	movs	r6, r0
 800726a:	000f      	movs	r7, r1
 800726c:	230f      	movs	r3, #15
 800726e:	439c      	bics	r4, r3
 8007270:	d048      	beq.n	8007304 <_strtod_l+0x55c>
 8007272:	3326      	adds	r3, #38	; 0x26
 8007274:	33ff      	adds	r3, #255	; 0xff
 8007276:	429c      	cmp	r4, r3
 8007278:	dd22      	ble.n	80072c0 <_strtod_l+0x518>
 800727a:	2300      	movs	r3, #0
 800727c:	9306      	str	r3, [sp, #24]
 800727e:	9307      	str	r3, [sp, #28]
 8007280:	930b      	str	r3, [sp, #44]	; 0x2c
 8007282:	9309      	str	r3, [sp, #36]	; 0x24
 8007284:	2322      	movs	r3, #34	; 0x22
 8007286:	2600      	movs	r6, #0
 8007288:	9a05      	ldr	r2, [sp, #20]
 800728a:	4f3e      	ldr	r7, [pc, #248]	; (8007384 <_strtod_l+0x5dc>)
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007290:	42b3      	cmp	r3, r6
 8007292:	d100      	bne.n	8007296 <_strtod_l+0x4ee>
 8007294:	e5cf      	b.n	8006e36 <_strtod_l+0x8e>
 8007296:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007298:	9805      	ldr	r0, [sp, #20]
 800729a:	f001 fed7 	bl	800904c <_Bfree>
 800729e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072a0:	9805      	ldr	r0, [sp, #20]
 80072a2:	f001 fed3 	bl	800904c <_Bfree>
 80072a6:	9907      	ldr	r1, [sp, #28]
 80072a8:	9805      	ldr	r0, [sp, #20]
 80072aa:	f001 fecf 	bl	800904c <_Bfree>
 80072ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072b0:	9805      	ldr	r0, [sp, #20]
 80072b2:	f001 fecb 	bl	800904c <_Bfree>
 80072b6:	9906      	ldr	r1, [sp, #24]
 80072b8:	9805      	ldr	r0, [sp, #20]
 80072ba:	f001 fec7 	bl	800904c <_Bfree>
 80072be:	e5ba      	b.n	8006e36 <_strtod_l+0x8e>
 80072c0:	2300      	movs	r3, #0
 80072c2:	0030      	movs	r0, r6
 80072c4:	0039      	movs	r1, r7
 80072c6:	001d      	movs	r5, r3
 80072c8:	1124      	asrs	r4, r4, #4
 80072ca:	2c01      	cmp	r4, #1
 80072cc:	dc1d      	bgt.n	800730a <_strtod_l+0x562>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <_strtod_l+0x52e>
 80072d2:	0006      	movs	r6, r0
 80072d4:	000f      	movs	r7, r1
 80072d6:	4b30      	ldr	r3, [pc, #192]	; (8007398 <_strtod_l+0x5f0>)
 80072d8:	00ed      	lsls	r5, r5, #3
 80072da:	18ff      	adds	r7, r7, r3
 80072dc:	4b2f      	ldr	r3, [pc, #188]	; (800739c <_strtod_l+0x5f4>)
 80072de:	0032      	movs	r2, r6
 80072e0:	195d      	adds	r5, r3, r5
 80072e2:	6828      	ldr	r0, [r5, #0]
 80072e4:	6869      	ldr	r1, [r5, #4]
 80072e6:	003b      	movs	r3, r7
 80072e8:	f7fa fa10 	bl	800170c <__aeabi_dmul>
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <_strtod_l+0x5dc>)
 80072ee:	4a2c      	ldr	r2, [pc, #176]	; (80073a0 <_strtod_l+0x5f8>)
 80072f0:	0006      	movs	r6, r0
 80072f2:	400b      	ands	r3, r1
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d8c0      	bhi.n	800727a <_strtod_l+0x4d2>
 80072f8:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <_strtod_l+0x5fc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d913      	bls.n	8007326 <_strtod_l+0x57e>
 80072fe:	2601      	movs	r6, #1
 8007300:	4f29      	ldr	r7, [pc, #164]	; (80073a8 <_strtod_l+0x600>)
 8007302:	4276      	negs	r6, r6
 8007304:	2300      	movs	r3, #0
 8007306:	9308      	str	r3, [sp, #32]
 8007308:	e087      	b.n	800741a <_strtod_l+0x672>
 800730a:	2201      	movs	r2, #1
 800730c:	4214      	tst	r4, r2
 800730e:	d007      	beq.n	8007320 <_strtod_l+0x578>
 8007310:	4a22      	ldr	r2, [pc, #136]	; (800739c <_strtod_l+0x5f4>)
 8007312:	00eb      	lsls	r3, r5, #3
 8007314:	189b      	adds	r3, r3, r2
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f7fa f9f7 	bl	800170c <__aeabi_dmul>
 800731e:	2301      	movs	r3, #1
 8007320:	3501      	adds	r5, #1
 8007322:	1064      	asrs	r4, r4, #1
 8007324:	e7d1      	b.n	80072ca <_strtod_l+0x522>
 8007326:	23d4      	movs	r3, #212	; 0xd4
 8007328:	049b      	lsls	r3, r3, #18
 800732a:	18cf      	adds	r7, r1, r3
 800732c:	e7ea      	b.n	8007304 <_strtod_l+0x55c>
 800732e:	2c00      	cmp	r4, #0
 8007330:	d0e8      	beq.n	8007304 <_strtod_l+0x55c>
 8007332:	4264      	negs	r4, r4
 8007334:	220f      	movs	r2, #15
 8007336:	0023      	movs	r3, r4
 8007338:	4013      	ands	r3, r2
 800733a:	4214      	tst	r4, r2
 800733c:	d00a      	beq.n	8007354 <_strtod_l+0x5ac>
 800733e:	00da      	lsls	r2, r3, #3
 8007340:	4b14      	ldr	r3, [pc, #80]	; (8007394 <_strtod_l+0x5ec>)
 8007342:	0030      	movs	r0, r6
 8007344:	189b      	adds	r3, r3, r2
 8007346:	0039      	movs	r1, r7
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f7f9 fdd8 	bl	8000f00 <__aeabi_ddiv>
 8007350:	0006      	movs	r6, r0
 8007352:	000f      	movs	r7, r1
 8007354:	1124      	asrs	r4, r4, #4
 8007356:	d0d5      	beq.n	8007304 <_strtod_l+0x55c>
 8007358:	2c1f      	cmp	r4, #31
 800735a:	dd27      	ble.n	80073ac <_strtod_l+0x604>
 800735c:	2300      	movs	r3, #0
 800735e:	9306      	str	r3, [sp, #24]
 8007360:	9307      	str	r3, [sp, #28]
 8007362:	930b      	str	r3, [sp, #44]	; 0x2c
 8007364:	9309      	str	r3, [sp, #36]	; 0x24
 8007366:	2322      	movs	r3, #34	; 0x22
 8007368:	9a05      	ldr	r2, [sp, #20]
 800736a:	2600      	movs	r6, #0
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007370:	2700      	movs	r7, #0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d18f      	bne.n	8007296 <_strtod_l+0x4ee>
 8007376:	e55e      	b.n	8006e36 <_strtod_l+0x8e>
 8007378:	00004e1f 	.word	0x00004e1f
 800737c:	0800ab7d 	.word	0x0800ab7d
 8007380:	0800abc0 	.word	0x0800abc0
 8007384:	7ff00000 	.word	0x7ff00000
 8007388:	0800ab75 	.word	0x0800ab75
 800738c:	0800ad04 	.word	0x0800ad04
 8007390:	0800afc0 	.word	0x0800afc0
 8007394:	0800aea0 	.word	0x0800aea0
 8007398:	fcb00000 	.word	0xfcb00000
 800739c:	0800ae78 	.word	0x0800ae78
 80073a0:	7ca00000 	.word	0x7ca00000
 80073a4:	7c900000 	.word	0x7c900000
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	2310      	movs	r3, #16
 80073ae:	0022      	movs	r2, r4
 80073b0:	401a      	ands	r2, r3
 80073b2:	9208      	str	r2, [sp, #32]
 80073b4:	421c      	tst	r4, r3
 80073b6:	d001      	beq.n	80073bc <_strtod_l+0x614>
 80073b8:	335a      	adds	r3, #90	; 0x5a
 80073ba:	9308      	str	r3, [sp, #32]
 80073bc:	0030      	movs	r0, r6
 80073be:	0039      	movs	r1, r7
 80073c0:	2300      	movs	r3, #0
 80073c2:	4dca      	ldr	r5, [pc, #808]	; (80076ec <_strtod_l+0x944>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	4214      	tst	r4, r2
 80073c8:	d004      	beq.n	80073d4 <_strtod_l+0x62c>
 80073ca:	682a      	ldr	r2, [r5, #0]
 80073cc:	686b      	ldr	r3, [r5, #4]
 80073ce:	f7fa f99d 	bl	800170c <__aeabi_dmul>
 80073d2:	2301      	movs	r3, #1
 80073d4:	1064      	asrs	r4, r4, #1
 80073d6:	3508      	adds	r5, #8
 80073d8:	2c00      	cmp	r4, #0
 80073da:	d1f3      	bne.n	80073c4 <_strtod_l+0x61c>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <_strtod_l+0x63c>
 80073e0:	0006      	movs	r6, r0
 80073e2:	000f      	movs	r7, r1
 80073e4:	9b08      	ldr	r3, [sp, #32]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00f      	beq.n	800740a <_strtod_l+0x662>
 80073ea:	236b      	movs	r3, #107	; 0x6b
 80073ec:	0079      	lsls	r1, r7, #1
 80073ee:	0d49      	lsrs	r1, r1, #21
 80073f0:	003a      	movs	r2, r7
 80073f2:	1a5b      	subs	r3, r3, r1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd08      	ble.n	800740a <_strtod_l+0x662>
 80073f8:	2b1f      	cmp	r3, #31
 80073fa:	dc00      	bgt.n	80073fe <_strtod_l+0x656>
 80073fc:	e126      	b.n	800764c <_strtod_l+0x8a4>
 80073fe:	2600      	movs	r6, #0
 8007400:	2b34      	cmp	r3, #52	; 0x34
 8007402:	dc00      	bgt.n	8007406 <_strtod_l+0x65e>
 8007404:	e11b      	b.n	800763e <_strtod_l+0x896>
 8007406:	27dc      	movs	r7, #220	; 0xdc
 8007408:	04bf      	lsls	r7, r7, #18
 800740a:	2200      	movs	r2, #0
 800740c:	2300      	movs	r3, #0
 800740e:	0030      	movs	r0, r6
 8007410:	0039      	movs	r1, r7
 8007412:	f7f9 f81b 	bl	800044c <__aeabi_dcmpeq>
 8007416:	2800      	cmp	r0, #0
 8007418:	d1a0      	bne.n	800735c <_strtod_l+0x5b4>
 800741a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007422:	9b06      	ldr	r3, [sp, #24]
 8007424:	9805      	ldr	r0, [sp, #20]
 8007426:	f001 fe79 	bl	800911c <__s2b>
 800742a:	900b      	str	r0, [sp, #44]	; 0x2c
 800742c:	2800      	cmp	r0, #0
 800742e:	d100      	bne.n	8007432 <_strtod_l+0x68a>
 8007430:	e723      	b.n	800727a <_strtod_l+0x4d2>
 8007432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007434:	9907      	ldr	r1, [sp, #28]
 8007436:	17da      	asrs	r2, r3, #31
 8007438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800743a:	1a5b      	subs	r3, r3, r1
 800743c:	401a      	ands	r2, r3
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	9215      	str	r2, [sp, #84]	; 0x54
 8007442:	43db      	mvns	r3, r3
 8007444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007446:	17db      	asrs	r3, r3, #31
 8007448:	401a      	ands	r2, r3
 800744a:	2300      	movs	r3, #0
 800744c:	921c      	str	r2, [sp, #112]	; 0x70
 800744e:	9306      	str	r3, [sp, #24]
 8007450:	9307      	str	r3, [sp, #28]
 8007452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007454:	9805      	ldr	r0, [sp, #20]
 8007456:	6859      	ldr	r1, [r3, #4]
 8007458:	f001 fdb4 	bl	8008fc4 <_Balloc>
 800745c:	9009      	str	r0, [sp, #36]	; 0x24
 800745e:	2800      	cmp	r0, #0
 8007460:	d100      	bne.n	8007464 <_strtod_l+0x6bc>
 8007462:	e70f      	b.n	8007284 <_strtod_l+0x4dc>
 8007464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007466:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	310c      	adds	r1, #12
 800746c:	1c9a      	adds	r2, r3, #2
 800746e:	0092      	lsls	r2, r2, #2
 8007470:	300c      	adds	r0, #12
 8007472:	930c      	str	r3, [sp, #48]	; 0x30
 8007474:	f001 fd9d 	bl	8008fb2 <memcpy>
 8007478:	ab24      	add	r3, sp, #144	; 0x90
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	ab23      	add	r3, sp, #140	; 0x8c
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	0032      	movs	r2, r6
 8007482:	003b      	movs	r3, r7
 8007484:	9805      	ldr	r0, [sp, #20]
 8007486:	960e      	str	r6, [sp, #56]	; 0x38
 8007488:	970f      	str	r7, [sp, #60]	; 0x3c
 800748a:	f002 f995 	bl	80097b8 <__d2b>
 800748e:	9022      	str	r0, [sp, #136]	; 0x88
 8007490:	2800      	cmp	r0, #0
 8007492:	d100      	bne.n	8007496 <_strtod_l+0x6ee>
 8007494:	e6f6      	b.n	8007284 <_strtod_l+0x4dc>
 8007496:	2101      	movs	r1, #1
 8007498:	9805      	ldr	r0, [sp, #20]
 800749a:	f001 fed3 	bl	8009244 <__i2b>
 800749e:	9007      	str	r0, [sp, #28]
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d100      	bne.n	80074a6 <_strtod_l+0x6fe>
 80074a4:	e6ee      	b.n	8007284 <_strtod_l+0x4dc>
 80074a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	da00      	bge.n	80074ae <_strtod_l+0x706>
 80074ac:	e0d3      	b.n	8007656 <_strtod_l+0x8ae>
 80074ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074b0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80074b2:	189d      	adds	r5, r3, r2
 80074b4:	9908      	ldr	r1, [sp, #32]
 80074b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074b8:	1a5b      	subs	r3, r3, r1
 80074ba:	2136      	movs	r1, #54	; 0x36
 80074bc:	189b      	adds	r3, r3, r2
 80074be:	1a8a      	subs	r2, r1, r2
 80074c0:	498b      	ldr	r1, [pc, #556]	; (80076f0 <_strtod_l+0x948>)
 80074c2:	3b01      	subs	r3, #1
 80074c4:	2001      	movs	r0, #1
 80074c6:	428b      	cmp	r3, r1
 80074c8:	db00      	blt.n	80074cc <_strtod_l+0x724>
 80074ca:	e0cf      	b.n	800766c <_strtod_l+0x8c4>
 80074cc:	1ac9      	subs	r1, r1, r3
 80074ce:	1a52      	subs	r2, r2, r1
 80074d0:	291f      	cmp	r1, #31
 80074d2:	dd00      	ble.n	80074d6 <_strtod_l+0x72e>
 80074d4:	e0c3      	b.n	800765e <_strtod_l+0x8b6>
 80074d6:	4088      	lsls	r0, r1
 80074d8:	2300      	movs	r3, #0
 80074da:	9014      	str	r0, [sp, #80]	; 0x50
 80074dc:	9312      	str	r3, [sp, #72]	; 0x48
 80074de:	18ab      	adds	r3, r5, r2
 80074e0:	930c      	str	r3, [sp, #48]	; 0x30
 80074e2:	18a4      	adds	r4, r4, r2
 80074e4:	9b08      	ldr	r3, [sp, #32]
 80074e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074e8:	191c      	adds	r4, r3, r4
 80074ea:	002b      	movs	r3, r5
 80074ec:	4295      	cmp	r5, r2
 80074ee:	dd00      	ble.n	80074f2 <_strtod_l+0x74a>
 80074f0:	0013      	movs	r3, r2
 80074f2:	42a3      	cmp	r3, r4
 80074f4:	dd00      	ble.n	80074f8 <_strtod_l+0x750>
 80074f6:	0023      	movs	r3, r4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	dd04      	ble.n	8007506 <_strtod_l+0x75e>
 80074fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074fe:	1ae4      	subs	r4, r4, r3
 8007500:	1ad2      	subs	r2, r2, r3
 8007502:	920c      	str	r2, [sp, #48]	; 0x30
 8007504:	1aed      	subs	r5, r5, r3
 8007506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007508:	2b00      	cmp	r3, #0
 800750a:	dd17      	ble.n	800753c <_strtod_l+0x794>
 800750c:	001a      	movs	r2, r3
 800750e:	9907      	ldr	r1, [sp, #28]
 8007510:	9805      	ldr	r0, [sp, #20]
 8007512:	f001 ff5d 	bl	80093d0 <__pow5mult>
 8007516:	9007      	str	r0, [sp, #28]
 8007518:	2800      	cmp	r0, #0
 800751a:	d100      	bne.n	800751e <_strtod_l+0x776>
 800751c:	e6b2      	b.n	8007284 <_strtod_l+0x4dc>
 800751e:	0001      	movs	r1, r0
 8007520:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007522:	9805      	ldr	r0, [sp, #20]
 8007524:	f001 fea4 	bl	8009270 <__multiply>
 8007528:	9011      	str	r0, [sp, #68]	; 0x44
 800752a:	2800      	cmp	r0, #0
 800752c:	d100      	bne.n	8007530 <_strtod_l+0x788>
 800752e:	e6a9      	b.n	8007284 <_strtod_l+0x4dc>
 8007530:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007532:	9805      	ldr	r0, [sp, #20]
 8007534:	f001 fd8a 	bl	800904c <_Bfree>
 8007538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800753a:	9322      	str	r3, [sp, #136]	; 0x88
 800753c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800753e:	2b00      	cmp	r3, #0
 8007540:	dd00      	ble.n	8007544 <_strtod_l+0x79c>
 8007542:	e096      	b.n	8007672 <_strtod_l+0x8ca>
 8007544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007546:	2b00      	cmp	r3, #0
 8007548:	dd08      	ble.n	800755c <_strtod_l+0x7b4>
 800754a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800754c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800754e:	9805      	ldr	r0, [sp, #20]
 8007550:	f001 ff3e 	bl	80093d0 <__pow5mult>
 8007554:	9009      	str	r0, [sp, #36]	; 0x24
 8007556:	2800      	cmp	r0, #0
 8007558:	d100      	bne.n	800755c <_strtod_l+0x7b4>
 800755a:	e693      	b.n	8007284 <_strtod_l+0x4dc>
 800755c:	2c00      	cmp	r4, #0
 800755e:	dd08      	ble.n	8007572 <_strtod_l+0x7ca>
 8007560:	0022      	movs	r2, r4
 8007562:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007564:	9805      	ldr	r0, [sp, #20]
 8007566:	f001 ff8f 	bl	8009488 <__lshift>
 800756a:	9009      	str	r0, [sp, #36]	; 0x24
 800756c:	2800      	cmp	r0, #0
 800756e:	d100      	bne.n	8007572 <_strtod_l+0x7ca>
 8007570:	e688      	b.n	8007284 <_strtod_l+0x4dc>
 8007572:	2d00      	cmp	r5, #0
 8007574:	dd08      	ble.n	8007588 <_strtod_l+0x7e0>
 8007576:	002a      	movs	r2, r5
 8007578:	9907      	ldr	r1, [sp, #28]
 800757a:	9805      	ldr	r0, [sp, #20]
 800757c:	f001 ff84 	bl	8009488 <__lshift>
 8007580:	9007      	str	r0, [sp, #28]
 8007582:	2800      	cmp	r0, #0
 8007584:	d100      	bne.n	8007588 <_strtod_l+0x7e0>
 8007586:	e67d      	b.n	8007284 <_strtod_l+0x4dc>
 8007588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800758a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800758c:	9805      	ldr	r0, [sp, #20]
 800758e:	f002 f807 	bl	80095a0 <__mdiff>
 8007592:	9006      	str	r0, [sp, #24]
 8007594:	2800      	cmp	r0, #0
 8007596:	d100      	bne.n	800759a <_strtod_l+0x7f2>
 8007598:	e674      	b.n	8007284 <_strtod_l+0x4dc>
 800759a:	2200      	movs	r2, #0
 800759c:	68c3      	ldr	r3, [r0, #12]
 800759e:	9907      	ldr	r1, [sp, #28]
 80075a0:	60c2      	str	r2, [r0, #12]
 80075a2:	9311      	str	r3, [sp, #68]	; 0x44
 80075a4:	f001 ffe0 	bl	8009568 <__mcmp>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	da6c      	bge.n	8007686 <_strtod_l+0x8de>
 80075ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075ae:	4333      	orrs	r3, r6
 80075b0:	d000      	beq.n	80075b4 <_strtod_l+0x80c>
 80075b2:	e097      	b.n	80076e4 <_strtod_l+0x93c>
 80075b4:	033b      	lsls	r3, r7, #12
 80075b6:	d000      	beq.n	80075ba <_strtod_l+0x812>
 80075b8:	e094      	b.n	80076e4 <_strtod_l+0x93c>
 80075ba:	22d6      	movs	r2, #214	; 0xd6
 80075bc:	4b4d      	ldr	r3, [pc, #308]	; (80076f4 <_strtod_l+0x94c>)
 80075be:	04d2      	lsls	r2, r2, #19
 80075c0:	403b      	ands	r3, r7
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d800      	bhi.n	80075c8 <_strtod_l+0x820>
 80075c6:	e08d      	b.n	80076e4 <_strtod_l+0x93c>
 80075c8:	9b06      	ldr	r3, [sp, #24]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	930a      	str	r3, [sp, #40]	; 0x28
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <_strtod_l+0x836>
 80075d2:	9b06      	ldr	r3, [sp, #24]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	930a      	str	r3, [sp, #40]	; 0x28
 80075d8:	2b01      	cmp	r3, #1
 80075da:	dc00      	bgt.n	80075de <_strtod_l+0x836>
 80075dc:	e082      	b.n	80076e4 <_strtod_l+0x93c>
 80075de:	9906      	ldr	r1, [sp, #24]
 80075e0:	2201      	movs	r2, #1
 80075e2:	9805      	ldr	r0, [sp, #20]
 80075e4:	f001 ff50 	bl	8009488 <__lshift>
 80075e8:	9907      	ldr	r1, [sp, #28]
 80075ea:	9006      	str	r0, [sp, #24]
 80075ec:	f001 ffbc 	bl	8009568 <__mcmp>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	dd77      	ble.n	80076e4 <_strtod_l+0x93c>
 80075f4:	9908      	ldr	r1, [sp, #32]
 80075f6:	003b      	movs	r3, r7
 80075f8:	4a3e      	ldr	r2, [pc, #248]	; (80076f4 <_strtod_l+0x94c>)
 80075fa:	2900      	cmp	r1, #0
 80075fc:	d100      	bne.n	8007600 <_strtod_l+0x858>
 80075fe:	e09e      	b.n	800773e <_strtod_l+0x996>
 8007600:	0011      	movs	r1, r2
 8007602:	20d6      	movs	r0, #214	; 0xd6
 8007604:	4039      	ands	r1, r7
 8007606:	04c0      	lsls	r0, r0, #19
 8007608:	4281      	cmp	r1, r0
 800760a:	dd00      	ble.n	800760e <_strtod_l+0x866>
 800760c:	e097      	b.n	800773e <_strtod_l+0x996>
 800760e:	23dc      	movs	r3, #220	; 0xdc
 8007610:	049b      	lsls	r3, r3, #18
 8007612:	4299      	cmp	r1, r3
 8007614:	dc00      	bgt.n	8007618 <_strtod_l+0x870>
 8007616:	e6a6      	b.n	8007366 <_strtod_l+0x5be>
 8007618:	4b37      	ldr	r3, [pc, #220]	; (80076f8 <_strtod_l+0x950>)
 800761a:	0030      	movs	r0, r6
 800761c:	931b      	str	r3, [sp, #108]	; 0x6c
 800761e:	2300      	movs	r3, #0
 8007620:	931a      	str	r3, [sp, #104]	; 0x68
 8007622:	0039      	movs	r1, r7
 8007624:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007628:	f7fa f870 	bl	800170c <__aeabi_dmul>
 800762c:	0006      	movs	r6, r0
 800762e:	000f      	movs	r7, r1
 8007630:	4308      	orrs	r0, r1
 8007632:	d000      	beq.n	8007636 <_strtod_l+0x88e>
 8007634:	e62f      	b.n	8007296 <_strtod_l+0x4ee>
 8007636:	2322      	movs	r3, #34	; 0x22
 8007638:	9a05      	ldr	r2, [sp, #20]
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	e62b      	b.n	8007296 <_strtod_l+0x4ee>
 800763e:	2101      	movs	r1, #1
 8007640:	3b20      	subs	r3, #32
 8007642:	4249      	negs	r1, r1
 8007644:	4099      	lsls	r1, r3
 8007646:	400a      	ands	r2, r1
 8007648:	0017      	movs	r7, r2
 800764a:	e6de      	b.n	800740a <_strtod_l+0x662>
 800764c:	2201      	movs	r2, #1
 800764e:	4252      	negs	r2, r2
 8007650:	409a      	lsls	r2, r3
 8007652:	4016      	ands	r6, r2
 8007654:	e6d9      	b.n	800740a <_strtod_l+0x662>
 8007656:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007658:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800765a:	1ad4      	subs	r4, r2, r3
 800765c:	e72a      	b.n	80074b4 <_strtod_l+0x70c>
 800765e:	4927      	ldr	r1, [pc, #156]	; (80076fc <_strtod_l+0x954>)
 8007660:	1acb      	subs	r3, r1, r3
 8007662:	0001      	movs	r1, r0
 8007664:	4099      	lsls	r1, r3
 8007666:	9112      	str	r1, [sp, #72]	; 0x48
 8007668:	9014      	str	r0, [sp, #80]	; 0x50
 800766a:	e738      	b.n	80074de <_strtod_l+0x736>
 800766c:	2300      	movs	r3, #0
 800766e:	9312      	str	r3, [sp, #72]	; 0x48
 8007670:	e7fa      	b.n	8007668 <_strtod_l+0x8c0>
 8007672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007674:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007676:	9805      	ldr	r0, [sp, #20]
 8007678:	f001 ff06 	bl	8009488 <__lshift>
 800767c:	9022      	str	r0, [sp, #136]	; 0x88
 800767e:	2800      	cmp	r0, #0
 8007680:	d000      	beq.n	8007684 <_strtod_l+0x8dc>
 8007682:	e75f      	b.n	8007544 <_strtod_l+0x79c>
 8007684:	e5fe      	b.n	8007284 <_strtod_l+0x4dc>
 8007686:	970c      	str	r7, [sp, #48]	; 0x30
 8007688:	2800      	cmp	r0, #0
 800768a:	d176      	bne.n	800777a <_strtod_l+0x9d2>
 800768c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800768e:	033b      	lsls	r3, r7, #12
 8007690:	0b1b      	lsrs	r3, r3, #12
 8007692:	2a00      	cmp	r2, #0
 8007694:	d038      	beq.n	8007708 <_strtod_l+0x960>
 8007696:	4a1a      	ldr	r2, [pc, #104]	; (8007700 <_strtod_l+0x958>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d138      	bne.n	800770e <_strtod_l+0x966>
 800769c:	2201      	movs	r2, #1
 800769e:	9b08      	ldr	r3, [sp, #32]
 80076a0:	4252      	negs	r2, r2
 80076a2:	0031      	movs	r1, r6
 80076a4:	0010      	movs	r0, r2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <_strtod_l+0x91a>
 80076aa:	24d4      	movs	r4, #212	; 0xd4
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <_strtod_l+0x94c>)
 80076ae:	0010      	movs	r0, r2
 80076b0:	403b      	ands	r3, r7
 80076b2:	04e4      	lsls	r4, r4, #19
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	d804      	bhi.n	80076c2 <_strtod_l+0x91a>
 80076b8:	306c      	adds	r0, #108	; 0x6c
 80076ba:	0d1b      	lsrs	r3, r3, #20
 80076bc:	1ac3      	subs	r3, r0, r3
 80076be:	409a      	lsls	r2, r3
 80076c0:	0010      	movs	r0, r2
 80076c2:	4281      	cmp	r1, r0
 80076c4:	d123      	bne.n	800770e <_strtod_l+0x966>
 80076c6:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <_strtod_l+0x95c>)
 80076c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d102      	bne.n	80076d4 <_strtod_l+0x92c>
 80076ce:	1c4b      	adds	r3, r1, #1
 80076d0:	d100      	bne.n	80076d4 <_strtod_l+0x92c>
 80076d2:	e5d7      	b.n	8007284 <_strtod_l+0x4dc>
 80076d4:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <_strtod_l+0x94c>)
 80076d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076d8:	2600      	movs	r6, #0
 80076da:	401a      	ands	r2, r3
 80076dc:	0013      	movs	r3, r2
 80076de:	2280      	movs	r2, #128	; 0x80
 80076e0:	0352      	lsls	r2, r2, #13
 80076e2:	189f      	adds	r7, r3, r2
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d196      	bne.n	8007618 <_strtod_l+0x870>
 80076ea:	e5d4      	b.n	8007296 <_strtod_l+0x4ee>
 80076ec:	0800abd8 	.word	0x0800abd8
 80076f0:	fffffc02 	.word	0xfffffc02
 80076f4:	7ff00000 	.word	0x7ff00000
 80076f8:	39500000 	.word	0x39500000
 80076fc:	fffffbe2 	.word	0xfffffbe2
 8007700:	000fffff 	.word	0x000fffff
 8007704:	7fefffff 	.word	0x7fefffff
 8007708:	4333      	orrs	r3, r6
 800770a:	d100      	bne.n	800770e <_strtod_l+0x966>
 800770c:	e772      	b.n	80075f4 <_strtod_l+0x84c>
 800770e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01d      	beq.n	8007750 <_strtod_l+0x9a8>
 8007714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007716:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007718:	4213      	tst	r3, r2
 800771a:	d0e3      	beq.n	80076e4 <_strtod_l+0x93c>
 800771c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800771e:	0030      	movs	r0, r6
 8007720:	0039      	movs	r1, r7
 8007722:	9a08      	ldr	r2, [sp, #32]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d017      	beq.n	8007758 <_strtod_l+0x9b0>
 8007728:	f7ff fb26 	bl	8006d78 <sulp>
 800772c:	0002      	movs	r2, r0
 800772e:	000b      	movs	r3, r1
 8007730:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007732:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007734:	f7f9 f87a 	bl	800082c <__aeabi_dadd>
 8007738:	0006      	movs	r6, r0
 800773a:	000f      	movs	r7, r1
 800773c:	e7d2      	b.n	80076e4 <_strtod_l+0x93c>
 800773e:	2601      	movs	r6, #1
 8007740:	4013      	ands	r3, r2
 8007742:	4a9b      	ldr	r2, [pc, #620]	; (80079b0 <_strtod_l+0xc08>)
 8007744:	4276      	negs	r6, r6
 8007746:	189b      	adds	r3, r3, r2
 8007748:	4a9a      	ldr	r2, [pc, #616]	; (80079b4 <_strtod_l+0xc0c>)
 800774a:	431a      	orrs	r2, r3
 800774c:	0017      	movs	r7, r2
 800774e:	e7c9      	b.n	80076e4 <_strtod_l+0x93c>
 8007750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007752:	4233      	tst	r3, r6
 8007754:	d0c6      	beq.n	80076e4 <_strtod_l+0x93c>
 8007756:	e7e1      	b.n	800771c <_strtod_l+0x974>
 8007758:	f7ff fb0e 	bl	8006d78 <sulp>
 800775c:	0002      	movs	r2, r0
 800775e:	000b      	movs	r3, r1
 8007760:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007762:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007764:	f7fa fa3e 	bl	8001be4 <__aeabi_dsub>
 8007768:	2200      	movs	r2, #0
 800776a:	2300      	movs	r3, #0
 800776c:	0006      	movs	r6, r0
 800776e:	000f      	movs	r7, r1
 8007770:	f7f8 fe6c 	bl	800044c <__aeabi_dcmpeq>
 8007774:	2800      	cmp	r0, #0
 8007776:	d0b5      	beq.n	80076e4 <_strtod_l+0x93c>
 8007778:	e5f5      	b.n	8007366 <_strtod_l+0x5be>
 800777a:	9907      	ldr	r1, [sp, #28]
 800777c:	9806      	ldr	r0, [sp, #24]
 800777e:	f002 f87f 	bl	8009880 <__ratio>
 8007782:	2380      	movs	r3, #128	; 0x80
 8007784:	2200      	movs	r2, #0
 8007786:	05db      	lsls	r3, r3, #23
 8007788:	0004      	movs	r4, r0
 800778a:	000d      	movs	r5, r1
 800778c:	f7f8 fe6e 	bl	800046c <__aeabi_dcmple>
 8007790:	2800      	cmp	r0, #0
 8007792:	d079      	beq.n	8007888 <_strtod_l+0xae0>
 8007794:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04b      	beq.n	8007832 <_strtod_l+0xa8a>
 800779a:	2300      	movs	r3, #0
 800779c:	4c86      	ldr	r4, [pc, #536]	; (80079b8 <_strtod_l+0xc10>)
 800779e:	2500      	movs	r5, #0
 80077a0:	9312      	str	r3, [sp, #72]	; 0x48
 80077a2:	9413      	str	r4, [sp, #76]	; 0x4c
 80077a4:	4c84      	ldr	r4, [pc, #528]	; (80079b8 <_strtod_l+0xc10>)
 80077a6:	4a85      	ldr	r2, [pc, #532]	; (80079bc <_strtod_l+0xc14>)
 80077a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077aa:	4013      	ands	r3, r2
 80077ac:	9314      	str	r3, [sp, #80]	; 0x50
 80077ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077b0:	4b83      	ldr	r3, [pc, #524]	; (80079c0 <_strtod_l+0xc18>)
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d000      	beq.n	80077b8 <_strtod_l+0xa10>
 80077b6:	e0b0      	b.n	800791a <_strtod_l+0xb72>
 80077b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077bc:	921a      	str	r2, [sp, #104]	; 0x68
 80077be:	931b      	str	r3, [sp, #108]	; 0x6c
 80077c0:	4a80      	ldr	r2, [pc, #512]	; (80079c4 <_strtod_l+0xc1c>)
 80077c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077c4:	4694      	mov	ip, r2
 80077c6:	4463      	add	r3, ip
 80077c8:	001f      	movs	r7, r3
 80077ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077ce:	0030      	movs	r0, r6
 80077d0:	0039      	movs	r1, r7
 80077d2:	920c      	str	r2, [sp, #48]	; 0x30
 80077d4:	930d      	str	r3, [sp, #52]	; 0x34
 80077d6:	f001 ff7b 	bl	80096d0 <__ulp>
 80077da:	0002      	movs	r2, r0
 80077dc:	000b      	movs	r3, r1
 80077de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80077e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077e2:	f7f9 ff93 	bl	800170c <__aeabi_dmul>
 80077e6:	0032      	movs	r2, r6
 80077e8:	003b      	movs	r3, r7
 80077ea:	f7f9 f81f 	bl	800082c <__aeabi_dadd>
 80077ee:	4a73      	ldr	r2, [pc, #460]	; (80079bc <_strtod_l+0xc14>)
 80077f0:	4b75      	ldr	r3, [pc, #468]	; (80079c8 <_strtod_l+0xc20>)
 80077f2:	0006      	movs	r6, r0
 80077f4:	400a      	ands	r2, r1
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d95e      	bls.n	80078b8 <_strtod_l+0xb10>
 80077fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077fc:	4a73      	ldr	r2, [pc, #460]	; (80079cc <_strtod_l+0xc24>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d103      	bne.n	800780a <_strtod_l+0xa62>
 8007802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007804:	3301      	adds	r3, #1
 8007806:	d100      	bne.n	800780a <_strtod_l+0xa62>
 8007808:	e53c      	b.n	8007284 <_strtod_l+0x4dc>
 800780a:	2601      	movs	r6, #1
 800780c:	4f6f      	ldr	r7, [pc, #444]	; (80079cc <_strtod_l+0xc24>)
 800780e:	4276      	negs	r6, r6
 8007810:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007812:	9805      	ldr	r0, [sp, #20]
 8007814:	f001 fc1a 	bl	800904c <_Bfree>
 8007818:	9909      	ldr	r1, [sp, #36]	; 0x24
 800781a:	9805      	ldr	r0, [sp, #20]
 800781c:	f001 fc16 	bl	800904c <_Bfree>
 8007820:	9907      	ldr	r1, [sp, #28]
 8007822:	9805      	ldr	r0, [sp, #20]
 8007824:	f001 fc12 	bl	800904c <_Bfree>
 8007828:	9906      	ldr	r1, [sp, #24]
 800782a:	9805      	ldr	r0, [sp, #20]
 800782c:	f001 fc0e 	bl	800904c <_Bfree>
 8007830:	e60f      	b.n	8007452 <_strtod_l+0x6aa>
 8007832:	2e00      	cmp	r6, #0
 8007834:	d11c      	bne.n	8007870 <_strtod_l+0xac8>
 8007836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007838:	031b      	lsls	r3, r3, #12
 800783a:	d11f      	bne.n	800787c <_strtod_l+0xad4>
 800783c:	2200      	movs	r2, #0
 800783e:	0020      	movs	r0, r4
 8007840:	0029      	movs	r1, r5
 8007842:	4b5d      	ldr	r3, [pc, #372]	; (80079b8 <_strtod_l+0xc10>)
 8007844:	f7f8 fe08 	bl	8000458 <__aeabi_dcmplt>
 8007848:	2800      	cmp	r0, #0
 800784a:	d11a      	bne.n	8007882 <_strtod_l+0xada>
 800784c:	0020      	movs	r0, r4
 800784e:	0029      	movs	r1, r5
 8007850:	2200      	movs	r2, #0
 8007852:	4b5f      	ldr	r3, [pc, #380]	; (80079d0 <_strtod_l+0xc28>)
 8007854:	f7f9 ff5a 	bl	800170c <__aeabi_dmul>
 8007858:	0005      	movs	r5, r0
 800785a:	000c      	movs	r4, r1
 800785c:	2380      	movs	r3, #128	; 0x80
 800785e:	061b      	lsls	r3, r3, #24
 8007860:	18e3      	adds	r3, r4, r3
 8007862:	951e      	str	r5, [sp, #120]	; 0x78
 8007864:	931f      	str	r3, [sp, #124]	; 0x7c
 8007866:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007868:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800786a:	9212      	str	r2, [sp, #72]	; 0x48
 800786c:	9313      	str	r3, [sp, #76]	; 0x4c
 800786e:	e79a      	b.n	80077a6 <_strtod_l+0x9fe>
 8007870:	2e01      	cmp	r6, #1
 8007872:	d103      	bne.n	800787c <_strtod_l+0xad4>
 8007874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007876:	2b00      	cmp	r3, #0
 8007878:	d100      	bne.n	800787c <_strtod_l+0xad4>
 800787a:	e574      	b.n	8007366 <_strtod_l+0x5be>
 800787c:	2300      	movs	r3, #0
 800787e:	4c55      	ldr	r4, [pc, #340]	; (80079d4 <_strtod_l+0xc2c>)
 8007880:	e78d      	b.n	800779e <_strtod_l+0x9f6>
 8007882:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007884:	4c52      	ldr	r4, [pc, #328]	; (80079d0 <_strtod_l+0xc28>)
 8007886:	e7e9      	b.n	800785c <_strtod_l+0xab4>
 8007888:	2200      	movs	r2, #0
 800788a:	0020      	movs	r0, r4
 800788c:	0029      	movs	r1, r5
 800788e:	4b50      	ldr	r3, [pc, #320]	; (80079d0 <_strtod_l+0xc28>)
 8007890:	f7f9 ff3c 	bl	800170c <__aeabi_dmul>
 8007894:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007896:	0005      	movs	r5, r0
 8007898:	000b      	movs	r3, r1
 800789a:	000c      	movs	r4, r1
 800789c:	2a00      	cmp	r2, #0
 800789e:	d107      	bne.n	80078b0 <_strtod_l+0xb08>
 80078a0:	2280      	movs	r2, #128	; 0x80
 80078a2:	0612      	lsls	r2, r2, #24
 80078a4:	188b      	adds	r3, r1, r2
 80078a6:	9016      	str	r0, [sp, #88]	; 0x58
 80078a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80078aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ae:	e7dc      	b.n	800786a <_strtod_l+0xac2>
 80078b0:	0002      	movs	r2, r0
 80078b2:	9216      	str	r2, [sp, #88]	; 0x58
 80078b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80078b6:	e7f8      	b.n	80078aa <_strtod_l+0xb02>
 80078b8:	23d4      	movs	r3, #212	; 0xd4
 80078ba:	049b      	lsls	r3, r3, #18
 80078bc:	18cf      	adds	r7, r1, r3
 80078be:	9b08      	ldr	r3, [sp, #32]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1a5      	bne.n	8007810 <_strtod_l+0xa68>
 80078c4:	4b3d      	ldr	r3, [pc, #244]	; (80079bc <_strtod_l+0xc14>)
 80078c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078c8:	403b      	ands	r3, r7
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d1a0      	bne.n	8007810 <_strtod_l+0xa68>
 80078ce:	0028      	movs	r0, r5
 80078d0:	0021      	movs	r1, r4
 80078d2:	f7f8 fe07 	bl	80004e4 <__aeabi_d2lz>
 80078d6:	f7f8 fe41 	bl	800055c <__aeabi_l2d>
 80078da:	0002      	movs	r2, r0
 80078dc:	000b      	movs	r3, r1
 80078de:	0028      	movs	r0, r5
 80078e0:	0021      	movs	r1, r4
 80078e2:	f7fa f97f 	bl	8001be4 <__aeabi_dsub>
 80078e6:	033b      	lsls	r3, r7, #12
 80078e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80078ea:	0b1b      	lsrs	r3, r3, #12
 80078ec:	4333      	orrs	r3, r6
 80078ee:	4313      	orrs	r3, r2
 80078f0:	0004      	movs	r4, r0
 80078f2:	000d      	movs	r5, r1
 80078f4:	4a38      	ldr	r2, [pc, #224]	; (80079d8 <_strtod_l+0xc30>)
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d055      	beq.n	80079a6 <_strtod_l+0xbfe>
 80078fa:	4b38      	ldr	r3, [pc, #224]	; (80079dc <_strtod_l+0xc34>)
 80078fc:	f7f8 fdac 	bl	8000458 <__aeabi_dcmplt>
 8007900:	2800      	cmp	r0, #0
 8007902:	d000      	beq.n	8007906 <_strtod_l+0xb5e>
 8007904:	e4c7      	b.n	8007296 <_strtod_l+0x4ee>
 8007906:	0020      	movs	r0, r4
 8007908:	0029      	movs	r1, r5
 800790a:	4a35      	ldr	r2, [pc, #212]	; (80079e0 <_strtod_l+0xc38>)
 800790c:	4b30      	ldr	r3, [pc, #192]	; (80079d0 <_strtod_l+0xc28>)
 800790e:	f7f8 fdb7 	bl	8000480 <__aeabi_dcmpgt>
 8007912:	2800      	cmp	r0, #0
 8007914:	d100      	bne.n	8007918 <_strtod_l+0xb70>
 8007916:	e77b      	b.n	8007810 <_strtod_l+0xa68>
 8007918:	e4bd      	b.n	8007296 <_strtod_l+0x4ee>
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d02b      	beq.n	8007978 <_strtod_l+0xbd0>
 8007920:	23d4      	movs	r3, #212	; 0xd4
 8007922:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007924:	04db      	lsls	r3, r3, #19
 8007926:	429a      	cmp	r2, r3
 8007928:	d826      	bhi.n	8007978 <_strtod_l+0xbd0>
 800792a:	0028      	movs	r0, r5
 800792c:	0021      	movs	r1, r4
 800792e:	4a2d      	ldr	r2, [pc, #180]	; (80079e4 <_strtod_l+0xc3c>)
 8007930:	4b2d      	ldr	r3, [pc, #180]	; (80079e8 <_strtod_l+0xc40>)
 8007932:	f7f8 fd9b 	bl	800046c <__aeabi_dcmple>
 8007936:	2800      	cmp	r0, #0
 8007938:	d017      	beq.n	800796a <_strtod_l+0xbc2>
 800793a:	0028      	movs	r0, r5
 800793c:	0021      	movs	r1, r4
 800793e:	f7f8 fdb3 	bl	80004a8 <__aeabi_d2uiz>
 8007942:	2800      	cmp	r0, #0
 8007944:	d100      	bne.n	8007948 <_strtod_l+0xba0>
 8007946:	3001      	adds	r0, #1
 8007948:	f7fa fd62 	bl	8002410 <__aeabi_ui2d>
 800794c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800794e:	0005      	movs	r5, r0
 8007950:	000b      	movs	r3, r1
 8007952:	000c      	movs	r4, r1
 8007954:	2a00      	cmp	r2, #0
 8007956:	d122      	bne.n	800799e <_strtod_l+0xbf6>
 8007958:	2280      	movs	r2, #128	; 0x80
 800795a:	0612      	lsls	r2, r2, #24
 800795c:	188b      	adds	r3, r1, r2
 800795e:	9018      	str	r0, [sp, #96]	; 0x60
 8007960:	9319      	str	r3, [sp, #100]	; 0x64
 8007962:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007964:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007966:	9212      	str	r2, [sp, #72]	; 0x48
 8007968:	9313      	str	r3, [sp, #76]	; 0x4c
 800796a:	22d6      	movs	r2, #214	; 0xd6
 800796c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800796e:	04d2      	lsls	r2, r2, #19
 8007970:	189b      	adds	r3, r3, r2
 8007972:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	9313      	str	r3, [sp, #76]	; 0x4c
 8007978:	980e      	ldr	r0, [sp, #56]	; 0x38
 800797a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800797c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800797e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007980:	f001 fea6 	bl	80096d0 <__ulp>
 8007984:	0002      	movs	r2, r0
 8007986:	000b      	movs	r3, r1
 8007988:	0030      	movs	r0, r6
 800798a:	0039      	movs	r1, r7
 800798c:	f7f9 febe 	bl	800170c <__aeabi_dmul>
 8007990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007994:	f7f8 ff4a 	bl	800082c <__aeabi_dadd>
 8007998:	0006      	movs	r6, r0
 800799a:	000f      	movs	r7, r1
 800799c:	e78f      	b.n	80078be <_strtod_l+0xb16>
 800799e:	0002      	movs	r2, r0
 80079a0:	9218      	str	r2, [sp, #96]	; 0x60
 80079a2:	9319      	str	r3, [sp, #100]	; 0x64
 80079a4:	e7dd      	b.n	8007962 <_strtod_l+0xbba>
 80079a6:	4b11      	ldr	r3, [pc, #68]	; (80079ec <_strtod_l+0xc44>)
 80079a8:	f7f8 fd56 	bl	8000458 <__aeabi_dcmplt>
 80079ac:	e7b1      	b.n	8007912 <_strtod_l+0xb6a>
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	fff00000 	.word	0xfff00000
 80079b4:	000fffff 	.word	0x000fffff
 80079b8:	3ff00000 	.word	0x3ff00000
 80079bc:	7ff00000 	.word	0x7ff00000
 80079c0:	7fe00000 	.word	0x7fe00000
 80079c4:	fcb00000 	.word	0xfcb00000
 80079c8:	7c9fffff 	.word	0x7c9fffff
 80079cc:	7fefffff 	.word	0x7fefffff
 80079d0:	3fe00000 	.word	0x3fe00000
 80079d4:	bff00000 	.word	0xbff00000
 80079d8:	94a03595 	.word	0x94a03595
 80079dc:	3fdfffff 	.word	0x3fdfffff
 80079e0:	35afe535 	.word	0x35afe535
 80079e4:	ffc00000 	.word	0xffc00000
 80079e8:	41dfffff 	.word	0x41dfffff
 80079ec:	3fcfffff 	.word	0x3fcfffff

080079f0 <_strtod_r>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	4b02      	ldr	r3, [pc, #8]	; (80079fc <_strtod_r+0xc>)
 80079f4:	f7ff f9d8 	bl	8006da8 <_strtod_l>
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	46c0      	nop			; (mov r8, r8)
 80079fc:	20000088 	.word	0x20000088

08007a00 <_strtol_l.isra.0>:
 8007a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a02:	b087      	sub	sp, #28
 8007a04:	001e      	movs	r6, r3
 8007a06:	9005      	str	r0, [sp, #20]
 8007a08:	9101      	str	r1, [sp, #4]
 8007a0a:	9202      	str	r2, [sp, #8]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d045      	beq.n	8007a9c <_strtol_l.isra.0+0x9c>
 8007a10:	0008      	movs	r0, r1
 8007a12:	2b24      	cmp	r3, #36	; 0x24
 8007a14:	d842      	bhi.n	8007a9c <_strtol_l.isra.0+0x9c>
 8007a16:	4b3f      	ldr	r3, [pc, #252]	; (8007b14 <_strtol_l.isra.0+0x114>)
 8007a18:	2208      	movs	r2, #8
 8007a1a:	469c      	mov	ip, r3
 8007a1c:	0003      	movs	r3, r0
 8007a1e:	4661      	mov	r1, ip
 8007a20:	781c      	ldrb	r4, [r3, #0]
 8007a22:	1c45      	adds	r5, r0, #1
 8007a24:	5d09      	ldrb	r1, [r1, r4]
 8007a26:	0028      	movs	r0, r5
 8007a28:	000f      	movs	r7, r1
 8007a2a:	4017      	ands	r7, r2
 8007a2c:	4211      	tst	r1, r2
 8007a2e:	d1f5      	bne.n	8007a1c <_strtol_l.isra.0+0x1c>
 8007a30:	2c2d      	cmp	r4, #45	; 0x2d
 8007a32:	d13a      	bne.n	8007aaa <_strtol_l.isra.0+0xaa>
 8007a34:	2701      	movs	r7, #1
 8007a36:	782c      	ldrb	r4, [r5, #0]
 8007a38:	1c9d      	adds	r5, r3, #2
 8007a3a:	2e00      	cmp	r6, #0
 8007a3c:	d065      	beq.n	8007b0a <_strtol_l.isra.0+0x10a>
 8007a3e:	2e10      	cmp	r6, #16
 8007a40:	d109      	bne.n	8007a56 <_strtol_l.isra.0+0x56>
 8007a42:	2c30      	cmp	r4, #48	; 0x30
 8007a44:	d107      	bne.n	8007a56 <_strtol_l.isra.0+0x56>
 8007a46:	2220      	movs	r2, #32
 8007a48:	782b      	ldrb	r3, [r5, #0]
 8007a4a:	4393      	bics	r3, r2
 8007a4c:	2b58      	cmp	r3, #88	; 0x58
 8007a4e:	d157      	bne.n	8007b00 <_strtol_l.isra.0+0x100>
 8007a50:	2610      	movs	r6, #16
 8007a52:	786c      	ldrb	r4, [r5, #1]
 8007a54:	3502      	adds	r5, #2
 8007a56:	4b30      	ldr	r3, [pc, #192]	; (8007b18 <_strtol_l.isra.0+0x118>)
 8007a58:	0031      	movs	r1, r6
 8007a5a:	18fb      	adds	r3, r7, r3
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	9303      	str	r3, [sp, #12]
 8007a60:	f7f8 fbf4 	bl	800024c <__aeabi_uidivmod>
 8007a64:	2300      	movs	r3, #0
 8007a66:	2201      	movs	r2, #1
 8007a68:	4684      	mov	ip, r0
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	9104      	str	r1, [sp, #16]
 8007a6e:	4252      	negs	r2, r2
 8007a70:	0021      	movs	r1, r4
 8007a72:	3930      	subs	r1, #48	; 0x30
 8007a74:	2909      	cmp	r1, #9
 8007a76:	d81d      	bhi.n	8007ab4 <_strtol_l.isra.0+0xb4>
 8007a78:	000c      	movs	r4, r1
 8007a7a:	42a6      	cmp	r6, r4
 8007a7c:	dd28      	ble.n	8007ad0 <_strtol_l.isra.0+0xd0>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	db24      	blt.n	8007acc <_strtol_l.isra.0+0xcc>
 8007a82:	0013      	movs	r3, r2
 8007a84:	4584      	cmp	ip, r0
 8007a86:	d306      	bcc.n	8007a96 <_strtol_l.isra.0+0x96>
 8007a88:	d102      	bne.n	8007a90 <_strtol_l.isra.0+0x90>
 8007a8a:	9904      	ldr	r1, [sp, #16]
 8007a8c:	42a1      	cmp	r1, r4
 8007a8e:	db02      	blt.n	8007a96 <_strtol_l.isra.0+0x96>
 8007a90:	2301      	movs	r3, #1
 8007a92:	4370      	muls	r0, r6
 8007a94:	1820      	adds	r0, r4, r0
 8007a96:	782c      	ldrb	r4, [r5, #0]
 8007a98:	3501      	adds	r5, #1
 8007a9a:	e7e9      	b.n	8007a70 <_strtol_l.isra.0+0x70>
 8007a9c:	f7fe fa94 	bl	8005fc8 <__errno>
 8007aa0:	2316      	movs	r3, #22
 8007aa2:	6003      	str	r3, [r0, #0]
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	b007      	add	sp, #28
 8007aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aaa:	2c2b      	cmp	r4, #43	; 0x2b
 8007aac:	d1c5      	bne.n	8007a3a <_strtol_l.isra.0+0x3a>
 8007aae:	782c      	ldrb	r4, [r5, #0]
 8007ab0:	1c9d      	adds	r5, r3, #2
 8007ab2:	e7c2      	b.n	8007a3a <_strtol_l.isra.0+0x3a>
 8007ab4:	0021      	movs	r1, r4
 8007ab6:	3941      	subs	r1, #65	; 0x41
 8007ab8:	2919      	cmp	r1, #25
 8007aba:	d801      	bhi.n	8007ac0 <_strtol_l.isra.0+0xc0>
 8007abc:	3c37      	subs	r4, #55	; 0x37
 8007abe:	e7dc      	b.n	8007a7a <_strtol_l.isra.0+0x7a>
 8007ac0:	0021      	movs	r1, r4
 8007ac2:	3961      	subs	r1, #97	; 0x61
 8007ac4:	2919      	cmp	r1, #25
 8007ac6:	d803      	bhi.n	8007ad0 <_strtol_l.isra.0+0xd0>
 8007ac8:	3c57      	subs	r4, #87	; 0x57
 8007aca:	e7d6      	b.n	8007a7a <_strtol_l.isra.0+0x7a>
 8007acc:	0013      	movs	r3, r2
 8007ace:	e7e2      	b.n	8007a96 <_strtol_l.isra.0+0x96>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da09      	bge.n	8007ae8 <_strtol_l.isra.0+0xe8>
 8007ad4:	2322      	movs	r3, #34	; 0x22
 8007ad6:	9a05      	ldr	r2, [sp, #20]
 8007ad8:	9803      	ldr	r0, [sp, #12]
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	9b02      	ldr	r3, [sp, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0e1      	beq.n	8007aa6 <_strtol_l.isra.0+0xa6>
 8007ae2:	1e6b      	subs	r3, r5, #1
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	e007      	b.n	8007af8 <_strtol_l.isra.0+0xf8>
 8007ae8:	2f00      	cmp	r7, #0
 8007aea:	d000      	beq.n	8007aee <_strtol_l.isra.0+0xee>
 8007aec:	4240      	negs	r0, r0
 8007aee:	9a02      	ldr	r2, [sp, #8]
 8007af0:	2a00      	cmp	r2, #0
 8007af2:	d0d8      	beq.n	8007aa6 <_strtol_l.isra.0+0xa6>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1f4      	bne.n	8007ae2 <_strtol_l.isra.0+0xe2>
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	9a01      	ldr	r2, [sp, #4]
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	e7d2      	b.n	8007aa6 <_strtol_l.isra.0+0xa6>
 8007b00:	2430      	movs	r4, #48	; 0x30
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	d1a7      	bne.n	8007a56 <_strtol_l.isra.0+0x56>
 8007b06:	3608      	adds	r6, #8
 8007b08:	e7a5      	b.n	8007a56 <_strtol_l.isra.0+0x56>
 8007b0a:	2c30      	cmp	r4, #48	; 0x30
 8007b0c:	d09b      	beq.n	8007a46 <_strtol_l.isra.0+0x46>
 8007b0e:	260a      	movs	r6, #10
 8007b10:	e7a1      	b.n	8007a56 <_strtol_l.isra.0+0x56>
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	0800ac01 	.word	0x0800ac01
 8007b18:	7fffffff 	.word	0x7fffffff

08007b1c <_strtol_r>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	f7ff ff6f 	bl	8007a00 <_strtol_l.isra.0>
 8007b22:	bd10      	pop	{r4, pc}

08007b24 <quorem>:
 8007b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b26:	0006      	movs	r6, r0
 8007b28:	690d      	ldr	r5, [r1, #16]
 8007b2a:	6933      	ldr	r3, [r6, #16]
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	2000      	movs	r0, #0
 8007b30:	9102      	str	r1, [sp, #8]
 8007b32:	42ab      	cmp	r3, r5
 8007b34:	db6b      	blt.n	8007c0e <quorem+0xea>
 8007b36:	000b      	movs	r3, r1
 8007b38:	3d01      	subs	r5, #1
 8007b3a:	00ac      	lsls	r4, r5, #2
 8007b3c:	3314      	adds	r3, #20
 8007b3e:	9305      	str	r3, [sp, #20]
 8007b40:	191b      	adds	r3, r3, r4
 8007b42:	9303      	str	r3, [sp, #12]
 8007b44:	0033      	movs	r3, r6
 8007b46:	3314      	adds	r3, #20
 8007b48:	9301      	str	r3, [sp, #4]
 8007b4a:	191c      	adds	r4, r3, r4
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	6827      	ldr	r7, [r4, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	0038      	movs	r0, r7
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	0019      	movs	r1, r3
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	f7f8 faf0 	bl	8000140 <__udivsi3>
 8007b60:	9b04      	ldr	r3, [sp, #16]
 8007b62:	9000      	str	r0, [sp, #0]
 8007b64:	429f      	cmp	r7, r3
 8007b66:	d329      	bcc.n	8007bbc <quorem+0x98>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	469c      	mov	ip, r3
 8007b6c:	9801      	ldr	r0, [sp, #4]
 8007b6e:	9f05      	ldr	r7, [sp, #20]
 8007b70:	9304      	str	r3, [sp, #16]
 8007b72:	cf08      	ldmia	r7!, {r3}
 8007b74:	9a00      	ldr	r2, [sp, #0]
 8007b76:	b299      	uxth	r1, r3
 8007b78:	4351      	muls	r1, r2
 8007b7a:	0c1b      	lsrs	r3, r3, #16
 8007b7c:	4353      	muls	r3, r2
 8007b7e:	4461      	add	r1, ip
 8007b80:	0c0a      	lsrs	r2, r1, #16
 8007b82:	189b      	adds	r3, r3, r2
 8007b84:	0c1a      	lsrs	r2, r3, #16
 8007b86:	9305      	str	r3, [sp, #20]
 8007b88:	6803      	ldr	r3, [r0, #0]
 8007b8a:	4694      	mov	ip, r2
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	9b04      	ldr	r3, [sp, #16]
 8007b90:	b289      	uxth	r1, r1
 8007b92:	18d2      	adds	r2, r2, r3
 8007b94:	6803      	ldr	r3, [r0, #0]
 8007b96:	1a52      	subs	r2, r2, r1
 8007b98:	0c19      	lsrs	r1, r3, #16
 8007b9a:	466b      	mov	r3, sp
 8007b9c:	8a9b      	ldrh	r3, [r3, #20]
 8007b9e:	1acb      	subs	r3, r1, r3
 8007ba0:	1411      	asrs	r1, r2, #16
 8007ba2:	185b      	adds	r3, r3, r1
 8007ba4:	1419      	asrs	r1, r3, #16
 8007ba6:	b292      	uxth	r2, r2
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	431a      	orrs	r2, r3
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	9104      	str	r1, [sp, #16]
 8007bb0:	c004      	stmia	r0!, {r2}
 8007bb2:	42bb      	cmp	r3, r7
 8007bb4:	d2dd      	bcs.n	8007b72 <quorem+0x4e>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d02e      	beq.n	8007c1a <quorem+0xf6>
 8007bbc:	0030      	movs	r0, r6
 8007bbe:	9902      	ldr	r1, [sp, #8]
 8007bc0:	f001 fcd2 	bl	8009568 <__mcmp>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	db21      	blt.n	8007c0c <quorem+0xe8>
 8007bc8:	0030      	movs	r0, r6
 8007bca:	2400      	movs	r4, #0
 8007bcc:	9b00      	ldr	r3, [sp, #0]
 8007bce:	9902      	ldr	r1, [sp, #8]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	3014      	adds	r0, #20
 8007bd6:	3114      	adds	r1, #20
 8007bd8:	6802      	ldr	r2, [r0, #0]
 8007bda:	c908      	ldmia	r1!, {r3}
 8007bdc:	b292      	uxth	r2, r2
 8007bde:	1914      	adds	r4, r2, r4
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	1aa2      	subs	r2, r4, r2
 8007be4:	6804      	ldr	r4, [r0, #0]
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	0c24      	lsrs	r4, r4, #16
 8007bea:	1ae3      	subs	r3, r4, r3
 8007bec:	1414      	asrs	r4, r2, #16
 8007bee:	191b      	adds	r3, r3, r4
 8007bf0:	141c      	asrs	r4, r3, #16
 8007bf2:	b292      	uxth	r2, r2
 8007bf4:	041b      	lsls	r3, r3, #16
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	c008      	stmia	r0!, {r3}
 8007bfa:	9b03      	ldr	r3, [sp, #12]
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	d2eb      	bcs.n	8007bd8 <quorem+0xb4>
 8007c00:	9a01      	ldr	r2, [sp, #4]
 8007c02:	00ab      	lsls	r3, r5, #2
 8007c04:	18d3      	adds	r3, r2, r3
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	2a00      	cmp	r2, #0
 8007c0a:	d010      	beq.n	8007c2e <quorem+0x10a>
 8007c0c:	9800      	ldr	r0, [sp, #0]
 8007c0e:	b007      	add	sp, #28
 8007c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d104      	bne.n	8007c22 <quorem+0xfe>
 8007c18:	3d01      	subs	r5, #1
 8007c1a:	9b01      	ldr	r3, [sp, #4]
 8007c1c:	3c04      	subs	r4, #4
 8007c1e:	42a3      	cmp	r3, r4
 8007c20:	d3f7      	bcc.n	8007c12 <quorem+0xee>
 8007c22:	6135      	str	r5, [r6, #16]
 8007c24:	e7ca      	b.n	8007bbc <quorem+0x98>
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	d104      	bne.n	8007c36 <quorem+0x112>
 8007c2c:	3d01      	subs	r5, #1
 8007c2e:	9a01      	ldr	r2, [sp, #4]
 8007c30:	3b04      	subs	r3, #4
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d3f7      	bcc.n	8007c26 <quorem+0x102>
 8007c36:	6135      	str	r5, [r6, #16]
 8007c38:	e7e8      	b.n	8007c0c <quorem+0xe8>
	...

08007c3c <_dtoa_r>:
 8007c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c3e:	b09d      	sub	sp, #116	; 0x74
 8007c40:	9202      	str	r2, [sp, #8]
 8007c42:	9303      	str	r3, [sp, #12]
 8007c44:	9b02      	ldr	r3, [sp, #8]
 8007c46:	9c03      	ldr	r4, [sp, #12]
 8007c48:	930a      	str	r3, [sp, #40]	; 0x28
 8007c4a:	940b      	str	r4, [sp, #44]	; 0x2c
 8007c4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c4e:	0007      	movs	r7, r0
 8007c50:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007c52:	2c00      	cmp	r4, #0
 8007c54:	d10e      	bne.n	8007c74 <_dtoa_r+0x38>
 8007c56:	2010      	movs	r0, #16
 8007c58:	f001 f984 	bl	8008f64 <malloc>
 8007c5c:	1e02      	subs	r2, r0, #0
 8007c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c60:	d104      	bne.n	8007c6c <_dtoa_r+0x30>
 8007c62:	21ea      	movs	r1, #234	; 0xea
 8007c64:	4bc0      	ldr	r3, [pc, #768]	; (8007f68 <_dtoa_r+0x32c>)
 8007c66:	48c1      	ldr	r0, [pc, #772]	; (8007f6c <_dtoa_r+0x330>)
 8007c68:	f002 f8c4 	bl	8009df4 <__assert_func>
 8007c6c:	6044      	str	r4, [r0, #4]
 8007c6e:	6084      	str	r4, [r0, #8]
 8007c70:	6004      	str	r4, [r0, #0]
 8007c72:	60c4      	str	r4, [r0, #12]
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	6819      	ldr	r1, [r3, #0]
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	d00a      	beq.n	8007c92 <_dtoa_r+0x56>
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4093      	lsls	r3, r2
 8007c82:	604a      	str	r2, [r1, #4]
 8007c84:	608b      	str	r3, [r1, #8]
 8007c86:	0038      	movs	r0, r7
 8007c88:	f001 f9e0 	bl	800904c <_Bfree>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da21      	bge.n	8007cdc <_dtoa_r+0xa0>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	602b      	str	r3, [r5, #0]
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	085b      	lsrs	r3, r3, #1
 8007ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ca4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007ca6:	4bb2      	ldr	r3, [pc, #712]	; (8007f70 <_dtoa_r+0x334>)
 8007ca8:	002a      	movs	r2, r5
 8007caa:	9318      	str	r3, [sp, #96]	; 0x60
 8007cac:	401a      	ands	r2, r3
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d117      	bne.n	8007ce2 <_dtoa_r+0xa6>
 8007cb2:	4bb0      	ldr	r3, [pc, #704]	; (8007f74 <_dtoa_r+0x338>)
 8007cb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cb6:	0328      	lsls	r0, r5, #12
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	9b02      	ldr	r3, [sp, #8]
 8007cbc:	0b00      	lsrs	r0, r0, #12
 8007cbe:	4318      	orrs	r0, r3
 8007cc0:	d101      	bne.n	8007cc6 <_dtoa_r+0x8a>
 8007cc2:	f000 fdc3 	bl	800884c <_dtoa_r+0xc10>
 8007cc6:	48ac      	ldr	r0, [pc, #688]	; (8007f78 <_dtoa_r+0x33c>)
 8007cc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cca:	9005      	str	r0, [sp, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <_dtoa_r+0x9a>
 8007cd0:	4baa      	ldr	r3, [pc, #680]	; (8007f7c <_dtoa_r+0x340>)
 8007cd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	9805      	ldr	r0, [sp, #20]
 8007cd8:	b01d      	add	sp, #116	; 0x74
 8007cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cdc:	2300      	movs	r3, #0
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	e7e0      	b.n	8007ca4 <_dtoa_r+0x68>
 8007ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007ce6:	9312      	str	r3, [sp, #72]	; 0x48
 8007ce8:	9413      	str	r4, [sp, #76]	; 0x4c
 8007cea:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cec:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f7f8 fbab 	bl	800044c <__aeabi_dcmpeq>
 8007cf6:	1e04      	subs	r4, r0, #0
 8007cf8:	d00b      	beq.n	8007d12 <_dtoa_r+0xd6>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	4b9f      	ldr	r3, [pc, #636]	; (8007f80 <_dtoa_r+0x344>)
 8007d02:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d04:	9305      	str	r3, [sp, #20]
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	d0e5      	beq.n	8007cd6 <_dtoa_r+0x9a>
 8007d0a:	4a9e      	ldr	r2, [pc, #632]	; (8007f84 <_dtoa_r+0x348>)
 8007d0c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007d0e:	600a      	str	r2, [r1, #0]
 8007d10:	e7e1      	b.n	8007cd6 <_dtoa_r+0x9a>
 8007d12:	ab1a      	add	r3, sp, #104	; 0x68
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	0038      	movs	r0, r7
 8007d1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d20:	f001 fd4a 	bl	80097b8 <__d2b>
 8007d24:	006e      	lsls	r6, r5, #1
 8007d26:	9004      	str	r0, [sp, #16]
 8007d28:	0d76      	lsrs	r6, r6, #21
 8007d2a:	d100      	bne.n	8007d2e <_dtoa_r+0xf2>
 8007d2c:	e07c      	b.n	8007e28 <_dtoa_r+0x1ec>
 8007d2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d34:	4a94      	ldr	r2, [pc, #592]	; (8007f88 <_dtoa_r+0x34c>)
 8007d36:	031b      	lsls	r3, r3, #12
 8007d38:	0b1b      	lsrs	r3, r3, #12
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	0011      	movs	r1, r2
 8007d3e:	4b93      	ldr	r3, [pc, #588]	; (8007f8c <_dtoa_r+0x350>)
 8007d40:	9416      	str	r4, [sp, #88]	; 0x58
 8007d42:	18f6      	adds	r6, r6, r3
 8007d44:	2200      	movs	r2, #0
 8007d46:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <_dtoa_r+0x354>)
 8007d48:	f7f9 ff4c 	bl	8001be4 <__aeabi_dsub>
 8007d4c:	4a91      	ldr	r2, [pc, #580]	; (8007f94 <_dtoa_r+0x358>)
 8007d4e:	4b92      	ldr	r3, [pc, #584]	; (8007f98 <_dtoa_r+0x35c>)
 8007d50:	f7f9 fcdc 	bl	800170c <__aeabi_dmul>
 8007d54:	4a91      	ldr	r2, [pc, #580]	; (8007f9c <_dtoa_r+0x360>)
 8007d56:	4b92      	ldr	r3, [pc, #584]	; (8007fa0 <_dtoa_r+0x364>)
 8007d58:	f7f8 fd68 	bl	800082c <__aeabi_dadd>
 8007d5c:	0004      	movs	r4, r0
 8007d5e:	0030      	movs	r0, r6
 8007d60:	000d      	movs	r5, r1
 8007d62:	f7fa fb25 	bl	80023b0 <__aeabi_i2d>
 8007d66:	4a8f      	ldr	r2, [pc, #572]	; (8007fa4 <_dtoa_r+0x368>)
 8007d68:	4b8f      	ldr	r3, [pc, #572]	; (8007fa8 <_dtoa_r+0x36c>)
 8007d6a:	f7f9 fccf 	bl	800170c <__aeabi_dmul>
 8007d6e:	0002      	movs	r2, r0
 8007d70:	000b      	movs	r3, r1
 8007d72:	0020      	movs	r0, r4
 8007d74:	0029      	movs	r1, r5
 8007d76:	f7f8 fd59 	bl	800082c <__aeabi_dadd>
 8007d7a:	0004      	movs	r4, r0
 8007d7c:	000d      	movs	r5, r1
 8007d7e:	f7fa fae1 	bl	8002344 <__aeabi_d2iz>
 8007d82:	2200      	movs	r2, #0
 8007d84:	9002      	str	r0, [sp, #8]
 8007d86:	2300      	movs	r3, #0
 8007d88:	0020      	movs	r0, r4
 8007d8a:	0029      	movs	r1, r5
 8007d8c:	f7f8 fb64 	bl	8000458 <__aeabi_dcmplt>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d00b      	beq.n	8007dac <_dtoa_r+0x170>
 8007d94:	9802      	ldr	r0, [sp, #8]
 8007d96:	f7fa fb0b 	bl	80023b0 <__aeabi_i2d>
 8007d9a:	002b      	movs	r3, r5
 8007d9c:	0022      	movs	r2, r4
 8007d9e:	f7f8 fb55 	bl	800044c <__aeabi_dcmpeq>
 8007da2:	4243      	negs	r3, r0
 8007da4:	4158      	adcs	r0, r3
 8007da6:	9b02      	ldr	r3, [sp, #8]
 8007da8:	1a1b      	subs	r3, r3, r0
 8007daa:	9302      	str	r3, [sp, #8]
 8007dac:	2301      	movs	r3, #1
 8007dae:	9315      	str	r3, [sp, #84]	; 0x54
 8007db0:	9b02      	ldr	r3, [sp, #8]
 8007db2:	2b16      	cmp	r3, #22
 8007db4:	d80f      	bhi.n	8007dd6 <_dtoa_r+0x19a>
 8007db6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007db8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007dba:	00da      	lsls	r2, r3, #3
 8007dbc:	4b7b      	ldr	r3, [pc, #492]	; (8007fac <_dtoa_r+0x370>)
 8007dbe:	189b      	adds	r3, r3, r2
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f7f8 fb48 	bl	8000458 <__aeabi_dcmplt>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d049      	beq.n	8007e60 <_dtoa_r+0x224>
 8007dcc:	9b02      	ldr	r3, [sp, #8]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	9302      	str	r3, [sp, #8]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	9315      	str	r3, [sp, #84]	; 0x54
 8007dd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007dd8:	1b9e      	subs	r6, r3, r6
 8007dda:	2300      	movs	r3, #0
 8007ddc:	9308      	str	r3, [sp, #32]
 8007dde:	0033      	movs	r3, r6
 8007de0:	3b01      	subs	r3, #1
 8007de2:	930d      	str	r3, [sp, #52]	; 0x34
 8007de4:	d504      	bpl.n	8007df0 <_dtoa_r+0x1b4>
 8007de6:	2301      	movs	r3, #1
 8007de8:	1b9b      	subs	r3, r3, r6
 8007dea:	9308      	str	r3, [sp, #32]
 8007dec:	2300      	movs	r3, #0
 8007dee:	930d      	str	r3, [sp, #52]	; 0x34
 8007df0:	9b02      	ldr	r3, [sp, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	db36      	blt.n	8007e64 <_dtoa_r+0x228>
 8007df6:	9a02      	ldr	r2, [sp, #8]
 8007df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dfa:	4694      	mov	ip, r2
 8007dfc:	4463      	add	r3, ip
 8007dfe:	930d      	str	r3, [sp, #52]	; 0x34
 8007e00:	2300      	movs	r3, #0
 8007e02:	9214      	str	r2, [sp, #80]	; 0x50
 8007e04:	930e      	str	r3, [sp, #56]	; 0x38
 8007e06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e08:	2401      	movs	r4, #1
 8007e0a:	2b09      	cmp	r3, #9
 8007e0c:	d862      	bhi.n	8007ed4 <_dtoa_r+0x298>
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	dd02      	ble.n	8007e18 <_dtoa_r+0x1dc>
 8007e12:	2400      	movs	r4, #0
 8007e14:	3b04      	subs	r3, #4
 8007e16:	9322      	str	r3, [sp, #136]	; 0x88
 8007e18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e1a:	1e98      	subs	r0, r3, #2
 8007e1c:	2803      	cmp	r0, #3
 8007e1e:	d862      	bhi.n	8007ee6 <_dtoa_r+0x2aa>
 8007e20:	f7f8 f97a 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007e24:	56343629 	.word	0x56343629
 8007e28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e2c:	189e      	adds	r6, r3, r2
 8007e2e:	4b60      	ldr	r3, [pc, #384]	; (8007fb0 <_dtoa_r+0x374>)
 8007e30:	18f2      	adds	r2, r6, r3
 8007e32:	2a20      	cmp	r2, #32
 8007e34:	dd0f      	ble.n	8007e56 <_dtoa_r+0x21a>
 8007e36:	2340      	movs	r3, #64	; 0x40
 8007e38:	1a9b      	subs	r3, r3, r2
 8007e3a:	409d      	lsls	r5, r3
 8007e3c:	4b5d      	ldr	r3, [pc, #372]	; (8007fb4 <_dtoa_r+0x378>)
 8007e3e:	9802      	ldr	r0, [sp, #8]
 8007e40:	18f3      	adds	r3, r6, r3
 8007e42:	40d8      	lsrs	r0, r3
 8007e44:	4328      	orrs	r0, r5
 8007e46:	f7fa fae3 	bl	8002410 <__aeabi_ui2d>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4c5a      	ldr	r4, [pc, #360]	; (8007fb8 <_dtoa_r+0x37c>)
 8007e4e:	3e01      	subs	r6, #1
 8007e50:	1909      	adds	r1, r1, r4
 8007e52:	9316      	str	r3, [sp, #88]	; 0x58
 8007e54:	e776      	b.n	8007d44 <_dtoa_r+0x108>
 8007e56:	2320      	movs	r3, #32
 8007e58:	9802      	ldr	r0, [sp, #8]
 8007e5a:	1a9b      	subs	r3, r3, r2
 8007e5c:	4098      	lsls	r0, r3
 8007e5e:	e7f2      	b.n	8007e46 <_dtoa_r+0x20a>
 8007e60:	9015      	str	r0, [sp, #84]	; 0x54
 8007e62:	e7b8      	b.n	8007dd6 <_dtoa_r+0x19a>
 8007e64:	9b08      	ldr	r3, [sp, #32]
 8007e66:	9a02      	ldr	r2, [sp, #8]
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	9308      	str	r3, [sp, #32]
 8007e6c:	4253      	negs	r3, r2
 8007e6e:	930e      	str	r3, [sp, #56]	; 0x38
 8007e70:	2300      	movs	r3, #0
 8007e72:	9314      	str	r3, [sp, #80]	; 0x50
 8007e74:	e7c7      	b.n	8007e06 <_dtoa_r+0x1ca>
 8007e76:	2300      	movs	r3, #0
 8007e78:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dc36      	bgt.n	8007eee <_dtoa_r+0x2b2>
 8007e80:	2301      	movs	r3, #1
 8007e82:	001a      	movs	r2, r3
 8007e84:	930c      	str	r3, [sp, #48]	; 0x30
 8007e86:	9306      	str	r3, [sp, #24]
 8007e88:	9223      	str	r2, [sp, #140]	; 0x8c
 8007e8a:	e00d      	b.n	8007ea8 <_dtoa_r+0x26c>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e7f3      	b.n	8007e78 <_dtoa_r+0x23c>
 8007e90:	2300      	movs	r3, #0
 8007e92:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007e94:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e96:	4694      	mov	ip, r2
 8007e98:	9b02      	ldr	r3, [sp, #8]
 8007e9a:	4463      	add	r3, ip
 8007e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	9306      	str	r3, [sp, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dc00      	bgt.n	8007ea8 <_dtoa_r+0x26c>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eac:	6042      	str	r2, [r0, #4]
 8007eae:	3204      	adds	r2, #4
 8007eb0:	0015      	movs	r5, r2
 8007eb2:	3514      	adds	r5, #20
 8007eb4:	6841      	ldr	r1, [r0, #4]
 8007eb6:	429d      	cmp	r5, r3
 8007eb8:	d91d      	bls.n	8007ef6 <_dtoa_r+0x2ba>
 8007eba:	0038      	movs	r0, r7
 8007ebc:	f001 f882 	bl	8008fc4 <_Balloc>
 8007ec0:	9005      	str	r0, [sp, #20]
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d11b      	bne.n	8007efe <_dtoa_r+0x2c2>
 8007ec6:	21d5      	movs	r1, #213	; 0xd5
 8007ec8:	0002      	movs	r2, r0
 8007eca:	4b3c      	ldr	r3, [pc, #240]	; (8007fbc <_dtoa_r+0x380>)
 8007ecc:	0049      	lsls	r1, r1, #1
 8007ece:	e6ca      	b.n	8007c66 <_dtoa_r+0x2a>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e7de      	b.n	8007e92 <_dtoa_r+0x256>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	940f      	str	r4, [sp, #60]	; 0x3c
 8007ed8:	9322      	str	r3, [sp, #136]	; 0x88
 8007eda:	3b01      	subs	r3, #1
 8007edc:	930c      	str	r3, [sp, #48]	; 0x30
 8007ede:	9306      	str	r3, [sp, #24]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	3313      	adds	r3, #19
 8007ee4:	e7d0      	b.n	8007e88 <_dtoa_r+0x24c>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eea:	3b02      	subs	r3, #2
 8007eec:	e7f6      	b.n	8007edc <_dtoa_r+0x2a0>
 8007eee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ef0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	e7d8      	b.n	8007ea8 <_dtoa_r+0x26c>
 8007ef6:	3101      	adds	r1, #1
 8007ef8:	6041      	str	r1, [r0, #4]
 8007efa:	0052      	lsls	r2, r2, #1
 8007efc:	e7d8      	b.n	8007eb0 <_dtoa_r+0x274>
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	9a05      	ldr	r2, [sp, #20]
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	9b06      	ldr	r3, [sp, #24]
 8007f06:	2b0e      	cmp	r3, #14
 8007f08:	d900      	bls.n	8007f0c <_dtoa_r+0x2d0>
 8007f0a:	e0eb      	b.n	80080e4 <_dtoa_r+0x4a8>
 8007f0c:	2c00      	cmp	r4, #0
 8007f0e:	d100      	bne.n	8007f12 <_dtoa_r+0x2d6>
 8007f10:	e0e8      	b.n	80080e4 <_dtoa_r+0x4a8>
 8007f12:	9b02      	ldr	r3, [sp, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	dd68      	ble.n	8007fea <_dtoa_r+0x3ae>
 8007f18:	001a      	movs	r2, r3
 8007f1a:	210f      	movs	r1, #15
 8007f1c:	4b23      	ldr	r3, [pc, #140]	; (8007fac <_dtoa_r+0x370>)
 8007f1e:	400a      	ands	r2, r1
 8007f20:	00d2      	lsls	r2, r2, #3
 8007f22:	189b      	adds	r3, r3, r2
 8007f24:	681d      	ldr	r5, [r3, #0]
 8007f26:	685e      	ldr	r6, [r3, #4]
 8007f28:	9b02      	ldr	r3, [sp, #8]
 8007f2a:	111c      	asrs	r4, r3, #4
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	05db      	lsls	r3, r3, #23
 8007f34:	d50b      	bpl.n	8007f4e <_dtoa_r+0x312>
 8007f36:	4b22      	ldr	r3, [pc, #136]	; (8007fc0 <_dtoa_r+0x384>)
 8007f38:	400c      	ands	r4, r1
 8007f3a:	6a1a      	ldr	r2, [r3, #32]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f40:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f42:	f7f8 ffdd 	bl	8000f00 <__aeabi_ddiv>
 8007f46:	2303      	movs	r3, #3
 8007f48:	900a      	str	r0, [sp, #40]	; 0x28
 8007f4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f4c:	9310      	str	r3, [sp, #64]	; 0x40
 8007f4e:	4b1c      	ldr	r3, [pc, #112]	; (8007fc0 <_dtoa_r+0x384>)
 8007f50:	9307      	str	r3, [sp, #28]
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	d136      	bne.n	8007fc4 <_dtoa_r+0x388>
 8007f56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f5a:	002a      	movs	r2, r5
 8007f5c:	0033      	movs	r3, r6
 8007f5e:	f7f8 ffcf 	bl	8000f00 <__aeabi_ddiv>
 8007f62:	900a      	str	r0, [sp, #40]	; 0x28
 8007f64:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f66:	e05c      	b.n	8008022 <_dtoa_r+0x3e6>
 8007f68:	0800ad0e 	.word	0x0800ad0e
 8007f6c:	0800ad25 	.word	0x0800ad25
 8007f70:	7ff00000 	.word	0x7ff00000
 8007f74:	0000270f 	.word	0x0000270f
 8007f78:	0800ad0a 	.word	0x0800ad0a
 8007f7c:	0800ad0d 	.word	0x0800ad0d
 8007f80:	0800ab80 	.word	0x0800ab80
 8007f84:	0800ab81 	.word	0x0800ab81
 8007f88:	3ff00000 	.word	0x3ff00000
 8007f8c:	fffffc01 	.word	0xfffffc01
 8007f90:	3ff80000 	.word	0x3ff80000
 8007f94:	636f4361 	.word	0x636f4361
 8007f98:	3fd287a7 	.word	0x3fd287a7
 8007f9c:	8b60c8b3 	.word	0x8b60c8b3
 8007fa0:	3fc68a28 	.word	0x3fc68a28
 8007fa4:	509f79fb 	.word	0x509f79fb
 8007fa8:	3fd34413 	.word	0x3fd34413
 8007fac:	0800aea0 	.word	0x0800aea0
 8007fb0:	00000432 	.word	0x00000432
 8007fb4:	00000412 	.word	0x00000412
 8007fb8:	fe100000 	.word	0xfe100000
 8007fbc:	0800ad84 	.word	0x0800ad84
 8007fc0:	0800ae78 	.word	0x0800ae78
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	421c      	tst	r4, r3
 8007fc8:	d00b      	beq.n	8007fe2 <_dtoa_r+0x3a6>
 8007fca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fcc:	0028      	movs	r0, r5
 8007fce:	3301      	adds	r3, #1
 8007fd0:	9310      	str	r3, [sp, #64]	; 0x40
 8007fd2:	9b07      	ldr	r3, [sp, #28]
 8007fd4:	0031      	movs	r1, r6
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f7f9 fb97 	bl	800170c <__aeabi_dmul>
 8007fde:	0005      	movs	r5, r0
 8007fe0:	000e      	movs	r6, r1
 8007fe2:	9b07      	ldr	r3, [sp, #28]
 8007fe4:	1064      	asrs	r4, r4, #1
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	e7b2      	b.n	8007f50 <_dtoa_r+0x314>
 8007fea:	2302      	movs	r3, #2
 8007fec:	9310      	str	r3, [sp, #64]	; 0x40
 8007fee:	9b02      	ldr	r3, [sp, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d016      	beq.n	8008022 <_dtoa_r+0x3e6>
 8007ff4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ff6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ff8:	425c      	negs	r4, r3
 8007ffa:	230f      	movs	r3, #15
 8007ffc:	4ab5      	ldr	r2, [pc, #724]	; (80082d4 <_dtoa_r+0x698>)
 8007ffe:	4023      	ands	r3, r4
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	18d3      	adds	r3, r2, r3
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f7f9 fb80 	bl	800170c <__aeabi_dmul>
 800800c:	2601      	movs	r6, #1
 800800e:	2300      	movs	r3, #0
 8008010:	900a      	str	r0, [sp, #40]	; 0x28
 8008012:	910b      	str	r1, [sp, #44]	; 0x2c
 8008014:	4db0      	ldr	r5, [pc, #704]	; (80082d8 <_dtoa_r+0x69c>)
 8008016:	1124      	asrs	r4, r4, #4
 8008018:	2c00      	cmp	r4, #0
 800801a:	d000      	beq.n	800801e <_dtoa_r+0x3e2>
 800801c:	e094      	b.n	8008148 <_dtoa_r+0x50c>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d19f      	bne.n	8007f62 <_dtoa_r+0x326>
 8008022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008024:	2b00      	cmp	r3, #0
 8008026:	d100      	bne.n	800802a <_dtoa_r+0x3ee>
 8008028:	e09b      	b.n	8008162 <_dtoa_r+0x526>
 800802a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800802c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800802e:	2200      	movs	r2, #0
 8008030:	0020      	movs	r0, r4
 8008032:	0029      	movs	r1, r5
 8008034:	4ba9      	ldr	r3, [pc, #676]	; (80082dc <_dtoa_r+0x6a0>)
 8008036:	f7f8 fa0f 	bl	8000458 <__aeabi_dcmplt>
 800803a:	2800      	cmp	r0, #0
 800803c:	d100      	bne.n	8008040 <_dtoa_r+0x404>
 800803e:	e090      	b.n	8008162 <_dtoa_r+0x526>
 8008040:	9b06      	ldr	r3, [sp, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d100      	bne.n	8008048 <_dtoa_r+0x40c>
 8008046:	e08c      	b.n	8008162 <_dtoa_r+0x526>
 8008048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800804a:	2b00      	cmp	r3, #0
 800804c:	dd46      	ble.n	80080dc <_dtoa_r+0x4a0>
 800804e:	9b02      	ldr	r3, [sp, #8]
 8008050:	2200      	movs	r2, #0
 8008052:	0020      	movs	r0, r4
 8008054:	0029      	movs	r1, r5
 8008056:	1e5e      	subs	r6, r3, #1
 8008058:	4ba1      	ldr	r3, [pc, #644]	; (80082e0 <_dtoa_r+0x6a4>)
 800805a:	f7f9 fb57 	bl	800170c <__aeabi_dmul>
 800805e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008060:	900a      	str	r0, [sp, #40]	; 0x28
 8008062:	910b      	str	r1, [sp, #44]	; 0x2c
 8008064:	3301      	adds	r3, #1
 8008066:	9310      	str	r3, [sp, #64]	; 0x40
 8008068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800806a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800806c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800806e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008070:	9307      	str	r3, [sp, #28]
 8008072:	f7fa f99d 	bl	80023b0 <__aeabi_i2d>
 8008076:	0022      	movs	r2, r4
 8008078:	002b      	movs	r3, r5
 800807a:	f7f9 fb47 	bl	800170c <__aeabi_dmul>
 800807e:	2200      	movs	r2, #0
 8008080:	4b98      	ldr	r3, [pc, #608]	; (80082e4 <_dtoa_r+0x6a8>)
 8008082:	f7f8 fbd3 	bl	800082c <__aeabi_dadd>
 8008086:	9010      	str	r0, [sp, #64]	; 0x40
 8008088:	9111      	str	r1, [sp, #68]	; 0x44
 800808a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800808c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800808e:	920a      	str	r2, [sp, #40]	; 0x28
 8008090:	930b      	str	r3, [sp, #44]	; 0x2c
 8008092:	4a95      	ldr	r2, [pc, #596]	; (80082e8 <_dtoa_r+0x6ac>)
 8008094:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008096:	4694      	mov	ip, r2
 8008098:	4463      	add	r3, ip
 800809a:	9317      	str	r3, [sp, #92]	; 0x5c
 800809c:	930b      	str	r3, [sp, #44]	; 0x2c
 800809e:	9b07      	ldr	r3, [sp, #28]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d161      	bne.n	8008168 <_dtoa_r+0x52c>
 80080a4:	2200      	movs	r2, #0
 80080a6:	0020      	movs	r0, r4
 80080a8:	0029      	movs	r1, r5
 80080aa:	4b90      	ldr	r3, [pc, #576]	; (80082ec <_dtoa_r+0x6b0>)
 80080ac:	f7f9 fd9a 	bl	8001be4 <__aeabi_dsub>
 80080b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080b4:	0004      	movs	r4, r0
 80080b6:	000d      	movs	r5, r1
 80080b8:	f7f8 f9e2 	bl	8000480 <__aeabi_dcmpgt>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d000      	beq.n	80080c2 <_dtoa_r+0x486>
 80080c0:	e2b5      	b.n	800862e <_dtoa_r+0x9f2>
 80080c2:	488b      	ldr	r0, [pc, #556]	; (80082f0 <_dtoa_r+0x6b4>)
 80080c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080c6:	4684      	mov	ip, r0
 80080c8:	4461      	add	r1, ip
 80080ca:	000b      	movs	r3, r1
 80080cc:	0020      	movs	r0, r4
 80080ce:	0029      	movs	r1, r5
 80080d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080d2:	f7f8 f9c1 	bl	8000458 <__aeabi_dcmplt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d000      	beq.n	80080dc <_dtoa_r+0x4a0>
 80080da:	e2a5      	b.n	8008628 <_dtoa_r+0x9ec>
 80080dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80080e0:	930a      	str	r3, [sp, #40]	; 0x28
 80080e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80080e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da00      	bge.n	80080ec <_dtoa_r+0x4b0>
 80080ea:	e171      	b.n	80083d0 <_dtoa_r+0x794>
 80080ec:	9a02      	ldr	r2, [sp, #8]
 80080ee:	2a0e      	cmp	r2, #14
 80080f0:	dd00      	ble.n	80080f4 <_dtoa_r+0x4b8>
 80080f2:	e16d      	b.n	80083d0 <_dtoa_r+0x794>
 80080f4:	4b77      	ldr	r3, [pc, #476]	; (80082d4 <_dtoa_r+0x698>)
 80080f6:	00d2      	lsls	r2, r2, #3
 80080f8:	189b      	adds	r3, r3, r2
 80080fa:	685c      	ldr	r4, [r3, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	9409      	str	r4, [sp, #36]	; 0x24
 8008102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008104:	2b00      	cmp	r3, #0
 8008106:	db00      	blt.n	800810a <_dtoa_r+0x4ce>
 8008108:	e0f6      	b.n	80082f8 <_dtoa_r+0x6bc>
 800810a:	9b06      	ldr	r3, [sp, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	dd00      	ble.n	8008112 <_dtoa_r+0x4d6>
 8008110:	e0f2      	b.n	80082f8 <_dtoa_r+0x6bc>
 8008112:	d000      	beq.n	8008116 <_dtoa_r+0x4da>
 8008114:	e288      	b.n	8008628 <_dtoa_r+0x9ec>
 8008116:	9808      	ldr	r0, [sp, #32]
 8008118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800811a:	2200      	movs	r2, #0
 800811c:	4b73      	ldr	r3, [pc, #460]	; (80082ec <_dtoa_r+0x6b0>)
 800811e:	f7f9 faf5 	bl	800170c <__aeabi_dmul>
 8008122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008126:	f7f8 f9b5 	bl	8000494 <__aeabi_dcmpge>
 800812a:	9e06      	ldr	r6, [sp, #24]
 800812c:	0035      	movs	r5, r6
 800812e:	2800      	cmp	r0, #0
 8008130:	d000      	beq.n	8008134 <_dtoa_r+0x4f8>
 8008132:	e25f      	b.n	80085f4 <_dtoa_r+0x9b8>
 8008134:	9b05      	ldr	r3, [sp, #20]
 8008136:	9a05      	ldr	r2, [sp, #20]
 8008138:	3301      	adds	r3, #1
 800813a:	9307      	str	r3, [sp, #28]
 800813c:	2331      	movs	r3, #49	; 0x31
 800813e:	7013      	strb	r3, [r2, #0]
 8008140:	9b02      	ldr	r3, [sp, #8]
 8008142:	3301      	adds	r3, #1
 8008144:	9302      	str	r3, [sp, #8]
 8008146:	e25a      	b.n	80085fe <_dtoa_r+0x9c2>
 8008148:	4234      	tst	r4, r6
 800814a:	d007      	beq.n	800815c <_dtoa_r+0x520>
 800814c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800814e:	3301      	adds	r3, #1
 8008150:	9310      	str	r3, [sp, #64]	; 0x40
 8008152:	682a      	ldr	r2, [r5, #0]
 8008154:	686b      	ldr	r3, [r5, #4]
 8008156:	f7f9 fad9 	bl	800170c <__aeabi_dmul>
 800815a:	0033      	movs	r3, r6
 800815c:	1064      	asrs	r4, r4, #1
 800815e:	3508      	adds	r5, #8
 8008160:	e75a      	b.n	8008018 <_dtoa_r+0x3dc>
 8008162:	9e02      	ldr	r6, [sp, #8]
 8008164:	9b06      	ldr	r3, [sp, #24]
 8008166:	e780      	b.n	800806a <_dtoa_r+0x42e>
 8008168:	9b07      	ldr	r3, [sp, #28]
 800816a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800816c:	1e5a      	subs	r2, r3, #1
 800816e:	4b59      	ldr	r3, [pc, #356]	; (80082d4 <_dtoa_r+0x698>)
 8008170:	00d2      	lsls	r2, r2, #3
 8008172:	189b      	adds	r3, r3, r2
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2900      	cmp	r1, #0
 800817a:	d051      	beq.n	8008220 <_dtoa_r+0x5e4>
 800817c:	2000      	movs	r0, #0
 800817e:	495d      	ldr	r1, [pc, #372]	; (80082f4 <_dtoa_r+0x6b8>)
 8008180:	f7f8 febe 	bl	8000f00 <__aeabi_ddiv>
 8008184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008188:	f7f9 fd2c 	bl	8001be4 <__aeabi_dsub>
 800818c:	9a05      	ldr	r2, [sp, #20]
 800818e:	9b05      	ldr	r3, [sp, #20]
 8008190:	4694      	mov	ip, r2
 8008192:	9310      	str	r3, [sp, #64]	; 0x40
 8008194:	9b07      	ldr	r3, [sp, #28]
 8008196:	900a      	str	r0, [sp, #40]	; 0x28
 8008198:	910b      	str	r1, [sp, #44]	; 0x2c
 800819a:	4463      	add	r3, ip
 800819c:	9319      	str	r3, [sp, #100]	; 0x64
 800819e:	0029      	movs	r1, r5
 80081a0:	0020      	movs	r0, r4
 80081a2:	f7fa f8cf 	bl	8002344 <__aeabi_d2iz>
 80081a6:	9017      	str	r0, [sp, #92]	; 0x5c
 80081a8:	f7fa f902 	bl	80023b0 <__aeabi_i2d>
 80081ac:	0002      	movs	r2, r0
 80081ae:	000b      	movs	r3, r1
 80081b0:	0020      	movs	r0, r4
 80081b2:	0029      	movs	r1, r5
 80081b4:	f7f9 fd16 	bl	8001be4 <__aeabi_dsub>
 80081b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081bc:	3301      	adds	r3, #1
 80081be:	9307      	str	r3, [sp, #28]
 80081c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081c2:	0004      	movs	r4, r0
 80081c4:	3330      	adds	r3, #48	; 0x30
 80081c6:	7013      	strb	r3, [r2, #0]
 80081c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081cc:	000d      	movs	r5, r1
 80081ce:	f7f8 f943 	bl	8000458 <__aeabi_dcmplt>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d175      	bne.n	80082c2 <_dtoa_r+0x686>
 80081d6:	0022      	movs	r2, r4
 80081d8:	002b      	movs	r3, r5
 80081da:	2000      	movs	r0, #0
 80081dc:	493f      	ldr	r1, [pc, #252]	; (80082dc <_dtoa_r+0x6a0>)
 80081de:	f7f9 fd01 	bl	8001be4 <__aeabi_dsub>
 80081e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e6:	f7f8 f937 	bl	8000458 <__aeabi_dcmplt>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d000      	beq.n	80081f0 <_dtoa_r+0x5b4>
 80081ee:	e0d1      	b.n	8008394 <_dtoa_r+0x758>
 80081f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081f2:	9a07      	ldr	r2, [sp, #28]
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d100      	bne.n	80081fa <_dtoa_r+0x5be>
 80081f8:	e770      	b.n	80080dc <_dtoa_r+0x4a0>
 80081fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80081fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081fe:	2200      	movs	r2, #0
 8008200:	4b37      	ldr	r3, [pc, #220]	; (80082e0 <_dtoa_r+0x6a4>)
 8008202:	f7f9 fa83 	bl	800170c <__aeabi_dmul>
 8008206:	4b36      	ldr	r3, [pc, #216]	; (80082e0 <_dtoa_r+0x6a4>)
 8008208:	900a      	str	r0, [sp, #40]	; 0x28
 800820a:	910b      	str	r1, [sp, #44]	; 0x2c
 800820c:	2200      	movs	r2, #0
 800820e:	0020      	movs	r0, r4
 8008210:	0029      	movs	r1, r5
 8008212:	f7f9 fa7b 	bl	800170c <__aeabi_dmul>
 8008216:	9b07      	ldr	r3, [sp, #28]
 8008218:	0004      	movs	r4, r0
 800821a:	000d      	movs	r5, r1
 800821c:	9310      	str	r3, [sp, #64]	; 0x40
 800821e:	e7be      	b.n	800819e <_dtoa_r+0x562>
 8008220:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008222:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008224:	f7f9 fa72 	bl	800170c <__aeabi_dmul>
 8008228:	9a05      	ldr	r2, [sp, #20]
 800822a:	9b05      	ldr	r3, [sp, #20]
 800822c:	4694      	mov	ip, r2
 800822e:	930a      	str	r3, [sp, #40]	; 0x28
 8008230:	9b07      	ldr	r3, [sp, #28]
 8008232:	9010      	str	r0, [sp, #64]	; 0x40
 8008234:	9111      	str	r1, [sp, #68]	; 0x44
 8008236:	4463      	add	r3, ip
 8008238:	9319      	str	r3, [sp, #100]	; 0x64
 800823a:	0029      	movs	r1, r5
 800823c:	0020      	movs	r0, r4
 800823e:	f7fa f881 	bl	8002344 <__aeabi_d2iz>
 8008242:	9017      	str	r0, [sp, #92]	; 0x5c
 8008244:	f7fa f8b4 	bl	80023b0 <__aeabi_i2d>
 8008248:	0002      	movs	r2, r0
 800824a:	000b      	movs	r3, r1
 800824c:	0020      	movs	r0, r4
 800824e:	0029      	movs	r1, r5
 8008250:	f7f9 fcc8 	bl	8001be4 <__aeabi_dsub>
 8008254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008258:	3330      	adds	r3, #48	; 0x30
 800825a:	7013      	strb	r3, [r2, #0]
 800825c:	0013      	movs	r3, r2
 800825e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008260:	3301      	adds	r3, #1
 8008262:	0004      	movs	r4, r0
 8008264:	000d      	movs	r5, r1
 8008266:	930a      	str	r3, [sp, #40]	; 0x28
 8008268:	4293      	cmp	r3, r2
 800826a:	d12c      	bne.n	80082c6 <_dtoa_r+0x68a>
 800826c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800826e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008270:	9a05      	ldr	r2, [sp, #20]
 8008272:	9b07      	ldr	r3, [sp, #28]
 8008274:	4694      	mov	ip, r2
 8008276:	4463      	add	r3, ip
 8008278:	2200      	movs	r2, #0
 800827a:	9307      	str	r3, [sp, #28]
 800827c:	4b1d      	ldr	r3, [pc, #116]	; (80082f4 <_dtoa_r+0x6b8>)
 800827e:	f7f8 fad5 	bl	800082c <__aeabi_dadd>
 8008282:	0002      	movs	r2, r0
 8008284:	000b      	movs	r3, r1
 8008286:	0020      	movs	r0, r4
 8008288:	0029      	movs	r1, r5
 800828a:	f7f8 f8f9 	bl	8000480 <__aeabi_dcmpgt>
 800828e:	2800      	cmp	r0, #0
 8008290:	d000      	beq.n	8008294 <_dtoa_r+0x658>
 8008292:	e07f      	b.n	8008394 <_dtoa_r+0x758>
 8008294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008298:	2000      	movs	r0, #0
 800829a:	4916      	ldr	r1, [pc, #88]	; (80082f4 <_dtoa_r+0x6b8>)
 800829c:	f7f9 fca2 	bl	8001be4 <__aeabi_dsub>
 80082a0:	0002      	movs	r2, r0
 80082a2:	000b      	movs	r3, r1
 80082a4:	0020      	movs	r0, r4
 80082a6:	0029      	movs	r1, r5
 80082a8:	f7f8 f8d6 	bl	8000458 <__aeabi_dcmplt>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d100      	bne.n	80082b2 <_dtoa_r+0x676>
 80082b0:	e714      	b.n	80080dc <_dtoa_r+0x4a0>
 80082b2:	9b07      	ldr	r3, [sp, #28]
 80082b4:	001a      	movs	r2, r3
 80082b6:	3a01      	subs	r2, #1
 80082b8:	9207      	str	r2, [sp, #28]
 80082ba:	7812      	ldrb	r2, [r2, #0]
 80082bc:	2a30      	cmp	r2, #48	; 0x30
 80082be:	d0f8      	beq.n	80082b2 <_dtoa_r+0x676>
 80082c0:	9307      	str	r3, [sp, #28]
 80082c2:	9602      	str	r6, [sp, #8]
 80082c4:	e054      	b.n	8008370 <_dtoa_r+0x734>
 80082c6:	2200      	movs	r2, #0
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <_dtoa_r+0x6a4>)
 80082ca:	f7f9 fa1f 	bl	800170c <__aeabi_dmul>
 80082ce:	0004      	movs	r4, r0
 80082d0:	000d      	movs	r5, r1
 80082d2:	e7b2      	b.n	800823a <_dtoa_r+0x5fe>
 80082d4:	0800aea0 	.word	0x0800aea0
 80082d8:	0800ae78 	.word	0x0800ae78
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	40240000 	.word	0x40240000
 80082e4:	401c0000 	.word	0x401c0000
 80082e8:	fcc00000 	.word	0xfcc00000
 80082ec:	40140000 	.word	0x40140000
 80082f0:	7cc00000 	.word	0x7cc00000
 80082f4:	3fe00000 	.word	0x3fe00000
 80082f8:	9b06      	ldr	r3, [sp, #24]
 80082fa:	9e05      	ldr	r6, [sp, #20]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	199b      	adds	r3, r3, r6
 8008300:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008302:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008304:	930a      	str	r3, [sp, #40]	; 0x28
 8008306:	9a08      	ldr	r2, [sp, #32]
 8008308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830a:	0020      	movs	r0, r4
 800830c:	0029      	movs	r1, r5
 800830e:	f7f8 fdf7 	bl	8000f00 <__aeabi_ddiv>
 8008312:	f7fa f817 	bl	8002344 <__aeabi_d2iz>
 8008316:	9006      	str	r0, [sp, #24]
 8008318:	f7fa f84a 	bl	80023b0 <__aeabi_i2d>
 800831c:	9a08      	ldr	r2, [sp, #32]
 800831e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008320:	f7f9 f9f4 	bl	800170c <__aeabi_dmul>
 8008324:	0002      	movs	r2, r0
 8008326:	000b      	movs	r3, r1
 8008328:	0020      	movs	r0, r4
 800832a:	0029      	movs	r1, r5
 800832c:	f7f9 fc5a 	bl	8001be4 <__aeabi_dsub>
 8008330:	0033      	movs	r3, r6
 8008332:	9a06      	ldr	r2, [sp, #24]
 8008334:	3601      	adds	r6, #1
 8008336:	3230      	adds	r2, #48	; 0x30
 8008338:	701a      	strb	r2, [r3, #0]
 800833a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833c:	9607      	str	r6, [sp, #28]
 800833e:	429a      	cmp	r2, r3
 8008340:	d139      	bne.n	80083b6 <_dtoa_r+0x77a>
 8008342:	0002      	movs	r2, r0
 8008344:	000b      	movs	r3, r1
 8008346:	f7f8 fa71 	bl	800082c <__aeabi_dadd>
 800834a:	9a08      	ldr	r2, [sp, #32]
 800834c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834e:	0004      	movs	r4, r0
 8008350:	000d      	movs	r5, r1
 8008352:	f7f8 f895 	bl	8000480 <__aeabi_dcmpgt>
 8008356:	2800      	cmp	r0, #0
 8008358:	d11b      	bne.n	8008392 <_dtoa_r+0x756>
 800835a:	9a08      	ldr	r2, [sp, #32]
 800835c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835e:	0020      	movs	r0, r4
 8008360:	0029      	movs	r1, r5
 8008362:	f7f8 f873 	bl	800044c <__aeabi_dcmpeq>
 8008366:	2800      	cmp	r0, #0
 8008368:	d002      	beq.n	8008370 <_dtoa_r+0x734>
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	07db      	lsls	r3, r3, #31
 800836e:	d410      	bmi.n	8008392 <_dtoa_r+0x756>
 8008370:	0038      	movs	r0, r7
 8008372:	9904      	ldr	r1, [sp, #16]
 8008374:	f000 fe6a 	bl	800904c <_Bfree>
 8008378:	2300      	movs	r3, #0
 800837a:	9a07      	ldr	r2, [sp, #28]
 800837c:	9802      	ldr	r0, [sp, #8]
 800837e:	7013      	strb	r3, [r2, #0]
 8008380:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008382:	3001      	adds	r0, #1
 8008384:	6018      	str	r0, [r3, #0]
 8008386:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008388:	2b00      	cmp	r3, #0
 800838a:	d100      	bne.n	800838e <_dtoa_r+0x752>
 800838c:	e4a3      	b.n	8007cd6 <_dtoa_r+0x9a>
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	e4a1      	b.n	8007cd6 <_dtoa_r+0x9a>
 8008392:	9e02      	ldr	r6, [sp, #8]
 8008394:	9b07      	ldr	r3, [sp, #28]
 8008396:	9307      	str	r3, [sp, #28]
 8008398:	3b01      	subs	r3, #1
 800839a:	781a      	ldrb	r2, [r3, #0]
 800839c:	2a39      	cmp	r2, #57	; 0x39
 800839e:	d106      	bne.n	80083ae <_dtoa_r+0x772>
 80083a0:	9a05      	ldr	r2, [sp, #20]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d1f7      	bne.n	8008396 <_dtoa_r+0x75a>
 80083a6:	2230      	movs	r2, #48	; 0x30
 80083a8:	9905      	ldr	r1, [sp, #20]
 80083aa:	3601      	adds	r6, #1
 80083ac:	700a      	strb	r2, [r1, #0]
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	3201      	adds	r2, #1
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	e785      	b.n	80082c2 <_dtoa_r+0x686>
 80083b6:	2200      	movs	r2, #0
 80083b8:	4bad      	ldr	r3, [pc, #692]	; (8008670 <_dtoa_r+0xa34>)
 80083ba:	f7f9 f9a7 	bl	800170c <__aeabi_dmul>
 80083be:	2200      	movs	r2, #0
 80083c0:	2300      	movs	r3, #0
 80083c2:	0004      	movs	r4, r0
 80083c4:	000d      	movs	r5, r1
 80083c6:	f7f8 f841 	bl	800044c <__aeabi_dcmpeq>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d09b      	beq.n	8008306 <_dtoa_r+0x6ca>
 80083ce:	e7cf      	b.n	8008370 <_dtoa_r+0x734>
 80083d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083d2:	2a00      	cmp	r2, #0
 80083d4:	d100      	bne.n	80083d8 <_dtoa_r+0x79c>
 80083d6:	e082      	b.n	80084de <_dtoa_r+0x8a2>
 80083d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80083da:	2a01      	cmp	r2, #1
 80083dc:	dc66      	bgt.n	80084ac <_dtoa_r+0x870>
 80083de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083e0:	2a00      	cmp	r2, #0
 80083e2:	d05f      	beq.n	80084a4 <_dtoa_r+0x868>
 80083e4:	4aa3      	ldr	r2, [pc, #652]	; (8008674 <_dtoa_r+0xa38>)
 80083e6:	189b      	adds	r3, r3, r2
 80083e8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80083ea:	9c08      	ldr	r4, [sp, #32]
 80083ec:	9a08      	ldr	r2, [sp, #32]
 80083ee:	2101      	movs	r1, #1
 80083f0:	18d2      	adds	r2, r2, r3
 80083f2:	9208      	str	r2, [sp, #32]
 80083f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083f6:	0038      	movs	r0, r7
 80083f8:	18d3      	adds	r3, r2, r3
 80083fa:	930d      	str	r3, [sp, #52]	; 0x34
 80083fc:	f000 ff22 	bl	8009244 <__i2b>
 8008400:	0005      	movs	r5, r0
 8008402:	2c00      	cmp	r4, #0
 8008404:	dd0e      	ble.n	8008424 <_dtoa_r+0x7e8>
 8008406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008408:	2b00      	cmp	r3, #0
 800840a:	dd0b      	ble.n	8008424 <_dtoa_r+0x7e8>
 800840c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800840e:	0023      	movs	r3, r4
 8008410:	4294      	cmp	r4, r2
 8008412:	dd00      	ble.n	8008416 <_dtoa_r+0x7da>
 8008414:	0013      	movs	r3, r2
 8008416:	9a08      	ldr	r2, [sp, #32]
 8008418:	1ae4      	subs	r4, r4, r3
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	9208      	str	r2, [sp, #32]
 800841e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	930d      	str	r3, [sp, #52]	; 0x34
 8008424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01f      	beq.n	800846a <_dtoa_r+0x82e>
 800842a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05a      	beq.n	80084e6 <_dtoa_r+0x8aa>
 8008430:	2e00      	cmp	r6, #0
 8008432:	dd11      	ble.n	8008458 <_dtoa_r+0x81c>
 8008434:	0029      	movs	r1, r5
 8008436:	0032      	movs	r2, r6
 8008438:	0038      	movs	r0, r7
 800843a:	f000 ffc9 	bl	80093d0 <__pow5mult>
 800843e:	9a04      	ldr	r2, [sp, #16]
 8008440:	0001      	movs	r1, r0
 8008442:	0005      	movs	r5, r0
 8008444:	0038      	movs	r0, r7
 8008446:	f000 ff13 	bl	8009270 <__multiply>
 800844a:	9904      	ldr	r1, [sp, #16]
 800844c:	9007      	str	r0, [sp, #28]
 800844e:	0038      	movs	r0, r7
 8008450:	f000 fdfc 	bl	800904c <_Bfree>
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	9304      	str	r3, [sp, #16]
 8008458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800845a:	1b9a      	subs	r2, r3, r6
 800845c:	42b3      	cmp	r3, r6
 800845e:	d004      	beq.n	800846a <_dtoa_r+0x82e>
 8008460:	0038      	movs	r0, r7
 8008462:	9904      	ldr	r1, [sp, #16]
 8008464:	f000 ffb4 	bl	80093d0 <__pow5mult>
 8008468:	9004      	str	r0, [sp, #16]
 800846a:	2101      	movs	r1, #1
 800846c:	0038      	movs	r0, r7
 800846e:	f000 fee9 	bl	8009244 <__i2b>
 8008472:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008474:	0006      	movs	r6, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	dd37      	ble.n	80084ea <_dtoa_r+0x8ae>
 800847a:	001a      	movs	r2, r3
 800847c:	0001      	movs	r1, r0
 800847e:	0038      	movs	r0, r7
 8008480:	f000 ffa6 	bl	80093d0 <__pow5mult>
 8008484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008486:	0006      	movs	r6, r0
 8008488:	2b01      	cmp	r3, #1
 800848a:	dd33      	ble.n	80084f4 <_dtoa_r+0x8b8>
 800848c:	2300      	movs	r3, #0
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	6933      	ldr	r3, [r6, #16]
 8008492:	3303      	adds	r3, #3
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	18f3      	adds	r3, r6, r3
 8008498:	6858      	ldr	r0, [r3, #4]
 800849a:	f000 fe8b 	bl	80091b4 <__hi0bits>
 800849e:	2320      	movs	r3, #32
 80084a0:	1a18      	subs	r0, r3, r0
 80084a2:	e03f      	b.n	8008524 <_dtoa_r+0x8e8>
 80084a4:	2336      	movs	r3, #54	; 0x36
 80084a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084a8:	1a9b      	subs	r3, r3, r2
 80084aa:	e79d      	b.n	80083e8 <_dtoa_r+0x7ac>
 80084ac:	9b06      	ldr	r3, [sp, #24]
 80084ae:	1e5e      	subs	r6, r3, #1
 80084b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084b2:	42b3      	cmp	r3, r6
 80084b4:	db08      	blt.n	80084c8 <_dtoa_r+0x88c>
 80084b6:	1b9e      	subs	r6, r3, r6
 80084b8:	9b06      	ldr	r3, [sp, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	da0c      	bge.n	80084d8 <_dtoa_r+0x89c>
 80084be:	9b08      	ldr	r3, [sp, #32]
 80084c0:	9a06      	ldr	r2, [sp, #24]
 80084c2:	1a9c      	subs	r4, r3, r2
 80084c4:	2300      	movs	r3, #0
 80084c6:	e791      	b.n	80083ec <_dtoa_r+0x7b0>
 80084c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084cc:	1af3      	subs	r3, r6, r3
 80084ce:	18d3      	adds	r3, r2, r3
 80084d0:	960e      	str	r6, [sp, #56]	; 0x38
 80084d2:	9314      	str	r3, [sp, #80]	; 0x50
 80084d4:	2600      	movs	r6, #0
 80084d6:	e7ef      	b.n	80084b8 <_dtoa_r+0x87c>
 80084d8:	9c08      	ldr	r4, [sp, #32]
 80084da:	9b06      	ldr	r3, [sp, #24]
 80084dc:	e786      	b.n	80083ec <_dtoa_r+0x7b0>
 80084de:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80084e0:	9c08      	ldr	r4, [sp, #32]
 80084e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80084e4:	e78d      	b.n	8008402 <_dtoa_r+0x7c6>
 80084e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084e8:	e7ba      	b.n	8008460 <_dtoa_r+0x824>
 80084ea:	2300      	movs	r3, #0
 80084ec:	9307      	str	r3, [sp, #28]
 80084ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	dc13      	bgt.n	800851c <_dtoa_r+0x8e0>
 80084f4:	2300      	movs	r3, #0
 80084f6:	9307      	str	r3, [sp, #28]
 80084f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10e      	bne.n	800851c <_dtoa_r+0x8e0>
 80084fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008500:	031b      	lsls	r3, r3, #12
 8008502:	d10b      	bne.n	800851c <_dtoa_r+0x8e0>
 8008504:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008508:	4213      	tst	r3, r2
 800850a:	d007      	beq.n	800851c <_dtoa_r+0x8e0>
 800850c:	9b08      	ldr	r3, [sp, #32]
 800850e:	3301      	adds	r3, #1
 8008510:	9308      	str	r3, [sp, #32]
 8008512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008514:	3301      	adds	r3, #1
 8008516:	930d      	str	r3, [sp, #52]	; 0x34
 8008518:	2301      	movs	r3, #1
 800851a:	9307      	str	r3, [sp, #28]
 800851c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800851e:	2001      	movs	r0, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1b5      	bne.n	8008490 <_dtoa_r+0x854>
 8008524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008526:	221f      	movs	r2, #31
 8008528:	1818      	adds	r0, r3, r0
 800852a:	0003      	movs	r3, r0
 800852c:	4013      	ands	r3, r2
 800852e:	4210      	tst	r0, r2
 8008530:	d046      	beq.n	80085c0 <_dtoa_r+0x984>
 8008532:	3201      	adds	r2, #1
 8008534:	1ad2      	subs	r2, r2, r3
 8008536:	2a04      	cmp	r2, #4
 8008538:	dd3f      	ble.n	80085ba <_dtoa_r+0x97e>
 800853a:	221c      	movs	r2, #28
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	9a08      	ldr	r2, [sp, #32]
 8008540:	18e4      	adds	r4, r4, r3
 8008542:	18d2      	adds	r2, r2, r3
 8008544:	9208      	str	r2, [sp, #32]
 8008546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008548:	18d3      	adds	r3, r2, r3
 800854a:	930d      	str	r3, [sp, #52]	; 0x34
 800854c:	9b08      	ldr	r3, [sp, #32]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dd05      	ble.n	800855e <_dtoa_r+0x922>
 8008552:	001a      	movs	r2, r3
 8008554:	0038      	movs	r0, r7
 8008556:	9904      	ldr	r1, [sp, #16]
 8008558:	f000 ff96 	bl	8009488 <__lshift>
 800855c:	9004      	str	r0, [sp, #16]
 800855e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008560:	2b00      	cmp	r3, #0
 8008562:	dd05      	ble.n	8008570 <_dtoa_r+0x934>
 8008564:	0031      	movs	r1, r6
 8008566:	001a      	movs	r2, r3
 8008568:	0038      	movs	r0, r7
 800856a:	f000 ff8d 	bl	8009488 <__lshift>
 800856e:	0006      	movs	r6, r0
 8008570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008572:	2b00      	cmp	r3, #0
 8008574:	d026      	beq.n	80085c4 <_dtoa_r+0x988>
 8008576:	0031      	movs	r1, r6
 8008578:	9804      	ldr	r0, [sp, #16]
 800857a:	f000 fff5 	bl	8009568 <__mcmp>
 800857e:	2800      	cmp	r0, #0
 8008580:	da20      	bge.n	80085c4 <_dtoa_r+0x988>
 8008582:	9b02      	ldr	r3, [sp, #8]
 8008584:	220a      	movs	r2, #10
 8008586:	3b01      	subs	r3, #1
 8008588:	9302      	str	r3, [sp, #8]
 800858a:	0038      	movs	r0, r7
 800858c:	2300      	movs	r3, #0
 800858e:	9904      	ldr	r1, [sp, #16]
 8008590:	f000 fd80 	bl	8009094 <__multadd>
 8008594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008596:	9004      	str	r0, [sp, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d100      	bne.n	800859e <_dtoa_r+0x962>
 800859c:	e160      	b.n	8008860 <_dtoa_r+0xc24>
 800859e:	2300      	movs	r3, #0
 80085a0:	0029      	movs	r1, r5
 80085a2:	220a      	movs	r2, #10
 80085a4:	0038      	movs	r0, r7
 80085a6:	f000 fd75 	bl	8009094 <__multadd>
 80085aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ac:	0005      	movs	r5, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dc47      	bgt.n	8008642 <_dtoa_r+0xa06>
 80085b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	dc0d      	bgt.n	80085d4 <_dtoa_r+0x998>
 80085b8:	e043      	b.n	8008642 <_dtoa_r+0xa06>
 80085ba:	2a04      	cmp	r2, #4
 80085bc:	d0c6      	beq.n	800854c <_dtoa_r+0x910>
 80085be:	0013      	movs	r3, r2
 80085c0:	331c      	adds	r3, #28
 80085c2:	e7bc      	b.n	800853e <_dtoa_r+0x902>
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dc35      	bgt.n	8008636 <_dtoa_r+0x9fa>
 80085ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	dd32      	ble.n	8008636 <_dtoa_r+0x9fa>
 80085d0:	9b06      	ldr	r3, [sp, #24]
 80085d2:	930c      	str	r3, [sp, #48]	; 0x30
 80085d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10c      	bne.n	80085f4 <_dtoa_r+0x9b8>
 80085da:	0031      	movs	r1, r6
 80085dc:	2205      	movs	r2, #5
 80085de:	0038      	movs	r0, r7
 80085e0:	f000 fd58 	bl	8009094 <__multadd>
 80085e4:	0006      	movs	r6, r0
 80085e6:	0001      	movs	r1, r0
 80085e8:	9804      	ldr	r0, [sp, #16]
 80085ea:	f000 ffbd 	bl	8009568 <__mcmp>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	dd00      	ble.n	80085f4 <_dtoa_r+0x9b8>
 80085f2:	e59f      	b.n	8008134 <_dtoa_r+0x4f8>
 80085f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085f6:	43db      	mvns	r3, r3
 80085f8:	9302      	str	r3, [sp, #8]
 80085fa:	9b05      	ldr	r3, [sp, #20]
 80085fc:	9307      	str	r3, [sp, #28]
 80085fe:	2400      	movs	r4, #0
 8008600:	0031      	movs	r1, r6
 8008602:	0038      	movs	r0, r7
 8008604:	f000 fd22 	bl	800904c <_Bfree>
 8008608:	2d00      	cmp	r5, #0
 800860a:	d100      	bne.n	800860e <_dtoa_r+0x9d2>
 800860c:	e6b0      	b.n	8008370 <_dtoa_r+0x734>
 800860e:	2c00      	cmp	r4, #0
 8008610:	d005      	beq.n	800861e <_dtoa_r+0x9e2>
 8008612:	42ac      	cmp	r4, r5
 8008614:	d003      	beq.n	800861e <_dtoa_r+0x9e2>
 8008616:	0021      	movs	r1, r4
 8008618:	0038      	movs	r0, r7
 800861a:	f000 fd17 	bl	800904c <_Bfree>
 800861e:	0029      	movs	r1, r5
 8008620:	0038      	movs	r0, r7
 8008622:	f000 fd13 	bl	800904c <_Bfree>
 8008626:	e6a3      	b.n	8008370 <_dtoa_r+0x734>
 8008628:	2600      	movs	r6, #0
 800862a:	0035      	movs	r5, r6
 800862c:	e7e2      	b.n	80085f4 <_dtoa_r+0x9b8>
 800862e:	9602      	str	r6, [sp, #8]
 8008630:	9e07      	ldr	r6, [sp, #28]
 8008632:	0035      	movs	r5, r6
 8008634:	e57e      	b.n	8008134 <_dtoa_r+0x4f8>
 8008636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d100      	bne.n	800863e <_dtoa_r+0xa02>
 800863c:	e0c8      	b.n	80087d0 <_dtoa_r+0xb94>
 800863e:	9b06      	ldr	r3, [sp, #24]
 8008640:	930c      	str	r3, [sp, #48]	; 0x30
 8008642:	2c00      	cmp	r4, #0
 8008644:	dd05      	ble.n	8008652 <_dtoa_r+0xa16>
 8008646:	0029      	movs	r1, r5
 8008648:	0022      	movs	r2, r4
 800864a:	0038      	movs	r0, r7
 800864c:	f000 ff1c 	bl	8009488 <__lshift>
 8008650:	0005      	movs	r5, r0
 8008652:	9b07      	ldr	r3, [sp, #28]
 8008654:	0028      	movs	r0, r5
 8008656:	2b00      	cmp	r3, #0
 8008658:	d01f      	beq.n	800869a <_dtoa_r+0xa5e>
 800865a:	0038      	movs	r0, r7
 800865c:	6869      	ldr	r1, [r5, #4]
 800865e:	f000 fcb1 	bl	8008fc4 <_Balloc>
 8008662:	1e04      	subs	r4, r0, #0
 8008664:	d10c      	bne.n	8008680 <_dtoa_r+0xa44>
 8008666:	0002      	movs	r2, r0
 8008668:	4b03      	ldr	r3, [pc, #12]	; (8008678 <_dtoa_r+0xa3c>)
 800866a:	4904      	ldr	r1, [pc, #16]	; (800867c <_dtoa_r+0xa40>)
 800866c:	f7ff fafb 	bl	8007c66 <_dtoa_r+0x2a>
 8008670:	40240000 	.word	0x40240000
 8008674:	00000433 	.word	0x00000433
 8008678:	0800ad84 	.word	0x0800ad84
 800867c:	000002ea 	.word	0x000002ea
 8008680:	0029      	movs	r1, r5
 8008682:	692b      	ldr	r3, [r5, #16]
 8008684:	310c      	adds	r1, #12
 8008686:	1c9a      	adds	r2, r3, #2
 8008688:	0092      	lsls	r2, r2, #2
 800868a:	300c      	adds	r0, #12
 800868c:	f000 fc91 	bl	8008fb2 <memcpy>
 8008690:	2201      	movs	r2, #1
 8008692:	0021      	movs	r1, r4
 8008694:	0038      	movs	r0, r7
 8008696:	f000 fef7 	bl	8009488 <__lshift>
 800869a:	002c      	movs	r4, r5
 800869c:	0005      	movs	r5, r0
 800869e:	9b05      	ldr	r3, [sp, #20]
 80086a0:	9308      	str	r3, [sp, #32]
 80086a2:	0031      	movs	r1, r6
 80086a4:	9804      	ldr	r0, [sp, #16]
 80086a6:	f7ff fa3d 	bl	8007b24 <quorem>
 80086aa:	0003      	movs	r3, r0
 80086ac:	0021      	movs	r1, r4
 80086ae:	3330      	adds	r3, #48	; 0x30
 80086b0:	900e      	str	r0, [sp, #56]	; 0x38
 80086b2:	9804      	ldr	r0, [sp, #16]
 80086b4:	9306      	str	r3, [sp, #24]
 80086b6:	f000 ff57 	bl	8009568 <__mcmp>
 80086ba:	002a      	movs	r2, r5
 80086bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80086be:	0031      	movs	r1, r6
 80086c0:	0038      	movs	r0, r7
 80086c2:	f000 ff6d 	bl	80095a0 <__mdiff>
 80086c6:	68c3      	ldr	r3, [r0, #12]
 80086c8:	9007      	str	r0, [sp, #28]
 80086ca:	9310      	str	r3, [sp, #64]	; 0x40
 80086cc:	2301      	movs	r3, #1
 80086ce:	930d      	str	r3, [sp, #52]	; 0x34
 80086d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d104      	bne.n	80086e0 <_dtoa_r+0xaa4>
 80086d6:	0001      	movs	r1, r0
 80086d8:	9804      	ldr	r0, [sp, #16]
 80086da:	f000 ff45 	bl	8009568 <__mcmp>
 80086de:	900d      	str	r0, [sp, #52]	; 0x34
 80086e0:	0038      	movs	r0, r7
 80086e2:	9907      	ldr	r1, [sp, #28]
 80086e4:	f000 fcb2 	bl	800904c <_Bfree>
 80086e8:	2301      	movs	r3, #1
 80086ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80086ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086ee:	4018      	ands	r0, r3
 80086f0:	9b08      	ldr	r3, [sp, #32]
 80086f2:	3301      	adds	r3, #1
 80086f4:	9307      	str	r3, [sp, #28]
 80086f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086f8:	4313      	orrs	r3, r2
 80086fa:	4303      	orrs	r3, r0
 80086fc:	d10c      	bne.n	8008718 <_dtoa_r+0xadc>
 80086fe:	9b06      	ldr	r3, [sp, #24]
 8008700:	2b39      	cmp	r3, #57	; 0x39
 8008702:	d025      	beq.n	8008750 <_dtoa_r+0xb14>
 8008704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008706:	2b00      	cmp	r3, #0
 8008708:	dd02      	ble.n	8008710 <_dtoa_r+0xad4>
 800870a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800870c:	3331      	adds	r3, #49	; 0x31
 800870e:	9306      	str	r3, [sp, #24]
 8008710:	9b08      	ldr	r3, [sp, #32]
 8008712:	9a06      	ldr	r2, [sp, #24]
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	e773      	b.n	8008600 <_dtoa_r+0x9c4>
 8008718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800871a:	2b00      	cmp	r3, #0
 800871c:	db03      	blt.n	8008726 <_dtoa_r+0xaea>
 800871e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008720:	4313      	orrs	r3, r2
 8008722:	4303      	orrs	r3, r0
 8008724:	d11f      	bne.n	8008766 <_dtoa_r+0xb2a>
 8008726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008728:	2b00      	cmp	r3, #0
 800872a:	ddf1      	ble.n	8008710 <_dtoa_r+0xad4>
 800872c:	9904      	ldr	r1, [sp, #16]
 800872e:	2201      	movs	r2, #1
 8008730:	0038      	movs	r0, r7
 8008732:	f000 fea9 	bl	8009488 <__lshift>
 8008736:	0031      	movs	r1, r6
 8008738:	9004      	str	r0, [sp, #16]
 800873a:	f000 ff15 	bl	8009568 <__mcmp>
 800873e:	2800      	cmp	r0, #0
 8008740:	dc03      	bgt.n	800874a <_dtoa_r+0xb0e>
 8008742:	d1e5      	bne.n	8008710 <_dtoa_r+0xad4>
 8008744:	9b06      	ldr	r3, [sp, #24]
 8008746:	07db      	lsls	r3, r3, #31
 8008748:	d5e2      	bpl.n	8008710 <_dtoa_r+0xad4>
 800874a:	9b06      	ldr	r3, [sp, #24]
 800874c:	2b39      	cmp	r3, #57	; 0x39
 800874e:	d1dc      	bne.n	800870a <_dtoa_r+0xace>
 8008750:	2339      	movs	r3, #57	; 0x39
 8008752:	9a08      	ldr	r2, [sp, #32]
 8008754:	7013      	strb	r3, [r2, #0]
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	9307      	str	r3, [sp, #28]
 800875a:	3b01      	subs	r3, #1
 800875c:	781a      	ldrb	r2, [r3, #0]
 800875e:	2a39      	cmp	r2, #57	; 0x39
 8008760:	d06c      	beq.n	800883c <_dtoa_r+0xc00>
 8008762:	3201      	adds	r2, #1
 8008764:	e7d6      	b.n	8008714 <_dtoa_r+0xad8>
 8008766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008768:	2b00      	cmp	r3, #0
 800876a:	dd07      	ble.n	800877c <_dtoa_r+0xb40>
 800876c:	9b06      	ldr	r3, [sp, #24]
 800876e:	2b39      	cmp	r3, #57	; 0x39
 8008770:	d0ee      	beq.n	8008750 <_dtoa_r+0xb14>
 8008772:	9b06      	ldr	r3, [sp, #24]
 8008774:	9a08      	ldr	r2, [sp, #32]
 8008776:	3301      	adds	r3, #1
 8008778:	7013      	strb	r3, [r2, #0]
 800877a:	e741      	b.n	8008600 <_dtoa_r+0x9c4>
 800877c:	9b08      	ldr	r3, [sp, #32]
 800877e:	9a06      	ldr	r2, [sp, #24]
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	2301      	movs	r3, #1
 8008784:	9a05      	ldr	r2, [sp, #20]
 8008786:	1a9b      	subs	r3, r3, r2
 8008788:	9a08      	ldr	r2, [sp, #32]
 800878a:	189b      	adds	r3, r3, r2
 800878c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800878e:	429a      	cmp	r2, r3
 8008790:	d03e      	beq.n	8008810 <_dtoa_r+0xbd4>
 8008792:	2300      	movs	r3, #0
 8008794:	220a      	movs	r2, #10
 8008796:	9904      	ldr	r1, [sp, #16]
 8008798:	0038      	movs	r0, r7
 800879a:	f000 fc7b 	bl	8009094 <__multadd>
 800879e:	2300      	movs	r3, #0
 80087a0:	9004      	str	r0, [sp, #16]
 80087a2:	220a      	movs	r2, #10
 80087a4:	0021      	movs	r1, r4
 80087a6:	0038      	movs	r0, r7
 80087a8:	42ac      	cmp	r4, r5
 80087aa:	d106      	bne.n	80087ba <_dtoa_r+0xb7e>
 80087ac:	f000 fc72 	bl	8009094 <__multadd>
 80087b0:	0004      	movs	r4, r0
 80087b2:	0005      	movs	r5, r0
 80087b4:	9b07      	ldr	r3, [sp, #28]
 80087b6:	9308      	str	r3, [sp, #32]
 80087b8:	e773      	b.n	80086a2 <_dtoa_r+0xa66>
 80087ba:	f000 fc6b 	bl	8009094 <__multadd>
 80087be:	0029      	movs	r1, r5
 80087c0:	0004      	movs	r4, r0
 80087c2:	2300      	movs	r3, #0
 80087c4:	220a      	movs	r2, #10
 80087c6:	0038      	movs	r0, r7
 80087c8:	f000 fc64 	bl	8009094 <__multadd>
 80087cc:	0005      	movs	r5, r0
 80087ce:	e7f1      	b.n	80087b4 <_dtoa_r+0xb78>
 80087d0:	9b06      	ldr	r3, [sp, #24]
 80087d2:	930c      	str	r3, [sp, #48]	; 0x30
 80087d4:	2400      	movs	r4, #0
 80087d6:	0031      	movs	r1, r6
 80087d8:	9804      	ldr	r0, [sp, #16]
 80087da:	f7ff f9a3 	bl	8007b24 <quorem>
 80087de:	9b05      	ldr	r3, [sp, #20]
 80087e0:	3030      	adds	r0, #48	; 0x30
 80087e2:	5518      	strb	r0, [r3, r4]
 80087e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087e6:	3401      	adds	r4, #1
 80087e8:	9006      	str	r0, [sp, #24]
 80087ea:	42a3      	cmp	r3, r4
 80087ec:	dd07      	ble.n	80087fe <_dtoa_r+0xbc2>
 80087ee:	2300      	movs	r3, #0
 80087f0:	220a      	movs	r2, #10
 80087f2:	0038      	movs	r0, r7
 80087f4:	9904      	ldr	r1, [sp, #16]
 80087f6:	f000 fc4d 	bl	8009094 <__multadd>
 80087fa:	9004      	str	r0, [sp, #16]
 80087fc:	e7eb      	b.n	80087d6 <_dtoa_r+0xb9a>
 80087fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008800:	2001      	movs	r0, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	dd00      	ble.n	8008808 <_dtoa_r+0xbcc>
 8008806:	0018      	movs	r0, r3
 8008808:	2400      	movs	r4, #0
 800880a:	9b05      	ldr	r3, [sp, #20]
 800880c:	181b      	adds	r3, r3, r0
 800880e:	9307      	str	r3, [sp, #28]
 8008810:	9904      	ldr	r1, [sp, #16]
 8008812:	2201      	movs	r2, #1
 8008814:	0038      	movs	r0, r7
 8008816:	f000 fe37 	bl	8009488 <__lshift>
 800881a:	0031      	movs	r1, r6
 800881c:	9004      	str	r0, [sp, #16]
 800881e:	f000 fea3 	bl	8009568 <__mcmp>
 8008822:	2800      	cmp	r0, #0
 8008824:	dc97      	bgt.n	8008756 <_dtoa_r+0xb1a>
 8008826:	d102      	bne.n	800882e <_dtoa_r+0xbf2>
 8008828:	9b06      	ldr	r3, [sp, #24]
 800882a:	07db      	lsls	r3, r3, #31
 800882c:	d493      	bmi.n	8008756 <_dtoa_r+0xb1a>
 800882e:	9b07      	ldr	r3, [sp, #28]
 8008830:	9307      	str	r3, [sp, #28]
 8008832:	3b01      	subs	r3, #1
 8008834:	781a      	ldrb	r2, [r3, #0]
 8008836:	2a30      	cmp	r2, #48	; 0x30
 8008838:	d0fa      	beq.n	8008830 <_dtoa_r+0xbf4>
 800883a:	e6e1      	b.n	8008600 <_dtoa_r+0x9c4>
 800883c:	9a05      	ldr	r2, [sp, #20]
 800883e:	429a      	cmp	r2, r3
 8008840:	d18a      	bne.n	8008758 <_dtoa_r+0xb1c>
 8008842:	9b02      	ldr	r3, [sp, #8]
 8008844:	3301      	adds	r3, #1
 8008846:	9302      	str	r3, [sp, #8]
 8008848:	2331      	movs	r3, #49	; 0x31
 800884a:	e795      	b.n	8008778 <_dtoa_r+0xb3c>
 800884c:	4b08      	ldr	r3, [pc, #32]	; (8008870 <_dtoa_r+0xc34>)
 800884e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008850:	9305      	str	r3, [sp, #20]
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <_dtoa_r+0xc38>)
 8008854:	2a00      	cmp	r2, #0
 8008856:	d001      	beq.n	800885c <_dtoa_r+0xc20>
 8008858:	f7ff fa3b 	bl	8007cd2 <_dtoa_r+0x96>
 800885c:	f7ff fa3b 	bl	8007cd6 <_dtoa_r+0x9a>
 8008860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008862:	2b00      	cmp	r3, #0
 8008864:	dcb6      	bgt.n	80087d4 <_dtoa_r+0xb98>
 8008866:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008868:	2b02      	cmp	r3, #2
 800886a:	dd00      	ble.n	800886e <_dtoa_r+0xc32>
 800886c:	e6b2      	b.n	80085d4 <_dtoa_r+0x998>
 800886e:	e7b1      	b.n	80087d4 <_dtoa_r+0xb98>
 8008870:	0800ad01 	.word	0x0800ad01
 8008874:	0800ad09 	.word	0x0800ad09

08008878 <rshift>:
 8008878:	0002      	movs	r2, r0
 800887a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887c:	6907      	ldr	r7, [r0, #16]
 800887e:	3214      	adds	r2, #20
 8008880:	0013      	movs	r3, r2
 8008882:	b085      	sub	sp, #20
 8008884:	114e      	asrs	r6, r1, #5
 8008886:	42b7      	cmp	r7, r6
 8008888:	dd31      	ble.n	80088ee <rshift+0x76>
 800888a:	00b3      	lsls	r3, r6, #2
 800888c:	18d3      	adds	r3, r2, r3
 800888e:	251f      	movs	r5, #31
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	000b      	movs	r3, r1
 8008894:	00bc      	lsls	r4, r7, #2
 8008896:	402b      	ands	r3, r5
 8008898:	1914      	adds	r4, r2, r4
 800889a:	9302      	str	r3, [sp, #8]
 800889c:	4229      	tst	r1, r5
 800889e:	d10c      	bne.n	80088ba <rshift+0x42>
 80088a0:	0015      	movs	r5, r2
 80088a2:	9901      	ldr	r1, [sp, #4]
 80088a4:	428c      	cmp	r4, r1
 80088a6:	d838      	bhi.n	800891a <rshift+0xa2>
 80088a8:	9901      	ldr	r1, [sp, #4]
 80088aa:	2300      	movs	r3, #0
 80088ac:	3903      	subs	r1, #3
 80088ae:	428c      	cmp	r4, r1
 80088b0:	d301      	bcc.n	80088b6 <rshift+0x3e>
 80088b2:	1bbb      	subs	r3, r7, r6
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	18d3      	adds	r3, r2, r3
 80088b8:	e019      	b.n	80088ee <rshift+0x76>
 80088ba:	2120      	movs	r1, #32
 80088bc:	9b02      	ldr	r3, [sp, #8]
 80088be:	9d01      	ldr	r5, [sp, #4]
 80088c0:	1acb      	subs	r3, r1, r3
 80088c2:	9303      	str	r3, [sp, #12]
 80088c4:	cd02      	ldmia	r5!, {r1}
 80088c6:	9b02      	ldr	r3, [sp, #8]
 80088c8:	4694      	mov	ip, r2
 80088ca:	40d9      	lsrs	r1, r3
 80088cc:	9100      	str	r1, [sp, #0]
 80088ce:	42ac      	cmp	r4, r5
 80088d0:	d816      	bhi.n	8008900 <rshift+0x88>
 80088d2:	9d01      	ldr	r5, [sp, #4]
 80088d4:	2300      	movs	r3, #0
 80088d6:	3501      	adds	r5, #1
 80088d8:	42ac      	cmp	r4, r5
 80088da:	d302      	bcc.n	80088e2 <rshift+0x6a>
 80088dc:	1bbb      	subs	r3, r7, r6
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	3b04      	subs	r3, #4
 80088e2:	9900      	ldr	r1, [sp, #0]
 80088e4:	18d3      	adds	r3, r2, r3
 80088e6:	6019      	str	r1, [r3, #0]
 80088e8:	2900      	cmp	r1, #0
 80088ea:	d000      	beq.n	80088ee <rshift+0x76>
 80088ec:	3304      	adds	r3, #4
 80088ee:	1a99      	subs	r1, r3, r2
 80088f0:	1089      	asrs	r1, r1, #2
 80088f2:	6101      	str	r1, [r0, #16]
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d101      	bne.n	80088fc <rshift+0x84>
 80088f8:	2300      	movs	r3, #0
 80088fa:	6143      	str	r3, [r0, #20]
 80088fc:	b005      	add	sp, #20
 80088fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	9903      	ldr	r1, [sp, #12]
 8008904:	408b      	lsls	r3, r1
 8008906:	9900      	ldr	r1, [sp, #0]
 8008908:	4319      	orrs	r1, r3
 800890a:	4663      	mov	r3, ip
 800890c:	c302      	stmia	r3!, {r1}
 800890e:	469c      	mov	ip, r3
 8008910:	cd02      	ldmia	r5!, {r1}
 8008912:	9b02      	ldr	r3, [sp, #8]
 8008914:	40d9      	lsrs	r1, r3
 8008916:	9100      	str	r1, [sp, #0]
 8008918:	e7d9      	b.n	80088ce <rshift+0x56>
 800891a:	c908      	ldmia	r1!, {r3}
 800891c:	c508      	stmia	r5!, {r3}
 800891e:	e7c1      	b.n	80088a4 <rshift+0x2c>

08008920 <__hexdig_fun>:
 8008920:	0002      	movs	r2, r0
 8008922:	3a30      	subs	r2, #48	; 0x30
 8008924:	0003      	movs	r3, r0
 8008926:	2a09      	cmp	r2, #9
 8008928:	d802      	bhi.n	8008930 <__hexdig_fun+0x10>
 800892a:	3b20      	subs	r3, #32
 800892c:	b2d8      	uxtb	r0, r3
 800892e:	4770      	bx	lr
 8008930:	0002      	movs	r2, r0
 8008932:	3a61      	subs	r2, #97	; 0x61
 8008934:	2a05      	cmp	r2, #5
 8008936:	d801      	bhi.n	800893c <__hexdig_fun+0x1c>
 8008938:	3b47      	subs	r3, #71	; 0x47
 800893a:	e7f7      	b.n	800892c <__hexdig_fun+0xc>
 800893c:	001a      	movs	r2, r3
 800893e:	3a41      	subs	r2, #65	; 0x41
 8008940:	2000      	movs	r0, #0
 8008942:	2a05      	cmp	r2, #5
 8008944:	d8f3      	bhi.n	800892e <__hexdig_fun+0xe>
 8008946:	3b27      	subs	r3, #39	; 0x27
 8008948:	e7f0      	b.n	800892c <__hexdig_fun+0xc>
	...

0800894c <__gethex>:
 800894c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800894e:	b08d      	sub	sp, #52	; 0x34
 8008950:	930a      	str	r3, [sp, #40]	; 0x28
 8008952:	4bbd      	ldr	r3, [pc, #756]	; (8008c48 <__gethex+0x2fc>)
 8008954:	9005      	str	r0, [sp, #20]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	9109      	str	r1, [sp, #36]	; 0x24
 800895a:	0018      	movs	r0, r3
 800895c:	9202      	str	r2, [sp, #8]
 800895e:	9307      	str	r3, [sp, #28]
 8008960:	f7f7 fbd2 	bl	8000108 <strlen>
 8008964:	2202      	movs	r2, #2
 8008966:	9b07      	ldr	r3, [sp, #28]
 8008968:	4252      	negs	r2, r2
 800896a:	181b      	adds	r3, r3, r0
 800896c:	3b01      	subs	r3, #1
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	9003      	str	r0, [sp, #12]
 8008972:	930b      	str	r3, [sp, #44]	; 0x2c
 8008974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008976:	6819      	ldr	r1, [r3, #0]
 8008978:	1c8b      	adds	r3, r1, #2
 800897a:	1a52      	subs	r2, r2, r1
 800897c:	18d1      	adds	r1, r2, r3
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	9108      	str	r1, [sp, #32]
 8008982:	9901      	ldr	r1, [sp, #4]
 8008984:	3301      	adds	r3, #1
 8008986:	7808      	ldrb	r0, [r1, #0]
 8008988:	2830      	cmp	r0, #48	; 0x30
 800898a:	d0f7      	beq.n	800897c <__gethex+0x30>
 800898c:	f7ff ffc8 	bl	8008920 <__hexdig_fun>
 8008990:	1e04      	subs	r4, r0, #0
 8008992:	d13e      	bne.n	8008a12 <__gethex+0xc6>
 8008994:	9a03      	ldr	r2, [sp, #12]
 8008996:	9907      	ldr	r1, [sp, #28]
 8008998:	9801      	ldr	r0, [sp, #4]
 800899a:	f001 fa0d 	bl	8009db8 <strncmp>
 800899e:	1e07      	subs	r7, r0, #0
 80089a0:	d000      	beq.n	80089a4 <__gethex+0x58>
 80089a2:	e06f      	b.n	8008a84 <__gethex+0x138>
 80089a4:	9b01      	ldr	r3, [sp, #4]
 80089a6:	9a03      	ldr	r2, [sp, #12]
 80089a8:	5c98      	ldrb	r0, [r3, r2]
 80089aa:	189d      	adds	r5, r3, r2
 80089ac:	f7ff ffb8 	bl	8008920 <__hexdig_fun>
 80089b0:	2301      	movs	r3, #1
 80089b2:	9304      	str	r3, [sp, #16]
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d034      	beq.n	8008a22 <__gethex+0xd6>
 80089b8:	9501      	str	r5, [sp, #4]
 80089ba:	9b01      	ldr	r3, [sp, #4]
 80089bc:	7818      	ldrb	r0, [r3, #0]
 80089be:	2830      	cmp	r0, #48	; 0x30
 80089c0:	d009      	beq.n	80089d6 <__gethex+0x8a>
 80089c2:	f7ff ffad 	bl	8008920 <__hexdig_fun>
 80089c6:	4243      	negs	r3, r0
 80089c8:	4143      	adcs	r3, r0
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	2301      	movs	r3, #1
 80089ce:	002c      	movs	r4, r5
 80089d0:	9308      	str	r3, [sp, #32]
 80089d2:	9d01      	ldr	r5, [sp, #4]
 80089d4:	e004      	b.n	80089e0 <__gethex+0x94>
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	3301      	adds	r3, #1
 80089da:	9301      	str	r3, [sp, #4]
 80089dc:	e7ed      	b.n	80089ba <__gethex+0x6e>
 80089de:	3501      	adds	r5, #1
 80089e0:	7828      	ldrb	r0, [r5, #0]
 80089e2:	f7ff ff9d 	bl	8008920 <__hexdig_fun>
 80089e6:	1e07      	subs	r7, r0, #0
 80089e8:	d1f9      	bne.n	80089de <__gethex+0x92>
 80089ea:	0028      	movs	r0, r5
 80089ec:	9a03      	ldr	r2, [sp, #12]
 80089ee:	9907      	ldr	r1, [sp, #28]
 80089f0:	f001 f9e2 	bl	8009db8 <strncmp>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d112      	bne.n	8008a1e <__gethex+0xd2>
 80089f8:	2c00      	cmp	r4, #0
 80089fa:	d107      	bne.n	8008a0c <__gethex+0xc0>
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	18ed      	adds	r5, r5, r3
 8008a00:	002c      	movs	r4, r5
 8008a02:	7828      	ldrb	r0, [r5, #0]
 8008a04:	f7ff ff8c 	bl	8008920 <__hexdig_fun>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d106      	bne.n	8008a1a <__gethex+0xce>
 8008a0c:	1b67      	subs	r7, r4, r5
 8008a0e:	00bf      	lsls	r7, r7, #2
 8008a10:	e007      	b.n	8008a22 <__gethex+0xd6>
 8008a12:	2300      	movs	r3, #0
 8008a14:	001c      	movs	r4, r3
 8008a16:	9304      	str	r3, [sp, #16]
 8008a18:	e7db      	b.n	80089d2 <__gethex+0x86>
 8008a1a:	3501      	adds	r5, #1
 8008a1c:	e7f1      	b.n	8008a02 <__gethex+0xb6>
 8008a1e:	2c00      	cmp	r4, #0
 8008a20:	d1f4      	bne.n	8008a0c <__gethex+0xc0>
 8008a22:	2220      	movs	r2, #32
 8008a24:	782b      	ldrb	r3, [r5, #0]
 8008a26:	002e      	movs	r6, r5
 8008a28:	4393      	bics	r3, r2
 8008a2a:	2b50      	cmp	r3, #80	; 0x50
 8008a2c:	d11d      	bne.n	8008a6a <__gethex+0x11e>
 8008a2e:	786b      	ldrb	r3, [r5, #1]
 8008a30:	2b2b      	cmp	r3, #43	; 0x2b
 8008a32:	d02c      	beq.n	8008a8e <__gethex+0x142>
 8008a34:	2b2d      	cmp	r3, #45	; 0x2d
 8008a36:	d02e      	beq.n	8008a96 <__gethex+0x14a>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	1c6e      	adds	r6, r5, #1
 8008a3c:	9306      	str	r3, [sp, #24]
 8008a3e:	7830      	ldrb	r0, [r6, #0]
 8008a40:	f7ff ff6e 	bl	8008920 <__hexdig_fun>
 8008a44:	1e43      	subs	r3, r0, #1
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b18      	cmp	r3, #24
 8008a4a:	d82b      	bhi.n	8008aa4 <__gethex+0x158>
 8008a4c:	3810      	subs	r0, #16
 8008a4e:	0004      	movs	r4, r0
 8008a50:	7870      	ldrb	r0, [r6, #1]
 8008a52:	f7ff ff65 	bl	8008920 <__hexdig_fun>
 8008a56:	1e43      	subs	r3, r0, #1
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	3601      	adds	r6, #1
 8008a5c:	2b18      	cmp	r3, #24
 8008a5e:	d91c      	bls.n	8008a9a <__gethex+0x14e>
 8008a60:	9b06      	ldr	r3, [sp, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d000      	beq.n	8008a68 <__gethex+0x11c>
 8008a66:	4264      	negs	r4, r4
 8008a68:	193f      	adds	r7, r7, r4
 8008a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6c:	601e      	str	r6, [r3, #0]
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d019      	beq.n	8008aa8 <__gethex+0x15c>
 8008a74:	2600      	movs	r6, #0
 8008a76:	9b08      	ldr	r3, [sp, #32]
 8008a78:	42b3      	cmp	r3, r6
 8008a7a:	d100      	bne.n	8008a7e <__gethex+0x132>
 8008a7c:	3606      	adds	r6, #6
 8008a7e:	0030      	movs	r0, r6
 8008a80:	b00d      	add	sp, #52	; 0x34
 8008a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a84:	2301      	movs	r3, #1
 8008a86:	0027      	movs	r7, r4
 8008a88:	9d01      	ldr	r5, [sp, #4]
 8008a8a:	9304      	str	r3, [sp, #16]
 8008a8c:	e7c9      	b.n	8008a22 <__gethex+0xd6>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9306      	str	r3, [sp, #24]
 8008a92:	1cae      	adds	r6, r5, #2
 8008a94:	e7d3      	b.n	8008a3e <__gethex+0xf2>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7fa      	b.n	8008a90 <__gethex+0x144>
 8008a9a:	230a      	movs	r3, #10
 8008a9c:	435c      	muls	r4, r3
 8008a9e:	1824      	adds	r4, r4, r0
 8008aa0:	3c10      	subs	r4, #16
 8008aa2:	e7d5      	b.n	8008a50 <__gethex+0x104>
 8008aa4:	002e      	movs	r6, r5
 8008aa6:	e7e0      	b.n	8008a6a <__gethex+0x11e>
 8008aa8:	9b01      	ldr	r3, [sp, #4]
 8008aaa:	9904      	ldr	r1, [sp, #16]
 8008aac:	1aeb      	subs	r3, r5, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	2b07      	cmp	r3, #7
 8008ab2:	dc0a      	bgt.n	8008aca <__gethex+0x17e>
 8008ab4:	9805      	ldr	r0, [sp, #20]
 8008ab6:	f000 fa85 	bl	8008fc4 <_Balloc>
 8008aba:	1e04      	subs	r4, r0, #0
 8008abc:	d108      	bne.n	8008ad0 <__gethex+0x184>
 8008abe:	0002      	movs	r2, r0
 8008ac0:	21de      	movs	r1, #222	; 0xde
 8008ac2:	4b62      	ldr	r3, [pc, #392]	; (8008c4c <__gethex+0x300>)
 8008ac4:	4862      	ldr	r0, [pc, #392]	; (8008c50 <__gethex+0x304>)
 8008ac6:	f001 f995 	bl	8009df4 <__assert_func>
 8008aca:	3101      	adds	r1, #1
 8008acc:	105b      	asrs	r3, r3, #1
 8008ace:	e7ef      	b.n	8008ab0 <__gethex+0x164>
 8008ad0:	0003      	movs	r3, r0
 8008ad2:	3314      	adds	r3, #20
 8008ad4:	9304      	str	r3, [sp, #16]
 8008ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad8:	2300      	movs	r3, #0
 8008ada:	001e      	movs	r6, r3
 8008adc:	9306      	str	r3, [sp, #24]
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	42ab      	cmp	r3, r5
 8008ae2:	d340      	bcc.n	8008b66 <__gethex+0x21a>
 8008ae4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ae6:	9b04      	ldr	r3, [sp, #16]
 8008ae8:	c540      	stmia	r5!, {r6}
 8008aea:	1aed      	subs	r5, r5, r3
 8008aec:	10ad      	asrs	r5, r5, #2
 8008aee:	0030      	movs	r0, r6
 8008af0:	6125      	str	r5, [r4, #16]
 8008af2:	f000 fb5f 	bl	80091b4 <__hi0bits>
 8008af6:	9b02      	ldr	r3, [sp, #8]
 8008af8:	016d      	lsls	r5, r5, #5
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	1a2e      	subs	r6, r5, r0
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	429e      	cmp	r6, r3
 8008b02:	dd5a      	ble.n	8008bba <__gethex+0x26e>
 8008b04:	1af6      	subs	r6, r6, r3
 8008b06:	0031      	movs	r1, r6
 8008b08:	0020      	movs	r0, r4
 8008b0a:	f000 ff02 	bl	8009912 <__any_on>
 8008b0e:	1e05      	subs	r5, r0, #0
 8008b10:	d016      	beq.n	8008b40 <__gethex+0x1f4>
 8008b12:	2501      	movs	r5, #1
 8008b14:	211f      	movs	r1, #31
 8008b16:	0028      	movs	r0, r5
 8008b18:	1e73      	subs	r3, r6, #1
 8008b1a:	4019      	ands	r1, r3
 8008b1c:	4088      	lsls	r0, r1
 8008b1e:	0001      	movs	r1, r0
 8008b20:	115a      	asrs	r2, r3, #5
 8008b22:	9804      	ldr	r0, [sp, #16]
 8008b24:	0092      	lsls	r2, r2, #2
 8008b26:	5812      	ldr	r2, [r2, r0]
 8008b28:	420a      	tst	r2, r1
 8008b2a:	d009      	beq.n	8008b40 <__gethex+0x1f4>
 8008b2c:	42ab      	cmp	r3, r5
 8008b2e:	dd06      	ble.n	8008b3e <__gethex+0x1f2>
 8008b30:	0020      	movs	r0, r4
 8008b32:	1eb1      	subs	r1, r6, #2
 8008b34:	f000 feed 	bl	8009912 <__any_on>
 8008b38:	3502      	adds	r5, #2
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d100      	bne.n	8008b40 <__gethex+0x1f4>
 8008b3e:	2502      	movs	r5, #2
 8008b40:	0031      	movs	r1, r6
 8008b42:	0020      	movs	r0, r4
 8008b44:	f7ff fe98 	bl	8008878 <rshift>
 8008b48:	19bf      	adds	r7, r7, r6
 8008b4a:	9b02      	ldr	r3, [sp, #8]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	9303      	str	r3, [sp, #12]
 8008b50:	42bb      	cmp	r3, r7
 8008b52:	da42      	bge.n	8008bda <__gethex+0x28e>
 8008b54:	0021      	movs	r1, r4
 8008b56:	9805      	ldr	r0, [sp, #20]
 8008b58:	f000 fa78 	bl	800904c <_Bfree>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b60:	26a3      	movs	r6, #163	; 0xa3
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	e78b      	b.n	8008a7e <__gethex+0x132>
 8008b66:	1e6b      	subs	r3, r5, #1
 8008b68:	9308      	str	r3, [sp, #32]
 8008b6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d014      	beq.n	8008b9c <__gethex+0x250>
 8008b72:	9b06      	ldr	r3, [sp, #24]
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	d104      	bne.n	8008b82 <__gethex+0x236>
 8008b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7a:	c340      	stmia	r3!, {r6}
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b80:	9606      	str	r6, [sp, #24]
 8008b82:	9b08      	ldr	r3, [sp, #32]
 8008b84:	7818      	ldrb	r0, [r3, #0]
 8008b86:	f7ff fecb 	bl	8008920 <__hexdig_fun>
 8008b8a:	230f      	movs	r3, #15
 8008b8c:	4018      	ands	r0, r3
 8008b8e:	9b06      	ldr	r3, [sp, #24]
 8008b90:	9d08      	ldr	r5, [sp, #32]
 8008b92:	4098      	lsls	r0, r3
 8008b94:	3304      	adds	r3, #4
 8008b96:	4306      	orrs	r6, r0
 8008b98:	9306      	str	r3, [sp, #24]
 8008b9a:	e7a0      	b.n	8008ade <__gethex+0x192>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	9a03      	ldr	r2, [sp, #12]
 8008ba0:	1a9d      	subs	r5, r3, r2
 8008ba2:	9b08      	ldr	r3, [sp, #32]
 8008ba4:	195d      	adds	r5, r3, r5
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	429d      	cmp	r5, r3
 8008baa:	d3e2      	bcc.n	8008b72 <__gethex+0x226>
 8008bac:	0028      	movs	r0, r5
 8008bae:	9907      	ldr	r1, [sp, #28]
 8008bb0:	f001 f902 	bl	8009db8 <strncmp>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d1dc      	bne.n	8008b72 <__gethex+0x226>
 8008bb8:	e791      	b.n	8008ade <__gethex+0x192>
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	429e      	cmp	r6, r3
 8008bc0:	dac3      	bge.n	8008b4a <__gethex+0x1fe>
 8008bc2:	1b9e      	subs	r6, r3, r6
 8008bc4:	0021      	movs	r1, r4
 8008bc6:	0032      	movs	r2, r6
 8008bc8:	9805      	ldr	r0, [sp, #20]
 8008bca:	f000 fc5d 	bl	8009488 <__lshift>
 8008bce:	0003      	movs	r3, r0
 8008bd0:	3314      	adds	r3, #20
 8008bd2:	0004      	movs	r4, r0
 8008bd4:	1bbf      	subs	r7, r7, r6
 8008bd6:	9304      	str	r3, [sp, #16]
 8008bd8:	e7b7      	b.n	8008b4a <__gethex+0x1fe>
 8008bda:	9b02      	ldr	r3, [sp, #8]
 8008bdc:	685e      	ldr	r6, [r3, #4]
 8008bde:	42be      	cmp	r6, r7
 8008be0:	dd71      	ble.n	8008cc6 <__gethex+0x37a>
 8008be2:	9b01      	ldr	r3, [sp, #4]
 8008be4:	1bf6      	subs	r6, r6, r7
 8008be6:	42b3      	cmp	r3, r6
 8008be8:	dc38      	bgt.n	8008c5c <__gethex+0x310>
 8008bea:	9b02      	ldr	r3, [sp, #8]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d026      	beq.n	8008c40 <__gethex+0x2f4>
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d02e      	beq.n	8008c54 <__gethex+0x308>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d119      	bne.n	8008c2e <__gethex+0x2e2>
 8008bfa:	9b01      	ldr	r3, [sp, #4]
 8008bfc:	42b3      	cmp	r3, r6
 8008bfe:	d116      	bne.n	8008c2e <__gethex+0x2e2>
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d10d      	bne.n	8008c20 <__gethex+0x2d4>
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	2662      	movs	r6, #98	; 0x62
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	9301      	str	r3, [sp, #4]
 8008c0c:	9a01      	ldr	r2, [sp, #4]
 8008c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	2301      	movs	r3, #1
 8008c14:	9a04      	ldr	r2, [sp, #16]
 8008c16:	6123      	str	r3, [r4, #16]
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c1c:	601c      	str	r4, [r3, #0]
 8008c1e:	e72e      	b.n	8008a7e <__gethex+0x132>
 8008c20:	9901      	ldr	r1, [sp, #4]
 8008c22:	0020      	movs	r0, r4
 8008c24:	3901      	subs	r1, #1
 8008c26:	f000 fe74 	bl	8009912 <__any_on>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d1ea      	bne.n	8008c04 <__gethex+0x2b8>
 8008c2e:	0021      	movs	r1, r4
 8008c30:	9805      	ldr	r0, [sp, #20]
 8008c32:	f000 fa0b 	bl	800904c <_Bfree>
 8008c36:	2300      	movs	r3, #0
 8008c38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c3a:	2650      	movs	r6, #80	; 0x50
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	e71e      	b.n	8008a7e <__gethex+0x132>
 8008c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f3      	bne.n	8008c2e <__gethex+0x2e2>
 8008c46:	e7dd      	b.n	8008c04 <__gethex+0x2b8>
 8008c48:	0800ae00 	.word	0x0800ae00
 8008c4c:	0800ad84 	.word	0x0800ad84
 8008c50:	0800ad95 	.word	0x0800ad95
 8008c54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1d4      	bne.n	8008c04 <__gethex+0x2b8>
 8008c5a:	e7e8      	b.n	8008c2e <__gethex+0x2e2>
 8008c5c:	1e77      	subs	r7, r6, #1
 8008c5e:	2d00      	cmp	r5, #0
 8008c60:	d12f      	bne.n	8008cc2 <__gethex+0x376>
 8008c62:	2f00      	cmp	r7, #0
 8008c64:	d004      	beq.n	8008c70 <__gethex+0x324>
 8008c66:	0039      	movs	r1, r7
 8008c68:	0020      	movs	r0, r4
 8008c6a:	f000 fe52 	bl	8009912 <__any_on>
 8008c6e:	0005      	movs	r5, r0
 8008c70:	231f      	movs	r3, #31
 8008c72:	117a      	asrs	r2, r7, #5
 8008c74:	401f      	ands	r7, r3
 8008c76:	3b1e      	subs	r3, #30
 8008c78:	40bb      	lsls	r3, r7
 8008c7a:	9904      	ldr	r1, [sp, #16]
 8008c7c:	0092      	lsls	r2, r2, #2
 8008c7e:	5852      	ldr	r2, [r2, r1]
 8008c80:	421a      	tst	r2, r3
 8008c82:	d001      	beq.n	8008c88 <__gethex+0x33c>
 8008c84:	2302      	movs	r3, #2
 8008c86:	431d      	orrs	r5, r3
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	0031      	movs	r1, r6
 8008c8c:	1b9b      	subs	r3, r3, r6
 8008c8e:	2602      	movs	r6, #2
 8008c90:	0020      	movs	r0, r4
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	f7ff fdf0 	bl	8008878 <rshift>
 8008c98:	9b02      	ldr	r3, [sp, #8]
 8008c9a:	685f      	ldr	r7, [r3, #4]
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	d041      	beq.n	8008d24 <__gethex+0x3d8>
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d010      	beq.n	8008cca <__gethex+0x37e>
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d012      	beq.n	8008cd2 <__gethex+0x386>
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d106      	bne.n	8008cbe <__gethex+0x372>
 8008cb0:	07aa      	lsls	r2, r5, #30
 8008cb2:	d504      	bpl.n	8008cbe <__gethex+0x372>
 8008cb4:	9a04      	ldr	r2, [sp, #16]
 8008cb6:	6810      	ldr	r0, [r2, #0]
 8008cb8:	4305      	orrs	r5, r0
 8008cba:	421d      	tst	r5, r3
 8008cbc:	d10c      	bne.n	8008cd8 <__gethex+0x38c>
 8008cbe:	2310      	movs	r3, #16
 8008cc0:	e02f      	b.n	8008d22 <__gethex+0x3d6>
 8008cc2:	2501      	movs	r5, #1
 8008cc4:	e7d4      	b.n	8008c70 <__gethex+0x324>
 8008cc6:	2601      	movs	r6, #1
 8008cc8:	e7e8      	b.n	8008c9c <__gethex+0x350>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cce:	1a9b      	subs	r3, r3, r2
 8008cd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008cd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d0f2      	beq.n	8008cbe <__gethex+0x372>
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	2000      	movs	r0, #0
 8008cdc:	9303      	str	r3, [sp, #12]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	9304      	str	r3, [sp, #16]
 8008ce2:	0023      	movs	r3, r4
 8008ce4:	9a04      	ldr	r2, [sp, #16]
 8008ce6:	3314      	adds	r3, #20
 8008ce8:	1899      	adds	r1, r3, r2
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	1c55      	adds	r5, r2, #1
 8008cee:	d01e      	beq.n	8008d2e <__gethex+0x3e2>
 8008cf0:	3201      	adds	r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	0023      	movs	r3, r4
 8008cf6:	3314      	adds	r3, #20
 8008cf8:	2e02      	cmp	r6, #2
 8008cfa:	d140      	bne.n	8008d7e <__gethex+0x432>
 8008cfc:	9a02      	ldr	r2, [sp, #8]
 8008cfe:	9901      	ldr	r1, [sp, #4]
 8008d00:	6812      	ldr	r2, [r2, #0]
 8008d02:	3a01      	subs	r2, #1
 8008d04:	428a      	cmp	r2, r1
 8008d06:	d10b      	bne.n	8008d20 <__gethex+0x3d4>
 8008d08:	114a      	asrs	r2, r1, #5
 8008d0a:	211f      	movs	r1, #31
 8008d0c:	9801      	ldr	r0, [sp, #4]
 8008d0e:	0092      	lsls	r2, r2, #2
 8008d10:	4001      	ands	r1, r0
 8008d12:	2001      	movs	r0, #1
 8008d14:	0005      	movs	r5, r0
 8008d16:	408d      	lsls	r5, r1
 8008d18:	58d3      	ldr	r3, [r2, r3]
 8008d1a:	422b      	tst	r3, r5
 8008d1c:	d000      	beq.n	8008d20 <__gethex+0x3d4>
 8008d1e:	2601      	movs	r6, #1
 8008d20:	2320      	movs	r3, #32
 8008d22:	431e      	orrs	r6, r3
 8008d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d26:	601c      	str	r4, [r3, #0]
 8008d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d2a:	601f      	str	r7, [r3, #0]
 8008d2c:	e6a7      	b.n	8008a7e <__gethex+0x132>
 8008d2e:	c301      	stmia	r3!, {r0}
 8008d30:	4299      	cmp	r1, r3
 8008d32:	d8da      	bhi.n	8008cea <__gethex+0x39e>
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	68a2      	ldr	r2, [r4, #8]
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	db17      	blt.n	8008d6c <__gethex+0x420>
 8008d3c:	6863      	ldr	r3, [r4, #4]
 8008d3e:	9805      	ldr	r0, [sp, #20]
 8008d40:	1c59      	adds	r1, r3, #1
 8008d42:	f000 f93f 	bl	8008fc4 <_Balloc>
 8008d46:	1e05      	subs	r5, r0, #0
 8008d48:	d103      	bne.n	8008d52 <__gethex+0x406>
 8008d4a:	0002      	movs	r2, r0
 8008d4c:	2184      	movs	r1, #132	; 0x84
 8008d4e:	4b1c      	ldr	r3, [pc, #112]	; (8008dc0 <__gethex+0x474>)
 8008d50:	e6b8      	b.n	8008ac4 <__gethex+0x178>
 8008d52:	0021      	movs	r1, r4
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	310c      	adds	r1, #12
 8008d58:	1c9a      	adds	r2, r3, #2
 8008d5a:	0092      	lsls	r2, r2, #2
 8008d5c:	300c      	adds	r0, #12
 8008d5e:	f000 f928 	bl	8008fb2 <memcpy>
 8008d62:	0021      	movs	r1, r4
 8008d64:	9805      	ldr	r0, [sp, #20]
 8008d66:	f000 f971 	bl	800904c <_Bfree>
 8008d6a:	002c      	movs	r4, r5
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	6122      	str	r2, [r4, #16]
 8008d72:	2201      	movs	r2, #1
 8008d74:	3304      	adds	r3, #4
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	18e3      	adds	r3, r4, r3
 8008d7a:	605a      	str	r2, [r3, #4]
 8008d7c:	e7ba      	b.n	8008cf4 <__gethex+0x3a8>
 8008d7e:	6922      	ldr	r2, [r4, #16]
 8008d80:	9903      	ldr	r1, [sp, #12]
 8008d82:	428a      	cmp	r2, r1
 8008d84:	dd09      	ble.n	8008d9a <__gethex+0x44e>
 8008d86:	2101      	movs	r1, #1
 8008d88:	0020      	movs	r0, r4
 8008d8a:	f7ff fd75 	bl	8008878 <rshift>
 8008d8e:	9b02      	ldr	r3, [sp, #8]
 8008d90:	3701      	adds	r7, #1
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	42bb      	cmp	r3, r7
 8008d96:	dac2      	bge.n	8008d1e <__gethex+0x3d2>
 8008d98:	e6dc      	b.n	8008b54 <__gethex+0x208>
 8008d9a:	221f      	movs	r2, #31
 8008d9c:	9d01      	ldr	r5, [sp, #4]
 8008d9e:	9901      	ldr	r1, [sp, #4]
 8008da0:	2601      	movs	r6, #1
 8008da2:	4015      	ands	r5, r2
 8008da4:	4211      	tst	r1, r2
 8008da6:	d0bb      	beq.n	8008d20 <__gethex+0x3d4>
 8008da8:	9a04      	ldr	r2, [sp, #16]
 8008daa:	189b      	adds	r3, r3, r2
 8008dac:	3b04      	subs	r3, #4
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	f000 fa00 	bl	80091b4 <__hi0bits>
 8008db4:	2320      	movs	r3, #32
 8008db6:	1b5d      	subs	r5, r3, r5
 8008db8:	42a8      	cmp	r0, r5
 8008dba:	dbe4      	blt.n	8008d86 <__gethex+0x43a>
 8008dbc:	e7b0      	b.n	8008d20 <__gethex+0x3d4>
 8008dbe:	46c0      	nop			; (mov r8, r8)
 8008dc0:	0800ad84 	.word	0x0800ad84

08008dc4 <L_shift>:
 8008dc4:	2308      	movs	r3, #8
 8008dc6:	b570      	push	{r4, r5, r6, lr}
 8008dc8:	2520      	movs	r5, #32
 8008dca:	1a9a      	subs	r2, r3, r2
 8008dcc:	0092      	lsls	r2, r2, #2
 8008dce:	1aad      	subs	r5, r5, r2
 8008dd0:	6843      	ldr	r3, [r0, #4]
 8008dd2:	6806      	ldr	r6, [r0, #0]
 8008dd4:	001c      	movs	r4, r3
 8008dd6:	40ac      	lsls	r4, r5
 8008dd8:	40d3      	lsrs	r3, r2
 8008dda:	4334      	orrs	r4, r6
 8008ddc:	6004      	str	r4, [r0, #0]
 8008dde:	6043      	str	r3, [r0, #4]
 8008de0:	3004      	adds	r0, #4
 8008de2:	4288      	cmp	r0, r1
 8008de4:	d3f4      	bcc.n	8008dd0 <L_shift+0xc>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}

08008de8 <__match>:
 8008de8:	b530      	push	{r4, r5, lr}
 8008dea:	6803      	ldr	r3, [r0, #0]
 8008dec:	780c      	ldrb	r4, [r1, #0]
 8008dee:	3301      	adds	r3, #1
 8008df0:	2c00      	cmp	r4, #0
 8008df2:	d102      	bne.n	8008dfa <__match+0x12>
 8008df4:	6003      	str	r3, [r0, #0]
 8008df6:	2001      	movs	r0, #1
 8008df8:	bd30      	pop	{r4, r5, pc}
 8008dfa:	781a      	ldrb	r2, [r3, #0]
 8008dfc:	0015      	movs	r5, r2
 8008dfe:	3d41      	subs	r5, #65	; 0x41
 8008e00:	2d19      	cmp	r5, #25
 8008e02:	d800      	bhi.n	8008e06 <__match+0x1e>
 8008e04:	3220      	adds	r2, #32
 8008e06:	3101      	adds	r1, #1
 8008e08:	42a2      	cmp	r2, r4
 8008e0a:	d0ef      	beq.n	8008dec <__match+0x4>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	e7f3      	b.n	8008df8 <__match+0x10>

08008e10 <__hexnan>:
 8008e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e12:	680b      	ldr	r3, [r1, #0]
 8008e14:	b08b      	sub	sp, #44	; 0x2c
 8008e16:	115c      	asrs	r4, r3, #5
 8008e18:	00a4      	lsls	r4, r4, #2
 8008e1a:	9201      	str	r2, [sp, #4]
 8008e1c:	1912      	adds	r2, r2, r4
 8008e1e:	0019      	movs	r1, r3
 8008e20:	9202      	str	r2, [sp, #8]
 8008e22:	221f      	movs	r2, #31
 8008e24:	4011      	ands	r1, r2
 8008e26:	9008      	str	r0, [sp, #32]
 8008e28:	9106      	str	r1, [sp, #24]
 8008e2a:	4213      	tst	r3, r2
 8008e2c:	d002      	beq.n	8008e34 <__hexnan+0x24>
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	3304      	adds	r3, #4
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	9b02      	ldr	r3, [sp, #8]
 8008e36:	2500      	movs	r5, #0
 8008e38:	1f1e      	subs	r6, r3, #4
 8008e3a:	0037      	movs	r7, r6
 8008e3c:	0034      	movs	r4, r6
 8008e3e:	9b08      	ldr	r3, [sp, #32]
 8008e40:	6035      	str	r5, [r6, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	9507      	str	r5, [sp, #28]
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	9503      	str	r5, [sp, #12]
 8008e4a:	9b05      	ldr	r3, [sp, #20]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e50:	9b05      	ldr	r3, [sp, #20]
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d028      	beq.n	8008eac <__hexnan+0x9c>
 8008e5a:	9804      	ldr	r0, [sp, #16]
 8008e5c:	f7ff fd60 	bl	8008920 <__hexdig_fun>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d154      	bne.n	8008f0e <__hexnan+0xfe>
 8008e64:	9b04      	ldr	r3, [sp, #16]
 8008e66:	2b20      	cmp	r3, #32
 8008e68:	d819      	bhi.n	8008e9e <__hexnan+0x8e>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	9a07      	ldr	r2, [sp, #28]
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	dd12      	ble.n	8008e98 <__hexnan+0x88>
 8008e72:	42bc      	cmp	r4, r7
 8008e74:	d206      	bcs.n	8008e84 <__hexnan+0x74>
 8008e76:	2d07      	cmp	r5, #7
 8008e78:	dc04      	bgt.n	8008e84 <__hexnan+0x74>
 8008e7a:	002a      	movs	r2, r5
 8008e7c:	0039      	movs	r1, r7
 8008e7e:	0020      	movs	r0, r4
 8008e80:	f7ff ffa0 	bl	8008dc4 <L_shift>
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	2508      	movs	r5, #8
 8008e88:	429c      	cmp	r4, r3
 8008e8a:	d905      	bls.n	8008e98 <__hexnan+0x88>
 8008e8c:	1f27      	subs	r7, r4, #4
 8008e8e:	2500      	movs	r5, #0
 8008e90:	003c      	movs	r4, r7
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	603d      	str	r5, [r7, #0]
 8008e96:	9307      	str	r3, [sp, #28]
 8008e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9a:	9305      	str	r3, [sp, #20]
 8008e9c:	e7d5      	b.n	8008e4a <__hexnan+0x3a>
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	2b29      	cmp	r3, #41	; 0x29
 8008ea2:	d158      	bne.n	8008f56 <__hexnan+0x146>
 8008ea4:	9b05      	ldr	r3, [sp, #20]
 8008ea6:	9a08      	ldr	r2, [sp, #32]
 8008ea8:	3302      	adds	r3, #2
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d051      	beq.n	8008f56 <__hexnan+0x146>
 8008eb2:	42bc      	cmp	r4, r7
 8008eb4:	d206      	bcs.n	8008ec4 <__hexnan+0xb4>
 8008eb6:	2d07      	cmp	r5, #7
 8008eb8:	dc04      	bgt.n	8008ec4 <__hexnan+0xb4>
 8008eba:	002a      	movs	r2, r5
 8008ebc:	0039      	movs	r1, r7
 8008ebe:	0020      	movs	r0, r4
 8008ec0:	f7ff ff80 	bl	8008dc4 <L_shift>
 8008ec4:	9b01      	ldr	r3, [sp, #4]
 8008ec6:	429c      	cmp	r4, r3
 8008ec8:	d935      	bls.n	8008f36 <__hexnan+0x126>
 8008eca:	001a      	movs	r2, r3
 8008ecc:	0023      	movs	r3, r4
 8008ece:	cb02      	ldmia	r3!, {r1}
 8008ed0:	c202      	stmia	r2!, {r1}
 8008ed2:	429e      	cmp	r6, r3
 8008ed4:	d2fb      	bcs.n	8008ece <__hexnan+0xbe>
 8008ed6:	9b02      	ldr	r3, [sp, #8]
 8008ed8:	1c61      	adds	r1, r4, #1
 8008eda:	1eda      	subs	r2, r3, #3
 8008edc:	2304      	movs	r3, #4
 8008ede:	4291      	cmp	r1, r2
 8008ee0:	d805      	bhi.n	8008eee <__hexnan+0xde>
 8008ee2:	9b02      	ldr	r3, [sp, #8]
 8008ee4:	3b04      	subs	r3, #4
 8008ee6:	1b1c      	subs	r4, r3, r4
 8008ee8:	08a4      	lsrs	r4, r4, #2
 8008eea:	3401      	adds	r4, #1
 8008eec:	00a3      	lsls	r3, r4, #2
 8008eee:	9a01      	ldr	r2, [sp, #4]
 8008ef0:	18d4      	adds	r4, r2, r3
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	c408      	stmia	r4!, {r3}
 8008ef6:	42a6      	cmp	r6, r4
 8008ef8:	d2fc      	bcs.n	8008ef4 <__hexnan+0xe4>
 8008efa:	6833      	ldr	r3, [r6, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d104      	bne.n	8008f0a <__hexnan+0xfa>
 8008f00:	9b01      	ldr	r3, [sp, #4]
 8008f02:	429e      	cmp	r6, r3
 8008f04:	d125      	bne.n	8008f52 <__hexnan+0x142>
 8008f06:	2301      	movs	r3, #1
 8008f08:	6033      	str	r3, [r6, #0]
 8008f0a:	2005      	movs	r0, #5
 8008f0c:	e024      	b.n	8008f58 <__hexnan+0x148>
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	3501      	adds	r5, #1
 8008f12:	3301      	adds	r3, #1
 8008f14:	9303      	str	r3, [sp, #12]
 8008f16:	2d08      	cmp	r5, #8
 8008f18:	dd06      	ble.n	8008f28 <__hexnan+0x118>
 8008f1a:	9b01      	ldr	r3, [sp, #4]
 8008f1c:	429c      	cmp	r4, r3
 8008f1e:	d9bb      	bls.n	8008e98 <__hexnan+0x88>
 8008f20:	2300      	movs	r3, #0
 8008f22:	2501      	movs	r5, #1
 8008f24:	3c04      	subs	r4, #4
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	220f      	movs	r2, #15
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	4010      	ands	r0, r2
 8008f2e:	011b      	lsls	r3, r3, #4
 8008f30:	4318      	orrs	r0, r3
 8008f32:	6020      	str	r0, [r4, #0]
 8008f34:	e7b0      	b.n	8008e98 <__hexnan+0x88>
 8008f36:	9b06      	ldr	r3, [sp, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d0de      	beq.n	8008efa <__hexnan+0xea>
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	2301      	movs	r3, #1
 8008f42:	425b      	negs	r3, r3
 8008f44:	40d3      	lsrs	r3, r2
 8008f46:	9c02      	ldr	r4, [sp, #8]
 8008f48:	3c04      	subs	r4, #4
 8008f4a:	6822      	ldr	r2, [r4, #0]
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	e7d3      	b.n	8008efa <__hexnan+0xea>
 8008f52:	3e04      	subs	r6, #4
 8008f54:	e7d1      	b.n	8008efa <__hexnan+0xea>
 8008f56:	2004      	movs	r0, #4
 8008f58:	b00b      	add	sp, #44	; 0x2c
 8008f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f5c <_localeconv_r>:
 8008f5c:	4800      	ldr	r0, [pc, #0]	; (8008f60 <_localeconv_r+0x4>)
 8008f5e:	4770      	bx	lr
 8008f60:	20000178 	.word	0x20000178

08008f64 <malloc>:
 8008f64:	b510      	push	{r4, lr}
 8008f66:	4b03      	ldr	r3, [pc, #12]	; (8008f74 <malloc+0x10>)
 8008f68:	0001      	movs	r1, r0
 8008f6a:	6818      	ldr	r0, [r3, #0]
 8008f6c:	f000 fd4c 	bl	8009a08 <_malloc_r>
 8008f70:	bd10      	pop	{r4, pc}
 8008f72:	46c0      	nop			; (mov r8, r8)
 8008f74:	20000020 	.word	0x20000020

08008f78 <__ascii_mbtowc>:
 8008f78:	b082      	sub	sp, #8
 8008f7a:	2900      	cmp	r1, #0
 8008f7c:	d100      	bne.n	8008f80 <__ascii_mbtowc+0x8>
 8008f7e:	a901      	add	r1, sp, #4
 8008f80:	1e10      	subs	r0, r2, #0
 8008f82:	d006      	beq.n	8008f92 <__ascii_mbtowc+0x1a>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d006      	beq.n	8008f96 <__ascii_mbtowc+0x1e>
 8008f88:	7813      	ldrb	r3, [r2, #0]
 8008f8a:	600b      	str	r3, [r1, #0]
 8008f8c:	7810      	ldrb	r0, [r2, #0]
 8008f8e:	1e43      	subs	r3, r0, #1
 8008f90:	4198      	sbcs	r0, r3
 8008f92:	b002      	add	sp, #8
 8008f94:	4770      	bx	lr
 8008f96:	2002      	movs	r0, #2
 8008f98:	4240      	negs	r0, r0
 8008f9a:	e7fa      	b.n	8008f92 <__ascii_mbtowc+0x1a>

08008f9c <memchr>:
 8008f9c:	b2c9      	uxtb	r1, r1
 8008f9e:	1882      	adds	r2, r0, r2
 8008fa0:	4290      	cmp	r0, r2
 8008fa2:	d101      	bne.n	8008fa8 <memchr+0xc>
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	4770      	bx	lr
 8008fa8:	7803      	ldrb	r3, [r0, #0]
 8008faa:	428b      	cmp	r3, r1
 8008fac:	d0fb      	beq.n	8008fa6 <memchr+0xa>
 8008fae:	3001      	adds	r0, #1
 8008fb0:	e7f6      	b.n	8008fa0 <memchr+0x4>

08008fb2 <memcpy>:
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	b510      	push	{r4, lr}
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d100      	bne.n	8008fbc <memcpy+0xa>
 8008fba:	bd10      	pop	{r4, pc}
 8008fbc:	5ccc      	ldrb	r4, [r1, r3]
 8008fbe:	54c4      	strb	r4, [r0, r3]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	e7f8      	b.n	8008fb6 <memcpy+0x4>

08008fc4 <_Balloc>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fc8:	0006      	movs	r6, r0
 8008fca:	000c      	movs	r4, r1
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	d10e      	bne.n	8008fee <_Balloc+0x2a>
 8008fd0:	2010      	movs	r0, #16
 8008fd2:	f7ff ffc7 	bl	8008f64 <malloc>
 8008fd6:	1e02      	subs	r2, r0, #0
 8008fd8:	6270      	str	r0, [r6, #36]	; 0x24
 8008fda:	d104      	bne.n	8008fe6 <_Balloc+0x22>
 8008fdc:	2166      	movs	r1, #102	; 0x66
 8008fde:	4b19      	ldr	r3, [pc, #100]	; (8009044 <_Balloc+0x80>)
 8008fe0:	4819      	ldr	r0, [pc, #100]	; (8009048 <_Balloc+0x84>)
 8008fe2:	f000 ff07 	bl	8009df4 <__assert_func>
 8008fe6:	6045      	str	r5, [r0, #4]
 8008fe8:	6085      	str	r5, [r0, #8]
 8008fea:	6005      	str	r5, [r0, #0]
 8008fec:	60c5      	str	r5, [r0, #12]
 8008fee:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008ff0:	68eb      	ldr	r3, [r5, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d013      	beq.n	800901e <_Balloc+0x5a>
 8008ff6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ff8:	00a2      	lsls	r2, r4, #2
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	189b      	adds	r3, r3, r2
 8008ffe:	6818      	ldr	r0, [r3, #0]
 8009000:	2800      	cmp	r0, #0
 8009002:	d118      	bne.n	8009036 <_Balloc+0x72>
 8009004:	2101      	movs	r1, #1
 8009006:	000d      	movs	r5, r1
 8009008:	40a5      	lsls	r5, r4
 800900a:	1d6a      	adds	r2, r5, #5
 800900c:	0030      	movs	r0, r6
 800900e:	0092      	lsls	r2, r2, #2
 8009010:	f000 fca2 	bl	8009958 <_calloc_r>
 8009014:	2800      	cmp	r0, #0
 8009016:	d00c      	beq.n	8009032 <_Balloc+0x6e>
 8009018:	6044      	str	r4, [r0, #4]
 800901a:	6085      	str	r5, [r0, #8]
 800901c:	e00d      	b.n	800903a <_Balloc+0x76>
 800901e:	2221      	movs	r2, #33	; 0x21
 8009020:	2104      	movs	r1, #4
 8009022:	0030      	movs	r0, r6
 8009024:	f000 fc98 	bl	8009958 <_calloc_r>
 8009028:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800902a:	60e8      	str	r0, [r5, #12]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e1      	bne.n	8008ff6 <_Balloc+0x32>
 8009032:	2000      	movs	r0, #0
 8009034:	bd70      	pop	{r4, r5, r6, pc}
 8009036:	6802      	ldr	r2, [r0, #0]
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	2300      	movs	r3, #0
 800903c:	6103      	str	r3, [r0, #16]
 800903e:	60c3      	str	r3, [r0, #12]
 8009040:	e7f8      	b.n	8009034 <_Balloc+0x70>
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	0800ad0e 	.word	0x0800ad0e
 8009048:	0800ae14 	.word	0x0800ae14

0800904c <_Bfree>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009050:	0005      	movs	r5, r0
 8009052:	000c      	movs	r4, r1
 8009054:	2e00      	cmp	r6, #0
 8009056:	d10e      	bne.n	8009076 <_Bfree+0x2a>
 8009058:	2010      	movs	r0, #16
 800905a:	f7ff ff83 	bl	8008f64 <malloc>
 800905e:	1e02      	subs	r2, r0, #0
 8009060:	6268      	str	r0, [r5, #36]	; 0x24
 8009062:	d104      	bne.n	800906e <_Bfree+0x22>
 8009064:	218a      	movs	r1, #138	; 0x8a
 8009066:	4b09      	ldr	r3, [pc, #36]	; (800908c <_Bfree+0x40>)
 8009068:	4809      	ldr	r0, [pc, #36]	; (8009090 <_Bfree+0x44>)
 800906a:	f000 fec3 	bl	8009df4 <__assert_func>
 800906e:	6046      	str	r6, [r0, #4]
 8009070:	6086      	str	r6, [r0, #8]
 8009072:	6006      	str	r6, [r0, #0]
 8009074:	60c6      	str	r6, [r0, #12]
 8009076:	2c00      	cmp	r4, #0
 8009078:	d007      	beq.n	800908a <_Bfree+0x3e>
 800907a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800907c:	6862      	ldr	r2, [r4, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	0092      	lsls	r2, r2, #2
 8009082:	189b      	adds	r3, r3, r2
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	601c      	str	r4, [r3, #0]
 800908a:	bd70      	pop	{r4, r5, r6, pc}
 800908c:	0800ad0e 	.word	0x0800ad0e
 8009090:	0800ae14 	.word	0x0800ae14

08009094 <__multadd>:
 8009094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009096:	000e      	movs	r6, r1
 8009098:	9001      	str	r0, [sp, #4]
 800909a:	000c      	movs	r4, r1
 800909c:	001d      	movs	r5, r3
 800909e:	2000      	movs	r0, #0
 80090a0:	690f      	ldr	r7, [r1, #16]
 80090a2:	3614      	adds	r6, #20
 80090a4:	6833      	ldr	r3, [r6, #0]
 80090a6:	3001      	adds	r0, #1
 80090a8:	b299      	uxth	r1, r3
 80090aa:	4351      	muls	r1, r2
 80090ac:	0c1b      	lsrs	r3, r3, #16
 80090ae:	4353      	muls	r3, r2
 80090b0:	1949      	adds	r1, r1, r5
 80090b2:	0c0d      	lsrs	r5, r1, #16
 80090b4:	195b      	adds	r3, r3, r5
 80090b6:	0c1d      	lsrs	r5, r3, #16
 80090b8:	b289      	uxth	r1, r1
 80090ba:	041b      	lsls	r3, r3, #16
 80090bc:	185b      	adds	r3, r3, r1
 80090be:	c608      	stmia	r6!, {r3}
 80090c0:	4287      	cmp	r7, r0
 80090c2:	dcef      	bgt.n	80090a4 <__multadd+0x10>
 80090c4:	2d00      	cmp	r5, #0
 80090c6:	d022      	beq.n	800910e <__multadd+0x7a>
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	42bb      	cmp	r3, r7
 80090cc:	dc19      	bgt.n	8009102 <__multadd+0x6e>
 80090ce:	6863      	ldr	r3, [r4, #4]
 80090d0:	9801      	ldr	r0, [sp, #4]
 80090d2:	1c59      	adds	r1, r3, #1
 80090d4:	f7ff ff76 	bl	8008fc4 <_Balloc>
 80090d8:	1e06      	subs	r6, r0, #0
 80090da:	d105      	bne.n	80090e8 <__multadd+0x54>
 80090dc:	0002      	movs	r2, r0
 80090de:	21b5      	movs	r1, #181	; 0xb5
 80090e0:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <__multadd+0x80>)
 80090e2:	480d      	ldr	r0, [pc, #52]	; (8009118 <__multadd+0x84>)
 80090e4:	f000 fe86 	bl	8009df4 <__assert_func>
 80090e8:	0021      	movs	r1, r4
 80090ea:	6923      	ldr	r3, [r4, #16]
 80090ec:	310c      	adds	r1, #12
 80090ee:	1c9a      	adds	r2, r3, #2
 80090f0:	0092      	lsls	r2, r2, #2
 80090f2:	300c      	adds	r0, #12
 80090f4:	f7ff ff5d 	bl	8008fb2 <memcpy>
 80090f8:	0021      	movs	r1, r4
 80090fa:	9801      	ldr	r0, [sp, #4]
 80090fc:	f7ff ffa6 	bl	800904c <_Bfree>
 8009100:	0034      	movs	r4, r6
 8009102:	1d3b      	adds	r3, r7, #4
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	18e3      	adds	r3, r4, r3
 8009108:	605d      	str	r5, [r3, #4]
 800910a:	1c7b      	adds	r3, r7, #1
 800910c:	6123      	str	r3, [r4, #16]
 800910e:	0020      	movs	r0, r4
 8009110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	0800ad84 	.word	0x0800ad84
 8009118:	0800ae14 	.word	0x0800ae14

0800911c <__s2b>:
 800911c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800911e:	0006      	movs	r6, r0
 8009120:	0018      	movs	r0, r3
 8009122:	000c      	movs	r4, r1
 8009124:	3008      	adds	r0, #8
 8009126:	2109      	movs	r1, #9
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	0015      	movs	r5, r2
 800912c:	f7f7 f892 	bl	8000254 <__divsi3>
 8009130:	2301      	movs	r3, #1
 8009132:	2100      	movs	r1, #0
 8009134:	4283      	cmp	r3, r0
 8009136:	db0a      	blt.n	800914e <__s2b+0x32>
 8009138:	0030      	movs	r0, r6
 800913a:	f7ff ff43 	bl	8008fc4 <_Balloc>
 800913e:	1e01      	subs	r1, r0, #0
 8009140:	d108      	bne.n	8009154 <__s2b+0x38>
 8009142:	0002      	movs	r2, r0
 8009144:	4b19      	ldr	r3, [pc, #100]	; (80091ac <__s2b+0x90>)
 8009146:	481a      	ldr	r0, [pc, #104]	; (80091b0 <__s2b+0x94>)
 8009148:	31ce      	adds	r1, #206	; 0xce
 800914a:	f000 fe53 	bl	8009df4 <__assert_func>
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	3101      	adds	r1, #1
 8009152:	e7ef      	b.n	8009134 <__s2b+0x18>
 8009154:	9b08      	ldr	r3, [sp, #32]
 8009156:	6143      	str	r3, [r0, #20]
 8009158:	2301      	movs	r3, #1
 800915a:	6103      	str	r3, [r0, #16]
 800915c:	2d09      	cmp	r5, #9
 800915e:	dd18      	ble.n	8009192 <__s2b+0x76>
 8009160:	0023      	movs	r3, r4
 8009162:	3309      	adds	r3, #9
 8009164:	001f      	movs	r7, r3
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	1964      	adds	r4, r4, r5
 800916a:	783b      	ldrb	r3, [r7, #0]
 800916c:	220a      	movs	r2, #10
 800916e:	0030      	movs	r0, r6
 8009170:	3b30      	subs	r3, #48	; 0x30
 8009172:	f7ff ff8f 	bl	8009094 <__multadd>
 8009176:	3701      	adds	r7, #1
 8009178:	0001      	movs	r1, r0
 800917a:	42a7      	cmp	r7, r4
 800917c:	d1f5      	bne.n	800916a <__s2b+0x4e>
 800917e:	002c      	movs	r4, r5
 8009180:	9b00      	ldr	r3, [sp, #0]
 8009182:	3c08      	subs	r4, #8
 8009184:	191c      	adds	r4, r3, r4
 8009186:	002f      	movs	r7, r5
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	429f      	cmp	r7, r3
 800918c:	db04      	blt.n	8009198 <__s2b+0x7c>
 800918e:	0008      	movs	r0, r1
 8009190:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009192:	2509      	movs	r5, #9
 8009194:	340a      	adds	r4, #10
 8009196:	e7f6      	b.n	8009186 <__s2b+0x6a>
 8009198:	1b63      	subs	r3, r4, r5
 800919a:	5ddb      	ldrb	r3, [r3, r7]
 800919c:	220a      	movs	r2, #10
 800919e:	0030      	movs	r0, r6
 80091a0:	3b30      	subs	r3, #48	; 0x30
 80091a2:	f7ff ff77 	bl	8009094 <__multadd>
 80091a6:	3701      	adds	r7, #1
 80091a8:	0001      	movs	r1, r0
 80091aa:	e7ed      	b.n	8009188 <__s2b+0x6c>
 80091ac:	0800ad84 	.word	0x0800ad84
 80091b0:	0800ae14 	.word	0x0800ae14

080091b4 <__hi0bits>:
 80091b4:	0003      	movs	r3, r0
 80091b6:	0c02      	lsrs	r2, r0, #16
 80091b8:	2000      	movs	r0, #0
 80091ba:	4282      	cmp	r2, r0
 80091bc:	d101      	bne.n	80091c2 <__hi0bits+0xe>
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	3010      	adds	r0, #16
 80091c2:	0e1a      	lsrs	r2, r3, #24
 80091c4:	d101      	bne.n	80091ca <__hi0bits+0x16>
 80091c6:	3008      	adds	r0, #8
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	0f1a      	lsrs	r2, r3, #28
 80091cc:	d101      	bne.n	80091d2 <__hi0bits+0x1e>
 80091ce:	3004      	adds	r0, #4
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	0f9a      	lsrs	r2, r3, #30
 80091d4:	d101      	bne.n	80091da <__hi0bits+0x26>
 80091d6:	3002      	adds	r0, #2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	db03      	blt.n	80091e6 <__hi0bits+0x32>
 80091de:	3001      	adds	r0, #1
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	d400      	bmi.n	80091e6 <__hi0bits+0x32>
 80091e4:	2020      	movs	r0, #32
 80091e6:	4770      	bx	lr

080091e8 <__lo0bits>:
 80091e8:	6803      	ldr	r3, [r0, #0]
 80091ea:	0002      	movs	r2, r0
 80091ec:	2107      	movs	r1, #7
 80091ee:	0018      	movs	r0, r3
 80091f0:	4008      	ands	r0, r1
 80091f2:	420b      	tst	r3, r1
 80091f4:	d00d      	beq.n	8009212 <__lo0bits+0x2a>
 80091f6:	3906      	subs	r1, #6
 80091f8:	2000      	movs	r0, #0
 80091fa:	420b      	tst	r3, r1
 80091fc:	d105      	bne.n	800920a <__lo0bits+0x22>
 80091fe:	3002      	adds	r0, #2
 8009200:	4203      	tst	r3, r0
 8009202:	d003      	beq.n	800920c <__lo0bits+0x24>
 8009204:	40cb      	lsrs	r3, r1
 8009206:	0008      	movs	r0, r1
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	4770      	bx	lr
 800920c:	089b      	lsrs	r3, r3, #2
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e7fb      	b.n	800920a <__lo0bits+0x22>
 8009212:	b299      	uxth	r1, r3
 8009214:	2900      	cmp	r1, #0
 8009216:	d101      	bne.n	800921c <__lo0bits+0x34>
 8009218:	2010      	movs	r0, #16
 800921a:	0c1b      	lsrs	r3, r3, #16
 800921c:	b2d9      	uxtb	r1, r3
 800921e:	2900      	cmp	r1, #0
 8009220:	d101      	bne.n	8009226 <__lo0bits+0x3e>
 8009222:	3008      	adds	r0, #8
 8009224:	0a1b      	lsrs	r3, r3, #8
 8009226:	0719      	lsls	r1, r3, #28
 8009228:	d101      	bne.n	800922e <__lo0bits+0x46>
 800922a:	3004      	adds	r0, #4
 800922c:	091b      	lsrs	r3, r3, #4
 800922e:	0799      	lsls	r1, r3, #30
 8009230:	d101      	bne.n	8009236 <__lo0bits+0x4e>
 8009232:	3002      	adds	r0, #2
 8009234:	089b      	lsrs	r3, r3, #2
 8009236:	07d9      	lsls	r1, r3, #31
 8009238:	d4e9      	bmi.n	800920e <__lo0bits+0x26>
 800923a:	3001      	adds	r0, #1
 800923c:	085b      	lsrs	r3, r3, #1
 800923e:	d1e6      	bne.n	800920e <__lo0bits+0x26>
 8009240:	2020      	movs	r0, #32
 8009242:	e7e2      	b.n	800920a <__lo0bits+0x22>

08009244 <__i2b>:
 8009244:	b510      	push	{r4, lr}
 8009246:	000c      	movs	r4, r1
 8009248:	2101      	movs	r1, #1
 800924a:	f7ff febb 	bl	8008fc4 <_Balloc>
 800924e:	2800      	cmp	r0, #0
 8009250:	d106      	bne.n	8009260 <__i2b+0x1c>
 8009252:	21a0      	movs	r1, #160	; 0xa0
 8009254:	0002      	movs	r2, r0
 8009256:	4b04      	ldr	r3, [pc, #16]	; (8009268 <__i2b+0x24>)
 8009258:	4804      	ldr	r0, [pc, #16]	; (800926c <__i2b+0x28>)
 800925a:	0049      	lsls	r1, r1, #1
 800925c:	f000 fdca 	bl	8009df4 <__assert_func>
 8009260:	2301      	movs	r3, #1
 8009262:	6144      	str	r4, [r0, #20]
 8009264:	6103      	str	r3, [r0, #16]
 8009266:	bd10      	pop	{r4, pc}
 8009268:	0800ad84 	.word	0x0800ad84
 800926c:	0800ae14 	.word	0x0800ae14

08009270 <__multiply>:
 8009270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009272:	690b      	ldr	r3, [r1, #16]
 8009274:	0014      	movs	r4, r2
 8009276:	6912      	ldr	r2, [r2, #16]
 8009278:	000d      	movs	r5, r1
 800927a:	b089      	sub	sp, #36	; 0x24
 800927c:	4293      	cmp	r3, r2
 800927e:	da01      	bge.n	8009284 <__multiply+0x14>
 8009280:	0025      	movs	r5, r4
 8009282:	000c      	movs	r4, r1
 8009284:	692f      	ldr	r7, [r5, #16]
 8009286:	6926      	ldr	r6, [r4, #16]
 8009288:	6869      	ldr	r1, [r5, #4]
 800928a:	19bb      	adds	r3, r7, r6
 800928c:	9302      	str	r3, [sp, #8]
 800928e:	68ab      	ldr	r3, [r5, #8]
 8009290:	19ba      	adds	r2, r7, r6
 8009292:	4293      	cmp	r3, r2
 8009294:	da00      	bge.n	8009298 <__multiply+0x28>
 8009296:	3101      	adds	r1, #1
 8009298:	f7ff fe94 	bl	8008fc4 <_Balloc>
 800929c:	9001      	str	r0, [sp, #4]
 800929e:	2800      	cmp	r0, #0
 80092a0:	d106      	bne.n	80092b0 <__multiply+0x40>
 80092a2:	215e      	movs	r1, #94	; 0x5e
 80092a4:	0002      	movs	r2, r0
 80092a6:	4b48      	ldr	r3, [pc, #288]	; (80093c8 <__multiply+0x158>)
 80092a8:	4848      	ldr	r0, [pc, #288]	; (80093cc <__multiply+0x15c>)
 80092aa:	31ff      	adds	r1, #255	; 0xff
 80092ac:	f000 fda2 	bl	8009df4 <__assert_func>
 80092b0:	9b01      	ldr	r3, [sp, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	3314      	adds	r3, #20
 80092b6:	469c      	mov	ip, r3
 80092b8:	19bb      	adds	r3, r7, r6
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4463      	add	r3, ip
 80092be:	9303      	str	r3, [sp, #12]
 80092c0:	4663      	mov	r3, ip
 80092c2:	9903      	ldr	r1, [sp, #12]
 80092c4:	428b      	cmp	r3, r1
 80092c6:	d32c      	bcc.n	8009322 <__multiply+0xb2>
 80092c8:	002b      	movs	r3, r5
 80092ca:	0022      	movs	r2, r4
 80092cc:	3314      	adds	r3, #20
 80092ce:	00bf      	lsls	r7, r7, #2
 80092d0:	3214      	adds	r2, #20
 80092d2:	9306      	str	r3, [sp, #24]
 80092d4:	00b6      	lsls	r6, r6, #2
 80092d6:	19db      	adds	r3, r3, r7
 80092d8:	9304      	str	r3, [sp, #16]
 80092da:	1993      	adds	r3, r2, r6
 80092dc:	9307      	str	r3, [sp, #28]
 80092de:	2304      	movs	r3, #4
 80092e0:	9305      	str	r3, [sp, #20]
 80092e2:	002b      	movs	r3, r5
 80092e4:	9904      	ldr	r1, [sp, #16]
 80092e6:	3315      	adds	r3, #21
 80092e8:	9200      	str	r2, [sp, #0]
 80092ea:	4299      	cmp	r1, r3
 80092ec:	d305      	bcc.n	80092fa <__multiply+0x8a>
 80092ee:	1b4b      	subs	r3, r1, r5
 80092f0:	3b15      	subs	r3, #21
 80092f2:	089b      	lsrs	r3, r3, #2
 80092f4:	3301      	adds	r3, #1
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	9305      	str	r3, [sp, #20]
 80092fa:	9b07      	ldr	r3, [sp, #28]
 80092fc:	9a00      	ldr	r2, [sp, #0]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d311      	bcc.n	8009326 <__multiply+0xb6>
 8009302:	9b02      	ldr	r3, [sp, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	dd06      	ble.n	8009316 <__multiply+0xa6>
 8009308:	9b03      	ldr	r3, [sp, #12]
 800930a:	3b04      	subs	r3, #4
 800930c:	9303      	str	r3, [sp, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d054      	beq.n	80093c0 <__multiply+0x150>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	9a02      	ldr	r2, [sp, #8]
 800931a:	0018      	movs	r0, r3
 800931c:	611a      	str	r2, [r3, #16]
 800931e:	b009      	add	sp, #36	; 0x24
 8009320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009322:	c304      	stmia	r3!, {r2}
 8009324:	e7cd      	b.n	80092c2 <__multiply+0x52>
 8009326:	9b00      	ldr	r3, [sp, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	b298      	uxth	r0, r3
 800932c:	2800      	cmp	r0, #0
 800932e:	d01c      	beq.n	800936a <__multiply+0xfa>
 8009330:	4667      	mov	r7, ip
 8009332:	2400      	movs	r4, #0
 8009334:	9e06      	ldr	r6, [sp, #24]
 8009336:	ce02      	ldmia	r6!, {r1}
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	b28b      	uxth	r3, r1
 800933c:	4343      	muls	r3, r0
 800933e:	0c09      	lsrs	r1, r1, #16
 8009340:	4341      	muls	r1, r0
 8009342:	b292      	uxth	r2, r2
 8009344:	189b      	adds	r3, r3, r2
 8009346:	191b      	adds	r3, r3, r4
 8009348:	000c      	movs	r4, r1
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	0c11      	lsrs	r1, r2, #16
 800934e:	1861      	adds	r1, r4, r1
 8009350:	0c1c      	lsrs	r4, r3, #16
 8009352:	1909      	adds	r1, r1, r4
 8009354:	0c0c      	lsrs	r4, r1, #16
 8009356:	b29b      	uxth	r3, r3
 8009358:	0409      	lsls	r1, r1, #16
 800935a:	430b      	orrs	r3, r1
 800935c:	c708      	stmia	r7!, {r3}
 800935e:	9b04      	ldr	r3, [sp, #16]
 8009360:	42b3      	cmp	r3, r6
 8009362:	d8e8      	bhi.n	8009336 <__multiply+0xc6>
 8009364:	4663      	mov	r3, ip
 8009366:	9a05      	ldr	r2, [sp, #20]
 8009368:	509c      	str	r4, [r3, r2]
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	0c1e      	lsrs	r6, r3, #16
 8009370:	d020      	beq.n	80093b4 <__multiply+0x144>
 8009372:	4663      	mov	r3, ip
 8009374:	002c      	movs	r4, r5
 8009376:	4660      	mov	r0, ip
 8009378:	2700      	movs	r7, #0
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3414      	adds	r4, #20
 800937e:	6822      	ldr	r2, [r4, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	b291      	uxth	r1, r2
 8009384:	4371      	muls	r1, r6
 8009386:	6802      	ldr	r2, [r0, #0]
 8009388:	0c12      	lsrs	r2, r2, #16
 800938a:	1889      	adds	r1, r1, r2
 800938c:	19cf      	adds	r7, r1, r7
 800938e:	0439      	lsls	r1, r7, #16
 8009390:	430b      	orrs	r3, r1
 8009392:	6003      	str	r3, [r0, #0]
 8009394:	cc02      	ldmia	r4!, {r1}
 8009396:	6843      	ldr	r3, [r0, #4]
 8009398:	0c09      	lsrs	r1, r1, #16
 800939a:	4371      	muls	r1, r6
 800939c:	b29b      	uxth	r3, r3
 800939e:	0c3f      	lsrs	r7, r7, #16
 80093a0:	18cb      	adds	r3, r1, r3
 80093a2:	9a04      	ldr	r2, [sp, #16]
 80093a4:	19db      	adds	r3, r3, r7
 80093a6:	0c1f      	lsrs	r7, r3, #16
 80093a8:	3004      	adds	r0, #4
 80093aa:	42a2      	cmp	r2, r4
 80093ac:	d8e7      	bhi.n	800937e <__multiply+0x10e>
 80093ae:	4662      	mov	r2, ip
 80093b0:	9905      	ldr	r1, [sp, #20]
 80093b2:	5053      	str	r3, [r2, r1]
 80093b4:	9b00      	ldr	r3, [sp, #0]
 80093b6:	3304      	adds	r3, #4
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	2304      	movs	r3, #4
 80093bc:	449c      	add	ip, r3
 80093be:	e79c      	b.n	80092fa <__multiply+0x8a>
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	9302      	str	r3, [sp, #8]
 80093c6:	e79c      	b.n	8009302 <__multiply+0x92>
 80093c8:	0800ad84 	.word	0x0800ad84
 80093cc:	0800ae14 	.word	0x0800ae14

080093d0 <__pow5mult>:
 80093d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093d2:	2303      	movs	r3, #3
 80093d4:	0015      	movs	r5, r2
 80093d6:	0007      	movs	r7, r0
 80093d8:	000e      	movs	r6, r1
 80093da:	401a      	ands	r2, r3
 80093dc:	421d      	tst	r5, r3
 80093de:	d008      	beq.n	80093f2 <__pow5mult+0x22>
 80093e0:	4925      	ldr	r1, [pc, #148]	; (8009478 <__pow5mult+0xa8>)
 80093e2:	3a01      	subs	r2, #1
 80093e4:	0092      	lsls	r2, r2, #2
 80093e6:	5852      	ldr	r2, [r2, r1]
 80093e8:	2300      	movs	r3, #0
 80093ea:	0031      	movs	r1, r6
 80093ec:	f7ff fe52 	bl	8009094 <__multadd>
 80093f0:	0006      	movs	r6, r0
 80093f2:	10ad      	asrs	r5, r5, #2
 80093f4:	d03d      	beq.n	8009472 <__pow5mult+0xa2>
 80093f6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80093f8:	2c00      	cmp	r4, #0
 80093fa:	d10f      	bne.n	800941c <__pow5mult+0x4c>
 80093fc:	2010      	movs	r0, #16
 80093fe:	f7ff fdb1 	bl	8008f64 <malloc>
 8009402:	1e02      	subs	r2, r0, #0
 8009404:	6278      	str	r0, [r7, #36]	; 0x24
 8009406:	d105      	bne.n	8009414 <__pow5mult+0x44>
 8009408:	21d7      	movs	r1, #215	; 0xd7
 800940a:	4b1c      	ldr	r3, [pc, #112]	; (800947c <__pow5mult+0xac>)
 800940c:	481c      	ldr	r0, [pc, #112]	; (8009480 <__pow5mult+0xb0>)
 800940e:	0049      	lsls	r1, r1, #1
 8009410:	f000 fcf0 	bl	8009df4 <__assert_func>
 8009414:	6044      	str	r4, [r0, #4]
 8009416:	6084      	str	r4, [r0, #8]
 8009418:	6004      	str	r4, [r0, #0]
 800941a:	60c4      	str	r4, [r0, #12]
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	689c      	ldr	r4, [r3, #8]
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	2c00      	cmp	r4, #0
 8009424:	d108      	bne.n	8009438 <__pow5mult+0x68>
 8009426:	0038      	movs	r0, r7
 8009428:	4916      	ldr	r1, [pc, #88]	; (8009484 <__pow5mult+0xb4>)
 800942a:	f7ff ff0b 	bl	8009244 <__i2b>
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	0004      	movs	r4, r0
 8009432:	6098      	str	r0, [r3, #8]
 8009434:	2300      	movs	r3, #0
 8009436:	6003      	str	r3, [r0, #0]
 8009438:	2301      	movs	r3, #1
 800943a:	421d      	tst	r5, r3
 800943c:	d00a      	beq.n	8009454 <__pow5mult+0x84>
 800943e:	0031      	movs	r1, r6
 8009440:	0022      	movs	r2, r4
 8009442:	0038      	movs	r0, r7
 8009444:	f7ff ff14 	bl	8009270 <__multiply>
 8009448:	0031      	movs	r1, r6
 800944a:	9001      	str	r0, [sp, #4]
 800944c:	0038      	movs	r0, r7
 800944e:	f7ff fdfd 	bl	800904c <_Bfree>
 8009452:	9e01      	ldr	r6, [sp, #4]
 8009454:	106d      	asrs	r5, r5, #1
 8009456:	d00c      	beq.n	8009472 <__pow5mult+0xa2>
 8009458:	6820      	ldr	r0, [r4, #0]
 800945a:	2800      	cmp	r0, #0
 800945c:	d107      	bne.n	800946e <__pow5mult+0x9e>
 800945e:	0022      	movs	r2, r4
 8009460:	0021      	movs	r1, r4
 8009462:	0038      	movs	r0, r7
 8009464:	f7ff ff04 	bl	8009270 <__multiply>
 8009468:	2300      	movs	r3, #0
 800946a:	6020      	str	r0, [r4, #0]
 800946c:	6003      	str	r3, [r0, #0]
 800946e:	0004      	movs	r4, r0
 8009470:	e7e2      	b.n	8009438 <__pow5mult+0x68>
 8009472:	0030      	movs	r0, r6
 8009474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009476:	46c0      	nop			; (mov r8, r8)
 8009478:	0800af68 	.word	0x0800af68
 800947c:	0800ad0e 	.word	0x0800ad0e
 8009480:	0800ae14 	.word	0x0800ae14
 8009484:	00000271 	.word	0x00000271

08009488 <__lshift>:
 8009488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800948a:	000c      	movs	r4, r1
 800948c:	0017      	movs	r7, r2
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	1155      	asrs	r5, r2, #5
 8009492:	b087      	sub	sp, #28
 8009494:	18eb      	adds	r3, r5, r3
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	3301      	adds	r3, #1
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	6849      	ldr	r1, [r1, #4]
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	9004      	str	r0, [sp, #16]
 80094a2:	9a01      	ldr	r2, [sp, #4]
 80094a4:	4293      	cmp	r3, r2
 80094a6:	db11      	blt.n	80094cc <__lshift+0x44>
 80094a8:	9804      	ldr	r0, [sp, #16]
 80094aa:	f7ff fd8b 	bl	8008fc4 <_Balloc>
 80094ae:	0002      	movs	r2, r0
 80094b0:	2300      	movs	r3, #0
 80094b2:	3214      	adds	r2, #20
 80094b4:	0006      	movs	r6, r0
 80094b6:	0011      	movs	r1, r2
 80094b8:	9203      	str	r2, [sp, #12]
 80094ba:	4298      	cmp	r0, r3
 80094bc:	d10d      	bne.n	80094da <__lshift+0x52>
 80094be:	21da      	movs	r1, #218	; 0xda
 80094c0:	0002      	movs	r2, r0
 80094c2:	4b27      	ldr	r3, [pc, #156]	; (8009560 <__lshift+0xd8>)
 80094c4:	4827      	ldr	r0, [pc, #156]	; (8009564 <__lshift+0xdc>)
 80094c6:	31ff      	adds	r1, #255	; 0xff
 80094c8:	f000 fc94 	bl	8009df4 <__assert_func>
 80094cc:	3101      	adds	r1, #1
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	e7e7      	b.n	80094a2 <__lshift+0x1a>
 80094d2:	2200      	movs	r2, #0
 80094d4:	0098      	lsls	r0, r3, #2
 80094d6:	500a      	str	r2, [r1, r0]
 80094d8:	3301      	adds	r3, #1
 80094da:	42ab      	cmp	r3, r5
 80094dc:	dbf9      	blt.n	80094d2 <__lshift+0x4a>
 80094de:	43eb      	mvns	r3, r5
 80094e0:	17db      	asrs	r3, r3, #31
 80094e2:	401d      	ands	r5, r3
 80094e4:	9b03      	ldr	r3, [sp, #12]
 80094e6:	00ad      	lsls	r5, r5, #2
 80094e8:	211f      	movs	r1, #31
 80094ea:	0038      	movs	r0, r7
 80094ec:	195d      	adds	r5, r3, r5
 80094ee:	0023      	movs	r3, r4
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	3314      	adds	r3, #20
 80094f4:	0092      	lsls	r2, r2, #2
 80094f6:	4008      	ands	r0, r1
 80094f8:	4684      	mov	ip, r0
 80094fa:	189a      	adds	r2, r3, r2
 80094fc:	420f      	tst	r7, r1
 80094fe:	d02a      	beq.n	8009556 <__lshift+0xce>
 8009500:	3101      	adds	r1, #1
 8009502:	1a09      	subs	r1, r1, r0
 8009504:	9105      	str	r1, [sp, #20]
 8009506:	2100      	movs	r1, #0
 8009508:	9503      	str	r5, [sp, #12]
 800950a:	4667      	mov	r7, ip
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	40b8      	lsls	r0, r7
 8009510:	4301      	orrs	r1, r0
 8009512:	9803      	ldr	r0, [sp, #12]
 8009514:	c002      	stmia	r0!, {r1}
 8009516:	cb02      	ldmia	r3!, {r1}
 8009518:	9003      	str	r0, [sp, #12]
 800951a:	9805      	ldr	r0, [sp, #20]
 800951c:	40c1      	lsrs	r1, r0
 800951e:	429a      	cmp	r2, r3
 8009520:	d8f3      	bhi.n	800950a <__lshift+0x82>
 8009522:	0020      	movs	r0, r4
 8009524:	3015      	adds	r0, #21
 8009526:	2304      	movs	r3, #4
 8009528:	4282      	cmp	r2, r0
 800952a:	d304      	bcc.n	8009536 <__lshift+0xae>
 800952c:	1b13      	subs	r3, r2, r4
 800952e:	3b15      	subs	r3, #21
 8009530:	089b      	lsrs	r3, r3, #2
 8009532:	3301      	adds	r3, #1
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	50e9      	str	r1, [r5, r3]
 8009538:	2900      	cmp	r1, #0
 800953a:	d002      	beq.n	8009542 <__lshift+0xba>
 800953c:	9b02      	ldr	r3, [sp, #8]
 800953e:	3302      	adds	r3, #2
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	9b01      	ldr	r3, [sp, #4]
 8009544:	9804      	ldr	r0, [sp, #16]
 8009546:	3b01      	subs	r3, #1
 8009548:	0021      	movs	r1, r4
 800954a:	6133      	str	r3, [r6, #16]
 800954c:	f7ff fd7e 	bl	800904c <_Bfree>
 8009550:	0030      	movs	r0, r6
 8009552:	b007      	add	sp, #28
 8009554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009556:	cb02      	ldmia	r3!, {r1}
 8009558:	c502      	stmia	r5!, {r1}
 800955a:	429a      	cmp	r2, r3
 800955c:	d8fb      	bhi.n	8009556 <__lshift+0xce>
 800955e:	e7f0      	b.n	8009542 <__lshift+0xba>
 8009560:	0800ad84 	.word	0x0800ad84
 8009564:	0800ae14 	.word	0x0800ae14

08009568 <__mcmp>:
 8009568:	6902      	ldr	r2, [r0, #16]
 800956a:	690b      	ldr	r3, [r1, #16]
 800956c:	b530      	push	{r4, r5, lr}
 800956e:	0004      	movs	r4, r0
 8009570:	1ad0      	subs	r0, r2, r3
 8009572:	429a      	cmp	r2, r3
 8009574:	d10d      	bne.n	8009592 <__mcmp+0x2a>
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	3414      	adds	r4, #20
 800957a:	3114      	adds	r1, #20
 800957c:	18e2      	adds	r2, r4, r3
 800957e:	18c9      	adds	r1, r1, r3
 8009580:	3a04      	subs	r2, #4
 8009582:	3904      	subs	r1, #4
 8009584:	6815      	ldr	r5, [r2, #0]
 8009586:	680b      	ldr	r3, [r1, #0]
 8009588:	429d      	cmp	r5, r3
 800958a:	d003      	beq.n	8009594 <__mcmp+0x2c>
 800958c:	2001      	movs	r0, #1
 800958e:	429d      	cmp	r5, r3
 8009590:	d303      	bcc.n	800959a <__mcmp+0x32>
 8009592:	bd30      	pop	{r4, r5, pc}
 8009594:	4294      	cmp	r4, r2
 8009596:	d3f3      	bcc.n	8009580 <__mcmp+0x18>
 8009598:	e7fb      	b.n	8009592 <__mcmp+0x2a>
 800959a:	4240      	negs	r0, r0
 800959c:	e7f9      	b.n	8009592 <__mcmp+0x2a>
	...

080095a0 <__mdiff>:
 80095a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a2:	000e      	movs	r6, r1
 80095a4:	0007      	movs	r7, r0
 80095a6:	0011      	movs	r1, r2
 80095a8:	0030      	movs	r0, r6
 80095aa:	b087      	sub	sp, #28
 80095ac:	0014      	movs	r4, r2
 80095ae:	f7ff ffdb 	bl	8009568 <__mcmp>
 80095b2:	1e05      	subs	r5, r0, #0
 80095b4:	d110      	bne.n	80095d8 <__mdiff+0x38>
 80095b6:	0001      	movs	r1, r0
 80095b8:	0038      	movs	r0, r7
 80095ba:	f7ff fd03 	bl	8008fc4 <_Balloc>
 80095be:	1e02      	subs	r2, r0, #0
 80095c0:	d104      	bne.n	80095cc <__mdiff+0x2c>
 80095c2:	4b40      	ldr	r3, [pc, #256]	; (80096c4 <__mdiff+0x124>)
 80095c4:	4940      	ldr	r1, [pc, #256]	; (80096c8 <__mdiff+0x128>)
 80095c6:	4841      	ldr	r0, [pc, #260]	; (80096cc <__mdiff+0x12c>)
 80095c8:	f000 fc14 	bl	8009df4 <__assert_func>
 80095cc:	2301      	movs	r3, #1
 80095ce:	6145      	str	r5, [r0, #20]
 80095d0:	6103      	str	r3, [r0, #16]
 80095d2:	0010      	movs	r0, r2
 80095d4:	b007      	add	sp, #28
 80095d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d8:	2301      	movs	r3, #1
 80095da:	9301      	str	r3, [sp, #4]
 80095dc:	2800      	cmp	r0, #0
 80095de:	db04      	blt.n	80095ea <__mdiff+0x4a>
 80095e0:	0023      	movs	r3, r4
 80095e2:	0034      	movs	r4, r6
 80095e4:	001e      	movs	r6, r3
 80095e6:	2300      	movs	r3, #0
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	0038      	movs	r0, r7
 80095ec:	6861      	ldr	r1, [r4, #4]
 80095ee:	f7ff fce9 	bl	8008fc4 <_Balloc>
 80095f2:	1e02      	subs	r2, r0, #0
 80095f4:	d103      	bne.n	80095fe <__mdiff+0x5e>
 80095f6:	2190      	movs	r1, #144	; 0x90
 80095f8:	4b32      	ldr	r3, [pc, #200]	; (80096c4 <__mdiff+0x124>)
 80095fa:	0089      	lsls	r1, r1, #2
 80095fc:	e7e3      	b.n	80095c6 <__mdiff+0x26>
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	2700      	movs	r7, #0
 8009602:	60c3      	str	r3, [r0, #12]
 8009604:	6920      	ldr	r0, [r4, #16]
 8009606:	3414      	adds	r4, #20
 8009608:	9401      	str	r4, [sp, #4]
 800960a:	9b01      	ldr	r3, [sp, #4]
 800960c:	0084      	lsls	r4, r0, #2
 800960e:	191b      	adds	r3, r3, r4
 8009610:	0034      	movs	r4, r6
 8009612:	9302      	str	r3, [sp, #8]
 8009614:	6933      	ldr	r3, [r6, #16]
 8009616:	3414      	adds	r4, #20
 8009618:	0099      	lsls	r1, r3, #2
 800961a:	1863      	adds	r3, r4, r1
 800961c:	9303      	str	r3, [sp, #12]
 800961e:	0013      	movs	r3, r2
 8009620:	3314      	adds	r3, #20
 8009622:	469c      	mov	ip, r3
 8009624:	9305      	str	r3, [sp, #20]
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	9304      	str	r3, [sp, #16]
 800962a:	9b04      	ldr	r3, [sp, #16]
 800962c:	cc02      	ldmia	r4!, {r1}
 800962e:	cb20      	ldmia	r3!, {r5}
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	b2ab      	uxth	r3, r5
 8009634:	19df      	adds	r7, r3, r7
 8009636:	b28b      	uxth	r3, r1
 8009638:	1afb      	subs	r3, r7, r3
 800963a:	0c2d      	lsrs	r5, r5, #16
 800963c:	0c09      	lsrs	r1, r1, #16
 800963e:	1a69      	subs	r1, r5, r1
 8009640:	141d      	asrs	r5, r3, #16
 8009642:	1949      	adds	r1, r1, r5
 8009644:	140f      	asrs	r7, r1, #16
 8009646:	b29b      	uxth	r3, r3
 8009648:	0409      	lsls	r1, r1, #16
 800964a:	430b      	orrs	r3, r1
 800964c:	4661      	mov	r1, ip
 800964e:	c108      	stmia	r1!, {r3}
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	468c      	mov	ip, r1
 8009654:	42a3      	cmp	r3, r4
 8009656:	d8e8      	bhi.n	800962a <__mdiff+0x8a>
 8009658:	0031      	movs	r1, r6
 800965a:	9c03      	ldr	r4, [sp, #12]
 800965c:	3115      	adds	r1, #21
 800965e:	2304      	movs	r3, #4
 8009660:	428c      	cmp	r4, r1
 8009662:	d304      	bcc.n	800966e <__mdiff+0xce>
 8009664:	1ba3      	subs	r3, r4, r6
 8009666:	3b15      	subs	r3, #21
 8009668:	089b      	lsrs	r3, r3, #2
 800966a:	3301      	adds	r3, #1
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	9901      	ldr	r1, [sp, #4]
 8009670:	18cc      	adds	r4, r1, r3
 8009672:	9905      	ldr	r1, [sp, #20]
 8009674:	0026      	movs	r6, r4
 8009676:	18cb      	adds	r3, r1, r3
 8009678:	469c      	mov	ip, r3
 800967a:	9902      	ldr	r1, [sp, #8]
 800967c:	428e      	cmp	r6, r1
 800967e:	d310      	bcc.n	80096a2 <__mdiff+0x102>
 8009680:	9e02      	ldr	r6, [sp, #8]
 8009682:	1ee5      	subs	r5, r4, #3
 8009684:	2100      	movs	r1, #0
 8009686:	42ae      	cmp	r6, r5
 8009688:	d304      	bcc.n	8009694 <__mdiff+0xf4>
 800968a:	0031      	movs	r1, r6
 800968c:	3103      	adds	r1, #3
 800968e:	1b09      	subs	r1, r1, r4
 8009690:	0889      	lsrs	r1, r1, #2
 8009692:	0089      	lsls	r1, r1, #2
 8009694:	185b      	adds	r3, r3, r1
 8009696:	3b04      	subs	r3, #4
 8009698:	6819      	ldr	r1, [r3, #0]
 800969a:	2900      	cmp	r1, #0
 800969c:	d00f      	beq.n	80096be <__mdiff+0x11e>
 800969e:	6110      	str	r0, [r2, #16]
 80096a0:	e797      	b.n	80095d2 <__mdiff+0x32>
 80096a2:	ce02      	ldmia	r6!, {r1}
 80096a4:	b28d      	uxth	r5, r1
 80096a6:	19ed      	adds	r5, r5, r7
 80096a8:	0c0f      	lsrs	r7, r1, #16
 80096aa:	1429      	asrs	r1, r5, #16
 80096ac:	1879      	adds	r1, r7, r1
 80096ae:	140f      	asrs	r7, r1, #16
 80096b0:	b2ad      	uxth	r5, r5
 80096b2:	0409      	lsls	r1, r1, #16
 80096b4:	430d      	orrs	r5, r1
 80096b6:	4661      	mov	r1, ip
 80096b8:	c120      	stmia	r1!, {r5}
 80096ba:	468c      	mov	ip, r1
 80096bc:	e7dd      	b.n	800967a <__mdiff+0xda>
 80096be:	3801      	subs	r0, #1
 80096c0:	e7e9      	b.n	8009696 <__mdiff+0xf6>
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	0800ad84 	.word	0x0800ad84
 80096c8:	00000232 	.word	0x00000232
 80096cc:	0800ae14 	.word	0x0800ae14

080096d0 <__ulp>:
 80096d0:	4b0f      	ldr	r3, [pc, #60]	; (8009710 <__ulp+0x40>)
 80096d2:	4019      	ands	r1, r3
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <__ulp+0x44>)
 80096d6:	18c9      	adds	r1, r1, r3
 80096d8:	2900      	cmp	r1, #0
 80096da:	dd04      	ble.n	80096e6 <__ulp+0x16>
 80096dc:	2200      	movs	r2, #0
 80096de:	000b      	movs	r3, r1
 80096e0:	0010      	movs	r0, r2
 80096e2:	0019      	movs	r1, r3
 80096e4:	4770      	bx	lr
 80096e6:	4249      	negs	r1, r1
 80096e8:	2200      	movs	r2, #0
 80096ea:	2300      	movs	r3, #0
 80096ec:	1509      	asrs	r1, r1, #20
 80096ee:	2913      	cmp	r1, #19
 80096f0:	dc04      	bgt.n	80096fc <__ulp+0x2c>
 80096f2:	2080      	movs	r0, #128	; 0x80
 80096f4:	0300      	lsls	r0, r0, #12
 80096f6:	4108      	asrs	r0, r1
 80096f8:	0003      	movs	r3, r0
 80096fa:	e7f1      	b.n	80096e0 <__ulp+0x10>
 80096fc:	3914      	subs	r1, #20
 80096fe:	2001      	movs	r0, #1
 8009700:	291e      	cmp	r1, #30
 8009702:	dc02      	bgt.n	800970a <__ulp+0x3a>
 8009704:	2080      	movs	r0, #128	; 0x80
 8009706:	0600      	lsls	r0, r0, #24
 8009708:	40c8      	lsrs	r0, r1
 800970a:	0002      	movs	r2, r0
 800970c:	e7e8      	b.n	80096e0 <__ulp+0x10>
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	7ff00000 	.word	0x7ff00000
 8009714:	fcc00000 	.word	0xfcc00000

08009718 <__b2d>:
 8009718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971a:	0006      	movs	r6, r0
 800971c:	6903      	ldr	r3, [r0, #16]
 800971e:	3614      	adds	r6, #20
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	18f3      	adds	r3, r6, r3
 8009724:	1f1d      	subs	r5, r3, #4
 8009726:	682c      	ldr	r4, [r5, #0]
 8009728:	000f      	movs	r7, r1
 800972a:	0020      	movs	r0, r4
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	f7ff fd41 	bl	80091b4 <__hi0bits>
 8009732:	2320      	movs	r3, #32
 8009734:	1a1b      	subs	r3, r3, r0
 8009736:	491f      	ldr	r1, [pc, #124]	; (80097b4 <__b2d+0x9c>)
 8009738:	603b      	str	r3, [r7, #0]
 800973a:	280a      	cmp	r0, #10
 800973c:	dc16      	bgt.n	800976c <__b2d+0x54>
 800973e:	230b      	movs	r3, #11
 8009740:	0027      	movs	r7, r4
 8009742:	1a1b      	subs	r3, r3, r0
 8009744:	40df      	lsrs	r7, r3
 8009746:	4339      	orrs	r1, r7
 8009748:	469c      	mov	ip, r3
 800974a:	000b      	movs	r3, r1
 800974c:	2100      	movs	r1, #0
 800974e:	42ae      	cmp	r6, r5
 8009750:	d202      	bcs.n	8009758 <__b2d+0x40>
 8009752:	9901      	ldr	r1, [sp, #4]
 8009754:	3908      	subs	r1, #8
 8009756:	6809      	ldr	r1, [r1, #0]
 8009758:	3015      	adds	r0, #21
 800975a:	4084      	lsls	r4, r0
 800975c:	4660      	mov	r0, ip
 800975e:	40c1      	lsrs	r1, r0
 8009760:	430c      	orrs	r4, r1
 8009762:	0022      	movs	r2, r4
 8009764:	0010      	movs	r0, r2
 8009766:	0019      	movs	r1, r3
 8009768:	b003      	add	sp, #12
 800976a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800976c:	2700      	movs	r7, #0
 800976e:	42ae      	cmp	r6, r5
 8009770:	d202      	bcs.n	8009778 <__b2d+0x60>
 8009772:	9d01      	ldr	r5, [sp, #4]
 8009774:	3d08      	subs	r5, #8
 8009776:	682f      	ldr	r7, [r5, #0]
 8009778:	230b      	movs	r3, #11
 800977a:	425b      	negs	r3, r3
 800977c:	469c      	mov	ip, r3
 800977e:	4484      	add	ip, r0
 8009780:	280b      	cmp	r0, #11
 8009782:	d013      	beq.n	80097ac <__b2d+0x94>
 8009784:	4663      	mov	r3, ip
 8009786:	2020      	movs	r0, #32
 8009788:	409c      	lsls	r4, r3
 800978a:	1ac0      	subs	r0, r0, r3
 800978c:	003b      	movs	r3, r7
 800978e:	40c3      	lsrs	r3, r0
 8009790:	431c      	orrs	r4, r3
 8009792:	4321      	orrs	r1, r4
 8009794:	000b      	movs	r3, r1
 8009796:	2100      	movs	r1, #0
 8009798:	42b5      	cmp	r5, r6
 800979a:	d901      	bls.n	80097a0 <__b2d+0x88>
 800979c:	3d04      	subs	r5, #4
 800979e:	6829      	ldr	r1, [r5, #0]
 80097a0:	4664      	mov	r4, ip
 80097a2:	40c1      	lsrs	r1, r0
 80097a4:	40a7      	lsls	r7, r4
 80097a6:	430f      	orrs	r7, r1
 80097a8:	003a      	movs	r2, r7
 80097aa:	e7db      	b.n	8009764 <__b2d+0x4c>
 80097ac:	4321      	orrs	r1, r4
 80097ae:	000b      	movs	r3, r1
 80097b0:	e7fa      	b.n	80097a8 <__b2d+0x90>
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	3ff00000 	.word	0x3ff00000

080097b8 <__d2b>:
 80097b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ba:	2101      	movs	r1, #1
 80097bc:	0014      	movs	r4, r2
 80097be:	001e      	movs	r6, r3
 80097c0:	9f08      	ldr	r7, [sp, #32]
 80097c2:	f7ff fbff 	bl	8008fc4 <_Balloc>
 80097c6:	1e05      	subs	r5, r0, #0
 80097c8:	d105      	bne.n	80097d6 <__d2b+0x1e>
 80097ca:	0002      	movs	r2, r0
 80097cc:	4b26      	ldr	r3, [pc, #152]	; (8009868 <__d2b+0xb0>)
 80097ce:	4927      	ldr	r1, [pc, #156]	; (800986c <__d2b+0xb4>)
 80097d0:	4827      	ldr	r0, [pc, #156]	; (8009870 <__d2b+0xb8>)
 80097d2:	f000 fb0f 	bl	8009df4 <__assert_func>
 80097d6:	0333      	lsls	r3, r6, #12
 80097d8:	0076      	lsls	r6, r6, #1
 80097da:	0b1b      	lsrs	r3, r3, #12
 80097dc:	0d76      	lsrs	r6, r6, #21
 80097de:	d124      	bne.n	800982a <__d2b+0x72>
 80097e0:	9301      	str	r3, [sp, #4]
 80097e2:	2c00      	cmp	r4, #0
 80097e4:	d027      	beq.n	8009836 <__d2b+0x7e>
 80097e6:	4668      	mov	r0, sp
 80097e8:	9400      	str	r4, [sp, #0]
 80097ea:	f7ff fcfd 	bl	80091e8 <__lo0bits>
 80097ee:	9c00      	ldr	r4, [sp, #0]
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d01e      	beq.n	8009832 <__d2b+0x7a>
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	2120      	movs	r1, #32
 80097f8:	001a      	movs	r2, r3
 80097fa:	1a09      	subs	r1, r1, r0
 80097fc:	408a      	lsls	r2, r1
 80097fe:	40c3      	lsrs	r3, r0
 8009800:	4322      	orrs	r2, r4
 8009802:	616a      	str	r2, [r5, #20]
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	9c01      	ldr	r4, [sp, #4]
 8009808:	61ac      	str	r4, [r5, #24]
 800980a:	1e63      	subs	r3, r4, #1
 800980c:	419c      	sbcs	r4, r3
 800980e:	3401      	adds	r4, #1
 8009810:	612c      	str	r4, [r5, #16]
 8009812:	2e00      	cmp	r6, #0
 8009814:	d018      	beq.n	8009848 <__d2b+0x90>
 8009816:	4b17      	ldr	r3, [pc, #92]	; (8009874 <__d2b+0xbc>)
 8009818:	18f6      	adds	r6, r6, r3
 800981a:	2335      	movs	r3, #53	; 0x35
 800981c:	1836      	adds	r6, r6, r0
 800981e:	1a18      	subs	r0, r3, r0
 8009820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009822:	603e      	str	r6, [r7, #0]
 8009824:	6018      	str	r0, [r3, #0]
 8009826:	0028      	movs	r0, r5
 8009828:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800982a:	2280      	movs	r2, #128	; 0x80
 800982c:	0352      	lsls	r2, r2, #13
 800982e:	4313      	orrs	r3, r2
 8009830:	e7d6      	b.n	80097e0 <__d2b+0x28>
 8009832:	616c      	str	r4, [r5, #20]
 8009834:	e7e7      	b.n	8009806 <__d2b+0x4e>
 8009836:	a801      	add	r0, sp, #4
 8009838:	f7ff fcd6 	bl	80091e8 <__lo0bits>
 800983c:	2401      	movs	r4, #1
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	612c      	str	r4, [r5, #16]
 8009842:	616b      	str	r3, [r5, #20]
 8009844:	3020      	adds	r0, #32
 8009846:	e7e4      	b.n	8009812 <__d2b+0x5a>
 8009848:	4b0b      	ldr	r3, [pc, #44]	; (8009878 <__d2b+0xc0>)
 800984a:	18c0      	adds	r0, r0, r3
 800984c:	4b0b      	ldr	r3, [pc, #44]	; (800987c <__d2b+0xc4>)
 800984e:	6038      	str	r0, [r7, #0]
 8009850:	18e3      	adds	r3, r4, r3
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	18eb      	adds	r3, r5, r3
 8009856:	6958      	ldr	r0, [r3, #20]
 8009858:	f7ff fcac 	bl	80091b4 <__hi0bits>
 800985c:	0164      	lsls	r4, r4, #5
 800985e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009860:	1a24      	subs	r4, r4, r0
 8009862:	601c      	str	r4, [r3, #0]
 8009864:	e7df      	b.n	8009826 <__d2b+0x6e>
 8009866:	46c0      	nop			; (mov r8, r8)
 8009868:	0800ad84 	.word	0x0800ad84
 800986c:	0000030a 	.word	0x0000030a
 8009870:	0800ae14 	.word	0x0800ae14
 8009874:	fffffbcd 	.word	0xfffffbcd
 8009878:	fffffbce 	.word	0xfffffbce
 800987c:	3fffffff 	.word	0x3fffffff

08009880 <__ratio>:
 8009880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009882:	b085      	sub	sp, #20
 8009884:	000d      	movs	r5, r1
 8009886:	a902      	add	r1, sp, #8
 8009888:	0004      	movs	r4, r0
 800988a:	f7ff ff45 	bl	8009718 <__b2d>
 800988e:	9000      	str	r0, [sp, #0]
 8009890:	9101      	str	r1, [sp, #4]
 8009892:	9e00      	ldr	r6, [sp, #0]
 8009894:	9f01      	ldr	r7, [sp, #4]
 8009896:	0028      	movs	r0, r5
 8009898:	a903      	add	r1, sp, #12
 800989a:	f7ff ff3d 	bl	8009718 <__b2d>
 800989e:	6924      	ldr	r4, [r4, #16]
 80098a0:	692d      	ldr	r5, [r5, #16]
 80098a2:	0002      	movs	r2, r0
 80098a4:	1b65      	subs	r5, r4, r5
 80098a6:	016c      	lsls	r4, r5, #5
 80098a8:	46a4      	mov	ip, r4
 80098aa:	9d03      	ldr	r5, [sp, #12]
 80098ac:	9c02      	ldr	r4, [sp, #8]
 80098ae:	000b      	movs	r3, r1
 80098b0:	1b64      	subs	r4, r4, r5
 80098b2:	4464      	add	r4, ip
 80098b4:	0525      	lsls	r5, r4, #20
 80098b6:	2c00      	cmp	r4, #0
 80098b8:	dd07      	ble.n	80098ca <__ratio+0x4a>
 80098ba:	9901      	ldr	r1, [sp, #4]
 80098bc:	186f      	adds	r7, r5, r1
 80098be:	0030      	movs	r0, r6
 80098c0:	0039      	movs	r1, r7
 80098c2:	f7f7 fb1d 	bl	8000f00 <__aeabi_ddiv>
 80098c6:	b005      	add	sp, #20
 80098c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ca:	1b4b      	subs	r3, r1, r5
 80098cc:	e7f7      	b.n	80098be <__ratio+0x3e>

080098ce <__copybits>:
 80098ce:	b570      	push	{r4, r5, r6, lr}
 80098d0:	0015      	movs	r5, r2
 80098d2:	6913      	ldr	r3, [r2, #16]
 80098d4:	3514      	adds	r5, #20
 80098d6:	009c      	lsls	r4, r3, #2
 80098d8:	0006      	movs	r6, r0
 80098da:	002b      	movs	r3, r5
 80098dc:	3901      	subs	r1, #1
 80098de:	1149      	asrs	r1, r1, #5
 80098e0:	3101      	adds	r1, #1
 80098e2:	0089      	lsls	r1, r1, #2
 80098e4:	1841      	adds	r1, r0, r1
 80098e6:	192c      	adds	r4, r5, r4
 80098e8:	429c      	cmp	r4, r3
 80098ea:	d80d      	bhi.n	8009908 <__copybits+0x3a>
 80098ec:	0015      	movs	r5, r2
 80098ee:	3511      	adds	r5, #17
 80098f0:	2300      	movs	r3, #0
 80098f2:	42a5      	cmp	r5, r4
 80098f4:	d803      	bhi.n	80098fe <__copybits+0x30>
 80098f6:	1aa3      	subs	r3, r4, r2
 80098f8:	3b11      	subs	r3, #17
 80098fa:	089b      	lsrs	r3, r3, #2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	18c0      	adds	r0, r0, r3
 8009900:	2300      	movs	r3, #0
 8009902:	4281      	cmp	r1, r0
 8009904:	d803      	bhi.n	800990e <__copybits+0x40>
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	cb20      	ldmia	r3!, {r5}
 800990a:	c620      	stmia	r6!, {r5}
 800990c:	e7ec      	b.n	80098e8 <__copybits+0x1a>
 800990e:	c008      	stmia	r0!, {r3}
 8009910:	e7f7      	b.n	8009902 <__copybits+0x34>

08009912 <__any_on>:
 8009912:	0002      	movs	r2, r0
 8009914:	6900      	ldr	r0, [r0, #16]
 8009916:	b510      	push	{r4, lr}
 8009918:	3214      	adds	r2, #20
 800991a:	114b      	asrs	r3, r1, #5
 800991c:	4298      	cmp	r0, r3
 800991e:	db13      	blt.n	8009948 <__any_on+0x36>
 8009920:	dd0c      	ble.n	800993c <__any_on+0x2a>
 8009922:	241f      	movs	r4, #31
 8009924:	0008      	movs	r0, r1
 8009926:	4020      	ands	r0, r4
 8009928:	4221      	tst	r1, r4
 800992a:	d007      	beq.n	800993c <__any_on+0x2a>
 800992c:	0099      	lsls	r1, r3, #2
 800992e:	588c      	ldr	r4, [r1, r2]
 8009930:	0021      	movs	r1, r4
 8009932:	40c1      	lsrs	r1, r0
 8009934:	4081      	lsls	r1, r0
 8009936:	2001      	movs	r0, #1
 8009938:	428c      	cmp	r4, r1
 800993a:	d104      	bne.n	8009946 <__any_on+0x34>
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	18d3      	adds	r3, r2, r3
 8009940:	4293      	cmp	r3, r2
 8009942:	d803      	bhi.n	800994c <__any_on+0x3a>
 8009944:	2000      	movs	r0, #0
 8009946:	bd10      	pop	{r4, pc}
 8009948:	0003      	movs	r3, r0
 800994a:	e7f7      	b.n	800993c <__any_on+0x2a>
 800994c:	3b04      	subs	r3, #4
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	2900      	cmp	r1, #0
 8009952:	d0f5      	beq.n	8009940 <__any_on+0x2e>
 8009954:	2001      	movs	r0, #1
 8009956:	e7f6      	b.n	8009946 <__any_on+0x34>

08009958 <_calloc_r>:
 8009958:	434a      	muls	r2, r1
 800995a:	b570      	push	{r4, r5, r6, lr}
 800995c:	0011      	movs	r1, r2
 800995e:	0015      	movs	r5, r2
 8009960:	f000 f852 	bl	8009a08 <_malloc_r>
 8009964:	1e04      	subs	r4, r0, #0
 8009966:	d003      	beq.n	8009970 <_calloc_r+0x18>
 8009968:	002a      	movs	r2, r5
 800996a:	2100      	movs	r1, #0
 800996c:	f7fc fb56 	bl	800601c <memset>
 8009970:	0020      	movs	r0, r4
 8009972:	bd70      	pop	{r4, r5, r6, pc}

08009974 <_free_r>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	0005      	movs	r5, r0
 8009978:	2900      	cmp	r1, #0
 800997a:	d010      	beq.n	800999e <_free_r+0x2a>
 800997c:	1f0c      	subs	r4, r1, #4
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	da00      	bge.n	8009986 <_free_r+0x12>
 8009984:	18e4      	adds	r4, r4, r3
 8009986:	0028      	movs	r0, r5
 8009988:	f000 fa76 	bl	8009e78 <__malloc_lock>
 800998c:	4a1d      	ldr	r2, [pc, #116]	; (8009a04 <_free_r+0x90>)
 800998e:	6813      	ldr	r3, [r2, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d105      	bne.n	80099a0 <_free_r+0x2c>
 8009994:	6063      	str	r3, [r4, #4]
 8009996:	6014      	str	r4, [r2, #0]
 8009998:	0028      	movs	r0, r5
 800999a:	f000 fa75 	bl	8009e88 <__malloc_unlock>
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	42a3      	cmp	r3, r4
 80099a2:	d908      	bls.n	80099b6 <_free_r+0x42>
 80099a4:	6821      	ldr	r1, [r4, #0]
 80099a6:	1860      	adds	r0, r4, r1
 80099a8:	4283      	cmp	r3, r0
 80099aa:	d1f3      	bne.n	8009994 <_free_r+0x20>
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	1841      	adds	r1, r0, r1
 80099b2:	6021      	str	r1, [r4, #0]
 80099b4:	e7ee      	b.n	8009994 <_free_r+0x20>
 80099b6:	001a      	movs	r2, r3
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <_free_r+0x4e>
 80099be:	42a3      	cmp	r3, r4
 80099c0:	d9f9      	bls.n	80099b6 <_free_r+0x42>
 80099c2:	6811      	ldr	r1, [r2, #0]
 80099c4:	1850      	adds	r0, r2, r1
 80099c6:	42a0      	cmp	r0, r4
 80099c8:	d10b      	bne.n	80099e2 <_free_r+0x6e>
 80099ca:	6820      	ldr	r0, [r4, #0]
 80099cc:	1809      	adds	r1, r1, r0
 80099ce:	1850      	adds	r0, r2, r1
 80099d0:	6011      	str	r1, [r2, #0]
 80099d2:	4283      	cmp	r3, r0
 80099d4:	d1e0      	bne.n	8009998 <_free_r+0x24>
 80099d6:	6818      	ldr	r0, [r3, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	1841      	adds	r1, r0, r1
 80099dc:	6011      	str	r1, [r2, #0]
 80099de:	6053      	str	r3, [r2, #4]
 80099e0:	e7da      	b.n	8009998 <_free_r+0x24>
 80099e2:	42a0      	cmp	r0, r4
 80099e4:	d902      	bls.n	80099ec <_free_r+0x78>
 80099e6:	230c      	movs	r3, #12
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	e7d5      	b.n	8009998 <_free_r+0x24>
 80099ec:	6821      	ldr	r1, [r4, #0]
 80099ee:	1860      	adds	r0, r4, r1
 80099f0:	4283      	cmp	r3, r0
 80099f2:	d103      	bne.n	80099fc <_free_r+0x88>
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	1841      	adds	r1, r0, r1
 80099fa:	6021      	str	r1, [r4, #0]
 80099fc:	6063      	str	r3, [r4, #4]
 80099fe:	6054      	str	r4, [r2, #4]
 8009a00:	e7ca      	b.n	8009998 <_free_r+0x24>
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	20000218 	.word	0x20000218

08009a08 <_malloc_r>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	1ccd      	adds	r5, r1, #3
 8009a0e:	439d      	bics	r5, r3
 8009a10:	3508      	adds	r5, #8
 8009a12:	0006      	movs	r6, r0
 8009a14:	2d0c      	cmp	r5, #12
 8009a16:	d21f      	bcs.n	8009a58 <_malloc_r+0x50>
 8009a18:	250c      	movs	r5, #12
 8009a1a:	42a9      	cmp	r1, r5
 8009a1c:	d81e      	bhi.n	8009a5c <_malloc_r+0x54>
 8009a1e:	0030      	movs	r0, r6
 8009a20:	f000 fa2a 	bl	8009e78 <__malloc_lock>
 8009a24:	4925      	ldr	r1, [pc, #148]	; (8009abc <_malloc_r+0xb4>)
 8009a26:	680a      	ldr	r2, [r1, #0]
 8009a28:	0014      	movs	r4, r2
 8009a2a:	2c00      	cmp	r4, #0
 8009a2c:	d11a      	bne.n	8009a64 <_malloc_r+0x5c>
 8009a2e:	4f24      	ldr	r7, [pc, #144]	; (8009ac0 <_malloc_r+0xb8>)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d104      	bne.n	8009a40 <_malloc_r+0x38>
 8009a36:	0021      	movs	r1, r4
 8009a38:	0030      	movs	r0, r6
 8009a3a:	f000 f9ab 	bl	8009d94 <_sbrk_r>
 8009a3e:	6038      	str	r0, [r7, #0]
 8009a40:	0029      	movs	r1, r5
 8009a42:	0030      	movs	r0, r6
 8009a44:	f000 f9a6 	bl	8009d94 <_sbrk_r>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d12b      	bne.n	8009aa4 <_malloc_r+0x9c>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	0030      	movs	r0, r6
 8009a50:	6033      	str	r3, [r6, #0]
 8009a52:	f000 fa19 	bl	8009e88 <__malloc_unlock>
 8009a56:	e003      	b.n	8009a60 <_malloc_r+0x58>
 8009a58:	2d00      	cmp	r5, #0
 8009a5a:	dade      	bge.n	8009a1a <_malloc_r+0x12>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	6033      	str	r3, [r6, #0]
 8009a60:	2000      	movs	r0, #0
 8009a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	1b5b      	subs	r3, r3, r5
 8009a68:	d419      	bmi.n	8009a9e <_malloc_r+0x96>
 8009a6a:	2b0b      	cmp	r3, #11
 8009a6c:	d903      	bls.n	8009a76 <_malloc_r+0x6e>
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	18e4      	adds	r4, r4, r3
 8009a72:	6025      	str	r5, [r4, #0]
 8009a74:	e003      	b.n	8009a7e <_malloc_r+0x76>
 8009a76:	6863      	ldr	r3, [r4, #4]
 8009a78:	42a2      	cmp	r2, r4
 8009a7a:	d10e      	bne.n	8009a9a <_malloc_r+0x92>
 8009a7c:	600b      	str	r3, [r1, #0]
 8009a7e:	0030      	movs	r0, r6
 8009a80:	f000 fa02 	bl	8009e88 <__malloc_unlock>
 8009a84:	0020      	movs	r0, r4
 8009a86:	2207      	movs	r2, #7
 8009a88:	300b      	adds	r0, #11
 8009a8a:	1d23      	adds	r3, r4, #4
 8009a8c:	4390      	bics	r0, r2
 8009a8e:	1ac2      	subs	r2, r0, r3
 8009a90:	4298      	cmp	r0, r3
 8009a92:	d0e6      	beq.n	8009a62 <_malloc_r+0x5a>
 8009a94:	1a1b      	subs	r3, r3, r0
 8009a96:	50a3      	str	r3, [r4, r2]
 8009a98:	e7e3      	b.n	8009a62 <_malloc_r+0x5a>
 8009a9a:	6053      	str	r3, [r2, #4]
 8009a9c:	e7ef      	b.n	8009a7e <_malloc_r+0x76>
 8009a9e:	0022      	movs	r2, r4
 8009aa0:	6864      	ldr	r4, [r4, #4]
 8009aa2:	e7c2      	b.n	8009a2a <_malloc_r+0x22>
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	1cc4      	adds	r4, r0, #3
 8009aa8:	439c      	bics	r4, r3
 8009aaa:	42a0      	cmp	r0, r4
 8009aac:	d0e1      	beq.n	8009a72 <_malloc_r+0x6a>
 8009aae:	1a21      	subs	r1, r4, r0
 8009ab0:	0030      	movs	r0, r6
 8009ab2:	f000 f96f 	bl	8009d94 <_sbrk_r>
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	d1db      	bne.n	8009a72 <_malloc_r+0x6a>
 8009aba:	e7c7      	b.n	8009a4c <_malloc_r+0x44>
 8009abc:	20000218 	.word	0x20000218
 8009ac0:	2000021c 	.word	0x2000021c

08009ac4 <__ssputs_r>:
 8009ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ac6:	688e      	ldr	r6, [r1, #8]
 8009ac8:	b085      	sub	sp, #20
 8009aca:	0007      	movs	r7, r0
 8009acc:	000c      	movs	r4, r1
 8009ace:	9203      	str	r2, [sp, #12]
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	429e      	cmp	r6, r3
 8009ad4:	d83c      	bhi.n	8009b50 <__ssputs_r+0x8c>
 8009ad6:	2390      	movs	r3, #144	; 0x90
 8009ad8:	898a      	ldrh	r2, [r1, #12]
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	421a      	tst	r2, r3
 8009ade:	d034      	beq.n	8009b4a <__ssputs_r+0x86>
 8009ae0:	2503      	movs	r5, #3
 8009ae2:	6909      	ldr	r1, [r1, #16]
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	1a5b      	subs	r3, r3, r1
 8009ae8:	9302      	str	r3, [sp, #8]
 8009aea:	6963      	ldr	r3, [r4, #20]
 8009aec:	9802      	ldr	r0, [sp, #8]
 8009aee:	435d      	muls	r5, r3
 8009af0:	0feb      	lsrs	r3, r5, #31
 8009af2:	195d      	adds	r5, r3, r5
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	106d      	asrs	r5, r5, #1
 8009af8:	3301      	adds	r3, #1
 8009afa:	181b      	adds	r3, r3, r0
 8009afc:	42ab      	cmp	r3, r5
 8009afe:	d900      	bls.n	8009b02 <__ssputs_r+0x3e>
 8009b00:	001d      	movs	r5, r3
 8009b02:	0553      	lsls	r3, r2, #21
 8009b04:	d532      	bpl.n	8009b6c <__ssputs_r+0xa8>
 8009b06:	0029      	movs	r1, r5
 8009b08:	0038      	movs	r0, r7
 8009b0a:	f7ff ff7d 	bl	8009a08 <_malloc_r>
 8009b0e:	1e06      	subs	r6, r0, #0
 8009b10:	d109      	bne.n	8009b26 <__ssputs_r+0x62>
 8009b12:	230c      	movs	r3, #12
 8009b14:	603b      	str	r3, [r7, #0]
 8009b16:	2340      	movs	r3, #64	; 0x40
 8009b18:	2001      	movs	r0, #1
 8009b1a:	89a2      	ldrh	r2, [r4, #12]
 8009b1c:	4240      	negs	r0, r0
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	81a3      	strh	r3, [r4, #12]
 8009b22:	b005      	add	sp, #20
 8009b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b26:	9a02      	ldr	r2, [sp, #8]
 8009b28:	6921      	ldr	r1, [r4, #16]
 8009b2a:	f7ff fa42 	bl	8008fb2 <memcpy>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	4a14      	ldr	r2, [pc, #80]	; (8009b84 <__ssputs_r+0xc0>)
 8009b32:	401a      	ands	r2, r3
 8009b34:	2380      	movs	r3, #128	; 0x80
 8009b36:	4313      	orrs	r3, r2
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	6126      	str	r6, [r4, #16]
 8009b3e:	18f6      	adds	r6, r6, r3
 8009b40:	6026      	str	r6, [r4, #0]
 8009b42:	6165      	str	r5, [r4, #20]
 8009b44:	9e01      	ldr	r6, [sp, #4]
 8009b46:	1aed      	subs	r5, r5, r3
 8009b48:	60a5      	str	r5, [r4, #8]
 8009b4a:	9b01      	ldr	r3, [sp, #4]
 8009b4c:	429e      	cmp	r6, r3
 8009b4e:	d900      	bls.n	8009b52 <__ssputs_r+0x8e>
 8009b50:	9e01      	ldr	r6, [sp, #4]
 8009b52:	0032      	movs	r2, r6
 8009b54:	9903      	ldr	r1, [sp, #12]
 8009b56:	6820      	ldr	r0, [r4, #0]
 8009b58:	f000 f97a 	bl	8009e50 <memmove>
 8009b5c:	68a3      	ldr	r3, [r4, #8]
 8009b5e:	2000      	movs	r0, #0
 8009b60:	1b9b      	subs	r3, r3, r6
 8009b62:	60a3      	str	r3, [r4, #8]
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	199e      	adds	r6, r3, r6
 8009b68:	6026      	str	r6, [r4, #0]
 8009b6a:	e7da      	b.n	8009b22 <__ssputs_r+0x5e>
 8009b6c:	002a      	movs	r2, r5
 8009b6e:	0038      	movs	r0, r7
 8009b70:	f000 f992 	bl	8009e98 <_realloc_r>
 8009b74:	1e06      	subs	r6, r0, #0
 8009b76:	d1e0      	bne.n	8009b3a <__ssputs_r+0x76>
 8009b78:	0038      	movs	r0, r7
 8009b7a:	6921      	ldr	r1, [r4, #16]
 8009b7c:	f7ff fefa 	bl	8009974 <_free_r>
 8009b80:	e7c7      	b.n	8009b12 <__ssputs_r+0x4e>
 8009b82:	46c0      	nop			; (mov r8, r8)
 8009b84:	fffffb7f 	.word	0xfffffb7f

08009b88 <_svfiprintf_r>:
 8009b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b8a:	b0a1      	sub	sp, #132	; 0x84
 8009b8c:	9003      	str	r0, [sp, #12]
 8009b8e:	001d      	movs	r5, r3
 8009b90:	898b      	ldrh	r3, [r1, #12]
 8009b92:	000f      	movs	r7, r1
 8009b94:	0016      	movs	r6, r2
 8009b96:	061b      	lsls	r3, r3, #24
 8009b98:	d511      	bpl.n	8009bbe <_svfiprintf_r+0x36>
 8009b9a:	690b      	ldr	r3, [r1, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10e      	bne.n	8009bbe <_svfiprintf_r+0x36>
 8009ba0:	2140      	movs	r1, #64	; 0x40
 8009ba2:	f7ff ff31 	bl	8009a08 <_malloc_r>
 8009ba6:	6038      	str	r0, [r7, #0]
 8009ba8:	6138      	str	r0, [r7, #16]
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d105      	bne.n	8009bba <_svfiprintf_r+0x32>
 8009bae:	230c      	movs	r3, #12
 8009bb0:	9a03      	ldr	r2, [sp, #12]
 8009bb2:	3801      	subs	r0, #1
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	b021      	add	sp, #132	; 0x84
 8009bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bba:	2340      	movs	r3, #64	; 0x40
 8009bbc:	617b      	str	r3, [r7, #20]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	ac08      	add	r4, sp, #32
 8009bc2:	6163      	str	r3, [r4, #20]
 8009bc4:	3320      	adds	r3, #32
 8009bc6:	7663      	strb	r3, [r4, #25]
 8009bc8:	3310      	adds	r3, #16
 8009bca:	76a3      	strb	r3, [r4, #26]
 8009bcc:	9507      	str	r5, [sp, #28]
 8009bce:	0035      	movs	r5, r6
 8009bd0:	782b      	ldrb	r3, [r5, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <_svfiprintf_r+0x52>
 8009bd6:	2b25      	cmp	r3, #37	; 0x25
 8009bd8:	d147      	bne.n	8009c6a <_svfiprintf_r+0xe2>
 8009bda:	1bab      	subs	r3, r5, r6
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	42b5      	cmp	r5, r6
 8009be0:	d00c      	beq.n	8009bfc <_svfiprintf_r+0x74>
 8009be2:	0032      	movs	r2, r6
 8009be4:	0039      	movs	r1, r7
 8009be6:	9803      	ldr	r0, [sp, #12]
 8009be8:	f7ff ff6c 	bl	8009ac4 <__ssputs_r>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d100      	bne.n	8009bf2 <_svfiprintf_r+0x6a>
 8009bf0:	e0ae      	b.n	8009d50 <_svfiprintf_r+0x1c8>
 8009bf2:	6962      	ldr	r2, [r4, #20]
 8009bf4:	9b05      	ldr	r3, [sp, #20]
 8009bf6:	4694      	mov	ip, r2
 8009bf8:	4463      	add	r3, ip
 8009bfa:	6163      	str	r3, [r4, #20]
 8009bfc:	782b      	ldrb	r3, [r5, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d100      	bne.n	8009c04 <_svfiprintf_r+0x7c>
 8009c02:	e0a5      	b.n	8009d50 <_svfiprintf_r+0x1c8>
 8009c04:	2201      	movs	r2, #1
 8009c06:	2300      	movs	r3, #0
 8009c08:	4252      	negs	r2, r2
 8009c0a:	6062      	str	r2, [r4, #4]
 8009c0c:	a904      	add	r1, sp, #16
 8009c0e:	3254      	adds	r2, #84	; 0x54
 8009c10:	1852      	adds	r2, r2, r1
 8009c12:	1c6e      	adds	r6, r5, #1
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	60e3      	str	r3, [r4, #12]
 8009c18:	60a3      	str	r3, [r4, #8]
 8009c1a:	7013      	strb	r3, [r2, #0]
 8009c1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c1e:	2205      	movs	r2, #5
 8009c20:	7831      	ldrb	r1, [r6, #0]
 8009c22:	4854      	ldr	r0, [pc, #336]	; (8009d74 <_svfiprintf_r+0x1ec>)
 8009c24:	f7ff f9ba 	bl	8008f9c <memchr>
 8009c28:	1c75      	adds	r5, r6, #1
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d11f      	bne.n	8009c6e <_svfiprintf_r+0xe6>
 8009c2e:	6822      	ldr	r2, [r4, #0]
 8009c30:	06d3      	lsls	r3, r2, #27
 8009c32:	d504      	bpl.n	8009c3e <_svfiprintf_r+0xb6>
 8009c34:	2353      	movs	r3, #83	; 0x53
 8009c36:	a904      	add	r1, sp, #16
 8009c38:	185b      	adds	r3, r3, r1
 8009c3a:	2120      	movs	r1, #32
 8009c3c:	7019      	strb	r1, [r3, #0]
 8009c3e:	0713      	lsls	r3, r2, #28
 8009c40:	d504      	bpl.n	8009c4c <_svfiprintf_r+0xc4>
 8009c42:	2353      	movs	r3, #83	; 0x53
 8009c44:	a904      	add	r1, sp, #16
 8009c46:	185b      	adds	r3, r3, r1
 8009c48:	212b      	movs	r1, #43	; 0x2b
 8009c4a:	7019      	strb	r1, [r3, #0]
 8009c4c:	7833      	ldrb	r3, [r6, #0]
 8009c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c50:	d016      	beq.n	8009c80 <_svfiprintf_r+0xf8>
 8009c52:	0035      	movs	r5, r6
 8009c54:	2100      	movs	r1, #0
 8009c56:	200a      	movs	r0, #10
 8009c58:	68e3      	ldr	r3, [r4, #12]
 8009c5a:	782a      	ldrb	r2, [r5, #0]
 8009c5c:	1c6e      	adds	r6, r5, #1
 8009c5e:	3a30      	subs	r2, #48	; 0x30
 8009c60:	2a09      	cmp	r2, #9
 8009c62:	d94e      	bls.n	8009d02 <_svfiprintf_r+0x17a>
 8009c64:	2900      	cmp	r1, #0
 8009c66:	d111      	bne.n	8009c8c <_svfiprintf_r+0x104>
 8009c68:	e017      	b.n	8009c9a <_svfiprintf_r+0x112>
 8009c6a:	3501      	adds	r5, #1
 8009c6c:	e7b0      	b.n	8009bd0 <_svfiprintf_r+0x48>
 8009c6e:	4b41      	ldr	r3, [pc, #260]	; (8009d74 <_svfiprintf_r+0x1ec>)
 8009c70:	6822      	ldr	r2, [r4, #0]
 8009c72:	1ac0      	subs	r0, r0, r3
 8009c74:	2301      	movs	r3, #1
 8009c76:	4083      	lsls	r3, r0
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	002e      	movs	r6, r5
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	e7ce      	b.n	8009c1e <_svfiprintf_r+0x96>
 8009c80:	9b07      	ldr	r3, [sp, #28]
 8009c82:	1d19      	adds	r1, r3, #4
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	9107      	str	r1, [sp, #28]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	db01      	blt.n	8009c90 <_svfiprintf_r+0x108>
 8009c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c8e:	e004      	b.n	8009c9a <_svfiprintf_r+0x112>
 8009c90:	425b      	negs	r3, r3
 8009c92:	60e3      	str	r3, [r4, #12]
 8009c94:	2302      	movs	r3, #2
 8009c96:	4313      	orrs	r3, r2
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	782b      	ldrb	r3, [r5, #0]
 8009c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c9e:	d10a      	bne.n	8009cb6 <_svfiprintf_r+0x12e>
 8009ca0:	786b      	ldrb	r3, [r5, #1]
 8009ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca4:	d135      	bne.n	8009d12 <_svfiprintf_r+0x18a>
 8009ca6:	9b07      	ldr	r3, [sp, #28]
 8009ca8:	3502      	adds	r5, #2
 8009caa:	1d1a      	adds	r2, r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	9207      	str	r2, [sp, #28]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	db2b      	blt.n	8009d0c <_svfiprintf_r+0x184>
 8009cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb6:	4e30      	ldr	r6, [pc, #192]	; (8009d78 <_svfiprintf_r+0x1f0>)
 8009cb8:	2203      	movs	r2, #3
 8009cba:	0030      	movs	r0, r6
 8009cbc:	7829      	ldrb	r1, [r5, #0]
 8009cbe:	f7ff f96d 	bl	8008f9c <memchr>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d006      	beq.n	8009cd4 <_svfiprintf_r+0x14c>
 8009cc6:	2340      	movs	r3, #64	; 0x40
 8009cc8:	1b80      	subs	r0, r0, r6
 8009cca:	4083      	lsls	r3, r0
 8009ccc:	6822      	ldr	r2, [r4, #0]
 8009cce:	3501      	adds	r5, #1
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	7829      	ldrb	r1, [r5, #0]
 8009cd6:	2206      	movs	r2, #6
 8009cd8:	4828      	ldr	r0, [pc, #160]	; (8009d7c <_svfiprintf_r+0x1f4>)
 8009cda:	1c6e      	adds	r6, r5, #1
 8009cdc:	7621      	strb	r1, [r4, #24]
 8009cde:	f7ff f95d 	bl	8008f9c <memchr>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d03c      	beq.n	8009d60 <_svfiprintf_r+0x1d8>
 8009ce6:	4b26      	ldr	r3, [pc, #152]	; (8009d80 <_svfiprintf_r+0x1f8>)
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d125      	bne.n	8009d38 <_svfiprintf_r+0x1b0>
 8009cec:	2207      	movs	r2, #7
 8009cee:	9b07      	ldr	r3, [sp, #28]
 8009cf0:	3307      	adds	r3, #7
 8009cf2:	4393      	bics	r3, r2
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	9307      	str	r3, [sp, #28]
 8009cf8:	6963      	ldr	r3, [r4, #20]
 8009cfa:	9a04      	ldr	r2, [sp, #16]
 8009cfc:	189b      	adds	r3, r3, r2
 8009cfe:	6163      	str	r3, [r4, #20]
 8009d00:	e765      	b.n	8009bce <_svfiprintf_r+0x46>
 8009d02:	4343      	muls	r3, r0
 8009d04:	0035      	movs	r5, r6
 8009d06:	2101      	movs	r1, #1
 8009d08:	189b      	adds	r3, r3, r2
 8009d0a:	e7a6      	b.n	8009c5a <_svfiprintf_r+0xd2>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	425b      	negs	r3, r3
 8009d10:	e7d0      	b.n	8009cb4 <_svfiprintf_r+0x12c>
 8009d12:	2300      	movs	r3, #0
 8009d14:	200a      	movs	r0, #10
 8009d16:	001a      	movs	r2, r3
 8009d18:	3501      	adds	r5, #1
 8009d1a:	6063      	str	r3, [r4, #4]
 8009d1c:	7829      	ldrb	r1, [r5, #0]
 8009d1e:	1c6e      	adds	r6, r5, #1
 8009d20:	3930      	subs	r1, #48	; 0x30
 8009d22:	2909      	cmp	r1, #9
 8009d24:	d903      	bls.n	8009d2e <_svfiprintf_r+0x1a6>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d0c5      	beq.n	8009cb6 <_svfiprintf_r+0x12e>
 8009d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d2c:	e7c3      	b.n	8009cb6 <_svfiprintf_r+0x12e>
 8009d2e:	4342      	muls	r2, r0
 8009d30:	0035      	movs	r5, r6
 8009d32:	2301      	movs	r3, #1
 8009d34:	1852      	adds	r2, r2, r1
 8009d36:	e7f1      	b.n	8009d1c <_svfiprintf_r+0x194>
 8009d38:	ab07      	add	r3, sp, #28
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	003a      	movs	r2, r7
 8009d3e:	0021      	movs	r1, r4
 8009d40:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <_svfiprintf_r+0x1fc>)
 8009d42:	9803      	ldr	r0, [sp, #12]
 8009d44:	f7fc fa1c 	bl	8006180 <_printf_float>
 8009d48:	9004      	str	r0, [sp, #16]
 8009d4a:	9b04      	ldr	r3, [sp, #16]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	d1d3      	bne.n	8009cf8 <_svfiprintf_r+0x170>
 8009d50:	89bb      	ldrh	r3, [r7, #12]
 8009d52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009d54:	065b      	lsls	r3, r3, #25
 8009d56:	d400      	bmi.n	8009d5a <_svfiprintf_r+0x1d2>
 8009d58:	e72d      	b.n	8009bb6 <_svfiprintf_r+0x2e>
 8009d5a:	2001      	movs	r0, #1
 8009d5c:	4240      	negs	r0, r0
 8009d5e:	e72a      	b.n	8009bb6 <_svfiprintf_r+0x2e>
 8009d60:	ab07      	add	r3, sp, #28
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	003a      	movs	r2, r7
 8009d66:	0021      	movs	r1, r4
 8009d68:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <_svfiprintf_r+0x1fc>)
 8009d6a:	9803      	ldr	r0, [sp, #12]
 8009d6c:	f7fc fcc6 	bl	80066fc <_printf_i>
 8009d70:	e7ea      	b.n	8009d48 <_svfiprintf_r+0x1c0>
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	0800af74 	.word	0x0800af74
 8009d78:	0800af7a 	.word	0x0800af7a
 8009d7c:	0800af7e 	.word	0x0800af7e
 8009d80:	08006181 	.word	0x08006181
 8009d84:	08009ac5 	.word	0x08009ac5

08009d88 <nan>:
 8009d88:	2000      	movs	r0, #0
 8009d8a:	4901      	ldr	r1, [pc, #4]	; (8009d90 <nan+0x8>)
 8009d8c:	4770      	bx	lr
 8009d8e:	46c0      	nop			; (mov r8, r8)
 8009d90:	7ff80000 	.word	0x7ff80000

08009d94 <_sbrk_r>:
 8009d94:	2300      	movs	r3, #0
 8009d96:	b570      	push	{r4, r5, r6, lr}
 8009d98:	4d06      	ldr	r5, [pc, #24]	; (8009db4 <_sbrk_r+0x20>)
 8009d9a:	0004      	movs	r4, r0
 8009d9c:	0008      	movs	r0, r1
 8009d9e:	602b      	str	r3, [r5, #0]
 8009da0:	f7f9 f9ce 	bl	8003140 <_sbrk>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d103      	bne.n	8009db0 <_sbrk_r+0x1c>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d000      	beq.n	8009db0 <_sbrk_r+0x1c>
 8009dae:	6023      	str	r3, [r4, #0]
 8009db0:	bd70      	pop	{r4, r5, r6, pc}
 8009db2:	46c0      	nop			; (mov r8, r8)
 8009db4:	20000c00 	.word	0x20000c00

08009db8 <strncmp>:
 8009db8:	b530      	push	{r4, r5, lr}
 8009dba:	0005      	movs	r5, r0
 8009dbc:	1e10      	subs	r0, r2, #0
 8009dbe:	d00b      	beq.n	8009dd8 <strncmp+0x20>
 8009dc0:	2400      	movs	r4, #0
 8009dc2:	3a01      	subs	r2, #1
 8009dc4:	5d2b      	ldrb	r3, [r5, r4]
 8009dc6:	5d08      	ldrb	r0, [r1, r4]
 8009dc8:	4283      	cmp	r3, r0
 8009dca:	d104      	bne.n	8009dd6 <strncmp+0x1e>
 8009dcc:	4294      	cmp	r4, r2
 8009dce:	d002      	beq.n	8009dd6 <strncmp+0x1e>
 8009dd0:	3401      	adds	r4, #1
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1f6      	bne.n	8009dc4 <strncmp+0xc>
 8009dd6:	1a18      	subs	r0, r3, r0
 8009dd8:	bd30      	pop	{r4, r5, pc}

08009dda <__ascii_wctomb>:
 8009dda:	0003      	movs	r3, r0
 8009ddc:	1e08      	subs	r0, r1, #0
 8009dde:	d005      	beq.n	8009dec <__ascii_wctomb+0x12>
 8009de0:	2aff      	cmp	r2, #255	; 0xff
 8009de2:	d904      	bls.n	8009dee <__ascii_wctomb+0x14>
 8009de4:	228a      	movs	r2, #138	; 0x8a
 8009de6:	2001      	movs	r0, #1
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	4240      	negs	r0, r0
 8009dec:	4770      	bx	lr
 8009dee:	2001      	movs	r0, #1
 8009df0:	700a      	strb	r2, [r1, #0]
 8009df2:	e7fb      	b.n	8009dec <__ascii_wctomb+0x12>

08009df4 <__assert_func>:
 8009df4:	b530      	push	{r4, r5, lr}
 8009df6:	0014      	movs	r4, r2
 8009df8:	001a      	movs	r2, r3
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <__assert_func+0x2c>)
 8009dfc:	0005      	movs	r5, r0
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	b085      	sub	sp, #20
 8009e02:	68d8      	ldr	r0, [r3, #12]
 8009e04:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <__assert_func+0x30>)
 8009e06:	2c00      	cmp	r4, #0
 8009e08:	d101      	bne.n	8009e0e <__assert_func+0x1a>
 8009e0a:	4b07      	ldr	r3, [pc, #28]	; (8009e28 <__assert_func+0x34>)
 8009e0c:	001c      	movs	r4, r3
 8009e0e:	9301      	str	r3, [sp, #4]
 8009e10:	9100      	str	r1, [sp, #0]
 8009e12:	002b      	movs	r3, r5
 8009e14:	4905      	ldr	r1, [pc, #20]	; (8009e2c <__assert_func+0x38>)
 8009e16:	9402      	str	r4, [sp, #8]
 8009e18:	f000 f80a 	bl	8009e30 <fiprintf>
 8009e1c:	f000 fa92 	bl	800a344 <abort>
 8009e20:	20000020 	.word	0x20000020
 8009e24:	0800af85 	.word	0x0800af85
 8009e28:	0800afc0 	.word	0x0800afc0
 8009e2c:	0800af92 	.word	0x0800af92

08009e30 <fiprintf>:
 8009e30:	b40e      	push	{r1, r2, r3}
 8009e32:	b503      	push	{r0, r1, lr}
 8009e34:	0001      	movs	r1, r0
 8009e36:	ab03      	add	r3, sp, #12
 8009e38:	4804      	ldr	r0, [pc, #16]	; (8009e4c <fiprintf+0x1c>)
 8009e3a:	cb04      	ldmia	r3!, {r2}
 8009e3c:	6800      	ldr	r0, [r0, #0]
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	f000 f878 	bl	8009f34 <_vfiprintf_r>
 8009e44:	b002      	add	sp, #8
 8009e46:	bc08      	pop	{r3}
 8009e48:	b003      	add	sp, #12
 8009e4a:	4718      	bx	r3
 8009e4c:	20000020 	.word	0x20000020

08009e50 <memmove>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	4288      	cmp	r0, r1
 8009e54:	d902      	bls.n	8009e5c <memmove+0xc>
 8009e56:	188b      	adds	r3, r1, r2
 8009e58:	4298      	cmp	r0, r3
 8009e5a:	d303      	bcc.n	8009e64 <memmove+0x14>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e007      	b.n	8009e70 <memmove+0x20>
 8009e60:	5c8b      	ldrb	r3, [r1, r2]
 8009e62:	5483      	strb	r3, [r0, r2]
 8009e64:	3a01      	subs	r2, #1
 8009e66:	d2fb      	bcs.n	8009e60 <memmove+0x10>
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	5ccc      	ldrb	r4, [r1, r3]
 8009e6c:	54c4      	strb	r4, [r0, r3]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d1fa      	bne.n	8009e6a <memmove+0x1a>
 8009e74:	e7f8      	b.n	8009e68 <memmove+0x18>
	...

08009e78 <__malloc_lock>:
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	4802      	ldr	r0, [pc, #8]	; (8009e84 <__malloc_lock+0xc>)
 8009e7c:	f000 fc39 	bl	800a6f2 <__retarget_lock_acquire_recursive>
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	46c0      	nop			; (mov r8, r8)
 8009e84:	20000c08 	.word	0x20000c08

08009e88 <__malloc_unlock>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	4802      	ldr	r0, [pc, #8]	; (8009e94 <__malloc_unlock+0xc>)
 8009e8c:	f000 fc32 	bl	800a6f4 <__retarget_lock_release_recursive>
 8009e90:	bd10      	pop	{r4, pc}
 8009e92:	46c0      	nop			; (mov r8, r8)
 8009e94:	20000c08 	.word	0x20000c08

08009e98 <_realloc_r>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	0007      	movs	r7, r0
 8009e9c:	000d      	movs	r5, r1
 8009e9e:	0016      	movs	r6, r2
 8009ea0:	2900      	cmp	r1, #0
 8009ea2:	d105      	bne.n	8009eb0 <_realloc_r+0x18>
 8009ea4:	0011      	movs	r1, r2
 8009ea6:	f7ff fdaf 	bl	8009a08 <_malloc_r>
 8009eaa:	0004      	movs	r4, r0
 8009eac:	0020      	movs	r0, r4
 8009eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb0:	2a00      	cmp	r2, #0
 8009eb2:	d103      	bne.n	8009ebc <_realloc_r+0x24>
 8009eb4:	f7ff fd5e 	bl	8009974 <_free_r>
 8009eb8:	0034      	movs	r4, r6
 8009eba:	e7f7      	b.n	8009eac <_realloc_r+0x14>
 8009ebc:	f000 fc88 	bl	800a7d0 <_malloc_usable_size_r>
 8009ec0:	002c      	movs	r4, r5
 8009ec2:	42b0      	cmp	r0, r6
 8009ec4:	d2f2      	bcs.n	8009eac <_realloc_r+0x14>
 8009ec6:	0031      	movs	r1, r6
 8009ec8:	0038      	movs	r0, r7
 8009eca:	f7ff fd9d 	bl	8009a08 <_malloc_r>
 8009ece:	1e04      	subs	r4, r0, #0
 8009ed0:	d0ec      	beq.n	8009eac <_realloc_r+0x14>
 8009ed2:	0029      	movs	r1, r5
 8009ed4:	0032      	movs	r2, r6
 8009ed6:	f7ff f86c 	bl	8008fb2 <memcpy>
 8009eda:	0029      	movs	r1, r5
 8009edc:	0038      	movs	r0, r7
 8009ede:	f7ff fd49 	bl	8009974 <_free_r>
 8009ee2:	e7e3      	b.n	8009eac <_realloc_r+0x14>

08009ee4 <__sfputc_r>:
 8009ee4:	6893      	ldr	r3, [r2, #8]
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	6093      	str	r3, [r2, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	da04      	bge.n	8009efa <__sfputc_r+0x16>
 8009ef0:	6994      	ldr	r4, [r2, #24]
 8009ef2:	42a3      	cmp	r3, r4
 8009ef4:	db07      	blt.n	8009f06 <__sfputc_r+0x22>
 8009ef6:	290a      	cmp	r1, #10
 8009ef8:	d005      	beq.n	8009f06 <__sfputc_r+0x22>
 8009efa:	6813      	ldr	r3, [r2, #0]
 8009efc:	1c58      	adds	r0, r3, #1
 8009efe:	6010      	str	r0, [r2, #0]
 8009f00:	7019      	strb	r1, [r3, #0]
 8009f02:	0008      	movs	r0, r1
 8009f04:	bd10      	pop	{r4, pc}
 8009f06:	f000 f94f 	bl	800a1a8 <__swbuf_r>
 8009f0a:	0001      	movs	r1, r0
 8009f0c:	e7f9      	b.n	8009f02 <__sfputc_r+0x1e>

08009f0e <__sfputs_r>:
 8009f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f10:	0006      	movs	r6, r0
 8009f12:	000f      	movs	r7, r1
 8009f14:	0014      	movs	r4, r2
 8009f16:	18d5      	adds	r5, r2, r3
 8009f18:	42ac      	cmp	r4, r5
 8009f1a:	d101      	bne.n	8009f20 <__sfputs_r+0x12>
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	e007      	b.n	8009f30 <__sfputs_r+0x22>
 8009f20:	7821      	ldrb	r1, [r4, #0]
 8009f22:	003a      	movs	r2, r7
 8009f24:	0030      	movs	r0, r6
 8009f26:	f7ff ffdd 	bl	8009ee4 <__sfputc_r>
 8009f2a:	3401      	adds	r4, #1
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d1f3      	bne.n	8009f18 <__sfputs_r+0xa>
 8009f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f34 <_vfiprintf_r>:
 8009f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f36:	b0a1      	sub	sp, #132	; 0x84
 8009f38:	0006      	movs	r6, r0
 8009f3a:	000c      	movs	r4, r1
 8009f3c:	001f      	movs	r7, r3
 8009f3e:	9203      	str	r2, [sp, #12]
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d004      	beq.n	8009f4e <_vfiprintf_r+0x1a>
 8009f44:	6983      	ldr	r3, [r0, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <_vfiprintf_r+0x1a>
 8009f4a:	f000 fb31 	bl	800a5b0 <__sinit>
 8009f4e:	4b8e      	ldr	r3, [pc, #568]	; (800a188 <_vfiprintf_r+0x254>)
 8009f50:	429c      	cmp	r4, r3
 8009f52:	d11c      	bne.n	8009f8e <_vfiprintf_r+0x5a>
 8009f54:	6874      	ldr	r4, [r6, #4]
 8009f56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f58:	07db      	lsls	r3, r3, #31
 8009f5a:	d405      	bmi.n	8009f68 <_vfiprintf_r+0x34>
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	059b      	lsls	r3, r3, #22
 8009f60:	d402      	bmi.n	8009f68 <_vfiprintf_r+0x34>
 8009f62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f64:	f000 fbc5 	bl	800a6f2 <__retarget_lock_acquire_recursive>
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	071b      	lsls	r3, r3, #28
 8009f6c:	d502      	bpl.n	8009f74 <_vfiprintf_r+0x40>
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d11d      	bne.n	8009fb0 <_vfiprintf_r+0x7c>
 8009f74:	0021      	movs	r1, r4
 8009f76:	0030      	movs	r0, r6
 8009f78:	f000 f96c 	bl	800a254 <__swsetup_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d017      	beq.n	8009fb0 <_vfiprintf_r+0x7c>
 8009f80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f82:	07db      	lsls	r3, r3, #31
 8009f84:	d50d      	bpl.n	8009fa2 <_vfiprintf_r+0x6e>
 8009f86:	2001      	movs	r0, #1
 8009f88:	4240      	negs	r0, r0
 8009f8a:	b021      	add	sp, #132	; 0x84
 8009f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f8e:	4b7f      	ldr	r3, [pc, #508]	; (800a18c <_vfiprintf_r+0x258>)
 8009f90:	429c      	cmp	r4, r3
 8009f92:	d101      	bne.n	8009f98 <_vfiprintf_r+0x64>
 8009f94:	68b4      	ldr	r4, [r6, #8]
 8009f96:	e7de      	b.n	8009f56 <_vfiprintf_r+0x22>
 8009f98:	4b7d      	ldr	r3, [pc, #500]	; (800a190 <_vfiprintf_r+0x25c>)
 8009f9a:	429c      	cmp	r4, r3
 8009f9c:	d1db      	bne.n	8009f56 <_vfiprintf_r+0x22>
 8009f9e:	68f4      	ldr	r4, [r6, #12]
 8009fa0:	e7d9      	b.n	8009f56 <_vfiprintf_r+0x22>
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	059b      	lsls	r3, r3, #22
 8009fa6:	d4ee      	bmi.n	8009f86 <_vfiprintf_r+0x52>
 8009fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009faa:	f000 fba3 	bl	800a6f4 <__retarget_lock_release_recursive>
 8009fae:	e7ea      	b.n	8009f86 <_vfiprintf_r+0x52>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	ad08      	add	r5, sp, #32
 8009fb4:	616b      	str	r3, [r5, #20]
 8009fb6:	3320      	adds	r3, #32
 8009fb8:	766b      	strb	r3, [r5, #25]
 8009fba:	3310      	adds	r3, #16
 8009fbc:	76ab      	strb	r3, [r5, #26]
 8009fbe:	9707      	str	r7, [sp, #28]
 8009fc0:	9f03      	ldr	r7, [sp, #12]
 8009fc2:	783b      	ldrb	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <_vfiprintf_r+0x98>
 8009fc8:	2b25      	cmp	r3, #37	; 0x25
 8009fca:	d14e      	bne.n	800a06a <_vfiprintf_r+0x136>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	1afb      	subs	r3, r7, r3
 8009fd0:	9305      	str	r3, [sp, #20]
 8009fd2:	9b03      	ldr	r3, [sp, #12]
 8009fd4:	429f      	cmp	r7, r3
 8009fd6:	d00d      	beq.n	8009ff4 <_vfiprintf_r+0xc0>
 8009fd8:	9b05      	ldr	r3, [sp, #20]
 8009fda:	0021      	movs	r1, r4
 8009fdc:	0030      	movs	r0, r6
 8009fde:	9a03      	ldr	r2, [sp, #12]
 8009fe0:	f7ff ff95 	bl	8009f0e <__sfputs_r>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d100      	bne.n	8009fea <_vfiprintf_r+0xb6>
 8009fe8:	e0b5      	b.n	800a156 <_vfiprintf_r+0x222>
 8009fea:	696a      	ldr	r2, [r5, #20]
 8009fec:	9b05      	ldr	r3, [sp, #20]
 8009fee:	4694      	mov	ip, r2
 8009ff0:	4463      	add	r3, ip
 8009ff2:	616b      	str	r3, [r5, #20]
 8009ff4:	783b      	ldrb	r3, [r7, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d100      	bne.n	8009ffc <_vfiprintf_r+0xc8>
 8009ffa:	e0ac      	b.n	800a156 <_vfiprintf_r+0x222>
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	1c7b      	adds	r3, r7, #1
 800a000:	9303      	str	r3, [sp, #12]
 800a002:	2300      	movs	r3, #0
 800a004:	4252      	negs	r2, r2
 800a006:	606a      	str	r2, [r5, #4]
 800a008:	a904      	add	r1, sp, #16
 800a00a:	3254      	adds	r2, #84	; 0x54
 800a00c:	1852      	adds	r2, r2, r1
 800a00e:	602b      	str	r3, [r5, #0]
 800a010:	60eb      	str	r3, [r5, #12]
 800a012:	60ab      	str	r3, [r5, #8]
 800a014:	7013      	strb	r3, [r2, #0]
 800a016:	65ab      	str	r3, [r5, #88]	; 0x58
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	2205      	movs	r2, #5
 800a01c:	7819      	ldrb	r1, [r3, #0]
 800a01e:	485d      	ldr	r0, [pc, #372]	; (800a194 <_vfiprintf_r+0x260>)
 800a020:	f7fe ffbc 	bl	8008f9c <memchr>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	1c5f      	adds	r7, r3, #1
 800a028:	2800      	cmp	r0, #0
 800a02a:	d120      	bne.n	800a06e <_vfiprintf_r+0x13a>
 800a02c:	682a      	ldr	r2, [r5, #0]
 800a02e:	06d3      	lsls	r3, r2, #27
 800a030:	d504      	bpl.n	800a03c <_vfiprintf_r+0x108>
 800a032:	2353      	movs	r3, #83	; 0x53
 800a034:	a904      	add	r1, sp, #16
 800a036:	185b      	adds	r3, r3, r1
 800a038:	2120      	movs	r1, #32
 800a03a:	7019      	strb	r1, [r3, #0]
 800a03c:	0713      	lsls	r3, r2, #28
 800a03e:	d504      	bpl.n	800a04a <_vfiprintf_r+0x116>
 800a040:	2353      	movs	r3, #83	; 0x53
 800a042:	a904      	add	r1, sp, #16
 800a044:	185b      	adds	r3, r3, r1
 800a046:	212b      	movs	r1, #43	; 0x2b
 800a048:	7019      	strb	r1, [r3, #0]
 800a04a:	9b03      	ldr	r3, [sp, #12]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b2a      	cmp	r3, #42	; 0x2a
 800a050:	d016      	beq.n	800a080 <_vfiprintf_r+0x14c>
 800a052:	2100      	movs	r1, #0
 800a054:	68eb      	ldr	r3, [r5, #12]
 800a056:	9f03      	ldr	r7, [sp, #12]
 800a058:	783a      	ldrb	r2, [r7, #0]
 800a05a:	1c78      	adds	r0, r7, #1
 800a05c:	3a30      	subs	r2, #48	; 0x30
 800a05e:	4684      	mov	ip, r0
 800a060:	2a09      	cmp	r2, #9
 800a062:	d94f      	bls.n	800a104 <_vfiprintf_r+0x1d0>
 800a064:	2900      	cmp	r1, #0
 800a066:	d111      	bne.n	800a08c <_vfiprintf_r+0x158>
 800a068:	e017      	b.n	800a09a <_vfiprintf_r+0x166>
 800a06a:	3701      	adds	r7, #1
 800a06c:	e7a9      	b.n	8009fc2 <_vfiprintf_r+0x8e>
 800a06e:	4b49      	ldr	r3, [pc, #292]	; (800a194 <_vfiprintf_r+0x260>)
 800a070:	682a      	ldr	r2, [r5, #0]
 800a072:	1ac0      	subs	r0, r0, r3
 800a074:	2301      	movs	r3, #1
 800a076:	4083      	lsls	r3, r0
 800a078:	4313      	orrs	r3, r2
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	9703      	str	r7, [sp, #12]
 800a07e:	e7cb      	b.n	800a018 <_vfiprintf_r+0xe4>
 800a080:	9b07      	ldr	r3, [sp, #28]
 800a082:	1d19      	adds	r1, r3, #4
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	9107      	str	r1, [sp, #28]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	db01      	blt.n	800a090 <_vfiprintf_r+0x15c>
 800a08c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a08e:	e004      	b.n	800a09a <_vfiprintf_r+0x166>
 800a090:	425b      	negs	r3, r3
 800a092:	60eb      	str	r3, [r5, #12]
 800a094:	2302      	movs	r3, #2
 800a096:	4313      	orrs	r3, r2
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	783b      	ldrb	r3, [r7, #0]
 800a09c:	2b2e      	cmp	r3, #46	; 0x2e
 800a09e:	d10a      	bne.n	800a0b6 <_vfiprintf_r+0x182>
 800a0a0:	787b      	ldrb	r3, [r7, #1]
 800a0a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a0a4:	d137      	bne.n	800a116 <_vfiprintf_r+0x1e2>
 800a0a6:	9b07      	ldr	r3, [sp, #28]
 800a0a8:	3702      	adds	r7, #2
 800a0aa:	1d1a      	adds	r2, r3, #4
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	9207      	str	r2, [sp, #28]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	db2d      	blt.n	800a110 <_vfiprintf_r+0x1dc>
 800a0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b6:	2203      	movs	r2, #3
 800a0b8:	7839      	ldrb	r1, [r7, #0]
 800a0ba:	4837      	ldr	r0, [pc, #220]	; (800a198 <_vfiprintf_r+0x264>)
 800a0bc:	f7fe ff6e 	bl	8008f9c <memchr>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d007      	beq.n	800a0d4 <_vfiprintf_r+0x1a0>
 800a0c4:	4b34      	ldr	r3, [pc, #208]	; (800a198 <_vfiprintf_r+0x264>)
 800a0c6:	682a      	ldr	r2, [r5, #0]
 800a0c8:	1ac0      	subs	r0, r0, r3
 800a0ca:	2340      	movs	r3, #64	; 0x40
 800a0cc:	4083      	lsls	r3, r0
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	3701      	adds	r7, #1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	7839      	ldrb	r1, [r7, #0]
 800a0d6:	1c7b      	adds	r3, r7, #1
 800a0d8:	2206      	movs	r2, #6
 800a0da:	4830      	ldr	r0, [pc, #192]	; (800a19c <_vfiprintf_r+0x268>)
 800a0dc:	9303      	str	r3, [sp, #12]
 800a0de:	7629      	strb	r1, [r5, #24]
 800a0e0:	f7fe ff5c 	bl	8008f9c <memchr>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d045      	beq.n	800a174 <_vfiprintf_r+0x240>
 800a0e8:	4b2d      	ldr	r3, [pc, #180]	; (800a1a0 <_vfiprintf_r+0x26c>)
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d127      	bne.n	800a13e <_vfiprintf_r+0x20a>
 800a0ee:	2207      	movs	r2, #7
 800a0f0:	9b07      	ldr	r3, [sp, #28]
 800a0f2:	3307      	adds	r3, #7
 800a0f4:	4393      	bics	r3, r2
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	9307      	str	r3, [sp, #28]
 800a0fa:	696b      	ldr	r3, [r5, #20]
 800a0fc:	9a04      	ldr	r2, [sp, #16]
 800a0fe:	189b      	adds	r3, r3, r2
 800a100:	616b      	str	r3, [r5, #20]
 800a102:	e75d      	b.n	8009fc0 <_vfiprintf_r+0x8c>
 800a104:	210a      	movs	r1, #10
 800a106:	434b      	muls	r3, r1
 800a108:	4667      	mov	r7, ip
 800a10a:	189b      	adds	r3, r3, r2
 800a10c:	3909      	subs	r1, #9
 800a10e:	e7a3      	b.n	800a058 <_vfiprintf_r+0x124>
 800a110:	2301      	movs	r3, #1
 800a112:	425b      	negs	r3, r3
 800a114:	e7ce      	b.n	800a0b4 <_vfiprintf_r+0x180>
 800a116:	2300      	movs	r3, #0
 800a118:	001a      	movs	r2, r3
 800a11a:	3701      	adds	r7, #1
 800a11c:	606b      	str	r3, [r5, #4]
 800a11e:	7839      	ldrb	r1, [r7, #0]
 800a120:	1c78      	adds	r0, r7, #1
 800a122:	3930      	subs	r1, #48	; 0x30
 800a124:	4684      	mov	ip, r0
 800a126:	2909      	cmp	r1, #9
 800a128:	d903      	bls.n	800a132 <_vfiprintf_r+0x1fe>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0c3      	beq.n	800a0b6 <_vfiprintf_r+0x182>
 800a12e:	9209      	str	r2, [sp, #36]	; 0x24
 800a130:	e7c1      	b.n	800a0b6 <_vfiprintf_r+0x182>
 800a132:	230a      	movs	r3, #10
 800a134:	435a      	muls	r2, r3
 800a136:	4667      	mov	r7, ip
 800a138:	1852      	adds	r2, r2, r1
 800a13a:	3b09      	subs	r3, #9
 800a13c:	e7ef      	b.n	800a11e <_vfiprintf_r+0x1ea>
 800a13e:	ab07      	add	r3, sp, #28
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	0022      	movs	r2, r4
 800a144:	0029      	movs	r1, r5
 800a146:	0030      	movs	r0, r6
 800a148:	4b16      	ldr	r3, [pc, #88]	; (800a1a4 <_vfiprintf_r+0x270>)
 800a14a:	f7fc f819 	bl	8006180 <_printf_float>
 800a14e:	9004      	str	r0, [sp, #16]
 800a150:	9b04      	ldr	r3, [sp, #16]
 800a152:	3301      	adds	r3, #1
 800a154:	d1d1      	bne.n	800a0fa <_vfiprintf_r+0x1c6>
 800a156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a158:	07db      	lsls	r3, r3, #31
 800a15a:	d405      	bmi.n	800a168 <_vfiprintf_r+0x234>
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	059b      	lsls	r3, r3, #22
 800a160:	d402      	bmi.n	800a168 <_vfiprintf_r+0x234>
 800a162:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a164:	f000 fac6 	bl	800a6f4 <__retarget_lock_release_recursive>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	065b      	lsls	r3, r3, #25
 800a16c:	d500      	bpl.n	800a170 <_vfiprintf_r+0x23c>
 800a16e:	e70a      	b.n	8009f86 <_vfiprintf_r+0x52>
 800a170:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a172:	e70a      	b.n	8009f8a <_vfiprintf_r+0x56>
 800a174:	ab07      	add	r3, sp, #28
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	0022      	movs	r2, r4
 800a17a:	0029      	movs	r1, r5
 800a17c:	0030      	movs	r0, r6
 800a17e:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <_vfiprintf_r+0x270>)
 800a180:	f7fc fabc 	bl	80066fc <_printf_i>
 800a184:	e7e3      	b.n	800a14e <_vfiprintf_r+0x21a>
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	0800afe4 	.word	0x0800afe4
 800a18c:	0800b004 	.word	0x0800b004
 800a190:	0800afc4 	.word	0x0800afc4
 800a194:	0800af74 	.word	0x0800af74
 800a198:	0800af7a 	.word	0x0800af7a
 800a19c:	0800af7e 	.word	0x0800af7e
 800a1a0:	08006181 	.word	0x08006181
 800a1a4:	08009f0f 	.word	0x08009f0f

0800a1a8 <__swbuf_r>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	0005      	movs	r5, r0
 800a1ac:	000e      	movs	r6, r1
 800a1ae:	0014      	movs	r4, r2
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d004      	beq.n	800a1be <__swbuf_r+0x16>
 800a1b4:	6983      	ldr	r3, [r0, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <__swbuf_r+0x16>
 800a1ba:	f000 f9f9 	bl	800a5b0 <__sinit>
 800a1be:	4b22      	ldr	r3, [pc, #136]	; (800a248 <__swbuf_r+0xa0>)
 800a1c0:	429c      	cmp	r4, r3
 800a1c2:	d12e      	bne.n	800a222 <__swbuf_r+0x7a>
 800a1c4:	686c      	ldr	r4, [r5, #4]
 800a1c6:	69a3      	ldr	r3, [r4, #24]
 800a1c8:	60a3      	str	r3, [r4, #8]
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	071b      	lsls	r3, r3, #28
 800a1ce:	d532      	bpl.n	800a236 <__swbuf_r+0x8e>
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d02f      	beq.n	800a236 <__swbuf_r+0x8e>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	6922      	ldr	r2, [r4, #16]
 800a1da:	b2f7      	uxtb	r7, r6
 800a1dc:	1a98      	subs	r0, r3, r2
 800a1de:	6963      	ldr	r3, [r4, #20]
 800a1e0:	b2f6      	uxtb	r6, r6
 800a1e2:	4283      	cmp	r3, r0
 800a1e4:	dc05      	bgt.n	800a1f2 <__swbuf_r+0x4a>
 800a1e6:	0021      	movs	r1, r4
 800a1e8:	0028      	movs	r0, r5
 800a1ea:	f000 f93f 	bl	800a46c <_fflush_r>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d127      	bne.n	800a242 <__swbuf_r+0x9a>
 800a1f2:	68a3      	ldr	r3, [r4, #8]
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	60a3      	str	r3, [r4, #8]
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	6022      	str	r2, [r4, #0]
 800a200:	701f      	strb	r7, [r3, #0]
 800a202:	6963      	ldr	r3, [r4, #20]
 800a204:	4283      	cmp	r3, r0
 800a206:	d004      	beq.n	800a212 <__swbuf_r+0x6a>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	07db      	lsls	r3, r3, #31
 800a20c:	d507      	bpl.n	800a21e <__swbuf_r+0x76>
 800a20e:	2e0a      	cmp	r6, #10
 800a210:	d105      	bne.n	800a21e <__swbuf_r+0x76>
 800a212:	0021      	movs	r1, r4
 800a214:	0028      	movs	r0, r5
 800a216:	f000 f929 	bl	800a46c <_fflush_r>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d111      	bne.n	800a242 <__swbuf_r+0x9a>
 800a21e:	0030      	movs	r0, r6
 800a220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a222:	4b0a      	ldr	r3, [pc, #40]	; (800a24c <__swbuf_r+0xa4>)
 800a224:	429c      	cmp	r4, r3
 800a226:	d101      	bne.n	800a22c <__swbuf_r+0x84>
 800a228:	68ac      	ldr	r4, [r5, #8]
 800a22a:	e7cc      	b.n	800a1c6 <__swbuf_r+0x1e>
 800a22c:	4b08      	ldr	r3, [pc, #32]	; (800a250 <__swbuf_r+0xa8>)
 800a22e:	429c      	cmp	r4, r3
 800a230:	d1c9      	bne.n	800a1c6 <__swbuf_r+0x1e>
 800a232:	68ec      	ldr	r4, [r5, #12]
 800a234:	e7c7      	b.n	800a1c6 <__swbuf_r+0x1e>
 800a236:	0021      	movs	r1, r4
 800a238:	0028      	movs	r0, r5
 800a23a:	f000 f80b 	bl	800a254 <__swsetup_r>
 800a23e:	2800      	cmp	r0, #0
 800a240:	d0c9      	beq.n	800a1d6 <__swbuf_r+0x2e>
 800a242:	2601      	movs	r6, #1
 800a244:	4276      	negs	r6, r6
 800a246:	e7ea      	b.n	800a21e <__swbuf_r+0x76>
 800a248:	0800afe4 	.word	0x0800afe4
 800a24c:	0800b004 	.word	0x0800b004
 800a250:	0800afc4 	.word	0x0800afc4

0800a254 <__swsetup_r>:
 800a254:	4b37      	ldr	r3, [pc, #220]	; (800a334 <__swsetup_r+0xe0>)
 800a256:	b570      	push	{r4, r5, r6, lr}
 800a258:	681d      	ldr	r5, [r3, #0]
 800a25a:	0006      	movs	r6, r0
 800a25c:	000c      	movs	r4, r1
 800a25e:	2d00      	cmp	r5, #0
 800a260:	d005      	beq.n	800a26e <__swsetup_r+0x1a>
 800a262:	69ab      	ldr	r3, [r5, #24]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <__swsetup_r+0x1a>
 800a268:	0028      	movs	r0, r5
 800a26a:	f000 f9a1 	bl	800a5b0 <__sinit>
 800a26e:	4b32      	ldr	r3, [pc, #200]	; (800a338 <__swsetup_r+0xe4>)
 800a270:	429c      	cmp	r4, r3
 800a272:	d10f      	bne.n	800a294 <__swsetup_r+0x40>
 800a274:	686c      	ldr	r4, [r5, #4]
 800a276:	230c      	movs	r3, #12
 800a278:	5ee2      	ldrsh	r2, [r4, r3]
 800a27a:	b293      	uxth	r3, r2
 800a27c:	0711      	lsls	r1, r2, #28
 800a27e:	d42d      	bmi.n	800a2dc <__swsetup_r+0x88>
 800a280:	06d9      	lsls	r1, r3, #27
 800a282:	d411      	bmi.n	800a2a8 <__swsetup_r+0x54>
 800a284:	2309      	movs	r3, #9
 800a286:	2001      	movs	r0, #1
 800a288:	6033      	str	r3, [r6, #0]
 800a28a:	3337      	adds	r3, #55	; 0x37
 800a28c:	4313      	orrs	r3, r2
 800a28e:	81a3      	strh	r3, [r4, #12]
 800a290:	4240      	negs	r0, r0
 800a292:	bd70      	pop	{r4, r5, r6, pc}
 800a294:	4b29      	ldr	r3, [pc, #164]	; (800a33c <__swsetup_r+0xe8>)
 800a296:	429c      	cmp	r4, r3
 800a298:	d101      	bne.n	800a29e <__swsetup_r+0x4a>
 800a29a:	68ac      	ldr	r4, [r5, #8]
 800a29c:	e7eb      	b.n	800a276 <__swsetup_r+0x22>
 800a29e:	4b28      	ldr	r3, [pc, #160]	; (800a340 <__swsetup_r+0xec>)
 800a2a0:	429c      	cmp	r4, r3
 800a2a2:	d1e8      	bne.n	800a276 <__swsetup_r+0x22>
 800a2a4:	68ec      	ldr	r4, [r5, #12]
 800a2a6:	e7e6      	b.n	800a276 <__swsetup_r+0x22>
 800a2a8:	075b      	lsls	r3, r3, #29
 800a2aa:	d513      	bpl.n	800a2d4 <__swsetup_r+0x80>
 800a2ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ae:	2900      	cmp	r1, #0
 800a2b0:	d008      	beq.n	800a2c4 <__swsetup_r+0x70>
 800a2b2:	0023      	movs	r3, r4
 800a2b4:	3344      	adds	r3, #68	; 0x44
 800a2b6:	4299      	cmp	r1, r3
 800a2b8:	d002      	beq.n	800a2c0 <__swsetup_r+0x6c>
 800a2ba:	0030      	movs	r0, r6
 800a2bc:	f7ff fb5a 	bl	8009974 <_free_r>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	6363      	str	r3, [r4, #52]	; 0x34
 800a2c4:	2224      	movs	r2, #36	; 0x24
 800a2c6:	89a3      	ldrh	r3, [r4, #12]
 800a2c8:	4393      	bics	r3, r2
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	6063      	str	r3, [r4, #4]
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	6023      	str	r3, [r4, #0]
 800a2d4:	2308      	movs	r3, #8
 800a2d6:	89a2      	ldrh	r2, [r4, #12]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	81a3      	strh	r3, [r4, #12]
 800a2dc:	6923      	ldr	r3, [r4, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10b      	bne.n	800a2fa <__swsetup_r+0xa6>
 800a2e2:	21a0      	movs	r1, #160	; 0xa0
 800a2e4:	2280      	movs	r2, #128	; 0x80
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	0089      	lsls	r1, r1, #2
 800a2ea:	0092      	lsls	r2, r2, #2
 800a2ec:	400b      	ands	r3, r1
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d003      	beq.n	800a2fa <__swsetup_r+0xa6>
 800a2f2:	0021      	movs	r1, r4
 800a2f4:	0030      	movs	r0, r6
 800a2f6:	f000 fa27 	bl	800a748 <__smakebuf_r>
 800a2fa:	220c      	movs	r2, #12
 800a2fc:	5ea3      	ldrsh	r3, [r4, r2]
 800a2fe:	2001      	movs	r0, #1
 800a300:	001a      	movs	r2, r3
 800a302:	b299      	uxth	r1, r3
 800a304:	4002      	ands	r2, r0
 800a306:	4203      	tst	r3, r0
 800a308:	d00f      	beq.n	800a32a <__swsetup_r+0xd6>
 800a30a:	2200      	movs	r2, #0
 800a30c:	60a2      	str	r2, [r4, #8]
 800a30e:	6962      	ldr	r2, [r4, #20]
 800a310:	4252      	negs	r2, r2
 800a312:	61a2      	str	r2, [r4, #24]
 800a314:	2000      	movs	r0, #0
 800a316:	6922      	ldr	r2, [r4, #16]
 800a318:	4282      	cmp	r2, r0
 800a31a:	d1ba      	bne.n	800a292 <__swsetup_r+0x3e>
 800a31c:	060a      	lsls	r2, r1, #24
 800a31e:	d5b8      	bpl.n	800a292 <__swsetup_r+0x3e>
 800a320:	2240      	movs	r2, #64	; 0x40
 800a322:	4313      	orrs	r3, r2
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	3801      	subs	r0, #1
 800a328:	e7b3      	b.n	800a292 <__swsetup_r+0x3e>
 800a32a:	0788      	lsls	r0, r1, #30
 800a32c:	d400      	bmi.n	800a330 <__swsetup_r+0xdc>
 800a32e:	6962      	ldr	r2, [r4, #20]
 800a330:	60a2      	str	r2, [r4, #8]
 800a332:	e7ef      	b.n	800a314 <__swsetup_r+0xc0>
 800a334:	20000020 	.word	0x20000020
 800a338:	0800afe4 	.word	0x0800afe4
 800a33c:	0800b004 	.word	0x0800b004
 800a340:	0800afc4 	.word	0x0800afc4

0800a344 <abort>:
 800a344:	2006      	movs	r0, #6
 800a346:	b510      	push	{r4, lr}
 800a348:	f000 fa74 	bl	800a834 <raise>
 800a34c:	2001      	movs	r0, #1
 800a34e:	f7f8 fe85 	bl	800305c <_exit>
	...

0800a354 <__sflush_r>:
 800a354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a356:	898b      	ldrh	r3, [r1, #12]
 800a358:	0005      	movs	r5, r0
 800a35a:	000c      	movs	r4, r1
 800a35c:	071a      	lsls	r2, r3, #28
 800a35e:	d45f      	bmi.n	800a420 <__sflush_r+0xcc>
 800a360:	684a      	ldr	r2, [r1, #4]
 800a362:	2a00      	cmp	r2, #0
 800a364:	dc04      	bgt.n	800a370 <__sflush_r+0x1c>
 800a366:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a368:	2a00      	cmp	r2, #0
 800a36a:	dc01      	bgt.n	800a370 <__sflush_r+0x1c>
 800a36c:	2000      	movs	r0, #0
 800a36e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a370:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a372:	2f00      	cmp	r7, #0
 800a374:	d0fa      	beq.n	800a36c <__sflush_r+0x18>
 800a376:	2200      	movs	r2, #0
 800a378:	2180      	movs	r1, #128	; 0x80
 800a37a:	682e      	ldr	r6, [r5, #0]
 800a37c:	602a      	str	r2, [r5, #0]
 800a37e:	001a      	movs	r2, r3
 800a380:	0149      	lsls	r1, r1, #5
 800a382:	400a      	ands	r2, r1
 800a384:	420b      	tst	r3, r1
 800a386:	d034      	beq.n	800a3f2 <__sflush_r+0x9e>
 800a388:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	075b      	lsls	r3, r3, #29
 800a38e:	d506      	bpl.n	800a39e <__sflush_r+0x4a>
 800a390:	6863      	ldr	r3, [r4, #4]
 800a392:	1ac0      	subs	r0, r0, r3
 800a394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <__sflush_r+0x4a>
 800a39a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a39c:	1ac0      	subs	r0, r0, r3
 800a39e:	0002      	movs	r2, r0
 800a3a0:	6a21      	ldr	r1, [r4, #32]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	0028      	movs	r0, r5
 800a3a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a3a8:	47b8      	blx	r7
 800a3aa:	89a1      	ldrh	r1, [r4, #12]
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d106      	bne.n	800a3be <__sflush_r+0x6a>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	2b1d      	cmp	r3, #29
 800a3b4:	d831      	bhi.n	800a41a <__sflush_r+0xc6>
 800a3b6:	4a2c      	ldr	r2, [pc, #176]	; (800a468 <__sflush_r+0x114>)
 800a3b8:	40da      	lsrs	r2, r3
 800a3ba:	07d3      	lsls	r3, r2, #31
 800a3bc:	d52d      	bpl.n	800a41a <__sflush_r+0xc6>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	6063      	str	r3, [r4, #4]
 800a3c2:	6923      	ldr	r3, [r4, #16]
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	04cb      	lsls	r3, r1, #19
 800a3c8:	d505      	bpl.n	800a3d6 <__sflush_r+0x82>
 800a3ca:	1c43      	adds	r3, r0, #1
 800a3cc:	d102      	bne.n	800a3d4 <__sflush_r+0x80>
 800a3ce:	682b      	ldr	r3, [r5, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d100      	bne.n	800a3d6 <__sflush_r+0x82>
 800a3d4:	6560      	str	r0, [r4, #84]	; 0x54
 800a3d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d8:	602e      	str	r6, [r5, #0]
 800a3da:	2900      	cmp	r1, #0
 800a3dc:	d0c6      	beq.n	800a36c <__sflush_r+0x18>
 800a3de:	0023      	movs	r3, r4
 800a3e0:	3344      	adds	r3, #68	; 0x44
 800a3e2:	4299      	cmp	r1, r3
 800a3e4:	d002      	beq.n	800a3ec <__sflush_r+0x98>
 800a3e6:	0028      	movs	r0, r5
 800a3e8:	f7ff fac4 	bl	8009974 <_free_r>
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	6360      	str	r0, [r4, #52]	; 0x34
 800a3f0:	e7bd      	b.n	800a36e <__sflush_r+0x1a>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	0028      	movs	r0, r5
 800a3f6:	6a21      	ldr	r1, [r4, #32]
 800a3f8:	47b8      	blx	r7
 800a3fa:	1c43      	adds	r3, r0, #1
 800a3fc:	d1c5      	bne.n	800a38a <__sflush_r+0x36>
 800a3fe:	682b      	ldr	r3, [r5, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0c2      	beq.n	800a38a <__sflush_r+0x36>
 800a404:	2b1d      	cmp	r3, #29
 800a406:	d001      	beq.n	800a40c <__sflush_r+0xb8>
 800a408:	2b16      	cmp	r3, #22
 800a40a:	d101      	bne.n	800a410 <__sflush_r+0xbc>
 800a40c:	602e      	str	r6, [r5, #0]
 800a40e:	e7ad      	b.n	800a36c <__sflush_r+0x18>
 800a410:	2340      	movs	r3, #64	; 0x40
 800a412:	89a2      	ldrh	r2, [r4, #12]
 800a414:	4313      	orrs	r3, r2
 800a416:	81a3      	strh	r3, [r4, #12]
 800a418:	e7a9      	b.n	800a36e <__sflush_r+0x1a>
 800a41a:	2340      	movs	r3, #64	; 0x40
 800a41c:	430b      	orrs	r3, r1
 800a41e:	e7fa      	b.n	800a416 <__sflush_r+0xc2>
 800a420:	690f      	ldr	r7, [r1, #16]
 800a422:	2f00      	cmp	r7, #0
 800a424:	d0a2      	beq.n	800a36c <__sflush_r+0x18>
 800a426:	680a      	ldr	r2, [r1, #0]
 800a428:	600f      	str	r7, [r1, #0]
 800a42a:	1bd2      	subs	r2, r2, r7
 800a42c:	9201      	str	r2, [sp, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	079b      	lsls	r3, r3, #30
 800a432:	d100      	bne.n	800a436 <__sflush_r+0xe2>
 800a434:	694a      	ldr	r2, [r1, #20]
 800a436:	60a2      	str	r2, [r4, #8]
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dc00      	bgt.n	800a440 <__sflush_r+0xec>
 800a43e:	e795      	b.n	800a36c <__sflush_r+0x18>
 800a440:	003a      	movs	r2, r7
 800a442:	0028      	movs	r0, r5
 800a444:	9b01      	ldr	r3, [sp, #4]
 800a446:	6a21      	ldr	r1, [r4, #32]
 800a448:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a44a:	47b0      	blx	r6
 800a44c:	2800      	cmp	r0, #0
 800a44e:	dc06      	bgt.n	800a45e <__sflush_r+0x10a>
 800a450:	2340      	movs	r3, #64	; 0x40
 800a452:	2001      	movs	r0, #1
 800a454:	89a2      	ldrh	r2, [r4, #12]
 800a456:	4240      	negs	r0, r0
 800a458:	4313      	orrs	r3, r2
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	e787      	b.n	800a36e <__sflush_r+0x1a>
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	183f      	adds	r7, r7, r0
 800a462:	1a1b      	subs	r3, r3, r0
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	e7e7      	b.n	800a438 <__sflush_r+0xe4>
 800a468:	20400001 	.word	0x20400001

0800a46c <_fflush_r>:
 800a46c:	690b      	ldr	r3, [r1, #16]
 800a46e:	b570      	push	{r4, r5, r6, lr}
 800a470:	0005      	movs	r5, r0
 800a472:	000c      	movs	r4, r1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <_fflush_r+0x12>
 800a478:	2500      	movs	r5, #0
 800a47a:	0028      	movs	r0, r5
 800a47c:	bd70      	pop	{r4, r5, r6, pc}
 800a47e:	2800      	cmp	r0, #0
 800a480:	d004      	beq.n	800a48c <_fflush_r+0x20>
 800a482:	6983      	ldr	r3, [r0, #24]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <_fflush_r+0x20>
 800a488:	f000 f892 	bl	800a5b0 <__sinit>
 800a48c:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <_fflush_r+0x74>)
 800a48e:	429c      	cmp	r4, r3
 800a490:	d11b      	bne.n	800a4ca <_fflush_r+0x5e>
 800a492:	686c      	ldr	r4, [r5, #4]
 800a494:	220c      	movs	r2, #12
 800a496:	5ea3      	ldrsh	r3, [r4, r2]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d0ed      	beq.n	800a478 <_fflush_r+0xc>
 800a49c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a49e:	07d2      	lsls	r2, r2, #31
 800a4a0:	d404      	bmi.n	800a4ac <_fflush_r+0x40>
 800a4a2:	059b      	lsls	r3, r3, #22
 800a4a4:	d402      	bmi.n	800a4ac <_fflush_r+0x40>
 800a4a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4a8:	f000 f923 	bl	800a6f2 <__retarget_lock_acquire_recursive>
 800a4ac:	0028      	movs	r0, r5
 800a4ae:	0021      	movs	r1, r4
 800a4b0:	f7ff ff50 	bl	800a354 <__sflush_r>
 800a4b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4b6:	0005      	movs	r5, r0
 800a4b8:	07db      	lsls	r3, r3, #31
 800a4ba:	d4de      	bmi.n	800a47a <_fflush_r+0xe>
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	059b      	lsls	r3, r3, #22
 800a4c0:	d4db      	bmi.n	800a47a <_fflush_r+0xe>
 800a4c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4c4:	f000 f916 	bl	800a6f4 <__retarget_lock_release_recursive>
 800a4c8:	e7d7      	b.n	800a47a <_fflush_r+0xe>
 800a4ca:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <_fflush_r+0x78>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d101      	bne.n	800a4d4 <_fflush_r+0x68>
 800a4d0:	68ac      	ldr	r4, [r5, #8]
 800a4d2:	e7df      	b.n	800a494 <_fflush_r+0x28>
 800a4d4:	4b04      	ldr	r3, [pc, #16]	; (800a4e8 <_fflush_r+0x7c>)
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	d1dc      	bne.n	800a494 <_fflush_r+0x28>
 800a4da:	68ec      	ldr	r4, [r5, #12]
 800a4dc:	e7da      	b.n	800a494 <_fflush_r+0x28>
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	0800afe4 	.word	0x0800afe4
 800a4e4:	0800b004 	.word	0x0800b004
 800a4e8:	0800afc4 	.word	0x0800afc4

0800a4ec <std>:
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	0004      	movs	r4, r0
 800a4f2:	6003      	str	r3, [r0, #0]
 800a4f4:	6043      	str	r3, [r0, #4]
 800a4f6:	6083      	str	r3, [r0, #8]
 800a4f8:	8181      	strh	r1, [r0, #12]
 800a4fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a4fc:	0019      	movs	r1, r3
 800a4fe:	81c2      	strh	r2, [r0, #14]
 800a500:	6103      	str	r3, [r0, #16]
 800a502:	6143      	str	r3, [r0, #20]
 800a504:	6183      	str	r3, [r0, #24]
 800a506:	2208      	movs	r2, #8
 800a508:	305c      	adds	r0, #92	; 0x5c
 800a50a:	f7fb fd87 	bl	800601c <memset>
 800a50e:	4b05      	ldr	r3, [pc, #20]	; (800a524 <std+0x38>)
 800a510:	6263      	str	r3, [r4, #36]	; 0x24
 800a512:	4b05      	ldr	r3, [pc, #20]	; (800a528 <std+0x3c>)
 800a514:	6224      	str	r4, [r4, #32]
 800a516:	62a3      	str	r3, [r4, #40]	; 0x28
 800a518:	4b04      	ldr	r3, [pc, #16]	; (800a52c <std+0x40>)
 800a51a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a51c:	4b04      	ldr	r3, [pc, #16]	; (800a530 <std+0x44>)
 800a51e:	6323      	str	r3, [r4, #48]	; 0x30
 800a520:	bd10      	pop	{r4, pc}
 800a522:	46c0      	nop			; (mov r8, r8)
 800a524:	0800a875 	.word	0x0800a875
 800a528:	0800a89d 	.word	0x0800a89d
 800a52c:	0800a8d5 	.word	0x0800a8d5
 800a530:	0800a901 	.word	0x0800a901

0800a534 <_cleanup_r>:
 800a534:	b510      	push	{r4, lr}
 800a536:	4902      	ldr	r1, [pc, #8]	; (800a540 <_cleanup_r+0xc>)
 800a538:	f000 f8ba 	bl	800a6b0 <_fwalk_reent>
 800a53c:	bd10      	pop	{r4, pc}
 800a53e:	46c0      	nop			; (mov r8, r8)
 800a540:	0800a46d 	.word	0x0800a46d

0800a544 <__sfmoreglue>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	2568      	movs	r5, #104	; 0x68
 800a548:	1e4a      	subs	r2, r1, #1
 800a54a:	4355      	muls	r5, r2
 800a54c:	000e      	movs	r6, r1
 800a54e:	0029      	movs	r1, r5
 800a550:	3174      	adds	r1, #116	; 0x74
 800a552:	f7ff fa59 	bl	8009a08 <_malloc_r>
 800a556:	1e04      	subs	r4, r0, #0
 800a558:	d008      	beq.n	800a56c <__sfmoreglue+0x28>
 800a55a:	2100      	movs	r1, #0
 800a55c:	002a      	movs	r2, r5
 800a55e:	6001      	str	r1, [r0, #0]
 800a560:	6046      	str	r6, [r0, #4]
 800a562:	300c      	adds	r0, #12
 800a564:	60a0      	str	r0, [r4, #8]
 800a566:	3268      	adds	r2, #104	; 0x68
 800a568:	f7fb fd58 	bl	800601c <memset>
 800a56c:	0020      	movs	r0, r4
 800a56e:	bd70      	pop	{r4, r5, r6, pc}

0800a570 <__sfp_lock_acquire>:
 800a570:	b510      	push	{r4, lr}
 800a572:	4802      	ldr	r0, [pc, #8]	; (800a57c <__sfp_lock_acquire+0xc>)
 800a574:	f000 f8bd 	bl	800a6f2 <__retarget_lock_acquire_recursive>
 800a578:	bd10      	pop	{r4, pc}
 800a57a:	46c0      	nop			; (mov r8, r8)
 800a57c:	20000c0c 	.word	0x20000c0c

0800a580 <__sfp_lock_release>:
 800a580:	b510      	push	{r4, lr}
 800a582:	4802      	ldr	r0, [pc, #8]	; (800a58c <__sfp_lock_release+0xc>)
 800a584:	f000 f8b6 	bl	800a6f4 <__retarget_lock_release_recursive>
 800a588:	bd10      	pop	{r4, pc}
 800a58a:	46c0      	nop			; (mov r8, r8)
 800a58c:	20000c0c 	.word	0x20000c0c

0800a590 <__sinit_lock_acquire>:
 800a590:	b510      	push	{r4, lr}
 800a592:	4802      	ldr	r0, [pc, #8]	; (800a59c <__sinit_lock_acquire+0xc>)
 800a594:	f000 f8ad 	bl	800a6f2 <__retarget_lock_acquire_recursive>
 800a598:	bd10      	pop	{r4, pc}
 800a59a:	46c0      	nop			; (mov r8, r8)
 800a59c:	20000c07 	.word	0x20000c07

0800a5a0 <__sinit_lock_release>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	4802      	ldr	r0, [pc, #8]	; (800a5ac <__sinit_lock_release+0xc>)
 800a5a4:	f000 f8a6 	bl	800a6f4 <__retarget_lock_release_recursive>
 800a5a8:	bd10      	pop	{r4, pc}
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	20000c07 	.word	0x20000c07

0800a5b0 <__sinit>:
 800a5b0:	b513      	push	{r0, r1, r4, lr}
 800a5b2:	0004      	movs	r4, r0
 800a5b4:	f7ff ffec 	bl	800a590 <__sinit_lock_acquire>
 800a5b8:	69a3      	ldr	r3, [r4, #24]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <__sinit+0x14>
 800a5be:	f7ff ffef 	bl	800a5a0 <__sinit_lock_release>
 800a5c2:	bd13      	pop	{r0, r1, r4, pc}
 800a5c4:	64a3      	str	r3, [r4, #72]	; 0x48
 800a5c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a5c8:	6523      	str	r3, [r4, #80]	; 0x50
 800a5ca:	4b13      	ldr	r3, [pc, #76]	; (800a618 <__sinit+0x68>)
 800a5cc:	4a13      	ldr	r2, [pc, #76]	; (800a61c <__sinit+0x6c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	d101      	bne.n	800a5dc <__sinit+0x2c>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	61a3      	str	r3, [r4, #24]
 800a5dc:	0020      	movs	r0, r4
 800a5de:	f000 f81f 	bl	800a620 <__sfp>
 800a5e2:	6060      	str	r0, [r4, #4]
 800a5e4:	0020      	movs	r0, r4
 800a5e6:	f000 f81b 	bl	800a620 <__sfp>
 800a5ea:	60a0      	str	r0, [r4, #8]
 800a5ec:	0020      	movs	r0, r4
 800a5ee:	f000 f817 	bl	800a620 <__sfp>
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	2104      	movs	r1, #4
 800a5f6:	60e0      	str	r0, [r4, #12]
 800a5f8:	6860      	ldr	r0, [r4, #4]
 800a5fa:	f7ff ff77 	bl	800a4ec <std>
 800a5fe:	2201      	movs	r2, #1
 800a600:	2109      	movs	r1, #9
 800a602:	68a0      	ldr	r0, [r4, #8]
 800a604:	f7ff ff72 	bl	800a4ec <std>
 800a608:	2202      	movs	r2, #2
 800a60a:	2112      	movs	r1, #18
 800a60c:	68e0      	ldr	r0, [r4, #12]
 800a60e:	f7ff ff6d 	bl	800a4ec <std>
 800a612:	2301      	movs	r3, #1
 800a614:	61a3      	str	r3, [r4, #24]
 800a616:	e7d2      	b.n	800a5be <__sinit+0xe>
 800a618:	0800ab6c 	.word	0x0800ab6c
 800a61c:	0800a535 	.word	0x0800a535

0800a620 <__sfp>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	0007      	movs	r7, r0
 800a624:	f7ff ffa4 	bl	800a570 <__sfp_lock_acquire>
 800a628:	4b1f      	ldr	r3, [pc, #124]	; (800a6a8 <__sfp+0x88>)
 800a62a:	681e      	ldr	r6, [r3, #0]
 800a62c:	69b3      	ldr	r3, [r6, #24]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d102      	bne.n	800a638 <__sfp+0x18>
 800a632:	0030      	movs	r0, r6
 800a634:	f7ff ffbc 	bl	800a5b0 <__sinit>
 800a638:	3648      	adds	r6, #72	; 0x48
 800a63a:	68b4      	ldr	r4, [r6, #8]
 800a63c:	6873      	ldr	r3, [r6, #4]
 800a63e:	3b01      	subs	r3, #1
 800a640:	d504      	bpl.n	800a64c <__sfp+0x2c>
 800a642:	6833      	ldr	r3, [r6, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d022      	beq.n	800a68e <__sfp+0x6e>
 800a648:	6836      	ldr	r6, [r6, #0]
 800a64a:	e7f6      	b.n	800a63a <__sfp+0x1a>
 800a64c:	220c      	movs	r2, #12
 800a64e:	5ea5      	ldrsh	r5, [r4, r2]
 800a650:	2d00      	cmp	r5, #0
 800a652:	d11a      	bne.n	800a68a <__sfp+0x6a>
 800a654:	0020      	movs	r0, r4
 800a656:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <__sfp+0x8c>)
 800a658:	3058      	adds	r0, #88	; 0x58
 800a65a:	60e3      	str	r3, [r4, #12]
 800a65c:	6665      	str	r5, [r4, #100]	; 0x64
 800a65e:	f000 f847 	bl	800a6f0 <__retarget_lock_init_recursive>
 800a662:	f7ff ff8d 	bl	800a580 <__sfp_lock_release>
 800a666:	0020      	movs	r0, r4
 800a668:	2208      	movs	r2, #8
 800a66a:	0029      	movs	r1, r5
 800a66c:	6025      	str	r5, [r4, #0]
 800a66e:	60a5      	str	r5, [r4, #8]
 800a670:	6065      	str	r5, [r4, #4]
 800a672:	6125      	str	r5, [r4, #16]
 800a674:	6165      	str	r5, [r4, #20]
 800a676:	61a5      	str	r5, [r4, #24]
 800a678:	305c      	adds	r0, #92	; 0x5c
 800a67a:	f7fb fccf 	bl	800601c <memset>
 800a67e:	6365      	str	r5, [r4, #52]	; 0x34
 800a680:	63a5      	str	r5, [r4, #56]	; 0x38
 800a682:	64a5      	str	r5, [r4, #72]	; 0x48
 800a684:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a686:	0020      	movs	r0, r4
 800a688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68a:	3468      	adds	r4, #104	; 0x68
 800a68c:	e7d7      	b.n	800a63e <__sfp+0x1e>
 800a68e:	2104      	movs	r1, #4
 800a690:	0038      	movs	r0, r7
 800a692:	f7ff ff57 	bl	800a544 <__sfmoreglue>
 800a696:	1e04      	subs	r4, r0, #0
 800a698:	6030      	str	r0, [r6, #0]
 800a69a:	d1d5      	bne.n	800a648 <__sfp+0x28>
 800a69c:	f7ff ff70 	bl	800a580 <__sfp_lock_release>
 800a6a0:	230c      	movs	r3, #12
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	e7ef      	b.n	800a686 <__sfp+0x66>
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	0800ab6c 	.word	0x0800ab6c
 800a6ac:	ffff0001 	.word	0xffff0001

0800a6b0 <_fwalk_reent>:
 800a6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b2:	0004      	movs	r4, r0
 800a6b4:	0006      	movs	r6, r0
 800a6b6:	2700      	movs	r7, #0
 800a6b8:	9101      	str	r1, [sp, #4]
 800a6ba:	3448      	adds	r4, #72	; 0x48
 800a6bc:	6863      	ldr	r3, [r4, #4]
 800a6be:	68a5      	ldr	r5, [r4, #8]
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	d504      	bpl.n	800a6d4 <_fwalk_reent+0x24>
 800a6ca:	6824      	ldr	r4, [r4, #0]
 800a6cc:	2c00      	cmp	r4, #0
 800a6ce:	d1f5      	bne.n	800a6bc <_fwalk_reent+0xc>
 800a6d0:	0038      	movs	r0, r7
 800a6d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6d4:	89ab      	ldrh	r3, [r5, #12]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d908      	bls.n	800a6ec <_fwalk_reent+0x3c>
 800a6da:	220e      	movs	r2, #14
 800a6dc:	5eab      	ldrsh	r3, [r5, r2]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	d004      	beq.n	800a6ec <_fwalk_reent+0x3c>
 800a6e2:	0029      	movs	r1, r5
 800a6e4:	0030      	movs	r0, r6
 800a6e6:	9b01      	ldr	r3, [sp, #4]
 800a6e8:	4798      	blx	r3
 800a6ea:	4307      	orrs	r7, r0
 800a6ec:	3568      	adds	r5, #104	; 0x68
 800a6ee:	e7e8      	b.n	800a6c2 <_fwalk_reent+0x12>

0800a6f0 <__retarget_lock_init_recursive>:
 800a6f0:	4770      	bx	lr

0800a6f2 <__retarget_lock_acquire_recursive>:
 800a6f2:	4770      	bx	lr

0800a6f4 <__retarget_lock_release_recursive>:
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <__swhatbuf_r>:
 800a6f8:	b570      	push	{r4, r5, r6, lr}
 800a6fa:	000e      	movs	r6, r1
 800a6fc:	001d      	movs	r5, r3
 800a6fe:	230e      	movs	r3, #14
 800a700:	5ec9      	ldrsh	r1, [r1, r3]
 800a702:	0014      	movs	r4, r2
 800a704:	b096      	sub	sp, #88	; 0x58
 800a706:	2900      	cmp	r1, #0
 800a708:	da07      	bge.n	800a71a <__swhatbuf_r+0x22>
 800a70a:	2300      	movs	r3, #0
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	89b3      	ldrh	r3, [r6, #12]
 800a710:	061b      	lsls	r3, r3, #24
 800a712:	d411      	bmi.n	800a738 <__swhatbuf_r+0x40>
 800a714:	2380      	movs	r3, #128	; 0x80
 800a716:	00db      	lsls	r3, r3, #3
 800a718:	e00f      	b.n	800a73a <__swhatbuf_r+0x42>
 800a71a:	466a      	mov	r2, sp
 800a71c:	f000 f91c 	bl	800a958 <_fstat_r>
 800a720:	2800      	cmp	r0, #0
 800a722:	dbf2      	blt.n	800a70a <__swhatbuf_r+0x12>
 800a724:	23f0      	movs	r3, #240	; 0xf0
 800a726:	9901      	ldr	r1, [sp, #4]
 800a728:	021b      	lsls	r3, r3, #8
 800a72a:	4019      	ands	r1, r3
 800a72c:	4b05      	ldr	r3, [pc, #20]	; (800a744 <__swhatbuf_r+0x4c>)
 800a72e:	18c9      	adds	r1, r1, r3
 800a730:	424b      	negs	r3, r1
 800a732:	4159      	adcs	r1, r3
 800a734:	6029      	str	r1, [r5, #0]
 800a736:	e7ed      	b.n	800a714 <__swhatbuf_r+0x1c>
 800a738:	2340      	movs	r3, #64	; 0x40
 800a73a:	2000      	movs	r0, #0
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	b016      	add	sp, #88	; 0x58
 800a740:	bd70      	pop	{r4, r5, r6, pc}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	ffffe000 	.word	0xffffe000

0800a748 <__smakebuf_r>:
 800a748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a74a:	2602      	movs	r6, #2
 800a74c:	898b      	ldrh	r3, [r1, #12]
 800a74e:	0005      	movs	r5, r0
 800a750:	000c      	movs	r4, r1
 800a752:	4233      	tst	r3, r6
 800a754:	d006      	beq.n	800a764 <__smakebuf_r+0x1c>
 800a756:	0023      	movs	r3, r4
 800a758:	3347      	adds	r3, #71	; 0x47
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	6123      	str	r3, [r4, #16]
 800a75e:	2301      	movs	r3, #1
 800a760:	6163      	str	r3, [r4, #20]
 800a762:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a764:	466a      	mov	r2, sp
 800a766:	ab01      	add	r3, sp, #4
 800a768:	f7ff ffc6 	bl	800a6f8 <__swhatbuf_r>
 800a76c:	9900      	ldr	r1, [sp, #0]
 800a76e:	0007      	movs	r7, r0
 800a770:	0028      	movs	r0, r5
 800a772:	f7ff f949 	bl	8009a08 <_malloc_r>
 800a776:	2800      	cmp	r0, #0
 800a778:	d108      	bne.n	800a78c <__smakebuf_r+0x44>
 800a77a:	220c      	movs	r2, #12
 800a77c:	5ea3      	ldrsh	r3, [r4, r2]
 800a77e:	059a      	lsls	r2, r3, #22
 800a780:	d4ef      	bmi.n	800a762 <__smakebuf_r+0x1a>
 800a782:	2203      	movs	r2, #3
 800a784:	4393      	bics	r3, r2
 800a786:	431e      	orrs	r6, r3
 800a788:	81a6      	strh	r6, [r4, #12]
 800a78a:	e7e4      	b.n	800a756 <__smakebuf_r+0xe>
 800a78c:	4b0f      	ldr	r3, [pc, #60]	; (800a7cc <__smakebuf_r+0x84>)
 800a78e:	62ab      	str	r3, [r5, #40]	; 0x28
 800a790:	2380      	movs	r3, #128	; 0x80
 800a792:	89a2      	ldrh	r2, [r4, #12]
 800a794:	6020      	str	r0, [r4, #0]
 800a796:	4313      	orrs	r3, r2
 800a798:	81a3      	strh	r3, [r4, #12]
 800a79a:	9b00      	ldr	r3, [sp, #0]
 800a79c:	6120      	str	r0, [r4, #16]
 800a79e:	6163      	str	r3, [r4, #20]
 800a7a0:	9b01      	ldr	r3, [sp, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00d      	beq.n	800a7c2 <__smakebuf_r+0x7a>
 800a7a6:	0028      	movs	r0, r5
 800a7a8:	230e      	movs	r3, #14
 800a7aa:	5ee1      	ldrsh	r1, [r4, r3]
 800a7ac:	f000 f8e6 	bl	800a97c <_isatty_r>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d006      	beq.n	800a7c2 <__smakebuf_r+0x7a>
 800a7b4:	2203      	movs	r2, #3
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	4393      	bics	r3, r2
 800a7ba:	001a      	movs	r2, r3
 800a7bc:	2301      	movs	r3, #1
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	89a0      	ldrh	r0, [r4, #12]
 800a7c4:	4307      	orrs	r7, r0
 800a7c6:	81a7      	strh	r7, [r4, #12]
 800a7c8:	e7cb      	b.n	800a762 <__smakebuf_r+0x1a>
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	0800a535 	.word	0x0800a535

0800a7d0 <_malloc_usable_size_r>:
 800a7d0:	1f0b      	subs	r3, r1, #4
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	1f18      	subs	r0, r3, #4
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	da01      	bge.n	800a7de <_malloc_usable_size_r+0xe>
 800a7da:	580b      	ldr	r3, [r1, r0]
 800a7dc:	18c0      	adds	r0, r0, r3
 800a7de:	4770      	bx	lr

0800a7e0 <_raise_r>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	0004      	movs	r4, r0
 800a7e4:	000d      	movs	r5, r1
 800a7e6:	291f      	cmp	r1, #31
 800a7e8:	d904      	bls.n	800a7f4 <_raise_r+0x14>
 800a7ea:	2316      	movs	r3, #22
 800a7ec:	6003      	str	r3, [r0, #0]
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	4240      	negs	r0, r0
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d004      	beq.n	800a804 <_raise_r+0x24>
 800a7fa:	008a      	lsls	r2, r1, #2
 800a7fc:	189b      	adds	r3, r3, r2
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	2a00      	cmp	r2, #0
 800a802:	d108      	bne.n	800a816 <_raise_r+0x36>
 800a804:	0020      	movs	r0, r4
 800a806:	f000 f831 	bl	800a86c <_getpid_r>
 800a80a:	002a      	movs	r2, r5
 800a80c:	0001      	movs	r1, r0
 800a80e:	0020      	movs	r0, r4
 800a810:	f000 f81a 	bl	800a848 <_kill_r>
 800a814:	e7ed      	b.n	800a7f2 <_raise_r+0x12>
 800a816:	2000      	movs	r0, #0
 800a818:	2a01      	cmp	r2, #1
 800a81a:	d0ea      	beq.n	800a7f2 <_raise_r+0x12>
 800a81c:	1c51      	adds	r1, r2, #1
 800a81e:	d103      	bne.n	800a828 <_raise_r+0x48>
 800a820:	2316      	movs	r3, #22
 800a822:	3001      	adds	r0, #1
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	e7e4      	b.n	800a7f2 <_raise_r+0x12>
 800a828:	2400      	movs	r4, #0
 800a82a:	0028      	movs	r0, r5
 800a82c:	601c      	str	r4, [r3, #0]
 800a82e:	4790      	blx	r2
 800a830:	0020      	movs	r0, r4
 800a832:	e7de      	b.n	800a7f2 <_raise_r+0x12>

0800a834 <raise>:
 800a834:	b510      	push	{r4, lr}
 800a836:	4b03      	ldr	r3, [pc, #12]	; (800a844 <raise+0x10>)
 800a838:	0001      	movs	r1, r0
 800a83a:	6818      	ldr	r0, [r3, #0]
 800a83c:	f7ff ffd0 	bl	800a7e0 <_raise_r>
 800a840:	bd10      	pop	{r4, pc}
 800a842:	46c0      	nop			; (mov r8, r8)
 800a844:	20000020 	.word	0x20000020

0800a848 <_kill_r>:
 800a848:	2300      	movs	r3, #0
 800a84a:	b570      	push	{r4, r5, r6, lr}
 800a84c:	4d06      	ldr	r5, [pc, #24]	; (800a868 <_kill_r+0x20>)
 800a84e:	0004      	movs	r4, r0
 800a850:	0008      	movs	r0, r1
 800a852:	0011      	movs	r1, r2
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	f7f8 fbf1 	bl	800303c <_kill>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	d103      	bne.n	800a866 <_kill_r+0x1e>
 800a85e:	682b      	ldr	r3, [r5, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d000      	beq.n	800a866 <_kill_r+0x1e>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	bd70      	pop	{r4, r5, r6, pc}
 800a868:	20000c00 	.word	0x20000c00

0800a86c <_getpid_r>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	f7f8 fbdf 	bl	8003030 <_getpid>
 800a872:	bd10      	pop	{r4, pc}

0800a874 <__sread>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	000c      	movs	r4, r1
 800a878:	250e      	movs	r5, #14
 800a87a:	5f49      	ldrsh	r1, [r1, r5]
 800a87c:	f000 f8a4 	bl	800a9c8 <_read_r>
 800a880:	2800      	cmp	r0, #0
 800a882:	db03      	blt.n	800a88c <__sread+0x18>
 800a884:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a886:	181b      	adds	r3, r3, r0
 800a888:	6563      	str	r3, [r4, #84]	; 0x54
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	4a02      	ldr	r2, [pc, #8]	; (800a898 <__sread+0x24>)
 800a890:	4013      	ands	r3, r2
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	e7f9      	b.n	800a88a <__sread+0x16>
 800a896:	46c0      	nop			; (mov r8, r8)
 800a898:	ffffefff 	.word	0xffffefff

0800a89c <__swrite>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	001f      	movs	r7, r3
 800a8a0:	898b      	ldrh	r3, [r1, #12]
 800a8a2:	0005      	movs	r5, r0
 800a8a4:	000c      	movs	r4, r1
 800a8a6:	0016      	movs	r6, r2
 800a8a8:	05db      	lsls	r3, r3, #23
 800a8aa:	d505      	bpl.n	800a8b8 <__swrite+0x1c>
 800a8ac:	230e      	movs	r3, #14
 800a8ae:	5ec9      	ldrsh	r1, [r1, r3]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	f000 f874 	bl	800a9a0 <_lseek_r>
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	4a05      	ldr	r2, [pc, #20]	; (800a8d0 <__swrite+0x34>)
 800a8bc:	0028      	movs	r0, r5
 800a8be:	4013      	ands	r3, r2
 800a8c0:	81a3      	strh	r3, [r4, #12]
 800a8c2:	0032      	movs	r2, r6
 800a8c4:	230e      	movs	r3, #14
 800a8c6:	5ee1      	ldrsh	r1, [r4, r3]
 800a8c8:	003b      	movs	r3, r7
 800a8ca:	f000 f81f 	bl	800a90c <_write_r>
 800a8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d0:	ffffefff 	.word	0xffffefff

0800a8d4 <__sseek>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	000c      	movs	r4, r1
 800a8d8:	250e      	movs	r5, #14
 800a8da:	5f49      	ldrsh	r1, [r1, r5]
 800a8dc:	f000 f860 	bl	800a9a0 <_lseek_r>
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	1c42      	adds	r2, r0, #1
 800a8e4:	d103      	bne.n	800a8ee <__sseek+0x1a>
 800a8e6:	4a05      	ldr	r2, [pc, #20]	; (800a8fc <__sseek+0x28>)
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	2280      	movs	r2, #128	; 0x80
 800a8f0:	0152      	lsls	r2, r2, #5
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	81a3      	strh	r3, [r4, #12]
 800a8f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a8f8:	e7f8      	b.n	800a8ec <__sseek+0x18>
 800a8fa:	46c0      	nop			; (mov r8, r8)
 800a8fc:	ffffefff 	.word	0xffffefff

0800a900 <__sclose>:
 800a900:	b510      	push	{r4, lr}
 800a902:	230e      	movs	r3, #14
 800a904:	5ec9      	ldrsh	r1, [r1, r3]
 800a906:	f000 f815 	bl	800a934 <_close_r>
 800a90a:	bd10      	pop	{r4, pc}

0800a90c <_write_r>:
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	0004      	movs	r4, r0
 800a910:	0008      	movs	r0, r1
 800a912:	0011      	movs	r1, r2
 800a914:	001a      	movs	r2, r3
 800a916:	2300      	movs	r3, #0
 800a918:	4d05      	ldr	r5, [pc, #20]	; (800a930 <_write_r+0x24>)
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	f7f8 fbc7 	bl	80030ae <_write>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	d103      	bne.n	800a92c <_write_r+0x20>
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d000      	beq.n	800a92c <_write_r+0x20>
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	bd70      	pop	{r4, r5, r6, pc}
 800a92e:	46c0      	nop			; (mov r8, r8)
 800a930:	20000c00 	.word	0x20000c00

0800a934 <_close_r>:
 800a934:	2300      	movs	r3, #0
 800a936:	b570      	push	{r4, r5, r6, lr}
 800a938:	4d06      	ldr	r5, [pc, #24]	; (800a954 <_close_r+0x20>)
 800a93a:	0004      	movs	r4, r0
 800a93c:	0008      	movs	r0, r1
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	f7f8 fbd1 	bl	80030e6 <_close>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d103      	bne.n	800a950 <_close_r+0x1c>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d000      	beq.n	800a950 <_close_r+0x1c>
 800a94e:	6023      	str	r3, [r4, #0]
 800a950:	bd70      	pop	{r4, r5, r6, pc}
 800a952:	46c0      	nop			; (mov r8, r8)
 800a954:	20000c00 	.word	0x20000c00

0800a958 <_fstat_r>:
 800a958:	2300      	movs	r3, #0
 800a95a:	b570      	push	{r4, r5, r6, lr}
 800a95c:	4d06      	ldr	r5, [pc, #24]	; (800a978 <_fstat_r+0x20>)
 800a95e:	0004      	movs	r4, r0
 800a960:	0008      	movs	r0, r1
 800a962:	0011      	movs	r1, r2
 800a964:	602b      	str	r3, [r5, #0]
 800a966:	f7f8 fbc8 	bl	80030fa <_fstat>
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	d103      	bne.n	800a976 <_fstat_r+0x1e>
 800a96e:	682b      	ldr	r3, [r5, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d000      	beq.n	800a976 <_fstat_r+0x1e>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	20000c00 	.word	0x20000c00

0800a97c <_isatty_r>:
 800a97c:	2300      	movs	r3, #0
 800a97e:	b570      	push	{r4, r5, r6, lr}
 800a980:	4d06      	ldr	r5, [pc, #24]	; (800a99c <_isatty_r+0x20>)
 800a982:	0004      	movs	r4, r0
 800a984:	0008      	movs	r0, r1
 800a986:	602b      	str	r3, [r5, #0]
 800a988:	f7f8 fbc5 	bl	8003116 <_isatty>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d103      	bne.n	800a998 <_isatty_r+0x1c>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d000      	beq.n	800a998 <_isatty_r+0x1c>
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	bd70      	pop	{r4, r5, r6, pc}
 800a99a:	46c0      	nop			; (mov r8, r8)
 800a99c:	20000c00 	.word	0x20000c00

0800a9a0 <_lseek_r>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	0004      	movs	r4, r0
 800a9a4:	0008      	movs	r0, r1
 800a9a6:	0011      	movs	r1, r2
 800a9a8:	001a      	movs	r2, r3
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4d05      	ldr	r5, [pc, #20]	; (800a9c4 <_lseek_r+0x24>)
 800a9ae:	602b      	str	r3, [r5, #0]
 800a9b0:	f7f8 fbba 	bl	8003128 <_lseek>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d103      	bne.n	800a9c0 <_lseek_r+0x20>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d000      	beq.n	800a9c0 <_lseek_r+0x20>
 800a9be:	6023      	str	r3, [r4, #0]
 800a9c0:	bd70      	pop	{r4, r5, r6, pc}
 800a9c2:	46c0      	nop			; (mov r8, r8)
 800a9c4:	20000c00 	.word	0x20000c00

0800a9c8 <_read_r>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	0004      	movs	r4, r0
 800a9cc:	0008      	movs	r0, r1
 800a9ce:	0011      	movs	r1, r2
 800a9d0:	001a      	movs	r2, r3
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	4d05      	ldr	r5, [pc, #20]	; (800a9ec <_read_r+0x24>)
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	f7f8 fb4c 	bl	8003074 <_read>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d103      	bne.n	800a9e8 <_read_r+0x20>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d000      	beq.n	800a9e8 <_read_r+0x20>
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	46c0      	nop			; (mov r8, r8)
 800a9ec:	20000c00 	.word	0x20000c00

0800a9f0 <_init>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	46c0      	nop			; (mov r8, r8)
 800a9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f6:	bc08      	pop	{r3}
 800a9f8:	469e      	mov	lr, r3
 800a9fa:	4770      	bx	lr

0800a9fc <_fini>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	46c0      	nop			; (mov r8, r8)
 800aa00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa02:	bc08      	pop	{r3}
 800aa04:	469e      	mov	lr, r3
 800aa06:	4770      	bx	lr
