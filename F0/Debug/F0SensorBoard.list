
F0SensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a738  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800a7f8  0800a7f8  0001a7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ada4  0800ada4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ada4  0800ada4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ada4  0800ada4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ada4  0800ada4  0001ada4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ada8  0800ada8  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800adac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  200001f4  0800afa0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c14  0800afa0  00020c14  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012120  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd8  00000000  00000000  0003233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00035018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  000360a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012db8  00000000  00000000  00036fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001499b  00000000  00000000  00049d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bd6a  00000000  00000000  0005e733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca49d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f98  00000000  00000000  000ca4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a7e0 	.word	0x0800a7e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	0800a7e0 	.word	0x0800a7e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ffa3 	bl	8001388 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 feed 	bl	800122c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff95 	bl	8001388 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff8b 	bl	8001388 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff0f 	bl	80012a4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff05 	bl	80012a4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdef 	bl	80020a0 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa38 	bl	8001940 <__aeabi_dsub>
 80004d0:	f001 fde6 	bl	80020a0 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff9d 	bl	8001468 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fe1a 	bl	800216c <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff94 	bl	8001468 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9fa 	bl	8001940 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fdd3 	bl	800210c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff7d 	bl	8001468 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdfa 	bl	800216c <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	46d6      	mov	lr, sl
 800058e:	4646      	mov	r6, r8
 8000590:	000d      	movs	r5, r1
 8000592:	0001      	movs	r1, r0
 8000594:	0018      	movs	r0, r3
 8000596:	b5c0      	push	{r6, r7, lr}
 8000598:	0017      	movs	r7, r2
 800059a:	032b      	lsls	r3, r5, #12
 800059c:	0a5a      	lsrs	r2, r3, #9
 800059e:	0f4b      	lsrs	r3, r1, #29
 80005a0:	4313      	orrs	r3, r2
 80005a2:	00ca      	lsls	r2, r1, #3
 80005a4:	4691      	mov	r9, r2
 80005a6:	0302      	lsls	r2, r0, #12
 80005a8:	006e      	lsls	r6, r5, #1
 80005aa:	0041      	lsls	r1, r0, #1
 80005ac:	0a52      	lsrs	r2, r2, #9
 80005ae:	0fec      	lsrs	r4, r5, #31
 80005b0:	0f7d      	lsrs	r5, r7, #29
 80005b2:	4315      	orrs	r5, r2
 80005b4:	0d76      	lsrs	r6, r6, #21
 80005b6:	0d49      	lsrs	r1, r1, #21
 80005b8:	0fc0      	lsrs	r0, r0, #31
 80005ba:	4682      	mov	sl, r0
 80005bc:	46ac      	mov	ip, r5
 80005be:	00ff      	lsls	r7, r7, #3
 80005c0:	1a72      	subs	r2, r6, r1
 80005c2:	4284      	cmp	r4, r0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_dadd+0x40>
 80005c6:	e098      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	dc00      	bgt.n	80005ce <__aeabi_dadd+0x46>
 80005cc:	e081      	b.n	80006d2 <__aeabi_dadd+0x14a>
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d100      	bne.n	80005d4 <__aeabi_dadd+0x4c>
 80005d2:	e0b6      	b.n	8000742 <__aeabi_dadd+0x1ba>
 80005d4:	49c9      	ldr	r1, [pc, #804]	; (80008fc <__aeabi_dadd+0x374>)
 80005d6:	428e      	cmp	r6, r1
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x54>
 80005da:	e172      	b.n	80008c2 <__aeabi_dadd+0x33a>
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0028      	movs	r0, r5
 80005e0:	0409      	lsls	r1, r1, #16
 80005e2:	4308      	orrs	r0, r1
 80005e4:	4684      	mov	ip, r0
 80005e6:	2a38      	cmp	r2, #56	; 0x38
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dadd+0x64>
 80005ea:	e15e      	b.n	80008aa <__aeabi_dadd+0x322>
 80005ec:	2a1f      	cmp	r2, #31
 80005ee:	dd00      	ble.n	80005f2 <__aeabi_dadd+0x6a>
 80005f0:	e1ee      	b.n	80009d0 <__aeabi_dadd+0x448>
 80005f2:	2020      	movs	r0, #32
 80005f4:	0039      	movs	r1, r7
 80005f6:	4665      	mov	r5, ip
 80005f8:	1a80      	subs	r0, r0, r2
 80005fa:	4087      	lsls	r7, r0
 80005fc:	40d1      	lsrs	r1, r2
 80005fe:	4085      	lsls	r5, r0
 8000600:	430d      	orrs	r5, r1
 8000602:	0039      	movs	r1, r7
 8000604:	1e4f      	subs	r7, r1, #1
 8000606:	41b9      	sbcs	r1, r7
 8000608:	4667      	mov	r7, ip
 800060a:	40d7      	lsrs	r7, r2
 800060c:	4329      	orrs	r1, r5
 800060e:	1bdb      	subs	r3, r3, r7
 8000610:	464a      	mov	r2, r9
 8000612:	1a55      	subs	r5, r2, r1
 8000614:	45a9      	cmp	r9, r5
 8000616:	4189      	sbcs	r1, r1
 8000618:	4249      	negs	r1, r1
 800061a:	1a5b      	subs	r3, r3, r1
 800061c:	4698      	mov	r8, r3
 800061e:	4643      	mov	r3, r8
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0x9e>
 8000624:	e0cc      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000626:	4643      	mov	r3, r8
 8000628:	025b      	lsls	r3, r3, #9
 800062a:	0a5b      	lsrs	r3, r3, #9
 800062c:	4698      	mov	r8, r3
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0xae>
 8000634:	e12c      	b.n	8000890 <__aeabi_dadd+0x308>
 8000636:	4640      	mov	r0, r8
 8000638:	f001 fe46 	bl	80022c8 <__clzsi2>
 800063c:	0001      	movs	r1, r0
 800063e:	3908      	subs	r1, #8
 8000640:	2220      	movs	r2, #32
 8000642:	0028      	movs	r0, r5
 8000644:	4643      	mov	r3, r8
 8000646:	1a52      	subs	r2, r2, r1
 8000648:	408b      	lsls	r3, r1
 800064a:	40d0      	lsrs	r0, r2
 800064c:	408d      	lsls	r5, r1
 800064e:	4303      	orrs	r3, r0
 8000650:	428e      	cmp	r6, r1
 8000652:	dd00      	ble.n	8000656 <__aeabi_dadd+0xce>
 8000654:	e117      	b.n	8000886 <__aeabi_dadd+0x2fe>
 8000656:	1b8e      	subs	r6, r1, r6
 8000658:	1c72      	adds	r2, r6, #1
 800065a:	2a1f      	cmp	r2, #31
 800065c:	dd00      	ble.n	8000660 <__aeabi_dadd+0xd8>
 800065e:	e1a7      	b.n	80009b0 <__aeabi_dadd+0x428>
 8000660:	2120      	movs	r1, #32
 8000662:	0018      	movs	r0, r3
 8000664:	002e      	movs	r6, r5
 8000666:	1a89      	subs	r1, r1, r2
 8000668:	408d      	lsls	r5, r1
 800066a:	4088      	lsls	r0, r1
 800066c:	40d6      	lsrs	r6, r2
 800066e:	40d3      	lsrs	r3, r2
 8000670:	1e69      	subs	r1, r5, #1
 8000672:	418d      	sbcs	r5, r1
 8000674:	4330      	orrs	r0, r6
 8000676:	4698      	mov	r8, r3
 8000678:	2600      	movs	r6, #0
 800067a:	4305      	orrs	r5, r0
 800067c:	076b      	lsls	r3, r5, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	402b      	ands	r3, r5
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d2b      	adds	r3, r5, #4
 800068a:	42ab      	cmp	r3, r5
 800068c:	41ad      	sbcs	r5, r5
 800068e:	426d      	negs	r5, r5
 8000690:	44a8      	add	r8, r5
 8000692:	001d      	movs	r5, r3
 8000694:	4643      	mov	r3, r8
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	d400      	bmi.n	800069c <__aeabi_dadd+0x114>
 800069a:	e094      	b.n	80007c6 <__aeabi_dadd+0x23e>
 800069c:	4b97      	ldr	r3, [pc, #604]	; (80008fc <__aeabi_dadd+0x374>)
 800069e:	1c72      	adds	r2, r6, #1
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x11e>
 80006a4:	e09d      	b.n	80007e2 <__aeabi_dadd+0x25a>
 80006a6:	4641      	mov	r1, r8
 80006a8:	4b95      	ldr	r3, [pc, #596]	; (8000900 <__aeabi_dadd+0x378>)
 80006aa:	08ed      	lsrs	r5, r5, #3
 80006ac:	4019      	ands	r1, r3
 80006ae:	000b      	movs	r3, r1
 80006b0:	0552      	lsls	r2, r2, #21
 80006b2:	0749      	lsls	r1, r1, #29
 80006b4:	025b      	lsls	r3, r3, #9
 80006b6:	4329      	orrs	r1, r5
 80006b8:	0b1b      	lsrs	r3, r3, #12
 80006ba:	0d52      	lsrs	r2, r2, #21
 80006bc:	0512      	lsls	r2, r2, #20
 80006be:	4313      	orrs	r3, r2
 80006c0:	07e4      	lsls	r4, r4, #31
 80006c2:	4323      	orrs	r3, r4
 80006c4:	0008      	movs	r0, r1
 80006c6:	0019      	movs	r1, r3
 80006c8:	bce0      	pop	{r5, r6, r7}
 80006ca:	46ba      	mov	sl, r7
 80006cc:	46b1      	mov	r9, r6
 80006ce:	46a8      	mov	r8, r5
 80006d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d043      	beq.n	800075e <__aeabi_dadd+0x1d6>
 80006d6:	1b8a      	subs	r2, r1, r6
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d000      	beq.n	80006de <__aeabi_dadd+0x156>
 80006dc:	e12a      	b.n	8000934 <__aeabi_dadd+0x3ac>
 80006de:	464c      	mov	r4, r9
 80006e0:	431c      	orrs	r4, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x15e>
 80006e4:	e1d1      	b.n	8000a8a <__aeabi_dadd+0x502>
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e21f      	b.n	8000b2e <__aeabi_dadd+0x5a6>
 80006ee:	4d83      	ldr	r5, [pc, #524]	; (80008fc <__aeabi_dadd+0x374>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e272      	b.n	8000bdc <__aeabi_dadd+0x654>
 80006f6:	0022      	movs	r2, r4
 80006f8:	e123      	b.n	8000942 <__aeabi_dadd+0x3ba>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	dc00      	bgt.n	8000700 <__aeabi_dadd+0x178>
 80006fe:	e098      	b.n	8000832 <__aeabi_dadd+0x2aa>
 8000700:	2900      	cmp	r1, #0
 8000702:	d042      	beq.n	800078a <__aeabi_dadd+0x202>
 8000704:	497d      	ldr	r1, [pc, #500]	; (80008fc <__aeabi_dadd+0x374>)
 8000706:	428e      	cmp	r6, r1
 8000708:	d100      	bne.n	800070c <__aeabi_dadd+0x184>
 800070a:	e0da      	b.n	80008c2 <__aeabi_dadd+0x33a>
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0028      	movs	r0, r5
 8000710:	0409      	lsls	r1, r1, #16
 8000712:	4308      	orrs	r0, r1
 8000714:	4684      	mov	ip, r0
 8000716:	2a38      	cmp	r2, #56	; 0x38
 8000718:	dd00      	ble.n	800071c <__aeabi_dadd+0x194>
 800071a:	e129      	b.n	8000970 <__aeabi_dadd+0x3e8>
 800071c:	2a1f      	cmp	r2, #31
 800071e:	dc00      	bgt.n	8000722 <__aeabi_dadd+0x19a>
 8000720:	e187      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000722:	0011      	movs	r1, r2
 8000724:	4665      	mov	r5, ip
 8000726:	3920      	subs	r1, #32
 8000728:	40cd      	lsrs	r5, r1
 800072a:	2a20      	cmp	r2, #32
 800072c:	d004      	beq.n	8000738 <__aeabi_dadd+0x1b0>
 800072e:	2040      	movs	r0, #64	; 0x40
 8000730:	4661      	mov	r1, ip
 8000732:	1a82      	subs	r2, r0, r2
 8000734:	4091      	lsls	r1, r2
 8000736:	430f      	orrs	r7, r1
 8000738:	0039      	movs	r1, r7
 800073a:	1e4f      	subs	r7, r1, #1
 800073c:	41b9      	sbcs	r1, r7
 800073e:	430d      	orrs	r5, r1
 8000740:	e11b      	b.n	800097a <__aeabi_dadd+0x3f2>
 8000742:	0029      	movs	r1, r5
 8000744:	4339      	orrs	r1, r7
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x1c2>
 8000748:	e0b5      	b.n	80008b6 <__aeabi_dadd+0x32e>
 800074a:	1e51      	subs	r1, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x1ca>
 8000750:	e1ab      	b.n	8000aaa <__aeabi_dadd+0x522>
 8000752:	486a      	ldr	r0, [pc, #424]	; (80008fc <__aeabi_dadd+0x374>)
 8000754:	4282      	cmp	r2, r0
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x1d2>
 8000758:	e1b2      	b.n	8000ac0 <__aeabi_dadd+0x538>
 800075a:	000a      	movs	r2, r1
 800075c:	e743      	b.n	80005e6 <__aeabi_dadd+0x5e>
 800075e:	4969      	ldr	r1, [pc, #420]	; (8000904 <__aeabi_dadd+0x37c>)
 8000760:	1c75      	adds	r5, r6, #1
 8000762:	420d      	tst	r5, r1
 8000764:	d000      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 8000766:	e0cf      	b.n	8000908 <__aeabi_dadd+0x380>
 8000768:	2e00      	cmp	r6, #0
 800076a:	d000      	beq.n	800076e <__aeabi_dadd+0x1e6>
 800076c:	e193      	b.n	8000a96 <__aeabi_dadd+0x50e>
 800076e:	4649      	mov	r1, r9
 8000770:	4319      	orrs	r1, r3
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x1ee>
 8000774:	e1d1      	b.n	8000b1a <__aeabi_dadd+0x592>
 8000776:	4661      	mov	r1, ip
 8000778:	4339      	orrs	r1, r7
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x1f6>
 800077c:	e1e3      	b.n	8000b46 <__aeabi_dadd+0x5be>
 800077e:	4649      	mov	r1, r9
 8000780:	0758      	lsls	r0, r3, #29
 8000782:	08c9      	lsrs	r1, r1, #3
 8000784:	4301      	orrs	r1, r0
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	e026      	b.n	80007d8 <__aeabi_dadd+0x250>
 800078a:	0029      	movs	r1, r5
 800078c:	4339      	orrs	r1, r7
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x20a>
 8000790:	e091      	b.n	80008b6 <__aeabi_dadd+0x32e>
 8000792:	1e51      	subs	r1, r2, #1
 8000794:	2a01      	cmp	r2, #1
 8000796:	d005      	beq.n	80007a4 <__aeabi_dadd+0x21c>
 8000798:	4858      	ldr	r0, [pc, #352]	; (80008fc <__aeabi_dadd+0x374>)
 800079a:	4282      	cmp	r2, r0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x218>
 800079e:	e18f      	b.n	8000ac0 <__aeabi_dadd+0x538>
 80007a0:	000a      	movs	r2, r1
 80007a2:	e7b8      	b.n	8000716 <__aeabi_dadd+0x18e>
 80007a4:	003d      	movs	r5, r7
 80007a6:	444d      	add	r5, r9
 80007a8:	454d      	cmp	r5, r9
 80007aa:	4189      	sbcs	r1, r1
 80007ac:	4463      	add	r3, ip
 80007ae:	4698      	mov	r8, r3
 80007b0:	4249      	negs	r1, r1
 80007b2:	4488      	add	r8, r1
 80007b4:	4643      	mov	r3, r8
 80007b6:	2602      	movs	r6, #2
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	d500      	bpl.n	80007be <__aeabi_dadd+0x236>
 80007bc:	e0eb      	b.n	8000996 <__aeabi_dadd+0x40e>
 80007be:	3e01      	subs	r6, #1
 80007c0:	076b      	lsls	r3, r5, #29
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x23e>
 80007c4:	e75c      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007c6:	4643      	mov	r3, r8
 80007c8:	08e9      	lsrs	r1, r5, #3
 80007ca:	075a      	lsls	r2, r3, #29
 80007cc:	4311      	orrs	r1, r2
 80007ce:	0032      	movs	r2, r6
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	484a      	ldr	r0, [pc, #296]	; (80008fc <__aeabi_dadd+0x374>)
 80007d4:	4282      	cmp	r2, r0
 80007d6:	d021      	beq.n	800081c <__aeabi_dadd+0x294>
 80007d8:	031b      	lsls	r3, r3, #12
 80007da:	0552      	lsls	r2, r2, #21
 80007dc:	0b1b      	lsrs	r3, r3, #12
 80007de:	0d52      	lsrs	r2, r2, #21
 80007e0:	e76c      	b.n	80006bc <__aeabi_dadd+0x134>
 80007e2:	2300      	movs	r3, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	e769      	b.n	80006bc <__aeabi_dadd+0x134>
 80007e8:	002a      	movs	r2, r5
 80007ea:	433a      	orrs	r2, r7
 80007ec:	d069      	beq.n	80008c2 <__aeabi_dadd+0x33a>
 80007ee:	464a      	mov	r2, r9
 80007f0:	0758      	lsls	r0, r3, #29
 80007f2:	08d1      	lsrs	r1, r2, #3
 80007f4:	08da      	lsrs	r2, r3, #3
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	031b      	lsls	r3, r3, #12
 80007fa:	4308      	orrs	r0, r1
 80007fc:	421a      	tst	r2, r3
 80007fe:	d007      	beq.n	8000810 <__aeabi_dadd+0x288>
 8000800:	0029      	movs	r1, r5
 8000802:	08ed      	lsrs	r5, r5, #3
 8000804:	421d      	tst	r5, r3
 8000806:	d103      	bne.n	8000810 <__aeabi_dadd+0x288>
 8000808:	002a      	movs	r2, r5
 800080a:	08ff      	lsrs	r7, r7, #3
 800080c:	0748      	lsls	r0, r1, #29
 800080e:	4338      	orrs	r0, r7
 8000810:	0f43      	lsrs	r3, r0, #29
 8000812:	00c1      	lsls	r1, r0, #3
 8000814:	075b      	lsls	r3, r3, #29
 8000816:	08c9      	lsrs	r1, r1, #3
 8000818:	4319      	orrs	r1, r3
 800081a:	0013      	movs	r3, r2
 800081c:	000a      	movs	r2, r1
 800081e:	431a      	orrs	r2, r3
 8000820:	d100      	bne.n	8000824 <__aeabi_dadd+0x29c>
 8000822:	e213      	b.n	8000c4c <__aeabi_dadd+0x6c4>
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0312      	lsls	r2, r2, #12
 8000828:	4313      	orrs	r3, r2
 800082a:	031b      	lsls	r3, r3, #12
 800082c:	4a33      	ldr	r2, [pc, #204]	; (80008fc <__aeabi_dadd+0x374>)
 800082e:	0b1b      	lsrs	r3, r3, #12
 8000830:	e744      	b.n	80006bc <__aeabi_dadd+0x134>
 8000832:	2a00      	cmp	r2, #0
 8000834:	d04b      	beq.n	80008ce <__aeabi_dadd+0x346>
 8000836:	1b8a      	subs	r2, r1, r6
 8000838:	2e00      	cmp	r6, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x2b6>
 800083c:	e0e7      	b.n	8000a0e <__aeabi_dadd+0x486>
 800083e:	482f      	ldr	r0, [pc, #188]	; (80008fc <__aeabi_dadd+0x374>)
 8000840:	4281      	cmp	r1, r0
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x2be>
 8000844:	e195      	b.n	8000b72 <__aeabi_dadd+0x5ea>
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	0400      	lsls	r0, r0, #16
 800084a:	4303      	orrs	r3, r0
 800084c:	2a38      	cmp	r2, #56	; 0x38
 800084e:	dd00      	ble.n	8000852 <__aeabi_dadd+0x2ca>
 8000850:	e143      	b.n	8000ada <__aeabi_dadd+0x552>
 8000852:	2a1f      	cmp	r2, #31
 8000854:	dd00      	ble.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e1db      	b.n	8000c10 <__aeabi_dadd+0x688>
 8000858:	2020      	movs	r0, #32
 800085a:	001d      	movs	r5, r3
 800085c:	464e      	mov	r6, r9
 800085e:	1a80      	subs	r0, r0, r2
 8000860:	4085      	lsls	r5, r0
 8000862:	40d6      	lsrs	r6, r2
 8000864:	4335      	orrs	r5, r6
 8000866:	464e      	mov	r6, r9
 8000868:	4086      	lsls	r6, r0
 800086a:	0030      	movs	r0, r6
 800086c:	40d3      	lsrs	r3, r2
 800086e:	1e46      	subs	r6, r0, #1
 8000870:	41b0      	sbcs	r0, r6
 8000872:	449c      	add	ip, r3
 8000874:	4305      	orrs	r5, r0
 8000876:	19ed      	adds	r5, r5, r7
 8000878:	42bd      	cmp	r5, r7
 800087a:	419b      	sbcs	r3, r3
 800087c:	425b      	negs	r3, r3
 800087e:	4463      	add	r3, ip
 8000880:	4698      	mov	r8, r3
 8000882:	000e      	movs	r6, r1
 8000884:	e07f      	b.n	8000986 <__aeabi_dadd+0x3fe>
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <__aeabi_dadd+0x378>)
 8000888:	1a76      	subs	r6, r6, r1
 800088a:	4013      	ands	r3, r2
 800088c:	4698      	mov	r8, r3
 800088e:	e6f5      	b.n	800067c <__aeabi_dadd+0xf4>
 8000890:	0028      	movs	r0, r5
 8000892:	f001 fd19 	bl	80022c8 <__clzsi2>
 8000896:	0001      	movs	r1, r0
 8000898:	3118      	adds	r1, #24
 800089a:	291f      	cmp	r1, #31
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_dadd+0x318>
 800089e:	e6cf      	b.n	8000640 <__aeabi_dadd+0xb8>
 80008a0:	002b      	movs	r3, r5
 80008a2:	3808      	subs	r0, #8
 80008a4:	4083      	lsls	r3, r0
 80008a6:	2500      	movs	r5, #0
 80008a8:	e6d2      	b.n	8000650 <__aeabi_dadd+0xc8>
 80008aa:	4662      	mov	r2, ip
 80008ac:	433a      	orrs	r2, r7
 80008ae:	0011      	movs	r1, r2
 80008b0:	1e4f      	subs	r7, r1, #1
 80008b2:	41b9      	sbcs	r1, r7
 80008b4:	e6ac      	b.n	8000610 <__aeabi_dadd+0x88>
 80008b6:	4649      	mov	r1, r9
 80008b8:	0758      	lsls	r0, r3, #29
 80008ba:	08c9      	lsrs	r1, r1, #3
 80008bc:	4301      	orrs	r1, r0
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	e787      	b.n	80007d2 <__aeabi_dadd+0x24a>
 80008c2:	4649      	mov	r1, r9
 80008c4:	075a      	lsls	r2, r3, #29
 80008c6:	08c9      	lsrs	r1, r1, #3
 80008c8:	4311      	orrs	r1, r2
 80008ca:	08db      	lsrs	r3, r3, #3
 80008cc:	e7a6      	b.n	800081c <__aeabi_dadd+0x294>
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <__aeabi_dadd+0x37c>)
 80008d0:	1c70      	adds	r0, r6, #1
 80008d2:	4208      	tst	r0, r1
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0bb      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e114      	b.n	8000b08 <__aeabi_dadd+0x580>
 80008de:	4649      	mov	r1, r9
 80008e0:	4319      	orrs	r1, r3
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e175      	b.n	8000bd2 <__aeabi_dadd+0x64a>
 80008e6:	0029      	movs	r1, r5
 80008e8:	4339      	orrs	r1, r7
 80008ea:	d000      	beq.n	80008ee <__aeabi_dadd+0x366>
 80008ec:	e17e      	b.n	8000bec <__aeabi_dadd+0x664>
 80008ee:	4649      	mov	r1, r9
 80008f0:	0758      	lsls	r0, r3, #29
 80008f2:	08c9      	lsrs	r1, r1, #3
 80008f4:	4301      	orrs	r1, r0
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	e76e      	b.n	80007d8 <__aeabi_dadd+0x250>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	000007ff 	.word	0x000007ff
 8000900:	ff7fffff 	.word	0xff7fffff
 8000904:	000007fe 	.word	0x000007fe
 8000908:	4649      	mov	r1, r9
 800090a:	1bcd      	subs	r5, r1, r7
 800090c:	4661      	mov	r1, ip
 800090e:	1a58      	subs	r0, r3, r1
 8000910:	45a9      	cmp	r9, r5
 8000912:	4189      	sbcs	r1, r1
 8000914:	4249      	negs	r1, r1
 8000916:	4688      	mov	r8, r1
 8000918:	0001      	movs	r1, r0
 800091a:	4640      	mov	r0, r8
 800091c:	1a09      	subs	r1, r1, r0
 800091e:	4688      	mov	r8, r1
 8000920:	0209      	lsls	r1, r1, #8
 8000922:	d500      	bpl.n	8000926 <__aeabi_dadd+0x39e>
 8000924:	e0a6      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000926:	4641      	mov	r1, r8
 8000928:	4329      	orrs	r1, r5
 800092a:	d000      	beq.n	800092e <__aeabi_dadd+0x3a6>
 800092c:	e67f      	b.n	800062e <__aeabi_dadd+0xa6>
 800092e:	2300      	movs	r3, #0
 8000930:	2400      	movs	r4, #0
 8000932:	e751      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000934:	4cc7      	ldr	r4, [pc, #796]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000936:	42a1      	cmp	r1, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x3b4>
 800093a:	e0c7      	b.n	8000acc <__aeabi_dadd+0x544>
 800093c:	2480      	movs	r4, #128	; 0x80
 800093e:	0424      	lsls	r4, r4, #16
 8000940:	4323      	orrs	r3, r4
 8000942:	2a38      	cmp	r2, #56	; 0x38
 8000944:	dc54      	bgt.n	80009f0 <__aeabi_dadd+0x468>
 8000946:	2a1f      	cmp	r2, #31
 8000948:	dd00      	ble.n	800094c <__aeabi_dadd+0x3c4>
 800094a:	e0cc      	b.n	8000ae6 <__aeabi_dadd+0x55e>
 800094c:	2420      	movs	r4, #32
 800094e:	4648      	mov	r0, r9
 8000950:	1aa4      	subs	r4, r4, r2
 8000952:	001d      	movs	r5, r3
 8000954:	464e      	mov	r6, r9
 8000956:	40a0      	lsls	r0, r4
 8000958:	40d6      	lsrs	r6, r2
 800095a:	40a5      	lsls	r5, r4
 800095c:	0004      	movs	r4, r0
 800095e:	40d3      	lsrs	r3, r2
 8000960:	4662      	mov	r2, ip
 8000962:	4335      	orrs	r5, r6
 8000964:	1e66      	subs	r6, r4, #1
 8000966:	41b4      	sbcs	r4, r6
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	469c      	mov	ip, r3
 800096c:	4325      	orrs	r5, r4
 800096e:	e044      	b.n	80009fa <__aeabi_dadd+0x472>
 8000970:	4662      	mov	r2, ip
 8000972:	433a      	orrs	r2, r7
 8000974:	0015      	movs	r5, r2
 8000976:	1e6f      	subs	r7, r5, #1
 8000978:	41bd      	sbcs	r5, r7
 800097a:	444d      	add	r5, r9
 800097c:	454d      	cmp	r5, r9
 800097e:	4189      	sbcs	r1, r1
 8000980:	4249      	negs	r1, r1
 8000982:	4688      	mov	r8, r1
 8000984:	4498      	add	r8, r3
 8000986:	4643      	mov	r3, r8
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x406>
 800098c:	e718      	b.n	80007c0 <__aeabi_dadd+0x238>
 800098e:	4bb1      	ldr	r3, [pc, #708]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000990:	3601      	adds	r6, #1
 8000992:	429e      	cmp	r6, r3
 8000994:	d049      	beq.n	8000a2a <__aeabi_dadd+0x4a2>
 8000996:	4642      	mov	r2, r8
 8000998:	4baf      	ldr	r3, [pc, #700]	; (8000c58 <__aeabi_dadd+0x6d0>)
 800099a:	2101      	movs	r1, #1
 800099c:	401a      	ands	r2, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	086a      	lsrs	r2, r5, #1
 80009a2:	400d      	ands	r5, r1
 80009a4:	4315      	orrs	r5, r2
 80009a6:	07d9      	lsls	r1, r3, #31
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	4698      	mov	r8, r3
 80009ac:	430d      	orrs	r5, r1
 80009ae:	e665      	b.n	800067c <__aeabi_dadd+0xf4>
 80009b0:	0018      	movs	r0, r3
 80009b2:	3e1f      	subs	r6, #31
 80009b4:	40f0      	lsrs	r0, r6
 80009b6:	2a20      	cmp	r2, #32
 80009b8:	d003      	beq.n	80009c2 <__aeabi_dadd+0x43a>
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	4093      	lsls	r3, r2
 80009c0:	431d      	orrs	r5, r3
 80009c2:	1e69      	subs	r1, r5, #1
 80009c4:	418d      	sbcs	r5, r1
 80009c6:	2300      	movs	r3, #0
 80009c8:	2600      	movs	r6, #0
 80009ca:	4698      	mov	r8, r3
 80009cc:	4305      	orrs	r5, r0
 80009ce:	e6f7      	b.n	80007c0 <__aeabi_dadd+0x238>
 80009d0:	0011      	movs	r1, r2
 80009d2:	4665      	mov	r5, ip
 80009d4:	3920      	subs	r1, #32
 80009d6:	40cd      	lsrs	r5, r1
 80009d8:	2a20      	cmp	r2, #32
 80009da:	d004      	beq.n	80009e6 <__aeabi_dadd+0x45e>
 80009dc:	2040      	movs	r0, #64	; 0x40
 80009de:	4661      	mov	r1, ip
 80009e0:	1a82      	subs	r2, r0, r2
 80009e2:	4091      	lsls	r1, r2
 80009e4:	430f      	orrs	r7, r1
 80009e6:	0039      	movs	r1, r7
 80009e8:	1e4f      	subs	r7, r1, #1
 80009ea:	41b9      	sbcs	r1, r7
 80009ec:	4329      	orrs	r1, r5
 80009ee:	e60f      	b.n	8000610 <__aeabi_dadd+0x88>
 80009f0:	464a      	mov	r2, r9
 80009f2:	4313      	orrs	r3, r2
 80009f4:	001d      	movs	r5, r3
 80009f6:	1e6b      	subs	r3, r5, #1
 80009f8:	419d      	sbcs	r5, r3
 80009fa:	1b7d      	subs	r5, r7, r5
 80009fc:	42af      	cmp	r7, r5
 80009fe:	419b      	sbcs	r3, r3
 8000a00:	4662      	mov	r2, ip
 8000a02:	425b      	negs	r3, r3
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4698      	mov	r8, r3
 8000a08:	4654      	mov	r4, sl
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	e607      	b.n	800061e <__aeabi_dadd+0x96>
 8000a0e:	4648      	mov	r0, r9
 8000a10:	4318      	orrs	r0, r3
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x48e>
 8000a14:	e0b3      	b.n	8000b7e <__aeabi_dadd+0x5f6>
 8000a16:	1e50      	subs	r0, r2, #1
 8000a18:	2a01      	cmp	r2, #1
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x496>
 8000a1c:	e10d      	b.n	8000c3a <__aeabi_dadd+0x6b2>
 8000a1e:	4d8d      	ldr	r5, [pc, #564]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000a20:	42aa      	cmp	r2, r5
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x49e>
 8000a24:	e0a5      	b.n	8000b72 <__aeabi_dadd+0x5ea>
 8000a26:	0002      	movs	r2, r0
 8000a28:	e710      	b.n	800084c <__aeabi_dadd+0x2c4>
 8000a2a:	0032      	movs	r2, r6
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e644      	b.n	80006bc <__aeabi_dadd+0x134>
 8000a32:	2120      	movs	r1, #32
 8000a34:	0038      	movs	r0, r7
 8000a36:	1a89      	subs	r1, r1, r2
 8000a38:	4665      	mov	r5, ip
 8000a3a:	408f      	lsls	r7, r1
 8000a3c:	408d      	lsls	r5, r1
 8000a3e:	40d0      	lsrs	r0, r2
 8000a40:	1e79      	subs	r1, r7, #1
 8000a42:	418f      	sbcs	r7, r1
 8000a44:	4305      	orrs	r5, r0
 8000a46:	433d      	orrs	r5, r7
 8000a48:	4667      	mov	r7, ip
 8000a4a:	40d7      	lsrs	r7, r2
 8000a4c:	19db      	adds	r3, r3, r7
 8000a4e:	e794      	b.n	800097a <__aeabi_dadd+0x3f2>
 8000a50:	4a80      	ldr	r2, [pc, #512]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000a52:	4290      	cmp	r0, r2
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dadd+0x4d0>
 8000a56:	e0ec      	b.n	8000c32 <__aeabi_dadd+0x6aa>
 8000a58:	0039      	movs	r1, r7
 8000a5a:	4449      	add	r1, r9
 8000a5c:	4549      	cmp	r1, r9
 8000a5e:	4192      	sbcs	r2, r2
 8000a60:	4463      	add	r3, ip
 8000a62:	4252      	negs	r2, r2
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	07dd      	lsls	r5, r3, #31
 8000a68:	0849      	lsrs	r1, r1, #1
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	0006      	movs	r6, r0
 8000a70:	430d      	orrs	r5, r1
 8000a72:	e6a5      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000a74:	464a      	mov	r2, r9
 8000a76:	1abd      	subs	r5, r7, r2
 8000a78:	42af      	cmp	r7, r5
 8000a7a:	4189      	sbcs	r1, r1
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	4249      	negs	r1, r1
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	1a5b      	subs	r3, r3, r1
 8000a84:	4698      	mov	r8, r3
 8000a86:	4654      	mov	r4, sl
 8000a88:	e5d1      	b.n	800062e <__aeabi_dadd+0xa6>
 8000a8a:	076c      	lsls	r4, r5, #29
 8000a8c:	08f9      	lsrs	r1, r7, #3
 8000a8e:	4321      	orrs	r1, r4
 8000a90:	08eb      	lsrs	r3, r5, #3
 8000a92:	0004      	movs	r4, r0
 8000a94:	e69d      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	d175      	bne.n	8000b88 <__aeabi_dadd+0x600>
 8000a9c:	4661      	mov	r1, ip
 8000a9e:	4339      	orrs	r1, r7
 8000aa0:	d114      	bne.n	8000acc <__aeabi_dadd+0x544>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	031b      	lsls	r3, r3, #12
 8000aa8:	e6bc      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aaa:	464a      	mov	r2, r9
 8000aac:	1bd5      	subs	r5, r2, r7
 8000aae:	45a9      	cmp	r9, r5
 8000ab0:	4189      	sbcs	r1, r1
 8000ab2:	4662      	mov	r2, ip
 8000ab4:	4249      	negs	r1, r1
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	4698      	mov	r8, r3
 8000abc:	2601      	movs	r6, #1
 8000abe:	e5ae      	b.n	800061e <__aeabi_dadd+0x96>
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08d1      	lsrs	r1, r2, #3
 8000ac4:	075a      	lsls	r2, r3, #29
 8000ac6:	4311      	orrs	r1, r2
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	e6a7      	b.n	800081c <__aeabi_dadd+0x294>
 8000acc:	4663      	mov	r3, ip
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	075a      	lsls	r2, r3, #29
 8000ad2:	4654      	mov	r4, sl
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	e6a0      	b.n	800081c <__aeabi_dadd+0x294>
 8000ada:	464a      	mov	r2, r9
 8000adc:	4313      	orrs	r3, r2
 8000ade:	001d      	movs	r5, r3
 8000ae0:	1e6b      	subs	r3, r5, #1
 8000ae2:	419d      	sbcs	r5, r3
 8000ae4:	e6c7      	b.n	8000876 <__aeabi_dadd+0x2ee>
 8000ae6:	0014      	movs	r4, r2
 8000ae8:	001e      	movs	r6, r3
 8000aea:	3c20      	subs	r4, #32
 8000aec:	40e6      	lsrs	r6, r4
 8000aee:	2a20      	cmp	r2, #32
 8000af0:	d005      	beq.n	8000afe <__aeabi_dadd+0x576>
 8000af2:	2440      	movs	r4, #64	; 0x40
 8000af4:	1aa2      	subs	r2, r4, r2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	464a      	mov	r2, r9
 8000afa:	431a      	orrs	r2, r3
 8000afc:	4691      	mov	r9, r2
 8000afe:	464d      	mov	r5, r9
 8000b00:	1e6b      	subs	r3, r5, #1
 8000b02:	419d      	sbcs	r5, r3
 8000b04:	4335      	orrs	r5, r6
 8000b06:	e778      	b.n	80009fa <__aeabi_dadd+0x472>
 8000b08:	464a      	mov	r2, r9
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_dadd+0x588>
 8000b0e:	e66b      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b10:	076b      	lsls	r3, r5, #29
 8000b12:	08f9      	lsrs	r1, r7, #3
 8000b14:	4319      	orrs	r1, r3
 8000b16:	08eb      	lsrs	r3, r5, #3
 8000b18:	e680      	b.n	800081c <__aeabi_dadd+0x294>
 8000b1a:	4661      	mov	r1, ip
 8000b1c:	4339      	orrs	r1, r7
 8000b1e:	d054      	beq.n	8000bca <__aeabi_dadd+0x642>
 8000b20:	4663      	mov	r3, ip
 8000b22:	08f9      	lsrs	r1, r7, #3
 8000b24:	075c      	lsls	r4, r3, #29
 8000b26:	4321      	orrs	r1, r4
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	0004      	movs	r4, r0
 8000b2c:	e654      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000b2e:	464a      	mov	r2, r9
 8000b30:	1abd      	subs	r5, r7, r2
 8000b32:	42af      	cmp	r7, r5
 8000b34:	4189      	sbcs	r1, r1
 8000b36:	4662      	mov	r2, ip
 8000b38:	4249      	negs	r1, r1
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	4698      	mov	r8, r3
 8000b40:	0004      	movs	r4, r0
 8000b42:	2601      	movs	r6, #1
 8000b44:	e56b      	b.n	800061e <__aeabi_dadd+0x96>
 8000b46:	464a      	mov	r2, r9
 8000b48:	1bd5      	subs	r5, r2, r7
 8000b4a:	45a9      	cmp	r9, r5
 8000b4c:	4189      	sbcs	r1, r1
 8000b4e:	4662      	mov	r2, ip
 8000b50:	4249      	negs	r1, r1
 8000b52:	1a9a      	subs	r2, r3, r2
 8000b54:	1a52      	subs	r2, r2, r1
 8000b56:	4690      	mov	r8, r2
 8000b58:	0212      	lsls	r2, r2, #8
 8000b5a:	d532      	bpl.n	8000bc2 <__aeabi_dadd+0x63a>
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	1abd      	subs	r5, r7, r2
 8000b60:	42af      	cmp	r7, r5
 8000b62:	4189      	sbcs	r1, r1
 8000b64:	4662      	mov	r2, ip
 8000b66:	4249      	negs	r1, r1
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	1a5b      	subs	r3, r3, r1
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	0004      	movs	r4, r0
 8000b70:	e584      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b72:	4663      	mov	r3, ip
 8000b74:	08f9      	lsrs	r1, r7, #3
 8000b76:	075a      	lsls	r2, r3, #29
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	e64e      	b.n	800081c <__aeabi_dadd+0x294>
 8000b7e:	08f9      	lsrs	r1, r7, #3
 8000b80:	0768      	lsls	r0, r5, #29
 8000b82:	4301      	orrs	r1, r0
 8000b84:	08eb      	lsrs	r3, r5, #3
 8000b86:	e624      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b88:	4662      	mov	r2, ip
 8000b8a:	433a      	orrs	r2, r7
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x608>
 8000b8e:	e698      	b.n	80008c2 <__aeabi_dadd+0x33a>
 8000b90:	464a      	mov	r2, r9
 8000b92:	08d1      	lsrs	r1, r2, #3
 8000b94:	075a      	lsls	r2, r3, #29
 8000b96:	4311      	orrs	r1, r2
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	031b      	lsls	r3, r3, #12
 8000b9e:	421a      	tst	r2, r3
 8000ba0:	d008      	beq.n	8000bb4 <__aeabi_dadd+0x62c>
 8000ba2:	4660      	mov	r0, ip
 8000ba4:	08c5      	lsrs	r5, r0, #3
 8000ba6:	421d      	tst	r5, r3
 8000ba8:	d104      	bne.n	8000bb4 <__aeabi_dadd+0x62c>
 8000baa:	4654      	mov	r4, sl
 8000bac:	002a      	movs	r2, r5
 8000bae:	08f9      	lsrs	r1, r7, #3
 8000bb0:	0743      	lsls	r3, r0, #29
 8000bb2:	4319      	orrs	r1, r3
 8000bb4:	0f4b      	lsrs	r3, r1, #29
 8000bb6:	00c9      	lsls	r1, r1, #3
 8000bb8:	075b      	lsls	r3, r3, #29
 8000bba:	08c9      	lsrs	r1, r1, #3
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	e62c      	b.n	800081c <__aeabi_dadd+0x294>
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	4329      	orrs	r1, r5
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dadd+0x642>
 8000bc8:	e5fa      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	000a      	movs	r2, r1
 8000bce:	2400      	movs	r4, #0
 8000bd0:	e602      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000bd2:	076b      	lsls	r3, r5, #29
 8000bd4:	08f9      	lsrs	r1, r7, #3
 8000bd6:	4319      	orrs	r1, r3
 8000bd8:	08eb      	lsrs	r3, r5, #3
 8000bda:	e5fd      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000bdc:	4663      	mov	r3, ip
 8000bde:	08f9      	lsrs	r1, r7, #3
 8000be0:	075b      	lsls	r3, r3, #29
 8000be2:	4319      	orrs	r1, r3
 8000be4:	4663      	mov	r3, ip
 8000be6:	0004      	movs	r4, r0
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	e617      	b.n	800081c <__aeabi_dadd+0x294>
 8000bec:	003d      	movs	r5, r7
 8000bee:	444d      	add	r5, r9
 8000bf0:	4463      	add	r3, ip
 8000bf2:	454d      	cmp	r5, r9
 8000bf4:	4189      	sbcs	r1, r1
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	4249      	negs	r1, r1
 8000bfa:	4488      	add	r8, r1
 8000bfc:	4643      	mov	r3, r8
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x67c>
 8000c02:	e5dd      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000c04:	4642      	mov	r2, r8
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <__aeabi_dadd+0x6d0>)
 8000c08:	2601      	movs	r6, #1
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	e5d7      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000c10:	0010      	movs	r0, r2
 8000c12:	001e      	movs	r6, r3
 8000c14:	3820      	subs	r0, #32
 8000c16:	40c6      	lsrs	r6, r0
 8000c18:	2a20      	cmp	r2, #32
 8000c1a:	d005      	beq.n	8000c28 <__aeabi_dadd+0x6a0>
 8000c1c:	2040      	movs	r0, #64	; 0x40
 8000c1e:	1a82      	subs	r2, r0, r2
 8000c20:	4093      	lsls	r3, r2
 8000c22:	464a      	mov	r2, r9
 8000c24:	431a      	orrs	r2, r3
 8000c26:	4691      	mov	r9, r2
 8000c28:	464d      	mov	r5, r9
 8000c2a:	1e6b      	subs	r3, r5, #1
 8000c2c:	419d      	sbcs	r5, r3
 8000c2e:	4335      	orrs	r5, r6
 8000c30:	e621      	b.n	8000876 <__aeabi_dadd+0x2ee>
 8000c32:	0002      	movs	r2, r0
 8000c34:	2300      	movs	r3, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	e540      	b.n	80006bc <__aeabi_dadd+0x134>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	19d5      	adds	r5, r2, r7
 8000c3e:	42bd      	cmp	r5, r7
 8000c40:	4189      	sbcs	r1, r1
 8000c42:	4463      	add	r3, ip
 8000c44:	4698      	mov	r8, r3
 8000c46:	4249      	negs	r1, r1
 8000c48:	4488      	add	r8, r1
 8000c4a:	e5b3      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4a01      	ldr	r2, [pc, #4]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000c50:	000b      	movs	r3, r1
 8000c52:	e533      	b.n	80006bc <__aeabi_dadd+0x134>
 8000c54:	000007ff 	.word	0x000007ff
 8000c58:	ff7fffff 	.word	0xff7fffff

08000c5c <__aeabi_ddiv>:
 8000c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5e:	4657      	mov	r7, sl
 8000c60:	464e      	mov	r6, r9
 8000c62:	4645      	mov	r5, r8
 8000c64:	46de      	mov	lr, fp
 8000c66:	b5e0      	push	{r5, r6, r7, lr}
 8000c68:	4681      	mov	r9, r0
 8000c6a:	0005      	movs	r5, r0
 8000c6c:	030c      	lsls	r4, r1, #12
 8000c6e:	0048      	lsls	r0, r1, #1
 8000c70:	4692      	mov	sl, r2
 8000c72:	001f      	movs	r7, r3
 8000c74:	b085      	sub	sp, #20
 8000c76:	0b24      	lsrs	r4, r4, #12
 8000c78:	0d40      	lsrs	r0, r0, #21
 8000c7a:	0fce      	lsrs	r6, r1, #31
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d059      	beq.n	8000d34 <__aeabi_ddiv+0xd8>
 8000c80:	4b87      	ldr	r3, [pc, #540]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d100      	bne.n	8000c88 <__aeabi_ddiv+0x2c>
 8000c86:	e098      	b.n	8000dba <__aeabi_ddiv+0x15e>
 8000c88:	0f6b      	lsrs	r3, r5, #29
 8000c8a:	00e4      	lsls	r4, r4, #3
 8000c8c:	431c      	orrs	r4, r3
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	4323      	orrs	r3, r4
 8000c94:	4698      	mov	r8, r3
 8000c96:	4b83      	ldr	r3, [pc, #524]	; (8000ea4 <__aeabi_ddiv+0x248>)
 8000c98:	00ed      	lsls	r5, r5, #3
 8000c9a:	469b      	mov	fp, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	4483      	add	fp, r0
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	033c      	lsls	r4, r7, #12
 8000ca6:	007b      	lsls	r3, r7, #1
 8000ca8:	4650      	mov	r0, sl
 8000caa:	0b24      	lsrs	r4, r4, #12
 8000cac:	0d5b      	lsrs	r3, r3, #21
 8000cae:	0fff      	lsrs	r7, r7, #31
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d067      	beq.n	8000d84 <__aeabi_ddiv+0x128>
 8000cb4:	4a7a      	ldr	r2, [pc, #488]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d018      	beq.n	8000cec <__aeabi_ddiv+0x90>
 8000cba:	497a      	ldr	r1, [pc, #488]	; (8000ea4 <__aeabi_ddiv+0x248>)
 8000cbc:	0f42      	lsrs	r2, r0, #29
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	00e4      	lsls	r4, r4, #3
 8000cc2:	4659      	mov	r1, fp
 8000cc4:	4314      	orrs	r4, r2
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	4463      	add	r3, ip
 8000cca:	0412      	lsls	r2, r2, #16
 8000ccc:	1acb      	subs	r3, r1, r3
 8000cce:	4314      	orrs	r4, r2
 8000cd0:	469b      	mov	fp, r3
 8000cd2:	00c2      	lsls	r2, r0, #3
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	0033      	movs	r3, r6
 8000cd8:	407b      	eors	r3, r7
 8000cda:	469a      	mov	sl, r3
 8000cdc:	464b      	mov	r3, r9
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d900      	bls.n	8000ce4 <__aeabi_ddiv+0x88>
 8000ce2:	e0ef      	b.n	8000ec4 <__aeabi_ddiv+0x268>
 8000ce4:	4970      	ldr	r1, [pc, #448]	; (8000ea8 <__aeabi_ddiv+0x24c>)
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	58cb      	ldr	r3, [r1, r3]
 8000cea:	469f      	mov	pc, r3
 8000cec:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <__aeabi_ddiv+0x250>)
 8000cee:	4652      	mov	r2, sl
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	4322      	orrs	r2, r4
 8000cf4:	44e3      	add	fp, ip
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_ddiv+0xa0>
 8000cfa:	e095      	b.n	8000e28 <__aeabi_ddiv+0x1cc>
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	2302      	movs	r3, #2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	4689      	mov	r9, r1
 8000d04:	2400      	movs	r4, #0
 8000d06:	2002      	movs	r0, #2
 8000d08:	e7e5      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	2500      	movs	r5, #0
 8000d10:	4652      	mov	r2, sl
 8000d12:	051b      	lsls	r3, r3, #20
 8000d14:	4323      	orrs	r3, r4
 8000d16:	07d2      	lsls	r2, r2, #31
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	b005      	add	sp, #20
 8000d20:	bcf0      	pop	{r4, r5, r6, r7}
 8000d22:	46bb      	mov	fp, r7
 8000d24:	46b2      	mov	sl, r6
 8000d26:	46a9      	mov	r9, r5
 8000d28:	46a0      	mov	r8, r4
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2c:	2400      	movs	r4, #0
 8000d2e:	2500      	movs	r5, #0
 8000d30:	4b5b      	ldr	r3, [pc, #364]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000d32:	e7ed      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000d34:	464b      	mov	r3, r9
 8000d36:	4323      	orrs	r3, r4
 8000d38:	4698      	mov	r8, r3
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_ddiv+0xe2>
 8000d3c:	e089      	b.n	8000e52 <__aeabi_ddiv+0x1f6>
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0xe8>
 8000d42:	e1e0      	b.n	8001106 <__aeabi_ddiv+0x4aa>
 8000d44:	0020      	movs	r0, r4
 8000d46:	f001 fabf 	bl	80022c8 <__clzsi2>
 8000d4a:	0001      	movs	r1, r0
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	390b      	subs	r1, #11
 8000d50:	231d      	movs	r3, #29
 8000d52:	1a5b      	subs	r3, r3, r1
 8000d54:	4649      	mov	r1, r9
 8000d56:	0010      	movs	r0, r2
 8000d58:	40d9      	lsrs	r1, r3
 8000d5a:	3808      	subs	r0, #8
 8000d5c:	4084      	lsls	r4, r0
 8000d5e:	000b      	movs	r3, r1
 8000d60:	464d      	mov	r5, r9
 8000d62:	4323      	orrs	r3, r4
 8000d64:	4698      	mov	r8, r3
 8000d66:	4085      	lsls	r5, r0
 8000d68:	4851      	ldr	r0, [pc, #324]	; (8000eb0 <__aeabi_ddiv+0x254>)
 8000d6a:	033c      	lsls	r4, r7, #12
 8000d6c:	1a83      	subs	r3, r0, r2
 8000d6e:	469b      	mov	fp, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	4699      	mov	r9, r3
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	007b      	lsls	r3, r7, #1
 8000d78:	4650      	mov	r0, sl
 8000d7a:	0b24      	lsrs	r4, r4, #12
 8000d7c:	0d5b      	lsrs	r3, r3, #21
 8000d7e:	0fff      	lsrs	r7, r7, #31
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d197      	bne.n	8000cb4 <__aeabi_ddiv+0x58>
 8000d84:	4652      	mov	r2, sl
 8000d86:	4322      	orrs	r2, r4
 8000d88:	d055      	beq.n	8000e36 <__aeabi_ddiv+0x1da>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x134>
 8000d8e:	e1ca      	b.n	8001126 <__aeabi_ddiv+0x4ca>
 8000d90:	0020      	movs	r0, r4
 8000d92:	f001 fa99 	bl	80022c8 <__clzsi2>
 8000d96:	0002      	movs	r2, r0
 8000d98:	3a0b      	subs	r2, #11
 8000d9a:	231d      	movs	r3, #29
 8000d9c:	0001      	movs	r1, r0
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	4652      	mov	r2, sl
 8000da2:	3908      	subs	r1, #8
 8000da4:	40da      	lsrs	r2, r3
 8000da6:	408c      	lsls	r4, r1
 8000da8:	4314      	orrs	r4, r2
 8000daa:	4652      	mov	r2, sl
 8000dac:	408a      	lsls	r2, r1
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <__aeabi_ddiv+0x258>)
 8000db0:	4458      	add	r0, fp
 8000db2:	469b      	mov	fp, r3
 8000db4:	4483      	add	fp, r0
 8000db6:	2000      	movs	r0, #0
 8000db8:	e78d      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	d140      	bne.n	8000e44 <__aeabi_ddiv+0x1e8>
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	3b06      	subs	r3, #6
 8000dc8:	2500      	movs	r5, #0
 8000dca:	4683      	mov	fp, r0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	e769      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d0a9      	beq.n	8000d2c <__aeabi_ddiv+0xd0>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x182>
 8000ddc:	e211      	b.n	8001202 <__aeabi_ddiv+0x5a6>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d093      	beq.n	8000d0a <__aeabi_ddiv+0xae>
 8000de2:	4a35      	ldr	r2, [pc, #212]	; (8000eb8 <__aeabi_ddiv+0x25c>)
 8000de4:	445a      	add	r2, fp
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	dc00      	bgt.n	8000dec <__aeabi_ddiv+0x190>
 8000dea:	e13c      	b.n	8001066 <__aeabi_ddiv+0x40a>
 8000dec:	076b      	lsls	r3, r5, #29
 8000dee:	d000      	beq.n	8000df2 <__aeabi_ddiv+0x196>
 8000df0:	e1a7      	b.n	8001142 <__aeabi_ddiv+0x4e6>
 8000df2:	08ed      	lsrs	r5, r5, #3
 8000df4:	4643      	mov	r3, r8
 8000df6:	01db      	lsls	r3, r3, #7
 8000df8:	d506      	bpl.n	8000e08 <__aeabi_ddiv+0x1ac>
 8000dfa:	4642      	mov	r2, r8
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <__aeabi_ddiv+0x260>)
 8000dfe:	401a      	ands	r2, r3
 8000e00:	4690      	mov	r8, r2
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	445a      	add	r2, fp
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <__aeabi_ddiv+0x264>)
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dc8e      	bgt.n	8000d2c <__aeabi_ddiv+0xd0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	0552      	lsls	r2, r2, #21
 8000e12:	0758      	lsls	r0, r3, #29
 8000e14:	025c      	lsls	r4, r3, #9
 8000e16:	4305      	orrs	r5, r0
 8000e18:	0b24      	lsrs	r4, r4, #12
 8000e1a:	0d53      	lsrs	r3, r2, #21
 8000e1c:	e778      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e1e:	46ba      	mov	sl, r7
 8000e20:	46a0      	mov	r8, r4
 8000e22:	0015      	movs	r5, r2
 8000e24:	9000      	str	r0, [sp, #0]
 8000e26:	e7d4      	b.n	8000dd2 <__aeabi_ddiv+0x176>
 8000e28:	464a      	mov	r2, r9
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	4691      	mov	r9, r2
 8000e30:	2003      	movs	r0, #3
 8000e32:	4652      	mov	r2, sl
 8000e34:	e74f      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000e36:	4649      	mov	r1, r9
 8000e38:	2301      	movs	r3, #1
 8000e3a:	4319      	orrs	r1, r3
 8000e3c:	4689      	mov	r9, r1
 8000e3e:	2400      	movs	r4, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	e748      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000e44:	230c      	movs	r3, #12
 8000e46:	4699      	mov	r9, r3
 8000e48:	3b09      	subs	r3, #9
 8000e4a:	46a0      	mov	r8, r4
 8000e4c:	4683      	mov	fp, r0
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	e728      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000e52:	2304      	movs	r3, #4
 8000e54:	4699      	mov	r9, r3
 8000e56:	2300      	movs	r3, #0
 8000e58:	469b      	mov	fp, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	e720      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000e62:	2300      	movs	r3, #0
 8000e64:	2480      	movs	r4, #128	; 0x80
 8000e66:	469a      	mov	sl, r3
 8000e68:	2500      	movs	r5, #0
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e6c:	0324      	lsls	r4, r4, #12
 8000e6e:	e74f      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	4641      	mov	r1, r8
 8000e74:	031b      	lsls	r3, r3, #12
 8000e76:	4219      	tst	r1, r3
 8000e78:	d008      	beq.n	8000e8c <__aeabi_ddiv+0x230>
 8000e7a:	421c      	tst	r4, r3
 8000e7c:	d106      	bne.n	8000e8c <__aeabi_ddiv+0x230>
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	46ba      	mov	sl, r7
 8000e84:	0015      	movs	r5, r2
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e88:	0b24      	lsrs	r4, r4, #12
 8000e8a:	e741      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e8c:	2480      	movs	r4, #128	; 0x80
 8000e8e:	4643      	mov	r3, r8
 8000e90:	0324      	lsls	r4, r4, #12
 8000e92:	431c      	orrs	r4, r3
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	46b2      	mov	sl, r6
 8000e98:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	e738      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	000007ff 	.word	0x000007ff
 8000ea4:	fffffc01 	.word	0xfffffc01
 8000ea8:	0800a858 	.word	0x0800a858
 8000eac:	fffff801 	.word	0xfffff801
 8000eb0:	fffffc0d 	.word	0xfffffc0d
 8000eb4:	000003f3 	.word	0x000003f3
 8000eb8:	000003ff 	.word	0x000003ff
 8000ebc:	feffffff 	.word	0xfeffffff
 8000ec0:	000007fe 	.word	0x000007fe
 8000ec4:	4544      	cmp	r4, r8
 8000ec6:	d200      	bcs.n	8000eca <__aeabi_ddiv+0x26e>
 8000ec8:	e116      	b.n	80010f8 <__aeabi_ddiv+0x49c>
 8000eca:	d100      	bne.n	8000ece <__aeabi_ddiv+0x272>
 8000ecc:	e111      	b.n	80010f2 <__aeabi_ddiv+0x496>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	002e      	movs	r6, r5
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	2500      	movs	r5, #0
 8000eda:	44e3      	add	fp, ip
 8000edc:	0223      	lsls	r3, r4, #8
 8000ede:	0e14      	lsrs	r4, r2, #24
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	0c1b      	lsrs	r3, r3, #16
 8000ee4:	4699      	mov	r9, r3
 8000ee6:	0423      	lsls	r3, r4, #16
 8000ee8:	0c1f      	lsrs	r7, r3, #16
 8000eea:	0212      	lsls	r2, r2, #8
 8000eec:	4649      	mov	r1, r9
 8000eee:	9200      	str	r2, [sp, #0]
 8000ef0:	9701      	str	r7, [sp, #4]
 8000ef2:	f7ff f9ab 	bl	800024c <__aeabi_uidivmod>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	437a      	muls	r2, r7
 8000efa:	040b      	lsls	r3, r1, #16
 8000efc:	0c31      	lsrs	r1, r6, #16
 8000efe:	4680      	mov	r8, r0
 8000f00:	4319      	orrs	r1, r3
 8000f02:	428a      	cmp	r2, r1
 8000f04:	d90b      	bls.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f06:	2301      	movs	r3, #1
 8000f08:	425b      	negs	r3, r3
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	1909      	adds	r1, r1, r4
 8000f0e:	44e0      	add	r8, ip
 8000f10:	428c      	cmp	r4, r1
 8000f12:	d804      	bhi.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f14:	428a      	cmp	r2, r1
 8000f16:	d902      	bls.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f18:	1e83      	subs	r3, r0, #2
 8000f1a:	4698      	mov	r8, r3
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	1a88      	subs	r0, r1, r2
 8000f20:	4649      	mov	r1, r9
 8000f22:	f7ff f993 	bl	800024c <__aeabi_uidivmod>
 8000f26:	0409      	lsls	r1, r1, #16
 8000f28:	468c      	mov	ip, r1
 8000f2a:	0431      	lsls	r1, r6, #16
 8000f2c:	4666      	mov	r6, ip
 8000f2e:	9a01      	ldr	r2, [sp, #4]
 8000f30:	0c09      	lsrs	r1, r1, #16
 8000f32:	4342      	muls	r2, r0
 8000f34:	0003      	movs	r3, r0
 8000f36:	4331      	orrs	r1, r6
 8000f38:	428a      	cmp	r2, r1
 8000f3a:	d904      	bls.n	8000f46 <__aeabi_ddiv+0x2ea>
 8000f3c:	1909      	adds	r1, r1, r4
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	428c      	cmp	r4, r1
 8000f42:	d800      	bhi.n	8000f46 <__aeabi_ddiv+0x2ea>
 8000f44:	e111      	b.n	800116a <__aeabi_ddiv+0x50e>
 8000f46:	1a89      	subs	r1, r1, r2
 8000f48:	4642      	mov	r2, r8
 8000f4a:	9e00      	ldr	r6, [sp, #0]
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	0c33      	lsrs	r3, r6, #16
 8000f52:	001f      	movs	r7, r3
 8000f54:	0c10      	lsrs	r0, r2, #16
 8000f56:	4690      	mov	r8, r2
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	0413      	lsls	r3, r2, #16
 8000f5c:	0432      	lsls	r2, r6, #16
 8000f5e:	0c16      	lsrs	r6, r2, #16
 8000f60:	0032      	movs	r2, r6
 8000f62:	0c1b      	lsrs	r3, r3, #16
 8000f64:	435a      	muls	r2, r3
 8000f66:	9603      	str	r6, [sp, #12]
 8000f68:	437b      	muls	r3, r7
 8000f6a:	4346      	muls	r6, r0
 8000f6c:	4378      	muls	r0, r7
 8000f6e:	0c17      	lsrs	r7, r2, #16
 8000f70:	46bc      	mov	ip, r7
 8000f72:	199b      	adds	r3, r3, r6
 8000f74:	4463      	add	r3, ip
 8000f76:	429e      	cmp	r6, r3
 8000f78:	d903      	bls.n	8000f82 <__aeabi_ddiv+0x326>
 8000f7a:	2680      	movs	r6, #128	; 0x80
 8000f7c:	0276      	lsls	r6, r6, #9
 8000f7e:	46b4      	mov	ip, r6
 8000f80:	4460      	add	r0, ip
 8000f82:	0c1e      	lsrs	r6, r3, #16
 8000f84:	1830      	adds	r0, r6, r0
 8000f86:	0416      	lsls	r6, r2, #16
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	0c36      	lsrs	r6, r6, #16
 8000f8c:	199e      	adds	r6, r3, r6
 8000f8e:	4281      	cmp	r1, r0
 8000f90:	d200      	bcs.n	8000f94 <__aeabi_ddiv+0x338>
 8000f92:	e09c      	b.n	80010ce <__aeabi_ddiv+0x472>
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x33c>
 8000f96:	e097      	b.n	80010c8 <__aeabi_ddiv+0x46c>
 8000f98:	1bae      	subs	r6, r5, r6
 8000f9a:	1a09      	subs	r1, r1, r0
 8000f9c:	42b5      	cmp	r5, r6
 8000f9e:	4180      	sbcs	r0, r0
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	1a08      	subs	r0, r1, r0
 8000fa4:	4284      	cmp	r4, r0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_ddiv+0x34e>
 8000fa8:	e111      	b.n	80011ce <__aeabi_ddiv+0x572>
 8000faa:	4649      	mov	r1, r9
 8000fac:	f7ff f94e 	bl	800024c <__aeabi_uidivmod>
 8000fb0:	9a01      	ldr	r2, [sp, #4]
 8000fb2:	040b      	lsls	r3, r1, #16
 8000fb4:	4342      	muls	r2, r0
 8000fb6:	0c31      	lsrs	r1, r6, #16
 8000fb8:	0005      	movs	r5, r0
 8000fba:	4319      	orrs	r1, r3
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d907      	bls.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fc0:	1909      	adds	r1, r1, r4
 8000fc2:	3d01      	subs	r5, #1
 8000fc4:	428c      	cmp	r4, r1
 8000fc6:	d803      	bhi.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fc8:	428a      	cmp	r2, r1
 8000fca:	d901      	bls.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fcc:	1e85      	subs	r5, r0, #2
 8000fce:	1909      	adds	r1, r1, r4
 8000fd0:	1a88      	subs	r0, r1, r2
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	f7ff f93a 	bl	800024c <__aeabi_uidivmod>
 8000fd8:	0409      	lsls	r1, r1, #16
 8000fda:	468c      	mov	ip, r1
 8000fdc:	0431      	lsls	r1, r6, #16
 8000fde:	4666      	mov	r6, ip
 8000fe0:	9a01      	ldr	r2, [sp, #4]
 8000fe2:	0c09      	lsrs	r1, r1, #16
 8000fe4:	4342      	muls	r2, r0
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	4331      	orrs	r1, r6
 8000fea:	428a      	cmp	r2, r1
 8000fec:	d907      	bls.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000fee:	1909      	adds	r1, r1, r4
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	428c      	cmp	r4, r1
 8000ff4:	d803      	bhi.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	d901      	bls.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000ffa:	1e83      	subs	r3, r0, #2
 8000ffc:	1909      	adds	r1, r1, r4
 8000ffe:	9e03      	ldr	r6, [sp, #12]
 8001000:	1a89      	subs	r1, r1, r2
 8001002:	0032      	movs	r2, r6
 8001004:	042d      	lsls	r5, r5, #16
 8001006:	431d      	orrs	r5, r3
 8001008:	9f02      	ldr	r7, [sp, #8]
 800100a:	042b      	lsls	r3, r5, #16
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	435a      	muls	r2, r3
 8001010:	437b      	muls	r3, r7
 8001012:	469c      	mov	ip, r3
 8001014:	0c28      	lsrs	r0, r5, #16
 8001016:	4346      	muls	r6, r0
 8001018:	0c13      	lsrs	r3, r2, #16
 800101a:	44b4      	add	ip, r6
 800101c:	4463      	add	r3, ip
 800101e:	4378      	muls	r0, r7
 8001020:	429e      	cmp	r6, r3
 8001022:	d903      	bls.n	800102c <__aeabi_ddiv+0x3d0>
 8001024:	2680      	movs	r6, #128	; 0x80
 8001026:	0276      	lsls	r6, r6, #9
 8001028:	46b4      	mov	ip, r6
 800102a:	4460      	add	r0, ip
 800102c:	0c1e      	lsrs	r6, r3, #16
 800102e:	0412      	lsls	r2, r2, #16
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	0c12      	lsrs	r2, r2, #16
 8001034:	1830      	adds	r0, r6, r0
 8001036:	189b      	adds	r3, r3, r2
 8001038:	4281      	cmp	r1, r0
 800103a:	d306      	bcc.n	800104a <__aeabi_ddiv+0x3ee>
 800103c:	d002      	beq.n	8001044 <__aeabi_ddiv+0x3e8>
 800103e:	2301      	movs	r3, #1
 8001040:	431d      	orrs	r5, r3
 8001042:	e6ce      	b.n	8000de2 <__aeabi_ddiv+0x186>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x3ee>
 8001048:	e6cb      	b.n	8000de2 <__aeabi_ddiv+0x186>
 800104a:	1861      	adds	r1, r4, r1
 800104c:	1e6e      	subs	r6, r5, #1
 800104e:	42a1      	cmp	r1, r4
 8001050:	d200      	bcs.n	8001054 <__aeabi_ddiv+0x3f8>
 8001052:	e0a4      	b.n	800119e <__aeabi_ddiv+0x542>
 8001054:	4281      	cmp	r1, r0
 8001056:	d200      	bcs.n	800105a <__aeabi_ddiv+0x3fe>
 8001058:	e0c9      	b.n	80011ee <__aeabi_ddiv+0x592>
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x402>
 800105c:	e0d9      	b.n	8001212 <__aeabi_ddiv+0x5b6>
 800105e:	0035      	movs	r5, r6
 8001060:	e7ed      	b.n	800103e <__aeabi_ddiv+0x3e2>
 8001062:	2501      	movs	r5, #1
 8001064:	426d      	negs	r5, r5
 8001066:	2101      	movs	r1, #1
 8001068:	1a89      	subs	r1, r1, r2
 800106a:	2938      	cmp	r1, #56	; 0x38
 800106c:	dd00      	ble.n	8001070 <__aeabi_ddiv+0x414>
 800106e:	e64c      	b.n	8000d0a <__aeabi_ddiv+0xae>
 8001070:	291f      	cmp	r1, #31
 8001072:	dc00      	bgt.n	8001076 <__aeabi_ddiv+0x41a>
 8001074:	e07f      	b.n	8001176 <__aeabi_ddiv+0x51a>
 8001076:	231f      	movs	r3, #31
 8001078:	425b      	negs	r3, r3
 800107a:	1a9a      	subs	r2, r3, r2
 800107c:	4643      	mov	r3, r8
 800107e:	40d3      	lsrs	r3, r2
 8001080:	2920      	cmp	r1, #32
 8001082:	d004      	beq.n	800108e <__aeabi_ddiv+0x432>
 8001084:	4644      	mov	r4, r8
 8001086:	4a65      	ldr	r2, [pc, #404]	; (800121c <__aeabi_ddiv+0x5c0>)
 8001088:	445a      	add	r2, fp
 800108a:	4094      	lsls	r4, r2
 800108c:	4325      	orrs	r5, r4
 800108e:	1e6a      	subs	r2, r5, #1
 8001090:	4195      	sbcs	r5, r2
 8001092:	2207      	movs	r2, #7
 8001094:	432b      	orrs	r3, r5
 8001096:	0015      	movs	r5, r2
 8001098:	2400      	movs	r4, #0
 800109a:	401d      	ands	r5, r3
 800109c:	421a      	tst	r2, r3
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x446>
 80010a0:	e0a1      	b.n	80011e6 <__aeabi_ddiv+0x58a>
 80010a2:	220f      	movs	r2, #15
 80010a4:	2400      	movs	r4, #0
 80010a6:	401a      	ands	r2, r3
 80010a8:	2a04      	cmp	r2, #4
 80010aa:	d100      	bne.n	80010ae <__aeabi_ddiv+0x452>
 80010ac:	e098      	b.n	80011e0 <__aeabi_ddiv+0x584>
 80010ae:	1d1a      	adds	r2, r3, #4
 80010b0:	429a      	cmp	r2, r3
 80010b2:	419b      	sbcs	r3, r3
 80010b4:	425b      	negs	r3, r3
 80010b6:	18e4      	adds	r4, r4, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	0222      	lsls	r2, r4, #8
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_ddiv+0x464>
 80010be:	e08f      	b.n	80011e0 <__aeabi_ddiv+0x584>
 80010c0:	2301      	movs	r3, #1
 80010c2:	2400      	movs	r4, #0
 80010c4:	2500      	movs	r5, #0
 80010c6:	e623      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 80010c8:	42b5      	cmp	r5, r6
 80010ca:	d300      	bcc.n	80010ce <__aeabi_ddiv+0x472>
 80010cc:	e764      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80010ce:	4643      	mov	r3, r8
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	9b00      	ldr	r3, [sp, #0]
 80010d4:	469c      	mov	ip, r3
 80010d6:	4465      	add	r5, ip
 80010d8:	001f      	movs	r7, r3
 80010da:	429d      	cmp	r5, r3
 80010dc:	419b      	sbcs	r3, r3
 80010de:	425b      	negs	r3, r3
 80010e0:	191b      	adds	r3, r3, r4
 80010e2:	18c9      	adds	r1, r1, r3
 80010e4:	428c      	cmp	r4, r1
 80010e6:	d23a      	bcs.n	800115e <__aeabi_ddiv+0x502>
 80010e8:	4288      	cmp	r0, r1
 80010ea:	d863      	bhi.n	80011b4 <__aeabi_ddiv+0x558>
 80010ec:	d060      	beq.n	80011b0 <__aeabi_ddiv+0x554>
 80010ee:	4690      	mov	r8, r2
 80010f0:	e752      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80010f2:	42aa      	cmp	r2, r5
 80010f4:	d900      	bls.n	80010f8 <__aeabi_ddiv+0x49c>
 80010f6:	e6ea      	b.n	8000ece <__aeabi_ddiv+0x272>
 80010f8:	4643      	mov	r3, r8
 80010fa:	07de      	lsls	r6, r3, #31
 80010fc:	0858      	lsrs	r0, r3, #1
 80010fe:	086b      	lsrs	r3, r5, #1
 8001100:	431e      	orrs	r6, r3
 8001102:	07ed      	lsls	r5, r5, #31
 8001104:	e6ea      	b.n	8000edc <__aeabi_ddiv+0x280>
 8001106:	4648      	mov	r0, r9
 8001108:	f001 f8de 	bl	80022c8 <__clzsi2>
 800110c:	0001      	movs	r1, r0
 800110e:	0002      	movs	r2, r0
 8001110:	3115      	adds	r1, #21
 8001112:	3220      	adds	r2, #32
 8001114:	291c      	cmp	r1, #28
 8001116:	dc00      	bgt.n	800111a <__aeabi_ddiv+0x4be>
 8001118:	e61a      	b.n	8000d50 <__aeabi_ddiv+0xf4>
 800111a:	464b      	mov	r3, r9
 800111c:	3808      	subs	r0, #8
 800111e:	4083      	lsls	r3, r0
 8001120:	2500      	movs	r5, #0
 8001122:	4698      	mov	r8, r3
 8001124:	e620      	b.n	8000d68 <__aeabi_ddiv+0x10c>
 8001126:	f001 f8cf 	bl	80022c8 <__clzsi2>
 800112a:	0003      	movs	r3, r0
 800112c:	001a      	movs	r2, r3
 800112e:	3215      	adds	r2, #21
 8001130:	3020      	adds	r0, #32
 8001132:	2a1c      	cmp	r2, #28
 8001134:	dc00      	bgt.n	8001138 <__aeabi_ddiv+0x4dc>
 8001136:	e630      	b.n	8000d9a <__aeabi_ddiv+0x13e>
 8001138:	4654      	mov	r4, sl
 800113a:	3b08      	subs	r3, #8
 800113c:	2200      	movs	r2, #0
 800113e:	409c      	lsls	r4, r3
 8001140:	e635      	b.n	8000dae <__aeabi_ddiv+0x152>
 8001142:	230f      	movs	r3, #15
 8001144:	402b      	ands	r3, r5
 8001146:	2b04      	cmp	r3, #4
 8001148:	d100      	bne.n	800114c <__aeabi_ddiv+0x4f0>
 800114a:	e652      	b.n	8000df2 <__aeabi_ddiv+0x196>
 800114c:	2305      	movs	r3, #5
 800114e:	425b      	negs	r3, r3
 8001150:	42ab      	cmp	r3, r5
 8001152:	419b      	sbcs	r3, r3
 8001154:	3504      	adds	r5, #4
 8001156:	425b      	negs	r3, r3
 8001158:	08ed      	lsrs	r5, r5, #3
 800115a:	4498      	add	r8, r3
 800115c:	e64a      	b.n	8000df4 <__aeabi_ddiv+0x198>
 800115e:	428c      	cmp	r4, r1
 8001160:	d1c5      	bne.n	80010ee <__aeabi_ddiv+0x492>
 8001162:	42af      	cmp	r7, r5
 8001164:	d9c0      	bls.n	80010e8 <__aeabi_ddiv+0x48c>
 8001166:	4690      	mov	r8, r2
 8001168:	e716      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 800116a:	428a      	cmp	r2, r1
 800116c:	d800      	bhi.n	8001170 <__aeabi_ddiv+0x514>
 800116e:	e6ea      	b.n	8000f46 <__aeabi_ddiv+0x2ea>
 8001170:	1e83      	subs	r3, r0, #2
 8001172:	1909      	adds	r1, r1, r4
 8001174:	e6e7      	b.n	8000f46 <__aeabi_ddiv+0x2ea>
 8001176:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <__aeabi_ddiv+0x5c4>)
 8001178:	0028      	movs	r0, r5
 800117a:	445a      	add	r2, fp
 800117c:	4643      	mov	r3, r8
 800117e:	4095      	lsls	r5, r2
 8001180:	4093      	lsls	r3, r2
 8001182:	40c8      	lsrs	r0, r1
 8001184:	1e6a      	subs	r2, r5, #1
 8001186:	4195      	sbcs	r5, r2
 8001188:	4644      	mov	r4, r8
 800118a:	4303      	orrs	r3, r0
 800118c:	432b      	orrs	r3, r5
 800118e:	40cc      	lsrs	r4, r1
 8001190:	075a      	lsls	r2, r3, #29
 8001192:	d092      	beq.n	80010ba <__aeabi_ddiv+0x45e>
 8001194:	220f      	movs	r2, #15
 8001196:	401a      	ands	r2, r3
 8001198:	2a04      	cmp	r2, #4
 800119a:	d188      	bne.n	80010ae <__aeabi_ddiv+0x452>
 800119c:	e78d      	b.n	80010ba <__aeabi_ddiv+0x45e>
 800119e:	0035      	movs	r5, r6
 80011a0:	4281      	cmp	r1, r0
 80011a2:	d000      	beq.n	80011a6 <__aeabi_ddiv+0x54a>
 80011a4:	e74b      	b.n	800103e <__aeabi_ddiv+0x3e2>
 80011a6:	9a00      	ldr	r2, [sp, #0]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d000      	beq.n	80011ae <__aeabi_ddiv+0x552>
 80011ac:	e747      	b.n	800103e <__aeabi_ddiv+0x3e2>
 80011ae:	e618      	b.n	8000de2 <__aeabi_ddiv+0x186>
 80011b0:	42ae      	cmp	r6, r5
 80011b2:	d99c      	bls.n	80010ee <__aeabi_ddiv+0x492>
 80011b4:	2302      	movs	r3, #2
 80011b6:	425b      	negs	r3, r3
 80011b8:	469c      	mov	ip, r3
 80011ba:	9b00      	ldr	r3, [sp, #0]
 80011bc:	44e0      	add	r8, ip
 80011be:	469c      	mov	ip, r3
 80011c0:	4465      	add	r5, ip
 80011c2:	429d      	cmp	r5, r3
 80011c4:	419b      	sbcs	r3, r3
 80011c6:	425b      	negs	r3, r3
 80011c8:	191b      	adds	r3, r3, r4
 80011ca:	18c9      	adds	r1, r1, r3
 80011cc:	e6e4      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80011ce:	4a15      	ldr	r2, [pc, #84]	; (8001224 <__aeabi_ddiv+0x5c8>)
 80011d0:	445a      	add	r2, fp
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_ddiv+0x57c>
 80011d6:	e744      	b.n	8001062 <__aeabi_ddiv+0x406>
 80011d8:	2301      	movs	r3, #1
 80011da:	2500      	movs	r5, #0
 80011dc:	4498      	add	r8, r3
 80011de:	e609      	b.n	8000df4 <__aeabi_ddiv+0x198>
 80011e0:	0765      	lsls	r5, r4, #29
 80011e2:	0264      	lsls	r4, r4, #9
 80011e4:	0b24      	lsrs	r4, r4, #12
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	431d      	orrs	r5, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	e590      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 80011ee:	9e00      	ldr	r6, [sp, #0]
 80011f0:	3d02      	subs	r5, #2
 80011f2:	0072      	lsls	r2, r6, #1
 80011f4:	42b2      	cmp	r2, r6
 80011f6:	41bf      	sbcs	r7, r7
 80011f8:	427f      	negs	r7, r7
 80011fa:	193c      	adds	r4, r7, r4
 80011fc:	1909      	adds	r1, r1, r4
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	e7ce      	b.n	80011a0 <__aeabi_ddiv+0x544>
 8001202:	2480      	movs	r4, #128	; 0x80
 8001204:	4643      	mov	r3, r8
 8001206:	0324      	lsls	r4, r4, #12
 8001208:	431c      	orrs	r4, r3
 800120a:	0324      	lsls	r4, r4, #12
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <__aeabi_ddiv+0x5cc>)
 800120e:	0b24      	lsrs	r4, r4, #12
 8001210:	e57e      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8001212:	9a00      	ldr	r2, [sp, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3ea      	bcc.n	80011ee <__aeabi_ddiv+0x592>
 8001218:	0035      	movs	r5, r6
 800121a:	e7c4      	b.n	80011a6 <__aeabi_ddiv+0x54a>
 800121c:	0000043e 	.word	0x0000043e
 8001220:	0000041e 	.word	0x0000041e
 8001224:	000003ff 	.word	0x000003ff
 8001228:	000007ff 	.word	0x000007ff

0800122c <__eqdf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	464f      	mov	r7, r9
 8001230:	4646      	mov	r6, r8
 8001232:	46d6      	mov	lr, sl
 8001234:	4694      	mov	ip, r2
 8001236:	4691      	mov	r9, r2
 8001238:	031a      	lsls	r2, r3, #12
 800123a:	0b12      	lsrs	r2, r2, #12
 800123c:	4d18      	ldr	r5, [pc, #96]	; (80012a0 <__eqdf2+0x74>)
 800123e:	b5c0      	push	{r6, r7, lr}
 8001240:	004c      	lsls	r4, r1, #1
 8001242:	030f      	lsls	r7, r1, #12
 8001244:	4692      	mov	sl, r2
 8001246:	005a      	lsls	r2, r3, #1
 8001248:	0006      	movs	r6, r0
 800124a:	4680      	mov	r8, r0
 800124c:	0b3f      	lsrs	r7, r7, #12
 800124e:	2001      	movs	r0, #1
 8001250:	0d64      	lsrs	r4, r4, #21
 8001252:	0fc9      	lsrs	r1, r1, #31
 8001254:	0d52      	lsrs	r2, r2, #21
 8001256:	0fdb      	lsrs	r3, r3, #31
 8001258:	42ac      	cmp	r4, r5
 800125a:	d00a      	beq.n	8001272 <__eqdf2+0x46>
 800125c:	42aa      	cmp	r2, r5
 800125e:	d003      	beq.n	8001268 <__eqdf2+0x3c>
 8001260:	4294      	cmp	r4, r2
 8001262:	d101      	bne.n	8001268 <__eqdf2+0x3c>
 8001264:	4557      	cmp	r7, sl
 8001266:	d00d      	beq.n	8001284 <__eqdf2+0x58>
 8001268:	bce0      	pop	{r5, r6, r7}
 800126a:	46ba      	mov	sl, r7
 800126c:	46b1      	mov	r9, r6
 800126e:	46a8      	mov	r8, r5
 8001270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001272:	003d      	movs	r5, r7
 8001274:	4335      	orrs	r5, r6
 8001276:	d1f7      	bne.n	8001268 <__eqdf2+0x3c>
 8001278:	42a2      	cmp	r2, r4
 800127a:	d1f5      	bne.n	8001268 <__eqdf2+0x3c>
 800127c:	4652      	mov	r2, sl
 800127e:	4665      	mov	r5, ip
 8001280:	432a      	orrs	r2, r5
 8001282:	d1f1      	bne.n	8001268 <__eqdf2+0x3c>
 8001284:	2001      	movs	r0, #1
 8001286:	45c8      	cmp	r8, r9
 8001288:	d1ee      	bne.n	8001268 <__eqdf2+0x3c>
 800128a:	4299      	cmp	r1, r3
 800128c:	d006      	beq.n	800129c <__eqdf2+0x70>
 800128e:	2c00      	cmp	r4, #0
 8001290:	d1ea      	bne.n	8001268 <__eqdf2+0x3c>
 8001292:	433e      	orrs	r6, r7
 8001294:	0030      	movs	r0, r6
 8001296:	1e46      	subs	r6, r0, #1
 8001298:	41b0      	sbcs	r0, r6
 800129a:	e7e5      	b.n	8001268 <__eqdf2+0x3c>
 800129c:	2000      	movs	r0, #0
 800129e:	e7e3      	b.n	8001268 <__eqdf2+0x3c>
 80012a0:	000007ff 	.word	0x000007ff

080012a4 <__gedf2>:
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	464e      	mov	r6, r9
 80012a8:	4645      	mov	r5, r8
 80012aa:	4657      	mov	r7, sl
 80012ac:	46de      	mov	lr, fp
 80012ae:	0004      	movs	r4, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	b5e0      	push	{r5, r6, r7, lr}
 80012b4:	0016      	movs	r6, r2
 80012b6:	031b      	lsls	r3, r3, #12
 80012b8:	0b1b      	lsrs	r3, r3, #12
 80012ba:	4d32      	ldr	r5, [pc, #200]	; (8001384 <__gedf2+0xe0>)
 80012bc:	030f      	lsls	r7, r1, #12
 80012be:	004a      	lsls	r2, r1, #1
 80012c0:	4699      	mov	r9, r3
 80012c2:	0043      	lsls	r3, r0, #1
 80012c4:	46a4      	mov	ip, r4
 80012c6:	46b0      	mov	r8, r6
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	0d5b      	lsrs	r3, r3, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	42aa      	cmp	r2, r5
 80012d4:	d029      	beq.n	800132a <__gedf2+0x86>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d018      	beq.n	800130c <__gedf2+0x68>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d12a      	bne.n	8001334 <__gedf2+0x90>
 80012de:	433c      	orrs	r4, r7
 80012e0:	46a3      	mov	fp, r4
 80012e2:	4265      	negs	r5, r4
 80012e4:	4165      	adcs	r5, r4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <__gedf2+0x4c>
 80012ea:	464c      	mov	r4, r9
 80012ec:	4326      	orrs	r6, r4
 80012ee:	d027      	beq.n	8001340 <__gedf2+0x9c>
 80012f0:	2d00      	cmp	r5, #0
 80012f2:	d115      	bne.n	8001320 <__gedf2+0x7c>
 80012f4:	4281      	cmp	r1, r0
 80012f6:	d028      	beq.n	800134a <__gedf2+0xa6>
 80012f8:	2002      	movs	r0, #2
 80012fa:	3901      	subs	r1, #1
 80012fc:	4008      	ands	r0, r1
 80012fe:	3801      	subs	r0, #1
 8001300:	bcf0      	pop	{r4, r5, r6, r7}
 8001302:	46bb      	mov	fp, r7
 8001304:	46b2      	mov	sl, r6
 8001306:	46a9      	mov	r9, r5
 8001308:	46a0      	mov	r8, r4
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	464d      	mov	r5, r9
 800130e:	432e      	orrs	r6, r5
 8001310:	d12f      	bne.n	8001372 <__gedf2+0xce>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d1ee      	bne.n	80012f4 <__gedf2+0x50>
 8001316:	433c      	orrs	r4, r7
 8001318:	4265      	negs	r5, r4
 800131a:	4165      	adcs	r5, r4
 800131c:	2d00      	cmp	r5, #0
 800131e:	d0e9      	beq.n	80012f4 <__gedf2+0x50>
 8001320:	2800      	cmp	r0, #0
 8001322:	d1ed      	bne.n	8001300 <__gedf2+0x5c>
 8001324:	2001      	movs	r0, #1
 8001326:	4240      	negs	r0, r0
 8001328:	e7ea      	b.n	8001300 <__gedf2+0x5c>
 800132a:	003d      	movs	r5, r7
 800132c:	4325      	orrs	r5, r4
 800132e:	d120      	bne.n	8001372 <__gedf2+0xce>
 8001330:	4293      	cmp	r3, r2
 8001332:	d0eb      	beq.n	800130c <__gedf2+0x68>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1dd      	bne.n	80012f4 <__gedf2+0x50>
 8001338:	464c      	mov	r4, r9
 800133a:	4326      	orrs	r6, r4
 800133c:	d1da      	bne.n	80012f4 <__gedf2+0x50>
 800133e:	e7db      	b.n	80012f8 <__gedf2+0x54>
 8001340:	465b      	mov	r3, fp
 8001342:	2000      	movs	r0, #0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0db      	beq.n	8001300 <__gedf2+0x5c>
 8001348:	e7d6      	b.n	80012f8 <__gedf2+0x54>
 800134a:	429a      	cmp	r2, r3
 800134c:	dc0a      	bgt.n	8001364 <__gedf2+0xc0>
 800134e:	dbe7      	blt.n	8001320 <__gedf2+0x7c>
 8001350:	454f      	cmp	r7, r9
 8001352:	d8d1      	bhi.n	80012f8 <__gedf2+0x54>
 8001354:	d010      	beq.n	8001378 <__gedf2+0xd4>
 8001356:	2000      	movs	r0, #0
 8001358:	454f      	cmp	r7, r9
 800135a:	d2d1      	bcs.n	8001300 <__gedf2+0x5c>
 800135c:	2900      	cmp	r1, #0
 800135e:	d0e1      	beq.n	8001324 <__gedf2+0x80>
 8001360:	0008      	movs	r0, r1
 8001362:	e7cd      	b.n	8001300 <__gedf2+0x5c>
 8001364:	4243      	negs	r3, r0
 8001366:	4158      	adcs	r0, r3
 8001368:	2302      	movs	r3, #2
 800136a:	4240      	negs	r0, r0
 800136c:	4018      	ands	r0, r3
 800136e:	3801      	subs	r0, #1
 8001370:	e7c6      	b.n	8001300 <__gedf2+0x5c>
 8001372:	2002      	movs	r0, #2
 8001374:	4240      	negs	r0, r0
 8001376:	e7c3      	b.n	8001300 <__gedf2+0x5c>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8bd      	bhi.n	80012f8 <__gedf2+0x54>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2be      	bcs.n	8001300 <__gedf2+0x5c>
 8001382:	e7eb      	b.n	800135c <__gedf2+0xb8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__ledf2>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	464e      	mov	r6, r9
 800138c:	4645      	mov	r5, r8
 800138e:	4657      	mov	r7, sl
 8001390:	46de      	mov	lr, fp
 8001392:	0004      	movs	r4, r0
 8001394:	0018      	movs	r0, r3
 8001396:	b5e0      	push	{r5, r6, r7, lr}
 8001398:	0016      	movs	r6, r2
 800139a:	031b      	lsls	r3, r3, #12
 800139c:	0b1b      	lsrs	r3, r3, #12
 800139e:	4d31      	ldr	r5, [pc, #196]	; (8001464 <__ledf2+0xdc>)
 80013a0:	030f      	lsls	r7, r1, #12
 80013a2:	004a      	lsls	r2, r1, #1
 80013a4:	4699      	mov	r9, r3
 80013a6:	0043      	lsls	r3, r0, #1
 80013a8:	46a4      	mov	ip, r4
 80013aa:	46b0      	mov	r8, r6
 80013ac:	0b3f      	lsrs	r7, r7, #12
 80013ae:	0d52      	lsrs	r2, r2, #21
 80013b0:	0fc9      	lsrs	r1, r1, #31
 80013b2:	0d5b      	lsrs	r3, r3, #21
 80013b4:	0fc0      	lsrs	r0, r0, #31
 80013b6:	42aa      	cmp	r2, r5
 80013b8:	d011      	beq.n	80013de <__ledf2+0x56>
 80013ba:	42ab      	cmp	r3, r5
 80013bc:	d014      	beq.n	80013e8 <__ledf2+0x60>
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d12f      	bne.n	8001422 <__ledf2+0x9a>
 80013c2:	433c      	orrs	r4, r7
 80013c4:	46a3      	mov	fp, r4
 80013c6:	4265      	negs	r5, r4
 80013c8:	4165      	adcs	r5, r4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d114      	bne.n	80013f8 <__ledf2+0x70>
 80013ce:	464c      	mov	r4, r9
 80013d0:	4326      	orrs	r6, r4
 80013d2:	d111      	bne.n	80013f8 <__ledf2+0x70>
 80013d4:	465b      	mov	r3, fp
 80013d6:	2000      	movs	r0, #0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d017      	beq.n	800140c <__ledf2+0x84>
 80013dc:	e010      	b.n	8001400 <__ledf2+0x78>
 80013de:	003d      	movs	r5, r7
 80013e0:	4325      	orrs	r5, r4
 80013e2:	d112      	bne.n	800140a <__ledf2+0x82>
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d11c      	bne.n	8001422 <__ledf2+0x9a>
 80013e8:	464d      	mov	r5, r9
 80013ea:	432e      	orrs	r6, r5
 80013ec:	d10d      	bne.n	800140a <__ledf2+0x82>
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d104      	bne.n	80013fc <__ledf2+0x74>
 80013f2:	433c      	orrs	r4, r7
 80013f4:	4265      	negs	r5, r4
 80013f6:	4165      	adcs	r5, r4
 80013f8:	2d00      	cmp	r5, #0
 80013fa:	d10d      	bne.n	8001418 <__ledf2+0x90>
 80013fc:	4281      	cmp	r1, r0
 80013fe:	d016      	beq.n	800142e <__ledf2+0xa6>
 8001400:	2002      	movs	r0, #2
 8001402:	3901      	subs	r1, #1
 8001404:	4008      	ands	r0, r1
 8001406:	3801      	subs	r0, #1
 8001408:	e000      	b.n	800140c <__ledf2+0x84>
 800140a:	2002      	movs	r0, #2
 800140c:	bcf0      	pop	{r4, r5, r6, r7}
 800140e:	46bb      	mov	fp, r7
 8001410:	46b2      	mov	sl, r6
 8001412:	46a9      	mov	r9, r5
 8001414:	46a0      	mov	r8, r4
 8001416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001418:	2800      	cmp	r0, #0
 800141a:	d1f7      	bne.n	800140c <__ledf2+0x84>
 800141c:	2001      	movs	r0, #1
 800141e:	4240      	negs	r0, r0
 8001420:	e7f4      	b.n	800140c <__ledf2+0x84>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ea      	bne.n	80013fc <__ledf2+0x74>
 8001426:	464c      	mov	r4, r9
 8001428:	4326      	orrs	r6, r4
 800142a:	d1e7      	bne.n	80013fc <__ledf2+0x74>
 800142c:	e7e8      	b.n	8001400 <__ledf2+0x78>
 800142e:	429a      	cmp	r2, r3
 8001430:	dd06      	ble.n	8001440 <__ledf2+0xb8>
 8001432:	4243      	negs	r3, r0
 8001434:	4158      	adcs	r0, r3
 8001436:	2302      	movs	r3, #2
 8001438:	4240      	negs	r0, r0
 800143a:	4018      	ands	r0, r3
 800143c:	3801      	subs	r0, #1
 800143e:	e7e5      	b.n	800140c <__ledf2+0x84>
 8001440:	429a      	cmp	r2, r3
 8001442:	dbe9      	blt.n	8001418 <__ledf2+0x90>
 8001444:	454f      	cmp	r7, r9
 8001446:	d8db      	bhi.n	8001400 <__ledf2+0x78>
 8001448:	d006      	beq.n	8001458 <__ledf2+0xd0>
 800144a:	2000      	movs	r0, #0
 800144c:	454f      	cmp	r7, r9
 800144e:	d2dd      	bcs.n	800140c <__ledf2+0x84>
 8001450:	2900      	cmp	r1, #0
 8001452:	d0e3      	beq.n	800141c <__ledf2+0x94>
 8001454:	0008      	movs	r0, r1
 8001456:	e7d9      	b.n	800140c <__ledf2+0x84>
 8001458:	45c4      	cmp	ip, r8
 800145a:	d8d1      	bhi.n	8001400 <__ledf2+0x78>
 800145c:	2000      	movs	r0, #0
 800145e:	45c4      	cmp	ip, r8
 8001460:	d2d4      	bcs.n	800140c <__ledf2+0x84>
 8001462:	e7f5      	b.n	8001450 <__ledf2+0xc8>
 8001464:	000007ff 	.word	0x000007ff

08001468 <__aeabi_dmul>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4657      	mov	r7, sl
 800146c:	464e      	mov	r6, r9
 800146e:	4645      	mov	r5, r8
 8001470:	46de      	mov	lr, fp
 8001472:	b5e0      	push	{r5, r6, r7, lr}
 8001474:	4698      	mov	r8, r3
 8001476:	030c      	lsls	r4, r1, #12
 8001478:	004b      	lsls	r3, r1, #1
 800147a:	0006      	movs	r6, r0
 800147c:	4692      	mov	sl, r2
 800147e:	b087      	sub	sp, #28
 8001480:	0b24      	lsrs	r4, r4, #12
 8001482:	0d5b      	lsrs	r3, r3, #21
 8001484:	0fcf      	lsrs	r7, r1, #31
 8001486:	2b00      	cmp	r3, #0
 8001488:	d06c      	beq.n	8001564 <__aeabi_dmul+0xfc>
 800148a:	4add      	ldr	r2, [pc, #884]	; (8001800 <__aeabi_dmul+0x398>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x2a>
 8001490:	e086      	b.n	80015a0 <__aeabi_dmul+0x138>
 8001492:	0f42      	lsrs	r2, r0, #29
 8001494:	00e4      	lsls	r4, r4, #3
 8001496:	4314      	orrs	r4, r2
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	4314      	orrs	r4, r2
 800149e:	4ad9      	ldr	r2, [pc, #868]	; (8001804 <__aeabi_dmul+0x39c>)
 80014a0:	00c5      	lsls	r5, r0, #3
 80014a2:	4694      	mov	ip, r2
 80014a4:	4463      	add	r3, ip
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2300      	movs	r3, #0
 80014aa:	4699      	mov	r9, r3
 80014ac:	469b      	mov	fp, r3
 80014ae:	4643      	mov	r3, r8
 80014b0:	4642      	mov	r2, r8
 80014b2:	031e      	lsls	r6, r3, #12
 80014b4:	0fd2      	lsrs	r2, r2, #31
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4650      	mov	r0, sl
 80014ba:	4690      	mov	r8, r2
 80014bc:	0b36      	lsrs	r6, r6, #12
 80014be:	0d5b      	lsrs	r3, r3, #21
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dmul+0x5c>
 80014c2:	e078      	b.n	80015b6 <__aeabi_dmul+0x14e>
 80014c4:	4ace      	ldr	r2, [pc, #824]	; (8001800 <__aeabi_dmul+0x398>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01d      	beq.n	8001506 <__aeabi_dmul+0x9e>
 80014ca:	49ce      	ldr	r1, [pc, #824]	; (8001804 <__aeabi_dmul+0x39c>)
 80014cc:	0f42      	lsrs	r2, r0, #29
 80014ce:	468c      	mov	ip, r1
 80014d0:	9900      	ldr	r1, [sp, #0]
 80014d2:	4463      	add	r3, ip
 80014d4:	00f6      	lsls	r6, r6, #3
 80014d6:	468c      	mov	ip, r1
 80014d8:	4316      	orrs	r6, r2
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	449c      	add	ip, r3
 80014de:	0412      	lsls	r2, r2, #16
 80014e0:	4663      	mov	r3, ip
 80014e2:	4316      	orrs	r6, r2
 80014e4:	00c2      	lsls	r2, r0, #3
 80014e6:	2000      	movs	r0, #0
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	9900      	ldr	r1, [sp, #0]
 80014ec:	4643      	mov	r3, r8
 80014ee:	3101      	adds	r1, #1
 80014f0:	468c      	mov	ip, r1
 80014f2:	4649      	mov	r1, r9
 80014f4:	407b      	eors	r3, r7
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	290f      	cmp	r1, #15
 80014fa:	d900      	bls.n	80014fe <__aeabi_dmul+0x96>
 80014fc:	e07e      	b.n	80015fc <__aeabi_dmul+0x194>
 80014fe:	4bc2      	ldr	r3, [pc, #776]	; (8001808 <__aeabi_dmul+0x3a0>)
 8001500:	0089      	lsls	r1, r1, #2
 8001502:	5859      	ldr	r1, [r3, r1]
 8001504:	468f      	mov	pc, r1
 8001506:	4652      	mov	r2, sl
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	4332      	orrs	r2, r6
 800150c:	d000      	beq.n	8001510 <__aeabi_dmul+0xa8>
 800150e:	e156      	b.n	80017be <__aeabi_dmul+0x356>
 8001510:	49bb      	ldr	r1, [pc, #748]	; (8001800 <__aeabi_dmul+0x398>)
 8001512:	2600      	movs	r6, #0
 8001514:	468c      	mov	ip, r1
 8001516:	4463      	add	r3, ip
 8001518:	4649      	mov	r1, r9
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	4319      	orrs	r1, r3
 8001520:	4689      	mov	r9, r1
 8001522:	2002      	movs	r0, #2
 8001524:	e7e1      	b.n	80014ea <__aeabi_dmul+0x82>
 8001526:	4643      	mov	r3, r8
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	0034      	movs	r4, r6
 800152c:	0015      	movs	r5, r2
 800152e:	4683      	mov	fp, r0
 8001530:	465b      	mov	r3, fp
 8001532:	2b02      	cmp	r3, #2
 8001534:	d05e      	beq.n	80015f4 <__aeabi_dmul+0x18c>
 8001536:	2b03      	cmp	r3, #3
 8001538:	d100      	bne.n	800153c <__aeabi_dmul+0xd4>
 800153a:	e1f3      	b.n	8001924 <__aeabi_dmul+0x4bc>
 800153c:	2b01      	cmp	r3, #1
 800153e:	d000      	beq.n	8001542 <__aeabi_dmul+0xda>
 8001540:	e118      	b.n	8001774 <__aeabi_dmul+0x30c>
 8001542:	2200      	movs	r2, #0
 8001544:	2400      	movs	r4, #0
 8001546:	2500      	movs	r5, #0
 8001548:	9b01      	ldr	r3, [sp, #4]
 800154a:	0512      	lsls	r2, r2, #20
 800154c:	4322      	orrs	r2, r4
 800154e:	07db      	lsls	r3, r3, #31
 8001550:	431a      	orrs	r2, r3
 8001552:	0028      	movs	r0, r5
 8001554:	0011      	movs	r1, r2
 8001556:	b007      	add	sp, #28
 8001558:	bcf0      	pop	{r4, r5, r6, r7}
 800155a:	46bb      	mov	fp, r7
 800155c:	46b2      	mov	sl, r6
 800155e:	46a9      	mov	r9, r5
 8001560:	46a0      	mov	r8, r4
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	0025      	movs	r5, r4
 8001566:	4305      	orrs	r5, r0
 8001568:	d100      	bne.n	800156c <__aeabi_dmul+0x104>
 800156a:	e141      	b.n	80017f0 <__aeabi_dmul+0x388>
 800156c:	2c00      	cmp	r4, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_dmul+0x10a>
 8001570:	e1ad      	b.n	80018ce <__aeabi_dmul+0x466>
 8001572:	0020      	movs	r0, r4
 8001574:	f000 fea8 	bl	80022c8 <__clzsi2>
 8001578:	0001      	movs	r1, r0
 800157a:	0002      	movs	r2, r0
 800157c:	390b      	subs	r1, #11
 800157e:	231d      	movs	r3, #29
 8001580:	0010      	movs	r0, r2
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	0031      	movs	r1, r6
 8001586:	0035      	movs	r5, r6
 8001588:	3808      	subs	r0, #8
 800158a:	4084      	lsls	r4, r0
 800158c:	40d9      	lsrs	r1, r3
 800158e:	4085      	lsls	r5, r0
 8001590:	430c      	orrs	r4, r1
 8001592:	489e      	ldr	r0, [pc, #632]	; (800180c <__aeabi_dmul+0x3a4>)
 8001594:	1a83      	subs	r3, r0, r2
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	4699      	mov	r9, r3
 800159c:	469b      	mov	fp, r3
 800159e:	e786      	b.n	80014ae <__aeabi_dmul+0x46>
 80015a0:	0005      	movs	r5, r0
 80015a2:	4325      	orrs	r5, r4
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dmul+0x140>
 80015a6:	e11c      	b.n	80017e2 <__aeabi_dmul+0x37a>
 80015a8:	2208      	movs	r2, #8
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2302      	movs	r3, #2
 80015ae:	2400      	movs	r4, #0
 80015b0:	4691      	mov	r9, r2
 80015b2:	469b      	mov	fp, r3
 80015b4:	e77b      	b.n	80014ae <__aeabi_dmul+0x46>
 80015b6:	4652      	mov	r2, sl
 80015b8:	4332      	orrs	r2, r6
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x156>
 80015bc:	e10a      	b.n	80017d4 <__aeabi_dmul+0x36c>
 80015be:	2e00      	cmp	r6, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dmul+0x15c>
 80015c2:	e176      	b.n	80018b2 <__aeabi_dmul+0x44a>
 80015c4:	0030      	movs	r0, r6
 80015c6:	f000 fe7f 	bl	80022c8 <__clzsi2>
 80015ca:	0002      	movs	r2, r0
 80015cc:	3a0b      	subs	r2, #11
 80015ce:	231d      	movs	r3, #29
 80015d0:	0001      	movs	r1, r0
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	4652      	mov	r2, sl
 80015d6:	3908      	subs	r1, #8
 80015d8:	40da      	lsrs	r2, r3
 80015da:	408e      	lsls	r6, r1
 80015dc:	4316      	orrs	r6, r2
 80015de:	4652      	mov	r2, sl
 80015e0:	408a      	lsls	r2, r1
 80015e2:	9b00      	ldr	r3, [sp, #0]
 80015e4:	4989      	ldr	r1, [pc, #548]	; (800180c <__aeabi_dmul+0x3a4>)
 80015e6:	1a18      	subs	r0, r3, r0
 80015e8:	0003      	movs	r3, r0
 80015ea:	468c      	mov	ip, r1
 80015ec:	4463      	add	r3, ip
 80015ee:	2000      	movs	r0, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	e77a      	b.n	80014ea <__aeabi_dmul+0x82>
 80015f4:	2400      	movs	r4, #0
 80015f6:	2500      	movs	r5, #0
 80015f8:	4a81      	ldr	r2, [pc, #516]	; (8001800 <__aeabi_dmul+0x398>)
 80015fa:	e7a5      	b.n	8001548 <__aeabi_dmul+0xe0>
 80015fc:	0c2f      	lsrs	r7, r5, #16
 80015fe:	042d      	lsls	r5, r5, #16
 8001600:	0c2d      	lsrs	r5, r5, #16
 8001602:	002b      	movs	r3, r5
 8001604:	0c11      	lsrs	r1, r2, #16
 8001606:	0412      	lsls	r2, r2, #16
 8001608:	0c12      	lsrs	r2, r2, #16
 800160a:	4353      	muls	r3, r2
 800160c:	4698      	mov	r8, r3
 800160e:	0013      	movs	r3, r2
 8001610:	0028      	movs	r0, r5
 8001612:	437b      	muls	r3, r7
 8001614:	4699      	mov	r9, r3
 8001616:	4348      	muls	r0, r1
 8001618:	4448      	add	r0, r9
 800161a:	4683      	mov	fp, r0
 800161c:	4640      	mov	r0, r8
 800161e:	000b      	movs	r3, r1
 8001620:	0c00      	lsrs	r0, r0, #16
 8001622:	4682      	mov	sl, r0
 8001624:	4658      	mov	r0, fp
 8001626:	437b      	muls	r3, r7
 8001628:	4450      	add	r0, sl
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	4581      	cmp	r9, r0
 800162e:	d906      	bls.n	800163e <__aeabi_dmul+0x1d6>
 8001630:	469a      	mov	sl, r3
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	4699      	mov	r9, r3
 8001638:	44ca      	add	sl, r9
 800163a:	4653      	mov	r3, sl
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	0c03      	lsrs	r3, r0, #16
 8001640:	469b      	mov	fp, r3
 8001642:	4643      	mov	r3, r8
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	0400      	lsls	r0, r0, #16
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	4698      	mov	r8, r3
 800164c:	0003      	movs	r3, r0
 800164e:	4443      	add	r3, r8
 8001650:	9304      	str	r3, [sp, #16]
 8001652:	0c33      	lsrs	r3, r6, #16
 8001654:	4699      	mov	r9, r3
 8001656:	002b      	movs	r3, r5
 8001658:	0436      	lsls	r6, r6, #16
 800165a:	0c36      	lsrs	r6, r6, #16
 800165c:	4373      	muls	r3, r6
 800165e:	4698      	mov	r8, r3
 8001660:	0033      	movs	r3, r6
 8001662:	437b      	muls	r3, r7
 8001664:	469a      	mov	sl, r3
 8001666:	464b      	mov	r3, r9
 8001668:	435d      	muls	r5, r3
 800166a:	435f      	muls	r7, r3
 800166c:	4643      	mov	r3, r8
 800166e:	4455      	add	r5, sl
 8001670:	0c18      	lsrs	r0, r3, #16
 8001672:	1940      	adds	r0, r0, r5
 8001674:	4582      	cmp	sl, r0
 8001676:	d903      	bls.n	8001680 <__aeabi_dmul+0x218>
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	469a      	mov	sl, r3
 800167e:	4457      	add	r7, sl
 8001680:	0c05      	lsrs	r5, r0, #16
 8001682:	19eb      	adds	r3, r5, r7
 8001684:	9305      	str	r3, [sp, #20]
 8001686:	4643      	mov	r3, r8
 8001688:	041d      	lsls	r5, r3, #16
 800168a:	0c2d      	lsrs	r5, r5, #16
 800168c:	0400      	lsls	r0, r0, #16
 800168e:	1940      	adds	r0, r0, r5
 8001690:	0c25      	lsrs	r5, r4, #16
 8001692:	0424      	lsls	r4, r4, #16
 8001694:	0c24      	lsrs	r4, r4, #16
 8001696:	0027      	movs	r7, r4
 8001698:	4357      	muls	r7, r2
 800169a:	436a      	muls	r2, r5
 800169c:	4690      	mov	r8, r2
 800169e:	002a      	movs	r2, r5
 80016a0:	0c3b      	lsrs	r3, r7, #16
 80016a2:	469a      	mov	sl, r3
 80016a4:	434a      	muls	r2, r1
 80016a6:	4361      	muls	r1, r4
 80016a8:	4441      	add	r1, r8
 80016aa:	4451      	add	r1, sl
 80016ac:	4483      	add	fp, r0
 80016ae:	4588      	cmp	r8, r1
 80016b0:	d903      	bls.n	80016ba <__aeabi_dmul+0x252>
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	4698      	mov	r8, r3
 80016b8:	4442      	add	r2, r8
 80016ba:	043f      	lsls	r7, r7, #16
 80016bc:	0c0b      	lsrs	r3, r1, #16
 80016be:	0c3f      	lsrs	r7, r7, #16
 80016c0:	0409      	lsls	r1, r1, #16
 80016c2:	19c9      	adds	r1, r1, r7
 80016c4:	0027      	movs	r7, r4
 80016c6:	4698      	mov	r8, r3
 80016c8:	464b      	mov	r3, r9
 80016ca:	4377      	muls	r7, r6
 80016cc:	435c      	muls	r4, r3
 80016ce:	436e      	muls	r6, r5
 80016d0:	435d      	muls	r5, r3
 80016d2:	0c3b      	lsrs	r3, r7, #16
 80016d4:	4699      	mov	r9, r3
 80016d6:	19a4      	adds	r4, r4, r6
 80016d8:	444c      	add	r4, r9
 80016da:	4442      	add	r2, r8
 80016dc:	9503      	str	r5, [sp, #12]
 80016de:	42a6      	cmp	r6, r4
 80016e0:	d904      	bls.n	80016ec <__aeabi_dmul+0x284>
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	4698      	mov	r8, r3
 80016e8:	4445      	add	r5, r8
 80016ea:	9503      	str	r5, [sp, #12]
 80016ec:	9b02      	ldr	r3, [sp, #8]
 80016ee:	043f      	lsls	r7, r7, #16
 80016f0:	445b      	add	r3, fp
 80016f2:	001e      	movs	r6, r3
 80016f4:	4283      	cmp	r3, r0
 80016f6:	4180      	sbcs	r0, r0
 80016f8:	0423      	lsls	r3, r4, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	9b05      	ldr	r3, [sp, #20]
 80016fe:	0c3f      	lsrs	r7, r7, #16
 8001700:	4447      	add	r7, r8
 8001702:	4698      	mov	r8, r3
 8001704:	1876      	adds	r6, r6, r1
 8001706:	428e      	cmp	r6, r1
 8001708:	4189      	sbcs	r1, r1
 800170a:	4447      	add	r7, r8
 800170c:	4240      	negs	r0, r0
 800170e:	183d      	adds	r5, r7, r0
 8001710:	46a8      	mov	r8, r5
 8001712:	4693      	mov	fp, r2
 8001714:	4249      	negs	r1, r1
 8001716:	468a      	mov	sl, r1
 8001718:	44c3      	add	fp, r8
 800171a:	429f      	cmp	r7, r3
 800171c:	41bf      	sbcs	r7, r7
 800171e:	4580      	cmp	r8, r0
 8001720:	4180      	sbcs	r0, r0
 8001722:	9b03      	ldr	r3, [sp, #12]
 8001724:	44da      	add	sl, fp
 8001726:	4698      	mov	r8, r3
 8001728:	4653      	mov	r3, sl
 800172a:	4240      	negs	r0, r0
 800172c:	427f      	negs	r7, r7
 800172e:	4307      	orrs	r7, r0
 8001730:	0c24      	lsrs	r4, r4, #16
 8001732:	4593      	cmp	fp, r2
 8001734:	4192      	sbcs	r2, r2
 8001736:	458a      	cmp	sl, r1
 8001738:	4189      	sbcs	r1, r1
 800173a:	193f      	adds	r7, r7, r4
 800173c:	0ddc      	lsrs	r4, r3, #23
 800173e:	9b04      	ldr	r3, [sp, #16]
 8001740:	0275      	lsls	r5, r6, #9
 8001742:	431d      	orrs	r5, r3
 8001744:	1e68      	subs	r0, r5, #1
 8001746:	4185      	sbcs	r5, r0
 8001748:	4653      	mov	r3, sl
 800174a:	4252      	negs	r2, r2
 800174c:	4249      	negs	r1, r1
 800174e:	430a      	orrs	r2, r1
 8001750:	18bf      	adds	r7, r7, r2
 8001752:	4447      	add	r7, r8
 8001754:	0df6      	lsrs	r6, r6, #23
 8001756:	027f      	lsls	r7, r7, #9
 8001758:	4335      	orrs	r5, r6
 800175a:	025a      	lsls	r2, r3, #9
 800175c:	433c      	orrs	r4, r7
 800175e:	4315      	orrs	r5, r2
 8001760:	01fb      	lsls	r3, r7, #7
 8001762:	d400      	bmi.n	8001766 <__aeabi_dmul+0x2fe>
 8001764:	e0c1      	b.n	80018ea <__aeabi_dmul+0x482>
 8001766:	2101      	movs	r1, #1
 8001768:	086a      	lsrs	r2, r5, #1
 800176a:	400d      	ands	r5, r1
 800176c:	4315      	orrs	r5, r2
 800176e:	07e2      	lsls	r2, r4, #31
 8001770:	4315      	orrs	r5, r2
 8001772:	0864      	lsrs	r4, r4, #1
 8001774:	4926      	ldr	r1, [pc, #152]	; (8001810 <__aeabi_dmul+0x3a8>)
 8001776:	4461      	add	r1, ip
 8001778:	2900      	cmp	r1, #0
 800177a:	dd56      	ble.n	800182a <__aeabi_dmul+0x3c2>
 800177c:	076b      	lsls	r3, r5, #29
 800177e:	d009      	beq.n	8001794 <__aeabi_dmul+0x32c>
 8001780:	220f      	movs	r2, #15
 8001782:	402a      	ands	r2, r5
 8001784:	2a04      	cmp	r2, #4
 8001786:	d005      	beq.n	8001794 <__aeabi_dmul+0x32c>
 8001788:	1d2a      	adds	r2, r5, #4
 800178a:	42aa      	cmp	r2, r5
 800178c:	41ad      	sbcs	r5, r5
 800178e:	426d      	negs	r5, r5
 8001790:	1964      	adds	r4, r4, r5
 8001792:	0015      	movs	r5, r2
 8001794:	01e3      	lsls	r3, r4, #7
 8001796:	d504      	bpl.n	80017a2 <__aeabi_dmul+0x33a>
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <__aeabi_dmul+0x3ac>)
 800179c:	00c9      	lsls	r1, r1, #3
 800179e:	4014      	ands	r4, r2
 80017a0:	4461      	add	r1, ip
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <__aeabi_dmul+0x3b0>)
 80017a4:	4291      	cmp	r1, r2
 80017a6:	dd00      	ble.n	80017aa <__aeabi_dmul+0x342>
 80017a8:	e724      	b.n	80015f4 <__aeabi_dmul+0x18c>
 80017aa:	0762      	lsls	r2, r4, #29
 80017ac:	08ed      	lsrs	r5, r5, #3
 80017ae:	0264      	lsls	r4, r4, #9
 80017b0:	0549      	lsls	r1, r1, #21
 80017b2:	4315      	orrs	r5, r2
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	0d4a      	lsrs	r2, r1, #21
 80017b8:	e6c6      	b.n	8001548 <__aeabi_dmul+0xe0>
 80017ba:	9701      	str	r7, [sp, #4]
 80017bc:	e6b8      	b.n	8001530 <__aeabi_dmul+0xc8>
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <__aeabi_dmul+0x398>)
 80017c0:	2003      	movs	r0, #3
 80017c2:	4694      	mov	ip, r2
 80017c4:	4463      	add	r3, ip
 80017c6:	464a      	mov	r2, r9
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2303      	movs	r3, #3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	4691      	mov	r9, r2
 80017d0:	4652      	mov	r2, sl
 80017d2:	e68a      	b.n	80014ea <__aeabi_dmul+0x82>
 80017d4:	4649      	mov	r1, r9
 80017d6:	2301      	movs	r3, #1
 80017d8:	4319      	orrs	r1, r3
 80017da:	4689      	mov	r9, r1
 80017dc:	2600      	movs	r6, #0
 80017de:	2001      	movs	r0, #1
 80017e0:	e683      	b.n	80014ea <__aeabi_dmul+0x82>
 80017e2:	220c      	movs	r2, #12
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2303      	movs	r3, #3
 80017e8:	0005      	movs	r5, r0
 80017ea:	4691      	mov	r9, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	e65e      	b.n	80014ae <__aeabi_dmul+0x46>
 80017f0:	2304      	movs	r3, #4
 80017f2:	4699      	mov	r9, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	2400      	movs	r4, #0
 80017fc:	469b      	mov	fp, r3
 80017fe:	e656      	b.n	80014ae <__aeabi_dmul+0x46>
 8001800:	000007ff 	.word	0x000007ff
 8001804:	fffffc01 	.word	0xfffffc01
 8001808:	0800a898 	.word	0x0800a898
 800180c:	fffffc0d 	.word	0xfffffc0d
 8001810:	000003ff 	.word	0x000003ff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	000007fe 	.word	0x000007fe
 800181c:	2300      	movs	r3, #0
 800181e:	2480      	movs	r4, #128	; 0x80
 8001820:	2500      	movs	r5, #0
 8001822:	4a44      	ldr	r2, [pc, #272]	; (8001934 <__aeabi_dmul+0x4cc>)
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	0324      	lsls	r4, r4, #12
 8001828:	e68e      	b.n	8001548 <__aeabi_dmul+0xe0>
 800182a:	2001      	movs	r0, #1
 800182c:	1a40      	subs	r0, r0, r1
 800182e:	2838      	cmp	r0, #56	; 0x38
 8001830:	dd00      	ble.n	8001834 <__aeabi_dmul+0x3cc>
 8001832:	e686      	b.n	8001542 <__aeabi_dmul+0xda>
 8001834:	281f      	cmp	r0, #31
 8001836:	dd5b      	ble.n	80018f0 <__aeabi_dmul+0x488>
 8001838:	221f      	movs	r2, #31
 800183a:	0023      	movs	r3, r4
 800183c:	4252      	negs	r2, r2
 800183e:	1a51      	subs	r1, r2, r1
 8001840:	40cb      	lsrs	r3, r1
 8001842:	0019      	movs	r1, r3
 8001844:	2820      	cmp	r0, #32
 8001846:	d003      	beq.n	8001850 <__aeabi_dmul+0x3e8>
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <__aeabi_dmul+0x4d0>)
 800184a:	4462      	add	r2, ip
 800184c:	4094      	lsls	r4, r2
 800184e:	4325      	orrs	r5, r4
 8001850:	1e6a      	subs	r2, r5, #1
 8001852:	4195      	sbcs	r5, r2
 8001854:	002a      	movs	r2, r5
 8001856:	430a      	orrs	r2, r1
 8001858:	2107      	movs	r1, #7
 800185a:	000d      	movs	r5, r1
 800185c:	2400      	movs	r4, #0
 800185e:	4015      	ands	r5, r2
 8001860:	4211      	tst	r1, r2
 8001862:	d05b      	beq.n	800191c <__aeabi_dmul+0x4b4>
 8001864:	210f      	movs	r1, #15
 8001866:	2400      	movs	r4, #0
 8001868:	4011      	ands	r1, r2
 800186a:	2904      	cmp	r1, #4
 800186c:	d053      	beq.n	8001916 <__aeabi_dmul+0x4ae>
 800186e:	1d11      	adds	r1, r2, #4
 8001870:	4291      	cmp	r1, r2
 8001872:	4192      	sbcs	r2, r2
 8001874:	4252      	negs	r2, r2
 8001876:	18a4      	adds	r4, r4, r2
 8001878:	000a      	movs	r2, r1
 800187a:	0223      	lsls	r3, r4, #8
 800187c:	d54b      	bpl.n	8001916 <__aeabi_dmul+0x4ae>
 800187e:	2201      	movs	r2, #1
 8001880:	2400      	movs	r4, #0
 8001882:	2500      	movs	r5, #0
 8001884:	e660      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	031b      	lsls	r3, r3, #12
 800188a:	421c      	tst	r4, r3
 800188c:	d009      	beq.n	80018a2 <__aeabi_dmul+0x43a>
 800188e:	421e      	tst	r6, r3
 8001890:	d107      	bne.n	80018a2 <__aeabi_dmul+0x43a>
 8001892:	4333      	orrs	r3, r6
 8001894:	031c      	lsls	r4, r3, #12
 8001896:	4643      	mov	r3, r8
 8001898:	0015      	movs	r5, r2
 800189a:	0b24      	lsrs	r4, r4, #12
 800189c:	4a25      	ldr	r2, [pc, #148]	; (8001934 <__aeabi_dmul+0x4cc>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	e652      	b.n	8001548 <__aeabi_dmul+0xe0>
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0312      	lsls	r2, r2, #12
 80018a6:	4314      	orrs	r4, r2
 80018a8:	0324      	lsls	r4, r4, #12
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <__aeabi_dmul+0x4cc>)
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	9701      	str	r7, [sp, #4]
 80018b0:	e64a      	b.n	8001548 <__aeabi_dmul+0xe0>
 80018b2:	f000 fd09 	bl	80022c8 <__clzsi2>
 80018b6:	0003      	movs	r3, r0
 80018b8:	001a      	movs	r2, r3
 80018ba:	3215      	adds	r2, #21
 80018bc:	3020      	adds	r0, #32
 80018be:	2a1c      	cmp	r2, #28
 80018c0:	dc00      	bgt.n	80018c4 <__aeabi_dmul+0x45c>
 80018c2:	e684      	b.n	80015ce <__aeabi_dmul+0x166>
 80018c4:	4656      	mov	r6, sl
 80018c6:	3b08      	subs	r3, #8
 80018c8:	2200      	movs	r2, #0
 80018ca:	409e      	lsls	r6, r3
 80018cc:	e689      	b.n	80015e2 <__aeabi_dmul+0x17a>
 80018ce:	f000 fcfb 	bl	80022c8 <__clzsi2>
 80018d2:	0001      	movs	r1, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	3115      	adds	r1, #21
 80018d8:	3220      	adds	r2, #32
 80018da:	291c      	cmp	r1, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x478>
 80018de:	e64e      	b.n	800157e <__aeabi_dmul+0x116>
 80018e0:	0034      	movs	r4, r6
 80018e2:	3808      	subs	r0, #8
 80018e4:	2500      	movs	r5, #0
 80018e6:	4084      	lsls	r4, r0
 80018e8:	e653      	b.n	8001592 <__aeabi_dmul+0x12a>
 80018ea:	9b00      	ldr	r3, [sp, #0]
 80018ec:	469c      	mov	ip, r3
 80018ee:	e741      	b.n	8001774 <__aeabi_dmul+0x30c>
 80018f0:	4912      	ldr	r1, [pc, #72]	; (800193c <__aeabi_dmul+0x4d4>)
 80018f2:	0022      	movs	r2, r4
 80018f4:	4461      	add	r1, ip
 80018f6:	002e      	movs	r6, r5
 80018f8:	408d      	lsls	r5, r1
 80018fa:	408a      	lsls	r2, r1
 80018fc:	40c6      	lsrs	r6, r0
 80018fe:	1e69      	subs	r1, r5, #1
 8001900:	418d      	sbcs	r5, r1
 8001902:	4332      	orrs	r2, r6
 8001904:	432a      	orrs	r2, r5
 8001906:	40c4      	lsrs	r4, r0
 8001908:	0753      	lsls	r3, r2, #29
 800190a:	d0b6      	beq.n	800187a <__aeabi_dmul+0x412>
 800190c:	210f      	movs	r1, #15
 800190e:	4011      	ands	r1, r2
 8001910:	2904      	cmp	r1, #4
 8001912:	d1ac      	bne.n	800186e <__aeabi_dmul+0x406>
 8001914:	e7b1      	b.n	800187a <__aeabi_dmul+0x412>
 8001916:	0765      	lsls	r5, r4, #29
 8001918:	0264      	lsls	r4, r4, #9
 800191a:	0b24      	lsrs	r4, r4, #12
 800191c:	08d2      	lsrs	r2, r2, #3
 800191e:	4315      	orrs	r5, r2
 8001920:	2200      	movs	r2, #0
 8001922:	e611      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	0312      	lsls	r2, r2, #12
 8001928:	4314      	orrs	r4, r2
 800192a:	0324      	lsls	r4, r4, #12
 800192c:	4a01      	ldr	r2, [pc, #4]	; (8001934 <__aeabi_dmul+0x4cc>)
 800192e:	0b24      	lsrs	r4, r4, #12
 8001930:	e60a      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	000007ff 	.word	0x000007ff
 8001938:	0000043e 	.word	0x0000043e
 800193c:	0000041e 	.word	0x0000041e

08001940 <__aeabi_dsub>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	4657      	mov	r7, sl
 8001944:	464e      	mov	r6, r9
 8001946:	4645      	mov	r5, r8
 8001948:	46de      	mov	lr, fp
 800194a:	0004      	movs	r4, r0
 800194c:	b5e0      	push	{r5, r6, r7, lr}
 800194e:	001f      	movs	r7, r3
 8001950:	0010      	movs	r0, r2
 8001952:	030b      	lsls	r3, r1, #12
 8001954:	0f62      	lsrs	r2, r4, #29
 8001956:	004e      	lsls	r6, r1, #1
 8001958:	0fcd      	lsrs	r5, r1, #31
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	0339      	lsls	r1, r7, #12
 800195e:	4313      	orrs	r3, r2
 8001960:	0a49      	lsrs	r1, r1, #9
 8001962:	00e2      	lsls	r2, r4, #3
 8001964:	0f44      	lsrs	r4, r0, #29
 8001966:	4321      	orrs	r1, r4
 8001968:	4cc2      	ldr	r4, [pc, #776]	; (8001c74 <__aeabi_dsub+0x334>)
 800196a:	4691      	mov	r9, r2
 800196c:	4692      	mov	sl, r2
 800196e:	00c0      	lsls	r0, r0, #3
 8001970:	007a      	lsls	r2, r7, #1
 8001972:	4680      	mov	r8, r0
 8001974:	0d76      	lsrs	r6, r6, #21
 8001976:	0d52      	lsrs	r2, r2, #21
 8001978:	0fff      	lsrs	r7, r7, #31
 800197a:	42a2      	cmp	r2, r4
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x40>
 800197e:	e0b4      	b.n	8001aea <__aeabi_dsub+0x1aa>
 8001980:	2401      	movs	r4, #1
 8001982:	4067      	eors	r7, r4
 8001984:	46bb      	mov	fp, r7
 8001986:	42bd      	cmp	r5, r7
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x4c>
 800198a:	e088      	b.n	8001a9e <__aeabi_dsub+0x15e>
 800198c:	1ab4      	subs	r4, r6, r2
 800198e:	46a4      	mov	ip, r4
 8001990:	2c00      	cmp	r4, #0
 8001992:	dc00      	bgt.n	8001996 <__aeabi_dsub+0x56>
 8001994:	e0b2      	b.n	8001afc <__aeabi_dsub+0x1bc>
 8001996:	2a00      	cmp	r2, #0
 8001998:	d100      	bne.n	800199c <__aeabi_dsub+0x5c>
 800199a:	e0c5      	b.n	8001b28 <__aeabi_dsub+0x1e8>
 800199c:	4ab5      	ldr	r2, [pc, #724]	; (8001c74 <__aeabi_dsub+0x334>)
 800199e:	4296      	cmp	r6, r2
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x64>
 80019a2:	e28b      	b.n	8001ebc <__aeabi_dsub+0x57c>
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	0412      	lsls	r2, r2, #16
 80019a8:	4311      	orrs	r1, r2
 80019aa:	4662      	mov	r2, ip
 80019ac:	2a38      	cmp	r2, #56	; 0x38
 80019ae:	dd00      	ble.n	80019b2 <__aeabi_dsub+0x72>
 80019b0:	e1a1      	b.n	8001cf6 <__aeabi_dsub+0x3b6>
 80019b2:	2a1f      	cmp	r2, #31
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0x78>
 80019b6:	e216      	b.n	8001de6 <__aeabi_dsub+0x4a6>
 80019b8:	2720      	movs	r7, #32
 80019ba:	000c      	movs	r4, r1
 80019bc:	1abf      	subs	r7, r7, r2
 80019be:	40bc      	lsls	r4, r7
 80019c0:	0002      	movs	r2, r0
 80019c2:	46a0      	mov	r8, r4
 80019c4:	4664      	mov	r4, ip
 80019c6:	40b8      	lsls	r0, r7
 80019c8:	40e2      	lsrs	r2, r4
 80019ca:	4644      	mov	r4, r8
 80019cc:	4314      	orrs	r4, r2
 80019ce:	0002      	movs	r2, r0
 80019d0:	1e50      	subs	r0, r2, #1
 80019d2:	4182      	sbcs	r2, r0
 80019d4:	4660      	mov	r0, ip
 80019d6:	40c1      	lsrs	r1, r0
 80019d8:	4322      	orrs	r2, r4
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	4649      	mov	r1, r9
 80019de:	1a8c      	subs	r4, r1, r2
 80019e0:	45a1      	cmp	r9, r4
 80019e2:	4192      	sbcs	r2, r2
 80019e4:	4252      	negs	r2, r2
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	4698      	mov	r8, r3
 80019ea:	4643      	mov	r3, r8
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	d400      	bmi.n	80019f2 <__aeabi_dsub+0xb2>
 80019f0:	e117      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 80019f2:	4643      	mov	r3, r8
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	0a5b      	lsrs	r3, r3, #9
 80019f8:	4698      	mov	r8, r3
 80019fa:	4643      	mov	r3, r8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0xc2>
 8001a00:	e16c      	b.n	8001cdc <__aeabi_dsub+0x39c>
 8001a02:	4640      	mov	r0, r8
 8001a04:	f000 fc60 	bl	80022c8 <__clzsi2>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	3a08      	subs	r2, #8
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	0020      	movs	r0, r4
 8001a10:	4643      	mov	r3, r8
 8001a12:	1a89      	subs	r1, r1, r2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	40c8      	lsrs	r0, r1
 8001a18:	4094      	lsls	r4, r2
 8001a1a:	4303      	orrs	r3, r0
 8001a1c:	4296      	cmp	r6, r2
 8001a1e:	dd00      	ble.n	8001a22 <__aeabi_dsub+0xe2>
 8001a20:	e157      	b.n	8001cd2 <__aeabi_dsub+0x392>
 8001a22:	1b96      	subs	r6, r2, r6
 8001a24:	1c71      	adds	r1, r6, #1
 8001a26:	291f      	cmp	r1, #31
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0xec>
 8001a2a:	e1cb      	b.n	8001dc4 <__aeabi_dsub+0x484>
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	0018      	movs	r0, r3
 8001a30:	0026      	movs	r6, r4
 8001a32:	1a52      	subs	r2, r2, r1
 8001a34:	4094      	lsls	r4, r2
 8001a36:	4090      	lsls	r0, r2
 8001a38:	40ce      	lsrs	r6, r1
 8001a3a:	40cb      	lsrs	r3, r1
 8001a3c:	1e62      	subs	r2, r4, #1
 8001a3e:	4194      	sbcs	r4, r2
 8001a40:	4330      	orrs	r0, r6
 8001a42:	4698      	mov	r8, r3
 8001a44:	2600      	movs	r6, #0
 8001a46:	4304      	orrs	r4, r0
 8001a48:	0763      	lsls	r3, r4, #29
 8001a4a:	d009      	beq.n	8001a60 <__aeabi_dsub+0x120>
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	4023      	ands	r3, r4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d005      	beq.n	8001a60 <__aeabi_dsub+0x120>
 8001a54:	1d23      	adds	r3, r4, #4
 8001a56:	42a3      	cmp	r3, r4
 8001a58:	41a4      	sbcs	r4, r4
 8001a5a:	4264      	negs	r4, r4
 8001a5c:	44a0      	add	r8, r4
 8001a5e:	001c      	movs	r4, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	d400      	bmi.n	8001a68 <__aeabi_dsub+0x128>
 8001a66:	e0df      	b.n	8001c28 <__aeabi_dsub+0x2e8>
 8001a68:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <__aeabi_dsub+0x334>)
 8001a6a:	3601      	adds	r6, #1
 8001a6c:	429e      	cmp	r6, r3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x132>
 8001a70:	e0fb      	b.n	8001c6a <__aeabi_dsub+0x32a>
 8001a72:	4642      	mov	r2, r8
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <__aeabi_dsub+0x338>)
 8001a76:	08e4      	lsrs	r4, r4, #3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	0571      	lsls	r1, r6, #21
 8001a7e:	0752      	lsls	r2, r2, #29
 8001a80:	025b      	lsls	r3, r3, #9
 8001a82:	4322      	orrs	r2, r4
 8001a84:	0b1b      	lsrs	r3, r3, #12
 8001a86:	0d49      	lsrs	r1, r1, #21
 8001a88:	0509      	lsls	r1, r1, #20
 8001a8a:	07ed      	lsls	r5, r5, #31
 8001a8c:	4319      	orrs	r1, r3
 8001a8e:	4329      	orrs	r1, r5
 8001a90:	0010      	movs	r0, r2
 8001a92:	bcf0      	pop	{r4, r5, r6, r7}
 8001a94:	46bb      	mov	fp, r7
 8001a96:	46b2      	mov	sl, r6
 8001a98:	46a9      	mov	r9, r5
 8001a9a:	46a0      	mov	r8, r4
 8001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9e:	1ab4      	subs	r4, r6, r2
 8001aa0:	46a4      	mov	ip, r4
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	dd58      	ble.n	8001b58 <__aeabi_dsub+0x218>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x16c>
 8001aaa:	e09e      	b.n	8001bea <__aeabi_dsub+0x2aa>
 8001aac:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <__aeabi_dsub+0x334>)
 8001aae:	4296      	cmp	r6, r2
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x174>
 8001ab2:	e13b      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	4662      	mov	r2, ip
 8001abc:	2a38      	cmp	r2, #56	; 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dsub+0x182>
 8001ac0:	e0c1      	b.n	8001c46 <__aeabi_dsub+0x306>
 8001ac2:	2a1f      	cmp	r2, #31
 8001ac4:	dc00      	bgt.n	8001ac8 <__aeabi_dsub+0x188>
 8001ac6:	e1bb      	b.n	8001e40 <__aeabi_dsub+0x500>
 8001ac8:	000c      	movs	r4, r1
 8001aca:	3a20      	subs	r2, #32
 8001acc:	40d4      	lsrs	r4, r2
 8001ace:	0022      	movs	r2, r4
 8001ad0:	4664      	mov	r4, ip
 8001ad2:	2c20      	cmp	r4, #32
 8001ad4:	d004      	beq.n	8001ae0 <__aeabi_dsub+0x1a0>
 8001ad6:	2740      	movs	r7, #64	; 0x40
 8001ad8:	1b3f      	subs	r7, r7, r4
 8001ada:	40b9      	lsls	r1, r7
 8001adc:	4308      	orrs	r0, r1
 8001ade:	4680      	mov	r8, r0
 8001ae0:	4644      	mov	r4, r8
 8001ae2:	1e61      	subs	r1, r4, #1
 8001ae4:	418c      	sbcs	r4, r1
 8001ae6:	4314      	orrs	r4, r2
 8001ae8:	e0b1      	b.n	8001c4e <__aeabi_dsub+0x30e>
 8001aea:	000c      	movs	r4, r1
 8001aec:	4304      	orrs	r4, r0
 8001aee:	d02a      	beq.n	8001b46 <__aeabi_dsub+0x206>
 8001af0:	46bb      	mov	fp, r7
 8001af2:	42bd      	cmp	r5, r7
 8001af4:	d02d      	beq.n	8001b52 <__aeabi_dsub+0x212>
 8001af6:	4c61      	ldr	r4, [pc, #388]	; (8001c7c <__aeabi_dsub+0x33c>)
 8001af8:	46a4      	mov	ip, r4
 8001afa:	44b4      	add	ip, r6
 8001afc:	4664      	mov	r4, ip
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d05c      	beq.n	8001bbc <__aeabi_dsub+0x27c>
 8001b02:	1b94      	subs	r4, r2, r6
 8001b04:	46a4      	mov	ip, r4
 8001b06:	2e00      	cmp	r6, #0
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dsub+0x1cc>
 8001b0a:	e115      	b.n	8001d38 <__aeabi_dsub+0x3f8>
 8001b0c:	464d      	mov	r5, r9
 8001b0e:	431d      	orrs	r5, r3
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x1d4>
 8001b12:	e1c3      	b.n	8001e9c <__aeabi_dsub+0x55c>
 8001b14:	1e65      	subs	r5, r4, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x1dc>
 8001b1a:	e20c      	b.n	8001f36 <__aeabi_dsub+0x5f6>
 8001b1c:	4e55      	ldr	r6, [pc, #340]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b1e:	42b4      	cmp	r4, r6
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x1e4>
 8001b22:	e1f8      	b.n	8001f16 <__aeabi_dsub+0x5d6>
 8001b24:	46ac      	mov	ip, r5
 8001b26:	e10e      	b.n	8001d46 <__aeabi_dsub+0x406>
 8001b28:	000a      	movs	r2, r1
 8001b2a:	4302      	orrs	r2, r0
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x1f0>
 8001b2e:	e136      	b.n	8001d9e <__aeabi_dsub+0x45e>
 8001b30:	0022      	movs	r2, r4
 8001b32:	3a01      	subs	r2, #1
 8001b34:	2c01      	cmp	r4, #1
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x1fa>
 8001b38:	e1c6      	b.n	8001ec8 <__aeabi_dsub+0x588>
 8001b3a:	4c4e      	ldr	r4, [pc, #312]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b3c:	45a4      	cmp	ip, r4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x202>
 8001b40:	e0f4      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001b42:	4694      	mov	ip, r2
 8001b44:	e731      	b.n	80019aa <__aeabi_dsub+0x6a>
 8001b46:	2401      	movs	r4, #1
 8001b48:	4067      	eors	r7, r4
 8001b4a:	46bb      	mov	fp, r7
 8001b4c:	42bd      	cmp	r5, r7
 8001b4e:	d000      	beq.n	8001b52 <__aeabi_dsub+0x212>
 8001b50:	e71c      	b.n	800198c <__aeabi_dsub+0x4c>
 8001b52:	4c4a      	ldr	r4, [pc, #296]	; (8001c7c <__aeabi_dsub+0x33c>)
 8001b54:	46a4      	mov	ip, r4
 8001b56:	44b4      	add	ip, r6
 8001b58:	4664      	mov	r4, ip
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x220>
 8001b5e:	e0cf      	b.n	8001d00 <__aeabi_dsub+0x3c0>
 8001b60:	1b94      	subs	r4, r2, r6
 8001b62:	46a4      	mov	ip, r4
 8001b64:	2e00      	cmp	r6, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x22a>
 8001b68:	e15c      	b.n	8001e24 <__aeabi_dsub+0x4e4>
 8001b6a:	4e42      	ldr	r6, [pc, #264]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b6c:	42b2      	cmp	r2, r6
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x232>
 8001b70:	e1ec      	b.n	8001f4c <__aeabi_dsub+0x60c>
 8001b72:	2680      	movs	r6, #128	; 0x80
 8001b74:	0436      	lsls	r6, r6, #16
 8001b76:	4333      	orrs	r3, r6
 8001b78:	4664      	mov	r4, ip
 8001b7a:	2c38      	cmp	r4, #56	; 0x38
 8001b7c:	dd00      	ble.n	8001b80 <__aeabi_dsub+0x240>
 8001b7e:	e1b3      	b.n	8001ee8 <__aeabi_dsub+0x5a8>
 8001b80:	2c1f      	cmp	r4, #31
 8001b82:	dd00      	ble.n	8001b86 <__aeabi_dsub+0x246>
 8001b84:	e238      	b.n	8001ff8 <__aeabi_dsub+0x6b8>
 8001b86:	2620      	movs	r6, #32
 8001b88:	1b36      	subs	r6, r6, r4
 8001b8a:	001c      	movs	r4, r3
 8001b8c:	40b4      	lsls	r4, r6
 8001b8e:	464f      	mov	r7, r9
 8001b90:	46a0      	mov	r8, r4
 8001b92:	4664      	mov	r4, ip
 8001b94:	40e7      	lsrs	r7, r4
 8001b96:	4644      	mov	r4, r8
 8001b98:	433c      	orrs	r4, r7
 8001b9a:	464f      	mov	r7, r9
 8001b9c:	40b7      	lsls	r7, r6
 8001b9e:	003e      	movs	r6, r7
 8001ba0:	1e77      	subs	r7, r6, #1
 8001ba2:	41be      	sbcs	r6, r7
 8001ba4:	4334      	orrs	r4, r6
 8001ba6:	4666      	mov	r6, ip
 8001ba8:	40f3      	lsrs	r3, r6
 8001baa:	18c9      	adds	r1, r1, r3
 8001bac:	1824      	adds	r4, r4, r0
 8001bae:	4284      	cmp	r4, r0
 8001bb0:	419b      	sbcs	r3, r3
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	0016      	movs	r6, r2
 8001bb8:	4488      	add	r8, r1
 8001bba:	e04e      	b.n	8001c5a <__aeabi_dsub+0x31a>
 8001bbc:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <__aeabi_dsub+0x340>)
 8001bbe:	1c74      	adds	r4, r6, #1
 8001bc0:	4214      	tst	r4, r2
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dsub+0x286>
 8001bc4:	e0d6      	b.n	8001d74 <__aeabi_dsub+0x434>
 8001bc6:	464a      	mov	r2, r9
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	2e00      	cmp	r6, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x290>
 8001bce:	e15b      	b.n	8001e88 <__aeabi_dsub+0x548>
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x296>
 8001bd4:	e1a5      	b.n	8001f22 <__aeabi_dsub+0x5e2>
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	d000      	beq.n	8001bde <__aeabi_dsub+0x29e>
 8001bdc:	e1bb      	b.n	8001f56 <__aeabi_dsub+0x616>
 8001bde:	464a      	mov	r2, r9
 8001be0:	0759      	lsls	r1, r3, #29
 8001be2:	08d2      	lsrs	r2, r2, #3
 8001be4:	430a      	orrs	r2, r1
 8001be6:	08db      	lsrs	r3, r3, #3
 8001be8:	e027      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001bea:	000a      	movs	r2, r1
 8001bec:	4302      	orrs	r2, r0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x2b2>
 8001bf0:	e174      	b.n	8001edc <__aeabi_dsub+0x59c>
 8001bf2:	0022      	movs	r2, r4
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	2c01      	cmp	r4, #1
 8001bf8:	d005      	beq.n	8001c06 <__aeabi_dsub+0x2c6>
 8001bfa:	4c1e      	ldr	r4, [pc, #120]	; (8001c74 <__aeabi_dsub+0x334>)
 8001bfc:	45a4      	cmp	ip, r4
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x2c2>
 8001c00:	e094      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001c02:	4694      	mov	ip, r2
 8001c04:	e759      	b.n	8001aba <__aeabi_dsub+0x17a>
 8001c06:	4448      	add	r0, r9
 8001c08:	4548      	cmp	r0, r9
 8001c0a:	4192      	sbcs	r2, r2
 8001c0c:	185b      	adds	r3, r3, r1
 8001c0e:	4698      	mov	r8, r3
 8001c10:	0004      	movs	r4, r0
 8001c12:	4252      	negs	r2, r2
 8001c14:	4490      	add	r8, r2
 8001c16:	4643      	mov	r3, r8
 8001c18:	2602      	movs	r6, #2
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	d500      	bpl.n	8001c20 <__aeabi_dsub+0x2e0>
 8001c1e:	e0c4      	b.n	8001daa <__aeabi_dsub+0x46a>
 8001c20:	3e01      	subs	r6, #1
 8001c22:	0763      	lsls	r3, r4, #29
 8001c24:	d000      	beq.n	8001c28 <__aeabi_dsub+0x2e8>
 8001c26:	e711      	b.n	8001a4c <__aeabi_dsub+0x10c>
 8001c28:	4643      	mov	r3, r8
 8001c2a:	46b4      	mov	ip, r6
 8001c2c:	0759      	lsls	r1, r3, #29
 8001c2e:	08e2      	lsrs	r2, r4, #3
 8001c30:	430a      	orrs	r2, r1
 8001c32:	08db      	lsrs	r3, r3, #3
 8001c34:	490f      	ldr	r1, [pc, #60]	; (8001c74 <__aeabi_dsub+0x334>)
 8001c36:	458c      	cmp	ip, r1
 8001c38:	d040      	beq.n	8001cbc <__aeabi_dsub+0x37c>
 8001c3a:	4661      	mov	r1, ip
 8001c3c:	031b      	lsls	r3, r3, #12
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	0b1b      	lsrs	r3, r3, #12
 8001c42:	0d49      	lsrs	r1, r1, #21
 8001c44:	e720      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001c46:	4301      	orrs	r1, r0
 8001c48:	000c      	movs	r4, r1
 8001c4a:	1e61      	subs	r1, r4, #1
 8001c4c:	418c      	sbcs	r4, r1
 8001c4e:	444c      	add	r4, r9
 8001c50:	454c      	cmp	r4, r9
 8001c52:	4192      	sbcs	r2, r2
 8001c54:	4252      	negs	r2, r2
 8001c56:	4690      	mov	r8, r2
 8001c58:	4498      	add	r8, r3
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	d5e0      	bpl.n	8001c22 <__aeabi_dsub+0x2e2>
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__aeabi_dsub+0x334>)
 8001c62:	3601      	adds	r6, #1
 8001c64:	429e      	cmp	r6, r3
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x32a>
 8001c68:	e09f      	b.n	8001daa <__aeabi_dsub+0x46a>
 8001c6a:	0031      	movs	r1, r6
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	e70a      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	000007ff 	.word	0x000007ff
 8001c78:	ff7fffff 	.word	0xff7fffff
 8001c7c:	fffff801 	.word	0xfffff801
 8001c80:	000007fe 	.word	0x000007fe
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x34a>
 8001c88:	e160      	b.n	8001f4c <__aeabi_dsub+0x60c>
 8001c8a:	000a      	movs	r2, r1
 8001c8c:	4302      	orrs	r2, r0
 8001c8e:	d04d      	beq.n	8001d2c <__aeabi_dsub+0x3ec>
 8001c90:	464a      	mov	r2, r9
 8001c92:	075c      	lsls	r4, r3, #29
 8001c94:	08d2      	lsrs	r2, r2, #3
 8001c96:	4322      	orrs	r2, r4
 8001c98:	2480      	movs	r4, #128	; 0x80
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	4223      	tst	r3, r4
 8001ca0:	d007      	beq.n	8001cb2 <__aeabi_dsub+0x372>
 8001ca2:	08ce      	lsrs	r6, r1, #3
 8001ca4:	4226      	tst	r6, r4
 8001ca6:	d104      	bne.n	8001cb2 <__aeabi_dsub+0x372>
 8001ca8:	465d      	mov	r5, fp
 8001caa:	0033      	movs	r3, r6
 8001cac:	08c2      	lsrs	r2, r0, #3
 8001cae:	0749      	lsls	r1, r1, #29
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	0f51      	lsrs	r1, r2, #29
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	08d2      	lsrs	r2, r2, #3
 8001cb8:	0749      	lsls	r1, r1, #29
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	4319      	orrs	r1, r3
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x384>
 8001cc2:	e1c8      	b.n	8002056 <__aeabi_dsub+0x716>
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0309      	lsls	r1, r1, #12
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	031b      	lsls	r3, r3, #12
 8001ccc:	49d5      	ldr	r1, [pc, #852]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001cce:	0b1b      	lsrs	r3, r3, #12
 8001cd0:	e6da      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001cd2:	49d5      	ldr	r1, [pc, #852]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001cd4:	1ab6      	subs	r6, r6, r2
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	4698      	mov	r8, r3
 8001cda:	e6b5      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001cdc:	0020      	movs	r0, r4
 8001cde:	f000 faf3 	bl	80022c8 <__clzsi2>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	3218      	adds	r2, #24
 8001ce6:	2a1f      	cmp	r2, #31
 8001ce8:	dc00      	bgt.n	8001cec <__aeabi_dsub+0x3ac>
 8001cea:	e68f      	b.n	8001a0c <__aeabi_dsub+0xcc>
 8001cec:	0023      	movs	r3, r4
 8001cee:	3808      	subs	r0, #8
 8001cf0:	4083      	lsls	r3, r0
 8001cf2:	2400      	movs	r4, #0
 8001cf4:	e692      	b.n	8001a1c <__aeabi_dsub+0xdc>
 8001cf6:	4308      	orrs	r0, r1
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	1e50      	subs	r0, r2, #1
 8001cfc:	4182      	sbcs	r2, r0
 8001cfe:	e66d      	b.n	80019dc <__aeabi_dsub+0x9c>
 8001d00:	4cca      	ldr	r4, [pc, #808]	; (800202c <__aeabi_dsub+0x6ec>)
 8001d02:	1c72      	adds	r2, r6, #1
 8001d04:	4222      	tst	r2, r4
 8001d06:	d000      	beq.n	8001d0a <__aeabi_dsub+0x3ca>
 8001d08:	e0ad      	b.n	8001e66 <__aeabi_dsub+0x526>
 8001d0a:	464a      	mov	r2, r9
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	2e00      	cmp	r6, #0
 8001d10:	d1b8      	bne.n	8001c84 <__aeabi_dsub+0x344>
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_dsub+0x3d8>
 8001d16:	e158      	b.n	8001fca <__aeabi_dsub+0x68a>
 8001d18:	000a      	movs	r2, r1
 8001d1a:	4302      	orrs	r2, r0
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dsub+0x3e0>
 8001d1e:	e159      	b.n	8001fd4 <__aeabi_dsub+0x694>
 8001d20:	464a      	mov	r2, r9
 8001d22:	0759      	lsls	r1, r3, #29
 8001d24:	08d2      	lsrs	r2, r2, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	e786      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001d2c:	464a      	mov	r2, r9
 8001d2e:	0759      	lsls	r1, r3, #29
 8001d30:	08d2      	lsrs	r2, r2, #3
 8001d32:	430a      	orrs	r2, r1
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	e7c1      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001d38:	4dba      	ldr	r5, [pc, #744]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001d3a:	42aa      	cmp	r2, r5
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x400>
 8001d3e:	e11e      	b.n	8001f7e <__aeabi_dsub+0x63e>
 8001d40:	2580      	movs	r5, #128	; 0x80
 8001d42:	042d      	lsls	r5, r5, #16
 8001d44:	432b      	orrs	r3, r5
 8001d46:	4664      	mov	r4, ip
 8001d48:	2c38      	cmp	r4, #56	; 0x38
 8001d4a:	dc5d      	bgt.n	8001e08 <__aeabi_dsub+0x4c8>
 8001d4c:	2c1f      	cmp	r4, #31
 8001d4e:	dd00      	ble.n	8001d52 <__aeabi_dsub+0x412>
 8001d50:	e0d0      	b.n	8001ef4 <__aeabi_dsub+0x5b4>
 8001d52:	2520      	movs	r5, #32
 8001d54:	4667      	mov	r7, ip
 8001d56:	1b2d      	subs	r5, r5, r4
 8001d58:	464e      	mov	r6, r9
 8001d5a:	001c      	movs	r4, r3
 8001d5c:	40fe      	lsrs	r6, r7
 8001d5e:	40ac      	lsls	r4, r5
 8001d60:	4334      	orrs	r4, r6
 8001d62:	464e      	mov	r6, r9
 8001d64:	40ae      	lsls	r6, r5
 8001d66:	0035      	movs	r5, r6
 8001d68:	40fb      	lsrs	r3, r7
 8001d6a:	1e6e      	subs	r6, r5, #1
 8001d6c:	41b5      	sbcs	r5, r6
 8001d6e:	1ac9      	subs	r1, r1, r3
 8001d70:	432c      	orrs	r4, r5
 8001d72:	e04e      	b.n	8001e12 <__aeabi_dsub+0x4d2>
 8001d74:	464a      	mov	r2, r9
 8001d76:	1a14      	subs	r4, r2, r0
 8001d78:	45a1      	cmp	r9, r4
 8001d7a:	4192      	sbcs	r2, r2
 8001d7c:	4252      	negs	r2, r2
 8001d7e:	4690      	mov	r8, r2
 8001d80:	1a5f      	subs	r7, r3, r1
 8001d82:	003a      	movs	r2, r7
 8001d84:	4647      	mov	r7, r8
 8001d86:	1bd2      	subs	r2, r2, r7
 8001d88:	4690      	mov	r8, r2
 8001d8a:	0212      	lsls	r2, r2, #8
 8001d8c:	d500      	bpl.n	8001d90 <__aeabi_dsub+0x450>
 8001d8e:	e08b      	b.n	8001ea8 <__aeabi_dsub+0x568>
 8001d90:	4642      	mov	r2, r8
 8001d92:	4322      	orrs	r2, r4
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x458>
 8001d96:	e630      	b.n	80019fa <__aeabi_dsub+0xba>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2500      	movs	r5, #0
 8001d9c:	e74d      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001d9e:	464a      	mov	r2, r9
 8001da0:	0759      	lsls	r1, r3, #29
 8001da2:	08d2      	lsrs	r2, r2, #3
 8001da4:	430a      	orrs	r2, r1
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	e744      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001daa:	4642      	mov	r2, r8
 8001dac:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001dae:	0861      	lsrs	r1, r4, #1
 8001db0:	401a      	ands	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	2201      	movs	r2, #1
 8001db6:	4014      	ands	r4, r2
 8001db8:	430c      	orrs	r4, r1
 8001dba:	07da      	lsls	r2, r3, #31
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	4314      	orrs	r4, r2
 8001dc2:	e641      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	3e1f      	subs	r6, #31
 8001dc8:	40f2      	lsrs	r2, r6
 8001dca:	0016      	movs	r6, r2
 8001dcc:	2920      	cmp	r1, #32
 8001dce:	d003      	beq.n	8001dd8 <__aeabi_dsub+0x498>
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	1a51      	subs	r1, r2, r1
 8001dd4:	408b      	lsls	r3, r1
 8001dd6:	431c      	orrs	r4, r3
 8001dd8:	1e62      	subs	r2, r4, #1
 8001dda:	4194      	sbcs	r4, r2
 8001ddc:	2300      	movs	r3, #0
 8001dde:	4334      	orrs	r4, r6
 8001de0:	4698      	mov	r8, r3
 8001de2:	2600      	movs	r6, #0
 8001de4:	e71d      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001de6:	000c      	movs	r4, r1
 8001de8:	3a20      	subs	r2, #32
 8001dea:	40d4      	lsrs	r4, r2
 8001dec:	0022      	movs	r2, r4
 8001dee:	4664      	mov	r4, ip
 8001df0:	2c20      	cmp	r4, #32
 8001df2:	d004      	beq.n	8001dfe <__aeabi_dsub+0x4be>
 8001df4:	2740      	movs	r7, #64	; 0x40
 8001df6:	1b3f      	subs	r7, r7, r4
 8001df8:	40b9      	lsls	r1, r7
 8001dfa:	4308      	orrs	r0, r1
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	4644      	mov	r4, r8
 8001e00:	1e61      	subs	r1, r4, #1
 8001e02:	418c      	sbcs	r4, r1
 8001e04:	4322      	orrs	r2, r4
 8001e06:	e5e9      	b.n	80019dc <__aeabi_dsub+0x9c>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	1b04      	subs	r4, r0, r4
 8001e14:	42a0      	cmp	r0, r4
 8001e16:	419b      	sbcs	r3, r3
 8001e18:	425b      	negs	r3, r3
 8001e1a:	1acb      	subs	r3, r1, r3
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	465d      	mov	r5, fp
 8001e20:	0016      	movs	r6, r2
 8001e22:	e5e2      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001e24:	464e      	mov	r6, r9
 8001e26:	431e      	orrs	r6, r3
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x4ec>
 8001e2a:	e0ae      	b.n	8001f8a <__aeabi_dsub+0x64a>
 8001e2c:	1e66      	subs	r6, r4, #1
 8001e2e:	2c01      	cmp	r4, #1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x4f4>
 8001e32:	e0fd      	b.n	8002030 <__aeabi_dsub+0x6f0>
 8001e34:	4f7b      	ldr	r7, [pc, #492]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001e36:	42bc      	cmp	r4, r7
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x4fc>
 8001e3a:	e107      	b.n	800204c <__aeabi_dsub+0x70c>
 8001e3c:	46b4      	mov	ip, r6
 8001e3e:	e69b      	b.n	8001b78 <__aeabi_dsub+0x238>
 8001e40:	4664      	mov	r4, ip
 8001e42:	2220      	movs	r2, #32
 8001e44:	1b12      	subs	r2, r2, r4
 8001e46:	000c      	movs	r4, r1
 8001e48:	4094      	lsls	r4, r2
 8001e4a:	0007      	movs	r7, r0
 8001e4c:	4090      	lsls	r0, r2
 8001e4e:	46a0      	mov	r8, r4
 8001e50:	4664      	mov	r4, ip
 8001e52:	1e42      	subs	r2, r0, #1
 8001e54:	4190      	sbcs	r0, r2
 8001e56:	4662      	mov	r2, ip
 8001e58:	40e7      	lsrs	r7, r4
 8001e5a:	4644      	mov	r4, r8
 8001e5c:	40d1      	lsrs	r1, r2
 8001e5e:	433c      	orrs	r4, r7
 8001e60:	4304      	orrs	r4, r0
 8001e62:	185b      	adds	r3, r3, r1
 8001e64:	e6f3      	b.n	8001c4e <__aeabi_dsub+0x30e>
 8001e66:	4c6f      	ldr	r4, [pc, #444]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001e68:	42a2      	cmp	r2, r4
 8001e6a:	d100      	bne.n	8001e6e <__aeabi_dsub+0x52e>
 8001e6c:	e0d5      	b.n	800201a <__aeabi_dsub+0x6da>
 8001e6e:	4448      	add	r0, r9
 8001e70:	185b      	adds	r3, r3, r1
 8001e72:	4548      	cmp	r0, r9
 8001e74:	4189      	sbcs	r1, r1
 8001e76:	4249      	negs	r1, r1
 8001e78:	185b      	adds	r3, r3, r1
 8001e7a:	07dc      	lsls	r4, r3, #31
 8001e7c:	0840      	lsrs	r0, r0, #1
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	4698      	mov	r8, r3
 8001e82:	0016      	movs	r6, r2
 8001e84:	4304      	orrs	r4, r0
 8001e86:	e6cc      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d000      	beq.n	8001e8e <__aeabi_dsub+0x54e>
 8001e8c:	e082      	b.n	8001f94 <__aeabi_dsub+0x654>
 8001e8e:	000a      	movs	r2, r1
 8001e90:	4302      	orrs	r2, r0
 8001e92:	d140      	bne.n	8001f16 <__aeabi_dsub+0x5d6>
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	2500      	movs	r5, #0
 8001e98:	031b      	lsls	r3, r3, #12
 8001e9a:	e713      	b.n	8001cc4 <__aeabi_dsub+0x384>
 8001e9c:	074b      	lsls	r3, r1, #29
 8001e9e:	08c2      	lsrs	r2, r0, #3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	465d      	mov	r5, fp
 8001ea4:	08cb      	lsrs	r3, r1, #3
 8001ea6:	e6c5      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001ea8:	464a      	mov	r2, r9
 8001eaa:	1a84      	subs	r4, r0, r2
 8001eac:	42a0      	cmp	r0, r4
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	1acb      	subs	r3, r1, r3
 8001eb2:	4252      	negs	r2, r2
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	465d      	mov	r5, fp
 8001eba:	e59e      	b.n	80019fa <__aeabi_dsub+0xba>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	0759      	lsls	r1, r3, #29
 8001ec0:	08d2      	lsrs	r2, r2, #3
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	e6f9      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001ec8:	464a      	mov	r2, r9
 8001eca:	1a14      	subs	r4, r2, r0
 8001ecc:	45a1      	cmp	r9, r4
 8001ece:	4192      	sbcs	r2, r2
 8001ed0:	1a5b      	subs	r3, r3, r1
 8001ed2:	4252      	negs	r2, r2
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	4698      	mov	r8, r3
 8001ed8:	2601      	movs	r6, #1
 8001eda:	e586      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001edc:	464a      	mov	r2, r9
 8001ede:	0759      	lsls	r1, r3, #29
 8001ee0:	08d2      	lsrs	r2, r2, #3
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	e6a5      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001ee8:	464c      	mov	r4, r9
 8001eea:	4323      	orrs	r3, r4
 8001eec:	001c      	movs	r4, r3
 8001eee:	1e63      	subs	r3, r4, #1
 8001ef0:	419c      	sbcs	r4, r3
 8001ef2:	e65b      	b.n	8001bac <__aeabi_dsub+0x26c>
 8001ef4:	4665      	mov	r5, ip
 8001ef6:	001e      	movs	r6, r3
 8001ef8:	3d20      	subs	r5, #32
 8001efa:	40ee      	lsrs	r6, r5
 8001efc:	2c20      	cmp	r4, #32
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x5cc>
 8001f00:	2540      	movs	r5, #64	; 0x40
 8001f02:	1b2d      	subs	r5, r5, r4
 8001f04:	40ab      	lsls	r3, r5
 8001f06:	464c      	mov	r4, r9
 8001f08:	431c      	orrs	r4, r3
 8001f0a:	46a2      	mov	sl, r4
 8001f0c:	4654      	mov	r4, sl
 8001f0e:	1e63      	subs	r3, r4, #1
 8001f10:	419c      	sbcs	r4, r3
 8001f12:	4334      	orrs	r4, r6
 8001f14:	e77d      	b.n	8001e12 <__aeabi_dsub+0x4d2>
 8001f16:	074b      	lsls	r3, r1, #29
 8001f18:	08c2      	lsrs	r2, r0, #3
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	465d      	mov	r5, fp
 8001f1e:	08cb      	lsrs	r3, r1, #3
 8001f20:	e6cc      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f22:	000a      	movs	r2, r1
 8001f24:	4302      	orrs	r2, r0
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x5ea>
 8001f28:	e736      	b.n	8001d98 <__aeabi_dsub+0x458>
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	08c2      	lsrs	r2, r0, #3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	465d      	mov	r5, fp
 8001f32:	08cb      	lsrs	r3, r1, #3
 8001f34:	e681      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001f36:	464a      	mov	r2, r9
 8001f38:	1a84      	subs	r4, r0, r2
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	4192      	sbcs	r2, r2
 8001f3e:	1acb      	subs	r3, r1, r3
 8001f40:	4252      	negs	r2, r2
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	4698      	mov	r8, r3
 8001f46:	465d      	mov	r5, fp
 8001f48:	2601      	movs	r6, #1
 8001f4a:	e54e      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001f4c:	074b      	lsls	r3, r1, #29
 8001f4e:	08c2      	lsrs	r2, r0, #3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	08cb      	lsrs	r3, r1, #3
 8001f54:	e6b2      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f56:	464a      	mov	r2, r9
 8001f58:	1a14      	subs	r4, r2, r0
 8001f5a:	45a1      	cmp	r9, r4
 8001f5c:	4192      	sbcs	r2, r2
 8001f5e:	1a5f      	subs	r7, r3, r1
 8001f60:	4252      	negs	r2, r2
 8001f62:	1aba      	subs	r2, r7, r2
 8001f64:	4690      	mov	r8, r2
 8001f66:	0212      	lsls	r2, r2, #8
 8001f68:	d56b      	bpl.n	8002042 <__aeabi_dsub+0x702>
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	1a84      	subs	r4, r0, r2
 8001f6e:	42a0      	cmp	r0, r4
 8001f70:	4192      	sbcs	r2, r2
 8001f72:	1acb      	subs	r3, r1, r3
 8001f74:	4252      	negs	r2, r2
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	4698      	mov	r8, r3
 8001f7a:	465d      	mov	r5, fp
 8001f7c:	e564      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001f7e:	074b      	lsls	r3, r1, #29
 8001f80:	08c2      	lsrs	r2, r0, #3
 8001f82:	431a      	orrs	r2, r3
 8001f84:	465d      	mov	r5, fp
 8001f86:	08cb      	lsrs	r3, r1, #3
 8001f88:	e698      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	08c2      	lsrs	r2, r0, #3
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	08cb      	lsrs	r3, r1, #3
 8001f92:	e64f      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001f94:	000a      	movs	r2, r1
 8001f96:	4302      	orrs	r2, r0
 8001f98:	d090      	beq.n	8001ebc <__aeabi_dsub+0x57c>
 8001f9a:	464a      	mov	r2, r9
 8001f9c:	075c      	lsls	r4, r3, #29
 8001f9e:	08d2      	lsrs	r2, r2, #3
 8001fa0:	4314      	orrs	r4, r2
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	0312      	lsls	r2, r2, #12
 8001fa8:	4213      	tst	r3, r2
 8001faa:	d008      	beq.n	8001fbe <__aeabi_dsub+0x67e>
 8001fac:	08ce      	lsrs	r6, r1, #3
 8001fae:	4216      	tst	r6, r2
 8001fb0:	d105      	bne.n	8001fbe <__aeabi_dsub+0x67e>
 8001fb2:	08c0      	lsrs	r0, r0, #3
 8001fb4:	0749      	lsls	r1, r1, #29
 8001fb6:	4308      	orrs	r0, r1
 8001fb8:	0004      	movs	r4, r0
 8001fba:	465d      	mov	r5, fp
 8001fbc:	0033      	movs	r3, r6
 8001fbe:	0f61      	lsrs	r1, r4, #29
 8001fc0:	00e2      	lsls	r2, r4, #3
 8001fc2:	0749      	lsls	r1, r1, #29
 8001fc4:	08d2      	lsrs	r2, r2, #3
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	e678      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001fca:	074b      	lsls	r3, r1, #29
 8001fcc:	08c2      	lsrs	r2, r0, #3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	08cb      	lsrs	r3, r1, #3
 8001fd2:	e632      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001fd4:	4448      	add	r0, r9
 8001fd6:	185b      	adds	r3, r3, r1
 8001fd8:	4548      	cmp	r0, r9
 8001fda:	4192      	sbcs	r2, r2
 8001fdc:	4698      	mov	r8, r3
 8001fde:	4252      	negs	r2, r2
 8001fe0:	4490      	add	r8, r2
 8001fe2:	4643      	mov	r3, r8
 8001fe4:	0004      	movs	r4, r0
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	d400      	bmi.n	8001fec <__aeabi_dsub+0x6ac>
 8001fea:	e61a      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001fec:	4642      	mov	r2, r8
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001ff0:	2601      	movs	r6, #1
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	4690      	mov	r8, r2
 8001ff6:	e614      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001ff8:	4666      	mov	r6, ip
 8001ffa:	001f      	movs	r7, r3
 8001ffc:	3e20      	subs	r6, #32
 8001ffe:	40f7      	lsrs	r7, r6
 8002000:	2c20      	cmp	r4, #32
 8002002:	d005      	beq.n	8002010 <__aeabi_dsub+0x6d0>
 8002004:	2640      	movs	r6, #64	; 0x40
 8002006:	1b36      	subs	r6, r6, r4
 8002008:	40b3      	lsls	r3, r6
 800200a:	464c      	mov	r4, r9
 800200c:	431c      	orrs	r4, r3
 800200e:	46a2      	mov	sl, r4
 8002010:	4654      	mov	r4, sl
 8002012:	1e63      	subs	r3, r4, #1
 8002014:	419c      	sbcs	r4, r3
 8002016:	433c      	orrs	r4, r7
 8002018:	e5c8      	b.n	8001bac <__aeabi_dsub+0x26c>
 800201a:	0011      	movs	r1, r2
 800201c:	2300      	movs	r3, #0
 800201e:	2200      	movs	r2, #0
 8002020:	e532      	b.n	8001a88 <__aeabi_dsub+0x148>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff
 8002028:	ff7fffff 	.word	0xff7fffff
 800202c:	000007fe 	.word	0x000007fe
 8002030:	464a      	mov	r2, r9
 8002032:	1814      	adds	r4, r2, r0
 8002034:	4284      	cmp	r4, r0
 8002036:	4192      	sbcs	r2, r2
 8002038:	185b      	adds	r3, r3, r1
 800203a:	4698      	mov	r8, r3
 800203c:	4252      	negs	r2, r2
 800203e:	4490      	add	r8, r2
 8002040:	e5e9      	b.n	8001c16 <__aeabi_dsub+0x2d6>
 8002042:	4642      	mov	r2, r8
 8002044:	4322      	orrs	r2, r4
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x70a>
 8002048:	e6a6      	b.n	8001d98 <__aeabi_dsub+0x458>
 800204a:	e5ea      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 800204c:	074b      	lsls	r3, r1, #29
 800204e:	08c2      	lsrs	r2, r0, #3
 8002050:	431a      	orrs	r2, r3
 8002052:	08cb      	lsrs	r3, r1, #3
 8002054:	e632      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8002056:	2200      	movs	r2, #0
 8002058:	4901      	ldr	r1, [pc, #4]	; (8002060 <__aeabi_dsub+0x720>)
 800205a:	0013      	movs	r3, r2
 800205c:	e514      	b.n	8001a88 <__aeabi_dsub+0x148>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	000007ff 	.word	0x000007ff

08002064 <__aeabi_dcmpun>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	0005      	movs	r5, r0
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <__aeabi_dcmpun+0x38>)
 800206a:	030c      	lsls	r4, r1, #12
 800206c:	0016      	movs	r6, r2
 800206e:	0049      	lsls	r1, r1, #1
 8002070:	031a      	lsls	r2, r3, #12
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	0d49      	lsrs	r1, r1, #21
 8002078:	0b12      	lsrs	r2, r2, #12
 800207a:	0d5b      	lsrs	r3, r3, #21
 800207c:	4281      	cmp	r1, r0
 800207e:	d008      	beq.n	8002092 <__aeabi_dcmpun+0x2e>
 8002080:	4906      	ldr	r1, [pc, #24]	; (800209c <__aeabi_dcmpun+0x38>)
 8002082:	2000      	movs	r0, #0
 8002084:	428b      	cmp	r3, r1
 8002086:	d103      	bne.n	8002090 <__aeabi_dcmpun+0x2c>
 8002088:	4332      	orrs	r2, r6
 800208a:	0010      	movs	r0, r2
 800208c:	1e42      	subs	r2, r0, #1
 800208e:	4190      	sbcs	r0, r2
 8002090:	bd70      	pop	{r4, r5, r6, pc}
 8002092:	2001      	movs	r0, #1
 8002094:	432c      	orrs	r4, r5
 8002096:	d1fb      	bne.n	8002090 <__aeabi_dcmpun+0x2c>
 8002098:	e7f2      	b.n	8002080 <__aeabi_dcmpun+0x1c>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__aeabi_d2iz>:
 80020a0:	000a      	movs	r2, r1
 80020a2:	b530      	push	{r4, r5, lr}
 80020a4:	4c13      	ldr	r4, [pc, #76]	; (80020f4 <__aeabi_d2iz+0x54>)
 80020a6:	0053      	lsls	r3, r2, #1
 80020a8:	0309      	lsls	r1, r1, #12
 80020aa:	0005      	movs	r5, r0
 80020ac:	0b09      	lsrs	r1, r1, #12
 80020ae:	2000      	movs	r0, #0
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	0fd2      	lsrs	r2, r2, #31
 80020b4:	42a3      	cmp	r3, r4
 80020b6:	dd04      	ble.n	80020c2 <__aeabi_d2iz+0x22>
 80020b8:	480f      	ldr	r0, [pc, #60]	; (80020f8 <__aeabi_d2iz+0x58>)
 80020ba:	4283      	cmp	r3, r0
 80020bc:	dd02      	ble.n	80020c4 <__aeabi_d2iz+0x24>
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <__aeabi_d2iz+0x5c>)
 80020c0:	18d0      	adds	r0, r2, r3
 80020c2:	bd30      	pop	{r4, r5, pc}
 80020c4:	2080      	movs	r0, #128	; 0x80
 80020c6:	0340      	lsls	r0, r0, #13
 80020c8:	4301      	orrs	r1, r0
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <__aeabi_d2iz+0x60>)
 80020cc:	1ac0      	subs	r0, r0, r3
 80020ce:	281f      	cmp	r0, #31
 80020d0:	dd08      	ble.n	80020e4 <__aeabi_d2iz+0x44>
 80020d2:	480c      	ldr	r0, [pc, #48]	; (8002104 <__aeabi_d2iz+0x64>)
 80020d4:	1ac3      	subs	r3, r0, r3
 80020d6:	40d9      	lsrs	r1, r3
 80020d8:	000b      	movs	r3, r1
 80020da:	4258      	negs	r0, r3
 80020dc:	2a00      	cmp	r2, #0
 80020de:	d1f0      	bne.n	80020c2 <__aeabi_d2iz+0x22>
 80020e0:	0018      	movs	r0, r3
 80020e2:	e7ee      	b.n	80020c2 <__aeabi_d2iz+0x22>
 80020e4:	4c08      	ldr	r4, [pc, #32]	; (8002108 <__aeabi_d2iz+0x68>)
 80020e6:	40c5      	lsrs	r5, r0
 80020e8:	46a4      	mov	ip, r4
 80020ea:	4463      	add	r3, ip
 80020ec:	4099      	lsls	r1, r3
 80020ee:	000b      	movs	r3, r1
 80020f0:	432b      	orrs	r3, r5
 80020f2:	e7f2      	b.n	80020da <__aeabi_d2iz+0x3a>
 80020f4:	000003fe 	.word	0x000003fe
 80020f8:	0000041d 	.word	0x0000041d
 80020fc:	7fffffff 	.word	0x7fffffff
 8002100:	00000433 	.word	0x00000433
 8002104:	00000413 	.word	0x00000413
 8002108:	fffffbed 	.word	0xfffffbed

0800210c <__aeabi_i2d>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	2800      	cmp	r0, #0
 8002110:	d016      	beq.n	8002140 <__aeabi_i2d+0x34>
 8002112:	17c3      	asrs	r3, r0, #31
 8002114:	18c5      	adds	r5, r0, r3
 8002116:	405d      	eors	r5, r3
 8002118:	0fc4      	lsrs	r4, r0, #31
 800211a:	0028      	movs	r0, r5
 800211c:	f000 f8d4 	bl	80022c8 <__clzsi2>
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <__aeabi_i2d+0x5c>)
 8002122:	1a12      	subs	r2, r2, r0
 8002124:	280a      	cmp	r0, #10
 8002126:	dc16      	bgt.n	8002156 <__aeabi_i2d+0x4a>
 8002128:	0003      	movs	r3, r0
 800212a:	002e      	movs	r6, r5
 800212c:	3315      	adds	r3, #21
 800212e:	409e      	lsls	r6, r3
 8002130:	230b      	movs	r3, #11
 8002132:	1a18      	subs	r0, r3, r0
 8002134:	40c5      	lsrs	r5, r0
 8002136:	0553      	lsls	r3, r2, #21
 8002138:	032d      	lsls	r5, r5, #12
 800213a:	0b2d      	lsrs	r5, r5, #12
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	e003      	b.n	8002148 <__aeabi_i2d+0x3c>
 8002140:	2400      	movs	r4, #0
 8002142:	2300      	movs	r3, #0
 8002144:	2500      	movs	r5, #0
 8002146:	2600      	movs	r6, #0
 8002148:	051b      	lsls	r3, r3, #20
 800214a:	432b      	orrs	r3, r5
 800214c:	07e4      	lsls	r4, r4, #31
 800214e:	4323      	orrs	r3, r4
 8002150:	0030      	movs	r0, r6
 8002152:	0019      	movs	r1, r3
 8002154:	bd70      	pop	{r4, r5, r6, pc}
 8002156:	380b      	subs	r0, #11
 8002158:	4085      	lsls	r5, r0
 800215a:	0553      	lsls	r3, r2, #21
 800215c:	032d      	lsls	r5, r5, #12
 800215e:	2600      	movs	r6, #0
 8002160:	0b2d      	lsrs	r5, r5, #12
 8002162:	0d5b      	lsrs	r3, r3, #21
 8002164:	e7f0      	b.n	8002148 <__aeabi_i2d+0x3c>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	0000041e 	.word	0x0000041e

0800216c <__aeabi_ui2d>:
 800216c:	b510      	push	{r4, lr}
 800216e:	1e04      	subs	r4, r0, #0
 8002170:	d010      	beq.n	8002194 <__aeabi_ui2d+0x28>
 8002172:	f000 f8a9 	bl	80022c8 <__clzsi2>
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <__aeabi_ui2d+0x48>)
 8002178:	1a1b      	subs	r3, r3, r0
 800217a:	280a      	cmp	r0, #10
 800217c:	dc11      	bgt.n	80021a2 <__aeabi_ui2d+0x36>
 800217e:	220b      	movs	r2, #11
 8002180:	0021      	movs	r1, r4
 8002182:	1a12      	subs	r2, r2, r0
 8002184:	40d1      	lsrs	r1, r2
 8002186:	3015      	adds	r0, #21
 8002188:	030a      	lsls	r2, r1, #12
 800218a:	055b      	lsls	r3, r3, #21
 800218c:	4084      	lsls	r4, r0
 800218e:	0b12      	lsrs	r2, r2, #12
 8002190:	0d5b      	lsrs	r3, r3, #21
 8002192:	e001      	b.n	8002198 <__aeabi_ui2d+0x2c>
 8002194:	2300      	movs	r3, #0
 8002196:	2200      	movs	r2, #0
 8002198:	051b      	lsls	r3, r3, #20
 800219a:	4313      	orrs	r3, r2
 800219c:	0020      	movs	r0, r4
 800219e:	0019      	movs	r1, r3
 80021a0:	bd10      	pop	{r4, pc}
 80021a2:	0022      	movs	r2, r4
 80021a4:	380b      	subs	r0, #11
 80021a6:	4082      	lsls	r2, r0
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	0312      	lsls	r2, r2, #12
 80021ac:	2400      	movs	r4, #0
 80021ae:	0b12      	lsrs	r2, r2, #12
 80021b0:	0d5b      	lsrs	r3, r3, #21
 80021b2:	e7f1      	b.n	8002198 <__aeabi_ui2d+0x2c>
 80021b4:	0000041e 	.word	0x0000041e

080021b8 <__aeabi_d2f>:
 80021b8:	0002      	movs	r2, r0
 80021ba:	004b      	lsls	r3, r1, #1
 80021bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021be:	0308      	lsls	r0, r1, #12
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	4e3d      	ldr	r6, [pc, #244]	; (80022b8 <__aeabi_d2f+0x100>)
 80021c4:	0fcc      	lsrs	r4, r1, #31
 80021c6:	0a40      	lsrs	r0, r0, #9
 80021c8:	0f51      	lsrs	r1, r2, #29
 80021ca:	1c5f      	adds	r7, r3, #1
 80021cc:	4308      	orrs	r0, r1
 80021ce:	00d5      	lsls	r5, r2, #3
 80021d0:	4237      	tst	r7, r6
 80021d2:	d00a      	beq.n	80021ea <__aeabi_d2f+0x32>
 80021d4:	4939      	ldr	r1, [pc, #228]	; (80022bc <__aeabi_d2f+0x104>)
 80021d6:	185e      	adds	r6, r3, r1
 80021d8:	2efe      	cmp	r6, #254	; 0xfe
 80021da:	dd16      	ble.n	800220a <__aeabi_d2f+0x52>
 80021dc:	23ff      	movs	r3, #255	; 0xff
 80021de:	2100      	movs	r1, #0
 80021e0:	05db      	lsls	r3, r3, #23
 80021e2:	430b      	orrs	r3, r1
 80021e4:	07e0      	lsls	r0, r4, #31
 80021e6:	4318      	orrs	r0, r3
 80021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <__aeabi_d2f+0x44>
 80021ee:	4328      	orrs	r0, r5
 80021f0:	d027      	beq.n	8002242 <__aeabi_d2f+0x8a>
 80021f2:	2105      	movs	r1, #5
 80021f4:	0189      	lsls	r1, r1, #6
 80021f6:	0a49      	lsrs	r1, r1, #9
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e7f1      	b.n	80021e0 <__aeabi_d2f+0x28>
 80021fc:	4305      	orrs	r5, r0
 80021fe:	d0ed      	beq.n	80021dc <__aeabi_d2f+0x24>
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	03c9      	lsls	r1, r1, #15
 8002204:	23ff      	movs	r3, #255	; 0xff
 8002206:	4301      	orrs	r1, r0
 8002208:	e7ea      	b.n	80021e0 <__aeabi_d2f+0x28>
 800220a:	2e00      	cmp	r6, #0
 800220c:	dd1c      	ble.n	8002248 <__aeabi_d2f+0x90>
 800220e:	0192      	lsls	r2, r2, #6
 8002210:	0011      	movs	r1, r2
 8002212:	1e4a      	subs	r2, r1, #1
 8002214:	4191      	sbcs	r1, r2
 8002216:	00c0      	lsls	r0, r0, #3
 8002218:	0f6d      	lsrs	r5, r5, #29
 800221a:	4301      	orrs	r1, r0
 800221c:	4329      	orrs	r1, r5
 800221e:	074b      	lsls	r3, r1, #29
 8002220:	d048      	beq.n	80022b4 <__aeabi_d2f+0xfc>
 8002222:	230f      	movs	r3, #15
 8002224:	400b      	ands	r3, r1
 8002226:	2b04      	cmp	r3, #4
 8002228:	d000      	beq.n	800222c <__aeabi_d2f+0x74>
 800222a:	3104      	adds	r1, #4
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	04db      	lsls	r3, r3, #19
 8002230:	400b      	ands	r3, r1
 8002232:	d03f      	beq.n	80022b4 <__aeabi_d2f+0xfc>
 8002234:	1c72      	adds	r2, r6, #1
 8002236:	2efe      	cmp	r6, #254	; 0xfe
 8002238:	d0d0      	beq.n	80021dc <__aeabi_d2f+0x24>
 800223a:	0189      	lsls	r1, r1, #6
 800223c:	0a49      	lsrs	r1, r1, #9
 800223e:	b2d3      	uxtb	r3, r2
 8002240:	e7ce      	b.n	80021e0 <__aeabi_d2f+0x28>
 8002242:	2300      	movs	r3, #0
 8002244:	2100      	movs	r1, #0
 8002246:	e7cb      	b.n	80021e0 <__aeabi_d2f+0x28>
 8002248:	0032      	movs	r2, r6
 800224a:	3217      	adds	r2, #23
 800224c:	db22      	blt.n	8002294 <__aeabi_d2f+0xdc>
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	221e      	movs	r2, #30
 8002252:	0409      	lsls	r1, r1, #16
 8002254:	4308      	orrs	r0, r1
 8002256:	1b92      	subs	r2, r2, r6
 8002258:	2a1f      	cmp	r2, #31
 800225a:	dd1d      	ble.n	8002298 <__aeabi_d2f+0xe0>
 800225c:	2102      	movs	r1, #2
 800225e:	4249      	negs	r1, r1
 8002260:	1b8e      	subs	r6, r1, r6
 8002262:	0001      	movs	r1, r0
 8002264:	40f1      	lsrs	r1, r6
 8002266:	000e      	movs	r6, r1
 8002268:	2a20      	cmp	r2, #32
 800226a:	d004      	beq.n	8002276 <__aeabi_d2f+0xbe>
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <__aeabi_d2f+0x108>)
 800226e:	4694      	mov	ip, r2
 8002270:	4463      	add	r3, ip
 8002272:	4098      	lsls	r0, r3
 8002274:	4305      	orrs	r5, r0
 8002276:	0029      	movs	r1, r5
 8002278:	1e4d      	subs	r5, r1, #1
 800227a:	41a9      	sbcs	r1, r5
 800227c:	4331      	orrs	r1, r6
 800227e:	2600      	movs	r6, #0
 8002280:	074b      	lsls	r3, r1, #29
 8002282:	d1ce      	bne.n	8002222 <__aeabi_d2f+0x6a>
 8002284:	2080      	movs	r0, #128	; 0x80
 8002286:	000b      	movs	r3, r1
 8002288:	04c0      	lsls	r0, r0, #19
 800228a:	2201      	movs	r2, #1
 800228c:	4003      	ands	r3, r0
 800228e:	4201      	tst	r1, r0
 8002290:	d1d3      	bne.n	800223a <__aeabi_d2f+0x82>
 8002292:	e7af      	b.n	80021f4 <__aeabi_d2f+0x3c>
 8002294:	2300      	movs	r3, #0
 8002296:	e7ac      	b.n	80021f2 <__aeabi_d2f+0x3a>
 8002298:	490a      	ldr	r1, [pc, #40]	; (80022c4 <__aeabi_d2f+0x10c>)
 800229a:	468c      	mov	ip, r1
 800229c:	0029      	movs	r1, r5
 800229e:	4463      	add	r3, ip
 80022a0:	40d1      	lsrs	r1, r2
 80022a2:	409d      	lsls	r5, r3
 80022a4:	000a      	movs	r2, r1
 80022a6:	0029      	movs	r1, r5
 80022a8:	4098      	lsls	r0, r3
 80022aa:	1e4d      	subs	r5, r1, #1
 80022ac:	41a9      	sbcs	r1, r5
 80022ae:	4301      	orrs	r1, r0
 80022b0:	4311      	orrs	r1, r2
 80022b2:	e7e4      	b.n	800227e <__aeabi_d2f+0xc6>
 80022b4:	0033      	movs	r3, r6
 80022b6:	e79d      	b.n	80021f4 <__aeabi_d2f+0x3c>
 80022b8:	000007fe 	.word	0x000007fe
 80022bc:	fffffc80 	.word	0xfffffc80
 80022c0:	fffffca2 	.word	0xfffffca2
 80022c4:	fffffc82 	.word	0xfffffc82

080022c8 <__clzsi2>:
 80022c8:	211c      	movs	r1, #28
 80022ca:	2301      	movs	r3, #1
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d301      	bcc.n	80022d6 <__clzsi2+0xe>
 80022d2:	0c00      	lsrs	r0, r0, #16
 80022d4:	3910      	subs	r1, #16
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	4298      	cmp	r0, r3
 80022da:	d301      	bcc.n	80022e0 <__clzsi2+0x18>
 80022dc:	0a00      	lsrs	r0, r0, #8
 80022de:	3908      	subs	r1, #8
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	4298      	cmp	r0, r3
 80022e4:	d301      	bcc.n	80022ea <__clzsi2+0x22>
 80022e6:	0900      	lsrs	r0, r0, #4
 80022e8:	3904      	subs	r1, #4
 80022ea:	a202      	add	r2, pc, #8	; (adr r2, 80022f4 <__clzsi2+0x2c>)
 80022ec:	5c10      	ldrb	r0, [r2, r0]
 80022ee:	1840      	adds	r0, r0, r1
 80022f0:	4770      	bx	lr
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	02020304 	.word	0x02020304
 80022f8:	01010101 	.word	0x01010101
	...

08002304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	240c      	movs	r4, #12
 800230c:	193b      	adds	r3, r7, r4
 800230e:	0018      	movs	r0, r3
 8002310:	2314      	movs	r3, #20
 8002312:	001a      	movs	r2, r3
 8002314:	2100      	movs	r1, #0
 8002316:	f003 fd79 	bl	8005e0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <MX_GPIO_Init+0xdc>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <MX_GPIO_Init+0xdc>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0289      	lsls	r1, r1, #10
 8002324:	430a      	orrs	r2, r1
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <MX_GPIO_Init+0xdc>)
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	029b      	lsls	r3, r3, #10
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <MX_GPIO_Init+0xdc>)
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <MX_GPIO_Init+0xdc>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	02c9      	lsls	r1, r1, #11
 8002340:	430a      	orrs	r2, r1
 8002342:	615a      	str	r2, [r3, #20]
 8002344:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <MX_GPIO_Init+0xdc>)
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	02db      	lsls	r3, r3, #11
 800234c:	4013      	ands	r3, r2
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002352:	2390      	movs	r3, #144	; 0x90
 8002354:	05db      	lsls	r3, r3, #23
 8002356:	2200      	movs	r2, #0
 8002358:	2104      	movs	r1, #4
 800235a:	0018      	movs	r0, r3
 800235c:	f001 f93e 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MX_GPIO_Init+0xe0>)
 8002362:	2200      	movs	r2, #0
 8002364:	210c      	movs	r1, #12
 8002366:	0018      	movs	r0, r3
 8002368:	f001 f938 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800236c:	193b      	adds	r3, r7, r4
 800236e:	2204      	movs	r2, #4
 8002370:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	193b      	adds	r3, r7, r4
 8002374:	2201      	movs	r2, #1
 8002376:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	193b      	adds	r3, r7, r4
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	193b      	adds	r3, r7, r4
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	193a      	adds	r2, r7, r4
 8002386:	2390      	movs	r3, #144	; 0x90
 8002388:	05db      	lsls	r3, r3, #23
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f000 ffb5 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002392:	193b      	adds	r3, r7, r4
 8002394:	2202      	movs	r2, #2
 8002396:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	193b      	adds	r3, r7, r4
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	193b      	adds	r3, r7, r4
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	193b      	adds	r3, r7, r4
 80023a6:	4a0f      	ldr	r2, [pc, #60]	; (80023e4 <MX_GPIO_Init+0xe0>)
 80023a8:	0019      	movs	r1, r3
 80023aa:	0010      	movs	r0, r2
 80023ac:	f000 ffa6 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023b0:	0021      	movs	r1, r4
 80023b2:	187b      	adds	r3, r7, r1
 80023b4:	220c      	movs	r2, #12
 80023b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	2201      	movs	r2, #1
 80023bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	187b      	adds	r3, r7, r1
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <MX_GPIO_Init+0xe0>)
 80023ce:	0019      	movs	r1, r3
 80023d0:	0010      	movs	r0, r2
 80023d2:	f000 ff93 	bl	80032fc <HAL_GPIO_Init>

}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b009      	add	sp, #36	; 0x24
 80023dc:	bd90      	pop	{r4, r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000400 	.word	0x48000400

080023e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <MX_I2C1_Init+0x74>)
 80023ee:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <MX_I2C1_Init+0x78>)
 80023f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <MX_I2C1_Init+0x74>)
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <MX_I2C1_Init+0x7c>)
 80023f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023f8:	4b18      	ldr	r3, [pc, #96]	; (800245c <MX_I2C1_Init+0x74>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <MX_I2C1_Init+0x74>)
 8002400:	2201      	movs	r2, #1
 8002402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <MX_I2C1_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <MX_I2C1_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <MX_I2C1_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_I2C1_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_I2C1_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MX_I2C1_Init+0x74>)
 8002424:	0018      	movs	r0, r3
 8002426:	f001 f911 	bl	800364c <HAL_I2C_Init>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d001      	beq.n	8002432 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800242e:	f000 fa33 	bl	8002898 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <MX_I2C1_Init+0x74>)
 8002434:	2100      	movs	r1, #0
 8002436:	0018      	movs	r0, r3
 8002438:	f001 fe3e 	bl	80040b8 <HAL_I2CEx_ConfigAnalogFilter>
 800243c:	1e03      	subs	r3, r0, #0
 800243e:	d001      	beq.n	8002444 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002440:	f000 fa2a 	bl	8002898 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <MX_I2C1_Init+0x74>)
 8002446:	2100      	movs	r1, #0
 8002448:	0018      	movs	r0, r3
 800244a:	f001 fe81 	bl	8004150 <HAL_I2CEx_ConfigDigitalFilter>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d001      	beq.n	8002456 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002452:	f000 fa21 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000021c 	.word	0x2000021c
 8002460:	40005400 	.word	0x40005400
 8002464:	20303e5d 	.word	0x20303e5d

08002468 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b08b      	sub	sp, #44	; 0x2c
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	2414      	movs	r4, #20
 8002472:	193b      	adds	r3, r7, r4
 8002474:	0018      	movs	r0, r3
 8002476:	2314      	movs	r3, #20
 8002478:	001a      	movs	r2, r3
 800247a:	2100      	movs	r1, #0
 800247c:	f003 fcc6 	bl	8005e0c <memset>
  if(i2cHandle->Instance==I2C1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <HAL_I2C_MspInit+0x90>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d131      	bne.n	80024ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_I2C_MspInit+0x94>)
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_I2C_MspInit+0x94>)
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	02c9      	lsls	r1, r1, #11
 8002494:	430a      	orrs	r2, r1
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_I2C_MspInit+0x94>)
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	02db      	lsls	r3, r3, #11
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a6:	0021      	movs	r1, r4
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	22c0      	movs	r2, #192	; 0xc0
 80024ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	2212      	movs	r2, #18
 80024b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	2201      	movs	r2, #1
 80024b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ba:	187b      	adds	r3, r7, r1
 80024bc:	2203      	movs	r2, #3
 80024be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	2201      	movs	r2, #1
 80024c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_I2C_MspInit+0x98>)
 80024ca:	0019      	movs	r1, r3
 80024cc:	0010      	movs	r0, r2
 80024ce:	f000 ff15 	bl	80032fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_I2C_MspInit+0x94>)
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_I2C_MspInit+0x94>)
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	0389      	lsls	r1, r1, #14
 80024dc:	430a      	orrs	r2, r1
 80024de:	61da      	str	r2, [r3, #28]
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_I2C_MspInit+0x94>)
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	039b      	lsls	r3, r3, #14
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b00b      	add	sp, #44	; 0x2c
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	40005400 	.word	0x40005400
 80024fc:	40021000 	.word	0x40021000
 8002500:	48000400 	.word	0x48000400

08002504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b085      	sub	sp, #20
 8002508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800250a:	f000 fdf5 	bl	80030f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800250e:	f000 f8df 	bl	80026d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002512:	f7ff fef7 	bl	8002304 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002516:	f7ff ff67 	bl	80023e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800251a:	f000 fd45 	bl	8002fa8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800251e:	f000 fb63 	bl	8002be8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  MPU6050Init();
 8002522:	f000 f9bf 	bl	80028a4 <MPU6050Init>
  MPUSetAccel(MPU_A16G);
 8002526:	2018      	movs	r0, #24
 8002528:	f000 fab6 	bl	8002a98 <MPUSetAccel>
  MPUSetGyro(MPU_G2000G);
 800252c:	2018      	movs	r0, #24
 800252e:	f000 fad3 	bl	8002ad8 <MPUSetGyro>

  MPUOrientation(&orientationLeg[0], &orientationLeg[1]);
 8002532:	4a54      	ldr	r2, [pc, #336]	; (8002684 <main+0x180>)
 8002534:	4b54      	ldr	r3, [pc, #336]	; (8002688 <main+0x184>)
 8002536:	0011      	movs	r1, r2
 8002538:	0018      	movs	r0, r3
 800253a:	f000 faed 	bl	8002b18 <MPUOrientation>

  if(orientationLeg[1] == 1)
 800253e:	4b52      	ldr	r3, [pc, #328]	; (8002688 <main+0x184>)
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d106      	bne.n	8002554 <main+0x50>
  {
	  HAL_UART_Transmit(&huart1, "-", sizeof("-"), HAL_MAX_DELAY);
 8002546:	2301      	movs	r3, #1
 8002548:	425b      	negs	r3, r3
 800254a:	4950      	ldr	r1, [pc, #320]	; (800268c <main+0x188>)
 800254c:	4850      	ldr	r0, [pc, #320]	; (8002690 <main+0x18c>)
 800254e:	2202      	movs	r2, #2
 8002550:	f003 f8ce 	bl	80056f0 <HAL_UART_Transmit>
  }
  if(orientationLeg[0] == 0)
 8002554:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <main+0x184>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <main+0x68>
  {
	  HAL_UART_Transmit(&huart1, "X", sizeof("X"), HAL_MAX_DELAY);
 800255c:	2301      	movs	r3, #1
 800255e:	425b      	negs	r3, r3
 8002560:	494c      	ldr	r1, [pc, #304]	; (8002694 <main+0x190>)
 8002562:	484b      	ldr	r0, [pc, #300]	; (8002690 <main+0x18c>)
 8002564:	2202      	movs	r2, #2
 8002566:	f003 f8c3 	bl	80056f0 <HAL_UART_Transmit>
 800256a:	e012      	b.n	8002592 <main+0x8e>
  }
  else if(orientationLeg[0] == 1)
 800256c:	4b46      	ldr	r3, [pc, #280]	; (8002688 <main+0x184>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <main+0x80>
  {
	  HAL_UART_Transmit(&huart1, "Y", sizeof("Y"), HAL_MAX_DELAY);
 8002574:	2301      	movs	r3, #1
 8002576:	425b      	negs	r3, r3
 8002578:	4947      	ldr	r1, [pc, #284]	; (8002698 <main+0x194>)
 800257a:	4845      	ldr	r0, [pc, #276]	; (8002690 <main+0x18c>)
 800257c:	2202      	movs	r2, #2
 800257e:	f003 f8b7 	bl	80056f0 <HAL_UART_Transmit>
 8002582:	e006      	b.n	8002592 <main+0x8e>
  }
  else
  {
	  HAL_UART_Transmit(&huart1, "Z", sizeof("Z"), HAL_MAX_DELAY);
 8002584:	2301      	movs	r3, #1
 8002586:	425b      	negs	r3, r3
 8002588:	4944      	ldr	r1, [pc, #272]	; (800269c <main+0x198>)
 800258a:	4841      	ldr	r0, [pc, #260]	; (8002690 <main+0x18c>)
 800258c:	2202      	movs	r2, #2
 800258e:	f003 f8af 	bl	80056f0 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 8002592:	2301      	movs	r3, #1
 8002594:	425b      	negs	r3, r3
 8002596:	4942      	ldr	r1, [pc, #264]	; (80026a0 <main+0x19c>)
 8002598:	483d      	ldr	r0, [pc, #244]	; (8002690 <main+0x18c>)
 800259a:	2202      	movs	r2, #2
 800259c:	f003 f8a8 	bl	80056f0 <HAL_UART_Transmit>

  for(uint8_t i = 0; i < 3; i++)
 80025a0:	1dfb      	adds	r3, r7, #7
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e022      	b.n	80025ee <main+0xea>
  {
	  HAL_UART_Transmit(&huart1, nameArray[i], sizeof(nameArray[i]), HAL_MAX_DELAY);
 80025a8:	1dfb      	adds	r3, r7, #7
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <main+0x1a0>)
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	58d1      	ldr	r1, [r2, r3]
 80025b2:	2301      	movs	r3, #1
 80025b4:	425b      	negs	r3, r3
 80025b6:	4836      	ldr	r0, [pc, #216]	; (8002690 <main+0x18c>)
 80025b8:	2204      	movs	r2, #4
 80025ba:	f003 f899 	bl	80056f0 <HAL_UART_Transmit>
	  if(i != 5)
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d007      	beq.n	80025d6 <main+0xd2>
	  {
		  HAL_UART_Transmit(&huart1, ",", sizeof(","), HAL_MAX_DELAY);
 80025c6:	2301      	movs	r3, #1
 80025c8:	425b      	negs	r3, r3
 80025ca:	4937      	ldr	r1, [pc, #220]	; (80026a8 <main+0x1a4>)
 80025cc:	4830      	ldr	r0, [pc, #192]	; (8002690 <main+0x18c>)
 80025ce:	2202      	movs	r2, #2
 80025d0:	f003 f88e 	bl	80056f0 <HAL_UART_Transmit>
 80025d4:	e006      	b.n	80025e4 <main+0xe0>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 80025d6:	2301      	movs	r3, #1
 80025d8:	425b      	negs	r3, r3
 80025da:	4931      	ldr	r1, [pc, #196]	; (80026a0 <main+0x19c>)
 80025dc:	482c      	ldr	r0, [pc, #176]	; (8002690 <main+0x18c>)
 80025de:	2202      	movs	r2, #2
 80025e0:	f003 f886 	bl	80056f0 <HAL_UART_Transmit>
  for(uint8_t i = 0; i < 3; i++)
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	1dfb      	adds	r3, r7, #7
 80025ea:	3201      	adds	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d9d8      	bls.n	80025a8 <main+0xa4>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80025f6:	2390      	movs	r3, #144	; 0x90
 80025f8:	05db      	lsls	r3, r3, #23
 80025fa:	2104      	movs	r1, #4
 80025fc:	0018      	movs	r0, r3
 80025fe:	f001 f80a 	bl	8003616 <HAL_GPIO_TogglePin>

	  stap();
 8002602:	f000 f8d3 	bl	80027ac <stap>

	  MPUReadAll(&allData[0][0], &allData[0][1], &allData[0][2], &allData[0][3], &allData[0][4], &allData[0][5]);
 8002606:	4c29      	ldr	r4, [pc, #164]	; (80026ac <main+0x1a8>)
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <main+0x1ac>)
 800260a:	492a      	ldr	r1, [pc, #168]	; (80026b4 <main+0x1b0>)
 800260c:	482a      	ldr	r0, [pc, #168]	; (80026b8 <main+0x1b4>)
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <main+0x1b8>)
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <main+0x1bc>)
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	0023      	movs	r3, r4
 8002618:	f000 fa26 	bl	8002a68 <MPUReadAll>

	  forceCounter = 0;
 800261c:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <main+0x1c0>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
	  while(forceCounter < 6)
 8002622:	e01f      	b.n	8002664 <main+0x160>
	  {
		sprintf(numberss, "%d", allData[0][forceCounter]);
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <main+0x1c0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	001a      	movs	r2, r3
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <main+0x1b4>)
 800262c:	0052      	lsls	r2, r2, #1
 800262e:	5ed3      	ldrsh	r3, [r2, r3]
 8002630:	001a      	movs	r2, r3
 8002632:	4925      	ldr	r1, [pc, #148]	; (80026c8 <main+0x1c4>)
 8002634:	003b      	movs	r3, r7
 8002636:	0018      	movs	r0, r3
 8002638:	f004 fa76 	bl	8006b28 <siprintf>
		HAL_UART_Transmit(&huart1, numberss, sizeof(numberss), HAL_MAX_DELAY);
 800263c:	2301      	movs	r3, #1
 800263e:	425b      	negs	r3, r3
 8002640:	0039      	movs	r1, r7
 8002642:	4813      	ldr	r0, [pc, #76]	; (8002690 <main+0x18c>)
 8002644:	2206      	movs	r2, #6
 8002646:	f003 f853 	bl	80056f0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, "\t", sizeof("\t"), HAL_MAX_DELAY);
 800264a:	2301      	movs	r3, #1
 800264c:	425b      	negs	r3, r3
 800264e:	491f      	ldr	r1, [pc, #124]	; (80026cc <main+0x1c8>)
 8002650:	480f      	ldr	r0, [pc, #60]	; (8002690 <main+0x18c>)
 8002652:	2202      	movs	r2, #2
 8002654:	f003 f84c 	bl	80056f0 <HAL_UART_Transmit>
		forceCounter++;
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <main+0x1c0>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <main+0x1c0>)
 8002662:	701a      	strb	r2, [r3, #0]
	  while(forceCounter < 6)
 8002664:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <main+0x1c0>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d9db      	bls.n	8002624 <main+0x120>
	  }
	  HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 800266c:	2301      	movs	r3, #1
 800266e:	425b      	negs	r3, r3
 8002670:	490b      	ldr	r1, [pc, #44]	; (80026a0 <main+0x19c>)
 8002672:	4807      	ldr	r0, [pc, #28]	; (8002690 <main+0x18c>)
 8002674:	2202      	movs	r2, #2
 8002676:	f003 f83b 	bl	80056f0 <HAL_UART_Transmit>

	  //HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
	  HAL_Delay(250);
 800267a:	20fa      	movs	r0, #250	; 0xfa
 800267c:	f000 fd6c 	bl	8003158 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8002680:	e7b9      	b.n	80025f6 <main+0xf2>
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	20000af9 	.word	0x20000af9
 8002688:	20000af8 	.word	0x20000af8
 800268c:	0800a810 	.word	0x0800a810
 8002690:	20000b7c 	.word	0x20000b7c
 8002694:	0800a814 	.word	0x0800a814
 8002698:	0800a818 	.word	0x0800a818
 800269c:	0800a81c 	.word	0x0800a81c
 80026a0:	0800a820 	.word	0x0800a820
 80026a4:	20000000 	.word	0x20000000
 80026a8:	0800a824 	.word	0x0800a824
 80026ac:	20000a0e 	.word	0x20000a0e
 80026b0:	20000a0c 	.word	0x20000a0c
 80026b4:	20000a0a 	.word	0x20000a0a
 80026b8:	20000a08 	.word	0x20000a08
 80026bc:	20000a12 	.word	0x20000a12
 80026c0:	20000a10 	.word	0x20000a10
 80026c4:	20000268 	.word	0x20000268
 80026c8:	0800a828 	.word	0x0800a828
 80026cc:	0800a82c 	.word	0x0800a82c

080026d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b095      	sub	sp, #84	; 0x54
 80026d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d6:	2420      	movs	r4, #32
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	0018      	movs	r0, r3
 80026dc:	2330      	movs	r3, #48	; 0x30
 80026de:	001a      	movs	r2, r3
 80026e0:	2100      	movs	r1, #0
 80026e2:	f003 fb93 	bl	8005e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e6:	2310      	movs	r3, #16
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	0018      	movs	r0, r3
 80026ec:	2310      	movs	r3, #16
 80026ee:	001a      	movs	r2, r3
 80026f0:	2100      	movs	r1, #0
 80026f2:	f003 fb8b 	bl	8005e0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f6:	003b      	movs	r3, r7
 80026f8:	0018      	movs	r0, r3
 80026fa:	2310      	movs	r3, #16
 80026fc:	001a      	movs	r2, r3
 80026fe:	2100      	movs	r1, #0
 8002700:	f003 fb84 	bl	8005e0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002704:	0021      	movs	r1, r4
 8002706:	187b      	adds	r3, r7, r1
 8002708:	220a      	movs	r2, #10
 800270a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2201      	movs	r2, #1
 8002710:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2210      	movs	r2, #16
 8002716:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2201      	movs	r2, #1
 800271c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800271e:	187b      	adds	r3, r7, r1
 8002720:	2202      	movs	r2, #2
 8002722:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002724:	187b      	adds	r3, r7, r1
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800272a:	187b      	adds	r3, r7, r1
 800272c:	22a0      	movs	r2, #160	; 0xa0
 800272e:	0392      	lsls	r2, r2, #14
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2200      	movs	r2, #0
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002738:	187b      	adds	r3, r7, r1
 800273a:	0018      	movs	r0, r3
 800273c:	f001 fd54 	bl	80041e8 <HAL_RCC_OscConfig>
 8002740:	1e03      	subs	r3, r0, #0
 8002742:	d001      	beq.n	8002748 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002744:	f000 f8a8 	bl	8002898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002748:	2110      	movs	r1, #16
 800274a:	187b      	adds	r3, r7, r1
 800274c:	2207      	movs	r2, #7
 800274e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2202      	movs	r2, #2
 8002754:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002762:	187b      	adds	r3, r7, r1
 8002764:	2101      	movs	r1, #1
 8002766:	0018      	movs	r0, r3
 8002768:	f002 f858 	bl	800481c <HAL_RCC_ClockConfig>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002770:	f000 f892 	bl	8002898 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002774:	003b      	movs	r3, r7
 8002776:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <SystemClock_Config+0xd8>)
 8002778:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800277a:	003b      	movs	r3, r7
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002780:	003b      	movs	r3, r7
 8002782:	2210      	movs	r2, #16
 8002784:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002786:	003b      	movs	r3, r7
 8002788:	2280      	movs	r2, #128	; 0x80
 800278a:	0092      	lsls	r2, r2, #2
 800278c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800278e:	003b      	movs	r3, r7
 8002790:	0018      	movs	r0, r3
 8002792:	f002 f9bf 	bl	8004b14 <HAL_RCCEx_PeriphCLKConfig>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800279a:	f000 f87d 	bl	8002898 <Error_Handler>
  }
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b015      	add	sp, #84	; 0x54
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	00010021 	.word	0x00010021

080027ac <stap>:
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
	MPUReadAll(&MPURTCData[currTime.Seconds][counter][0], &MPURTCData[currTime.Seconds][counter][1], &MPURTCData[currTime.Seconds][counter][2], &MPURTCData[currTime.Seconds][counter][3], &MPURTCData[currTime.Seconds][counter][4], &MPURTCData[currTime.Seconds][counter][5]);
}

void stap()
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
//	uint8_t forCounter = 0;
//	char numbers[6];
	int16_t data[3];

	MPU6050ReadAccel(&data[0], &data[1], &data[2]);
 80027b2:	003b      	movs	r3, r7
 80027b4:	1d1a      	adds	r2, r3, #4
 80027b6:	003b      	movs	r3, r7
 80027b8:	1c99      	adds	r1, r3, #2
 80027ba:	003b      	movs	r3, r7
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f8db 	bl	8002978 <MPU6050ReadAccel>
	HAL_UART_Transmit(&huart1, numbers, sizeof(numbers), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, "_", sizeof("_"), HAL_MAX_DELAY);
	sprintf(numbers, "%d", data[2]);
	HAL_UART_Transmit(&huart1, numbers, sizeof(numbers), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, "_", sizeof("_"), HAL_MAX_DELAY);*/
	if(orientationLeg[1] == 0)
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <stap+0xac>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d117      	bne.n	80027fa <stap+0x4e>
	{
		if(data[orientationLeg[0]] > (previous + 2000))
 80027ca:	4b23      	ldr	r3, [pc, #140]	; (8002858 <stap+0xac>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	001a      	movs	r2, r3
 80027d0:	003b      	movs	r3, r7
 80027d2:	0052      	lsls	r2, r2, #1
 80027d4:	5ed3      	ldrsh	r3, [r2, r3]
 80027d6:	001a      	movs	r2, r3
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <stap+0xb0>)
 80027da:	2100      	movs	r1, #0
 80027dc:	5e5b      	ldrsh	r3, [r3, r1]
 80027de:	21fa      	movs	r1, #250	; 0xfa
 80027e0:	00c9      	lsls	r1, r1, #3
 80027e2:	468c      	mov	ip, r1
 80027e4:	4463      	add	r3, ip
 80027e6:	429a      	cmp	r2, r3
 80027e8:	dd1d      	ble.n	8002826 <stap+0x7a>
		{
			HAL_UART_Transmit(&huart1, "STAP", sizeof("STAP"), HAL_MAX_DELAY);
 80027ea:	2301      	movs	r3, #1
 80027ec:	425b      	negs	r3, r3
 80027ee:	491c      	ldr	r1, [pc, #112]	; (8002860 <stap+0xb4>)
 80027f0:	481c      	ldr	r0, [pc, #112]	; (8002864 <stap+0xb8>)
 80027f2:	2205      	movs	r2, #5
 80027f4:	f002 ff7c 	bl	80056f0 <HAL_UART_Transmit>
 80027f8:	e015      	b.n	8002826 <stap+0x7a>
		 }
	} else
	{
		if(data[orientationLeg[0]] < (previous - 2000))
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <stap+0xac>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	001a      	movs	r2, r3
 8002800:	003b      	movs	r3, r7
 8002802:	0052      	lsls	r2, r2, #1
 8002804:	5ed3      	ldrsh	r3, [r2, r3]
 8002806:	001a      	movs	r2, r3
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <stap+0xb0>)
 800280a:	2100      	movs	r1, #0
 800280c:	5e5b      	ldrsh	r3, [r3, r1]
 800280e:	4916      	ldr	r1, [pc, #88]	; (8002868 <stap+0xbc>)
 8002810:	468c      	mov	ip, r1
 8002812:	4463      	add	r3, ip
 8002814:	429a      	cmp	r2, r3
 8002816:	da06      	bge.n	8002826 <stap+0x7a>
		{
		 	HAL_UART_Transmit(&huart1, "STAP", sizeof("STAP"), HAL_MAX_DELAY);
 8002818:	2301      	movs	r3, #1
 800281a:	425b      	negs	r3, r3
 800281c:	4910      	ldr	r1, [pc, #64]	; (8002860 <stap+0xb4>)
 800281e:	4811      	ldr	r0, [pc, #68]	; (8002864 <stap+0xb8>)
 8002820:	2205      	movs	r2, #5
 8002822:	f002 ff65 	bl	80056f0 <HAL_UART_Transmit>
		}
	}
	previous = data[orientationLeg[0]];
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <stap+0xac>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	001a      	movs	r2, r3
 800282c:	003b      	movs	r3, r7
 800282e:	0052      	lsls	r2, r2, #1
 8002830:	5ed2      	ldrsh	r2, [r2, r3]
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <stap+0xb0>)
 8002834:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <stap+0xc0>)
 8002838:	2104      	movs	r1, #4
 800283a:	0018      	movs	r0, r3
 800283c:	f000 feeb 	bl	8003616 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 8002840:	2301      	movs	r3, #1
 8002842:	425b      	negs	r3, r3
 8002844:	490a      	ldr	r1, [pc, #40]	; (8002870 <stap+0xc4>)
 8002846:	4807      	ldr	r0, [pc, #28]	; (8002864 <stap+0xb8>)
 8002848:	2202      	movs	r2, #2
 800284a:	f002 ff51 	bl	80056f0 <HAL_UART_Transmit>
}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	20000af8 	.word	0x20000af8
 800285c:	20000284 	.word	0x20000284
 8002860:	0800a830 	.word	0x0800a830
 8002864:	20000b7c 	.word	0x20000b7c
 8002868:	fffff830 	.word	0xfffff830
 800286c:	48000400 	.word	0x48000400
 8002870:	0800a820 	.word	0x0800a820

08002874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002886:	f000 fc4b 	bl	8003120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	40000400 	.word	0x40000400

08002898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800289c:	b672      	cpsid	i
}
 800289e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <Error_Handler+0x8>
	...

080028a4 <MPU6050Init>:
#include "mpu.h"

uint8_t currentAccelScale, currentGyroScale;

bool MPU6050Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80028aa:	4830      	ldr	r0, [pc, #192]	; (800296c <MPU6050Init+0xc8>)
 80028ac:	23fa      	movs	r3, #250	; 0xfa
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	2275      	movs	r2, #117	; 0x75
 80028be:	21d0      	movs	r1, #208	; 0xd0
 80028c0:	f001 f888 	bl	80039d4 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80028c4:	1dfb      	adds	r3, r7, #7
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b68      	cmp	r3, #104	; 0x68
 80028ca:	d149      	bne.n	8002960 <MPU6050Init+0xbc>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		data = 0;
 80028cc:	1dbb      	adds	r3, r7, #6
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&data, 1, 1000);
 80028d2:	4826      	ldr	r0, [pc, #152]	; (800296c <MPU6050Init+0xc8>)
 80028d4:	23fa      	movs	r3, #250	; 0xfa
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	9302      	str	r3, [sp, #8]
 80028da:	2301      	movs	r3, #1
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	1dbb      	adds	r3, r7, #6
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2301      	movs	r3, #1
 80028e4:	226b      	movs	r2, #107	; 0x6b
 80028e6:	21d0      	movs	r1, #208	; 0xd0
 80028e8:	f000 ff46 	bl	8003778 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data = 0x07;
 80028ec:	1dbb      	adds	r3, r7, #6
 80028ee:	2207      	movs	r2, #7
 80028f0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 80028f2:	481e      	ldr	r0, [pc, #120]	; (800296c <MPU6050Init+0xc8>)
 80028f4:	23fa      	movs	r3, #250	; 0xfa
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	9302      	str	r3, [sp, #8]
 80028fa:	2301      	movs	r3, #1
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	1dbb      	adds	r3, r7, #6
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2301      	movs	r3, #1
 8002904:	2219      	movs	r2, #25
 8002906:	21d0      	movs	r1, #208	; 0xd0
 8002908:	f000 ff36 	bl	8003778 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		data = MPU_A2G;
 800290c:	1dbb      	adds	r3, r7, #6
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
		currentAccelScale = data;
 8002912:	1dbb      	adds	r3, r7, #6
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <MPU6050Init+0xcc>)
 8002918:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 800291a:	4814      	ldr	r0, [pc, #80]	; (800296c <MPU6050Init+0xc8>)
 800291c:	23fa      	movs	r3, #250	; 0xfa
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	2301      	movs	r3, #1
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	1dbb      	adds	r3, r7, #6
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2301      	movs	r3, #1
 800292c:	221c      	movs	r2, #28
 800292e:	21d0      	movs	r1, #208	; 0xd0
 8002930:	f000 ff22 	bl	8003778 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		data = MPU_G250G;
 8002934:	1dbb      	adds	r3, r7, #6
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
		currentGyroScale = data;
 800293a:	1dbb      	adds	r3, r7, #6
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <MPU6050Init+0xd0>)
 8002940:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8002942:	480a      	ldr	r0, [pc, #40]	; (800296c <MPU6050Init+0xc8>)
 8002944:	23fa      	movs	r3, #250	; 0xfa
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	9302      	str	r3, [sp, #8]
 800294a:	2301      	movs	r3, #1
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	1dbb      	adds	r3, r7, #6
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	221b      	movs	r2, #27
 8002956:	21d0      	movs	r1, #208	; 0xd0
 8002958:	f000 ff0e 	bl	8003778 <HAL_I2C_Mem_Write>
		return true;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <MPU6050Init+0xbe>
	} else 
	{
		return false;
 8002960:	2300      	movs	r3, #0
	}

}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	2000021c 	.word	0x2000021c
 8002970:	20000b11 	.word	0x20000b11
 8002974:	20000b10 	.word	0x20000b10

08002978 <MPU6050ReadAccel>:

void MPU6050ReadAccel(int16_t *aXRaw, int16_t *aYRaw, int16_t *aZRaw)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b08b      	sub	sp, #44	; 0x2c
 800297c:	af04      	add	r7, sp, #16
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
	uint8_t RecData[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, RecData, 6, 1000);
 8002984:	4819      	ldr	r0, [pc, #100]	; (80029ec <MPU6050ReadAccel+0x74>)
 8002986:	23fa      	movs	r3, #250	; 0xfa
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	2306      	movs	r3, #6
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	2410      	movs	r4, #16
 8002992:	193b      	adds	r3, r7, r4
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2301      	movs	r3, #1
 8002998:	223b      	movs	r2, #59	; 0x3b
 800299a:	21d0      	movs	r1, #208	; 0xd0
 800299c:	f001 f81a 	bl	80039d4 <HAL_I2C_Mem_Read>

	*aXRaw = (int16_t)(RecData[0] << 8 | RecData [1]);
 80029a0:	0021      	movs	r1, r4
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	b21a      	sxth	r2, r3
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	4313      	orrs	r3, r2
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	801a      	strh	r2, [r3, #0]
	*aYRaw = (int16_t)(RecData[2] << 8 | RecData [3]);
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	789b      	ldrb	r3, [r3, #2]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	b21a      	sxth	r2, r3
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	78db      	ldrb	r3, [r3, #3]
 80029c4:	b21b      	sxth	r3, r3
 80029c6:	4313      	orrs	r3, r2
 80029c8:	b21a      	sxth	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	801a      	strh	r2, [r3, #0]
	*aZRaw = (int16_t)(RecData[4] << 8 | RecData [5]);
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	791b      	ldrb	r3, [r3, #4]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	b21a      	sxth	r2, r3
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	795b      	ldrb	r3, [r3, #5]
 80029da:	b21b      	sxth	r3, r3
 80029dc:	4313      	orrs	r3, r2
 80029de:	b21a      	sxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	801a      	strh	r2, [r3, #0]
	     for more details check ACCEL_CONFIG Register              ****/

	//Ax = Accel_X_RAW/16384.0;
	//Ay = Accel_Y_RAW/16384.0;
	//Az = Accel_Z_RAW/16384.0;
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b007      	add	sp, #28
 80029ea:	bd90      	pop	{r4, r7, pc}
 80029ec:	2000021c 	.word	0x2000021c

080029f0 <MPU6050ReadGyro>:

void MPU6050ReadGyro(int16_t *gXRaw, int16_t *gYRaw, int16_t *gZRaw)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b08b      	sub	sp, #44	; 0x2c
 80029f4:	af04      	add	r7, sp, #16
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
	uint8_t RecData[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, RecData, 6, 1000);
 80029fc:	4819      	ldr	r0, [pc, #100]	; (8002a64 <MPU6050ReadGyro+0x74>)
 80029fe:	23fa      	movs	r3, #250	; 0xfa
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	2306      	movs	r3, #6
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	2410      	movs	r4, #16
 8002a0a:	193b      	adds	r3, r7, r4
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	2243      	movs	r2, #67	; 0x43
 8002a12:	21d0      	movs	r1, #208	; 0xd0
 8002a14:	f000 ffde 	bl	80039d4 <HAL_I2C_Mem_Read>

	*gXRaw = (int16_t)(RecData[0] << 8 | RecData [1]);
 8002a18:	0021      	movs	r1, r4
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	b21a      	sxth	r2, r3
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	b21b      	sxth	r3, r3
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	801a      	strh	r2, [r3, #0]
	*gYRaw = (int16_t)(RecData[2] << 8 | RecData [3]);
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	789b      	ldrb	r3, [r3, #2]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	78db      	ldrb	r3, [r3, #3]
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	801a      	strh	r2, [r3, #0]
	*gZRaw = (int16_t)(RecData[4] << 8 | RecData [5]);
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	791b      	ldrb	r3, [r3, #4]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	b21a      	sxth	r2, r3
 8002a4e:	187b      	adds	r3, r7, r1
 8002a50:	795b      	ldrb	r3, [r3, #5]
 8002a52:	b21b      	sxth	r3, r3
 8002a54:	4313      	orrs	r3, r2
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	801a      	strh	r2, [r3, #0]
	     for more details check GYRO_CONFIG Register              ****/

	//Gx = Gyro_X_RAW/131.0;
	//Gy = Gyro_Y_RAW/131.0;
	//Gz = Gyro_Z_RAW/131.0;
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b007      	add	sp, #28
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	2000021c 	.word	0x2000021c

08002a68 <MPUReadAll>:

void MPUReadAll(int16_t *aXRaw, int16_t *aYRaw, int16_t *aZRaw, int16_t *gXRaw, int16_t *gYRaw, int16_t *gZRaw)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
	MPU6050ReadAccel(aXRaw, aYRaw, aZRaw);
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7ff ff7b 	bl	8002978 <MPU6050ReadAccel>
	MPU6050ReadGyro(gXRaw, gYRaw, gZRaw);
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	69b9      	ldr	r1, [r7, #24]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff ffb1 	bl	80029f0 <MPU6050ReadGyro>
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b004      	add	sp, #16
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <MPUSetAccel>:

void MPUSetAccel(uint8_t acceleration)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af04      	add	r7, sp, #16
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	701a      	strb	r2, [r3, #0]

	currentAccelScale = acceleration;
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MPUSetAccel+0x38>)
 8002aaa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &acceleration, 1, 1000);
 8002aac:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <MPUSetAccel+0x3c>)
 8002aae:	23fa      	movs	r3, #250	; 0xfa
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	9302      	str	r3, [sp, #8]
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	1dfb      	adds	r3, r7, #7
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	221c      	movs	r2, #28
 8002ac0:	21d0      	movs	r1, #208	; 0xd0
 8002ac2:	f000 fe59 	bl	8003778 <HAL_I2C_Mem_Write>
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	20000b11 	.word	0x20000b11
 8002ad4:	2000021c 	.word	0x2000021c

08002ad8 <MPUSetGyro>:

void MPUSetGyro(uint8_t gyroSpeed)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af04      	add	r7, sp, #16
 8002ade:	0002      	movs	r2, r0
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	701a      	strb	r2, [r3, #0]
	currentGyroScale = gyroSpeed;
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	781a      	ldrb	r2, [r3, #0]
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <MPUSetGyro+0x38>)
 8002aea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &gyroSpeed, 1, 1000);
 8002aec:	4809      	ldr	r0, [pc, #36]	; (8002b14 <MPUSetGyro+0x3c>)
 8002aee:	23fa      	movs	r3, #250	; 0xfa
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	9302      	str	r3, [sp, #8]
 8002af4:	2301      	movs	r3, #1
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2301      	movs	r3, #1
 8002afe:	221b      	movs	r2, #27
 8002b00:	21d0      	movs	r1, #208	; 0xd0
 8002b02:	f000 fe39 	bl	8003778 <HAL_I2C_Mem_Write>
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b002      	add	sp, #8
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	20000b10 	.word	0x20000b10
 8002b14:	2000021c 	.word	0x2000021c

08002b18 <MPUOrientation>:

void MPUOrientation(uint8_t *orientationAxis, uint8_t *orientationNegative)
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
	uint16_t highestData = 0;
 8002b22:	2316      	movs	r3, #22
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2200      	movs	r2, #0
 8002b28:	801a      	strh	r2, [r3, #0]
	uint8_t negative = 0;
 8002b2a:	2315      	movs	r3, #21
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
	uint8_t forceCounter = 0;
 8002b32:	2314      	movs	r3, #20
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
	int16_t axisData[6];

	MPU6050ReadAccel(&axisData[0], &axisData[1], &axisData[2]);
 8002b3a:	2008      	movs	r0, #8
 8002b3c:	183b      	adds	r3, r7, r0
 8002b3e:	1d1a      	adds	r2, r3, #4
 8002b40:	183b      	adds	r3, r7, r0
 8002b42:	1c99      	adds	r1, r3, #2
 8002b44:	183b      	adds	r3, r7, r0
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7ff ff16 	bl	8002978 <MPU6050ReadAccel>

	while(forceCounter < 3)
 8002b4c:	e042      	b.n	8002bd4 <MPUOrientation+0xbc>
	{
	  	if(axisData[forceCounter] < 0)
 8002b4e:	2014      	movs	r0, #20
 8002b50:	183b      	adds	r3, r7, r0
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	2408      	movs	r4, #8
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	0052      	lsls	r2, r2, #1
 8002b5a:	5ed3      	ldrsh	r3, [r2, r3]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da12      	bge.n	8002b86 <MPUOrientation+0x6e>
	  	{
	  		axisData[forceCounter] = axisData[forceCounter]*-1;
 8002b60:	183b      	adds	r3, r7, r0
 8002b62:	781a      	ldrb	r2, [r3, #0]
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	0052      	lsls	r2, r2, #1
 8002b68:	5ed3      	ldrsh	r3, [r2, r3]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	425b      	negs	r3, r3
 8002b6e:	b299      	uxth	r1, r3
 8002b70:	183b      	adds	r3, r7, r0
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	b209      	sxth	r1, r1
 8002b76:	193b      	adds	r3, r7, r4
 8002b78:	0052      	lsls	r2, r2, #1
 8002b7a:	52d1      	strh	r1, [r2, r3]
	  		negative = 1;
 8002b7c:	2315      	movs	r3, #21
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e003      	b.n	8002b8e <MPUOrientation+0x76>
	  	}else
	  	{
	  		negative = 0;
 8002b86:	2315      	movs	r3, #21
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
	  	}
	  	if(highestData < axisData[forceCounter])
 8002b8e:	2416      	movs	r4, #22
 8002b90:	193b      	adds	r3, r7, r4
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	2014      	movs	r0, #20
 8002b96:	183a      	adds	r2, r7, r0
 8002b98:	7811      	ldrb	r1, [r2, #0]
 8002b9a:	2508      	movs	r5, #8
 8002b9c:	197a      	adds	r2, r7, r5
 8002b9e:	0049      	lsls	r1, r1, #1
 8002ba0:	5e8a      	ldrsh	r2, [r1, r2]
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	da10      	bge.n	8002bc8 <MPUOrientation+0xb0>
	  	{
	  		highestData = axisData[forceCounter];
 8002ba6:	0001      	movs	r1, r0
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	197b      	adds	r3, r7, r5
 8002bae:	0052      	lsls	r2, r2, #1
 8002bb0:	5ed2      	ldrsh	r2, [r2, r3]
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	801a      	strh	r2, [r3, #0]
	  		*orientationAxis = forceCounter;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	187a      	adds	r2, r7, r1
 8002bba:	7812      	ldrb	r2, [r2, #0]
 8002bbc:	701a      	strb	r2, [r3, #0]
	  		*orientationNegative = negative;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2215      	movs	r2, #21
 8002bc2:	18ba      	adds	r2, r7, r2
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	701a      	strb	r2, [r3, #0]
	  	}
		forceCounter++;
 8002bc8:	2114      	movs	r1, #20
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	3201      	adds	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
	while(forceCounter < 3)
 8002bd4:	2314      	movs	r3, #20
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d9b7      	bls.n	8002b4e <MPUOrientation+0x36>
	}
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b006      	add	sp, #24
 8002be6:	bdb0      	pop	{r4, r5, r7, pc}

08002be8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	2314      	movs	r3, #20
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f003 f908 	bl	8005e0c <memset>
  RTC_DateTypeDef sDate = {0};
 8002bfc:	003b      	movs	r3, r7
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c02:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c04:	4a28      	ldr	r2, [pc, #160]	; (8002ca8 <MX_RTC_Init+0xc0>)
 8002c06:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c08:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c0e:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c10:	227f      	movs	r2, #127	; 0x7f
 8002c12:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c16:	22ff      	movs	r2, #255	; 0xff
 8002c18:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f002 f83e 	bl	8004cb0 <HAL_RTC_Init>
 8002c34:	1e03      	subs	r3, r0, #0
 8002c36:	d001      	beq.n	8002c3c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002c38:	f7ff fe2e 	bl	8002898 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	2200      	movs	r2, #0
 8002c46:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	2200      	movs	r2, #0
 8002c52:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c5a:	1d39      	adds	r1, r7, #4
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	0018      	movs	r0, r3
 8002c62:	f002 f8b9 	bl	8004dd8 <HAL_RTC_SetTime>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8002c6a:	f7ff fe15 	bl	8002898 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c6e:	003b      	movs	r3, r7
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002c74:	003b      	movs	r3, r7
 8002c76:	2201      	movs	r2, #1
 8002c78:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002c7a:	003b      	movs	r3, r7
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002c80:	003b      	movs	r3, r7
 8002c82:	2200      	movs	r2, #0
 8002c84:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c86:	0039      	movs	r1, r7
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_RTC_Init+0xbc>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f002 f95f 	bl	8004f50 <HAL_RTC_SetDate>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d001      	beq.n	8002c9a <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8002c96:	f7ff fdff 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b006      	add	sp, #24
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	20000b14 	.word	0x20000b14
 8002ca8:	40002800 	.word	0x40002800

08002cac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <HAL_RTC_MspInit+0x28>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d106      	bne.n	8002ccc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RTC_MspInit+0x2c>)
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RTC_MspInit+0x2c>)
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	0209      	lsls	r1, r1, #8
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40002800 	.word	0x40002800
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <HAL_MspInit+0x44>)
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_MspInit+0x44>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	430a      	orrs	r2, r1
 8002cec:	619a      	str	r2, [r3, #24]
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_MspInit+0x44>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_MspInit+0x44>)
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_MspInit+0x44>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0549      	lsls	r1, r1, #21
 8002d04:	430a      	orrs	r2, r1
 8002d06:	61da      	str	r2, [r3, #28]
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_MspInit+0x44>)
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	055b      	lsls	r3, r3, #21
 8002d10:	4013      	ands	r3, r2
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	0019      	movs	r1, r3
 8002d3a:	2010      	movs	r0, #16
 8002d3c:	f000 fab8 	bl	80032b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d40:	2010      	movs	r0, #16
 8002d42:	f000 faca 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_InitTick+0xa4>)
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <HAL_InitTick+0xa4>)
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	61da      	str	r2, [r3, #28]
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_InitTick+0xa4>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	2202      	movs	r2, #2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d5e:	230c      	movs	r3, #12
 8002d60:	18fa      	adds	r2, r7, r3
 8002d62:	2310      	movs	r3, #16
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	0011      	movs	r1, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f001 fea9 	bl	8004ac0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d6e:	f001 fe91 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8002d72:	0003      	movs	r3, r0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	4914      	ldr	r1, [pc, #80]	; (8002dcc <HAL_InitTick+0xa8>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7fd f9e0 	bl	8000140 <__udivsi3>
 8002d80:	0003      	movs	r3, r0
 8002d82:	3b01      	subs	r3, #1
 8002d84:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_InitTick+0xac>)
 8002d88:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <HAL_InitTick+0xb0>)
 8002d8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002d8c:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_InitTick+0xac>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_InitTick+0xb4>)
 8002d90:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_InitTick+0xac>)
 8002d94:	6a3a      	ldr	r2, [r7, #32]
 8002d96:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <HAL_InitTick+0xac>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_InitTick+0xac>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_InitTick+0xac>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f002 f9ee 	bl	8005188 <HAL_TIM_Base_Init>
 8002dac:	1e03      	subs	r3, r0, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_InitTick+0xac>)
 8002db2:	0018      	movs	r0, r3
 8002db4:	f002 fa40 	bl	8005238 <HAL_TIM_Base_Start_IT>
 8002db8:	0003      	movs	r3, r0
 8002dba:	e000      	b.n	8002dbe <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b00a      	add	sp, #40	; 0x28
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	000f4240 	.word	0x000f4240
 8002dd0:	20000b34 	.word	0x20000b34
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	000003e7 	.word	0x000003e7

08002ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <NMI_Handler+0x4>

08002de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <HardFault_Handler+0x4>

08002de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <TIM3_IRQHandler+0x14>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f002 fa5e 	bl	80052d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20000b34 	.word	0x20000b34

08002e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_kill>:

int _kill(int pid, int sig)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e36:	f002 ffbf 	bl	8005db8 <__errno>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	2216      	movs	r2, #22
 8002e3e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e40:	2301      	movs	r3, #1
 8002e42:	425b      	negs	r3, r3
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_exit>:

void _exit (int status)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e54:	2301      	movs	r3, #1
 8002e56:	425a      	negs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f7ff ffe5 	bl	8002e2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e62:	e7fe      	b.n	8002e62 <_exit+0x16>

08002e64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e00a      	b.n	8002e8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e76:	e000      	b.n	8002e7a <_read+0x16>
 8002e78:	bf00      	nop
 8002e7a:	0001      	movs	r1, r0
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	60ba      	str	r2, [r7, #8]
 8002e82:	b2ca      	uxtb	r2, r1
 8002e84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	dbf0      	blt.n	8002e76 <_read+0x12>
	}

return len;
 8002e94:	687b      	ldr	r3, [r7, #4]
}
 8002e96:	0018      	movs	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b006      	add	sp, #24
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e009      	b.n	8002ec4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	60ba      	str	r2, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	e000      	b.n	8002ebe <_write+0x20>
 8002ebc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	dbf1      	blt.n	8002eb0 <_write+0x12>
	}
	return len;
 8002ecc:	687b      	ldr	r3, [r7, #4]
}
 8002ece:	0018      	movs	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b006      	add	sp, #24
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <_close>:

int _close(int file)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
	return -1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	425b      	negs	r3, r3
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b002      	add	sp, #8
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2280      	movs	r2, #128	; 0x80
 8002ef8:	0192      	lsls	r2, r2, #6
 8002efa:	605a      	str	r2, [r3, #4]
	return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_isatty>:

int _isatty(int file)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f0e:	2301      	movs	r3, #1
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
	return 0;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	0018      	movs	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b004      	add	sp, #16
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <_sbrk+0x5c>)
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <_sbrk+0x60>)
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <_sbrk+0x64>)
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <_sbrk+0x68>)
 8002f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <_sbrk+0x64>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d207      	bcs.n	8002f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f60:	f002 ff2a 	bl	8005db8 <__errno>
 8002f64:	0003      	movs	r3, r0
 8002f66:	220c      	movs	r2, #12
 8002f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	425b      	negs	r3, r3
 8002f6e:	e009      	b.n	8002f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <_sbrk+0x64>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <_sbrk+0x64>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	18d2      	adds	r2, r2, r3
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <_sbrk+0x64>)
 8002f80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f82:	68fb      	ldr	r3, [r7, #12]
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b006      	add	sp, #24
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20002000 	.word	0x20002000
 8002f90:	00000400 	.word	0x00000400
 8002f94:	20000210 	.word	0x20000210
 8002f98:	20000c18 	.word	0x20000c18

08002f9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <MX_USART1_UART_Init+0x5c>)
 8002fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fb4:	22e1      	movs	r2, #225	; 0xe1
 8002fb6:	0252      	lsls	r2, r2, #9
 8002fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fce:	220c      	movs	r2, #12
 8002fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <MX_USART1_UART_Init+0x58>)
 8002fec:	0018      	movs	r0, r3
 8002fee:	f002 fb2b 	bl	8005648 <HAL_UART_Init>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ff6:	f7ff fc4f 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000b7c 	.word	0x20000b7c
 8003004:	40013800 	.word	0x40013800

08003008 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b08b      	sub	sp, #44	; 0x2c
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	2414      	movs	r4, #20
 8003012:	193b      	adds	r3, r7, r4
 8003014:	0018      	movs	r0, r3
 8003016:	2314      	movs	r3, #20
 8003018:	001a      	movs	r2, r3
 800301a:	2100      	movs	r1, #0
 800301c:	f002 fef6 	bl	8005e0c <memset>
  if(uartHandle->Instance==USART1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_UART_MspInit+0x94>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d133      	bne.n	8003092 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_UART_MspInit+0x98>)
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_UART_MspInit+0x98>)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	01c9      	lsls	r1, r1, #7
 8003034:	430a      	orrs	r2, r1
 8003036:	619a      	str	r2, [r3, #24]
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_UART_MspInit+0x98>)
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	01db      	lsls	r3, r3, #7
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_UART_MspInit+0x98>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_UART_MspInit+0x98>)
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	0289      	lsls	r1, r1, #10
 8003050:	430a      	orrs	r2, r1
 8003052:	615a      	str	r2, [r3, #20]
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_UART_MspInit+0x98>)
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003062:	193b      	adds	r3, r7, r4
 8003064:	22c0      	movs	r2, #192	; 0xc0
 8003066:	00d2      	lsls	r2, r2, #3
 8003068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	0021      	movs	r1, r4
 800306c:	187b      	adds	r3, r7, r1
 800306e:	2202      	movs	r2, #2
 8003070:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	187b      	adds	r3, r7, r1
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2203      	movs	r2, #3
 800307c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2201      	movs	r2, #1
 8003082:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003084:	187a      	adds	r2, r7, r1
 8003086:	2390      	movs	r3, #144	; 0x90
 8003088:	05db      	lsls	r3, r3, #23
 800308a:	0011      	movs	r1, r2
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f935 	bl	80032fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	b00b      	add	sp, #44	; 0x2c
 8003098:	bd90      	pop	{r4, r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	40013800 	.word	0x40013800
 80030a0:	40021000 	.word	0x40021000

080030a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030a4:	480d      	ldr	r0, [pc, #52]	; (80030dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030a8:	480d      	ldr	r0, [pc, #52]	; (80030e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80030aa:	490e      	ldr	r1, [pc, #56]	; (80030e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030ac:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <LoopForever+0xe>)
  movs r3, #0
 80030ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b0:	e002      	b.n	80030b8 <LoopCopyDataInit>

080030b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b6:	3304      	adds	r3, #4

080030b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030bc:	d3f9      	bcc.n	80030b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80030c0:	4c0b      	ldr	r4, [pc, #44]	; (80030f0 <LoopForever+0x16>)
  movs r3, #0
 80030c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c4:	e001      	b.n	80030ca <LoopFillZerobss>

080030c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c8:	3204      	adds	r2, #4

080030ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030cc:	d3fb      	bcc.n	80030c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80030ce:	f7ff ff65 	bl	8002f9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80030d2:	f002 fe77 	bl	8005dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030d6:	f7ff fa15 	bl	8002504 <main>

080030da <LoopForever>:

LoopForever:
    b LoopForever
 80030da:	e7fe      	b.n	80030da <LoopForever>
  ldr   r0, =_estack
 80030dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80030e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80030e8:	0800adac 	.word	0x0800adac
  ldr r2, =_sbss
 80030ec:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80030f0:	20000c14 	.word	0x20000c14

080030f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030f4:	e7fe      	b.n	80030f4 <ADC1_IRQHandler>
	...

080030f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_Init+0x24>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_Init+0x24>)
 8003102:	2110      	movs	r1, #16
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003108:	2000      	movs	r0, #0
 800310a:	f7ff fe0b 	bl	8002d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800310e:	f7ff fde5 	bl	8002cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	40022000 	.word	0x40022000

08003120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_IncTick+0x1c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	001a      	movs	r2, r3
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_IncTick+0x20>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	18d2      	adds	r2, r2, r3
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_IncTick+0x20>)
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	2000001c 	.word	0x2000001c
 8003140:	20000c00 	.word	0x20000c00

08003144 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b02      	ldr	r3, [pc, #8]	; (8003154 <HAL_GetTick+0x10>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	20000c00 	.word	0x20000c00

08003158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff fff0 	bl	8003144 <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	3301      	adds	r3, #1
 8003170:	d005      	beq.n	800317e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_Delay+0x44>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	001a      	movs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	189b      	adds	r3, r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	f7ff ffe0 	bl	8003144 <HAL_GetTick>
 8003184:	0002      	movs	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f7      	bhi.n	8003180 <HAL_Delay+0x28>
  {
  }
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	2000001c 	.word	0x2000001c

080031a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	0002      	movs	r2, r0
 80031a8:	1dfb      	adds	r3, r7, #7
 80031aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b7f      	cmp	r3, #127	; 0x7f
 80031b2:	d809      	bhi.n	80031c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	001a      	movs	r2, r3
 80031ba:	231f      	movs	r3, #31
 80031bc:	401a      	ands	r2, r3
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <__NVIC_EnableIRQ+0x30>)
 80031c0:	2101      	movs	r1, #1
 80031c2:	4091      	lsls	r1, r2
 80031c4:	000a      	movs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]
  }
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	e000e100 	.word	0xe000e100

080031d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	0002      	movs	r2, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	1dfb      	adds	r3, r7, #7
 80031e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031e2:	1dfb      	adds	r3, r7, #7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b7f      	cmp	r3, #127	; 0x7f
 80031e8:	d828      	bhi.n	800323c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031ea:	4a2f      	ldr	r2, [pc, #188]	; (80032a8 <__NVIC_SetPriority+0xd4>)
 80031ec:	1dfb      	adds	r3, r7, #7
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	33c0      	adds	r3, #192	; 0xc0
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	589b      	ldr	r3, [r3, r2]
 80031fa:	1dfa      	adds	r2, r7, #7
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	0011      	movs	r1, r2
 8003200:	2203      	movs	r2, #3
 8003202:	400a      	ands	r2, r1
 8003204:	00d2      	lsls	r2, r2, #3
 8003206:	21ff      	movs	r1, #255	; 0xff
 8003208:	4091      	lsls	r1, r2
 800320a:	000a      	movs	r2, r1
 800320c:	43d2      	mvns	r2, r2
 800320e:	401a      	ands	r2, r3
 8003210:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	019b      	lsls	r3, r3, #6
 8003216:	22ff      	movs	r2, #255	; 0xff
 8003218:	401a      	ands	r2, r3
 800321a:	1dfb      	adds	r3, r7, #7
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	0018      	movs	r0, r3
 8003220:	2303      	movs	r3, #3
 8003222:	4003      	ands	r3, r0
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003228:	481f      	ldr	r0, [pc, #124]	; (80032a8 <__NVIC_SetPriority+0xd4>)
 800322a:	1dfb      	adds	r3, r7, #7
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	b25b      	sxtb	r3, r3
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	430a      	orrs	r2, r1
 8003234:	33c0      	adds	r3, #192	; 0xc0
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800323a:	e031      	b.n	80032a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800323c:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <__NVIC_SetPriority+0xd8>)
 800323e:	1dfb      	adds	r3, r7, #7
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	0019      	movs	r1, r3
 8003244:	230f      	movs	r3, #15
 8003246:	400b      	ands	r3, r1
 8003248:	3b08      	subs	r3, #8
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3306      	adds	r3, #6
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	18d3      	adds	r3, r2, r3
 8003252:	3304      	adds	r3, #4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1dfa      	adds	r2, r7, #7
 8003258:	7812      	ldrb	r2, [r2, #0]
 800325a:	0011      	movs	r1, r2
 800325c:	2203      	movs	r2, #3
 800325e:	400a      	ands	r2, r1
 8003260:	00d2      	lsls	r2, r2, #3
 8003262:	21ff      	movs	r1, #255	; 0xff
 8003264:	4091      	lsls	r1, r2
 8003266:	000a      	movs	r2, r1
 8003268:	43d2      	mvns	r2, r2
 800326a:	401a      	ands	r2, r3
 800326c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	019b      	lsls	r3, r3, #6
 8003272:	22ff      	movs	r2, #255	; 0xff
 8003274:	401a      	ands	r2, r3
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	0018      	movs	r0, r3
 800327c:	2303      	movs	r3, #3
 800327e:	4003      	ands	r3, r0
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003284:	4809      	ldr	r0, [pc, #36]	; (80032ac <__NVIC_SetPriority+0xd8>)
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	001c      	movs	r4, r3
 800328c:	230f      	movs	r3, #15
 800328e:	4023      	ands	r3, r4
 8003290:	3b08      	subs	r3, #8
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	430a      	orrs	r2, r1
 8003296:	3306      	adds	r3, #6
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	18c3      	adds	r3, r0, r3
 800329c:	3304      	adds	r3, #4
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b003      	add	sp, #12
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	e000e100 	.word	0xe000e100
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	210f      	movs	r1, #15
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	1c02      	adds	r2, r0, #0
 80032c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7ff ff81 	bl	80031d4 <__NVIC_SetPriority>
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b004      	add	sp, #16
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	0002      	movs	r2, r0
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff ff57 	bl	80031a0 <__NVIC_EnableIRQ>
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b002      	add	sp, #8
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330a:	e14f      	b.n	80035ac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4091      	lsls	r1, r2
 8003316:	000a      	movs	r2, r1
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d100      	bne.n	8003324 <HAL_GPIO_Init+0x28>
 8003322:	e140      	b.n	80035a6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d00b      	beq.n	8003344 <HAL_GPIO_Init+0x48>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d007      	beq.n	8003344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003338:	2b11      	cmp	r3, #17
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b12      	cmp	r3, #18
 8003342:	d130      	bne.n	80033a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	409a      	lsls	r2, r3
 8003352:	0013      	movs	r3, r2
 8003354:	43da      	mvns	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	409a      	lsls	r2, r3
 8003366:	0013      	movs	r3, r2
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800337a:	2201      	movs	r2, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	409a      	lsls	r2, r3
 8003380:	0013      	movs	r3, r2
 8003382:	43da      	mvns	r2, r3
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	2201      	movs	r2, #1
 8003392:	401a      	ands	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	409a      	lsls	r2, r3
 8003398:	0013      	movs	r3, r2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	409a      	lsls	r2, r3
 80033b4:	0013      	movs	r3, r2
 80033b6:	43da      	mvns	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	409a      	lsls	r2, r3
 80033c8:	0013      	movs	r3, r2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0xea>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b12      	cmp	r3, #18
 80033e4:	d123      	bne.n	800342e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	58d3      	ldr	r3, [r2, r3]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2207      	movs	r2, #7
 80033f8:	4013      	ands	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	220f      	movs	r2, #15
 80033fe:	409a      	lsls	r2, r3
 8003400:	0013      	movs	r3, r2
 8003402:	43da      	mvns	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2107      	movs	r1, #7
 8003412:	400b      	ands	r3, r1
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	409a      	lsls	r2, r3
 8003418:	0013      	movs	r3, r2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	08da      	lsrs	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3208      	adds	r2, #8
 8003428:	0092      	lsls	r2, r2, #2
 800342a:	6939      	ldr	r1, [r7, #16]
 800342c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	409a      	lsls	r2, r3
 800343c:	0013      	movs	r3, r2
 800343e:	43da      	mvns	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2203      	movs	r2, #3
 800344c:	401a      	ands	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	0013      	movs	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	055b      	lsls	r3, r3, #21
 800346a:	4013      	ands	r3, r2
 800346c:	d100      	bne.n	8003470 <HAL_GPIO_Init+0x174>
 800346e:	e09a      	b.n	80035a6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003470:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <HAL_GPIO_Init+0x2c8>)
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_GPIO_Init+0x2c8>)
 8003476:	2101      	movs	r1, #1
 8003478:	430a      	orrs	r2, r1
 800347a:	619a      	str	r2, [r3, #24]
 800347c:	4b51      	ldr	r3, [pc, #324]	; (80035c4 <HAL_GPIO_Init+0x2c8>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2201      	movs	r2, #1
 8003482:	4013      	ands	r3, r2
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003488:	4a4f      	ldr	r2, [pc, #316]	; (80035c8 <HAL_GPIO_Init+0x2cc>)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	589b      	ldr	r3, [r3, r2]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2203      	movs	r2, #3
 800349a:	4013      	ands	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	220f      	movs	r2, #15
 80034a0:	409a      	lsls	r2, r3
 80034a2:	0013      	movs	r3, r2
 80034a4:	43da      	mvns	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	2390      	movs	r3, #144	; 0x90
 80034b0:	05db      	lsls	r3, r3, #23
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d013      	beq.n	80034de <HAL_GPIO_Init+0x1e2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a44      	ldr	r2, [pc, #272]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00d      	beq.n	80034da <HAL_GPIO_Init+0x1de>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a43      	ldr	r2, [pc, #268]	; (80035d0 <HAL_GPIO_Init+0x2d4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d007      	beq.n	80034d6 <HAL_GPIO_Init+0x1da>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a42      	ldr	r2, [pc, #264]	; (80035d4 <HAL_GPIO_Init+0x2d8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_GPIO_Init+0x1d6>
 80034ce:	2303      	movs	r3, #3
 80034d0:	e006      	b.n	80034e0 <HAL_GPIO_Init+0x1e4>
 80034d2:	2305      	movs	r3, #5
 80034d4:	e004      	b.n	80034e0 <HAL_GPIO_Init+0x1e4>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_Init+0x1e4>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_GPIO_Init+0x1e4>
 80034de:	2300      	movs	r3, #0
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	2103      	movs	r1, #3
 80034e4:	400a      	ands	r2, r1
 80034e6:	0092      	lsls	r2, r2, #2
 80034e8:	4093      	lsls	r3, r2
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034f0:	4935      	ldr	r1, [pc, #212]	; (80035c8 <HAL_GPIO_Init+0x2cc>)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	3302      	adds	r3, #2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034fe:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43da      	mvns	r2, r3
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	025b      	lsls	r3, r3, #9
 8003516:	4013      	ands	r3, r2
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43da      	mvns	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	029b      	lsls	r3, r3, #10
 8003540:	4013      	ands	r3, r2
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	43da      	mvns	r2, r3
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	035b      	lsls	r3, r3, #13
 800356a:	4013      	ands	r3, r2
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	43da      	mvns	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	039b      	lsls	r3, r3, #14
 8003594:	4013      	ands	r3, r2
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035a0:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	3301      	adds	r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	40da      	lsrs	r2, r3
 80035b4:	1e13      	subs	r3, r2, #0
 80035b6:	d000      	beq.n	80035ba <HAL_GPIO_Init+0x2be>
 80035b8:	e6a8      	b.n	800330c <HAL_GPIO_Init+0x10>
  } 
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b006      	add	sp, #24
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40010000 	.word	0x40010000
 80035cc:	48000400 	.word	0x48000400
 80035d0:	48000800 	.word	0x48000800
 80035d4:	48000c00 	.word	0x48000c00
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	0008      	movs	r0, r1
 80035e6:	0011      	movs	r1, r2
 80035e8:	1cbb      	adds	r3, r7, #2
 80035ea:	1c02      	adds	r2, r0, #0
 80035ec:	801a      	strh	r2, [r3, #0]
 80035ee:	1c7b      	adds	r3, r7, #1
 80035f0:	1c0a      	adds	r2, r1, #0
 80035f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035f4:	1c7b      	adds	r3, r7, #1
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035fc:	1cbb      	adds	r3, r7, #2
 80035fe:	881a      	ldrh	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003604:	e003      	b.n	800360e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003606:	1cbb      	adds	r3, r7, #2
 8003608:	881a      	ldrh	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	000a      	movs	r2, r1
 8003620:	1cbb      	adds	r3, r7, #2
 8003622:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800362a:	1cbb      	adds	r3, r7, #2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4013      	ands	r3, r2
 8003632:	041a      	lsls	r2, r3, #16
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	43db      	mvns	r3, r3
 8003638:	1cb9      	adds	r1, r7, #2
 800363a:	8809      	ldrh	r1, [r1, #0]
 800363c:	400b      	ands	r3, r1
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	619a      	str	r2, [r3, #24]
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b004      	add	sp, #16
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e082      	b.n	8003764 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2241      	movs	r2, #65	; 0x41
 8003662:	5c9b      	ldrb	r3, [r3, r2]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2240      	movs	r2, #64	; 0x40
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f7fe fef7 	bl	8002468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2241      	movs	r2, #65	; 0x41
 800367e:	2124      	movs	r1, #36	; 0x24
 8003680:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	438a      	bics	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4934      	ldr	r1, [pc, #208]	; (800376c <HAL_I2C_Init+0x120>)
 800369c:	400a      	ands	r2, r1
 800369e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4931      	ldr	r1, [pc, #196]	; (8003770 <HAL_I2C_Init+0x124>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d108      	bne.n	80036ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2180      	movs	r1, #128	; 0x80
 80036c2:	0209      	lsls	r1, r1, #8
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	e007      	b.n	80036da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2184      	movs	r1, #132	; 0x84
 80036d4:	0209      	lsls	r1, r1, #8
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d104      	bne.n	80036ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	0112      	lsls	r2, r2, #4
 80036ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	491f      	ldr	r1, [pc, #124]	; (8003774 <HAL_I2C_Init+0x128>)
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	491a      	ldr	r1, [pc, #104]	; (8003770 <HAL_I2C_Init+0x124>)
 8003708:	400a      	ands	r2, r1
 800370a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	431a      	orrs	r2, r3
 8003716:	0011      	movs	r1, r2
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	021a      	lsls	r2, r3, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69d9      	ldr	r1, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1a      	ldr	r2, [r3, #32]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2101      	movs	r1, #1
 8003742:	430a      	orrs	r2, r1
 8003744:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2241      	movs	r2, #65	; 0x41
 8003750:	2120      	movs	r1, #32
 8003752:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2242      	movs	r2, #66	; 0x42
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b002      	add	sp, #8
 800376a:	bd80      	pop	{r7, pc}
 800376c:	f0ffffff 	.word	0xf0ffffff
 8003770:	ffff7fff 	.word	0xffff7fff
 8003774:	02008000 	.word	0x02008000

08003778 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	000c      	movs	r4, r1
 8003782:	0010      	movs	r0, r2
 8003784:	0019      	movs	r1, r3
 8003786:	230a      	movs	r3, #10
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	1c22      	adds	r2, r4, #0
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	2308      	movs	r3, #8
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	1c02      	adds	r2, r0, #0
 8003794:	801a      	strh	r2, [r3, #0]
 8003796:	1dbb      	adds	r3, r7, #6
 8003798:	1c0a      	adds	r2, r1, #0
 800379a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2241      	movs	r2, #65	; 0x41
 80037a0:	5c9b      	ldrb	r3, [r3, r2]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d000      	beq.n	80037aa <HAL_I2C_Mem_Write+0x32>
 80037a8:	e10c      	b.n	80039c4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <HAL_I2C_Mem_Write+0x42>
 80037b0:	232c      	movs	r3, #44	; 0x2c
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	0092      	lsls	r2, r2, #2
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0ff      	b.n	80039c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2240      	movs	r2, #64	; 0x40
 80037ca:	5c9b      	ldrb	r3, [r3, r2]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_I2C_Mem_Write+0x5c>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e0f8      	b.n	80039c6 <HAL_I2C_Mem_Write+0x24e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2240      	movs	r2, #64	; 0x40
 80037d8:	2101      	movs	r1, #1
 80037da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037dc:	f7ff fcb2 	bl	8003144 <HAL_GetTick>
 80037e0:	0003      	movs	r3, r0
 80037e2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	0219      	lsls	r1, r3, #8
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2319      	movs	r3, #25
 80037f0:	2201      	movs	r2, #1
 80037f2:	f000 fb0b 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 80037f6:	1e03      	subs	r3, r0, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0e3      	b.n	80039c6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2241      	movs	r2, #65	; 0x41
 8003802:	2121      	movs	r1, #33	; 0x21
 8003804:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2242      	movs	r2, #66	; 0x42
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	222c      	movs	r2, #44	; 0x2c
 800381e:	18ba      	adds	r2, r7, r2
 8003820:	8812      	ldrh	r2, [r2, #0]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800382a:	1dbb      	adds	r3, r7, #6
 800382c:	881c      	ldrh	r4, [r3, #0]
 800382e:	2308      	movs	r3, #8
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	881a      	ldrh	r2, [r3, #0]
 8003834:	230a      	movs	r3, #10
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	8819      	ldrh	r1, [r3, #0]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	0023      	movs	r3, r4
 8003846:	f000 f9f9 	bl	8003c3c <I2C_RequestMemoryWrite>
 800384a:	1e03      	subs	r3, r0, #0
 800384c:	d005      	beq.n	800385a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2240      	movs	r2, #64	; 0x40
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e0b5      	b.n	80039c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	2bff      	cmp	r3, #255	; 0xff
 8003862:	d911      	bls.n	8003888 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	22ff      	movs	r2, #255	; 0xff
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	b2da      	uxtb	r2, r3
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	045c      	lsls	r4, r3, #17
 8003874:	230a      	movs	r3, #10
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	8819      	ldrh	r1, [r3, #0]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	2300      	movs	r3, #0
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	0023      	movs	r3, r4
 8003882:	f000 fbe3 	bl	800404c <I2C_TransferConfig>
 8003886:	e012      	b.n	80038ae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	b2da      	uxtb	r2, r3
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	049c      	lsls	r4, r3, #18
 800389c:	230a      	movs	r3, #10
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	8819      	ldrh	r1, [r3, #0]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	2300      	movs	r3, #0
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	0023      	movs	r3, r4
 80038aa:	f000 fbcf 	bl	800404c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 fae8 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e081      	b.n	80039c6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d03a      	beq.n	8003972 <HAL_I2C_Mem_Write+0x1fa>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d136      	bne.n	8003972 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	0013      	movs	r3, r2
 800390e:	2200      	movs	r2, #0
 8003910:	2180      	movs	r1, #128	; 0x80
 8003912:	f000 fa7b 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003916:	1e03      	subs	r3, r0, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e053      	b.n	80039c6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	2bff      	cmp	r3, #255	; 0xff
 8003926:	d911      	bls.n	800394c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	b2da      	uxtb	r2, r3
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	045c      	lsls	r4, r3, #17
 8003938:	230a      	movs	r3, #10
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	8819      	ldrh	r1, [r3, #0]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	0023      	movs	r3, r4
 8003946:	f000 fb81 	bl	800404c <I2C_TransferConfig>
 800394a:	e012      	b.n	8003972 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	b2da      	uxtb	r2, r3
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	049c      	lsls	r4, r3, #18
 8003960:	230a      	movs	r3, #10
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	8819      	ldrh	r1, [r3, #0]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	0023      	movs	r3, r4
 800396e:	f000 fb6d 	bl	800404c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d198      	bne.n	80038ae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	0018      	movs	r0, r3
 8003984:	f000 fac0 	bl	8003f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e01a      	b.n	80039c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2220      	movs	r2, #32
 8003996:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	490b      	ldr	r1, [pc, #44]	; (80039d0 <HAL_I2C_Mem_Write+0x258>)
 80039a4:	400a      	ands	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2241      	movs	r2, #65	; 0x41
 80039ac:	2120      	movs	r1, #32
 80039ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2242      	movs	r2, #66	; 0x42
 80039b4:	2100      	movs	r1, #0
 80039b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2240      	movs	r2, #64	; 0x40
 80039bc:	2100      	movs	r1, #0
 80039be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b007      	add	sp, #28
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	fe00e800 	.word	0xfe00e800

080039d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	000c      	movs	r4, r1
 80039de:	0010      	movs	r0, r2
 80039e0:	0019      	movs	r1, r3
 80039e2:	230a      	movs	r3, #10
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	1c22      	adds	r2, r4, #0
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	2308      	movs	r3, #8
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	1c02      	adds	r2, r0, #0
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	1dbb      	adds	r3, r7, #6
 80039f4:	1c0a      	adds	r2, r1, #0
 80039f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2241      	movs	r2, #65	; 0x41
 80039fc:	5c9b      	ldrb	r3, [r3, r2]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d000      	beq.n	8003a06 <HAL_I2C_Mem_Read+0x32>
 8003a04:	e110      	b.n	8003c28 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <HAL_I2C_Mem_Read+0x42>
 8003a0c:	232c      	movs	r3, #44	; 0x2c
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d105      	bne.n	8003a22 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2280      	movs	r2, #128	; 0x80
 8003a1a:	0092      	lsls	r2, r2, #2
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e103      	b.n	8003c2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	5c9b      	ldrb	r3, [r3, r2]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2C_Mem_Read+0x5c>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0fc      	b.n	8003c2a <HAL_I2C_Mem_Read+0x256>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	2101      	movs	r1, #1
 8003a36:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a38:	f7ff fb84 	bl	8003144 <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	0219      	lsls	r1, r3, #8
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2319      	movs	r3, #25
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f000 f9dd 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0e7      	b.n	8003c2a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2241      	movs	r2, #65	; 0x41
 8003a5e:	2122      	movs	r1, #34	; 0x22
 8003a60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2242      	movs	r2, #66	; 0x42
 8003a66:	2140      	movs	r1, #64	; 0x40
 8003a68:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	222c      	movs	r2, #44	; 0x2c
 8003a7a:	18ba      	adds	r2, r7, r2
 8003a7c:	8812      	ldrh	r2, [r2, #0]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a86:	1dbb      	adds	r3, r7, #6
 8003a88:	881c      	ldrh	r4, [r3, #0]
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	881a      	ldrh	r2, [r3, #0]
 8003a90:	230a      	movs	r3, #10
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	8819      	ldrh	r1, [r3, #0]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	0023      	movs	r3, r4
 8003aa2:	f000 f92f 	bl	8003d04 <I2C_RequestMemoryRead>
 8003aa6:	1e03      	subs	r3, r0, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2240      	movs	r2, #64	; 0x40
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0b9      	b.n	8003c2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2bff      	cmp	r3, #255	; 0xff
 8003abe:	d911      	bls.n	8003ae4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	22ff      	movs	r2, #255	; 0xff
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	045c      	lsls	r4, r3, #17
 8003ad0:	230a      	movs	r3, #10
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	8819      	ldrh	r1, [r3, #0]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	4b56      	ldr	r3, [pc, #344]	; (8003c34 <HAL_I2C_Mem_Read+0x260>)
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	0023      	movs	r3, r4
 8003ade:	f000 fab5 	bl	800404c <I2C_TransferConfig>
 8003ae2:	e012      	b.n	8003b0a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	049c      	lsls	r4, r3, #18
 8003af8:	230a      	movs	r3, #10
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	8819      	ldrh	r1, [r3, #0]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	4b4c      	ldr	r3, [pc, #304]	; (8003c34 <HAL_I2C_Mem_Read+0x260>)
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	0023      	movs	r3, r4
 8003b06:	f000 faa1 	bl	800404c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	0013      	movs	r3, r2
 8003b14:	2200      	movs	r2, #0
 8003b16:	2104      	movs	r1, #4
 8003b18:	f000 f978 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e082      	b.n	8003c2a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d03a      	beq.n	8003bd6 <HAL_I2C_Mem_Read+0x202>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d136      	bne.n	8003bd6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	0013      	movs	r3, r2
 8003b72:	2200      	movs	r2, #0
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	f000 f949 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	1e03      	subs	r3, r0, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e053      	b.n	8003c2a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2bff      	cmp	r3, #255	; 0xff
 8003b8a:	d911      	bls.n	8003bb0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	045c      	lsls	r4, r3, #17
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	8819      	ldrh	r1, [r3, #0]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	0023      	movs	r3, r4
 8003baa:	f000 fa4f 	bl	800404c <I2C_TransferConfig>
 8003bae:	e012      	b.n	8003bd6 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	049c      	lsls	r4, r3, #18
 8003bc4:	230a      	movs	r3, #10
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	8819      	ldrh	r1, [r3, #0]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	f000 fa3b 	bl	800404c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d194      	bne.n	8003b0a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 f98e 	bl	8003f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bec:	1e03      	subs	r3, r0, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e01a      	b.n	8003c2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	490c      	ldr	r1, [pc, #48]	; (8003c38 <HAL_I2C_Mem_Read+0x264>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2241      	movs	r2, #65	; 0x41
 8003c10:	2120      	movs	r1, #32
 8003c12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2242      	movs	r2, #66	; 0x42
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2240      	movs	r2, #64	; 0x40
 8003c20:	2100      	movs	r1, #0
 8003c22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b007      	add	sp, #28
 8003c30:	bd90      	pop	{r4, r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	80002400 	.word	0x80002400
 8003c38:	fe00e800 	.word	0xfe00e800

08003c3c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b5b0      	push	{r4, r5, r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	000c      	movs	r4, r1
 8003c46:	0010      	movs	r0, r2
 8003c48:	0019      	movs	r1, r3
 8003c4a:	250a      	movs	r5, #10
 8003c4c:	197b      	adds	r3, r7, r5
 8003c4e:	1c22      	adds	r2, r4, #0
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	2308      	movs	r3, #8
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	1c02      	adds	r2, r0, #0
 8003c58:	801a      	strh	r2, [r3, #0]
 8003c5a:	1dbb      	adds	r3, r7, #6
 8003c5c:	1c0a      	adds	r2, r1, #0
 8003c5e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c60:	1dbb      	adds	r3, r7, #6
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	2380      	movs	r3, #128	; 0x80
 8003c68:	045c      	lsls	r4, r3, #17
 8003c6a:	197b      	adds	r3, r7, r5
 8003c6c:	8819      	ldrh	r1, [r3, #0]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <I2C_RequestMemoryWrite+0xc4>)
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	0023      	movs	r3, r4
 8003c76:	f000 f9e9 	bl	800404c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7c:	6a39      	ldr	r1, [r7, #32]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 f902 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c86:	1e03      	subs	r3, r0, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e033      	b.n	8003cf6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c8e:	1dbb      	adds	r3, r7, #6
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d107      	bne.n	8003ca6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c96:	2308      	movs	r3, #8
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca4:	e019      	b.n	8003cda <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cba:	6a39      	ldr	r1, [r7, #32]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f000 f8e3 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc4:	1e03      	subs	r3, r0, #0
 8003cc6:	d001      	beq.n	8003ccc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e014      	b.n	8003cf6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ccc:	2308      	movs	r3, #8
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cda:	6a3a      	ldr	r2, [r7, #32]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	0013      	movs	r3, r2
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	f000 f890 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003cec:	1e03      	subs	r3, r0, #0
 8003cee:	d001      	beq.n	8003cf4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b004      	add	sp, #16
 8003cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	80002000 	.word	0x80002000

08003d04 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b5b0      	push	{r4, r5, r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	000c      	movs	r4, r1
 8003d0e:	0010      	movs	r0, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	250a      	movs	r5, #10
 8003d14:	197b      	adds	r3, r7, r5
 8003d16:	1c22      	adds	r2, r4, #0
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	1c02      	adds	r2, r0, #0
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	1dbb      	adds	r3, r7, #6
 8003d24:	1c0a      	adds	r2, r1, #0
 8003d26:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d28:	1dbb      	adds	r3, r7, #6
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	197b      	adds	r3, r7, r5
 8003d30:	8819      	ldrh	r1, [r3, #0]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <I2C_RequestMemoryRead+0xc0>)
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f000 f987 	bl	800404c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	6a39      	ldr	r1, [r7, #32]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 f8a0 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e033      	b.n	8003dba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d52:	1dbb      	adds	r3, r7, #6
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d107      	bne.n	8003d6a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
 8003d68:	e019      	b.n	8003d9e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	6a39      	ldr	r1, [r7, #32]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 f881 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d001      	beq.n	8003d90 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e014      	b.n	8003dba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d90:	2308      	movs	r3, #8
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	0013      	movs	r3, r2
 8003da8:	2200      	movs	r2, #0
 8003daa:	2140      	movs	r1, #64	; 0x40
 8003dac:	f000 f82e 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d001      	beq.n	8003db8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b004      	add	sp, #16
 8003dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	80002000 	.word	0x80002000

08003dc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d103      	bne.n	8003de6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2201      	movs	r2, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d007      	beq.n	8003e04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2101      	movs	r1, #1
 8003e00:	430a      	orrs	r2, r1
 8003e02:	619a      	str	r2, [r3, #24]
  }
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e1c:	e021      	b.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	d01e      	beq.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e24:	f7ff f98e 	bl	8003144 <HAL_GetTick>
 8003e28:	0002      	movs	r2, r0
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d113      	bne.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	2220      	movs	r2, #32
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2241      	movs	r2, #65	; 0x41
 8003e4a:	2120      	movs	r1, #32
 8003e4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2242      	movs	r2, #66	; 0x42
 8003e52:	2100      	movs	r1, #0
 8003e54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2240      	movs	r2, #64	; 0x40
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e00f      	b.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	425a      	negs	r2, r3
 8003e72:	4153      	adcs	r3, r2
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	001a      	movs	r2, r3
 8003e78:	1dfb      	adds	r3, r7, #7
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d0ce      	beq.n	8003e1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b004      	add	sp, #16
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e96:	e02b      	b.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f000 f86e 	bl	8003f80 <I2C_IsAcknowledgeFailed>
 8003ea4:	1e03      	subs	r3, r0, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e029      	b.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	d01e      	beq.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7ff f947 	bl	8003144 <HAL_GetTick>
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d113      	bne.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	2220      	movs	r2, #32
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2241      	movs	r2, #65	; 0x41
 8003ed8:	2120      	movs	r1, #32
 8003eda:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2242      	movs	r2, #66	; 0x42
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2240      	movs	r2, #64	; 0x40
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e007      	b.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d1cc      	bne.n	8003e98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b004      	add	sp, #16
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f14:	e028      	b.n	8003f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f000 f82f 	bl	8003f80 <I2C_IsAcknowledgeFailed>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e026      	b.n	8003f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7ff f90b 	bl	8003144 <HAL_GetTick>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d113      	bne.n	8003f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	2220      	movs	r2, #32
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2241      	movs	r2, #65	; 0x41
 8003f50:	2120      	movs	r1, #32
 8003f52:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2242      	movs	r2, #66	; 0x42
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2240      	movs	r2, #64	; 0x40
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e007      	b.n	8003f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d1cf      	bne.n	8003f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	0018      	movs	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b004      	add	sp, #16
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2210      	movs	r2, #16
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d151      	bne.n	800403e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f9a:	e021      	b.n	8003fe0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	d01e      	beq.n	8003fe0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa2:	f7ff f8cf 	bl	8003144 <HAL_GetTick>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <I2C_IsAcknowledgeFailed+0x38>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d113      	bne.n	8003fe0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2241      	movs	r2, #65	; 0x41
 8003fc8:	2120      	movs	r1, #32
 8003fca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2242      	movs	r2, #66	; 0x42
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2240      	movs	r2, #64	; 0x40
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e02f      	b.n	8004040 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d1d6      	bne.n	8003f9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	0018      	movs	r0, r3
 8004002:	f7ff fee1 	bl	8003dc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	490d      	ldr	r1, [pc, #52]	; (8004048 <I2C_IsAcknowledgeFailed+0xc8>)
 8004012:	400a      	ands	r2, r1
 8004014:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	2204      	movs	r2, #4
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2241      	movs	r2, #65	; 0x41
 8004026:	2120      	movs	r1, #32
 8004028:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2242      	movs	r2, #66	; 0x42
 800402e:	2100      	movs	r1, #0
 8004030:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2240      	movs	r2, #64	; 0x40
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	0018      	movs	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	b004      	add	sp, #16
 8004046:	bd80      	pop	{r7, pc}
 8004048:	fe00e800 	.word	0xfe00e800

0800404c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800404c:	b590      	push	{r4, r7, lr}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	0008      	movs	r0, r1
 8004056:	0011      	movs	r1, r2
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	240a      	movs	r4, #10
 800405c:	193b      	adds	r3, r7, r4
 800405e:	1c02      	adds	r2, r0, #0
 8004060:	801a      	strh	r2, [r3, #0]
 8004062:	2009      	movs	r0, #9
 8004064:	183b      	adds	r3, r7, r0
 8004066:	1c0a      	adds	r2, r1, #0
 8004068:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	0d51      	lsrs	r1, r2, #21
 8004074:	2280      	movs	r2, #128	; 0x80
 8004076:	00d2      	lsls	r2, r2, #3
 8004078:	400a      	ands	r2, r1
 800407a:	490e      	ldr	r1, [pc, #56]	; (80040b4 <I2C_TransferConfig+0x68>)
 800407c:	430a      	orrs	r2, r1
 800407e:	43d2      	mvns	r2, r2
 8004080:	401a      	ands	r2, r3
 8004082:	0011      	movs	r1, r2
 8004084:	193b      	adds	r3, r7, r4
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	059b      	lsls	r3, r3, #22
 800408a:	0d9a      	lsrs	r2, r3, #22
 800408c:	183b      	adds	r3, r7, r0
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	0418      	lsls	r0, r3, #16
 8004092:	23ff      	movs	r3, #255	; 0xff
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	4003      	ands	r3, r0
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	431a      	orrs	r2, r3
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b005      	add	sp, #20
 80040b0:	bd90      	pop	{r4, r7, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	03ff63ff 	.word	0x03ff63ff

080040b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2241      	movs	r2, #65	; 0x41
 80040c6:	5c9b      	ldrb	r3, [r3, r2]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d138      	bne.n	8004140 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2240      	movs	r2, #64	; 0x40
 80040d2:	5c9b      	ldrb	r3, [r3, r2]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040d8:	2302      	movs	r3, #2
 80040da:	e032      	b.n	8004142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2240      	movs	r2, #64	; 0x40
 80040e0:	2101      	movs	r1, #1
 80040e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2241      	movs	r2, #65	; 0x41
 80040e8:	2124      	movs	r1, #36	; 0x24
 80040ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2101      	movs	r1, #1
 80040f8:	438a      	bics	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4911      	ldr	r1, [pc, #68]	; (800414c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004108:	400a      	ands	r2, r1
 800410a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2101      	movs	r1, #1
 8004128:	430a      	orrs	r2, r1
 800412a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2241      	movs	r2, #65	; 0x41
 8004130:	2120      	movs	r1, #32
 8004132:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2240      	movs	r2, #64	; 0x40
 8004138:	2100      	movs	r1, #0
 800413a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
  }
}
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	b002      	add	sp, #8
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	ffffefff 	.word	0xffffefff

08004150 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2241      	movs	r2, #65	; 0x41
 800415e:	5c9b      	ldrb	r3, [r3, r2]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b20      	cmp	r3, #32
 8004164:	d139      	bne.n	80041da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2240      	movs	r2, #64	; 0x40
 800416a:	5c9b      	ldrb	r3, [r3, r2]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004170:	2302      	movs	r3, #2
 8004172:	e033      	b.n	80041dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2240      	movs	r2, #64	; 0x40
 8004178:	2101      	movs	r1, #1
 800417a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2241      	movs	r2, #65	; 0x41
 8004180:	2124      	movs	r1, #36	; 0x24
 8004182:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2101      	movs	r1, #1
 8004190:	438a      	bics	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a11      	ldr	r2, [pc, #68]	; (80041e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2101      	movs	r1, #1
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2241      	movs	r2, #65	; 0x41
 80041ca:	2120      	movs	r1, #32
 80041cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2240      	movs	r2, #64	; 0x40
 80041d2:	2100      	movs	r1, #0
 80041d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b004      	add	sp, #16
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	fffff0ff 	.word	0xfffff0ff

080041e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e301      	b.n	80047fe <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2201      	movs	r2, #1
 8004200:	4013      	ands	r3, r2
 8004202:	d100      	bne.n	8004206 <HAL_RCC_OscConfig+0x1e>
 8004204:	e08d      	b.n	8004322 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004206:	4bc3      	ldr	r3, [pc, #780]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	220c      	movs	r2, #12
 800420c:	4013      	ands	r3, r2
 800420e:	2b04      	cmp	r3, #4
 8004210:	d00e      	beq.n	8004230 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004212:	4bc0      	ldr	r3, [pc, #768]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	220c      	movs	r2, #12
 8004218:	4013      	ands	r3, r2
 800421a:	2b08      	cmp	r3, #8
 800421c:	d116      	bne.n	800424c <HAL_RCC_OscConfig+0x64>
 800421e:	4bbd      	ldr	r3, [pc, #756]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	025b      	lsls	r3, r3, #9
 8004226:	401a      	ands	r2, r3
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	025b      	lsls	r3, r3, #9
 800422c:	429a      	cmp	r2, r3
 800422e:	d10d      	bne.n	800424c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	4bb8      	ldr	r3, [pc, #736]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	4013      	ands	r3, r2
 800423a:	d100      	bne.n	800423e <HAL_RCC_OscConfig+0x56>
 800423c:	e070      	b.n	8004320 <HAL_RCC_OscConfig+0x138>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d000      	beq.n	8004248 <HAL_RCC_OscConfig+0x60>
 8004246:	e06b      	b.n	8004320 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e2d8      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d107      	bne.n	8004264 <HAL_RCC_OscConfig+0x7c>
 8004254:	4baf      	ldr	r3, [pc, #700]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4bae      	ldr	r3, [pc, #696]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	0249      	lsls	r1, r1, #9
 800425e:	430a      	orrs	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e02f      	b.n	80042c4 <HAL_RCC_OscConfig+0xdc>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10c      	bne.n	8004286 <HAL_RCC_OscConfig+0x9e>
 800426c:	4ba9      	ldr	r3, [pc, #676]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4ba8      	ldr	r3, [pc, #672]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004272:	49a9      	ldr	r1, [pc, #676]	; (8004518 <HAL_RCC_OscConfig+0x330>)
 8004274:	400a      	ands	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	4ba6      	ldr	r3, [pc, #664]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4ba5      	ldr	r3, [pc, #660]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800427e:	49a7      	ldr	r1, [pc, #668]	; (800451c <HAL_RCC_OscConfig+0x334>)
 8004280:	400a      	ands	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e01e      	b.n	80042c4 <HAL_RCC_OscConfig+0xdc>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b05      	cmp	r3, #5
 800428c:	d10e      	bne.n	80042ac <HAL_RCC_OscConfig+0xc4>
 800428e:	4ba1      	ldr	r3, [pc, #644]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4ba0      	ldr	r3, [pc, #640]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	02c9      	lsls	r1, r1, #11
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	4b9d      	ldr	r3, [pc, #628]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b9c      	ldr	r3, [pc, #624]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80042a2:	2180      	movs	r1, #128	; 0x80
 80042a4:	0249      	lsls	r1, r1, #9
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0xdc>
 80042ac:	4b99      	ldr	r3, [pc, #612]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b98      	ldr	r3, [pc, #608]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80042b2:	4999      	ldr	r1, [pc, #612]	; (8004518 <HAL_RCC_OscConfig+0x330>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	4b96      	ldr	r3, [pc, #600]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b95      	ldr	r3, [pc, #596]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80042be:	4997      	ldr	r1, [pc, #604]	; (800451c <HAL_RCC_OscConfig+0x334>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d014      	beq.n	80042f6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fe ff3a 	bl	8003144 <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d6:	f7fe ff35 	bl	8003144 <HAL_GetTick>
 80042da:	0002      	movs	r2, r0
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b64      	cmp	r3, #100	; 0x64
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e28a      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e8:	4b8a      	ldr	r3, [pc, #552]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	029b      	lsls	r3, r3, #10
 80042f0:	4013      	ands	r3, r2
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0xee>
 80042f4:	e015      	b.n	8004322 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7fe ff25 	bl	8003144 <HAL_GetTick>
 80042fa:	0003      	movs	r3, r0
 80042fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004300:	f7fe ff20 	bl	8003144 <HAL_GetTick>
 8004304:	0002      	movs	r2, r0
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e275      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	4b80      	ldr	r3, [pc, #512]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	029b      	lsls	r3, r3, #10
 800431a:	4013      	ands	r3, r2
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x118>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2202      	movs	r2, #2
 8004328:	4013      	ands	r3, r2
 800432a:	d100      	bne.n	800432e <HAL_RCC_OscConfig+0x146>
 800432c:	e069      	b.n	8004402 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800432e:	4b79      	ldr	r3, [pc, #484]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	220c      	movs	r2, #12
 8004334:	4013      	ands	r3, r2
 8004336:	d00b      	beq.n	8004350 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004338:	4b76      	ldr	r3, [pc, #472]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	220c      	movs	r2, #12
 800433e:	4013      	ands	r3, r2
 8004340:	2b08      	cmp	r3, #8
 8004342:	d11c      	bne.n	800437e <HAL_RCC_OscConfig+0x196>
 8004344:	4b73      	ldr	r3, [pc, #460]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	025b      	lsls	r3, r3, #9
 800434c:	4013      	ands	r3, r2
 800434e:	d116      	bne.n	800437e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004350:	4b70      	ldr	r3, [pc, #448]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2202      	movs	r2, #2
 8004356:	4013      	ands	r3, r2
 8004358:	d005      	beq.n	8004366 <HAL_RCC_OscConfig+0x17e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d001      	beq.n	8004366 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e24b      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004366:	4b6b      	ldr	r3, [pc, #428]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	22f8      	movs	r2, #248	; 0xf8
 800436c:	4393      	bics	r3, r2
 800436e:	0019      	movs	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	00da      	lsls	r2, r3, #3
 8004376:	4b67      	ldr	r3, [pc, #412]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437c:	e041      	b.n	8004402 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d024      	beq.n	80043d0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004386:	4b63      	ldr	r3, [pc, #396]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b62      	ldr	r3, [pc, #392]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800438c:	2101      	movs	r1, #1
 800438e:	430a      	orrs	r2, r1
 8004390:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fe fed7 	bl	8003144 <HAL_GetTick>
 8004396:	0003      	movs	r3, r0
 8004398:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800439c:	f7fe fed2 	bl	8003144 <HAL_GetTick>
 80043a0:	0002      	movs	r2, r0
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e227      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ae:	4b59      	ldr	r3, [pc, #356]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2202      	movs	r2, #2
 80043b4:	4013      	ands	r3, r2
 80043b6:	d0f1      	beq.n	800439c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b8:	4b56      	ldr	r3, [pc, #344]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	22f8      	movs	r2, #248	; 0xf8
 80043be:	4393      	bics	r3, r2
 80043c0:	0019      	movs	r1, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00da      	lsls	r2, r3, #3
 80043c8:	4b52      	ldr	r3, [pc, #328]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80043ca:	430a      	orrs	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e018      	b.n	8004402 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d0:	4b50      	ldr	r3, [pc, #320]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b4f      	ldr	r3, [pc, #316]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80043d6:	2101      	movs	r1, #1
 80043d8:	438a      	bics	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe feb2 	bl	8003144 <HAL_GetTick>
 80043e0:	0003      	movs	r3, r0
 80043e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e6:	f7fe fead 	bl	8003144 <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e202      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f8:	4b46      	ldr	r3, [pc, #280]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2202      	movs	r2, #2
 80043fe:	4013      	ands	r3, r2
 8004400:	d1f1      	bne.n	80043e6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2208      	movs	r2, #8
 8004408:	4013      	ands	r3, r2
 800440a:	d036      	beq.n	800447a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d019      	beq.n	8004448 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004414:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004418:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800441a:	2101      	movs	r1, #1
 800441c:	430a      	orrs	r2, r1
 800441e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004420:	f7fe fe90 	bl	8003144 <HAL_GetTick>
 8004424:	0003      	movs	r3, r0
 8004426:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442a:	f7fe fe8b 	bl	8003144 <HAL_GetTick>
 800442e:	0002      	movs	r2, r0
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e1e0      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2202      	movs	r2, #2
 8004442:	4013      	ands	r3, r2
 8004444:	d0f1      	beq.n	800442a <HAL_RCC_OscConfig+0x242>
 8004446:	e018      	b.n	800447a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004448:	4b32      	ldr	r3, [pc, #200]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800444a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444c:	4b31      	ldr	r3, [pc, #196]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800444e:	2101      	movs	r1, #1
 8004450:	438a      	bics	r2, r1
 8004452:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004454:	f7fe fe76 	bl	8003144 <HAL_GetTick>
 8004458:	0003      	movs	r3, r0
 800445a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445e:	f7fe fe71 	bl	8003144 <HAL_GetTick>
 8004462:	0002      	movs	r2, r0
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e1c6      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	4b28      	ldr	r3, [pc, #160]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	2202      	movs	r2, #2
 8004476:	4013      	ands	r3, r2
 8004478:	d1f1      	bne.n	800445e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2204      	movs	r2, #4
 8004480:	4013      	ands	r3, r2
 8004482:	d100      	bne.n	8004486 <HAL_RCC_OscConfig+0x29e>
 8004484:	e0b4      	b.n	80045f0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	201f      	movs	r0, #31
 8004488:	183b      	adds	r3, r7, r0
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448e:	4b21      	ldr	r3, [pc, #132]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	055b      	lsls	r3, r3, #21
 8004496:	4013      	ands	r3, r2
 8004498:	d110      	bne.n	80044bc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80044a0:	2180      	movs	r1, #128	; 0x80
 80044a2:	0549      	lsls	r1, r1, #21
 80044a4:	430a      	orrs	r2, r1
 80044a6:	61da      	str	r2, [r3, #28]
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	055b      	lsls	r3, r3, #21
 80044b0:	4013      	ands	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044b6:	183b      	adds	r3, r7, r0
 80044b8:	2201      	movs	r2, #1
 80044ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	4b18      	ldr	r3, [pc, #96]	; (8004520 <HAL_RCC_OscConfig+0x338>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4013      	ands	r3, r2
 80044c6:	d11a      	bne.n	80044fe <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c8:	4b15      	ldr	r3, [pc, #84]	; (8004520 <HAL_RCC_OscConfig+0x338>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <HAL_RCC_OscConfig+0x338>)
 80044ce:	2180      	movs	r1, #128	; 0x80
 80044d0:	0049      	lsls	r1, r1, #1
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d6:	f7fe fe35 	bl	8003144 <HAL_GetTick>
 80044da:	0003      	movs	r3, r0
 80044dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e0:	f7fe fe30 	bl	8003144 <HAL_GetTick>
 80044e4:	0002      	movs	r2, r0
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e185      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_RCC_OscConfig+0x338>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	2380      	movs	r3, #128	; 0x80
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4013      	ands	r3, r2
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d10e      	bne.n	8004524 <HAL_RCC_OscConfig+0x33c>
 8004506:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	4b02      	ldr	r3, [pc, #8]	; (8004514 <HAL_RCC_OscConfig+0x32c>)
 800450c:	2101      	movs	r1, #1
 800450e:	430a      	orrs	r2, r1
 8004510:	621a      	str	r2, [r3, #32]
 8004512:	e035      	b.n	8004580 <HAL_RCC_OscConfig+0x398>
 8004514:	40021000 	.word	0x40021000
 8004518:	fffeffff 	.word	0xfffeffff
 800451c:	fffbffff 	.word	0xfffbffff
 8004520:	40007000 	.word	0x40007000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10c      	bne.n	8004546 <HAL_RCC_OscConfig+0x35e>
 800452c:	4bb6      	ldr	r3, [pc, #728]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800452e:	6a1a      	ldr	r2, [r3, #32]
 8004530:	4bb5      	ldr	r3, [pc, #724]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004532:	2101      	movs	r1, #1
 8004534:	438a      	bics	r2, r1
 8004536:	621a      	str	r2, [r3, #32]
 8004538:	4bb3      	ldr	r3, [pc, #716]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	4bb2      	ldr	r3, [pc, #712]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800453e:	2104      	movs	r1, #4
 8004540:	438a      	bics	r2, r1
 8004542:	621a      	str	r2, [r3, #32]
 8004544:	e01c      	b.n	8004580 <HAL_RCC_OscConfig+0x398>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b05      	cmp	r3, #5
 800454c:	d10c      	bne.n	8004568 <HAL_RCC_OscConfig+0x380>
 800454e:	4bae      	ldr	r3, [pc, #696]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	4bad      	ldr	r3, [pc, #692]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004554:	2104      	movs	r1, #4
 8004556:	430a      	orrs	r2, r1
 8004558:	621a      	str	r2, [r3, #32]
 800455a:	4bab      	ldr	r3, [pc, #684]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800455c:	6a1a      	ldr	r2, [r3, #32]
 800455e:	4baa      	ldr	r3, [pc, #680]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004560:	2101      	movs	r1, #1
 8004562:	430a      	orrs	r2, r1
 8004564:	621a      	str	r2, [r3, #32]
 8004566:	e00b      	b.n	8004580 <HAL_RCC_OscConfig+0x398>
 8004568:	4ba7      	ldr	r3, [pc, #668]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	4ba6      	ldr	r3, [pc, #664]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800456e:	2101      	movs	r1, #1
 8004570:	438a      	bics	r2, r1
 8004572:	621a      	str	r2, [r3, #32]
 8004574:	4ba4      	ldr	r3, [pc, #656]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	4ba3      	ldr	r3, [pc, #652]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800457a:	2104      	movs	r1, #4
 800457c:	438a      	bics	r2, r1
 800457e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d014      	beq.n	80045b2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004588:	f7fe fddc 	bl	8003144 <HAL_GetTick>
 800458c:	0003      	movs	r3, r0
 800458e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e009      	b.n	80045a6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fe fdd7 	bl	8003144 <HAL_GetTick>
 8004596:	0002      	movs	r2, r0
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	4a9b      	ldr	r2, [pc, #620]	; (800480c <HAL_RCC_OscConfig+0x624>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e12b      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a6:	4b98      	ldr	r3, [pc, #608]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	2202      	movs	r2, #2
 80045ac:	4013      	ands	r3, r2
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x3aa>
 80045b0:	e013      	b.n	80045da <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b2:	f7fe fdc7 	bl	8003144 <HAL_GetTick>
 80045b6:	0003      	movs	r3, r0
 80045b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ba:	e009      	b.n	80045d0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fe fdc2 	bl	8003144 <HAL_GetTick>
 80045c0:	0002      	movs	r2, r0
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	4a91      	ldr	r2, [pc, #580]	; (800480c <HAL_RCC_OscConfig+0x624>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e116      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d0:	4b8d      	ldr	r3, [pc, #564]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	2202      	movs	r2, #2
 80045d6:	4013      	ands	r3, r2
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045da:	231f      	movs	r3, #31
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e4:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	4b87      	ldr	r3, [pc, #540]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80045ea:	4989      	ldr	r1, [pc, #548]	; (8004810 <HAL_RCC_OscConfig+0x628>)
 80045ec:	400a      	ands	r2, r1
 80045ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2210      	movs	r2, #16
 80045f6:	4013      	ands	r3, r2
 80045f8:	d063      	beq.n	80046c2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d12a      	bne.n	8004658 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004602:	4b81      	ldr	r3, [pc, #516]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004606:	4b80      	ldr	r3, [pc, #512]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004608:	2104      	movs	r1, #4
 800460a:	430a      	orrs	r2, r1
 800460c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800460e:	4b7e      	ldr	r3, [pc, #504]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004612:	4b7d      	ldr	r3, [pc, #500]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004614:	2101      	movs	r1, #1
 8004616:	430a      	orrs	r2, r1
 8004618:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461a:	f7fe fd93 	bl	8003144 <HAL_GetTick>
 800461e:	0003      	movs	r3, r0
 8004620:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004624:	f7fe fd8e 	bl	8003144 <HAL_GetTick>
 8004628:	0002      	movs	r2, r0
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0e3      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004636:	4b74      	ldr	r3, [pc, #464]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	2202      	movs	r2, #2
 800463c:	4013      	ands	r3, r2
 800463e:	d0f1      	beq.n	8004624 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004640:	4b71      	ldr	r3, [pc, #452]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	22f8      	movs	r2, #248	; 0xf8
 8004646:	4393      	bics	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	00da      	lsls	r2, r3, #3
 8004650:	4b6d      	ldr	r3, [pc, #436]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004652:	430a      	orrs	r2, r1
 8004654:	635a      	str	r2, [r3, #52]	; 0x34
 8004656:	e034      	b.n	80046c2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	3305      	adds	r3, #5
 800465e:	d111      	bne.n	8004684 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004660:	4b69      	ldr	r3, [pc, #420]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004664:	4b68      	ldr	r3, [pc, #416]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004666:	2104      	movs	r1, #4
 8004668:	438a      	bics	r2, r1
 800466a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800466c:	4b66      	ldr	r3, [pc, #408]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	22f8      	movs	r2, #248	; 0xf8
 8004672:	4393      	bics	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	00da      	lsls	r2, r3, #3
 800467c:	4b62      	ldr	r3, [pc, #392]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800467e:	430a      	orrs	r2, r1
 8004680:	635a      	str	r2, [r3, #52]	; 0x34
 8004682:	e01e      	b.n	80046c2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004684:	4b60      	ldr	r3, [pc, #384]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004688:	4b5f      	ldr	r3, [pc, #380]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800468a:	2104      	movs	r1, #4
 800468c:	430a      	orrs	r2, r1
 800468e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004690:	4b5d      	ldr	r3, [pc, #372]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004694:	4b5c      	ldr	r3, [pc, #368]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004696:	2101      	movs	r1, #1
 8004698:	438a      	bics	r2, r1
 800469a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469c:	f7fe fd52 	bl	8003144 <HAL_GetTick>
 80046a0:	0003      	movs	r3, r0
 80046a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80046a6:	f7fe fd4d 	bl	8003144 <HAL_GetTick>
 80046aa:	0002      	movs	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e0a2      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80046b8:	4b53      	ldr	r3, [pc, #332]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	2202      	movs	r2, #2
 80046be:	4013      	ands	r3, r2
 80046c0:	d1f1      	bne.n	80046a6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d100      	bne.n	80046cc <HAL_RCC_OscConfig+0x4e4>
 80046ca:	e097      	b.n	80047fc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046cc:	4b4e      	ldr	r3, [pc, #312]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	220c      	movs	r2, #12
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d100      	bne.n	80046da <HAL_RCC_OscConfig+0x4f2>
 80046d8:	e06b      	b.n	80047b2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d14c      	bne.n	800477c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e2:	4b49      	ldr	r3, [pc, #292]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b48      	ldr	r3, [pc, #288]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80046e8:	494a      	ldr	r1, [pc, #296]	; (8004814 <HAL_RCC_OscConfig+0x62c>)
 80046ea:	400a      	ands	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fe fd29 	bl	8003144 <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe fd24 	bl	8003144 <HAL_GetTick>
 80046fc:	0002      	movs	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e079      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470a:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	049b      	lsls	r3, r3, #18
 8004712:	4013      	ands	r3, r2
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004716:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	220f      	movs	r2, #15
 800471c:	4393      	bics	r3, r2
 800471e:	0019      	movs	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	4b38      	ldr	r3, [pc, #224]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004726:	430a      	orrs	r2, r1
 8004728:	62da      	str	r2, [r3, #44]	; 0x2c
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4a3a      	ldr	r2, [pc, #232]	; (8004818 <HAL_RCC_OscConfig+0x630>)
 8004730:	4013      	ands	r3, r2
 8004732:	0019      	movs	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	431a      	orrs	r2, r3
 800473e:	4b32      	ldr	r3, [pc, #200]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b30      	ldr	r3, [pc, #192]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b2f      	ldr	r3, [pc, #188]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800474a:	2180      	movs	r1, #128	; 0x80
 800474c:	0449      	lsls	r1, r1, #17
 800474e:	430a      	orrs	r2, r1
 8004750:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7fe fcf7 	bl	8003144 <HAL_GetTick>
 8004756:	0003      	movs	r3, r0
 8004758:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475c:	f7fe fcf2 	bl	8003144 <HAL_GetTick>
 8004760:	0002      	movs	r2, r0
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e047      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800476e:	4b26      	ldr	r3, [pc, #152]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	049b      	lsls	r3, r3, #18
 8004776:	4013      	ands	r3, r2
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x574>
 800477a:	e03f      	b.n	80047fc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477c:	4b22      	ldr	r3, [pc, #136]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b21      	ldr	r3, [pc, #132]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 8004782:	4924      	ldr	r1, [pc, #144]	; (8004814 <HAL_RCC_OscConfig+0x62c>)
 8004784:	400a      	ands	r2, r1
 8004786:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fe fcdc 	bl	8003144 <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004792:	f7fe fcd7 	bl	8003144 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e02c      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a4:	4b18      	ldr	r3, [pc, #96]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	049b      	lsls	r3, r3, #18
 80047ac:	4013      	ands	r3, r2
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x5aa>
 80047b0:	e024      	b.n	80047fc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e01f      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80047c4:	4b10      	ldr	r3, [pc, #64]	; (8004808 <HAL_RCC_OscConfig+0x620>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	025b      	lsls	r3, r3, #9
 80047d0:	401a      	ands	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d10e      	bne.n	80047f8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	220f      	movs	r2, #15
 80047de:	401a      	ands	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	23f0      	movs	r3, #240	; 0xf0
 80047ec:	039b      	lsls	r3, r3, #14
 80047ee:	401a      	ands	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b008      	add	sp, #32
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	40021000 	.word	0x40021000
 800480c:	00001388 	.word	0x00001388
 8004810:	efffffff 	.word	0xefffffff
 8004814:	feffffff 	.word	0xfeffffff
 8004818:	ffc2ffff 	.word	0xffc2ffff

0800481c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0b3      	b.n	8004998 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004830:	4b5b      	ldr	r3, [pc, #364]	; (80049a0 <HAL_RCC_ClockConfig+0x184>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	4013      	ands	r3, r2
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d911      	bls.n	8004862 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b58      	ldr	r3, [pc, #352]	; (80049a0 <HAL_RCC_ClockConfig+0x184>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2201      	movs	r2, #1
 8004844:	4393      	bics	r3, r2
 8004846:	0019      	movs	r1, r3
 8004848:	4b55      	ldr	r3, [pc, #340]	; (80049a0 <HAL_RCC_ClockConfig+0x184>)
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004850:	4b53      	ldr	r3, [pc, #332]	; (80049a0 <HAL_RCC_ClockConfig+0x184>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2201      	movs	r2, #1
 8004856:	4013      	ands	r3, r2
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d001      	beq.n	8004862 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e09a      	b.n	8004998 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2202      	movs	r2, #2
 8004868:	4013      	ands	r3, r2
 800486a:	d015      	beq.n	8004898 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2204      	movs	r2, #4
 8004872:	4013      	ands	r3, r2
 8004874:	d006      	beq.n	8004884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004876:	4b4b      	ldr	r3, [pc, #300]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	4b4a      	ldr	r3, [pc, #296]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 800487c:	21e0      	movs	r1, #224	; 0xe0
 800487e:	00c9      	lsls	r1, r1, #3
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	22f0      	movs	r2, #240	; 0xf0
 800488a:	4393      	bics	r3, r2
 800488c:	0019      	movs	r1, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	4b44      	ldr	r3, [pc, #272]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2201      	movs	r2, #1
 800489e:	4013      	ands	r3, r2
 80048a0:	d040      	beq.n	8004924 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	029b      	lsls	r3, r3, #10
 80048b2:	4013      	ands	r3, r2
 80048b4:	d114      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e06e      	b.n	8004998 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b38      	ldr	r3, [pc, #224]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	049b      	lsls	r3, r3, #18
 80048ca:	4013      	ands	r3, r2
 80048cc:	d108      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e062      	b.n	8004998 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2202      	movs	r2, #2
 80048d8:	4013      	ands	r3, r2
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e05b      	b.n	8004998 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e0:	4b30      	ldr	r3, [pc, #192]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2203      	movs	r2, #3
 80048e6:	4393      	bics	r3, r2
 80048e8:	0019      	movs	r1, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fe fc26 	bl	8003144 <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fc:	e009      	b.n	8004912 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fe:	f7fe fc21 	bl	8003144 <HAL_GetTick>
 8004902:	0002      	movs	r2, r0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <HAL_RCC_ClockConfig+0x18c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e042      	b.n	8004998 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	220c      	movs	r2, #12
 8004918:	401a      	ands	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1ec      	bne.n	80048fe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <HAL_RCC_ClockConfig+0x184>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2201      	movs	r2, #1
 800492a:	4013      	ands	r3, r2
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d211      	bcs.n	8004956 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_ClockConfig+0x184>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	4393      	bics	r3, r2
 800493a:	0019      	movs	r1, r3
 800493c:	4b18      	ldr	r3, [pc, #96]	; (80049a0 <HAL_RCC_ClockConfig+0x184>)
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004944:	4b16      	ldr	r3, [pc, #88]	; (80049a0 <HAL_RCC_ClockConfig+0x184>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2201      	movs	r2, #1
 800494a:	4013      	ands	r3, r2
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d001      	beq.n	8004956 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e020      	b.n	8004998 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2204      	movs	r2, #4
 800495c:	4013      	ands	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a11      	ldr	r2, [pc, #68]	; (80049ac <HAL_RCC_ClockConfig+0x190>)
 8004966:	4013      	ands	r3, r2
 8004968:	0019      	movs	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004974:	f000 f820 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8004978:	0001      	movs	r1, r0
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <HAL_RCC_ClockConfig+0x188>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	091b      	lsrs	r3, r3, #4
 8004980:	220f      	movs	r2, #15
 8004982:	4013      	ands	r3, r2
 8004984:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <HAL_RCC_ClockConfig+0x194>)
 8004986:	5cd3      	ldrb	r3, [r2, r3]
 8004988:	000a      	movs	r2, r1
 800498a:	40da      	lsrs	r2, r3
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <HAL_RCC_ClockConfig+0x198>)
 800498e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004990:	2000      	movs	r0, #0
 8004992:	f7fe f9c7 	bl	8002d24 <HAL_InitTick>
  
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	0018      	movs	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	b004      	add	sp, #16
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40022000 	.word	0x40022000
 80049a4:	40021000 	.word	0x40021000
 80049a8:	00001388 	.word	0x00001388
 80049ac:	fffff8ff 	.word	0xfffff8ff
 80049b0:	0800a8d8 	.word	0x0800a8d8
 80049b4:	20000018 	.word	0x20000018

080049b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b08f      	sub	sp, #60	; 0x3c
 80049bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80049be:	2314      	movs	r3, #20
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049c6:	c313      	stmia	r3!, {r0, r1, r4}
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80049cc:	1d3b      	adds	r3, r7, #4
 80049ce:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049d2:	c313      	stmia	r3!, {r0, r1, r4}
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e0:	2300      	movs	r3, #0
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
 80049e4:	2300      	movs	r3, #0
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80049ec:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	220c      	movs	r2, #12
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d002      	beq.n	8004a02 <HAL_RCC_GetSysClockFreq+0x4a>
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d003      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0x50>
 8004a00:	e02d      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a02:	4b1e      	ldr	r3, [pc, #120]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a06:	e02d      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	0c9b      	lsrs	r3, r3, #18
 8004a0c:	220f      	movs	r2, #15
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2214      	movs	r2, #20
 8004a12:	18ba      	adds	r2, r7, r2
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004a18:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	4013      	ands	r3, r2
 8004a20:	1d3a      	adds	r2, r7, #4
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	025b      	lsls	r3, r3, #9
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a32:	4812      	ldr	r0, [pc, #72]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a34:	f7fb fb84 	bl	8000140 <__udivsi3>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	4353      	muls	r3, r2
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
 8004a42:	e009      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a46:	000a      	movs	r2, r1
 8004a48:	0152      	lsls	r2, r2, #5
 8004a4a:	1a52      	subs	r2, r2, r1
 8004a4c:	0193      	lsls	r3, r2, #6
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	185b      	adds	r3, r3, r1
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a5c:	e002      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a62:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b00f      	add	sp, #60	; 0x3c
 8004a6c:	bd90      	pop	{r4, r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	0800a838 	.word	0x0800a838
 8004a74:	0800a848 	.word	0x0800a848
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	007a1200 	.word	0x007a1200

08004a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	0018      	movs	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	20000018 	.word	0x20000018

08004a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004a98:	f7ff fff2 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004a9c:	0001      	movs	r1, r0
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	2207      	movs	r2, #7
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aaa:	5cd3      	ldrb	r3, [r2, r3]
 8004aac:	40d9      	lsrs	r1, r3
 8004aae:	000b      	movs	r3, r1
}    
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	0800a8e8 	.word	0x0800a8e8

08004ac0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2207      	movs	r2, #7
 8004ace:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <HAL_RCC_GetClockConfig+0x4c>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_GetClockConfig+0x4c>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	22f0      	movs	r2, #240	; 0xf0
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_RCC_GetClockConfig+0x4c>)
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	23e0      	movs	r3, #224	; 0xe0
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	401a      	ands	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_GetClockConfig+0x50>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2201      	movs	r2, #1
 8004afc:	401a      	ands	r2, r3
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	601a      	str	r2, [r3, #0]
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40022000 	.word	0x40022000

08004b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	025b      	lsls	r3, r3, #9
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d100      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004b30:	e08e      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004b32:	2017      	movs	r0, #23
 8004b34:	183b      	adds	r3, r7, r0
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3a:	4b57      	ldr	r3, [pc, #348]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	055b      	lsls	r3, r3, #21
 8004b42:	4013      	ands	r3, r2
 8004b44:	d110      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b46:	4b54      	ldr	r3, [pc, #336]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b4c:	2180      	movs	r1, #128	; 0x80
 8004b4e:	0549      	lsls	r1, r1, #21
 8004b50:	430a      	orrs	r2, r1
 8004b52:	61da      	str	r2, [r3, #28]
 8004b54:	4b50      	ldr	r3, [pc, #320]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	055b      	lsls	r3, r3, #21
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b62:	183b      	adds	r3, r7, r0
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4013      	ands	r3, r2
 8004b72:	d11a      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b74:	4b49      	ldr	r3, [pc, #292]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b48      	ldr	r3, [pc, #288]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004b7a:	2180      	movs	r1, #128	; 0x80
 8004b7c:	0049      	lsls	r1, r1, #1
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b82:	f7fe fadf 	bl	8003144 <HAL_GetTick>
 8004b86:	0003      	movs	r3, r0
 8004b88:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8a:	e008      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8c:	f7fe fada 	bl	8003144 <HAL_GetTick>
 8004b90:	0002      	movs	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e077      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004baa:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bac:	6a1a      	ldr	r2, [r3, #32]
 8004bae:	23c0      	movs	r3, #192	; 0xc0
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d034      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	23c0      	movs	r3, #192	; 0xc0
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d02c      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bcc:	4b32      	ldr	r3, [pc, #200]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bd6:	4b30      	ldr	r3, [pc, #192]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bd8:	6a1a      	ldr	r2, [r3, #32]
 8004bda:	4b2f      	ldr	r3, [pc, #188]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	0249      	lsls	r1, r1, #9
 8004be0:	430a      	orrs	r2, r1
 8004be2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004be4:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bea:	492e      	ldr	r1, [pc, #184]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004bec:	400a      	ands	r2, r1
 8004bee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fe faa1 	bl	8003144 <HAL_GetTick>
 8004c02:	0003      	movs	r3, r0
 8004c04:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	e009      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fe fa9c 	bl	8003144 <HAL_GetTick>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e038      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1c:	4b1e      	ldr	r3, [pc, #120]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	2202      	movs	r2, #2
 8004c22:	4013      	ands	r3, r2
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	0019      	movs	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c36:	430a      	orrs	r2, r1
 8004c38:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c3a:	2317      	movs	r3, #23
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d105      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c44:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c4a:	4918      	ldr	r1, [pc, #96]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004c4c:	400a      	ands	r2, r1
 8004c4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2201      	movs	r2, #1
 8004c56:	4013      	ands	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	2203      	movs	r2, #3
 8004c60:	4393      	bics	r3, r2
 8004c62:	0019      	movs	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2220      	movs	r2, #32
 8004c74:	4013      	ands	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	4393      	bics	r3, r2
 8004c80:	0019      	movs	r1, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b006      	add	sp, #24
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40007000 	.word	0x40007000
 8004ca0:	fffffcff 	.word	0xfffffcff
 8004ca4:	fffeffff 	.word	0xfffeffff
 8004ca8:	00001388 	.word	0x00001388
 8004cac:	efffffff 	.word	0xefffffff

08004cb0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e081      	b.n	8004dc6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	7f5b      	ldrb	r3, [r3, #29]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7fd ffe9 	bl	8002cac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	22ca      	movs	r2, #202	; 0xca
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2253      	movs	r2, #83	; 0x53
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 f9fb 	bl	80050ee <RTC_EnterInitMode>
 8004cf8:	1e03      	subs	r3, r0, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	22ff      	movs	r2, #255	; 0xff
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2204      	movs	r2, #4
 8004d08:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e05b      	b.n	8004dc6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	492d      	ldr	r1, [pc, #180]	; (8004dd0 <HAL_RTC_Init+0x120>)
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6899      	ldr	r1, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68d2      	ldr	r2, [r2, #12]
 8004d44:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6919      	ldr	r1, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	041a      	lsls	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2180      	movs	r1, #128	; 0x80
 8004d66:	438a      	bics	r2, r1
 8004d68:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2220      	movs	r2, #32
 8004d72:	4013      	ands	r3, r2
 8004d74:	d10e      	bne.n	8004d94 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 f98f 	bl	800509c <HAL_RTC_WaitForSynchro>
 8004d7e:	1e03      	subs	r3, r0, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	22ff      	movs	r2, #255	; 0xff
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e018      	b.n	8004dc6 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	490d      	ldr	r1, [pc, #52]	; (8004dd4 <HAL_RTC_Init+0x124>)
 8004da0:	400a      	ands	r2, r1
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	22ff      	movs	r2, #255	; 0xff
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
  }
}
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b002      	add	sp, #8
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	ff8fffbf 	.word	0xff8fffbf
 8004dd4:	fffbffff 	.word	0xfffbffff

08004dd8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	7f1b      	ldrb	r3, [r3, #28]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_RTC_SetTime+0x1c>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e0a5      	b.n	8004f40 <HAL_RTC_SetTime+0x168>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d125      	bne.n	8004e52 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2240      	movs	r2, #64	; 0x40
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d102      	bne.n	8004e18 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 f992 	bl	8005146 <RTC_ByteToBcd2>
 8004e22:	0003      	movs	r3, r0
 8004e24:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f000 f98b 	bl	8005146 <RTC_ByteToBcd2>
 8004e30:	0003      	movs	r3, r0
 8004e32:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e34:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	789b      	ldrb	r3, [r3, #2]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f000 f983 	bl	8005146 <RTC_ByteToBcd2>
 8004e40:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e42:	0022      	movs	r2, r4
 8004e44:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	78db      	ldrb	r3, [r3, #3]
 8004e4a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e017      	b.n	8004e82 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2240      	movs	r2, #64	; 0x40
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d102      	bne.n	8004e64 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2200      	movs	r2, #0
 8004e62:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e70:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e76:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	78db      	ldrb	r3, [r3, #3]
 8004e7c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	22ca      	movs	r2, #202	; 0xca
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2253      	movs	r2, #83	; 0x53
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	0018      	movs	r0, r3
 8004e96:	f000 f92a 	bl	80050ee <RTC_EnterInitMode>
 8004e9a:	1e03      	subs	r3, r0, #0
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	22ff      	movs	r2, #255	; 0xff
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e044      	b.n	8004f40 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4922      	ldr	r1, [pc, #136]	; (8004f48 <HAL_RTC_SetTime+0x170>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	491f      	ldr	r1, [pc, #124]	; (8004f4c <HAL_RTC_SetTime+0x174>)
 8004ece:	400a      	ands	r2, r1
 8004ed0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6899      	ldr	r1, [r3, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2220      	movs	r2, #32
 8004f02:	4013      	ands	r3, r2
 8004f04:	d111      	bne.n	8004f2a <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f000 f8c7 	bl	800509c <HAL_RTC_WaitForSynchro>
 8004f0e:	1e03      	subs	r3, r0, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	22ff      	movs	r2, #255	; 0xff
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e00a      	b.n	8004f40 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	22ff      	movs	r2, #255	; 0xff
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
  }
}
 8004f40:	0018      	movs	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b007      	add	sp, #28
 8004f46:	bd90      	pop	{r4, r7, pc}
 8004f48:	007f7f7f 	.word	0x007f7f7f
 8004f4c:	fffbffff 	.word	0xfffbffff

08004f50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	7f1b      	ldrb	r3, [r3, #28]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_RTC_SetDate+0x1c>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e091      	b.n	8005090 <HAL_RTC_SetDate+0x140>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2202      	movs	r2, #2
 8004f76:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10e      	bne.n	8004f9c <HAL_RTC_SetDate+0x4c>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	001a      	movs	r2, r3
 8004f84:	2310      	movs	r3, #16
 8004f86:	4013      	ands	r3, r2
 8004f88:	d008      	beq.n	8004f9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	2210      	movs	r2, #16
 8004f90:	4393      	bics	r3, r2
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	330a      	adds	r3, #10
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11c      	bne.n	8004fdc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 f8cd 	bl	8005146 <RTC_ByteToBcd2>
 8004fac:	0003      	movs	r3, r0
 8004fae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 f8c6 	bl	8005146 <RTC_ByteToBcd2>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fbe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	789b      	ldrb	r3, [r3, #2]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 f8be 	bl	8005146 <RTC_ByteToBcd2>
 8004fca:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004fcc:	0022      	movs	r2, r4
 8004fce:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e00e      	b.n	8004ffa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	78db      	ldrb	r3, [r3, #3]
 8004fe0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fe8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004fee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	22ca      	movs	r2, #202	; 0xca
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2253      	movs	r2, #83	; 0x53
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	0018      	movs	r0, r3
 800500e:	f000 f86e 	bl	80050ee <RTC_EnterInitMode>
 8005012:	1e03      	subs	r3, r0, #0
 8005014:	d00b      	beq.n	800502e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	22ff      	movs	r2, #255	; 0xff
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2204      	movs	r2, #4
 8005022:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e030      	b.n	8005090 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4918      	ldr	r1, [pc, #96]	; (8005098 <HAL_RTC_SetDate+0x148>)
 8005036:	400a      	ands	r2, r1
 8005038:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	438a      	bics	r2, r1
 8005048:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2220      	movs	r2, #32
 8005052:	4013      	ands	r3, r2
 8005054:	d111      	bne.n	800507a <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 f81f 	bl	800509c <HAL_RTC_WaitForSynchro>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d00b      	beq.n	800507a <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	22ff      	movs	r2, #255	; 0xff
 8005068:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2204      	movs	r2, #4
 800506e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e00a      	b.n	8005090 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	22ff      	movs	r2, #255	; 0xff
 8005080:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800508e:	2300      	movs	r3, #0
  }
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b007      	add	sp, #28
 8005096:	bd90      	pop	{r4, r7, pc}
 8005098:	00ffff3f 	.word	0x00ffff3f

0800509c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	21a0      	movs	r1, #160	; 0xa0
 80050b4:	438a      	bics	r2, r1
 80050b6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80050b8:	f7fe f844 	bl	8003144 <HAL_GetTick>
 80050bc:	0003      	movs	r3, r0
 80050be:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050c2:	f7fe f83f 	bl	8003144 <HAL_GetTick>
 80050c6:	0002      	movs	r2, r0
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	23fa      	movs	r3, #250	; 0xfa
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d901      	bls.n	80050d8 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e006      	b.n	80050e6 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	4013      	ands	r3, r2
 80050e2:	d0ee      	beq.n	80050c2 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	0018      	movs	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b004      	add	sp, #16
 80050ec:	bd80      	pop	{r7, pc}

080050ee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2240      	movs	r2, #64	; 0x40
 8005102:	4013      	ands	r3, r2
 8005104:	d11a      	bne.n	800513c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	4252      	negs	r2, r2
 800510e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005110:	f7fe f818 	bl	8003144 <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005118:	e00a      	b.n	8005130 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800511a:	f7fe f813 	bl	8003144 <HAL_GetTick>
 800511e:	0002      	movs	r2, r0
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1ad2      	subs	r2, r2, r3
 8005124:	23fa      	movs	r3, #250	; 0xfa
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	429a      	cmp	r2, r3
 800512a:	d901      	bls.n	8005130 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e006      	b.n	800513e <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2240      	movs	r2, #64	; 0x40
 8005138:	4013      	ands	r3, r2
 800513a:	d0ee      	beq.n	800511a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	0018      	movs	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	b004      	add	sp, #16
 8005144:	bd80      	pop	{r7, pc}

08005146 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	0002      	movs	r2, r0
 800514e:	1dfb      	adds	r3, r7, #7
 8005150:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005156:	e007      	b.n	8005168 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3301      	adds	r3, #1
 800515c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800515e:	1dfb      	adds	r3, r7, #7
 8005160:	1dfa      	adds	r2, r7, #7
 8005162:	7812      	ldrb	r2, [r2, #0]
 8005164:	3a0a      	subs	r2, #10
 8005166:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8005168:	1dfb      	adds	r3, r7, #7
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b09      	cmp	r3, #9
 800516e:	d8f3      	bhi.n	8005158 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	b2da      	uxtb	r2, r3
 8005178:	1dfb      	adds	r3, r7, #7
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	4313      	orrs	r3, r2
 800517e:	b2db      	uxtb	r3, r3
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b004      	add	sp, #16
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e042      	b.n	8005220 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	223d      	movs	r2, #61	; 0x3d
 800519e:	5c9b      	ldrb	r3, [r3, r2]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	223c      	movs	r2, #60	; 0x3c
 80051aa:	2100      	movs	r1, #0
 80051ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 f839 	bl	8005228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	223d      	movs	r2, #61	; 0x3d
 80051ba:	2102      	movs	r1, #2
 80051bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3304      	adds	r3, #4
 80051c6:	0019      	movs	r1, r3
 80051c8:	0010      	movs	r0, r2
 80051ca:	f000 f9b7 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2246      	movs	r2, #70	; 0x46
 80051d2:	2101      	movs	r1, #1
 80051d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	223e      	movs	r2, #62	; 0x3e
 80051da:	2101      	movs	r1, #1
 80051dc:	5499      	strb	r1, [r3, r2]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	223f      	movs	r2, #63	; 0x3f
 80051e2:	2101      	movs	r1, #1
 80051e4:	5499      	strb	r1, [r3, r2]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2240      	movs	r2, #64	; 0x40
 80051ea:	2101      	movs	r1, #1
 80051ec:	5499      	strb	r1, [r3, r2]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2241      	movs	r2, #65	; 0x41
 80051f2:	2101      	movs	r1, #1
 80051f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2242      	movs	r2, #66	; 0x42
 80051fa:	2101      	movs	r1, #1
 80051fc:	5499      	strb	r1, [r3, r2]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2243      	movs	r2, #67	; 0x43
 8005202:	2101      	movs	r1, #1
 8005204:	5499      	strb	r1, [r3, r2]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2244      	movs	r2, #68	; 0x44
 800520a:	2101      	movs	r1, #1
 800520c:	5499      	strb	r1, [r3, r2]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2245      	movs	r2, #69	; 0x45
 8005212:	2101      	movs	r1, #1
 8005214:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	223d      	movs	r2, #61	; 0x3d
 800521a:	2101      	movs	r1, #1
 800521c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	0018      	movs	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	b002      	add	sp, #8
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005230:	46c0      	nop			; (mov r8, r8)
 8005232:	46bd      	mov	sp, r7
 8005234:	b002      	add	sp, #8
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	223d      	movs	r2, #61	; 0x3d
 8005244:	5c9b      	ldrb	r3, [r3, r2]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d001      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e035      	b.n	80052bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	223d      	movs	r2, #61	; 0x3d
 8005254:	2102      	movs	r1, #2
 8005256:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2101      	movs	r1, #1
 8005264:	430a      	orrs	r2, r1
 8005266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <HAL_TIM_Base_Start_IT+0x8c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x4e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <HAL_TIM_Base_Start_IT+0x90>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x4e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a12      	ldr	r2, [pc, #72]	; (80052cc <HAL_TIM_Base_Start_IT+0x94>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d111      	bne.n	80052aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2207      	movs	r2, #7
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b06      	cmp	r3, #6
 8005296:	d010      	beq.n	80052ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2101      	movs	r1, #1
 80052a4:	430a      	orrs	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	e007      	b.n	80052ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2101      	movs	r1, #1
 80052b6:	430a      	orrs	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b004      	add	sp, #16
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40014000 	.word	0x40014000

080052d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2202      	movs	r2, #2
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d124      	bne.n	8005330 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2202      	movs	r2, #2
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d11d      	bne.n	8005330 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2203      	movs	r2, #3
 80052fa:	4252      	negs	r2, r2
 80052fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2203      	movs	r2, #3
 800530c:	4013      	ands	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	0018      	movs	r0, r3
 8005314:	f000 f8fa 	bl	800550c <HAL_TIM_IC_CaptureCallback>
 8005318:	e007      	b.n	800532a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	0018      	movs	r0, r3
 800531e:	f000 f8ed 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	0018      	movs	r0, r3
 8005326:	f000 f8f9 	bl	800551c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2204      	movs	r2, #4
 8005338:	4013      	ands	r3, r2
 800533a:	2b04      	cmp	r3, #4
 800533c:	d125      	bne.n	800538a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	2204      	movs	r2, #4
 8005346:	4013      	ands	r3, r2
 8005348:	2b04      	cmp	r3, #4
 800534a:	d11e      	bne.n	800538a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2205      	movs	r2, #5
 8005352:	4252      	negs	r2, r2
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	23c0      	movs	r3, #192	; 0xc0
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4013      	ands	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 f8cd 	bl	800550c <HAL_TIM_IC_CaptureCallback>
 8005372:	e007      	b.n	8005384 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	0018      	movs	r0, r3
 8005378:	f000 f8c0 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	0018      	movs	r0, r3
 8005380:	f000 f8cc 	bl	800551c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2208      	movs	r2, #8
 8005392:	4013      	ands	r3, r2
 8005394:	2b08      	cmp	r3, #8
 8005396:	d124      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2208      	movs	r2, #8
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d11d      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2209      	movs	r2, #9
 80053ac:	4252      	negs	r2, r2
 80053ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2204      	movs	r2, #4
 80053b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2203      	movs	r2, #3
 80053be:	4013      	ands	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 f8a1 	bl	800550c <HAL_TIM_IC_CaptureCallback>
 80053ca:	e007      	b.n	80053dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	0018      	movs	r0, r3
 80053d0:	f000 f894 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	0018      	movs	r0, r3
 80053d8:	f000 f8a0 	bl	800551c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2210      	movs	r2, #16
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d125      	bne.n	800543c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2210      	movs	r2, #16
 80053f8:	4013      	ands	r3, r2
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d11e      	bne.n	800543c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2211      	movs	r2, #17
 8005404:	4252      	negs	r2, r2
 8005406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2208      	movs	r2, #8
 800540c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	23c0      	movs	r3, #192	; 0xc0
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4013      	ands	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	0018      	movs	r0, r3
 8005420:	f000 f874 	bl	800550c <HAL_TIM_IC_CaptureCallback>
 8005424:	e007      	b.n	8005436 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	0018      	movs	r0, r3
 800542a:	f000 f867 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	0018      	movs	r0, r3
 8005432:	f000 f873 	bl	800551c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2201      	movs	r2, #1
 8005444:	4013      	ands	r3, r2
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10f      	bne.n	800546a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	4013      	ands	r3, r2
 8005454:	2b01      	cmp	r3, #1
 8005456:	d108      	bne.n	800546a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2202      	movs	r2, #2
 800545e:	4252      	negs	r2, r2
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0018      	movs	r0, r3
 8005466:	f7fd fa05 	bl	8002874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2280      	movs	r2, #128	; 0x80
 8005472:	4013      	ands	r3, r2
 8005474:	2b80      	cmp	r3, #128	; 0x80
 8005476:	d10f      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2280      	movs	r2, #128	; 0x80
 8005480:	4013      	ands	r3, r2
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d108      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2281      	movs	r2, #129	; 0x81
 800548c:	4252      	negs	r2, r2
 800548e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	0018      	movs	r0, r3
 8005494:	f000 f8d0 	bl	8005638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2240      	movs	r2, #64	; 0x40
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d10f      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2240      	movs	r2, #64	; 0x40
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d108      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2241      	movs	r2, #65	; 0x41
 80054ba:	4252      	negs	r2, r2
 80054bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	0018      	movs	r0, r3
 80054c2:	f000 f833 	bl	800552c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2220      	movs	r2, #32
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d10f      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	4013      	ands	r3, r2
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d108      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2221      	movs	r2, #33	; 0x21
 80054e8:	4252      	negs	r2, r2
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	0018      	movs	r0, r3
 80054f0:	f000 f89a 	bl	8005628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b002      	add	sp, #8
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b002      	add	sp, #8
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b002      	add	sp, #8
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	b002      	add	sp, #8
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005534:	46c0      	nop			; (mov r8, r8)
 8005536:	46bd      	mov	sp, r7
 8005538:	b002      	add	sp, #8
 800553a:	bd80      	pop	{r7, pc}

0800553c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a2f      	ldr	r2, [pc, #188]	; (800560c <TIM_Base_SetConfig+0xd0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <TIM_Base_SetConfig+0x20>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a2e      	ldr	r2, [pc, #184]	; (8005610 <TIM_Base_SetConfig+0xd4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d108      	bne.n	800556e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2270      	movs	r2, #112	; 0x70
 8005560:	4393      	bics	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a26      	ldr	r2, [pc, #152]	; (800560c <TIM_Base_SetConfig+0xd0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a25      	ldr	r2, [pc, #148]	; (8005610 <TIM_Base_SetConfig+0xd4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00f      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a24      	ldr	r2, [pc, #144]	; (8005614 <TIM_Base_SetConfig+0xd8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00b      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a23      	ldr	r2, [pc, #140]	; (8005618 <TIM_Base_SetConfig+0xdc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d007      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a22      	ldr	r2, [pc, #136]	; (800561c <TIM_Base_SetConfig+0xe0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d003      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a21      	ldr	r2, [pc, #132]	; (8005620 <TIM_Base_SetConfig+0xe4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d108      	bne.n	80055b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a20      	ldr	r2, [pc, #128]	; (8005624 <TIM_Base_SetConfig+0xe8>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2280      	movs	r2, #128	; 0x80
 80055b4:	4393      	bics	r3, r2
 80055b6:	001a      	movs	r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a0c      	ldr	r2, [pc, #48]	; (800560c <TIM_Base_SetConfig+0xd0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00b      	beq.n	80055f6 <TIM_Base_SetConfig+0xba>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a0d      	ldr	r2, [pc, #52]	; (8005618 <TIM_Base_SetConfig+0xdc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d007      	beq.n	80055f6 <TIM_Base_SetConfig+0xba>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <TIM_Base_SetConfig+0xe0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_Base_SetConfig+0xba>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <TIM_Base_SetConfig+0xe4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d103      	bne.n	80055fe <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	615a      	str	r2, [r3, #20]
}
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	46bd      	mov	sp, r7
 8005608:	b004      	add	sp, #16
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40000400 	.word	0x40000400
 8005614:	40002000 	.word	0x40002000
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800
 8005624:	fffffcff 	.word	0xfffffcff

08005628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b002      	add	sp, #8
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e044      	b.n	80056e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800565e:	2b00      	cmp	r3, #0
 8005660:	d107      	bne.n	8005672 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2274      	movs	r2, #116	; 0x74
 8005666:	2100      	movs	r1, #0
 8005668:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0018      	movs	r0, r3
 800566e:	f7fd fccb 	bl	8003008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2224      	movs	r2, #36	; 0x24
 8005676:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2101      	movs	r1, #1
 8005684:	438a      	bics	r2, r1
 8005686:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	0018      	movs	r0, r3
 800568c:	f000 f8da 	bl	8005844 <UART_SetConfig>
 8005690:	0003      	movs	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e024      	b.n	80056e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 fa0d 	bl	8005ac4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	490d      	ldr	r1, [pc, #52]	; (80056ec <HAL_UART_Init+0xa4>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2108      	movs	r1, #8
 80056c6:	438a      	bics	r2, r1
 80056c8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2101      	movs	r1, #1
 80056d6:	430a      	orrs	r2, r1
 80056d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 faa5 	bl	8005c2c <UART_CheckIdleState>
 80056e2:	0003      	movs	r3, r0
}
 80056e4:	0018      	movs	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b002      	add	sp, #8
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	fffff7ff 	.word	0xfffff7ff

080056f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	1dbb      	adds	r3, r7, #6
 80056fe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005704:	2b20      	cmp	r3, #32
 8005706:	d000      	beq.n	800570a <HAL_UART_Transmit+0x1a>
 8005708:	e096      	b.n	8005838 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_UART_Transmit+0x28>
 8005710:	1dbb      	adds	r3, r7, #6
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e08e      	b.n	800583a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	015b      	lsls	r3, r3, #5
 8005724:	429a      	cmp	r2, r3
 8005726:	d109      	bne.n	800573c <HAL_UART_Transmit+0x4c>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2201      	movs	r2, #1
 8005734:	4013      	ands	r3, r2
 8005736:	d001      	beq.n	800573c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e07e      	b.n	800583a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2274      	movs	r2, #116	; 0x74
 8005740:	5c9b      	ldrb	r3, [r3, r2]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_UART_Transmit+0x5a>
 8005746:	2302      	movs	r3, #2
 8005748:	e077      	b.n	800583a <HAL_UART_Transmit+0x14a>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2274      	movs	r2, #116	; 0x74
 800574e:	2101      	movs	r1, #1
 8005750:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2280      	movs	r2, #128	; 0x80
 8005756:	2100      	movs	r1, #0
 8005758:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2221      	movs	r2, #33	; 0x21
 800575e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005760:	f7fd fcf0 	bl	8003144 <HAL_GetTick>
 8005764:	0003      	movs	r3, r0
 8005766:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1dba      	adds	r2, r7, #6
 800576c:	2150      	movs	r1, #80	; 0x50
 800576e:	8812      	ldrh	r2, [r2, #0]
 8005770:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1dba      	adds	r2, r7, #6
 8005776:	2152      	movs	r1, #82	; 0x52
 8005778:	8812      	ldrh	r2, [r2, #0]
 800577a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	2380      	movs	r3, #128	; 0x80
 8005782:	015b      	lsls	r3, r3, #5
 8005784:	429a      	cmp	r2, r3
 8005786:	d108      	bne.n	800579a <HAL_UART_Transmit+0xaa>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e003      	b.n	80057a2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2274      	movs	r2, #116	; 0x74
 80057a6:	2100      	movs	r1, #0
 80057a8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80057aa:	e02d      	b.n	8005808 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	0013      	movs	r3, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	f000 fa7f 	bl	8005cbc <UART_WaitOnFlagUntilTimeout>
 80057be:	1e03      	subs	r3, r0, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e039      	b.n	800583a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	881a      	ldrh	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	05d2      	lsls	r2, r2, #23
 80057d6:	0dd2      	lsrs	r2, r2, #23
 80057d8:	b292      	uxth	r2, r2
 80057da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	3302      	adds	r3, #2
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e008      	b.n	80057f6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	b292      	uxth	r2, r2
 80057ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2252      	movs	r2, #82	; 0x52
 80057fa:	5a9b      	ldrh	r3, [r3, r2]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b299      	uxth	r1, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2252      	movs	r2, #82	; 0x52
 8005806:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2252      	movs	r2, #82	; 0x52
 800580c:	5a9b      	ldrh	r3, [r3, r2]
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1cb      	bne.n	80057ac <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	0013      	movs	r3, r2
 800581e:	2200      	movs	r2, #0
 8005820:	2140      	movs	r1, #64	; 0x40
 8005822:	f000 fa4b 	bl	8005cbc <UART_WaitOnFlagUntilTimeout>
 8005826:	1e03      	subs	r3, r0, #0
 8005828:	d001      	beq.n	800582e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e005      	b.n	800583a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	e000      	b.n	800583a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005838:	2302      	movs	r3, #2
  }
}
 800583a:	0018      	movs	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	b008      	add	sp, #32
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800584c:	231e      	movs	r3, #30
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a8d      	ldr	r2, [pc, #564]	; (8005aa8 <UART_SetConfig+0x264>)
 8005874:	4013      	ands	r3, r2
 8005876:	0019      	movs	r1, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	430a      	orrs	r2, r1
 8005880:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a88      	ldr	r2, [pc, #544]	; (8005aac <UART_SetConfig+0x268>)
 800588a:	4013      	ands	r3, r2
 800588c:	0019      	movs	r1, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a7f      	ldr	r2, [pc, #508]	; (8005ab0 <UART_SetConfig+0x26c>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	0019      	movs	r1, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a7b      	ldr	r2, [pc, #492]	; (8005ab4 <UART_SetConfig+0x270>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d127      	bne.n	800591a <UART_SetConfig+0xd6>
 80058ca:	4b7b      	ldr	r3, [pc, #492]	; (8005ab8 <UART_SetConfig+0x274>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	2203      	movs	r2, #3
 80058d0:	4013      	ands	r3, r2
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d00d      	beq.n	80058f2 <UART_SetConfig+0xae>
 80058d6:	d81b      	bhi.n	8005910 <UART_SetConfig+0xcc>
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d014      	beq.n	8005906 <UART_SetConfig+0xc2>
 80058dc:	d818      	bhi.n	8005910 <UART_SetConfig+0xcc>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <UART_SetConfig+0xa4>
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d00a      	beq.n	80058fc <UART_SetConfig+0xb8>
 80058e6:	e013      	b.n	8005910 <UART_SetConfig+0xcc>
 80058e8:	231f      	movs	r3, #31
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	e021      	b.n	8005936 <UART_SetConfig+0xf2>
 80058f2:	231f      	movs	r3, #31
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	2202      	movs	r2, #2
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e01c      	b.n	8005936 <UART_SetConfig+0xf2>
 80058fc:	231f      	movs	r3, #31
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2204      	movs	r2, #4
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	e017      	b.n	8005936 <UART_SetConfig+0xf2>
 8005906:	231f      	movs	r3, #31
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	2208      	movs	r2, #8
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e012      	b.n	8005936 <UART_SetConfig+0xf2>
 8005910:	231f      	movs	r3, #31
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	2210      	movs	r2, #16
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	e00d      	b.n	8005936 <UART_SetConfig+0xf2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a67      	ldr	r2, [pc, #412]	; (8005abc <UART_SetConfig+0x278>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d104      	bne.n	800592e <UART_SetConfig+0xea>
 8005924:	231f      	movs	r3, #31
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	e003      	b.n	8005936 <UART_SetConfig+0xf2>
 800592e:	231f      	movs	r3, #31
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	2210      	movs	r2, #16
 8005934:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	429a      	cmp	r2, r3
 8005940:	d15d      	bne.n	80059fe <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005942:	231f      	movs	r3, #31
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d015      	beq.n	8005978 <UART_SetConfig+0x134>
 800594c:	dc18      	bgt.n	8005980 <UART_SetConfig+0x13c>
 800594e:	2b04      	cmp	r3, #4
 8005950:	d00d      	beq.n	800596e <UART_SetConfig+0x12a>
 8005952:	dc15      	bgt.n	8005980 <UART_SetConfig+0x13c>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <UART_SetConfig+0x11a>
 8005958:	2b02      	cmp	r3, #2
 800595a:	d005      	beq.n	8005968 <UART_SetConfig+0x124>
 800595c:	e010      	b.n	8005980 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800595e:	f7ff f899 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8005962:	0003      	movs	r3, r0
 8005964:	61bb      	str	r3, [r7, #24]
        break;
 8005966:	e012      	b.n	800598e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005968:	4b55      	ldr	r3, [pc, #340]	; (8005ac0 <UART_SetConfig+0x27c>)
 800596a:	61bb      	str	r3, [r7, #24]
        break;
 800596c:	e00f      	b.n	800598e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800596e:	f7ff f823 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8005972:	0003      	movs	r3, r0
 8005974:	61bb      	str	r3, [r7, #24]
        break;
 8005976:	e00a      	b.n	800598e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	61bb      	str	r3, [r7, #24]
        break;
 800597e:	e006      	b.n	800598e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005984:	231e      	movs	r3, #30
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	2201      	movs	r2, #1
 800598a:	701a      	strb	r2, [r3, #0]
        break;
 800598c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d100      	bne.n	8005996 <UART_SetConfig+0x152>
 8005994:	e07b      	b.n	8005a8e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	005a      	lsls	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	18d2      	adds	r2, r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	0019      	movs	r1, r3
 80059a8:	0010      	movs	r0, r2
 80059aa:	f7fa fbc9 	bl	8000140 <__udivsi3>
 80059ae:	0003      	movs	r3, r0
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b0f      	cmp	r3, #15
 80059b8:	d91c      	bls.n	80059f4 <UART_SetConfig+0x1b0>
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	025b      	lsls	r3, r3, #9
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d217      	bcs.n	80059f4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	200e      	movs	r0, #14
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	210f      	movs	r1, #15
 80059ce:	438a      	bics	r2, r1
 80059d0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2207      	movs	r2, #7
 80059da:	4013      	ands	r3, r2
 80059dc:	b299      	uxth	r1, r3
 80059de:	183b      	adds	r3, r7, r0
 80059e0:	183a      	adds	r2, r7, r0
 80059e2:	8812      	ldrh	r2, [r2, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	183a      	adds	r2, r7, r0
 80059ee:	8812      	ldrh	r2, [r2, #0]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	e04c      	b.n	8005a8e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80059f4:	231e      	movs	r3, #30
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	e047      	b.n	8005a8e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059fe:	231f      	movs	r3, #31
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d015      	beq.n	8005a34 <UART_SetConfig+0x1f0>
 8005a08:	dc18      	bgt.n	8005a3c <UART_SetConfig+0x1f8>
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d00d      	beq.n	8005a2a <UART_SetConfig+0x1e6>
 8005a0e:	dc15      	bgt.n	8005a3c <UART_SetConfig+0x1f8>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <UART_SetConfig+0x1d6>
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d005      	beq.n	8005a24 <UART_SetConfig+0x1e0>
 8005a18:	e010      	b.n	8005a3c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a1a:	f7ff f83b 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	61bb      	str	r3, [r7, #24]
        break;
 8005a22:	e012      	b.n	8005a4a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a24:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <UART_SetConfig+0x27c>)
 8005a26:	61bb      	str	r3, [r7, #24]
        break;
 8005a28:	e00f      	b.n	8005a4a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a2a:	f7fe ffc5 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	61bb      	str	r3, [r7, #24]
        break;
 8005a32:	e00a      	b.n	8005a4a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	61bb      	str	r3, [r7, #24]
        break;
 8005a3a:	e006      	b.n	8005a4a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a40:	231e      	movs	r3, #30
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	2201      	movs	r2, #1
 8005a46:	701a      	strb	r2, [r3, #0]
        break;
 8005a48:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01e      	beq.n	8005a8e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	085a      	lsrs	r2, r3, #1
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	18d2      	adds	r2, r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	0019      	movs	r1, r3
 8005a60:	0010      	movs	r0, r2
 8005a62:	f7fa fb6d 	bl	8000140 <__udivsi3>
 8005a66:	0003      	movs	r3, r0
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b0f      	cmp	r3, #15
 8005a70:	d909      	bls.n	8005a86 <UART_SetConfig+0x242>
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	025b      	lsls	r3, r3, #9
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d204      	bcs.n	8005a86 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	60da      	str	r2, [r3, #12]
 8005a84:	e003      	b.n	8005a8e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005a86:	231e      	movs	r3, #30
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a9a:	231e      	movs	r3, #30
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	781b      	ldrb	r3, [r3, #0]
}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b008      	add	sp, #32
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	ffff69f3 	.word	0xffff69f3
 8005aac:	ffffcfff 	.word	0xffffcfff
 8005ab0:	fffff4ff 	.word	0xfffff4ff
 8005ab4:	40013800 	.word	0x40013800
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	40004400 	.word	0x40004400
 8005ac0:	007a1200 	.word	0x007a1200

08005ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4a4a      	ldr	r2, [pc, #296]	; (8005c08 <UART_AdvFeatureConfig+0x144>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2202      	movs	r2, #2
 8005af4:	4013      	ands	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4a43      	ldr	r2, [pc, #268]	; (8005c0c <UART_AdvFeatureConfig+0x148>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2204      	movs	r2, #4
 8005b16:	4013      	ands	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	4a3b      	ldr	r2, [pc, #236]	; (8005c10 <UART_AdvFeatureConfig+0x14c>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	0019      	movs	r1, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	2208      	movs	r2, #8
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4a34      	ldr	r2, [pc, #208]	; (8005c14 <UART_AdvFeatureConfig+0x150>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	0019      	movs	r1, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2210      	movs	r2, #16
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d00b      	beq.n	8005b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	4a2c      	ldr	r2, [pc, #176]	; (8005c18 <UART_AdvFeatureConfig+0x154>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d00b      	beq.n	8005b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4a25      	ldr	r2, [pc, #148]	; (8005c1c <UART_AdvFeatureConfig+0x158>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2240      	movs	r2, #64	; 0x40
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d01d      	beq.n	8005bde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <UART_AdvFeatureConfig+0x15c>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	0019      	movs	r1, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	035b      	lsls	r3, r3, #13
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d10b      	bne.n	8005bde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <UART_AdvFeatureConfig+0x160>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	4013      	ands	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4a0e      	ldr	r2, [pc, #56]	; (8005c28 <UART_AdvFeatureConfig+0x164>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	605a      	str	r2, [r3, #4]
  }
}
 8005c00:	46c0      	nop			; (mov r8, r8)
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	fffdffff 	.word	0xfffdffff
 8005c0c:	fffeffff 	.word	0xfffeffff
 8005c10:	fffbffff 	.word	0xfffbffff
 8005c14:	ffff7fff 	.word	0xffff7fff
 8005c18:	ffffefff 	.word	0xffffefff
 8005c1c:	ffffdfff 	.word	0xffffdfff
 8005c20:	ffefffff 	.word	0xffefffff
 8005c24:	ff9fffff 	.word	0xff9fffff
 8005c28:	fff7ffff 	.word	0xfff7ffff

08005c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	2100      	movs	r1, #0
 8005c3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c3c:	f7fd fa82 	bl	8003144 <HAL_GetTick>
 8005c40:	0003      	movs	r3, r0
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d10c      	bne.n	8005c6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2280      	movs	r2, #128	; 0x80
 8005c56:	0391      	lsls	r1, r2, #14
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4a17      	ldr	r2, [pc, #92]	; (8005cb8 <UART_CheckIdleState+0x8c>)
 8005c5c:	9200      	str	r2, [sp, #0]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f000 f82c 	bl	8005cbc <UART_WaitOnFlagUntilTimeout>
 8005c64:	1e03      	subs	r3, r0, #0
 8005c66:	d001      	beq.n	8005c6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e021      	b.n	8005cb0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2204      	movs	r2, #4
 8005c74:	4013      	ands	r3, r2
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d10c      	bne.n	8005c94 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2280      	movs	r2, #128	; 0x80
 8005c7e:	03d1      	lsls	r1, r2, #15
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <UART_CheckIdleState+0x8c>)
 8005c84:	9200      	str	r2, [sp, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f000 f818 	bl	8005cbc <UART_WaitOnFlagUntilTimeout>
 8005c8c:	1e03      	subs	r3, r0, #0
 8005c8e:	d001      	beq.n	8005c94 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e00d      	b.n	8005cb0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2274      	movs	r2, #116	; 0x74
 8005caa:	2100      	movs	r1, #0
 8005cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b004      	add	sp, #16
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	01ffffff 	.word	0x01ffffff

08005cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	1dfb      	adds	r3, r7, #7
 8005cca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ccc:	e05e      	b.n	8005d8c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	d05b      	beq.n	8005d8c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd4:	f7fd fa36 	bl	8003144 <HAL_GetTick>
 8005cd8:	0002      	movs	r2, r0
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d302      	bcc.n	8005cea <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d11b      	bne.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	492f      	ldr	r1, [pc, #188]	; (8005db4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005cf6:	400a      	ands	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2101      	movs	r1, #1
 8005d06:	438a      	bics	r2, r1
 8005d08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2274      	movs	r2, #116	; 0x74
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e044      	b.n	8005dac <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d02e      	beq.n	8005d8c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	401a      	ands	r2, r3
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d124      	bne.n	8005d8c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2280      	movs	r2, #128	; 0x80
 8005d48:	0112      	lsls	r2, r2, #4
 8005d4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4917      	ldr	r1, [pc, #92]	; (8005db4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005d58:	400a      	ands	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2101      	movs	r1, #1
 8005d68:	438a      	bics	r2, r1
 8005d6a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	2120      	movs	r1, #32
 8005d7e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2274      	movs	r2, #116	; 0x74
 8005d84:	2100      	movs	r1, #0
 8005d86:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e00f      	b.n	8005dac <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4013      	ands	r3, r2
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	425a      	negs	r2, r3
 8005d9c:	4153      	adcs	r3, r2
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	001a      	movs	r2, r3
 8005da2:	1dfb      	adds	r3, r7, #7
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d091      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b004      	add	sp, #16
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	fffffe5f 	.word	0xfffffe5f

08005db8 <__errno>:
 8005db8:	4b01      	ldr	r3, [pc, #4]	; (8005dc0 <__errno+0x8>)
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	4770      	bx	lr
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	20000020 	.word	0x20000020

08005dc4 <__libc_init_array>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	2600      	movs	r6, #0
 8005dc8:	4d0c      	ldr	r5, [pc, #48]	; (8005dfc <__libc_init_array+0x38>)
 8005dca:	4c0d      	ldr	r4, [pc, #52]	; (8005e00 <__libc_init_array+0x3c>)
 8005dcc:	1b64      	subs	r4, r4, r5
 8005dce:	10a4      	asrs	r4, r4, #2
 8005dd0:	42a6      	cmp	r6, r4
 8005dd2:	d109      	bne.n	8005de8 <__libc_init_array+0x24>
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	f004 fd03 	bl	800a7e0 <_init>
 8005dda:	4d0a      	ldr	r5, [pc, #40]	; (8005e04 <__libc_init_array+0x40>)
 8005ddc:	4c0a      	ldr	r4, [pc, #40]	; (8005e08 <__libc_init_array+0x44>)
 8005dde:	1b64      	subs	r4, r4, r5
 8005de0:	10a4      	asrs	r4, r4, #2
 8005de2:	42a6      	cmp	r6, r4
 8005de4:	d105      	bne.n	8005df2 <__libc_init_array+0x2e>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	00b3      	lsls	r3, r6, #2
 8005dea:	58eb      	ldr	r3, [r5, r3]
 8005dec:	4798      	blx	r3
 8005dee:	3601      	adds	r6, #1
 8005df0:	e7ee      	b.n	8005dd0 <__libc_init_array+0xc>
 8005df2:	00b3      	lsls	r3, r6, #2
 8005df4:	58eb      	ldr	r3, [r5, r3]
 8005df6:	4798      	blx	r3
 8005df8:	3601      	adds	r6, #1
 8005dfa:	e7f2      	b.n	8005de2 <__libc_init_array+0x1e>
 8005dfc:	0800ada4 	.word	0x0800ada4
 8005e00:	0800ada4 	.word	0x0800ada4
 8005e04:	0800ada4 	.word	0x0800ada4
 8005e08:	0800ada8 	.word	0x0800ada8

08005e0c <memset>:
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	1882      	adds	r2, r0, r2
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d100      	bne.n	8005e16 <memset+0xa>
 8005e14:	4770      	bx	lr
 8005e16:	7019      	strb	r1, [r3, #0]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	e7f9      	b.n	8005e10 <memset+0x4>

08005e1c <__cvt>:
 8005e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1e:	001e      	movs	r6, r3
 8005e20:	2300      	movs	r3, #0
 8005e22:	0014      	movs	r4, r2
 8005e24:	b08b      	sub	sp, #44	; 0x2c
 8005e26:	429e      	cmp	r6, r3
 8005e28:	da04      	bge.n	8005e34 <__cvt+0x18>
 8005e2a:	2180      	movs	r1, #128	; 0x80
 8005e2c:	0609      	lsls	r1, r1, #24
 8005e2e:	1873      	adds	r3, r6, r1
 8005e30:	001e      	movs	r6, r3
 8005e32:	232d      	movs	r3, #45	; 0x2d
 8005e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e36:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e38:	7013      	strb	r3, [r2, #0]
 8005e3a:	2320      	movs	r3, #32
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	439f      	bics	r7, r3
 8005e40:	2f46      	cmp	r7, #70	; 0x46
 8005e42:	d007      	beq.n	8005e54 <__cvt+0x38>
 8005e44:	003b      	movs	r3, r7
 8005e46:	3b45      	subs	r3, #69	; 0x45
 8005e48:	4259      	negs	r1, r3
 8005e4a:	414b      	adcs	r3, r1
 8005e4c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005e4e:	3a01      	subs	r2, #1
 8005e50:	18cb      	adds	r3, r1, r3
 8005e52:	9310      	str	r3, [sp, #64]	; 0x40
 8005e54:	ab09      	add	r3, sp, #36	; 0x24
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	ab08      	add	r3, sp, #32
 8005e5a:	9303      	str	r3, [sp, #12]
 8005e5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e5e:	9200      	str	r2, [sp, #0]
 8005e60:	9302      	str	r3, [sp, #8]
 8005e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e64:	0022      	movs	r2, r4
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	0033      	movs	r3, r6
 8005e6a:	f001 fddf 	bl	8007a2c <_dtoa_r>
 8005e6e:	0005      	movs	r5, r0
 8005e70:	2f47      	cmp	r7, #71	; 0x47
 8005e72:	d102      	bne.n	8005e7a <__cvt+0x5e>
 8005e74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e76:	07db      	lsls	r3, r3, #31
 8005e78:	d528      	bpl.n	8005ecc <__cvt+0xb0>
 8005e7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e7c:	18eb      	adds	r3, r5, r3
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	2f46      	cmp	r7, #70	; 0x46
 8005e82:	d114      	bne.n	8005eae <__cvt+0x92>
 8005e84:	782b      	ldrb	r3, [r5, #0]
 8005e86:	2b30      	cmp	r3, #48	; 0x30
 8005e88:	d10c      	bne.n	8005ea4 <__cvt+0x88>
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	0020      	movs	r0, r4
 8005e90:	0031      	movs	r1, r6
 8005e92:	f7fa fadb 	bl	800044c <__aeabi_dcmpeq>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d104      	bne.n	8005ea4 <__cvt+0x88>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ea6:	9a07      	ldr	r2, [sp, #28]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	18d3      	adds	r3, r2, r3
 8005eac:	9307      	str	r3, [sp, #28]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	0031      	movs	r1, r6
 8005eb6:	f7fa fac9 	bl	800044c <__aeabi_dcmpeq>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d001      	beq.n	8005ec2 <__cvt+0xa6>
 8005ebe:	9b07      	ldr	r3, [sp, #28]
 8005ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec2:	2230      	movs	r2, #48	; 0x30
 8005ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec6:	9907      	ldr	r1, [sp, #28]
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d306      	bcc.n	8005eda <__cvt+0xbe>
 8005ecc:	0028      	movs	r0, r5
 8005ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ed2:	1b5b      	subs	r3, r3, r5
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	b00b      	add	sp, #44	; 0x2c
 8005ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	9109      	str	r1, [sp, #36]	; 0x24
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	e7f0      	b.n	8005ec4 <__cvt+0xa8>

08005ee2 <__exponent>:
 8005ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee4:	1c83      	adds	r3, r0, #2
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	9303      	str	r3, [sp, #12]
 8005eea:	0005      	movs	r5, r0
 8005eec:	000c      	movs	r4, r1
 8005eee:	232b      	movs	r3, #43	; 0x2b
 8005ef0:	7002      	strb	r2, [r0, #0]
 8005ef2:	2900      	cmp	r1, #0
 8005ef4:	da01      	bge.n	8005efa <__exponent+0x18>
 8005ef6:	424c      	negs	r4, r1
 8005ef8:	3302      	adds	r3, #2
 8005efa:	706b      	strb	r3, [r5, #1]
 8005efc:	2c09      	cmp	r4, #9
 8005efe:	dd31      	ble.n	8005f64 <__exponent+0x82>
 8005f00:	270a      	movs	r7, #10
 8005f02:	ab04      	add	r3, sp, #16
 8005f04:	1dde      	adds	r6, r3, #7
 8005f06:	0020      	movs	r0, r4
 8005f08:	0039      	movs	r1, r7
 8005f0a:	9601      	str	r6, [sp, #4]
 8005f0c:	f7fa fa88 	bl	8000420 <__aeabi_idivmod>
 8005f10:	3e01      	subs	r6, #1
 8005f12:	3130      	adds	r1, #48	; 0x30
 8005f14:	0020      	movs	r0, r4
 8005f16:	7031      	strb	r1, [r6, #0]
 8005f18:	0039      	movs	r1, r7
 8005f1a:	9402      	str	r4, [sp, #8]
 8005f1c:	f7fa f99a 	bl	8000254 <__divsi3>
 8005f20:	9b02      	ldr	r3, [sp, #8]
 8005f22:	0004      	movs	r4, r0
 8005f24:	2b63      	cmp	r3, #99	; 0x63
 8005f26:	dcee      	bgt.n	8005f06 <__exponent+0x24>
 8005f28:	9b01      	ldr	r3, [sp, #4]
 8005f2a:	3430      	adds	r4, #48	; 0x30
 8005f2c:	1e9a      	subs	r2, r3, #2
 8005f2e:	0013      	movs	r3, r2
 8005f30:	9903      	ldr	r1, [sp, #12]
 8005f32:	7014      	strb	r4, [r2, #0]
 8005f34:	a804      	add	r0, sp, #16
 8005f36:	3007      	adds	r0, #7
 8005f38:	4298      	cmp	r0, r3
 8005f3a:	d80e      	bhi.n	8005f5a <__exponent+0x78>
 8005f3c:	ab04      	add	r3, sp, #16
 8005f3e:	3307      	adds	r3, #7
 8005f40:	2000      	movs	r0, #0
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d804      	bhi.n	8005f50 <__exponent+0x6e>
 8005f46:	ab04      	add	r3, sp, #16
 8005f48:	3009      	adds	r0, #9
 8005f4a:	18c0      	adds	r0, r0, r3
 8005f4c:	9b01      	ldr	r3, [sp, #4]
 8005f4e:	1ac0      	subs	r0, r0, r3
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	1818      	adds	r0, r3, r0
 8005f54:	1b40      	subs	r0, r0, r5
 8005f56:	b007      	add	sp, #28
 8005f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f5a:	7818      	ldrb	r0, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	7008      	strb	r0, [r1, #0]
 8005f60:	3101      	adds	r1, #1
 8005f62:	e7e7      	b.n	8005f34 <__exponent+0x52>
 8005f64:	2330      	movs	r3, #48	; 0x30
 8005f66:	18e4      	adds	r4, r4, r3
 8005f68:	70ab      	strb	r3, [r5, #2]
 8005f6a:	1d28      	adds	r0, r5, #4
 8005f6c:	70ec      	strb	r4, [r5, #3]
 8005f6e:	e7f1      	b.n	8005f54 <__exponent+0x72>

08005f70 <_printf_float>:
 8005f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f72:	b095      	sub	sp, #84	; 0x54
 8005f74:	000c      	movs	r4, r1
 8005f76:	9208      	str	r2, [sp, #32]
 8005f78:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7c:	0007      	movs	r7, r0
 8005f7e:	f002 fee5 	bl	8008d4c <_localeconv_r>
 8005f82:	6803      	ldr	r3, [r0, #0]
 8005f84:	0018      	movs	r0, r3
 8005f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f88:	f7fa f8be 	bl	8000108 <strlen>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9312      	str	r3, [sp, #72]	; 0x48
 8005f90:	7e23      	ldrb	r3, [r4, #24]
 8005f92:	2207      	movs	r2, #7
 8005f94:	001e      	movs	r6, r3
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	900d      	str	r0, [sp, #52]	; 0x34
 8005f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8005f9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f9e:	682b      	ldr	r3, [r5, #0]
 8005fa0:	05c9      	lsls	r1, r1, #23
 8005fa2:	d547      	bpl.n	8006034 <_printf_float+0xc4>
 8005fa4:	189b      	adds	r3, r3, r2
 8005fa6:	4393      	bics	r3, r2
 8005fa8:	001a      	movs	r2, r3
 8005faa:	3208      	adds	r2, #8
 8005fac:	602a      	str	r2, [r5, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	64a2      	str	r2, [r4, #72]	; 0x48
 8005fb4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005fba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8005fbe:	006b      	lsls	r3, r5, #1
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	930e      	str	r3, [sp, #56]	; 0x38
 8005fc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005fc6:	4ba8      	ldr	r3, [pc, #672]	; (8006268 <_printf_float+0x2f8>)
 8005fc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005fca:	4252      	negs	r2, r2
 8005fcc:	f7fc f84a 	bl	8002064 <__aeabi_dcmpun>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d131      	bne.n	8006038 <_printf_float+0xc8>
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	4ba4      	ldr	r3, [pc, #656]	; (8006268 <_printf_float+0x2f8>)
 8005fd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005fda:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005fdc:	4252      	negs	r2, r2
 8005fde:	f7fa fa45 	bl	800046c <__aeabi_dcmple>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d128      	bne.n	8006038 <_printf_float+0xc8>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2300      	movs	r3, #0
 8005fea:	0029      	movs	r1, r5
 8005fec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005fee:	f7fa fa33 	bl	8000458 <__aeabi_dcmplt>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d003      	beq.n	8005ffe <_printf_float+0x8e>
 8005ff6:	0023      	movs	r3, r4
 8005ff8:	222d      	movs	r2, #45	; 0x2d
 8005ffa:	3343      	adds	r3, #67	; 0x43
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	4d9b      	ldr	r5, [pc, #620]	; (800626c <_printf_float+0x2fc>)
 8006000:	2e47      	cmp	r6, #71	; 0x47
 8006002:	d900      	bls.n	8006006 <_printf_float+0x96>
 8006004:	4d9a      	ldr	r5, [pc, #616]	; (8006270 <_printf_float+0x300>)
 8006006:	2303      	movs	r3, #3
 8006008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800600a:	6123      	str	r3, [r4, #16]
 800600c:	3301      	adds	r3, #1
 800600e:	439a      	bics	r2, r3
 8006010:	2300      	movs	r3, #0
 8006012:	6022      	str	r2, [r4, #0]
 8006014:	930a      	str	r3, [sp, #40]	; 0x28
 8006016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006018:	0021      	movs	r1, r4
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	0038      	movs	r0, r7
 800601e:	9b08      	ldr	r3, [sp, #32]
 8006020:	aa13      	add	r2, sp, #76	; 0x4c
 8006022:	f000 f9f3 	bl	800640c <_printf_common>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	d000      	beq.n	800602c <_printf_float+0xbc>
 800602a:	e09e      	b.n	800616a <_printf_float+0x1fa>
 800602c:	2001      	movs	r0, #1
 800602e:	4240      	negs	r0, r0
 8006030:	b015      	add	sp, #84	; 0x54
 8006032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006034:	3307      	adds	r3, #7
 8006036:	e7b6      	b.n	8005fa6 <_printf_float+0x36>
 8006038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800603a:	002b      	movs	r3, r5
 800603c:	0010      	movs	r0, r2
 800603e:	0029      	movs	r1, r5
 8006040:	f7fc f810 	bl	8002064 <__aeabi_dcmpun>
 8006044:	2800      	cmp	r0, #0
 8006046:	d00a      	beq.n	800605e <_printf_float+0xee>
 8006048:	2d00      	cmp	r5, #0
 800604a:	da03      	bge.n	8006054 <_printf_float+0xe4>
 800604c:	0023      	movs	r3, r4
 800604e:	222d      	movs	r2, #45	; 0x2d
 8006050:	3343      	adds	r3, #67	; 0x43
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	4d87      	ldr	r5, [pc, #540]	; (8006274 <_printf_float+0x304>)
 8006056:	2e47      	cmp	r6, #71	; 0x47
 8006058:	d9d5      	bls.n	8006006 <_printf_float+0x96>
 800605a:	4d87      	ldr	r5, [pc, #540]	; (8006278 <_printf_float+0x308>)
 800605c:	e7d3      	b.n	8006006 <_printf_float+0x96>
 800605e:	2220      	movs	r2, #32
 8006060:	0031      	movs	r1, r6
 8006062:	6863      	ldr	r3, [r4, #4]
 8006064:	4391      	bics	r1, r2
 8006066:	910e      	str	r1, [sp, #56]	; 0x38
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	d147      	bne.n	80060fc <_printf_float+0x18c>
 800606c:	3307      	adds	r3, #7
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	4313      	orrs	r3, r2
 8006078:	2200      	movs	r2, #0
 800607a:	9206      	str	r2, [sp, #24]
 800607c:	aa12      	add	r2, sp, #72	; 0x48
 800607e:	9205      	str	r2, [sp, #20]
 8006080:	aa11      	add	r2, sp, #68	; 0x44
 8006082:	9203      	str	r2, [sp, #12]
 8006084:	2223      	movs	r2, #35	; 0x23
 8006086:	a908      	add	r1, sp, #32
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	1852      	adds	r2, r2, r1
 8006090:	9202      	str	r2, [sp, #8]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	0038      	movs	r0, r7
 8006096:	002b      	movs	r3, r5
 8006098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800609a:	9604      	str	r6, [sp, #16]
 800609c:	f7ff febe 	bl	8005e1c <__cvt>
 80060a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a2:	0005      	movs	r5, r0
 80060a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80060a6:	2b47      	cmp	r3, #71	; 0x47
 80060a8:	d108      	bne.n	80060bc <_printf_float+0x14c>
 80060aa:	1ccb      	adds	r3, r1, #3
 80060ac:	db02      	blt.n	80060b4 <_printf_float+0x144>
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	4299      	cmp	r1, r3
 80060b2:	dd46      	ble.n	8006142 <_printf_float+0x1d2>
 80060b4:	0033      	movs	r3, r6
 80060b6:	3b02      	subs	r3, #2
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	001e      	movs	r6, r3
 80060bc:	2e65      	cmp	r6, #101	; 0x65
 80060be:	d824      	bhi.n	800610a <_printf_float+0x19a>
 80060c0:	0020      	movs	r0, r4
 80060c2:	0032      	movs	r2, r6
 80060c4:	3901      	subs	r1, #1
 80060c6:	3050      	adds	r0, #80	; 0x50
 80060c8:	9111      	str	r1, [sp, #68]	; 0x44
 80060ca:	f7ff ff0a 	bl	8005ee2 <__exponent>
 80060ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060d0:	900a      	str	r0, [sp, #40]	; 0x28
 80060d2:	1813      	adds	r3, r2, r0
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	2a01      	cmp	r2, #1
 80060d8:	dc02      	bgt.n	80060e0 <_printf_float+0x170>
 80060da:	6822      	ldr	r2, [r4, #0]
 80060dc:	07d2      	lsls	r2, r2, #31
 80060de:	d501      	bpl.n	80060e4 <_printf_float+0x174>
 80060e0:	3301      	adds	r3, #1
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	2323      	movs	r3, #35	; 0x23
 80060e6:	aa08      	add	r2, sp, #32
 80060e8:	189b      	adds	r3, r3, r2
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d100      	bne.n	80060f2 <_printf_float+0x182>
 80060f0:	e791      	b.n	8006016 <_printf_float+0xa6>
 80060f2:	0023      	movs	r3, r4
 80060f4:	222d      	movs	r2, #45	; 0x2d
 80060f6:	3343      	adds	r3, #67	; 0x43
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	e78c      	b.n	8006016 <_printf_float+0xa6>
 80060fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060fe:	2a47      	cmp	r2, #71	; 0x47
 8006100:	d1b6      	bne.n	8006070 <_printf_float+0x100>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1b4      	bne.n	8006070 <_printf_float+0x100>
 8006106:	3301      	adds	r3, #1
 8006108:	e7b1      	b.n	800606e <_printf_float+0xfe>
 800610a:	2e66      	cmp	r6, #102	; 0x66
 800610c:	d11b      	bne.n	8006146 <_printf_float+0x1d6>
 800610e:	6863      	ldr	r3, [r4, #4]
 8006110:	2900      	cmp	r1, #0
 8006112:	dd0d      	ble.n	8006130 <_printf_float+0x1c0>
 8006114:	6121      	str	r1, [r4, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <_printf_float+0x1b0>
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	07d2      	lsls	r2, r2, #31
 800611e:	d502      	bpl.n	8006126 <_printf_float+0x1b6>
 8006120:	3301      	adds	r3, #1
 8006122:	1859      	adds	r1, r3, r1
 8006124:	6121      	str	r1, [r4, #16]
 8006126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006128:	65a3      	str	r3, [r4, #88]	; 0x58
 800612a:	2300      	movs	r3, #0
 800612c:	930a      	str	r3, [sp, #40]	; 0x28
 800612e:	e7d9      	b.n	80060e4 <_printf_float+0x174>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d103      	bne.n	800613c <_printf_float+0x1cc>
 8006134:	2201      	movs	r2, #1
 8006136:	6821      	ldr	r1, [r4, #0]
 8006138:	4211      	tst	r1, r2
 800613a:	d000      	beq.n	800613e <_printf_float+0x1ce>
 800613c:	1c9a      	adds	r2, r3, #2
 800613e:	6122      	str	r2, [r4, #16]
 8006140:	e7f1      	b.n	8006126 <_printf_float+0x1b6>
 8006142:	2367      	movs	r3, #103	; 0x67
 8006144:	001e      	movs	r6, r3
 8006146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006148:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800614a:	4293      	cmp	r3, r2
 800614c:	db06      	blt.n	800615c <_printf_float+0x1ec>
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	6123      	str	r3, [r4, #16]
 8006152:	07d2      	lsls	r2, r2, #31
 8006154:	d5e7      	bpl.n	8006126 <_printf_float+0x1b6>
 8006156:	3301      	adds	r3, #1
 8006158:	6123      	str	r3, [r4, #16]
 800615a:	e7e4      	b.n	8006126 <_printf_float+0x1b6>
 800615c:	2101      	movs	r1, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	dc01      	bgt.n	8006166 <_printf_float+0x1f6>
 8006162:	1849      	adds	r1, r1, r1
 8006164:	1ac9      	subs	r1, r1, r3
 8006166:	1852      	adds	r2, r2, r1
 8006168:	e7e9      	b.n	800613e <_printf_float+0x1ce>
 800616a:	6822      	ldr	r2, [r4, #0]
 800616c:	0553      	lsls	r3, r2, #21
 800616e:	d408      	bmi.n	8006182 <_printf_float+0x212>
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	002a      	movs	r2, r5
 8006174:	0038      	movs	r0, r7
 8006176:	9908      	ldr	r1, [sp, #32]
 8006178:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800617a:	47a8      	blx	r5
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d129      	bne.n	80061d4 <_printf_float+0x264>
 8006180:	e754      	b.n	800602c <_printf_float+0xbc>
 8006182:	2e65      	cmp	r6, #101	; 0x65
 8006184:	d800      	bhi.n	8006188 <_printf_float+0x218>
 8006186:	e0ec      	b.n	8006362 <_printf_float+0x3f2>
 8006188:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800618a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800618c:	2200      	movs	r2, #0
 800618e:	2300      	movs	r3, #0
 8006190:	f7fa f95c 	bl	800044c <__aeabi_dcmpeq>
 8006194:	2800      	cmp	r0, #0
 8006196:	d034      	beq.n	8006202 <_printf_float+0x292>
 8006198:	2301      	movs	r3, #1
 800619a:	0038      	movs	r0, r7
 800619c:	4a37      	ldr	r2, [pc, #220]	; (800627c <_printf_float+0x30c>)
 800619e:	9908      	ldr	r1, [sp, #32]
 80061a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80061a2:	47a8      	blx	r5
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d100      	bne.n	80061aa <_printf_float+0x23a>
 80061a8:	e740      	b.n	800602c <_printf_float+0xbc>
 80061aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061ae:	4293      	cmp	r3, r2
 80061b0:	db02      	blt.n	80061b8 <_printf_float+0x248>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	07db      	lsls	r3, r3, #31
 80061b6:	d50d      	bpl.n	80061d4 <_printf_float+0x264>
 80061b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80061ba:	0038      	movs	r0, r7
 80061bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061c0:	9908      	ldr	r1, [sp, #32]
 80061c2:	47a8      	blx	r5
 80061c4:	2500      	movs	r5, #0
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	d100      	bne.n	80061cc <_printf_float+0x25c>
 80061ca:	e72f      	b.n	800602c <_printf_float+0xbc>
 80061cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061ce:	3b01      	subs	r3, #1
 80061d0:	42ab      	cmp	r3, r5
 80061d2:	dc0a      	bgt.n	80061ea <_printf_float+0x27a>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	079b      	lsls	r3, r3, #30
 80061d8:	d500      	bpl.n	80061dc <_printf_float+0x26c>
 80061da:	e114      	b.n	8006406 <_printf_float+0x496>
 80061dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061de:	68e0      	ldr	r0, [r4, #12]
 80061e0:	4298      	cmp	r0, r3
 80061e2:	db00      	blt.n	80061e6 <_printf_float+0x276>
 80061e4:	e724      	b.n	8006030 <_printf_float+0xc0>
 80061e6:	0018      	movs	r0, r3
 80061e8:	e722      	b.n	8006030 <_printf_float+0xc0>
 80061ea:	0022      	movs	r2, r4
 80061ec:	2301      	movs	r3, #1
 80061ee:	0038      	movs	r0, r7
 80061f0:	9908      	ldr	r1, [sp, #32]
 80061f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80061f4:	321a      	adds	r2, #26
 80061f6:	47b0      	blx	r6
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d100      	bne.n	80061fe <_printf_float+0x28e>
 80061fc:	e716      	b.n	800602c <_printf_float+0xbc>
 80061fe:	3501      	adds	r5, #1
 8006200:	e7e4      	b.n	80061cc <_printf_float+0x25c>
 8006202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006204:	2b00      	cmp	r3, #0
 8006206:	dc3b      	bgt.n	8006280 <_printf_float+0x310>
 8006208:	2301      	movs	r3, #1
 800620a:	0038      	movs	r0, r7
 800620c:	4a1b      	ldr	r2, [pc, #108]	; (800627c <_printf_float+0x30c>)
 800620e:	9908      	ldr	r1, [sp, #32]
 8006210:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006212:	47b0      	blx	r6
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d100      	bne.n	800621a <_printf_float+0x2aa>
 8006218:	e708      	b.n	800602c <_printf_float+0xbc>
 800621a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800621c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800621e:	4313      	orrs	r3, r2
 8006220:	d102      	bne.n	8006228 <_printf_float+0x2b8>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	07db      	lsls	r3, r3, #31
 8006226:	d5d5      	bpl.n	80061d4 <_printf_float+0x264>
 8006228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800622a:	0038      	movs	r0, r7
 800622c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800622e:	9908      	ldr	r1, [sp, #32]
 8006230:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006232:	47b0      	blx	r6
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d100      	bne.n	800623a <_printf_float+0x2ca>
 8006238:	e6f8      	b.n	800602c <_printf_float+0xbc>
 800623a:	2300      	movs	r3, #0
 800623c:	930a      	str	r3, [sp, #40]	; 0x28
 800623e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006242:	425b      	negs	r3, r3
 8006244:	4293      	cmp	r3, r2
 8006246:	dc01      	bgt.n	800624c <_printf_float+0x2dc>
 8006248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800624a:	e792      	b.n	8006172 <_printf_float+0x202>
 800624c:	0022      	movs	r2, r4
 800624e:	2301      	movs	r3, #1
 8006250:	0038      	movs	r0, r7
 8006252:	9908      	ldr	r1, [sp, #32]
 8006254:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006256:	321a      	adds	r2, #26
 8006258:	47b0      	blx	r6
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	d100      	bne.n	8006260 <_printf_float+0x2f0>
 800625e:	e6e5      	b.n	800602c <_printf_float+0xbc>
 8006260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006262:	3301      	adds	r3, #1
 8006264:	e7ea      	b.n	800623c <_printf_float+0x2cc>
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	7fefffff 	.word	0x7fefffff
 800626c:	0800a8f4 	.word	0x0800a8f4
 8006270:	0800a8f8 	.word	0x0800a8f8
 8006274:	0800a8fc 	.word	0x0800a8fc
 8006278:	0800a900 	.word	0x0800a900
 800627c:	0800a904 	.word	0x0800a904
 8006280:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006284:	920a      	str	r2, [sp, #40]	; 0x28
 8006286:	429a      	cmp	r2, r3
 8006288:	dd00      	ble.n	800628c <_printf_float+0x31c>
 800628a:	930a      	str	r3, [sp, #40]	; 0x28
 800628c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	dc3d      	bgt.n	800630e <_printf_float+0x39e>
 8006292:	2300      	movs	r3, #0
 8006294:	930e      	str	r3, [sp, #56]	; 0x38
 8006296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006298:	43db      	mvns	r3, r3
 800629a:	17db      	asrs	r3, r3, #31
 800629c:	930f      	str	r3, [sp, #60]	; 0x3c
 800629e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062a2:	930c      	str	r3, [sp, #48]	; 0x30
 80062a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a6:	4013      	ands	r3, r2
 80062a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062ae:	4293      	cmp	r3, r2
 80062b0:	dc36      	bgt.n	8006320 <_printf_float+0x3b0>
 80062b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062b6:	4293      	cmp	r3, r2
 80062b8:	db40      	blt.n	800633c <_printf_float+0x3cc>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	07db      	lsls	r3, r3, #31
 80062be:	d43d      	bmi.n	800633c <_printf_float+0x3cc>
 80062c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	1a52      	subs	r2, r2, r1
 80062ca:	920a      	str	r2, [sp, #40]	; 0x28
 80062cc:	429a      	cmp	r2, r3
 80062ce:	dd00      	ble.n	80062d2 <_printf_float+0x362>
 80062d0:	930a      	str	r3, [sp, #40]	; 0x28
 80062d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dc3a      	bgt.n	800634e <_printf_float+0x3de>
 80062d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062da:	2500      	movs	r5, #0
 80062dc:	43db      	mvns	r3, r3
 80062de:	17db      	asrs	r3, r3, #31
 80062e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ec:	400a      	ands	r2, r1
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dc00      	bgt.n	80062f6 <_printf_float+0x386>
 80062f4:	e76e      	b.n	80061d4 <_printf_float+0x264>
 80062f6:	0022      	movs	r2, r4
 80062f8:	2301      	movs	r3, #1
 80062fa:	0038      	movs	r0, r7
 80062fc:	9908      	ldr	r1, [sp, #32]
 80062fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006300:	321a      	adds	r2, #26
 8006302:	47b0      	blx	r6
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d100      	bne.n	800630a <_printf_float+0x39a>
 8006308:	e690      	b.n	800602c <_printf_float+0xbc>
 800630a:	3501      	adds	r5, #1
 800630c:	e7e9      	b.n	80062e2 <_printf_float+0x372>
 800630e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006310:	002a      	movs	r2, r5
 8006312:	0038      	movs	r0, r7
 8006314:	9908      	ldr	r1, [sp, #32]
 8006316:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006318:	47b0      	blx	r6
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d1b9      	bne.n	8006292 <_printf_float+0x322>
 800631e:	e685      	b.n	800602c <_printf_float+0xbc>
 8006320:	0022      	movs	r2, r4
 8006322:	2301      	movs	r3, #1
 8006324:	0038      	movs	r0, r7
 8006326:	9908      	ldr	r1, [sp, #32]
 8006328:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800632a:	321a      	adds	r2, #26
 800632c:	47b0      	blx	r6
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	d100      	bne.n	8006334 <_printf_float+0x3c4>
 8006332:	e67b      	b.n	800602c <_printf_float+0xbc>
 8006334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006336:	3301      	adds	r3, #1
 8006338:	930e      	str	r3, [sp, #56]	; 0x38
 800633a:	e7b0      	b.n	800629e <_printf_float+0x32e>
 800633c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800633e:	0038      	movs	r0, r7
 8006340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006342:	9908      	ldr	r1, [sp, #32]
 8006344:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006346:	47b0      	blx	r6
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d1b9      	bne.n	80062c0 <_printf_float+0x350>
 800634c:	e66e      	b.n	800602c <_printf_float+0xbc>
 800634e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006350:	0038      	movs	r0, r7
 8006352:	18ea      	adds	r2, r5, r3
 8006354:	9908      	ldr	r1, [sp, #32]
 8006356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006358:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800635a:	47a8      	blx	r5
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d1bb      	bne.n	80062d8 <_printf_float+0x368>
 8006360:	e664      	b.n	800602c <_printf_float+0xbc>
 8006362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006364:	2b01      	cmp	r3, #1
 8006366:	dc02      	bgt.n	800636e <_printf_float+0x3fe>
 8006368:	2301      	movs	r3, #1
 800636a:	421a      	tst	r2, r3
 800636c:	d038      	beq.n	80063e0 <_printf_float+0x470>
 800636e:	2301      	movs	r3, #1
 8006370:	002a      	movs	r2, r5
 8006372:	0038      	movs	r0, r7
 8006374:	9908      	ldr	r1, [sp, #32]
 8006376:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006378:	47b0      	blx	r6
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	d100      	bne.n	8006380 <_printf_float+0x410>
 800637e:	e655      	b.n	800602c <_printf_float+0xbc>
 8006380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006382:	0038      	movs	r0, r7
 8006384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006386:	9908      	ldr	r1, [sp, #32]
 8006388:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800638a:	47b0      	blx	r6
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d100      	bne.n	8006392 <_printf_float+0x422>
 8006390:	e64c      	b.n	800602c <_printf_float+0xbc>
 8006392:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006394:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006396:	2200      	movs	r2, #0
 8006398:	2300      	movs	r3, #0
 800639a:	f7fa f857 	bl	800044c <__aeabi_dcmpeq>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d11c      	bne.n	80063dc <_printf_float+0x46c>
 80063a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063a4:	1c6a      	adds	r2, r5, #1
 80063a6:	3b01      	subs	r3, #1
 80063a8:	0038      	movs	r0, r7
 80063aa:	9908      	ldr	r1, [sp, #32]
 80063ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063ae:	47a8      	blx	r5
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d10f      	bne.n	80063d4 <_printf_float+0x464>
 80063b4:	e63a      	b.n	800602c <_printf_float+0xbc>
 80063b6:	0022      	movs	r2, r4
 80063b8:	2301      	movs	r3, #1
 80063ba:	0038      	movs	r0, r7
 80063bc:	9908      	ldr	r1, [sp, #32]
 80063be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80063c0:	321a      	adds	r2, #26
 80063c2:	47b0      	blx	r6
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d100      	bne.n	80063ca <_printf_float+0x45a>
 80063c8:	e630      	b.n	800602c <_printf_float+0xbc>
 80063ca:	3501      	adds	r5, #1
 80063cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063ce:	3b01      	subs	r3, #1
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dcf0      	bgt.n	80063b6 <_printf_float+0x446>
 80063d4:	0022      	movs	r2, r4
 80063d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d8:	3250      	adds	r2, #80	; 0x50
 80063da:	e6cb      	b.n	8006174 <_printf_float+0x204>
 80063dc:	2500      	movs	r5, #0
 80063de:	e7f5      	b.n	80063cc <_printf_float+0x45c>
 80063e0:	002a      	movs	r2, r5
 80063e2:	e7e1      	b.n	80063a8 <_printf_float+0x438>
 80063e4:	0022      	movs	r2, r4
 80063e6:	2301      	movs	r3, #1
 80063e8:	0038      	movs	r0, r7
 80063ea:	9908      	ldr	r1, [sp, #32]
 80063ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80063ee:	3219      	adds	r2, #25
 80063f0:	47b0      	blx	r6
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	d100      	bne.n	80063f8 <_printf_float+0x488>
 80063f6:	e619      	b.n	800602c <_printf_float+0xbc>
 80063f8:	3501      	adds	r5, #1
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	42ab      	cmp	r3, r5
 8006402:	dcef      	bgt.n	80063e4 <_printf_float+0x474>
 8006404:	e6ea      	b.n	80061dc <_printf_float+0x26c>
 8006406:	2500      	movs	r5, #0
 8006408:	e7f7      	b.n	80063fa <_printf_float+0x48a>
 800640a:	46c0      	nop			; (mov r8, r8)

0800640c <_printf_common>:
 800640c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640e:	0015      	movs	r5, r2
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	688a      	ldr	r2, [r1, #8]
 8006414:	690b      	ldr	r3, [r1, #16]
 8006416:	000c      	movs	r4, r1
 8006418:	9000      	str	r0, [sp, #0]
 800641a:	4293      	cmp	r3, r2
 800641c:	da00      	bge.n	8006420 <_printf_common+0x14>
 800641e:	0013      	movs	r3, r2
 8006420:	0022      	movs	r2, r4
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	3243      	adds	r2, #67	; 0x43
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	2a00      	cmp	r2, #0
 800642a:	d001      	beq.n	8006430 <_printf_common+0x24>
 800642c:	3301      	adds	r3, #1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	069b      	lsls	r3, r3, #26
 8006434:	d502      	bpl.n	800643c <_printf_common+0x30>
 8006436:	682b      	ldr	r3, [r5, #0]
 8006438:	3302      	adds	r3, #2
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	6822      	ldr	r2, [r4, #0]
 800643e:	2306      	movs	r3, #6
 8006440:	0017      	movs	r7, r2
 8006442:	401f      	ands	r7, r3
 8006444:	421a      	tst	r2, r3
 8006446:	d027      	beq.n	8006498 <_printf_common+0x8c>
 8006448:	0023      	movs	r3, r4
 800644a:	3343      	adds	r3, #67	; 0x43
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	1e5a      	subs	r2, r3, #1
 8006450:	4193      	sbcs	r3, r2
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	0692      	lsls	r2, r2, #26
 8006456:	d430      	bmi.n	80064ba <_printf_common+0xae>
 8006458:	0022      	movs	r2, r4
 800645a:	9901      	ldr	r1, [sp, #4]
 800645c:	9800      	ldr	r0, [sp, #0]
 800645e:	9e08      	ldr	r6, [sp, #32]
 8006460:	3243      	adds	r2, #67	; 0x43
 8006462:	47b0      	blx	r6
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d025      	beq.n	80064b4 <_printf_common+0xa8>
 8006468:	2306      	movs	r3, #6
 800646a:	6820      	ldr	r0, [r4, #0]
 800646c:	682a      	ldr	r2, [r5, #0]
 800646e:	68e1      	ldr	r1, [r4, #12]
 8006470:	2500      	movs	r5, #0
 8006472:	4003      	ands	r3, r0
 8006474:	2b04      	cmp	r3, #4
 8006476:	d103      	bne.n	8006480 <_printf_common+0x74>
 8006478:	1a8d      	subs	r5, r1, r2
 800647a:	43eb      	mvns	r3, r5
 800647c:	17db      	asrs	r3, r3, #31
 800647e:	401d      	ands	r5, r3
 8006480:	68a3      	ldr	r3, [r4, #8]
 8006482:	6922      	ldr	r2, [r4, #16]
 8006484:	4293      	cmp	r3, r2
 8006486:	dd01      	ble.n	800648c <_printf_common+0x80>
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	18ed      	adds	r5, r5, r3
 800648c:	2700      	movs	r7, #0
 800648e:	42bd      	cmp	r5, r7
 8006490:	d120      	bne.n	80064d4 <_printf_common+0xc8>
 8006492:	2000      	movs	r0, #0
 8006494:	e010      	b.n	80064b8 <_printf_common+0xac>
 8006496:	3701      	adds	r7, #1
 8006498:	68e3      	ldr	r3, [r4, #12]
 800649a:	682a      	ldr	r2, [r5, #0]
 800649c:	1a9b      	subs	r3, r3, r2
 800649e:	42bb      	cmp	r3, r7
 80064a0:	ddd2      	ble.n	8006448 <_printf_common+0x3c>
 80064a2:	0022      	movs	r2, r4
 80064a4:	2301      	movs	r3, #1
 80064a6:	9901      	ldr	r1, [sp, #4]
 80064a8:	9800      	ldr	r0, [sp, #0]
 80064aa:	9e08      	ldr	r6, [sp, #32]
 80064ac:	3219      	adds	r2, #25
 80064ae:	47b0      	blx	r6
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d1f0      	bne.n	8006496 <_printf_common+0x8a>
 80064b4:	2001      	movs	r0, #1
 80064b6:	4240      	negs	r0, r0
 80064b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064ba:	2030      	movs	r0, #48	; 0x30
 80064bc:	18e1      	adds	r1, r4, r3
 80064be:	3143      	adds	r1, #67	; 0x43
 80064c0:	7008      	strb	r0, [r1, #0]
 80064c2:	0021      	movs	r1, r4
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	3145      	adds	r1, #69	; 0x45
 80064c8:	7809      	ldrb	r1, [r1, #0]
 80064ca:	18a2      	adds	r2, r4, r2
 80064cc:	3243      	adds	r2, #67	; 0x43
 80064ce:	3302      	adds	r3, #2
 80064d0:	7011      	strb	r1, [r2, #0]
 80064d2:	e7c1      	b.n	8006458 <_printf_common+0x4c>
 80064d4:	0022      	movs	r2, r4
 80064d6:	2301      	movs	r3, #1
 80064d8:	9901      	ldr	r1, [sp, #4]
 80064da:	9800      	ldr	r0, [sp, #0]
 80064dc:	9e08      	ldr	r6, [sp, #32]
 80064de:	321a      	adds	r2, #26
 80064e0:	47b0      	blx	r6
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	d0e6      	beq.n	80064b4 <_printf_common+0xa8>
 80064e6:	3701      	adds	r7, #1
 80064e8:	e7d1      	b.n	800648e <_printf_common+0x82>
	...

080064ec <_printf_i>:
 80064ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ee:	b08b      	sub	sp, #44	; 0x2c
 80064f0:	9206      	str	r2, [sp, #24]
 80064f2:	000a      	movs	r2, r1
 80064f4:	3243      	adds	r2, #67	; 0x43
 80064f6:	9307      	str	r3, [sp, #28]
 80064f8:	9005      	str	r0, [sp, #20]
 80064fa:	9204      	str	r2, [sp, #16]
 80064fc:	7e0a      	ldrb	r2, [r1, #24]
 80064fe:	000c      	movs	r4, r1
 8006500:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006502:	2a78      	cmp	r2, #120	; 0x78
 8006504:	d806      	bhi.n	8006514 <_printf_i+0x28>
 8006506:	2a62      	cmp	r2, #98	; 0x62
 8006508:	d808      	bhi.n	800651c <_printf_i+0x30>
 800650a:	2a00      	cmp	r2, #0
 800650c:	d100      	bne.n	8006510 <_printf_i+0x24>
 800650e:	e0c0      	b.n	8006692 <_printf_i+0x1a6>
 8006510:	2a58      	cmp	r2, #88	; 0x58
 8006512:	d052      	beq.n	80065ba <_printf_i+0xce>
 8006514:	0026      	movs	r6, r4
 8006516:	3642      	adds	r6, #66	; 0x42
 8006518:	7032      	strb	r2, [r6, #0]
 800651a:	e022      	b.n	8006562 <_printf_i+0x76>
 800651c:	0010      	movs	r0, r2
 800651e:	3863      	subs	r0, #99	; 0x63
 8006520:	2815      	cmp	r0, #21
 8006522:	d8f7      	bhi.n	8006514 <_printf_i+0x28>
 8006524:	f7f9 fe02 	bl	800012c <__gnu_thumb1_case_shi>
 8006528:	001f0016 	.word	0x001f0016
 800652c:	fff6fff6 	.word	0xfff6fff6
 8006530:	fff6fff6 	.word	0xfff6fff6
 8006534:	fff6001f 	.word	0xfff6001f
 8006538:	fff6fff6 	.word	0xfff6fff6
 800653c:	00a8fff6 	.word	0x00a8fff6
 8006540:	009a0036 	.word	0x009a0036
 8006544:	fff6fff6 	.word	0xfff6fff6
 8006548:	fff600b9 	.word	0xfff600b9
 800654c:	fff60036 	.word	0xfff60036
 8006550:	009efff6 	.word	0x009efff6
 8006554:	0026      	movs	r6, r4
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	3642      	adds	r6, #66	; 0x42
 800655a:	1d11      	adds	r1, r2, #4
 800655c:	6019      	str	r1, [r3, #0]
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	7033      	strb	r3, [r6, #0]
 8006562:	2301      	movs	r3, #1
 8006564:	e0a7      	b.n	80066b6 <_printf_i+0x1ca>
 8006566:	6808      	ldr	r0, [r1, #0]
 8006568:	6819      	ldr	r1, [r3, #0]
 800656a:	1d0a      	adds	r2, r1, #4
 800656c:	0605      	lsls	r5, r0, #24
 800656e:	d50b      	bpl.n	8006588 <_printf_i+0x9c>
 8006570:	680d      	ldr	r5, [r1, #0]
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	2d00      	cmp	r5, #0
 8006576:	da03      	bge.n	8006580 <_printf_i+0x94>
 8006578:	232d      	movs	r3, #45	; 0x2d
 800657a:	9a04      	ldr	r2, [sp, #16]
 800657c:	426d      	negs	r5, r5
 800657e:	7013      	strb	r3, [r2, #0]
 8006580:	4b61      	ldr	r3, [pc, #388]	; (8006708 <_printf_i+0x21c>)
 8006582:	270a      	movs	r7, #10
 8006584:	9303      	str	r3, [sp, #12]
 8006586:	e032      	b.n	80065ee <_printf_i+0x102>
 8006588:	680d      	ldr	r5, [r1, #0]
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	0641      	lsls	r1, r0, #25
 800658e:	d5f1      	bpl.n	8006574 <_printf_i+0x88>
 8006590:	b22d      	sxth	r5, r5
 8006592:	e7ef      	b.n	8006574 <_printf_i+0x88>
 8006594:	680d      	ldr	r5, [r1, #0]
 8006596:	6819      	ldr	r1, [r3, #0]
 8006598:	1d08      	adds	r0, r1, #4
 800659a:	6018      	str	r0, [r3, #0]
 800659c:	062e      	lsls	r6, r5, #24
 800659e:	d501      	bpl.n	80065a4 <_printf_i+0xb8>
 80065a0:	680d      	ldr	r5, [r1, #0]
 80065a2:	e003      	b.n	80065ac <_printf_i+0xc0>
 80065a4:	066d      	lsls	r5, r5, #25
 80065a6:	d5fb      	bpl.n	80065a0 <_printf_i+0xb4>
 80065a8:	680d      	ldr	r5, [r1, #0]
 80065aa:	b2ad      	uxth	r5, r5
 80065ac:	4b56      	ldr	r3, [pc, #344]	; (8006708 <_printf_i+0x21c>)
 80065ae:	270a      	movs	r7, #10
 80065b0:	9303      	str	r3, [sp, #12]
 80065b2:	2a6f      	cmp	r2, #111	; 0x6f
 80065b4:	d117      	bne.n	80065e6 <_printf_i+0xfa>
 80065b6:	2708      	movs	r7, #8
 80065b8:	e015      	b.n	80065e6 <_printf_i+0xfa>
 80065ba:	3145      	adds	r1, #69	; 0x45
 80065bc:	700a      	strb	r2, [r1, #0]
 80065be:	4a52      	ldr	r2, [pc, #328]	; (8006708 <_printf_i+0x21c>)
 80065c0:	9203      	str	r2, [sp, #12]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	6821      	ldr	r1, [r4, #0]
 80065c6:	ca20      	ldmia	r2!, {r5}
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	0608      	lsls	r0, r1, #24
 80065cc:	d550      	bpl.n	8006670 <_printf_i+0x184>
 80065ce:	07cb      	lsls	r3, r1, #31
 80065d0:	d502      	bpl.n	80065d8 <_printf_i+0xec>
 80065d2:	2320      	movs	r3, #32
 80065d4:	4319      	orrs	r1, r3
 80065d6:	6021      	str	r1, [r4, #0]
 80065d8:	2710      	movs	r7, #16
 80065da:	2d00      	cmp	r5, #0
 80065dc:	d103      	bne.n	80065e6 <_printf_i+0xfa>
 80065de:	2320      	movs	r3, #32
 80065e0:	6822      	ldr	r2, [r4, #0]
 80065e2:	439a      	bics	r2, r3
 80065e4:	6022      	str	r2, [r4, #0]
 80065e6:	0023      	movs	r3, r4
 80065e8:	2200      	movs	r2, #0
 80065ea:	3343      	adds	r3, #67	; 0x43
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	60a3      	str	r3, [r4, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	db03      	blt.n	80065fe <_printf_i+0x112>
 80065f6:	2204      	movs	r2, #4
 80065f8:	6821      	ldr	r1, [r4, #0]
 80065fa:	4391      	bics	r1, r2
 80065fc:	6021      	str	r1, [r4, #0]
 80065fe:	2d00      	cmp	r5, #0
 8006600:	d102      	bne.n	8006608 <_printf_i+0x11c>
 8006602:	9e04      	ldr	r6, [sp, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00c      	beq.n	8006622 <_printf_i+0x136>
 8006608:	9e04      	ldr	r6, [sp, #16]
 800660a:	0028      	movs	r0, r5
 800660c:	0039      	movs	r1, r7
 800660e:	f7f9 fe1d 	bl	800024c <__aeabi_uidivmod>
 8006612:	9b03      	ldr	r3, [sp, #12]
 8006614:	3e01      	subs	r6, #1
 8006616:	5c5b      	ldrb	r3, [r3, r1]
 8006618:	7033      	strb	r3, [r6, #0]
 800661a:	002b      	movs	r3, r5
 800661c:	0005      	movs	r5, r0
 800661e:	429f      	cmp	r7, r3
 8006620:	d9f3      	bls.n	800660a <_printf_i+0x11e>
 8006622:	2f08      	cmp	r7, #8
 8006624:	d109      	bne.n	800663a <_printf_i+0x14e>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	07db      	lsls	r3, r3, #31
 800662a:	d506      	bpl.n	800663a <_printf_i+0x14e>
 800662c:	6863      	ldr	r3, [r4, #4]
 800662e:	6922      	ldr	r2, [r4, #16]
 8006630:	4293      	cmp	r3, r2
 8006632:	dc02      	bgt.n	800663a <_printf_i+0x14e>
 8006634:	2330      	movs	r3, #48	; 0x30
 8006636:	3e01      	subs	r6, #1
 8006638:	7033      	strb	r3, [r6, #0]
 800663a:	9b04      	ldr	r3, [sp, #16]
 800663c:	1b9b      	subs	r3, r3, r6
 800663e:	6123      	str	r3, [r4, #16]
 8006640:	9b07      	ldr	r3, [sp, #28]
 8006642:	0021      	movs	r1, r4
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	9805      	ldr	r0, [sp, #20]
 8006648:	9b06      	ldr	r3, [sp, #24]
 800664a:	aa09      	add	r2, sp, #36	; 0x24
 800664c:	f7ff fede 	bl	800640c <_printf_common>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d135      	bne.n	80066c0 <_printf_i+0x1d4>
 8006654:	2001      	movs	r0, #1
 8006656:	4240      	negs	r0, r0
 8006658:	b00b      	add	sp, #44	; 0x2c
 800665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665c:	2220      	movs	r2, #32
 800665e:	6809      	ldr	r1, [r1, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	6022      	str	r2, [r4, #0]
 8006664:	0022      	movs	r2, r4
 8006666:	2178      	movs	r1, #120	; 0x78
 8006668:	3245      	adds	r2, #69	; 0x45
 800666a:	7011      	strb	r1, [r2, #0]
 800666c:	4a27      	ldr	r2, [pc, #156]	; (800670c <_printf_i+0x220>)
 800666e:	e7a7      	b.n	80065c0 <_printf_i+0xd4>
 8006670:	0648      	lsls	r0, r1, #25
 8006672:	d5ac      	bpl.n	80065ce <_printf_i+0xe2>
 8006674:	b2ad      	uxth	r5, r5
 8006676:	e7aa      	b.n	80065ce <_printf_i+0xe2>
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	680d      	ldr	r5, [r1, #0]
 800667c:	1d10      	adds	r0, r2, #4
 800667e:	6949      	ldr	r1, [r1, #20]
 8006680:	6018      	str	r0, [r3, #0]
 8006682:	6813      	ldr	r3, [r2, #0]
 8006684:	062e      	lsls	r6, r5, #24
 8006686:	d501      	bpl.n	800668c <_printf_i+0x1a0>
 8006688:	6019      	str	r1, [r3, #0]
 800668a:	e002      	b.n	8006692 <_printf_i+0x1a6>
 800668c:	066d      	lsls	r5, r5, #25
 800668e:	d5fb      	bpl.n	8006688 <_printf_i+0x19c>
 8006690:	8019      	strh	r1, [r3, #0]
 8006692:	2300      	movs	r3, #0
 8006694:	9e04      	ldr	r6, [sp, #16]
 8006696:	6123      	str	r3, [r4, #16]
 8006698:	e7d2      	b.n	8006640 <_printf_i+0x154>
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	1d11      	adds	r1, r2, #4
 800669e:	6019      	str	r1, [r3, #0]
 80066a0:	6816      	ldr	r6, [r2, #0]
 80066a2:	2100      	movs	r1, #0
 80066a4:	0030      	movs	r0, r6
 80066a6:	6862      	ldr	r2, [r4, #4]
 80066a8:	f002 fb70 	bl	8008d8c <memchr>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d001      	beq.n	80066b4 <_printf_i+0x1c8>
 80066b0:	1b80      	subs	r0, r0, r6
 80066b2:	6060      	str	r0, [r4, #4]
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	2300      	movs	r3, #0
 80066ba:	9a04      	ldr	r2, [sp, #16]
 80066bc:	7013      	strb	r3, [r2, #0]
 80066be:	e7bf      	b.n	8006640 <_printf_i+0x154>
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	0032      	movs	r2, r6
 80066c4:	9906      	ldr	r1, [sp, #24]
 80066c6:	9805      	ldr	r0, [sp, #20]
 80066c8:	9d07      	ldr	r5, [sp, #28]
 80066ca:	47a8      	blx	r5
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d0c1      	beq.n	8006654 <_printf_i+0x168>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	079b      	lsls	r3, r3, #30
 80066d4:	d415      	bmi.n	8006702 <_printf_i+0x216>
 80066d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d8:	68e0      	ldr	r0, [r4, #12]
 80066da:	4298      	cmp	r0, r3
 80066dc:	dabc      	bge.n	8006658 <_printf_i+0x16c>
 80066de:	0018      	movs	r0, r3
 80066e0:	e7ba      	b.n	8006658 <_printf_i+0x16c>
 80066e2:	0022      	movs	r2, r4
 80066e4:	2301      	movs	r3, #1
 80066e6:	9906      	ldr	r1, [sp, #24]
 80066e8:	9805      	ldr	r0, [sp, #20]
 80066ea:	9e07      	ldr	r6, [sp, #28]
 80066ec:	3219      	adds	r2, #25
 80066ee:	47b0      	blx	r6
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d0af      	beq.n	8006654 <_printf_i+0x168>
 80066f4:	3501      	adds	r5, #1
 80066f6:	68e3      	ldr	r3, [r4, #12]
 80066f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	dcf0      	bgt.n	80066e2 <_printf_i+0x1f6>
 8006700:	e7e9      	b.n	80066d6 <_printf_i+0x1ea>
 8006702:	2500      	movs	r5, #0
 8006704:	e7f7      	b.n	80066f6 <_printf_i+0x20a>
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	0800a906 	.word	0x0800a906
 800670c:	0800a917 	.word	0x0800a917

08006710 <_scanf_float>:
 8006710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006712:	b08b      	sub	sp, #44	; 0x2c
 8006714:	0015      	movs	r5, r2
 8006716:	9001      	str	r0, [sp, #4]
 8006718:	22ae      	movs	r2, #174	; 0xae
 800671a:	2000      	movs	r0, #0
 800671c:	9306      	str	r3, [sp, #24]
 800671e:	688b      	ldr	r3, [r1, #8]
 8006720:	000e      	movs	r6, r1
 8006722:	1e59      	subs	r1, r3, #1
 8006724:	0052      	lsls	r2, r2, #1
 8006726:	9005      	str	r0, [sp, #20]
 8006728:	4291      	cmp	r1, r2
 800672a:	d905      	bls.n	8006738 <_scanf_float+0x28>
 800672c:	3b5e      	subs	r3, #94	; 0x5e
 800672e:	3bff      	subs	r3, #255	; 0xff
 8006730:	9305      	str	r3, [sp, #20]
 8006732:	235e      	movs	r3, #94	; 0x5e
 8006734:	33ff      	adds	r3, #255	; 0xff
 8006736:	60b3      	str	r3, [r6, #8]
 8006738:	23f0      	movs	r3, #240	; 0xf0
 800673a:	6832      	ldr	r2, [r6, #0]
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4313      	orrs	r3, r2
 8006740:	6033      	str	r3, [r6, #0]
 8006742:	0033      	movs	r3, r6
 8006744:	2400      	movs	r4, #0
 8006746:	331c      	adds	r3, #28
 8006748:	001f      	movs	r7, r3
 800674a:	9303      	str	r3, [sp, #12]
 800674c:	9402      	str	r4, [sp, #8]
 800674e:	9408      	str	r4, [sp, #32]
 8006750:	9407      	str	r4, [sp, #28]
 8006752:	9400      	str	r4, [sp, #0]
 8006754:	9404      	str	r4, [sp, #16]
 8006756:	68b2      	ldr	r2, [r6, #8]
 8006758:	2a00      	cmp	r2, #0
 800675a:	d00a      	beq.n	8006772 <_scanf_float+0x62>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b4e      	cmp	r3, #78	; 0x4e
 8006762:	d844      	bhi.n	80067ee <_scanf_float+0xde>
 8006764:	0018      	movs	r0, r3
 8006766:	2b40      	cmp	r3, #64	; 0x40
 8006768:	d82c      	bhi.n	80067c4 <_scanf_float+0xb4>
 800676a:	382b      	subs	r0, #43	; 0x2b
 800676c:	b2c1      	uxtb	r1, r0
 800676e:	290e      	cmp	r1, #14
 8006770:	d92a      	bls.n	80067c8 <_scanf_float+0xb8>
 8006772:	9b00      	ldr	r3, [sp, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <_scanf_float+0x70>
 8006778:	6832      	ldr	r2, [r6, #0]
 800677a:	4ba4      	ldr	r3, [pc, #656]	; (8006a0c <_scanf_float+0x2fc>)
 800677c:	4013      	ands	r3, r2
 800677e:	6033      	str	r3, [r6, #0]
 8006780:	9b02      	ldr	r3, [sp, #8]
 8006782:	3b01      	subs	r3, #1
 8006784:	2b01      	cmp	r3, #1
 8006786:	d900      	bls.n	800678a <_scanf_float+0x7a>
 8006788:	e0f9      	b.n	800697e <_scanf_float+0x26e>
 800678a:	24be      	movs	r4, #190	; 0xbe
 800678c:	0064      	lsls	r4, r4, #1
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	429f      	cmp	r7, r3
 8006792:	d900      	bls.n	8006796 <_scanf_float+0x86>
 8006794:	e0e9      	b.n	800696a <_scanf_float+0x25a>
 8006796:	2301      	movs	r3, #1
 8006798:	9302      	str	r3, [sp, #8]
 800679a:	e185      	b.n	8006aa8 <_scanf_float+0x398>
 800679c:	0018      	movs	r0, r3
 800679e:	3861      	subs	r0, #97	; 0x61
 80067a0:	280d      	cmp	r0, #13
 80067a2:	d8e6      	bhi.n	8006772 <_scanf_float+0x62>
 80067a4:	f7f9 fcc2 	bl	800012c <__gnu_thumb1_case_shi>
 80067a8:	ffe50083 	.word	0xffe50083
 80067ac:	ffe5ffe5 	.word	0xffe5ffe5
 80067b0:	00a200b6 	.word	0x00a200b6
 80067b4:	ffe5ffe5 	.word	0xffe5ffe5
 80067b8:	ffe50089 	.word	0xffe50089
 80067bc:	ffe5ffe5 	.word	0xffe5ffe5
 80067c0:	0065ffe5 	.word	0x0065ffe5
 80067c4:	3841      	subs	r0, #65	; 0x41
 80067c6:	e7eb      	b.n	80067a0 <_scanf_float+0x90>
 80067c8:	280e      	cmp	r0, #14
 80067ca:	d8d2      	bhi.n	8006772 <_scanf_float+0x62>
 80067cc:	f7f9 fcae 	bl	800012c <__gnu_thumb1_case_shi>
 80067d0:	ffd1004b 	.word	0xffd1004b
 80067d4:	0098004b 	.word	0x0098004b
 80067d8:	0020ffd1 	.word	0x0020ffd1
 80067dc:	00400040 	.word	0x00400040
 80067e0:	00400040 	.word	0x00400040
 80067e4:	00400040 	.word	0x00400040
 80067e8:	00400040 	.word	0x00400040
 80067ec:	0040      	.short	0x0040
 80067ee:	2b6e      	cmp	r3, #110	; 0x6e
 80067f0:	d809      	bhi.n	8006806 <_scanf_float+0xf6>
 80067f2:	2b60      	cmp	r3, #96	; 0x60
 80067f4:	d8d2      	bhi.n	800679c <_scanf_float+0x8c>
 80067f6:	2b54      	cmp	r3, #84	; 0x54
 80067f8:	d07d      	beq.n	80068f6 <_scanf_float+0x1e6>
 80067fa:	2b59      	cmp	r3, #89	; 0x59
 80067fc:	d1b9      	bne.n	8006772 <_scanf_float+0x62>
 80067fe:	2c07      	cmp	r4, #7
 8006800:	d1b7      	bne.n	8006772 <_scanf_float+0x62>
 8006802:	2408      	movs	r4, #8
 8006804:	e02c      	b.n	8006860 <_scanf_float+0x150>
 8006806:	2b74      	cmp	r3, #116	; 0x74
 8006808:	d075      	beq.n	80068f6 <_scanf_float+0x1e6>
 800680a:	2b79      	cmp	r3, #121	; 0x79
 800680c:	d0f7      	beq.n	80067fe <_scanf_float+0xee>
 800680e:	e7b0      	b.n	8006772 <_scanf_float+0x62>
 8006810:	6831      	ldr	r1, [r6, #0]
 8006812:	05c8      	lsls	r0, r1, #23
 8006814:	d51c      	bpl.n	8006850 <_scanf_float+0x140>
 8006816:	2380      	movs	r3, #128	; 0x80
 8006818:	4399      	bics	r1, r3
 800681a:	9b00      	ldr	r3, [sp, #0]
 800681c:	6031      	str	r1, [r6, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	9b05      	ldr	r3, [sp, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <_scanf_float+0x120>
 8006828:	3b01      	subs	r3, #1
 800682a:	3201      	adds	r2, #1
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	60b2      	str	r2, [r6, #8]
 8006830:	68b3      	ldr	r3, [r6, #8]
 8006832:	3b01      	subs	r3, #1
 8006834:	60b3      	str	r3, [r6, #8]
 8006836:	6933      	ldr	r3, [r6, #16]
 8006838:	3301      	adds	r3, #1
 800683a:	6133      	str	r3, [r6, #16]
 800683c:	686b      	ldr	r3, [r5, #4]
 800683e:	3b01      	subs	r3, #1
 8006840:	606b      	str	r3, [r5, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	dc00      	bgt.n	8006848 <_scanf_float+0x138>
 8006846:	e086      	b.n	8006956 <_scanf_float+0x246>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	3301      	adds	r3, #1
 800684c:	602b      	str	r3, [r5, #0]
 800684e:	e782      	b.n	8006756 <_scanf_float+0x46>
 8006850:	9a02      	ldr	r2, [sp, #8]
 8006852:	1912      	adds	r2, r2, r4
 8006854:	2a00      	cmp	r2, #0
 8006856:	d18c      	bne.n	8006772 <_scanf_float+0x62>
 8006858:	4a6d      	ldr	r2, [pc, #436]	; (8006a10 <_scanf_float+0x300>)
 800685a:	6831      	ldr	r1, [r6, #0]
 800685c:	400a      	ands	r2, r1
 800685e:	6032      	str	r2, [r6, #0]
 8006860:	703b      	strb	r3, [r7, #0]
 8006862:	3701      	adds	r7, #1
 8006864:	e7e4      	b.n	8006830 <_scanf_float+0x120>
 8006866:	2180      	movs	r1, #128	; 0x80
 8006868:	6832      	ldr	r2, [r6, #0]
 800686a:	420a      	tst	r2, r1
 800686c:	d081      	beq.n	8006772 <_scanf_float+0x62>
 800686e:	438a      	bics	r2, r1
 8006870:	e7f5      	b.n	800685e <_scanf_float+0x14e>
 8006872:	9a02      	ldr	r2, [sp, #8]
 8006874:	2a00      	cmp	r2, #0
 8006876:	d10f      	bne.n	8006898 <_scanf_float+0x188>
 8006878:	9a00      	ldr	r2, [sp, #0]
 800687a:	2a00      	cmp	r2, #0
 800687c:	d10f      	bne.n	800689e <_scanf_float+0x18e>
 800687e:	6832      	ldr	r2, [r6, #0]
 8006880:	21e0      	movs	r1, #224	; 0xe0
 8006882:	0010      	movs	r0, r2
 8006884:	00c9      	lsls	r1, r1, #3
 8006886:	4008      	ands	r0, r1
 8006888:	4288      	cmp	r0, r1
 800688a:	d108      	bne.n	800689e <_scanf_float+0x18e>
 800688c:	4961      	ldr	r1, [pc, #388]	; (8006a14 <_scanf_float+0x304>)
 800688e:	400a      	ands	r2, r1
 8006890:	6032      	str	r2, [r6, #0]
 8006892:	2201      	movs	r2, #1
 8006894:	9202      	str	r2, [sp, #8]
 8006896:	e7e3      	b.n	8006860 <_scanf_float+0x150>
 8006898:	9a02      	ldr	r2, [sp, #8]
 800689a:	2a02      	cmp	r2, #2
 800689c:	d059      	beq.n	8006952 <_scanf_float+0x242>
 800689e:	2c01      	cmp	r4, #1
 80068a0:	d002      	beq.n	80068a8 <_scanf_float+0x198>
 80068a2:	2c04      	cmp	r4, #4
 80068a4:	d000      	beq.n	80068a8 <_scanf_float+0x198>
 80068a6:	e764      	b.n	8006772 <_scanf_float+0x62>
 80068a8:	3401      	adds	r4, #1
 80068aa:	b2e4      	uxtb	r4, r4
 80068ac:	e7d8      	b.n	8006860 <_scanf_float+0x150>
 80068ae:	9a02      	ldr	r2, [sp, #8]
 80068b0:	2a01      	cmp	r2, #1
 80068b2:	d000      	beq.n	80068b6 <_scanf_float+0x1a6>
 80068b4:	e75d      	b.n	8006772 <_scanf_float+0x62>
 80068b6:	2202      	movs	r2, #2
 80068b8:	e7ec      	b.n	8006894 <_scanf_float+0x184>
 80068ba:	2c00      	cmp	r4, #0
 80068bc:	d110      	bne.n	80068e0 <_scanf_float+0x1d0>
 80068be:	9a00      	ldr	r2, [sp, #0]
 80068c0:	2a00      	cmp	r2, #0
 80068c2:	d000      	beq.n	80068c6 <_scanf_float+0x1b6>
 80068c4:	e758      	b.n	8006778 <_scanf_float+0x68>
 80068c6:	6832      	ldr	r2, [r6, #0]
 80068c8:	21e0      	movs	r1, #224	; 0xe0
 80068ca:	0010      	movs	r0, r2
 80068cc:	00c9      	lsls	r1, r1, #3
 80068ce:	4008      	ands	r0, r1
 80068d0:	4288      	cmp	r0, r1
 80068d2:	d000      	beq.n	80068d6 <_scanf_float+0x1c6>
 80068d4:	e754      	b.n	8006780 <_scanf_float+0x70>
 80068d6:	494f      	ldr	r1, [pc, #316]	; (8006a14 <_scanf_float+0x304>)
 80068d8:	3401      	adds	r4, #1
 80068da:	400a      	ands	r2, r1
 80068dc:	6032      	str	r2, [r6, #0]
 80068de:	e7bf      	b.n	8006860 <_scanf_float+0x150>
 80068e0:	21fd      	movs	r1, #253	; 0xfd
 80068e2:	1ee2      	subs	r2, r4, #3
 80068e4:	420a      	tst	r2, r1
 80068e6:	d000      	beq.n	80068ea <_scanf_float+0x1da>
 80068e8:	e743      	b.n	8006772 <_scanf_float+0x62>
 80068ea:	e7dd      	b.n	80068a8 <_scanf_float+0x198>
 80068ec:	2c02      	cmp	r4, #2
 80068ee:	d000      	beq.n	80068f2 <_scanf_float+0x1e2>
 80068f0:	e73f      	b.n	8006772 <_scanf_float+0x62>
 80068f2:	2403      	movs	r4, #3
 80068f4:	e7b4      	b.n	8006860 <_scanf_float+0x150>
 80068f6:	2c06      	cmp	r4, #6
 80068f8:	d000      	beq.n	80068fc <_scanf_float+0x1ec>
 80068fa:	e73a      	b.n	8006772 <_scanf_float+0x62>
 80068fc:	2407      	movs	r4, #7
 80068fe:	e7af      	b.n	8006860 <_scanf_float+0x150>
 8006900:	6832      	ldr	r2, [r6, #0]
 8006902:	0591      	lsls	r1, r2, #22
 8006904:	d400      	bmi.n	8006908 <_scanf_float+0x1f8>
 8006906:	e734      	b.n	8006772 <_scanf_float+0x62>
 8006908:	4943      	ldr	r1, [pc, #268]	; (8006a18 <_scanf_float+0x308>)
 800690a:	400a      	ands	r2, r1
 800690c:	6032      	str	r2, [r6, #0]
 800690e:	9a00      	ldr	r2, [sp, #0]
 8006910:	9204      	str	r2, [sp, #16]
 8006912:	e7a5      	b.n	8006860 <_scanf_float+0x150>
 8006914:	21a0      	movs	r1, #160	; 0xa0
 8006916:	2080      	movs	r0, #128	; 0x80
 8006918:	6832      	ldr	r2, [r6, #0]
 800691a:	00c9      	lsls	r1, r1, #3
 800691c:	4011      	ands	r1, r2
 800691e:	00c0      	lsls	r0, r0, #3
 8006920:	4281      	cmp	r1, r0
 8006922:	d006      	beq.n	8006932 <_scanf_float+0x222>
 8006924:	4202      	tst	r2, r0
 8006926:	d100      	bne.n	800692a <_scanf_float+0x21a>
 8006928:	e723      	b.n	8006772 <_scanf_float+0x62>
 800692a:	9900      	ldr	r1, [sp, #0]
 800692c:	2900      	cmp	r1, #0
 800692e:	d100      	bne.n	8006932 <_scanf_float+0x222>
 8006930:	e726      	b.n	8006780 <_scanf_float+0x70>
 8006932:	0591      	lsls	r1, r2, #22
 8006934:	d404      	bmi.n	8006940 <_scanf_float+0x230>
 8006936:	9900      	ldr	r1, [sp, #0]
 8006938:	9804      	ldr	r0, [sp, #16]
 800693a:	9708      	str	r7, [sp, #32]
 800693c:	1a09      	subs	r1, r1, r0
 800693e:	9107      	str	r1, [sp, #28]
 8006940:	4934      	ldr	r1, [pc, #208]	; (8006a14 <_scanf_float+0x304>)
 8006942:	400a      	ands	r2, r1
 8006944:	21c0      	movs	r1, #192	; 0xc0
 8006946:	0049      	lsls	r1, r1, #1
 8006948:	430a      	orrs	r2, r1
 800694a:	6032      	str	r2, [r6, #0]
 800694c:	2200      	movs	r2, #0
 800694e:	9200      	str	r2, [sp, #0]
 8006950:	e786      	b.n	8006860 <_scanf_float+0x150>
 8006952:	2203      	movs	r2, #3
 8006954:	e79e      	b.n	8006894 <_scanf_float+0x184>
 8006956:	23c0      	movs	r3, #192	; 0xc0
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	0029      	movs	r1, r5
 800695c:	58f3      	ldr	r3, [r6, r3]
 800695e:	9801      	ldr	r0, [sp, #4]
 8006960:	4798      	blx	r3
 8006962:	2800      	cmp	r0, #0
 8006964:	d100      	bne.n	8006968 <_scanf_float+0x258>
 8006966:	e6f6      	b.n	8006756 <_scanf_float+0x46>
 8006968:	e703      	b.n	8006772 <_scanf_float+0x62>
 800696a:	3f01      	subs	r7, #1
 800696c:	5933      	ldr	r3, [r6, r4]
 800696e:	002a      	movs	r2, r5
 8006970:	7839      	ldrb	r1, [r7, #0]
 8006972:	9801      	ldr	r0, [sp, #4]
 8006974:	4798      	blx	r3
 8006976:	6933      	ldr	r3, [r6, #16]
 8006978:	3b01      	subs	r3, #1
 800697a:	6133      	str	r3, [r6, #16]
 800697c:	e707      	b.n	800678e <_scanf_float+0x7e>
 800697e:	1e63      	subs	r3, r4, #1
 8006980:	2b06      	cmp	r3, #6
 8006982:	d80e      	bhi.n	80069a2 <_scanf_float+0x292>
 8006984:	9702      	str	r7, [sp, #8]
 8006986:	2c02      	cmp	r4, #2
 8006988:	d920      	bls.n	80069cc <_scanf_float+0x2bc>
 800698a:	1be3      	subs	r3, r4, r7
 800698c:	b2db      	uxtb	r3, r3
 800698e:	9305      	str	r3, [sp, #20]
 8006990:	9b02      	ldr	r3, [sp, #8]
 8006992:	9a05      	ldr	r2, [sp, #20]
 8006994:	189b      	adds	r3, r3, r2
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b03      	cmp	r3, #3
 800699a:	d827      	bhi.n	80069ec <_scanf_float+0x2dc>
 800699c:	3c03      	subs	r4, #3
 800699e:	b2e4      	uxtb	r4, r4
 80069a0:	1b3f      	subs	r7, r7, r4
 80069a2:	6833      	ldr	r3, [r6, #0]
 80069a4:	05da      	lsls	r2, r3, #23
 80069a6:	d554      	bpl.n	8006a52 <_scanf_float+0x342>
 80069a8:	055b      	lsls	r3, r3, #21
 80069aa:	d537      	bpl.n	8006a1c <_scanf_float+0x30c>
 80069ac:	24be      	movs	r4, #190	; 0xbe
 80069ae:	0064      	lsls	r4, r4, #1
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	429f      	cmp	r7, r3
 80069b4:	d800      	bhi.n	80069b8 <_scanf_float+0x2a8>
 80069b6:	e6ee      	b.n	8006796 <_scanf_float+0x86>
 80069b8:	3f01      	subs	r7, #1
 80069ba:	5933      	ldr	r3, [r6, r4]
 80069bc:	002a      	movs	r2, r5
 80069be:	7839      	ldrb	r1, [r7, #0]
 80069c0:	9801      	ldr	r0, [sp, #4]
 80069c2:	4798      	blx	r3
 80069c4:	6933      	ldr	r3, [r6, #16]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	6133      	str	r3, [r6, #16]
 80069ca:	e7f1      	b.n	80069b0 <_scanf_float+0x2a0>
 80069cc:	24be      	movs	r4, #190	; 0xbe
 80069ce:	0064      	lsls	r4, r4, #1
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	429f      	cmp	r7, r3
 80069d4:	d800      	bhi.n	80069d8 <_scanf_float+0x2c8>
 80069d6:	e6de      	b.n	8006796 <_scanf_float+0x86>
 80069d8:	3f01      	subs	r7, #1
 80069da:	5933      	ldr	r3, [r6, r4]
 80069dc:	002a      	movs	r2, r5
 80069de:	7839      	ldrb	r1, [r7, #0]
 80069e0:	9801      	ldr	r0, [sp, #4]
 80069e2:	4798      	blx	r3
 80069e4:	6933      	ldr	r3, [r6, #16]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	6133      	str	r3, [r6, #16]
 80069ea:	e7f1      	b.n	80069d0 <_scanf_float+0x2c0>
 80069ec:	9b02      	ldr	r3, [sp, #8]
 80069ee:	002a      	movs	r2, r5
 80069f0:	3b01      	subs	r3, #1
 80069f2:	7819      	ldrb	r1, [r3, #0]
 80069f4:	9302      	str	r3, [sp, #8]
 80069f6:	23be      	movs	r3, #190	; 0xbe
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	58f3      	ldr	r3, [r6, r3]
 80069fc:	9801      	ldr	r0, [sp, #4]
 80069fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006a00:	4798      	blx	r3
 8006a02:	6933      	ldr	r3, [r6, #16]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	6133      	str	r3, [r6, #16]
 8006a08:	e7c2      	b.n	8006990 <_scanf_float+0x280>
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	fffffeff 	.word	0xfffffeff
 8006a10:	fffffe7f 	.word	0xfffffe7f
 8006a14:	fffff87f 	.word	0xfffff87f
 8006a18:	fffffd7f 	.word	0xfffffd7f
 8006a1c:	6933      	ldr	r3, [r6, #16]
 8006a1e:	1e7c      	subs	r4, r7, #1
 8006a20:	7821      	ldrb	r1, [r4, #0]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	6133      	str	r3, [r6, #16]
 8006a26:	2965      	cmp	r1, #101	; 0x65
 8006a28:	d00c      	beq.n	8006a44 <_scanf_float+0x334>
 8006a2a:	2945      	cmp	r1, #69	; 0x45
 8006a2c:	d00a      	beq.n	8006a44 <_scanf_float+0x334>
 8006a2e:	23be      	movs	r3, #190	; 0xbe
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	58f3      	ldr	r3, [r6, r3]
 8006a34:	002a      	movs	r2, r5
 8006a36:	9801      	ldr	r0, [sp, #4]
 8006a38:	4798      	blx	r3
 8006a3a:	6933      	ldr	r3, [r6, #16]
 8006a3c:	1ebc      	subs	r4, r7, #2
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	7821      	ldrb	r1, [r4, #0]
 8006a42:	6133      	str	r3, [r6, #16]
 8006a44:	23be      	movs	r3, #190	; 0xbe
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	002a      	movs	r2, r5
 8006a4a:	58f3      	ldr	r3, [r6, r3]
 8006a4c:	9801      	ldr	r0, [sp, #4]
 8006a4e:	4798      	blx	r3
 8006a50:	0027      	movs	r7, r4
 8006a52:	6832      	ldr	r2, [r6, #0]
 8006a54:	2310      	movs	r3, #16
 8006a56:	0011      	movs	r1, r2
 8006a58:	4019      	ands	r1, r3
 8006a5a:	9102      	str	r1, [sp, #8]
 8006a5c:	421a      	tst	r2, r3
 8006a5e:	d158      	bne.n	8006b12 <_scanf_float+0x402>
 8006a60:	23c0      	movs	r3, #192	; 0xc0
 8006a62:	7039      	strb	r1, [r7, #0]
 8006a64:	6832      	ldr	r2, [r6, #0]
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	00d2      	lsls	r2, r2, #3
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d11d      	bne.n	8006aae <_scanf_float+0x39e>
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	9a00      	ldr	r2, [sp, #0]
 8006a76:	9900      	ldr	r1, [sp, #0]
 8006a78:	1a9a      	subs	r2, r3, r2
 8006a7a:	428b      	cmp	r3, r1
 8006a7c:	d124      	bne.n	8006ac8 <_scanf_float+0x3b8>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	9903      	ldr	r1, [sp, #12]
 8006a82:	9801      	ldr	r0, [sp, #4]
 8006a84:	f000 feac 	bl	80077e0 <_strtod_r>
 8006a88:	9b06      	ldr	r3, [sp, #24]
 8006a8a:	000d      	movs	r5, r1
 8006a8c:	6831      	ldr	r1, [r6, #0]
 8006a8e:	0004      	movs	r4, r0
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	078a      	lsls	r2, r1, #30
 8006a94:	d525      	bpl.n	8006ae2 <_scanf_float+0x3d2>
 8006a96:	1d1a      	adds	r2, r3, #4
 8006a98:	9906      	ldr	r1, [sp, #24]
 8006a9a:	600a      	str	r2, [r1, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	601c      	str	r4, [r3, #0]
 8006aa0:	605d      	str	r5, [r3, #4]
 8006aa2:	68f3      	ldr	r3, [r6, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60f3      	str	r3, [r6, #12]
 8006aa8:	9802      	ldr	r0, [sp, #8]
 8006aaa:	b00b      	add	sp, #44	; 0x2c
 8006aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aae:	9b07      	ldr	r3, [sp, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0e4      	beq.n	8006a7e <_scanf_float+0x36e>
 8006ab4:	9b08      	ldr	r3, [sp, #32]
 8006ab6:	9a02      	ldr	r2, [sp, #8]
 8006ab8:	1c59      	adds	r1, r3, #1
 8006aba:	9801      	ldr	r0, [sp, #4]
 8006abc:	230a      	movs	r3, #10
 8006abe:	f000 ff25 	bl	800790c <_strtol_r>
 8006ac2:	9b07      	ldr	r3, [sp, #28]
 8006ac4:	9f08      	ldr	r7, [sp, #32]
 8006ac6:	1ac2      	subs	r2, r0, r3
 8006ac8:	0033      	movs	r3, r6
 8006aca:	3370      	adds	r3, #112	; 0x70
 8006acc:	33ff      	adds	r3, #255	; 0xff
 8006ace:	429f      	cmp	r7, r3
 8006ad0:	d302      	bcc.n	8006ad8 <_scanf_float+0x3c8>
 8006ad2:	0037      	movs	r7, r6
 8006ad4:	376f      	adds	r7, #111	; 0x6f
 8006ad6:	37ff      	adds	r7, #255	; 0xff
 8006ad8:	0038      	movs	r0, r7
 8006ada:	490f      	ldr	r1, [pc, #60]	; (8006b18 <_scanf_float+0x408>)
 8006adc:	f000 f824 	bl	8006b28 <siprintf>
 8006ae0:	e7cd      	b.n	8006a7e <_scanf_float+0x36e>
 8006ae2:	1d1a      	adds	r2, r3, #4
 8006ae4:	0749      	lsls	r1, r1, #29
 8006ae6:	d4d7      	bmi.n	8006a98 <_scanf_float+0x388>
 8006ae8:	9906      	ldr	r1, [sp, #24]
 8006aea:	0020      	movs	r0, r4
 8006aec:	600a      	str	r2, [r1, #0]
 8006aee:	681f      	ldr	r7, [r3, #0]
 8006af0:	0022      	movs	r2, r4
 8006af2:	002b      	movs	r3, r5
 8006af4:	0029      	movs	r1, r5
 8006af6:	f7fb fab5 	bl	8002064 <__aeabi_dcmpun>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d004      	beq.n	8006b08 <_scanf_float+0x3f8>
 8006afe:	4807      	ldr	r0, [pc, #28]	; (8006b1c <_scanf_float+0x40c>)
 8006b00:	f000 f80e 	bl	8006b20 <nanf>
 8006b04:	6038      	str	r0, [r7, #0]
 8006b06:	e7cc      	b.n	8006aa2 <_scanf_float+0x392>
 8006b08:	0020      	movs	r0, r4
 8006b0a:	0029      	movs	r1, r5
 8006b0c:	f7fb fb54 	bl	80021b8 <__aeabi_d2f>
 8006b10:	e7f8      	b.n	8006b04 <_scanf_float+0x3f4>
 8006b12:	2300      	movs	r3, #0
 8006b14:	e640      	b.n	8006798 <_scanf_float+0x88>
 8006b16:	46c0      	nop			; (mov r8, r8)
 8006b18:	0800a928 	.word	0x0800a928
 8006b1c:	0800ad40 	.word	0x0800ad40

08006b20 <nanf>:
 8006b20:	4800      	ldr	r0, [pc, #0]	; (8006b24 <nanf+0x4>)
 8006b22:	4770      	bx	lr
 8006b24:	7fc00000 	.word	0x7fc00000

08006b28 <siprintf>:
 8006b28:	b40e      	push	{r1, r2, r3}
 8006b2a:	b500      	push	{lr}
 8006b2c:	490b      	ldr	r1, [pc, #44]	; (8006b5c <siprintf+0x34>)
 8006b2e:	b09c      	sub	sp, #112	; 0x70
 8006b30:	ab1d      	add	r3, sp, #116	; 0x74
 8006b32:	9002      	str	r0, [sp, #8]
 8006b34:	9006      	str	r0, [sp, #24]
 8006b36:	9107      	str	r1, [sp, #28]
 8006b38:	9104      	str	r1, [sp, #16]
 8006b3a:	4809      	ldr	r0, [pc, #36]	; (8006b60 <siprintf+0x38>)
 8006b3c:	4909      	ldr	r1, [pc, #36]	; (8006b64 <siprintf+0x3c>)
 8006b3e:	cb04      	ldmia	r3!, {r2}
 8006b40:	9105      	str	r1, [sp, #20]
 8006b42:	6800      	ldr	r0, [r0, #0]
 8006b44:	a902      	add	r1, sp, #8
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	f002 ff16 	bl	8009978 <_svfiprintf_r>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9a02      	ldr	r2, [sp, #8]
 8006b50:	7013      	strb	r3, [r2, #0]
 8006b52:	b01c      	add	sp, #112	; 0x70
 8006b54:	bc08      	pop	{r3}
 8006b56:	b003      	add	sp, #12
 8006b58:	4718      	bx	r3
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	7fffffff 	.word	0x7fffffff
 8006b60:	20000020 	.word	0x20000020
 8006b64:	ffff0208 	.word	0xffff0208

08006b68 <sulp>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	0016      	movs	r6, r2
 8006b6c:	000d      	movs	r5, r1
 8006b6e:	f002 fca7 	bl	80094c0 <__ulp>
 8006b72:	2e00      	cmp	r6, #0
 8006b74:	d00d      	beq.n	8006b92 <sulp+0x2a>
 8006b76:	236b      	movs	r3, #107	; 0x6b
 8006b78:	006a      	lsls	r2, r5, #1
 8006b7a:	0d52      	lsrs	r2, r2, #21
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	dd07      	ble.n	8006b92 <sulp+0x2a>
 8006b82:	2400      	movs	r4, #0
 8006b84:	4a03      	ldr	r2, [pc, #12]	; (8006b94 <sulp+0x2c>)
 8006b86:	051b      	lsls	r3, r3, #20
 8006b88:	189d      	adds	r5, r3, r2
 8006b8a:	002b      	movs	r3, r5
 8006b8c:	0022      	movs	r2, r4
 8006b8e:	f7fa fc6b 	bl	8001468 <__aeabi_dmul>
 8006b92:	bd70      	pop	{r4, r5, r6, pc}
 8006b94:	3ff00000 	.word	0x3ff00000

08006b98 <_strtod_l>:
 8006b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b9a:	001d      	movs	r5, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	b0a7      	sub	sp, #156	; 0x9c
 8006ba0:	9322      	str	r3, [sp, #136]	; 0x88
 8006ba2:	4bae      	ldr	r3, [pc, #696]	; (8006e5c <_strtod_l+0x2c4>)
 8006ba4:	9005      	str	r0, [sp, #20]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	9108      	str	r1, [sp, #32]
 8006baa:	0018      	movs	r0, r3
 8006bac:	9307      	str	r3, [sp, #28]
 8006bae:	921d      	str	r2, [sp, #116]	; 0x74
 8006bb0:	f7f9 faaa 	bl	8000108 <strlen>
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	0004      	movs	r4, r0
 8006bb8:	2700      	movs	r7, #0
 8006bba:	9b08      	ldr	r3, [sp, #32]
 8006bbc:	9321      	str	r3, [sp, #132]	; 0x84
 8006bbe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bc0:	7813      	ldrb	r3, [r2, #0]
 8006bc2:	2b2b      	cmp	r3, #43	; 0x2b
 8006bc4:	d058      	beq.n	8006c78 <_strtod_l+0xe0>
 8006bc6:	d844      	bhi.n	8006c52 <_strtod_l+0xba>
 8006bc8:	2b0d      	cmp	r3, #13
 8006bca:	d83d      	bhi.n	8006c48 <_strtod_l+0xb0>
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d83d      	bhi.n	8006c4c <_strtod_l+0xb4>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d047      	beq.n	8006c64 <_strtod_l+0xcc>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9310      	str	r3, [sp, #64]	; 0x40
 8006bd8:	2200      	movs	r2, #0
 8006bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bdc:	920a      	str	r2, [sp, #40]	; 0x28
 8006bde:	9306      	str	r3, [sp, #24]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b30      	cmp	r3, #48	; 0x30
 8006be4:	d000      	beq.n	8006be8 <_strtod_l+0x50>
 8006be6:	e083      	b.n	8006cf0 <_strtod_l+0x158>
 8006be8:	9b06      	ldr	r3, [sp, #24]
 8006bea:	3220      	adds	r2, #32
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	4393      	bics	r3, r2
 8006bf0:	2b58      	cmp	r3, #88	; 0x58
 8006bf2:	d000      	beq.n	8006bf6 <_strtod_l+0x5e>
 8006bf4:	e072      	b.n	8006cdc <_strtod_l+0x144>
 8006bf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bf8:	9502      	str	r5, [sp, #8]
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	ab22      	add	r3, sp, #136	; 0x88
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	4a97      	ldr	r2, [pc, #604]	; (8006e60 <_strtod_l+0x2c8>)
 8006c02:	ab23      	add	r3, sp, #140	; 0x8c
 8006c04:	9805      	ldr	r0, [sp, #20]
 8006c06:	a921      	add	r1, sp, #132	; 0x84
 8006c08:	f001 fd98 	bl	800873c <__gethex>
 8006c0c:	2307      	movs	r3, #7
 8006c0e:	0005      	movs	r5, r0
 8006c10:	0004      	movs	r4, r0
 8006c12:	401d      	ands	r5, r3
 8006c14:	4218      	tst	r0, r3
 8006c16:	d006      	beq.n	8006c26 <_strtod_l+0x8e>
 8006c18:	2d06      	cmp	r5, #6
 8006c1a:	d12f      	bne.n	8006c7c <_strtod_l+0xe4>
 8006c1c:	9b06      	ldr	r3, [sp, #24]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	9321      	str	r3, [sp, #132]	; 0x84
 8006c22:	2300      	movs	r3, #0
 8006c24:	9310      	str	r3, [sp, #64]	; 0x40
 8006c26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <_strtod_l+0x9a>
 8006c2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01c      	beq.n	8006c72 <_strtod_l+0xda>
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	0032      	movs	r2, r6
 8006c3c:	061b      	lsls	r3, r3, #24
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	0010      	movs	r0, r2
 8006c42:	0019      	movs	r1, r3
 8006c44:	b027      	add	sp, #156	; 0x9c
 8006c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d1c3      	bne.n	8006bd4 <_strtod_l+0x3c>
 8006c4c:	3201      	adds	r2, #1
 8006c4e:	9221      	str	r2, [sp, #132]	; 0x84
 8006c50:	e7b5      	b.n	8006bbe <_strtod_l+0x26>
 8006c52:	2b2d      	cmp	r3, #45	; 0x2d
 8006c54:	d1be      	bne.n	8006bd4 <_strtod_l+0x3c>
 8006c56:	3b2c      	subs	r3, #44	; 0x2c
 8006c58:	9310      	str	r3, [sp, #64]	; 0x40
 8006c5a:	1c53      	adds	r3, r2, #1
 8006c5c:	9321      	str	r3, [sp, #132]	; 0x84
 8006c5e:	7853      	ldrb	r3, [r2, #1]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1b9      	bne.n	8006bd8 <_strtod_l+0x40>
 8006c64:	9b08      	ldr	r3, [sp, #32]
 8006c66:	9321      	str	r3, [sp, #132]	; 0x84
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9310      	str	r3, [sp, #64]	; 0x40
 8006c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1dc      	bne.n	8006c2c <_strtod_l+0x94>
 8006c72:	0032      	movs	r2, r6
 8006c74:	003b      	movs	r3, r7
 8006c76:	e7e3      	b.n	8006c40 <_strtod_l+0xa8>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e7ed      	b.n	8006c58 <_strtod_l+0xc0>
 8006c7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	d007      	beq.n	8006c92 <_strtod_l+0xfa>
 8006c82:	2135      	movs	r1, #53	; 0x35
 8006c84:	a824      	add	r0, sp, #144	; 0x90
 8006c86:	f002 fd1a 	bl	80096be <__copybits>
 8006c8a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006c8c:	9805      	ldr	r0, [sp, #20]
 8006c8e:	f002 f8d5 	bl	8008e3c <_Bfree>
 8006c92:	1e68      	subs	r0, r5, #1
 8006c94:	2805      	cmp	r0, #5
 8006c96:	d806      	bhi.n	8006ca6 <_strtod_l+0x10e>
 8006c98:	f7f9 fa3e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006c9c:	1c190b0e 	.word	0x1c190b0e
 8006ca0:	030e      	.short	0x030e
 8006ca2:	2700      	movs	r7, #0
 8006ca4:	003e      	movs	r6, r7
 8006ca6:	0723      	lsls	r3, r4, #28
 8006ca8:	d5bd      	bpl.n	8006c26 <_strtod_l+0x8e>
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	061b      	lsls	r3, r3, #24
 8006cae:	431f      	orrs	r7, r3
 8006cb0:	e7b9      	b.n	8006c26 <_strtod_l+0x8e>
 8006cb2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006cb4:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006cb6:	e7f6      	b.n	8006ca6 <_strtod_l+0x10e>
 8006cb8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006cba:	4a6a      	ldr	r2, [pc, #424]	; (8006e64 <_strtod_l+0x2cc>)
 8006cbc:	496a      	ldr	r1, [pc, #424]	; (8006e68 <_strtod_l+0x2d0>)
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cc2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006cc4:	185b      	adds	r3, r3, r1
 8006cc6:	051b      	lsls	r3, r3, #20
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	0017      	movs	r7, r2
 8006ccc:	e7eb      	b.n	8006ca6 <_strtod_l+0x10e>
 8006cce:	2600      	movs	r6, #0
 8006cd0:	4f66      	ldr	r7, [pc, #408]	; (8006e6c <_strtod_l+0x2d4>)
 8006cd2:	e7e8      	b.n	8006ca6 <_strtod_l+0x10e>
 8006cd4:	2601      	movs	r6, #1
 8006cd6:	4f66      	ldr	r7, [pc, #408]	; (8006e70 <_strtod_l+0x2d8>)
 8006cd8:	4276      	negs	r6, r6
 8006cda:	e7e4      	b.n	8006ca6 <_strtod_l+0x10e>
 8006cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	9221      	str	r2, [sp, #132]	; 0x84
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b30      	cmp	r3, #48	; 0x30
 8006ce6:	d0f9      	beq.n	8006cdc <_strtod_l+0x144>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d09c      	beq.n	8006c26 <_strtod_l+0x8e>
 8006cec:	2301      	movs	r3, #1
 8006cee:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	9311      	str	r3, [sp, #68]	; 0x44
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	930e      	str	r3, [sp, #56]	; 0x38
 8006cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfe:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006d00:	7805      	ldrb	r5, [r0, #0]
 8006d02:	002b      	movs	r3, r5
 8006d04:	3b30      	subs	r3, #48	; 0x30
 8006d06:	b2d9      	uxtb	r1, r3
 8006d08:	2909      	cmp	r1, #9
 8006d0a:	d927      	bls.n	8006d5c <_strtod_l+0x1c4>
 8006d0c:	0022      	movs	r2, r4
 8006d0e:	9907      	ldr	r1, [sp, #28]
 8006d10:	f002 ff4a 	bl	8009ba8 <strncmp>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d033      	beq.n	8006d80 <_strtod_l+0x1e8>
 8006d18:	2000      	movs	r0, #0
 8006d1a:	002b      	movs	r3, r5
 8006d1c:	4684      	mov	ip, r0
 8006d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d20:	900c      	str	r0, [sp, #48]	; 0x30
 8006d22:	9206      	str	r2, [sp, #24]
 8006d24:	2220      	movs	r2, #32
 8006d26:	0019      	movs	r1, r3
 8006d28:	4391      	bics	r1, r2
 8006d2a:	000a      	movs	r2, r1
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	9107      	str	r1, [sp, #28]
 8006d30:	2a45      	cmp	r2, #69	; 0x45
 8006d32:	d000      	beq.n	8006d36 <_strtod_l+0x19e>
 8006d34:	e0c5      	b.n	8006ec2 <_strtod_l+0x32a>
 8006d36:	9b06      	ldr	r3, [sp, #24]
 8006d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d3a:	4303      	orrs	r3, r0
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	428b      	cmp	r3, r1
 8006d40:	d090      	beq.n	8006c64 <_strtod_l+0xcc>
 8006d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d44:	9308      	str	r3, [sp, #32]
 8006d46:	3301      	adds	r3, #1
 8006d48:	9321      	str	r3, [sp, #132]	; 0x84
 8006d4a:	9b08      	ldr	r3, [sp, #32]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b2b      	cmp	r3, #43	; 0x2b
 8006d50:	d075      	beq.n	8006e3e <_strtod_l+0x2a6>
 8006d52:	000c      	movs	r4, r1
 8006d54:	2b2d      	cmp	r3, #45	; 0x2d
 8006d56:	d178      	bne.n	8006e4a <_strtod_l+0x2b2>
 8006d58:	2401      	movs	r4, #1
 8006d5a:	e071      	b.n	8006e40 <_strtod_l+0x2a8>
 8006d5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d5e:	2908      	cmp	r1, #8
 8006d60:	dc09      	bgt.n	8006d76 <_strtod_l+0x1de>
 8006d62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d64:	4351      	muls	r1, r2
 8006d66:	185b      	adds	r3, r3, r1
 8006d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	3301      	adds	r3, #1
 8006d70:	9309      	str	r3, [sp, #36]	; 0x24
 8006d72:	9021      	str	r0, [sp, #132]	; 0x84
 8006d74:	e7c3      	b.n	8006cfe <_strtod_l+0x166>
 8006d76:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006d78:	4351      	muls	r1, r2
 8006d7a:	185b      	adds	r3, r3, r1
 8006d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8006d7e:	e7f4      	b.n	8006d6a <_strtod_l+0x1d2>
 8006d80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d84:	191c      	adds	r4, r3, r4
 8006d86:	9421      	str	r4, [sp, #132]	; 0x84
 8006d88:	7823      	ldrb	r3, [r4, #0]
 8006d8a:	2a00      	cmp	r2, #0
 8006d8c:	d039      	beq.n	8006e02 <_strtod_l+0x26a>
 8006d8e:	900c      	str	r0, [sp, #48]	; 0x30
 8006d90:	9206      	str	r2, [sp, #24]
 8006d92:	001a      	movs	r2, r3
 8006d94:	3a30      	subs	r2, #48	; 0x30
 8006d96:	2a09      	cmp	r2, #9
 8006d98:	d912      	bls.n	8006dc0 <_strtod_l+0x228>
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	4694      	mov	ip, r2
 8006d9e:	e7c1      	b.n	8006d24 <_strtod_l+0x18c>
 8006da0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006da2:	3001      	adds	r0, #1
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	9221      	str	r2, [sp, #132]	; 0x84
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	2b30      	cmp	r3, #48	; 0x30
 8006dac:	d0f8      	beq.n	8006da0 <_strtod_l+0x208>
 8006dae:	001a      	movs	r2, r3
 8006db0:	3a31      	subs	r2, #49	; 0x31
 8006db2:	2a08      	cmp	r2, #8
 8006db4:	d83e      	bhi.n	8006e34 <_strtod_l+0x29c>
 8006db6:	900c      	str	r0, [sp, #48]	; 0x30
 8006db8:	2000      	movs	r0, #0
 8006dba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dbc:	9006      	str	r0, [sp, #24]
 8006dbe:	9211      	str	r2, [sp, #68]	; 0x44
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	9906      	ldr	r1, [sp, #24]
 8006dc4:	1c44      	adds	r4, r0, #1
 8006dc6:	3a30      	subs	r2, #48	; 0x30
 8006dc8:	2b30      	cmp	r3, #48	; 0x30
 8006dca:	d013      	beq.n	8006df4 <_strtod_l+0x25c>
 8006dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dce:	191b      	adds	r3, r3, r4
 8006dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8006dd2:	1844      	adds	r4, r0, r1
 8006dd4:	000b      	movs	r3, r1
 8006dd6:	210a      	movs	r1, #10
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d114      	bne.n	8006e06 <_strtod_l+0x26e>
 8006ddc:	9b06      	ldr	r3, [sp, #24]
 8006dde:	1c59      	adds	r1, r3, #1
 8006de0:	1809      	adds	r1, r1, r0
 8006de2:	1818      	adds	r0, r3, r0
 8006de4:	2808      	cmp	r0, #8
 8006de6:	dc1c      	bgt.n	8006e22 <_strtod_l+0x28a>
 8006de8:	230a      	movs	r3, #10
 8006dea:	2400      	movs	r4, #0
 8006dec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006dee:	4343      	muls	r3, r0
 8006df0:	18d3      	adds	r3, r2, r3
 8006df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006df6:	0020      	movs	r0, r4
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	9221      	str	r2, [sp, #132]	; 0x84
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	9106      	str	r1, [sp, #24]
 8006e00:	e7c7      	b.n	8006d92 <_strtod_l+0x1fa>
 8006e02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e04:	e7d1      	b.n	8006daa <_strtod_l+0x212>
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	dc04      	bgt.n	8006e14 <_strtod_l+0x27c>
 8006e0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006e0c:	434d      	muls	r5, r1
 8006e0e:	950b      	str	r5, [sp, #44]	; 0x2c
 8006e10:	3301      	adds	r3, #1
 8006e12:	e7e1      	b.n	8006dd8 <_strtod_l+0x240>
 8006e14:	1c5d      	adds	r5, r3, #1
 8006e16:	2d10      	cmp	r5, #16
 8006e18:	dcfa      	bgt.n	8006e10 <_strtod_l+0x278>
 8006e1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006e1c:	434d      	muls	r5, r1
 8006e1e:	950e      	str	r5, [sp, #56]	; 0x38
 8006e20:	e7f6      	b.n	8006e10 <_strtod_l+0x278>
 8006e22:	2400      	movs	r4, #0
 8006e24:	2910      	cmp	r1, #16
 8006e26:	dce5      	bgt.n	8006df4 <_strtod_l+0x25c>
 8006e28:	230a      	movs	r3, #10
 8006e2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e2c:	4343      	muls	r3, r0
 8006e2e:	18d3      	adds	r3, r2, r3
 8006e30:	930e      	str	r3, [sp, #56]	; 0x38
 8006e32:	e7df      	b.n	8006df4 <_strtod_l+0x25c>
 8006e34:	2200      	movs	r2, #0
 8006e36:	920c      	str	r2, [sp, #48]	; 0x30
 8006e38:	9206      	str	r2, [sp, #24]
 8006e3a:	3201      	adds	r2, #1
 8006e3c:	e7ae      	b.n	8006d9c <_strtod_l+0x204>
 8006e3e:	2400      	movs	r4, #0
 8006e40:	9b08      	ldr	r3, [sp, #32]
 8006e42:	3302      	adds	r3, #2
 8006e44:	9321      	str	r3, [sp, #132]	; 0x84
 8006e46:	9b08      	ldr	r3, [sp, #32]
 8006e48:	789b      	ldrb	r3, [r3, #2]
 8006e4a:	001a      	movs	r2, r3
 8006e4c:	3a30      	subs	r2, #48	; 0x30
 8006e4e:	2a09      	cmp	r2, #9
 8006e50:	d914      	bls.n	8006e7c <_strtod_l+0x2e4>
 8006e52:	9a08      	ldr	r2, [sp, #32]
 8006e54:	9221      	str	r2, [sp, #132]	; 0x84
 8006e56:	2200      	movs	r2, #0
 8006e58:	e032      	b.n	8006ec0 <_strtod_l+0x328>
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	0800ab80 	.word	0x0800ab80
 8006e60:	0800a930 	.word	0x0800a930
 8006e64:	ffefffff 	.word	0xffefffff
 8006e68:	00000433 	.word	0x00000433
 8006e6c:	7ff00000 	.word	0x7ff00000
 8006e70:	7fffffff 	.word	0x7fffffff
 8006e74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	9221      	str	r2, [sp, #132]	; 0x84
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b30      	cmp	r3, #48	; 0x30
 8006e7e:	d0f9      	beq.n	8006e74 <_strtod_l+0x2dc>
 8006e80:	2200      	movs	r2, #0
 8006e82:	9207      	str	r2, [sp, #28]
 8006e84:	001a      	movs	r2, r3
 8006e86:	3a31      	subs	r2, #49	; 0x31
 8006e88:	2a08      	cmp	r2, #8
 8006e8a:	d81a      	bhi.n	8006ec2 <_strtod_l+0x32a>
 8006e8c:	3b30      	subs	r3, #48	; 0x30
 8006e8e:	001a      	movs	r2, r3
 8006e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e92:	9307      	str	r3, [sp, #28]
 8006e94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e96:	1c59      	adds	r1, r3, #1
 8006e98:	9121      	str	r1, [sp, #132]	; 0x84
 8006e9a:	785b      	ldrb	r3, [r3, #1]
 8006e9c:	001d      	movs	r5, r3
 8006e9e:	3d30      	subs	r5, #48	; 0x30
 8006ea0:	2d09      	cmp	r5, #9
 8006ea2:	d939      	bls.n	8006f18 <_strtod_l+0x380>
 8006ea4:	9d07      	ldr	r5, [sp, #28]
 8006ea6:	1b49      	subs	r1, r1, r5
 8006ea8:	4daf      	ldr	r5, [pc, #700]	; (8007168 <_strtod_l+0x5d0>)
 8006eaa:	9507      	str	r5, [sp, #28]
 8006eac:	2908      	cmp	r1, #8
 8006eae:	dc03      	bgt.n	8006eb8 <_strtod_l+0x320>
 8006eb0:	9207      	str	r2, [sp, #28]
 8006eb2:	42aa      	cmp	r2, r5
 8006eb4:	dd00      	ble.n	8006eb8 <_strtod_l+0x320>
 8006eb6:	9507      	str	r5, [sp, #28]
 8006eb8:	2c00      	cmp	r4, #0
 8006eba:	d002      	beq.n	8006ec2 <_strtod_l+0x32a>
 8006ebc:	9a07      	ldr	r2, [sp, #28]
 8006ebe:	4252      	negs	r2, r2
 8006ec0:	9207      	str	r2, [sp, #28]
 8006ec2:	9a06      	ldr	r2, [sp, #24]
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	d14b      	bne.n	8006f60 <_strtod_l+0x3c8>
 8006ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eca:	4310      	orrs	r0, r2
 8006ecc:	d000      	beq.n	8006ed0 <_strtod_l+0x338>
 8006ece:	e6aa      	b.n	8006c26 <_strtod_l+0x8e>
 8006ed0:	4662      	mov	r2, ip
 8006ed2:	2a00      	cmp	r2, #0
 8006ed4:	d000      	beq.n	8006ed8 <_strtod_l+0x340>
 8006ed6:	e6c5      	b.n	8006c64 <_strtod_l+0xcc>
 8006ed8:	2b69      	cmp	r3, #105	; 0x69
 8006eda:	d025      	beq.n	8006f28 <_strtod_l+0x390>
 8006edc:	dc21      	bgt.n	8006f22 <_strtod_l+0x38a>
 8006ede:	2b49      	cmp	r3, #73	; 0x49
 8006ee0:	d022      	beq.n	8006f28 <_strtod_l+0x390>
 8006ee2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ee4:	d000      	beq.n	8006ee8 <_strtod_l+0x350>
 8006ee6:	e6bd      	b.n	8006c64 <_strtod_l+0xcc>
 8006ee8:	49a0      	ldr	r1, [pc, #640]	; (800716c <_strtod_l+0x5d4>)
 8006eea:	a821      	add	r0, sp, #132	; 0x84
 8006eec:	f001 fe74 	bl	8008bd8 <__match>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d100      	bne.n	8006ef6 <_strtod_l+0x35e>
 8006ef4:	e6b6      	b.n	8006c64 <_strtod_l+0xcc>
 8006ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b28      	cmp	r3, #40	; 0x28
 8006efc:	d12a      	bne.n	8006f54 <_strtod_l+0x3bc>
 8006efe:	499c      	ldr	r1, [pc, #624]	; (8007170 <_strtod_l+0x5d8>)
 8006f00:	aa24      	add	r2, sp, #144	; 0x90
 8006f02:	a821      	add	r0, sp, #132	; 0x84
 8006f04:	f001 fe7c 	bl	8008c00 <__hexnan>
 8006f08:	2805      	cmp	r0, #5
 8006f0a:	d123      	bne.n	8006f54 <_strtod_l+0x3bc>
 8006f0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006f0e:	4a99      	ldr	r2, [pc, #612]	; (8007174 <_strtod_l+0x5dc>)
 8006f10:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006f12:	431a      	orrs	r2, r3
 8006f14:	0017      	movs	r7, r2
 8006f16:	e686      	b.n	8006c26 <_strtod_l+0x8e>
 8006f18:	210a      	movs	r1, #10
 8006f1a:	434a      	muls	r2, r1
 8006f1c:	18d2      	adds	r2, r2, r3
 8006f1e:	3a30      	subs	r2, #48	; 0x30
 8006f20:	e7b8      	b.n	8006e94 <_strtod_l+0x2fc>
 8006f22:	2b6e      	cmp	r3, #110	; 0x6e
 8006f24:	d0e0      	beq.n	8006ee8 <_strtod_l+0x350>
 8006f26:	e69d      	b.n	8006c64 <_strtod_l+0xcc>
 8006f28:	4993      	ldr	r1, [pc, #588]	; (8007178 <_strtod_l+0x5e0>)
 8006f2a:	a821      	add	r0, sp, #132	; 0x84
 8006f2c:	f001 fe54 	bl	8008bd8 <__match>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d100      	bne.n	8006f36 <_strtod_l+0x39e>
 8006f34:	e696      	b.n	8006c64 <_strtod_l+0xcc>
 8006f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f38:	4990      	ldr	r1, [pc, #576]	; (800717c <_strtod_l+0x5e4>)
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	a821      	add	r0, sp, #132	; 0x84
 8006f3e:	9321      	str	r3, [sp, #132]	; 0x84
 8006f40:	f001 fe4a 	bl	8008bd8 <__match>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d102      	bne.n	8006f4e <_strtod_l+0x3b6>
 8006f48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	9321      	str	r3, [sp, #132]	; 0x84
 8006f4e:	2600      	movs	r6, #0
 8006f50:	4f88      	ldr	r7, [pc, #544]	; (8007174 <_strtod_l+0x5dc>)
 8006f52:	e668      	b.n	8006c26 <_strtod_l+0x8e>
 8006f54:	488a      	ldr	r0, [pc, #552]	; (8007180 <_strtod_l+0x5e8>)
 8006f56:	f002 fe0f 	bl	8009b78 <nan>
 8006f5a:	0006      	movs	r6, r0
 8006f5c:	000f      	movs	r7, r1
 8006f5e:	e662      	b.n	8006c26 <_strtod_l+0x8e>
 8006f60:	9b07      	ldr	r3, [sp, #28]
 8006f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	930a      	str	r3, [sp, #40]	; 0x28
 8006f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <_strtod_l+0x3da>
 8006f6e:	9b06      	ldr	r3, [sp, #24]
 8006f70:	9309      	str	r3, [sp, #36]	; 0x24
 8006f72:	9c06      	ldr	r4, [sp, #24]
 8006f74:	2c10      	cmp	r4, #16
 8006f76:	dd00      	ble.n	8006f7a <_strtod_l+0x3e2>
 8006f78:	2410      	movs	r4, #16
 8006f7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f7c:	f7fb f8f6 	bl	800216c <__aeabi_ui2d>
 8006f80:	9b06      	ldr	r3, [sp, #24]
 8006f82:	0006      	movs	r6, r0
 8006f84:	000f      	movs	r7, r1
 8006f86:	2b09      	cmp	r3, #9
 8006f88:	dd15      	ble.n	8006fb6 <_strtod_l+0x41e>
 8006f8a:	0022      	movs	r2, r4
 8006f8c:	4b7d      	ldr	r3, [pc, #500]	; (8007184 <_strtod_l+0x5ec>)
 8006f8e:	3a09      	subs	r2, #9
 8006f90:	00d2      	lsls	r2, r2, #3
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f7fa fa66 	bl	8001468 <__aeabi_dmul>
 8006f9c:	0006      	movs	r6, r0
 8006f9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006fa0:	000f      	movs	r7, r1
 8006fa2:	f7fb f8e3 	bl	800216c <__aeabi_ui2d>
 8006fa6:	0002      	movs	r2, r0
 8006fa8:	000b      	movs	r3, r1
 8006faa:	0030      	movs	r0, r6
 8006fac:	0039      	movs	r1, r7
 8006fae:	f7f9 faeb 	bl	8000588 <__aeabi_dadd>
 8006fb2:	0006      	movs	r6, r0
 8006fb4:	000f      	movs	r7, r1
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	2b0f      	cmp	r3, #15
 8006fba:	dc39      	bgt.n	8007030 <_strtod_l+0x498>
 8006fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d100      	bne.n	8006fc4 <_strtod_l+0x42c>
 8006fc2:	e630      	b.n	8006c26 <_strtod_l+0x8e>
 8006fc4:	dd24      	ble.n	8007010 <_strtod_l+0x478>
 8006fc6:	2b16      	cmp	r3, #22
 8006fc8:	dc09      	bgt.n	8006fde <_strtod_l+0x446>
 8006fca:	00dd      	lsls	r5, r3, #3
 8006fcc:	0032      	movs	r2, r6
 8006fce:	003b      	movs	r3, r7
 8006fd0:	4c6c      	ldr	r4, [pc, #432]	; (8007184 <_strtod_l+0x5ec>)
 8006fd2:	1964      	adds	r4, r4, r5
 8006fd4:	6820      	ldr	r0, [r4, #0]
 8006fd6:	6861      	ldr	r1, [r4, #4]
 8006fd8:	f7fa fa46 	bl	8001468 <__aeabi_dmul>
 8006fdc:	e7bd      	b.n	8006f5a <_strtod_l+0x3c2>
 8006fde:	2325      	movs	r3, #37	; 0x25
 8006fe0:	9a06      	ldr	r2, [sp, #24]
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	db22      	blt.n	8007030 <_strtod_l+0x498>
 8006fea:	240f      	movs	r4, #15
 8006fec:	9b06      	ldr	r3, [sp, #24]
 8006fee:	4d65      	ldr	r5, [pc, #404]	; (8007184 <_strtod_l+0x5ec>)
 8006ff0:	1ae4      	subs	r4, r4, r3
 8006ff2:	00e1      	lsls	r1, r4, #3
 8006ff4:	1869      	adds	r1, r5, r1
 8006ff6:	0032      	movs	r2, r6
 8006ff8:	6808      	ldr	r0, [r1, #0]
 8006ffa:	6849      	ldr	r1, [r1, #4]
 8006ffc:	003b      	movs	r3, r7
 8006ffe:	f7fa fa33 	bl	8001468 <__aeabi_dmul>
 8007002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007004:	1b1c      	subs	r4, r3, r4
 8007006:	00e4      	lsls	r4, r4, #3
 8007008:	192c      	adds	r4, r5, r4
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	e7e3      	b.n	8006fd8 <_strtod_l+0x440>
 8007010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007012:	3316      	adds	r3, #22
 8007014:	db0c      	blt.n	8007030 <_strtod_l+0x498>
 8007016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007018:	9a07      	ldr	r2, [sp, #28]
 800701a:	0030      	movs	r0, r6
 800701c:	1a9a      	subs	r2, r3, r2
 800701e:	4b59      	ldr	r3, [pc, #356]	; (8007184 <_strtod_l+0x5ec>)
 8007020:	00d2      	lsls	r2, r2, #3
 8007022:	189b      	adds	r3, r3, r2
 8007024:	0039      	movs	r1, r7
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f7f9 fe17 	bl	8000c5c <__aeabi_ddiv>
 800702e:	e794      	b.n	8006f5a <_strtod_l+0x3c2>
 8007030:	9b06      	ldr	r3, [sp, #24]
 8007032:	1b1c      	subs	r4, r3, r4
 8007034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007036:	18e4      	adds	r4, r4, r3
 8007038:	2c00      	cmp	r4, #0
 800703a:	dd70      	ble.n	800711e <_strtod_l+0x586>
 800703c:	230f      	movs	r3, #15
 800703e:	0021      	movs	r1, r4
 8007040:	4019      	ands	r1, r3
 8007042:	421c      	tst	r4, r3
 8007044:	d00a      	beq.n	800705c <_strtod_l+0x4c4>
 8007046:	00cb      	lsls	r3, r1, #3
 8007048:	494e      	ldr	r1, [pc, #312]	; (8007184 <_strtod_l+0x5ec>)
 800704a:	0032      	movs	r2, r6
 800704c:	18c9      	adds	r1, r1, r3
 800704e:	6808      	ldr	r0, [r1, #0]
 8007050:	6849      	ldr	r1, [r1, #4]
 8007052:	003b      	movs	r3, r7
 8007054:	f7fa fa08 	bl	8001468 <__aeabi_dmul>
 8007058:	0006      	movs	r6, r0
 800705a:	000f      	movs	r7, r1
 800705c:	230f      	movs	r3, #15
 800705e:	439c      	bics	r4, r3
 8007060:	d048      	beq.n	80070f4 <_strtod_l+0x55c>
 8007062:	3326      	adds	r3, #38	; 0x26
 8007064:	33ff      	adds	r3, #255	; 0xff
 8007066:	429c      	cmp	r4, r3
 8007068:	dd22      	ble.n	80070b0 <_strtod_l+0x518>
 800706a:	2300      	movs	r3, #0
 800706c:	9306      	str	r3, [sp, #24]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	930b      	str	r3, [sp, #44]	; 0x2c
 8007072:	9309      	str	r3, [sp, #36]	; 0x24
 8007074:	2322      	movs	r3, #34	; 0x22
 8007076:	2600      	movs	r6, #0
 8007078:	9a05      	ldr	r2, [sp, #20]
 800707a:	4f3e      	ldr	r7, [pc, #248]	; (8007174 <_strtod_l+0x5dc>)
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007080:	42b3      	cmp	r3, r6
 8007082:	d100      	bne.n	8007086 <_strtod_l+0x4ee>
 8007084:	e5cf      	b.n	8006c26 <_strtod_l+0x8e>
 8007086:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007088:	9805      	ldr	r0, [sp, #20]
 800708a:	f001 fed7 	bl	8008e3c <_Bfree>
 800708e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007090:	9805      	ldr	r0, [sp, #20]
 8007092:	f001 fed3 	bl	8008e3c <_Bfree>
 8007096:	9907      	ldr	r1, [sp, #28]
 8007098:	9805      	ldr	r0, [sp, #20]
 800709a:	f001 fecf 	bl	8008e3c <_Bfree>
 800709e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070a0:	9805      	ldr	r0, [sp, #20]
 80070a2:	f001 fecb 	bl	8008e3c <_Bfree>
 80070a6:	9906      	ldr	r1, [sp, #24]
 80070a8:	9805      	ldr	r0, [sp, #20]
 80070aa:	f001 fec7 	bl	8008e3c <_Bfree>
 80070ae:	e5ba      	b.n	8006c26 <_strtod_l+0x8e>
 80070b0:	2300      	movs	r3, #0
 80070b2:	0030      	movs	r0, r6
 80070b4:	0039      	movs	r1, r7
 80070b6:	001d      	movs	r5, r3
 80070b8:	1124      	asrs	r4, r4, #4
 80070ba:	2c01      	cmp	r4, #1
 80070bc:	dc1d      	bgt.n	80070fa <_strtod_l+0x562>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <_strtod_l+0x52e>
 80070c2:	0006      	movs	r6, r0
 80070c4:	000f      	movs	r7, r1
 80070c6:	4b30      	ldr	r3, [pc, #192]	; (8007188 <_strtod_l+0x5f0>)
 80070c8:	00ed      	lsls	r5, r5, #3
 80070ca:	18ff      	adds	r7, r7, r3
 80070cc:	4b2f      	ldr	r3, [pc, #188]	; (800718c <_strtod_l+0x5f4>)
 80070ce:	0032      	movs	r2, r6
 80070d0:	195d      	adds	r5, r3, r5
 80070d2:	6828      	ldr	r0, [r5, #0]
 80070d4:	6869      	ldr	r1, [r5, #4]
 80070d6:	003b      	movs	r3, r7
 80070d8:	f7fa f9c6 	bl	8001468 <__aeabi_dmul>
 80070dc:	4b25      	ldr	r3, [pc, #148]	; (8007174 <_strtod_l+0x5dc>)
 80070de:	4a2c      	ldr	r2, [pc, #176]	; (8007190 <_strtod_l+0x5f8>)
 80070e0:	0006      	movs	r6, r0
 80070e2:	400b      	ands	r3, r1
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d8c0      	bhi.n	800706a <_strtod_l+0x4d2>
 80070e8:	4a2a      	ldr	r2, [pc, #168]	; (8007194 <_strtod_l+0x5fc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d913      	bls.n	8007116 <_strtod_l+0x57e>
 80070ee:	2601      	movs	r6, #1
 80070f0:	4f29      	ldr	r7, [pc, #164]	; (8007198 <_strtod_l+0x600>)
 80070f2:	4276      	negs	r6, r6
 80070f4:	2300      	movs	r3, #0
 80070f6:	9308      	str	r3, [sp, #32]
 80070f8:	e087      	b.n	800720a <_strtod_l+0x672>
 80070fa:	2201      	movs	r2, #1
 80070fc:	4214      	tst	r4, r2
 80070fe:	d007      	beq.n	8007110 <_strtod_l+0x578>
 8007100:	4a22      	ldr	r2, [pc, #136]	; (800718c <_strtod_l+0x5f4>)
 8007102:	00eb      	lsls	r3, r5, #3
 8007104:	189b      	adds	r3, r3, r2
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f7fa f9ad 	bl	8001468 <__aeabi_dmul>
 800710e:	2301      	movs	r3, #1
 8007110:	3501      	adds	r5, #1
 8007112:	1064      	asrs	r4, r4, #1
 8007114:	e7d1      	b.n	80070ba <_strtod_l+0x522>
 8007116:	23d4      	movs	r3, #212	; 0xd4
 8007118:	049b      	lsls	r3, r3, #18
 800711a:	18cf      	adds	r7, r1, r3
 800711c:	e7ea      	b.n	80070f4 <_strtod_l+0x55c>
 800711e:	2c00      	cmp	r4, #0
 8007120:	d0e8      	beq.n	80070f4 <_strtod_l+0x55c>
 8007122:	4264      	negs	r4, r4
 8007124:	220f      	movs	r2, #15
 8007126:	0023      	movs	r3, r4
 8007128:	4013      	ands	r3, r2
 800712a:	4214      	tst	r4, r2
 800712c:	d00a      	beq.n	8007144 <_strtod_l+0x5ac>
 800712e:	00da      	lsls	r2, r3, #3
 8007130:	4b14      	ldr	r3, [pc, #80]	; (8007184 <_strtod_l+0x5ec>)
 8007132:	0030      	movs	r0, r6
 8007134:	189b      	adds	r3, r3, r2
 8007136:	0039      	movs	r1, r7
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f7f9 fd8e 	bl	8000c5c <__aeabi_ddiv>
 8007140:	0006      	movs	r6, r0
 8007142:	000f      	movs	r7, r1
 8007144:	1124      	asrs	r4, r4, #4
 8007146:	d0d5      	beq.n	80070f4 <_strtod_l+0x55c>
 8007148:	2c1f      	cmp	r4, #31
 800714a:	dd27      	ble.n	800719c <_strtod_l+0x604>
 800714c:	2300      	movs	r3, #0
 800714e:	9306      	str	r3, [sp, #24]
 8007150:	9307      	str	r3, [sp, #28]
 8007152:	930b      	str	r3, [sp, #44]	; 0x2c
 8007154:	9309      	str	r3, [sp, #36]	; 0x24
 8007156:	2322      	movs	r3, #34	; 0x22
 8007158:	9a05      	ldr	r2, [sp, #20]
 800715a:	2600      	movs	r6, #0
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007160:	2700      	movs	r7, #0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d18f      	bne.n	8007086 <_strtod_l+0x4ee>
 8007166:	e55e      	b.n	8006c26 <_strtod_l+0x8e>
 8007168:	00004e1f 	.word	0x00004e1f
 800716c:	0800a901 	.word	0x0800a901
 8007170:	0800a944 	.word	0x0800a944
 8007174:	7ff00000 	.word	0x7ff00000
 8007178:	0800a8f9 	.word	0x0800a8f9
 800717c:	0800aa84 	.word	0x0800aa84
 8007180:	0800ad40 	.word	0x0800ad40
 8007184:	0800ac20 	.word	0x0800ac20
 8007188:	fcb00000 	.word	0xfcb00000
 800718c:	0800abf8 	.word	0x0800abf8
 8007190:	7ca00000 	.word	0x7ca00000
 8007194:	7c900000 	.word	0x7c900000
 8007198:	7fefffff 	.word	0x7fefffff
 800719c:	2310      	movs	r3, #16
 800719e:	0022      	movs	r2, r4
 80071a0:	401a      	ands	r2, r3
 80071a2:	9208      	str	r2, [sp, #32]
 80071a4:	421c      	tst	r4, r3
 80071a6:	d001      	beq.n	80071ac <_strtod_l+0x614>
 80071a8:	335a      	adds	r3, #90	; 0x5a
 80071aa:	9308      	str	r3, [sp, #32]
 80071ac:	0030      	movs	r0, r6
 80071ae:	0039      	movs	r1, r7
 80071b0:	2300      	movs	r3, #0
 80071b2:	4dca      	ldr	r5, [pc, #808]	; (80074dc <_strtod_l+0x944>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	4214      	tst	r4, r2
 80071b8:	d004      	beq.n	80071c4 <_strtod_l+0x62c>
 80071ba:	682a      	ldr	r2, [r5, #0]
 80071bc:	686b      	ldr	r3, [r5, #4]
 80071be:	f7fa f953 	bl	8001468 <__aeabi_dmul>
 80071c2:	2301      	movs	r3, #1
 80071c4:	1064      	asrs	r4, r4, #1
 80071c6:	3508      	adds	r5, #8
 80071c8:	2c00      	cmp	r4, #0
 80071ca:	d1f3      	bne.n	80071b4 <_strtod_l+0x61c>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <_strtod_l+0x63c>
 80071d0:	0006      	movs	r6, r0
 80071d2:	000f      	movs	r7, r1
 80071d4:	9b08      	ldr	r3, [sp, #32]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00f      	beq.n	80071fa <_strtod_l+0x662>
 80071da:	236b      	movs	r3, #107	; 0x6b
 80071dc:	0079      	lsls	r1, r7, #1
 80071de:	0d49      	lsrs	r1, r1, #21
 80071e0:	003a      	movs	r2, r7
 80071e2:	1a5b      	subs	r3, r3, r1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dd08      	ble.n	80071fa <_strtod_l+0x662>
 80071e8:	2b1f      	cmp	r3, #31
 80071ea:	dc00      	bgt.n	80071ee <_strtod_l+0x656>
 80071ec:	e126      	b.n	800743c <_strtod_l+0x8a4>
 80071ee:	2600      	movs	r6, #0
 80071f0:	2b34      	cmp	r3, #52	; 0x34
 80071f2:	dc00      	bgt.n	80071f6 <_strtod_l+0x65e>
 80071f4:	e11b      	b.n	800742e <_strtod_l+0x896>
 80071f6:	27dc      	movs	r7, #220	; 0xdc
 80071f8:	04bf      	lsls	r7, r7, #18
 80071fa:	2200      	movs	r2, #0
 80071fc:	2300      	movs	r3, #0
 80071fe:	0030      	movs	r0, r6
 8007200:	0039      	movs	r1, r7
 8007202:	f7f9 f923 	bl	800044c <__aeabi_dcmpeq>
 8007206:	2800      	cmp	r0, #0
 8007208:	d1a0      	bne.n	800714c <_strtod_l+0x5b4>
 800720a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800720c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007212:	9b06      	ldr	r3, [sp, #24]
 8007214:	9805      	ldr	r0, [sp, #20]
 8007216:	f001 fe79 	bl	8008f0c <__s2b>
 800721a:	900b      	str	r0, [sp, #44]	; 0x2c
 800721c:	2800      	cmp	r0, #0
 800721e:	d100      	bne.n	8007222 <_strtod_l+0x68a>
 8007220:	e723      	b.n	800706a <_strtod_l+0x4d2>
 8007222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007224:	9907      	ldr	r1, [sp, #28]
 8007226:	17da      	asrs	r2, r3, #31
 8007228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800722a:	1a5b      	subs	r3, r3, r1
 800722c:	401a      	ands	r2, r3
 800722e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007230:	9215      	str	r2, [sp, #84]	; 0x54
 8007232:	43db      	mvns	r3, r3
 8007234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007236:	17db      	asrs	r3, r3, #31
 8007238:	401a      	ands	r2, r3
 800723a:	2300      	movs	r3, #0
 800723c:	921c      	str	r2, [sp, #112]	; 0x70
 800723e:	9306      	str	r3, [sp, #24]
 8007240:	9307      	str	r3, [sp, #28]
 8007242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007244:	9805      	ldr	r0, [sp, #20]
 8007246:	6859      	ldr	r1, [r3, #4]
 8007248:	f001 fdb4 	bl	8008db4 <_Balloc>
 800724c:	9009      	str	r0, [sp, #36]	; 0x24
 800724e:	2800      	cmp	r0, #0
 8007250:	d100      	bne.n	8007254 <_strtod_l+0x6bc>
 8007252:	e70f      	b.n	8007074 <_strtod_l+0x4dc>
 8007254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007256:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	310c      	adds	r1, #12
 800725c:	1c9a      	adds	r2, r3, #2
 800725e:	0092      	lsls	r2, r2, #2
 8007260:	300c      	adds	r0, #12
 8007262:	930c      	str	r3, [sp, #48]	; 0x30
 8007264:	f001 fd9d 	bl	8008da2 <memcpy>
 8007268:	ab24      	add	r3, sp, #144	; 0x90
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	ab23      	add	r3, sp, #140	; 0x8c
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	0032      	movs	r2, r6
 8007272:	003b      	movs	r3, r7
 8007274:	9805      	ldr	r0, [sp, #20]
 8007276:	960e      	str	r6, [sp, #56]	; 0x38
 8007278:	970f      	str	r7, [sp, #60]	; 0x3c
 800727a:	f002 f995 	bl	80095a8 <__d2b>
 800727e:	9022      	str	r0, [sp, #136]	; 0x88
 8007280:	2800      	cmp	r0, #0
 8007282:	d100      	bne.n	8007286 <_strtod_l+0x6ee>
 8007284:	e6f6      	b.n	8007074 <_strtod_l+0x4dc>
 8007286:	2101      	movs	r1, #1
 8007288:	9805      	ldr	r0, [sp, #20]
 800728a:	f001 fed3 	bl	8009034 <__i2b>
 800728e:	9007      	str	r0, [sp, #28]
 8007290:	2800      	cmp	r0, #0
 8007292:	d100      	bne.n	8007296 <_strtod_l+0x6fe>
 8007294:	e6ee      	b.n	8007074 <_strtod_l+0x4dc>
 8007296:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007298:	2b00      	cmp	r3, #0
 800729a:	da00      	bge.n	800729e <_strtod_l+0x706>
 800729c:	e0d3      	b.n	8007446 <_strtod_l+0x8ae>
 800729e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072a0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80072a2:	189d      	adds	r5, r3, r2
 80072a4:	9908      	ldr	r1, [sp, #32]
 80072a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072a8:	1a5b      	subs	r3, r3, r1
 80072aa:	2136      	movs	r1, #54	; 0x36
 80072ac:	189b      	adds	r3, r3, r2
 80072ae:	1a8a      	subs	r2, r1, r2
 80072b0:	498b      	ldr	r1, [pc, #556]	; (80074e0 <_strtod_l+0x948>)
 80072b2:	3b01      	subs	r3, #1
 80072b4:	2001      	movs	r0, #1
 80072b6:	428b      	cmp	r3, r1
 80072b8:	db00      	blt.n	80072bc <_strtod_l+0x724>
 80072ba:	e0cf      	b.n	800745c <_strtod_l+0x8c4>
 80072bc:	1ac9      	subs	r1, r1, r3
 80072be:	1a52      	subs	r2, r2, r1
 80072c0:	291f      	cmp	r1, #31
 80072c2:	dd00      	ble.n	80072c6 <_strtod_l+0x72e>
 80072c4:	e0c3      	b.n	800744e <_strtod_l+0x8b6>
 80072c6:	4088      	lsls	r0, r1
 80072c8:	2300      	movs	r3, #0
 80072ca:	9014      	str	r0, [sp, #80]	; 0x50
 80072cc:	9312      	str	r3, [sp, #72]	; 0x48
 80072ce:	18ab      	adds	r3, r5, r2
 80072d0:	930c      	str	r3, [sp, #48]	; 0x30
 80072d2:	18a4      	adds	r4, r4, r2
 80072d4:	9b08      	ldr	r3, [sp, #32]
 80072d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072d8:	191c      	adds	r4, r3, r4
 80072da:	002b      	movs	r3, r5
 80072dc:	4295      	cmp	r5, r2
 80072de:	dd00      	ble.n	80072e2 <_strtod_l+0x74a>
 80072e0:	0013      	movs	r3, r2
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	dd00      	ble.n	80072e8 <_strtod_l+0x750>
 80072e6:	0023      	movs	r3, r4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dd04      	ble.n	80072f6 <_strtod_l+0x75e>
 80072ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ee:	1ae4      	subs	r4, r4, r3
 80072f0:	1ad2      	subs	r2, r2, r3
 80072f2:	920c      	str	r2, [sp, #48]	; 0x30
 80072f4:	1aed      	subs	r5, r5, r3
 80072f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	dd17      	ble.n	800732c <_strtod_l+0x794>
 80072fc:	001a      	movs	r2, r3
 80072fe:	9907      	ldr	r1, [sp, #28]
 8007300:	9805      	ldr	r0, [sp, #20]
 8007302:	f001 ff5d 	bl	80091c0 <__pow5mult>
 8007306:	9007      	str	r0, [sp, #28]
 8007308:	2800      	cmp	r0, #0
 800730a:	d100      	bne.n	800730e <_strtod_l+0x776>
 800730c:	e6b2      	b.n	8007074 <_strtod_l+0x4dc>
 800730e:	0001      	movs	r1, r0
 8007310:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007312:	9805      	ldr	r0, [sp, #20]
 8007314:	f001 fea4 	bl	8009060 <__multiply>
 8007318:	9011      	str	r0, [sp, #68]	; 0x44
 800731a:	2800      	cmp	r0, #0
 800731c:	d100      	bne.n	8007320 <_strtod_l+0x788>
 800731e:	e6a9      	b.n	8007074 <_strtod_l+0x4dc>
 8007320:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007322:	9805      	ldr	r0, [sp, #20]
 8007324:	f001 fd8a 	bl	8008e3c <_Bfree>
 8007328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800732a:	9322      	str	r3, [sp, #136]	; 0x88
 800732c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800732e:	2b00      	cmp	r3, #0
 8007330:	dd00      	ble.n	8007334 <_strtod_l+0x79c>
 8007332:	e096      	b.n	8007462 <_strtod_l+0x8ca>
 8007334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007336:	2b00      	cmp	r3, #0
 8007338:	dd08      	ble.n	800734c <_strtod_l+0x7b4>
 800733a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800733c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800733e:	9805      	ldr	r0, [sp, #20]
 8007340:	f001 ff3e 	bl	80091c0 <__pow5mult>
 8007344:	9009      	str	r0, [sp, #36]	; 0x24
 8007346:	2800      	cmp	r0, #0
 8007348:	d100      	bne.n	800734c <_strtod_l+0x7b4>
 800734a:	e693      	b.n	8007074 <_strtod_l+0x4dc>
 800734c:	2c00      	cmp	r4, #0
 800734e:	dd08      	ble.n	8007362 <_strtod_l+0x7ca>
 8007350:	0022      	movs	r2, r4
 8007352:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007354:	9805      	ldr	r0, [sp, #20]
 8007356:	f001 ff8f 	bl	8009278 <__lshift>
 800735a:	9009      	str	r0, [sp, #36]	; 0x24
 800735c:	2800      	cmp	r0, #0
 800735e:	d100      	bne.n	8007362 <_strtod_l+0x7ca>
 8007360:	e688      	b.n	8007074 <_strtod_l+0x4dc>
 8007362:	2d00      	cmp	r5, #0
 8007364:	dd08      	ble.n	8007378 <_strtod_l+0x7e0>
 8007366:	002a      	movs	r2, r5
 8007368:	9907      	ldr	r1, [sp, #28]
 800736a:	9805      	ldr	r0, [sp, #20]
 800736c:	f001 ff84 	bl	8009278 <__lshift>
 8007370:	9007      	str	r0, [sp, #28]
 8007372:	2800      	cmp	r0, #0
 8007374:	d100      	bne.n	8007378 <_strtod_l+0x7e0>
 8007376:	e67d      	b.n	8007074 <_strtod_l+0x4dc>
 8007378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800737a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800737c:	9805      	ldr	r0, [sp, #20]
 800737e:	f002 f807 	bl	8009390 <__mdiff>
 8007382:	9006      	str	r0, [sp, #24]
 8007384:	2800      	cmp	r0, #0
 8007386:	d100      	bne.n	800738a <_strtod_l+0x7f2>
 8007388:	e674      	b.n	8007074 <_strtod_l+0x4dc>
 800738a:	2200      	movs	r2, #0
 800738c:	68c3      	ldr	r3, [r0, #12]
 800738e:	9907      	ldr	r1, [sp, #28]
 8007390:	60c2      	str	r2, [r0, #12]
 8007392:	9311      	str	r3, [sp, #68]	; 0x44
 8007394:	f001 ffe0 	bl	8009358 <__mcmp>
 8007398:	2800      	cmp	r0, #0
 800739a:	da6c      	bge.n	8007476 <_strtod_l+0x8de>
 800739c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800739e:	4333      	orrs	r3, r6
 80073a0:	d000      	beq.n	80073a4 <_strtod_l+0x80c>
 80073a2:	e097      	b.n	80074d4 <_strtod_l+0x93c>
 80073a4:	033b      	lsls	r3, r7, #12
 80073a6:	d000      	beq.n	80073aa <_strtod_l+0x812>
 80073a8:	e094      	b.n	80074d4 <_strtod_l+0x93c>
 80073aa:	22d6      	movs	r2, #214	; 0xd6
 80073ac:	4b4d      	ldr	r3, [pc, #308]	; (80074e4 <_strtod_l+0x94c>)
 80073ae:	04d2      	lsls	r2, r2, #19
 80073b0:	403b      	ands	r3, r7
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d800      	bhi.n	80073b8 <_strtod_l+0x820>
 80073b6:	e08d      	b.n	80074d4 <_strtod_l+0x93c>
 80073b8:	9b06      	ldr	r3, [sp, #24]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	930a      	str	r3, [sp, #40]	; 0x28
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d105      	bne.n	80073ce <_strtod_l+0x836>
 80073c2:	9b06      	ldr	r3, [sp, #24]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	930a      	str	r3, [sp, #40]	; 0x28
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	dc00      	bgt.n	80073ce <_strtod_l+0x836>
 80073cc:	e082      	b.n	80074d4 <_strtod_l+0x93c>
 80073ce:	9906      	ldr	r1, [sp, #24]
 80073d0:	2201      	movs	r2, #1
 80073d2:	9805      	ldr	r0, [sp, #20]
 80073d4:	f001 ff50 	bl	8009278 <__lshift>
 80073d8:	9907      	ldr	r1, [sp, #28]
 80073da:	9006      	str	r0, [sp, #24]
 80073dc:	f001 ffbc 	bl	8009358 <__mcmp>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	dd77      	ble.n	80074d4 <_strtod_l+0x93c>
 80073e4:	9908      	ldr	r1, [sp, #32]
 80073e6:	003b      	movs	r3, r7
 80073e8:	4a3e      	ldr	r2, [pc, #248]	; (80074e4 <_strtod_l+0x94c>)
 80073ea:	2900      	cmp	r1, #0
 80073ec:	d100      	bne.n	80073f0 <_strtod_l+0x858>
 80073ee:	e09e      	b.n	800752e <_strtod_l+0x996>
 80073f0:	0011      	movs	r1, r2
 80073f2:	20d6      	movs	r0, #214	; 0xd6
 80073f4:	4039      	ands	r1, r7
 80073f6:	04c0      	lsls	r0, r0, #19
 80073f8:	4281      	cmp	r1, r0
 80073fa:	dd00      	ble.n	80073fe <_strtod_l+0x866>
 80073fc:	e097      	b.n	800752e <_strtod_l+0x996>
 80073fe:	23dc      	movs	r3, #220	; 0xdc
 8007400:	049b      	lsls	r3, r3, #18
 8007402:	4299      	cmp	r1, r3
 8007404:	dc00      	bgt.n	8007408 <_strtod_l+0x870>
 8007406:	e6a6      	b.n	8007156 <_strtod_l+0x5be>
 8007408:	4b37      	ldr	r3, [pc, #220]	; (80074e8 <_strtod_l+0x950>)
 800740a:	0030      	movs	r0, r6
 800740c:	931b      	str	r3, [sp, #108]	; 0x6c
 800740e:	2300      	movs	r3, #0
 8007410:	931a      	str	r3, [sp, #104]	; 0x68
 8007412:	0039      	movs	r1, r7
 8007414:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007418:	f7fa f826 	bl	8001468 <__aeabi_dmul>
 800741c:	0006      	movs	r6, r0
 800741e:	000f      	movs	r7, r1
 8007420:	4308      	orrs	r0, r1
 8007422:	d000      	beq.n	8007426 <_strtod_l+0x88e>
 8007424:	e62f      	b.n	8007086 <_strtod_l+0x4ee>
 8007426:	2322      	movs	r3, #34	; 0x22
 8007428:	9a05      	ldr	r2, [sp, #20]
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	e62b      	b.n	8007086 <_strtod_l+0x4ee>
 800742e:	2101      	movs	r1, #1
 8007430:	3b20      	subs	r3, #32
 8007432:	4249      	negs	r1, r1
 8007434:	4099      	lsls	r1, r3
 8007436:	400a      	ands	r2, r1
 8007438:	0017      	movs	r7, r2
 800743a:	e6de      	b.n	80071fa <_strtod_l+0x662>
 800743c:	2201      	movs	r2, #1
 800743e:	4252      	negs	r2, r2
 8007440:	409a      	lsls	r2, r3
 8007442:	4016      	ands	r6, r2
 8007444:	e6d9      	b.n	80071fa <_strtod_l+0x662>
 8007446:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007448:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800744a:	1ad4      	subs	r4, r2, r3
 800744c:	e72a      	b.n	80072a4 <_strtod_l+0x70c>
 800744e:	4927      	ldr	r1, [pc, #156]	; (80074ec <_strtod_l+0x954>)
 8007450:	1acb      	subs	r3, r1, r3
 8007452:	0001      	movs	r1, r0
 8007454:	4099      	lsls	r1, r3
 8007456:	9112      	str	r1, [sp, #72]	; 0x48
 8007458:	9014      	str	r0, [sp, #80]	; 0x50
 800745a:	e738      	b.n	80072ce <_strtod_l+0x736>
 800745c:	2300      	movs	r3, #0
 800745e:	9312      	str	r3, [sp, #72]	; 0x48
 8007460:	e7fa      	b.n	8007458 <_strtod_l+0x8c0>
 8007462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007464:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007466:	9805      	ldr	r0, [sp, #20]
 8007468:	f001 ff06 	bl	8009278 <__lshift>
 800746c:	9022      	str	r0, [sp, #136]	; 0x88
 800746e:	2800      	cmp	r0, #0
 8007470:	d000      	beq.n	8007474 <_strtod_l+0x8dc>
 8007472:	e75f      	b.n	8007334 <_strtod_l+0x79c>
 8007474:	e5fe      	b.n	8007074 <_strtod_l+0x4dc>
 8007476:	970c      	str	r7, [sp, #48]	; 0x30
 8007478:	2800      	cmp	r0, #0
 800747a:	d176      	bne.n	800756a <_strtod_l+0x9d2>
 800747c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800747e:	033b      	lsls	r3, r7, #12
 8007480:	0b1b      	lsrs	r3, r3, #12
 8007482:	2a00      	cmp	r2, #0
 8007484:	d038      	beq.n	80074f8 <_strtod_l+0x960>
 8007486:	4a1a      	ldr	r2, [pc, #104]	; (80074f0 <_strtod_l+0x958>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d138      	bne.n	80074fe <_strtod_l+0x966>
 800748c:	2201      	movs	r2, #1
 800748e:	9b08      	ldr	r3, [sp, #32]
 8007490:	4252      	negs	r2, r2
 8007492:	0031      	movs	r1, r6
 8007494:	0010      	movs	r0, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <_strtod_l+0x91a>
 800749a:	24d4      	movs	r4, #212	; 0xd4
 800749c:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <_strtod_l+0x94c>)
 800749e:	0010      	movs	r0, r2
 80074a0:	403b      	ands	r3, r7
 80074a2:	04e4      	lsls	r4, r4, #19
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	d804      	bhi.n	80074b2 <_strtod_l+0x91a>
 80074a8:	306c      	adds	r0, #108	; 0x6c
 80074aa:	0d1b      	lsrs	r3, r3, #20
 80074ac:	1ac3      	subs	r3, r0, r3
 80074ae:	409a      	lsls	r2, r3
 80074b0:	0010      	movs	r0, r2
 80074b2:	4281      	cmp	r1, r0
 80074b4:	d123      	bne.n	80074fe <_strtod_l+0x966>
 80074b6:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <_strtod_l+0x95c>)
 80074b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d102      	bne.n	80074c4 <_strtod_l+0x92c>
 80074be:	1c4b      	adds	r3, r1, #1
 80074c0:	d100      	bne.n	80074c4 <_strtod_l+0x92c>
 80074c2:	e5d7      	b.n	8007074 <_strtod_l+0x4dc>
 80074c4:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <_strtod_l+0x94c>)
 80074c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074c8:	2600      	movs	r6, #0
 80074ca:	401a      	ands	r2, r3
 80074cc:	0013      	movs	r3, r2
 80074ce:	2280      	movs	r2, #128	; 0x80
 80074d0:	0352      	lsls	r2, r2, #13
 80074d2:	189f      	adds	r7, r3, r2
 80074d4:	9b08      	ldr	r3, [sp, #32]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d196      	bne.n	8007408 <_strtod_l+0x870>
 80074da:	e5d4      	b.n	8007086 <_strtod_l+0x4ee>
 80074dc:	0800a958 	.word	0x0800a958
 80074e0:	fffffc02 	.word	0xfffffc02
 80074e4:	7ff00000 	.word	0x7ff00000
 80074e8:	39500000 	.word	0x39500000
 80074ec:	fffffbe2 	.word	0xfffffbe2
 80074f0:	000fffff 	.word	0x000fffff
 80074f4:	7fefffff 	.word	0x7fefffff
 80074f8:	4333      	orrs	r3, r6
 80074fa:	d100      	bne.n	80074fe <_strtod_l+0x966>
 80074fc:	e772      	b.n	80073e4 <_strtod_l+0x84c>
 80074fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01d      	beq.n	8007540 <_strtod_l+0x9a8>
 8007504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007506:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007508:	4213      	tst	r3, r2
 800750a:	d0e3      	beq.n	80074d4 <_strtod_l+0x93c>
 800750c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800750e:	0030      	movs	r0, r6
 8007510:	0039      	movs	r1, r7
 8007512:	9a08      	ldr	r2, [sp, #32]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d017      	beq.n	8007548 <_strtod_l+0x9b0>
 8007518:	f7ff fb26 	bl	8006b68 <sulp>
 800751c:	0002      	movs	r2, r0
 800751e:	000b      	movs	r3, r1
 8007520:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007522:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007524:	f7f9 f830 	bl	8000588 <__aeabi_dadd>
 8007528:	0006      	movs	r6, r0
 800752a:	000f      	movs	r7, r1
 800752c:	e7d2      	b.n	80074d4 <_strtod_l+0x93c>
 800752e:	2601      	movs	r6, #1
 8007530:	4013      	ands	r3, r2
 8007532:	4a9b      	ldr	r2, [pc, #620]	; (80077a0 <_strtod_l+0xc08>)
 8007534:	4276      	negs	r6, r6
 8007536:	189b      	adds	r3, r3, r2
 8007538:	4a9a      	ldr	r2, [pc, #616]	; (80077a4 <_strtod_l+0xc0c>)
 800753a:	431a      	orrs	r2, r3
 800753c:	0017      	movs	r7, r2
 800753e:	e7c9      	b.n	80074d4 <_strtod_l+0x93c>
 8007540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007542:	4233      	tst	r3, r6
 8007544:	d0c6      	beq.n	80074d4 <_strtod_l+0x93c>
 8007546:	e7e1      	b.n	800750c <_strtod_l+0x974>
 8007548:	f7ff fb0e 	bl	8006b68 <sulp>
 800754c:	0002      	movs	r2, r0
 800754e:	000b      	movs	r3, r1
 8007550:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007552:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007554:	f7fa f9f4 	bl	8001940 <__aeabi_dsub>
 8007558:	2200      	movs	r2, #0
 800755a:	2300      	movs	r3, #0
 800755c:	0006      	movs	r6, r0
 800755e:	000f      	movs	r7, r1
 8007560:	f7f8 ff74 	bl	800044c <__aeabi_dcmpeq>
 8007564:	2800      	cmp	r0, #0
 8007566:	d0b5      	beq.n	80074d4 <_strtod_l+0x93c>
 8007568:	e5f5      	b.n	8007156 <_strtod_l+0x5be>
 800756a:	9907      	ldr	r1, [sp, #28]
 800756c:	9806      	ldr	r0, [sp, #24]
 800756e:	f002 f87f 	bl	8009670 <__ratio>
 8007572:	2380      	movs	r3, #128	; 0x80
 8007574:	2200      	movs	r2, #0
 8007576:	05db      	lsls	r3, r3, #23
 8007578:	0004      	movs	r4, r0
 800757a:	000d      	movs	r5, r1
 800757c:	f7f8 ff76 	bl	800046c <__aeabi_dcmple>
 8007580:	2800      	cmp	r0, #0
 8007582:	d079      	beq.n	8007678 <_strtod_l+0xae0>
 8007584:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007586:	2b00      	cmp	r3, #0
 8007588:	d04b      	beq.n	8007622 <_strtod_l+0xa8a>
 800758a:	2300      	movs	r3, #0
 800758c:	4c86      	ldr	r4, [pc, #536]	; (80077a8 <_strtod_l+0xc10>)
 800758e:	2500      	movs	r5, #0
 8007590:	9312      	str	r3, [sp, #72]	; 0x48
 8007592:	9413      	str	r4, [sp, #76]	; 0x4c
 8007594:	4c84      	ldr	r4, [pc, #528]	; (80077a8 <_strtod_l+0xc10>)
 8007596:	4a85      	ldr	r2, [pc, #532]	; (80077ac <_strtod_l+0xc14>)
 8007598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800759a:	4013      	ands	r3, r2
 800759c:	9314      	str	r3, [sp, #80]	; 0x50
 800759e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075a0:	4b83      	ldr	r3, [pc, #524]	; (80077b0 <_strtod_l+0xc18>)
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d000      	beq.n	80075a8 <_strtod_l+0xa10>
 80075a6:	e0b0      	b.n	800770a <_strtod_l+0xb72>
 80075a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075ac:	921a      	str	r2, [sp, #104]	; 0x68
 80075ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80075b0:	4a80      	ldr	r2, [pc, #512]	; (80077b4 <_strtod_l+0xc1c>)
 80075b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b4:	4694      	mov	ip, r2
 80075b6:	4463      	add	r3, ip
 80075b8:	001f      	movs	r7, r3
 80075ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075be:	0030      	movs	r0, r6
 80075c0:	0039      	movs	r1, r7
 80075c2:	920c      	str	r2, [sp, #48]	; 0x30
 80075c4:	930d      	str	r3, [sp, #52]	; 0x34
 80075c6:	f001 ff7b 	bl	80094c0 <__ulp>
 80075ca:	0002      	movs	r2, r0
 80075cc:	000b      	movs	r3, r1
 80075ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80075d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075d2:	f7f9 ff49 	bl	8001468 <__aeabi_dmul>
 80075d6:	0032      	movs	r2, r6
 80075d8:	003b      	movs	r3, r7
 80075da:	f7f8 ffd5 	bl	8000588 <__aeabi_dadd>
 80075de:	4a73      	ldr	r2, [pc, #460]	; (80077ac <_strtod_l+0xc14>)
 80075e0:	4b75      	ldr	r3, [pc, #468]	; (80077b8 <_strtod_l+0xc20>)
 80075e2:	0006      	movs	r6, r0
 80075e4:	400a      	ands	r2, r1
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d95e      	bls.n	80076a8 <_strtod_l+0xb10>
 80075ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075ec:	4a73      	ldr	r2, [pc, #460]	; (80077bc <_strtod_l+0xc24>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d103      	bne.n	80075fa <_strtod_l+0xa62>
 80075f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f4:	3301      	adds	r3, #1
 80075f6:	d100      	bne.n	80075fa <_strtod_l+0xa62>
 80075f8:	e53c      	b.n	8007074 <_strtod_l+0x4dc>
 80075fa:	2601      	movs	r6, #1
 80075fc:	4f6f      	ldr	r7, [pc, #444]	; (80077bc <_strtod_l+0xc24>)
 80075fe:	4276      	negs	r6, r6
 8007600:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007602:	9805      	ldr	r0, [sp, #20]
 8007604:	f001 fc1a 	bl	8008e3c <_Bfree>
 8007608:	9909      	ldr	r1, [sp, #36]	; 0x24
 800760a:	9805      	ldr	r0, [sp, #20]
 800760c:	f001 fc16 	bl	8008e3c <_Bfree>
 8007610:	9907      	ldr	r1, [sp, #28]
 8007612:	9805      	ldr	r0, [sp, #20]
 8007614:	f001 fc12 	bl	8008e3c <_Bfree>
 8007618:	9906      	ldr	r1, [sp, #24]
 800761a:	9805      	ldr	r0, [sp, #20]
 800761c:	f001 fc0e 	bl	8008e3c <_Bfree>
 8007620:	e60f      	b.n	8007242 <_strtod_l+0x6aa>
 8007622:	2e00      	cmp	r6, #0
 8007624:	d11c      	bne.n	8007660 <_strtod_l+0xac8>
 8007626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007628:	031b      	lsls	r3, r3, #12
 800762a:	d11f      	bne.n	800766c <_strtod_l+0xad4>
 800762c:	2200      	movs	r2, #0
 800762e:	0020      	movs	r0, r4
 8007630:	0029      	movs	r1, r5
 8007632:	4b5d      	ldr	r3, [pc, #372]	; (80077a8 <_strtod_l+0xc10>)
 8007634:	f7f8 ff10 	bl	8000458 <__aeabi_dcmplt>
 8007638:	2800      	cmp	r0, #0
 800763a:	d11a      	bne.n	8007672 <_strtod_l+0xada>
 800763c:	0020      	movs	r0, r4
 800763e:	0029      	movs	r1, r5
 8007640:	2200      	movs	r2, #0
 8007642:	4b5f      	ldr	r3, [pc, #380]	; (80077c0 <_strtod_l+0xc28>)
 8007644:	f7f9 ff10 	bl	8001468 <__aeabi_dmul>
 8007648:	0005      	movs	r5, r0
 800764a:	000c      	movs	r4, r1
 800764c:	2380      	movs	r3, #128	; 0x80
 800764e:	061b      	lsls	r3, r3, #24
 8007650:	18e3      	adds	r3, r4, r3
 8007652:	951e      	str	r5, [sp, #120]	; 0x78
 8007654:	931f      	str	r3, [sp, #124]	; 0x7c
 8007656:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007658:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800765a:	9212      	str	r2, [sp, #72]	; 0x48
 800765c:	9313      	str	r3, [sp, #76]	; 0x4c
 800765e:	e79a      	b.n	8007596 <_strtod_l+0x9fe>
 8007660:	2e01      	cmp	r6, #1
 8007662:	d103      	bne.n	800766c <_strtod_l+0xad4>
 8007664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007666:	2b00      	cmp	r3, #0
 8007668:	d100      	bne.n	800766c <_strtod_l+0xad4>
 800766a:	e574      	b.n	8007156 <_strtod_l+0x5be>
 800766c:	2300      	movs	r3, #0
 800766e:	4c55      	ldr	r4, [pc, #340]	; (80077c4 <_strtod_l+0xc2c>)
 8007670:	e78d      	b.n	800758e <_strtod_l+0x9f6>
 8007672:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007674:	4c52      	ldr	r4, [pc, #328]	; (80077c0 <_strtod_l+0xc28>)
 8007676:	e7e9      	b.n	800764c <_strtod_l+0xab4>
 8007678:	2200      	movs	r2, #0
 800767a:	0020      	movs	r0, r4
 800767c:	0029      	movs	r1, r5
 800767e:	4b50      	ldr	r3, [pc, #320]	; (80077c0 <_strtod_l+0xc28>)
 8007680:	f7f9 fef2 	bl	8001468 <__aeabi_dmul>
 8007684:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007686:	0005      	movs	r5, r0
 8007688:	000b      	movs	r3, r1
 800768a:	000c      	movs	r4, r1
 800768c:	2a00      	cmp	r2, #0
 800768e:	d107      	bne.n	80076a0 <_strtod_l+0xb08>
 8007690:	2280      	movs	r2, #128	; 0x80
 8007692:	0612      	lsls	r2, r2, #24
 8007694:	188b      	adds	r3, r1, r2
 8007696:	9016      	str	r0, [sp, #88]	; 0x58
 8007698:	9317      	str	r3, [sp, #92]	; 0x5c
 800769a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800769c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800769e:	e7dc      	b.n	800765a <_strtod_l+0xac2>
 80076a0:	0002      	movs	r2, r0
 80076a2:	9216      	str	r2, [sp, #88]	; 0x58
 80076a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80076a6:	e7f8      	b.n	800769a <_strtod_l+0xb02>
 80076a8:	23d4      	movs	r3, #212	; 0xd4
 80076aa:	049b      	lsls	r3, r3, #18
 80076ac:	18cf      	adds	r7, r1, r3
 80076ae:	9b08      	ldr	r3, [sp, #32]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1a5      	bne.n	8007600 <_strtod_l+0xa68>
 80076b4:	4b3d      	ldr	r3, [pc, #244]	; (80077ac <_strtod_l+0xc14>)
 80076b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076b8:	403b      	ands	r3, r7
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d1a0      	bne.n	8007600 <_strtod_l+0xa68>
 80076be:	0028      	movs	r0, r5
 80076c0:	0021      	movs	r1, r4
 80076c2:	f7f8 ff0f 	bl	80004e4 <__aeabi_d2lz>
 80076c6:	f7f8 ff49 	bl	800055c <__aeabi_l2d>
 80076ca:	0002      	movs	r2, r0
 80076cc:	000b      	movs	r3, r1
 80076ce:	0028      	movs	r0, r5
 80076d0:	0021      	movs	r1, r4
 80076d2:	f7fa f935 	bl	8001940 <__aeabi_dsub>
 80076d6:	033b      	lsls	r3, r7, #12
 80076d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076da:	0b1b      	lsrs	r3, r3, #12
 80076dc:	4333      	orrs	r3, r6
 80076de:	4313      	orrs	r3, r2
 80076e0:	0004      	movs	r4, r0
 80076e2:	000d      	movs	r5, r1
 80076e4:	4a38      	ldr	r2, [pc, #224]	; (80077c8 <_strtod_l+0xc30>)
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d055      	beq.n	8007796 <_strtod_l+0xbfe>
 80076ea:	4b38      	ldr	r3, [pc, #224]	; (80077cc <_strtod_l+0xc34>)
 80076ec:	f7f8 feb4 	bl	8000458 <__aeabi_dcmplt>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d000      	beq.n	80076f6 <_strtod_l+0xb5e>
 80076f4:	e4c7      	b.n	8007086 <_strtod_l+0x4ee>
 80076f6:	0020      	movs	r0, r4
 80076f8:	0029      	movs	r1, r5
 80076fa:	4a35      	ldr	r2, [pc, #212]	; (80077d0 <_strtod_l+0xc38>)
 80076fc:	4b30      	ldr	r3, [pc, #192]	; (80077c0 <_strtod_l+0xc28>)
 80076fe:	f7f8 febf 	bl	8000480 <__aeabi_dcmpgt>
 8007702:	2800      	cmp	r0, #0
 8007704:	d100      	bne.n	8007708 <_strtod_l+0xb70>
 8007706:	e77b      	b.n	8007600 <_strtod_l+0xa68>
 8007708:	e4bd      	b.n	8007086 <_strtod_l+0x4ee>
 800770a:	9b08      	ldr	r3, [sp, #32]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d02b      	beq.n	8007768 <_strtod_l+0xbd0>
 8007710:	23d4      	movs	r3, #212	; 0xd4
 8007712:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007714:	04db      	lsls	r3, r3, #19
 8007716:	429a      	cmp	r2, r3
 8007718:	d826      	bhi.n	8007768 <_strtod_l+0xbd0>
 800771a:	0028      	movs	r0, r5
 800771c:	0021      	movs	r1, r4
 800771e:	4a2d      	ldr	r2, [pc, #180]	; (80077d4 <_strtod_l+0xc3c>)
 8007720:	4b2d      	ldr	r3, [pc, #180]	; (80077d8 <_strtod_l+0xc40>)
 8007722:	f7f8 fea3 	bl	800046c <__aeabi_dcmple>
 8007726:	2800      	cmp	r0, #0
 8007728:	d017      	beq.n	800775a <_strtod_l+0xbc2>
 800772a:	0028      	movs	r0, r5
 800772c:	0021      	movs	r1, r4
 800772e:	f7f8 febb 	bl	80004a8 <__aeabi_d2uiz>
 8007732:	2800      	cmp	r0, #0
 8007734:	d100      	bne.n	8007738 <_strtod_l+0xba0>
 8007736:	3001      	adds	r0, #1
 8007738:	f7fa fd18 	bl	800216c <__aeabi_ui2d>
 800773c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800773e:	0005      	movs	r5, r0
 8007740:	000b      	movs	r3, r1
 8007742:	000c      	movs	r4, r1
 8007744:	2a00      	cmp	r2, #0
 8007746:	d122      	bne.n	800778e <_strtod_l+0xbf6>
 8007748:	2280      	movs	r2, #128	; 0x80
 800774a:	0612      	lsls	r2, r2, #24
 800774c:	188b      	adds	r3, r1, r2
 800774e:	9018      	str	r0, [sp, #96]	; 0x60
 8007750:	9319      	str	r3, [sp, #100]	; 0x64
 8007752:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007754:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007756:	9212      	str	r2, [sp, #72]	; 0x48
 8007758:	9313      	str	r3, [sp, #76]	; 0x4c
 800775a:	22d6      	movs	r2, #214	; 0xd6
 800775c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800775e:	04d2      	lsls	r2, r2, #19
 8007760:	189b      	adds	r3, r3, r2
 8007762:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	9313      	str	r3, [sp, #76]	; 0x4c
 8007768:	980e      	ldr	r0, [sp, #56]	; 0x38
 800776a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800776c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800776e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007770:	f001 fea6 	bl	80094c0 <__ulp>
 8007774:	0002      	movs	r2, r0
 8007776:	000b      	movs	r3, r1
 8007778:	0030      	movs	r0, r6
 800777a:	0039      	movs	r1, r7
 800777c:	f7f9 fe74 	bl	8001468 <__aeabi_dmul>
 8007780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007784:	f7f8 ff00 	bl	8000588 <__aeabi_dadd>
 8007788:	0006      	movs	r6, r0
 800778a:	000f      	movs	r7, r1
 800778c:	e78f      	b.n	80076ae <_strtod_l+0xb16>
 800778e:	0002      	movs	r2, r0
 8007790:	9218      	str	r2, [sp, #96]	; 0x60
 8007792:	9319      	str	r3, [sp, #100]	; 0x64
 8007794:	e7dd      	b.n	8007752 <_strtod_l+0xbba>
 8007796:	4b11      	ldr	r3, [pc, #68]	; (80077dc <_strtod_l+0xc44>)
 8007798:	f7f8 fe5e 	bl	8000458 <__aeabi_dcmplt>
 800779c:	e7b1      	b.n	8007702 <_strtod_l+0xb6a>
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	fff00000 	.word	0xfff00000
 80077a4:	000fffff 	.word	0x000fffff
 80077a8:	3ff00000 	.word	0x3ff00000
 80077ac:	7ff00000 	.word	0x7ff00000
 80077b0:	7fe00000 	.word	0x7fe00000
 80077b4:	fcb00000 	.word	0xfcb00000
 80077b8:	7c9fffff 	.word	0x7c9fffff
 80077bc:	7fefffff 	.word	0x7fefffff
 80077c0:	3fe00000 	.word	0x3fe00000
 80077c4:	bff00000 	.word	0xbff00000
 80077c8:	94a03595 	.word	0x94a03595
 80077cc:	3fdfffff 	.word	0x3fdfffff
 80077d0:	35afe535 	.word	0x35afe535
 80077d4:	ffc00000 	.word	0xffc00000
 80077d8:	41dfffff 	.word	0x41dfffff
 80077dc:	3fcfffff 	.word	0x3fcfffff

080077e0 <_strtod_r>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	4b02      	ldr	r3, [pc, #8]	; (80077ec <_strtod_r+0xc>)
 80077e4:	f7ff f9d8 	bl	8006b98 <_strtod_l>
 80077e8:	bd10      	pop	{r4, pc}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	20000088 	.word	0x20000088

080077f0 <_strtol_l.isra.0>:
 80077f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077f2:	b087      	sub	sp, #28
 80077f4:	001e      	movs	r6, r3
 80077f6:	9005      	str	r0, [sp, #20]
 80077f8:	9101      	str	r1, [sp, #4]
 80077fa:	9202      	str	r2, [sp, #8]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d045      	beq.n	800788c <_strtol_l.isra.0+0x9c>
 8007800:	0008      	movs	r0, r1
 8007802:	2b24      	cmp	r3, #36	; 0x24
 8007804:	d842      	bhi.n	800788c <_strtol_l.isra.0+0x9c>
 8007806:	4b3f      	ldr	r3, [pc, #252]	; (8007904 <_strtol_l.isra.0+0x114>)
 8007808:	2208      	movs	r2, #8
 800780a:	469c      	mov	ip, r3
 800780c:	0003      	movs	r3, r0
 800780e:	4661      	mov	r1, ip
 8007810:	781c      	ldrb	r4, [r3, #0]
 8007812:	1c45      	adds	r5, r0, #1
 8007814:	5d09      	ldrb	r1, [r1, r4]
 8007816:	0028      	movs	r0, r5
 8007818:	000f      	movs	r7, r1
 800781a:	4017      	ands	r7, r2
 800781c:	4211      	tst	r1, r2
 800781e:	d1f5      	bne.n	800780c <_strtol_l.isra.0+0x1c>
 8007820:	2c2d      	cmp	r4, #45	; 0x2d
 8007822:	d13a      	bne.n	800789a <_strtol_l.isra.0+0xaa>
 8007824:	2701      	movs	r7, #1
 8007826:	782c      	ldrb	r4, [r5, #0]
 8007828:	1c9d      	adds	r5, r3, #2
 800782a:	2e00      	cmp	r6, #0
 800782c:	d065      	beq.n	80078fa <_strtol_l.isra.0+0x10a>
 800782e:	2e10      	cmp	r6, #16
 8007830:	d109      	bne.n	8007846 <_strtol_l.isra.0+0x56>
 8007832:	2c30      	cmp	r4, #48	; 0x30
 8007834:	d107      	bne.n	8007846 <_strtol_l.isra.0+0x56>
 8007836:	2220      	movs	r2, #32
 8007838:	782b      	ldrb	r3, [r5, #0]
 800783a:	4393      	bics	r3, r2
 800783c:	2b58      	cmp	r3, #88	; 0x58
 800783e:	d157      	bne.n	80078f0 <_strtol_l.isra.0+0x100>
 8007840:	2610      	movs	r6, #16
 8007842:	786c      	ldrb	r4, [r5, #1]
 8007844:	3502      	adds	r5, #2
 8007846:	4b30      	ldr	r3, [pc, #192]	; (8007908 <_strtol_l.isra.0+0x118>)
 8007848:	0031      	movs	r1, r6
 800784a:	18fb      	adds	r3, r7, r3
 800784c:	0018      	movs	r0, r3
 800784e:	9303      	str	r3, [sp, #12]
 8007850:	f7f8 fcfc 	bl	800024c <__aeabi_uidivmod>
 8007854:	2300      	movs	r3, #0
 8007856:	2201      	movs	r2, #1
 8007858:	4684      	mov	ip, r0
 800785a:	0018      	movs	r0, r3
 800785c:	9104      	str	r1, [sp, #16]
 800785e:	4252      	negs	r2, r2
 8007860:	0021      	movs	r1, r4
 8007862:	3930      	subs	r1, #48	; 0x30
 8007864:	2909      	cmp	r1, #9
 8007866:	d81d      	bhi.n	80078a4 <_strtol_l.isra.0+0xb4>
 8007868:	000c      	movs	r4, r1
 800786a:	42a6      	cmp	r6, r4
 800786c:	dd28      	ble.n	80078c0 <_strtol_l.isra.0+0xd0>
 800786e:	2b00      	cmp	r3, #0
 8007870:	db24      	blt.n	80078bc <_strtol_l.isra.0+0xcc>
 8007872:	0013      	movs	r3, r2
 8007874:	4584      	cmp	ip, r0
 8007876:	d306      	bcc.n	8007886 <_strtol_l.isra.0+0x96>
 8007878:	d102      	bne.n	8007880 <_strtol_l.isra.0+0x90>
 800787a:	9904      	ldr	r1, [sp, #16]
 800787c:	42a1      	cmp	r1, r4
 800787e:	db02      	blt.n	8007886 <_strtol_l.isra.0+0x96>
 8007880:	2301      	movs	r3, #1
 8007882:	4370      	muls	r0, r6
 8007884:	1820      	adds	r0, r4, r0
 8007886:	782c      	ldrb	r4, [r5, #0]
 8007888:	3501      	adds	r5, #1
 800788a:	e7e9      	b.n	8007860 <_strtol_l.isra.0+0x70>
 800788c:	f7fe fa94 	bl	8005db8 <__errno>
 8007890:	2316      	movs	r3, #22
 8007892:	6003      	str	r3, [r0, #0]
 8007894:	2000      	movs	r0, #0
 8007896:	b007      	add	sp, #28
 8007898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800789a:	2c2b      	cmp	r4, #43	; 0x2b
 800789c:	d1c5      	bne.n	800782a <_strtol_l.isra.0+0x3a>
 800789e:	782c      	ldrb	r4, [r5, #0]
 80078a0:	1c9d      	adds	r5, r3, #2
 80078a2:	e7c2      	b.n	800782a <_strtol_l.isra.0+0x3a>
 80078a4:	0021      	movs	r1, r4
 80078a6:	3941      	subs	r1, #65	; 0x41
 80078a8:	2919      	cmp	r1, #25
 80078aa:	d801      	bhi.n	80078b0 <_strtol_l.isra.0+0xc0>
 80078ac:	3c37      	subs	r4, #55	; 0x37
 80078ae:	e7dc      	b.n	800786a <_strtol_l.isra.0+0x7a>
 80078b0:	0021      	movs	r1, r4
 80078b2:	3961      	subs	r1, #97	; 0x61
 80078b4:	2919      	cmp	r1, #25
 80078b6:	d803      	bhi.n	80078c0 <_strtol_l.isra.0+0xd0>
 80078b8:	3c57      	subs	r4, #87	; 0x57
 80078ba:	e7d6      	b.n	800786a <_strtol_l.isra.0+0x7a>
 80078bc:	0013      	movs	r3, r2
 80078be:	e7e2      	b.n	8007886 <_strtol_l.isra.0+0x96>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da09      	bge.n	80078d8 <_strtol_l.isra.0+0xe8>
 80078c4:	2322      	movs	r3, #34	; 0x22
 80078c6:	9a05      	ldr	r2, [sp, #20]
 80078c8:	9803      	ldr	r0, [sp, #12]
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	9b02      	ldr	r3, [sp, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0e1      	beq.n	8007896 <_strtol_l.isra.0+0xa6>
 80078d2:	1e6b      	subs	r3, r5, #1
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	e007      	b.n	80078e8 <_strtol_l.isra.0+0xf8>
 80078d8:	2f00      	cmp	r7, #0
 80078da:	d000      	beq.n	80078de <_strtol_l.isra.0+0xee>
 80078dc:	4240      	negs	r0, r0
 80078de:	9a02      	ldr	r2, [sp, #8]
 80078e0:	2a00      	cmp	r2, #0
 80078e2:	d0d8      	beq.n	8007896 <_strtol_l.isra.0+0xa6>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1f4      	bne.n	80078d2 <_strtol_l.isra.0+0xe2>
 80078e8:	9b02      	ldr	r3, [sp, #8]
 80078ea:	9a01      	ldr	r2, [sp, #4]
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e7d2      	b.n	8007896 <_strtol_l.isra.0+0xa6>
 80078f0:	2430      	movs	r4, #48	; 0x30
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	d1a7      	bne.n	8007846 <_strtol_l.isra.0+0x56>
 80078f6:	3608      	adds	r6, #8
 80078f8:	e7a5      	b.n	8007846 <_strtol_l.isra.0+0x56>
 80078fa:	2c30      	cmp	r4, #48	; 0x30
 80078fc:	d09b      	beq.n	8007836 <_strtol_l.isra.0+0x46>
 80078fe:	260a      	movs	r6, #10
 8007900:	e7a1      	b.n	8007846 <_strtol_l.isra.0+0x56>
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	0800a981 	.word	0x0800a981
 8007908:	7fffffff 	.word	0x7fffffff

0800790c <_strtol_r>:
 800790c:	b510      	push	{r4, lr}
 800790e:	f7ff ff6f 	bl	80077f0 <_strtol_l.isra.0>
 8007912:	bd10      	pop	{r4, pc}

08007914 <quorem>:
 8007914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007916:	0006      	movs	r6, r0
 8007918:	690d      	ldr	r5, [r1, #16]
 800791a:	6933      	ldr	r3, [r6, #16]
 800791c:	b087      	sub	sp, #28
 800791e:	2000      	movs	r0, #0
 8007920:	9102      	str	r1, [sp, #8]
 8007922:	42ab      	cmp	r3, r5
 8007924:	db6b      	blt.n	80079fe <quorem+0xea>
 8007926:	000b      	movs	r3, r1
 8007928:	3d01      	subs	r5, #1
 800792a:	00ac      	lsls	r4, r5, #2
 800792c:	3314      	adds	r3, #20
 800792e:	9305      	str	r3, [sp, #20]
 8007930:	191b      	adds	r3, r3, r4
 8007932:	9303      	str	r3, [sp, #12]
 8007934:	0033      	movs	r3, r6
 8007936:	3314      	adds	r3, #20
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	191c      	adds	r4, r3, r4
 800793c:	9b03      	ldr	r3, [sp, #12]
 800793e:	6827      	ldr	r7, [r4, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	0038      	movs	r0, r7
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	3301      	adds	r3, #1
 8007948:	0019      	movs	r1, r3
 800794a:	9304      	str	r3, [sp, #16]
 800794c:	f7f8 fbf8 	bl	8000140 <__udivsi3>
 8007950:	9b04      	ldr	r3, [sp, #16]
 8007952:	9000      	str	r0, [sp, #0]
 8007954:	429f      	cmp	r7, r3
 8007956:	d329      	bcc.n	80079ac <quorem+0x98>
 8007958:	2300      	movs	r3, #0
 800795a:	469c      	mov	ip, r3
 800795c:	9801      	ldr	r0, [sp, #4]
 800795e:	9f05      	ldr	r7, [sp, #20]
 8007960:	9304      	str	r3, [sp, #16]
 8007962:	cf08      	ldmia	r7!, {r3}
 8007964:	9a00      	ldr	r2, [sp, #0]
 8007966:	b299      	uxth	r1, r3
 8007968:	4351      	muls	r1, r2
 800796a:	0c1b      	lsrs	r3, r3, #16
 800796c:	4353      	muls	r3, r2
 800796e:	4461      	add	r1, ip
 8007970:	0c0a      	lsrs	r2, r1, #16
 8007972:	189b      	adds	r3, r3, r2
 8007974:	0c1a      	lsrs	r2, r3, #16
 8007976:	9305      	str	r3, [sp, #20]
 8007978:	6803      	ldr	r3, [r0, #0]
 800797a:	4694      	mov	ip, r2
 800797c:	b29a      	uxth	r2, r3
 800797e:	9b04      	ldr	r3, [sp, #16]
 8007980:	b289      	uxth	r1, r1
 8007982:	18d2      	adds	r2, r2, r3
 8007984:	6803      	ldr	r3, [r0, #0]
 8007986:	1a52      	subs	r2, r2, r1
 8007988:	0c19      	lsrs	r1, r3, #16
 800798a:	466b      	mov	r3, sp
 800798c:	8a9b      	ldrh	r3, [r3, #20]
 800798e:	1acb      	subs	r3, r1, r3
 8007990:	1411      	asrs	r1, r2, #16
 8007992:	185b      	adds	r3, r3, r1
 8007994:	1419      	asrs	r1, r3, #16
 8007996:	b292      	uxth	r2, r2
 8007998:	041b      	lsls	r3, r3, #16
 800799a:	431a      	orrs	r2, r3
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	9104      	str	r1, [sp, #16]
 80079a0:	c004      	stmia	r0!, {r2}
 80079a2:	42bb      	cmp	r3, r7
 80079a4:	d2dd      	bcs.n	8007962 <quorem+0x4e>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d02e      	beq.n	8007a0a <quorem+0xf6>
 80079ac:	0030      	movs	r0, r6
 80079ae:	9902      	ldr	r1, [sp, #8]
 80079b0:	f001 fcd2 	bl	8009358 <__mcmp>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	db21      	blt.n	80079fc <quorem+0xe8>
 80079b8:	0030      	movs	r0, r6
 80079ba:	2400      	movs	r4, #0
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	9902      	ldr	r1, [sp, #8]
 80079c0:	3301      	adds	r3, #1
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	3014      	adds	r0, #20
 80079c6:	3114      	adds	r1, #20
 80079c8:	6802      	ldr	r2, [r0, #0]
 80079ca:	c908      	ldmia	r1!, {r3}
 80079cc:	b292      	uxth	r2, r2
 80079ce:	1914      	adds	r4, r2, r4
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	1aa2      	subs	r2, r4, r2
 80079d4:	6804      	ldr	r4, [r0, #0]
 80079d6:	0c1b      	lsrs	r3, r3, #16
 80079d8:	0c24      	lsrs	r4, r4, #16
 80079da:	1ae3      	subs	r3, r4, r3
 80079dc:	1414      	asrs	r4, r2, #16
 80079de:	191b      	adds	r3, r3, r4
 80079e0:	141c      	asrs	r4, r3, #16
 80079e2:	b292      	uxth	r2, r2
 80079e4:	041b      	lsls	r3, r3, #16
 80079e6:	4313      	orrs	r3, r2
 80079e8:	c008      	stmia	r0!, {r3}
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	428b      	cmp	r3, r1
 80079ee:	d2eb      	bcs.n	80079c8 <quorem+0xb4>
 80079f0:	9a01      	ldr	r2, [sp, #4]
 80079f2:	00ab      	lsls	r3, r5, #2
 80079f4:	18d3      	adds	r3, r2, r3
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	2a00      	cmp	r2, #0
 80079fa:	d010      	beq.n	8007a1e <quorem+0x10a>
 80079fc:	9800      	ldr	r0, [sp, #0]
 80079fe:	b007      	add	sp, #28
 8007a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d104      	bne.n	8007a12 <quorem+0xfe>
 8007a08:	3d01      	subs	r5, #1
 8007a0a:	9b01      	ldr	r3, [sp, #4]
 8007a0c:	3c04      	subs	r4, #4
 8007a0e:	42a3      	cmp	r3, r4
 8007a10:	d3f7      	bcc.n	8007a02 <quorem+0xee>
 8007a12:	6135      	str	r5, [r6, #16]
 8007a14:	e7ca      	b.n	80079ac <quorem+0x98>
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	d104      	bne.n	8007a26 <quorem+0x112>
 8007a1c:	3d01      	subs	r5, #1
 8007a1e:	9a01      	ldr	r2, [sp, #4]
 8007a20:	3b04      	subs	r3, #4
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d3f7      	bcc.n	8007a16 <quorem+0x102>
 8007a26:	6135      	str	r5, [r6, #16]
 8007a28:	e7e8      	b.n	80079fc <quorem+0xe8>
	...

08007a2c <_dtoa_r>:
 8007a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a2e:	b09d      	sub	sp, #116	; 0x74
 8007a30:	9202      	str	r2, [sp, #8]
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	9b02      	ldr	r3, [sp, #8]
 8007a36:	9c03      	ldr	r4, [sp, #12]
 8007a38:	930a      	str	r3, [sp, #40]	; 0x28
 8007a3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8007a3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a3e:	0007      	movs	r7, r0
 8007a40:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007a42:	2c00      	cmp	r4, #0
 8007a44:	d10e      	bne.n	8007a64 <_dtoa_r+0x38>
 8007a46:	2010      	movs	r0, #16
 8007a48:	f001 f984 	bl	8008d54 <malloc>
 8007a4c:	1e02      	subs	r2, r0, #0
 8007a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a50:	d104      	bne.n	8007a5c <_dtoa_r+0x30>
 8007a52:	21ea      	movs	r1, #234	; 0xea
 8007a54:	4bc0      	ldr	r3, [pc, #768]	; (8007d58 <_dtoa_r+0x32c>)
 8007a56:	48c1      	ldr	r0, [pc, #772]	; (8007d5c <_dtoa_r+0x330>)
 8007a58:	f002 f8c4 	bl	8009be4 <__assert_func>
 8007a5c:	6044      	str	r4, [r0, #4]
 8007a5e:	6084      	str	r4, [r0, #8]
 8007a60:	6004      	str	r4, [r0, #0]
 8007a62:	60c4      	str	r4, [r0, #12]
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	6819      	ldr	r1, [r3, #0]
 8007a68:	2900      	cmp	r1, #0
 8007a6a:	d00a      	beq.n	8007a82 <_dtoa_r+0x56>
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4093      	lsls	r3, r2
 8007a72:	604a      	str	r2, [r1, #4]
 8007a74:	608b      	str	r3, [r1, #8]
 8007a76:	0038      	movs	r0, r7
 8007a78:	f001 f9e0 	bl	8008e3c <_Bfree>
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da21      	bge.n	8007acc <_dtoa_r+0xa0>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	9b03      	ldr	r3, [sp, #12]
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007a96:	4bb2      	ldr	r3, [pc, #712]	; (8007d60 <_dtoa_r+0x334>)
 8007a98:	002a      	movs	r2, r5
 8007a9a:	9318      	str	r3, [sp, #96]	; 0x60
 8007a9c:	401a      	ands	r2, r3
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d117      	bne.n	8007ad2 <_dtoa_r+0xa6>
 8007aa2:	4bb0      	ldr	r3, [pc, #704]	; (8007d64 <_dtoa_r+0x338>)
 8007aa4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007aa6:	0328      	lsls	r0, r5, #12
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	9b02      	ldr	r3, [sp, #8]
 8007aac:	0b00      	lsrs	r0, r0, #12
 8007aae:	4318      	orrs	r0, r3
 8007ab0:	d101      	bne.n	8007ab6 <_dtoa_r+0x8a>
 8007ab2:	f000 fdc3 	bl	800863c <_dtoa_r+0xc10>
 8007ab6:	48ac      	ldr	r0, [pc, #688]	; (8007d68 <_dtoa_r+0x33c>)
 8007ab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007aba:	9005      	str	r0, [sp, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <_dtoa_r+0x9a>
 8007ac0:	4baa      	ldr	r3, [pc, #680]	; (8007d6c <_dtoa_r+0x340>)
 8007ac2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	9805      	ldr	r0, [sp, #20]
 8007ac8:	b01d      	add	sp, #116	; 0x74
 8007aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007acc:	2300      	movs	r3, #0
 8007ace:	602b      	str	r3, [r5, #0]
 8007ad0:	e7e0      	b.n	8007a94 <_dtoa_r+0x68>
 8007ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007ad6:	9312      	str	r3, [sp, #72]	; 0x48
 8007ad8:	9413      	str	r4, [sp, #76]	; 0x4c
 8007ada:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007adc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f7f8 fcb3 	bl	800044c <__aeabi_dcmpeq>
 8007ae6:	1e04      	subs	r4, r0, #0
 8007ae8:	d00b      	beq.n	8007b02 <_dtoa_r+0xd6>
 8007aea:	2301      	movs	r3, #1
 8007aec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	4b9f      	ldr	r3, [pc, #636]	; (8007d70 <_dtoa_r+0x344>)
 8007af2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007af4:	9305      	str	r3, [sp, #20]
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	d0e5      	beq.n	8007ac6 <_dtoa_r+0x9a>
 8007afa:	4a9e      	ldr	r2, [pc, #632]	; (8007d74 <_dtoa_r+0x348>)
 8007afc:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007afe:	600a      	str	r2, [r1, #0]
 8007b00:	e7e1      	b.n	8007ac6 <_dtoa_r+0x9a>
 8007b02:	ab1a      	add	r3, sp, #104	; 0x68
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	ab1b      	add	r3, sp, #108	; 0x6c
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	0038      	movs	r0, r7
 8007b0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b10:	f001 fd4a 	bl	80095a8 <__d2b>
 8007b14:	006e      	lsls	r6, r5, #1
 8007b16:	9004      	str	r0, [sp, #16]
 8007b18:	0d76      	lsrs	r6, r6, #21
 8007b1a:	d100      	bne.n	8007b1e <_dtoa_r+0xf2>
 8007b1c:	e07c      	b.n	8007c18 <_dtoa_r+0x1ec>
 8007b1e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b20:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b24:	4a94      	ldr	r2, [pc, #592]	; (8007d78 <_dtoa_r+0x34c>)
 8007b26:	031b      	lsls	r3, r3, #12
 8007b28:	0b1b      	lsrs	r3, r3, #12
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	0011      	movs	r1, r2
 8007b2e:	4b93      	ldr	r3, [pc, #588]	; (8007d7c <_dtoa_r+0x350>)
 8007b30:	9416      	str	r4, [sp, #88]	; 0x58
 8007b32:	18f6      	adds	r6, r6, r3
 8007b34:	2200      	movs	r2, #0
 8007b36:	4b92      	ldr	r3, [pc, #584]	; (8007d80 <_dtoa_r+0x354>)
 8007b38:	f7f9 ff02 	bl	8001940 <__aeabi_dsub>
 8007b3c:	4a91      	ldr	r2, [pc, #580]	; (8007d84 <_dtoa_r+0x358>)
 8007b3e:	4b92      	ldr	r3, [pc, #584]	; (8007d88 <_dtoa_r+0x35c>)
 8007b40:	f7f9 fc92 	bl	8001468 <__aeabi_dmul>
 8007b44:	4a91      	ldr	r2, [pc, #580]	; (8007d8c <_dtoa_r+0x360>)
 8007b46:	4b92      	ldr	r3, [pc, #584]	; (8007d90 <_dtoa_r+0x364>)
 8007b48:	f7f8 fd1e 	bl	8000588 <__aeabi_dadd>
 8007b4c:	0004      	movs	r4, r0
 8007b4e:	0030      	movs	r0, r6
 8007b50:	000d      	movs	r5, r1
 8007b52:	f7fa fadb 	bl	800210c <__aeabi_i2d>
 8007b56:	4a8f      	ldr	r2, [pc, #572]	; (8007d94 <_dtoa_r+0x368>)
 8007b58:	4b8f      	ldr	r3, [pc, #572]	; (8007d98 <_dtoa_r+0x36c>)
 8007b5a:	f7f9 fc85 	bl	8001468 <__aeabi_dmul>
 8007b5e:	0002      	movs	r2, r0
 8007b60:	000b      	movs	r3, r1
 8007b62:	0020      	movs	r0, r4
 8007b64:	0029      	movs	r1, r5
 8007b66:	f7f8 fd0f 	bl	8000588 <__aeabi_dadd>
 8007b6a:	0004      	movs	r4, r0
 8007b6c:	000d      	movs	r5, r1
 8007b6e:	f7fa fa97 	bl	80020a0 <__aeabi_d2iz>
 8007b72:	2200      	movs	r2, #0
 8007b74:	9002      	str	r0, [sp, #8]
 8007b76:	2300      	movs	r3, #0
 8007b78:	0020      	movs	r0, r4
 8007b7a:	0029      	movs	r1, r5
 8007b7c:	f7f8 fc6c 	bl	8000458 <__aeabi_dcmplt>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d00b      	beq.n	8007b9c <_dtoa_r+0x170>
 8007b84:	9802      	ldr	r0, [sp, #8]
 8007b86:	f7fa fac1 	bl	800210c <__aeabi_i2d>
 8007b8a:	002b      	movs	r3, r5
 8007b8c:	0022      	movs	r2, r4
 8007b8e:	f7f8 fc5d 	bl	800044c <__aeabi_dcmpeq>
 8007b92:	4243      	negs	r3, r0
 8007b94:	4158      	adcs	r0, r3
 8007b96:	9b02      	ldr	r3, [sp, #8]
 8007b98:	1a1b      	subs	r3, r3, r0
 8007b9a:	9302      	str	r3, [sp, #8]
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	9315      	str	r3, [sp, #84]	; 0x54
 8007ba0:	9b02      	ldr	r3, [sp, #8]
 8007ba2:	2b16      	cmp	r3, #22
 8007ba4:	d80f      	bhi.n	8007bc6 <_dtoa_r+0x19a>
 8007ba6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ba8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007baa:	00da      	lsls	r2, r3, #3
 8007bac:	4b7b      	ldr	r3, [pc, #492]	; (8007d9c <_dtoa_r+0x370>)
 8007bae:	189b      	adds	r3, r3, r2
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f7f8 fc50 	bl	8000458 <__aeabi_dcmplt>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d049      	beq.n	8007c50 <_dtoa_r+0x224>
 8007bbc:	9b02      	ldr	r3, [sp, #8]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	9302      	str	r3, [sp, #8]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9315      	str	r3, [sp, #84]	; 0x54
 8007bc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007bc8:	1b9e      	subs	r6, r3, r6
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9308      	str	r3, [sp, #32]
 8007bce:	0033      	movs	r3, r6
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd4:	d504      	bpl.n	8007be0 <_dtoa_r+0x1b4>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	1b9b      	subs	r3, r3, r6
 8007bda:	9308      	str	r3, [sp, #32]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	930d      	str	r3, [sp, #52]	; 0x34
 8007be0:	9b02      	ldr	r3, [sp, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	db36      	blt.n	8007c54 <_dtoa_r+0x228>
 8007be6:	9a02      	ldr	r2, [sp, #8]
 8007be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bea:	4694      	mov	ip, r2
 8007bec:	4463      	add	r3, ip
 8007bee:	930d      	str	r3, [sp, #52]	; 0x34
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	9214      	str	r2, [sp, #80]	; 0x50
 8007bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8007bf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bf8:	2401      	movs	r4, #1
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	d862      	bhi.n	8007cc4 <_dtoa_r+0x298>
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	dd02      	ble.n	8007c08 <_dtoa_r+0x1dc>
 8007c02:	2400      	movs	r4, #0
 8007c04:	3b04      	subs	r3, #4
 8007c06:	9322      	str	r3, [sp, #136]	; 0x88
 8007c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c0a:	1e98      	subs	r0, r3, #2
 8007c0c:	2803      	cmp	r0, #3
 8007c0e:	d862      	bhi.n	8007cd6 <_dtoa_r+0x2aa>
 8007c10:	f7f8 fa82 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007c14:	56343629 	.word	0x56343629
 8007c18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007c1a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c1c:	189e      	adds	r6, r3, r2
 8007c1e:	4b60      	ldr	r3, [pc, #384]	; (8007da0 <_dtoa_r+0x374>)
 8007c20:	18f2      	adds	r2, r6, r3
 8007c22:	2a20      	cmp	r2, #32
 8007c24:	dd0f      	ble.n	8007c46 <_dtoa_r+0x21a>
 8007c26:	2340      	movs	r3, #64	; 0x40
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	409d      	lsls	r5, r3
 8007c2c:	4b5d      	ldr	r3, [pc, #372]	; (8007da4 <_dtoa_r+0x378>)
 8007c2e:	9802      	ldr	r0, [sp, #8]
 8007c30:	18f3      	adds	r3, r6, r3
 8007c32:	40d8      	lsrs	r0, r3
 8007c34:	4328      	orrs	r0, r5
 8007c36:	f7fa fa99 	bl	800216c <__aeabi_ui2d>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4c5a      	ldr	r4, [pc, #360]	; (8007da8 <_dtoa_r+0x37c>)
 8007c3e:	3e01      	subs	r6, #1
 8007c40:	1909      	adds	r1, r1, r4
 8007c42:	9316      	str	r3, [sp, #88]	; 0x58
 8007c44:	e776      	b.n	8007b34 <_dtoa_r+0x108>
 8007c46:	2320      	movs	r3, #32
 8007c48:	9802      	ldr	r0, [sp, #8]
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	4098      	lsls	r0, r3
 8007c4e:	e7f2      	b.n	8007c36 <_dtoa_r+0x20a>
 8007c50:	9015      	str	r0, [sp, #84]	; 0x54
 8007c52:	e7b8      	b.n	8007bc6 <_dtoa_r+0x19a>
 8007c54:	9b08      	ldr	r3, [sp, #32]
 8007c56:	9a02      	ldr	r2, [sp, #8]
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	9308      	str	r3, [sp, #32]
 8007c5c:	4253      	negs	r3, r2
 8007c5e:	930e      	str	r3, [sp, #56]	; 0x38
 8007c60:	2300      	movs	r3, #0
 8007c62:	9314      	str	r3, [sp, #80]	; 0x50
 8007c64:	e7c7      	b.n	8007bf6 <_dtoa_r+0x1ca>
 8007c66:	2300      	movs	r3, #0
 8007c68:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	dc36      	bgt.n	8007cde <_dtoa_r+0x2b2>
 8007c70:	2301      	movs	r3, #1
 8007c72:	001a      	movs	r2, r3
 8007c74:	930c      	str	r3, [sp, #48]	; 0x30
 8007c76:	9306      	str	r3, [sp, #24]
 8007c78:	9223      	str	r2, [sp, #140]	; 0x8c
 8007c7a:	e00d      	b.n	8007c98 <_dtoa_r+0x26c>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e7f3      	b.n	8007c68 <_dtoa_r+0x23c>
 8007c80:	2300      	movs	r3, #0
 8007c82:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c86:	4694      	mov	ip, r2
 8007c88:	9b02      	ldr	r3, [sp, #8]
 8007c8a:	4463      	add	r3, ip
 8007c8c:	930c      	str	r3, [sp, #48]	; 0x30
 8007c8e:	3301      	adds	r3, #1
 8007c90:	9306      	str	r3, [sp, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dc00      	bgt.n	8007c98 <_dtoa_r+0x26c>
 8007c96:	2301      	movs	r3, #1
 8007c98:	2200      	movs	r2, #0
 8007c9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c9c:	6042      	str	r2, [r0, #4]
 8007c9e:	3204      	adds	r2, #4
 8007ca0:	0015      	movs	r5, r2
 8007ca2:	3514      	adds	r5, #20
 8007ca4:	6841      	ldr	r1, [r0, #4]
 8007ca6:	429d      	cmp	r5, r3
 8007ca8:	d91d      	bls.n	8007ce6 <_dtoa_r+0x2ba>
 8007caa:	0038      	movs	r0, r7
 8007cac:	f001 f882 	bl	8008db4 <_Balloc>
 8007cb0:	9005      	str	r0, [sp, #20]
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d11b      	bne.n	8007cee <_dtoa_r+0x2c2>
 8007cb6:	21d5      	movs	r1, #213	; 0xd5
 8007cb8:	0002      	movs	r2, r0
 8007cba:	4b3c      	ldr	r3, [pc, #240]	; (8007dac <_dtoa_r+0x380>)
 8007cbc:	0049      	lsls	r1, r1, #1
 8007cbe:	e6ca      	b.n	8007a56 <_dtoa_r+0x2a>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e7de      	b.n	8007c82 <_dtoa_r+0x256>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	940f      	str	r4, [sp, #60]	; 0x3c
 8007cc8:	9322      	str	r3, [sp, #136]	; 0x88
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	930c      	str	r3, [sp, #48]	; 0x30
 8007cce:	9306      	str	r3, [sp, #24]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	3313      	adds	r3, #19
 8007cd4:	e7d0      	b.n	8007c78 <_dtoa_r+0x24c>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cda:	3b02      	subs	r3, #2
 8007cdc:	e7f6      	b.n	8007ccc <_dtoa_r+0x2a0>
 8007cde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ce0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce2:	9306      	str	r3, [sp, #24]
 8007ce4:	e7d8      	b.n	8007c98 <_dtoa_r+0x26c>
 8007ce6:	3101      	adds	r1, #1
 8007ce8:	6041      	str	r1, [r0, #4]
 8007cea:	0052      	lsls	r2, r2, #1
 8007cec:	e7d8      	b.n	8007ca0 <_dtoa_r+0x274>
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	9a05      	ldr	r2, [sp, #20]
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	9b06      	ldr	r3, [sp, #24]
 8007cf6:	2b0e      	cmp	r3, #14
 8007cf8:	d900      	bls.n	8007cfc <_dtoa_r+0x2d0>
 8007cfa:	e0eb      	b.n	8007ed4 <_dtoa_r+0x4a8>
 8007cfc:	2c00      	cmp	r4, #0
 8007cfe:	d100      	bne.n	8007d02 <_dtoa_r+0x2d6>
 8007d00:	e0e8      	b.n	8007ed4 <_dtoa_r+0x4a8>
 8007d02:	9b02      	ldr	r3, [sp, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dd68      	ble.n	8007dda <_dtoa_r+0x3ae>
 8007d08:	001a      	movs	r2, r3
 8007d0a:	210f      	movs	r1, #15
 8007d0c:	4b23      	ldr	r3, [pc, #140]	; (8007d9c <_dtoa_r+0x370>)
 8007d0e:	400a      	ands	r2, r1
 8007d10:	00d2      	lsls	r2, r2, #3
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	681d      	ldr	r5, [r3, #0]
 8007d16:	685e      	ldr	r6, [r3, #4]
 8007d18:	9b02      	ldr	r3, [sp, #8]
 8007d1a:	111c      	asrs	r4, r3, #4
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	9310      	str	r3, [sp, #64]	; 0x40
 8007d20:	9b02      	ldr	r3, [sp, #8]
 8007d22:	05db      	lsls	r3, r3, #23
 8007d24:	d50b      	bpl.n	8007d3e <_dtoa_r+0x312>
 8007d26:	4b22      	ldr	r3, [pc, #136]	; (8007db0 <_dtoa_r+0x384>)
 8007d28:	400c      	ands	r4, r1
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d32:	f7f8 ff93 	bl	8000c5c <__aeabi_ddiv>
 8007d36:	2303      	movs	r3, #3
 8007d38:	900a      	str	r0, [sp, #40]	; 0x28
 8007d3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d3c:	9310      	str	r3, [sp, #64]	; 0x40
 8007d3e:	4b1c      	ldr	r3, [pc, #112]	; (8007db0 <_dtoa_r+0x384>)
 8007d40:	9307      	str	r3, [sp, #28]
 8007d42:	2c00      	cmp	r4, #0
 8007d44:	d136      	bne.n	8007db4 <_dtoa_r+0x388>
 8007d46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d4a:	002a      	movs	r2, r5
 8007d4c:	0033      	movs	r3, r6
 8007d4e:	f7f8 ff85 	bl	8000c5c <__aeabi_ddiv>
 8007d52:	900a      	str	r0, [sp, #40]	; 0x28
 8007d54:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d56:	e05c      	b.n	8007e12 <_dtoa_r+0x3e6>
 8007d58:	0800aa8e 	.word	0x0800aa8e
 8007d5c:	0800aaa5 	.word	0x0800aaa5
 8007d60:	7ff00000 	.word	0x7ff00000
 8007d64:	0000270f 	.word	0x0000270f
 8007d68:	0800aa8a 	.word	0x0800aa8a
 8007d6c:	0800aa8d 	.word	0x0800aa8d
 8007d70:	0800a904 	.word	0x0800a904
 8007d74:	0800a905 	.word	0x0800a905
 8007d78:	3ff00000 	.word	0x3ff00000
 8007d7c:	fffffc01 	.word	0xfffffc01
 8007d80:	3ff80000 	.word	0x3ff80000
 8007d84:	636f4361 	.word	0x636f4361
 8007d88:	3fd287a7 	.word	0x3fd287a7
 8007d8c:	8b60c8b3 	.word	0x8b60c8b3
 8007d90:	3fc68a28 	.word	0x3fc68a28
 8007d94:	509f79fb 	.word	0x509f79fb
 8007d98:	3fd34413 	.word	0x3fd34413
 8007d9c:	0800ac20 	.word	0x0800ac20
 8007da0:	00000432 	.word	0x00000432
 8007da4:	00000412 	.word	0x00000412
 8007da8:	fe100000 	.word	0xfe100000
 8007dac:	0800ab04 	.word	0x0800ab04
 8007db0:	0800abf8 	.word	0x0800abf8
 8007db4:	2301      	movs	r3, #1
 8007db6:	421c      	tst	r4, r3
 8007db8:	d00b      	beq.n	8007dd2 <_dtoa_r+0x3a6>
 8007dba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dbc:	0028      	movs	r0, r5
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	9310      	str	r3, [sp, #64]	; 0x40
 8007dc2:	9b07      	ldr	r3, [sp, #28]
 8007dc4:	0031      	movs	r1, r6
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f7f9 fb4d 	bl	8001468 <__aeabi_dmul>
 8007dce:	0005      	movs	r5, r0
 8007dd0:	000e      	movs	r6, r1
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	1064      	asrs	r4, r4, #1
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	e7b2      	b.n	8007d40 <_dtoa_r+0x314>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	9310      	str	r3, [sp, #64]	; 0x40
 8007dde:	9b02      	ldr	r3, [sp, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d016      	beq.n	8007e12 <_dtoa_r+0x3e6>
 8007de4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007de6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007de8:	425c      	negs	r4, r3
 8007dea:	230f      	movs	r3, #15
 8007dec:	4ab5      	ldr	r2, [pc, #724]	; (80080c4 <_dtoa_r+0x698>)
 8007dee:	4023      	ands	r3, r4
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	18d3      	adds	r3, r2, r3
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f7f9 fb36 	bl	8001468 <__aeabi_dmul>
 8007dfc:	2601      	movs	r6, #1
 8007dfe:	2300      	movs	r3, #0
 8007e00:	900a      	str	r0, [sp, #40]	; 0x28
 8007e02:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e04:	4db0      	ldr	r5, [pc, #704]	; (80080c8 <_dtoa_r+0x69c>)
 8007e06:	1124      	asrs	r4, r4, #4
 8007e08:	2c00      	cmp	r4, #0
 8007e0a:	d000      	beq.n	8007e0e <_dtoa_r+0x3e2>
 8007e0c:	e094      	b.n	8007f38 <_dtoa_r+0x50c>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d19f      	bne.n	8007d52 <_dtoa_r+0x326>
 8007e12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d100      	bne.n	8007e1a <_dtoa_r+0x3ee>
 8007e18:	e09b      	b.n	8007f52 <_dtoa_r+0x526>
 8007e1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007e1e:	2200      	movs	r2, #0
 8007e20:	0020      	movs	r0, r4
 8007e22:	0029      	movs	r1, r5
 8007e24:	4ba9      	ldr	r3, [pc, #676]	; (80080cc <_dtoa_r+0x6a0>)
 8007e26:	f7f8 fb17 	bl	8000458 <__aeabi_dcmplt>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d100      	bne.n	8007e30 <_dtoa_r+0x404>
 8007e2e:	e090      	b.n	8007f52 <_dtoa_r+0x526>
 8007e30:	9b06      	ldr	r3, [sp, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d100      	bne.n	8007e38 <_dtoa_r+0x40c>
 8007e36:	e08c      	b.n	8007f52 <_dtoa_r+0x526>
 8007e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dd46      	ble.n	8007ecc <_dtoa_r+0x4a0>
 8007e3e:	9b02      	ldr	r3, [sp, #8]
 8007e40:	2200      	movs	r2, #0
 8007e42:	0020      	movs	r0, r4
 8007e44:	0029      	movs	r1, r5
 8007e46:	1e5e      	subs	r6, r3, #1
 8007e48:	4ba1      	ldr	r3, [pc, #644]	; (80080d0 <_dtoa_r+0x6a4>)
 8007e4a:	f7f9 fb0d 	bl	8001468 <__aeabi_dmul>
 8007e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e50:	900a      	str	r0, [sp, #40]	; 0x28
 8007e52:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e54:	3301      	adds	r3, #1
 8007e56:	9310      	str	r3, [sp, #64]	; 0x40
 8007e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e5a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007e60:	9307      	str	r3, [sp, #28]
 8007e62:	f7fa f953 	bl	800210c <__aeabi_i2d>
 8007e66:	0022      	movs	r2, r4
 8007e68:	002b      	movs	r3, r5
 8007e6a:	f7f9 fafd 	bl	8001468 <__aeabi_dmul>
 8007e6e:	2200      	movs	r2, #0
 8007e70:	4b98      	ldr	r3, [pc, #608]	; (80080d4 <_dtoa_r+0x6a8>)
 8007e72:	f7f8 fb89 	bl	8000588 <__aeabi_dadd>
 8007e76:	9010      	str	r0, [sp, #64]	; 0x40
 8007e78:	9111      	str	r1, [sp, #68]	; 0x44
 8007e7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e7e:	920a      	str	r2, [sp, #40]	; 0x28
 8007e80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e82:	4a95      	ldr	r2, [pc, #596]	; (80080d8 <_dtoa_r+0x6ac>)
 8007e84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e86:	4694      	mov	ip, r2
 8007e88:	4463      	add	r3, ip
 8007e8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e8e:	9b07      	ldr	r3, [sp, #28]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d161      	bne.n	8007f58 <_dtoa_r+0x52c>
 8007e94:	2200      	movs	r2, #0
 8007e96:	0020      	movs	r0, r4
 8007e98:	0029      	movs	r1, r5
 8007e9a:	4b90      	ldr	r3, [pc, #576]	; (80080dc <_dtoa_r+0x6b0>)
 8007e9c:	f7f9 fd50 	bl	8001940 <__aeabi_dsub>
 8007ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ea2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ea4:	0004      	movs	r4, r0
 8007ea6:	000d      	movs	r5, r1
 8007ea8:	f7f8 faea 	bl	8000480 <__aeabi_dcmpgt>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d000      	beq.n	8007eb2 <_dtoa_r+0x486>
 8007eb0:	e2b5      	b.n	800841e <_dtoa_r+0x9f2>
 8007eb2:	488b      	ldr	r0, [pc, #556]	; (80080e0 <_dtoa_r+0x6b4>)
 8007eb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007eb6:	4684      	mov	ip, r0
 8007eb8:	4461      	add	r1, ip
 8007eba:	000b      	movs	r3, r1
 8007ebc:	0020      	movs	r0, r4
 8007ebe:	0029      	movs	r1, r5
 8007ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ec2:	f7f8 fac9 	bl	8000458 <__aeabi_dcmplt>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d000      	beq.n	8007ecc <_dtoa_r+0x4a0>
 8007eca:	e2a5      	b.n	8008418 <_dtoa_r+0x9ec>
 8007ecc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ece:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed2:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	da00      	bge.n	8007edc <_dtoa_r+0x4b0>
 8007eda:	e171      	b.n	80081c0 <_dtoa_r+0x794>
 8007edc:	9a02      	ldr	r2, [sp, #8]
 8007ede:	2a0e      	cmp	r2, #14
 8007ee0:	dd00      	ble.n	8007ee4 <_dtoa_r+0x4b8>
 8007ee2:	e16d      	b.n	80081c0 <_dtoa_r+0x794>
 8007ee4:	4b77      	ldr	r3, [pc, #476]	; (80080c4 <_dtoa_r+0x698>)
 8007ee6:	00d2      	lsls	r2, r2, #3
 8007ee8:	189b      	adds	r3, r3, r2
 8007eea:	685c      	ldr	r4, [r3, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	9308      	str	r3, [sp, #32]
 8007ef0:	9409      	str	r4, [sp, #36]	; 0x24
 8007ef2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	db00      	blt.n	8007efa <_dtoa_r+0x4ce>
 8007ef8:	e0f6      	b.n	80080e8 <_dtoa_r+0x6bc>
 8007efa:	9b06      	ldr	r3, [sp, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd00      	ble.n	8007f02 <_dtoa_r+0x4d6>
 8007f00:	e0f2      	b.n	80080e8 <_dtoa_r+0x6bc>
 8007f02:	d000      	beq.n	8007f06 <_dtoa_r+0x4da>
 8007f04:	e288      	b.n	8008418 <_dtoa_r+0x9ec>
 8007f06:	9808      	ldr	r0, [sp, #32]
 8007f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	4b73      	ldr	r3, [pc, #460]	; (80080dc <_dtoa_r+0x6b0>)
 8007f0e:	f7f9 faab 	bl	8001468 <__aeabi_dmul>
 8007f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f16:	f7f8 fabd 	bl	8000494 <__aeabi_dcmpge>
 8007f1a:	9e06      	ldr	r6, [sp, #24]
 8007f1c:	0035      	movs	r5, r6
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d000      	beq.n	8007f24 <_dtoa_r+0x4f8>
 8007f22:	e25f      	b.n	80083e4 <_dtoa_r+0x9b8>
 8007f24:	9b05      	ldr	r3, [sp, #20]
 8007f26:	9a05      	ldr	r2, [sp, #20]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	9307      	str	r3, [sp, #28]
 8007f2c:	2331      	movs	r3, #49	; 0x31
 8007f2e:	7013      	strb	r3, [r2, #0]
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	3301      	adds	r3, #1
 8007f34:	9302      	str	r3, [sp, #8]
 8007f36:	e25a      	b.n	80083ee <_dtoa_r+0x9c2>
 8007f38:	4234      	tst	r4, r6
 8007f3a:	d007      	beq.n	8007f4c <_dtoa_r+0x520>
 8007f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f3e:	3301      	adds	r3, #1
 8007f40:	9310      	str	r3, [sp, #64]	; 0x40
 8007f42:	682a      	ldr	r2, [r5, #0]
 8007f44:	686b      	ldr	r3, [r5, #4]
 8007f46:	f7f9 fa8f 	bl	8001468 <__aeabi_dmul>
 8007f4a:	0033      	movs	r3, r6
 8007f4c:	1064      	asrs	r4, r4, #1
 8007f4e:	3508      	adds	r5, #8
 8007f50:	e75a      	b.n	8007e08 <_dtoa_r+0x3dc>
 8007f52:	9e02      	ldr	r6, [sp, #8]
 8007f54:	9b06      	ldr	r3, [sp, #24]
 8007f56:	e780      	b.n	8007e5a <_dtoa_r+0x42e>
 8007f58:	9b07      	ldr	r3, [sp, #28]
 8007f5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f5c:	1e5a      	subs	r2, r3, #1
 8007f5e:	4b59      	ldr	r3, [pc, #356]	; (80080c4 <_dtoa_r+0x698>)
 8007f60:	00d2      	lsls	r2, r2, #3
 8007f62:	189b      	adds	r3, r3, r2
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	d051      	beq.n	8008010 <_dtoa_r+0x5e4>
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	495d      	ldr	r1, [pc, #372]	; (80080e4 <_dtoa_r+0x6b8>)
 8007f70:	f7f8 fe74 	bl	8000c5c <__aeabi_ddiv>
 8007f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f78:	f7f9 fce2 	bl	8001940 <__aeabi_dsub>
 8007f7c:	9a05      	ldr	r2, [sp, #20]
 8007f7e:	9b05      	ldr	r3, [sp, #20]
 8007f80:	4694      	mov	ip, r2
 8007f82:	9310      	str	r3, [sp, #64]	; 0x40
 8007f84:	9b07      	ldr	r3, [sp, #28]
 8007f86:	900a      	str	r0, [sp, #40]	; 0x28
 8007f88:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f8a:	4463      	add	r3, ip
 8007f8c:	9319      	str	r3, [sp, #100]	; 0x64
 8007f8e:	0029      	movs	r1, r5
 8007f90:	0020      	movs	r0, r4
 8007f92:	f7fa f885 	bl	80020a0 <__aeabi_d2iz>
 8007f96:	9017      	str	r0, [sp, #92]	; 0x5c
 8007f98:	f7fa f8b8 	bl	800210c <__aeabi_i2d>
 8007f9c:	0002      	movs	r2, r0
 8007f9e:	000b      	movs	r3, r1
 8007fa0:	0020      	movs	r0, r4
 8007fa2:	0029      	movs	r1, r5
 8007fa4:	f7f9 fccc 	bl	8001940 <__aeabi_dsub>
 8007fa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007faa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fac:	3301      	adds	r3, #1
 8007fae:	9307      	str	r3, [sp, #28]
 8007fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fb2:	0004      	movs	r4, r0
 8007fb4:	3330      	adds	r3, #48	; 0x30
 8007fb6:	7013      	strb	r3, [r2, #0]
 8007fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fbc:	000d      	movs	r5, r1
 8007fbe:	f7f8 fa4b 	bl	8000458 <__aeabi_dcmplt>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d175      	bne.n	80080b2 <_dtoa_r+0x686>
 8007fc6:	0022      	movs	r2, r4
 8007fc8:	002b      	movs	r3, r5
 8007fca:	2000      	movs	r0, #0
 8007fcc:	493f      	ldr	r1, [pc, #252]	; (80080cc <_dtoa_r+0x6a0>)
 8007fce:	f7f9 fcb7 	bl	8001940 <__aeabi_dsub>
 8007fd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd6:	f7f8 fa3f 	bl	8000458 <__aeabi_dcmplt>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d000      	beq.n	8007fe0 <_dtoa_r+0x5b4>
 8007fde:	e0d1      	b.n	8008184 <_dtoa_r+0x758>
 8007fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fe2:	9a07      	ldr	r2, [sp, #28]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d100      	bne.n	8007fea <_dtoa_r+0x5be>
 8007fe8:	e770      	b.n	8007ecc <_dtoa_r+0x4a0>
 8007fea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fee:	2200      	movs	r2, #0
 8007ff0:	4b37      	ldr	r3, [pc, #220]	; (80080d0 <_dtoa_r+0x6a4>)
 8007ff2:	f7f9 fa39 	bl	8001468 <__aeabi_dmul>
 8007ff6:	4b36      	ldr	r3, [pc, #216]	; (80080d0 <_dtoa_r+0x6a4>)
 8007ff8:	900a      	str	r0, [sp, #40]	; 0x28
 8007ffa:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	0020      	movs	r0, r4
 8008000:	0029      	movs	r1, r5
 8008002:	f7f9 fa31 	bl	8001468 <__aeabi_dmul>
 8008006:	9b07      	ldr	r3, [sp, #28]
 8008008:	0004      	movs	r4, r0
 800800a:	000d      	movs	r5, r1
 800800c:	9310      	str	r3, [sp, #64]	; 0x40
 800800e:	e7be      	b.n	8007f8e <_dtoa_r+0x562>
 8008010:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008014:	f7f9 fa28 	bl	8001468 <__aeabi_dmul>
 8008018:	9a05      	ldr	r2, [sp, #20]
 800801a:	9b05      	ldr	r3, [sp, #20]
 800801c:	4694      	mov	ip, r2
 800801e:	930a      	str	r3, [sp, #40]	; 0x28
 8008020:	9b07      	ldr	r3, [sp, #28]
 8008022:	9010      	str	r0, [sp, #64]	; 0x40
 8008024:	9111      	str	r1, [sp, #68]	; 0x44
 8008026:	4463      	add	r3, ip
 8008028:	9319      	str	r3, [sp, #100]	; 0x64
 800802a:	0029      	movs	r1, r5
 800802c:	0020      	movs	r0, r4
 800802e:	f7fa f837 	bl	80020a0 <__aeabi_d2iz>
 8008032:	9017      	str	r0, [sp, #92]	; 0x5c
 8008034:	f7fa f86a 	bl	800210c <__aeabi_i2d>
 8008038:	0002      	movs	r2, r0
 800803a:	000b      	movs	r3, r1
 800803c:	0020      	movs	r0, r4
 800803e:	0029      	movs	r1, r5
 8008040:	f7f9 fc7e 	bl	8001940 <__aeabi_dsub>
 8008044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008048:	3330      	adds	r3, #48	; 0x30
 800804a:	7013      	strb	r3, [r2, #0]
 800804c:	0013      	movs	r3, r2
 800804e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008050:	3301      	adds	r3, #1
 8008052:	0004      	movs	r4, r0
 8008054:	000d      	movs	r5, r1
 8008056:	930a      	str	r3, [sp, #40]	; 0x28
 8008058:	4293      	cmp	r3, r2
 800805a:	d12c      	bne.n	80080b6 <_dtoa_r+0x68a>
 800805c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800805e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008060:	9a05      	ldr	r2, [sp, #20]
 8008062:	9b07      	ldr	r3, [sp, #28]
 8008064:	4694      	mov	ip, r2
 8008066:	4463      	add	r3, ip
 8008068:	2200      	movs	r2, #0
 800806a:	9307      	str	r3, [sp, #28]
 800806c:	4b1d      	ldr	r3, [pc, #116]	; (80080e4 <_dtoa_r+0x6b8>)
 800806e:	f7f8 fa8b 	bl	8000588 <__aeabi_dadd>
 8008072:	0002      	movs	r2, r0
 8008074:	000b      	movs	r3, r1
 8008076:	0020      	movs	r0, r4
 8008078:	0029      	movs	r1, r5
 800807a:	f7f8 fa01 	bl	8000480 <__aeabi_dcmpgt>
 800807e:	2800      	cmp	r0, #0
 8008080:	d000      	beq.n	8008084 <_dtoa_r+0x658>
 8008082:	e07f      	b.n	8008184 <_dtoa_r+0x758>
 8008084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008088:	2000      	movs	r0, #0
 800808a:	4916      	ldr	r1, [pc, #88]	; (80080e4 <_dtoa_r+0x6b8>)
 800808c:	f7f9 fc58 	bl	8001940 <__aeabi_dsub>
 8008090:	0002      	movs	r2, r0
 8008092:	000b      	movs	r3, r1
 8008094:	0020      	movs	r0, r4
 8008096:	0029      	movs	r1, r5
 8008098:	f7f8 f9de 	bl	8000458 <__aeabi_dcmplt>
 800809c:	2800      	cmp	r0, #0
 800809e:	d100      	bne.n	80080a2 <_dtoa_r+0x676>
 80080a0:	e714      	b.n	8007ecc <_dtoa_r+0x4a0>
 80080a2:	9b07      	ldr	r3, [sp, #28]
 80080a4:	001a      	movs	r2, r3
 80080a6:	3a01      	subs	r2, #1
 80080a8:	9207      	str	r2, [sp, #28]
 80080aa:	7812      	ldrb	r2, [r2, #0]
 80080ac:	2a30      	cmp	r2, #48	; 0x30
 80080ae:	d0f8      	beq.n	80080a2 <_dtoa_r+0x676>
 80080b0:	9307      	str	r3, [sp, #28]
 80080b2:	9602      	str	r6, [sp, #8]
 80080b4:	e054      	b.n	8008160 <_dtoa_r+0x734>
 80080b6:	2200      	movs	r2, #0
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <_dtoa_r+0x6a4>)
 80080ba:	f7f9 f9d5 	bl	8001468 <__aeabi_dmul>
 80080be:	0004      	movs	r4, r0
 80080c0:	000d      	movs	r5, r1
 80080c2:	e7b2      	b.n	800802a <_dtoa_r+0x5fe>
 80080c4:	0800ac20 	.word	0x0800ac20
 80080c8:	0800abf8 	.word	0x0800abf8
 80080cc:	3ff00000 	.word	0x3ff00000
 80080d0:	40240000 	.word	0x40240000
 80080d4:	401c0000 	.word	0x401c0000
 80080d8:	fcc00000 	.word	0xfcc00000
 80080dc:	40140000 	.word	0x40140000
 80080e0:	7cc00000 	.word	0x7cc00000
 80080e4:	3fe00000 	.word	0x3fe00000
 80080e8:	9b06      	ldr	r3, [sp, #24]
 80080ea:	9e05      	ldr	r6, [sp, #20]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	199b      	adds	r3, r3, r6
 80080f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80080f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80080f4:	930a      	str	r3, [sp, #40]	; 0x28
 80080f6:	9a08      	ldr	r2, [sp, #32]
 80080f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fa:	0020      	movs	r0, r4
 80080fc:	0029      	movs	r1, r5
 80080fe:	f7f8 fdad 	bl	8000c5c <__aeabi_ddiv>
 8008102:	f7f9 ffcd 	bl	80020a0 <__aeabi_d2iz>
 8008106:	9006      	str	r0, [sp, #24]
 8008108:	f7fa f800 	bl	800210c <__aeabi_i2d>
 800810c:	9a08      	ldr	r2, [sp, #32]
 800810e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008110:	f7f9 f9aa 	bl	8001468 <__aeabi_dmul>
 8008114:	0002      	movs	r2, r0
 8008116:	000b      	movs	r3, r1
 8008118:	0020      	movs	r0, r4
 800811a:	0029      	movs	r1, r5
 800811c:	f7f9 fc10 	bl	8001940 <__aeabi_dsub>
 8008120:	0033      	movs	r3, r6
 8008122:	9a06      	ldr	r2, [sp, #24]
 8008124:	3601      	adds	r6, #1
 8008126:	3230      	adds	r2, #48	; 0x30
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812c:	9607      	str	r6, [sp, #28]
 800812e:	429a      	cmp	r2, r3
 8008130:	d139      	bne.n	80081a6 <_dtoa_r+0x77a>
 8008132:	0002      	movs	r2, r0
 8008134:	000b      	movs	r3, r1
 8008136:	f7f8 fa27 	bl	8000588 <__aeabi_dadd>
 800813a:	9a08      	ldr	r2, [sp, #32]
 800813c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813e:	0004      	movs	r4, r0
 8008140:	000d      	movs	r5, r1
 8008142:	f7f8 f99d 	bl	8000480 <__aeabi_dcmpgt>
 8008146:	2800      	cmp	r0, #0
 8008148:	d11b      	bne.n	8008182 <_dtoa_r+0x756>
 800814a:	9a08      	ldr	r2, [sp, #32]
 800814c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814e:	0020      	movs	r0, r4
 8008150:	0029      	movs	r1, r5
 8008152:	f7f8 f97b 	bl	800044c <__aeabi_dcmpeq>
 8008156:	2800      	cmp	r0, #0
 8008158:	d002      	beq.n	8008160 <_dtoa_r+0x734>
 800815a:	9b06      	ldr	r3, [sp, #24]
 800815c:	07db      	lsls	r3, r3, #31
 800815e:	d410      	bmi.n	8008182 <_dtoa_r+0x756>
 8008160:	0038      	movs	r0, r7
 8008162:	9904      	ldr	r1, [sp, #16]
 8008164:	f000 fe6a 	bl	8008e3c <_Bfree>
 8008168:	2300      	movs	r3, #0
 800816a:	9a07      	ldr	r2, [sp, #28]
 800816c:	9802      	ldr	r0, [sp, #8]
 800816e:	7013      	strb	r3, [r2, #0]
 8008170:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008172:	3001      	adds	r0, #1
 8008174:	6018      	str	r0, [r3, #0]
 8008176:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008178:	2b00      	cmp	r3, #0
 800817a:	d100      	bne.n	800817e <_dtoa_r+0x752>
 800817c:	e4a3      	b.n	8007ac6 <_dtoa_r+0x9a>
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e4a1      	b.n	8007ac6 <_dtoa_r+0x9a>
 8008182:	9e02      	ldr	r6, [sp, #8]
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	9307      	str	r3, [sp, #28]
 8008188:	3b01      	subs	r3, #1
 800818a:	781a      	ldrb	r2, [r3, #0]
 800818c:	2a39      	cmp	r2, #57	; 0x39
 800818e:	d106      	bne.n	800819e <_dtoa_r+0x772>
 8008190:	9a05      	ldr	r2, [sp, #20]
 8008192:	429a      	cmp	r2, r3
 8008194:	d1f7      	bne.n	8008186 <_dtoa_r+0x75a>
 8008196:	2230      	movs	r2, #48	; 0x30
 8008198:	9905      	ldr	r1, [sp, #20]
 800819a:	3601      	adds	r6, #1
 800819c:	700a      	strb	r2, [r1, #0]
 800819e:	781a      	ldrb	r2, [r3, #0]
 80081a0:	3201      	adds	r2, #1
 80081a2:	701a      	strb	r2, [r3, #0]
 80081a4:	e785      	b.n	80080b2 <_dtoa_r+0x686>
 80081a6:	2200      	movs	r2, #0
 80081a8:	4bad      	ldr	r3, [pc, #692]	; (8008460 <_dtoa_r+0xa34>)
 80081aa:	f7f9 f95d 	bl	8001468 <__aeabi_dmul>
 80081ae:	2200      	movs	r2, #0
 80081b0:	2300      	movs	r3, #0
 80081b2:	0004      	movs	r4, r0
 80081b4:	000d      	movs	r5, r1
 80081b6:	f7f8 f949 	bl	800044c <__aeabi_dcmpeq>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d09b      	beq.n	80080f6 <_dtoa_r+0x6ca>
 80081be:	e7cf      	b.n	8008160 <_dtoa_r+0x734>
 80081c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	d100      	bne.n	80081c8 <_dtoa_r+0x79c>
 80081c6:	e082      	b.n	80082ce <_dtoa_r+0x8a2>
 80081c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80081ca:	2a01      	cmp	r2, #1
 80081cc:	dc66      	bgt.n	800829c <_dtoa_r+0x870>
 80081ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d05f      	beq.n	8008294 <_dtoa_r+0x868>
 80081d4:	4aa3      	ldr	r2, [pc, #652]	; (8008464 <_dtoa_r+0xa38>)
 80081d6:	189b      	adds	r3, r3, r2
 80081d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80081da:	9c08      	ldr	r4, [sp, #32]
 80081dc:	9a08      	ldr	r2, [sp, #32]
 80081de:	2101      	movs	r1, #1
 80081e0:	18d2      	adds	r2, r2, r3
 80081e2:	9208      	str	r2, [sp, #32]
 80081e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081e6:	0038      	movs	r0, r7
 80081e8:	18d3      	adds	r3, r2, r3
 80081ea:	930d      	str	r3, [sp, #52]	; 0x34
 80081ec:	f000 ff22 	bl	8009034 <__i2b>
 80081f0:	0005      	movs	r5, r0
 80081f2:	2c00      	cmp	r4, #0
 80081f4:	dd0e      	ble.n	8008214 <_dtoa_r+0x7e8>
 80081f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dd0b      	ble.n	8008214 <_dtoa_r+0x7e8>
 80081fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081fe:	0023      	movs	r3, r4
 8008200:	4294      	cmp	r4, r2
 8008202:	dd00      	ble.n	8008206 <_dtoa_r+0x7da>
 8008204:	0013      	movs	r3, r2
 8008206:	9a08      	ldr	r2, [sp, #32]
 8008208:	1ae4      	subs	r4, r4, r3
 800820a:	1ad2      	subs	r2, r2, r3
 800820c:	9208      	str	r2, [sp, #32]
 800820e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	930d      	str	r3, [sp, #52]	; 0x34
 8008214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01f      	beq.n	800825a <_dtoa_r+0x82e>
 800821a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d05a      	beq.n	80082d6 <_dtoa_r+0x8aa>
 8008220:	2e00      	cmp	r6, #0
 8008222:	dd11      	ble.n	8008248 <_dtoa_r+0x81c>
 8008224:	0029      	movs	r1, r5
 8008226:	0032      	movs	r2, r6
 8008228:	0038      	movs	r0, r7
 800822a:	f000 ffc9 	bl	80091c0 <__pow5mult>
 800822e:	9a04      	ldr	r2, [sp, #16]
 8008230:	0001      	movs	r1, r0
 8008232:	0005      	movs	r5, r0
 8008234:	0038      	movs	r0, r7
 8008236:	f000 ff13 	bl	8009060 <__multiply>
 800823a:	9904      	ldr	r1, [sp, #16]
 800823c:	9007      	str	r0, [sp, #28]
 800823e:	0038      	movs	r0, r7
 8008240:	f000 fdfc 	bl	8008e3c <_Bfree>
 8008244:	9b07      	ldr	r3, [sp, #28]
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800824a:	1b9a      	subs	r2, r3, r6
 800824c:	42b3      	cmp	r3, r6
 800824e:	d004      	beq.n	800825a <_dtoa_r+0x82e>
 8008250:	0038      	movs	r0, r7
 8008252:	9904      	ldr	r1, [sp, #16]
 8008254:	f000 ffb4 	bl	80091c0 <__pow5mult>
 8008258:	9004      	str	r0, [sp, #16]
 800825a:	2101      	movs	r1, #1
 800825c:	0038      	movs	r0, r7
 800825e:	f000 fee9 	bl	8009034 <__i2b>
 8008262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008264:	0006      	movs	r6, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	dd37      	ble.n	80082da <_dtoa_r+0x8ae>
 800826a:	001a      	movs	r2, r3
 800826c:	0001      	movs	r1, r0
 800826e:	0038      	movs	r0, r7
 8008270:	f000 ffa6 	bl	80091c0 <__pow5mult>
 8008274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008276:	0006      	movs	r6, r0
 8008278:	2b01      	cmp	r3, #1
 800827a:	dd33      	ble.n	80082e4 <_dtoa_r+0x8b8>
 800827c:	2300      	movs	r3, #0
 800827e:	9307      	str	r3, [sp, #28]
 8008280:	6933      	ldr	r3, [r6, #16]
 8008282:	3303      	adds	r3, #3
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	18f3      	adds	r3, r6, r3
 8008288:	6858      	ldr	r0, [r3, #4]
 800828a:	f000 fe8b 	bl	8008fa4 <__hi0bits>
 800828e:	2320      	movs	r3, #32
 8008290:	1a18      	subs	r0, r3, r0
 8008292:	e03f      	b.n	8008314 <_dtoa_r+0x8e8>
 8008294:	2336      	movs	r3, #54	; 0x36
 8008296:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008298:	1a9b      	subs	r3, r3, r2
 800829a:	e79d      	b.n	80081d8 <_dtoa_r+0x7ac>
 800829c:	9b06      	ldr	r3, [sp, #24]
 800829e:	1e5e      	subs	r6, r3, #1
 80082a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a2:	42b3      	cmp	r3, r6
 80082a4:	db08      	blt.n	80082b8 <_dtoa_r+0x88c>
 80082a6:	1b9e      	subs	r6, r3, r6
 80082a8:	9b06      	ldr	r3, [sp, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	da0c      	bge.n	80082c8 <_dtoa_r+0x89c>
 80082ae:	9b08      	ldr	r3, [sp, #32]
 80082b0:	9a06      	ldr	r2, [sp, #24]
 80082b2:	1a9c      	subs	r4, r3, r2
 80082b4:	2300      	movs	r3, #0
 80082b6:	e791      	b.n	80081dc <_dtoa_r+0x7b0>
 80082b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082bc:	1af3      	subs	r3, r6, r3
 80082be:	18d3      	adds	r3, r2, r3
 80082c0:	960e      	str	r6, [sp, #56]	; 0x38
 80082c2:	9314      	str	r3, [sp, #80]	; 0x50
 80082c4:	2600      	movs	r6, #0
 80082c6:	e7ef      	b.n	80082a8 <_dtoa_r+0x87c>
 80082c8:	9c08      	ldr	r4, [sp, #32]
 80082ca:	9b06      	ldr	r3, [sp, #24]
 80082cc:	e786      	b.n	80081dc <_dtoa_r+0x7b0>
 80082ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80082d0:	9c08      	ldr	r4, [sp, #32]
 80082d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082d4:	e78d      	b.n	80081f2 <_dtoa_r+0x7c6>
 80082d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082d8:	e7ba      	b.n	8008250 <_dtoa_r+0x824>
 80082da:	2300      	movs	r3, #0
 80082dc:	9307      	str	r3, [sp, #28]
 80082de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	dc13      	bgt.n	800830c <_dtoa_r+0x8e0>
 80082e4:	2300      	movs	r3, #0
 80082e6:	9307      	str	r3, [sp, #28]
 80082e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10e      	bne.n	800830c <_dtoa_r+0x8e0>
 80082ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f0:	031b      	lsls	r3, r3, #12
 80082f2:	d10b      	bne.n	800830c <_dtoa_r+0x8e0>
 80082f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80082f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082f8:	4213      	tst	r3, r2
 80082fa:	d007      	beq.n	800830c <_dtoa_r+0x8e0>
 80082fc:	9b08      	ldr	r3, [sp, #32]
 80082fe:	3301      	adds	r3, #1
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008304:	3301      	adds	r3, #1
 8008306:	930d      	str	r3, [sp, #52]	; 0x34
 8008308:	2301      	movs	r3, #1
 800830a:	9307      	str	r3, [sp, #28]
 800830c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800830e:	2001      	movs	r0, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1b5      	bne.n	8008280 <_dtoa_r+0x854>
 8008314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008316:	221f      	movs	r2, #31
 8008318:	1818      	adds	r0, r3, r0
 800831a:	0003      	movs	r3, r0
 800831c:	4013      	ands	r3, r2
 800831e:	4210      	tst	r0, r2
 8008320:	d046      	beq.n	80083b0 <_dtoa_r+0x984>
 8008322:	3201      	adds	r2, #1
 8008324:	1ad2      	subs	r2, r2, r3
 8008326:	2a04      	cmp	r2, #4
 8008328:	dd3f      	ble.n	80083aa <_dtoa_r+0x97e>
 800832a:	221c      	movs	r2, #28
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	9a08      	ldr	r2, [sp, #32]
 8008330:	18e4      	adds	r4, r4, r3
 8008332:	18d2      	adds	r2, r2, r3
 8008334:	9208      	str	r2, [sp, #32]
 8008336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008338:	18d3      	adds	r3, r2, r3
 800833a:	930d      	str	r3, [sp, #52]	; 0x34
 800833c:	9b08      	ldr	r3, [sp, #32]
 800833e:	2b00      	cmp	r3, #0
 8008340:	dd05      	ble.n	800834e <_dtoa_r+0x922>
 8008342:	001a      	movs	r2, r3
 8008344:	0038      	movs	r0, r7
 8008346:	9904      	ldr	r1, [sp, #16]
 8008348:	f000 ff96 	bl	8009278 <__lshift>
 800834c:	9004      	str	r0, [sp, #16]
 800834e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008350:	2b00      	cmp	r3, #0
 8008352:	dd05      	ble.n	8008360 <_dtoa_r+0x934>
 8008354:	0031      	movs	r1, r6
 8008356:	001a      	movs	r2, r3
 8008358:	0038      	movs	r0, r7
 800835a:	f000 ff8d 	bl	8009278 <__lshift>
 800835e:	0006      	movs	r6, r0
 8008360:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008362:	2b00      	cmp	r3, #0
 8008364:	d026      	beq.n	80083b4 <_dtoa_r+0x988>
 8008366:	0031      	movs	r1, r6
 8008368:	9804      	ldr	r0, [sp, #16]
 800836a:	f000 fff5 	bl	8009358 <__mcmp>
 800836e:	2800      	cmp	r0, #0
 8008370:	da20      	bge.n	80083b4 <_dtoa_r+0x988>
 8008372:	9b02      	ldr	r3, [sp, #8]
 8008374:	220a      	movs	r2, #10
 8008376:	3b01      	subs	r3, #1
 8008378:	9302      	str	r3, [sp, #8]
 800837a:	0038      	movs	r0, r7
 800837c:	2300      	movs	r3, #0
 800837e:	9904      	ldr	r1, [sp, #16]
 8008380:	f000 fd80 	bl	8008e84 <__multadd>
 8008384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008386:	9004      	str	r0, [sp, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d100      	bne.n	800838e <_dtoa_r+0x962>
 800838c:	e160      	b.n	8008650 <_dtoa_r+0xc24>
 800838e:	2300      	movs	r3, #0
 8008390:	0029      	movs	r1, r5
 8008392:	220a      	movs	r2, #10
 8008394:	0038      	movs	r0, r7
 8008396:	f000 fd75 	bl	8008e84 <__multadd>
 800839a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800839c:	0005      	movs	r5, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	dc47      	bgt.n	8008432 <_dtoa_r+0xa06>
 80083a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	dc0d      	bgt.n	80083c4 <_dtoa_r+0x998>
 80083a8:	e043      	b.n	8008432 <_dtoa_r+0xa06>
 80083aa:	2a04      	cmp	r2, #4
 80083ac:	d0c6      	beq.n	800833c <_dtoa_r+0x910>
 80083ae:	0013      	movs	r3, r2
 80083b0:	331c      	adds	r3, #28
 80083b2:	e7bc      	b.n	800832e <_dtoa_r+0x902>
 80083b4:	9b06      	ldr	r3, [sp, #24]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	dc35      	bgt.n	8008426 <_dtoa_r+0x9fa>
 80083ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083bc:	2b02      	cmp	r3, #2
 80083be:	dd32      	ble.n	8008426 <_dtoa_r+0x9fa>
 80083c0:	9b06      	ldr	r3, [sp, #24]
 80083c2:	930c      	str	r3, [sp, #48]	; 0x30
 80083c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10c      	bne.n	80083e4 <_dtoa_r+0x9b8>
 80083ca:	0031      	movs	r1, r6
 80083cc:	2205      	movs	r2, #5
 80083ce:	0038      	movs	r0, r7
 80083d0:	f000 fd58 	bl	8008e84 <__multadd>
 80083d4:	0006      	movs	r6, r0
 80083d6:	0001      	movs	r1, r0
 80083d8:	9804      	ldr	r0, [sp, #16]
 80083da:	f000 ffbd 	bl	8009358 <__mcmp>
 80083de:	2800      	cmp	r0, #0
 80083e0:	dd00      	ble.n	80083e4 <_dtoa_r+0x9b8>
 80083e2:	e59f      	b.n	8007f24 <_dtoa_r+0x4f8>
 80083e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083e6:	43db      	mvns	r3, r3
 80083e8:	9302      	str	r3, [sp, #8]
 80083ea:	9b05      	ldr	r3, [sp, #20]
 80083ec:	9307      	str	r3, [sp, #28]
 80083ee:	2400      	movs	r4, #0
 80083f0:	0031      	movs	r1, r6
 80083f2:	0038      	movs	r0, r7
 80083f4:	f000 fd22 	bl	8008e3c <_Bfree>
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	d100      	bne.n	80083fe <_dtoa_r+0x9d2>
 80083fc:	e6b0      	b.n	8008160 <_dtoa_r+0x734>
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d005      	beq.n	800840e <_dtoa_r+0x9e2>
 8008402:	42ac      	cmp	r4, r5
 8008404:	d003      	beq.n	800840e <_dtoa_r+0x9e2>
 8008406:	0021      	movs	r1, r4
 8008408:	0038      	movs	r0, r7
 800840a:	f000 fd17 	bl	8008e3c <_Bfree>
 800840e:	0029      	movs	r1, r5
 8008410:	0038      	movs	r0, r7
 8008412:	f000 fd13 	bl	8008e3c <_Bfree>
 8008416:	e6a3      	b.n	8008160 <_dtoa_r+0x734>
 8008418:	2600      	movs	r6, #0
 800841a:	0035      	movs	r5, r6
 800841c:	e7e2      	b.n	80083e4 <_dtoa_r+0x9b8>
 800841e:	9602      	str	r6, [sp, #8]
 8008420:	9e07      	ldr	r6, [sp, #28]
 8008422:	0035      	movs	r5, r6
 8008424:	e57e      	b.n	8007f24 <_dtoa_r+0x4f8>
 8008426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d100      	bne.n	800842e <_dtoa_r+0xa02>
 800842c:	e0c8      	b.n	80085c0 <_dtoa_r+0xb94>
 800842e:	9b06      	ldr	r3, [sp, #24]
 8008430:	930c      	str	r3, [sp, #48]	; 0x30
 8008432:	2c00      	cmp	r4, #0
 8008434:	dd05      	ble.n	8008442 <_dtoa_r+0xa16>
 8008436:	0029      	movs	r1, r5
 8008438:	0022      	movs	r2, r4
 800843a:	0038      	movs	r0, r7
 800843c:	f000 ff1c 	bl	8009278 <__lshift>
 8008440:	0005      	movs	r5, r0
 8008442:	9b07      	ldr	r3, [sp, #28]
 8008444:	0028      	movs	r0, r5
 8008446:	2b00      	cmp	r3, #0
 8008448:	d01f      	beq.n	800848a <_dtoa_r+0xa5e>
 800844a:	0038      	movs	r0, r7
 800844c:	6869      	ldr	r1, [r5, #4]
 800844e:	f000 fcb1 	bl	8008db4 <_Balloc>
 8008452:	1e04      	subs	r4, r0, #0
 8008454:	d10c      	bne.n	8008470 <_dtoa_r+0xa44>
 8008456:	0002      	movs	r2, r0
 8008458:	4b03      	ldr	r3, [pc, #12]	; (8008468 <_dtoa_r+0xa3c>)
 800845a:	4904      	ldr	r1, [pc, #16]	; (800846c <_dtoa_r+0xa40>)
 800845c:	f7ff fafb 	bl	8007a56 <_dtoa_r+0x2a>
 8008460:	40240000 	.word	0x40240000
 8008464:	00000433 	.word	0x00000433
 8008468:	0800ab04 	.word	0x0800ab04
 800846c:	000002ea 	.word	0x000002ea
 8008470:	0029      	movs	r1, r5
 8008472:	692b      	ldr	r3, [r5, #16]
 8008474:	310c      	adds	r1, #12
 8008476:	1c9a      	adds	r2, r3, #2
 8008478:	0092      	lsls	r2, r2, #2
 800847a:	300c      	adds	r0, #12
 800847c:	f000 fc91 	bl	8008da2 <memcpy>
 8008480:	2201      	movs	r2, #1
 8008482:	0021      	movs	r1, r4
 8008484:	0038      	movs	r0, r7
 8008486:	f000 fef7 	bl	8009278 <__lshift>
 800848a:	002c      	movs	r4, r5
 800848c:	0005      	movs	r5, r0
 800848e:	9b05      	ldr	r3, [sp, #20]
 8008490:	9308      	str	r3, [sp, #32]
 8008492:	0031      	movs	r1, r6
 8008494:	9804      	ldr	r0, [sp, #16]
 8008496:	f7ff fa3d 	bl	8007914 <quorem>
 800849a:	0003      	movs	r3, r0
 800849c:	0021      	movs	r1, r4
 800849e:	3330      	adds	r3, #48	; 0x30
 80084a0:	900e      	str	r0, [sp, #56]	; 0x38
 80084a2:	9804      	ldr	r0, [sp, #16]
 80084a4:	9306      	str	r3, [sp, #24]
 80084a6:	f000 ff57 	bl	8009358 <__mcmp>
 80084aa:	002a      	movs	r2, r5
 80084ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80084ae:	0031      	movs	r1, r6
 80084b0:	0038      	movs	r0, r7
 80084b2:	f000 ff6d 	bl	8009390 <__mdiff>
 80084b6:	68c3      	ldr	r3, [r0, #12]
 80084b8:	9007      	str	r0, [sp, #28]
 80084ba:	9310      	str	r3, [sp, #64]	; 0x40
 80084bc:	2301      	movs	r3, #1
 80084be:	930d      	str	r3, [sp, #52]	; 0x34
 80084c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <_dtoa_r+0xaa4>
 80084c6:	0001      	movs	r1, r0
 80084c8:	9804      	ldr	r0, [sp, #16]
 80084ca:	f000 ff45 	bl	8009358 <__mcmp>
 80084ce:	900d      	str	r0, [sp, #52]	; 0x34
 80084d0:	0038      	movs	r0, r7
 80084d2:	9907      	ldr	r1, [sp, #28]
 80084d4:	f000 fcb2 	bl	8008e3c <_Bfree>
 80084d8:	2301      	movs	r3, #1
 80084da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80084dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084de:	4018      	ands	r0, r3
 80084e0:	9b08      	ldr	r3, [sp, #32]
 80084e2:	3301      	adds	r3, #1
 80084e4:	9307      	str	r3, [sp, #28]
 80084e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084e8:	4313      	orrs	r3, r2
 80084ea:	4303      	orrs	r3, r0
 80084ec:	d10c      	bne.n	8008508 <_dtoa_r+0xadc>
 80084ee:	9b06      	ldr	r3, [sp, #24]
 80084f0:	2b39      	cmp	r3, #57	; 0x39
 80084f2:	d025      	beq.n	8008540 <_dtoa_r+0xb14>
 80084f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dd02      	ble.n	8008500 <_dtoa_r+0xad4>
 80084fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fc:	3331      	adds	r3, #49	; 0x31
 80084fe:	9306      	str	r3, [sp, #24]
 8008500:	9b08      	ldr	r3, [sp, #32]
 8008502:	9a06      	ldr	r2, [sp, #24]
 8008504:	701a      	strb	r2, [r3, #0]
 8008506:	e773      	b.n	80083f0 <_dtoa_r+0x9c4>
 8008508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800850a:	2b00      	cmp	r3, #0
 800850c:	db03      	blt.n	8008516 <_dtoa_r+0xaea>
 800850e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008510:	4313      	orrs	r3, r2
 8008512:	4303      	orrs	r3, r0
 8008514:	d11f      	bne.n	8008556 <_dtoa_r+0xb2a>
 8008516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008518:	2b00      	cmp	r3, #0
 800851a:	ddf1      	ble.n	8008500 <_dtoa_r+0xad4>
 800851c:	9904      	ldr	r1, [sp, #16]
 800851e:	2201      	movs	r2, #1
 8008520:	0038      	movs	r0, r7
 8008522:	f000 fea9 	bl	8009278 <__lshift>
 8008526:	0031      	movs	r1, r6
 8008528:	9004      	str	r0, [sp, #16]
 800852a:	f000 ff15 	bl	8009358 <__mcmp>
 800852e:	2800      	cmp	r0, #0
 8008530:	dc03      	bgt.n	800853a <_dtoa_r+0xb0e>
 8008532:	d1e5      	bne.n	8008500 <_dtoa_r+0xad4>
 8008534:	9b06      	ldr	r3, [sp, #24]
 8008536:	07db      	lsls	r3, r3, #31
 8008538:	d5e2      	bpl.n	8008500 <_dtoa_r+0xad4>
 800853a:	9b06      	ldr	r3, [sp, #24]
 800853c:	2b39      	cmp	r3, #57	; 0x39
 800853e:	d1dc      	bne.n	80084fa <_dtoa_r+0xace>
 8008540:	2339      	movs	r3, #57	; 0x39
 8008542:	9a08      	ldr	r2, [sp, #32]
 8008544:	7013      	strb	r3, [r2, #0]
 8008546:	9b07      	ldr	r3, [sp, #28]
 8008548:	9307      	str	r3, [sp, #28]
 800854a:	3b01      	subs	r3, #1
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	2a39      	cmp	r2, #57	; 0x39
 8008550:	d06c      	beq.n	800862c <_dtoa_r+0xc00>
 8008552:	3201      	adds	r2, #1
 8008554:	e7d6      	b.n	8008504 <_dtoa_r+0xad8>
 8008556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008558:	2b00      	cmp	r3, #0
 800855a:	dd07      	ble.n	800856c <_dtoa_r+0xb40>
 800855c:	9b06      	ldr	r3, [sp, #24]
 800855e:	2b39      	cmp	r3, #57	; 0x39
 8008560:	d0ee      	beq.n	8008540 <_dtoa_r+0xb14>
 8008562:	9b06      	ldr	r3, [sp, #24]
 8008564:	9a08      	ldr	r2, [sp, #32]
 8008566:	3301      	adds	r3, #1
 8008568:	7013      	strb	r3, [r2, #0]
 800856a:	e741      	b.n	80083f0 <_dtoa_r+0x9c4>
 800856c:	9b08      	ldr	r3, [sp, #32]
 800856e:	9a06      	ldr	r2, [sp, #24]
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	2301      	movs	r3, #1
 8008574:	9a05      	ldr	r2, [sp, #20]
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	9a08      	ldr	r2, [sp, #32]
 800857a:	189b      	adds	r3, r3, r2
 800857c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800857e:	429a      	cmp	r2, r3
 8008580:	d03e      	beq.n	8008600 <_dtoa_r+0xbd4>
 8008582:	2300      	movs	r3, #0
 8008584:	220a      	movs	r2, #10
 8008586:	9904      	ldr	r1, [sp, #16]
 8008588:	0038      	movs	r0, r7
 800858a:	f000 fc7b 	bl	8008e84 <__multadd>
 800858e:	2300      	movs	r3, #0
 8008590:	9004      	str	r0, [sp, #16]
 8008592:	220a      	movs	r2, #10
 8008594:	0021      	movs	r1, r4
 8008596:	0038      	movs	r0, r7
 8008598:	42ac      	cmp	r4, r5
 800859a:	d106      	bne.n	80085aa <_dtoa_r+0xb7e>
 800859c:	f000 fc72 	bl	8008e84 <__multadd>
 80085a0:	0004      	movs	r4, r0
 80085a2:	0005      	movs	r5, r0
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	9308      	str	r3, [sp, #32]
 80085a8:	e773      	b.n	8008492 <_dtoa_r+0xa66>
 80085aa:	f000 fc6b 	bl	8008e84 <__multadd>
 80085ae:	0029      	movs	r1, r5
 80085b0:	0004      	movs	r4, r0
 80085b2:	2300      	movs	r3, #0
 80085b4:	220a      	movs	r2, #10
 80085b6:	0038      	movs	r0, r7
 80085b8:	f000 fc64 	bl	8008e84 <__multadd>
 80085bc:	0005      	movs	r5, r0
 80085be:	e7f1      	b.n	80085a4 <_dtoa_r+0xb78>
 80085c0:	9b06      	ldr	r3, [sp, #24]
 80085c2:	930c      	str	r3, [sp, #48]	; 0x30
 80085c4:	2400      	movs	r4, #0
 80085c6:	0031      	movs	r1, r6
 80085c8:	9804      	ldr	r0, [sp, #16]
 80085ca:	f7ff f9a3 	bl	8007914 <quorem>
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	3030      	adds	r0, #48	; 0x30
 80085d2:	5518      	strb	r0, [r3, r4]
 80085d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085d6:	3401      	adds	r4, #1
 80085d8:	9006      	str	r0, [sp, #24]
 80085da:	42a3      	cmp	r3, r4
 80085dc:	dd07      	ble.n	80085ee <_dtoa_r+0xbc2>
 80085de:	2300      	movs	r3, #0
 80085e0:	220a      	movs	r2, #10
 80085e2:	0038      	movs	r0, r7
 80085e4:	9904      	ldr	r1, [sp, #16]
 80085e6:	f000 fc4d 	bl	8008e84 <__multadd>
 80085ea:	9004      	str	r0, [sp, #16]
 80085ec:	e7eb      	b.n	80085c6 <_dtoa_r+0xb9a>
 80085ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f0:	2001      	movs	r0, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	dd00      	ble.n	80085f8 <_dtoa_r+0xbcc>
 80085f6:	0018      	movs	r0, r3
 80085f8:	2400      	movs	r4, #0
 80085fa:	9b05      	ldr	r3, [sp, #20]
 80085fc:	181b      	adds	r3, r3, r0
 80085fe:	9307      	str	r3, [sp, #28]
 8008600:	9904      	ldr	r1, [sp, #16]
 8008602:	2201      	movs	r2, #1
 8008604:	0038      	movs	r0, r7
 8008606:	f000 fe37 	bl	8009278 <__lshift>
 800860a:	0031      	movs	r1, r6
 800860c:	9004      	str	r0, [sp, #16]
 800860e:	f000 fea3 	bl	8009358 <__mcmp>
 8008612:	2800      	cmp	r0, #0
 8008614:	dc97      	bgt.n	8008546 <_dtoa_r+0xb1a>
 8008616:	d102      	bne.n	800861e <_dtoa_r+0xbf2>
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	07db      	lsls	r3, r3, #31
 800861c:	d493      	bmi.n	8008546 <_dtoa_r+0xb1a>
 800861e:	9b07      	ldr	r3, [sp, #28]
 8008620:	9307      	str	r3, [sp, #28]
 8008622:	3b01      	subs	r3, #1
 8008624:	781a      	ldrb	r2, [r3, #0]
 8008626:	2a30      	cmp	r2, #48	; 0x30
 8008628:	d0fa      	beq.n	8008620 <_dtoa_r+0xbf4>
 800862a:	e6e1      	b.n	80083f0 <_dtoa_r+0x9c4>
 800862c:	9a05      	ldr	r2, [sp, #20]
 800862e:	429a      	cmp	r2, r3
 8008630:	d18a      	bne.n	8008548 <_dtoa_r+0xb1c>
 8008632:	9b02      	ldr	r3, [sp, #8]
 8008634:	3301      	adds	r3, #1
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	2331      	movs	r3, #49	; 0x31
 800863a:	e795      	b.n	8008568 <_dtoa_r+0xb3c>
 800863c:	4b08      	ldr	r3, [pc, #32]	; (8008660 <_dtoa_r+0xc34>)
 800863e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008640:	9305      	str	r3, [sp, #20]
 8008642:	4b08      	ldr	r3, [pc, #32]	; (8008664 <_dtoa_r+0xc38>)
 8008644:	2a00      	cmp	r2, #0
 8008646:	d001      	beq.n	800864c <_dtoa_r+0xc20>
 8008648:	f7ff fa3b 	bl	8007ac2 <_dtoa_r+0x96>
 800864c:	f7ff fa3b 	bl	8007ac6 <_dtoa_r+0x9a>
 8008650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008652:	2b00      	cmp	r3, #0
 8008654:	dcb6      	bgt.n	80085c4 <_dtoa_r+0xb98>
 8008656:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008658:	2b02      	cmp	r3, #2
 800865a:	dd00      	ble.n	800865e <_dtoa_r+0xc32>
 800865c:	e6b2      	b.n	80083c4 <_dtoa_r+0x998>
 800865e:	e7b1      	b.n	80085c4 <_dtoa_r+0xb98>
 8008660:	0800aa81 	.word	0x0800aa81
 8008664:	0800aa89 	.word	0x0800aa89

08008668 <rshift>:
 8008668:	0002      	movs	r2, r0
 800866a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866c:	6907      	ldr	r7, [r0, #16]
 800866e:	3214      	adds	r2, #20
 8008670:	0013      	movs	r3, r2
 8008672:	b085      	sub	sp, #20
 8008674:	114e      	asrs	r6, r1, #5
 8008676:	42b7      	cmp	r7, r6
 8008678:	dd31      	ble.n	80086de <rshift+0x76>
 800867a:	00b3      	lsls	r3, r6, #2
 800867c:	18d3      	adds	r3, r2, r3
 800867e:	251f      	movs	r5, #31
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	000b      	movs	r3, r1
 8008684:	00bc      	lsls	r4, r7, #2
 8008686:	402b      	ands	r3, r5
 8008688:	1914      	adds	r4, r2, r4
 800868a:	9302      	str	r3, [sp, #8]
 800868c:	4229      	tst	r1, r5
 800868e:	d10c      	bne.n	80086aa <rshift+0x42>
 8008690:	0015      	movs	r5, r2
 8008692:	9901      	ldr	r1, [sp, #4]
 8008694:	428c      	cmp	r4, r1
 8008696:	d838      	bhi.n	800870a <rshift+0xa2>
 8008698:	9901      	ldr	r1, [sp, #4]
 800869a:	2300      	movs	r3, #0
 800869c:	3903      	subs	r1, #3
 800869e:	428c      	cmp	r4, r1
 80086a0:	d301      	bcc.n	80086a6 <rshift+0x3e>
 80086a2:	1bbb      	subs	r3, r7, r6
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	18d3      	adds	r3, r2, r3
 80086a8:	e019      	b.n	80086de <rshift+0x76>
 80086aa:	2120      	movs	r1, #32
 80086ac:	9b02      	ldr	r3, [sp, #8]
 80086ae:	9d01      	ldr	r5, [sp, #4]
 80086b0:	1acb      	subs	r3, r1, r3
 80086b2:	9303      	str	r3, [sp, #12]
 80086b4:	cd02      	ldmia	r5!, {r1}
 80086b6:	9b02      	ldr	r3, [sp, #8]
 80086b8:	4694      	mov	ip, r2
 80086ba:	40d9      	lsrs	r1, r3
 80086bc:	9100      	str	r1, [sp, #0]
 80086be:	42ac      	cmp	r4, r5
 80086c0:	d816      	bhi.n	80086f0 <rshift+0x88>
 80086c2:	9d01      	ldr	r5, [sp, #4]
 80086c4:	2300      	movs	r3, #0
 80086c6:	3501      	adds	r5, #1
 80086c8:	42ac      	cmp	r4, r5
 80086ca:	d302      	bcc.n	80086d2 <rshift+0x6a>
 80086cc:	1bbb      	subs	r3, r7, r6
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	3b04      	subs	r3, #4
 80086d2:	9900      	ldr	r1, [sp, #0]
 80086d4:	18d3      	adds	r3, r2, r3
 80086d6:	6019      	str	r1, [r3, #0]
 80086d8:	2900      	cmp	r1, #0
 80086da:	d000      	beq.n	80086de <rshift+0x76>
 80086dc:	3304      	adds	r3, #4
 80086de:	1a99      	subs	r1, r3, r2
 80086e0:	1089      	asrs	r1, r1, #2
 80086e2:	6101      	str	r1, [r0, #16]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d101      	bne.n	80086ec <rshift+0x84>
 80086e8:	2300      	movs	r3, #0
 80086ea:	6143      	str	r3, [r0, #20]
 80086ec:	b005      	add	sp, #20
 80086ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	9903      	ldr	r1, [sp, #12]
 80086f4:	408b      	lsls	r3, r1
 80086f6:	9900      	ldr	r1, [sp, #0]
 80086f8:	4319      	orrs	r1, r3
 80086fa:	4663      	mov	r3, ip
 80086fc:	c302      	stmia	r3!, {r1}
 80086fe:	469c      	mov	ip, r3
 8008700:	cd02      	ldmia	r5!, {r1}
 8008702:	9b02      	ldr	r3, [sp, #8]
 8008704:	40d9      	lsrs	r1, r3
 8008706:	9100      	str	r1, [sp, #0]
 8008708:	e7d9      	b.n	80086be <rshift+0x56>
 800870a:	c908      	ldmia	r1!, {r3}
 800870c:	c508      	stmia	r5!, {r3}
 800870e:	e7c1      	b.n	8008694 <rshift+0x2c>

08008710 <__hexdig_fun>:
 8008710:	0002      	movs	r2, r0
 8008712:	3a30      	subs	r2, #48	; 0x30
 8008714:	0003      	movs	r3, r0
 8008716:	2a09      	cmp	r2, #9
 8008718:	d802      	bhi.n	8008720 <__hexdig_fun+0x10>
 800871a:	3b20      	subs	r3, #32
 800871c:	b2d8      	uxtb	r0, r3
 800871e:	4770      	bx	lr
 8008720:	0002      	movs	r2, r0
 8008722:	3a61      	subs	r2, #97	; 0x61
 8008724:	2a05      	cmp	r2, #5
 8008726:	d801      	bhi.n	800872c <__hexdig_fun+0x1c>
 8008728:	3b47      	subs	r3, #71	; 0x47
 800872a:	e7f7      	b.n	800871c <__hexdig_fun+0xc>
 800872c:	001a      	movs	r2, r3
 800872e:	3a41      	subs	r2, #65	; 0x41
 8008730:	2000      	movs	r0, #0
 8008732:	2a05      	cmp	r2, #5
 8008734:	d8f3      	bhi.n	800871e <__hexdig_fun+0xe>
 8008736:	3b27      	subs	r3, #39	; 0x27
 8008738:	e7f0      	b.n	800871c <__hexdig_fun+0xc>
	...

0800873c <__gethex>:
 800873c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800873e:	b08d      	sub	sp, #52	; 0x34
 8008740:	930a      	str	r3, [sp, #40]	; 0x28
 8008742:	4bbd      	ldr	r3, [pc, #756]	; (8008a38 <__gethex+0x2fc>)
 8008744:	9005      	str	r0, [sp, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	9109      	str	r1, [sp, #36]	; 0x24
 800874a:	0018      	movs	r0, r3
 800874c:	9202      	str	r2, [sp, #8]
 800874e:	9307      	str	r3, [sp, #28]
 8008750:	f7f7 fcda 	bl	8000108 <strlen>
 8008754:	2202      	movs	r2, #2
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	4252      	negs	r2, r2
 800875a:	181b      	adds	r3, r3, r0
 800875c:	3b01      	subs	r3, #1
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	9003      	str	r0, [sp, #12]
 8008762:	930b      	str	r3, [sp, #44]	; 0x2c
 8008764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008766:	6819      	ldr	r1, [r3, #0]
 8008768:	1c8b      	adds	r3, r1, #2
 800876a:	1a52      	subs	r2, r2, r1
 800876c:	18d1      	adds	r1, r2, r3
 800876e:	9301      	str	r3, [sp, #4]
 8008770:	9108      	str	r1, [sp, #32]
 8008772:	9901      	ldr	r1, [sp, #4]
 8008774:	3301      	adds	r3, #1
 8008776:	7808      	ldrb	r0, [r1, #0]
 8008778:	2830      	cmp	r0, #48	; 0x30
 800877a:	d0f7      	beq.n	800876c <__gethex+0x30>
 800877c:	f7ff ffc8 	bl	8008710 <__hexdig_fun>
 8008780:	1e04      	subs	r4, r0, #0
 8008782:	d13e      	bne.n	8008802 <__gethex+0xc6>
 8008784:	9a03      	ldr	r2, [sp, #12]
 8008786:	9907      	ldr	r1, [sp, #28]
 8008788:	9801      	ldr	r0, [sp, #4]
 800878a:	f001 fa0d 	bl	8009ba8 <strncmp>
 800878e:	1e07      	subs	r7, r0, #0
 8008790:	d000      	beq.n	8008794 <__gethex+0x58>
 8008792:	e06f      	b.n	8008874 <__gethex+0x138>
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	9a03      	ldr	r2, [sp, #12]
 8008798:	5c98      	ldrb	r0, [r3, r2]
 800879a:	189d      	adds	r5, r3, r2
 800879c:	f7ff ffb8 	bl	8008710 <__hexdig_fun>
 80087a0:	2301      	movs	r3, #1
 80087a2:	9304      	str	r3, [sp, #16]
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d034      	beq.n	8008812 <__gethex+0xd6>
 80087a8:	9501      	str	r5, [sp, #4]
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	7818      	ldrb	r0, [r3, #0]
 80087ae:	2830      	cmp	r0, #48	; 0x30
 80087b0:	d009      	beq.n	80087c6 <__gethex+0x8a>
 80087b2:	f7ff ffad 	bl	8008710 <__hexdig_fun>
 80087b6:	4243      	negs	r3, r0
 80087b8:	4143      	adcs	r3, r0
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	2301      	movs	r3, #1
 80087be:	002c      	movs	r4, r5
 80087c0:	9308      	str	r3, [sp, #32]
 80087c2:	9d01      	ldr	r5, [sp, #4]
 80087c4:	e004      	b.n	80087d0 <__gethex+0x94>
 80087c6:	9b01      	ldr	r3, [sp, #4]
 80087c8:	3301      	adds	r3, #1
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	e7ed      	b.n	80087aa <__gethex+0x6e>
 80087ce:	3501      	adds	r5, #1
 80087d0:	7828      	ldrb	r0, [r5, #0]
 80087d2:	f7ff ff9d 	bl	8008710 <__hexdig_fun>
 80087d6:	1e07      	subs	r7, r0, #0
 80087d8:	d1f9      	bne.n	80087ce <__gethex+0x92>
 80087da:	0028      	movs	r0, r5
 80087dc:	9a03      	ldr	r2, [sp, #12]
 80087de:	9907      	ldr	r1, [sp, #28]
 80087e0:	f001 f9e2 	bl	8009ba8 <strncmp>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d112      	bne.n	800880e <__gethex+0xd2>
 80087e8:	2c00      	cmp	r4, #0
 80087ea:	d107      	bne.n	80087fc <__gethex+0xc0>
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	18ed      	adds	r5, r5, r3
 80087f0:	002c      	movs	r4, r5
 80087f2:	7828      	ldrb	r0, [r5, #0]
 80087f4:	f7ff ff8c 	bl	8008710 <__hexdig_fun>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d106      	bne.n	800880a <__gethex+0xce>
 80087fc:	1b67      	subs	r7, r4, r5
 80087fe:	00bf      	lsls	r7, r7, #2
 8008800:	e007      	b.n	8008812 <__gethex+0xd6>
 8008802:	2300      	movs	r3, #0
 8008804:	001c      	movs	r4, r3
 8008806:	9304      	str	r3, [sp, #16]
 8008808:	e7db      	b.n	80087c2 <__gethex+0x86>
 800880a:	3501      	adds	r5, #1
 800880c:	e7f1      	b.n	80087f2 <__gethex+0xb6>
 800880e:	2c00      	cmp	r4, #0
 8008810:	d1f4      	bne.n	80087fc <__gethex+0xc0>
 8008812:	2220      	movs	r2, #32
 8008814:	782b      	ldrb	r3, [r5, #0]
 8008816:	002e      	movs	r6, r5
 8008818:	4393      	bics	r3, r2
 800881a:	2b50      	cmp	r3, #80	; 0x50
 800881c:	d11d      	bne.n	800885a <__gethex+0x11e>
 800881e:	786b      	ldrb	r3, [r5, #1]
 8008820:	2b2b      	cmp	r3, #43	; 0x2b
 8008822:	d02c      	beq.n	800887e <__gethex+0x142>
 8008824:	2b2d      	cmp	r3, #45	; 0x2d
 8008826:	d02e      	beq.n	8008886 <__gethex+0x14a>
 8008828:	2300      	movs	r3, #0
 800882a:	1c6e      	adds	r6, r5, #1
 800882c:	9306      	str	r3, [sp, #24]
 800882e:	7830      	ldrb	r0, [r6, #0]
 8008830:	f7ff ff6e 	bl	8008710 <__hexdig_fun>
 8008834:	1e43      	subs	r3, r0, #1
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b18      	cmp	r3, #24
 800883a:	d82b      	bhi.n	8008894 <__gethex+0x158>
 800883c:	3810      	subs	r0, #16
 800883e:	0004      	movs	r4, r0
 8008840:	7870      	ldrb	r0, [r6, #1]
 8008842:	f7ff ff65 	bl	8008710 <__hexdig_fun>
 8008846:	1e43      	subs	r3, r0, #1
 8008848:	b2db      	uxtb	r3, r3
 800884a:	3601      	adds	r6, #1
 800884c:	2b18      	cmp	r3, #24
 800884e:	d91c      	bls.n	800888a <__gethex+0x14e>
 8008850:	9b06      	ldr	r3, [sp, #24]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d000      	beq.n	8008858 <__gethex+0x11c>
 8008856:	4264      	negs	r4, r4
 8008858:	193f      	adds	r7, r7, r4
 800885a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885c:	601e      	str	r6, [r3, #0]
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d019      	beq.n	8008898 <__gethex+0x15c>
 8008864:	2600      	movs	r6, #0
 8008866:	9b08      	ldr	r3, [sp, #32]
 8008868:	42b3      	cmp	r3, r6
 800886a:	d100      	bne.n	800886e <__gethex+0x132>
 800886c:	3606      	adds	r6, #6
 800886e:	0030      	movs	r0, r6
 8008870:	b00d      	add	sp, #52	; 0x34
 8008872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008874:	2301      	movs	r3, #1
 8008876:	0027      	movs	r7, r4
 8008878:	9d01      	ldr	r5, [sp, #4]
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	e7c9      	b.n	8008812 <__gethex+0xd6>
 800887e:	2300      	movs	r3, #0
 8008880:	9306      	str	r3, [sp, #24]
 8008882:	1cae      	adds	r6, r5, #2
 8008884:	e7d3      	b.n	800882e <__gethex+0xf2>
 8008886:	2301      	movs	r3, #1
 8008888:	e7fa      	b.n	8008880 <__gethex+0x144>
 800888a:	230a      	movs	r3, #10
 800888c:	435c      	muls	r4, r3
 800888e:	1824      	adds	r4, r4, r0
 8008890:	3c10      	subs	r4, #16
 8008892:	e7d5      	b.n	8008840 <__gethex+0x104>
 8008894:	002e      	movs	r6, r5
 8008896:	e7e0      	b.n	800885a <__gethex+0x11e>
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	9904      	ldr	r1, [sp, #16]
 800889c:	1aeb      	subs	r3, r5, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	2b07      	cmp	r3, #7
 80088a2:	dc0a      	bgt.n	80088ba <__gethex+0x17e>
 80088a4:	9805      	ldr	r0, [sp, #20]
 80088a6:	f000 fa85 	bl	8008db4 <_Balloc>
 80088aa:	1e04      	subs	r4, r0, #0
 80088ac:	d108      	bne.n	80088c0 <__gethex+0x184>
 80088ae:	0002      	movs	r2, r0
 80088b0:	21de      	movs	r1, #222	; 0xde
 80088b2:	4b62      	ldr	r3, [pc, #392]	; (8008a3c <__gethex+0x300>)
 80088b4:	4862      	ldr	r0, [pc, #392]	; (8008a40 <__gethex+0x304>)
 80088b6:	f001 f995 	bl	8009be4 <__assert_func>
 80088ba:	3101      	adds	r1, #1
 80088bc:	105b      	asrs	r3, r3, #1
 80088be:	e7ef      	b.n	80088a0 <__gethex+0x164>
 80088c0:	0003      	movs	r3, r0
 80088c2:	3314      	adds	r3, #20
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	9309      	str	r3, [sp, #36]	; 0x24
 80088c8:	2300      	movs	r3, #0
 80088ca:	001e      	movs	r6, r3
 80088cc:	9306      	str	r3, [sp, #24]
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	42ab      	cmp	r3, r5
 80088d2:	d340      	bcc.n	8008956 <__gethex+0x21a>
 80088d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80088d6:	9b04      	ldr	r3, [sp, #16]
 80088d8:	c540      	stmia	r5!, {r6}
 80088da:	1aed      	subs	r5, r5, r3
 80088dc:	10ad      	asrs	r5, r5, #2
 80088de:	0030      	movs	r0, r6
 80088e0:	6125      	str	r5, [r4, #16]
 80088e2:	f000 fb5f 	bl	8008fa4 <__hi0bits>
 80088e6:	9b02      	ldr	r3, [sp, #8]
 80088e8:	016d      	lsls	r5, r5, #5
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	1a2e      	subs	r6, r5, r0
 80088ee:	9301      	str	r3, [sp, #4]
 80088f0:	429e      	cmp	r6, r3
 80088f2:	dd5a      	ble.n	80089aa <__gethex+0x26e>
 80088f4:	1af6      	subs	r6, r6, r3
 80088f6:	0031      	movs	r1, r6
 80088f8:	0020      	movs	r0, r4
 80088fa:	f000 ff02 	bl	8009702 <__any_on>
 80088fe:	1e05      	subs	r5, r0, #0
 8008900:	d016      	beq.n	8008930 <__gethex+0x1f4>
 8008902:	2501      	movs	r5, #1
 8008904:	211f      	movs	r1, #31
 8008906:	0028      	movs	r0, r5
 8008908:	1e73      	subs	r3, r6, #1
 800890a:	4019      	ands	r1, r3
 800890c:	4088      	lsls	r0, r1
 800890e:	0001      	movs	r1, r0
 8008910:	115a      	asrs	r2, r3, #5
 8008912:	9804      	ldr	r0, [sp, #16]
 8008914:	0092      	lsls	r2, r2, #2
 8008916:	5812      	ldr	r2, [r2, r0]
 8008918:	420a      	tst	r2, r1
 800891a:	d009      	beq.n	8008930 <__gethex+0x1f4>
 800891c:	42ab      	cmp	r3, r5
 800891e:	dd06      	ble.n	800892e <__gethex+0x1f2>
 8008920:	0020      	movs	r0, r4
 8008922:	1eb1      	subs	r1, r6, #2
 8008924:	f000 feed 	bl	8009702 <__any_on>
 8008928:	3502      	adds	r5, #2
 800892a:	2800      	cmp	r0, #0
 800892c:	d100      	bne.n	8008930 <__gethex+0x1f4>
 800892e:	2502      	movs	r5, #2
 8008930:	0031      	movs	r1, r6
 8008932:	0020      	movs	r0, r4
 8008934:	f7ff fe98 	bl	8008668 <rshift>
 8008938:	19bf      	adds	r7, r7, r6
 800893a:	9b02      	ldr	r3, [sp, #8]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	9303      	str	r3, [sp, #12]
 8008940:	42bb      	cmp	r3, r7
 8008942:	da42      	bge.n	80089ca <__gethex+0x28e>
 8008944:	0021      	movs	r1, r4
 8008946:	9805      	ldr	r0, [sp, #20]
 8008948:	f000 fa78 	bl	8008e3c <_Bfree>
 800894c:	2300      	movs	r3, #0
 800894e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008950:	26a3      	movs	r6, #163	; 0xa3
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	e78b      	b.n	800886e <__gethex+0x132>
 8008956:	1e6b      	subs	r3, r5, #1
 8008958:	9308      	str	r3, [sp, #32]
 800895a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	4293      	cmp	r3, r2
 8008960:	d014      	beq.n	800898c <__gethex+0x250>
 8008962:	9b06      	ldr	r3, [sp, #24]
 8008964:	2b20      	cmp	r3, #32
 8008966:	d104      	bne.n	8008972 <__gethex+0x236>
 8008968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896a:	c340      	stmia	r3!, {r6}
 800896c:	2600      	movs	r6, #0
 800896e:	9309      	str	r3, [sp, #36]	; 0x24
 8008970:	9606      	str	r6, [sp, #24]
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	7818      	ldrb	r0, [r3, #0]
 8008976:	f7ff fecb 	bl	8008710 <__hexdig_fun>
 800897a:	230f      	movs	r3, #15
 800897c:	4018      	ands	r0, r3
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	9d08      	ldr	r5, [sp, #32]
 8008982:	4098      	lsls	r0, r3
 8008984:	3304      	adds	r3, #4
 8008986:	4306      	orrs	r6, r0
 8008988:	9306      	str	r3, [sp, #24]
 800898a:	e7a0      	b.n	80088ce <__gethex+0x192>
 800898c:	2301      	movs	r3, #1
 800898e:	9a03      	ldr	r2, [sp, #12]
 8008990:	1a9d      	subs	r5, r3, r2
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	195d      	adds	r5, r3, r5
 8008996:	9b01      	ldr	r3, [sp, #4]
 8008998:	429d      	cmp	r5, r3
 800899a:	d3e2      	bcc.n	8008962 <__gethex+0x226>
 800899c:	0028      	movs	r0, r5
 800899e:	9907      	ldr	r1, [sp, #28]
 80089a0:	f001 f902 	bl	8009ba8 <strncmp>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d1dc      	bne.n	8008962 <__gethex+0x226>
 80089a8:	e791      	b.n	80088ce <__gethex+0x192>
 80089aa:	9b01      	ldr	r3, [sp, #4]
 80089ac:	2500      	movs	r5, #0
 80089ae:	429e      	cmp	r6, r3
 80089b0:	dac3      	bge.n	800893a <__gethex+0x1fe>
 80089b2:	1b9e      	subs	r6, r3, r6
 80089b4:	0021      	movs	r1, r4
 80089b6:	0032      	movs	r2, r6
 80089b8:	9805      	ldr	r0, [sp, #20]
 80089ba:	f000 fc5d 	bl	8009278 <__lshift>
 80089be:	0003      	movs	r3, r0
 80089c0:	3314      	adds	r3, #20
 80089c2:	0004      	movs	r4, r0
 80089c4:	1bbf      	subs	r7, r7, r6
 80089c6:	9304      	str	r3, [sp, #16]
 80089c8:	e7b7      	b.n	800893a <__gethex+0x1fe>
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	685e      	ldr	r6, [r3, #4]
 80089ce:	42be      	cmp	r6, r7
 80089d0:	dd71      	ble.n	8008ab6 <__gethex+0x37a>
 80089d2:	9b01      	ldr	r3, [sp, #4]
 80089d4:	1bf6      	subs	r6, r6, r7
 80089d6:	42b3      	cmp	r3, r6
 80089d8:	dc38      	bgt.n	8008a4c <__gethex+0x310>
 80089da:	9b02      	ldr	r3, [sp, #8]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d026      	beq.n	8008a30 <__gethex+0x2f4>
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d02e      	beq.n	8008a44 <__gethex+0x308>
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d119      	bne.n	8008a1e <__gethex+0x2e2>
 80089ea:	9b01      	ldr	r3, [sp, #4]
 80089ec:	42b3      	cmp	r3, r6
 80089ee:	d116      	bne.n	8008a1e <__gethex+0x2e2>
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d10d      	bne.n	8008a10 <__gethex+0x2d4>
 80089f4:	9b02      	ldr	r3, [sp, #8]
 80089f6:	2662      	movs	r6, #98	; 0x62
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	9a01      	ldr	r2, [sp, #4]
 80089fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	2301      	movs	r3, #1
 8008a04:	9a04      	ldr	r2, [sp, #16]
 8008a06:	6123      	str	r3, [r4, #16]
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a0c:	601c      	str	r4, [r3, #0]
 8008a0e:	e72e      	b.n	800886e <__gethex+0x132>
 8008a10:	9901      	ldr	r1, [sp, #4]
 8008a12:	0020      	movs	r0, r4
 8008a14:	3901      	subs	r1, #1
 8008a16:	f000 fe74 	bl	8009702 <__any_on>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d1ea      	bne.n	80089f4 <__gethex+0x2b8>
 8008a1e:	0021      	movs	r1, r4
 8008a20:	9805      	ldr	r0, [sp, #20]
 8008a22:	f000 fa0b 	bl	8008e3c <_Bfree>
 8008a26:	2300      	movs	r3, #0
 8008a28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a2a:	2650      	movs	r6, #80	; 0x50
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	e71e      	b.n	800886e <__gethex+0x132>
 8008a30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1f3      	bne.n	8008a1e <__gethex+0x2e2>
 8008a36:	e7dd      	b.n	80089f4 <__gethex+0x2b8>
 8008a38:	0800ab80 	.word	0x0800ab80
 8008a3c:	0800ab04 	.word	0x0800ab04
 8008a40:	0800ab15 	.word	0x0800ab15
 8008a44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1d4      	bne.n	80089f4 <__gethex+0x2b8>
 8008a4a:	e7e8      	b.n	8008a1e <__gethex+0x2e2>
 8008a4c:	1e77      	subs	r7, r6, #1
 8008a4e:	2d00      	cmp	r5, #0
 8008a50:	d12f      	bne.n	8008ab2 <__gethex+0x376>
 8008a52:	2f00      	cmp	r7, #0
 8008a54:	d004      	beq.n	8008a60 <__gethex+0x324>
 8008a56:	0039      	movs	r1, r7
 8008a58:	0020      	movs	r0, r4
 8008a5a:	f000 fe52 	bl	8009702 <__any_on>
 8008a5e:	0005      	movs	r5, r0
 8008a60:	231f      	movs	r3, #31
 8008a62:	117a      	asrs	r2, r7, #5
 8008a64:	401f      	ands	r7, r3
 8008a66:	3b1e      	subs	r3, #30
 8008a68:	40bb      	lsls	r3, r7
 8008a6a:	9904      	ldr	r1, [sp, #16]
 8008a6c:	0092      	lsls	r2, r2, #2
 8008a6e:	5852      	ldr	r2, [r2, r1]
 8008a70:	421a      	tst	r2, r3
 8008a72:	d001      	beq.n	8008a78 <__gethex+0x33c>
 8008a74:	2302      	movs	r3, #2
 8008a76:	431d      	orrs	r5, r3
 8008a78:	9b01      	ldr	r3, [sp, #4]
 8008a7a:	0031      	movs	r1, r6
 8008a7c:	1b9b      	subs	r3, r3, r6
 8008a7e:	2602      	movs	r6, #2
 8008a80:	0020      	movs	r0, r4
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	f7ff fdf0 	bl	8008668 <rshift>
 8008a88:	9b02      	ldr	r3, [sp, #8]
 8008a8a:	685f      	ldr	r7, [r3, #4]
 8008a8c:	2d00      	cmp	r5, #0
 8008a8e:	d041      	beq.n	8008b14 <__gethex+0x3d8>
 8008a90:	9b02      	ldr	r3, [sp, #8]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d010      	beq.n	8008aba <__gethex+0x37e>
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d012      	beq.n	8008ac2 <__gethex+0x386>
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d106      	bne.n	8008aae <__gethex+0x372>
 8008aa0:	07aa      	lsls	r2, r5, #30
 8008aa2:	d504      	bpl.n	8008aae <__gethex+0x372>
 8008aa4:	9a04      	ldr	r2, [sp, #16]
 8008aa6:	6810      	ldr	r0, [r2, #0]
 8008aa8:	4305      	orrs	r5, r0
 8008aaa:	421d      	tst	r5, r3
 8008aac:	d10c      	bne.n	8008ac8 <__gethex+0x38c>
 8008aae:	2310      	movs	r3, #16
 8008ab0:	e02f      	b.n	8008b12 <__gethex+0x3d6>
 8008ab2:	2501      	movs	r5, #1
 8008ab4:	e7d4      	b.n	8008a60 <__gethex+0x324>
 8008ab6:	2601      	movs	r6, #1
 8008ab8:	e7e8      	b.n	8008a8c <__gethex+0x350>
 8008aba:	2301      	movs	r3, #1
 8008abc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ac2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0f2      	beq.n	8008aae <__gethex+0x372>
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	2000      	movs	r0, #0
 8008acc:	9303      	str	r3, [sp, #12]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	0023      	movs	r3, r4
 8008ad4:	9a04      	ldr	r2, [sp, #16]
 8008ad6:	3314      	adds	r3, #20
 8008ad8:	1899      	adds	r1, r3, r2
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	1c55      	adds	r5, r2, #1
 8008ade:	d01e      	beq.n	8008b1e <__gethex+0x3e2>
 8008ae0:	3201      	adds	r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	0023      	movs	r3, r4
 8008ae6:	3314      	adds	r3, #20
 8008ae8:	2e02      	cmp	r6, #2
 8008aea:	d140      	bne.n	8008b6e <__gethex+0x432>
 8008aec:	9a02      	ldr	r2, [sp, #8]
 8008aee:	9901      	ldr	r1, [sp, #4]
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	3a01      	subs	r2, #1
 8008af4:	428a      	cmp	r2, r1
 8008af6:	d10b      	bne.n	8008b10 <__gethex+0x3d4>
 8008af8:	114a      	asrs	r2, r1, #5
 8008afa:	211f      	movs	r1, #31
 8008afc:	9801      	ldr	r0, [sp, #4]
 8008afe:	0092      	lsls	r2, r2, #2
 8008b00:	4001      	ands	r1, r0
 8008b02:	2001      	movs	r0, #1
 8008b04:	0005      	movs	r5, r0
 8008b06:	408d      	lsls	r5, r1
 8008b08:	58d3      	ldr	r3, [r2, r3]
 8008b0a:	422b      	tst	r3, r5
 8008b0c:	d000      	beq.n	8008b10 <__gethex+0x3d4>
 8008b0e:	2601      	movs	r6, #1
 8008b10:	2320      	movs	r3, #32
 8008b12:	431e      	orrs	r6, r3
 8008b14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b16:	601c      	str	r4, [r3, #0]
 8008b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b1a:	601f      	str	r7, [r3, #0]
 8008b1c:	e6a7      	b.n	800886e <__gethex+0x132>
 8008b1e:	c301      	stmia	r3!, {r0}
 8008b20:	4299      	cmp	r1, r3
 8008b22:	d8da      	bhi.n	8008ada <__gethex+0x39e>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	68a2      	ldr	r2, [r4, #8]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	db17      	blt.n	8008b5c <__gethex+0x420>
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	9805      	ldr	r0, [sp, #20]
 8008b30:	1c59      	adds	r1, r3, #1
 8008b32:	f000 f93f 	bl	8008db4 <_Balloc>
 8008b36:	1e05      	subs	r5, r0, #0
 8008b38:	d103      	bne.n	8008b42 <__gethex+0x406>
 8008b3a:	0002      	movs	r2, r0
 8008b3c:	2184      	movs	r1, #132	; 0x84
 8008b3e:	4b1c      	ldr	r3, [pc, #112]	; (8008bb0 <__gethex+0x474>)
 8008b40:	e6b8      	b.n	80088b4 <__gethex+0x178>
 8008b42:	0021      	movs	r1, r4
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	310c      	adds	r1, #12
 8008b48:	1c9a      	adds	r2, r3, #2
 8008b4a:	0092      	lsls	r2, r2, #2
 8008b4c:	300c      	adds	r0, #12
 8008b4e:	f000 f928 	bl	8008da2 <memcpy>
 8008b52:	0021      	movs	r1, r4
 8008b54:	9805      	ldr	r0, [sp, #20]
 8008b56:	f000 f971 	bl	8008e3c <_Bfree>
 8008b5a:	002c      	movs	r4, r5
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	6122      	str	r2, [r4, #16]
 8008b62:	2201      	movs	r2, #1
 8008b64:	3304      	adds	r3, #4
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	18e3      	adds	r3, r4, r3
 8008b6a:	605a      	str	r2, [r3, #4]
 8008b6c:	e7ba      	b.n	8008ae4 <__gethex+0x3a8>
 8008b6e:	6922      	ldr	r2, [r4, #16]
 8008b70:	9903      	ldr	r1, [sp, #12]
 8008b72:	428a      	cmp	r2, r1
 8008b74:	dd09      	ble.n	8008b8a <__gethex+0x44e>
 8008b76:	2101      	movs	r1, #1
 8008b78:	0020      	movs	r0, r4
 8008b7a:	f7ff fd75 	bl	8008668 <rshift>
 8008b7e:	9b02      	ldr	r3, [sp, #8]
 8008b80:	3701      	adds	r7, #1
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	42bb      	cmp	r3, r7
 8008b86:	dac2      	bge.n	8008b0e <__gethex+0x3d2>
 8008b88:	e6dc      	b.n	8008944 <__gethex+0x208>
 8008b8a:	221f      	movs	r2, #31
 8008b8c:	9d01      	ldr	r5, [sp, #4]
 8008b8e:	9901      	ldr	r1, [sp, #4]
 8008b90:	2601      	movs	r6, #1
 8008b92:	4015      	ands	r5, r2
 8008b94:	4211      	tst	r1, r2
 8008b96:	d0bb      	beq.n	8008b10 <__gethex+0x3d4>
 8008b98:	9a04      	ldr	r2, [sp, #16]
 8008b9a:	189b      	adds	r3, r3, r2
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	f000 fa00 	bl	8008fa4 <__hi0bits>
 8008ba4:	2320      	movs	r3, #32
 8008ba6:	1b5d      	subs	r5, r3, r5
 8008ba8:	42a8      	cmp	r0, r5
 8008baa:	dbe4      	blt.n	8008b76 <__gethex+0x43a>
 8008bac:	e7b0      	b.n	8008b10 <__gethex+0x3d4>
 8008bae:	46c0      	nop			; (mov r8, r8)
 8008bb0:	0800ab04 	.word	0x0800ab04

08008bb4 <L_shift>:
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	b570      	push	{r4, r5, r6, lr}
 8008bb8:	2520      	movs	r5, #32
 8008bba:	1a9a      	subs	r2, r3, r2
 8008bbc:	0092      	lsls	r2, r2, #2
 8008bbe:	1aad      	subs	r5, r5, r2
 8008bc0:	6843      	ldr	r3, [r0, #4]
 8008bc2:	6806      	ldr	r6, [r0, #0]
 8008bc4:	001c      	movs	r4, r3
 8008bc6:	40ac      	lsls	r4, r5
 8008bc8:	40d3      	lsrs	r3, r2
 8008bca:	4334      	orrs	r4, r6
 8008bcc:	6004      	str	r4, [r0, #0]
 8008bce:	6043      	str	r3, [r0, #4]
 8008bd0:	3004      	adds	r0, #4
 8008bd2:	4288      	cmp	r0, r1
 8008bd4:	d3f4      	bcc.n	8008bc0 <L_shift+0xc>
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}

08008bd8 <__match>:
 8008bd8:	b530      	push	{r4, r5, lr}
 8008bda:	6803      	ldr	r3, [r0, #0]
 8008bdc:	780c      	ldrb	r4, [r1, #0]
 8008bde:	3301      	adds	r3, #1
 8008be0:	2c00      	cmp	r4, #0
 8008be2:	d102      	bne.n	8008bea <__match+0x12>
 8008be4:	6003      	str	r3, [r0, #0]
 8008be6:	2001      	movs	r0, #1
 8008be8:	bd30      	pop	{r4, r5, pc}
 8008bea:	781a      	ldrb	r2, [r3, #0]
 8008bec:	0015      	movs	r5, r2
 8008bee:	3d41      	subs	r5, #65	; 0x41
 8008bf0:	2d19      	cmp	r5, #25
 8008bf2:	d800      	bhi.n	8008bf6 <__match+0x1e>
 8008bf4:	3220      	adds	r2, #32
 8008bf6:	3101      	adds	r1, #1
 8008bf8:	42a2      	cmp	r2, r4
 8008bfa:	d0ef      	beq.n	8008bdc <__match+0x4>
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e7f3      	b.n	8008be8 <__match+0x10>

08008c00 <__hexnan>:
 8008c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c02:	680b      	ldr	r3, [r1, #0]
 8008c04:	b08b      	sub	sp, #44	; 0x2c
 8008c06:	115c      	asrs	r4, r3, #5
 8008c08:	00a4      	lsls	r4, r4, #2
 8008c0a:	9201      	str	r2, [sp, #4]
 8008c0c:	1912      	adds	r2, r2, r4
 8008c0e:	0019      	movs	r1, r3
 8008c10:	9202      	str	r2, [sp, #8]
 8008c12:	221f      	movs	r2, #31
 8008c14:	4011      	ands	r1, r2
 8008c16:	9008      	str	r0, [sp, #32]
 8008c18:	9106      	str	r1, [sp, #24]
 8008c1a:	4213      	tst	r3, r2
 8008c1c:	d002      	beq.n	8008c24 <__hexnan+0x24>
 8008c1e:	9b02      	ldr	r3, [sp, #8]
 8008c20:	3304      	adds	r3, #4
 8008c22:	9302      	str	r3, [sp, #8]
 8008c24:	9b02      	ldr	r3, [sp, #8]
 8008c26:	2500      	movs	r5, #0
 8008c28:	1f1e      	subs	r6, r3, #4
 8008c2a:	0037      	movs	r7, r6
 8008c2c:	0034      	movs	r4, r6
 8008c2e:	9b08      	ldr	r3, [sp, #32]
 8008c30:	6035      	str	r5, [r6, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	9507      	str	r5, [sp, #28]
 8008c36:	9305      	str	r3, [sp, #20]
 8008c38:	9503      	str	r5, [sp, #12]
 8008c3a:	9b05      	ldr	r3, [sp, #20]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c40:	9b05      	ldr	r3, [sp, #20]
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d028      	beq.n	8008c9c <__hexnan+0x9c>
 8008c4a:	9804      	ldr	r0, [sp, #16]
 8008c4c:	f7ff fd60 	bl	8008710 <__hexdig_fun>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d154      	bne.n	8008cfe <__hexnan+0xfe>
 8008c54:	9b04      	ldr	r3, [sp, #16]
 8008c56:	2b20      	cmp	r3, #32
 8008c58:	d819      	bhi.n	8008c8e <__hexnan+0x8e>
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	9a07      	ldr	r2, [sp, #28]
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	dd12      	ble.n	8008c88 <__hexnan+0x88>
 8008c62:	42bc      	cmp	r4, r7
 8008c64:	d206      	bcs.n	8008c74 <__hexnan+0x74>
 8008c66:	2d07      	cmp	r5, #7
 8008c68:	dc04      	bgt.n	8008c74 <__hexnan+0x74>
 8008c6a:	002a      	movs	r2, r5
 8008c6c:	0039      	movs	r1, r7
 8008c6e:	0020      	movs	r0, r4
 8008c70:	f7ff ffa0 	bl	8008bb4 <L_shift>
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	2508      	movs	r5, #8
 8008c78:	429c      	cmp	r4, r3
 8008c7a:	d905      	bls.n	8008c88 <__hexnan+0x88>
 8008c7c:	1f27      	subs	r7, r4, #4
 8008c7e:	2500      	movs	r5, #0
 8008c80:	003c      	movs	r4, r7
 8008c82:	9b03      	ldr	r3, [sp, #12]
 8008c84:	603d      	str	r5, [r7, #0]
 8008c86:	9307      	str	r3, [sp, #28]
 8008c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c8a:	9305      	str	r3, [sp, #20]
 8008c8c:	e7d5      	b.n	8008c3a <__hexnan+0x3a>
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	2b29      	cmp	r3, #41	; 0x29
 8008c92:	d158      	bne.n	8008d46 <__hexnan+0x146>
 8008c94:	9b05      	ldr	r3, [sp, #20]
 8008c96:	9a08      	ldr	r2, [sp, #32]
 8008c98:	3302      	adds	r3, #2
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d051      	beq.n	8008d46 <__hexnan+0x146>
 8008ca2:	42bc      	cmp	r4, r7
 8008ca4:	d206      	bcs.n	8008cb4 <__hexnan+0xb4>
 8008ca6:	2d07      	cmp	r5, #7
 8008ca8:	dc04      	bgt.n	8008cb4 <__hexnan+0xb4>
 8008caa:	002a      	movs	r2, r5
 8008cac:	0039      	movs	r1, r7
 8008cae:	0020      	movs	r0, r4
 8008cb0:	f7ff ff80 	bl	8008bb4 <L_shift>
 8008cb4:	9b01      	ldr	r3, [sp, #4]
 8008cb6:	429c      	cmp	r4, r3
 8008cb8:	d935      	bls.n	8008d26 <__hexnan+0x126>
 8008cba:	001a      	movs	r2, r3
 8008cbc:	0023      	movs	r3, r4
 8008cbe:	cb02      	ldmia	r3!, {r1}
 8008cc0:	c202      	stmia	r2!, {r1}
 8008cc2:	429e      	cmp	r6, r3
 8008cc4:	d2fb      	bcs.n	8008cbe <__hexnan+0xbe>
 8008cc6:	9b02      	ldr	r3, [sp, #8]
 8008cc8:	1c61      	adds	r1, r4, #1
 8008cca:	1eda      	subs	r2, r3, #3
 8008ccc:	2304      	movs	r3, #4
 8008cce:	4291      	cmp	r1, r2
 8008cd0:	d805      	bhi.n	8008cde <__hexnan+0xde>
 8008cd2:	9b02      	ldr	r3, [sp, #8]
 8008cd4:	3b04      	subs	r3, #4
 8008cd6:	1b1c      	subs	r4, r3, r4
 8008cd8:	08a4      	lsrs	r4, r4, #2
 8008cda:	3401      	adds	r4, #1
 8008cdc:	00a3      	lsls	r3, r4, #2
 8008cde:	9a01      	ldr	r2, [sp, #4]
 8008ce0:	18d4      	adds	r4, r2, r3
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	c408      	stmia	r4!, {r3}
 8008ce6:	42a6      	cmp	r6, r4
 8008ce8:	d2fc      	bcs.n	8008ce4 <__hexnan+0xe4>
 8008cea:	6833      	ldr	r3, [r6, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d104      	bne.n	8008cfa <__hexnan+0xfa>
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	429e      	cmp	r6, r3
 8008cf4:	d125      	bne.n	8008d42 <__hexnan+0x142>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	6033      	str	r3, [r6, #0]
 8008cfa:	2005      	movs	r0, #5
 8008cfc:	e024      	b.n	8008d48 <__hexnan+0x148>
 8008cfe:	9b03      	ldr	r3, [sp, #12]
 8008d00:	3501      	adds	r5, #1
 8008d02:	3301      	adds	r3, #1
 8008d04:	9303      	str	r3, [sp, #12]
 8008d06:	2d08      	cmp	r5, #8
 8008d08:	dd06      	ble.n	8008d18 <__hexnan+0x118>
 8008d0a:	9b01      	ldr	r3, [sp, #4]
 8008d0c:	429c      	cmp	r4, r3
 8008d0e:	d9bb      	bls.n	8008c88 <__hexnan+0x88>
 8008d10:	2300      	movs	r3, #0
 8008d12:	2501      	movs	r5, #1
 8008d14:	3c04      	subs	r4, #4
 8008d16:	6023      	str	r3, [r4, #0]
 8008d18:	220f      	movs	r2, #15
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	4010      	ands	r0, r2
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	4318      	orrs	r0, r3
 8008d22:	6020      	str	r0, [r4, #0]
 8008d24:	e7b0      	b.n	8008c88 <__hexnan+0x88>
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0de      	beq.n	8008cea <__hexnan+0xea>
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	2301      	movs	r3, #1
 8008d32:	425b      	negs	r3, r3
 8008d34:	40d3      	lsrs	r3, r2
 8008d36:	9c02      	ldr	r4, [sp, #8]
 8008d38:	3c04      	subs	r4, #4
 8008d3a:	6822      	ldr	r2, [r4, #0]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	e7d3      	b.n	8008cea <__hexnan+0xea>
 8008d42:	3e04      	subs	r6, #4
 8008d44:	e7d1      	b.n	8008cea <__hexnan+0xea>
 8008d46:	2004      	movs	r0, #4
 8008d48:	b00b      	add	sp, #44	; 0x2c
 8008d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d4c <_localeconv_r>:
 8008d4c:	4800      	ldr	r0, [pc, #0]	; (8008d50 <_localeconv_r+0x4>)
 8008d4e:	4770      	bx	lr
 8008d50:	20000178 	.word	0x20000178

08008d54 <malloc>:
 8008d54:	b510      	push	{r4, lr}
 8008d56:	4b03      	ldr	r3, [pc, #12]	; (8008d64 <malloc+0x10>)
 8008d58:	0001      	movs	r1, r0
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	f000 fd4c 	bl	80097f8 <_malloc_r>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	20000020 	.word	0x20000020

08008d68 <__ascii_mbtowc>:
 8008d68:	b082      	sub	sp, #8
 8008d6a:	2900      	cmp	r1, #0
 8008d6c:	d100      	bne.n	8008d70 <__ascii_mbtowc+0x8>
 8008d6e:	a901      	add	r1, sp, #4
 8008d70:	1e10      	subs	r0, r2, #0
 8008d72:	d006      	beq.n	8008d82 <__ascii_mbtowc+0x1a>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d006      	beq.n	8008d86 <__ascii_mbtowc+0x1e>
 8008d78:	7813      	ldrb	r3, [r2, #0]
 8008d7a:	600b      	str	r3, [r1, #0]
 8008d7c:	7810      	ldrb	r0, [r2, #0]
 8008d7e:	1e43      	subs	r3, r0, #1
 8008d80:	4198      	sbcs	r0, r3
 8008d82:	b002      	add	sp, #8
 8008d84:	4770      	bx	lr
 8008d86:	2002      	movs	r0, #2
 8008d88:	4240      	negs	r0, r0
 8008d8a:	e7fa      	b.n	8008d82 <__ascii_mbtowc+0x1a>

08008d8c <memchr>:
 8008d8c:	b2c9      	uxtb	r1, r1
 8008d8e:	1882      	adds	r2, r0, r2
 8008d90:	4290      	cmp	r0, r2
 8008d92:	d101      	bne.n	8008d98 <memchr+0xc>
 8008d94:	2000      	movs	r0, #0
 8008d96:	4770      	bx	lr
 8008d98:	7803      	ldrb	r3, [r0, #0]
 8008d9a:	428b      	cmp	r3, r1
 8008d9c:	d0fb      	beq.n	8008d96 <memchr+0xa>
 8008d9e:	3001      	adds	r0, #1
 8008da0:	e7f6      	b.n	8008d90 <memchr+0x4>

08008da2 <memcpy>:
 8008da2:	2300      	movs	r3, #0
 8008da4:	b510      	push	{r4, lr}
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d100      	bne.n	8008dac <memcpy+0xa>
 8008daa:	bd10      	pop	{r4, pc}
 8008dac:	5ccc      	ldrb	r4, [r1, r3]
 8008dae:	54c4      	strb	r4, [r0, r3]
 8008db0:	3301      	adds	r3, #1
 8008db2:	e7f8      	b.n	8008da6 <memcpy+0x4>

08008db4 <_Balloc>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008db8:	0006      	movs	r6, r0
 8008dba:	000c      	movs	r4, r1
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	d10e      	bne.n	8008dde <_Balloc+0x2a>
 8008dc0:	2010      	movs	r0, #16
 8008dc2:	f7ff ffc7 	bl	8008d54 <malloc>
 8008dc6:	1e02      	subs	r2, r0, #0
 8008dc8:	6270      	str	r0, [r6, #36]	; 0x24
 8008dca:	d104      	bne.n	8008dd6 <_Balloc+0x22>
 8008dcc:	2166      	movs	r1, #102	; 0x66
 8008dce:	4b19      	ldr	r3, [pc, #100]	; (8008e34 <_Balloc+0x80>)
 8008dd0:	4819      	ldr	r0, [pc, #100]	; (8008e38 <_Balloc+0x84>)
 8008dd2:	f000 ff07 	bl	8009be4 <__assert_func>
 8008dd6:	6045      	str	r5, [r0, #4]
 8008dd8:	6085      	str	r5, [r0, #8]
 8008dda:	6005      	str	r5, [r0, #0]
 8008ddc:	60c5      	str	r5, [r0, #12]
 8008dde:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008de0:	68eb      	ldr	r3, [r5, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d013      	beq.n	8008e0e <_Balloc+0x5a>
 8008de6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008de8:	00a2      	lsls	r2, r4, #2
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	189b      	adds	r3, r3, r2
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d118      	bne.n	8008e26 <_Balloc+0x72>
 8008df4:	2101      	movs	r1, #1
 8008df6:	000d      	movs	r5, r1
 8008df8:	40a5      	lsls	r5, r4
 8008dfa:	1d6a      	adds	r2, r5, #5
 8008dfc:	0030      	movs	r0, r6
 8008dfe:	0092      	lsls	r2, r2, #2
 8008e00:	f000 fca2 	bl	8009748 <_calloc_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d00c      	beq.n	8008e22 <_Balloc+0x6e>
 8008e08:	6044      	str	r4, [r0, #4]
 8008e0a:	6085      	str	r5, [r0, #8]
 8008e0c:	e00d      	b.n	8008e2a <_Balloc+0x76>
 8008e0e:	2221      	movs	r2, #33	; 0x21
 8008e10:	2104      	movs	r1, #4
 8008e12:	0030      	movs	r0, r6
 8008e14:	f000 fc98 	bl	8009748 <_calloc_r>
 8008e18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e1a:	60e8      	str	r0, [r5, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e1      	bne.n	8008de6 <_Balloc+0x32>
 8008e22:	2000      	movs	r0, #0
 8008e24:	bd70      	pop	{r4, r5, r6, pc}
 8008e26:	6802      	ldr	r2, [r0, #0]
 8008e28:	601a      	str	r2, [r3, #0]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	6103      	str	r3, [r0, #16]
 8008e2e:	60c3      	str	r3, [r0, #12]
 8008e30:	e7f8      	b.n	8008e24 <_Balloc+0x70>
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	0800aa8e 	.word	0x0800aa8e
 8008e38:	0800ab94 	.word	0x0800ab94

08008e3c <_Bfree>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e40:	0005      	movs	r5, r0
 8008e42:	000c      	movs	r4, r1
 8008e44:	2e00      	cmp	r6, #0
 8008e46:	d10e      	bne.n	8008e66 <_Bfree+0x2a>
 8008e48:	2010      	movs	r0, #16
 8008e4a:	f7ff ff83 	bl	8008d54 <malloc>
 8008e4e:	1e02      	subs	r2, r0, #0
 8008e50:	6268      	str	r0, [r5, #36]	; 0x24
 8008e52:	d104      	bne.n	8008e5e <_Bfree+0x22>
 8008e54:	218a      	movs	r1, #138	; 0x8a
 8008e56:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <_Bfree+0x40>)
 8008e58:	4809      	ldr	r0, [pc, #36]	; (8008e80 <_Bfree+0x44>)
 8008e5a:	f000 fec3 	bl	8009be4 <__assert_func>
 8008e5e:	6046      	str	r6, [r0, #4]
 8008e60:	6086      	str	r6, [r0, #8]
 8008e62:	6006      	str	r6, [r0, #0]
 8008e64:	60c6      	str	r6, [r0, #12]
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	d007      	beq.n	8008e7a <_Bfree+0x3e>
 8008e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e6c:	6862      	ldr	r2, [r4, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	0092      	lsls	r2, r2, #2
 8008e72:	189b      	adds	r3, r3, r2
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	6022      	str	r2, [r4, #0]
 8008e78:	601c      	str	r4, [r3, #0]
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	0800aa8e 	.word	0x0800aa8e
 8008e80:	0800ab94 	.word	0x0800ab94

08008e84 <__multadd>:
 8008e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e86:	000e      	movs	r6, r1
 8008e88:	9001      	str	r0, [sp, #4]
 8008e8a:	000c      	movs	r4, r1
 8008e8c:	001d      	movs	r5, r3
 8008e8e:	2000      	movs	r0, #0
 8008e90:	690f      	ldr	r7, [r1, #16]
 8008e92:	3614      	adds	r6, #20
 8008e94:	6833      	ldr	r3, [r6, #0]
 8008e96:	3001      	adds	r0, #1
 8008e98:	b299      	uxth	r1, r3
 8008e9a:	4351      	muls	r1, r2
 8008e9c:	0c1b      	lsrs	r3, r3, #16
 8008e9e:	4353      	muls	r3, r2
 8008ea0:	1949      	adds	r1, r1, r5
 8008ea2:	0c0d      	lsrs	r5, r1, #16
 8008ea4:	195b      	adds	r3, r3, r5
 8008ea6:	0c1d      	lsrs	r5, r3, #16
 8008ea8:	b289      	uxth	r1, r1
 8008eaa:	041b      	lsls	r3, r3, #16
 8008eac:	185b      	adds	r3, r3, r1
 8008eae:	c608      	stmia	r6!, {r3}
 8008eb0:	4287      	cmp	r7, r0
 8008eb2:	dcef      	bgt.n	8008e94 <__multadd+0x10>
 8008eb4:	2d00      	cmp	r5, #0
 8008eb6:	d022      	beq.n	8008efe <__multadd+0x7a>
 8008eb8:	68a3      	ldr	r3, [r4, #8]
 8008eba:	42bb      	cmp	r3, r7
 8008ebc:	dc19      	bgt.n	8008ef2 <__multadd+0x6e>
 8008ebe:	6863      	ldr	r3, [r4, #4]
 8008ec0:	9801      	ldr	r0, [sp, #4]
 8008ec2:	1c59      	adds	r1, r3, #1
 8008ec4:	f7ff ff76 	bl	8008db4 <_Balloc>
 8008ec8:	1e06      	subs	r6, r0, #0
 8008eca:	d105      	bne.n	8008ed8 <__multadd+0x54>
 8008ecc:	0002      	movs	r2, r0
 8008ece:	21b5      	movs	r1, #181	; 0xb5
 8008ed0:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <__multadd+0x80>)
 8008ed2:	480d      	ldr	r0, [pc, #52]	; (8008f08 <__multadd+0x84>)
 8008ed4:	f000 fe86 	bl	8009be4 <__assert_func>
 8008ed8:	0021      	movs	r1, r4
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	310c      	adds	r1, #12
 8008ede:	1c9a      	adds	r2, r3, #2
 8008ee0:	0092      	lsls	r2, r2, #2
 8008ee2:	300c      	adds	r0, #12
 8008ee4:	f7ff ff5d 	bl	8008da2 <memcpy>
 8008ee8:	0021      	movs	r1, r4
 8008eea:	9801      	ldr	r0, [sp, #4]
 8008eec:	f7ff ffa6 	bl	8008e3c <_Bfree>
 8008ef0:	0034      	movs	r4, r6
 8008ef2:	1d3b      	adds	r3, r7, #4
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	18e3      	adds	r3, r4, r3
 8008ef8:	605d      	str	r5, [r3, #4]
 8008efa:	1c7b      	adds	r3, r7, #1
 8008efc:	6123      	str	r3, [r4, #16]
 8008efe:	0020      	movs	r0, r4
 8008f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	0800ab04 	.word	0x0800ab04
 8008f08:	0800ab94 	.word	0x0800ab94

08008f0c <__s2b>:
 8008f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f0e:	0006      	movs	r6, r0
 8008f10:	0018      	movs	r0, r3
 8008f12:	000c      	movs	r4, r1
 8008f14:	3008      	adds	r0, #8
 8008f16:	2109      	movs	r1, #9
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	0015      	movs	r5, r2
 8008f1c:	f7f7 f99a 	bl	8000254 <__divsi3>
 8008f20:	2301      	movs	r3, #1
 8008f22:	2100      	movs	r1, #0
 8008f24:	4283      	cmp	r3, r0
 8008f26:	db0a      	blt.n	8008f3e <__s2b+0x32>
 8008f28:	0030      	movs	r0, r6
 8008f2a:	f7ff ff43 	bl	8008db4 <_Balloc>
 8008f2e:	1e01      	subs	r1, r0, #0
 8008f30:	d108      	bne.n	8008f44 <__s2b+0x38>
 8008f32:	0002      	movs	r2, r0
 8008f34:	4b19      	ldr	r3, [pc, #100]	; (8008f9c <__s2b+0x90>)
 8008f36:	481a      	ldr	r0, [pc, #104]	; (8008fa0 <__s2b+0x94>)
 8008f38:	31ce      	adds	r1, #206	; 0xce
 8008f3a:	f000 fe53 	bl	8009be4 <__assert_func>
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	3101      	adds	r1, #1
 8008f42:	e7ef      	b.n	8008f24 <__s2b+0x18>
 8008f44:	9b08      	ldr	r3, [sp, #32]
 8008f46:	6143      	str	r3, [r0, #20]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	6103      	str	r3, [r0, #16]
 8008f4c:	2d09      	cmp	r5, #9
 8008f4e:	dd18      	ble.n	8008f82 <__s2b+0x76>
 8008f50:	0023      	movs	r3, r4
 8008f52:	3309      	adds	r3, #9
 8008f54:	001f      	movs	r7, r3
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	1964      	adds	r4, r4, r5
 8008f5a:	783b      	ldrb	r3, [r7, #0]
 8008f5c:	220a      	movs	r2, #10
 8008f5e:	0030      	movs	r0, r6
 8008f60:	3b30      	subs	r3, #48	; 0x30
 8008f62:	f7ff ff8f 	bl	8008e84 <__multadd>
 8008f66:	3701      	adds	r7, #1
 8008f68:	0001      	movs	r1, r0
 8008f6a:	42a7      	cmp	r7, r4
 8008f6c:	d1f5      	bne.n	8008f5a <__s2b+0x4e>
 8008f6e:	002c      	movs	r4, r5
 8008f70:	9b00      	ldr	r3, [sp, #0]
 8008f72:	3c08      	subs	r4, #8
 8008f74:	191c      	adds	r4, r3, r4
 8008f76:	002f      	movs	r7, r5
 8008f78:	9b01      	ldr	r3, [sp, #4]
 8008f7a:	429f      	cmp	r7, r3
 8008f7c:	db04      	blt.n	8008f88 <__s2b+0x7c>
 8008f7e:	0008      	movs	r0, r1
 8008f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f82:	2509      	movs	r5, #9
 8008f84:	340a      	adds	r4, #10
 8008f86:	e7f6      	b.n	8008f76 <__s2b+0x6a>
 8008f88:	1b63      	subs	r3, r4, r5
 8008f8a:	5ddb      	ldrb	r3, [r3, r7]
 8008f8c:	220a      	movs	r2, #10
 8008f8e:	0030      	movs	r0, r6
 8008f90:	3b30      	subs	r3, #48	; 0x30
 8008f92:	f7ff ff77 	bl	8008e84 <__multadd>
 8008f96:	3701      	adds	r7, #1
 8008f98:	0001      	movs	r1, r0
 8008f9a:	e7ed      	b.n	8008f78 <__s2b+0x6c>
 8008f9c:	0800ab04 	.word	0x0800ab04
 8008fa0:	0800ab94 	.word	0x0800ab94

08008fa4 <__hi0bits>:
 8008fa4:	0003      	movs	r3, r0
 8008fa6:	0c02      	lsrs	r2, r0, #16
 8008fa8:	2000      	movs	r0, #0
 8008faa:	4282      	cmp	r2, r0
 8008fac:	d101      	bne.n	8008fb2 <__hi0bits+0xe>
 8008fae:	041b      	lsls	r3, r3, #16
 8008fb0:	3010      	adds	r0, #16
 8008fb2:	0e1a      	lsrs	r2, r3, #24
 8008fb4:	d101      	bne.n	8008fba <__hi0bits+0x16>
 8008fb6:	3008      	adds	r0, #8
 8008fb8:	021b      	lsls	r3, r3, #8
 8008fba:	0f1a      	lsrs	r2, r3, #28
 8008fbc:	d101      	bne.n	8008fc2 <__hi0bits+0x1e>
 8008fbe:	3004      	adds	r0, #4
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	0f9a      	lsrs	r2, r3, #30
 8008fc4:	d101      	bne.n	8008fca <__hi0bits+0x26>
 8008fc6:	3002      	adds	r0, #2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	db03      	blt.n	8008fd6 <__hi0bits+0x32>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	d400      	bmi.n	8008fd6 <__hi0bits+0x32>
 8008fd4:	2020      	movs	r0, #32
 8008fd6:	4770      	bx	lr

08008fd8 <__lo0bits>:
 8008fd8:	6803      	ldr	r3, [r0, #0]
 8008fda:	0002      	movs	r2, r0
 8008fdc:	2107      	movs	r1, #7
 8008fde:	0018      	movs	r0, r3
 8008fe0:	4008      	ands	r0, r1
 8008fe2:	420b      	tst	r3, r1
 8008fe4:	d00d      	beq.n	8009002 <__lo0bits+0x2a>
 8008fe6:	3906      	subs	r1, #6
 8008fe8:	2000      	movs	r0, #0
 8008fea:	420b      	tst	r3, r1
 8008fec:	d105      	bne.n	8008ffa <__lo0bits+0x22>
 8008fee:	3002      	adds	r0, #2
 8008ff0:	4203      	tst	r3, r0
 8008ff2:	d003      	beq.n	8008ffc <__lo0bits+0x24>
 8008ff4:	40cb      	lsrs	r3, r1
 8008ff6:	0008      	movs	r0, r1
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	4770      	bx	lr
 8008ffc:	089b      	lsrs	r3, r3, #2
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	e7fb      	b.n	8008ffa <__lo0bits+0x22>
 8009002:	b299      	uxth	r1, r3
 8009004:	2900      	cmp	r1, #0
 8009006:	d101      	bne.n	800900c <__lo0bits+0x34>
 8009008:	2010      	movs	r0, #16
 800900a:	0c1b      	lsrs	r3, r3, #16
 800900c:	b2d9      	uxtb	r1, r3
 800900e:	2900      	cmp	r1, #0
 8009010:	d101      	bne.n	8009016 <__lo0bits+0x3e>
 8009012:	3008      	adds	r0, #8
 8009014:	0a1b      	lsrs	r3, r3, #8
 8009016:	0719      	lsls	r1, r3, #28
 8009018:	d101      	bne.n	800901e <__lo0bits+0x46>
 800901a:	3004      	adds	r0, #4
 800901c:	091b      	lsrs	r3, r3, #4
 800901e:	0799      	lsls	r1, r3, #30
 8009020:	d101      	bne.n	8009026 <__lo0bits+0x4e>
 8009022:	3002      	adds	r0, #2
 8009024:	089b      	lsrs	r3, r3, #2
 8009026:	07d9      	lsls	r1, r3, #31
 8009028:	d4e9      	bmi.n	8008ffe <__lo0bits+0x26>
 800902a:	3001      	adds	r0, #1
 800902c:	085b      	lsrs	r3, r3, #1
 800902e:	d1e6      	bne.n	8008ffe <__lo0bits+0x26>
 8009030:	2020      	movs	r0, #32
 8009032:	e7e2      	b.n	8008ffa <__lo0bits+0x22>

08009034 <__i2b>:
 8009034:	b510      	push	{r4, lr}
 8009036:	000c      	movs	r4, r1
 8009038:	2101      	movs	r1, #1
 800903a:	f7ff febb 	bl	8008db4 <_Balloc>
 800903e:	2800      	cmp	r0, #0
 8009040:	d106      	bne.n	8009050 <__i2b+0x1c>
 8009042:	21a0      	movs	r1, #160	; 0xa0
 8009044:	0002      	movs	r2, r0
 8009046:	4b04      	ldr	r3, [pc, #16]	; (8009058 <__i2b+0x24>)
 8009048:	4804      	ldr	r0, [pc, #16]	; (800905c <__i2b+0x28>)
 800904a:	0049      	lsls	r1, r1, #1
 800904c:	f000 fdca 	bl	8009be4 <__assert_func>
 8009050:	2301      	movs	r3, #1
 8009052:	6144      	str	r4, [r0, #20]
 8009054:	6103      	str	r3, [r0, #16]
 8009056:	bd10      	pop	{r4, pc}
 8009058:	0800ab04 	.word	0x0800ab04
 800905c:	0800ab94 	.word	0x0800ab94

08009060 <__multiply>:
 8009060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009062:	690b      	ldr	r3, [r1, #16]
 8009064:	0014      	movs	r4, r2
 8009066:	6912      	ldr	r2, [r2, #16]
 8009068:	000d      	movs	r5, r1
 800906a:	b089      	sub	sp, #36	; 0x24
 800906c:	4293      	cmp	r3, r2
 800906e:	da01      	bge.n	8009074 <__multiply+0x14>
 8009070:	0025      	movs	r5, r4
 8009072:	000c      	movs	r4, r1
 8009074:	692f      	ldr	r7, [r5, #16]
 8009076:	6926      	ldr	r6, [r4, #16]
 8009078:	6869      	ldr	r1, [r5, #4]
 800907a:	19bb      	adds	r3, r7, r6
 800907c:	9302      	str	r3, [sp, #8]
 800907e:	68ab      	ldr	r3, [r5, #8]
 8009080:	19ba      	adds	r2, r7, r6
 8009082:	4293      	cmp	r3, r2
 8009084:	da00      	bge.n	8009088 <__multiply+0x28>
 8009086:	3101      	adds	r1, #1
 8009088:	f7ff fe94 	bl	8008db4 <_Balloc>
 800908c:	9001      	str	r0, [sp, #4]
 800908e:	2800      	cmp	r0, #0
 8009090:	d106      	bne.n	80090a0 <__multiply+0x40>
 8009092:	215e      	movs	r1, #94	; 0x5e
 8009094:	0002      	movs	r2, r0
 8009096:	4b48      	ldr	r3, [pc, #288]	; (80091b8 <__multiply+0x158>)
 8009098:	4848      	ldr	r0, [pc, #288]	; (80091bc <__multiply+0x15c>)
 800909a:	31ff      	adds	r1, #255	; 0xff
 800909c:	f000 fda2 	bl	8009be4 <__assert_func>
 80090a0:	9b01      	ldr	r3, [sp, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	3314      	adds	r3, #20
 80090a6:	469c      	mov	ip, r3
 80090a8:	19bb      	adds	r3, r7, r6
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4463      	add	r3, ip
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	4663      	mov	r3, ip
 80090b2:	9903      	ldr	r1, [sp, #12]
 80090b4:	428b      	cmp	r3, r1
 80090b6:	d32c      	bcc.n	8009112 <__multiply+0xb2>
 80090b8:	002b      	movs	r3, r5
 80090ba:	0022      	movs	r2, r4
 80090bc:	3314      	adds	r3, #20
 80090be:	00bf      	lsls	r7, r7, #2
 80090c0:	3214      	adds	r2, #20
 80090c2:	9306      	str	r3, [sp, #24]
 80090c4:	00b6      	lsls	r6, r6, #2
 80090c6:	19db      	adds	r3, r3, r7
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	1993      	adds	r3, r2, r6
 80090cc:	9307      	str	r3, [sp, #28]
 80090ce:	2304      	movs	r3, #4
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	002b      	movs	r3, r5
 80090d4:	9904      	ldr	r1, [sp, #16]
 80090d6:	3315      	adds	r3, #21
 80090d8:	9200      	str	r2, [sp, #0]
 80090da:	4299      	cmp	r1, r3
 80090dc:	d305      	bcc.n	80090ea <__multiply+0x8a>
 80090de:	1b4b      	subs	r3, r1, r5
 80090e0:	3b15      	subs	r3, #21
 80090e2:	089b      	lsrs	r3, r3, #2
 80090e4:	3301      	adds	r3, #1
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	9b07      	ldr	r3, [sp, #28]
 80090ec:	9a00      	ldr	r2, [sp, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d311      	bcc.n	8009116 <__multiply+0xb6>
 80090f2:	9b02      	ldr	r3, [sp, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dd06      	ble.n	8009106 <__multiply+0xa6>
 80090f8:	9b03      	ldr	r3, [sp, #12]
 80090fa:	3b04      	subs	r3, #4
 80090fc:	9303      	str	r3, [sp, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d054      	beq.n	80091b0 <__multiply+0x150>
 8009106:	9b01      	ldr	r3, [sp, #4]
 8009108:	9a02      	ldr	r2, [sp, #8]
 800910a:	0018      	movs	r0, r3
 800910c:	611a      	str	r2, [r3, #16]
 800910e:	b009      	add	sp, #36	; 0x24
 8009110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009112:	c304      	stmia	r3!, {r2}
 8009114:	e7cd      	b.n	80090b2 <__multiply+0x52>
 8009116:	9b00      	ldr	r3, [sp, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	b298      	uxth	r0, r3
 800911c:	2800      	cmp	r0, #0
 800911e:	d01c      	beq.n	800915a <__multiply+0xfa>
 8009120:	4667      	mov	r7, ip
 8009122:	2400      	movs	r4, #0
 8009124:	9e06      	ldr	r6, [sp, #24]
 8009126:	ce02      	ldmia	r6!, {r1}
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	b28b      	uxth	r3, r1
 800912c:	4343      	muls	r3, r0
 800912e:	0c09      	lsrs	r1, r1, #16
 8009130:	4341      	muls	r1, r0
 8009132:	b292      	uxth	r2, r2
 8009134:	189b      	adds	r3, r3, r2
 8009136:	191b      	adds	r3, r3, r4
 8009138:	000c      	movs	r4, r1
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	0c11      	lsrs	r1, r2, #16
 800913e:	1861      	adds	r1, r4, r1
 8009140:	0c1c      	lsrs	r4, r3, #16
 8009142:	1909      	adds	r1, r1, r4
 8009144:	0c0c      	lsrs	r4, r1, #16
 8009146:	b29b      	uxth	r3, r3
 8009148:	0409      	lsls	r1, r1, #16
 800914a:	430b      	orrs	r3, r1
 800914c:	c708      	stmia	r7!, {r3}
 800914e:	9b04      	ldr	r3, [sp, #16]
 8009150:	42b3      	cmp	r3, r6
 8009152:	d8e8      	bhi.n	8009126 <__multiply+0xc6>
 8009154:	4663      	mov	r3, ip
 8009156:	9a05      	ldr	r2, [sp, #20]
 8009158:	509c      	str	r4, [r3, r2]
 800915a:	9b00      	ldr	r3, [sp, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	0c1e      	lsrs	r6, r3, #16
 8009160:	d020      	beq.n	80091a4 <__multiply+0x144>
 8009162:	4663      	mov	r3, ip
 8009164:	002c      	movs	r4, r5
 8009166:	4660      	mov	r0, ip
 8009168:	2700      	movs	r7, #0
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3414      	adds	r4, #20
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	b29b      	uxth	r3, r3
 8009172:	b291      	uxth	r1, r2
 8009174:	4371      	muls	r1, r6
 8009176:	6802      	ldr	r2, [r0, #0]
 8009178:	0c12      	lsrs	r2, r2, #16
 800917a:	1889      	adds	r1, r1, r2
 800917c:	19cf      	adds	r7, r1, r7
 800917e:	0439      	lsls	r1, r7, #16
 8009180:	430b      	orrs	r3, r1
 8009182:	6003      	str	r3, [r0, #0]
 8009184:	cc02      	ldmia	r4!, {r1}
 8009186:	6843      	ldr	r3, [r0, #4]
 8009188:	0c09      	lsrs	r1, r1, #16
 800918a:	4371      	muls	r1, r6
 800918c:	b29b      	uxth	r3, r3
 800918e:	0c3f      	lsrs	r7, r7, #16
 8009190:	18cb      	adds	r3, r1, r3
 8009192:	9a04      	ldr	r2, [sp, #16]
 8009194:	19db      	adds	r3, r3, r7
 8009196:	0c1f      	lsrs	r7, r3, #16
 8009198:	3004      	adds	r0, #4
 800919a:	42a2      	cmp	r2, r4
 800919c:	d8e7      	bhi.n	800916e <__multiply+0x10e>
 800919e:	4662      	mov	r2, ip
 80091a0:	9905      	ldr	r1, [sp, #20]
 80091a2:	5053      	str	r3, [r2, r1]
 80091a4:	9b00      	ldr	r3, [sp, #0]
 80091a6:	3304      	adds	r3, #4
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	2304      	movs	r3, #4
 80091ac:	449c      	add	ip, r3
 80091ae:	e79c      	b.n	80090ea <__multiply+0x8a>
 80091b0:	9b02      	ldr	r3, [sp, #8]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	9302      	str	r3, [sp, #8]
 80091b6:	e79c      	b.n	80090f2 <__multiply+0x92>
 80091b8:	0800ab04 	.word	0x0800ab04
 80091bc:	0800ab94 	.word	0x0800ab94

080091c0 <__pow5mult>:
 80091c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091c2:	2303      	movs	r3, #3
 80091c4:	0015      	movs	r5, r2
 80091c6:	0007      	movs	r7, r0
 80091c8:	000e      	movs	r6, r1
 80091ca:	401a      	ands	r2, r3
 80091cc:	421d      	tst	r5, r3
 80091ce:	d008      	beq.n	80091e2 <__pow5mult+0x22>
 80091d0:	4925      	ldr	r1, [pc, #148]	; (8009268 <__pow5mult+0xa8>)
 80091d2:	3a01      	subs	r2, #1
 80091d4:	0092      	lsls	r2, r2, #2
 80091d6:	5852      	ldr	r2, [r2, r1]
 80091d8:	2300      	movs	r3, #0
 80091da:	0031      	movs	r1, r6
 80091dc:	f7ff fe52 	bl	8008e84 <__multadd>
 80091e0:	0006      	movs	r6, r0
 80091e2:	10ad      	asrs	r5, r5, #2
 80091e4:	d03d      	beq.n	8009262 <__pow5mult+0xa2>
 80091e6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80091e8:	2c00      	cmp	r4, #0
 80091ea:	d10f      	bne.n	800920c <__pow5mult+0x4c>
 80091ec:	2010      	movs	r0, #16
 80091ee:	f7ff fdb1 	bl	8008d54 <malloc>
 80091f2:	1e02      	subs	r2, r0, #0
 80091f4:	6278      	str	r0, [r7, #36]	; 0x24
 80091f6:	d105      	bne.n	8009204 <__pow5mult+0x44>
 80091f8:	21d7      	movs	r1, #215	; 0xd7
 80091fa:	4b1c      	ldr	r3, [pc, #112]	; (800926c <__pow5mult+0xac>)
 80091fc:	481c      	ldr	r0, [pc, #112]	; (8009270 <__pow5mult+0xb0>)
 80091fe:	0049      	lsls	r1, r1, #1
 8009200:	f000 fcf0 	bl	8009be4 <__assert_func>
 8009204:	6044      	str	r4, [r0, #4]
 8009206:	6084      	str	r4, [r0, #8]
 8009208:	6004      	str	r4, [r0, #0]
 800920a:	60c4      	str	r4, [r0, #12]
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	689c      	ldr	r4, [r3, #8]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	2c00      	cmp	r4, #0
 8009214:	d108      	bne.n	8009228 <__pow5mult+0x68>
 8009216:	0038      	movs	r0, r7
 8009218:	4916      	ldr	r1, [pc, #88]	; (8009274 <__pow5mult+0xb4>)
 800921a:	f7ff ff0b 	bl	8009034 <__i2b>
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	0004      	movs	r4, r0
 8009222:	6098      	str	r0, [r3, #8]
 8009224:	2300      	movs	r3, #0
 8009226:	6003      	str	r3, [r0, #0]
 8009228:	2301      	movs	r3, #1
 800922a:	421d      	tst	r5, r3
 800922c:	d00a      	beq.n	8009244 <__pow5mult+0x84>
 800922e:	0031      	movs	r1, r6
 8009230:	0022      	movs	r2, r4
 8009232:	0038      	movs	r0, r7
 8009234:	f7ff ff14 	bl	8009060 <__multiply>
 8009238:	0031      	movs	r1, r6
 800923a:	9001      	str	r0, [sp, #4]
 800923c:	0038      	movs	r0, r7
 800923e:	f7ff fdfd 	bl	8008e3c <_Bfree>
 8009242:	9e01      	ldr	r6, [sp, #4]
 8009244:	106d      	asrs	r5, r5, #1
 8009246:	d00c      	beq.n	8009262 <__pow5mult+0xa2>
 8009248:	6820      	ldr	r0, [r4, #0]
 800924a:	2800      	cmp	r0, #0
 800924c:	d107      	bne.n	800925e <__pow5mult+0x9e>
 800924e:	0022      	movs	r2, r4
 8009250:	0021      	movs	r1, r4
 8009252:	0038      	movs	r0, r7
 8009254:	f7ff ff04 	bl	8009060 <__multiply>
 8009258:	2300      	movs	r3, #0
 800925a:	6020      	str	r0, [r4, #0]
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	0004      	movs	r4, r0
 8009260:	e7e2      	b.n	8009228 <__pow5mult+0x68>
 8009262:	0030      	movs	r0, r6
 8009264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009266:	46c0      	nop			; (mov r8, r8)
 8009268:	0800ace8 	.word	0x0800ace8
 800926c:	0800aa8e 	.word	0x0800aa8e
 8009270:	0800ab94 	.word	0x0800ab94
 8009274:	00000271 	.word	0x00000271

08009278 <__lshift>:
 8009278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927a:	000c      	movs	r4, r1
 800927c:	0017      	movs	r7, r2
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	1155      	asrs	r5, r2, #5
 8009282:	b087      	sub	sp, #28
 8009284:	18eb      	adds	r3, r5, r3
 8009286:	9302      	str	r3, [sp, #8]
 8009288:	3301      	adds	r3, #1
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	6849      	ldr	r1, [r1, #4]
 800928e:	68a3      	ldr	r3, [r4, #8]
 8009290:	9004      	str	r0, [sp, #16]
 8009292:	9a01      	ldr	r2, [sp, #4]
 8009294:	4293      	cmp	r3, r2
 8009296:	db11      	blt.n	80092bc <__lshift+0x44>
 8009298:	9804      	ldr	r0, [sp, #16]
 800929a:	f7ff fd8b 	bl	8008db4 <_Balloc>
 800929e:	0002      	movs	r2, r0
 80092a0:	2300      	movs	r3, #0
 80092a2:	3214      	adds	r2, #20
 80092a4:	0006      	movs	r6, r0
 80092a6:	0011      	movs	r1, r2
 80092a8:	9203      	str	r2, [sp, #12]
 80092aa:	4298      	cmp	r0, r3
 80092ac:	d10d      	bne.n	80092ca <__lshift+0x52>
 80092ae:	21da      	movs	r1, #218	; 0xda
 80092b0:	0002      	movs	r2, r0
 80092b2:	4b27      	ldr	r3, [pc, #156]	; (8009350 <__lshift+0xd8>)
 80092b4:	4827      	ldr	r0, [pc, #156]	; (8009354 <__lshift+0xdc>)
 80092b6:	31ff      	adds	r1, #255	; 0xff
 80092b8:	f000 fc94 	bl	8009be4 <__assert_func>
 80092bc:	3101      	adds	r1, #1
 80092be:	005b      	lsls	r3, r3, #1
 80092c0:	e7e7      	b.n	8009292 <__lshift+0x1a>
 80092c2:	2200      	movs	r2, #0
 80092c4:	0098      	lsls	r0, r3, #2
 80092c6:	500a      	str	r2, [r1, r0]
 80092c8:	3301      	adds	r3, #1
 80092ca:	42ab      	cmp	r3, r5
 80092cc:	dbf9      	blt.n	80092c2 <__lshift+0x4a>
 80092ce:	43eb      	mvns	r3, r5
 80092d0:	17db      	asrs	r3, r3, #31
 80092d2:	401d      	ands	r5, r3
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	00ad      	lsls	r5, r5, #2
 80092d8:	211f      	movs	r1, #31
 80092da:	0038      	movs	r0, r7
 80092dc:	195d      	adds	r5, r3, r5
 80092de:	0023      	movs	r3, r4
 80092e0:	6922      	ldr	r2, [r4, #16]
 80092e2:	3314      	adds	r3, #20
 80092e4:	0092      	lsls	r2, r2, #2
 80092e6:	4008      	ands	r0, r1
 80092e8:	4684      	mov	ip, r0
 80092ea:	189a      	adds	r2, r3, r2
 80092ec:	420f      	tst	r7, r1
 80092ee:	d02a      	beq.n	8009346 <__lshift+0xce>
 80092f0:	3101      	adds	r1, #1
 80092f2:	1a09      	subs	r1, r1, r0
 80092f4:	9105      	str	r1, [sp, #20]
 80092f6:	2100      	movs	r1, #0
 80092f8:	9503      	str	r5, [sp, #12]
 80092fa:	4667      	mov	r7, ip
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	40b8      	lsls	r0, r7
 8009300:	4301      	orrs	r1, r0
 8009302:	9803      	ldr	r0, [sp, #12]
 8009304:	c002      	stmia	r0!, {r1}
 8009306:	cb02      	ldmia	r3!, {r1}
 8009308:	9003      	str	r0, [sp, #12]
 800930a:	9805      	ldr	r0, [sp, #20]
 800930c:	40c1      	lsrs	r1, r0
 800930e:	429a      	cmp	r2, r3
 8009310:	d8f3      	bhi.n	80092fa <__lshift+0x82>
 8009312:	0020      	movs	r0, r4
 8009314:	3015      	adds	r0, #21
 8009316:	2304      	movs	r3, #4
 8009318:	4282      	cmp	r2, r0
 800931a:	d304      	bcc.n	8009326 <__lshift+0xae>
 800931c:	1b13      	subs	r3, r2, r4
 800931e:	3b15      	subs	r3, #21
 8009320:	089b      	lsrs	r3, r3, #2
 8009322:	3301      	adds	r3, #1
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	50e9      	str	r1, [r5, r3]
 8009328:	2900      	cmp	r1, #0
 800932a:	d002      	beq.n	8009332 <__lshift+0xba>
 800932c:	9b02      	ldr	r3, [sp, #8]
 800932e:	3302      	adds	r3, #2
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	9b01      	ldr	r3, [sp, #4]
 8009334:	9804      	ldr	r0, [sp, #16]
 8009336:	3b01      	subs	r3, #1
 8009338:	0021      	movs	r1, r4
 800933a:	6133      	str	r3, [r6, #16]
 800933c:	f7ff fd7e 	bl	8008e3c <_Bfree>
 8009340:	0030      	movs	r0, r6
 8009342:	b007      	add	sp, #28
 8009344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009346:	cb02      	ldmia	r3!, {r1}
 8009348:	c502      	stmia	r5!, {r1}
 800934a:	429a      	cmp	r2, r3
 800934c:	d8fb      	bhi.n	8009346 <__lshift+0xce>
 800934e:	e7f0      	b.n	8009332 <__lshift+0xba>
 8009350:	0800ab04 	.word	0x0800ab04
 8009354:	0800ab94 	.word	0x0800ab94

08009358 <__mcmp>:
 8009358:	6902      	ldr	r2, [r0, #16]
 800935a:	690b      	ldr	r3, [r1, #16]
 800935c:	b530      	push	{r4, r5, lr}
 800935e:	0004      	movs	r4, r0
 8009360:	1ad0      	subs	r0, r2, r3
 8009362:	429a      	cmp	r2, r3
 8009364:	d10d      	bne.n	8009382 <__mcmp+0x2a>
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	3414      	adds	r4, #20
 800936a:	3114      	adds	r1, #20
 800936c:	18e2      	adds	r2, r4, r3
 800936e:	18c9      	adds	r1, r1, r3
 8009370:	3a04      	subs	r2, #4
 8009372:	3904      	subs	r1, #4
 8009374:	6815      	ldr	r5, [r2, #0]
 8009376:	680b      	ldr	r3, [r1, #0]
 8009378:	429d      	cmp	r5, r3
 800937a:	d003      	beq.n	8009384 <__mcmp+0x2c>
 800937c:	2001      	movs	r0, #1
 800937e:	429d      	cmp	r5, r3
 8009380:	d303      	bcc.n	800938a <__mcmp+0x32>
 8009382:	bd30      	pop	{r4, r5, pc}
 8009384:	4294      	cmp	r4, r2
 8009386:	d3f3      	bcc.n	8009370 <__mcmp+0x18>
 8009388:	e7fb      	b.n	8009382 <__mcmp+0x2a>
 800938a:	4240      	negs	r0, r0
 800938c:	e7f9      	b.n	8009382 <__mcmp+0x2a>
	...

08009390 <__mdiff>:
 8009390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009392:	000e      	movs	r6, r1
 8009394:	0007      	movs	r7, r0
 8009396:	0011      	movs	r1, r2
 8009398:	0030      	movs	r0, r6
 800939a:	b087      	sub	sp, #28
 800939c:	0014      	movs	r4, r2
 800939e:	f7ff ffdb 	bl	8009358 <__mcmp>
 80093a2:	1e05      	subs	r5, r0, #0
 80093a4:	d110      	bne.n	80093c8 <__mdiff+0x38>
 80093a6:	0001      	movs	r1, r0
 80093a8:	0038      	movs	r0, r7
 80093aa:	f7ff fd03 	bl	8008db4 <_Balloc>
 80093ae:	1e02      	subs	r2, r0, #0
 80093b0:	d104      	bne.n	80093bc <__mdiff+0x2c>
 80093b2:	4b40      	ldr	r3, [pc, #256]	; (80094b4 <__mdiff+0x124>)
 80093b4:	4940      	ldr	r1, [pc, #256]	; (80094b8 <__mdiff+0x128>)
 80093b6:	4841      	ldr	r0, [pc, #260]	; (80094bc <__mdiff+0x12c>)
 80093b8:	f000 fc14 	bl	8009be4 <__assert_func>
 80093bc:	2301      	movs	r3, #1
 80093be:	6145      	str	r5, [r0, #20]
 80093c0:	6103      	str	r3, [r0, #16]
 80093c2:	0010      	movs	r0, r2
 80093c4:	b007      	add	sp, #28
 80093c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c8:	2301      	movs	r3, #1
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	2800      	cmp	r0, #0
 80093ce:	db04      	blt.n	80093da <__mdiff+0x4a>
 80093d0:	0023      	movs	r3, r4
 80093d2:	0034      	movs	r4, r6
 80093d4:	001e      	movs	r6, r3
 80093d6:	2300      	movs	r3, #0
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	0038      	movs	r0, r7
 80093dc:	6861      	ldr	r1, [r4, #4]
 80093de:	f7ff fce9 	bl	8008db4 <_Balloc>
 80093e2:	1e02      	subs	r2, r0, #0
 80093e4:	d103      	bne.n	80093ee <__mdiff+0x5e>
 80093e6:	2190      	movs	r1, #144	; 0x90
 80093e8:	4b32      	ldr	r3, [pc, #200]	; (80094b4 <__mdiff+0x124>)
 80093ea:	0089      	lsls	r1, r1, #2
 80093ec:	e7e3      	b.n	80093b6 <__mdiff+0x26>
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	2700      	movs	r7, #0
 80093f2:	60c3      	str	r3, [r0, #12]
 80093f4:	6920      	ldr	r0, [r4, #16]
 80093f6:	3414      	adds	r4, #20
 80093f8:	9401      	str	r4, [sp, #4]
 80093fa:	9b01      	ldr	r3, [sp, #4]
 80093fc:	0084      	lsls	r4, r0, #2
 80093fe:	191b      	adds	r3, r3, r4
 8009400:	0034      	movs	r4, r6
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	6933      	ldr	r3, [r6, #16]
 8009406:	3414      	adds	r4, #20
 8009408:	0099      	lsls	r1, r3, #2
 800940a:	1863      	adds	r3, r4, r1
 800940c:	9303      	str	r3, [sp, #12]
 800940e:	0013      	movs	r3, r2
 8009410:	3314      	adds	r3, #20
 8009412:	469c      	mov	ip, r3
 8009414:	9305      	str	r3, [sp, #20]
 8009416:	9b01      	ldr	r3, [sp, #4]
 8009418:	9304      	str	r3, [sp, #16]
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	cc02      	ldmia	r4!, {r1}
 800941e:	cb20      	ldmia	r3!, {r5}
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	b2ab      	uxth	r3, r5
 8009424:	19df      	adds	r7, r3, r7
 8009426:	b28b      	uxth	r3, r1
 8009428:	1afb      	subs	r3, r7, r3
 800942a:	0c2d      	lsrs	r5, r5, #16
 800942c:	0c09      	lsrs	r1, r1, #16
 800942e:	1a69      	subs	r1, r5, r1
 8009430:	141d      	asrs	r5, r3, #16
 8009432:	1949      	adds	r1, r1, r5
 8009434:	140f      	asrs	r7, r1, #16
 8009436:	b29b      	uxth	r3, r3
 8009438:	0409      	lsls	r1, r1, #16
 800943a:	430b      	orrs	r3, r1
 800943c:	4661      	mov	r1, ip
 800943e:	c108      	stmia	r1!, {r3}
 8009440:	9b03      	ldr	r3, [sp, #12]
 8009442:	468c      	mov	ip, r1
 8009444:	42a3      	cmp	r3, r4
 8009446:	d8e8      	bhi.n	800941a <__mdiff+0x8a>
 8009448:	0031      	movs	r1, r6
 800944a:	9c03      	ldr	r4, [sp, #12]
 800944c:	3115      	adds	r1, #21
 800944e:	2304      	movs	r3, #4
 8009450:	428c      	cmp	r4, r1
 8009452:	d304      	bcc.n	800945e <__mdiff+0xce>
 8009454:	1ba3      	subs	r3, r4, r6
 8009456:	3b15      	subs	r3, #21
 8009458:	089b      	lsrs	r3, r3, #2
 800945a:	3301      	adds	r3, #1
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	9901      	ldr	r1, [sp, #4]
 8009460:	18cc      	adds	r4, r1, r3
 8009462:	9905      	ldr	r1, [sp, #20]
 8009464:	0026      	movs	r6, r4
 8009466:	18cb      	adds	r3, r1, r3
 8009468:	469c      	mov	ip, r3
 800946a:	9902      	ldr	r1, [sp, #8]
 800946c:	428e      	cmp	r6, r1
 800946e:	d310      	bcc.n	8009492 <__mdiff+0x102>
 8009470:	9e02      	ldr	r6, [sp, #8]
 8009472:	1ee5      	subs	r5, r4, #3
 8009474:	2100      	movs	r1, #0
 8009476:	42ae      	cmp	r6, r5
 8009478:	d304      	bcc.n	8009484 <__mdiff+0xf4>
 800947a:	0031      	movs	r1, r6
 800947c:	3103      	adds	r1, #3
 800947e:	1b09      	subs	r1, r1, r4
 8009480:	0889      	lsrs	r1, r1, #2
 8009482:	0089      	lsls	r1, r1, #2
 8009484:	185b      	adds	r3, r3, r1
 8009486:	3b04      	subs	r3, #4
 8009488:	6819      	ldr	r1, [r3, #0]
 800948a:	2900      	cmp	r1, #0
 800948c:	d00f      	beq.n	80094ae <__mdiff+0x11e>
 800948e:	6110      	str	r0, [r2, #16]
 8009490:	e797      	b.n	80093c2 <__mdiff+0x32>
 8009492:	ce02      	ldmia	r6!, {r1}
 8009494:	b28d      	uxth	r5, r1
 8009496:	19ed      	adds	r5, r5, r7
 8009498:	0c0f      	lsrs	r7, r1, #16
 800949a:	1429      	asrs	r1, r5, #16
 800949c:	1879      	adds	r1, r7, r1
 800949e:	140f      	asrs	r7, r1, #16
 80094a0:	b2ad      	uxth	r5, r5
 80094a2:	0409      	lsls	r1, r1, #16
 80094a4:	430d      	orrs	r5, r1
 80094a6:	4661      	mov	r1, ip
 80094a8:	c120      	stmia	r1!, {r5}
 80094aa:	468c      	mov	ip, r1
 80094ac:	e7dd      	b.n	800946a <__mdiff+0xda>
 80094ae:	3801      	subs	r0, #1
 80094b0:	e7e9      	b.n	8009486 <__mdiff+0xf6>
 80094b2:	46c0      	nop			; (mov r8, r8)
 80094b4:	0800ab04 	.word	0x0800ab04
 80094b8:	00000232 	.word	0x00000232
 80094bc:	0800ab94 	.word	0x0800ab94

080094c0 <__ulp>:
 80094c0:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <__ulp+0x40>)
 80094c2:	4019      	ands	r1, r3
 80094c4:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <__ulp+0x44>)
 80094c6:	18c9      	adds	r1, r1, r3
 80094c8:	2900      	cmp	r1, #0
 80094ca:	dd04      	ble.n	80094d6 <__ulp+0x16>
 80094cc:	2200      	movs	r2, #0
 80094ce:	000b      	movs	r3, r1
 80094d0:	0010      	movs	r0, r2
 80094d2:	0019      	movs	r1, r3
 80094d4:	4770      	bx	lr
 80094d6:	4249      	negs	r1, r1
 80094d8:	2200      	movs	r2, #0
 80094da:	2300      	movs	r3, #0
 80094dc:	1509      	asrs	r1, r1, #20
 80094de:	2913      	cmp	r1, #19
 80094e0:	dc04      	bgt.n	80094ec <__ulp+0x2c>
 80094e2:	2080      	movs	r0, #128	; 0x80
 80094e4:	0300      	lsls	r0, r0, #12
 80094e6:	4108      	asrs	r0, r1
 80094e8:	0003      	movs	r3, r0
 80094ea:	e7f1      	b.n	80094d0 <__ulp+0x10>
 80094ec:	3914      	subs	r1, #20
 80094ee:	2001      	movs	r0, #1
 80094f0:	291e      	cmp	r1, #30
 80094f2:	dc02      	bgt.n	80094fa <__ulp+0x3a>
 80094f4:	2080      	movs	r0, #128	; 0x80
 80094f6:	0600      	lsls	r0, r0, #24
 80094f8:	40c8      	lsrs	r0, r1
 80094fa:	0002      	movs	r2, r0
 80094fc:	e7e8      	b.n	80094d0 <__ulp+0x10>
 80094fe:	46c0      	nop			; (mov r8, r8)
 8009500:	7ff00000 	.word	0x7ff00000
 8009504:	fcc00000 	.word	0xfcc00000

08009508 <__b2d>:
 8009508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800950a:	0006      	movs	r6, r0
 800950c:	6903      	ldr	r3, [r0, #16]
 800950e:	3614      	adds	r6, #20
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	18f3      	adds	r3, r6, r3
 8009514:	1f1d      	subs	r5, r3, #4
 8009516:	682c      	ldr	r4, [r5, #0]
 8009518:	000f      	movs	r7, r1
 800951a:	0020      	movs	r0, r4
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	f7ff fd41 	bl	8008fa4 <__hi0bits>
 8009522:	2320      	movs	r3, #32
 8009524:	1a1b      	subs	r3, r3, r0
 8009526:	491f      	ldr	r1, [pc, #124]	; (80095a4 <__b2d+0x9c>)
 8009528:	603b      	str	r3, [r7, #0]
 800952a:	280a      	cmp	r0, #10
 800952c:	dc16      	bgt.n	800955c <__b2d+0x54>
 800952e:	230b      	movs	r3, #11
 8009530:	0027      	movs	r7, r4
 8009532:	1a1b      	subs	r3, r3, r0
 8009534:	40df      	lsrs	r7, r3
 8009536:	4339      	orrs	r1, r7
 8009538:	469c      	mov	ip, r3
 800953a:	000b      	movs	r3, r1
 800953c:	2100      	movs	r1, #0
 800953e:	42ae      	cmp	r6, r5
 8009540:	d202      	bcs.n	8009548 <__b2d+0x40>
 8009542:	9901      	ldr	r1, [sp, #4]
 8009544:	3908      	subs	r1, #8
 8009546:	6809      	ldr	r1, [r1, #0]
 8009548:	3015      	adds	r0, #21
 800954a:	4084      	lsls	r4, r0
 800954c:	4660      	mov	r0, ip
 800954e:	40c1      	lsrs	r1, r0
 8009550:	430c      	orrs	r4, r1
 8009552:	0022      	movs	r2, r4
 8009554:	0010      	movs	r0, r2
 8009556:	0019      	movs	r1, r3
 8009558:	b003      	add	sp, #12
 800955a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955c:	2700      	movs	r7, #0
 800955e:	42ae      	cmp	r6, r5
 8009560:	d202      	bcs.n	8009568 <__b2d+0x60>
 8009562:	9d01      	ldr	r5, [sp, #4]
 8009564:	3d08      	subs	r5, #8
 8009566:	682f      	ldr	r7, [r5, #0]
 8009568:	230b      	movs	r3, #11
 800956a:	425b      	negs	r3, r3
 800956c:	469c      	mov	ip, r3
 800956e:	4484      	add	ip, r0
 8009570:	280b      	cmp	r0, #11
 8009572:	d013      	beq.n	800959c <__b2d+0x94>
 8009574:	4663      	mov	r3, ip
 8009576:	2020      	movs	r0, #32
 8009578:	409c      	lsls	r4, r3
 800957a:	1ac0      	subs	r0, r0, r3
 800957c:	003b      	movs	r3, r7
 800957e:	40c3      	lsrs	r3, r0
 8009580:	431c      	orrs	r4, r3
 8009582:	4321      	orrs	r1, r4
 8009584:	000b      	movs	r3, r1
 8009586:	2100      	movs	r1, #0
 8009588:	42b5      	cmp	r5, r6
 800958a:	d901      	bls.n	8009590 <__b2d+0x88>
 800958c:	3d04      	subs	r5, #4
 800958e:	6829      	ldr	r1, [r5, #0]
 8009590:	4664      	mov	r4, ip
 8009592:	40c1      	lsrs	r1, r0
 8009594:	40a7      	lsls	r7, r4
 8009596:	430f      	orrs	r7, r1
 8009598:	003a      	movs	r2, r7
 800959a:	e7db      	b.n	8009554 <__b2d+0x4c>
 800959c:	4321      	orrs	r1, r4
 800959e:	000b      	movs	r3, r1
 80095a0:	e7fa      	b.n	8009598 <__b2d+0x90>
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	3ff00000 	.word	0x3ff00000

080095a8 <__d2b>:
 80095a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095aa:	2101      	movs	r1, #1
 80095ac:	0014      	movs	r4, r2
 80095ae:	001e      	movs	r6, r3
 80095b0:	9f08      	ldr	r7, [sp, #32]
 80095b2:	f7ff fbff 	bl	8008db4 <_Balloc>
 80095b6:	1e05      	subs	r5, r0, #0
 80095b8:	d105      	bne.n	80095c6 <__d2b+0x1e>
 80095ba:	0002      	movs	r2, r0
 80095bc:	4b26      	ldr	r3, [pc, #152]	; (8009658 <__d2b+0xb0>)
 80095be:	4927      	ldr	r1, [pc, #156]	; (800965c <__d2b+0xb4>)
 80095c0:	4827      	ldr	r0, [pc, #156]	; (8009660 <__d2b+0xb8>)
 80095c2:	f000 fb0f 	bl	8009be4 <__assert_func>
 80095c6:	0333      	lsls	r3, r6, #12
 80095c8:	0076      	lsls	r6, r6, #1
 80095ca:	0b1b      	lsrs	r3, r3, #12
 80095cc:	0d76      	lsrs	r6, r6, #21
 80095ce:	d124      	bne.n	800961a <__d2b+0x72>
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	2c00      	cmp	r4, #0
 80095d4:	d027      	beq.n	8009626 <__d2b+0x7e>
 80095d6:	4668      	mov	r0, sp
 80095d8:	9400      	str	r4, [sp, #0]
 80095da:	f7ff fcfd 	bl	8008fd8 <__lo0bits>
 80095de:	9c00      	ldr	r4, [sp, #0]
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d01e      	beq.n	8009622 <__d2b+0x7a>
 80095e4:	9b01      	ldr	r3, [sp, #4]
 80095e6:	2120      	movs	r1, #32
 80095e8:	001a      	movs	r2, r3
 80095ea:	1a09      	subs	r1, r1, r0
 80095ec:	408a      	lsls	r2, r1
 80095ee:	40c3      	lsrs	r3, r0
 80095f0:	4322      	orrs	r2, r4
 80095f2:	616a      	str	r2, [r5, #20]
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	9c01      	ldr	r4, [sp, #4]
 80095f8:	61ac      	str	r4, [r5, #24]
 80095fa:	1e63      	subs	r3, r4, #1
 80095fc:	419c      	sbcs	r4, r3
 80095fe:	3401      	adds	r4, #1
 8009600:	612c      	str	r4, [r5, #16]
 8009602:	2e00      	cmp	r6, #0
 8009604:	d018      	beq.n	8009638 <__d2b+0x90>
 8009606:	4b17      	ldr	r3, [pc, #92]	; (8009664 <__d2b+0xbc>)
 8009608:	18f6      	adds	r6, r6, r3
 800960a:	2335      	movs	r3, #53	; 0x35
 800960c:	1836      	adds	r6, r6, r0
 800960e:	1a18      	subs	r0, r3, r0
 8009610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009612:	603e      	str	r6, [r7, #0]
 8009614:	6018      	str	r0, [r3, #0]
 8009616:	0028      	movs	r0, r5
 8009618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800961a:	2280      	movs	r2, #128	; 0x80
 800961c:	0352      	lsls	r2, r2, #13
 800961e:	4313      	orrs	r3, r2
 8009620:	e7d6      	b.n	80095d0 <__d2b+0x28>
 8009622:	616c      	str	r4, [r5, #20]
 8009624:	e7e7      	b.n	80095f6 <__d2b+0x4e>
 8009626:	a801      	add	r0, sp, #4
 8009628:	f7ff fcd6 	bl	8008fd8 <__lo0bits>
 800962c:	2401      	movs	r4, #1
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	612c      	str	r4, [r5, #16]
 8009632:	616b      	str	r3, [r5, #20]
 8009634:	3020      	adds	r0, #32
 8009636:	e7e4      	b.n	8009602 <__d2b+0x5a>
 8009638:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <__d2b+0xc0>)
 800963a:	18c0      	adds	r0, r0, r3
 800963c:	4b0b      	ldr	r3, [pc, #44]	; (800966c <__d2b+0xc4>)
 800963e:	6038      	str	r0, [r7, #0]
 8009640:	18e3      	adds	r3, r4, r3
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	18eb      	adds	r3, r5, r3
 8009646:	6958      	ldr	r0, [r3, #20]
 8009648:	f7ff fcac 	bl	8008fa4 <__hi0bits>
 800964c:	0164      	lsls	r4, r4, #5
 800964e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009650:	1a24      	subs	r4, r4, r0
 8009652:	601c      	str	r4, [r3, #0]
 8009654:	e7df      	b.n	8009616 <__d2b+0x6e>
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	0800ab04 	.word	0x0800ab04
 800965c:	0000030a 	.word	0x0000030a
 8009660:	0800ab94 	.word	0x0800ab94
 8009664:	fffffbcd 	.word	0xfffffbcd
 8009668:	fffffbce 	.word	0xfffffbce
 800966c:	3fffffff 	.word	0x3fffffff

08009670 <__ratio>:
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009672:	b085      	sub	sp, #20
 8009674:	000d      	movs	r5, r1
 8009676:	a902      	add	r1, sp, #8
 8009678:	0004      	movs	r4, r0
 800967a:	f7ff ff45 	bl	8009508 <__b2d>
 800967e:	9000      	str	r0, [sp, #0]
 8009680:	9101      	str	r1, [sp, #4]
 8009682:	9e00      	ldr	r6, [sp, #0]
 8009684:	9f01      	ldr	r7, [sp, #4]
 8009686:	0028      	movs	r0, r5
 8009688:	a903      	add	r1, sp, #12
 800968a:	f7ff ff3d 	bl	8009508 <__b2d>
 800968e:	6924      	ldr	r4, [r4, #16]
 8009690:	692d      	ldr	r5, [r5, #16]
 8009692:	0002      	movs	r2, r0
 8009694:	1b65      	subs	r5, r4, r5
 8009696:	016c      	lsls	r4, r5, #5
 8009698:	46a4      	mov	ip, r4
 800969a:	9d03      	ldr	r5, [sp, #12]
 800969c:	9c02      	ldr	r4, [sp, #8]
 800969e:	000b      	movs	r3, r1
 80096a0:	1b64      	subs	r4, r4, r5
 80096a2:	4464      	add	r4, ip
 80096a4:	0525      	lsls	r5, r4, #20
 80096a6:	2c00      	cmp	r4, #0
 80096a8:	dd07      	ble.n	80096ba <__ratio+0x4a>
 80096aa:	9901      	ldr	r1, [sp, #4]
 80096ac:	186f      	adds	r7, r5, r1
 80096ae:	0030      	movs	r0, r6
 80096b0:	0039      	movs	r1, r7
 80096b2:	f7f7 fad3 	bl	8000c5c <__aeabi_ddiv>
 80096b6:	b005      	add	sp, #20
 80096b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ba:	1b4b      	subs	r3, r1, r5
 80096bc:	e7f7      	b.n	80096ae <__ratio+0x3e>

080096be <__copybits>:
 80096be:	b570      	push	{r4, r5, r6, lr}
 80096c0:	0015      	movs	r5, r2
 80096c2:	6913      	ldr	r3, [r2, #16]
 80096c4:	3514      	adds	r5, #20
 80096c6:	009c      	lsls	r4, r3, #2
 80096c8:	0006      	movs	r6, r0
 80096ca:	002b      	movs	r3, r5
 80096cc:	3901      	subs	r1, #1
 80096ce:	1149      	asrs	r1, r1, #5
 80096d0:	3101      	adds	r1, #1
 80096d2:	0089      	lsls	r1, r1, #2
 80096d4:	1841      	adds	r1, r0, r1
 80096d6:	192c      	adds	r4, r5, r4
 80096d8:	429c      	cmp	r4, r3
 80096da:	d80d      	bhi.n	80096f8 <__copybits+0x3a>
 80096dc:	0015      	movs	r5, r2
 80096de:	3511      	adds	r5, #17
 80096e0:	2300      	movs	r3, #0
 80096e2:	42a5      	cmp	r5, r4
 80096e4:	d803      	bhi.n	80096ee <__copybits+0x30>
 80096e6:	1aa3      	subs	r3, r4, r2
 80096e8:	3b11      	subs	r3, #17
 80096ea:	089b      	lsrs	r3, r3, #2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	18c0      	adds	r0, r0, r3
 80096f0:	2300      	movs	r3, #0
 80096f2:	4281      	cmp	r1, r0
 80096f4:	d803      	bhi.n	80096fe <__copybits+0x40>
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
 80096f8:	cb20      	ldmia	r3!, {r5}
 80096fa:	c620      	stmia	r6!, {r5}
 80096fc:	e7ec      	b.n	80096d8 <__copybits+0x1a>
 80096fe:	c008      	stmia	r0!, {r3}
 8009700:	e7f7      	b.n	80096f2 <__copybits+0x34>

08009702 <__any_on>:
 8009702:	0002      	movs	r2, r0
 8009704:	6900      	ldr	r0, [r0, #16]
 8009706:	b510      	push	{r4, lr}
 8009708:	3214      	adds	r2, #20
 800970a:	114b      	asrs	r3, r1, #5
 800970c:	4298      	cmp	r0, r3
 800970e:	db13      	blt.n	8009738 <__any_on+0x36>
 8009710:	dd0c      	ble.n	800972c <__any_on+0x2a>
 8009712:	241f      	movs	r4, #31
 8009714:	0008      	movs	r0, r1
 8009716:	4020      	ands	r0, r4
 8009718:	4221      	tst	r1, r4
 800971a:	d007      	beq.n	800972c <__any_on+0x2a>
 800971c:	0099      	lsls	r1, r3, #2
 800971e:	588c      	ldr	r4, [r1, r2]
 8009720:	0021      	movs	r1, r4
 8009722:	40c1      	lsrs	r1, r0
 8009724:	4081      	lsls	r1, r0
 8009726:	2001      	movs	r0, #1
 8009728:	428c      	cmp	r4, r1
 800972a:	d104      	bne.n	8009736 <__any_on+0x34>
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	18d3      	adds	r3, r2, r3
 8009730:	4293      	cmp	r3, r2
 8009732:	d803      	bhi.n	800973c <__any_on+0x3a>
 8009734:	2000      	movs	r0, #0
 8009736:	bd10      	pop	{r4, pc}
 8009738:	0003      	movs	r3, r0
 800973a:	e7f7      	b.n	800972c <__any_on+0x2a>
 800973c:	3b04      	subs	r3, #4
 800973e:	6819      	ldr	r1, [r3, #0]
 8009740:	2900      	cmp	r1, #0
 8009742:	d0f5      	beq.n	8009730 <__any_on+0x2e>
 8009744:	2001      	movs	r0, #1
 8009746:	e7f6      	b.n	8009736 <__any_on+0x34>

08009748 <_calloc_r>:
 8009748:	434a      	muls	r2, r1
 800974a:	b570      	push	{r4, r5, r6, lr}
 800974c:	0011      	movs	r1, r2
 800974e:	0015      	movs	r5, r2
 8009750:	f000 f852 	bl	80097f8 <_malloc_r>
 8009754:	1e04      	subs	r4, r0, #0
 8009756:	d003      	beq.n	8009760 <_calloc_r+0x18>
 8009758:	002a      	movs	r2, r5
 800975a:	2100      	movs	r1, #0
 800975c:	f7fc fb56 	bl	8005e0c <memset>
 8009760:	0020      	movs	r0, r4
 8009762:	bd70      	pop	{r4, r5, r6, pc}

08009764 <_free_r>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	0005      	movs	r5, r0
 8009768:	2900      	cmp	r1, #0
 800976a:	d010      	beq.n	800978e <_free_r+0x2a>
 800976c:	1f0c      	subs	r4, r1, #4
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	da00      	bge.n	8009776 <_free_r+0x12>
 8009774:	18e4      	adds	r4, r4, r3
 8009776:	0028      	movs	r0, r5
 8009778:	f000 fa76 	bl	8009c68 <__malloc_lock>
 800977c:	4a1d      	ldr	r2, [pc, #116]	; (80097f4 <_free_r+0x90>)
 800977e:	6813      	ldr	r3, [r2, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <_free_r+0x2c>
 8009784:	6063      	str	r3, [r4, #4]
 8009786:	6014      	str	r4, [r2, #0]
 8009788:	0028      	movs	r0, r5
 800978a:	f000 fa75 	bl	8009c78 <__malloc_unlock>
 800978e:	bd70      	pop	{r4, r5, r6, pc}
 8009790:	42a3      	cmp	r3, r4
 8009792:	d908      	bls.n	80097a6 <_free_r+0x42>
 8009794:	6821      	ldr	r1, [r4, #0]
 8009796:	1860      	adds	r0, r4, r1
 8009798:	4283      	cmp	r3, r0
 800979a:	d1f3      	bne.n	8009784 <_free_r+0x20>
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	1841      	adds	r1, r0, r1
 80097a2:	6021      	str	r1, [r4, #0]
 80097a4:	e7ee      	b.n	8009784 <_free_r+0x20>
 80097a6:	001a      	movs	r2, r3
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <_free_r+0x4e>
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	d9f9      	bls.n	80097a6 <_free_r+0x42>
 80097b2:	6811      	ldr	r1, [r2, #0]
 80097b4:	1850      	adds	r0, r2, r1
 80097b6:	42a0      	cmp	r0, r4
 80097b8:	d10b      	bne.n	80097d2 <_free_r+0x6e>
 80097ba:	6820      	ldr	r0, [r4, #0]
 80097bc:	1809      	adds	r1, r1, r0
 80097be:	1850      	adds	r0, r2, r1
 80097c0:	6011      	str	r1, [r2, #0]
 80097c2:	4283      	cmp	r3, r0
 80097c4:	d1e0      	bne.n	8009788 <_free_r+0x24>
 80097c6:	6818      	ldr	r0, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	1841      	adds	r1, r0, r1
 80097cc:	6011      	str	r1, [r2, #0]
 80097ce:	6053      	str	r3, [r2, #4]
 80097d0:	e7da      	b.n	8009788 <_free_r+0x24>
 80097d2:	42a0      	cmp	r0, r4
 80097d4:	d902      	bls.n	80097dc <_free_r+0x78>
 80097d6:	230c      	movs	r3, #12
 80097d8:	602b      	str	r3, [r5, #0]
 80097da:	e7d5      	b.n	8009788 <_free_r+0x24>
 80097dc:	6821      	ldr	r1, [r4, #0]
 80097de:	1860      	adds	r0, r4, r1
 80097e0:	4283      	cmp	r3, r0
 80097e2:	d103      	bne.n	80097ec <_free_r+0x88>
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	1841      	adds	r1, r0, r1
 80097ea:	6021      	str	r1, [r4, #0]
 80097ec:	6063      	str	r3, [r4, #4]
 80097ee:	6054      	str	r4, [r2, #4]
 80097f0:	e7ca      	b.n	8009788 <_free_r+0x24>
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	20000214 	.word	0x20000214

080097f8 <_malloc_r>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	2303      	movs	r3, #3
 80097fc:	1ccd      	adds	r5, r1, #3
 80097fe:	439d      	bics	r5, r3
 8009800:	3508      	adds	r5, #8
 8009802:	0006      	movs	r6, r0
 8009804:	2d0c      	cmp	r5, #12
 8009806:	d21f      	bcs.n	8009848 <_malloc_r+0x50>
 8009808:	250c      	movs	r5, #12
 800980a:	42a9      	cmp	r1, r5
 800980c:	d81e      	bhi.n	800984c <_malloc_r+0x54>
 800980e:	0030      	movs	r0, r6
 8009810:	f000 fa2a 	bl	8009c68 <__malloc_lock>
 8009814:	4925      	ldr	r1, [pc, #148]	; (80098ac <_malloc_r+0xb4>)
 8009816:	680a      	ldr	r2, [r1, #0]
 8009818:	0014      	movs	r4, r2
 800981a:	2c00      	cmp	r4, #0
 800981c:	d11a      	bne.n	8009854 <_malloc_r+0x5c>
 800981e:	4f24      	ldr	r7, [pc, #144]	; (80098b0 <_malloc_r+0xb8>)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d104      	bne.n	8009830 <_malloc_r+0x38>
 8009826:	0021      	movs	r1, r4
 8009828:	0030      	movs	r0, r6
 800982a:	f000 f9ab 	bl	8009b84 <_sbrk_r>
 800982e:	6038      	str	r0, [r7, #0]
 8009830:	0029      	movs	r1, r5
 8009832:	0030      	movs	r0, r6
 8009834:	f000 f9a6 	bl	8009b84 <_sbrk_r>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d12b      	bne.n	8009894 <_malloc_r+0x9c>
 800983c:	230c      	movs	r3, #12
 800983e:	0030      	movs	r0, r6
 8009840:	6033      	str	r3, [r6, #0]
 8009842:	f000 fa19 	bl	8009c78 <__malloc_unlock>
 8009846:	e003      	b.n	8009850 <_malloc_r+0x58>
 8009848:	2d00      	cmp	r5, #0
 800984a:	dade      	bge.n	800980a <_malloc_r+0x12>
 800984c:	230c      	movs	r3, #12
 800984e:	6033      	str	r3, [r6, #0]
 8009850:	2000      	movs	r0, #0
 8009852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	1b5b      	subs	r3, r3, r5
 8009858:	d419      	bmi.n	800988e <_malloc_r+0x96>
 800985a:	2b0b      	cmp	r3, #11
 800985c:	d903      	bls.n	8009866 <_malloc_r+0x6e>
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	18e4      	adds	r4, r4, r3
 8009862:	6025      	str	r5, [r4, #0]
 8009864:	e003      	b.n	800986e <_malloc_r+0x76>
 8009866:	6863      	ldr	r3, [r4, #4]
 8009868:	42a2      	cmp	r2, r4
 800986a:	d10e      	bne.n	800988a <_malloc_r+0x92>
 800986c:	600b      	str	r3, [r1, #0]
 800986e:	0030      	movs	r0, r6
 8009870:	f000 fa02 	bl	8009c78 <__malloc_unlock>
 8009874:	0020      	movs	r0, r4
 8009876:	2207      	movs	r2, #7
 8009878:	300b      	adds	r0, #11
 800987a:	1d23      	adds	r3, r4, #4
 800987c:	4390      	bics	r0, r2
 800987e:	1ac2      	subs	r2, r0, r3
 8009880:	4298      	cmp	r0, r3
 8009882:	d0e6      	beq.n	8009852 <_malloc_r+0x5a>
 8009884:	1a1b      	subs	r3, r3, r0
 8009886:	50a3      	str	r3, [r4, r2]
 8009888:	e7e3      	b.n	8009852 <_malloc_r+0x5a>
 800988a:	6053      	str	r3, [r2, #4]
 800988c:	e7ef      	b.n	800986e <_malloc_r+0x76>
 800988e:	0022      	movs	r2, r4
 8009890:	6864      	ldr	r4, [r4, #4]
 8009892:	e7c2      	b.n	800981a <_malloc_r+0x22>
 8009894:	2303      	movs	r3, #3
 8009896:	1cc4      	adds	r4, r0, #3
 8009898:	439c      	bics	r4, r3
 800989a:	42a0      	cmp	r0, r4
 800989c:	d0e1      	beq.n	8009862 <_malloc_r+0x6a>
 800989e:	1a21      	subs	r1, r4, r0
 80098a0:	0030      	movs	r0, r6
 80098a2:	f000 f96f 	bl	8009b84 <_sbrk_r>
 80098a6:	1c43      	adds	r3, r0, #1
 80098a8:	d1db      	bne.n	8009862 <_malloc_r+0x6a>
 80098aa:	e7c7      	b.n	800983c <_malloc_r+0x44>
 80098ac:	20000214 	.word	0x20000214
 80098b0:	20000218 	.word	0x20000218

080098b4 <__ssputs_r>:
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	688e      	ldr	r6, [r1, #8]
 80098b8:	b085      	sub	sp, #20
 80098ba:	0007      	movs	r7, r0
 80098bc:	000c      	movs	r4, r1
 80098be:	9203      	str	r2, [sp, #12]
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	429e      	cmp	r6, r3
 80098c4:	d83c      	bhi.n	8009940 <__ssputs_r+0x8c>
 80098c6:	2390      	movs	r3, #144	; 0x90
 80098c8:	898a      	ldrh	r2, [r1, #12]
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	421a      	tst	r2, r3
 80098ce:	d034      	beq.n	800993a <__ssputs_r+0x86>
 80098d0:	2503      	movs	r5, #3
 80098d2:	6909      	ldr	r1, [r1, #16]
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	1a5b      	subs	r3, r3, r1
 80098d8:	9302      	str	r3, [sp, #8]
 80098da:	6963      	ldr	r3, [r4, #20]
 80098dc:	9802      	ldr	r0, [sp, #8]
 80098de:	435d      	muls	r5, r3
 80098e0:	0feb      	lsrs	r3, r5, #31
 80098e2:	195d      	adds	r5, r3, r5
 80098e4:	9b01      	ldr	r3, [sp, #4]
 80098e6:	106d      	asrs	r5, r5, #1
 80098e8:	3301      	adds	r3, #1
 80098ea:	181b      	adds	r3, r3, r0
 80098ec:	42ab      	cmp	r3, r5
 80098ee:	d900      	bls.n	80098f2 <__ssputs_r+0x3e>
 80098f0:	001d      	movs	r5, r3
 80098f2:	0553      	lsls	r3, r2, #21
 80098f4:	d532      	bpl.n	800995c <__ssputs_r+0xa8>
 80098f6:	0029      	movs	r1, r5
 80098f8:	0038      	movs	r0, r7
 80098fa:	f7ff ff7d 	bl	80097f8 <_malloc_r>
 80098fe:	1e06      	subs	r6, r0, #0
 8009900:	d109      	bne.n	8009916 <__ssputs_r+0x62>
 8009902:	230c      	movs	r3, #12
 8009904:	603b      	str	r3, [r7, #0]
 8009906:	2340      	movs	r3, #64	; 0x40
 8009908:	2001      	movs	r0, #1
 800990a:	89a2      	ldrh	r2, [r4, #12]
 800990c:	4240      	negs	r0, r0
 800990e:	4313      	orrs	r3, r2
 8009910:	81a3      	strh	r3, [r4, #12]
 8009912:	b005      	add	sp, #20
 8009914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009916:	9a02      	ldr	r2, [sp, #8]
 8009918:	6921      	ldr	r1, [r4, #16]
 800991a:	f7ff fa42 	bl	8008da2 <memcpy>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	4a14      	ldr	r2, [pc, #80]	; (8009974 <__ssputs_r+0xc0>)
 8009922:	401a      	ands	r2, r3
 8009924:	2380      	movs	r3, #128	; 0x80
 8009926:	4313      	orrs	r3, r2
 8009928:	81a3      	strh	r3, [r4, #12]
 800992a:	9b02      	ldr	r3, [sp, #8]
 800992c:	6126      	str	r6, [r4, #16]
 800992e:	18f6      	adds	r6, r6, r3
 8009930:	6026      	str	r6, [r4, #0]
 8009932:	6165      	str	r5, [r4, #20]
 8009934:	9e01      	ldr	r6, [sp, #4]
 8009936:	1aed      	subs	r5, r5, r3
 8009938:	60a5      	str	r5, [r4, #8]
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	429e      	cmp	r6, r3
 800993e:	d900      	bls.n	8009942 <__ssputs_r+0x8e>
 8009940:	9e01      	ldr	r6, [sp, #4]
 8009942:	0032      	movs	r2, r6
 8009944:	9903      	ldr	r1, [sp, #12]
 8009946:	6820      	ldr	r0, [r4, #0]
 8009948:	f000 f97a 	bl	8009c40 <memmove>
 800994c:	68a3      	ldr	r3, [r4, #8]
 800994e:	2000      	movs	r0, #0
 8009950:	1b9b      	subs	r3, r3, r6
 8009952:	60a3      	str	r3, [r4, #8]
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	199e      	adds	r6, r3, r6
 8009958:	6026      	str	r6, [r4, #0]
 800995a:	e7da      	b.n	8009912 <__ssputs_r+0x5e>
 800995c:	002a      	movs	r2, r5
 800995e:	0038      	movs	r0, r7
 8009960:	f000 f992 	bl	8009c88 <_realloc_r>
 8009964:	1e06      	subs	r6, r0, #0
 8009966:	d1e0      	bne.n	800992a <__ssputs_r+0x76>
 8009968:	0038      	movs	r0, r7
 800996a:	6921      	ldr	r1, [r4, #16]
 800996c:	f7ff fefa 	bl	8009764 <_free_r>
 8009970:	e7c7      	b.n	8009902 <__ssputs_r+0x4e>
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	fffffb7f 	.word	0xfffffb7f

08009978 <_svfiprintf_r>:
 8009978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800997a:	b0a1      	sub	sp, #132	; 0x84
 800997c:	9003      	str	r0, [sp, #12]
 800997e:	001d      	movs	r5, r3
 8009980:	898b      	ldrh	r3, [r1, #12]
 8009982:	000f      	movs	r7, r1
 8009984:	0016      	movs	r6, r2
 8009986:	061b      	lsls	r3, r3, #24
 8009988:	d511      	bpl.n	80099ae <_svfiprintf_r+0x36>
 800998a:	690b      	ldr	r3, [r1, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10e      	bne.n	80099ae <_svfiprintf_r+0x36>
 8009990:	2140      	movs	r1, #64	; 0x40
 8009992:	f7ff ff31 	bl	80097f8 <_malloc_r>
 8009996:	6038      	str	r0, [r7, #0]
 8009998:	6138      	str	r0, [r7, #16]
 800999a:	2800      	cmp	r0, #0
 800999c:	d105      	bne.n	80099aa <_svfiprintf_r+0x32>
 800999e:	230c      	movs	r3, #12
 80099a0:	9a03      	ldr	r2, [sp, #12]
 80099a2:	3801      	subs	r0, #1
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	b021      	add	sp, #132	; 0x84
 80099a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099aa:	2340      	movs	r3, #64	; 0x40
 80099ac:	617b      	str	r3, [r7, #20]
 80099ae:	2300      	movs	r3, #0
 80099b0:	ac08      	add	r4, sp, #32
 80099b2:	6163      	str	r3, [r4, #20]
 80099b4:	3320      	adds	r3, #32
 80099b6:	7663      	strb	r3, [r4, #25]
 80099b8:	3310      	adds	r3, #16
 80099ba:	76a3      	strb	r3, [r4, #26]
 80099bc:	9507      	str	r5, [sp, #28]
 80099be:	0035      	movs	r5, r6
 80099c0:	782b      	ldrb	r3, [r5, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <_svfiprintf_r+0x52>
 80099c6:	2b25      	cmp	r3, #37	; 0x25
 80099c8:	d147      	bne.n	8009a5a <_svfiprintf_r+0xe2>
 80099ca:	1bab      	subs	r3, r5, r6
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	42b5      	cmp	r5, r6
 80099d0:	d00c      	beq.n	80099ec <_svfiprintf_r+0x74>
 80099d2:	0032      	movs	r2, r6
 80099d4:	0039      	movs	r1, r7
 80099d6:	9803      	ldr	r0, [sp, #12]
 80099d8:	f7ff ff6c 	bl	80098b4 <__ssputs_r>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d100      	bne.n	80099e2 <_svfiprintf_r+0x6a>
 80099e0:	e0ae      	b.n	8009b40 <_svfiprintf_r+0x1c8>
 80099e2:	6962      	ldr	r2, [r4, #20]
 80099e4:	9b05      	ldr	r3, [sp, #20]
 80099e6:	4694      	mov	ip, r2
 80099e8:	4463      	add	r3, ip
 80099ea:	6163      	str	r3, [r4, #20]
 80099ec:	782b      	ldrb	r3, [r5, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d100      	bne.n	80099f4 <_svfiprintf_r+0x7c>
 80099f2:	e0a5      	b.n	8009b40 <_svfiprintf_r+0x1c8>
 80099f4:	2201      	movs	r2, #1
 80099f6:	2300      	movs	r3, #0
 80099f8:	4252      	negs	r2, r2
 80099fa:	6062      	str	r2, [r4, #4]
 80099fc:	a904      	add	r1, sp, #16
 80099fe:	3254      	adds	r2, #84	; 0x54
 8009a00:	1852      	adds	r2, r2, r1
 8009a02:	1c6e      	adds	r6, r5, #1
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	60e3      	str	r3, [r4, #12]
 8009a08:	60a3      	str	r3, [r4, #8]
 8009a0a:	7013      	strb	r3, [r2, #0]
 8009a0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009a0e:	2205      	movs	r2, #5
 8009a10:	7831      	ldrb	r1, [r6, #0]
 8009a12:	4854      	ldr	r0, [pc, #336]	; (8009b64 <_svfiprintf_r+0x1ec>)
 8009a14:	f7ff f9ba 	bl	8008d8c <memchr>
 8009a18:	1c75      	adds	r5, r6, #1
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d11f      	bne.n	8009a5e <_svfiprintf_r+0xe6>
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	06d3      	lsls	r3, r2, #27
 8009a22:	d504      	bpl.n	8009a2e <_svfiprintf_r+0xb6>
 8009a24:	2353      	movs	r3, #83	; 0x53
 8009a26:	a904      	add	r1, sp, #16
 8009a28:	185b      	adds	r3, r3, r1
 8009a2a:	2120      	movs	r1, #32
 8009a2c:	7019      	strb	r1, [r3, #0]
 8009a2e:	0713      	lsls	r3, r2, #28
 8009a30:	d504      	bpl.n	8009a3c <_svfiprintf_r+0xc4>
 8009a32:	2353      	movs	r3, #83	; 0x53
 8009a34:	a904      	add	r1, sp, #16
 8009a36:	185b      	adds	r3, r3, r1
 8009a38:	212b      	movs	r1, #43	; 0x2b
 8009a3a:	7019      	strb	r1, [r3, #0]
 8009a3c:	7833      	ldrb	r3, [r6, #0]
 8009a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a40:	d016      	beq.n	8009a70 <_svfiprintf_r+0xf8>
 8009a42:	0035      	movs	r5, r6
 8009a44:	2100      	movs	r1, #0
 8009a46:	200a      	movs	r0, #10
 8009a48:	68e3      	ldr	r3, [r4, #12]
 8009a4a:	782a      	ldrb	r2, [r5, #0]
 8009a4c:	1c6e      	adds	r6, r5, #1
 8009a4e:	3a30      	subs	r2, #48	; 0x30
 8009a50:	2a09      	cmp	r2, #9
 8009a52:	d94e      	bls.n	8009af2 <_svfiprintf_r+0x17a>
 8009a54:	2900      	cmp	r1, #0
 8009a56:	d111      	bne.n	8009a7c <_svfiprintf_r+0x104>
 8009a58:	e017      	b.n	8009a8a <_svfiprintf_r+0x112>
 8009a5a:	3501      	adds	r5, #1
 8009a5c:	e7b0      	b.n	80099c0 <_svfiprintf_r+0x48>
 8009a5e:	4b41      	ldr	r3, [pc, #260]	; (8009b64 <_svfiprintf_r+0x1ec>)
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	1ac0      	subs	r0, r0, r3
 8009a64:	2301      	movs	r3, #1
 8009a66:	4083      	lsls	r3, r0
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	002e      	movs	r6, r5
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	e7ce      	b.n	8009a0e <_svfiprintf_r+0x96>
 8009a70:	9b07      	ldr	r3, [sp, #28]
 8009a72:	1d19      	adds	r1, r3, #4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	9107      	str	r1, [sp, #28]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db01      	blt.n	8009a80 <_svfiprintf_r+0x108>
 8009a7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a7e:	e004      	b.n	8009a8a <_svfiprintf_r+0x112>
 8009a80:	425b      	negs	r3, r3
 8009a82:	60e3      	str	r3, [r4, #12]
 8009a84:	2302      	movs	r3, #2
 8009a86:	4313      	orrs	r3, r2
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	782b      	ldrb	r3, [r5, #0]
 8009a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a8e:	d10a      	bne.n	8009aa6 <_svfiprintf_r+0x12e>
 8009a90:	786b      	ldrb	r3, [r5, #1]
 8009a92:	2b2a      	cmp	r3, #42	; 0x2a
 8009a94:	d135      	bne.n	8009b02 <_svfiprintf_r+0x18a>
 8009a96:	9b07      	ldr	r3, [sp, #28]
 8009a98:	3502      	adds	r5, #2
 8009a9a:	1d1a      	adds	r2, r3, #4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	9207      	str	r2, [sp, #28]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	db2b      	blt.n	8009afc <_svfiprintf_r+0x184>
 8009aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa6:	4e30      	ldr	r6, [pc, #192]	; (8009b68 <_svfiprintf_r+0x1f0>)
 8009aa8:	2203      	movs	r2, #3
 8009aaa:	0030      	movs	r0, r6
 8009aac:	7829      	ldrb	r1, [r5, #0]
 8009aae:	f7ff f96d 	bl	8008d8c <memchr>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d006      	beq.n	8009ac4 <_svfiprintf_r+0x14c>
 8009ab6:	2340      	movs	r3, #64	; 0x40
 8009ab8:	1b80      	subs	r0, r0, r6
 8009aba:	4083      	lsls	r3, r0
 8009abc:	6822      	ldr	r2, [r4, #0]
 8009abe:	3501      	adds	r5, #1
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	7829      	ldrb	r1, [r5, #0]
 8009ac6:	2206      	movs	r2, #6
 8009ac8:	4828      	ldr	r0, [pc, #160]	; (8009b6c <_svfiprintf_r+0x1f4>)
 8009aca:	1c6e      	adds	r6, r5, #1
 8009acc:	7621      	strb	r1, [r4, #24]
 8009ace:	f7ff f95d 	bl	8008d8c <memchr>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d03c      	beq.n	8009b50 <_svfiprintf_r+0x1d8>
 8009ad6:	4b26      	ldr	r3, [pc, #152]	; (8009b70 <_svfiprintf_r+0x1f8>)
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d125      	bne.n	8009b28 <_svfiprintf_r+0x1b0>
 8009adc:	2207      	movs	r2, #7
 8009ade:	9b07      	ldr	r3, [sp, #28]
 8009ae0:	3307      	adds	r3, #7
 8009ae2:	4393      	bics	r3, r2
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	9307      	str	r3, [sp, #28]
 8009ae8:	6963      	ldr	r3, [r4, #20]
 8009aea:	9a04      	ldr	r2, [sp, #16]
 8009aec:	189b      	adds	r3, r3, r2
 8009aee:	6163      	str	r3, [r4, #20]
 8009af0:	e765      	b.n	80099be <_svfiprintf_r+0x46>
 8009af2:	4343      	muls	r3, r0
 8009af4:	0035      	movs	r5, r6
 8009af6:	2101      	movs	r1, #1
 8009af8:	189b      	adds	r3, r3, r2
 8009afa:	e7a6      	b.n	8009a4a <_svfiprintf_r+0xd2>
 8009afc:	2301      	movs	r3, #1
 8009afe:	425b      	negs	r3, r3
 8009b00:	e7d0      	b.n	8009aa4 <_svfiprintf_r+0x12c>
 8009b02:	2300      	movs	r3, #0
 8009b04:	200a      	movs	r0, #10
 8009b06:	001a      	movs	r2, r3
 8009b08:	3501      	adds	r5, #1
 8009b0a:	6063      	str	r3, [r4, #4]
 8009b0c:	7829      	ldrb	r1, [r5, #0]
 8009b0e:	1c6e      	adds	r6, r5, #1
 8009b10:	3930      	subs	r1, #48	; 0x30
 8009b12:	2909      	cmp	r1, #9
 8009b14:	d903      	bls.n	8009b1e <_svfiprintf_r+0x1a6>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d0c5      	beq.n	8009aa6 <_svfiprintf_r+0x12e>
 8009b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b1c:	e7c3      	b.n	8009aa6 <_svfiprintf_r+0x12e>
 8009b1e:	4342      	muls	r2, r0
 8009b20:	0035      	movs	r5, r6
 8009b22:	2301      	movs	r3, #1
 8009b24:	1852      	adds	r2, r2, r1
 8009b26:	e7f1      	b.n	8009b0c <_svfiprintf_r+0x194>
 8009b28:	ab07      	add	r3, sp, #28
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	003a      	movs	r2, r7
 8009b2e:	0021      	movs	r1, r4
 8009b30:	4b10      	ldr	r3, [pc, #64]	; (8009b74 <_svfiprintf_r+0x1fc>)
 8009b32:	9803      	ldr	r0, [sp, #12]
 8009b34:	f7fc fa1c 	bl	8005f70 <_printf_float>
 8009b38:	9004      	str	r0, [sp, #16]
 8009b3a:	9b04      	ldr	r3, [sp, #16]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	d1d3      	bne.n	8009ae8 <_svfiprintf_r+0x170>
 8009b40:	89bb      	ldrh	r3, [r7, #12]
 8009b42:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b44:	065b      	lsls	r3, r3, #25
 8009b46:	d400      	bmi.n	8009b4a <_svfiprintf_r+0x1d2>
 8009b48:	e72d      	b.n	80099a6 <_svfiprintf_r+0x2e>
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	4240      	negs	r0, r0
 8009b4e:	e72a      	b.n	80099a6 <_svfiprintf_r+0x2e>
 8009b50:	ab07      	add	r3, sp, #28
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	003a      	movs	r2, r7
 8009b56:	0021      	movs	r1, r4
 8009b58:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <_svfiprintf_r+0x1fc>)
 8009b5a:	9803      	ldr	r0, [sp, #12]
 8009b5c:	f7fc fcc6 	bl	80064ec <_printf_i>
 8009b60:	e7ea      	b.n	8009b38 <_svfiprintf_r+0x1c0>
 8009b62:	46c0      	nop			; (mov r8, r8)
 8009b64:	0800acf4 	.word	0x0800acf4
 8009b68:	0800acfa 	.word	0x0800acfa
 8009b6c:	0800acfe 	.word	0x0800acfe
 8009b70:	08005f71 	.word	0x08005f71
 8009b74:	080098b5 	.word	0x080098b5

08009b78 <nan>:
 8009b78:	2000      	movs	r0, #0
 8009b7a:	4901      	ldr	r1, [pc, #4]	; (8009b80 <nan+0x8>)
 8009b7c:	4770      	bx	lr
 8009b7e:	46c0      	nop			; (mov r8, r8)
 8009b80:	7ff80000 	.word	0x7ff80000

08009b84 <_sbrk_r>:
 8009b84:	2300      	movs	r3, #0
 8009b86:	b570      	push	{r4, r5, r6, lr}
 8009b88:	4d06      	ldr	r5, [pc, #24]	; (8009ba4 <_sbrk_r+0x20>)
 8009b8a:	0004      	movs	r4, r0
 8009b8c:	0008      	movs	r0, r1
 8009b8e:	602b      	str	r3, [r5, #0]
 8009b90:	f7f9 f9ce 	bl	8002f30 <_sbrk>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d103      	bne.n	8009ba0 <_sbrk_r+0x1c>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d000      	beq.n	8009ba0 <_sbrk_r+0x1c>
 8009b9e:	6023      	str	r3, [r4, #0]
 8009ba0:	bd70      	pop	{r4, r5, r6, pc}
 8009ba2:	46c0      	nop			; (mov r8, r8)
 8009ba4:	20000c04 	.word	0x20000c04

08009ba8 <strncmp>:
 8009ba8:	b530      	push	{r4, r5, lr}
 8009baa:	0005      	movs	r5, r0
 8009bac:	1e10      	subs	r0, r2, #0
 8009bae:	d00b      	beq.n	8009bc8 <strncmp+0x20>
 8009bb0:	2400      	movs	r4, #0
 8009bb2:	3a01      	subs	r2, #1
 8009bb4:	5d2b      	ldrb	r3, [r5, r4]
 8009bb6:	5d08      	ldrb	r0, [r1, r4]
 8009bb8:	4283      	cmp	r3, r0
 8009bba:	d104      	bne.n	8009bc6 <strncmp+0x1e>
 8009bbc:	4294      	cmp	r4, r2
 8009bbe:	d002      	beq.n	8009bc6 <strncmp+0x1e>
 8009bc0:	3401      	adds	r4, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1f6      	bne.n	8009bb4 <strncmp+0xc>
 8009bc6:	1a18      	subs	r0, r3, r0
 8009bc8:	bd30      	pop	{r4, r5, pc}

08009bca <__ascii_wctomb>:
 8009bca:	0003      	movs	r3, r0
 8009bcc:	1e08      	subs	r0, r1, #0
 8009bce:	d005      	beq.n	8009bdc <__ascii_wctomb+0x12>
 8009bd0:	2aff      	cmp	r2, #255	; 0xff
 8009bd2:	d904      	bls.n	8009bde <__ascii_wctomb+0x14>
 8009bd4:	228a      	movs	r2, #138	; 0x8a
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	4240      	negs	r0, r0
 8009bdc:	4770      	bx	lr
 8009bde:	2001      	movs	r0, #1
 8009be0:	700a      	strb	r2, [r1, #0]
 8009be2:	e7fb      	b.n	8009bdc <__ascii_wctomb+0x12>

08009be4 <__assert_func>:
 8009be4:	b530      	push	{r4, r5, lr}
 8009be6:	0014      	movs	r4, r2
 8009be8:	001a      	movs	r2, r3
 8009bea:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <__assert_func+0x2c>)
 8009bec:	0005      	movs	r5, r0
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	b085      	sub	sp, #20
 8009bf2:	68d8      	ldr	r0, [r3, #12]
 8009bf4:	4b07      	ldr	r3, [pc, #28]	; (8009c14 <__assert_func+0x30>)
 8009bf6:	2c00      	cmp	r4, #0
 8009bf8:	d101      	bne.n	8009bfe <__assert_func+0x1a>
 8009bfa:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <__assert_func+0x34>)
 8009bfc:	001c      	movs	r4, r3
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	9100      	str	r1, [sp, #0]
 8009c02:	002b      	movs	r3, r5
 8009c04:	4905      	ldr	r1, [pc, #20]	; (8009c1c <__assert_func+0x38>)
 8009c06:	9402      	str	r4, [sp, #8]
 8009c08:	f000 f80a 	bl	8009c20 <fiprintf>
 8009c0c:	f000 fa92 	bl	800a134 <abort>
 8009c10:	20000020 	.word	0x20000020
 8009c14:	0800ad05 	.word	0x0800ad05
 8009c18:	0800ad40 	.word	0x0800ad40
 8009c1c:	0800ad12 	.word	0x0800ad12

08009c20 <fiprintf>:
 8009c20:	b40e      	push	{r1, r2, r3}
 8009c22:	b503      	push	{r0, r1, lr}
 8009c24:	0001      	movs	r1, r0
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	4804      	ldr	r0, [pc, #16]	; (8009c3c <fiprintf+0x1c>)
 8009c2a:	cb04      	ldmia	r3!, {r2}
 8009c2c:	6800      	ldr	r0, [r0, #0]
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	f000 f878 	bl	8009d24 <_vfiprintf_r>
 8009c34:	b002      	add	sp, #8
 8009c36:	bc08      	pop	{r3}
 8009c38:	b003      	add	sp, #12
 8009c3a:	4718      	bx	r3
 8009c3c:	20000020 	.word	0x20000020

08009c40 <memmove>:
 8009c40:	b510      	push	{r4, lr}
 8009c42:	4288      	cmp	r0, r1
 8009c44:	d902      	bls.n	8009c4c <memmove+0xc>
 8009c46:	188b      	adds	r3, r1, r2
 8009c48:	4298      	cmp	r0, r3
 8009c4a:	d303      	bcc.n	8009c54 <memmove+0x14>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	e007      	b.n	8009c60 <memmove+0x20>
 8009c50:	5c8b      	ldrb	r3, [r1, r2]
 8009c52:	5483      	strb	r3, [r0, r2]
 8009c54:	3a01      	subs	r2, #1
 8009c56:	d2fb      	bcs.n	8009c50 <memmove+0x10>
 8009c58:	bd10      	pop	{r4, pc}
 8009c5a:	5ccc      	ldrb	r4, [r1, r3]
 8009c5c:	54c4      	strb	r4, [r0, r3]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d1fa      	bne.n	8009c5a <memmove+0x1a>
 8009c64:	e7f8      	b.n	8009c58 <memmove+0x18>
	...

08009c68 <__malloc_lock>:
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	4802      	ldr	r0, [pc, #8]	; (8009c74 <__malloc_lock+0xc>)
 8009c6c:	f000 fc39 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 8009c70:	bd10      	pop	{r4, pc}
 8009c72:	46c0      	nop			; (mov r8, r8)
 8009c74:	20000c0c 	.word	0x20000c0c

08009c78 <__malloc_unlock>:
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	4802      	ldr	r0, [pc, #8]	; (8009c84 <__malloc_unlock+0xc>)
 8009c7c:	f000 fc32 	bl	800a4e4 <__retarget_lock_release_recursive>
 8009c80:	bd10      	pop	{r4, pc}
 8009c82:	46c0      	nop			; (mov r8, r8)
 8009c84:	20000c0c 	.word	0x20000c0c

08009c88 <_realloc_r>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	0007      	movs	r7, r0
 8009c8c:	000d      	movs	r5, r1
 8009c8e:	0016      	movs	r6, r2
 8009c90:	2900      	cmp	r1, #0
 8009c92:	d105      	bne.n	8009ca0 <_realloc_r+0x18>
 8009c94:	0011      	movs	r1, r2
 8009c96:	f7ff fdaf 	bl	80097f8 <_malloc_r>
 8009c9a:	0004      	movs	r4, r0
 8009c9c:	0020      	movs	r0, r4
 8009c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	d103      	bne.n	8009cac <_realloc_r+0x24>
 8009ca4:	f7ff fd5e 	bl	8009764 <_free_r>
 8009ca8:	0034      	movs	r4, r6
 8009caa:	e7f7      	b.n	8009c9c <_realloc_r+0x14>
 8009cac:	f000 fc88 	bl	800a5c0 <_malloc_usable_size_r>
 8009cb0:	002c      	movs	r4, r5
 8009cb2:	42b0      	cmp	r0, r6
 8009cb4:	d2f2      	bcs.n	8009c9c <_realloc_r+0x14>
 8009cb6:	0031      	movs	r1, r6
 8009cb8:	0038      	movs	r0, r7
 8009cba:	f7ff fd9d 	bl	80097f8 <_malloc_r>
 8009cbe:	1e04      	subs	r4, r0, #0
 8009cc0:	d0ec      	beq.n	8009c9c <_realloc_r+0x14>
 8009cc2:	0029      	movs	r1, r5
 8009cc4:	0032      	movs	r2, r6
 8009cc6:	f7ff f86c 	bl	8008da2 <memcpy>
 8009cca:	0029      	movs	r1, r5
 8009ccc:	0038      	movs	r0, r7
 8009cce:	f7ff fd49 	bl	8009764 <_free_r>
 8009cd2:	e7e3      	b.n	8009c9c <_realloc_r+0x14>

08009cd4 <__sfputc_r>:
 8009cd4:	6893      	ldr	r3, [r2, #8]
 8009cd6:	b510      	push	{r4, lr}
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	6093      	str	r3, [r2, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	da04      	bge.n	8009cea <__sfputc_r+0x16>
 8009ce0:	6994      	ldr	r4, [r2, #24]
 8009ce2:	42a3      	cmp	r3, r4
 8009ce4:	db07      	blt.n	8009cf6 <__sfputc_r+0x22>
 8009ce6:	290a      	cmp	r1, #10
 8009ce8:	d005      	beq.n	8009cf6 <__sfputc_r+0x22>
 8009cea:	6813      	ldr	r3, [r2, #0]
 8009cec:	1c58      	adds	r0, r3, #1
 8009cee:	6010      	str	r0, [r2, #0]
 8009cf0:	7019      	strb	r1, [r3, #0]
 8009cf2:	0008      	movs	r0, r1
 8009cf4:	bd10      	pop	{r4, pc}
 8009cf6:	f000 f94f 	bl	8009f98 <__swbuf_r>
 8009cfa:	0001      	movs	r1, r0
 8009cfc:	e7f9      	b.n	8009cf2 <__sfputc_r+0x1e>

08009cfe <__sfputs_r>:
 8009cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d00:	0006      	movs	r6, r0
 8009d02:	000f      	movs	r7, r1
 8009d04:	0014      	movs	r4, r2
 8009d06:	18d5      	adds	r5, r2, r3
 8009d08:	42ac      	cmp	r4, r5
 8009d0a:	d101      	bne.n	8009d10 <__sfputs_r+0x12>
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	e007      	b.n	8009d20 <__sfputs_r+0x22>
 8009d10:	7821      	ldrb	r1, [r4, #0]
 8009d12:	003a      	movs	r2, r7
 8009d14:	0030      	movs	r0, r6
 8009d16:	f7ff ffdd 	bl	8009cd4 <__sfputc_r>
 8009d1a:	3401      	adds	r4, #1
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d1f3      	bne.n	8009d08 <__sfputs_r+0xa>
 8009d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d24 <_vfiprintf_r>:
 8009d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d26:	b0a1      	sub	sp, #132	; 0x84
 8009d28:	0006      	movs	r6, r0
 8009d2a:	000c      	movs	r4, r1
 8009d2c:	001f      	movs	r7, r3
 8009d2e:	9203      	str	r2, [sp, #12]
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d004      	beq.n	8009d3e <_vfiprintf_r+0x1a>
 8009d34:	6983      	ldr	r3, [r0, #24]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <_vfiprintf_r+0x1a>
 8009d3a:	f000 fb31 	bl	800a3a0 <__sinit>
 8009d3e:	4b8e      	ldr	r3, [pc, #568]	; (8009f78 <_vfiprintf_r+0x254>)
 8009d40:	429c      	cmp	r4, r3
 8009d42:	d11c      	bne.n	8009d7e <_vfiprintf_r+0x5a>
 8009d44:	6874      	ldr	r4, [r6, #4]
 8009d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d48:	07db      	lsls	r3, r3, #31
 8009d4a:	d405      	bmi.n	8009d58 <_vfiprintf_r+0x34>
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	059b      	lsls	r3, r3, #22
 8009d50:	d402      	bmi.n	8009d58 <_vfiprintf_r+0x34>
 8009d52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d54:	f000 fbc5 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	071b      	lsls	r3, r3, #28
 8009d5c:	d502      	bpl.n	8009d64 <_vfiprintf_r+0x40>
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d11d      	bne.n	8009da0 <_vfiprintf_r+0x7c>
 8009d64:	0021      	movs	r1, r4
 8009d66:	0030      	movs	r0, r6
 8009d68:	f000 f96c 	bl	800a044 <__swsetup_r>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d017      	beq.n	8009da0 <_vfiprintf_r+0x7c>
 8009d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d72:	07db      	lsls	r3, r3, #31
 8009d74:	d50d      	bpl.n	8009d92 <_vfiprintf_r+0x6e>
 8009d76:	2001      	movs	r0, #1
 8009d78:	4240      	negs	r0, r0
 8009d7a:	b021      	add	sp, #132	; 0x84
 8009d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d7e:	4b7f      	ldr	r3, [pc, #508]	; (8009f7c <_vfiprintf_r+0x258>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	d101      	bne.n	8009d88 <_vfiprintf_r+0x64>
 8009d84:	68b4      	ldr	r4, [r6, #8]
 8009d86:	e7de      	b.n	8009d46 <_vfiprintf_r+0x22>
 8009d88:	4b7d      	ldr	r3, [pc, #500]	; (8009f80 <_vfiprintf_r+0x25c>)
 8009d8a:	429c      	cmp	r4, r3
 8009d8c:	d1db      	bne.n	8009d46 <_vfiprintf_r+0x22>
 8009d8e:	68f4      	ldr	r4, [r6, #12]
 8009d90:	e7d9      	b.n	8009d46 <_vfiprintf_r+0x22>
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	059b      	lsls	r3, r3, #22
 8009d96:	d4ee      	bmi.n	8009d76 <_vfiprintf_r+0x52>
 8009d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d9a:	f000 fba3 	bl	800a4e4 <__retarget_lock_release_recursive>
 8009d9e:	e7ea      	b.n	8009d76 <_vfiprintf_r+0x52>
 8009da0:	2300      	movs	r3, #0
 8009da2:	ad08      	add	r5, sp, #32
 8009da4:	616b      	str	r3, [r5, #20]
 8009da6:	3320      	adds	r3, #32
 8009da8:	766b      	strb	r3, [r5, #25]
 8009daa:	3310      	adds	r3, #16
 8009dac:	76ab      	strb	r3, [r5, #26]
 8009dae:	9707      	str	r7, [sp, #28]
 8009db0:	9f03      	ldr	r7, [sp, #12]
 8009db2:	783b      	ldrb	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <_vfiprintf_r+0x98>
 8009db8:	2b25      	cmp	r3, #37	; 0x25
 8009dba:	d14e      	bne.n	8009e5a <_vfiprintf_r+0x136>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	1afb      	subs	r3, r7, r3
 8009dc0:	9305      	str	r3, [sp, #20]
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	429f      	cmp	r7, r3
 8009dc6:	d00d      	beq.n	8009de4 <_vfiprintf_r+0xc0>
 8009dc8:	9b05      	ldr	r3, [sp, #20]
 8009dca:	0021      	movs	r1, r4
 8009dcc:	0030      	movs	r0, r6
 8009dce:	9a03      	ldr	r2, [sp, #12]
 8009dd0:	f7ff ff95 	bl	8009cfe <__sfputs_r>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	d100      	bne.n	8009dda <_vfiprintf_r+0xb6>
 8009dd8:	e0b5      	b.n	8009f46 <_vfiprintf_r+0x222>
 8009dda:	696a      	ldr	r2, [r5, #20]
 8009ddc:	9b05      	ldr	r3, [sp, #20]
 8009dde:	4694      	mov	ip, r2
 8009de0:	4463      	add	r3, ip
 8009de2:	616b      	str	r3, [r5, #20]
 8009de4:	783b      	ldrb	r3, [r7, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d100      	bne.n	8009dec <_vfiprintf_r+0xc8>
 8009dea:	e0ac      	b.n	8009f46 <_vfiprintf_r+0x222>
 8009dec:	2201      	movs	r2, #1
 8009dee:	1c7b      	adds	r3, r7, #1
 8009df0:	9303      	str	r3, [sp, #12]
 8009df2:	2300      	movs	r3, #0
 8009df4:	4252      	negs	r2, r2
 8009df6:	606a      	str	r2, [r5, #4]
 8009df8:	a904      	add	r1, sp, #16
 8009dfa:	3254      	adds	r2, #84	; 0x54
 8009dfc:	1852      	adds	r2, r2, r1
 8009dfe:	602b      	str	r3, [r5, #0]
 8009e00:	60eb      	str	r3, [r5, #12]
 8009e02:	60ab      	str	r3, [r5, #8]
 8009e04:	7013      	strb	r3, [r2, #0]
 8009e06:	65ab      	str	r3, [r5, #88]	; 0x58
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	2205      	movs	r2, #5
 8009e0c:	7819      	ldrb	r1, [r3, #0]
 8009e0e:	485d      	ldr	r0, [pc, #372]	; (8009f84 <_vfiprintf_r+0x260>)
 8009e10:	f7fe ffbc 	bl	8008d8c <memchr>
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	1c5f      	adds	r7, r3, #1
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d120      	bne.n	8009e5e <_vfiprintf_r+0x13a>
 8009e1c:	682a      	ldr	r2, [r5, #0]
 8009e1e:	06d3      	lsls	r3, r2, #27
 8009e20:	d504      	bpl.n	8009e2c <_vfiprintf_r+0x108>
 8009e22:	2353      	movs	r3, #83	; 0x53
 8009e24:	a904      	add	r1, sp, #16
 8009e26:	185b      	adds	r3, r3, r1
 8009e28:	2120      	movs	r1, #32
 8009e2a:	7019      	strb	r1, [r3, #0]
 8009e2c:	0713      	lsls	r3, r2, #28
 8009e2e:	d504      	bpl.n	8009e3a <_vfiprintf_r+0x116>
 8009e30:	2353      	movs	r3, #83	; 0x53
 8009e32:	a904      	add	r1, sp, #16
 8009e34:	185b      	adds	r3, r3, r1
 8009e36:	212b      	movs	r1, #43	; 0x2b
 8009e38:	7019      	strb	r1, [r3, #0]
 8009e3a:	9b03      	ldr	r3, [sp, #12]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e40:	d016      	beq.n	8009e70 <_vfiprintf_r+0x14c>
 8009e42:	2100      	movs	r1, #0
 8009e44:	68eb      	ldr	r3, [r5, #12]
 8009e46:	9f03      	ldr	r7, [sp, #12]
 8009e48:	783a      	ldrb	r2, [r7, #0]
 8009e4a:	1c78      	adds	r0, r7, #1
 8009e4c:	3a30      	subs	r2, #48	; 0x30
 8009e4e:	4684      	mov	ip, r0
 8009e50:	2a09      	cmp	r2, #9
 8009e52:	d94f      	bls.n	8009ef4 <_vfiprintf_r+0x1d0>
 8009e54:	2900      	cmp	r1, #0
 8009e56:	d111      	bne.n	8009e7c <_vfiprintf_r+0x158>
 8009e58:	e017      	b.n	8009e8a <_vfiprintf_r+0x166>
 8009e5a:	3701      	adds	r7, #1
 8009e5c:	e7a9      	b.n	8009db2 <_vfiprintf_r+0x8e>
 8009e5e:	4b49      	ldr	r3, [pc, #292]	; (8009f84 <_vfiprintf_r+0x260>)
 8009e60:	682a      	ldr	r2, [r5, #0]
 8009e62:	1ac0      	subs	r0, r0, r3
 8009e64:	2301      	movs	r3, #1
 8009e66:	4083      	lsls	r3, r0
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	9703      	str	r7, [sp, #12]
 8009e6e:	e7cb      	b.n	8009e08 <_vfiprintf_r+0xe4>
 8009e70:	9b07      	ldr	r3, [sp, #28]
 8009e72:	1d19      	adds	r1, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	9107      	str	r1, [sp, #28]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	db01      	blt.n	8009e80 <_vfiprintf_r+0x15c>
 8009e7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e7e:	e004      	b.n	8009e8a <_vfiprintf_r+0x166>
 8009e80:	425b      	negs	r3, r3
 8009e82:	60eb      	str	r3, [r5, #12]
 8009e84:	2302      	movs	r3, #2
 8009e86:	4313      	orrs	r3, r2
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	783b      	ldrb	r3, [r7, #0]
 8009e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e8e:	d10a      	bne.n	8009ea6 <_vfiprintf_r+0x182>
 8009e90:	787b      	ldrb	r3, [r7, #1]
 8009e92:	2b2a      	cmp	r3, #42	; 0x2a
 8009e94:	d137      	bne.n	8009f06 <_vfiprintf_r+0x1e2>
 8009e96:	9b07      	ldr	r3, [sp, #28]
 8009e98:	3702      	adds	r7, #2
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	9207      	str	r2, [sp, #28]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	db2d      	blt.n	8009f00 <_vfiprintf_r+0x1dc>
 8009ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea6:	2203      	movs	r2, #3
 8009ea8:	7839      	ldrb	r1, [r7, #0]
 8009eaa:	4837      	ldr	r0, [pc, #220]	; (8009f88 <_vfiprintf_r+0x264>)
 8009eac:	f7fe ff6e 	bl	8008d8c <memchr>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d007      	beq.n	8009ec4 <_vfiprintf_r+0x1a0>
 8009eb4:	4b34      	ldr	r3, [pc, #208]	; (8009f88 <_vfiprintf_r+0x264>)
 8009eb6:	682a      	ldr	r2, [r5, #0]
 8009eb8:	1ac0      	subs	r0, r0, r3
 8009eba:	2340      	movs	r3, #64	; 0x40
 8009ebc:	4083      	lsls	r3, r0
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	3701      	adds	r7, #1
 8009ec2:	602b      	str	r3, [r5, #0]
 8009ec4:	7839      	ldrb	r1, [r7, #0]
 8009ec6:	1c7b      	adds	r3, r7, #1
 8009ec8:	2206      	movs	r2, #6
 8009eca:	4830      	ldr	r0, [pc, #192]	; (8009f8c <_vfiprintf_r+0x268>)
 8009ecc:	9303      	str	r3, [sp, #12]
 8009ece:	7629      	strb	r1, [r5, #24]
 8009ed0:	f7fe ff5c 	bl	8008d8c <memchr>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d045      	beq.n	8009f64 <_vfiprintf_r+0x240>
 8009ed8:	4b2d      	ldr	r3, [pc, #180]	; (8009f90 <_vfiprintf_r+0x26c>)
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d127      	bne.n	8009f2e <_vfiprintf_r+0x20a>
 8009ede:	2207      	movs	r2, #7
 8009ee0:	9b07      	ldr	r3, [sp, #28]
 8009ee2:	3307      	adds	r3, #7
 8009ee4:	4393      	bics	r3, r2
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	9307      	str	r3, [sp, #28]
 8009eea:	696b      	ldr	r3, [r5, #20]
 8009eec:	9a04      	ldr	r2, [sp, #16]
 8009eee:	189b      	adds	r3, r3, r2
 8009ef0:	616b      	str	r3, [r5, #20]
 8009ef2:	e75d      	b.n	8009db0 <_vfiprintf_r+0x8c>
 8009ef4:	210a      	movs	r1, #10
 8009ef6:	434b      	muls	r3, r1
 8009ef8:	4667      	mov	r7, ip
 8009efa:	189b      	adds	r3, r3, r2
 8009efc:	3909      	subs	r1, #9
 8009efe:	e7a3      	b.n	8009e48 <_vfiprintf_r+0x124>
 8009f00:	2301      	movs	r3, #1
 8009f02:	425b      	negs	r3, r3
 8009f04:	e7ce      	b.n	8009ea4 <_vfiprintf_r+0x180>
 8009f06:	2300      	movs	r3, #0
 8009f08:	001a      	movs	r2, r3
 8009f0a:	3701      	adds	r7, #1
 8009f0c:	606b      	str	r3, [r5, #4]
 8009f0e:	7839      	ldrb	r1, [r7, #0]
 8009f10:	1c78      	adds	r0, r7, #1
 8009f12:	3930      	subs	r1, #48	; 0x30
 8009f14:	4684      	mov	ip, r0
 8009f16:	2909      	cmp	r1, #9
 8009f18:	d903      	bls.n	8009f22 <_vfiprintf_r+0x1fe>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0c3      	beq.n	8009ea6 <_vfiprintf_r+0x182>
 8009f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f20:	e7c1      	b.n	8009ea6 <_vfiprintf_r+0x182>
 8009f22:	230a      	movs	r3, #10
 8009f24:	435a      	muls	r2, r3
 8009f26:	4667      	mov	r7, ip
 8009f28:	1852      	adds	r2, r2, r1
 8009f2a:	3b09      	subs	r3, #9
 8009f2c:	e7ef      	b.n	8009f0e <_vfiprintf_r+0x1ea>
 8009f2e:	ab07      	add	r3, sp, #28
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	0022      	movs	r2, r4
 8009f34:	0029      	movs	r1, r5
 8009f36:	0030      	movs	r0, r6
 8009f38:	4b16      	ldr	r3, [pc, #88]	; (8009f94 <_vfiprintf_r+0x270>)
 8009f3a:	f7fc f819 	bl	8005f70 <_printf_float>
 8009f3e:	9004      	str	r0, [sp, #16]
 8009f40:	9b04      	ldr	r3, [sp, #16]
 8009f42:	3301      	adds	r3, #1
 8009f44:	d1d1      	bne.n	8009eea <_vfiprintf_r+0x1c6>
 8009f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f48:	07db      	lsls	r3, r3, #31
 8009f4a:	d405      	bmi.n	8009f58 <_vfiprintf_r+0x234>
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	059b      	lsls	r3, r3, #22
 8009f50:	d402      	bmi.n	8009f58 <_vfiprintf_r+0x234>
 8009f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f54:	f000 fac6 	bl	800a4e4 <__retarget_lock_release_recursive>
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	065b      	lsls	r3, r3, #25
 8009f5c:	d500      	bpl.n	8009f60 <_vfiprintf_r+0x23c>
 8009f5e:	e70a      	b.n	8009d76 <_vfiprintf_r+0x52>
 8009f60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f62:	e70a      	b.n	8009d7a <_vfiprintf_r+0x56>
 8009f64:	ab07      	add	r3, sp, #28
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	0022      	movs	r2, r4
 8009f6a:	0029      	movs	r1, r5
 8009f6c:	0030      	movs	r0, r6
 8009f6e:	4b09      	ldr	r3, [pc, #36]	; (8009f94 <_vfiprintf_r+0x270>)
 8009f70:	f7fc fabc 	bl	80064ec <_printf_i>
 8009f74:	e7e3      	b.n	8009f3e <_vfiprintf_r+0x21a>
 8009f76:	46c0      	nop			; (mov r8, r8)
 8009f78:	0800ad64 	.word	0x0800ad64
 8009f7c:	0800ad84 	.word	0x0800ad84
 8009f80:	0800ad44 	.word	0x0800ad44
 8009f84:	0800acf4 	.word	0x0800acf4
 8009f88:	0800acfa 	.word	0x0800acfa
 8009f8c:	0800acfe 	.word	0x0800acfe
 8009f90:	08005f71 	.word	0x08005f71
 8009f94:	08009cff 	.word	0x08009cff

08009f98 <__swbuf_r>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	0005      	movs	r5, r0
 8009f9c:	000e      	movs	r6, r1
 8009f9e:	0014      	movs	r4, r2
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d004      	beq.n	8009fae <__swbuf_r+0x16>
 8009fa4:	6983      	ldr	r3, [r0, #24]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <__swbuf_r+0x16>
 8009faa:	f000 f9f9 	bl	800a3a0 <__sinit>
 8009fae:	4b22      	ldr	r3, [pc, #136]	; (800a038 <__swbuf_r+0xa0>)
 8009fb0:	429c      	cmp	r4, r3
 8009fb2:	d12e      	bne.n	800a012 <__swbuf_r+0x7a>
 8009fb4:	686c      	ldr	r4, [r5, #4]
 8009fb6:	69a3      	ldr	r3, [r4, #24]
 8009fb8:	60a3      	str	r3, [r4, #8]
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	071b      	lsls	r3, r3, #28
 8009fbe:	d532      	bpl.n	800a026 <__swbuf_r+0x8e>
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d02f      	beq.n	800a026 <__swbuf_r+0x8e>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	6922      	ldr	r2, [r4, #16]
 8009fca:	b2f7      	uxtb	r7, r6
 8009fcc:	1a98      	subs	r0, r3, r2
 8009fce:	6963      	ldr	r3, [r4, #20]
 8009fd0:	b2f6      	uxtb	r6, r6
 8009fd2:	4283      	cmp	r3, r0
 8009fd4:	dc05      	bgt.n	8009fe2 <__swbuf_r+0x4a>
 8009fd6:	0021      	movs	r1, r4
 8009fd8:	0028      	movs	r0, r5
 8009fda:	f000 f93f 	bl	800a25c <_fflush_r>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d127      	bne.n	800a032 <__swbuf_r+0x9a>
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	6022      	str	r2, [r4, #0]
 8009ff0:	701f      	strb	r7, [r3, #0]
 8009ff2:	6963      	ldr	r3, [r4, #20]
 8009ff4:	4283      	cmp	r3, r0
 8009ff6:	d004      	beq.n	800a002 <__swbuf_r+0x6a>
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	07db      	lsls	r3, r3, #31
 8009ffc:	d507      	bpl.n	800a00e <__swbuf_r+0x76>
 8009ffe:	2e0a      	cmp	r6, #10
 800a000:	d105      	bne.n	800a00e <__swbuf_r+0x76>
 800a002:	0021      	movs	r1, r4
 800a004:	0028      	movs	r0, r5
 800a006:	f000 f929 	bl	800a25c <_fflush_r>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d111      	bne.n	800a032 <__swbuf_r+0x9a>
 800a00e:	0030      	movs	r0, r6
 800a010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a012:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <__swbuf_r+0xa4>)
 800a014:	429c      	cmp	r4, r3
 800a016:	d101      	bne.n	800a01c <__swbuf_r+0x84>
 800a018:	68ac      	ldr	r4, [r5, #8]
 800a01a:	e7cc      	b.n	8009fb6 <__swbuf_r+0x1e>
 800a01c:	4b08      	ldr	r3, [pc, #32]	; (800a040 <__swbuf_r+0xa8>)
 800a01e:	429c      	cmp	r4, r3
 800a020:	d1c9      	bne.n	8009fb6 <__swbuf_r+0x1e>
 800a022:	68ec      	ldr	r4, [r5, #12]
 800a024:	e7c7      	b.n	8009fb6 <__swbuf_r+0x1e>
 800a026:	0021      	movs	r1, r4
 800a028:	0028      	movs	r0, r5
 800a02a:	f000 f80b 	bl	800a044 <__swsetup_r>
 800a02e:	2800      	cmp	r0, #0
 800a030:	d0c9      	beq.n	8009fc6 <__swbuf_r+0x2e>
 800a032:	2601      	movs	r6, #1
 800a034:	4276      	negs	r6, r6
 800a036:	e7ea      	b.n	800a00e <__swbuf_r+0x76>
 800a038:	0800ad64 	.word	0x0800ad64
 800a03c:	0800ad84 	.word	0x0800ad84
 800a040:	0800ad44 	.word	0x0800ad44

0800a044 <__swsetup_r>:
 800a044:	4b37      	ldr	r3, [pc, #220]	; (800a124 <__swsetup_r+0xe0>)
 800a046:	b570      	push	{r4, r5, r6, lr}
 800a048:	681d      	ldr	r5, [r3, #0]
 800a04a:	0006      	movs	r6, r0
 800a04c:	000c      	movs	r4, r1
 800a04e:	2d00      	cmp	r5, #0
 800a050:	d005      	beq.n	800a05e <__swsetup_r+0x1a>
 800a052:	69ab      	ldr	r3, [r5, #24]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <__swsetup_r+0x1a>
 800a058:	0028      	movs	r0, r5
 800a05a:	f000 f9a1 	bl	800a3a0 <__sinit>
 800a05e:	4b32      	ldr	r3, [pc, #200]	; (800a128 <__swsetup_r+0xe4>)
 800a060:	429c      	cmp	r4, r3
 800a062:	d10f      	bne.n	800a084 <__swsetup_r+0x40>
 800a064:	686c      	ldr	r4, [r5, #4]
 800a066:	230c      	movs	r3, #12
 800a068:	5ee2      	ldrsh	r2, [r4, r3]
 800a06a:	b293      	uxth	r3, r2
 800a06c:	0711      	lsls	r1, r2, #28
 800a06e:	d42d      	bmi.n	800a0cc <__swsetup_r+0x88>
 800a070:	06d9      	lsls	r1, r3, #27
 800a072:	d411      	bmi.n	800a098 <__swsetup_r+0x54>
 800a074:	2309      	movs	r3, #9
 800a076:	2001      	movs	r0, #1
 800a078:	6033      	str	r3, [r6, #0]
 800a07a:	3337      	adds	r3, #55	; 0x37
 800a07c:	4313      	orrs	r3, r2
 800a07e:	81a3      	strh	r3, [r4, #12]
 800a080:	4240      	negs	r0, r0
 800a082:	bd70      	pop	{r4, r5, r6, pc}
 800a084:	4b29      	ldr	r3, [pc, #164]	; (800a12c <__swsetup_r+0xe8>)
 800a086:	429c      	cmp	r4, r3
 800a088:	d101      	bne.n	800a08e <__swsetup_r+0x4a>
 800a08a:	68ac      	ldr	r4, [r5, #8]
 800a08c:	e7eb      	b.n	800a066 <__swsetup_r+0x22>
 800a08e:	4b28      	ldr	r3, [pc, #160]	; (800a130 <__swsetup_r+0xec>)
 800a090:	429c      	cmp	r4, r3
 800a092:	d1e8      	bne.n	800a066 <__swsetup_r+0x22>
 800a094:	68ec      	ldr	r4, [r5, #12]
 800a096:	e7e6      	b.n	800a066 <__swsetup_r+0x22>
 800a098:	075b      	lsls	r3, r3, #29
 800a09a:	d513      	bpl.n	800a0c4 <__swsetup_r+0x80>
 800a09c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a09e:	2900      	cmp	r1, #0
 800a0a0:	d008      	beq.n	800a0b4 <__swsetup_r+0x70>
 800a0a2:	0023      	movs	r3, r4
 800a0a4:	3344      	adds	r3, #68	; 0x44
 800a0a6:	4299      	cmp	r1, r3
 800a0a8:	d002      	beq.n	800a0b0 <__swsetup_r+0x6c>
 800a0aa:	0030      	movs	r0, r6
 800a0ac:	f7ff fb5a 	bl	8009764 <_free_r>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6363      	str	r3, [r4, #52]	; 0x34
 800a0b4:	2224      	movs	r2, #36	; 0x24
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	4393      	bics	r3, r2
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	6063      	str	r3, [r4, #4]
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	89a2      	ldrh	r2, [r4, #12]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	81a3      	strh	r3, [r4, #12]
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10b      	bne.n	800a0ea <__swsetup_r+0xa6>
 800a0d2:	21a0      	movs	r1, #160	; 0xa0
 800a0d4:	2280      	movs	r2, #128	; 0x80
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	0089      	lsls	r1, r1, #2
 800a0da:	0092      	lsls	r2, r2, #2
 800a0dc:	400b      	ands	r3, r1
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d003      	beq.n	800a0ea <__swsetup_r+0xa6>
 800a0e2:	0021      	movs	r1, r4
 800a0e4:	0030      	movs	r0, r6
 800a0e6:	f000 fa27 	bl	800a538 <__smakebuf_r>
 800a0ea:	220c      	movs	r2, #12
 800a0ec:	5ea3      	ldrsh	r3, [r4, r2]
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	001a      	movs	r2, r3
 800a0f2:	b299      	uxth	r1, r3
 800a0f4:	4002      	ands	r2, r0
 800a0f6:	4203      	tst	r3, r0
 800a0f8:	d00f      	beq.n	800a11a <__swsetup_r+0xd6>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	60a2      	str	r2, [r4, #8]
 800a0fe:	6962      	ldr	r2, [r4, #20]
 800a100:	4252      	negs	r2, r2
 800a102:	61a2      	str	r2, [r4, #24]
 800a104:	2000      	movs	r0, #0
 800a106:	6922      	ldr	r2, [r4, #16]
 800a108:	4282      	cmp	r2, r0
 800a10a:	d1ba      	bne.n	800a082 <__swsetup_r+0x3e>
 800a10c:	060a      	lsls	r2, r1, #24
 800a10e:	d5b8      	bpl.n	800a082 <__swsetup_r+0x3e>
 800a110:	2240      	movs	r2, #64	; 0x40
 800a112:	4313      	orrs	r3, r2
 800a114:	81a3      	strh	r3, [r4, #12]
 800a116:	3801      	subs	r0, #1
 800a118:	e7b3      	b.n	800a082 <__swsetup_r+0x3e>
 800a11a:	0788      	lsls	r0, r1, #30
 800a11c:	d400      	bmi.n	800a120 <__swsetup_r+0xdc>
 800a11e:	6962      	ldr	r2, [r4, #20]
 800a120:	60a2      	str	r2, [r4, #8]
 800a122:	e7ef      	b.n	800a104 <__swsetup_r+0xc0>
 800a124:	20000020 	.word	0x20000020
 800a128:	0800ad64 	.word	0x0800ad64
 800a12c:	0800ad84 	.word	0x0800ad84
 800a130:	0800ad44 	.word	0x0800ad44

0800a134 <abort>:
 800a134:	2006      	movs	r0, #6
 800a136:	b510      	push	{r4, lr}
 800a138:	f000 fa74 	bl	800a624 <raise>
 800a13c:	2001      	movs	r0, #1
 800a13e:	f7f8 fe85 	bl	8002e4c <_exit>
	...

0800a144 <__sflush_r>:
 800a144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a146:	898b      	ldrh	r3, [r1, #12]
 800a148:	0005      	movs	r5, r0
 800a14a:	000c      	movs	r4, r1
 800a14c:	071a      	lsls	r2, r3, #28
 800a14e:	d45f      	bmi.n	800a210 <__sflush_r+0xcc>
 800a150:	684a      	ldr	r2, [r1, #4]
 800a152:	2a00      	cmp	r2, #0
 800a154:	dc04      	bgt.n	800a160 <__sflush_r+0x1c>
 800a156:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a158:	2a00      	cmp	r2, #0
 800a15a:	dc01      	bgt.n	800a160 <__sflush_r+0x1c>
 800a15c:	2000      	movs	r0, #0
 800a15e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a160:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a162:	2f00      	cmp	r7, #0
 800a164:	d0fa      	beq.n	800a15c <__sflush_r+0x18>
 800a166:	2200      	movs	r2, #0
 800a168:	2180      	movs	r1, #128	; 0x80
 800a16a:	682e      	ldr	r6, [r5, #0]
 800a16c:	602a      	str	r2, [r5, #0]
 800a16e:	001a      	movs	r2, r3
 800a170:	0149      	lsls	r1, r1, #5
 800a172:	400a      	ands	r2, r1
 800a174:	420b      	tst	r3, r1
 800a176:	d034      	beq.n	800a1e2 <__sflush_r+0x9e>
 800a178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	075b      	lsls	r3, r3, #29
 800a17e:	d506      	bpl.n	800a18e <__sflush_r+0x4a>
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	1ac0      	subs	r0, r0, r3
 800a184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <__sflush_r+0x4a>
 800a18a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a18c:	1ac0      	subs	r0, r0, r3
 800a18e:	0002      	movs	r2, r0
 800a190:	6a21      	ldr	r1, [r4, #32]
 800a192:	2300      	movs	r3, #0
 800a194:	0028      	movs	r0, r5
 800a196:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a198:	47b8      	blx	r7
 800a19a:	89a1      	ldrh	r1, [r4, #12]
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d106      	bne.n	800a1ae <__sflush_r+0x6a>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	2b1d      	cmp	r3, #29
 800a1a4:	d831      	bhi.n	800a20a <__sflush_r+0xc6>
 800a1a6:	4a2c      	ldr	r2, [pc, #176]	; (800a258 <__sflush_r+0x114>)
 800a1a8:	40da      	lsrs	r2, r3
 800a1aa:	07d3      	lsls	r3, r2, #31
 800a1ac:	d52d      	bpl.n	800a20a <__sflush_r+0xc6>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6063      	str	r3, [r4, #4]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	04cb      	lsls	r3, r1, #19
 800a1b8:	d505      	bpl.n	800a1c6 <__sflush_r+0x82>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	d102      	bne.n	800a1c4 <__sflush_r+0x80>
 800a1be:	682b      	ldr	r3, [r5, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d100      	bne.n	800a1c6 <__sflush_r+0x82>
 800a1c4:	6560      	str	r0, [r4, #84]	; 0x54
 800a1c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1c8:	602e      	str	r6, [r5, #0]
 800a1ca:	2900      	cmp	r1, #0
 800a1cc:	d0c6      	beq.n	800a15c <__sflush_r+0x18>
 800a1ce:	0023      	movs	r3, r4
 800a1d0:	3344      	adds	r3, #68	; 0x44
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	d002      	beq.n	800a1dc <__sflush_r+0x98>
 800a1d6:	0028      	movs	r0, r5
 800a1d8:	f7ff fac4 	bl	8009764 <_free_r>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	6360      	str	r0, [r4, #52]	; 0x34
 800a1e0:	e7bd      	b.n	800a15e <__sflush_r+0x1a>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	0028      	movs	r0, r5
 800a1e6:	6a21      	ldr	r1, [r4, #32]
 800a1e8:	47b8      	blx	r7
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	d1c5      	bne.n	800a17a <__sflush_r+0x36>
 800a1ee:	682b      	ldr	r3, [r5, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0c2      	beq.n	800a17a <__sflush_r+0x36>
 800a1f4:	2b1d      	cmp	r3, #29
 800a1f6:	d001      	beq.n	800a1fc <__sflush_r+0xb8>
 800a1f8:	2b16      	cmp	r3, #22
 800a1fa:	d101      	bne.n	800a200 <__sflush_r+0xbc>
 800a1fc:	602e      	str	r6, [r5, #0]
 800a1fe:	e7ad      	b.n	800a15c <__sflush_r+0x18>
 800a200:	2340      	movs	r3, #64	; 0x40
 800a202:	89a2      	ldrh	r2, [r4, #12]
 800a204:	4313      	orrs	r3, r2
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	e7a9      	b.n	800a15e <__sflush_r+0x1a>
 800a20a:	2340      	movs	r3, #64	; 0x40
 800a20c:	430b      	orrs	r3, r1
 800a20e:	e7fa      	b.n	800a206 <__sflush_r+0xc2>
 800a210:	690f      	ldr	r7, [r1, #16]
 800a212:	2f00      	cmp	r7, #0
 800a214:	d0a2      	beq.n	800a15c <__sflush_r+0x18>
 800a216:	680a      	ldr	r2, [r1, #0]
 800a218:	600f      	str	r7, [r1, #0]
 800a21a:	1bd2      	subs	r2, r2, r7
 800a21c:	9201      	str	r2, [sp, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	079b      	lsls	r3, r3, #30
 800a222:	d100      	bne.n	800a226 <__sflush_r+0xe2>
 800a224:	694a      	ldr	r2, [r1, #20]
 800a226:	60a2      	str	r2, [r4, #8]
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	dc00      	bgt.n	800a230 <__sflush_r+0xec>
 800a22e:	e795      	b.n	800a15c <__sflush_r+0x18>
 800a230:	003a      	movs	r2, r7
 800a232:	0028      	movs	r0, r5
 800a234:	9b01      	ldr	r3, [sp, #4]
 800a236:	6a21      	ldr	r1, [r4, #32]
 800a238:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a23a:	47b0      	blx	r6
 800a23c:	2800      	cmp	r0, #0
 800a23e:	dc06      	bgt.n	800a24e <__sflush_r+0x10a>
 800a240:	2340      	movs	r3, #64	; 0x40
 800a242:	2001      	movs	r0, #1
 800a244:	89a2      	ldrh	r2, [r4, #12]
 800a246:	4240      	negs	r0, r0
 800a248:	4313      	orrs	r3, r2
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	e787      	b.n	800a15e <__sflush_r+0x1a>
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	183f      	adds	r7, r7, r0
 800a252:	1a1b      	subs	r3, r3, r0
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	e7e7      	b.n	800a228 <__sflush_r+0xe4>
 800a258:	20400001 	.word	0x20400001

0800a25c <_fflush_r>:
 800a25c:	690b      	ldr	r3, [r1, #16]
 800a25e:	b570      	push	{r4, r5, r6, lr}
 800a260:	0005      	movs	r5, r0
 800a262:	000c      	movs	r4, r1
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <_fflush_r+0x12>
 800a268:	2500      	movs	r5, #0
 800a26a:	0028      	movs	r0, r5
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
 800a26e:	2800      	cmp	r0, #0
 800a270:	d004      	beq.n	800a27c <_fflush_r+0x20>
 800a272:	6983      	ldr	r3, [r0, #24]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <_fflush_r+0x20>
 800a278:	f000 f892 	bl	800a3a0 <__sinit>
 800a27c:	4b14      	ldr	r3, [pc, #80]	; (800a2d0 <_fflush_r+0x74>)
 800a27e:	429c      	cmp	r4, r3
 800a280:	d11b      	bne.n	800a2ba <_fflush_r+0x5e>
 800a282:	686c      	ldr	r4, [r5, #4]
 800a284:	220c      	movs	r2, #12
 800a286:	5ea3      	ldrsh	r3, [r4, r2]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0ed      	beq.n	800a268 <_fflush_r+0xc>
 800a28c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a28e:	07d2      	lsls	r2, r2, #31
 800a290:	d404      	bmi.n	800a29c <_fflush_r+0x40>
 800a292:	059b      	lsls	r3, r3, #22
 800a294:	d402      	bmi.n	800a29c <_fflush_r+0x40>
 800a296:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a298:	f000 f923 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 800a29c:	0028      	movs	r0, r5
 800a29e:	0021      	movs	r1, r4
 800a2a0:	f7ff ff50 	bl	800a144 <__sflush_r>
 800a2a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2a6:	0005      	movs	r5, r0
 800a2a8:	07db      	lsls	r3, r3, #31
 800a2aa:	d4de      	bmi.n	800a26a <_fflush_r+0xe>
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	059b      	lsls	r3, r3, #22
 800a2b0:	d4db      	bmi.n	800a26a <_fflush_r+0xe>
 800a2b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2b4:	f000 f916 	bl	800a4e4 <__retarget_lock_release_recursive>
 800a2b8:	e7d7      	b.n	800a26a <_fflush_r+0xe>
 800a2ba:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <_fflush_r+0x78>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d101      	bne.n	800a2c4 <_fflush_r+0x68>
 800a2c0:	68ac      	ldr	r4, [r5, #8]
 800a2c2:	e7df      	b.n	800a284 <_fflush_r+0x28>
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <_fflush_r+0x7c>)
 800a2c6:	429c      	cmp	r4, r3
 800a2c8:	d1dc      	bne.n	800a284 <_fflush_r+0x28>
 800a2ca:	68ec      	ldr	r4, [r5, #12]
 800a2cc:	e7da      	b.n	800a284 <_fflush_r+0x28>
 800a2ce:	46c0      	nop			; (mov r8, r8)
 800a2d0:	0800ad64 	.word	0x0800ad64
 800a2d4:	0800ad84 	.word	0x0800ad84
 800a2d8:	0800ad44 	.word	0x0800ad44

0800a2dc <std>:
 800a2dc:	2300      	movs	r3, #0
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	0004      	movs	r4, r0
 800a2e2:	6003      	str	r3, [r0, #0]
 800a2e4:	6043      	str	r3, [r0, #4]
 800a2e6:	6083      	str	r3, [r0, #8]
 800a2e8:	8181      	strh	r1, [r0, #12]
 800a2ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a2ec:	0019      	movs	r1, r3
 800a2ee:	81c2      	strh	r2, [r0, #14]
 800a2f0:	6103      	str	r3, [r0, #16]
 800a2f2:	6143      	str	r3, [r0, #20]
 800a2f4:	6183      	str	r3, [r0, #24]
 800a2f6:	2208      	movs	r2, #8
 800a2f8:	305c      	adds	r0, #92	; 0x5c
 800a2fa:	f7fb fd87 	bl	8005e0c <memset>
 800a2fe:	4b05      	ldr	r3, [pc, #20]	; (800a314 <std+0x38>)
 800a300:	6263      	str	r3, [r4, #36]	; 0x24
 800a302:	4b05      	ldr	r3, [pc, #20]	; (800a318 <std+0x3c>)
 800a304:	6224      	str	r4, [r4, #32]
 800a306:	62a3      	str	r3, [r4, #40]	; 0x28
 800a308:	4b04      	ldr	r3, [pc, #16]	; (800a31c <std+0x40>)
 800a30a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a30c:	4b04      	ldr	r3, [pc, #16]	; (800a320 <std+0x44>)
 800a30e:	6323      	str	r3, [r4, #48]	; 0x30
 800a310:	bd10      	pop	{r4, pc}
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	0800a665 	.word	0x0800a665
 800a318:	0800a68d 	.word	0x0800a68d
 800a31c:	0800a6c5 	.word	0x0800a6c5
 800a320:	0800a6f1 	.word	0x0800a6f1

0800a324 <_cleanup_r>:
 800a324:	b510      	push	{r4, lr}
 800a326:	4902      	ldr	r1, [pc, #8]	; (800a330 <_cleanup_r+0xc>)
 800a328:	f000 f8ba 	bl	800a4a0 <_fwalk_reent>
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	46c0      	nop			; (mov r8, r8)
 800a330:	0800a25d 	.word	0x0800a25d

0800a334 <__sfmoreglue>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	2568      	movs	r5, #104	; 0x68
 800a338:	1e4a      	subs	r2, r1, #1
 800a33a:	4355      	muls	r5, r2
 800a33c:	000e      	movs	r6, r1
 800a33e:	0029      	movs	r1, r5
 800a340:	3174      	adds	r1, #116	; 0x74
 800a342:	f7ff fa59 	bl	80097f8 <_malloc_r>
 800a346:	1e04      	subs	r4, r0, #0
 800a348:	d008      	beq.n	800a35c <__sfmoreglue+0x28>
 800a34a:	2100      	movs	r1, #0
 800a34c:	002a      	movs	r2, r5
 800a34e:	6001      	str	r1, [r0, #0]
 800a350:	6046      	str	r6, [r0, #4]
 800a352:	300c      	adds	r0, #12
 800a354:	60a0      	str	r0, [r4, #8]
 800a356:	3268      	adds	r2, #104	; 0x68
 800a358:	f7fb fd58 	bl	8005e0c <memset>
 800a35c:	0020      	movs	r0, r4
 800a35e:	bd70      	pop	{r4, r5, r6, pc}

0800a360 <__sfp_lock_acquire>:
 800a360:	b510      	push	{r4, lr}
 800a362:	4802      	ldr	r0, [pc, #8]	; (800a36c <__sfp_lock_acquire+0xc>)
 800a364:	f000 f8bd 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 800a368:	bd10      	pop	{r4, pc}
 800a36a:	46c0      	nop			; (mov r8, r8)
 800a36c:	20000c10 	.word	0x20000c10

0800a370 <__sfp_lock_release>:
 800a370:	b510      	push	{r4, lr}
 800a372:	4802      	ldr	r0, [pc, #8]	; (800a37c <__sfp_lock_release+0xc>)
 800a374:	f000 f8b6 	bl	800a4e4 <__retarget_lock_release_recursive>
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	20000c10 	.word	0x20000c10

0800a380 <__sinit_lock_acquire>:
 800a380:	b510      	push	{r4, lr}
 800a382:	4802      	ldr	r0, [pc, #8]	; (800a38c <__sinit_lock_acquire+0xc>)
 800a384:	f000 f8ad 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	46c0      	nop			; (mov r8, r8)
 800a38c:	20000c0b 	.word	0x20000c0b

0800a390 <__sinit_lock_release>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4802      	ldr	r0, [pc, #8]	; (800a39c <__sinit_lock_release+0xc>)
 800a394:	f000 f8a6 	bl	800a4e4 <__retarget_lock_release_recursive>
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	46c0      	nop			; (mov r8, r8)
 800a39c:	20000c0b 	.word	0x20000c0b

0800a3a0 <__sinit>:
 800a3a0:	b513      	push	{r0, r1, r4, lr}
 800a3a2:	0004      	movs	r4, r0
 800a3a4:	f7ff ffec 	bl	800a380 <__sinit_lock_acquire>
 800a3a8:	69a3      	ldr	r3, [r4, #24]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <__sinit+0x14>
 800a3ae:	f7ff ffef 	bl	800a390 <__sinit_lock_release>
 800a3b2:	bd13      	pop	{r0, r1, r4, pc}
 800a3b4:	64a3      	str	r3, [r4, #72]	; 0x48
 800a3b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a3b8:	6523      	str	r3, [r4, #80]	; 0x50
 800a3ba:	4b13      	ldr	r3, [pc, #76]	; (800a408 <__sinit+0x68>)
 800a3bc:	4a13      	ldr	r2, [pc, #76]	; (800a40c <__sinit+0x6c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	d101      	bne.n	800a3cc <__sinit+0x2c>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	61a3      	str	r3, [r4, #24]
 800a3cc:	0020      	movs	r0, r4
 800a3ce:	f000 f81f 	bl	800a410 <__sfp>
 800a3d2:	6060      	str	r0, [r4, #4]
 800a3d4:	0020      	movs	r0, r4
 800a3d6:	f000 f81b 	bl	800a410 <__sfp>
 800a3da:	60a0      	str	r0, [r4, #8]
 800a3dc:	0020      	movs	r0, r4
 800a3de:	f000 f817 	bl	800a410 <__sfp>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2104      	movs	r1, #4
 800a3e6:	60e0      	str	r0, [r4, #12]
 800a3e8:	6860      	ldr	r0, [r4, #4]
 800a3ea:	f7ff ff77 	bl	800a2dc <std>
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	2109      	movs	r1, #9
 800a3f2:	68a0      	ldr	r0, [r4, #8]
 800a3f4:	f7ff ff72 	bl	800a2dc <std>
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	2112      	movs	r1, #18
 800a3fc:	68e0      	ldr	r0, [r4, #12]
 800a3fe:	f7ff ff6d 	bl	800a2dc <std>
 800a402:	2301      	movs	r3, #1
 800a404:	61a3      	str	r3, [r4, #24]
 800a406:	e7d2      	b.n	800a3ae <__sinit+0xe>
 800a408:	0800a8f0 	.word	0x0800a8f0
 800a40c:	0800a325 	.word	0x0800a325

0800a410 <__sfp>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	0007      	movs	r7, r0
 800a414:	f7ff ffa4 	bl	800a360 <__sfp_lock_acquire>
 800a418:	4b1f      	ldr	r3, [pc, #124]	; (800a498 <__sfp+0x88>)
 800a41a:	681e      	ldr	r6, [r3, #0]
 800a41c:	69b3      	ldr	r3, [r6, #24]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d102      	bne.n	800a428 <__sfp+0x18>
 800a422:	0030      	movs	r0, r6
 800a424:	f7ff ffbc 	bl	800a3a0 <__sinit>
 800a428:	3648      	adds	r6, #72	; 0x48
 800a42a:	68b4      	ldr	r4, [r6, #8]
 800a42c:	6873      	ldr	r3, [r6, #4]
 800a42e:	3b01      	subs	r3, #1
 800a430:	d504      	bpl.n	800a43c <__sfp+0x2c>
 800a432:	6833      	ldr	r3, [r6, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d022      	beq.n	800a47e <__sfp+0x6e>
 800a438:	6836      	ldr	r6, [r6, #0]
 800a43a:	e7f6      	b.n	800a42a <__sfp+0x1a>
 800a43c:	220c      	movs	r2, #12
 800a43e:	5ea5      	ldrsh	r5, [r4, r2]
 800a440:	2d00      	cmp	r5, #0
 800a442:	d11a      	bne.n	800a47a <__sfp+0x6a>
 800a444:	0020      	movs	r0, r4
 800a446:	4b15      	ldr	r3, [pc, #84]	; (800a49c <__sfp+0x8c>)
 800a448:	3058      	adds	r0, #88	; 0x58
 800a44a:	60e3      	str	r3, [r4, #12]
 800a44c:	6665      	str	r5, [r4, #100]	; 0x64
 800a44e:	f000 f847 	bl	800a4e0 <__retarget_lock_init_recursive>
 800a452:	f7ff ff8d 	bl	800a370 <__sfp_lock_release>
 800a456:	0020      	movs	r0, r4
 800a458:	2208      	movs	r2, #8
 800a45a:	0029      	movs	r1, r5
 800a45c:	6025      	str	r5, [r4, #0]
 800a45e:	60a5      	str	r5, [r4, #8]
 800a460:	6065      	str	r5, [r4, #4]
 800a462:	6125      	str	r5, [r4, #16]
 800a464:	6165      	str	r5, [r4, #20]
 800a466:	61a5      	str	r5, [r4, #24]
 800a468:	305c      	adds	r0, #92	; 0x5c
 800a46a:	f7fb fccf 	bl	8005e0c <memset>
 800a46e:	6365      	str	r5, [r4, #52]	; 0x34
 800a470:	63a5      	str	r5, [r4, #56]	; 0x38
 800a472:	64a5      	str	r5, [r4, #72]	; 0x48
 800a474:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a476:	0020      	movs	r0, r4
 800a478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47a:	3468      	adds	r4, #104	; 0x68
 800a47c:	e7d7      	b.n	800a42e <__sfp+0x1e>
 800a47e:	2104      	movs	r1, #4
 800a480:	0038      	movs	r0, r7
 800a482:	f7ff ff57 	bl	800a334 <__sfmoreglue>
 800a486:	1e04      	subs	r4, r0, #0
 800a488:	6030      	str	r0, [r6, #0]
 800a48a:	d1d5      	bne.n	800a438 <__sfp+0x28>
 800a48c:	f7ff ff70 	bl	800a370 <__sfp_lock_release>
 800a490:	230c      	movs	r3, #12
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	e7ef      	b.n	800a476 <__sfp+0x66>
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	0800a8f0 	.word	0x0800a8f0
 800a49c:	ffff0001 	.word	0xffff0001

0800a4a0 <_fwalk_reent>:
 800a4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4a2:	0004      	movs	r4, r0
 800a4a4:	0006      	movs	r6, r0
 800a4a6:	2700      	movs	r7, #0
 800a4a8:	9101      	str	r1, [sp, #4]
 800a4aa:	3448      	adds	r4, #72	; 0x48
 800a4ac:	6863      	ldr	r3, [r4, #4]
 800a4ae:	68a5      	ldr	r5, [r4, #8]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	9b00      	ldr	r3, [sp, #0]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	d504      	bpl.n	800a4c4 <_fwalk_reent+0x24>
 800a4ba:	6824      	ldr	r4, [r4, #0]
 800a4bc:	2c00      	cmp	r4, #0
 800a4be:	d1f5      	bne.n	800a4ac <_fwalk_reent+0xc>
 800a4c0:	0038      	movs	r0, r7
 800a4c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4c4:	89ab      	ldrh	r3, [r5, #12]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d908      	bls.n	800a4dc <_fwalk_reent+0x3c>
 800a4ca:	220e      	movs	r2, #14
 800a4cc:	5eab      	ldrsh	r3, [r5, r2]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	d004      	beq.n	800a4dc <_fwalk_reent+0x3c>
 800a4d2:	0029      	movs	r1, r5
 800a4d4:	0030      	movs	r0, r6
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	4798      	blx	r3
 800a4da:	4307      	orrs	r7, r0
 800a4dc:	3568      	adds	r5, #104	; 0x68
 800a4de:	e7e8      	b.n	800a4b2 <_fwalk_reent+0x12>

0800a4e0 <__retarget_lock_init_recursive>:
 800a4e0:	4770      	bx	lr

0800a4e2 <__retarget_lock_acquire_recursive>:
 800a4e2:	4770      	bx	lr

0800a4e4 <__retarget_lock_release_recursive>:
 800a4e4:	4770      	bx	lr
	...

0800a4e8 <__swhatbuf_r>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	000e      	movs	r6, r1
 800a4ec:	001d      	movs	r5, r3
 800a4ee:	230e      	movs	r3, #14
 800a4f0:	5ec9      	ldrsh	r1, [r1, r3]
 800a4f2:	0014      	movs	r4, r2
 800a4f4:	b096      	sub	sp, #88	; 0x58
 800a4f6:	2900      	cmp	r1, #0
 800a4f8:	da07      	bge.n	800a50a <__swhatbuf_r+0x22>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	602b      	str	r3, [r5, #0]
 800a4fe:	89b3      	ldrh	r3, [r6, #12]
 800a500:	061b      	lsls	r3, r3, #24
 800a502:	d411      	bmi.n	800a528 <__swhatbuf_r+0x40>
 800a504:	2380      	movs	r3, #128	; 0x80
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	e00f      	b.n	800a52a <__swhatbuf_r+0x42>
 800a50a:	466a      	mov	r2, sp
 800a50c:	f000 f91c 	bl	800a748 <_fstat_r>
 800a510:	2800      	cmp	r0, #0
 800a512:	dbf2      	blt.n	800a4fa <__swhatbuf_r+0x12>
 800a514:	23f0      	movs	r3, #240	; 0xf0
 800a516:	9901      	ldr	r1, [sp, #4]
 800a518:	021b      	lsls	r3, r3, #8
 800a51a:	4019      	ands	r1, r3
 800a51c:	4b05      	ldr	r3, [pc, #20]	; (800a534 <__swhatbuf_r+0x4c>)
 800a51e:	18c9      	adds	r1, r1, r3
 800a520:	424b      	negs	r3, r1
 800a522:	4159      	adcs	r1, r3
 800a524:	6029      	str	r1, [r5, #0]
 800a526:	e7ed      	b.n	800a504 <__swhatbuf_r+0x1c>
 800a528:	2340      	movs	r3, #64	; 0x40
 800a52a:	2000      	movs	r0, #0
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	b016      	add	sp, #88	; 0x58
 800a530:	bd70      	pop	{r4, r5, r6, pc}
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	ffffe000 	.word	0xffffe000

0800a538 <__smakebuf_r>:
 800a538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a53a:	2602      	movs	r6, #2
 800a53c:	898b      	ldrh	r3, [r1, #12]
 800a53e:	0005      	movs	r5, r0
 800a540:	000c      	movs	r4, r1
 800a542:	4233      	tst	r3, r6
 800a544:	d006      	beq.n	800a554 <__smakebuf_r+0x1c>
 800a546:	0023      	movs	r3, r4
 800a548:	3347      	adds	r3, #71	; 0x47
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	6123      	str	r3, [r4, #16]
 800a54e:	2301      	movs	r3, #1
 800a550:	6163      	str	r3, [r4, #20]
 800a552:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a554:	466a      	mov	r2, sp
 800a556:	ab01      	add	r3, sp, #4
 800a558:	f7ff ffc6 	bl	800a4e8 <__swhatbuf_r>
 800a55c:	9900      	ldr	r1, [sp, #0]
 800a55e:	0007      	movs	r7, r0
 800a560:	0028      	movs	r0, r5
 800a562:	f7ff f949 	bl	80097f8 <_malloc_r>
 800a566:	2800      	cmp	r0, #0
 800a568:	d108      	bne.n	800a57c <__smakebuf_r+0x44>
 800a56a:	220c      	movs	r2, #12
 800a56c:	5ea3      	ldrsh	r3, [r4, r2]
 800a56e:	059a      	lsls	r2, r3, #22
 800a570:	d4ef      	bmi.n	800a552 <__smakebuf_r+0x1a>
 800a572:	2203      	movs	r2, #3
 800a574:	4393      	bics	r3, r2
 800a576:	431e      	orrs	r6, r3
 800a578:	81a6      	strh	r6, [r4, #12]
 800a57a:	e7e4      	b.n	800a546 <__smakebuf_r+0xe>
 800a57c:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <__smakebuf_r+0x84>)
 800a57e:	62ab      	str	r3, [r5, #40]	; 0x28
 800a580:	2380      	movs	r3, #128	; 0x80
 800a582:	89a2      	ldrh	r2, [r4, #12]
 800a584:	6020      	str	r0, [r4, #0]
 800a586:	4313      	orrs	r3, r2
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	9b00      	ldr	r3, [sp, #0]
 800a58c:	6120      	str	r0, [r4, #16]
 800a58e:	6163      	str	r3, [r4, #20]
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00d      	beq.n	800a5b2 <__smakebuf_r+0x7a>
 800a596:	0028      	movs	r0, r5
 800a598:	230e      	movs	r3, #14
 800a59a:	5ee1      	ldrsh	r1, [r4, r3]
 800a59c:	f000 f8e6 	bl	800a76c <_isatty_r>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d006      	beq.n	800a5b2 <__smakebuf_r+0x7a>
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	4393      	bics	r3, r2
 800a5aa:	001a      	movs	r2, r3
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	81a3      	strh	r3, [r4, #12]
 800a5b2:	89a0      	ldrh	r0, [r4, #12]
 800a5b4:	4307      	orrs	r7, r0
 800a5b6:	81a7      	strh	r7, [r4, #12]
 800a5b8:	e7cb      	b.n	800a552 <__smakebuf_r+0x1a>
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	0800a325 	.word	0x0800a325

0800a5c0 <_malloc_usable_size_r>:
 800a5c0:	1f0b      	subs	r3, r1, #4
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	1f18      	subs	r0, r3, #4
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da01      	bge.n	800a5ce <_malloc_usable_size_r+0xe>
 800a5ca:	580b      	ldr	r3, [r1, r0]
 800a5cc:	18c0      	adds	r0, r0, r3
 800a5ce:	4770      	bx	lr

0800a5d0 <_raise_r>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	0004      	movs	r4, r0
 800a5d4:	000d      	movs	r5, r1
 800a5d6:	291f      	cmp	r1, #31
 800a5d8:	d904      	bls.n	800a5e4 <_raise_r+0x14>
 800a5da:	2316      	movs	r3, #22
 800a5dc:	6003      	str	r3, [r0, #0]
 800a5de:	2001      	movs	r0, #1
 800a5e0:	4240      	negs	r0, r0
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
 800a5e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d004      	beq.n	800a5f4 <_raise_r+0x24>
 800a5ea:	008a      	lsls	r2, r1, #2
 800a5ec:	189b      	adds	r3, r3, r2
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	2a00      	cmp	r2, #0
 800a5f2:	d108      	bne.n	800a606 <_raise_r+0x36>
 800a5f4:	0020      	movs	r0, r4
 800a5f6:	f000 f831 	bl	800a65c <_getpid_r>
 800a5fa:	002a      	movs	r2, r5
 800a5fc:	0001      	movs	r1, r0
 800a5fe:	0020      	movs	r0, r4
 800a600:	f000 f81a 	bl	800a638 <_kill_r>
 800a604:	e7ed      	b.n	800a5e2 <_raise_r+0x12>
 800a606:	2000      	movs	r0, #0
 800a608:	2a01      	cmp	r2, #1
 800a60a:	d0ea      	beq.n	800a5e2 <_raise_r+0x12>
 800a60c:	1c51      	adds	r1, r2, #1
 800a60e:	d103      	bne.n	800a618 <_raise_r+0x48>
 800a610:	2316      	movs	r3, #22
 800a612:	3001      	adds	r0, #1
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	e7e4      	b.n	800a5e2 <_raise_r+0x12>
 800a618:	2400      	movs	r4, #0
 800a61a:	0028      	movs	r0, r5
 800a61c:	601c      	str	r4, [r3, #0]
 800a61e:	4790      	blx	r2
 800a620:	0020      	movs	r0, r4
 800a622:	e7de      	b.n	800a5e2 <_raise_r+0x12>

0800a624 <raise>:
 800a624:	b510      	push	{r4, lr}
 800a626:	4b03      	ldr	r3, [pc, #12]	; (800a634 <raise+0x10>)
 800a628:	0001      	movs	r1, r0
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	f7ff ffd0 	bl	800a5d0 <_raise_r>
 800a630:	bd10      	pop	{r4, pc}
 800a632:	46c0      	nop			; (mov r8, r8)
 800a634:	20000020 	.word	0x20000020

0800a638 <_kill_r>:
 800a638:	2300      	movs	r3, #0
 800a63a:	b570      	push	{r4, r5, r6, lr}
 800a63c:	4d06      	ldr	r5, [pc, #24]	; (800a658 <_kill_r+0x20>)
 800a63e:	0004      	movs	r4, r0
 800a640:	0008      	movs	r0, r1
 800a642:	0011      	movs	r1, r2
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f7f8 fbf1 	bl	8002e2c <_kill>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d103      	bne.n	800a656 <_kill_r+0x1e>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d000      	beq.n	800a656 <_kill_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd70      	pop	{r4, r5, r6, pc}
 800a658:	20000c04 	.word	0x20000c04

0800a65c <_getpid_r>:
 800a65c:	b510      	push	{r4, lr}
 800a65e:	f7f8 fbdf 	bl	8002e20 <_getpid>
 800a662:	bd10      	pop	{r4, pc}

0800a664 <__sread>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	000c      	movs	r4, r1
 800a668:	250e      	movs	r5, #14
 800a66a:	5f49      	ldrsh	r1, [r1, r5]
 800a66c:	f000 f8a4 	bl	800a7b8 <_read_r>
 800a670:	2800      	cmp	r0, #0
 800a672:	db03      	blt.n	800a67c <__sread+0x18>
 800a674:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a676:	181b      	adds	r3, r3, r0
 800a678:	6563      	str	r3, [r4, #84]	; 0x54
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	4a02      	ldr	r2, [pc, #8]	; (800a688 <__sread+0x24>)
 800a680:	4013      	ands	r3, r2
 800a682:	81a3      	strh	r3, [r4, #12]
 800a684:	e7f9      	b.n	800a67a <__sread+0x16>
 800a686:	46c0      	nop			; (mov r8, r8)
 800a688:	ffffefff 	.word	0xffffefff

0800a68c <__swrite>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	001f      	movs	r7, r3
 800a690:	898b      	ldrh	r3, [r1, #12]
 800a692:	0005      	movs	r5, r0
 800a694:	000c      	movs	r4, r1
 800a696:	0016      	movs	r6, r2
 800a698:	05db      	lsls	r3, r3, #23
 800a69a:	d505      	bpl.n	800a6a8 <__swrite+0x1c>
 800a69c:	230e      	movs	r3, #14
 800a69e:	5ec9      	ldrsh	r1, [r1, r3]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	f000 f874 	bl	800a790 <_lseek_r>
 800a6a8:	89a3      	ldrh	r3, [r4, #12]
 800a6aa:	4a05      	ldr	r2, [pc, #20]	; (800a6c0 <__swrite+0x34>)
 800a6ac:	0028      	movs	r0, r5
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	81a3      	strh	r3, [r4, #12]
 800a6b2:	0032      	movs	r2, r6
 800a6b4:	230e      	movs	r3, #14
 800a6b6:	5ee1      	ldrsh	r1, [r4, r3]
 800a6b8:	003b      	movs	r3, r7
 800a6ba:	f000 f81f 	bl	800a6fc <_write_r>
 800a6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c0:	ffffefff 	.word	0xffffefff

0800a6c4 <__sseek>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	000c      	movs	r4, r1
 800a6c8:	250e      	movs	r5, #14
 800a6ca:	5f49      	ldrsh	r1, [r1, r5]
 800a6cc:	f000 f860 	bl	800a790 <_lseek_r>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	1c42      	adds	r2, r0, #1
 800a6d4:	d103      	bne.n	800a6de <__sseek+0x1a>
 800a6d6:	4a05      	ldr	r2, [pc, #20]	; (800a6ec <__sseek+0x28>)
 800a6d8:	4013      	ands	r3, r2
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	bd70      	pop	{r4, r5, r6, pc}
 800a6de:	2280      	movs	r2, #128	; 0x80
 800a6e0:	0152      	lsls	r2, r2, #5
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	6560      	str	r0, [r4, #84]	; 0x54
 800a6e8:	e7f8      	b.n	800a6dc <__sseek+0x18>
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	ffffefff 	.word	0xffffefff

0800a6f0 <__sclose>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	230e      	movs	r3, #14
 800a6f4:	5ec9      	ldrsh	r1, [r1, r3]
 800a6f6:	f000 f815 	bl	800a724 <_close_r>
 800a6fa:	bd10      	pop	{r4, pc}

0800a6fc <_write_r>:
 800a6fc:	b570      	push	{r4, r5, r6, lr}
 800a6fe:	0004      	movs	r4, r0
 800a700:	0008      	movs	r0, r1
 800a702:	0011      	movs	r1, r2
 800a704:	001a      	movs	r2, r3
 800a706:	2300      	movs	r3, #0
 800a708:	4d05      	ldr	r5, [pc, #20]	; (800a720 <_write_r+0x24>)
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	f7f8 fbc7 	bl	8002e9e <_write>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d103      	bne.n	800a71c <_write_r+0x20>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d000      	beq.n	800a71c <_write_r+0x20>
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	bd70      	pop	{r4, r5, r6, pc}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	20000c04 	.word	0x20000c04

0800a724 <_close_r>:
 800a724:	2300      	movs	r3, #0
 800a726:	b570      	push	{r4, r5, r6, lr}
 800a728:	4d06      	ldr	r5, [pc, #24]	; (800a744 <_close_r+0x20>)
 800a72a:	0004      	movs	r4, r0
 800a72c:	0008      	movs	r0, r1
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	f7f8 fbd1 	bl	8002ed6 <_close>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d103      	bne.n	800a740 <_close_r+0x1c>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d000      	beq.n	800a740 <_close_r+0x1c>
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	bd70      	pop	{r4, r5, r6, pc}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	20000c04 	.word	0x20000c04

0800a748 <_fstat_r>:
 800a748:	2300      	movs	r3, #0
 800a74a:	b570      	push	{r4, r5, r6, lr}
 800a74c:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_fstat_r+0x20>)
 800a74e:	0004      	movs	r4, r0
 800a750:	0008      	movs	r0, r1
 800a752:	0011      	movs	r1, r2
 800a754:	602b      	str	r3, [r5, #0]
 800a756:	f7f8 fbc8 	bl	8002eea <_fstat>
 800a75a:	1c43      	adds	r3, r0, #1
 800a75c:	d103      	bne.n	800a766 <_fstat_r+0x1e>
 800a75e:	682b      	ldr	r3, [r5, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d000      	beq.n	800a766 <_fstat_r+0x1e>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd70      	pop	{r4, r5, r6, pc}
 800a768:	20000c04 	.word	0x20000c04

0800a76c <_isatty_r>:
 800a76c:	2300      	movs	r3, #0
 800a76e:	b570      	push	{r4, r5, r6, lr}
 800a770:	4d06      	ldr	r5, [pc, #24]	; (800a78c <_isatty_r+0x20>)
 800a772:	0004      	movs	r4, r0
 800a774:	0008      	movs	r0, r1
 800a776:	602b      	str	r3, [r5, #0]
 800a778:	f7f8 fbc5 	bl	8002f06 <_isatty>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d103      	bne.n	800a788 <_isatty_r+0x1c>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d000      	beq.n	800a788 <_isatty_r+0x1c>
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	20000c04 	.word	0x20000c04

0800a790 <_lseek_r>:
 800a790:	b570      	push	{r4, r5, r6, lr}
 800a792:	0004      	movs	r4, r0
 800a794:	0008      	movs	r0, r1
 800a796:	0011      	movs	r1, r2
 800a798:	001a      	movs	r2, r3
 800a79a:	2300      	movs	r3, #0
 800a79c:	4d05      	ldr	r5, [pc, #20]	; (800a7b4 <_lseek_r+0x24>)
 800a79e:	602b      	str	r3, [r5, #0]
 800a7a0:	f7f8 fbba 	bl	8002f18 <_lseek>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d103      	bne.n	800a7b0 <_lseek_r+0x20>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d000      	beq.n	800a7b0 <_lseek_r+0x20>
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	46c0      	nop			; (mov r8, r8)
 800a7b4:	20000c04 	.word	0x20000c04

0800a7b8 <_read_r>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	0004      	movs	r4, r0
 800a7bc:	0008      	movs	r0, r1
 800a7be:	0011      	movs	r1, r2
 800a7c0:	001a      	movs	r2, r3
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	4d05      	ldr	r5, [pc, #20]	; (800a7dc <_read_r+0x24>)
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f8 fb4c 	bl	8002e64 <_read>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d103      	bne.n	800a7d8 <_read_r+0x20>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d000      	beq.n	800a7d8 <_read_r+0x20>
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	20000c04 	.word	0x20000c04

0800a7e0 <_init>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	46c0      	nop			; (mov r8, r8)
 800a7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e6:	bc08      	pop	{r3}
 800a7e8:	469e      	mov	lr, r3
 800a7ea:	4770      	bx	lr

0800a7ec <_fini>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f2:	bc08      	pop	{r3}
 800a7f4:	469e      	mov	lr, r3
 800a7f6:	4770      	bx	lr
