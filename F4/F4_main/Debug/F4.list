
F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001be4  0800f160  0800f160  0001f160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d44  08010d44  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08010d44  08010d44  00020d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d4c  08010d4c  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d4c  08010d4c  00020d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d50  08010d50  00020d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08010d54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057cc  20000208  08010f5c  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200059d4  08010f5c  000359d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e175  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f7d  00000000  00000000  0005e3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  00064330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e88  00000000  00000000  00066408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f510  00000000  00000000  00068290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a363  00000000  00000000  000877a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab42e  00000000  00000000  000b1b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015cf31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a034  00000000  00000000  0015cf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f144 	.word	0x0800f144

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0800f144 	.word	0x0800f144

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_ADC1_Init+0x98>)
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <MX_ADC1_Init+0x9c>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_ADC1_Init+0x98>)
 8001016:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_ADC1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_ADC1_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_ADC1_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_ADC1_Init+0x98>)
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <MX_ADC1_Init+0xa0>)
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_ADC1_Init+0x98>)
 800104a:	2201      	movs	r2, #1
 800104c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_ADC1_Init+0x98>)
 8001058:	2201      	movs	r2, #1
 800105a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_ADC1_Init+0x98>)
 800105e:	f001 fcdf 	bl	8002a20 <HAL_ADC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001068:	f000 ff16 	bl	8001e98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800106c:	2301      	movs	r3, #1
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001070:	2301      	movs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_ADC1_Init+0x98>)
 800107e:	f001 ff33 	bl	8002ee8 <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001088:	f000 ff06 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20004cb4 	.word	0x20004cb4
 8001098:	40012000 	.word	0x40012000
 800109c:	0f000001 	.word	0x0f000001

080010a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a17      	ldr	r2, [pc, #92]	; (800111c <HAL_ADC_MspInit+0x7c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d127      	bne.n	8001112 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010fa:	2302      	movs	r3, #2
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_ADC_MspInit+0x84>)
 800110e:	f002 fa87 	bl	8003620 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012000 	.word	0x40012000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000

08001128 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    ADCValue = HAL_ADC_GetValue(&hadc1);
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_ADC_ConvCpltCallback+0x20>)
 8001132:	f001 feb8 	bl	8002ea6 <HAL_ADC_GetValue>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_ADC_ConvCpltCallback+0x24>)
 800113c:	801a      	strh	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20004cb4 	.word	0x20004cb4
 800114c:	20000224 	.word	0x20000224

08001150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <MX_FREERTOS_Init+0x48>)
 8001156:	2100      	movs	r1, #0
 8001158:	4810      	ldr	r0, [pc, #64]	; (800119c <MX_FREERTOS_Init+0x4c>)
 800115a:	f005 fcf5 	bl	8006b48 <osThreadNew>
 800115e:	4603      	mov	r3, r0
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <MX_FREERTOS_Init+0x50>)
 8001162:	6013      	str	r3, [r2, #0]

  /* creation of DrawOnOledTask */
  DrawOnOledTaskHandle = osThreadNew(StartDrawing, NULL, &DrawOnOledTask_attributes);
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <MX_FREERTOS_Init+0x54>)
 8001166:	2100      	movs	r1, #0
 8001168:	480f      	ldr	r0, [pc, #60]	; (80011a8 <MX_FREERTOS_Init+0x58>)
 800116a:	f005 fced 	bl	8006b48 <osThreadNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <MX_FREERTOS_Init+0x5c>)
 8001172:	6013      	str	r3, [r2, #0]

  /* creation of ActivityTask */
  ActivityTaskHandle = osThreadNew(StartActivityTask, NULL, &ActivityTask_attributes);
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <MX_FREERTOS_Init+0x60>)
 8001176:	2100      	movs	r1, #0
 8001178:	480e      	ldr	r0, [pc, #56]	; (80011b4 <MX_FREERTOS_Init+0x64>)
 800117a:	f005 fce5 	bl	8006b48 <osThreadNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <MX_FREERTOS_Init+0x68>)
 8001182:	6013      	str	r3, [r2, #0]

  /* creation of readBattery */
  readBatteryHandle = osThreadNew(StartReadBattery, NULL, &readBattery_attributes);
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <MX_FREERTOS_Init+0x6c>)
 8001186:	2100      	movs	r1, #0
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_FREERTOS_Init+0x70>)
 800118a:	f005 fcdd 	bl	8006b48 <osThreadNew>
 800118e:	4603      	mov	r3, r0
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <MX_FREERTOS_Init+0x74>)
 8001192:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	080107d0 	.word	0x080107d0
 800119c:	080011c9 	.word	0x080011c9
 80011a0:	20004cfc 	.word	0x20004cfc
 80011a4:	080107f4 	.word	0x080107f4
 80011a8:	080011d9 	.word	0x080011d9
 80011ac:	20004d04 	.word	0x20004d04
 80011b0:	08010818 	.word	0x08010818
 80011b4:	08001295 	.word	0x08001295
 80011b8:	20004d00 	.word	0x20004d00
 80011bc:	0801083c 	.word	0x0801083c
 80011c0:	08001411 	.word	0x08001411
 80011c4:	20004d08 	.word	0x20004d08

080011c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f005 fd4b 	bl	8006c6c <osDelay>
 80011d6:	e7fb      	b.n	80011d0 <StartDefaultTask+0x8>

080011d8 <StartDrawing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrawing */
void StartDrawing(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	char numbers[10];

	SSD1306_GotoXY (0,0);
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	f001 f860 	bl	80022a8 <SSD1306_GotoXY>
	sprintf(numbers, "batt: %.0f", batteryPer);
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <StartDrawing+0xa0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	f107 000c 	add.w	r0, r7, #12
 80011fa:	4920      	ldr	r1, [pc, #128]	; (800127c <StartDrawing+0xa4>)
 80011fc:	f009 fdce 	bl	800ad9c <siprintf>
	SSD1306_Puts (numbers, &Font_7x10, 1);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2201      	movs	r2, #1
 8001206:	491e      	ldr	r1, [pc, #120]	; (8001280 <StartDrawing+0xa8>)
 8001208:	4618      	mov	r0, r3
 800120a:	f001 f8e3 	bl	80023d4 <SSD1306_Puts>

	SSD1306_GotoXY (0, 30);
 800120e:	211e      	movs	r1, #30
 8001210:	2000      	movs	r0, #0
 8001212:	f001 f849 	bl	80022a8 <SSD1306_GotoXY>
	sprintf(numbers, "%.2f", GPS.speed_km);
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <StartDrawing+0xac>)
 8001218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f99c 	bl	8000558 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	f107 000c 	add.w	r0, r7, #12
 8001228:	4917      	ldr	r1, [pc, #92]	; (8001288 <StartDrawing+0xb0>)
 800122a:	f009 fdb7 	bl	800ad9c <siprintf>
	SSD1306_Puts(numbers, &Font_11x18, 1);
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2201      	movs	r2, #1
 8001234:	4915      	ldr	r1, [pc, #84]	; (800128c <StartDrawing+0xb4>)
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f8cc 	bl	80023d4 <SSD1306_Puts>
	SSD1306_GotoXY (50,36);
 800123c:	2124      	movs	r1, #36	; 0x24
 800123e:	2032      	movs	r0, #50	; 0x32
 8001240:	f001 f832 	bl	80022a8 <SSD1306_GotoXY>
	SSD1306_Puts ("km/u", &Font_7x10, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	490e      	ldr	r1, [pc, #56]	; (8001280 <StartDrawing+0xa8>)
 8001248:	4811      	ldr	r0, [pc, #68]	; (8001290 <StartDrawing+0xb8>)
 800124a:	f001 f8c3 	bl	80023d4 <SSD1306_Puts>

	getTime();
 800124e:	f000 f91d 	bl	800148c <getTime>

	SSD1306_GotoXY (0,10);
 8001252:	210a      	movs	r1, #10
 8001254:	2000      	movs	r0, #0
 8001256:	f001 f827 	bl	80022a8 <SSD1306_GotoXY>
	SSD1306_Puts(getActivity(), &Font_7x10, 1);
 800125a:	f000 f975 	bl	8001548 <getActivity>
 800125e:	4603      	mov	r3, r0
 8001260:	2201      	movs	r2, #1
 8001262:	4907      	ldr	r1, [pc, #28]	; (8001280 <StartDrawing+0xa8>)
 8001264:	4618      	mov	r0, r3
 8001266:	f001 f8b5 	bl	80023d4 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 800126a:	f000 ff77 	bl	800215c <SSD1306_UpdateScreen>

    osDelay(100);
 800126e:	2064      	movs	r0, #100	; 0x64
 8001270:	f005 fcfc 	bl	8006c6c <osDelay>
  {
 8001274:	e7b4      	b.n	80011e0 <StartDrawing+0x8>
 8001276:	bf00      	nop
 8001278:	20000228 	.word	0x20000228
 800127c:	0800f198 	.word	0x0800f198
 8001280:	20000000 	.word	0x20000000
 8001284:	20004d0c 	.word	0x20004d0c
 8001288:	0800f1a4 	.word	0x0800f1a4
 800128c:	20000008 	.word	0x20000008
 8001290:	0800f1ac 	.word	0x0800f1ac

08001294 <StartActivityTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartActivityTask */
void StartActivityTask(void *argument)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	static uint8_t counter = 0, counterPM = 0, counterPauze = 0;
	static uint8_t trackActivity[4];
  /* Infinite loop */
  for(;;)
  {
	  getActivity();
 800129c:	f000 f954 	bl	8001548 <getActivity>

	  	if(time != GPS.utc_time)
 80012a0:	4b54      	ldr	r3, [pc, #336]	; (80013f4 <StartActivityTask+0x160>)
 80012a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80012a6:	4b54      	ldr	r3, [pc, #336]	; (80013f8 <StartActivityTask+0x164>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	f000 809a 	beq.w	80013ec <StartActivityTask+0x158>
	  	{
	  		time = GPS.utc_time;
 80012b8:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <StartActivityTask+0x160>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <StartActivityTask+0x164>)
 80012be:	6013      	str	r3, [r2, #0]

	  		if(counter < 60)
 80012c0:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <StartActivityTask+0x168>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b3b      	cmp	r3, #59	; 0x3b
 80012c6:	d82e      	bhi.n	8001326 <StartActivityTask+0x92>
	  		{
	  			switch (GPS.currentActivity) {
 80012c8:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <StartActivityTask+0x160>)
 80012ca:	f893 3264 	ldrb.w	r3, [r3, #612]	; 0x264
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d014      	beq.n	80012fc <StartActivityTask+0x68>
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	dc19      	bgt.n	800130a <StartActivityTask+0x76>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <StartActivityTask+0x4c>
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d007      	beq.n	80012ee <StartActivityTask+0x5a>
 80012de:	e014      	b.n	800130a <StartActivityTask+0x76>
	  				case noMovement:
	  					trackActivity[noMovement]++;
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <StartActivityTask+0x16c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b45      	ldr	r3, [pc, #276]	; (8001400 <StartActivityTask+0x16c>)
 80012ea:	701a      	strb	r2, [r3, #0]
	  					break;
 80012ec:	e014      	b.n	8001318 <StartActivityTask+0x84>
	  				case walking:
	  					trackActivity[walking]++;
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <StartActivityTask+0x16c>)
 80012f0:	785b      	ldrb	r3, [r3, #1]
 80012f2:	3301      	adds	r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b42      	ldr	r3, [pc, #264]	; (8001400 <StartActivityTask+0x16c>)
 80012f8:	705a      	strb	r2, [r3, #1]
	  					break;
 80012fa:	e00d      	b.n	8001318 <StartActivityTask+0x84>
	  				case running:
	  					trackActivity[running]++;
 80012fc:	4b40      	ldr	r3, [pc, #256]	; (8001400 <StartActivityTask+0x16c>)
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	3301      	adds	r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <StartActivityTask+0x16c>)
 8001306:	709a      	strb	r2, [r3, #2]
	  					break;
 8001308:	e006      	b.n	8001318 <StartActivityTask+0x84>
	  				default:
	  					trackActivity[unknown]++;
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <StartActivityTask+0x16c>)
 800130c:	78db      	ldrb	r3, [r3, #3]
 800130e:	3301      	adds	r3, #1
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <StartActivityTask+0x16c>)
 8001314:	70da      	strb	r2, [r3, #3]
	  					break;
 8001316:	bf00      	nop
	  			}

	  			counter++;
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <StartActivityTask+0x168>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <StartActivityTask+0x168>)
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e062      	b.n	80013ec <StartActivityTask+0x158>
	  		}
	  		else
	  		{
	  			uint8_t current = 0, index = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	2300      	movs	r3, #0
 800132c:	73bb      	strb	r3, [r7, #14]

	  			for(int i = 0; i < 4; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	e015      	b.n	8001360 <StartActivityTask+0xcc>
	  			{
	  				if(current < trackActivity[i])
 8001334:	4a32      	ldr	r2, [pc, #200]	; (8001400 <StartActivityTask+0x16c>)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	429a      	cmp	r2, r3
 8001340:	d20b      	bcs.n	800135a <StartActivityTask+0xc6>
	  				{
	  					current = trackActivity[i];
 8001342:	4a2f      	ldr	r2, [pc, #188]	; (8001400 <StartActivityTask+0x16c>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	73fb      	strb	r3, [r7, #15]
	  					trackActivity[i] = 0;
 800134c:	4a2c      	ldr	r2, [pc, #176]	; (8001400 <StartActivityTask+0x16c>)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
	  					index = i;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	73bb      	strb	r3, [r7, #14]
	  			for(int i = 0; i < 4; i++)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3301      	adds	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b03      	cmp	r3, #3
 8001364:	dde6      	ble.n	8001334 <StartActivityTask+0xa0>
	  				}
	  			}

	  			if(counterPM < 20)
 8001366:	4b27      	ldr	r3, [pc, #156]	; (8001404 <StartActivityTask+0x170>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b13      	cmp	r3, #19
 800136c:	d838      	bhi.n	80013e0 <StartActivityTask+0x14c>
	  			{
	  				if(counterPM == 0 && index == walking || index == running)
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <StartActivityTask+0x170>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <StartActivityTask+0xe8>
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d002      	beq.n	8001382 <StartActivityTask+0xee>
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d10c      	bne.n	800139c <StartActivityTask+0x108>
	  				{
	  					activityPM[counterPM] = index;
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <StartActivityTask+0x170>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <StartActivityTask+0x174>)
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	5453      	strb	r3, [r2, r1]
	  					//possibility to write the activity of the last active minute to sd!!
	  					//not implemented
	  					counterPM++;
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <StartActivityTask+0x170>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <StartActivityTask+0x170>)
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e024      	b.n	80013e6 <StartActivityTask+0x152>
	  				}
	  				else if(counterPM != 0 && index == noMovement || index == unknown)
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <StartActivityTask+0x170>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <StartActivityTask+0x116>
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <StartActivityTask+0x11c>
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d11a      	bne.n	80013e6 <StartActivityTask+0x152>
	  				{
	  					if(counterPauze < 2)
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <StartActivityTask+0x178>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d80c      	bhi.n	80013d2 <StartActivityTask+0x13e>
	  					{
	  						counterPauze++;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <StartActivityTask+0x178>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <StartActivityTask+0x178>)
 80013c2:	701a      	strb	r2, [r3, #0]
	  						counterPM++;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <StartActivityTask+0x170>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <StartActivityTask+0x170>)
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e009      	b.n	80013e6 <StartActivityTask+0x152>
	  					}
	  					else
	  					{
	  						counterPM = 20;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <StartActivityTask+0x170>)
 80013d4:	2214      	movs	r2, #20
 80013d6:	701a      	strb	r2, [r3, #0]
	  						counterPauze = 0;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <StartActivityTask+0x178>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e002      	b.n	80013e6 <StartActivityTask+0x152>
	  			{
	  				//calculate the avarage for total activity
	  				//and write total activity to sd
	  				//not implemented

	  				counterPM = 0;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <StartActivityTask+0x170>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
	  			}
	  			counter = 0;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <StartActivityTask+0x168>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
	  		}

	  	}

	      osDelay(100);
 80013ec:	2064      	movs	r0, #100	; 0x64
 80013ee:	f005 fc3d 	bl	8006c6c <osDelay>
	  getActivity();
 80013f2:	e753      	b.n	800129c <StartActivityTask+0x8>
 80013f4:	20004d0c 	.word	0x20004d0c
 80013f8:	20000230 	.word	0x20000230
 80013fc:	20000234 	.word	0x20000234
 8001400:	20000238 	.word	0x20000238
 8001404:	2000023c 	.word	0x2000023c
 8001408:	20000240 	.word	0x20000240
 800140c:	20000254 	.word	0x20000254

08001410 <StartReadBattery>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadBattery */
void StartReadBattery(void *argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadBattery */
  /* Infinite loop */
  for(;;)
  {
	batteryPer = calculateBattery(CALCULATEPERCENTAGE);
 8001418:	2000      	movs	r0, #0
 800141a:	f000 f8f9 	bl	8001610 <calculateBattery>
 800141e:	eef0 7a40 	vmov.f32	s15, s0
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <StartReadBattery+0x70>)
 8001424:	edc3 7a00 	vstr	s15, [r3]
	batteryVol = calculateBattery(CALCULATEVOLTAGE);
 8001428:	2001      	movs	r0, #1
 800142a:	f000 f8f1 	bl	8001610 <calculateBattery>
 800142e:	eef0 7a40 	vmov.f32	s15, s0
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <StartReadBattery+0x74>)
 8001434:	edc3 7a00 	vstr	s15, [r3]
	if(batteryVol < 3.2)
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <StartReadBattery+0x74>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f88b 	bl	8000558 <__aeabi_f2d>
 8001442:	a30d      	add	r3, pc, #52	; (adr r3, 8001478 <StartReadBattery+0x68>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff fb50 	bl	8000aec <__aeabi_dcmplt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <StartReadBattery+0x50>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001458:	480b      	ldr	r0, [pc, #44]	; (8001488 <StartReadBattery+0x78>)
 800145a:	f002 fa65 	bl	8003928 <HAL_GPIO_WritePin>
 800145e:	e005      	b.n	800146c <StartReadBattery+0x5c>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001466:	4808      	ldr	r0, [pc, #32]	; (8001488 <StartReadBattery+0x78>)
 8001468:	f002 fa5e 	bl	8003928 <HAL_GPIO_WritePin>
	}
    osDelay(5000);
 800146c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001470:	f005 fbfc 	bl	8006c6c <osDelay>
	batteryPer = calculateBattery(CALCULATEPERCENTAGE);
 8001474:	e7d0      	b.n	8001418 <StartReadBattery+0x8>
 8001476:	bf00      	nop
 8001478:	9999999a 	.word	0x9999999a
 800147c:	40099999 	.word	0x40099999
 8001480:	20000228 	.word	0x20000228
 8001484:	2000022c 	.word	0x2000022c
 8001488:	40020400 	.word	0x40020400

0800148c <getTime>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void getTime()
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af04      	add	r7, sp, #16
	SSD1306_GotoXY (0, 50);
 8001492:	2132      	movs	r1, #50	; 0x32
 8001494:	2000      	movs	r0, #0
 8001496:	f000 ff07 	bl	80022a8 <SSD1306_GotoXY>

	char toArray[10];

	float time = GPS.utc_time + 20000; //make it CET
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <getTime+0xa0>)
 800149c:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001530 <getTime+0xa4>
 80014a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014a8:	edc7 7a03 	vstr	s15, [r7, #12]
	sprintf(toArray, "%f", time );
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff f853 	bl	8000558 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4638      	mov	r0, r7
 80014b8:	491e      	ldr	r1, [pc, #120]	; (8001534 <getTime+0xa8>)
 80014ba:	f009 fc6f 	bl	800ad9c <siprintf>

	if(time < 100000)
 80014be:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001538 <getTime+0xac>
 80014c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	d510      	bpl.n	80014f2 <getTime+0x66>
		sprintf(toArray, "%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4]);
 80014d0:	783b      	ldrb	r3, [r7, #0]
 80014d2:	461c      	mov	r4, r3
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	461d      	mov	r5, r3
 80014d8:	78bb      	ldrb	r3, [r7, #2]
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	7939      	ldrb	r1, [r7, #4]
 80014de:	4638      	mov	r0, r7
 80014e0:	9102      	str	r1, [sp, #8]
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	462b      	mov	r3, r5
 80014e8:	4622      	mov	r2, r4
 80014ea:	4914      	ldr	r1, [pc, #80]	; (800153c <getTime+0xb0>)
 80014ec:	f009 fc56 	bl	800ad9c <siprintf>
 80014f0:	e012      	b.n	8001518 <getTime+0x8c>
	else
		sprintf(toArray, "%c%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4], toArray[5]);
 80014f2:	783b      	ldrb	r3, [r7, #0]
 80014f4:	461d      	mov	r5, r3
 80014f6:	787b      	ldrb	r3, [r7, #1]
 80014f8:	461e      	mov	r6, r3
 80014fa:	78bb      	ldrb	r3, [r7, #2]
 80014fc:	78fa      	ldrb	r2, [r7, #3]
 80014fe:	7939      	ldrb	r1, [r7, #4]
 8001500:	7978      	ldrb	r0, [r7, #5]
 8001502:	4604      	mov	r4, r0
 8001504:	4638      	mov	r0, r7
 8001506:	9403      	str	r4, [sp, #12]
 8001508:	9102      	str	r1, [sp, #8]
 800150a:	9201      	str	r2, [sp, #4]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	4633      	mov	r3, r6
 8001510:	462a      	mov	r2, r5
 8001512:	490b      	ldr	r1, [pc, #44]	; (8001540 <getTime+0xb4>)
 8001514:	f009 fc42 	bl	800ad9c <siprintf>

	SSD1306_Puts(toArray, &Font_7x10, 1);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4909      	ldr	r1, [pc, #36]	; (8001544 <getTime+0xb8>)
 800151e:	4618      	mov	r0, r3
 8001520:	f000 ff58 	bl	80023d4 <SSD1306_Puts>
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152c:	20004d0c 	.word	0x20004d0c
 8001530:	469c4000 	.word	0x469c4000
 8001534:	0800f1b4 	.word	0x0800f1b4
 8001538:	47c35000 	.word	0x47c35000
 800153c:	0800f1b8 	.word	0x0800f1b8
 8001540:	0800f1c8 	.word	0x0800f1c8
 8001544:	20000000 	.word	0x20000000

08001548 <getActivity>:

char * getActivity()
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
	char * activity;

	if(GPS.speed_km < 3.0)
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <getActivity+0xb0>)
 8001550:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001554:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	d506      	bpl.n	8001570 <getActivity+0x28>
		{
			activity = "Geen beweging";
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <getActivity+0xb4>)
 8001564:	607b      	str	r3, [r7, #4]
			GPS.currentActivity = noMovement;
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <getActivity+0xb0>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2264 	strb.w	r2, [r3, #612]	; 0x264
 800156e:	e03b      	b.n	80015e8 <getActivity+0xa0>
		}
		else if(GPS.speed_km >= 2.0 && GPS.speed_km < 7.0)
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <getActivity+0xb0>)
 8001572:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001576:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800157a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	db10      	blt.n	80015a6 <getActivity+0x5e>
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <getActivity+0xb0>)
 8001586:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800158a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800158e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	d506      	bpl.n	80015a6 <getActivity+0x5e>
		{
			activity = "Wandelen     ";
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <getActivity+0xb8>)
 800159a:	607b      	str	r3, [r7, #4]
			GPS.currentActivity = walking;
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <getActivity+0xb0>)
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2264 	strb.w	r2, [r3, #612]	; 0x264
 80015a4:	e020      	b.n	80015e8 <getActivity+0xa0>
		}
		else if(GPS.speed_km >= 7.0 && GPS.speed_km < 15.0)
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <getActivity+0xb0>)
 80015a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80015ac:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80015b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	db10      	blt.n	80015dc <getActivity+0x94>
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <getActivity+0xb0>)
 80015bc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80015c0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80015c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	d506      	bpl.n	80015dc <getActivity+0x94>
		{
			activity = "Hardlopen    ";
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <getActivity+0xbc>)
 80015d0:	607b      	str	r3, [r7, #4]
			GPS.currentActivity = running;
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <getActivity+0xb0>)
 80015d4:	2202      	movs	r2, #2
 80015d6:	f883 2264 	strb.w	r2, [r3, #612]	; 0x264
 80015da:	e005      	b.n	80015e8 <getActivity+0xa0>
		}
		else
		{
			activity = "onbekend     ";
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <getActivity+0xc0>)
 80015de:	607b      	str	r3, [r7, #4]
			GPS.currentActivity =  unknown;
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <getActivity+0xb0>)
 80015e2:	2203      	movs	r2, #3
 80015e4:	f883 2264 	strb.w	r2, [r3, #612]	; 0x264
		}

	return activity;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20004d0c 	.word	0x20004d0c
 80015fc:	0800f1d8 	.word	0x0800f1d8
 8001600:	0800f1e8 	.word	0x0800f1e8
 8001604:	0800f1f8 	.word	0x0800f1f8
 8001608:	0800f208 	.word	0x0800f208
 800160c:	00000000 	.word	0x00000000

08001610 <calculateBattery>:

float calculateBattery(uint8_t whatCalculation)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	uint16_t localADC = ADCValue;	//grab the last conversion value
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <calculateBattery+0xd0>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Start_IT(&hadc1);		//start a new conversion already so it's ready for the next time the function is called
 8001620:	4830      	ldr	r0, [pc, #192]	; (80016e4 <calculateBattery+0xd4>)
 8001622:	f001 fa41 	bl	8002aa8 <HAL_ADC_Start_IT>
	if(whatCalculation == CALCULATEPERCENTAGE)
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d12b      	bne.n	8001684 <calculateBattery+0x74>
	{
		return 71.428571428571 * ((localADC / (float)4095) * 4.2) - 200;
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001636:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80016e8 <calculateBattery+0xd8>
 800163a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800163e:	ee16 0a90 	vmov	r0, s13
 8001642:	f7fe ff89 	bl	8000558 <__aeabi_f2d>
 8001646:	a322      	add	r3, pc, #136	; (adr r3, 80016d0 <calculateBattery+0xc0>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe ffdc 	bl	8000608 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	a31f      	add	r3, pc, #124	; (adr r3, 80016d8 <calculateBattery+0xc8>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ffd3 	bl	8000608 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <calculateBattery+0xdc>)
 8001670:	f7fe fe12 	bl	8000298 <__aeabi_dsub>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fabc 	bl	8000bf8 <__aeabi_d2f>
 8001680:	4603      	mov	r3, r0
 8001682:	e01d      	b.n	80016c0 <calculateBattery+0xb0>
		//return (localADC / (float)4095) * 100;
	} else if(whatCalculation == CALCULATEVOLTAGE)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d119      	bne.n	80016be <calculateBattery+0xae>
	{
		return (localADC / (float)4095) * 4.2;
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001694:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80016e8 <calculateBattery+0xd8>
 8001698:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800169c:	ee16 0a90 	vmov	r0, s13
 80016a0:	f7fe ff5a 	bl	8000558 <__aeabi_f2d>
 80016a4:	a30a      	add	r3, pc, #40	; (adr r3, 80016d0 <calculateBattery+0xc0>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe ffad 	bl	8000608 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff fa9f 	bl	8000bf8 <__aeabi_d2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	e000      	b.n	80016c0 <calculateBattery+0xb0>
	}
	return -1.0;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <calculateBattery+0xe0>)
 80016c0:	ee07 3a90 	vmov	s15, r3
}
 80016c4:	eeb0 0a67 	vmov.f32	s0, s15
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	4010cccc 	.word	0x4010cccc
 80016d8:	b6db6d99 	.word	0xb6db6d99
 80016dc:	4051db6d 	.word	0x4051db6d
 80016e0:	20000224 	.word	0x20000224
 80016e4:	20004cb4 	.word	0x20004cb4
 80016e8:	457ff000 	.word	0x457ff000
 80016ec:	40690000 	.word	0x40690000
 80016f0:	bf800000 	.word	0xbf800000

080016f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <MX_GPIO_Init+0xf8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a36      	ldr	r2, [pc, #216]	; (80017ec <MX_GPIO_Init+0xf8>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <MX_GPIO_Init+0xf8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <MX_GPIO_Init+0xf8>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a2f      	ldr	r2, [pc, #188]	; (80017ec <MX_GPIO_Init+0xf8>)
 8001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <MX_GPIO_Init+0xf8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <MX_GPIO_Init+0xf8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a28      	ldr	r2, [pc, #160]	; (80017ec <MX_GPIO_Init+0xf8>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <MX_GPIO_Init+0xf8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <MX_GPIO_Init+0xf8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a21      	ldr	r2, [pc, #132]	; (80017ec <MX_GPIO_Init+0xf8>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MX_GPIO_Init+0xf8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2110      	movs	r1, #16
 800177e:	481c      	ldr	r0, [pc, #112]	; (80017f0 <MX_GPIO_Init+0xfc>)
 8001780:	f002 f8d2 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	f240 3102 	movw	r1, #770	; 0x302
 800178a:	481a      	ldr	r0, [pc, #104]	; (80017f4 <MX_GPIO_Init+0x100>)
 800178c:	f002 f8cc 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001790:	2310      	movs	r3, #16
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4812      	ldr	r0, [pc, #72]	; (80017f0 <MX_GPIO_Init+0xfc>)
 80017a8:	f001 ff3a 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 80017ac:	f240 3302 	movw	r3, #770	; 0x302
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <MX_GPIO_Init+0x100>)
 80017c6:	f001 ff2b 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ca:	2304      	movs	r3, #4
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_GPIO_Init+0x100>)
 80017de:	f001 ff1f 	bl	8003620 <HAL_GPIO_Init>

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400

080017f8 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 80017fc:	2201      	movs	r2, #1
 80017fe:	4903      	ldr	r1, [pc, #12]	; (800180c <GPS_Init+0x14>)
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <GPS_Init+0x18>)
 8001802:	f003 fdf4 	bl	80053ee <HAL_UART_Receive_IT>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20004f68 	.word	0x20004f68
 8001810:	200054d0 	.word	0x200054d0

08001814 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8001818:	f001 f8f6 	bl	8002a08 <HAL_GetTick>
 800181c:	4603      	mov	r3, r0
 800181e:	4a35      	ldr	r2, [pc, #212]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001820:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
	static int i = 0;
	if(GPS.rxTmp != '\n' && GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8001824:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001826:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800182a:	2b0a      	cmp	r3, #10
 800182c:	d044      	beq.n	80018b8 <GPS_UART_CallBack+0xa4>
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001830:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001834:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001838:	d23e      	bcs.n	80018b8 <GPS_UART_CallBack+0xa4>
	{
		if(i % 2)
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <GPS_UART_CallBack+0xe4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d032      	beq.n	80018ac <GPS_UART_CallBack+0x98>
		{
			if(GPS.rxBuffer[GPS.rxIndex - 1]== ',' && GPS.rxTmp == ',') {  // check n-1 and n chr's for two ',,'
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001848:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 800184c:	3b01      	subs	r3, #1
 800184e:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001850:	4413      	add	r3, r2
 8001852:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001856:	2b2c      	cmp	r3, #44	; 0x2c
 8001858:	d115      	bne.n	8001886 <GPS_UART_CallBack+0x72>
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 800185c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8001860:	2b2c      	cmp	r3, #44	; 0x2c
 8001862:	d110      	bne.n	8001886 <GPS_UART_CallBack+0x72>
				GPS.rxBuffer[GPS.rxIndex] = '0';      // add a '0'
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001866:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 800186a:	461a      	mov	r2, r3
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 800186e:	4413      	add	r3, r2
 8001870:	2230      	movs	r2, #48	; 0x30
 8001872:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
				GPS.rxIndex++;
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001878:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 800187c:	3301      	adds	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001882:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
			}

			GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001888:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 800188c:	4619      	mov	r1, r3
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001890:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 8001896:	440b      	add	r3, r1
 8001898:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

			GPS.rxIndex++;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 800189e:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80018a2:	3301      	adds	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 80018a8:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		}
		i++;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <GPS_UART_CallBack+0xe4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <GPS_UART_CallBack+0xe4>)
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e015      	b.n	80018e4 <GPS_UART_CallBack+0xd0>
	}
	else
	{

		if(GPS_validate((char*) GPS.rxBuffer))
 80018b8:	4810      	ldr	r0, [pc, #64]	; (80018fc <GPS_UART_CallBack+0xe8>)
 80018ba:	f000 f825 	bl	8001908 <GPS_validate>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <GPS_UART_CallBack+0xb6>
			GPS_parse((char*) GPS.rxBuffer);
 80018c4:	480d      	ldr	r0, [pc, #52]	; (80018fc <GPS_UART_CallBack+0xe8>)
 80018c6:	f000 f881 	bl	80019cc <GPS_parse>
		GPS.rxIndex=0;
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <GPS_UART_CallBack+0xe0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		i = 0;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <GPS_UART_CallBack+0xe4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
		memset(GPS.rxBuffer, 0, sizeof(GPS.rxBuffer));
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	2100      	movs	r1, #0
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <GPS_UART_CallBack+0xe8>)
 80018e0:	f008 fbd4 	bl	800a08c <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	4906      	ldr	r1, [pc, #24]	; (8001900 <GPS_UART_CallBack+0xec>)
 80018e8:	4806      	ldr	r0, [pc, #24]	; (8001904 <GPS_UART_CallBack+0xf0>)
 80018ea:	f003 fd80 	bl	80053ee <HAL_UART_Receive_IT>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20004d0c 	.word	0x20004d0c
 80018f8:	20000258 	.word	0x20000258
 80018fc:	20004d65 	.word	0x20004d65
 8001900:	20004f68 	.word	0x20004f68
 8001904:	200054d0 	.word	0x200054d0

08001908 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]


    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b24      	cmp	r3, #36	; 0x24
 8001922:	d103      	bne.n	800192c <GPS_validate+0x24>
        i++;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
    else
        return 0;


    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800192a:	e00c      	b.n	8001946 <GPS_validate+0x3e>
        return 0;
 800192c:	2300      	movs	r3, #0
 800192e:	e047      	b.n	80019c0 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4053      	eors	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        i++;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <GPS_validate+0x5c>
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b2a      	cmp	r3, #42	; 0x2a
 800195c:	d002      	beq.n	8001964 <GPS_validate+0x5c>
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b4a      	cmp	r3, #74	; 0x4a
 8001962:	dde5      	ble.n	8001930 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b4a      	cmp	r3, #74	; 0x4a
 8001968:	dd01      	ble.n	800196e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800196a:	2300      	movs	r3, #0
 800196c:	e028      	b.n	80019c0 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b2a      	cmp	r3, #42	; 0x2a
 8001978:	d119      	bne.n	80019ae <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3302      	adds	r3, #2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	490a      	ldr	r1, [pc, #40]	; (80019c8 <GPS_validate+0xc0>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f009 f9fc 	bl	800ad9c <siprintf>

    return((checkcalcstr[0] == check[0])
 80019a4:	7a3a      	ldrb	r2, [r7, #8]
 80019a6:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d108      	bne.n	80019be <GPS_validate+0xb6>
 80019ac:	e001      	b.n	80019b2 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80019ae:	2300      	movs	r3, #0
 80019b0:	e006      	b.n	80019c0 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80019b2:	7a7a      	ldrb	r2, [r7, #9]
 80019b4:	7b7b      	ldrb	r3, [r7, #13]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d101      	bne.n	80019be <GPS_validate+0xb6>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <GPS_validate+0xb8>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	0800f218 	.word	0x0800f218

080019cc <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af08      	add	r7, sp, #32
 80019d2:	6078      	str	r0, [r7, #4]



	   if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 80019d4:	2206      	movs	r2, #6
 80019d6:	494a      	ldr	r1, [pc, #296]	; (8001b00 <GPS_parse+0x134>)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f009 fa70 	bl	800aebe <strncmp>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d118      	bne.n	8001a16 <GPS_parse+0x4a>

	    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1)
 80019e4:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <GPS_parse+0x138>)
 80019e6:	9307      	str	r3, [sp, #28]
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <GPS_parse+0x13c>)
 80019ea:	9306      	str	r3, [sp, #24]
 80019ec:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <GPS_parse+0x140>)
 80019ee:	9305      	str	r3, [sp, #20]
 80019f0:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <GPS_parse+0x144>)
 80019f2:	9304      	str	r3, [sp, #16]
 80019f4:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <GPS_parse+0x148>)
 80019f6:	9303      	str	r3, [sp, #12]
 80019f8:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <GPS_parse+0x14c>)
 80019fa:	9302      	str	r3, [sp, #8]
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <GPS_parse+0x150>)
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <GPS_parse+0x154>)
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <GPS_parse+0x158>)
 8001a06:	4a48      	ldr	r2, [pc, #288]	; (8001b28 <GPS_parse+0x15c>)
 8001a08:	4948      	ldr	r1, [pc, #288]	; (8001b2c <GPS_parse+0x160>)
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f009 f9e6 	bl	800addc <siscanf>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	e070      	b.n	8001af8 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001a16:	2206      	movs	r2, #6
 8001a18:	4945      	ldr	r1, [pc, #276]	; (8001b30 <GPS_parse+0x164>)
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f009 fa4f 	bl	800aebe <strncmp>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d114      	bne.n	8001a50 <GPS_parse+0x84>

	    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <GPS_parse+0x168>)
 8001a28:	9305      	str	r3, [sp, #20]
 8001a2a:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <GPS_parse+0x16c>)
 8001a2c:	9304      	str	r3, [sp, #16]
 8001a2e:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <GPS_parse+0x170>)
 8001a30:	9303      	str	r3, [sp, #12]
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <GPS_parse+0x14c>)
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <GPS_parse+0x150>)
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <GPS_parse+0x154>)
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <GPS_parse+0x158>)
 8001a40:	4a39      	ldr	r2, [pc, #228]	; (8001b28 <GPS_parse+0x15c>)
 8001a42:	493f      	ldr	r1, [pc, #252]	; (8001b40 <GPS_parse+0x174>)
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f009 f9c9 	bl	800addc <siscanf>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	e053      	b.n	8001af8 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001a50:	2206      	movs	r2, #6
 8001a52:	493c      	ldr	r1, [pc, #240]	; (8001b44 <GPS_parse+0x178>)
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f009 fa32 	bl	800aebe <strncmp>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d12f      	bne.n	8001ac0 <GPS_parse+0xf4>

	        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <GPS_parse+0x17c>)
 8001a62:	9303      	str	r3, [sp, #12]
 8001a64:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <GPS_parse+0x15c>)
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <GPS_parse+0x14c>)
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <GPS_parse+0x150>)
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <GPS_parse+0x154>)
 8001a72:	4a2c      	ldr	r2, [pc, #176]	; (8001b24 <GPS_parse+0x158>)
 8001a74:	4935      	ldr	r1, [pc, #212]	; (8001b4c <GPS_parse+0x180>)
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f009 f9b0 	bl	800addc <siscanf>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	dd3a      	ble.n	8001af8 <GPS_parse+0x12c>
	        {
				GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <GPS_parse+0x184>)
 8001a84:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a88:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <GPS_parse+0x184>)
 8001a8a:	7f1b      	ldrb	r3, [r3, #28]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a92:	f000 f871 	bl	8001b78 <GPS_nmea_to_dec>
 8001a96:	eef0 7a40 	vmov.f32	s15, s0
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <GPS_parse+0x184>)
 8001a9c:	edc3 7a01 	vstr	s15, [r3, #4]
				GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <GPS_parse+0x184>)
 8001aa2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <GPS_parse+0x184>)
 8001aa8:	7f5b      	ldrb	r3, [r3, #29]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	f000 f862 	bl	8001b78 <GPS_nmea_to_dec>
 8001ab4:	eef0 7a40 	vmov.f32	s15, s0
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <GPS_parse+0x184>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]

				return;
 8001abe:	e01b      	b.n	8001af8 <GPS_parse+0x12c>
			}
	    }
	    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001ac0:	2206      	movs	r2, #6
 8001ac2:	4924      	ldr	r1, [pc, #144]	; (8001b54 <GPS_parse+0x188>)
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f009 f9fa 	bl	800aebe <strncmp>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d113      	bne.n	8001af8 <GPS_parse+0x12c>

			if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <GPS_parse+0x18c>)
 8001ad2:	9305      	str	r3, [sp, #20]
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <GPS_parse+0x190>)
 8001ad6:	9304      	str	r3, [sp, #16]
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <GPS_parse+0x194>)
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <GPS_parse+0x170>)
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <GPS_parse+0x198>)
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <GPS_parse+0x19c>)
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <GPS_parse+0x1a0>)
 8001aea:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <GPS_parse+0x1a4>)
 8001aec:	4921      	ldr	r1, [pc, #132]	; (8001b74 <GPS_parse+0x1a8>)
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f009 f974 	bl	800addc <siscanf>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
				return;

	    }
	}
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	0800f220 	.word	0x0800f220
 8001b04:	20004d3c 	.word	0x20004d3c
 8001b08:	20004d38 	.word	0x20004d38
 8001b0c:	20004d34 	.word	0x20004d34
 8001b10:	20004d30 	.word	0x20004d30
 8001b14:	20004d2c 	.word	0x20004d2c
 8001b18:	20004d29 	.word	0x20004d29
 8001b1c:	20004d1c 	.word	0x20004d1c
 8001b20:	20004d28 	.word	0x20004d28
 8001b24:	20004d20 	.word	0x20004d20
 8001b28:	20004d24 	.word	0x20004d24
 8001b2c:	0800f228 	.word	0x0800f228
 8001b30:	0800f250 	.word	0x0800f250
 8001b34:	20004d48 	.word	0x20004d48
 8001b38:	20004d44 	.word	0x20004d44
 8001b3c:	20004d40 	.word	0x20004d40
 8001b40:	0800f258 	.word	0x0800f258
 8001b44:	0800f278 	.word	0x0800f278
 8001b48:	20004d4c 	.word	0x20004d4c
 8001b4c:	0800f280 	.word	0x0800f280
 8001b50:	20004d0c 	.word	0x20004d0c
 8001b54:	0800f29c 	.word	0x0800f29c
 8001b58:	20004d64 	.word	0x20004d64
 8001b5c:	20004d60 	.word	0x20004d60
 8001b60:	20004d5d 	.word	0x20004d5d
 8001b64:	20004d5c 	.word	0x20004d5c
 8001b68:	20004d58 	.word	0x20004d58
 8001b6c:	20004d54 	.word	0x20004d54
 8001b70:	20004d50 	.word	0x20004d50
 8001b74:	0800f2a4 	.word	0x0800f2a4

08001b78 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b82:	4603      	mov	r3, r0
 8001b84:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001b86:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b8a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001c0c <GPS_nmea_to_dec+0x94>
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b96:	ee17 3a90 	vmov	r3, s15
 8001b9a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2264      	movs	r2, #100	; 0x64
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bac:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb4:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001bb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bbc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001c10 <GPS_nmea_to_dec+0x98>
 8001bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc4:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	2b53      	cmp	r3, #83	; 0x53
 8001be2:	d002      	beq.n	8001bea <GPS_nmea_to_dec+0x72>
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	2b57      	cmp	r3, #87	; 0x57
 8001be8:	d105      	bne.n	8001bf6 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bee:	eef1 7a67 	vneg.f32	s15, s15
 8001bf2:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	ee07 3a90 	vmov	s15, r3
}
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	42c80000 	.word	0x42c80000
 8001c10:	42700000 	.word	0x42700000

08001c14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <MX_I2C1_Init+0x54>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c20:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_I2C1_Init+0x58>)
 8001c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <MX_I2C1_Init+0x50>)
 8001c52:	f001 fe83 	bl	800395c <HAL_I2C_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c5c:	f000 f91c 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20004f74 	.word	0x20004f74
 8001c68:	40005400 	.word	0x40005400
 8001c6c:	00061a80 	.word	0x00061a80

08001c70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_I2C_MspInit+0x84>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d12b      	bne.n	8001cea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cae:	23c0      	movs	r3, #192	; 0xc0
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <HAL_I2C_MspInit+0x8c>)
 8001cca:	f001 fca9 	bl	8003620 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001cea:	bf00      	nop
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020400 	.word	0x40020400

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d04:	f000 fe4a 	bl	800299c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d08:	f000 f836 	bl	8001d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0c:	f7ff fcf2 	bl	80016f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d10:	f7ff ff80 	bl	8001c14 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d14:	f000 f8e0 	bl	8001ed8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d18:	f000 fda4 	bl	8002864 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001d1c:	f7ff f96e 	bl	8000ffc <MX_ADC1_Init>
  MX_FATFS_Init();
 8001d20:	f004 f8a4 	bl	8005e6c <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001d24:	f000 f892 	bl	8001e4c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8001d28:	f7ff fd66 	bl	80017f8 <GPS_Init>
  SSD1306_Init();
 8001d2c:	f000 f952 	bl	8001fd4 <SSD1306_Init>
  SSD1306_Clear();
 8001d30:	f000 fb75 	bl	800241e <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8001d34:	f000 fa12 	bl	800215c <SSD1306_UpdateScreen>

  initSdCard();
 8001d38:	f000 f8b4 	bl	8001ea4 <initSdCard>

  __HAL_UART_ENABLE_IT(&huart1, UART_FLAG_RXNE);
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <main+0x70>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <main+0x70>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	615a      	str	r2, [r3, #20]
  __HAL_ADC_ENABLE_IT(&hadc1, ADC_FLAG_EOC);
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <main+0x74>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <main+0x74>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0202 	orr.w	r2, r2, #2
 8001d5a:	605a      	str	r2, [r3, #4]

  HAL_ADC_Start_IT(&hadc1);
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <main+0x74>)
 8001d5e:	f000 fea3 	bl	8002aa8 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001d62:	f004 fea7 	bl	8006ab4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001d66:	f7ff f9f3 	bl	8001150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001d6a:	f004 fec7 	bl	8006afc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <main+0x6e>
 8001d70:	200054d0 	.word	0x200054d0
 8001d74:	20004cb4 	.word	0x20004cb4

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	; 0x50
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	2230      	movs	r2, #48	; 0x30
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f008 f980 	bl	800a08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <SystemClock_Config+0xcc>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <SystemClock_Config+0xcc>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <SystemClock_Config+0xcc>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <SystemClock_Config+0xd0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <SystemClock_Config+0xd0>)
 8001dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <SystemClock_Config+0xd0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de0:	2310      	movs	r3, #16
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de4:	2302      	movs	r3, #2
 8001de6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dec:	2308      	movs	r3, #8
 8001dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001df0:	2354      	movs	r3, #84	; 0x54
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df4:	2302      	movs	r3, #2
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001df8:	2305      	movs	r3, #5
 8001dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfc:	f107 0320 	add.w	r3, r7, #32
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 fb25 	bl	8004450 <HAL_RCC_OscConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e0c:	f000 f844 	bl	8001e98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e10:	230f      	movs	r3, #15
 8001e12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e14:	2302      	movs	r3, #2
 8001e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 fd87 	bl	8004940 <HAL_RCC_ClockConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e38:	f000 f82e 	bl	8001e98 <Error_Handler>
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3750      	adds	r7, #80	; 0x50
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40007000 	.word	0x40007000

08001e4c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2105      	movs	r1, #5
 8001e54:	2025      	movs	r0, #37	; 0x25
 8001e56:	f001 fb27 	bl	80034a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e5a:	2025      	movs	r0, #37	; 0x25
 8001e5c:	f001 fb40 	bl	80034e0 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2105      	movs	r1, #5
 8001e64:	2012      	movs	r0, #18
 8001e66:	f001 fb1f 	bl	80034a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e6a:	2012      	movs	r0, #18
 8001e6c:	f001 fb38 	bl	80034e0 <HAL_NVIC_EnableIRQ>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e86:	f000 fdab 	bl	80029e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40000400 	.word	0x40000400

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <Error_Handler+0x8>
	...

08001ea4 <initSdCard>:
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

bool initSdCard()
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <initSdCard+0x28>)
 8001eac:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <initSdCard+0x2c>)
 8001eae:	f004 fcb7 	bl	8006820 <f_mount>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <initSdCard+0x30>)
 8001eb8:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <initSdCard+0x30>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <initSdCard+0x22>
	{
	   	return false;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <initSdCard+0x24>
	} else
	{
	   	return true;
 8001ec6:	2301      	movs	r3, #1
	}
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	0800f2c4 	.word	0x0800f2c4
 8001ed0:	20004fc8 	.word	0x20004fc8
 8001ed4:	200051fc 	.word	0x200051fc

08001ed8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001ede:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <MX_SPI1_Init+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001ee4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001f0c:	2230      	movs	r2, #48	; 0x30
 8001f0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001f24:	220a      	movs	r2, #10
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_SPI1_Init+0x64>)
 8001f2a:	f002 ff0b 	bl	8004d44 <HAL_SPI_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f34:	f7ff ffb0 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20005430 	.word	0x20005430
 8001f40:	40013000 	.word	0x40013000

08001f44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_SPI_MspInit+0x84>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d12b      	bne.n	8001fbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f9e:	23e0      	movs	r3, #224	; 0xe0
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fae:	2305      	movs	r3, #5
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <HAL_SPI_MspInit+0x8c>)
 8001fba:	f001 fb31 	bl	8003620 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40013000 	.word	0x40013000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001fda:	f000 fa29 	bl	8002430 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fde:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	2178      	movs	r1, #120	; 0x78
 8001fe6:	485b      	ldr	r0, [pc, #364]	; (8002154 <SSD1306_Init+0x180>)
 8001fe8:	f001 fefa 	bl	8003de0 <HAL_I2C_IsDeviceReady>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e0a9      	b.n	800214a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001ff6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001ffa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ffc:	e002      	b.n	8002004 <SSD1306_Init+0x30>
		p--;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3b01      	subs	r3, #1
 8002002:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800200a:	22ae      	movs	r2, #174	; 0xae
 800200c:	2100      	movs	r1, #0
 800200e:	2078      	movs	r0, #120	; 0x78
 8002010:	f000 fa6c 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002014:	2220      	movs	r2, #32
 8002016:	2100      	movs	r1, #0
 8002018:	2078      	movs	r0, #120	; 0x78
 800201a:	f000 fa67 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800201e:	2210      	movs	r2, #16
 8002020:	2100      	movs	r1, #0
 8002022:	2078      	movs	r0, #120	; 0x78
 8002024:	f000 fa62 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002028:	22b0      	movs	r2, #176	; 0xb0
 800202a:	2100      	movs	r1, #0
 800202c:	2078      	movs	r0, #120	; 0x78
 800202e:	f000 fa5d 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002032:	22c8      	movs	r2, #200	; 0xc8
 8002034:	2100      	movs	r1, #0
 8002036:	2078      	movs	r0, #120	; 0x78
 8002038:	f000 fa58 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2078      	movs	r0, #120	; 0x78
 8002042:	f000 fa53 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002046:	2210      	movs	r2, #16
 8002048:	2100      	movs	r1, #0
 800204a:	2078      	movs	r0, #120	; 0x78
 800204c:	f000 fa4e 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	2100      	movs	r1, #0
 8002054:	2078      	movs	r0, #120	; 0x78
 8002056:	f000 fa49 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800205a:	2281      	movs	r2, #129	; 0x81
 800205c:	2100      	movs	r1, #0
 800205e:	2078      	movs	r0, #120	; 0x78
 8002060:	f000 fa44 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002064:	22ff      	movs	r2, #255	; 0xff
 8002066:	2100      	movs	r1, #0
 8002068:	2078      	movs	r0, #120	; 0x78
 800206a:	f000 fa3f 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800206e:	22a1      	movs	r2, #161	; 0xa1
 8002070:	2100      	movs	r1, #0
 8002072:	2078      	movs	r0, #120	; 0x78
 8002074:	f000 fa3a 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002078:	22a6      	movs	r2, #166	; 0xa6
 800207a:	2100      	movs	r1, #0
 800207c:	2078      	movs	r0, #120	; 0x78
 800207e:	f000 fa35 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002082:	22a8      	movs	r2, #168	; 0xa8
 8002084:	2100      	movs	r1, #0
 8002086:	2078      	movs	r0, #120	; 0x78
 8002088:	f000 fa30 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800208c:	223f      	movs	r2, #63	; 0x3f
 800208e:	2100      	movs	r1, #0
 8002090:	2078      	movs	r0, #120	; 0x78
 8002092:	f000 fa2b 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002096:	22a4      	movs	r2, #164	; 0xa4
 8002098:	2100      	movs	r1, #0
 800209a:	2078      	movs	r0, #120	; 0x78
 800209c:	f000 fa26 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80020a0:	22d3      	movs	r2, #211	; 0xd3
 80020a2:	2100      	movs	r1, #0
 80020a4:	2078      	movs	r0, #120	; 0x78
 80020a6:	f000 fa21 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2078      	movs	r0, #120	; 0x78
 80020b0:	f000 fa1c 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80020b4:	22d5      	movs	r2, #213	; 0xd5
 80020b6:	2100      	movs	r1, #0
 80020b8:	2078      	movs	r0, #120	; 0x78
 80020ba:	f000 fa17 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80020be:	22f0      	movs	r2, #240	; 0xf0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2078      	movs	r0, #120	; 0x78
 80020c4:	f000 fa12 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80020c8:	22d9      	movs	r2, #217	; 0xd9
 80020ca:	2100      	movs	r1, #0
 80020cc:	2078      	movs	r0, #120	; 0x78
 80020ce:	f000 fa0d 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80020d2:	2222      	movs	r2, #34	; 0x22
 80020d4:	2100      	movs	r1, #0
 80020d6:	2078      	movs	r0, #120	; 0x78
 80020d8:	f000 fa08 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80020dc:	22da      	movs	r2, #218	; 0xda
 80020de:	2100      	movs	r1, #0
 80020e0:	2078      	movs	r0, #120	; 0x78
 80020e2:	f000 fa03 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80020e6:	2212      	movs	r2, #18
 80020e8:	2100      	movs	r1, #0
 80020ea:	2078      	movs	r0, #120	; 0x78
 80020ec:	f000 f9fe 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020f0:	22db      	movs	r2, #219	; 0xdb
 80020f2:	2100      	movs	r1, #0
 80020f4:	2078      	movs	r0, #120	; 0x78
 80020f6:	f000 f9f9 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020fa:	2220      	movs	r2, #32
 80020fc:	2100      	movs	r1, #0
 80020fe:	2078      	movs	r0, #120	; 0x78
 8002100:	f000 f9f4 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002104:	228d      	movs	r2, #141	; 0x8d
 8002106:	2100      	movs	r1, #0
 8002108:	2078      	movs	r0, #120	; 0x78
 800210a:	f000 f9ef 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800210e:	2214      	movs	r2, #20
 8002110:	2100      	movs	r1, #0
 8002112:	2078      	movs	r0, #120	; 0x78
 8002114:	f000 f9ea 	bl	80024ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002118:	22af      	movs	r2, #175	; 0xaf
 800211a:	2100      	movs	r1, #0
 800211c:	2078      	movs	r0, #120	; 0x78
 800211e:	f000 f9e5 	bl	80024ec <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002122:	222e      	movs	r2, #46	; 0x2e
 8002124:	2100      	movs	r1, #0
 8002126:	2078      	movs	r0, #120	; 0x78
 8002128:	f000 f9e0 	bl	80024ec <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800212c:	2000      	movs	r0, #0
 800212e:	f000 f843 	bl	80021b8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002132:	f000 f813 	bl	800215c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <SSD1306_Init+0x184>)
 8002138:	2200      	movs	r2, #0
 800213a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <SSD1306_Init+0x184>)
 800213e:	2200      	movs	r2, #0
 8002140:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <SSD1306_Init+0x184>)
 8002144:	2201      	movs	r2, #1
 8002146:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002148:	2301      	movs	r3, #1
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20004f74 	.word	0x20004f74
 8002158:	2000065c 	.word	0x2000065c

0800215c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002162:	2300      	movs	r3, #0
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	e01d      	b.n	80021a4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	3b50      	subs	r3, #80	; 0x50
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	2100      	movs	r1, #0
 8002172:	2078      	movs	r0, #120	; 0x78
 8002174:	f000 f9ba 	bl	80024ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2078      	movs	r0, #120	; 0x78
 800217e:	f000 f9b5 	bl	80024ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002182:	2210      	movs	r2, #16
 8002184:	2100      	movs	r1, #0
 8002186:	2078      	movs	r0, #120	; 0x78
 8002188:	f000 f9b0 	bl	80024ec <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	01db      	lsls	r3, r3, #7
 8002190:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <SSD1306_UpdateScreen+0x58>)
 8002192:	441a      	add	r2, r3
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	2078      	movs	r0, #120	; 0x78
 800219a:	f000 f95f 	bl	800245c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	3301      	adds	r3, #1
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	2b07      	cmp	r3, #7
 80021a8:	d9de      	bls.n	8002168 <SSD1306_UpdateScreen+0xc>
	}
}
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000025c 	.word	0x2000025c

080021b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <SSD1306_Fill+0x14>
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <SSD1306_Fill+0x16>
 80021cc:	23ff      	movs	r3, #255	; 0xff
 80021ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d2:	4619      	mov	r1, r3
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <SSD1306_Fill+0x2c>)
 80021d6:	f007 ff59 	bl	800a08c <memset>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000025c 	.word	0x2000025c

080021e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
 80021f2:	460b      	mov	r3, r1
 80021f4:	80bb      	strh	r3, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	70fb      	strb	r3, [r7, #3]
	if (
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	2b7f      	cmp	r3, #127	; 0x7f
 80021fe:	d848      	bhi.n	8002292 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	2b3f      	cmp	r3, #63	; 0x3f
 8002204:	d845      	bhi.n	8002292 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <SSD1306_DrawPixel+0xb8>)
 8002208:	791b      	ldrb	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d11a      	bne.n	8002258 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	88bb      	ldrh	r3, [r7, #4]
 8002226:	08db      	lsrs	r3, r3, #3
 8002228:	b298      	uxth	r0, r3
 800222a:	4603      	mov	r3, r0
 800222c:	01db      	lsls	r3, r3, #7
 800222e:	4413      	add	r3, r2
 8002230:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <SSD1306_DrawPixel+0xbc>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	b25a      	sxtb	r2, r3
 8002236:	88bb      	ldrh	r3, [r7, #4]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	b25b      	sxtb	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b259      	sxtb	r1, r3
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	4603      	mov	r3, r0
 800224c:	01db      	lsls	r3, r3, #7
 800224e:	4413      	add	r3, r2
 8002250:	b2c9      	uxtb	r1, r1
 8002252:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <SSD1306_DrawPixel+0xbc>)
 8002254:	54d1      	strb	r1, [r2, r3]
 8002256:	e01d      	b.n	8002294 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002258:	88fa      	ldrh	r2, [r7, #6]
 800225a:	88bb      	ldrh	r3, [r7, #4]
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	b298      	uxth	r0, r3
 8002260:	4603      	mov	r3, r0
 8002262:	01db      	lsls	r3, r3, #7
 8002264:	4413      	add	r3, r2
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <SSD1306_DrawPixel+0xbc>)
 8002268:	5cd3      	ldrb	r3, [r2, r3]
 800226a:	b25a      	sxtb	r2, r3
 800226c:	88bb      	ldrh	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	b25b      	sxtb	r3, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	b25b      	sxtb	r3, r3
 800227e:	4013      	ands	r3, r2
 8002280:	b259      	sxtb	r1, r3
 8002282:	88fa      	ldrh	r2, [r7, #6]
 8002284:	4603      	mov	r3, r0
 8002286:	01db      	lsls	r3, r3, #7
 8002288:	4413      	add	r3, r2
 800228a:	b2c9      	uxtb	r1, r1
 800228c:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SSD1306_DrawPixel+0xbc>)
 800228e:	54d1      	strb	r1, [r2, r3]
 8002290:	e000      	b.n	8002294 <SSD1306_DrawPixel+0xac>
		return;
 8002292:	bf00      	nop
	}
}
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	2000065c 	.word	0x2000065c
 80022a4:	2000025c 	.word	0x2000025c

080022a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	460a      	mov	r2, r1
 80022b2:	80fb      	strh	r3, [r7, #6]
 80022b4:	4613      	mov	r3, r2
 80022b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <SSD1306_GotoXY+0x28>)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <SSD1306_GotoXY+0x28>)
 80022c0:	88bb      	ldrh	r3, [r7, #4]
 80022c2:	8053      	strh	r3, [r2, #2]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	2000065c 	.word	0x2000065c

080022d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022e4:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <SSD1306_Putc+0xfc>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
	if (
 80022f0:	2b7f      	cmp	r3, #127	; 0x7f
 80022f2:	dc07      	bgt.n	8002304 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80022f4:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <SSD1306_Putc+0xfc>)
 80022f6:	885b      	ldrh	r3, [r3, #2]
 80022f8:	461a      	mov	r2, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	785b      	ldrb	r3, [r3, #1]
 80022fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002300:	2b3f      	cmp	r3, #63	; 0x3f
 8002302:	dd01      	ble.n	8002308 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002304:	2300      	movs	r3, #0
 8002306:	e05e      	b.n	80023c6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e04b      	b.n	80023a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	3b20      	subs	r3, #32
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	7849      	ldrb	r1, [r1, #1]
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4619      	mov	r1, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	440b      	add	r3, r1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	e030      	b.n	8002394 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d010      	beq.n	8002364 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <SSD1306_Putc+0xfc>)
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	b29b      	uxth	r3, r3
 800234a:	4413      	add	r3, r2
 800234c:	b298      	uxth	r0, r3
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <SSD1306_Putc+0xfc>)
 8002350:	885a      	ldrh	r2, [r3, #2]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4413      	add	r3, r2
 8002358:	b29b      	uxth	r3, r3
 800235a:	79ba      	ldrb	r2, [r7, #6]
 800235c:	4619      	mov	r1, r3
 800235e:	f7ff ff43 	bl	80021e8 <SSD1306_DrawPixel>
 8002362:	e014      	b.n	800238e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <SSD1306_Putc+0xfc>)
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4413      	add	r3, r2
 800236e:	b298      	uxth	r0, r3
 8002370:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <SSD1306_Putc+0xfc>)
 8002372:	885a      	ldrh	r2, [r3, #2]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	b29b      	uxth	r3, r3
 8002378:	4413      	add	r3, r2
 800237a:	b299      	uxth	r1, r3
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf0c      	ite	eq
 8002382:	2301      	moveq	r3, #1
 8002384:	2300      	movne	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	f7ff ff2d 	bl	80021e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	3301      	adds	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4293      	cmp	r3, r2
 800239e:	d3c8      	bcc.n	8002332 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	461a      	mov	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d3ad      	bcc.n	800230e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <SSD1306_Putc+0xfc>)
 80023b4:	881a      	ldrh	r2, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4413      	add	r3, r2
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <SSD1306_Putc+0xfc>)
 80023c2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80023c4:	79fb      	ldrb	r3, [r7, #7]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000065c 	.word	0x2000065c

080023d4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	4613      	mov	r3, r2
 80023e0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80023e2:	e012      	b.n	800240a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	79fa      	ldrb	r2, [r7, #7]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff71 	bl	80022d4 <SSD1306_Putc>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d002      	beq.n	8002404 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	e008      	b.n	8002416 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1e8      	bne.n	80023e4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	781b      	ldrb	r3, [r3, #0]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff fec8 	bl	80021b8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002428:	f7ff fe98 	bl	800215c <SSD1306_UpdateScreen>
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <ssd1306_I2C_Init+0x28>)
 8002438:	607b      	str	r3, [r7, #4]
	while(p>0)
 800243a:	e002      	b.n	8002442 <ssd1306_I2C_Init+0x12>
		p--;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f9      	bne.n	800243c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	0003d090 	.word	0x0003d090

0800245c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b0c7      	sub	sp, #284	; 0x11c
 8002460:	af02      	add	r7, sp, #8
 8002462:	4604      	mov	r4, r0
 8002464:	4608      	mov	r0, r1
 8002466:	4639      	mov	r1, r7
 8002468:	600a      	str	r2, [r1, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	4622      	mov	r2, r4
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	1dbb      	adds	r3, r7, #6
 8002474:	4602      	mov	r2, r0
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	460a      	mov	r2, r1
 800247c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800247e:	f107 030c 	add.w	r3, r7, #12
 8002482:	1dba      	adds	r2, r7, #6
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002488:	2300      	movs	r3, #0
 800248a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800248e:	e010      	b.n	80024b2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002490:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002494:	463a      	mov	r2, r7
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	441a      	add	r2, r3
 800249a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800249e:	3301      	adds	r3, #1
 80024a0:	7811      	ldrb	r1, [r2, #0]
 80024a2:	f107 020c 	add.w	r2, r7, #12
 80024a6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80024a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024ac:	3301      	adds	r3, #1
 80024ae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	1d3a      	adds	r2, r7, #4
 80024ba:	8812      	ldrh	r2, [r2, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8e7      	bhi.n	8002490 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b299      	uxth	r1, r3
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f107 020c 	add.w	r2, r7, #12
 80024d2:	200a      	movs	r0, #10
 80024d4:	9000      	str	r0, [sp, #0]
 80024d6:	4804      	ldr	r0, [pc, #16]	; (80024e8 <ssd1306_I2C_WriteMulti+0x8c>)
 80024d8:	f001 fb84 	bl	8003be4 <HAL_I2C_Master_Transmit>
}
 80024dc:	bf00      	nop
 80024de:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20004f74 	.word	0x20004f74

080024ec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	460b      	mov	r3, r1
 80024f8:	71bb      	strb	r3, [r7, #6]
 80024fa:	4613      	mov	r3, r2
 80024fc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002502:	797b      	ldrb	r3, [r7, #5]
 8002504:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	b299      	uxth	r1, r3
 800250a:	f107 020c 	add.w	r2, r7, #12
 800250e:	230a      	movs	r3, #10
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2302      	movs	r3, #2
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <ssd1306_I2C_Write+0x38>)
 8002516:	f001 fb65 	bl	8003be4 <HAL_I2C_Master_Transmit>
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20004f74 	.word	0x20004f74

08002528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_MspInit+0x54>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_MspInit+0x54>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_MspInit+0x54>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_MspInit+0x54>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <HAL_MspInit+0x54>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_MspInit+0x54>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	210f      	movs	r1, #15
 800256a:	f06f 0001 	mvn.w	r0, #1
 800256e:	f000 ff9b 	bl	80034a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	; 0x30
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002590:	2200      	movs	r2, #0
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	201d      	movs	r0, #29
 8002596:	f000 ff87 	bl	80034a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800259a:	201d      	movs	r0, #29
 800259c:	f000 ffa0 	bl	80034e0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_InitTick+0xa4>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4a1e      	ldr	r2, [pc, #120]	; (8002624 <HAL_InitTick+0xa4>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	6413      	str	r3, [r2, #64]	; 0x40
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_InitTick+0xa4>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025bc:	f107 0210 	add.w	r2, r7, #16
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 fb8a 	bl	8004ce0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80025cc:	f002 fb60 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 80025d0:	4603      	mov	r3, r0
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	4a13      	ldr	r2, [pc, #76]	; (8002628 <HAL_InitTick+0xa8>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9b      	lsrs	r3, r3, #18
 80025e0:	3b01      	subs	r3, #1
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_InitTick+0xac>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_InitTick+0xb0>)
 80025e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_InitTick+0xac>)
 80025ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025f0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80025f2:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_InitTick+0xac>)
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_InitTick+0xac>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_InitTick+0xac>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002604:	4809      	ldr	r0, [pc, #36]	; (800262c <HAL_InitTick+0xac>)
 8002606:	f002 fc26 	bl	8004e56 <HAL_TIM_Base_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d104      	bne.n	800261a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002610:	4806      	ldr	r0, [pc, #24]	; (800262c <HAL_InitTick+0xac>)
 8002612:	f002 fc79 	bl	8004f08 <HAL_TIM_Base_Start_IT>
 8002616:	4603      	mov	r3, r0
 8002618:	e000      	b.n	800261c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	3730      	adds	r7, #48	; 0x30
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	431bde83 	.word	0x431bde83
 800262c:	20005488 	.word	0x20005488
 8002630:	40000400 	.word	0x40000400

08002634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <NMI_Handler+0x4>

0800263a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <HardFault_Handler+0x4>

08002640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <MemManage_Handler+0x4>

08002646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <BusFault_Handler+0x4>

0800264c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <UsageFault_Handler+0x4>

08002652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <ADC_IRQHandler+0x10>)
 8002666:	f000 fadd 	bl	8002c24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20004cb4 	.word	0x20004cb4

08002674 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM3_IRQHandler+0x10>)
 800267a:	f002 fca7 	bl	8004fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20005488 	.word	0x20005488

08002688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_RxCpltCallback(&huart1);
 800268c:	4803      	ldr	r0, [pc, #12]	; (800269c <USART1_IRQHandler+0x14>)
 800268e:	f000 f807 	bl	80026a0 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002692:	4802      	ldr	r0, [pc, #8]	; (800269c <USART1_IRQHandler+0x14>)
 8002694:	f002 fedc 	bl	8005450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200054d0 	.word	0x200054d0

080026a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 80026a8:	f7ff f8b4 	bl	8001814 <GPS_UART_CallBack>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
	return 1;
 80026b8:	2301      	movs	r3, #1
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_kill>:

int _kill(int pid, int sig)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026ce:	f007 fca5 	bl	800a01c <__errno>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2216      	movs	r2, #22
 80026d6:	601a      	str	r2, [r3, #0]
	return -1;
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <_exit>:

void _exit (int status)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ffe7 	bl	80026c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026f6:	e7fe      	b.n	80026f6 <_exit+0x12>

080026f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e00a      	b.n	8002720 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800270a:	f3af 8000 	nop.w
 800270e:	4601      	mov	r1, r0
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	60ba      	str	r2, [r7, #8]
 8002716:	b2ca      	uxtb	r2, r1
 8002718:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	dbf0      	blt.n	800270a <_read+0x12>
	}

return len;
 8002728:	687b      	ldr	r3, [r7, #4]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e009      	b.n	8002758 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	60ba      	str	r2, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	dbf1      	blt.n	8002744 <_write+0x12>
	}
	return len;
 8002760:	687b      	ldr	r3, [r7, #4]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_close>:

int _close(int file)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
	return -1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002792:	605a      	str	r2, [r3, #4]
	return 0;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <_isatty>:

int _isatty(int file)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
	return 1;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
	return 0;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <_sbrk+0x5c>)
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <_sbrk+0x60>)
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <_sbrk+0x64>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <_sbrk+0x68>)
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	429a      	cmp	r2, r3
 8002802:	d207      	bcs.n	8002814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002804:	f007 fc0a 	bl	800a01c <__errno>
 8002808:	4603      	mov	r3, r0
 800280a:	220c      	movs	r2, #12
 800280c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
 8002812:	e009      	b.n	8002828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <_sbrk+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	4a05      	ldr	r2, [pc, #20]	; (8002838 <_sbrk+0x64>)
 8002824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20010000 	.word	0x20010000
 8002834:	00000400 	.word	0x00000400
 8002838:	20000664 	.word	0x20000664
 800283c:	200059d8 	.word	0x200059d8

08002840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <SystemInit+0x20>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <SystemInit+0x20>)
 800284c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <MX_USART1_UART_Init+0x50>)
 800286c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002870:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 800288a:	220c      	movs	r2, #12
 800288c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 800289c:	f002 fd5a 	bl	8005354 <HAL_UART_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028a6:	f7ff faf7 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200054d0 	.word	0x200054d0
 80028b4:	40011000 	.word	0x40011000

080028b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_UART_MspInit+0x84>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d12c      	bne.n	8002934 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_UART_MspInit+0x88>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_UART_MspInit+0x88>)
 80028e4:	f043 0310 	orr.w	r3, r3, #16
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_UART_MspInit+0x88>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_UART_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_UART_MspInit+0x88>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_UART_MspInit+0x88>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002912:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002924:	2307      	movs	r3, #7
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4619      	mov	r1, r3
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <HAL_UART_MspInit+0x8c>)
 8002930:	f000 fe76 	bl	8003620 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002934:	bf00      	nop
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40011000 	.word	0x40011000
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000

08002948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800294c:	480d      	ldr	r0, [pc, #52]	; (8002984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800294e:	490e      	ldr	r1, [pc, #56]	; (8002988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002950:	4a0e      	ldr	r2, [pc, #56]	; (800298c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002954:	e002      	b.n	800295c <LoopCopyDataInit>

08002956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295a:	3304      	adds	r3, #4

0800295c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800295c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002960:	d3f9      	bcc.n	8002956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002962:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002964:	4c0b      	ldr	r4, [pc, #44]	; (8002994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002968:	e001      	b.n	800296e <LoopFillZerobss>

0800296a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800296c:	3204      	adds	r2, #4

0800296e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002970:	d3fb      	bcc.n	800296a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002972:	f7ff ff65 	bl	8002840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002976:	f007 fb57 	bl	800a028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800297a:	f7ff f9c1 	bl	8001d00 <main>
  bx  lr    
 800297e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002980:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002988:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800298c:	08010d54 	.word	0x08010d54
  ldr r2, =_sbss
 8002990:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002994:	200059d4 	.word	0x200059d4

08002998 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002998:	e7fe      	b.n	8002998 <DMA1_Stream0_IRQHandler>
	...

0800299c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_Init+0x40>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <HAL_Init+0x40>)
 80029a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_Init+0x40>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_Init+0x40>)
 80029b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_Init+0x40>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a07      	ldr	r2, [pc, #28]	; (80029dc <HAL_Init+0x40>)
 80029be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c4:	2003      	movs	r0, #3
 80029c6:	f000 fd64 	bl	8003492 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7ff fdd8 	bl	8002580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d0:	f7ff fdaa 	bl	8002528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023c00 	.word	0x40023c00

080029e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_IncTick+0x20>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_IncTick+0x24>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_IncTick+0x24>)
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000018 	.word	0x20000018
 8002a04:	20005514 	.word	0x20005514

08002a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_GetTick+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20005514 	.word	0x20005514

08002a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e033      	b.n	8002a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe fb2e 	bl	80010a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a66:	f023 0302 	bic.w	r3, r3, #2
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fb5a 	bl	800312c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a8e:	e001      	b.n	8002a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Start_IT+0x1a>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0a1      	b.n	8002c06 <HAL_ADC_Start_IT+0x15e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d018      	beq.n	8002b0a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_ADC_Start_IT+0x16c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <HAL_ADC_Start_IT+0x170>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0c9a      	lsrs	r2, r3, #18
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d169      	bne.n	8002bec <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	d106      	bne.n	8002b66 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	f023 0206 	bic.w	r2, r3, #6
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
 8002b64:	e002      	b.n	8002b6c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b74:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <HAL_ADC_Start_IT+0x174>)
 8002b76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b80:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b90:	f043 0320 	orr.w	r3, r3, #32
 8002b94:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d129      	bne.n	8002c04 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e020      	b.n	8002c04 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <HAL_ADC_Start_IT+0x178>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d11b      	bne.n	8002c04 <HAL_ADC_Start_IT+0x15c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d114      	bne.n	8002c04 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	e00b      	b.n	8002c04 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 0210 	orr.w	r2, r3, #16
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000010 	.word	0x20000010
 8002c18:	431bde83 	.word	0x431bde83
 8002c1c:	40012300 	.word	0x40012300
 8002c20:	40012000 	.word	0x40012000

08002c24 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d049      	beq.n	8002cfa <HAL_ADC_IRQHandler+0xd6>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d046      	beq.n	8002cfa <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d12b      	bne.n	8002cea <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d127      	bne.n	8002cea <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d119      	bne.n	8002cea <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0220 	bic.w	r2, r2, #32
 8002cc4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fe fa1c 	bl	8001128 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0212 	mvn.w	r2, #18
 8002cf8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b80      	cmp	r3, #128	; 0x80
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d057      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x1b8>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d054      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d139      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d12b      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d124      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d11d      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d119      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 faa9 	bl	8003324 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 020c 	mvn.w	r2, #12
 8002dda:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	bf0c      	ite	eq
 8002dea:	2301      	moveq	r3, #1
 8002dec:	2300      	movne	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d017      	beq.n	8002e3e <HAL_ADC_IRQHandler+0x21a>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d014      	beq.n	8002e3e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10d      	bne.n	8002e3e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f846 	bl	8002ec0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0201 	mvn.w	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d015      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x27a>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d012      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f043 0202 	orr.w	r2, r3, #2
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0220 	mvn.w	r2, #32
 8002e8c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f820 	bl	8002ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0220 	mvn.w	r2, #32
 8002e9c:	601a      	str	r2, [r3, #0]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x1c>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e105      	b.n	8003110 <HAL_ADC_ConfigChannel+0x228>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b09      	cmp	r3, #9
 8002f12:	d925      	bls.n	8002f60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68d9      	ldr	r1, [r3, #12]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	3b1e      	subs	r3, #30
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43da      	mvns	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	400a      	ands	r2, r1
 8002f38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68d9      	ldr	r1, [r3, #12]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4403      	add	r3, r0
 8002f52:	3b1e      	subs	r3, #30
 8002f54:	409a      	lsls	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	e022      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6919      	ldr	r1, [r3, #16]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	2207      	movs	r2, #7
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	400a      	ands	r2, r1
 8002f82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6919      	ldr	r1, [r3, #16]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4618      	mov	r0, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4403      	add	r3, r0
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d824      	bhi.n	8002ff8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b05      	subs	r3, #5
 8002fc0:	221f      	movs	r2, #31
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	400a      	ands	r2, r1
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b05      	subs	r3, #5
 8002fea:	fa00 f203 	lsl.w	r2, r0, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ff6:	e04c      	b.n	8003092 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	d824      	bhi.n	800304a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	3b23      	subs	r3, #35	; 0x23
 8003012:	221f      	movs	r2, #31
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43da      	mvns	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	400a      	ands	r2, r1
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	4618      	mov	r0, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	3b23      	subs	r3, #35	; 0x23
 800303c:	fa00 f203 	lsl.w	r2, r0, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
 8003048:	e023      	b.n	8003092 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	3b41      	subs	r3, #65	; 0x41
 800305c:	221f      	movs	r2, #31
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	400a      	ands	r2, r1
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	4618      	mov	r0, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	3b41      	subs	r3, #65	; 0x41
 8003086:	fa00 f203 	lsl.w	r2, r0, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003092:	4b22      	ldr	r3, [pc, #136]	; (800311c <HAL_ADC_ConfigChannel+0x234>)
 8003094:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a21      	ldr	r2, [pc, #132]	; (8003120 <HAL_ADC_ConfigChannel+0x238>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d109      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1cc>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b12      	cmp	r3, #18
 80030a6:	d105      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_ADC_ConfigChannel+0x238>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d123      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x21e>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d003      	beq.n	80030ce <HAL_ADC_ConfigChannel+0x1e6>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b11      	cmp	r3, #17
 80030cc:	d11b      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d111      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_ADC_ConfigChannel+0x23c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <HAL_ADC_ConfigChannel+0x240>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	0c9a      	lsrs	r2, r3, #18
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030f8:	e002      	b.n	8003100 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f9      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40012300 	.word	0x40012300
 8003120:	40012000 	.word	0x40012000
 8003124:	20000010 	.word	0x20000010
 8003128:	431bde83 	.word	0x431bde83

0800312c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003134:	4b79      	ldr	r3, [pc, #484]	; (800331c <ADC_Init+0x1f0>)
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	021a      	lsls	r2, r3, #8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	4a58      	ldr	r2, [pc, #352]	; (8003320 <ADC_Init+0x1f4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d022      	beq.n	800320a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	e00f      	b.n	800322a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003228:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0202 	bic.w	r2, r2, #2
 8003238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6899      	ldr	r1, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7e1b      	ldrb	r3, [r3, #24]
 8003244:	005a      	lsls	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003266:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003276:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	3b01      	subs	r3, #1
 8003284:	035a      	lsls	r2, r3, #13
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	e007      	b.n	80032a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	051a      	lsls	r2, r3, #20
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6899      	ldr	r1, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032e2:	025a      	lsls	r2, r3, #9
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	029a      	lsls	r2, r3, #10
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40012300 	.word	0x40012300
 8003320:	0f000001 	.word	0x0f000001

08003324 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336a:	4a04      	ldr	r2, [pc, #16]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60d3      	str	r3, [r2, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <__NVIC_GetPriorityGrouping+0x18>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0307 	and.w	r3, r3, #7
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db0b      	blt.n	80033c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	4907      	ldr	r1, [pc, #28]	; (80033d4 <__NVIC_EnableIRQ+0x38>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2001      	movs	r0, #1
 80033be:	fa00 f202 	lsl.w	r2, r0, r2
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	e000e100 	.word	0xe000e100

080033d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db0a      	blt.n	8003402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	490c      	ldr	r1, [pc, #48]	; (8003424 <__NVIC_SetPriority+0x4c>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	440b      	add	r3, r1
 80033fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003400:	e00a      	b.n	8003418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4908      	ldr	r1, [pc, #32]	; (8003428 <__NVIC_SetPriority+0x50>)
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	3b04      	subs	r3, #4
 8003410:	0112      	lsls	r2, r2, #4
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	440b      	add	r3, r1
 8003416:	761a      	strb	r2, [r3, #24]
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000e100 	.word	0xe000e100
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342c:	b480      	push	{r7}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f1c3 0307 	rsb	r3, r3, #7
 8003446:	2b04      	cmp	r3, #4
 8003448:	bf28      	it	cs
 800344a:	2304      	movcs	r3, #4
 800344c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3304      	adds	r3, #4
 8003452:	2b06      	cmp	r3, #6
 8003454:	d902      	bls.n	800345c <NVIC_EncodePriority+0x30>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3b03      	subs	r3, #3
 800345a:	e000      	b.n	800345e <NVIC_EncodePriority+0x32>
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003474:	f04f 31ff 	mov.w	r1, #4294967295
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	43d9      	mvns	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	4313      	orrs	r3, r2
         );
}
 8003486:	4618      	mov	r0, r3
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff4c 	bl	8003338 <__NVIC_SetPriorityGrouping>
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ba:	f7ff ff61 	bl	8003380 <__NVIC_GetPriorityGrouping>
 80034be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	6978      	ldr	r0, [r7, #20]
 80034c6:	f7ff ffb1 	bl	800342c <NVIC_EncodePriority>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff80 	bl	80033d8 <__NVIC_SetPriority>
}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff54 	bl	800339c <__NVIC_EnableIRQ>
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800350a:	f7ff fa7d 	bl	8002a08 <HAL_GetTick>
 800350e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d008      	beq.n	800352e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2280      	movs	r2, #128	; 0x80
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e052      	b.n	80035d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0216 	bic.w	r2, r2, #22
 800353c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800354c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_DMA_Abort+0x62>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0208 	bic.w	r2, r2, #8
 800356c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357e:	e013      	b.n	80035a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003580:	f7ff fa42 	bl	8002a08 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b05      	cmp	r3, #5
 800358c:	d90c      	bls.n	80035a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e015      	b.n	80035d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e4      	bne.n	8003580 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	223f      	movs	r2, #63	; 0x3f
 80035bc:	409a      	lsls	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d004      	beq.n	80035fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00c      	b.n	8003614 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2205      	movs	r2, #5
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e159      	b.n	80038f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800363c:	2201      	movs	r2, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	f040 8148 	bne.w	80038ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d005      	beq.n	8003672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366e:	2b02      	cmp	r3, #2
 8003670:	d130      	bne.n	80036d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a8:	2201      	movs	r2, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 0201 	and.w	r2, r3, #1
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d017      	beq.n	8003710 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d123      	bne.n	8003764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	08da      	lsrs	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3208      	adds	r2, #8
 8003724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	220f      	movs	r2, #15
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	08da      	lsrs	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3208      	adds	r2, #8
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0203 	and.w	r2, r3, #3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a2 	beq.w	80038ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	4b57      	ldr	r3, [pc, #348]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b54      	ldr	r3, [pc, #336]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c2:	4a52      	ldr	r2, [pc, #328]	; (800390c <HAL_GPIO_Init+0x2ec>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a49      	ldr	r2, [pc, #292]	; (8003910 <HAL_GPIO_Init+0x2f0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d019      	beq.n	8003822 <HAL_GPIO_Init+0x202>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a48      	ldr	r2, [pc, #288]	; (8003914 <HAL_GPIO_Init+0x2f4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_GPIO_Init+0x1fe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a47      	ldr	r2, [pc, #284]	; (8003918 <HAL_GPIO_Init+0x2f8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00d      	beq.n	800381a <HAL_GPIO_Init+0x1fa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a46      	ldr	r2, [pc, #280]	; (800391c <HAL_GPIO_Init+0x2fc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <HAL_GPIO_Init+0x1f6>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a45      	ldr	r2, [pc, #276]	; (8003920 <HAL_GPIO_Init+0x300>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_GPIO_Init+0x1f2>
 800380e:	2304      	movs	r3, #4
 8003810:	e008      	b.n	8003824 <HAL_GPIO_Init+0x204>
 8003812:	2307      	movs	r3, #7
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x204>
 8003816:	2303      	movs	r3, #3
 8003818:	e004      	b.n	8003824 <HAL_GPIO_Init+0x204>
 800381a:	2302      	movs	r3, #2
 800381c:	e002      	b.n	8003824 <HAL_GPIO_Init+0x204>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_GPIO_Init+0x204>
 8003822:	2300      	movs	r3, #0
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	f002 0203 	and.w	r2, r2, #3
 800382a:	0092      	lsls	r2, r2, #2
 800382c:	4093      	lsls	r3, r2
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003834:	4935      	ldr	r1, [pc, #212]	; (800390c <HAL_GPIO_Init+0x2ec>)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	3302      	adds	r3, #2
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003842:	4b38      	ldr	r3, [pc, #224]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003866:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_GPIO_Init+0x304>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ba:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <HAL_GPIO_Init+0x304>)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c0:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_GPIO_Init+0x304>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e4:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <HAL_GPIO_Init+0x304>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3301      	adds	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	f67f aea2 	bls.w	800363c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3724      	adds	r7, #36	; 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	40013800 	.word	0x40013800
 8003910:	40020000 	.word	0x40020000
 8003914:	40020400 	.word	0x40020400
 8003918:	40020800 	.word	0x40020800
 800391c:	40020c00 	.word	0x40020c00
 8003920:	40021000 	.word	0x40021000
 8003924:	40013c00 	.word	0x40013c00

08003928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	807b      	strh	r3, [r7, #2]
 8003934:	4613      	mov	r3, r2
 8003936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003938:	787b      	ldrb	r3, [r7, #1]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003944:	e003      	b.n	800394e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003946:	887b      	ldrh	r3, [r7, #2]
 8003948:	041a      	lsls	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	619a      	str	r2, [r3, #24]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e12b      	b.n	8003bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe f974 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c0:	f001 f966 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 80039c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4a81      	ldr	r2, [pc, #516]	; (8003bd0 <HAL_I2C_Init+0x274>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d807      	bhi.n	80039e0 <HAL_I2C_Init+0x84>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a80      	ldr	r2, [pc, #512]	; (8003bd4 <HAL_I2C_Init+0x278>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e006      	b.n	80039ee <HAL_I2C_Init+0x92>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a7d      	ldr	r2, [pc, #500]	; (8003bd8 <HAL_I2C_Init+0x27c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0e7      	b.n	8003bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a78      	ldr	r2, [pc, #480]	; (8003bdc <HAL_I2C_Init+0x280>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0c9b      	lsrs	r3, r3, #18
 8003a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a6a      	ldr	r2, [pc, #424]	; (8003bd0 <HAL_I2C_Init+0x274>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d802      	bhi.n	8003a30 <HAL_I2C_Init+0xd4>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	e009      	b.n	8003a44 <HAL_I2C_Init+0xe8>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	4a69      	ldr	r2, [pc, #420]	; (8003be0 <HAL_I2C_Init+0x284>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	3301      	adds	r3, #1
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	495c      	ldr	r1, [pc, #368]	; (8003bd0 <HAL_I2C_Init+0x274>)
 8003a60:	428b      	cmp	r3, r1
 8003a62:	d819      	bhi.n	8003a98 <HAL_I2C_Init+0x13c>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e59      	subs	r1, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a78:	400b      	ands	r3, r1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_I2C_Init+0x138>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1e59      	subs	r1, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a92:	e051      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003a94:	2304      	movs	r3, #4
 8003a96:	e04f      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d111      	bne.n	8003ac4 <HAL_I2C_Init+0x168>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e58      	subs	r0, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	440b      	add	r3, r1
 8003aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e012      	b.n	8003aea <HAL_I2C_Init+0x18e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e58      	subs	r0, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	0099      	lsls	r1, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Init+0x196>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e022      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10e      	bne.n	8003b18 <HAL_I2C_Init+0x1bc>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1e58      	subs	r0, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	440b      	add	r3, r1
 8003b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b16:	e00f      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1e58      	subs	r0, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	0099      	lsls	r1, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	6809      	ldr	r1, [r1, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6911      	ldr	r1, [r2, #16]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	000186a0 	.word	0x000186a0
 8003bd4:	001e847f 	.word	0x001e847f
 8003bd8:	003d08ff 	.word	0x003d08ff
 8003bdc:	431bde83 	.word	0x431bde83
 8003be0:	10624dd3 	.word	0x10624dd3

08003be4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	817b      	strh	r3, [r7, #10]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf8:	f7fe ff06 	bl	8002a08 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	f040 80e0 	bne.w	8003dcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	2319      	movs	r3, #25
 8003c12:	2201      	movs	r2, #1
 8003c14:	4970      	ldr	r1, [pc, #448]	; (8003dd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fa92 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
 8003c24:	e0d3      	b.n	8003dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_I2C_Master_Transmit+0x50>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e0cc      	b.n	8003dce <HAL_I2C_Master_Transmit+0x1ea>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d007      	beq.n	8003c5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2221      	movs	r2, #33	; 0x21
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2210      	movs	r2, #16
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	893a      	ldrh	r2, [r7, #8]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a50      	ldr	r2, [pc, #320]	; (8003ddc <HAL_I2C_Master_Transmit+0x1f8>)
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c9c:	8979      	ldrh	r1, [r7, #10]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f9ca 	bl	800403c <I2C_MasterRequestWrite>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e08d      	b.n	8003dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cc8:	e066      	b.n	8003d98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	6a39      	ldr	r1, [r7, #32]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fb0c 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00d      	beq.n	8003cf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d107      	bne.n	8003cf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e06b      	b.n	8003dce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d11b      	bne.n	8003d6c <HAL_I2C_Master_Transmit+0x188>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d017      	beq.n	8003d6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	6a39      	ldr	r1, [r7, #32]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fafc 	bl	800436e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d107      	bne.n	8003d94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e01a      	b.n	8003dce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d194      	bne.n	8003cca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	00100002 	.word	0x00100002
 8003ddc:	ffff0000 	.word	0xffff0000

08003de0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	; 0x28
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	460b      	mov	r3, r1
 8003dee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003df0:	f7fe fe0a 	bl	8002a08 <HAL_GetTick>
 8003df4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003df6:	2301      	movs	r3, #1
 8003df8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	f040 8111 	bne.w	800402a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2319      	movs	r3, #25
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4988      	ldr	r1, [pc, #544]	; (8004034 <HAL_I2C_IsDeviceReady+0x254>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f994 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e104      	b.n	800402c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2C_IsDeviceReady+0x50>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0fd      	b.n	800402c <HAL_I2C_IsDeviceReady+0x24c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d007      	beq.n	8003e56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0201 	orr.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2224      	movs	r2, #36	; 0x24
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a70      	ldr	r2, [pc, #448]	; (8004038 <HAL_I2C_IsDeviceReady+0x258>)
 8003e78:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f952 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb0:	d103      	bne.n	8003eba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0b6      	b.n	800402c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ebe:	897b      	ldrh	r3, [r7, #10]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ecc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fe fd9b 	bl	8002a08 <HAL_GetTick>
 8003ed2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	2300      	movne	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef8:	bf0c      	ite	eq
 8003efa:	2301      	moveq	r3, #1
 8003efc:	2300      	movne	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f02:	e025      	b.n	8003f50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f04:	f7fe fd80 	bl	8002a08 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d302      	bcc.n	8003f1a <HAL_I2C_IsDeviceReady+0x13a>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	22a0      	movs	r2, #160	; 0xa0
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f46:	bf0c      	ite	eq
 8003f48:	2301      	moveq	r3, #1
 8003f4a:	2300      	movne	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2ba0      	cmp	r3, #160	; 0xa0
 8003f5a:	d005      	beq.n	8003f68 <HAL_I2C_IsDeviceReady+0x188>
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <HAL_I2C_IsDeviceReady+0x188>
 8003f62:	7dbb      	ldrb	r3, [r7, #22]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0cd      	beq.n	8003f04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d129      	bne.n	8003fd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	2319      	movs	r3, #25
 8003faa:	2201      	movs	r2, #1
 8003fac:	4921      	ldr	r1, [pc, #132]	; (8004034 <HAL_I2C_IsDeviceReady+0x254>)
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f8c6 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e036      	b.n	800402c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e02c      	b.n	800402c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2319      	movs	r3, #25
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	490f      	ldr	r1, [pc, #60]	; (8004034 <HAL_I2C_IsDeviceReady+0x254>)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f8a2 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e012      	b.n	800402c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3301      	adds	r3, #1
 800400a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	f4ff af32 	bcc.w	8003e7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
  }
}
 800402c:	4618      	mov	r0, r3
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	00100002 	.word	0x00100002
 8004038:	ffff0000 	.word	0xffff0000

0800403c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	460b      	mov	r3, r1
 800404a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d006      	beq.n	8004066 <I2C_MasterRequestWrite+0x2a>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d003      	beq.n	8004066 <I2C_MasterRequestWrite+0x2a>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004064:	d108      	bne.n	8004078 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e00b      	b.n	8004090 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	2b12      	cmp	r3, #18
 800407e:	d107      	bne.n	8004090 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f84f 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b6:	d103      	bne.n	80040c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e035      	b.n	8004130 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040cc:	d108      	bne.n	80040e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040dc:	611a      	str	r2, [r3, #16]
 80040de:	e01b      	b.n	8004118 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040e0:	897b      	ldrh	r3, [r7, #10]
 80040e2:	11db      	asrs	r3, r3, #7
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f003 0306 	and.w	r3, r3, #6
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f063 030f 	orn	r3, r3, #15
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	490e      	ldr	r1, [pc, #56]	; (8004138 <I2C_MasterRequestWrite+0xfc>)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f875 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e010      	b.n	8004130 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800410e:	897b      	ldrh	r3, [r7, #10]
 8004110:	b2da      	uxtb	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4907      	ldr	r1, [pc, #28]	; (800413c <I2C_MasterRequestWrite+0x100>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f865 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	00010008 	.word	0x00010008
 800413c:	00010002 	.word	0x00010002

08004140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004150:	e025      	b.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d021      	beq.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe fc55 	bl	8002a08 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d116      	bne.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e023      	b.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10d      	bne.n	80041c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	e00c      	b.n	80041de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	43da      	mvns	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0b6      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041fc:	e051      	b.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420c:	d123      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004226:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e046      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425c:	d021      	beq.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7fe fbd3 	bl	8002a08 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d302      	bcc.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e020      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10c      	bne.n	80042c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	43da      	mvns	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	e00b      	b.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	43da      	mvns	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d18d      	bne.n	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f8:	e02d      	b.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f878 	bl	80043f0 <I2C_IsAcknowledgeFailed>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e02d      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d021      	beq.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fb79 	bl	8002a08 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e007      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d1ca      	bne.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800437a:	e02d      	b.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f837 	bl	80043f0 <I2C_IsAcknowledgeFailed>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e02d      	b.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d021      	beq.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fe fb38 	bl	8002a08 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e007      	b.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d1ca      	bne.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d11b      	bne.n	8004440 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004410:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e264      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d075      	beq.n	800455a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800446e:	4ba3      	ldr	r3, [pc, #652]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b04      	cmp	r3, #4
 8004478:	d00c      	beq.n	8004494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800447a:	4ba0      	ldr	r3, [pc, #640]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004482:	2b08      	cmp	r3, #8
 8004484:	d112      	bne.n	80044ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004486:	4b9d      	ldr	r3, [pc, #628]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004492:	d10b      	bne.n	80044ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004494:	4b99      	ldr	r3, [pc, #612]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d05b      	beq.n	8004558 <HAL_RCC_OscConfig+0x108>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d157      	bne.n	8004558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e23f      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b4:	d106      	bne.n	80044c4 <HAL_RCC_OscConfig+0x74>
 80044b6:	4b91      	ldr	r3, [pc, #580]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a90      	ldr	r2, [pc, #576]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e01d      	b.n	8004500 <HAL_RCC_OscConfig+0xb0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCC_OscConfig+0x98>
 80044ce:	4b8b      	ldr	r3, [pc, #556]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a8a      	ldr	r2, [pc, #552]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4b88      	ldr	r3, [pc, #544]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a87      	ldr	r2, [pc, #540]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e00b      	b.n	8004500 <HAL_RCC_OscConfig+0xb0>
 80044e8:	4b84      	ldr	r3, [pc, #528]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a83      	ldr	r2, [pc, #524]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b81      	ldr	r3, [pc, #516]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a80      	ldr	r2, [pc, #512]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80044fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d013      	beq.n	8004530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fe fa7e 	bl	8002a08 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004510:	f7fe fa7a 	bl	8002a08 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e204      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	4b76      	ldr	r3, [pc, #472]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0xc0>
 800452e:	e014      	b.n	800455a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fe fa6a 	bl	8002a08 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004538:	f7fe fa66 	bl	8002a08 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e1f0      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454a:	4b6c      	ldr	r3, [pc, #432]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0xe8>
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d063      	beq.n	800462e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004566:	4b65      	ldr	r3, [pc, #404]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004572:	4b62      	ldr	r3, [pc, #392]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800457a:	2b08      	cmp	r3, #8
 800457c:	d11c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457e:	4b5f      	ldr	r3, [pc, #380]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d116      	bne.n	80045b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458a:	4b5c      	ldr	r3, [pc, #368]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x152>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e1c4      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	4b56      	ldr	r3, [pc, #344]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4952      	ldr	r1, [pc, #328]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b6:	e03a      	b.n	800462e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d020      	beq.n	8004602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c0:	4b4f      	ldr	r3, [pc, #316]	; (8004700 <HAL_RCC_OscConfig+0x2b0>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fe fa1f 	bl	8002a08 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ce:	f7fe fa1b 	bl	8002a08 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e1a5      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e0:	4b46      	ldr	r3, [pc, #280]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ec:	4b43      	ldr	r3, [pc, #268]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4940      	ldr	r1, [pc, #256]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]
 8004600:	e015      	b.n	800462e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004602:	4b3f      	ldr	r3, [pc, #252]	; (8004700 <HAL_RCC_OscConfig+0x2b0>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fe f9fe 	bl	8002a08 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004610:	f7fe f9fa 	bl	8002a08 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e184      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004622:	4b36      	ldr	r3, [pc, #216]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d030      	beq.n	800469c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d016      	beq.n	8004670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004642:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_RCC_OscConfig+0x2b4>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fe f9de 	bl	8002a08 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004650:	f7fe f9da 	bl	8002a08 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e164      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004662:	4b26      	ldr	r3, [pc, #152]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x200>
 800466e:	e015      	b.n	800469c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004670:	4b24      	ldr	r3, [pc, #144]	; (8004704 <HAL_RCC_OscConfig+0x2b4>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004676:	f7fe f9c7 	bl	8002a08 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800467e:	f7fe f9c3 	bl	8002a08 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e14d      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004690:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 8004692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80a0 	beq.w	80047ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10f      	bne.n	80046da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_OscConfig+0x2b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d121      	bne.n	800472a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <HAL_RCC_OscConfig+0x2b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a07      	ldr	r2, [pc, #28]	; (8004708 <HAL_RCC_OscConfig+0x2b8>)
 80046ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046f2:	f7fe f989 	bl	8002a08 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	e011      	b.n	800471e <HAL_RCC_OscConfig+0x2ce>
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	42470000 	.word	0x42470000
 8004704:	42470e80 	.word	0x42470e80
 8004708:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470c:	f7fe f97c 	bl	8002a08 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e106      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471e:	4b85      	ldr	r3, [pc, #532]	; (8004934 <HAL_RCC_OscConfig+0x4e4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d106      	bne.n	8004740 <HAL_RCC_OscConfig+0x2f0>
 8004732:	4b81      	ldr	r3, [pc, #516]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a80      	ldr	r2, [pc, #512]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
 800473e:	e01c      	b.n	800477a <HAL_RCC_OscConfig+0x32a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d10c      	bne.n	8004762 <HAL_RCC_OscConfig+0x312>
 8004748:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a7a      	ldr	r2, [pc, #488]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	4b78      	ldr	r3, [pc, #480]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a77      	ldr	r2, [pc, #476]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
 8004760:	e00b      	b.n	800477a <HAL_RCC_OscConfig+0x32a>
 8004762:	4b75      	ldr	r3, [pc, #468]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	4a74      	ldr	r2, [pc, #464]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	; 0x70
 800476e:	4b72      	ldr	r3, [pc, #456]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a71      	ldr	r2, [pc, #452]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d015      	beq.n	80047ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7fe f941 	bl	8002a08 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fe f93d 	bl	8002a08 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0c5      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	4b65      	ldr	r3, [pc, #404]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ee      	beq.n	800478a <HAL_RCC_OscConfig+0x33a>
 80047ac:	e014      	b.n	80047d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ae:	f7fe f92b 	bl	8002a08 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fe f927 	bl	8002a08 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0af      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047cc:	4b5a      	ldr	r3, [pc, #360]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ee      	bne.n	80047b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	4b56      	ldr	r3, [pc, #344]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a55      	ldr	r2, [pc, #340]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 809b 	beq.w	800492a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047f4:	4b50      	ldr	r3, [pc, #320]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d05c      	beq.n	80048ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d141      	bne.n	800488c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004808:	4b4c      	ldr	r3, [pc, #304]	; (800493c <HAL_RCC_OscConfig+0x4ec>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fe f8fb 	bl	8002a08 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004816:	f7fe f8f7 	bl	8002a08 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e081      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004828:	4b43      	ldr	r3, [pc, #268]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	019b      	lsls	r3, r3, #6
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	085b      	lsrs	r3, r3, #1
 800484c:	3b01      	subs	r3, #1
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	061b      	lsls	r3, r3, #24
 8004858:	4937      	ldr	r1, [pc, #220]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800485e:	4b37      	ldr	r3, [pc, #220]	; (800493c <HAL_RCC_OscConfig+0x4ec>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7fe f8d0 	bl	8002a08 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800486c:	f7fe f8cc 	bl	8002a08 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e056      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x41c>
 800488a:	e04e      	b.n	800492a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488c:	4b2b      	ldr	r3, [pc, #172]	; (800493c <HAL_RCC_OscConfig+0x4ec>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004892:	f7fe f8b9 	bl	8002a08 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489a:	f7fe f8b5 	bl	8002a08 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e03f      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ac:	4b22      	ldr	r3, [pc, #136]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f0      	bne.n	800489a <HAL_RCC_OscConfig+0x44a>
 80048b8:	e037      	b.n	800492a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e032      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <HAL_RCC_OscConfig+0x4e8>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d028      	beq.n	8004926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d121      	bne.n	8004926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d11a      	bne.n	8004926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048f6:	4013      	ands	r3, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048fe:	4293      	cmp	r3, r2
 8004900:	d111      	bne.n	8004926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	3b01      	subs	r3, #1
 8004910:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d107      	bne.n	8004926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d001      	beq.n	800492a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40007000 	.word	0x40007000
 8004938:	40023800 	.word	0x40023800
 800493c:	42470060 	.word	0x42470060

08004940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0cc      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004954:	4b68      	ldr	r3, [pc, #416]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d90c      	bls.n	800497c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b65      	ldr	r3, [pc, #404]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b63      	ldr	r3, [pc, #396]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0b8      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d020      	beq.n	80049ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004994:	4b59      	ldr	r3, [pc, #356]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4a58      	ldr	r2, [pc, #352]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800499e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a52      	ldr	r2, [pc, #328]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b8:	4b50      	ldr	r3, [pc, #320]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	494d      	ldr	r1, [pc, #308]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d044      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d119      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e07f      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d107      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fe:	4b3f      	ldr	r3, [pc, #252]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e06f      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e067      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1e:	4b37      	ldr	r3, [pc, #220]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f023 0203 	bic.w	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4934      	ldr	r1, [pc, #208]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a30:	f7fd ffea 	bl	8002a08 <HAL_GetTick>
 8004a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a38:	f7fd ffe6 	bl	8002a08 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e04f      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 020c 	and.w	r2, r3, #12
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d1eb      	bne.n	8004a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a60:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d20c      	bcs.n	8004a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6e:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a76:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e032      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a94:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4916      	ldr	r1, [pc, #88]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	490e      	ldr	r1, [pc, #56]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ac6:	f000 f821 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004aca:	4602      	mov	r2, r0
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	490a      	ldr	r1, [pc, #40]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad8:	5ccb      	ldrb	r3, [r1, r3]
 8004ada:	fa22 f303 	lsr.w	r3, r2, r3
 8004ade:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fd fd4a 	bl	8002580 <HAL_InitTick>

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40023c00 	.word	0x40023c00
 8004afc:	40023800 	.word	0x40023800
 8004b00:	08010860 	.word	0x08010860
 8004b04:	20000010 	.word	0x20000010
 8004b08:	20000014 	.word	0x20000014

08004b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	b5b0      	push	{r4, r5, r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b12:	2100      	movs	r1, #0
 8004b14:	6079      	str	r1, [r7, #4]
 8004b16:	2100      	movs	r1, #0
 8004b18:	60f9      	str	r1, [r7, #12]
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b1e:	2100      	movs	r1, #0
 8004b20:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b22:	4952      	ldr	r1, [pc, #328]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004b24:	6889      	ldr	r1, [r1, #8]
 8004b26:	f001 010c 	and.w	r1, r1, #12
 8004b2a:	2908      	cmp	r1, #8
 8004b2c:	d00d      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0x3e>
 8004b2e:	2908      	cmp	r1, #8
 8004b30:	f200 8094 	bhi.w	8004c5c <HAL_RCC_GetSysClockFreq+0x150>
 8004b34:	2900      	cmp	r1, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0x32>
 8004b38:	2904      	cmp	r1, #4
 8004b3a:	d003      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x38>
 8004b3c:	e08e      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b3e:	4b4c      	ldr	r3, [pc, #304]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x164>)
 8004b40:	60bb      	str	r3, [r7, #8]
       break;
 8004b42:	e08e      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b44:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b46:	60bb      	str	r3, [r7, #8]
      break;
 8004b48:	e08b      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b4a:	4948      	ldr	r1, [pc, #288]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004b4c:	6849      	ldr	r1, [r1, #4]
 8004b4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004b52:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b54:	4945      	ldr	r1, [pc, #276]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004b56:	6849      	ldr	r1, [r1, #4]
 8004b58:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004b5c:	2900      	cmp	r1, #0
 8004b5e:	d024      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b60:	4942      	ldr	r1, [pc, #264]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004b62:	6849      	ldr	r1, [r1, #4]
 8004b64:	0989      	lsrs	r1, r1, #6
 8004b66:	4608      	mov	r0, r1
 8004b68:	f04f 0100 	mov.w	r1, #0
 8004b6c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004b70:	f04f 0500 	mov.w	r5, #0
 8004b74:	ea00 0204 	and.w	r2, r0, r4
 8004b78:	ea01 0305 	and.w	r3, r1, r5
 8004b7c:	493d      	ldr	r1, [pc, #244]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b7e:	fb01 f003 	mul.w	r0, r1, r3
 8004b82:	2100      	movs	r1, #0
 8004b84:	fb01 f102 	mul.w	r1, r1, r2
 8004b88:	1844      	adds	r4, r0, r1
 8004b8a:	493a      	ldr	r1, [pc, #232]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b8c:	fba2 0101 	umull	r0, r1, r2, r1
 8004b90:	1863      	adds	r3, r4, r1
 8004b92:	4619      	mov	r1, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	f7fc f87c 	bl	8000c98 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e04a      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004baa:	4b30      	ldr	r3, [pc, #192]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	ea02 0400 	and.w	r4, r2, r0
 8004bc2:	ea03 0501 	and.w	r5, r3, r1
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	014b      	lsls	r3, r1, #5
 8004bd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bd8:	0142      	lsls	r2, r0, #5
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	1b00      	subs	r0, r0, r4
 8004be0:	eb61 0105 	sbc.w	r1, r1, r5
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	018b      	lsls	r3, r1, #6
 8004bee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bf2:	0182      	lsls	r2, r0, #6
 8004bf4:	1a12      	subs	r2, r2, r0
 8004bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfa:	f04f 0000 	mov.w	r0, #0
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	00d9      	lsls	r1, r3, #3
 8004c04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c08:	00d0      	lsls	r0, r2, #3
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	1912      	adds	r2, r2, r4
 8004c10:	eb45 0303 	adc.w	r3, r5, r3
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	f04f 0100 	mov.w	r1, #0
 8004c1c:	0299      	lsls	r1, r3, #10
 8004c1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c22:	0290      	lsls	r0, r2, #10
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	f7fc f830 	bl	8000c98 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	60bb      	str	r3, [r7, #8]
      break;
 8004c5a:	e002      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c5c:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x164>)
 8004c5e:	60bb      	str	r3, [r7, #8]
      break;
 8004c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c62:	68bb      	ldr	r3, [r7, #8]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	017d7840 	.word	0x017d7840

08004c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000010 	.word	0x20000010

08004c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c94:	f7ff fff0 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	0a9b      	lsrs	r3, r3, #10
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4903      	ldr	r1, [pc, #12]	; (8004cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	08010870 	.word	0x08010870

08004cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cbc:	f7ff ffdc 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	0b5b      	lsrs	r3, r3, #13
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	4903      	ldr	r1, [pc, #12]	; (8004cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cce:	5ccb      	ldrb	r3, [r1, r3]
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	08010870 	.word	0x08010870

08004ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	220f      	movs	r2, #15
 8004cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cf0:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_RCC_GetClockConfig+0x5c>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0203 	and.w	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <HAL_RCC_GetClockConfig+0x5c>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <HAL_RCC_GetClockConfig+0x5c>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d14:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <HAL_RCC_GetClockConfig+0x5c>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	08db      	lsrs	r3, r3, #3
 8004d1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <HAL_RCC_GetClockConfig+0x60>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0207 	and.w	r2, r3, #7
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	601a      	str	r2, [r3, #0]
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40023c00 	.word	0x40023c00

08004d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e07b      	b.n	8004e4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d108      	bne.n	8004d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d66:	d009      	beq.n	8004d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	61da      	str	r2, [r3, #28]
 8004d6e:	e005      	b.n	8004d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fd f8d4 	bl	8001f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	ea42 0103 	orr.w	r1, r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	f003 0104 	and.w	r1, r3, #4
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0210 	and.w	r2, r3, #16
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e041      	b.n	8004eec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f839 	bl	8004ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f000 f9c9 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d001      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e044      	b.n	8004faa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d018      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x6c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4a:	d013      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x6c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <HAL_TIM_Base_Start_IT+0xb4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00e      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x6c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d009      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x6c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x6c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d111      	bne.n	8004f98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b06      	cmp	r3, #6
 8004f84:	d010      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f96:	e007      	b.n	8004fa8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40014000 	.word	0x40014000

08004fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d122      	bne.n	8005028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d11b      	bne.n	8005028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0202 	mvn.w	r2, #2
 8004ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8ee 	bl	80051f0 <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8e0 	bl	80051dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8f1 	bl	8005204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b04      	cmp	r3, #4
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b04      	cmp	r3, #4
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0204 	mvn.w	r2, #4
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8c4 	bl	80051f0 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8b6 	bl	80051dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8c7 	bl	8005204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b08      	cmp	r3, #8
 8005088:	d122      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b08      	cmp	r3, #8
 8005096:	d11b      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0208 	mvn.w	r2, #8
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2204      	movs	r2, #4
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f89a 	bl	80051f0 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f88c 	bl	80051dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f89d 	bl	8005204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b10      	cmp	r3, #16
 80050dc:	d122      	bne.n	8005124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d11b      	bne.n	8005124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0210 	mvn.w	r2, #16
 80050f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2208      	movs	r2, #8
 80050fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f870 	bl	80051f0 <HAL_TIM_IC_CaptureCallback>
 8005110:	e005      	b.n	800511e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f862 	bl	80051dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f873 	bl	8005204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b01      	cmp	r3, #1
 8005130:	d10e      	bne.n	8005150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d107      	bne.n	8005150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0201 	mvn.w	r2, #1
 8005148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fc fe92 	bl	8001e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d10e      	bne.n	800517c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005168:	2b80      	cmp	r3, #128	; 0x80
 800516a:	d107      	bne.n	800517c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f8e2 	bl	8005340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d10e      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d107      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f838 	bl	8005218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d10e      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d107      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0220 	mvn.w	r2, #32
 80051cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f8ac 	bl	800532c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a34      	ldr	r2, [pc, #208]	; (8005310 <TIM_Base_SetConfig+0xe4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00f      	beq.n	8005264 <TIM_Base_SetConfig+0x38>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d00b      	beq.n	8005264 <TIM_Base_SetConfig+0x38>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a31      	ldr	r2, [pc, #196]	; (8005314 <TIM_Base_SetConfig+0xe8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <TIM_Base_SetConfig+0x38>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a30      	ldr	r2, [pc, #192]	; (8005318 <TIM_Base_SetConfig+0xec>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0x38>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a2f      	ldr	r2, [pc, #188]	; (800531c <TIM_Base_SetConfig+0xf0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d108      	bne.n	8005276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a25      	ldr	r2, [pc, #148]	; (8005310 <TIM_Base_SetConfig+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01b      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005284:	d017      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a22      	ldr	r2, [pc, #136]	; (8005314 <TIM_Base_SetConfig+0xe8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a21      	ldr	r2, [pc, #132]	; (8005318 <TIM_Base_SetConfig+0xec>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00f      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a20      	ldr	r2, [pc, #128]	; (800531c <TIM_Base_SetConfig+0xf0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00b      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <TIM_Base_SetConfig+0xf4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <TIM_Base_SetConfig+0xf8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <TIM_Base_SetConfig+0xfc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d108      	bne.n	80052c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a08      	ldr	r2, [pc, #32]	; (8005310 <TIM_Base_SetConfig+0xe4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	615a      	str	r2, [r3, #20]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40010000 	.word	0x40010000
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800

0800532c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e03f      	b.n	80053e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fd fa9c 	bl	80028b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	; 0x24
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fb9f 	bl	8005adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	4613      	mov	r3, r2
 80053fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b20      	cmp	r3, #32
 8005406:	d11d      	bne.n	8005444 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_UART_Receive_IT+0x26>
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e016      	b.n	8005446 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_UART_Receive_IT+0x38>
 8005422:	2302      	movs	r3, #2
 8005424:	e00f      	b.n	8005446 <HAL_UART_Receive_IT+0x58>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	461a      	mov	r2, r3
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f9d4 	bl	80057e8 <UART_Start_Receive_IT>
 8005440:	4603      	mov	r3, r0
 8005442:	e000      	b.n	8005446 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005444:	2302      	movs	r3, #2
  }
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	; 0x28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_UART_IRQHandler+0x52>
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa87 	bl	80059ae <UART_Receive_IT>
      return;
 80054a0:	e17c      	b.n	800579c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80b1 	beq.w	800560c <HAL_UART_IRQHandler+0x1bc>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <HAL_UART_IRQHandler+0x70>
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80a6 	beq.w	800560c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_UART_IRQHandler+0x90>
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_UART_IRQHandler+0xb0>
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	f043 0202 	orr.w	r2, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_UART_IRQHandler+0xd0>
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00f      	beq.n	800554a <HAL_UART_IRQHandler+0xfa>
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_UART_IRQHandler+0xee>
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f043 0208 	orr.w	r2, r3, #8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 811f 	beq.w	8005792 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_UART_IRQHandler+0x11e>
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa20 	bl	80059ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	bf0c      	ite	eq
 800557c:	2301      	moveq	r3, #1
 800557e:	2300      	movne	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <HAL_UART_IRQHandler+0x146>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d031      	beq.n	80055fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f960 	bl	800585c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d123      	bne.n	80055f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d013      	beq.n	80055ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	4a77      	ldr	r2, [pc, #476]	; (80057a4 <HAL_UART_IRQHandler+0x354>)
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe f804 	bl	80035dc <HAL_DMA_Abort_IT>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e00e      	b.n	8005608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8e6 	bl	80057bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	e00a      	b.n	8005608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f8e2 	bl	80057bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	e006      	b.n	8005608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8de 	bl	80057bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005606:	e0c4      	b.n	8005792 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	bf00      	nop
    return;
 800560a:	e0c2      	b.n	8005792 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	2b01      	cmp	r3, #1
 8005612:	f040 80a2 	bne.w	800575a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 809c 	beq.w	800575a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8096 	beq.w	800575a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d14f      	bne.n	80056f2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800565c:	8a3b      	ldrh	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 8099 	beq.w	8005796 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005668:	8a3a      	ldrh	r2, [r7, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	f080 8093 	bcs.w	8005796 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8a3a      	ldrh	r2, [r7, #16]
 8005674:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d02b      	beq.n	80056da <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005690:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0210 	bic.w	r2, r2, #16
 80056ce:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fd ff11 	bl	80034fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f870 	bl	80057d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80056f0:	e051      	b.n	8005796 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d047      	beq.n	800579a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800570a:	8a7b      	ldrh	r3, [r7, #18]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d044      	beq.n	800579a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800571e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695a      	ldr	r2, [r3, #20]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0210 	bic.w	r2, r2, #16
 800574c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800574e:	8a7b      	ldrh	r3, [r7, #18]
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f83c 	bl	80057d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005758:	e01f      	b.n	800579a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_UART_IRQHandler+0x326>
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f8b5 	bl	80058de <UART_Transmit_IT>
    return;
 8005774:	e012      	b.n	800579c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00d      	beq.n	800579c <HAL_UART_IRQHandler+0x34c>
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f8f7 	bl	800597e <UART_EndTransmit_IT>
    return;
 8005790:	e004      	b.n	800579c <HAL_UART_IRQHandler+0x34c>
    return;
 8005792:	bf00      	nop
 8005794:	e002      	b.n	800579c <HAL_UART_IRQHandler+0x34c>
      return;
 8005796:	bf00      	nop
 8005798:	e000      	b.n	800579c <HAL_UART_IRQHandler+0x34c>
      return;
 800579a:	bf00      	nop
  }
}
 800579c:	3728      	adds	r7, #40	; 0x28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	080058b7 	.word	0x080058b7

080057a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2222      	movs	r2, #34	; 0x22
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800582c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0220 	orr.w	r2, r2, #32
 800584c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005872:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695a      	ldr	r2, [r3, #20]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0201 	bic.w	r2, r2, #1
 8005882:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	2b01      	cmp	r3, #1
 800588a:	d107      	bne.n	800589c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0210 	bic.w	r2, r2, #16
 800589a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff ff73 	bl	80057bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d6:	bf00      	nop
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b21      	cmp	r3, #33	; 0x21
 80058f0:	d13e      	bne.n	8005970 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fa:	d114      	bne.n	8005926 <UART_Transmit_IT+0x48>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d110      	bne.n	8005926 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005918:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	1c9a      	adds	r2, r3, #2
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	621a      	str	r2, [r3, #32]
 8005924:	e008      	b.n	8005938 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	1c59      	adds	r1, r3, #1
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6211      	str	r1, [r2, #32]
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29b      	uxth	r3, r3
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4619      	mov	r1, r3
 8005946:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10f      	bne.n	800596c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800595a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800596a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005994:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff ff02 	bl	80057a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b22      	cmp	r3, #34	; 0x22
 80059c0:	f040 8087 	bne.w	8005ad2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059cc:	d117      	bne.n	80059fe <UART_Receive_IT+0x50>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d113      	bne.n	80059fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	1c9a      	adds	r2, r3, #2
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28
 80059fc:	e026      	b.n	8005a4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a10:	d007      	beq.n	8005a22 <UART_Receive_IT+0x74>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <UART_Receive_IT+0x82>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e008      	b.n	8005a42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d136      	bne.n	8005ace <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0220 	bic.w	r2, r2, #32
 8005a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10e      	bne.n	8005abe <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0210 	bic.w	r2, r2, #16
 8005aae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fe8a 	bl	80057d0 <HAL_UARTEx_RxEventCallback>
 8005abc:	e002      	b.n	8005ac4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fc fdee 	bl	80026a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e002      	b.n	8005ad4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae0:	b09f      	sub	sp, #124	; 0x7c
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af2:	68d9      	ldr	r1, [r3, #12]
 8005af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	ea40 0301 	orr.w	r3, r0, r1
 8005afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b20:	f021 010c 	bic.w	r1, r1, #12
 8005b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3a:	6999      	ldr	r1, [r3, #24]
 8005b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	ea40 0301 	orr.w	r3, r0, r1
 8005b44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4bc5      	ldr	r3, [pc, #788]	; (8005e60 <UART_SetConfig+0x384>)
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d004      	beq.n	8005b5a <UART_SetConfig+0x7e>
 8005b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4bc3      	ldr	r3, [pc, #780]	; (8005e64 <UART_SetConfig+0x388>)
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d103      	bne.n	8005b62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b5a:	f7ff f8ad 	bl	8004cb8 <HAL_RCC_GetPCLK2Freq>
 8005b5e:	6778      	str	r0, [r7, #116]	; 0x74
 8005b60:	e002      	b.n	8005b68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b62:	f7ff f895 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 8005b66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b70:	f040 80b6 	bne.w	8005ce0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b76:	461c      	mov	r4, r3
 8005b78:	f04f 0500 	mov.w	r5, #0
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	462b      	mov	r3, r5
 8005b80:	1891      	adds	r1, r2, r2
 8005b82:	6439      	str	r1, [r7, #64]	; 0x40
 8005b84:	415b      	adcs	r3, r3
 8005b86:	647b      	str	r3, [r7, #68]	; 0x44
 8005b88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b8c:	1912      	adds	r2, r2, r4
 8005b8e:	eb45 0303 	adc.w	r3, r5, r3
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f04f 0100 	mov.w	r1, #0
 8005b9a:	00d9      	lsls	r1, r3, #3
 8005b9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ba0:	00d0      	lsls	r0, r2, #3
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	1911      	adds	r1, r2, r4
 8005ba8:	6639      	str	r1, [r7, #96]	; 0x60
 8005baa:	416b      	adcs	r3, r5
 8005bac:	667b      	str	r3, [r7, #100]	; 0x64
 8005bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005bc8:	f7fb f866 	bl	8000c98 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4ba5      	ldr	r3, [pc, #660]	; (8005e68 <UART_SetConfig+0x38c>)
 8005bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	011e      	lsls	r6, r3, #4
 8005bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bdc:	461c      	mov	r4, r3
 8005bde:	f04f 0500 	mov.w	r5, #0
 8005be2:	4622      	mov	r2, r4
 8005be4:	462b      	mov	r3, r5
 8005be6:	1891      	adds	r1, r2, r2
 8005be8:	6339      	str	r1, [r7, #48]	; 0x30
 8005bea:	415b      	adcs	r3, r3
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
 8005bee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bf2:	1912      	adds	r2, r2, r4
 8005bf4:	eb45 0303 	adc.w	r3, r5, r3
 8005bf8:	f04f 0000 	mov.w	r0, #0
 8005bfc:	f04f 0100 	mov.w	r1, #0
 8005c00:	00d9      	lsls	r1, r3, #3
 8005c02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c06:	00d0      	lsls	r0, r2, #3
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	1911      	adds	r1, r2, r4
 8005c0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c10:	416b      	adcs	r3, r5
 8005c12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	1891      	adds	r1, r2, r2
 8005c20:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c22:	415b      	adcs	r3, r3
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c2e:	f7fb f833 	bl	8000c98 <__aeabi_uldivmod>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4b8c      	ldr	r3, [pc, #560]	; (8005e68 <UART_SetConfig+0x38c>)
 8005c38:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	2164      	movs	r1, #100	; 0x64
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	3332      	adds	r3, #50	; 0x32
 8005c4a:	4a87      	ldr	r2, [pc, #540]	; (8005e68 <UART_SetConfig+0x38c>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c58:	441e      	add	r6, r3
 8005c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f04f 0100 	mov.w	r1, #0
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	1894      	adds	r4, r2, r2
 8005c68:	623c      	str	r4, [r7, #32]
 8005c6a:	415b      	adcs	r3, r3
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c72:	1812      	adds	r2, r2, r0
 8005c74:	eb41 0303 	adc.w	r3, r1, r3
 8005c78:	f04f 0400 	mov.w	r4, #0
 8005c7c:	f04f 0500 	mov.w	r5, #0
 8005c80:	00dd      	lsls	r5, r3, #3
 8005c82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c86:	00d4      	lsls	r4, r2, #3
 8005c88:	4622      	mov	r2, r4
 8005c8a:	462b      	mov	r3, r5
 8005c8c:	1814      	adds	r4, r2, r0
 8005c8e:	653c      	str	r4, [r7, #80]	; 0x50
 8005c90:	414b      	adcs	r3, r1
 8005c92:	657b      	str	r3, [r7, #84]	; 0x54
 8005c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	1891      	adds	r1, r2, r2
 8005ca0:	61b9      	str	r1, [r7, #24]
 8005ca2:	415b      	adcs	r3, r3
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005caa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005cae:	f7fa fff3 	bl	8000c98 <__aeabi_uldivmod>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4b6c      	ldr	r3, [pc, #432]	; (8005e68 <UART_SetConfig+0x38c>)
 8005cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	2164      	movs	r1, #100	; 0x64
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	3332      	adds	r3, #50	; 0x32
 8005cca:	4a67      	ldr	r2, [pc, #412]	; (8005e68 <UART_SetConfig+0x38c>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f003 0207 	and.w	r2, r3, #7
 8005cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4432      	add	r2, r6
 8005cdc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cde:	e0b9      	b.n	8005e54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce2:	461c      	mov	r4, r3
 8005ce4:	f04f 0500 	mov.w	r5, #0
 8005ce8:	4622      	mov	r2, r4
 8005cea:	462b      	mov	r3, r5
 8005cec:	1891      	adds	r1, r2, r2
 8005cee:	6139      	str	r1, [r7, #16]
 8005cf0:	415b      	adcs	r3, r3
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cf8:	1912      	adds	r2, r2, r4
 8005cfa:	eb45 0303 	adc.w	r3, r5, r3
 8005cfe:	f04f 0000 	mov.w	r0, #0
 8005d02:	f04f 0100 	mov.w	r1, #0
 8005d06:	00d9      	lsls	r1, r3, #3
 8005d08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d0c:	00d0      	lsls	r0, r2, #3
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	eb12 0804 	adds.w	r8, r2, r4
 8005d16:	eb43 0905 	adc.w	r9, r3, r5
 8005d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f04f 0100 	mov.w	r1, #0
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	008b      	lsls	r3, r1, #2
 8005d2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d32:	0082      	lsls	r2, r0, #2
 8005d34:	4640      	mov	r0, r8
 8005d36:	4649      	mov	r1, r9
 8005d38:	f7fa ffae 	bl	8000c98 <__aeabi_uldivmod>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4b49      	ldr	r3, [pc, #292]	; (8005e68 <UART_SetConfig+0x38c>)
 8005d42:	fba3 2302 	umull	r2, r3, r3, r2
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	011e      	lsls	r6, r3, #4
 8005d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f04f 0100 	mov.w	r1, #0
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	1894      	adds	r4, r2, r2
 8005d58:	60bc      	str	r4, [r7, #8]
 8005d5a:	415b      	adcs	r3, r3
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d62:	1812      	adds	r2, r2, r0
 8005d64:	eb41 0303 	adc.w	r3, r1, r3
 8005d68:	f04f 0400 	mov.w	r4, #0
 8005d6c:	f04f 0500 	mov.w	r5, #0
 8005d70:	00dd      	lsls	r5, r3, #3
 8005d72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d76:	00d4      	lsls	r4, r2, #3
 8005d78:	4622      	mov	r2, r4
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	1814      	adds	r4, r2, r0
 8005d7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005d80:	414b      	adcs	r3, r1
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f04f 0100 	mov.w	r1, #0
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	008b      	lsls	r3, r1, #2
 8005d98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d9c:	0082      	lsls	r2, r0, #2
 8005d9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005da2:	f7fa ff79 	bl	8000c98 <__aeabi_uldivmod>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4b2f      	ldr	r3, [pc, #188]	; (8005e68 <UART_SetConfig+0x38c>)
 8005dac:	fba3 1302 	umull	r1, r3, r3, r2
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	2164      	movs	r1, #100	; 0x64
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	3332      	adds	r3, #50	; 0x32
 8005dbe:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <UART_SetConfig+0x38c>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dca:	441e      	add	r6, r3
 8005dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f04f 0100 	mov.w	r1, #0
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	1894      	adds	r4, r2, r2
 8005dda:	603c      	str	r4, [r7, #0]
 8005ddc:	415b      	adcs	r3, r3
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005de4:	1812      	adds	r2, r2, r0
 8005de6:	eb41 0303 	adc.w	r3, r1, r3
 8005dea:	f04f 0400 	mov.w	r4, #0
 8005dee:	f04f 0500 	mov.w	r5, #0
 8005df2:	00dd      	lsls	r5, r3, #3
 8005df4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005df8:	00d4      	lsls	r4, r2, #3
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	eb12 0a00 	adds.w	sl, r2, r0
 8005e02:	eb43 0b01 	adc.w	fp, r3, r1
 8005e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f04f 0100 	mov.w	r1, #0
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	008b      	lsls	r3, r1, #2
 8005e1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e1e:	0082      	lsls	r2, r0, #2
 8005e20:	4650      	mov	r0, sl
 8005e22:	4659      	mov	r1, fp
 8005e24:	f7fa ff38 	bl	8000c98 <__aeabi_uldivmod>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <UART_SetConfig+0x38c>)
 8005e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2164      	movs	r1, #100	; 0x64
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	3332      	adds	r3, #50	; 0x32
 8005e40:	4a09      	ldr	r2, [pc, #36]	; (8005e68 <UART_SetConfig+0x38c>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4432      	add	r2, r6
 8005e52:	609a      	str	r2, [r3, #8]
}
 8005e54:	bf00      	nop
 8005e56:	377c      	adds	r7, #124	; 0x7c
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5e:	bf00      	nop
 8005e60:	40011000 	.word	0x40011000
 8005e64:	40011400 	.word	0x40011400
 8005e68:	51eb851f 	.word	0x51eb851f

08005e6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005e70:	4904      	ldr	r1, [pc, #16]	; (8005e84 <MX_FATFS_Init+0x18>)
 8005e72:	4805      	ldr	r0, [pc, #20]	; (8005e88 <MX_FATFS_Init+0x1c>)
 8005e74:	f000 fd84 	bl	8006980 <FATFS_LinkDriver>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	4b03      	ldr	r3, [pc, #12]	; (8005e8c <MX_FATFS_Init+0x20>)
 8005e7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e80:	bf00      	nop
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20005518 	.word	0x20005518
 8005e88:	2000001c 	.word	0x2000001c
 8005e8c:	2000551c 	.word	0x2000551c

08005e90 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005e9a:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <USER_initialize+0x24>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005ea0:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <USER_initialize+0x24>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20000019 	.word	0x20000019

08005eb8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <USER_status+0x24>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <USER_status+0x24>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	20000019 	.word	0x20000019

08005ee0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005ef0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005f0e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	603a      	str	r2, [r7, #0]
 8005f26:	71fb      	strb	r3, [r7, #7]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
    return res;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <disk_status+0x30>)
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	79fa      	ldrb	r2, [r7, #7]
 8005f58:	4905      	ldr	r1, [pc, #20]	; (8005f70 <disk_status+0x30>)
 8005f5a:	440a      	add	r2, r1
 8005f5c:	7a12      	ldrb	r2, [r2, #8]
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4798      	blx	r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000690 	.word	0x20000690

08005f74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	4a0d      	ldr	r2, [pc, #52]	; (8005fbc <disk_initialize+0x48>)
 8005f86:	5cd3      	ldrb	r3, [r2, r3]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d111      	bne.n	8005fb0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	4a0b      	ldr	r2, [pc, #44]	; (8005fbc <disk_initialize+0x48>)
 8005f90:	2101      	movs	r1, #1
 8005f92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <disk_initialize+0x48>)
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	79fa      	ldrb	r2, [r7, #7]
 8005fa2:	4906      	ldr	r1, [pc, #24]	; (8005fbc <disk_initialize+0x48>)
 8005fa4:	440a      	add	r2, r1
 8005fa6:	7a12      	ldrb	r2, [r2, #8]
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000690 	.word	0x20000690

08005fc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005fc0:	b590      	push	{r4, r7, lr}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <disk_read+0x3c>)
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	689c      	ldr	r4, [r3, #8]
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	4a07      	ldr	r2, [pc, #28]	; (8005ffc <disk_read+0x3c>)
 8005fe0:	4413      	add	r3, r2
 8005fe2:	7a18      	ldrb	r0, [r3, #8]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	47a0      	blx	r4
 8005fec:	4603      	mov	r3, r0
 8005fee:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000690 	.word	0x20000690

08006000 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006000:	b590      	push	{r4, r7, lr}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	4a0a      	ldr	r2, [pc, #40]	; (800603c <disk_write+0x3c>)
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	68dc      	ldr	r4, [r3, #12]
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	4a07      	ldr	r2, [pc, #28]	; (800603c <disk_write+0x3c>)
 8006020:	4413      	add	r3, r2
 8006022:	7a18      	ldrb	r0, [r3, #8]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	47a0      	blx	r4
 800602c:	4603      	mov	r3, r0
 800602e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
}
 8006032:	4618      	mov	r0, r3
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	bd90      	pop	{r4, r7, pc}
 800603a:	bf00      	nop
 800603c:	20000690 	.word	0x20000690

08006040 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3301      	adds	r3, #1
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006050:	89fb      	ldrh	r3, [r7, #14]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	b21a      	sxth	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	b21b      	sxth	r3, r3
 800605c:	4313      	orrs	r3, r2
 800605e:	b21b      	sxth	r3, r3
 8006060:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006062:	89fb      	ldrh	r3, [r7, #14]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3303      	adds	r3, #3
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	3202      	adds	r2, #2
 8006088:	7812      	ldrb	r2, [r2, #0]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	3201      	adds	r2, #1
 8006096:	7812      	ldrb	r2, [r2, #0]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80060a8:	68fb      	ldr	r3, [r7, #12]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d009      	beq.n	80060d8 <lock_fs+0x22>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fc8f 	bl	80069ec <ff_req_grant>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <lock_fs+0x22>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <lock_fs+0x24>
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00d      	beq.n	8006110 <unlock_fs+0x2e>
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	2b0c      	cmp	r3, #12
 80060f8:	d00a      	beq.n	8006110 <unlock_fs+0x2e>
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	2b0b      	cmp	r3, #11
 80060fe:	d007      	beq.n	8006110 <unlock_fs+0x2e>
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	2b0f      	cmp	r3, #15
 8006104:	d004      	beq.n	8006110 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fc83 	bl	8006a16 <ff_rel_grant>
	}
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e010      	b.n	8006148 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006126:	4a0d      	ldr	r2, [pc, #52]	; (800615c <clear_lock+0x44>)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	4413      	add	r3, r2
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d105      	bne.n	8006142 <clear_lock+0x2a>
 8006136:	4a09      	ldr	r2, [pc, #36]	; (800615c <clear_lock+0x44>)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	011b      	lsls	r3, r3, #4
 800613c:	4413      	add	r3, r2
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d9eb      	bls.n	8006126 <clear_lock+0xe>
	}
}
 800614e:	bf00      	nop
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	20000670 	.word	0x20000670

08006160 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	78db      	ldrb	r3, [r3, #3]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d034      	beq.n	80061de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	7858      	ldrb	r0, [r3, #1]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006184:	2301      	movs	r3, #1
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	f7ff ff3a 	bl	8006000 <disk_write>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006192:	2301      	movs	r3, #1
 8006194:	73fb      	strb	r3, [r7, #15]
 8006196:	e022      	b.n	80061de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d217      	bcs.n	80061de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	789b      	ldrb	r3, [r3, #2]
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	e010      	b.n	80061d8 <sync_window+0x78>
					wsect += fs->fsize;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	7858      	ldrb	r0, [r3, #1]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80061ca:	2301      	movs	r3, #1
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	f7ff ff17 	bl	8006000 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d8eb      	bhi.n	80061b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d01b      	beq.n	8006238 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff ffad 	bl	8006160 <sync_window>
 8006206:	4603      	mov	r3, r0
 8006208:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d113      	bne.n	8006238 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7858      	ldrb	r0, [r3, #1]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800621a:	2301      	movs	r3, #1
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	f7ff fecf 	bl	8005fc0 <disk_read>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006228:	f04f 33ff 	mov.w	r3, #4294967295
 800622c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800622e:	2301      	movs	r3, #1
 8006230:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006242:	b480      	push	{r7}
 8006244:	b087      	sub	sp, #28
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800624a:	f04f 33ff 	mov.w	r3, #4294967295
 800624e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d031      	beq.n	80062bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e002      	b.n	8006266 <get_ldnumber+0x24>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	3301      	adds	r3, #1
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b20      	cmp	r3, #32
 800626c:	d903      	bls.n	8006276 <get_ldnumber+0x34>
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b3a      	cmp	r3, #58	; 0x3a
 8006274:	d1f4      	bne.n	8006260 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b3a      	cmp	r3, #58	; 0x3a
 800627c:	d11c      	bne.n	80062b8 <get_ldnumber+0x76>
			tp = *path;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	60fa      	str	r2, [r7, #12]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	3b30      	subs	r3, #48	; 0x30
 800628e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b09      	cmp	r3, #9
 8006294:	d80e      	bhi.n	80062b4 <get_ldnumber+0x72>
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	429a      	cmp	r2, r3
 800629c:	d10a      	bne.n	80062b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d107      	bne.n	80062b4 <get_ldnumber+0x72>
					vol = (int)i;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	3301      	adds	r3, #1
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	e002      	b.n	80062be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80062bc:	693b      	ldr	r3, [r7, #16]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	70da      	strb	r2, [r3, #3]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f04f 32ff 	mov.w	r2, #4294967295
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff ff7e 	bl	80061e8 <move_window>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <check_fs+0x2a>
 80062f2:	2304      	movs	r3, #4
 80062f4:	e038      	b.n	8006368 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3334      	adds	r3, #52	; 0x34
 80062fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff fe9e 	bl	8006040 <ld_word>
 8006304:	4603      	mov	r3, r0
 8006306:	461a      	mov	r2, r3
 8006308:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <check_fs+0x48>
 8006310:	2303      	movs	r3, #3
 8006312:	e029      	b.n	8006368 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800631a:	2be9      	cmp	r3, #233	; 0xe9
 800631c:	d009      	beq.n	8006332 <check_fs+0x66>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006324:	2beb      	cmp	r3, #235	; 0xeb
 8006326:	d11e      	bne.n	8006366 <check_fs+0x9a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800632e:	2b90      	cmp	r3, #144	; 0x90
 8006330:	d119      	bne.n	8006366 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3334      	adds	r3, #52	; 0x34
 8006336:	3336      	adds	r3, #54	; 0x36
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fe99 	bl	8006070 <ld_dword>
 800633e:	4603      	mov	r3, r0
 8006340:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006344:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <check_fs+0xa4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d101      	bne.n	800634e <check_fs+0x82>
 800634a:	2300      	movs	r3, #0
 800634c:	e00c      	b.n	8006368 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3334      	adds	r3, #52	; 0x34
 8006352:	3352      	adds	r3, #82	; 0x52
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff fe8b 	bl	8006070 <ld_dword>
 800635a:	4603      	mov	r3, r0
 800635c:	4a05      	ldr	r2, [pc, #20]	; (8006374 <check_fs+0xa8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d101      	bne.n	8006366 <check_fs+0x9a>
 8006362:	2300      	movs	r3, #0
 8006364:	e000      	b.n	8006368 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006366:	2302      	movs	r3, #2
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	00544146 	.word	0x00544146
 8006374:	33544146 	.word	0x33544146

08006378 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b096      	sub	sp, #88	; 0x58
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7ff ff58 	bl	8006242 <get_ldnumber>
 8006392:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	da01      	bge.n	800639e <find_volume+0x26>
 800639a:	230b      	movs	r3, #11
 800639c:	e236      	b.n	800680c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800639e:	4aac      	ldr	r2, [pc, #688]	; (8006650 <find_volume+0x2d8>)
 80063a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <find_volume+0x3a>
 80063ae:	230c      	movs	r3, #12
 80063b0:	e22c      	b.n	800680c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80063b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063b4:	f7ff fe7f 	bl	80060b6 <lock_fs>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <find_volume+0x4a>
 80063be:	230f      	movs	r3, #15
 80063c0:	e224      	b.n	800680c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01a      	beq.n	800640e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fdaf 	bl	8005f40 <disk_status>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80063e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10c      	bne.n	800640e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <find_volume+0x92>
 80063fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006406:	230a      	movs	r3, #10
 8006408:	e200      	b.n	800680c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800640a:	2300      	movs	r3, #0
 800640c:	e1fe      	b.n	800680c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006416:	b2da      	uxtb	r2, r3
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fda7 	bl	8005f74 <disk_initialize>
 8006426:	4603      	mov	r3, r0
 8006428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800642c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006438:	2303      	movs	r3, #3
 800643a:	e1e7      	b.n	800680c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <find_volume+0xda>
 8006442:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800644e:	230a      	movs	r3, #10
 8006450:	e1dc      	b.n	800680c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006458:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800645a:	f7ff ff37 	bl	80062cc <check_fs>
 800645e:	4603      	mov	r3, r0
 8006460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006468:	2b02      	cmp	r3, #2
 800646a:	d14b      	bne.n	8006504 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800646c:	2300      	movs	r3, #0
 800646e:	643b      	str	r3, [r7, #64]	; 0x40
 8006470:	e01f      	b.n	80064b2 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006480:	4413      	add	r3, r2
 8006482:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	3304      	adds	r3, #4
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d006      	beq.n	800649c <find_volume+0x124>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	3308      	adds	r3, #8
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fdec 	bl	8006070 <ld_dword>
 8006498:	4602      	mov	r2, r0
 800649a:	e000      	b.n	800649e <find_volume+0x126>
 800649c:	2200      	movs	r2, #0
 800649e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80064a6:	440b      	add	r3, r1
 80064a8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80064ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ae:	3301      	adds	r3, #1
 80064b0:	643b      	str	r3, [r7, #64]	; 0x40
 80064b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d9dc      	bls.n	8006472 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80064b8:	2300      	movs	r3, #0
 80064ba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80064bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <find_volume+0x150>
 80064c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c4:	3b01      	subs	r3, #1
 80064c6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80064c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80064d0:	4413      	add	r3, r2
 80064d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80064d6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80064d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <find_volume+0x172>
 80064de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064e2:	f7ff fef3 	bl	80062cc <check_fs>
 80064e6:	4603      	mov	r3, r0
 80064e8:	e000      	b.n	80064ec <find_volume+0x174>
 80064ea:	2303      	movs	r3, #3
 80064ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80064f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d905      	bls.n	8006504 <find_volume+0x18c>
 80064f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fa:	3301      	adds	r3, #1
 80064fc:	643b      	str	r3, [r7, #64]	; 0x40
 80064fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006500:	2b03      	cmp	r3, #3
 8006502:	d9e1      	bls.n	80064c8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006508:	2b04      	cmp	r3, #4
 800650a:	d101      	bne.n	8006510 <find_volume+0x198>
 800650c:	2301      	movs	r3, #1
 800650e:	e17d      	b.n	800680c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006514:	2b01      	cmp	r3, #1
 8006516:	d901      	bls.n	800651c <find_volume+0x1a4>
 8006518:	230d      	movs	r3, #13
 800651a:	e177      	b.n	800680c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	3334      	adds	r3, #52	; 0x34
 8006520:	330b      	adds	r3, #11
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fd8c 	bl	8006040 <ld_word>
 8006528:	4603      	mov	r3, r0
 800652a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652e:	d001      	beq.n	8006534 <find_volume+0x1bc>
 8006530:	230d      	movs	r3, #13
 8006532:	e16b      	b.n	800680c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	3334      	adds	r3, #52	; 0x34
 8006538:	3316      	adds	r3, #22
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff fd80 	bl	8006040 <ld_word>
 8006540:	4603      	mov	r3, r0
 8006542:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <find_volume+0x1e0>
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	3334      	adds	r3, #52	; 0x34
 800654e:	3324      	adds	r3, #36	; 0x24
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fd8d 	bl	8006070 <ld_dword>
 8006556:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800655c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	789b      	ldrb	r3, [r3, #2]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d005      	beq.n	800657c <find_volume+0x204>
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	789b      	ldrb	r3, [r3, #2]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d001      	beq.n	800657c <find_volume+0x204>
 8006578:	230d      	movs	r3, #13
 800657a:	e147      	b.n	800680c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	789b      	ldrb	r3, [r3, #2]
 8006580:	461a      	mov	r2, r3
 8006582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006584:	fb02 f303 	mul.w	r3, r2, r3
 8006588:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006590:	b29a      	uxth	r2, r3
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	895b      	ldrh	r3, [r3, #10]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d008      	beq.n	80065b0 <find_volume+0x238>
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	895b      	ldrh	r3, [r3, #10]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	895b      	ldrh	r3, [r3, #10]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <find_volume+0x23c>
 80065b0:	230d      	movs	r3, #13
 80065b2:	e12b      	b.n	800680c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	3334      	adds	r3, #52	; 0x34
 80065b8:	3311      	adds	r3, #17
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff fd40 	bl	8006040 <ld_word>
 80065c0:	4603      	mov	r3, r0
 80065c2:	461a      	mov	r2, r3
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	891b      	ldrh	r3, [r3, #8]
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <find_volume+0x262>
 80065d6:	230d      	movs	r3, #13
 80065d8:	e118      	b.n	800680c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	3334      	adds	r3, #52	; 0x34
 80065de:	3313      	adds	r3, #19
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff fd2d 	bl	8006040 <ld_word>
 80065e6:	4603      	mov	r3, r0
 80065e8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80065ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d106      	bne.n	80065fe <find_volume+0x286>
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	3334      	adds	r3, #52	; 0x34
 80065f4:	3320      	adds	r3, #32
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff fd3a 	bl	8006070 <ld_dword>
 80065fc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	3334      	adds	r3, #52	; 0x34
 8006602:	330e      	adds	r3, #14
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff fd1b 	bl	8006040 <ld_word>
 800660a:	4603      	mov	r3, r0
 800660c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800660e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <find_volume+0x2a0>
 8006614:	230d      	movs	r3, #13
 8006616:	e0f9      	b.n	800680c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661c:	4413      	add	r3, r2
 800661e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006620:	8912      	ldrh	r2, [r2, #8]
 8006622:	0912      	lsrs	r2, r2, #4
 8006624:	b292      	uxth	r2, r2
 8006626:	4413      	add	r3, r2
 8006628:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800662a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	429a      	cmp	r2, r3
 8006630:	d201      	bcs.n	8006636 <find_volume+0x2be>
 8006632:	230d      	movs	r3, #13
 8006634:	e0ea      	b.n	800680c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800663e:	8952      	ldrh	r2, [r2, #10]
 8006640:	fbb3 f3f2 	udiv	r3, r3, r2
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d103      	bne.n	8006654 <find_volume+0x2dc>
 800664c:	230d      	movs	r3, #13
 800664e:	e0dd      	b.n	800680c <find_volume+0x494>
 8006650:	20000668 	.word	0x20000668
		fmt = FS_FAT32;
 8006654:	2303      	movs	r3, #3
 8006656:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006660:	4293      	cmp	r3, r2
 8006662:	d802      	bhi.n	800666a <find_volume+0x2f2>
 8006664:	2302      	movs	r3, #2
 8006666:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006670:	4293      	cmp	r3, r2
 8006672:	d802      	bhi.n	800667a <find_volume+0x302>
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	1c9a      	adds	r2, r3, #2
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006686:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006688:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800668a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668c:	441a      	add	r2, r3
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006692:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	441a      	add	r2, r3
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800669c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d11e      	bne.n	80066e2 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	3334      	adds	r3, #52	; 0x34
 80066a8:	332a      	adds	r3, #42	; 0x2a
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fcc8 	bl	8006040 <ld_word>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <find_volume+0x342>
 80066b6:	230d      	movs	r3, #13
 80066b8:	e0a8      	b.n	800680c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	891b      	ldrh	r3, [r3, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <find_volume+0x34e>
 80066c2:	230d      	movs	r3, #13
 80066c4:	e0a2      	b.n	800680c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	3334      	adds	r3, #52	; 0x34
 80066ca:	332c      	adds	r3, #44	; 0x2c
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff fccf 	bl	8006070 <ld_dword>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	647b      	str	r3, [r7, #68]	; 0x44
 80066e0:	e01f      	b.n	8006722 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	891b      	ldrh	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <find_volume+0x376>
 80066ea:	230d      	movs	r3, #13
 80066ec:	e08e      	b.n	800680c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f4:	441a      	add	r2, r3
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80066fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d103      	bne.n	800670a <find_volume+0x392>
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	e00a      	b.n	8006720 <find_volume+0x3a8>
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	4613      	mov	r3, r2
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	4413      	add	r3, r2
 8006714:	085a      	lsrs	r2, r3, #1
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006720:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	69da      	ldr	r2, [r3, #28]
 8006726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006728:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800672c:	0a5b      	lsrs	r3, r3, #9
 800672e:	429a      	cmp	r2, r3
 8006730:	d201      	bcs.n	8006736 <find_volume+0x3be>
 8006732:	230d      	movs	r3, #13
 8006734:	e06a      	b.n	800680c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	f04f 32ff 	mov.w	r2, #4294967295
 800673c:	615a      	str	r2, [r3, #20]
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	695a      	ldr	r2, [r3, #20]
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	2280      	movs	r2, #128	; 0x80
 800674a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800674c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006750:	2b03      	cmp	r3, #3
 8006752:	d149      	bne.n	80067e8 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	3334      	adds	r3, #52	; 0x34
 8006758:	3330      	adds	r3, #48	; 0x30
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fc70 	bl	8006040 <ld_word>
 8006760:	4603      	mov	r3, r0
 8006762:	2b01      	cmp	r3, #1
 8006764:	d140      	bne.n	80067e8 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006768:	3301      	adds	r3, #1
 800676a:	4619      	mov	r1, r3
 800676c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800676e:	f7ff fd3b 	bl	80061e8 <move_window>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d137      	bne.n	80067e8 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	2200      	movs	r2, #0
 800677c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	3334      	adds	r3, #52	; 0x34
 8006782:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fc5a 	bl	8006040 <ld_word>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006794:	429a      	cmp	r2, r3
 8006796:	d127      	bne.n	80067e8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	3334      	adds	r3, #52	; 0x34
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fc67 	bl	8006070 <ld_dword>
 80067a2:	4603      	mov	r3, r0
 80067a4:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <find_volume+0x49c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d11e      	bne.n	80067e8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	3334      	adds	r3, #52	; 0x34
 80067ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fc5c 	bl	8006070 <ld_dword>
 80067b8:	4603      	mov	r3, r0
 80067ba:	4a17      	ldr	r2, [pc, #92]	; (8006818 <find_volume+0x4a0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d113      	bne.n	80067e8 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	3334      	adds	r3, #52	; 0x34
 80067c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff fc51 	bl	8006070 <ld_dword>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	3334      	adds	r3, #52	; 0x34
 80067d8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fc47 	bl	8006070 <ld_dword>
 80067e2:	4602      	mov	r2, r0
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80067ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <find_volume+0x4a4>)
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	4b08      	ldr	r3, [pc, #32]	; (800681c <find_volume+0x4a4>)
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <find_volume+0x4a4>)
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006804:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006806:	f7ff fc87 	bl	8006118 <clear_lock>
#endif
	return FR_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3758      	adds	r7, #88	; 0x58
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	41615252 	.word	0x41615252
 8006818:	61417272 	.word	0x61417272
 800681c:	2000066c 	.word	0x2000066c

08006820 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006832:	f107 0310 	add.w	r3, r7, #16
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff fd03 	bl	8006242 <get_ldnumber>
 800683c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	2b00      	cmp	r3, #0
 8006842:	da01      	bge.n	8006848 <f_mount+0x28>
 8006844:	230b      	movs	r3, #11
 8006846:	e048      	b.n	80068da <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006848:	4a26      	ldr	r2, [pc, #152]	; (80068e4 <f_mount+0xc4>)
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006850:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00f      	beq.n	8006878 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006858:	69b8      	ldr	r0, [r7, #24]
 800685a:	f7ff fc5d 	bl	8006118 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f8b6 	bl	80069d4 <ff_del_syncobj>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <f_mount+0x52>
 800686e:	2302      	movs	r3, #2
 8006870:	e033      	b.n	80068da <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00f      	beq.n	800689e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	330c      	adds	r3, #12
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f000 f885 	bl	800699e <ff_cre_syncobj>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <f_mount+0x7e>
 800689a:	2302      	movs	r3, #2
 800689c:	e01d      	b.n	80068da <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4910      	ldr	r1, [pc, #64]	; (80068e4 <f_mount+0xc4>)
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <f_mount+0x94>
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d001      	beq.n	80068b8 <f_mount+0x98>
 80068b4:	2300      	movs	r3, #0
 80068b6:	e010      	b.n	80068da <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80068b8:	f107 010c 	add.w	r1, r7, #12
 80068bc:	f107 0308 	add.w	r3, r7, #8
 80068c0:	2200      	movs	r2, #0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fd58 	bl	8006378 <find_volume>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	7dfa      	ldrb	r2, [r7, #23]
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff fc05 	bl	80060e2 <unlock_fs>
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000668 	.word	0x20000668

080068e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80068f6:	2301      	movs	r3, #1
 80068f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80068fe:	4b1f      	ldr	r3, [pc, #124]	; (800697c <FATFS_LinkDriverEx+0x94>)
 8006900:	7a5b      	ldrb	r3, [r3, #9]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d131      	bne.n	800696c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006908:	4b1c      	ldr	r3, [pc, #112]	; (800697c <FATFS_LinkDriverEx+0x94>)
 800690a:	7a5b      	ldrb	r3, [r3, #9]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	4b1a      	ldr	r3, [pc, #104]	; (800697c <FATFS_LinkDriverEx+0x94>)
 8006912:	2100      	movs	r1, #0
 8006914:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006916:	4b19      	ldr	r3, [pc, #100]	; (800697c <FATFS_LinkDriverEx+0x94>)
 8006918:	7a5b      	ldrb	r3, [r3, #9]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	4a17      	ldr	r2, [pc, #92]	; (800697c <FATFS_LinkDriverEx+0x94>)
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006926:	4b15      	ldr	r3, [pc, #84]	; (800697c <FATFS_LinkDriverEx+0x94>)
 8006928:	7a5b      	ldrb	r3, [r3, #9]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <FATFS_LinkDriverEx+0x94>)
 8006930:	4413      	add	r3, r2
 8006932:	79fa      	ldrb	r2, [r7, #7]
 8006934:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <FATFS_LinkDriverEx+0x94>)
 8006938:	7a5b      	ldrb	r3, [r3, #9]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	b2d1      	uxtb	r1, r2
 8006940:	4a0e      	ldr	r2, [pc, #56]	; (800697c <FATFS_LinkDriverEx+0x94>)
 8006942:	7251      	strb	r1, [r2, #9]
 8006944:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006946:	7dbb      	ldrb	r3, [r7, #22]
 8006948:	3330      	adds	r3, #48	; 0x30
 800694a:	b2da      	uxtb	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	3301      	adds	r3, #1
 8006954:	223a      	movs	r2, #58	; 0x3a
 8006956:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	3302      	adds	r3, #2
 800695c:	222f      	movs	r2, #47	; 0x2f
 800695e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	3303      	adds	r3, #3
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800696c:	7dfb      	ldrb	r3, [r7, #23]
}
 800696e:	4618      	mov	r0, r3
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000690 	.word	0x20000690

08006980 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800698a:	2200      	movs	r2, #0
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff ffaa 	bl	80068e8 <FATFS_LinkDriverEx>
 8006994:	4603      	mov	r3, r0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	4603      	mov	r3, r0
 80069a6:	6039      	str	r1, [r7, #0]
 80069a8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80069aa:	2200      	movs	r2, #0
 80069ac:	2101      	movs	r1, #1
 80069ae:	2001      	movs	r0, #1
 80069b0:	f000 f977 	bl	8006ca2 <osSemaphoreNew>
 80069b4:	4602      	mov	r2, r0
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bf14      	ite	ne
 80069c2:	2301      	movne	r3, #1
 80069c4:	2300      	moveq	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	60fb      	str	r3, [r7, #12]

    return ret;
 80069ca:	68fb      	ldr	r3, [r7, #12]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fa7f 	bl	8006ee0 <osSemaphoreDelete>
#endif
    return 1;
 80069e2:	2301      	movs	r3, #1
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80069f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f9d9 	bl	8006db4 <osSemaphoreAcquire>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa1a 	bl	8006e58 <osSemaphoreRelease>
#endif
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <__NVIC_SetPriority>:
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	6039      	str	r1, [r7, #0]
 8006a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	db0a      	blt.n	8006a56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	490c      	ldr	r1, [pc, #48]	; (8006a78 <__NVIC_SetPriority+0x4c>)
 8006a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a4a:	0112      	lsls	r2, r2, #4
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	440b      	add	r3, r1
 8006a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a54:	e00a      	b.n	8006a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	4908      	ldr	r1, [pc, #32]	; (8006a7c <__NVIC_SetPriority+0x50>)
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	3b04      	subs	r3, #4
 8006a64:	0112      	lsls	r2, r2, #4
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	440b      	add	r3, r1
 8006a6a:	761a      	strb	r2, [r3, #24]
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	e000e100 	.word	0xe000e100
 8006a7c:	e000ed00 	.word	0xe000ed00

08006a80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <SysTick_Handler+0x1c>)
 8006a86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a88:	f002 f962 	bl	8008d50 <xTaskGetSchedulerState>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d001      	beq.n	8006a96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a92:	f003 f849 	bl	8009b28 <xPortSysTickHandler>
  }
}
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	e000e010 	.word	0xe000e010

08006aa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	f06f 0004 	mvn.w	r0, #4
 8006aaa:	f7ff ffbf 	bl	8006a2c <__NVIC_SetPriority>
#endif
}
 8006aae:	bf00      	nop
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aba:	f3ef 8305 	mrs	r3, IPSR
 8006abe:	603b      	str	r3, [r7, #0]
  return(result);
 8006ac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006ac6:	f06f 0305 	mvn.w	r3, #5
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	e00c      	b.n	8006ae8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ace:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <osKernelInitialize+0x44>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ad6:	4b08      	ldr	r3, [pc, #32]	; (8006af8 <osKernelInitialize+0x44>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	e002      	b.n	8006ae8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ae8:	687b      	ldr	r3, [r7, #4]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	2000069c 	.word	0x2000069c

08006afc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b02:	f3ef 8305 	mrs	r3, IPSR
 8006b06:	603b      	str	r3, [r7, #0]
  return(result);
 8006b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b0e:	f06f 0305 	mvn.w	r3, #5
 8006b12:	607b      	str	r3, [r7, #4]
 8006b14:	e010      	b.n	8006b38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b16:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <osKernelStart+0x48>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d109      	bne.n	8006b32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b1e:	f7ff ffbf 	bl	8006aa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b22:	4b08      	ldr	r3, [pc, #32]	; (8006b44 <osKernelStart+0x48>)
 8006b24:	2202      	movs	r2, #2
 8006b26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b28:	f001 fcca 	bl	80084c0 <vTaskStartScheduler>
      stat = osOK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	e002      	b.n	8006b38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295
 8006b36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b38:	687b      	ldr	r3, [r7, #4]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	2000069c 	.word	0x2000069c

08006b48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	; 0x38
 8006b4c:	af04      	add	r7, sp, #16
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b58:	f3ef 8305 	mrs	r3, IPSR
 8006b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8006b5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d17e      	bne.n	8006c62 <osThreadNew+0x11a>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d07b      	beq.n	8006c62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b6e:	2318      	movs	r3, #24
 8006b70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006b76:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d045      	beq.n	8006c0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <osThreadNew+0x48>
        name = attr->name;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <osThreadNew+0x6e>
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b38      	cmp	r3, #56	; 0x38
 8006ba8:	d805      	bhi.n	8006bb6 <osThreadNew+0x6e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <osThreadNew+0x72>
        return (NULL);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e054      	b.n	8006c64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00e      	beq.n	8006bf0 <osThreadNew+0xa8>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	2b5b      	cmp	r3, #91	; 0x5b
 8006bd8:	d90a      	bls.n	8006bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d006      	beq.n	8006bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <osThreadNew+0xa8>
        mem = 1;
 8006bea:	2301      	movs	r3, #1
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e010      	b.n	8006c12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10c      	bne.n	8006c12 <osThreadNew+0xca>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d108      	bne.n	8006c12 <osThreadNew+0xca>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <osThreadNew+0xca>
          mem = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
 8006c0c:	e001      	b.n	8006c12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d110      	bne.n	8006c3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c20:	9202      	str	r2, [sp, #8]
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f001 fa70 	bl	8008114 <xTaskCreateStatic>
 8006c34:	4603      	mov	r3, r0
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	e013      	b.n	8006c62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d110      	bne.n	8006c62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	f107 0310 	add.w	r3, r7, #16
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f001 fabb 	bl	80081ce <xTaskCreate>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d001      	beq.n	8006c62 <osThreadNew+0x11a>
            hTask = NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c62:	693b      	ldr	r3, [r7, #16]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3728      	adds	r7, #40	; 0x28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c74:	f3ef 8305 	mrs	r3, IPSR
 8006c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <osDelay+0x1c>
    stat = osErrorISR;
 8006c80:	f06f 0305 	mvn.w	r3, #5
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e007      	b.n	8006c98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fbe0 	bl	8008458 <vTaskDelay>
    }
  }

  return (stat);
 8006c98:	68fb      	ldr	r3, [r7, #12]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b08a      	sub	sp, #40	; 0x28
 8006ca6:	af02      	add	r7, sp, #8
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cb2:	f3ef 8305 	mrs	r3, IPSR
 8006cb6:	613b      	str	r3, [r7, #16]
  return(result);
 8006cb8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d175      	bne.n	8006daa <osSemaphoreNew+0x108>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d072      	beq.n	8006daa <osSemaphoreNew+0x108>
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d86e      	bhi.n	8006daa <osSemaphoreNew+0x108>
    mem = -1;
 8006ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d015      	beq.n	8006d04 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <osSemaphoreNew+0x4c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b4f      	cmp	r3, #79	; 0x4f
 8006ce6:	d902      	bls.n	8006cee <osSemaphoreNew+0x4c>
        mem = 1;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	e00c      	b.n	8006d08 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d108      	bne.n	8006d08 <osSemaphoreNew+0x66>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <osSemaphoreNew+0x66>
          mem = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	e001      	b.n	8006d08 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d04c      	beq.n	8006daa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d128      	bne.n	8006d68 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d10a      	bne.n	8006d32 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2203      	movs	r2, #3
 8006d22:	9200      	str	r2, [sp, #0]
 8006d24:	2200      	movs	r2, #0
 8006d26:	2100      	movs	r1, #0
 8006d28:	2001      	movs	r0, #1
 8006d2a:	f000 fa4d 	bl	80071c8 <xQueueGenericCreateStatic>
 8006d2e:	61f8      	str	r0, [r7, #28]
 8006d30:	e005      	b.n	8006d3e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006d32:	2203      	movs	r2, #3
 8006d34:	2100      	movs	r1, #0
 8006d36:	2001      	movs	r0, #1
 8006d38:	f000 fabe 	bl	80072b8 <xQueueGenericCreate>
 8006d3c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d022      	beq.n	8006d8a <osSemaphoreNew+0xe8>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01f      	beq.n	8006d8a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2100      	movs	r1, #0
 8006d50:	69f8      	ldr	r0, [r7, #28]
 8006d52:	f000 fb79 	bl	8007448 <xQueueGenericSend>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d016      	beq.n	8006d8a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006d5c:	69f8      	ldr	r0, [r7, #28]
 8006d5e:	f001 f805 	bl	8007d6c <vQueueDelete>
            hSemaphore = NULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	e010      	b.n	8006d8a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d108      	bne.n	8006d80 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	461a      	mov	r2, r3
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 fafb 	bl	8007372 <xQueueCreateCountingSemaphoreStatic>
 8006d7c:	61f8      	str	r0, [r7, #28]
 8006d7e:	e004      	b.n	8006d8a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 fb2c 	bl	80073e0 <xQueueCreateCountingSemaphore>
 8006d88:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00c      	beq.n	8006daa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <osSemaphoreNew+0xfc>
          name = attr->name;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	e001      	b.n	8006da2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006da2:	6979      	ldr	r1, [r7, #20]
 8006da4:	69f8      	ldr	r0, [r7, #28]
 8006da6:	f001 f92d 	bl	8008004 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006daa:	69fb      	ldr	r3, [r7, #28]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3720      	adds	r7, #32
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d103      	bne.n	8006dd4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006dcc:	f06f 0303 	mvn.w	r3, #3
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e039      	b.n	8006e48 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd4:	f3ef 8305 	mrs	r3, IPSR
 8006dd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dda:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d022      	beq.n	8006e26 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006de6:	f06f 0303 	mvn.w	r3, #3
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	e02c      	b.n	8006e48 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	461a      	mov	r2, r3
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f000 ff36 	bl	8007c6c <xQueueReceiveFromISR>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d003      	beq.n	8006e0e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006e06:	f06f 0302 	mvn.w	r3, #2
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e01c      	b.n	8006e48 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d019      	beq.n	8006e48 <osSemaphoreAcquire+0x94>
 8006e14:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <osSemaphoreAcquire+0xa0>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	e010      	b.n	8006e48 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6938      	ldr	r0, [r7, #16]
 8006e2a:	f000 fe13 	bl	8007a54 <xQueueSemaphoreTake>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d009      	beq.n	8006e48 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006e3a:	f06f 0301 	mvn.w	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e002      	b.n	8006e48 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006e42:	f06f 0302 	mvn.w	r3, #2
 8006e46:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006e48:	697b      	ldr	r3, [r7, #20]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d103      	bne.n	8006e76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006e6e:	f06f 0303 	mvn.w	r3, #3
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	e02c      	b.n	8006ed0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e76:	f3ef 8305 	mrs	r3, IPSR
 8006e7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d01a      	beq.n	8006eb8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6938      	ldr	r0, [r7, #16]
 8006e8e:	f000 fc74 	bl	800777a <xQueueGiveFromISR>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d003      	beq.n	8006ea0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006e98:	f06f 0302 	mvn.w	r3, #2
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e017      	b.n	8006ed0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d014      	beq.n	8006ed0 <osSemaphoreRelease+0x78>
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <osSemaphoreRelease+0x84>)
 8006ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	e00b      	b.n	8006ed0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	6938      	ldr	r0, [r7, #16]
 8006ec0:	f000 fac2 	bl	8007448 <xQueueGenericSend>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d002      	beq.n	8006ed0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006eca:	f06f 0302 	mvn.w	r3, #2
 8006ece:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006ed0:	697b      	ldr	r3, [r7, #20]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eec:	f3ef 8305 	mrs	r3, IPSR
 8006ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8006ef8:	f06f 0305 	mvn.w	r3, #5
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	e00e      	b.n	8006f1e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8006f06:	f06f 0303 	mvn.w	r3, #3
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e007      	b.n	8006f1e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006f0e:	6938      	ldr	r0, [r7, #16]
 8006f10:	f001 f8a2 	bl	8008058 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8006f18:	6938      	ldr	r0, [r7, #16]
 8006f1a:	f000 ff27 	bl	8007d6c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006f1e:	697b      	ldr	r3, [r7, #20]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4a07      	ldr	r2, [pc, #28]	; (8006f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	4a06      	ldr	r2, [pc, #24]	; (8006f58 <vApplicationGetIdleTaskMemory+0x30>)
 8006f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2240      	movs	r2, #64	; 0x40
 8006f44:	601a      	str	r2, [r3, #0]
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	200006a0 	.word	0x200006a0
 8006f58:	200006fc 	.word	0x200006fc

08006f5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4a07      	ldr	r2, [pc, #28]	; (8006f88 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4a06      	ldr	r2, [pc, #24]	; (8006f8c <vApplicationGetTimerTaskMemory+0x30>)
 8006f72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2280      	movs	r2, #128	; 0x80
 8006f78:	601a      	str	r2, [r3, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	200007fc 	.word	0x200007fc
 8006f8c:	20000858 	.word	0x20000858

08006f90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f103 0208 	add.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f103 0208 	add.w	r2, r3, #8
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f103 0208 	add.w	r2, r3, #8
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
}
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d103      	bne.n	8007052 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	e00c      	b.n	800706c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3308      	adds	r3, #8
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e002      	b.n	8007060 <vListInsert+0x2e>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	429a      	cmp	r2, r3
 800706a:	d2f6      	bcs.n	800705a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	601a      	str	r2, [r3, #0]
}
 8007098:	bf00      	nop
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6892      	ldr	r2, [r2, #8]
 80070ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6852      	ldr	r2, [r2, #4]
 80070c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d103      	bne.n	80070d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	1e5a      	subs	r2, r3, #1
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007122:	f002 fc6f 	bl	8009a04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007132:	fb01 f303 	mul.w	r3, r1, r3
 8007136:	441a      	add	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007152:	3b01      	subs	r3, #1
 8007154:	68f9      	ldr	r1, [r7, #12]
 8007156:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007158:	fb01 f303 	mul.w	r3, r1, r3
 800715c:	441a      	add	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	22ff      	movs	r2, #255	; 0xff
 8007166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	22ff      	movs	r2, #255	; 0xff
 800716e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d114      	bne.n	80071a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d01a      	beq.n	80071b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3310      	adds	r3, #16
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fc25 	bl	80089d4 <xTaskRemoveFromEventList>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d012      	beq.n	80071b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007190:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <xQueueGenericReset+0xcc>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	e009      	b.n	80071b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3310      	adds	r3, #16
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fef2 	bl	8006f90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3324      	adds	r3, #36	; 0x24
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff feed 	bl	8006f90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80071b6:	f002 fc55 	bl	8009a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071ba:	2301      	movs	r3, #1
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08e      	sub	sp, #56	; 0x38
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <xQueueGenericCreateStatic+0x52>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <xQueueGenericCreateStatic+0x56>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xQueueGenericCreateStatic+0x58>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	623b      	str	r3, [r7, #32]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <xQueueGenericCreateStatic+0x7e>
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <xQueueGenericCreateStatic+0x82>
 8007246:	2301      	movs	r3, #1
 8007248:	e000      	b.n	800724c <xQueueGenericCreateStatic+0x84>
 800724a:	2300      	movs	r3, #0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	61fb      	str	r3, [r7, #28]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007266:	2350      	movs	r3, #80	; 0x50
 8007268:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b50      	cmp	r3, #80	; 0x50
 800726e:	d00a      	beq.n	8007286 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	61bb      	str	r3, [r7, #24]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007286:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00d      	beq.n	80072ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800729a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4613      	mov	r3, r2
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68b9      	ldr	r1, [r7, #8]
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f83f 	bl	800732c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3730      	adds	r7, #48	; 0x30
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08a      	sub	sp, #40	; 0x28
 80072bc:	af02      	add	r7, sp, #8
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	4613      	mov	r3, r2
 80072c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	613b      	str	r3, [r7, #16]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	3350      	adds	r3, #80	; 0x50
 80072f0:	4618      	mov	r0, r3
 80072f2:	f002 fca9 	bl	8009c48 <pvPortMalloc>
 80072f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d011      	beq.n	8007322 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	3350      	adds	r3, #80	; 0x50
 8007306:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007310:	79fa      	ldrb	r2, [r7, #7]
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4613      	mov	r3, r2
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f805 	bl	800732c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007322:	69bb      	ldr	r3, [r7, #24]
	}
 8007324:	4618      	mov	r0, r3
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	e002      	b.n	800734e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800735a:	2101      	movs	r1, #1
 800735c:	69b8      	ldr	r0, [r7, #24]
 800735e:	f7ff fecb 	bl	80070f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007372:	b580      	push	{r7, lr}
 8007374:	b08a      	sub	sp, #40	; 0x28
 8007376:	af02      	add	r7, sp, #8
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	61bb      	str	r3, [r7, #24]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d90a      	bls.n	80073b8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	617b      	str	r3, [r7, #20]
}
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80073b8:	2302      	movs	r3, #2
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	2100      	movs	r1, #0
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f7ff ff00 	bl	80071c8 <xQueueGenericCreateStatic>
 80073c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80073d6:	69fb      	ldr	r3, [r7, #28]
	}
 80073d8:	4618      	mov	r0, r3
 80073da:	3720      	adds	r7, #32
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	613b      	str	r3, [r7, #16]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	429a      	cmp	r2, r3
 800740c:	d90a      	bls.n	8007424 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	60fb      	str	r3, [r7, #12]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007424:	2202      	movs	r2, #2
 8007426:	2100      	movs	r1, #0
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff ff45 	bl	80072b8 <xQueueGenericCreate>
 800742e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800743c:	697b      	ldr	r3, [r7, #20]
	}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08e      	sub	sp, #56	; 0x38
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007456:	2300      	movs	r3, #0
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10a      	bne.n	800747a <xQueueGenericSend+0x32>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d103      	bne.n	8007488 <xQueueGenericSend+0x40>
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <xQueueGenericSend+0x44>
 8007488:	2301      	movs	r3, #1
 800748a:	e000      	b.n	800748e <xQueueGenericSend+0x46>
 800748c:	2300      	movs	r3, #0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <xQueueGenericSend+0x60>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d103      	bne.n	80074b6 <xQueueGenericSend+0x6e>
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d101      	bne.n	80074ba <xQueueGenericSend+0x72>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <xQueueGenericSend+0x74>
 80074ba:	2300      	movs	r3, #0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	623b      	str	r3, [r7, #32]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074d6:	f001 fc3b 	bl	8008d50 <xTaskGetSchedulerState>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <xQueueGenericSend+0x9e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <xQueueGenericSend+0xa2>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <xQueueGenericSend+0xa4>
 80074ea:	2300      	movs	r3, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10a      	bne.n	8007506 <xQueueGenericSend+0xbe>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	61fb      	str	r3, [r7, #28]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007506:	f002 fa7d 	bl	8009a04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <xQueueGenericSend+0xd4>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d129      	bne.n	8007570 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007522:	f000 fc5e 	bl	8007de2 <prvCopyDataToQueue>
 8007526:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b00      	cmp	r3, #0
 800752e:	d010      	beq.n	8007552 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	3324      	adds	r3, #36	; 0x24
 8007534:	4618      	mov	r0, r3
 8007536:	f001 fa4d 	bl	80089d4 <xTaskRemoveFromEventList>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d013      	beq.n	8007568 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007540:	4b3f      	ldr	r3, [pc, #252]	; (8007640 <xQueueGenericSend+0x1f8>)
 8007542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	e00a      	b.n	8007568 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007558:	4b39      	ldr	r3, [pc, #228]	; (8007640 <xQueueGenericSend+0x1f8>)
 800755a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007568:	f002 fa7c 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 800756c:	2301      	movs	r3, #1
 800756e:	e063      	b.n	8007638 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d103      	bne.n	800757e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007576:	f002 fa75 	bl	8009a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800757a:	2300      	movs	r3, #0
 800757c:	e05c      	b.n	8007638 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800757e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007584:	f107 0314 	add.w	r3, r7, #20
 8007588:	4618      	mov	r0, r3
 800758a:	f001 fa87 	bl	8008a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800758e:	2301      	movs	r3, #1
 8007590:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007592:	f002 fa67 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007596:	f000 fff9 	bl	800858c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800759a:	f002 fa33 	bl	8009a04 <vPortEnterCritical>
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075a4:	b25b      	sxtb	r3, r3
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075aa:	d103      	bne.n	80075b4 <xQueueGenericSend+0x16c>
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ba:	b25b      	sxtb	r3, r3
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c0:	d103      	bne.n	80075ca <xQueueGenericSend+0x182>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ca:	f002 fa4b 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ce:	1d3a      	adds	r2, r7, #4
 80075d0:	f107 0314 	add.w	r3, r7, #20
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fa76 	bl	8008ac8 <xTaskCheckForTimeOut>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d124      	bne.n	800762c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e4:	f000 fcf5 	bl	8007fd2 <prvIsQueueFull>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d018      	beq.n	8007620 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	3310      	adds	r3, #16
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 f99c 	bl	8008934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075fe:	f000 fc80 	bl	8007f02 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007602:	f000 ffd1 	bl	80085a8 <xTaskResumeAll>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	f47f af7c 	bne.w	8007506 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800760e:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <xQueueGenericSend+0x1f8>)
 8007610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	e772      	b.n	8007506 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007622:	f000 fc6e 	bl	8007f02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007626:	f000 ffbf 	bl	80085a8 <xTaskResumeAll>
 800762a:	e76c      	b.n	8007506 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800762c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800762e:	f000 fc68 	bl	8007f02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007632:	f000 ffb9 	bl	80085a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007636:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007638:	4618      	mov	r0, r3
 800763a:	3738      	adds	r7, #56	; 0x38
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	e000ed04 	.word	0xe000ed04

08007644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b090      	sub	sp, #64	; 0x40
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <xQueueGenericSendFromISR+0x3c>
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <xQueueGenericSendFromISR+0x40>
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <xQueueGenericSendFromISR+0x42>
 8007684:	2300      	movs	r3, #0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d103      	bne.n	80076ae <xQueueGenericSendFromISR+0x6a>
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <xQueueGenericSendFromISR+0x6e>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <xQueueGenericSendFromISR+0x70>
 80076b2:	2300      	movs	r3, #0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	623b      	str	r3, [r7, #32]
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076ce:	f002 fa7b 	bl	8009bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076d2:	f3ef 8211 	mrs	r2, BASEPRI
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	61fa      	str	r2, [r7, #28]
 80076e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d302      	bcc.n	8007700 <xQueueGenericSendFromISR+0xbc>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d12f      	bne.n	8007760 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007716:	f000 fb64 	bl	8007de2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800771a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d112      	bne.n	800774a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d016      	beq.n	800775a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	3324      	adds	r3, #36	; 0x24
 8007730:	4618      	mov	r0, r3
 8007732:	f001 f94f 	bl	80089d4 <xTaskRemoveFromEventList>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00e      	beq.n	800775a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	e007      	b.n	800775a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800774a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800774e:	3301      	adds	r3, #1
 8007750:	b2db      	uxtb	r3, r3
 8007752:	b25a      	sxtb	r2, r3
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800775a:	2301      	movs	r3, #1
 800775c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800775e:	e001      	b.n	8007764 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007760:	2300      	movs	r3, #0
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007766:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800776e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007772:	4618      	mov	r0, r3
 8007774:	3740      	adds	r7, #64	; 0x40
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b08e      	sub	sp, #56	; 0x38
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	623b      	str	r3, [r7, #32]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00a      	beq.n	80077c2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	61fb      	str	r3, [r7, #28]
}
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <xQueueGiveFromISR+0x58>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <xQueueGiveFromISR+0x5c>
 80077d2:	2301      	movs	r3, #1
 80077d4:	e000      	b.n	80077d8 <xQueueGiveFromISR+0x5e>
 80077d6:	2300      	movs	r3, #0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	61bb      	str	r3, [r7, #24]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077f2:	f002 f9e9 	bl	8009bc8 <vPortValidateInterruptPriority>
	__asm volatile
 80077f6:	f3ef 8211 	mrs	r2, BASEPRI
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	617a      	str	r2, [r7, #20]
 800780c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800780e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800781e:	429a      	cmp	r2, r3
 8007820:	d22b      	bcs.n	800787a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783c:	d112      	bne.n	8007864 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	3324      	adds	r3, #36	; 0x24
 800784a:	4618      	mov	r0, r3
 800784c:	f001 f8c2 	bl	80089d4 <xTaskRemoveFromEventList>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00e      	beq.n	8007874 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00b      	beq.n	8007874 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	e007      	b.n	8007874 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007868:	3301      	adds	r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	b25a      	sxtb	r2, r3
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007874:	2301      	movs	r3, #1
 8007876:	637b      	str	r3, [r7, #52]	; 0x34
 8007878:	e001      	b.n	800787e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800787a:	2300      	movs	r3, #0
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f383 8811 	msr	BASEPRI, r3
}
 8007888:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800788a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800788c:	4618      	mov	r0, r3
 800788e:	3738      	adds	r7, #56	; 0x38
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08c      	sub	sp, #48	; 0x30
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10a      	bne.n	80078c4 <xQueueReceive+0x30>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	623b      	str	r3, [r7, #32]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <xQueueReceive+0x3e>
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <xQueueReceive+0x42>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <xQueueReceive+0x44>
 80078d6:	2300      	movs	r3, #0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <xQueueReceive+0x5e>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	61fb      	str	r3, [r7, #28]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078f2:	f001 fa2d 	bl	8008d50 <xTaskGetSchedulerState>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <xQueueReceive+0x6e>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <xQueueReceive+0x72>
 8007902:	2301      	movs	r3, #1
 8007904:	e000      	b.n	8007908 <xQueueReceive+0x74>
 8007906:	2300      	movs	r3, #0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10a      	bne.n	8007922 <xQueueReceive+0x8e>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	61bb      	str	r3, [r7, #24]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007922:	f002 f86f 	bl	8009a04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01f      	beq.n	8007972 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007936:	f000 fabe 	bl	8007eb6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	1e5a      	subs	r2, r3, #1
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00f      	beq.n	800796a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	3310      	adds	r3, #16
 800794e:	4618      	mov	r0, r3
 8007950:	f001 f840 	bl	80089d4 <xTaskRemoveFromEventList>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d007      	beq.n	800796a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800795a:	4b3d      	ldr	r3, [pc, #244]	; (8007a50 <xQueueReceive+0x1bc>)
 800795c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800796a:	f002 f87b 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 800796e:	2301      	movs	r3, #1
 8007970:	e069      	b.n	8007a46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d103      	bne.n	8007980 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007978:	f002 f874 	bl	8009a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800797c:	2300      	movs	r3, #0
 800797e:	e062      	b.n	8007a46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007986:	f107 0310 	add.w	r3, r7, #16
 800798a:	4618      	mov	r0, r3
 800798c:	f001 f886 	bl	8008a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007990:	2301      	movs	r3, #1
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007994:	f002 f866 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007998:	f000 fdf8 	bl	800858c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800799c:	f002 f832 	bl	8009a04 <vPortEnterCritical>
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079a6:	b25b      	sxtb	r3, r3
 80079a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ac:	d103      	bne.n	80079b6 <xQueueReceive+0x122>
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079bc:	b25b      	sxtb	r3, r3
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c2:	d103      	bne.n	80079cc <xQueueReceive+0x138>
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079cc:	f002 f84a 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079d0:	1d3a      	adds	r2, r7, #4
 80079d2:	f107 0310 	add.w	r3, r7, #16
 80079d6:	4611      	mov	r1, r2
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 f875 	bl	8008ac8 <xTaskCheckForTimeOut>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d123      	bne.n	8007a2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079e6:	f000 fade 	bl	8007fa6 <prvIsQueueEmpty>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d017      	beq.n	8007a20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	3324      	adds	r3, #36	; 0x24
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	4611      	mov	r1, r2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 ff9b 	bl	8008934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a00:	f000 fa7f 	bl	8007f02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a04:	f000 fdd0 	bl	80085a8 <xTaskResumeAll>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d189      	bne.n	8007922 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007a0e:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <xQueueReceive+0x1bc>)
 8007a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	e780      	b.n	8007922 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a22:	f000 fa6e 	bl	8007f02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a26:	f000 fdbf 	bl	80085a8 <xTaskResumeAll>
 8007a2a:	e77a      	b.n	8007922 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a2e:	f000 fa68 	bl	8007f02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a32:	f000 fdb9 	bl	80085a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a38:	f000 fab5 	bl	8007fa6 <prvIsQueueEmpty>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f43f af6f 	beq.w	8007922 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3730      	adds	r7, #48	; 0x30
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08e      	sub	sp, #56	; 0x38
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	623b      	str	r3, [r7, #32]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	61fb      	str	r3, [r7, #28]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aa4:	f001 f954 	bl	8008d50 <xTaskGetSchedulerState>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d102      	bne.n	8007ab4 <xQueueSemaphoreTake+0x60>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <xQueueSemaphoreTake+0x64>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e000      	b.n	8007aba <xQueueSemaphoreTake+0x66>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	61bb      	str	r3, [r7, #24]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ad4:	f001 ff96 	bl	8009a04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d024      	beq.n	8007b2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	1e5a      	subs	r2, r3, #1
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007af4:	f001 faa2 	bl	800903c <pvTaskIncrementMutexHeldCount>
 8007af8:	4602      	mov	r2, r0
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00f      	beq.n	8007b26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	3310      	adds	r3, #16
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 ff62 	bl	80089d4 <xTaskRemoveFromEventList>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b16:	4b54      	ldr	r3, [pc, #336]	; (8007c68 <xQueueSemaphoreTake+0x214>)
 8007b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b26:	f001 ff9d 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e097      	b.n	8007c5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d111      	bne.n	8007b58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	617b      	str	r3, [r7, #20]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007b50:	f001 ff88 	bl	8009a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b54:	2300      	movs	r3, #0
 8007b56:	e082      	b.n	8007c5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b5e:	f107 030c 	add.w	r3, r7, #12
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 ff9a 	bl	8008a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b6c:	f001 ff7a 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b70:	f000 fd0c 	bl	800858c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b74:	f001 ff46 	bl	8009a04 <vPortEnterCritical>
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b7e:	b25b      	sxtb	r3, r3
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b84:	d103      	bne.n	8007b8e <xQueueSemaphoreTake+0x13a>
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b94:	b25b      	sxtb	r3, r3
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9a:	d103      	bne.n	8007ba4 <xQueueSemaphoreTake+0x150>
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ba4:	f001 ff5e 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ba8:	463a      	mov	r2, r7
 8007baa:	f107 030c 	add.w	r3, r7, #12
 8007bae:	4611      	mov	r1, r2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 ff89 	bl	8008ac8 <xTaskCheckForTimeOut>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d132      	bne.n	8007c22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bbe:	f000 f9f2 	bl	8007fa6 <prvIsQueueEmpty>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d026      	beq.n	8007c16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d109      	bne.n	8007be4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007bd0:	f001 ff18 	bl	8009a04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 f8d7 	bl	8008d8c <xTaskPriorityInherit>
 8007bde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007be0:	f001 ff40 	bl	8009a64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	3324      	adds	r3, #36	; 0x24
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	4611      	mov	r1, r2
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fea1 	bl	8008934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bf4:	f000 f985 	bl	8007f02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bf8:	f000 fcd6 	bl	80085a8 <xTaskResumeAll>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f47f af68 	bne.w	8007ad4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007c04:	4b18      	ldr	r3, [pc, #96]	; (8007c68 <xQueueSemaphoreTake+0x214>)
 8007c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	e75e      	b.n	8007ad4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c18:	f000 f973 	bl	8007f02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c1c:	f000 fcc4 	bl	80085a8 <xTaskResumeAll>
 8007c20:	e758      	b.n	8007ad4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c24:	f000 f96d 	bl	8007f02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c28:	f000 fcbe 	bl	80085a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c2e:	f000 f9ba 	bl	8007fa6 <prvIsQueueEmpty>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f43f af4d 	beq.w	8007ad4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00d      	beq.n	8007c5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007c40:	f001 fee0 	bl	8009a04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c46:	f000 f8b4 	bl	8007db2 <prvGetDisinheritPriorityAfterTimeout>
 8007c4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 f970 	bl	8008f38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007c58:	f001 ff04 	bl	8009a64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3738      	adds	r7, #56	; 0x38
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08e      	sub	sp, #56	; 0x38
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	623b      	str	r3, [r7, #32]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d103      	bne.n	8007ca6 <xQueueReceiveFromISR+0x3a>
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <xQueueReceiveFromISR+0x3e>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <xQueueReceiveFromISR+0x40>
 8007caa:	2300      	movs	r3, #0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	61fb      	str	r3, [r7, #28]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cc6:	f001 ff7f 	bl	8009bc8 <vPortValidateInterruptPriority>
	__asm volatile
 8007cca:	f3ef 8211 	mrs	r2, BASEPRI
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	61ba      	str	r2, [r7, #24]
 8007ce0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007ce2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d02f      	beq.n	8007d52 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d00:	f000 f8d9 	bl	8007eb6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	1e5a      	subs	r2, r3, #1
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007d0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d14:	d112      	bne.n	8007d3c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d016      	beq.n	8007d4c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	3310      	adds	r3, #16
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fe56 	bl	80089d4 <xTaskRemoveFromEventList>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00e      	beq.n	8007d4c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	e007      	b.n	8007d4c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d40:	3301      	adds	r3, #1
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	b25a      	sxtb	r2, r3
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d50:	e001      	b.n	8007d56 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f383 8811 	msr	BASEPRI, r3
}
 8007d60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3738      	adds	r7, #56	; 0x38
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10a      	bne.n	8007d94 <vQueueDelete+0x28>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	60bb      	str	r3, [r7, #8]
}
 8007d90:	bf00      	nop
 8007d92:	e7fe      	b.n	8007d92 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f95f 	bl	8008058 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f002 f81b 	bl	8009de0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d006      	beq.n	8007dd0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	e001      	b.n	8007dd4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
	}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b086      	sub	sp, #24
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10d      	bne.n	8007e1c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d14d      	bne.n	8007ea4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f001 f825 	bl	8008e5c <xTaskPriorityDisinherit>
 8007e12:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	609a      	str	r2, [r3, #8]
 8007e1a:	e043      	b.n	8007ea4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d119      	bne.n	8007e56 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6858      	ldr	r0, [r3, #4]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	f002 f91f 	bl	800a070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	441a      	add	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d32b      	bcc.n	8007ea4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	605a      	str	r2, [r3, #4]
 8007e54:	e026      	b.n	8007ea4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	68d8      	ldr	r0, [r3, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	461a      	mov	r2, r3
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	f002 f905 	bl	800a070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	425b      	negs	r3, r3
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d207      	bcs.n	8007e92 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	425b      	negs	r3, r3
 8007e8c:	441a      	add	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d105      	bne.n	8007ea4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007eac:	697b      	ldr	r3, [r7, #20]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d018      	beq.n	8007efa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed0:	441a      	add	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d303      	bcc.n	8007eea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68d9      	ldr	r1, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6838      	ldr	r0, [r7, #0]
 8007ef6:	f002 f8bb 	bl	800a070 <memcpy>
	}
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f0a:	f001 fd7b 	bl	8009a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f14:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f16:	e011      	b.n	8007f3c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d012      	beq.n	8007f46 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3324      	adds	r3, #36	; 0x24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fd55 	bl	80089d4 <xTaskRemoveFromEventList>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f30:	f000 fe2c 	bl	8008b8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	dce9      	bgt.n	8007f18 <prvUnlockQueue+0x16>
 8007f44:	e000      	b.n	8007f48 <prvUnlockQueue+0x46>
					break;
 8007f46:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	22ff      	movs	r2, #255	; 0xff
 8007f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f50:	f001 fd88 	bl	8009a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f54:	f001 fd56 	bl	8009a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f5e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f60:	e011      	b.n	8007f86 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d012      	beq.n	8007f90 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3310      	adds	r3, #16
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fd30 	bl	80089d4 <xTaskRemoveFromEventList>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f7a:	f000 fe07 	bl	8008b8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dce9      	bgt.n	8007f62 <prvUnlockQueue+0x60>
 8007f8e:	e000      	b.n	8007f92 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f90:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	22ff      	movs	r2, #255	; 0xff
 8007f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f9a:	f001 fd63 	bl	8009a64 <vPortExitCritical>
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fae:	f001 fd29 	bl	8009a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e001      	b.n	8007fc4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fc4:	f001 fd4e 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fda:	f001 fd13 	bl	8009a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d102      	bne.n	8007ff0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fea:	2301      	movs	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e001      	b.n	8007ff4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ff4:	f001 fd36 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	e014      	b.n	800803e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008014:	4a0f      	ldr	r2, [pc, #60]	; (8008054 <vQueueAddToRegistry+0x50>)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008020:	490c      	ldr	r1, [pc, #48]	; (8008054 <vQueueAddToRegistry+0x50>)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800802a:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <vQueueAddToRegistry+0x50>)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	4413      	add	r3, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008036:	e006      	b.n	8008046 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3301      	adds	r3, #1
 800803c:	60fb      	str	r3, [r7, #12]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b07      	cmp	r3, #7
 8008042:	d9e7      	bls.n	8008014 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008044:	bf00      	nop
 8008046:	bf00      	nop
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20005984 	.word	0x20005984

08008058 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e016      	b.n	8008094 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008066:	4a10      	ldr	r2, [pc, #64]	; (80080a8 <vQueueUnregisterQueue+0x50>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	4413      	add	r3, r2
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	429a      	cmp	r2, r3
 8008074:	d10b      	bne.n	800808e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008076:	4a0c      	ldr	r2, [pc, #48]	; (80080a8 <vQueueUnregisterQueue+0x50>)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2100      	movs	r1, #0
 800807c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008080:	4a09      	ldr	r2, [pc, #36]	; (80080a8 <vQueueUnregisterQueue+0x50>)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	4413      	add	r3, r2
 8008088:	2200      	movs	r2, #0
 800808a:	605a      	str	r2, [r3, #4]
				break;
 800808c:	e006      	b.n	800809c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3301      	adds	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b07      	cmp	r3, #7
 8008098:	d9e5      	bls.n	8008066 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20005984 	.word	0x20005984

080080ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080bc:	f001 fca2 	bl	8009a04 <vPortEnterCritical>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080c6:	b25b      	sxtb	r3, r3
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d103      	bne.n	80080d6 <vQueueWaitForMessageRestricted+0x2a>
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080dc:	b25b      	sxtb	r3, r3
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d103      	bne.n	80080ec <vQueueWaitForMessageRestricted+0x40>
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080ec:	f001 fcba 	bl	8009a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	3324      	adds	r3, #36	; 0x24
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fc3b 	bl	800897c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008106:	6978      	ldr	r0, [r7, #20]
 8008108:	f7ff fefb 	bl	8007f02 <prvUnlockQueue>
	}
 800810c:	bf00      	nop
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08e      	sub	sp, #56	; 0x38
 8008118:	af04      	add	r7, sp, #16
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	623b      	str	r3, [r7, #32]
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <xTaskCreateStatic+0x46>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	61fb      	str	r3, [r7, #28]
}
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800815a:	235c      	movs	r3, #92	; 0x5c
 800815c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b5c      	cmp	r3, #92	; 0x5c
 8008162:	d00a      	beq.n	800817a <xTaskCreateStatic+0x66>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	61bb      	str	r3, [r7, #24]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800817a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01e      	beq.n	80081c0 <xTaskCreateStatic+0xac>
 8008182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01b      	beq.n	80081c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008190:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	2202      	movs	r2, #2
 8008196:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800819a:	2300      	movs	r3, #0
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	9302      	str	r3, [sp, #8]
 80081a2:	f107 0314 	add.w	r3, r7, #20
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 f850 	bl	8008258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081ba:	f000 f8dd 	bl	8008378 <prvAddNewTaskToReadyList>
 80081be:	e001      	b.n	80081c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081c4:	697b      	ldr	r3, [r7, #20]
	}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3728      	adds	r7, #40	; 0x28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b08c      	sub	sp, #48	; 0x30
 80081d2:	af04      	add	r7, sp, #16
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	603b      	str	r3, [r7, #0]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081de:	88fb      	ldrh	r3, [r7, #6]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 fd30 	bl	8009c48 <pvPortMalloc>
 80081e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00e      	beq.n	800820e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081f0:	205c      	movs	r0, #92	; 0x5c
 80081f2:	f001 fd29 	bl	8009c48 <pvPortMalloc>
 80081f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	631a      	str	r2, [r3, #48]	; 0x30
 8008204:	e005      	b.n	8008212 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008206:	6978      	ldr	r0, [r7, #20]
 8008208:	f001 fdea 	bl	8009de0 <vPortFree>
 800820c:	e001      	b.n	8008212 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800820e:	2300      	movs	r3, #0
 8008210:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d017      	beq.n	8008248 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008220:	88fa      	ldrh	r2, [r7, #6]
 8008222:	2300      	movs	r3, #0
 8008224:	9303      	str	r3, [sp, #12]
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	9302      	str	r3, [sp, #8]
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f80e 	bl	8008258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800823c:	69f8      	ldr	r0, [r7, #28]
 800823e:	f000 f89b 	bl	8008378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008242:	2301      	movs	r3, #1
 8008244:	61bb      	str	r3, [r7, #24]
 8008246:	e002      	b.n	800824e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008248:	f04f 33ff 	mov.w	r3, #4294967295
 800824c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800824e:	69bb      	ldr	r3, [r7, #24]
	}
 8008250:	4618      	mov	r0, r3
 8008252:	3720      	adds	r7, #32
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	461a      	mov	r2, r3
 8008270:	21a5      	movs	r1, #165	; 0xa5
 8008272:	f001 ff0b 	bl	800a08c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008280:	3b01      	subs	r3, #1
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	617b      	str	r3, [r7, #20]
}
 80082ac:	bf00      	nop
 80082ae:	e7fe      	b.n	80082ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d01f      	beq.n	80082f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082b6:	2300      	movs	r3, #0
 80082b8:	61fb      	str	r3, [r7, #28]
 80082ba:	e012      	b.n	80082e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	7819      	ldrb	r1, [r3, #0]
 80082c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	3334      	adds	r3, #52	; 0x34
 80082cc:	460a      	mov	r2, r1
 80082ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4413      	add	r3, r2
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d006      	beq.n	80082ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	3301      	adds	r3, #1
 80082e0:	61fb      	str	r3, [r7, #28]
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	2b0f      	cmp	r3, #15
 80082e6:	d9e9      	bls.n	80082bc <prvInitialiseNewTask+0x64>
 80082e8:	e000      	b.n	80082ec <prvInitialiseNewTask+0x94>
			{
				break;
 80082ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082f4:	e003      	b.n	80082fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	2b37      	cmp	r3, #55	; 0x37
 8008302:	d901      	bls.n	8008308 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008304:	2337      	movs	r3, #55	; 0x37
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800830c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008312:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	2200      	movs	r2, #0
 8008318:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	3304      	adds	r3, #4
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fe56 	bl	8006fd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	3318      	adds	r3, #24
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fe51 	bl	8006fd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	2200      	movs	r2, #0
 8008348:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	68f9      	ldr	r1, [r7, #12]
 8008356:	69b8      	ldr	r0, [r7, #24]
 8008358:	f001 fa26 	bl	80097a8 <pxPortInitialiseStack>
 800835c:	4602      	mov	r2, r0
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800836e:	bf00      	nop
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008380:	f001 fb40 	bl	8009a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008384:	4b2d      	ldr	r3, [pc, #180]	; (800843c <prvAddNewTaskToReadyList+0xc4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	4a2c      	ldr	r2, [pc, #176]	; (800843c <prvAddNewTaskToReadyList+0xc4>)
 800838c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800838e:	4b2c      	ldr	r3, [pc, #176]	; (8008440 <prvAddNewTaskToReadyList+0xc8>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d109      	bne.n	80083aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008396:	4a2a      	ldr	r2, [pc, #168]	; (8008440 <prvAddNewTaskToReadyList+0xc8>)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800839c:	4b27      	ldr	r3, [pc, #156]	; (800843c <prvAddNewTaskToReadyList+0xc4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d110      	bne.n	80083c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083a4:	f000 fc16 	bl	8008bd4 <prvInitialiseTaskLists>
 80083a8:	e00d      	b.n	80083c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083aa:	4b26      	ldr	r3, [pc, #152]	; (8008444 <prvAddNewTaskToReadyList+0xcc>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083b2:	4b23      	ldr	r3, [pc, #140]	; (8008440 <prvAddNewTaskToReadyList+0xc8>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	429a      	cmp	r2, r3
 80083be:	d802      	bhi.n	80083c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083c0:	4a1f      	ldr	r2, [pc, #124]	; (8008440 <prvAddNewTaskToReadyList+0xc8>)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083c6:	4b20      	ldr	r3, [pc, #128]	; (8008448 <prvAddNewTaskToReadyList+0xd0>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3301      	adds	r3, #1
 80083cc:	4a1e      	ldr	r2, [pc, #120]	; (8008448 <prvAddNewTaskToReadyList+0xd0>)
 80083ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083d0:	4b1d      	ldr	r3, [pc, #116]	; (8008448 <prvAddNewTaskToReadyList+0xd0>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083dc:	4b1b      	ldr	r3, [pc, #108]	; (800844c <prvAddNewTaskToReadyList+0xd4>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d903      	bls.n	80083ec <prvAddNewTaskToReadyList+0x74>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	4a18      	ldr	r2, [pc, #96]	; (800844c <prvAddNewTaskToReadyList+0xd4>)
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4a15      	ldr	r2, [pc, #84]	; (8008450 <prvAddNewTaskToReadyList+0xd8>)
 80083fa:	441a      	add	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3304      	adds	r3, #4
 8008400:	4619      	mov	r1, r3
 8008402:	4610      	mov	r0, r2
 8008404:	f7fe fdf1 	bl	8006fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008408:	f001 fb2c 	bl	8009a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800840c:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <prvAddNewTaskToReadyList+0xcc>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00e      	beq.n	8008432 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008414:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <prvAddNewTaskToReadyList+0xc8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	429a      	cmp	r2, r3
 8008420:	d207      	bcs.n	8008432 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008422:	4b0c      	ldr	r3, [pc, #48]	; (8008454 <prvAddNewTaskToReadyList+0xdc>)
 8008424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000f2c 	.word	0x20000f2c
 8008440:	20000a58 	.word	0x20000a58
 8008444:	20000f38 	.word	0x20000f38
 8008448:	20000f48 	.word	0x20000f48
 800844c:	20000f34 	.word	0x20000f34
 8008450:	20000a5c 	.word	0x20000a5c
 8008454:	e000ed04 	.word	0xe000ed04

08008458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d017      	beq.n	800849a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800846a:	4b13      	ldr	r3, [pc, #76]	; (80084b8 <vTaskDelay+0x60>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <vTaskDelay+0x30>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	60bb      	str	r3, [r7, #8]
}
 8008484:	bf00      	nop
 8008486:	e7fe      	b.n	8008486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008488:	f000 f880 	bl	800858c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800848c:	2100      	movs	r1, #0
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fde8 	bl	8009064 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008494:	f000 f888 	bl	80085a8 <xTaskResumeAll>
 8008498:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d107      	bne.n	80084b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80084a0:	4b06      	ldr	r3, [pc, #24]	; (80084bc <vTaskDelay+0x64>)
 80084a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20000f54 	.word	0x20000f54
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084ce:	463a      	mov	r2, r7
 80084d0:	1d39      	adds	r1, r7, #4
 80084d2:	f107 0308 	add.w	r3, r7, #8
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fd26 	bl	8006f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	9202      	str	r2, [sp, #8]
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	2300      	movs	r3, #0
 80084ec:	460a      	mov	r2, r1
 80084ee:	4921      	ldr	r1, [pc, #132]	; (8008574 <vTaskStartScheduler+0xb4>)
 80084f0:	4821      	ldr	r0, [pc, #132]	; (8008578 <vTaskStartScheduler+0xb8>)
 80084f2:	f7ff fe0f 	bl	8008114 <xTaskCreateStatic>
 80084f6:	4603      	mov	r3, r0
 80084f8:	4a20      	ldr	r2, [pc, #128]	; (800857c <vTaskStartScheduler+0xbc>)
 80084fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084fc:	4b1f      	ldr	r3, [pc, #124]	; (800857c <vTaskStartScheduler+0xbc>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008504:	2301      	movs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e001      	b.n	800850e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d102      	bne.n	800851a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008514:	f000 fdfa 	bl	800910c <xTimerCreateTimerTask>
 8008518:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d116      	bne.n	800854e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	613b      	str	r3, [r7, #16]
}
 8008532:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008534:	4b12      	ldr	r3, [pc, #72]	; (8008580 <vTaskStartScheduler+0xc0>)
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800853c:	4b11      	ldr	r3, [pc, #68]	; (8008584 <vTaskStartScheduler+0xc4>)
 800853e:	2201      	movs	r2, #1
 8008540:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008542:	4b11      	ldr	r3, [pc, #68]	; (8008588 <vTaskStartScheduler+0xc8>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008548:	f001 f9ba 	bl	80098c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800854c:	e00e      	b.n	800856c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d10a      	bne.n	800856c <vTaskStartScheduler+0xac>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	60fb      	str	r3, [r7, #12]
}
 8008568:	bf00      	nop
 800856a:	e7fe      	b.n	800856a <vTaskStartScheduler+0xaa>
}
 800856c:	bf00      	nop
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	0800f2e4 	.word	0x0800f2e4
 8008578:	08008ba5 	.word	0x08008ba5
 800857c:	20000f50 	.word	0x20000f50
 8008580:	20000f4c 	.word	0x20000f4c
 8008584:	20000f38 	.word	0x20000f38
 8008588:	20000f30 	.word	0x20000f30

0800858c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008590:	4b04      	ldr	r3, [pc, #16]	; (80085a4 <vTaskSuspendAll+0x18>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	4a03      	ldr	r2, [pc, #12]	; (80085a4 <vTaskSuspendAll+0x18>)
 8008598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800859a:	bf00      	nop
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	20000f54 	.word	0x20000f54

080085a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085b6:	4b42      	ldr	r3, [pc, #264]	; (80086c0 <xTaskResumeAll+0x118>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	603b      	str	r3, [r7, #0]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085d4:	f001 fa16 	bl	8009a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085d8:	4b39      	ldr	r3, [pc, #228]	; (80086c0 <xTaskResumeAll+0x118>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3b01      	subs	r3, #1
 80085de:	4a38      	ldr	r2, [pc, #224]	; (80086c0 <xTaskResumeAll+0x118>)
 80085e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e2:	4b37      	ldr	r3, [pc, #220]	; (80086c0 <xTaskResumeAll+0x118>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d162      	bne.n	80086b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085ea:	4b36      	ldr	r3, [pc, #216]	; (80086c4 <xTaskResumeAll+0x11c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d05e      	beq.n	80086b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085f2:	e02f      	b.n	8008654 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085f4:	4b34      	ldr	r3, [pc, #208]	; (80086c8 <xTaskResumeAll+0x120>)
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3318      	adds	r3, #24
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe fd4f 	bl	80070a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3304      	adds	r3, #4
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fd4a 	bl	80070a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008614:	4b2d      	ldr	r3, [pc, #180]	; (80086cc <xTaskResumeAll+0x124>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d903      	bls.n	8008624 <xTaskResumeAll+0x7c>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	4a2a      	ldr	r2, [pc, #168]	; (80086cc <xTaskResumeAll+0x124>)
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4a27      	ldr	r2, [pc, #156]	; (80086d0 <xTaskResumeAll+0x128>)
 8008632:	441a      	add	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3304      	adds	r3, #4
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f7fe fcd5 	bl	8006fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008644:	4b23      	ldr	r3, [pc, #140]	; (80086d4 <xTaskResumeAll+0x12c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	429a      	cmp	r2, r3
 800864c:	d302      	bcc.n	8008654 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800864e:	4b22      	ldr	r3, [pc, #136]	; (80086d8 <xTaskResumeAll+0x130>)
 8008650:	2201      	movs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008654:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <xTaskResumeAll+0x120>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1cb      	bne.n	80085f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008662:	f000 fb55 	bl	8008d10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008666:	4b1d      	ldr	r3, [pc, #116]	; (80086dc <xTaskResumeAll+0x134>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d010      	beq.n	8008694 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008672:	f000 f847 	bl	8008704 <xTaskIncrementTick>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800867c:	4b16      	ldr	r3, [pc, #88]	; (80086d8 <xTaskResumeAll+0x130>)
 800867e:	2201      	movs	r2, #1
 8008680:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3b01      	subs	r3, #1
 8008686:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1f1      	bne.n	8008672 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <xTaskResumeAll+0x134>)
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008694:	4b10      	ldr	r3, [pc, #64]	; (80086d8 <xTaskResumeAll+0x130>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d009      	beq.n	80086b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800869c:	2301      	movs	r3, #1
 800869e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086a0:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <xTaskResumeAll+0x138>)
 80086a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086b0:	f001 f9d8 	bl	8009a64 <vPortExitCritical>

	return xAlreadyYielded;
 80086b4:	68bb      	ldr	r3, [r7, #8]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000f54 	.word	0x20000f54
 80086c4:	20000f2c 	.word	0x20000f2c
 80086c8:	20000eec 	.word	0x20000eec
 80086cc:	20000f34 	.word	0x20000f34
 80086d0:	20000a5c 	.word	0x20000a5c
 80086d4:	20000a58 	.word	0x20000a58
 80086d8:	20000f40 	.word	0x20000f40
 80086dc:	20000f3c 	.word	0x20000f3c
 80086e0:	e000ed04 	.word	0xe000ed04

080086e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086ea:	4b05      	ldr	r3, [pc, #20]	; (8008700 <xTaskGetTickCount+0x1c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086f0:	687b      	ldr	r3, [r7, #4]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000f30 	.word	0x20000f30

08008704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800870e:	4b4f      	ldr	r3, [pc, #316]	; (800884c <xTaskIncrementTick+0x148>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f040 808f 	bne.w	8008836 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008718:	4b4d      	ldr	r3, [pc, #308]	; (8008850 <xTaskIncrementTick+0x14c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008720:	4a4b      	ldr	r2, [pc, #300]	; (8008850 <xTaskIncrementTick+0x14c>)
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d120      	bne.n	800876e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800872c:	4b49      	ldr	r3, [pc, #292]	; (8008854 <xTaskIncrementTick+0x150>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <xTaskIncrementTick+0x48>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	603b      	str	r3, [r7, #0]
}
 8008748:	bf00      	nop
 800874a:	e7fe      	b.n	800874a <xTaskIncrementTick+0x46>
 800874c:	4b41      	ldr	r3, [pc, #260]	; (8008854 <xTaskIncrementTick+0x150>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	4b41      	ldr	r3, [pc, #260]	; (8008858 <xTaskIncrementTick+0x154>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a3f      	ldr	r2, [pc, #252]	; (8008854 <xTaskIncrementTick+0x150>)
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	4a3f      	ldr	r2, [pc, #252]	; (8008858 <xTaskIncrementTick+0x154>)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	4b3e      	ldr	r3, [pc, #248]	; (800885c <xTaskIncrementTick+0x158>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3301      	adds	r3, #1
 8008766:	4a3d      	ldr	r2, [pc, #244]	; (800885c <xTaskIncrementTick+0x158>)
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	f000 fad1 	bl	8008d10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800876e:	4b3c      	ldr	r3, [pc, #240]	; (8008860 <xTaskIncrementTick+0x15c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	429a      	cmp	r2, r3
 8008776:	d349      	bcc.n	800880c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008778:	4b36      	ldr	r3, [pc, #216]	; (8008854 <xTaskIncrementTick+0x150>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d104      	bne.n	800878c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008782:	4b37      	ldr	r3, [pc, #220]	; (8008860 <xTaskIncrementTick+0x15c>)
 8008784:	f04f 32ff 	mov.w	r2, #4294967295
 8008788:	601a      	str	r2, [r3, #0]
					break;
 800878a:	e03f      	b.n	800880c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800878c:	4b31      	ldr	r3, [pc, #196]	; (8008854 <xTaskIncrementTick+0x150>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d203      	bcs.n	80087ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087a4:	4a2e      	ldr	r2, [pc, #184]	; (8008860 <xTaskIncrementTick+0x15c>)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087aa:	e02f      	b.n	800880c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	3304      	adds	r3, #4
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fe fc77 	bl	80070a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d004      	beq.n	80087c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	3318      	adds	r3, #24
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe fc6e 	bl	80070a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087cc:	4b25      	ldr	r3, [pc, #148]	; (8008864 <xTaskIncrementTick+0x160>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d903      	bls.n	80087dc <xTaskIncrementTick+0xd8>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	4a22      	ldr	r2, [pc, #136]	; (8008864 <xTaskIncrementTick+0x160>)
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e0:	4613      	mov	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4a1f      	ldr	r2, [pc, #124]	; (8008868 <xTaskIncrementTick+0x164>)
 80087ea:	441a      	add	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	3304      	adds	r3, #4
 80087f0:	4619      	mov	r1, r3
 80087f2:	4610      	mov	r0, r2
 80087f4:	f7fe fbf9 	bl	8006fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fc:	4b1b      	ldr	r3, [pc, #108]	; (800886c <xTaskIncrementTick+0x168>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008802:	429a      	cmp	r2, r3
 8008804:	d3b8      	bcc.n	8008778 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008806:	2301      	movs	r3, #1
 8008808:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800880a:	e7b5      	b.n	8008778 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800880c:	4b17      	ldr	r3, [pc, #92]	; (800886c <xTaskIncrementTick+0x168>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008812:	4915      	ldr	r1, [pc, #84]	; (8008868 <xTaskIncrementTick+0x164>)
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	440b      	add	r3, r1
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d901      	bls.n	8008828 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008828:	4b11      	ldr	r3, [pc, #68]	; (8008870 <xTaskIncrementTick+0x16c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d007      	beq.n	8008840 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008830:	2301      	movs	r3, #1
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	e004      	b.n	8008840 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008836:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <xTaskIncrementTick+0x170>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	4a0d      	ldr	r2, [pc, #52]	; (8008874 <xTaskIncrementTick+0x170>)
 800883e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008840:	697b      	ldr	r3, [r7, #20]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000f54 	.word	0x20000f54
 8008850:	20000f30 	.word	0x20000f30
 8008854:	20000ee4 	.word	0x20000ee4
 8008858:	20000ee8 	.word	0x20000ee8
 800885c:	20000f44 	.word	0x20000f44
 8008860:	20000f4c 	.word	0x20000f4c
 8008864:	20000f34 	.word	0x20000f34
 8008868:	20000a5c 	.word	0x20000a5c
 800886c:	20000a58 	.word	0x20000a58
 8008870:	20000f40 	.word	0x20000f40
 8008874:	20000f3c 	.word	0x20000f3c

08008878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800887e:	4b28      	ldr	r3, [pc, #160]	; (8008920 <vTaskSwitchContext+0xa8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008886:	4b27      	ldr	r3, [pc, #156]	; (8008924 <vTaskSwitchContext+0xac>)
 8008888:	2201      	movs	r2, #1
 800888a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800888c:	e041      	b.n	8008912 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800888e:	4b25      	ldr	r3, [pc, #148]	; (8008924 <vTaskSwitchContext+0xac>)
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008894:	4b24      	ldr	r3, [pc, #144]	; (8008928 <vTaskSwitchContext+0xb0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	e010      	b.n	80088be <vTaskSwitchContext+0x46>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10a      	bne.n	80088b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	607b      	str	r3, [r7, #4]
}
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <vTaskSwitchContext+0x3e>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	491b      	ldr	r1, [pc, #108]	; (800892c <vTaskSwitchContext+0xb4>)
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	440b      	add	r3, r1
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0e4      	beq.n	800889c <vTaskSwitchContext+0x24>
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4a13      	ldr	r2, [pc, #76]	; (800892c <vTaskSwitchContext+0xb4>)
 80088de:	4413      	add	r3, r2
 80088e0:	60bb      	str	r3, [r7, #8]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	605a      	str	r2, [r3, #4]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	3308      	adds	r3, #8
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d104      	bne.n	8008902 <vTaskSwitchContext+0x8a>
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	4a09      	ldr	r2, [pc, #36]	; (8008930 <vTaskSwitchContext+0xb8>)
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	4a06      	ldr	r2, [pc, #24]	; (8008928 <vTaskSwitchContext+0xb0>)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6013      	str	r3, [r2, #0]
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	20000f54 	.word	0x20000f54
 8008924:	20000f40 	.word	0x20000f40
 8008928:	20000f34 	.word	0x20000f34
 800892c:	20000a5c 	.word	0x20000a5c
 8008930:	20000a58 	.word	0x20000a58

08008934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	60fb      	str	r3, [r7, #12]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800895a:	4b07      	ldr	r3, [pc, #28]	; (8008978 <vTaskPlaceOnEventList+0x44>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3318      	adds	r3, #24
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fe fb65 	bl	8007032 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008968:	2101      	movs	r1, #1
 800896a:	6838      	ldr	r0, [r7, #0]
 800896c:	f000 fb7a 	bl	8009064 <prvAddCurrentTaskToDelayedList>
}
 8008970:	bf00      	nop
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000a58 	.word	0x20000a58

0800897c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	617b      	str	r3, [r7, #20]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a4:	4b0a      	ldr	r3, [pc, #40]	; (80089d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3318      	adds	r3, #24
 80089aa:	4619      	mov	r1, r3
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7fe fb1c 	bl	8006fea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80089b8:	f04f 33ff 	mov.w	r3, #4294967295
 80089bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	68b8      	ldr	r0, [r7, #8]
 80089c2:	f000 fb4f 	bl	8009064 <prvAddCurrentTaskToDelayedList>
	}
 80089c6:	bf00      	nop
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20000a58 	.word	0x20000a58

080089d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	60fb      	str	r3, [r7, #12]
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	3318      	adds	r3, #24
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fe fb4d 	bl	80070a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0a:	4b1e      	ldr	r3, [pc, #120]	; (8008a84 <xTaskRemoveFromEventList+0xb0>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d11d      	bne.n	8008a4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe fb44 	bl	80070a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a20:	4b19      	ldr	r3, [pc, #100]	; (8008a88 <xTaskRemoveFromEventList+0xb4>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d903      	bls.n	8008a30 <xTaskRemoveFromEventList+0x5c>
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	4a16      	ldr	r2, [pc, #88]	; (8008a88 <xTaskRemoveFromEventList+0xb4>)
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a34:	4613      	mov	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4a13      	ldr	r2, [pc, #76]	; (8008a8c <xTaskRemoveFromEventList+0xb8>)
 8008a3e:	441a      	add	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f7fe facf 	bl	8006fea <vListInsertEnd>
 8008a4c:	e005      	b.n	8008a5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	3318      	adds	r3, #24
 8008a52:	4619      	mov	r1, r3
 8008a54:	480e      	ldr	r0, [pc, #56]	; (8008a90 <xTaskRemoveFromEventList+0xbc>)
 8008a56:	f7fe fac8 	bl	8006fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <xTaskRemoveFromEventList+0xc0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d905      	bls.n	8008a74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <xTaskRemoveFromEventList+0xc4>)
 8008a6e:	2201      	movs	r2, #1
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	e001      	b.n	8008a78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a78:	697b      	ldr	r3, [r7, #20]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20000f54 	.word	0x20000f54
 8008a88:	20000f34 	.word	0x20000f34
 8008a8c:	20000a5c 	.word	0x20000a5c
 8008a90:	20000eec 	.word	0x20000eec
 8008a94:	20000a58 	.word	0x20000a58
 8008a98:	20000f40 	.word	0x20000f40

08008a9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008aa4:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <vTaskInternalSetTimeOutState+0x24>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <vTaskInternalSetTimeOutState+0x28>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	605a      	str	r2, [r3, #4]
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	20000f44 	.word	0x20000f44
 8008ac4:	20000f30 	.word	0x20000f30

08008ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	613b      	str	r3, [r7, #16]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10a      	bne.n	8008b0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60fb      	str	r3, [r7, #12]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b0a:	f000 ff7b 	bl	8009a04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b0e:	4b1d      	ldr	r3, [pc, #116]	; (8008b84 <xTaskCheckForTimeOut+0xbc>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d102      	bne.n	8008b2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61fb      	str	r3, [r7, #28]
 8008b2c:	e023      	b.n	8008b76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4b15      	ldr	r3, [pc, #84]	; (8008b88 <xTaskCheckForTimeOut+0xc0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d007      	beq.n	8008b4a <xTaskCheckForTimeOut+0x82>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d302      	bcc.n	8008b4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b44:	2301      	movs	r3, #1
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	e015      	b.n	8008b76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d20b      	bcs.n	8008b6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	1ad2      	subs	r2, r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff ff9b 	bl	8008a9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61fb      	str	r3, [r7, #28]
 8008b6a:	e004      	b.n	8008b76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b72:	2301      	movs	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b76:	f000 ff75 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8008b7a:	69fb      	ldr	r3, [r7, #28]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3720      	adds	r7, #32
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20000f30 	.word	0x20000f30
 8008b88:	20000f44 	.word	0x20000f44

08008b8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b90:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <vTaskMissedYield+0x14>)
 8008b92:	2201      	movs	r2, #1
 8008b94:	601a      	str	r2, [r3, #0]
}
 8008b96:	bf00      	nop
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20000f40 	.word	0x20000f40

08008ba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bac:	f000 f852 	bl	8008c54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bb0:	4b06      	ldr	r3, [pc, #24]	; (8008bcc <prvIdleTask+0x28>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d9f9      	bls.n	8008bac <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bb8:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <prvIdleTask+0x2c>)
 8008bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bc8:	e7f0      	b.n	8008bac <prvIdleTask+0x8>
 8008bca:	bf00      	nop
 8008bcc:	20000a5c 	.word	0x20000a5c
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bda:	2300      	movs	r3, #0
 8008bdc:	607b      	str	r3, [r7, #4]
 8008bde:	e00c      	b.n	8008bfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4a12      	ldr	r2, [pc, #72]	; (8008c34 <prvInitialiseTaskLists+0x60>)
 8008bec:	4413      	add	r3, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe f9ce 	bl	8006f90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	607b      	str	r3, [r7, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b37      	cmp	r3, #55	; 0x37
 8008bfe:	d9ef      	bls.n	8008be0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c00:	480d      	ldr	r0, [pc, #52]	; (8008c38 <prvInitialiseTaskLists+0x64>)
 8008c02:	f7fe f9c5 	bl	8006f90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c06:	480d      	ldr	r0, [pc, #52]	; (8008c3c <prvInitialiseTaskLists+0x68>)
 8008c08:	f7fe f9c2 	bl	8006f90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c0c:	480c      	ldr	r0, [pc, #48]	; (8008c40 <prvInitialiseTaskLists+0x6c>)
 8008c0e:	f7fe f9bf 	bl	8006f90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c12:	480c      	ldr	r0, [pc, #48]	; (8008c44 <prvInitialiseTaskLists+0x70>)
 8008c14:	f7fe f9bc 	bl	8006f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c18:	480b      	ldr	r0, [pc, #44]	; (8008c48 <prvInitialiseTaskLists+0x74>)
 8008c1a:	f7fe f9b9 	bl	8006f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c1e:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <prvInitialiseTaskLists+0x78>)
 8008c20:	4a05      	ldr	r2, [pc, #20]	; (8008c38 <prvInitialiseTaskLists+0x64>)
 8008c22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c24:	4b0a      	ldr	r3, [pc, #40]	; (8008c50 <prvInitialiseTaskLists+0x7c>)
 8008c26:	4a05      	ldr	r2, [pc, #20]	; (8008c3c <prvInitialiseTaskLists+0x68>)
 8008c28:	601a      	str	r2, [r3, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000a5c 	.word	0x20000a5c
 8008c38:	20000ebc 	.word	0x20000ebc
 8008c3c:	20000ed0 	.word	0x20000ed0
 8008c40:	20000eec 	.word	0x20000eec
 8008c44:	20000f00 	.word	0x20000f00
 8008c48:	20000f18 	.word	0x20000f18
 8008c4c:	20000ee4 	.word	0x20000ee4
 8008c50:	20000ee8 	.word	0x20000ee8

08008c54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c5a:	e019      	b.n	8008c90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c5c:	f000 fed2 	bl	8009a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c60:	4b10      	ldr	r3, [pc, #64]	; (8008ca4 <prvCheckTasksWaitingTermination+0x50>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fe fa19 	bl	80070a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c72:	4b0d      	ldr	r3, [pc, #52]	; (8008ca8 <prvCheckTasksWaitingTermination+0x54>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	4a0b      	ldr	r2, [pc, #44]	; (8008ca8 <prvCheckTasksWaitingTermination+0x54>)
 8008c7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c7c:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <prvCheckTasksWaitingTermination+0x58>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <prvCheckTasksWaitingTermination+0x58>)
 8008c84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c86:	f000 feed 	bl	8009a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f810 	bl	8008cb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c90:	4b06      	ldr	r3, [pc, #24]	; (8008cac <prvCheckTasksWaitingTermination+0x58>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e1      	bne.n	8008c5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20000f00 	.word	0x20000f00
 8008ca8:	20000f2c 	.word	0x20000f2c
 8008cac:	20000f14 	.word	0x20000f14

08008cb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d108      	bne.n	8008cd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 f88a 	bl	8009de0 <vPortFree>
				vPortFree( pxTCB );
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 f887 	bl	8009de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cd2:	e018      	b.n	8008d06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d103      	bne.n	8008ce6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 f87e 	bl	8009de0 <vPortFree>
	}
 8008ce4:	e00f      	b.n	8008d06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d00a      	beq.n	8008d06 <prvDeleteTCB+0x56>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	60fb      	str	r3, [r7, #12]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <prvDeleteTCB+0x54>
	}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d16:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <prvResetNextTaskUnblockTime+0x38>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d20:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <prvResetNextTaskUnblockTime+0x3c>)
 8008d22:	f04f 32ff 	mov.w	r2, #4294967295
 8008d26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d28:	e008      	b.n	8008d3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2a:	4b07      	ldr	r3, [pc, #28]	; (8008d48 <prvResetNextTaskUnblockTime+0x38>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	4a04      	ldr	r2, [pc, #16]	; (8008d4c <prvResetNextTaskUnblockTime+0x3c>)
 8008d3a:	6013      	str	r3, [r2, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	20000ee4 	.word	0x20000ee4
 8008d4c:	20000f4c 	.word	0x20000f4c

08008d50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <xTaskGetSchedulerState+0x34>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d102      	bne.n	8008d64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	e008      	b.n	8008d76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d64:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <xTaskGetSchedulerState+0x38>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	607b      	str	r3, [r7, #4]
 8008d70:	e001      	b.n	8008d76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d72:	2300      	movs	r3, #0
 8008d74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d76:	687b      	ldr	r3, [r7, #4]
	}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	20000f38 	.word	0x20000f38
 8008d88:	20000f54 	.word	0x20000f54

08008d8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d051      	beq.n	8008e46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da6:	4b2a      	ldr	r3, [pc, #168]	; (8008e50 <xTaskPriorityInherit+0xc4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d241      	bcs.n	8008e34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	db06      	blt.n	8008dc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db8:	4b25      	ldr	r3, [pc, #148]	; (8008e50 <xTaskPriorityInherit+0xc4>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6959      	ldr	r1, [r3, #20]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4a1f      	ldr	r2, [pc, #124]	; (8008e54 <xTaskPriorityInherit+0xc8>)
 8008dd8:	4413      	add	r3, r2
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	d122      	bne.n	8008e24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	3304      	adds	r3, #4
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe f95e 	bl	80070a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008de8:	4b19      	ldr	r3, [pc, #100]	; (8008e50 <xTaskPriorityInherit+0xc4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df6:	4b18      	ldr	r3, [pc, #96]	; (8008e58 <xTaskPriorityInherit+0xcc>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d903      	bls.n	8008e06 <xTaskPriorityInherit+0x7a>
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e02:	4a15      	ldr	r2, [pc, #84]	; (8008e58 <xTaskPriorityInherit+0xcc>)
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4a10      	ldr	r2, [pc, #64]	; (8008e54 <xTaskPriorityInherit+0xc8>)
 8008e14:	441a      	add	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	3304      	adds	r3, #4
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	f7fe f8e4 	bl	8006fea <vListInsertEnd>
 8008e22:	e004      	b.n	8008e2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e24:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <xTaskPriorityInherit+0xc4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	e008      	b.n	8008e46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <xTaskPriorityInherit+0xc4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d201      	bcs.n	8008e46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e42:	2301      	movs	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e46:	68fb      	ldr	r3, [r7, #12]
	}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000a58 	.word	0x20000a58
 8008e54:	20000a5c 	.word	0x20000a5c
 8008e58:	20000f34 	.word	0x20000f34

08008e5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d056      	beq.n	8008f20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e72:	4b2e      	ldr	r3, [pc, #184]	; (8008f2c <xTaskPriorityDisinherit+0xd0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d00a      	beq.n	8008e92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	60fb      	str	r3, [r7, #12]
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10a      	bne.n	8008eb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	60bb      	str	r3, [r7, #8]
}
 8008eac:	bf00      	nop
 8008eae:	e7fe      	b.n	8008eae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb4:	1e5a      	subs	r2, r3, #1
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d02c      	beq.n	8008f20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d128      	bne.n	8008f20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe f8e6 	bl	80070a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <xTaskPriorityDisinherit+0xd4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d903      	bls.n	8008f00 <xTaskPriorityDisinherit+0xa4>
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	4a0c      	ldr	r2, [pc, #48]	; (8008f30 <xTaskPriorityDisinherit+0xd4>)
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4a09      	ldr	r2, [pc, #36]	; (8008f34 <xTaskPriorityDisinherit+0xd8>)
 8008f0e:	441a      	add	r2, r3
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f7fe f867 	bl	8006fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f20:	697b      	ldr	r3, [r7, #20]
	}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000a58 	.word	0x20000a58
 8008f30:	20000f34 	.word	0x20000f34
 8008f34:	20000a5c 	.word	0x20000a5c

08008f38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f46:	2301      	movs	r3, #1
 8008f48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d06a      	beq.n	8009026 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10a      	bne.n	8008f6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	60fb      	str	r3, [r7, #12]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d902      	bls.n	8008f7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	e002      	b.n	8008f84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d04b      	beq.n	8009026 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d146      	bne.n	8009026 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008f98:	4b25      	ldr	r3, [pc, #148]	; (8009030 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d10a      	bne.n	8008fb8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	60bb      	str	r3, [r7, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	db04      	blt.n	8008fd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	6959      	ldr	r1, [r3, #20]
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4a13      	ldr	r2, [pc, #76]	; (8009034 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008fe6:	4413      	add	r3, r2
 8008fe8:	4299      	cmp	r1, r3
 8008fea:	d11c      	bne.n	8009026 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fe f857 	bl	80070a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffa:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d903      	bls.n	800900a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009006:	4a0c      	ldr	r2, [pc, #48]	; (8009038 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4a07      	ldr	r2, [pc, #28]	; (8009034 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009018:	441a      	add	r2, r3
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	3304      	adds	r3, #4
 800901e:	4619      	mov	r1, r3
 8009020:	4610      	mov	r0, r2
 8009022:	f7fd ffe2 	bl	8006fea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009026:	bf00      	nop
 8009028:	3720      	adds	r7, #32
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000a58 	.word	0x20000a58
 8009034:	20000a5c 	.word	0x20000a5c
 8009038:	20000f34 	.word	0x20000f34

0800903c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <pvTaskIncrementMutexHeldCount+0x24>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d004      	beq.n	8009052 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <pvTaskIncrementMutexHeldCount+0x24>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800904e:	3201      	adds	r2, #1
 8009050:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009052:	4b03      	ldr	r3, [pc, #12]	; (8009060 <pvTaskIncrementMutexHeldCount+0x24>)
 8009054:	681b      	ldr	r3, [r3, #0]
	}
 8009056:	4618      	mov	r0, r3
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	20000a58 	.word	0x20000a58

08009064 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800906e:	4b21      	ldr	r3, [pc, #132]	; (80090f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009074:	4b20      	ldr	r3, [pc, #128]	; (80090f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3304      	adds	r3, #4
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe f812 	bl	80070a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d10a      	bne.n	800909e <prvAddCurrentTaskToDelayedList+0x3a>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d007      	beq.n	800909e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800908e:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3304      	adds	r3, #4
 8009094:	4619      	mov	r1, r3
 8009096:	4819      	ldr	r0, [pc, #100]	; (80090fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009098:	f7fd ffa7 	bl	8006fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800909c:	e026      	b.n	80090ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4413      	add	r3, r2
 80090a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d209      	bcs.n	80090ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090b6:	4b12      	ldr	r3, [pc, #72]	; (8009100 <prvAddCurrentTaskToDelayedList+0x9c>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3304      	adds	r3, #4
 80090c0:	4619      	mov	r1, r3
 80090c2:	4610      	mov	r0, r2
 80090c4:	f7fd ffb5 	bl	8007032 <vListInsert>
}
 80090c8:	e010      	b.n	80090ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ca:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <prvAddCurrentTaskToDelayedList+0xa0>)
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3304      	adds	r3, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f7fd ffab 	bl	8007032 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090dc:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d202      	bcs.n	80090ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090e6:	4a08      	ldr	r2, [pc, #32]	; (8009108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	6013      	str	r3, [r2, #0]
}
 80090ec:	bf00      	nop
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20000f30 	.word	0x20000f30
 80090f8:	20000a58 	.word	0x20000a58
 80090fc:	20000f18 	.word	0x20000f18
 8009100:	20000ee8 	.word	0x20000ee8
 8009104:	20000ee4 	.word	0x20000ee4
 8009108:	20000f4c 	.word	0x20000f4c

0800910c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	; 0x28
 8009110:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009112:	2300      	movs	r3, #0
 8009114:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009116:	f000 fb07 	bl	8009728 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800911a:	4b1c      	ldr	r3, [pc, #112]	; (800918c <xTimerCreateTimerTask+0x80>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d021      	beq.n	8009166 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800912a:	1d3a      	adds	r2, r7, #4
 800912c:	f107 0108 	add.w	r1, r7, #8
 8009130:	f107 030c 	add.w	r3, r7, #12
 8009134:	4618      	mov	r0, r3
 8009136:	f7fd ff11 	bl	8006f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	9202      	str	r2, [sp, #8]
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	2302      	movs	r3, #2
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	2300      	movs	r3, #0
 800914a:	460a      	mov	r2, r1
 800914c:	4910      	ldr	r1, [pc, #64]	; (8009190 <xTimerCreateTimerTask+0x84>)
 800914e:	4811      	ldr	r0, [pc, #68]	; (8009194 <xTimerCreateTimerTask+0x88>)
 8009150:	f7fe ffe0 	bl	8008114 <xTaskCreateStatic>
 8009154:	4603      	mov	r3, r0
 8009156:	4a10      	ldr	r2, [pc, #64]	; (8009198 <xTimerCreateTimerTask+0x8c>)
 8009158:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800915a:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <xTimerCreateTimerTask+0x8c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009162:	2301      	movs	r3, #1
 8009164:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	613b      	str	r3, [r7, #16]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009182:	697b      	ldr	r3, [r7, #20]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20000f88 	.word	0x20000f88
 8009190:	0800f2ec 	.word	0x0800f2ec
 8009194:	080092d1 	.word	0x080092d1
 8009198:	20000f8c 	.word	0x20000f8c

0800919c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b08a      	sub	sp, #40	; 0x28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
 80091a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	623b      	str	r3, [r7, #32]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091ca:	4b1a      	ldr	r3, [pc, #104]	; (8009234 <xTimerGenericCommand+0x98>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d02a      	beq.n	8009228 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b05      	cmp	r3, #5
 80091e2:	dc18      	bgt.n	8009216 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091e4:	f7ff fdb4 	bl	8008d50 <xTaskGetSchedulerState>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d109      	bne.n	8009202 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091ee:	4b11      	ldr	r3, [pc, #68]	; (8009234 <xTimerGenericCommand+0x98>)
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	f107 0110 	add.w	r1, r7, #16
 80091f6:	2300      	movs	r3, #0
 80091f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091fa:	f7fe f925 	bl	8007448 <xQueueGenericSend>
 80091fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009200:	e012      	b.n	8009228 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009202:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <xTimerGenericCommand+0x98>)
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	f107 0110 	add.w	r1, r7, #16
 800920a:	2300      	movs	r3, #0
 800920c:	2200      	movs	r2, #0
 800920e:	f7fe f91b 	bl	8007448 <xQueueGenericSend>
 8009212:	6278      	str	r0, [r7, #36]	; 0x24
 8009214:	e008      	b.n	8009228 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009216:	4b07      	ldr	r3, [pc, #28]	; (8009234 <xTimerGenericCommand+0x98>)
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	f107 0110 	add.w	r1, r7, #16
 800921e:	2300      	movs	r3, #0
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	f7fe fa0f 	bl	8007644 <xQueueGenericSendFromISR>
 8009226:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800922a:	4618      	mov	r0, r3
 800922c:	3728      	adds	r7, #40	; 0x28
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20000f88 	.word	0x20000f88

08009238 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af02      	add	r7, sp, #8
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009242:	4b22      	ldr	r3, [pc, #136]	; (80092cc <prvProcessExpiredTimer+0x94>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	3304      	adds	r3, #4
 8009250:	4618      	mov	r0, r3
 8009252:	f7fd ff27 	bl	80070a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b00      	cmp	r3, #0
 8009262:	d022      	beq.n	80092aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	699a      	ldr	r2, [r3, #24]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	18d1      	adds	r1, r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	6978      	ldr	r0, [r7, #20]
 8009272:	f000 f8d1 	bl	8009418 <prvInsertTimerInActiveList>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01f      	beq.n	80092bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800927c:	2300      	movs	r3, #0
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	2300      	movs	r3, #0
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	2100      	movs	r1, #0
 8009286:	6978      	ldr	r0, [r7, #20]
 8009288:	f7ff ff88 	bl	800919c <xTimerGenericCommand>
 800928c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d113      	bne.n	80092bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	60fb      	str	r3, [r7, #12]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	6978      	ldr	r0, [r7, #20]
 80092c2:	4798      	blx	r3
}
 80092c4:	bf00      	nop
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000f80 	.word	0x20000f80

080092d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092d8:	f107 0308 	add.w	r3, r7, #8
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 f857 	bl	8009390 <prvGetNextExpireTime>
 80092e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4619      	mov	r1, r3
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f803 	bl	80092f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092ee:	f000 f8d5 	bl	800949c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092f2:	e7f1      	b.n	80092d8 <prvTimerTask+0x8>

080092f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092fe:	f7ff f945 	bl	800858c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009302:	f107 0308 	add.w	r3, r7, #8
 8009306:	4618      	mov	r0, r3
 8009308:	f000 f866 	bl	80093d8 <prvSampleTimeNow>
 800930c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d130      	bne.n	8009376 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10a      	bne.n	8009330 <prvProcessTimerOrBlockTask+0x3c>
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	429a      	cmp	r2, r3
 8009320:	d806      	bhi.n	8009330 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009322:	f7ff f941 	bl	80085a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009326:	68f9      	ldr	r1, [r7, #12]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff ff85 	bl	8009238 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800932e:	e024      	b.n	800937a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d008      	beq.n	8009348 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009336:	4b13      	ldr	r3, [pc, #76]	; (8009384 <prvProcessTimerOrBlockTask+0x90>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <prvProcessTimerOrBlockTask+0x50>
 8009340:	2301      	movs	r3, #1
 8009342:	e000      	b.n	8009346 <prvProcessTimerOrBlockTask+0x52>
 8009344:	2300      	movs	r3, #0
 8009346:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009348:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <prvProcessTimerOrBlockTask+0x94>)
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	4619      	mov	r1, r3
 8009356:	f7fe fea9 	bl	80080ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800935a:	f7ff f925 	bl	80085a8 <xTaskResumeAll>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009364:	4b09      	ldr	r3, [pc, #36]	; (800938c <prvProcessTimerOrBlockTask+0x98>)
 8009366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	f3bf 8f6f 	isb	sy
}
 8009374:	e001      	b.n	800937a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009376:	f7ff f917 	bl	80085a8 <xTaskResumeAll>
}
 800937a:	bf00      	nop
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000f84 	.word	0x20000f84
 8009388:	20000f88 	.word	0x20000f88
 800938c:	e000ed04 	.word	0xe000ed04

08009390 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009398:	4b0e      	ldr	r3, [pc, #56]	; (80093d4 <prvGetNextExpireTime+0x44>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <prvGetNextExpireTime+0x16>
 80093a2:	2201      	movs	r2, #1
 80093a4:	e000      	b.n	80093a8 <prvGetNextExpireTime+0x18>
 80093a6:	2200      	movs	r2, #0
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d105      	bne.n	80093c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093b4:	4b07      	ldr	r3, [pc, #28]	; (80093d4 <prvGetNextExpireTime+0x44>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	e001      	b.n	80093c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093c4:	68fb      	ldr	r3, [r7, #12]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000f80 	.word	0x20000f80

080093d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093e0:	f7ff f980 	bl	80086e4 <xTaskGetTickCount>
 80093e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093e6:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <prvSampleTimeNow+0x3c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d205      	bcs.n	80093fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093f0:	f000 f936 	bl	8009660 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	e002      	b.n	8009402 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009402:	4a04      	ldr	r2, [pc, #16]	; (8009414 <prvSampleTimeNow+0x3c>)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009408:	68fb      	ldr	r3, [r7, #12]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20000f90 	.word	0x20000f90

08009418 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009426:	2300      	movs	r3, #0
 8009428:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	429a      	cmp	r2, r3
 800943c:	d812      	bhi.n	8009464 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	1ad2      	subs	r2, r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	429a      	cmp	r2, r3
 800944a:	d302      	bcc.n	8009452 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800944c:	2301      	movs	r3, #1
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	e01b      	b.n	800948a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009452:	4b10      	ldr	r3, [pc, #64]	; (8009494 <prvInsertTimerInActiveList+0x7c>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3304      	adds	r3, #4
 800945a:	4619      	mov	r1, r3
 800945c:	4610      	mov	r0, r2
 800945e:	f7fd fde8 	bl	8007032 <vListInsert>
 8009462:	e012      	b.n	800948a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	429a      	cmp	r2, r3
 800946a:	d206      	bcs.n	800947a <prvInsertTimerInActiveList+0x62>
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	429a      	cmp	r2, r3
 8009472:	d302      	bcc.n	800947a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009474:	2301      	movs	r3, #1
 8009476:	617b      	str	r3, [r7, #20]
 8009478:	e007      	b.n	800948a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800947a:	4b07      	ldr	r3, [pc, #28]	; (8009498 <prvInsertTimerInActiveList+0x80>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3304      	adds	r3, #4
 8009482:	4619      	mov	r1, r3
 8009484:	4610      	mov	r0, r2
 8009486:	f7fd fdd4 	bl	8007032 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800948a:	697b      	ldr	r3, [r7, #20]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	20000f84 	.word	0x20000f84
 8009498:	20000f80 	.word	0x20000f80

0800949c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08e      	sub	sp, #56	; 0x38
 80094a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094a2:	e0ca      	b.n	800963a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da18      	bge.n	80094dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094aa:	1d3b      	adds	r3, r7, #4
 80094ac:	3304      	adds	r3, #4
 80094ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10a      	bne.n	80094cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	61fb      	str	r3, [r7, #28]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094d2:	6850      	ldr	r0, [r2, #4]
 80094d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094d6:	6892      	ldr	r2, [r2, #8]
 80094d8:	4611      	mov	r1, r2
 80094da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f2c0 80aa 	blt.w	8009638 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d004      	beq.n	80094fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	3304      	adds	r3, #4
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fd fdd5 	bl	80070a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094fa:	463b      	mov	r3, r7
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff ff6b 	bl	80093d8 <prvSampleTimeNow>
 8009502:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b09      	cmp	r3, #9
 8009508:	f200 8097 	bhi.w	800963a <prvProcessReceivedCommands+0x19e>
 800950c:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <prvProcessReceivedCommands+0x78>)
 800950e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009512:	bf00      	nop
 8009514:	0800953d 	.word	0x0800953d
 8009518:	0800953d 	.word	0x0800953d
 800951c:	0800953d 	.word	0x0800953d
 8009520:	080095b1 	.word	0x080095b1
 8009524:	080095c5 	.word	0x080095c5
 8009528:	0800960f 	.word	0x0800960f
 800952c:	0800953d 	.word	0x0800953d
 8009530:	0800953d 	.word	0x0800953d
 8009534:	080095b1 	.word	0x080095b1
 8009538:	080095c5 	.word	0x080095c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009542:	f043 0301 	orr.w	r3, r3, #1
 8009546:	b2da      	uxtb	r2, r3
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	18d1      	adds	r1, r2, r3
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800955c:	f7ff ff5c 	bl	8009418 <prvInsertTimerInActiveList>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d069      	beq.n	800963a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800956c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d05e      	beq.n	800963a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	441a      	add	r2, r3
 8009584:	2300      	movs	r3, #0
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	2300      	movs	r3, #0
 800958a:	2100      	movs	r1, #0
 800958c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800958e:	f7ff fe05 	bl	800919c <xTimerGenericCommand>
 8009592:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d14f      	bne.n	800963a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	61bb      	str	r3, [r7, #24]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095b6:	f023 0301 	bic.w	r3, r3, #1
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80095c2:	e03a      	b.n	800963a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ca:	f043 0301 	orr.w	r3, r3, #1
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	617b      	str	r3, [r7, #20]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	18d1      	adds	r1, r2, r3
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009608:	f7ff ff06 	bl	8009418 <prvInsertTimerInActiveList>
					break;
 800960c:	e015      	b.n	800963a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800961c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800961e:	f000 fbdf 	bl	8009de0 <vPortFree>
 8009622:	e00a      	b.n	800963a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800962a:	f023 0301 	bic.w	r3, r3, #1
 800962e:	b2da      	uxtb	r2, r3
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009636:	e000      	b.n	800963a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009638:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800963a:	4b08      	ldr	r3, [pc, #32]	; (800965c <prvProcessReceivedCommands+0x1c0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	1d39      	adds	r1, r7, #4
 8009640:	2200      	movs	r2, #0
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe f926 	bl	8007894 <xQueueReceive>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	f47f af2a 	bne.w	80094a4 <prvProcessReceivedCommands+0x8>
	}
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	3730      	adds	r7, #48	; 0x30
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000f88 	.word	0x20000f88

08009660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b088      	sub	sp, #32
 8009664:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009666:	e048      	b.n	80096fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009668:	4b2d      	ldr	r3, [pc, #180]	; (8009720 <prvSwitchTimerLists+0xc0>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009672:	4b2b      	ldr	r3, [pc, #172]	; (8009720 <prvSwitchTimerLists+0xc0>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	3304      	adds	r3, #4
 8009680:	4618      	mov	r0, r3
 8009682:	f7fd fd0f 	bl	80070a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009694:	f003 0304 	and.w	r3, r3, #4
 8009698:	2b00      	cmp	r3, #0
 800969a:	d02e      	beq.n	80096fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4413      	add	r3, r2
 80096a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d90e      	bls.n	80096cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096ba:	4b19      	ldr	r3, [pc, #100]	; (8009720 <prvSwitchTimerLists+0xc0>)
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3304      	adds	r3, #4
 80096c2:	4619      	mov	r1, r3
 80096c4:	4610      	mov	r0, r2
 80096c6:	f7fd fcb4 	bl	8007032 <vListInsert>
 80096ca:	e016      	b.n	80096fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096cc:	2300      	movs	r3, #0
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	2300      	movs	r3, #0
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	2100      	movs	r1, #0
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7ff fd60 	bl	800919c <xTimerGenericCommand>
 80096dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	603b      	str	r3, [r7, #0]
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <prvSwitchTimerLists+0xc0>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1b1      	bne.n	8009668 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009704:	4b06      	ldr	r3, [pc, #24]	; (8009720 <prvSwitchTimerLists+0xc0>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800970a:	4b06      	ldr	r3, [pc, #24]	; (8009724 <prvSwitchTimerLists+0xc4>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a04      	ldr	r2, [pc, #16]	; (8009720 <prvSwitchTimerLists+0xc0>)
 8009710:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009712:	4a04      	ldr	r2, [pc, #16]	; (8009724 <prvSwitchTimerLists+0xc4>)
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	6013      	str	r3, [r2, #0]
}
 8009718:	bf00      	nop
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	20000f80 	.word	0x20000f80
 8009724:	20000f84 	.word	0x20000f84

08009728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800972e:	f000 f969 	bl	8009a04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009732:	4b15      	ldr	r3, [pc, #84]	; (8009788 <prvCheckForValidListAndQueue+0x60>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d120      	bne.n	800977c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800973a:	4814      	ldr	r0, [pc, #80]	; (800978c <prvCheckForValidListAndQueue+0x64>)
 800973c:	f7fd fc28 	bl	8006f90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009740:	4813      	ldr	r0, [pc, #76]	; (8009790 <prvCheckForValidListAndQueue+0x68>)
 8009742:	f7fd fc25 	bl	8006f90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009746:	4b13      	ldr	r3, [pc, #76]	; (8009794 <prvCheckForValidListAndQueue+0x6c>)
 8009748:	4a10      	ldr	r2, [pc, #64]	; (800978c <prvCheckForValidListAndQueue+0x64>)
 800974a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800974c:	4b12      	ldr	r3, [pc, #72]	; (8009798 <prvCheckForValidListAndQueue+0x70>)
 800974e:	4a10      	ldr	r2, [pc, #64]	; (8009790 <prvCheckForValidListAndQueue+0x68>)
 8009750:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009752:	2300      	movs	r3, #0
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	4b11      	ldr	r3, [pc, #68]	; (800979c <prvCheckForValidListAndQueue+0x74>)
 8009758:	4a11      	ldr	r2, [pc, #68]	; (80097a0 <prvCheckForValidListAndQueue+0x78>)
 800975a:	2110      	movs	r1, #16
 800975c:	200a      	movs	r0, #10
 800975e:	f7fd fd33 	bl	80071c8 <xQueueGenericCreateStatic>
 8009762:	4603      	mov	r3, r0
 8009764:	4a08      	ldr	r2, [pc, #32]	; (8009788 <prvCheckForValidListAndQueue+0x60>)
 8009766:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009768:	4b07      	ldr	r3, [pc, #28]	; (8009788 <prvCheckForValidListAndQueue+0x60>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009770:	4b05      	ldr	r3, [pc, #20]	; (8009788 <prvCheckForValidListAndQueue+0x60>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	490b      	ldr	r1, [pc, #44]	; (80097a4 <prvCheckForValidListAndQueue+0x7c>)
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fc44 	bl	8008004 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800977c:	f000 f972 	bl	8009a64 <vPortExitCritical>
}
 8009780:	bf00      	nop
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000f88 	.word	0x20000f88
 800978c:	20000f58 	.word	0x20000f58
 8009790:	20000f6c 	.word	0x20000f6c
 8009794:	20000f80 	.word	0x20000f80
 8009798:	20000f84 	.word	0x20000f84
 800979c:	20001034 	.word	0x20001034
 80097a0:	20000f94 	.word	0x20000f94
 80097a4:	0800f2f4 	.word	0x0800f2f4

080097a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3b04      	subs	r3, #4
 80097b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3b04      	subs	r3, #4
 80097c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f023 0201 	bic.w	r2, r3, #1
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3b04      	subs	r3, #4
 80097d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097d8:	4a0c      	ldr	r2, [pc, #48]	; (800980c <pxPortInitialiseStack+0x64>)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3b14      	subs	r3, #20
 80097e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3b04      	subs	r3, #4
 80097ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f06f 0202 	mvn.w	r2, #2
 80097f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	3b20      	subs	r3, #32
 80097fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097fe:	68fb      	ldr	r3, [r7, #12]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	08009811 	.word	0x08009811

08009810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800981a:	4b12      	ldr	r3, [pc, #72]	; (8009864 <prvTaskExitError+0x54>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009822:	d00a      	beq.n	800983a <prvTaskExitError+0x2a>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	60fb      	str	r3, [r7, #12]
}
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <prvTaskExitError+0x28>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	60bb      	str	r3, [r7, #8]
}
 800984c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800984e:	bf00      	nop
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0fc      	beq.n	8009850 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	20000030 	.word	0x20000030
	...

08009870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <pxCurrentTCBConst2>)
 8009872:	6819      	ldr	r1, [r3, #0]
 8009874:	6808      	ldr	r0, [r1, #0]
 8009876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987a:	f380 8809 	msr	PSP, r0
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f380 8811 	msr	BASEPRI, r0
 800988a:	4770      	bx	lr
 800988c:	f3af 8000 	nop.w

08009890 <pxCurrentTCBConst2>:
 8009890:	20000a58 	.word	0x20000a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop

08009898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009898:	4808      	ldr	r0, [pc, #32]	; (80098bc <prvPortStartFirstTask+0x24>)
 800989a:	6800      	ldr	r0, [r0, #0]
 800989c:	6800      	ldr	r0, [r0, #0]
 800989e:	f380 8808 	msr	MSP, r0
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f380 8814 	msr	CONTROL, r0
 80098aa:	b662      	cpsie	i
 80098ac:	b661      	cpsie	f
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	df00      	svc	0
 80098b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098ba:	bf00      	nop
 80098bc:	e000ed08 	.word	0xe000ed08

080098c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098c6:	4b46      	ldr	r3, [pc, #280]	; (80099e0 <xPortStartScheduler+0x120>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a46      	ldr	r2, [pc, #280]	; (80099e4 <xPortStartScheduler+0x124>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d10a      	bne.n	80098e6 <xPortStartScheduler+0x26>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	613b      	str	r3, [r7, #16]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098e6:	4b3e      	ldr	r3, [pc, #248]	; (80099e0 <xPortStartScheduler+0x120>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a3f      	ldr	r2, [pc, #252]	; (80099e8 <xPortStartScheduler+0x128>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d10a      	bne.n	8009906 <xPortStartScheduler+0x46>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60fb      	str	r3, [r7, #12]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009906:	4b39      	ldr	r3, [pc, #228]	; (80099ec <xPortStartScheduler+0x12c>)
 8009908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009928:	b2da      	uxtb	r2, r3
 800992a:	4b31      	ldr	r3, [pc, #196]	; (80099f0 <xPortStartScheduler+0x130>)
 800992c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800992e:	4b31      	ldr	r3, [pc, #196]	; (80099f4 <xPortStartScheduler+0x134>)
 8009930:	2207      	movs	r2, #7
 8009932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009934:	e009      	b.n	800994a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009936:	4b2f      	ldr	r3, [pc, #188]	; (80099f4 <xPortStartScheduler+0x134>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3b01      	subs	r3, #1
 800993c:	4a2d      	ldr	r2, [pc, #180]	; (80099f4 <xPortStartScheduler+0x134>)
 800993e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	b2db      	uxtb	r3, r3
 8009948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009952:	2b80      	cmp	r3, #128	; 0x80
 8009954:	d0ef      	beq.n	8009936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009956:	4b27      	ldr	r3, [pc, #156]	; (80099f4 <xPortStartScheduler+0x134>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f1c3 0307 	rsb	r3, r3, #7
 800995e:	2b04      	cmp	r3, #4
 8009960:	d00a      	beq.n	8009978 <xPortStartScheduler+0xb8>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	60bb      	str	r3, [r7, #8]
}
 8009974:	bf00      	nop
 8009976:	e7fe      	b.n	8009976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009978:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <xPortStartScheduler+0x134>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	4a1d      	ldr	r2, [pc, #116]	; (80099f4 <xPortStartScheduler+0x134>)
 8009980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009982:	4b1c      	ldr	r3, [pc, #112]	; (80099f4 <xPortStartScheduler+0x134>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800998a:	4a1a      	ldr	r2, [pc, #104]	; (80099f4 <xPortStartScheduler+0x134>)
 800998c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	b2da      	uxtb	r2, r3
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009996:	4b18      	ldr	r3, [pc, #96]	; (80099f8 <xPortStartScheduler+0x138>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a17      	ldr	r2, [pc, #92]	; (80099f8 <xPortStartScheduler+0x138>)
 800999c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <xPortStartScheduler+0x138>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a14      	ldr	r2, [pc, #80]	; (80099f8 <xPortStartScheduler+0x138>)
 80099a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099ae:	f000 f8dd 	bl	8009b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099b2:	4b12      	ldr	r3, [pc, #72]	; (80099fc <xPortStartScheduler+0x13c>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099b8:	f000 f8fc 	bl	8009bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099bc:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <xPortStartScheduler+0x140>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a0f      	ldr	r2, [pc, #60]	; (8009a00 <xPortStartScheduler+0x140>)
 80099c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099c8:	f7ff ff66 	bl	8009898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099cc:	f7fe ff54 	bl	8008878 <vTaskSwitchContext>
	prvTaskExitError();
 80099d0:	f7ff ff1e 	bl	8009810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	e000ed00 	.word	0xe000ed00
 80099e4:	410fc271 	.word	0x410fc271
 80099e8:	410fc270 	.word	0x410fc270
 80099ec:	e000e400 	.word	0xe000e400
 80099f0:	20001084 	.word	0x20001084
 80099f4:	20001088 	.word	0x20001088
 80099f8:	e000ed20 	.word	0xe000ed20
 80099fc:	20000030 	.word	0x20000030
 8009a00:	e000ef34 	.word	0xe000ef34

08009a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	607b      	str	r3, [r7, #4]
}
 8009a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a1e:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <vPortEnterCritical+0x58>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3301      	adds	r3, #1
 8009a24:	4a0d      	ldr	r2, [pc, #52]	; (8009a5c <vPortEnterCritical+0x58>)
 8009a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a28:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <vPortEnterCritical+0x58>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d10f      	bne.n	8009a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a30:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <vPortEnterCritical+0x5c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	603b      	str	r3, [r7, #0]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <vPortEnterCritical+0x4a>
	}
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	20000030 	.word	0x20000030
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a6a:	4b12      	ldr	r3, [pc, #72]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <vPortExitCritical+0x24>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	607b      	str	r3, [r7, #4]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a88:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	4a09      	ldr	r2, [pc, #36]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a92:	4b08      	ldr	r3, [pc, #32]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d105      	bne.n	8009aa6 <vPortExitCritical+0x42>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	f383 8811 	msr	BASEPRI, r3
}
 8009aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20000030 	.word	0x20000030
	...

08009ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ac0:	f3ef 8009 	mrs	r0, PSP
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	4b15      	ldr	r3, [pc, #84]	; (8009b20 <pxCurrentTCBConst>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	f01e 0f10 	tst.w	lr, #16
 8009ad0:	bf08      	it	eq
 8009ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ada:	6010      	str	r0, [r2, #0]
 8009adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ae4:	f380 8811 	msr	BASEPRI, r0
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f7fe fec2 	bl	8008878 <vTaskSwitchContext>
 8009af4:	f04f 0000 	mov.w	r0, #0
 8009af8:	f380 8811 	msr	BASEPRI, r0
 8009afc:	bc09      	pop	{r0, r3}
 8009afe:	6819      	ldr	r1, [r3, #0]
 8009b00:	6808      	ldr	r0, [r1, #0]
 8009b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b06:	f01e 0f10 	tst.w	lr, #16
 8009b0a:	bf08      	it	eq
 8009b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b10:	f380 8809 	msr	PSP, r0
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	f3af 8000 	nop.w

08009b20 <pxCurrentTCBConst>:
 8009b20:	20000a58 	.word	0x20000a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop

08009b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	607b      	str	r3, [r7, #4]
}
 8009b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b42:	f7fe fddf 	bl	8008704 <xTaskIncrementTick>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b4c:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <xPortSysTickHandler+0x40>)
 8009b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	2300      	movs	r3, #0
 8009b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	f383 8811 	msr	BASEPRI, r3
}
 8009b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <vPortSetupTimerInterrupt+0x34>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b76:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <vPortSetupTimerInterrupt+0x38>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <vPortSetupTimerInterrupt+0x3c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a0a      	ldr	r2, [pc, #40]	; (8009bac <vPortSetupTimerInterrupt+0x40>)
 8009b82:	fba2 2303 	umull	r2, r3, r2, r3
 8009b86:	099b      	lsrs	r3, r3, #6
 8009b88:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <vPortSetupTimerInterrupt+0x44>)
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b8e:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <vPortSetupTimerInterrupt+0x34>)
 8009b90:	2207      	movs	r2, #7
 8009b92:	601a      	str	r2, [r3, #0]
}
 8009b94:	bf00      	nop
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	e000e010 	.word	0xe000e010
 8009ba4:	e000e018 	.word	0xe000e018
 8009ba8:	20000010 	.word	0x20000010
 8009bac:	10624dd3 	.word	0x10624dd3
 8009bb0:	e000e014 	.word	0xe000e014

08009bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009bc4 <vPortEnableVFP+0x10>
 8009bb8:	6801      	ldr	r1, [r0, #0]
 8009bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009bbe:	6001      	str	r1, [r0, #0]
 8009bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bc2:	bf00      	nop
 8009bc4:	e000ed88 	.word	0xe000ed88

08009bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bce:	f3ef 8305 	mrs	r3, IPSR
 8009bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b0f      	cmp	r3, #15
 8009bd8:	d914      	bls.n	8009c04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bda:	4a17      	ldr	r2, [pc, #92]	; (8009c38 <vPortValidateInterruptPriority+0x70>)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <vPortValidateInterruptPriority+0x74>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	7afa      	ldrb	r2, [r7, #11]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d20a      	bcs.n	8009c04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	607b      	str	r3, [r7, #4]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c04:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <vPortValidateInterruptPriority+0x78>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c0c:	4b0d      	ldr	r3, [pc, #52]	; (8009c44 <vPortValidateInterruptPriority+0x7c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d90a      	bls.n	8009c2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	603b      	str	r3, [r7, #0]
}
 8009c26:	bf00      	nop
 8009c28:	e7fe      	b.n	8009c28 <vPortValidateInterruptPriority+0x60>
	}
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	e000e3f0 	.word	0xe000e3f0
 8009c3c:	20001084 	.word	0x20001084
 8009c40:	e000ed0c 	.word	0xe000ed0c
 8009c44:	20001088 	.word	0x20001088

08009c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	; 0x28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c54:	f7fe fc9a 	bl	800858c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c58:	4b5b      	ldr	r3, [pc, #364]	; (8009dc8 <pvPortMalloc+0x180>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c60:	f000 f920 	bl	8009ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c64:	4b59      	ldr	r3, [pc, #356]	; (8009dcc <pvPortMalloc+0x184>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 8093 	bne.w	8009d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01d      	beq.n	8009cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c78:	2208      	movs	r2, #8
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d014      	beq.n	8009cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f023 0307 	bic.w	r3, r3, #7
 8009c90:	3308      	adds	r3, #8
 8009c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	617b      	str	r3, [r7, #20]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d06e      	beq.n	8009d98 <pvPortMalloc+0x150>
 8009cba:	4b45      	ldr	r3, [pc, #276]	; (8009dd0 <pvPortMalloc+0x188>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d869      	bhi.n	8009d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cc4:	4b43      	ldr	r3, [pc, #268]	; (8009dd4 <pvPortMalloc+0x18c>)
 8009cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cc8:	4b42      	ldr	r3, [pc, #264]	; (8009dd4 <pvPortMalloc+0x18c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cce:	e004      	b.n	8009cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d903      	bls.n	8009cec <pvPortMalloc+0xa4>
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f1      	bne.n	8009cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cec:	4b36      	ldr	r3, [pc, #216]	; (8009dc8 <pvPortMalloc+0x180>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d050      	beq.n	8009d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2208      	movs	r2, #8
 8009cfc:	4413      	add	r3, r2
 8009cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	1ad2      	subs	r2, r2, r3
 8009d10:	2308      	movs	r3, #8
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d91f      	bls.n	8009d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f003 0307 	and.w	r3, r3, #7
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <pvPortMalloc+0xf8>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	613b      	str	r3, [r7, #16]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d52:	69b8      	ldr	r0, [r7, #24]
 8009d54:	f000 f908 	bl	8009f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d58:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	4a1b      	ldr	r2, [pc, #108]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d66:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4b1b      	ldr	r3, [pc, #108]	; (8009dd8 <pvPortMalloc+0x190>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d203      	bcs.n	8009d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d72:	4b17      	ldr	r3, [pc, #92]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a18      	ldr	r2, [pc, #96]	; (8009dd8 <pvPortMalloc+0x190>)
 8009d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <pvPortMalloc+0x184>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	431a      	orrs	r2, r3
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d8e:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <pvPortMalloc+0x194>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a11      	ldr	r2, [pc, #68]	; (8009ddc <pvPortMalloc+0x194>)
 8009d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d98:	f7fe fc06 	bl	80085a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <pvPortMalloc+0x174>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	60fb      	str	r3, [r7, #12]
}
 8009db8:	bf00      	nop
 8009dba:	e7fe      	b.n	8009dba <pvPortMalloc+0x172>
	return pvReturn;
 8009dbc:	69fb      	ldr	r3, [r7, #28]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3728      	adds	r7, #40	; 0x28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20004c94 	.word	0x20004c94
 8009dcc:	20004ca8 	.word	0x20004ca8
 8009dd0:	20004c98 	.word	0x20004c98
 8009dd4:	20004c8c 	.word	0x20004c8c
 8009dd8:	20004c9c 	.word	0x20004c9c
 8009ddc:	20004ca0 	.word	0x20004ca0

08009de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d04d      	beq.n	8009e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009df2:	2308      	movs	r3, #8
 8009df4:	425b      	negs	r3, r3
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	4413      	add	r3, r2
 8009dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	4b24      	ldr	r3, [pc, #144]	; (8009e98 <vPortFree+0xb8>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <vPortFree+0x44>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	60fb      	str	r3, [r7, #12]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <vPortFree+0x62>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	60bb      	str	r3, [r7, #8]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <vPortFree+0xb8>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01e      	beq.n	8009e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d11a      	bne.n	8009e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <vPortFree+0xb8>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	43db      	mvns	r3, r3
 8009e62:	401a      	ands	r2, r3
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e68:	f7fe fb90 	bl	800858c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <vPortFree+0xbc>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4413      	add	r3, r2
 8009e76:	4a09      	ldr	r2, [pc, #36]	; (8009e9c <vPortFree+0xbc>)
 8009e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e7a:	6938      	ldr	r0, [r7, #16]
 8009e7c:	f000 f874 	bl	8009f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e80:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <vPortFree+0xc0>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3301      	adds	r3, #1
 8009e86:	4a06      	ldr	r2, [pc, #24]	; (8009ea0 <vPortFree+0xc0>)
 8009e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e8a:	f7fe fb8d 	bl	80085a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e8e:	bf00      	nop
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20004ca8 	.word	0x20004ca8
 8009e9c:	20004c98 	.word	0x20004c98
 8009ea0:	20004ca4 	.word	0x20004ca4

08009ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009eb0:	4b27      	ldr	r3, [pc, #156]	; (8009f50 <prvHeapInit+0xac>)
 8009eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00c      	beq.n	8009ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3307      	adds	r3, #7
 8009ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 0307 	bic.w	r3, r3, #7
 8009eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	4a1f      	ldr	r2, [pc, #124]	; (8009f50 <prvHeapInit+0xac>)
 8009ed4:	4413      	add	r3, r2
 8009ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009edc:	4a1d      	ldr	r2, [pc, #116]	; (8009f54 <prvHeapInit+0xb0>)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ee2:	4b1c      	ldr	r3, [pc, #112]	; (8009f54 <prvHeapInit+0xb0>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	4413      	add	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ef0:	2208      	movs	r2, #8
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	1a9b      	subs	r3, r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f023 0307 	bic.w	r3, r3, #7
 8009efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a15      	ldr	r2, [pc, #84]	; (8009f58 <prvHeapInit+0xb4>)
 8009f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f06:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <prvHeapInit+0xb4>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f0e:	4b12      	ldr	r3, [pc, #72]	; (8009f58 <prvHeapInit+0xb4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	1ad2      	subs	r2, r2, r3
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f24:	4b0c      	ldr	r3, [pc, #48]	; (8009f58 <prvHeapInit+0xb4>)
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	4a0a      	ldr	r2, [pc, #40]	; (8009f5c <prvHeapInit+0xb8>)
 8009f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <prvHeapInit+0xbc>)
 8009f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f3c:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <prvHeapInit+0xc0>)
 8009f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f42:	601a      	str	r2, [r3, #0]
}
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	2000108c 	.word	0x2000108c
 8009f54:	20004c8c 	.word	0x20004c8c
 8009f58:	20004c94 	.word	0x20004c94
 8009f5c:	20004c9c 	.word	0x20004c9c
 8009f60:	20004c98 	.word	0x20004c98
 8009f64:	20004ca8 	.word	0x20004ca8

08009f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f70:	4b28      	ldr	r3, [pc, #160]	; (800a014 <prvInsertBlockIntoFreeList+0xac>)
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	e002      	b.n	8009f7c <prvInsertBlockIntoFreeList+0x14>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d8f7      	bhi.n	8009f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	4413      	add	r3, r2
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d108      	bne.n	8009faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	441a      	add	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d118      	bne.n	8009ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	4b15      	ldr	r3, [pc, #84]	; (800a018 <prvInsertBlockIntoFreeList+0xb0>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d00d      	beq.n	8009fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	441a      	add	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	e008      	b.n	8009ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fe6:	4b0c      	ldr	r3, [pc, #48]	; (800a018 <prvInsertBlockIntoFreeList+0xb0>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	e003      	b.n	8009ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d002      	beq.n	800a006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a006:	bf00      	nop
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	20004c8c 	.word	0x20004c8c
 800a018:	20004c94 	.word	0x20004c94

0800a01c <__errno>:
 800a01c:	4b01      	ldr	r3, [pc, #4]	; (800a024 <__errno+0x8>)
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	20000034 	.word	0x20000034

0800a028 <__libc_init_array>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	4d0d      	ldr	r5, [pc, #52]	; (800a060 <__libc_init_array+0x38>)
 800a02c:	4c0d      	ldr	r4, [pc, #52]	; (800a064 <__libc_init_array+0x3c>)
 800a02e:	1b64      	subs	r4, r4, r5
 800a030:	10a4      	asrs	r4, r4, #2
 800a032:	2600      	movs	r6, #0
 800a034:	42a6      	cmp	r6, r4
 800a036:	d109      	bne.n	800a04c <__libc_init_array+0x24>
 800a038:	4d0b      	ldr	r5, [pc, #44]	; (800a068 <__libc_init_array+0x40>)
 800a03a:	4c0c      	ldr	r4, [pc, #48]	; (800a06c <__libc_init_array+0x44>)
 800a03c:	f005 f882 	bl	800f144 <_init>
 800a040:	1b64      	subs	r4, r4, r5
 800a042:	10a4      	asrs	r4, r4, #2
 800a044:	2600      	movs	r6, #0
 800a046:	42a6      	cmp	r6, r4
 800a048:	d105      	bne.n	800a056 <__libc_init_array+0x2e>
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a050:	4798      	blx	r3
 800a052:	3601      	adds	r6, #1
 800a054:	e7ee      	b.n	800a034 <__libc_init_array+0xc>
 800a056:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05a:	4798      	blx	r3
 800a05c:	3601      	adds	r6, #1
 800a05e:	e7f2      	b.n	800a046 <__libc_init_array+0x1e>
 800a060:	08010d4c 	.word	0x08010d4c
 800a064:	08010d4c 	.word	0x08010d4c
 800a068:	08010d4c 	.word	0x08010d4c
 800a06c:	08010d50 	.word	0x08010d50

0800a070 <memcpy>:
 800a070:	440a      	add	r2, r1
 800a072:	4291      	cmp	r1, r2
 800a074:	f100 33ff 	add.w	r3, r0, #4294967295
 800a078:	d100      	bne.n	800a07c <memcpy+0xc>
 800a07a:	4770      	bx	lr
 800a07c:	b510      	push	{r4, lr}
 800a07e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a082:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a086:	4291      	cmp	r1, r2
 800a088:	d1f9      	bne.n	800a07e <memcpy+0xe>
 800a08a:	bd10      	pop	{r4, pc}

0800a08c <memset>:
 800a08c:	4402      	add	r2, r0
 800a08e:	4603      	mov	r3, r0
 800a090:	4293      	cmp	r3, r2
 800a092:	d100      	bne.n	800a096 <memset+0xa>
 800a094:	4770      	bx	lr
 800a096:	f803 1b01 	strb.w	r1, [r3], #1
 800a09a:	e7f9      	b.n	800a090 <memset+0x4>

0800a09c <__cvt>:
 800a09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	ec55 4b10 	vmov	r4, r5, d0
 800a0a4:	2d00      	cmp	r5, #0
 800a0a6:	460e      	mov	r6, r1
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	bfbb      	ittet	lt
 800a0ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0b2:	461d      	movlt	r5, r3
 800a0b4:	2300      	movge	r3, #0
 800a0b6:	232d      	movlt	r3, #45	; 0x2d
 800a0b8:	700b      	strb	r3, [r1, #0]
 800a0ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a0c0:	4691      	mov	r9, r2
 800a0c2:	f023 0820 	bic.w	r8, r3, #32
 800a0c6:	bfbc      	itt	lt
 800a0c8:	4622      	movlt	r2, r4
 800a0ca:	4614      	movlt	r4, r2
 800a0cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0d0:	d005      	beq.n	800a0de <__cvt+0x42>
 800a0d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a0d6:	d100      	bne.n	800a0da <__cvt+0x3e>
 800a0d8:	3601      	adds	r6, #1
 800a0da:	2102      	movs	r1, #2
 800a0dc:	e000      	b.n	800a0e0 <__cvt+0x44>
 800a0de:	2103      	movs	r1, #3
 800a0e0:	ab03      	add	r3, sp, #12
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	ab02      	add	r3, sp, #8
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	ec45 4b10 	vmov	d0, r4, r5
 800a0ec:	4653      	mov	r3, sl
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	f001 fe5a 	bl	800bda8 <_dtoa_r>
 800a0f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	d102      	bne.n	800a102 <__cvt+0x66>
 800a0fc:	f019 0f01 	tst.w	r9, #1
 800a100:	d022      	beq.n	800a148 <__cvt+0xac>
 800a102:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a106:	eb07 0906 	add.w	r9, r7, r6
 800a10a:	d110      	bne.n	800a12e <__cvt+0x92>
 800a10c:	783b      	ldrb	r3, [r7, #0]
 800a10e:	2b30      	cmp	r3, #48	; 0x30
 800a110:	d10a      	bne.n	800a128 <__cvt+0x8c>
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	f7f6 fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a11e:	b918      	cbnz	r0, 800a128 <__cvt+0x8c>
 800a120:	f1c6 0601 	rsb	r6, r6, #1
 800a124:	f8ca 6000 	str.w	r6, [sl]
 800a128:	f8da 3000 	ldr.w	r3, [sl]
 800a12c:	4499      	add	r9, r3
 800a12e:	2200      	movs	r2, #0
 800a130:	2300      	movs	r3, #0
 800a132:	4620      	mov	r0, r4
 800a134:	4629      	mov	r1, r5
 800a136:	f7f6 fccf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a13a:	b108      	cbz	r0, 800a140 <__cvt+0xa4>
 800a13c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a140:	2230      	movs	r2, #48	; 0x30
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	454b      	cmp	r3, r9
 800a146:	d307      	bcc.n	800a158 <__cvt+0xbc>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a14c:	1bdb      	subs	r3, r3, r7
 800a14e:	4638      	mov	r0, r7
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	b004      	add	sp, #16
 800a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a158:	1c59      	adds	r1, r3, #1
 800a15a:	9103      	str	r1, [sp, #12]
 800a15c:	701a      	strb	r2, [r3, #0]
 800a15e:	e7f0      	b.n	800a142 <__cvt+0xa6>

0800a160 <__exponent>:
 800a160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a162:	4603      	mov	r3, r0
 800a164:	2900      	cmp	r1, #0
 800a166:	bfb8      	it	lt
 800a168:	4249      	neglt	r1, r1
 800a16a:	f803 2b02 	strb.w	r2, [r3], #2
 800a16e:	bfb4      	ite	lt
 800a170:	222d      	movlt	r2, #45	; 0x2d
 800a172:	222b      	movge	r2, #43	; 0x2b
 800a174:	2909      	cmp	r1, #9
 800a176:	7042      	strb	r2, [r0, #1]
 800a178:	dd2a      	ble.n	800a1d0 <__exponent+0x70>
 800a17a:	f10d 0407 	add.w	r4, sp, #7
 800a17e:	46a4      	mov	ip, r4
 800a180:	270a      	movs	r7, #10
 800a182:	46a6      	mov	lr, r4
 800a184:	460a      	mov	r2, r1
 800a186:	fb91 f6f7 	sdiv	r6, r1, r7
 800a18a:	fb07 1516 	mls	r5, r7, r6, r1
 800a18e:	3530      	adds	r5, #48	; 0x30
 800a190:	2a63      	cmp	r2, #99	; 0x63
 800a192:	f104 34ff 	add.w	r4, r4, #4294967295
 800a196:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a19a:	4631      	mov	r1, r6
 800a19c:	dcf1      	bgt.n	800a182 <__exponent+0x22>
 800a19e:	3130      	adds	r1, #48	; 0x30
 800a1a0:	f1ae 0502 	sub.w	r5, lr, #2
 800a1a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a1a8:	1c44      	adds	r4, r0, #1
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4561      	cmp	r1, ip
 800a1ae:	d30a      	bcc.n	800a1c6 <__exponent+0x66>
 800a1b0:	f10d 0209 	add.w	r2, sp, #9
 800a1b4:	eba2 020e 	sub.w	r2, r2, lr
 800a1b8:	4565      	cmp	r5, ip
 800a1ba:	bf88      	it	hi
 800a1bc:	2200      	movhi	r2, #0
 800a1be:	4413      	add	r3, r2
 800a1c0:	1a18      	subs	r0, r3, r0
 800a1c2:	b003      	add	sp, #12
 800a1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a1ce:	e7ed      	b.n	800a1ac <__exponent+0x4c>
 800a1d0:	2330      	movs	r3, #48	; 0x30
 800a1d2:	3130      	adds	r1, #48	; 0x30
 800a1d4:	7083      	strb	r3, [r0, #2]
 800a1d6:	70c1      	strb	r1, [r0, #3]
 800a1d8:	1d03      	adds	r3, r0, #4
 800a1da:	e7f1      	b.n	800a1c0 <__exponent+0x60>

0800a1dc <_printf_float>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	ed2d 8b02 	vpush	{d8}
 800a1e4:	b08d      	sub	sp, #52	; 0x34
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a1ec:	4616      	mov	r6, r2
 800a1ee:	461f      	mov	r7, r3
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	f002 ff35 	bl	800d060 <_localeconv_r>
 800a1f6:	f8d0 a000 	ldr.w	sl, [r0]
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	f7f5 fff0 	bl	80001e0 <strlen>
 800a200:	2300      	movs	r3, #0
 800a202:	930a      	str	r3, [sp, #40]	; 0x28
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	9305      	str	r3, [sp, #20]
 800a208:	f8d8 3000 	ldr.w	r3, [r8]
 800a20c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a210:	3307      	adds	r3, #7
 800a212:	f023 0307 	bic.w	r3, r3, #7
 800a216:	f103 0208 	add.w	r2, r3, #8
 800a21a:	f8c8 2000 	str.w	r2, [r8]
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a226:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a22a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a22e:	9307      	str	r3, [sp, #28]
 800a230:	f8cd 8018 	str.w	r8, [sp, #24]
 800a234:	ee08 0a10 	vmov	s16, r0
 800a238:	4b9f      	ldr	r3, [pc, #636]	; (800a4b8 <_printf_float+0x2dc>)
 800a23a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a23e:	f04f 32ff 	mov.w	r2, #4294967295
 800a242:	f7f6 fc7b 	bl	8000b3c <__aeabi_dcmpun>
 800a246:	bb88      	cbnz	r0, 800a2ac <_printf_float+0xd0>
 800a248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a24c:	4b9a      	ldr	r3, [pc, #616]	; (800a4b8 <_printf_float+0x2dc>)
 800a24e:	f04f 32ff 	mov.w	r2, #4294967295
 800a252:	f7f6 fc55 	bl	8000b00 <__aeabi_dcmple>
 800a256:	bb48      	cbnz	r0, 800a2ac <_printf_float+0xd0>
 800a258:	2200      	movs	r2, #0
 800a25a:	2300      	movs	r3, #0
 800a25c:	4640      	mov	r0, r8
 800a25e:	4649      	mov	r1, r9
 800a260:	f7f6 fc44 	bl	8000aec <__aeabi_dcmplt>
 800a264:	b110      	cbz	r0, 800a26c <_printf_float+0x90>
 800a266:	232d      	movs	r3, #45	; 0x2d
 800a268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a26c:	4b93      	ldr	r3, [pc, #588]	; (800a4bc <_printf_float+0x2e0>)
 800a26e:	4894      	ldr	r0, [pc, #592]	; (800a4c0 <_printf_float+0x2e4>)
 800a270:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a274:	bf94      	ite	ls
 800a276:	4698      	movls	r8, r3
 800a278:	4680      	movhi	r8, r0
 800a27a:	2303      	movs	r3, #3
 800a27c:	6123      	str	r3, [r4, #16]
 800a27e:	9b05      	ldr	r3, [sp, #20]
 800a280:	f023 0204 	bic.w	r2, r3, #4
 800a284:	6022      	str	r2, [r4, #0]
 800a286:	f04f 0900 	mov.w	r9, #0
 800a28a:	9700      	str	r7, [sp, #0]
 800a28c:	4633      	mov	r3, r6
 800a28e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a290:	4621      	mov	r1, r4
 800a292:	4628      	mov	r0, r5
 800a294:	f000 f9d8 	bl	800a648 <_printf_common>
 800a298:	3001      	adds	r0, #1
 800a29a:	f040 8090 	bne.w	800a3be <_printf_float+0x1e2>
 800a29e:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a2:	b00d      	add	sp, #52	; 0x34
 800a2a4:	ecbd 8b02 	vpop	{d8}
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ac:	4642      	mov	r2, r8
 800a2ae:	464b      	mov	r3, r9
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	f7f6 fc42 	bl	8000b3c <__aeabi_dcmpun>
 800a2b8:	b140      	cbz	r0, 800a2cc <_printf_float+0xf0>
 800a2ba:	464b      	mov	r3, r9
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	bfbc      	itt	lt
 800a2c0:	232d      	movlt	r3, #45	; 0x2d
 800a2c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a2c6:	487f      	ldr	r0, [pc, #508]	; (800a4c4 <_printf_float+0x2e8>)
 800a2c8:	4b7f      	ldr	r3, [pc, #508]	; (800a4c8 <_printf_float+0x2ec>)
 800a2ca:	e7d1      	b.n	800a270 <_printf_float+0x94>
 800a2cc:	6863      	ldr	r3, [r4, #4]
 800a2ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a2d2:	9206      	str	r2, [sp, #24]
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	d13f      	bne.n	800a358 <_printf_float+0x17c>
 800a2d8:	2306      	movs	r3, #6
 800a2da:	6063      	str	r3, [r4, #4]
 800a2dc:	9b05      	ldr	r3, [sp, #20]
 800a2de:	6861      	ldr	r1, [r4, #4]
 800a2e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	ab0a      	add	r3, sp, #40	; 0x28
 800a2ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a2ee:	ab09      	add	r3, sp, #36	; 0x24
 800a2f0:	ec49 8b10 	vmov	d0, r8, r9
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	6022      	str	r2, [r4, #0]
 800a2f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f7ff fecd 	bl	800a09c <__cvt>
 800a302:	9b06      	ldr	r3, [sp, #24]
 800a304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a306:	2b47      	cmp	r3, #71	; 0x47
 800a308:	4680      	mov	r8, r0
 800a30a:	d108      	bne.n	800a31e <_printf_float+0x142>
 800a30c:	1cc8      	adds	r0, r1, #3
 800a30e:	db02      	blt.n	800a316 <_printf_float+0x13a>
 800a310:	6863      	ldr	r3, [r4, #4]
 800a312:	4299      	cmp	r1, r3
 800a314:	dd41      	ble.n	800a39a <_printf_float+0x1be>
 800a316:	f1ab 0b02 	sub.w	fp, fp, #2
 800a31a:	fa5f fb8b 	uxtb.w	fp, fp
 800a31e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a322:	d820      	bhi.n	800a366 <_printf_float+0x18a>
 800a324:	3901      	subs	r1, #1
 800a326:	465a      	mov	r2, fp
 800a328:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a32c:	9109      	str	r1, [sp, #36]	; 0x24
 800a32e:	f7ff ff17 	bl	800a160 <__exponent>
 800a332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a334:	1813      	adds	r3, r2, r0
 800a336:	2a01      	cmp	r2, #1
 800a338:	4681      	mov	r9, r0
 800a33a:	6123      	str	r3, [r4, #16]
 800a33c:	dc02      	bgt.n	800a344 <_printf_float+0x168>
 800a33e:	6822      	ldr	r2, [r4, #0]
 800a340:	07d2      	lsls	r2, r2, #31
 800a342:	d501      	bpl.n	800a348 <_printf_float+0x16c>
 800a344:	3301      	adds	r3, #1
 800a346:	6123      	str	r3, [r4, #16]
 800a348:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d09c      	beq.n	800a28a <_printf_float+0xae>
 800a350:	232d      	movs	r3, #45	; 0x2d
 800a352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a356:	e798      	b.n	800a28a <_printf_float+0xae>
 800a358:	9a06      	ldr	r2, [sp, #24]
 800a35a:	2a47      	cmp	r2, #71	; 0x47
 800a35c:	d1be      	bne.n	800a2dc <_printf_float+0x100>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1bc      	bne.n	800a2dc <_printf_float+0x100>
 800a362:	2301      	movs	r3, #1
 800a364:	e7b9      	b.n	800a2da <_printf_float+0xfe>
 800a366:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a36a:	d118      	bne.n	800a39e <_printf_float+0x1c2>
 800a36c:	2900      	cmp	r1, #0
 800a36e:	6863      	ldr	r3, [r4, #4]
 800a370:	dd0b      	ble.n	800a38a <_printf_float+0x1ae>
 800a372:	6121      	str	r1, [r4, #16]
 800a374:	b913      	cbnz	r3, 800a37c <_printf_float+0x1a0>
 800a376:	6822      	ldr	r2, [r4, #0]
 800a378:	07d0      	lsls	r0, r2, #31
 800a37a:	d502      	bpl.n	800a382 <_printf_float+0x1a6>
 800a37c:	3301      	adds	r3, #1
 800a37e:	440b      	add	r3, r1
 800a380:	6123      	str	r3, [r4, #16]
 800a382:	65a1      	str	r1, [r4, #88]	; 0x58
 800a384:	f04f 0900 	mov.w	r9, #0
 800a388:	e7de      	b.n	800a348 <_printf_float+0x16c>
 800a38a:	b913      	cbnz	r3, 800a392 <_printf_float+0x1b6>
 800a38c:	6822      	ldr	r2, [r4, #0]
 800a38e:	07d2      	lsls	r2, r2, #31
 800a390:	d501      	bpl.n	800a396 <_printf_float+0x1ba>
 800a392:	3302      	adds	r3, #2
 800a394:	e7f4      	b.n	800a380 <_printf_float+0x1a4>
 800a396:	2301      	movs	r3, #1
 800a398:	e7f2      	b.n	800a380 <_printf_float+0x1a4>
 800a39a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	db05      	blt.n	800a3b0 <_printf_float+0x1d4>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	6121      	str	r1, [r4, #16]
 800a3a8:	07d8      	lsls	r0, r3, #31
 800a3aa:	d5ea      	bpl.n	800a382 <_printf_float+0x1a6>
 800a3ac:	1c4b      	adds	r3, r1, #1
 800a3ae:	e7e7      	b.n	800a380 <_printf_float+0x1a4>
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	bfd4      	ite	le
 800a3b4:	f1c1 0202 	rsble	r2, r1, #2
 800a3b8:	2201      	movgt	r2, #1
 800a3ba:	4413      	add	r3, r2
 800a3bc:	e7e0      	b.n	800a380 <_printf_float+0x1a4>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	055a      	lsls	r2, r3, #21
 800a3c2:	d407      	bmi.n	800a3d4 <_printf_float+0x1f8>
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	4642      	mov	r2, r8
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b8      	blx	r7
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d12c      	bne.n	800a42c <_printf_float+0x250>
 800a3d2:	e764      	b.n	800a29e <_printf_float+0xc2>
 800a3d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3d8:	f240 80e0 	bls.w	800a59c <_printf_float+0x3c0>
 800a3dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f7f6 fb78 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d034      	beq.n	800a456 <_printf_float+0x27a>
 800a3ec:	4a37      	ldr	r2, [pc, #220]	; (800a4cc <_printf_float+0x2f0>)
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	47b8      	blx	r7
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	f43f af51 	beq.w	800a29e <_printf_float+0xc2>
 800a3fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a400:	429a      	cmp	r2, r3
 800a402:	db02      	blt.n	800a40a <_printf_float+0x22e>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	07d8      	lsls	r0, r3, #31
 800a408:	d510      	bpl.n	800a42c <_printf_float+0x250>
 800a40a:	ee18 3a10 	vmov	r3, s16
 800a40e:	4652      	mov	r2, sl
 800a410:	4631      	mov	r1, r6
 800a412:	4628      	mov	r0, r5
 800a414:	47b8      	blx	r7
 800a416:	3001      	adds	r0, #1
 800a418:	f43f af41 	beq.w	800a29e <_printf_float+0xc2>
 800a41c:	f04f 0800 	mov.w	r8, #0
 800a420:	f104 091a 	add.w	r9, r4, #26
 800a424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a426:	3b01      	subs	r3, #1
 800a428:	4543      	cmp	r3, r8
 800a42a:	dc09      	bgt.n	800a440 <_printf_float+0x264>
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	079b      	lsls	r3, r3, #30
 800a430:	f100 8105 	bmi.w	800a63e <_printf_float+0x462>
 800a434:	68e0      	ldr	r0, [r4, #12]
 800a436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a438:	4298      	cmp	r0, r3
 800a43a:	bfb8      	it	lt
 800a43c:	4618      	movlt	r0, r3
 800a43e:	e730      	b.n	800a2a2 <_printf_float+0xc6>
 800a440:	2301      	movs	r3, #1
 800a442:	464a      	mov	r2, r9
 800a444:	4631      	mov	r1, r6
 800a446:	4628      	mov	r0, r5
 800a448:	47b8      	blx	r7
 800a44a:	3001      	adds	r0, #1
 800a44c:	f43f af27 	beq.w	800a29e <_printf_float+0xc2>
 800a450:	f108 0801 	add.w	r8, r8, #1
 800a454:	e7e6      	b.n	800a424 <_printf_float+0x248>
 800a456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	dc39      	bgt.n	800a4d0 <_printf_float+0x2f4>
 800a45c:	4a1b      	ldr	r2, [pc, #108]	; (800a4cc <_printf_float+0x2f0>)
 800a45e:	2301      	movs	r3, #1
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f af19 	beq.w	800a29e <_printf_float+0xc2>
 800a46c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a470:	4313      	orrs	r3, r2
 800a472:	d102      	bne.n	800a47a <_printf_float+0x29e>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	07d9      	lsls	r1, r3, #31
 800a478:	d5d8      	bpl.n	800a42c <_printf_float+0x250>
 800a47a:	ee18 3a10 	vmov	r3, s16
 800a47e:	4652      	mov	r2, sl
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	f43f af09 	beq.w	800a29e <_printf_float+0xc2>
 800a48c:	f04f 0900 	mov.w	r9, #0
 800a490:	f104 0a1a 	add.w	sl, r4, #26
 800a494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a496:	425b      	negs	r3, r3
 800a498:	454b      	cmp	r3, r9
 800a49a:	dc01      	bgt.n	800a4a0 <_printf_float+0x2c4>
 800a49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49e:	e792      	b.n	800a3c6 <_printf_float+0x1ea>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	4652      	mov	r2, sl
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	47b8      	blx	r7
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	f43f aef7 	beq.w	800a29e <_printf_float+0xc2>
 800a4b0:	f109 0901 	add.w	r9, r9, #1
 800a4b4:	e7ee      	b.n	800a494 <_printf_float+0x2b8>
 800a4b6:	bf00      	nop
 800a4b8:	7fefffff 	.word	0x7fefffff
 800a4bc:	0801087c 	.word	0x0801087c
 800a4c0:	08010880 	.word	0x08010880
 800a4c4:	08010888 	.word	0x08010888
 800a4c8:	08010884 	.word	0x08010884
 800a4cc:	08010c91 	.word	0x08010c91
 800a4d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	bfa8      	it	ge
 800a4d8:	461a      	movge	r2, r3
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	4691      	mov	r9, r2
 800a4de:	dc37      	bgt.n	800a550 <_printf_float+0x374>
 800a4e0:	f04f 0b00 	mov.w	fp, #0
 800a4e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4e8:	f104 021a 	add.w	r2, r4, #26
 800a4ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4ee:	9305      	str	r3, [sp, #20]
 800a4f0:	eba3 0309 	sub.w	r3, r3, r9
 800a4f4:	455b      	cmp	r3, fp
 800a4f6:	dc33      	bgt.n	800a560 <_printf_float+0x384>
 800a4f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	db3b      	blt.n	800a578 <_printf_float+0x39c>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	07da      	lsls	r2, r3, #31
 800a504:	d438      	bmi.n	800a578 <_printf_float+0x39c>
 800a506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a508:	9b05      	ldr	r3, [sp, #20]
 800a50a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	eba2 0901 	sub.w	r9, r2, r1
 800a512:	4599      	cmp	r9, r3
 800a514:	bfa8      	it	ge
 800a516:	4699      	movge	r9, r3
 800a518:	f1b9 0f00 	cmp.w	r9, #0
 800a51c:	dc35      	bgt.n	800a58a <_printf_float+0x3ae>
 800a51e:	f04f 0800 	mov.w	r8, #0
 800a522:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a526:	f104 0a1a 	add.w	sl, r4, #26
 800a52a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	eba3 0309 	sub.w	r3, r3, r9
 800a534:	4543      	cmp	r3, r8
 800a536:	f77f af79 	ble.w	800a42c <_printf_float+0x250>
 800a53a:	2301      	movs	r3, #1
 800a53c:	4652      	mov	r2, sl
 800a53e:	4631      	mov	r1, r6
 800a540:	4628      	mov	r0, r5
 800a542:	47b8      	blx	r7
 800a544:	3001      	adds	r0, #1
 800a546:	f43f aeaa 	beq.w	800a29e <_printf_float+0xc2>
 800a54a:	f108 0801 	add.w	r8, r8, #1
 800a54e:	e7ec      	b.n	800a52a <_printf_float+0x34e>
 800a550:	4613      	mov	r3, r2
 800a552:	4631      	mov	r1, r6
 800a554:	4642      	mov	r2, r8
 800a556:	4628      	mov	r0, r5
 800a558:	47b8      	blx	r7
 800a55a:	3001      	adds	r0, #1
 800a55c:	d1c0      	bne.n	800a4e0 <_printf_float+0x304>
 800a55e:	e69e      	b.n	800a29e <_printf_float+0xc2>
 800a560:	2301      	movs	r3, #1
 800a562:	4631      	mov	r1, r6
 800a564:	4628      	mov	r0, r5
 800a566:	9205      	str	r2, [sp, #20]
 800a568:	47b8      	blx	r7
 800a56a:	3001      	adds	r0, #1
 800a56c:	f43f ae97 	beq.w	800a29e <_printf_float+0xc2>
 800a570:	9a05      	ldr	r2, [sp, #20]
 800a572:	f10b 0b01 	add.w	fp, fp, #1
 800a576:	e7b9      	b.n	800a4ec <_printf_float+0x310>
 800a578:	ee18 3a10 	vmov	r3, s16
 800a57c:	4652      	mov	r2, sl
 800a57e:	4631      	mov	r1, r6
 800a580:	4628      	mov	r0, r5
 800a582:	47b8      	blx	r7
 800a584:	3001      	adds	r0, #1
 800a586:	d1be      	bne.n	800a506 <_printf_float+0x32a>
 800a588:	e689      	b.n	800a29e <_printf_float+0xc2>
 800a58a:	9a05      	ldr	r2, [sp, #20]
 800a58c:	464b      	mov	r3, r9
 800a58e:	4442      	add	r2, r8
 800a590:	4631      	mov	r1, r6
 800a592:	4628      	mov	r0, r5
 800a594:	47b8      	blx	r7
 800a596:	3001      	adds	r0, #1
 800a598:	d1c1      	bne.n	800a51e <_printf_float+0x342>
 800a59a:	e680      	b.n	800a29e <_printf_float+0xc2>
 800a59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a59e:	2a01      	cmp	r2, #1
 800a5a0:	dc01      	bgt.n	800a5a6 <_printf_float+0x3ca>
 800a5a2:	07db      	lsls	r3, r3, #31
 800a5a4:	d538      	bpl.n	800a618 <_printf_float+0x43c>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	47b8      	blx	r7
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	f43f ae74 	beq.w	800a29e <_printf_float+0xc2>
 800a5b6:	ee18 3a10 	vmov	r3, s16
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f ae6b 	beq.w	800a29e <_printf_float+0xc2>
 800a5c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f7f6 fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5d4:	b9d8      	cbnz	r0, 800a60e <_printf_float+0x432>
 800a5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d8:	f108 0201 	add.w	r2, r8, #1
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	4631      	mov	r1, r6
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	47b8      	blx	r7
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d10e      	bne.n	800a606 <_printf_float+0x42a>
 800a5e8:	e659      	b.n	800a29e <_printf_float+0xc2>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	f43f ae52 	beq.w	800a29e <_printf_float+0xc2>
 800a5fa:	f108 0801 	add.w	r8, r8, #1
 800a5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a600:	3b01      	subs	r3, #1
 800a602:	4543      	cmp	r3, r8
 800a604:	dcf1      	bgt.n	800a5ea <_printf_float+0x40e>
 800a606:	464b      	mov	r3, r9
 800a608:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a60c:	e6dc      	b.n	800a3c8 <_printf_float+0x1ec>
 800a60e:	f04f 0800 	mov.w	r8, #0
 800a612:	f104 0a1a 	add.w	sl, r4, #26
 800a616:	e7f2      	b.n	800a5fe <_printf_float+0x422>
 800a618:	2301      	movs	r3, #1
 800a61a:	4642      	mov	r2, r8
 800a61c:	e7df      	b.n	800a5de <_printf_float+0x402>
 800a61e:	2301      	movs	r3, #1
 800a620:	464a      	mov	r2, r9
 800a622:	4631      	mov	r1, r6
 800a624:	4628      	mov	r0, r5
 800a626:	47b8      	blx	r7
 800a628:	3001      	adds	r0, #1
 800a62a:	f43f ae38 	beq.w	800a29e <_printf_float+0xc2>
 800a62e:	f108 0801 	add.w	r8, r8, #1
 800a632:	68e3      	ldr	r3, [r4, #12]
 800a634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a636:	1a5b      	subs	r3, r3, r1
 800a638:	4543      	cmp	r3, r8
 800a63a:	dcf0      	bgt.n	800a61e <_printf_float+0x442>
 800a63c:	e6fa      	b.n	800a434 <_printf_float+0x258>
 800a63e:	f04f 0800 	mov.w	r8, #0
 800a642:	f104 0919 	add.w	r9, r4, #25
 800a646:	e7f4      	b.n	800a632 <_printf_float+0x456>

0800a648 <_printf_common>:
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	4616      	mov	r6, r2
 800a64e:	4699      	mov	r9, r3
 800a650:	688a      	ldr	r2, [r1, #8]
 800a652:	690b      	ldr	r3, [r1, #16]
 800a654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a658:	4293      	cmp	r3, r2
 800a65a:	bfb8      	it	lt
 800a65c:	4613      	movlt	r3, r2
 800a65e:	6033      	str	r3, [r6, #0]
 800a660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a664:	4607      	mov	r7, r0
 800a666:	460c      	mov	r4, r1
 800a668:	b10a      	cbz	r2, 800a66e <_printf_common+0x26>
 800a66a:	3301      	adds	r3, #1
 800a66c:	6033      	str	r3, [r6, #0]
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	0699      	lsls	r1, r3, #26
 800a672:	bf42      	ittt	mi
 800a674:	6833      	ldrmi	r3, [r6, #0]
 800a676:	3302      	addmi	r3, #2
 800a678:	6033      	strmi	r3, [r6, #0]
 800a67a:	6825      	ldr	r5, [r4, #0]
 800a67c:	f015 0506 	ands.w	r5, r5, #6
 800a680:	d106      	bne.n	800a690 <_printf_common+0x48>
 800a682:	f104 0a19 	add.w	sl, r4, #25
 800a686:	68e3      	ldr	r3, [r4, #12]
 800a688:	6832      	ldr	r2, [r6, #0]
 800a68a:	1a9b      	subs	r3, r3, r2
 800a68c:	42ab      	cmp	r3, r5
 800a68e:	dc26      	bgt.n	800a6de <_printf_common+0x96>
 800a690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a694:	1e13      	subs	r3, r2, #0
 800a696:	6822      	ldr	r2, [r4, #0]
 800a698:	bf18      	it	ne
 800a69a:	2301      	movne	r3, #1
 800a69c:	0692      	lsls	r2, r2, #26
 800a69e:	d42b      	bmi.n	800a6f8 <_printf_common+0xb0>
 800a6a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	47c0      	blx	r8
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	d01e      	beq.n	800a6ec <_printf_common+0xa4>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	68e5      	ldr	r5, [r4, #12]
 800a6b2:	6832      	ldr	r2, [r6, #0]
 800a6b4:	f003 0306 	and.w	r3, r3, #6
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	bf08      	it	eq
 800a6bc:	1aad      	subeq	r5, r5, r2
 800a6be:	68a3      	ldr	r3, [r4, #8]
 800a6c0:	6922      	ldr	r2, [r4, #16]
 800a6c2:	bf0c      	ite	eq
 800a6c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6c8:	2500      	movne	r5, #0
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	bfc4      	itt	gt
 800a6ce:	1a9b      	subgt	r3, r3, r2
 800a6d0:	18ed      	addgt	r5, r5, r3
 800a6d2:	2600      	movs	r6, #0
 800a6d4:	341a      	adds	r4, #26
 800a6d6:	42b5      	cmp	r5, r6
 800a6d8:	d11a      	bne.n	800a710 <_printf_common+0xc8>
 800a6da:	2000      	movs	r0, #0
 800a6dc:	e008      	b.n	800a6f0 <_printf_common+0xa8>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	4652      	mov	r2, sl
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	47c0      	blx	r8
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d103      	bne.n	800a6f4 <_printf_common+0xac>
 800a6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f4:	3501      	adds	r5, #1
 800a6f6:	e7c6      	b.n	800a686 <_printf_common+0x3e>
 800a6f8:	18e1      	adds	r1, r4, r3
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	2030      	movs	r0, #48	; 0x30
 800a6fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a702:	4422      	add	r2, r4
 800a704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a70c:	3302      	adds	r3, #2
 800a70e:	e7c7      	b.n	800a6a0 <_printf_common+0x58>
 800a710:	2301      	movs	r3, #1
 800a712:	4622      	mov	r2, r4
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d0e6      	beq.n	800a6ec <_printf_common+0xa4>
 800a71e:	3601      	adds	r6, #1
 800a720:	e7d9      	b.n	800a6d6 <_printf_common+0x8e>
	...

0800a724 <_printf_i>:
 800a724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	460c      	mov	r4, r1
 800a72a:	4691      	mov	r9, r2
 800a72c:	7e27      	ldrb	r7, [r4, #24]
 800a72e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a730:	2f78      	cmp	r7, #120	; 0x78
 800a732:	4680      	mov	r8, r0
 800a734:	469a      	mov	sl, r3
 800a736:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a73a:	d807      	bhi.n	800a74c <_printf_i+0x28>
 800a73c:	2f62      	cmp	r7, #98	; 0x62
 800a73e:	d80a      	bhi.n	800a756 <_printf_i+0x32>
 800a740:	2f00      	cmp	r7, #0
 800a742:	f000 80d8 	beq.w	800a8f6 <_printf_i+0x1d2>
 800a746:	2f58      	cmp	r7, #88	; 0x58
 800a748:	f000 80a3 	beq.w	800a892 <_printf_i+0x16e>
 800a74c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a754:	e03a      	b.n	800a7cc <_printf_i+0xa8>
 800a756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a75a:	2b15      	cmp	r3, #21
 800a75c:	d8f6      	bhi.n	800a74c <_printf_i+0x28>
 800a75e:	a001      	add	r0, pc, #4	; (adr r0, 800a764 <_printf_i+0x40>)
 800a760:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a764:	0800a7bd 	.word	0x0800a7bd
 800a768:	0800a7d1 	.word	0x0800a7d1
 800a76c:	0800a74d 	.word	0x0800a74d
 800a770:	0800a74d 	.word	0x0800a74d
 800a774:	0800a74d 	.word	0x0800a74d
 800a778:	0800a74d 	.word	0x0800a74d
 800a77c:	0800a7d1 	.word	0x0800a7d1
 800a780:	0800a74d 	.word	0x0800a74d
 800a784:	0800a74d 	.word	0x0800a74d
 800a788:	0800a74d 	.word	0x0800a74d
 800a78c:	0800a74d 	.word	0x0800a74d
 800a790:	0800a8dd 	.word	0x0800a8dd
 800a794:	0800a801 	.word	0x0800a801
 800a798:	0800a8bf 	.word	0x0800a8bf
 800a79c:	0800a74d 	.word	0x0800a74d
 800a7a0:	0800a74d 	.word	0x0800a74d
 800a7a4:	0800a8ff 	.word	0x0800a8ff
 800a7a8:	0800a74d 	.word	0x0800a74d
 800a7ac:	0800a801 	.word	0x0800a801
 800a7b0:	0800a74d 	.word	0x0800a74d
 800a7b4:	0800a74d 	.word	0x0800a74d
 800a7b8:	0800a8c7 	.word	0x0800a8c7
 800a7bc:	680b      	ldr	r3, [r1, #0]
 800a7be:	1d1a      	adds	r2, r3, #4
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	600a      	str	r2, [r1, #0]
 800a7c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e0a3      	b.n	800a918 <_printf_i+0x1f4>
 800a7d0:	6825      	ldr	r5, [r4, #0]
 800a7d2:	6808      	ldr	r0, [r1, #0]
 800a7d4:	062e      	lsls	r6, r5, #24
 800a7d6:	f100 0304 	add.w	r3, r0, #4
 800a7da:	d50a      	bpl.n	800a7f2 <_printf_i+0xce>
 800a7dc:	6805      	ldr	r5, [r0, #0]
 800a7de:	600b      	str	r3, [r1, #0]
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	da03      	bge.n	800a7ec <_printf_i+0xc8>
 800a7e4:	232d      	movs	r3, #45	; 0x2d
 800a7e6:	426d      	negs	r5, r5
 800a7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ec:	485e      	ldr	r0, [pc, #376]	; (800a968 <_printf_i+0x244>)
 800a7ee:	230a      	movs	r3, #10
 800a7f0:	e019      	b.n	800a826 <_printf_i+0x102>
 800a7f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a7f6:	6805      	ldr	r5, [r0, #0]
 800a7f8:	600b      	str	r3, [r1, #0]
 800a7fa:	bf18      	it	ne
 800a7fc:	b22d      	sxthne	r5, r5
 800a7fe:	e7ef      	b.n	800a7e0 <_printf_i+0xbc>
 800a800:	680b      	ldr	r3, [r1, #0]
 800a802:	6825      	ldr	r5, [r4, #0]
 800a804:	1d18      	adds	r0, r3, #4
 800a806:	6008      	str	r0, [r1, #0]
 800a808:	0628      	lsls	r0, r5, #24
 800a80a:	d501      	bpl.n	800a810 <_printf_i+0xec>
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	e002      	b.n	800a816 <_printf_i+0xf2>
 800a810:	0669      	lsls	r1, r5, #25
 800a812:	d5fb      	bpl.n	800a80c <_printf_i+0xe8>
 800a814:	881d      	ldrh	r5, [r3, #0]
 800a816:	4854      	ldr	r0, [pc, #336]	; (800a968 <_printf_i+0x244>)
 800a818:	2f6f      	cmp	r7, #111	; 0x6f
 800a81a:	bf0c      	ite	eq
 800a81c:	2308      	moveq	r3, #8
 800a81e:	230a      	movne	r3, #10
 800a820:	2100      	movs	r1, #0
 800a822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a826:	6866      	ldr	r6, [r4, #4]
 800a828:	60a6      	str	r6, [r4, #8]
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	bfa2      	ittt	ge
 800a82e:	6821      	ldrge	r1, [r4, #0]
 800a830:	f021 0104 	bicge.w	r1, r1, #4
 800a834:	6021      	strge	r1, [r4, #0]
 800a836:	b90d      	cbnz	r5, 800a83c <_printf_i+0x118>
 800a838:	2e00      	cmp	r6, #0
 800a83a:	d04d      	beq.n	800a8d8 <_printf_i+0x1b4>
 800a83c:	4616      	mov	r6, r2
 800a83e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a842:	fb03 5711 	mls	r7, r3, r1, r5
 800a846:	5dc7      	ldrb	r7, [r0, r7]
 800a848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a84c:	462f      	mov	r7, r5
 800a84e:	42bb      	cmp	r3, r7
 800a850:	460d      	mov	r5, r1
 800a852:	d9f4      	bls.n	800a83e <_printf_i+0x11a>
 800a854:	2b08      	cmp	r3, #8
 800a856:	d10b      	bne.n	800a870 <_printf_i+0x14c>
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	07df      	lsls	r7, r3, #31
 800a85c:	d508      	bpl.n	800a870 <_printf_i+0x14c>
 800a85e:	6923      	ldr	r3, [r4, #16]
 800a860:	6861      	ldr	r1, [r4, #4]
 800a862:	4299      	cmp	r1, r3
 800a864:	bfde      	ittt	le
 800a866:	2330      	movle	r3, #48	; 0x30
 800a868:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a86c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a870:	1b92      	subs	r2, r2, r6
 800a872:	6122      	str	r2, [r4, #16]
 800a874:	f8cd a000 	str.w	sl, [sp]
 800a878:	464b      	mov	r3, r9
 800a87a:	aa03      	add	r2, sp, #12
 800a87c:	4621      	mov	r1, r4
 800a87e:	4640      	mov	r0, r8
 800a880:	f7ff fee2 	bl	800a648 <_printf_common>
 800a884:	3001      	adds	r0, #1
 800a886:	d14c      	bne.n	800a922 <_printf_i+0x1fe>
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	b004      	add	sp, #16
 800a88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a892:	4835      	ldr	r0, [pc, #212]	; (800a968 <_printf_i+0x244>)
 800a894:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	680e      	ldr	r6, [r1, #0]
 800a89c:	061f      	lsls	r7, r3, #24
 800a89e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a8a2:	600e      	str	r6, [r1, #0]
 800a8a4:	d514      	bpl.n	800a8d0 <_printf_i+0x1ac>
 800a8a6:	07d9      	lsls	r1, r3, #31
 800a8a8:	bf44      	itt	mi
 800a8aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ae:	6023      	strmi	r3, [r4, #0]
 800a8b0:	b91d      	cbnz	r5, 800a8ba <_printf_i+0x196>
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	f023 0320 	bic.w	r3, r3, #32
 800a8b8:	6023      	str	r3, [r4, #0]
 800a8ba:	2310      	movs	r3, #16
 800a8bc:	e7b0      	b.n	800a820 <_printf_i+0xfc>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	f043 0320 	orr.w	r3, r3, #32
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	2378      	movs	r3, #120	; 0x78
 800a8c8:	4828      	ldr	r0, [pc, #160]	; (800a96c <_printf_i+0x248>)
 800a8ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8ce:	e7e3      	b.n	800a898 <_printf_i+0x174>
 800a8d0:	065e      	lsls	r6, r3, #25
 800a8d2:	bf48      	it	mi
 800a8d4:	b2ad      	uxthmi	r5, r5
 800a8d6:	e7e6      	b.n	800a8a6 <_printf_i+0x182>
 800a8d8:	4616      	mov	r6, r2
 800a8da:	e7bb      	b.n	800a854 <_printf_i+0x130>
 800a8dc:	680b      	ldr	r3, [r1, #0]
 800a8de:	6826      	ldr	r6, [r4, #0]
 800a8e0:	6960      	ldr	r0, [r4, #20]
 800a8e2:	1d1d      	adds	r5, r3, #4
 800a8e4:	600d      	str	r5, [r1, #0]
 800a8e6:	0635      	lsls	r5, r6, #24
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	d501      	bpl.n	800a8f0 <_printf_i+0x1cc>
 800a8ec:	6018      	str	r0, [r3, #0]
 800a8ee:	e002      	b.n	800a8f6 <_printf_i+0x1d2>
 800a8f0:	0671      	lsls	r1, r6, #25
 800a8f2:	d5fb      	bpl.n	800a8ec <_printf_i+0x1c8>
 800a8f4:	8018      	strh	r0, [r3, #0]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6123      	str	r3, [r4, #16]
 800a8fa:	4616      	mov	r6, r2
 800a8fc:	e7ba      	b.n	800a874 <_printf_i+0x150>
 800a8fe:	680b      	ldr	r3, [r1, #0]
 800a900:	1d1a      	adds	r2, r3, #4
 800a902:	600a      	str	r2, [r1, #0]
 800a904:	681e      	ldr	r6, [r3, #0]
 800a906:	6862      	ldr	r2, [r4, #4]
 800a908:	2100      	movs	r1, #0
 800a90a:	4630      	mov	r0, r6
 800a90c:	f7f5 fc70 	bl	80001f0 <memchr>
 800a910:	b108      	cbz	r0, 800a916 <_printf_i+0x1f2>
 800a912:	1b80      	subs	r0, r0, r6
 800a914:	6060      	str	r0, [r4, #4]
 800a916:	6863      	ldr	r3, [r4, #4]
 800a918:	6123      	str	r3, [r4, #16]
 800a91a:	2300      	movs	r3, #0
 800a91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a920:	e7a8      	b.n	800a874 <_printf_i+0x150>
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	4632      	mov	r2, r6
 800a926:	4649      	mov	r1, r9
 800a928:	4640      	mov	r0, r8
 800a92a:	47d0      	blx	sl
 800a92c:	3001      	adds	r0, #1
 800a92e:	d0ab      	beq.n	800a888 <_printf_i+0x164>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	079b      	lsls	r3, r3, #30
 800a934:	d413      	bmi.n	800a95e <_printf_i+0x23a>
 800a936:	68e0      	ldr	r0, [r4, #12]
 800a938:	9b03      	ldr	r3, [sp, #12]
 800a93a:	4298      	cmp	r0, r3
 800a93c:	bfb8      	it	lt
 800a93e:	4618      	movlt	r0, r3
 800a940:	e7a4      	b.n	800a88c <_printf_i+0x168>
 800a942:	2301      	movs	r3, #1
 800a944:	4632      	mov	r2, r6
 800a946:	4649      	mov	r1, r9
 800a948:	4640      	mov	r0, r8
 800a94a:	47d0      	blx	sl
 800a94c:	3001      	adds	r0, #1
 800a94e:	d09b      	beq.n	800a888 <_printf_i+0x164>
 800a950:	3501      	adds	r5, #1
 800a952:	68e3      	ldr	r3, [r4, #12]
 800a954:	9903      	ldr	r1, [sp, #12]
 800a956:	1a5b      	subs	r3, r3, r1
 800a958:	42ab      	cmp	r3, r5
 800a95a:	dcf2      	bgt.n	800a942 <_printf_i+0x21e>
 800a95c:	e7eb      	b.n	800a936 <_printf_i+0x212>
 800a95e:	2500      	movs	r5, #0
 800a960:	f104 0619 	add.w	r6, r4, #25
 800a964:	e7f5      	b.n	800a952 <_printf_i+0x22e>
 800a966:	bf00      	nop
 800a968:	0801088c 	.word	0x0801088c
 800a96c:	0801089d 	.word	0x0801089d

0800a970 <_scanf_float>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	b087      	sub	sp, #28
 800a976:	4617      	mov	r7, r2
 800a978:	9303      	str	r3, [sp, #12]
 800a97a:	688b      	ldr	r3, [r1, #8]
 800a97c:	1e5a      	subs	r2, r3, #1
 800a97e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a982:	bf83      	ittte	hi
 800a984:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a988:	195b      	addhi	r3, r3, r5
 800a98a:	9302      	strhi	r3, [sp, #8]
 800a98c:	2300      	movls	r3, #0
 800a98e:	bf86      	itte	hi
 800a990:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a994:	608b      	strhi	r3, [r1, #8]
 800a996:	9302      	strls	r3, [sp, #8]
 800a998:	680b      	ldr	r3, [r1, #0]
 800a99a:	468b      	mov	fp, r1
 800a99c:	2500      	movs	r5, #0
 800a99e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a9a2:	f84b 3b1c 	str.w	r3, [fp], #28
 800a9a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a9aa:	4680      	mov	r8, r0
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	465e      	mov	r6, fp
 800a9b0:	46aa      	mov	sl, r5
 800a9b2:	46a9      	mov	r9, r5
 800a9b4:	9501      	str	r5, [sp, #4]
 800a9b6:	68a2      	ldr	r2, [r4, #8]
 800a9b8:	b152      	cbz	r2, 800a9d0 <_scanf_float+0x60>
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b4e      	cmp	r3, #78	; 0x4e
 800a9c0:	d864      	bhi.n	800aa8c <_scanf_float+0x11c>
 800a9c2:	2b40      	cmp	r3, #64	; 0x40
 800a9c4:	d83c      	bhi.n	800aa40 <_scanf_float+0xd0>
 800a9c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a9ca:	b2c8      	uxtb	r0, r1
 800a9cc:	280e      	cmp	r0, #14
 800a9ce:	d93a      	bls.n	800aa46 <_scanf_float+0xd6>
 800a9d0:	f1b9 0f00 	cmp.w	r9, #0
 800a9d4:	d003      	beq.n	800a9de <_scanf_float+0x6e>
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9e2:	f1ba 0f01 	cmp.w	sl, #1
 800a9e6:	f200 8113 	bhi.w	800ac10 <_scanf_float+0x2a0>
 800a9ea:	455e      	cmp	r6, fp
 800a9ec:	f200 8105 	bhi.w	800abfa <_scanf_float+0x28a>
 800a9f0:	2501      	movs	r5, #1
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	b007      	add	sp, #28
 800a9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a9fe:	2a0d      	cmp	r2, #13
 800aa00:	d8e6      	bhi.n	800a9d0 <_scanf_float+0x60>
 800aa02:	a101      	add	r1, pc, #4	; (adr r1, 800aa08 <_scanf_float+0x98>)
 800aa04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa08:	0800ab47 	.word	0x0800ab47
 800aa0c:	0800a9d1 	.word	0x0800a9d1
 800aa10:	0800a9d1 	.word	0x0800a9d1
 800aa14:	0800a9d1 	.word	0x0800a9d1
 800aa18:	0800aba7 	.word	0x0800aba7
 800aa1c:	0800ab7f 	.word	0x0800ab7f
 800aa20:	0800a9d1 	.word	0x0800a9d1
 800aa24:	0800a9d1 	.word	0x0800a9d1
 800aa28:	0800ab55 	.word	0x0800ab55
 800aa2c:	0800a9d1 	.word	0x0800a9d1
 800aa30:	0800a9d1 	.word	0x0800a9d1
 800aa34:	0800a9d1 	.word	0x0800a9d1
 800aa38:	0800a9d1 	.word	0x0800a9d1
 800aa3c:	0800ab0d 	.word	0x0800ab0d
 800aa40:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aa44:	e7db      	b.n	800a9fe <_scanf_float+0x8e>
 800aa46:	290e      	cmp	r1, #14
 800aa48:	d8c2      	bhi.n	800a9d0 <_scanf_float+0x60>
 800aa4a:	a001      	add	r0, pc, #4	; (adr r0, 800aa50 <_scanf_float+0xe0>)
 800aa4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aa50:	0800aaff 	.word	0x0800aaff
 800aa54:	0800a9d1 	.word	0x0800a9d1
 800aa58:	0800aaff 	.word	0x0800aaff
 800aa5c:	0800ab93 	.word	0x0800ab93
 800aa60:	0800a9d1 	.word	0x0800a9d1
 800aa64:	0800aaad 	.word	0x0800aaad
 800aa68:	0800aae9 	.word	0x0800aae9
 800aa6c:	0800aae9 	.word	0x0800aae9
 800aa70:	0800aae9 	.word	0x0800aae9
 800aa74:	0800aae9 	.word	0x0800aae9
 800aa78:	0800aae9 	.word	0x0800aae9
 800aa7c:	0800aae9 	.word	0x0800aae9
 800aa80:	0800aae9 	.word	0x0800aae9
 800aa84:	0800aae9 	.word	0x0800aae9
 800aa88:	0800aae9 	.word	0x0800aae9
 800aa8c:	2b6e      	cmp	r3, #110	; 0x6e
 800aa8e:	d809      	bhi.n	800aaa4 <_scanf_float+0x134>
 800aa90:	2b60      	cmp	r3, #96	; 0x60
 800aa92:	d8b2      	bhi.n	800a9fa <_scanf_float+0x8a>
 800aa94:	2b54      	cmp	r3, #84	; 0x54
 800aa96:	d077      	beq.n	800ab88 <_scanf_float+0x218>
 800aa98:	2b59      	cmp	r3, #89	; 0x59
 800aa9a:	d199      	bne.n	800a9d0 <_scanf_float+0x60>
 800aa9c:	2d07      	cmp	r5, #7
 800aa9e:	d197      	bne.n	800a9d0 <_scanf_float+0x60>
 800aaa0:	2508      	movs	r5, #8
 800aaa2:	e029      	b.n	800aaf8 <_scanf_float+0x188>
 800aaa4:	2b74      	cmp	r3, #116	; 0x74
 800aaa6:	d06f      	beq.n	800ab88 <_scanf_float+0x218>
 800aaa8:	2b79      	cmp	r3, #121	; 0x79
 800aaaa:	e7f6      	b.n	800aa9a <_scanf_float+0x12a>
 800aaac:	6821      	ldr	r1, [r4, #0]
 800aaae:	05c8      	lsls	r0, r1, #23
 800aab0:	d51a      	bpl.n	800aae8 <_scanf_float+0x178>
 800aab2:	9b02      	ldr	r3, [sp, #8]
 800aab4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aab8:	6021      	str	r1, [r4, #0]
 800aaba:	f109 0901 	add.w	r9, r9, #1
 800aabe:	b11b      	cbz	r3, 800aac8 <_scanf_float+0x158>
 800aac0:	3b01      	subs	r3, #1
 800aac2:	3201      	adds	r2, #1
 800aac4:	9302      	str	r3, [sp, #8]
 800aac6:	60a2      	str	r2, [r4, #8]
 800aac8:	68a3      	ldr	r3, [r4, #8]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	60a3      	str	r3, [r4, #8]
 800aace:	6923      	ldr	r3, [r4, #16]
 800aad0:	3301      	adds	r3, #1
 800aad2:	6123      	str	r3, [r4, #16]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	607b      	str	r3, [r7, #4]
 800aadc:	f340 8084 	ble.w	800abe8 <_scanf_float+0x278>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	3301      	adds	r3, #1
 800aae4:	603b      	str	r3, [r7, #0]
 800aae6:	e766      	b.n	800a9b6 <_scanf_float+0x46>
 800aae8:	eb1a 0f05 	cmn.w	sl, r5
 800aaec:	f47f af70 	bne.w	800a9d0 <_scanf_float+0x60>
 800aaf0:	6822      	ldr	r2, [r4, #0]
 800aaf2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aaf6:	6022      	str	r2, [r4, #0]
 800aaf8:	f806 3b01 	strb.w	r3, [r6], #1
 800aafc:	e7e4      	b.n	800aac8 <_scanf_float+0x158>
 800aafe:	6822      	ldr	r2, [r4, #0]
 800ab00:	0610      	lsls	r0, r2, #24
 800ab02:	f57f af65 	bpl.w	800a9d0 <_scanf_float+0x60>
 800ab06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab0a:	e7f4      	b.n	800aaf6 <_scanf_float+0x186>
 800ab0c:	f1ba 0f00 	cmp.w	sl, #0
 800ab10:	d10e      	bne.n	800ab30 <_scanf_float+0x1c0>
 800ab12:	f1b9 0f00 	cmp.w	r9, #0
 800ab16:	d10e      	bne.n	800ab36 <_scanf_float+0x1c6>
 800ab18:	6822      	ldr	r2, [r4, #0]
 800ab1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab22:	d108      	bne.n	800ab36 <_scanf_float+0x1c6>
 800ab24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab28:	6022      	str	r2, [r4, #0]
 800ab2a:	f04f 0a01 	mov.w	sl, #1
 800ab2e:	e7e3      	b.n	800aaf8 <_scanf_float+0x188>
 800ab30:	f1ba 0f02 	cmp.w	sl, #2
 800ab34:	d055      	beq.n	800abe2 <_scanf_float+0x272>
 800ab36:	2d01      	cmp	r5, #1
 800ab38:	d002      	beq.n	800ab40 <_scanf_float+0x1d0>
 800ab3a:	2d04      	cmp	r5, #4
 800ab3c:	f47f af48 	bne.w	800a9d0 <_scanf_float+0x60>
 800ab40:	3501      	adds	r5, #1
 800ab42:	b2ed      	uxtb	r5, r5
 800ab44:	e7d8      	b.n	800aaf8 <_scanf_float+0x188>
 800ab46:	f1ba 0f01 	cmp.w	sl, #1
 800ab4a:	f47f af41 	bne.w	800a9d0 <_scanf_float+0x60>
 800ab4e:	f04f 0a02 	mov.w	sl, #2
 800ab52:	e7d1      	b.n	800aaf8 <_scanf_float+0x188>
 800ab54:	b97d      	cbnz	r5, 800ab76 <_scanf_float+0x206>
 800ab56:	f1b9 0f00 	cmp.w	r9, #0
 800ab5a:	f47f af3c 	bne.w	800a9d6 <_scanf_float+0x66>
 800ab5e:	6822      	ldr	r2, [r4, #0]
 800ab60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab68:	f47f af39 	bne.w	800a9de <_scanf_float+0x6e>
 800ab6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab70:	6022      	str	r2, [r4, #0]
 800ab72:	2501      	movs	r5, #1
 800ab74:	e7c0      	b.n	800aaf8 <_scanf_float+0x188>
 800ab76:	2d03      	cmp	r5, #3
 800ab78:	d0e2      	beq.n	800ab40 <_scanf_float+0x1d0>
 800ab7a:	2d05      	cmp	r5, #5
 800ab7c:	e7de      	b.n	800ab3c <_scanf_float+0x1cc>
 800ab7e:	2d02      	cmp	r5, #2
 800ab80:	f47f af26 	bne.w	800a9d0 <_scanf_float+0x60>
 800ab84:	2503      	movs	r5, #3
 800ab86:	e7b7      	b.n	800aaf8 <_scanf_float+0x188>
 800ab88:	2d06      	cmp	r5, #6
 800ab8a:	f47f af21 	bne.w	800a9d0 <_scanf_float+0x60>
 800ab8e:	2507      	movs	r5, #7
 800ab90:	e7b2      	b.n	800aaf8 <_scanf_float+0x188>
 800ab92:	6822      	ldr	r2, [r4, #0]
 800ab94:	0591      	lsls	r1, r2, #22
 800ab96:	f57f af1b 	bpl.w	800a9d0 <_scanf_float+0x60>
 800ab9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ab9e:	6022      	str	r2, [r4, #0]
 800aba0:	f8cd 9004 	str.w	r9, [sp, #4]
 800aba4:	e7a8      	b.n	800aaf8 <_scanf_float+0x188>
 800aba6:	6822      	ldr	r2, [r4, #0]
 800aba8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800abac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800abb0:	d006      	beq.n	800abc0 <_scanf_float+0x250>
 800abb2:	0550      	lsls	r0, r2, #21
 800abb4:	f57f af0c 	bpl.w	800a9d0 <_scanf_float+0x60>
 800abb8:	f1b9 0f00 	cmp.w	r9, #0
 800abbc:	f43f af0f 	beq.w	800a9de <_scanf_float+0x6e>
 800abc0:	0591      	lsls	r1, r2, #22
 800abc2:	bf58      	it	pl
 800abc4:	9901      	ldrpl	r1, [sp, #4]
 800abc6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800abca:	bf58      	it	pl
 800abcc:	eba9 0101 	subpl.w	r1, r9, r1
 800abd0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800abd4:	bf58      	it	pl
 800abd6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800abda:	6022      	str	r2, [r4, #0]
 800abdc:	f04f 0900 	mov.w	r9, #0
 800abe0:	e78a      	b.n	800aaf8 <_scanf_float+0x188>
 800abe2:	f04f 0a03 	mov.w	sl, #3
 800abe6:	e787      	b.n	800aaf8 <_scanf_float+0x188>
 800abe8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abec:	4639      	mov	r1, r7
 800abee:	4640      	mov	r0, r8
 800abf0:	4798      	blx	r3
 800abf2:	2800      	cmp	r0, #0
 800abf4:	f43f aedf 	beq.w	800a9b6 <_scanf_float+0x46>
 800abf8:	e6ea      	b.n	800a9d0 <_scanf_float+0x60>
 800abfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac02:	463a      	mov	r2, r7
 800ac04:	4640      	mov	r0, r8
 800ac06:	4798      	blx	r3
 800ac08:	6923      	ldr	r3, [r4, #16]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	6123      	str	r3, [r4, #16]
 800ac0e:	e6ec      	b.n	800a9ea <_scanf_float+0x7a>
 800ac10:	1e6b      	subs	r3, r5, #1
 800ac12:	2b06      	cmp	r3, #6
 800ac14:	d825      	bhi.n	800ac62 <_scanf_float+0x2f2>
 800ac16:	2d02      	cmp	r5, #2
 800ac18:	d836      	bhi.n	800ac88 <_scanf_float+0x318>
 800ac1a:	455e      	cmp	r6, fp
 800ac1c:	f67f aee8 	bls.w	800a9f0 <_scanf_float+0x80>
 800ac20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac28:	463a      	mov	r2, r7
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	4798      	blx	r3
 800ac2e:	6923      	ldr	r3, [r4, #16]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	6123      	str	r3, [r4, #16]
 800ac34:	e7f1      	b.n	800ac1a <_scanf_float+0x2aa>
 800ac36:	9802      	ldr	r0, [sp, #8]
 800ac38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ac40:	9002      	str	r0, [sp, #8]
 800ac42:	463a      	mov	r2, r7
 800ac44:	4640      	mov	r0, r8
 800ac46:	4798      	blx	r3
 800ac48:	6923      	ldr	r3, [r4, #16]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	6123      	str	r3, [r4, #16]
 800ac4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac52:	fa5f fa8a 	uxtb.w	sl, sl
 800ac56:	f1ba 0f02 	cmp.w	sl, #2
 800ac5a:	d1ec      	bne.n	800ac36 <_scanf_float+0x2c6>
 800ac5c:	3d03      	subs	r5, #3
 800ac5e:	b2ed      	uxtb	r5, r5
 800ac60:	1b76      	subs	r6, r6, r5
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	05da      	lsls	r2, r3, #23
 800ac66:	d52f      	bpl.n	800acc8 <_scanf_float+0x358>
 800ac68:	055b      	lsls	r3, r3, #21
 800ac6a:	d510      	bpl.n	800ac8e <_scanf_float+0x31e>
 800ac6c:	455e      	cmp	r6, fp
 800ac6e:	f67f aebf 	bls.w	800a9f0 <_scanf_float+0x80>
 800ac72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac7a:	463a      	mov	r2, r7
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	4798      	blx	r3
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	3b01      	subs	r3, #1
 800ac84:	6123      	str	r3, [r4, #16]
 800ac86:	e7f1      	b.n	800ac6c <_scanf_float+0x2fc>
 800ac88:	46aa      	mov	sl, r5
 800ac8a:	9602      	str	r6, [sp, #8]
 800ac8c:	e7df      	b.n	800ac4e <_scanf_float+0x2de>
 800ac8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ac92:	6923      	ldr	r3, [r4, #16]
 800ac94:	2965      	cmp	r1, #101	; 0x65
 800ac96:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac9a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ac9e:	6123      	str	r3, [r4, #16]
 800aca0:	d00c      	beq.n	800acbc <_scanf_float+0x34c>
 800aca2:	2945      	cmp	r1, #69	; 0x45
 800aca4:	d00a      	beq.n	800acbc <_scanf_float+0x34c>
 800aca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acaa:	463a      	mov	r2, r7
 800acac:	4640      	mov	r0, r8
 800acae:	4798      	blx	r3
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	1eb5      	subs	r5, r6, #2
 800acba:	6123      	str	r3, [r4, #16]
 800acbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acc0:	463a      	mov	r2, r7
 800acc2:	4640      	mov	r0, r8
 800acc4:	4798      	blx	r3
 800acc6:	462e      	mov	r6, r5
 800acc8:	6825      	ldr	r5, [r4, #0]
 800acca:	f015 0510 	ands.w	r5, r5, #16
 800acce:	d158      	bne.n	800ad82 <_scanf_float+0x412>
 800acd0:	7035      	strb	r5, [r6, #0]
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800acd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acdc:	d11c      	bne.n	800ad18 <_scanf_float+0x3a8>
 800acde:	9b01      	ldr	r3, [sp, #4]
 800ace0:	454b      	cmp	r3, r9
 800ace2:	eba3 0209 	sub.w	r2, r3, r9
 800ace6:	d124      	bne.n	800ad32 <_scanf_float+0x3c2>
 800ace8:	2200      	movs	r2, #0
 800acea:	4659      	mov	r1, fp
 800acec:	4640      	mov	r0, r8
 800acee:	f000 ff21 	bl	800bb34 <_strtod_r>
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	6821      	ldr	r1, [r4, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f011 0f02 	tst.w	r1, #2
 800acfc:	ec57 6b10 	vmov	r6, r7, d0
 800ad00:	f103 0204 	add.w	r2, r3, #4
 800ad04:	d020      	beq.n	800ad48 <_scanf_float+0x3d8>
 800ad06:	9903      	ldr	r1, [sp, #12]
 800ad08:	600a      	str	r2, [r1, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	e9c3 6700 	strd	r6, r7, [r3]
 800ad10:	68e3      	ldr	r3, [r4, #12]
 800ad12:	3301      	adds	r3, #1
 800ad14:	60e3      	str	r3, [r4, #12]
 800ad16:	e66c      	b.n	800a9f2 <_scanf_float+0x82>
 800ad18:	9b04      	ldr	r3, [sp, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0e4      	beq.n	800ace8 <_scanf_float+0x378>
 800ad1e:	9905      	ldr	r1, [sp, #20]
 800ad20:	230a      	movs	r3, #10
 800ad22:	462a      	mov	r2, r5
 800ad24:	3101      	adds	r1, #1
 800ad26:	4640      	mov	r0, r8
 800ad28:	f000 ff8e 	bl	800bc48 <_strtol_r>
 800ad2c:	9b04      	ldr	r3, [sp, #16]
 800ad2e:	9e05      	ldr	r6, [sp, #20]
 800ad30:	1ac2      	subs	r2, r0, r3
 800ad32:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ad36:	429e      	cmp	r6, r3
 800ad38:	bf28      	it	cs
 800ad3a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ad3e:	4912      	ldr	r1, [pc, #72]	; (800ad88 <_scanf_float+0x418>)
 800ad40:	4630      	mov	r0, r6
 800ad42:	f000 f82b 	bl	800ad9c <siprintf>
 800ad46:	e7cf      	b.n	800ace8 <_scanf_float+0x378>
 800ad48:	f011 0f04 	tst.w	r1, #4
 800ad4c:	9903      	ldr	r1, [sp, #12]
 800ad4e:	600a      	str	r2, [r1, #0]
 800ad50:	d1db      	bne.n	800ad0a <_scanf_float+0x39a>
 800ad52:	f8d3 8000 	ldr.w	r8, [r3]
 800ad56:	ee10 2a10 	vmov	r2, s0
 800ad5a:	ee10 0a10 	vmov	r0, s0
 800ad5e:	463b      	mov	r3, r7
 800ad60:	4639      	mov	r1, r7
 800ad62:	f7f5 feeb 	bl	8000b3c <__aeabi_dcmpun>
 800ad66:	b128      	cbz	r0, 800ad74 <_scanf_float+0x404>
 800ad68:	4808      	ldr	r0, [pc, #32]	; (800ad8c <_scanf_float+0x41c>)
 800ad6a:	f000 f811 	bl	800ad90 <nanf>
 800ad6e:	ed88 0a00 	vstr	s0, [r8]
 800ad72:	e7cd      	b.n	800ad10 <_scanf_float+0x3a0>
 800ad74:	4630      	mov	r0, r6
 800ad76:	4639      	mov	r1, r7
 800ad78:	f7f5 ff3e 	bl	8000bf8 <__aeabi_d2f>
 800ad7c:	f8c8 0000 	str.w	r0, [r8]
 800ad80:	e7c6      	b.n	800ad10 <_scanf_float+0x3a0>
 800ad82:	2500      	movs	r5, #0
 800ad84:	e635      	b.n	800a9f2 <_scanf_float+0x82>
 800ad86:	bf00      	nop
 800ad88:	080108ae 	.word	0x080108ae
 800ad8c:	08010ce3 	.word	0x08010ce3

0800ad90 <nanf>:
 800ad90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ad98 <nanf+0x8>
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop
 800ad98:	7fc00000 	.word	0x7fc00000

0800ad9c <siprintf>:
 800ad9c:	b40e      	push	{r1, r2, r3}
 800ad9e:	b500      	push	{lr}
 800ada0:	b09c      	sub	sp, #112	; 0x70
 800ada2:	ab1d      	add	r3, sp, #116	; 0x74
 800ada4:	9002      	str	r0, [sp, #8]
 800ada6:	9006      	str	r0, [sp, #24]
 800ada8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800adac:	4809      	ldr	r0, [pc, #36]	; (800add4 <siprintf+0x38>)
 800adae:	9107      	str	r1, [sp, #28]
 800adb0:	9104      	str	r1, [sp, #16]
 800adb2:	4909      	ldr	r1, [pc, #36]	; (800add8 <siprintf+0x3c>)
 800adb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800adb8:	9105      	str	r1, [sp, #20]
 800adba:	6800      	ldr	r0, [r0, #0]
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	a902      	add	r1, sp, #8
 800adc0:	f002 ff4e 	bl	800dc60 <_svfiprintf_r>
 800adc4:	9b02      	ldr	r3, [sp, #8]
 800adc6:	2200      	movs	r2, #0
 800adc8:	701a      	strb	r2, [r3, #0]
 800adca:	b01c      	add	sp, #112	; 0x70
 800adcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800add0:	b003      	add	sp, #12
 800add2:	4770      	bx	lr
 800add4:	20000034 	.word	0x20000034
 800add8:	ffff0208 	.word	0xffff0208

0800addc <siscanf>:
 800addc:	b40e      	push	{r1, r2, r3}
 800adde:	b510      	push	{r4, lr}
 800ade0:	b09f      	sub	sp, #124	; 0x7c
 800ade2:	ac21      	add	r4, sp, #132	; 0x84
 800ade4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ade8:	f854 2b04 	ldr.w	r2, [r4], #4
 800adec:	9201      	str	r2, [sp, #4]
 800adee:	f8ad 101c 	strh.w	r1, [sp, #28]
 800adf2:	9004      	str	r0, [sp, #16]
 800adf4:	9008      	str	r0, [sp, #32]
 800adf6:	f7f5 f9f3 	bl	80001e0 <strlen>
 800adfa:	4b0c      	ldr	r3, [pc, #48]	; (800ae2c <siscanf+0x50>)
 800adfc:	9005      	str	r0, [sp, #20]
 800adfe:	9009      	str	r0, [sp, #36]	; 0x24
 800ae00:	930d      	str	r3, [sp, #52]	; 0x34
 800ae02:	480b      	ldr	r0, [pc, #44]	; (800ae30 <siscanf+0x54>)
 800ae04:	9a01      	ldr	r2, [sp, #4]
 800ae06:	6800      	ldr	r0, [r0, #0]
 800ae08:	9403      	str	r4, [sp, #12]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9311      	str	r3, [sp, #68]	; 0x44
 800ae0e:	9316      	str	r3, [sp, #88]	; 0x58
 800ae10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae14:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ae18:	a904      	add	r1, sp, #16
 800ae1a:	4623      	mov	r3, r4
 800ae1c:	f003 f87a 	bl	800df14 <__ssvfiscanf_r>
 800ae20:	b01f      	add	sp, #124	; 0x7c
 800ae22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae26:	b003      	add	sp, #12
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	0800ae57 	.word	0x0800ae57
 800ae30:	20000034 	.word	0x20000034

0800ae34 <__sread>:
 800ae34:	b510      	push	{r4, lr}
 800ae36:	460c      	mov	r4, r1
 800ae38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae3c:	f003 fb2e 	bl	800e49c <_read_r>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	bfab      	itete	ge
 800ae44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae46:	89a3      	ldrhlt	r3, [r4, #12]
 800ae48:	181b      	addge	r3, r3, r0
 800ae4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae4e:	bfac      	ite	ge
 800ae50:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae52:	81a3      	strhlt	r3, [r4, #12]
 800ae54:	bd10      	pop	{r4, pc}

0800ae56 <__seofread>:
 800ae56:	2000      	movs	r0, #0
 800ae58:	4770      	bx	lr

0800ae5a <__swrite>:
 800ae5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5e:	461f      	mov	r7, r3
 800ae60:	898b      	ldrh	r3, [r1, #12]
 800ae62:	05db      	lsls	r3, r3, #23
 800ae64:	4605      	mov	r5, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	4616      	mov	r6, r2
 800ae6a:	d505      	bpl.n	800ae78 <__swrite+0x1e>
 800ae6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae70:	2302      	movs	r3, #2
 800ae72:	2200      	movs	r2, #0
 800ae74:	f002 f8f8 	bl	800d068 <_lseek_r>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	4632      	mov	r2, r6
 800ae86:	463b      	mov	r3, r7
 800ae88:	4628      	mov	r0, r5
 800ae8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	f000 bedd 	b.w	800bc4c <_write_r>

0800ae92 <__sseek>:
 800ae92:	b510      	push	{r4, lr}
 800ae94:	460c      	mov	r4, r1
 800ae96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9a:	f002 f8e5 	bl	800d068 <_lseek_r>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	bf15      	itete	ne
 800aea4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aeaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aeae:	81a3      	strheq	r3, [r4, #12]
 800aeb0:	bf18      	it	ne
 800aeb2:	81a3      	strhne	r3, [r4, #12]
 800aeb4:	bd10      	pop	{r4, pc}

0800aeb6 <__sclose>:
 800aeb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeba:	f000 bed9 	b.w	800bc70 <_close_r>

0800aebe <strncmp>:
 800aebe:	b510      	push	{r4, lr}
 800aec0:	b16a      	cbz	r2, 800aede <strncmp+0x20>
 800aec2:	3901      	subs	r1, #1
 800aec4:	1884      	adds	r4, r0, r2
 800aec6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aeca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aece:	4293      	cmp	r3, r2
 800aed0:	d103      	bne.n	800aeda <strncmp+0x1c>
 800aed2:	42a0      	cmp	r0, r4
 800aed4:	d001      	beq.n	800aeda <strncmp+0x1c>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1f5      	bne.n	800aec6 <strncmp+0x8>
 800aeda:	1a98      	subs	r0, r3, r2
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	4610      	mov	r0, r2
 800aee0:	e7fc      	b.n	800aedc <strncmp+0x1e>

0800aee2 <sulp>:
 800aee2:	b570      	push	{r4, r5, r6, lr}
 800aee4:	4604      	mov	r4, r0
 800aee6:	460d      	mov	r5, r1
 800aee8:	ec45 4b10 	vmov	d0, r4, r5
 800aeec:	4616      	mov	r6, r2
 800aeee:	f002 fc53 	bl	800d798 <__ulp>
 800aef2:	ec51 0b10 	vmov	r0, r1, d0
 800aef6:	b17e      	cbz	r6, 800af18 <sulp+0x36>
 800aef8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aefc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af00:	2b00      	cmp	r3, #0
 800af02:	dd09      	ble.n	800af18 <sulp+0x36>
 800af04:	051b      	lsls	r3, r3, #20
 800af06:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800af0a:	2400      	movs	r4, #0
 800af0c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800af10:	4622      	mov	r2, r4
 800af12:	462b      	mov	r3, r5
 800af14:	f7f5 fb78 	bl	8000608 <__aeabi_dmul>
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	0000      	movs	r0, r0
 800af1c:	0000      	movs	r0, r0
	...

0800af20 <_strtod_l>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	b0a3      	sub	sp, #140	; 0x8c
 800af26:	461f      	mov	r7, r3
 800af28:	2300      	movs	r3, #0
 800af2a:	931e      	str	r3, [sp, #120]	; 0x78
 800af2c:	4ba4      	ldr	r3, [pc, #656]	; (800b1c0 <_strtod_l+0x2a0>)
 800af2e:	9219      	str	r2, [sp, #100]	; 0x64
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	9307      	str	r3, [sp, #28]
 800af34:	4604      	mov	r4, r0
 800af36:	4618      	mov	r0, r3
 800af38:	4688      	mov	r8, r1
 800af3a:	f7f5 f951 	bl	80001e0 <strlen>
 800af3e:	f04f 0a00 	mov.w	sl, #0
 800af42:	4605      	mov	r5, r0
 800af44:	f04f 0b00 	mov.w	fp, #0
 800af48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800af4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af4e:	781a      	ldrb	r2, [r3, #0]
 800af50:	2a2b      	cmp	r2, #43	; 0x2b
 800af52:	d04c      	beq.n	800afee <_strtod_l+0xce>
 800af54:	d839      	bhi.n	800afca <_strtod_l+0xaa>
 800af56:	2a0d      	cmp	r2, #13
 800af58:	d832      	bhi.n	800afc0 <_strtod_l+0xa0>
 800af5a:	2a08      	cmp	r2, #8
 800af5c:	d832      	bhi.n	800afc4 <_strtod_l+0xa4>
 800af5e:	2a00      	cmp	r2, #0
 800af60:	d03c      	beq.n	800afdc <_strtod_l+0xbc>
 800af62:	2300      	movs	r3, #0
 800af64:	930e      	str	r3, [sp, #56]	; 0x38
 800af66:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800af68:	7833      	ldrb	r3, [r6, #0]
 800af6a:	2b30      	cmp	r3, #48	; 0x30
 800af6c:	f040 80b4 	bne.w	800b0d8 <_strtod_l+0x1b8>
 800af70:	7873      	ldrb	r3, [r6, #1]
 800af72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af76:	2b58      	cmp	r3, #88	; 0x58
 800af78:	d16c      	bne.n	800b054 <_strtod_l+0x134>
 800af7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	ab1e      	add	r3, sp, #120	; 0x78
 800af80:	9702      	str	r7, [sp, #8]
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	4a8f      	ldr	r2, [pc, #572]	; (800b1c4 <_strtod_l+0x2a4>)
 800af86:	ab1f      	add	r3, sp, #124	; 0x7c
 800af88:	a91d      	add	r1, sp, #116	; 0x74
 800af8a:	4620      	mov	r0, r4
 800af8c:	f001 fd60 	bl	800ca50 <__gethex>
 800af90:	f010 0707 	ands.w	r7, r0, #7
 800af94:	4605      	mov	r5, r0
 800af96:	d005      	beq.n	800afa4 <_strtod_l+0x84>
 800af98:	2f06      	cmp	r7, #6
 800af9a:	d12a      	bne.n	800aff2 <_strtod_l+0xd2>
 800af9c:	3601      	adds	r6, #1
 800af9e:	2300      	movs	r3, #0
 800afa0:	961d      	str	r6, [sp, #116]	; 0x74
 800afa2:	930e      	str	r3, [sp, #56]	; 0x38
 800afa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f040 8596 	bne.w	800bad8 <_strtod_l+0xbb8>
 800afac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afae:	b1db      	cbz	r3, 800afe8 <_strtod_l+0xc8>
 800afb0:	4652      	mov	r2, sl
 800afb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800afb6:	ec43 2b10 	vmov	d0, r2, r3
 800afba:	b023      	add	sp, #140	; 0x8c
 800afbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc0:	2a20      	cmp	r2, #32
 800afc2:	d1ce      	bne.n	800af62 <_strtod_l+0x42>
 800afc4:	3301      	adds	r3, #1
 800afc6:	931d      	str	r3, [sp, #116]	; 0x74
 800afc8:	e7c0      	b.n	800af4c <_strtod_l+0x2c>
 800afca:	2a2d      	cmp	r2, #45	; 0x2d
 800afcc:	d1c9      	bne.n	800af62 <_strtod_l+0x42>
 800afce:	2201      	movs	r2, #1
 800afd0:	920e      	str	r2, [sp, #56]	; 0x38
 800afd2:	1c5a      	adds	r2, r3, #1
 800afd4:	921d      	str	r2, [sp, #116]	; 0x74
 800afd6:	785b      	ldrb	r3, [r3, #1]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1c4      	bne.n	800af66 <_strtod_l+0x46>
 800afdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afde:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f040 8576 	bne.w	800bad4 <_strtod_l+0xbb4>
 800afe8:	4652      	mov	r2, sl
 800afea:	465b      	mov	r3, fp
 800afec:	e7e3      	b.n	800afb6 <_strtod_l+0x96>
 800afee:	2200      	movs	r2, #0
 800aff0:	e7ee      	b.n	800afd0 <_strtod_l+0xb0>
 800aff2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aff4:	b13a      	cbz	r2, 800b006 <_strtod_l+0xe6>
 800aff6:	2135      	movs	r1, #53	; 0x35
 800aff8:	a820      	add	r0, sp, #128	; 0x80
 800affa:	f002 fcd8 	bl	800d9ae <__copybits>
 800affe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b000:	4620      	mov	r0, r4
 800b002:	f002 f89d 	bl	800d140 <_Bfree>
 800b006:	3f01      	subs	r7, #1
 800b008:	2f05      	cmp	r7, #5
 800b00a:	d807      	bhi.n	800b01c <_strtod_l+0xfc>
 800b00c:	e8df f007 	tbb	[pc, r7]
 800b010:	1d180b0e 	.word	0x1d180b0e
 800b014:	030e      	.short	0x030e
 800b016:	f04f 0b00 	mov.w	fp, #0
 800b01a:	46da      	mov	sl, fp
 800b01c:	0728      	lsls	r0, r5, #28
 800b01e:	d5c1      	bpl.n	800afa4 <_strtod_l+0x84>
 800b020:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b024:	e7be      	b.n	800afa4 <_strtod_l+0x84>
 800b026:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b02a:	e7f7      	b.n	800b01c <_strtod_l+0xfc>
 800b02c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b030:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b032:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b036:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b03a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b03e:	e7ed      	b.n	800b01c <_strtod_l+0xfc>
 800b040:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b1c8 <_strtod_l+0x2a8>
 800b044:	f04f 0a00 	mov.w	sl, #0
 800b048:	e7e8      	b.n	800b01c <_strtod_l+0xfc>
 800b04a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b04e:	f04f 3aff 	mov.w	sl, #4294967295
 800b052:	e7e3      	b.n	800b01c <_strtod_l+0xfc>
 800b054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	921d      	str	r2, [sp, #116]	; 0x74
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b30      	cmp	r3, #48	; 0x30
 800b05e:	d0f9      	beq.n	800b054 <_strtod_l+0x134>
 800b060:	2b00      	cmp	r3, #0
 800b062:	d09f      	beq.n	800afa4 <_strtod_l+0x84>
 800b064:	2301      	movs	r3, #1
 800b066:	f04f 0900 	mov.w	r9, #0
 800b06a:	9304      	str	r3, [sp, #16]
 800b06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b06e:	930a      	str	r3, [sp, #40]	; 0x28
 800b070:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b074:	464f      	mov	r7, r9
 800b076:	220a      	movs	r2, #10
 800b078:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b07a:	7806      	ldrb	r6, [r0, #0]
 800b07c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b080:	b2d9      	uxtb	r1, r3
 800b082:	2909      	cmp	r1, #9
 800b084:	d92a      	bls.n	800b0dc <_strtod_l+0x1bc>
 800b086:	9907      	ldr	r1, [sp, #28]
 800b088:	462a      	mov	r2, r5
 800b08a:	f7ff ff18 	bl	800aebe <strncmp>
 800b08e:	b398      	cbz	r0, 800b0f8 <_strtod_l+0x1d8>
 800b090:	2000      	movs	r0, #0
 800b092:	4633      	mov	r3, r6
 800b094:	463d      	mov	r5, r7
 800b096:	9007      	str	r0, [sp, #28]
 800b098:	4602      	mov	r2, r0
 800b09a:	2b65      	cmp	r3, #101	; 0x65
 800b09c:	d001      	beq.n	800b0a2 <_strtod_l+0x182>
 800b09e:	2b45      	cmp	r3, #69	; 0x45
 800b0a0:	d118      	bne.n	800b0d4 <_strtod_l+0x1b4>
 800b0a2:	b91d      	cbnz	r5, 800b0ac <_strtod_l+0x18c>
 800b0a4:	9b04      	ldr	r3, [sp, #16]
 800b0a6:	4303      	orrs	r3, r0
 800b0a8:	d098      	beq.n	800afdc <_strtod_l+0xbc>
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b0b0:	f108 0301 	add.w	r3, r8, #1
 800b0b4:	931d      	str	r3, [sp, #116]	; 0x74
 800b0b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b0ba:	2b2b      	cmp	r3, #43	; 0x2b
 800b0bc:	d075      	beq.n	800b1aa <_strtod_l+0x28a>
 800b0be:	2b2d      	cmp	r3, #45	; 0x2d
 800b0c0:	d07b      	beq.n	800b1ba <_strtod_l+0x29a>
 800b0c2:	f04f 0c00 	mov.w	ip, #0
 800b0c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b0ca:	2909      	cmp	r1, #9
 800b0cc:	f240 8082 	bls.w	800b1d4 <_strtod_l+0x2b4>
 800b0d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b0d4:	2600      	movs	r6, #0
 800b0d6:	e09d      	b.n	800b214 <_strtod_l+0x2f4>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	e7c4      	b.n	800b066 <_strtod_l+0x146>
 800b0dc:	2f08      	cmp	r7, #8
 800b0de:	bfd8      	it	le
 800b0e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b0e2:	f100 0001 	add.w	r0, r0, #1
 800b0e6:	bfda      	itte	le
 800b0e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b0ec:	9309      	strle	r3, [sp, #36]	; 0x24
 800b0ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b0f2:	3701      	adds	r7, #1
 800b0f4:	901d      	str	r0, [sp, #116]	; 0x74
 800b0f6:	e7bf      	b.n	800b078 <_strtod_l+0x158>
 800b0f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0fa:	195a      	adds	r2, r3, r5
 800b0fc:	921d      	str	r2, [sp, #116]	; 0x74
 800b0fe:	5d5b      	ldrb	r3, [r3, r5]
 800b100:	2f00      	cmp	r7, #0
 800b102:	d037      	beq.n	800b174 <_strtod_l+0x254>
 800b104:	9007      	str	r0, [sp, #28]
 800b106:	463d      	mov	r5, r7
 800b108:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b10c:	2a09      	cmp	r2, #9
 800b10e:	d912      	bls.n	800b136 <_strtod_l+0x216>
 800b110:	2201      	movs	r2, #1
 800b112:	e7c2      	b.n	800b09a <_strtod_l+0x17a>
 800b114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	921d      	str	r2, [sp, #116]	; 0x74
 800b11a:	785b      	ldrb	r3, [r3, #1]
 800b11c:	3001      	adds	r0, #1
 800b11e:	2b30      	cmp	r3, #48	; 0x30
 800b120:	d0f8      	beq.n	800b114 <_strtod_l+0x1f4>
 800b122:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b126:	2a08      	cmp	r2, #8
 800b128:	f200 84db 	bhi.w	800bae2 <_strtod_l+0xbc2>
 800b12c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b12e:	9007      	str	r0, [sp, #28]
 800b130:	2000      	movs	r0, #0
 800b132:	920a      	str	r2, [sp, #40]	; 0x28
 800b134:	4605      	mov	r5, r0
 800b136:	3b30      	subs	r3, #48	; 0x30
 800b138:	f100 0201 	add.w	r2, r0, #1
 800b13c:	d014      	beq.n	800b168 <_strtod_l+0x248>
 800b13e:	9907      	ldr	r1, [sp, #28]
 800b140:	4411      	add	r1, r2
 800b142:	9107      	str	r1, [sp, #28]
 800b144:	462a      	mov	r2, r5
 800b146:	eb00 0e05 	add.w	lr, r0, r5
 800b14a:	210a      	movs	r1, #10
 800b14c:	4572      	cmp	r2, lr
 800b14e:	d113      	bne.n	800b178 <_strtod_l+0x258>
 800b150:	182a      	adds	r2, r5, r0
 800b152:	2a08      	cmp	r2, #8
 800b154:	f105 0501 	add.w	r5, r5, #1
 800b158:	4405      	add	r5, r0
 800b15a:	dc1c      	bgt.n	800b196 <_strtod_l+0x276>
 800b15c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b15e:	220a      	movs	r2, #10
 800b160:	fb02 3301 	mla	r3, r2, r1, r3
 800b164:	9309      	str	r3, [sp, #36]	; 0x24
 800b166:	2200      	movs	r2, #0
 800b168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b16a:	1c59      	adds	r1, r3, #1
 800b16c:	911d      	str	r1, [sp, #116]	; 0x74
 800b16e:	785b      	ldrb	r3, [r3, #1]
 800b170:	4610      	mov	r0, r2
 800b172:	e7c9      	b.n	800b108 <_strtod_l+0x1e8>
 800b174:	4638      	mov	r0, r7
 800b176:	e7d2      	b.n	800b11e <_strtod_l+0x1fe>
 800b178:	2a08      	cmp	r2, #8
 800b17a:	dc04      	bgt.n	800b186 <_strtod_l+0x266>
 800b17c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b17e:	434e      	muls	r6, r1
 800b180:	9609      	str	r6, [sp, #36]	; 0x24
 800b182:	3201      	adds	r2, #1
 800b184:	e7e2      	b.n	800b14c <_strtod_l+0x22c>
 800b186:	f102 0c01 	add.w	ip, r2, #1
 800b18a:	f1bc 0f10 	cmp.w	ip, #16
 800b18e:	bfd8      	it	le
 800b190:	fb01 f909 	mulle.w	r9, r1, r9
 800b194:	e7f5      	b.n	800b182 <_strtod_l+0x262>
 800b196:	2d10      	cmp	r5, #16
 800b198:	bfdc      	itt	le
 800b19a:	220a      	movle	r2, #10
 800b19c:	fb02 3909 	mlale	r9, r2, r9, r3
 800b1a0:	e7e1      	b.n	800b166 <_strtod_l+0x246>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9307      	str	r3, [sp, #28]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	e77c      	b.n	800b0a4 <_strtod_l+0x184>
 800b1aa:	f04f 0c00 	mov.w	ip, #0
 800b1ae:	f108 0302 	add.w	r3, r8, #2
 800b1b2:	931d      	str	r3, [sp, #116]	; 0x74
 800b1b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b1b8:	e785      	b.n	800b0c6 <_strtod_l+0x1a6>
 800b1ba:	f04f 0c01 	mov.w	ip, #1
 800b1be:	e7f6      	b.n	800b1ae <_strtod_l+0x28e>
 800b1c0:	08010b08 	.word	0x08010b08
 800b1c4:	080108b4 	.word	0x080108b4
 800b1c8:	7ff00000 	.word	0x7ff00000
 800b1cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1ce:	1c59      	adds	r1, r3, #1
 800b1d0:	911d      	str	r1, [sp, #116]	; 0x74
 800b1d2:	785b      	ldrb	r3, [r3, #1]
 800b1d4:	2b30      	cmp	r3, #48	; 0x30
 800b1d6:	d0f9      	beq.n	800b1cc <_strtod_l+0x2ac>
 800b1d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b1dc:	2908      	cmp	r1, #8
 800b1de:	f63f af79 	bhi.w	800b0d4 <_strtod_l+0x1b4>
 800b1e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b1e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1e8:	9308      	str	r3, [sp, #32]
 800b1ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1ec:	1c59      	adds	r1, r3, #1
 800b1ee:	911d      	str	r1, [sp, #116]	; 0x74
 800b1f0:	785b      	ldrb	r3, [r3, #1]
 800b1f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b1f6:	2e09      	cmp	r6, #9
 800b1f8:	d937      	bls.n	800b26a <_strtod_l+0x34a>
 800b1fa:	9e08      	ldr	r6, [sp, #32]
 800b1fc:	1b89      	subs	r1, r1, r6
 800b1fe:	2908      	cmp	r1, #8
 800b200:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b204:	dc02      	bgt.n	800b20c <_strtod_l+0x2ec>
 800b206:	4576      	cmp	r6, lr
 800b208:	bfa8      	it	ge
 800b20a:	4676      	movge	r6, lr
 800b20c:	f1bc 0f00 	cmp.w	ip, #0
 800b210:	d000      	beq.n	800b214 <_strtod_l+0x2f4>
 800b212:	4276      	negs	r6, r6
 800b214:	2d00      	cmp	r5, #0
 800b216:	d14f      	bne.n	800b2b8 <_strtod_l+0x398>
 800b218:	9904      	ldr	r1, [sp, #16]
 800b21a:	4301      	orrs	r1, r0
 800b21c:	f47f aec2 	bne.w	800afa4 <_strtod_l+0x84>
 800b220:	2a00      	cmp	r2, #0
 800b222:	f47f aedb 	bne.w	800afdc <_strtod_l+0xbc>
 800b226:	2b69      	cmp	r3, #105	; 0x69
 800b228:	d027      	beq.n	800b27a <_strtod_l+0x35a>
 800b22a:	dc24      	bgt.n	800b276 <_strtod_l+0x356>
 800b22c:	2b49      	cmp	r3, #73	; 0x49
 800b22e:	d024      	beq.n	800b27a <_strtod_l+0x35a>
 800b230:	2b4e      	cmp	r3, #78	; 0x4e
 800b232:	f47f aed3 	bne.w	800afdc <_strtod_l+0xbc>
 800b236:	499e      	ldr	r1, [pc, #632]	; (800b4b0 <_strtod_l+0x590>)
 800b238:	a81d      	add	r0, sp, #116	; 0x74
 800b23a:	f001 fe61 	bl	800cf00 <__match>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f43f aecc 	beq.w	800afdc <_strtod_l+0xbc>
 800b244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2b28      	cmp	r3, #40	; 0x28
 800b24a:	d12d      	bne.n	800b2a8 <_strtod_l+0x388>
 800b24c:	4999      	ldr	r1, [pc, #612]	; (800b4b4 <_strtod_l+0x594>)
 800b24e:	aa20      	add	r2, sp, #128	; 0x80
 800b250:	a81d      	add	r0, sp, #116	; 0x74
 800b252:	f001 fe69 	bl	800cf28 <__hexnan>
 800b256:	2805      	cmp	r0, #5
 800b258:	d126      	bne.n	800b2a8 <_strtod_l+0x388>
 800b25a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b25c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b260:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b264:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b268:	e69c      	b.n	800afa4 <_strtod_l+0x84>
 800b26a:	210a      	movs	r1, #10
 800b26c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b270:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b274:	e7b9      	b.n	800b1ea <_strtod_l+0x2ca>
 800b276:	2b6e      	cmp	r3, #110	; 0x6e
 800b278:	e7db      	b.n	800b232 <_strtod_l+0x312>
 800b27a:	498f      	ldr	r1, [pc, #572]	; (800b4b8 <_strtod_l+0x598>)
 800b27c:	a81d      	add	r0, sp, #116	; 0x74
 800b27e:	f001 fe3f 	bl	800cf00 <__match>
 800b282:	2800      	cmp	r0, #0
 800b284:	f43f aeaa 	beq.w	800afdc <_strtod_l+0xbc>
 800b288:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b28a:	498c      	ldr	r1, [pc, #560]	; (800b4bc <_strtod_l+0x59c>)
 800b28c:	3b01      	subs	r3, #1
 800b28e:	a81d      	add	r0, sp, #116	; 0x74
 800b290:	931d      	str	r3, [sp, #116]	; 0x74
 800b292:	f001 fe35 	bl	800cf00 <__match>
 800b296:	b910      	cbnz	r0, 800b29e <_strtod_l+0x37e>
 800b298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b29a:	3301      	adds	r3, #1
 800b29c:	931d      	str	r3, [sp, #116]	; 0x74
 800b29e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b4cc <_strtod_l+0x5ac>
 800b2a2:	f04f 0a00 	mov.w	sl, #0
 800b2a6:	e67d      	b.n	800afa4 <_strtod_l+0x84>
 800b2a8:	4885      	ldr	r0, [pc, #532]	; (800b4c0 <_strtod_l+0x5a0>)
 800b2aa:	f003 f909 	bl	800e4c0 <nan>
 800b2ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b2b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b2b6:	e675      	b.n	800afa4 <_strtod_l+0x84>
 800b2b8:	9b07      	ldr	r3, [sp, #28]
 800b2ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2bc:	1af3      	subs	r3, r6, r3
 800b2be:	2f00      	cmp	r7, #0
 800b2c0:	bf08      	it	eq
 800b2c2:	462f      	moveq	r7, r5
 800b2c4:	2d10      	cmp	r5, #16
 800b2c6:	9308      	str	r3, [sp, #32]
 800b2c8:	46a8      	mov	r8, r5
 800b2ca:	bfa8      	it	ge
 800b2cc:	f04f 0810 	movge.w	r8, #16
 800b2d0:	f7f5 f920 	bl	8000514 <__aeabi_ui2d>
 800b2d4:	2d09      	cmp	r5, #9
 800b2d6:	4682      	mov	sl, r0
 800b2d8:	468b      	mov	fp, r1
 800b2da:	dd13      	ble.n	800b304 <_strtod_l+0x3e4>
 800b2dc:	4b79      	ldr	r3, [pc, #484]	; (800b4c4 <_strtod_l+0x5a4>)
 800b2de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b2e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b2e6:	f7f5 f98f 	bl	8000608 <__aeabi_dmul>
 800b2ea:	4682      	mov	sl, r0
 800b2ec:	4648      	mov	r0, r9
 800b2ee:	468b      	mov	fp, r1
 800b2f0:	f7f5 f910 	bl	8000514 <__aeabi_ui2d>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4650      	mov	r0, sl
 800b2fa:	4659      	mov	r1, fp
 800b2fc:	f7f4 ffce 	bl	800029c <__adddf3>
 800b300:	4682      	mov	sl, r0
 800b302:	468b      	mov	fp, r1
 800b304:	2d0f      	cmp	r5, #15
 800b306:	dc38      	bgt.n	800b37a <_strtod_l+0x45a>
 800b308:	9b08      	ldr	r3, [sp, #32]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f43f ae4a 	beq.w	800afa4 <_strtod_l+0x84>
 800b310:	dd24      	ble.n	800b35c <_strtod_l+0x43c>
 800b312:	2b16      	cmp	r3, #22
 800b314:	dc0b      	bgt.n	800b32e <_strtod_l+0x40e>
 800b316:	4d6b      	ldr	r5, [pc, #428]	; (800b4c4 <_strtod_l+0x5a4>)
 800b318:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b31c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b320:	4652      	mov	r2, sl
 800b322:	465b      	mov	r3, fp
 800b324:	f7f5 f970 	bl	8000608 <__aeabi_dmul>
 800b328:	4682      	mov	sl, r0
 800b32a:	468b      	mov	fp, r1
 800b32c:	e63a      	b.n	800afa4 <_strtod_l+0x84>
 800b32e:	9a08      	ldr	r2, [sp, #32]
 800b330:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b334:	4293      	cmp	r3, r2
 800b336:	db20      	blt.n	800b37a <_strtod_l+0x45a>
 800b338:	4c62      	ldr	r4, [pc, #392]	; (800b4c4 <_strtod_l+0x5a4>)
 800b33a:	f1c5 050f 	rsb	r5, r5, #15
 800b33e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b342:	4652      	mov	r2, sl
 800b344:	465b      	mov	r3, fp
 800b346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b34a:	f7f5 f95d 	bl	8000608 <__aeabi_dmul>
 800b34e:	9b08      	ldr	r3, [sp, #32]
 800b350:	1b5d      	subs	r5, r3, r5
 800b352:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b356:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b35a:	e7e3      	b.n	800b324 <_strtod_l+0x404>
 800b35c:	9b08      	ldr	r3, [sp, #32]
 800b35e:	3316      	adds	r3, #22
 800b360:	db0b      	blt.n	800b37a <_strtod_l+0x45a>
 800b362:	9b07      	ldr	r3, [sp, #28]
 800b364:	4a57      	ldr	r2, [pc, #348]	; (800b4c4 <_strtod_l+0x5a4>)
 800b366:	1b9e      	subs	r6, r3, r6
 800b368:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b36c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b370:	4650      	mov	r0, sl
 800b372:	4659      	mov	r1, fp
 800b374:	f7f5 fa72 	bl	800085c <__aeabi_ddiv>
 800b378:	e7d6      	b.n	800b328 <_strtod_l+0x408>
 800b37a:	9b08      	ldr	r3, [sp, #32]
 800b37c:	eba5 0808 	sub.w	r8, r5, r8
 800b380:	4498      	add	r8, r3
 800b382:	f1b8 0f00 	cmp.w	r8, #0
 800b386:	dd71      	ble.n	800b46c <_strtod_l+0x54c>
 800b388:	f018 030f 	ands.w	r3, r8, #15
 800b38c:	d00a      	beq.n	800b3a4 <_strtod_l+0x484>
 800b38e:	494d      	ldr	r1, [pc, #308]	; (800b4c4 <_strtod_l+0x5a4>)
 800b390:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b394:	4652      	mov	r2, sl
 800b396:	465b      	mov	r3, fp
 800b398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b39c:	f7f5 f934 	bl	8000608 <__aeabi_dmul>
 800b3a0:	4682      	mov	sl, r0
 800b3a2:	468b      	mov	fp, r1
 800b3a4:	f038 080f 	bics.w	r8, r8, #15
 800b3a8:	d04d      	beq.n	800b446 <_strtod_l+0x526>
 800b3aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b3ae:	dd22      	ble.n	800b3f6 <_strtod_l+0x4d6>
 800b3b0:	2500      	movs	r5, #0
 800b3b2:	462e      	mov	r6, r5
 800b3b4:	9509      	str	r5, [sp, #36]	; 0x24
 800b3b6:	9507      	str	r5, [sp, #28]
 800b3b8:	2322      	movs	r3, #34	; 0x22
 800b3ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b4cc <_strtod_l+0x5ac>
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	f04f 0a00 	mov.w	sl, #0
 800b3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f43f adec 	beq.w	800afa4 <_strtod_l+0x84>
 800b3cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f001 feb6 	bl	800d140 <_Bfree>
 800b3d4:	9907      	ldr	r1, [sp, #28]
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f001 feb2 	bl	800d140 <_Bfree>
 800b3dc:	4631      	mov	r1, r6
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f001 feae 	bl	800d140 <_Bfree>
 800b3e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f001 feaa 	bl	800d140 <_Bfree>
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f001 fea6 	bl	800d140 <_Bfree>
 800b3f4:	e5d6      	b.n	800afa4 <_strtod_l+0x84>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b3fc:	4650      	mov	r0, sl
 800b3fe:	4659      	mov	r1, fp
 800b400:	4699      	mov	r9, r3
 800b402:	f1b8 0f01 	cmp.w	r8, #1
 800b406:	dc21      	bgt.n	800b44c <_strtod_l+0x52c>
 800b408:	b10b      	cbz	r3, 800b40e <_strtod_l+0x4ee>
 800b40a:	4682      	mov	sl, r0
 800b40c:	468b      	mov	fp, r1
 800b40e:	4b2e      	ldr	r3, [pc, #184]	; (800b4c8 <_strtod_l+0x5a8>)
 800b410:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b414:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b418:	4652      	mov	r2, sl
 800b41a:	465b      	mov	r3, fp
 800b41c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b420:	f7f5 f8f2 	bl	8000608 <__aeabi_dmul>
 800b424:	4b29      	ldr	r3, [pc, #164]	; (800b4cc <_strtod_l+0x5ac>)
 800b426:	460a      	mov	r2, r1
 800b428:	400b      	ands	r3, r1
 800b42a:	4929      	ldr	r1, [pc, #164]	; (800b4d0 <_strtod_l+0x5b0>)
 800b42c:	428b      	cmp	r3, r1
 800b42e:	4682      	mov	sl, r0
 800b430:	d8be      	bhi.n	800b3b0 <_strtod_l+0x490>
 800b432:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b436:	428b      	cmp	r3, r1
 800b438:	bf86      	itte	hi
 800b43a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b4d4 <_strtod_l+0x5b4>
 800b43e:	f04f 3aff 	movhi.w	sl, #4294967295
 800b442:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b446:	2300      	movs	r3, #0
 800b448:	9304      	str	r3, [sp, #16]
 800b44a:	e081      	b.n	800b550 <_strtod_l+0x630>
 800b44c:	f018 0f01 	tst.w	r8, #1
 800b450:	d007      	beq.n	800b462 <_strtod_l+0x542>
 800b452:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <_strtod_l+0x5a8>)
 800b454:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f5 f8d4 	bl	8000608 <__aeabi_dmul>
 800b460:	2301      	movs	r3, #1
 800b462:	f109 0901 	add.w	r9, r9, #1
 800b466:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b46a:	e7ca      	b.n	800b402 <_strtod_l+0x4e2>
 800b46c:	d0eb      	beq.n	800b446 <_strtod_l+0x526>
 800b46e:	f1c8 0800 	rsb	r8, r8, #0
 800b472:	f018 020f 	ands.w	r2, r8, #15
 800b476:	d00a      	beq.n	800b48e <_strtod_l+0x56e>
 800b478:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <_strtod_l+0x5a4>)
 800b47a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b47e:	4650      	mov	r0, sl
 800b480:	4659      	mov	r1, fp
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f7f5 f9e9 	bl	800085c <__aeabi_ddiv>
 800b48a:	4682      	mov	sl, r0
 800b48c:	468b      	mov	fp, r1
 800b48e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b492:	d0d8      	beq.n	800b446 <_strtod_l+0x526>
 800b494:	f1b8 0f1f 	cmp.w	r8, #31
 800b498:	dd1e      	ble.n	800b4d8 <_strtod_l+0x5b8>
 800b49a:	2500      	movs	r5, #0
 800b49c:	462e      	mov	r6, r5
 800b49e:	9509      	str	r5, [sp, #36]	; 0x24
 800b4a0:	9507      	str	r5, [sp, #28]
 800b4a2:	2322      	movs	r3, #34	; 0x22
 800b4a4:	f04f 0a00 	mov.w	sl, #0
 800b4a8:	f04f 0b00 	mov.w	fp, #0
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	e789      	b.n	800b3c4 <_strtod_l+0x4a4>
 800b4b0:	08010889 	.word	0x08010889
 800b4b4:	080108c8 	.word	0x080108c8
 800b4b8:	08010881 	.word	0x08010881
 800b4bc:	08010a0c 	.word	0x08010a0c
 800b4c0:	08010ce3 	.word	0x08010ce3
 800b4c4:	08010ba8 	.word	0x08010ba8
 800b4c8:	08010b80 	.word	0x08010b80
 800b4cc:	7ff00000 	.word	0x7ff00000
 800b4d0:	7ca00000 	.word	0x7ca00000
 800b4d4:	7fefffff 	.word	0x7fefffff
 800b4d8:	f018 0310 	ands.w	r3, r8, #16
 800b4dc:	bf18      	it	ne
 800b4de:	236a      	movne	r3, #106	; 0x6a
 800b4e0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b898 <_strtod_l+0x978>
 800b4e4:	9304      	str	r3, [sp, #16]
 800b4e6:	4650      	mov	r0, sl
 800b4e8:	4659      	mov	r1, fp
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f018 0f01 	tst.w	r8, #1
 800b4f0:	d004      	beq.n	800b4fc <_strtod_l+0x5dc>
 800b4f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b4f6:	f7f5 f887 	bl	8000608 <__aeabi_dmul>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b500:	f109 0908 	add.w	r9, r9, #8
 800b504:	d1f2      	bne.n	800b4ec <_strtod_l+0x5cc>
 800b506:	b10b      	cbz	r3, 800b50c <_strtod_l+0x5ec>
 800b508:	4682      	mov	sl, r0
 800b50a:	468b      	mov	fp, r1
 800b50c:	9b04      	ldr	r3, [sp, #16]
 800b50e:	b1bb      	cbz	r3, 800b540 <_strtod_l+0x620>
 800b510:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b514:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b518:	2b00      	cmp	r3, #0
 800b51a:	4659      	mov	r1, fp
 800b51c:	dd10      	ble.n	800b540 <_strtod_l+0x620>
 800b51e:	2b1f      	cmp	r3, #31
 800b520:	f340 8128 	ble.w	800b774 <_strtod_l+0x854>
 800b524:	2b34      	cmp	r3, #52	; 0x34
 800b526:	bfde      	ittt	le
 800b528:	3b20      	suble	r3, #32
 800b52a:	f04f 32ff 	movle.w	r2, #4294967295
 800b52e:	fa02 f303 	lslle.w	r3, r2, r3
 800b532:	f04f 0a00 	mov.w	sl, #0
 800b536:	bfcc      	ite	gt
 800b538:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b53c:	ea03 0b01 	andle.w	fp, r3, r1
 800b540:	2200      	movs	r2, #0
 800b542:	2300      	movs	r3, #0
 800b544:	4650      	mov	r0, sl
 800b546:	4659      	mov	r1, fp
 800b548:	f7f5 fac6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d1a4      	bne.n	800b49a <_strtod_l+0x57a>
 800b550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b556:	462b      	mov	r3, r5
 800b558:	463a      	mov	r2, r7
 800b55a:	4620      	mov	r0, r4
 800b55c:	f001 fe5c 	bl	800d218 <__s2b>
 800b560:	9009      	str	r0, [sp, #36]	; 0x24
 800b562:	2800      	cmp	r0, #0
 800b564:	f43f af24 	beq.w	800b3b0 <_strtod_l+0x490>
 800b568:	9b07      	ldr	r3, [sp, #28]
 800b56a:	1b9e      	subs	r6, r3, r6
 800b56c:	9b08      	ldr	r3, [sp, #32]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bfb4      	ite	lt
 800b572:	4633      	movlt	r3, r6
 800b574:	2300      	movge	r3, #0
 800b576:	9310      	str	r3, [sp, #64]	; 0x40
 800b578:	9b08      	ldr	r3, [sp, #32]
 800b57a:	2500      	movs	r5, #0
 800b57c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b580:	9318      	str	r3, [sp, #96]	; 0x60
 800b582:	462e      	mov	r6, r5
 800b584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b586:	4620      	mov	r0, r4
 800b588:	6859      	ldr	r1, [r3, #4]
 800b58a:	f001 fd99 	bl	800d0c0 <_Balloc>
 800b58e:	9007      	str	r0, [sp, #28]
 800b590:	2800      	cmp	r0, #0
 800b592:	f43f af11 	beq.w	800b3b8 <_strtod_l+0x498>
 800b596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b598:	691a      	ldr	r2, [r3, #16]
 800b59a:	3202      	adds	r2, #2
 800b59c:	f103 010c 	add.w	r1, r3, #12
 800b5a0:	0092      	lsls	r2, r2, #2
 800b5a2:	300c      	adds	r0, #12
 800b5a4:	f7fe fd64 	bl	800a070 <memcpy>
 800b5a8:	ec4b ab10 	vmov	d0, sl, fp
 800b5ac:	aa20      	add	r2, sp, #128	; 0x80
 800b5ae:	a91f      	add	r1, sp, #124	; 0x7c
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b5b6:	f002 f96b 	bl	800d890 <__d2b>
 800b5ba:	901e      	str	r0, [sp, #120]	; 0x78
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f43f aefb 	beq.w	800b3b8 <_strtod_l+0x498>
 800b5c2:	2101      	movs	r1, #1
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f001 fec1 	bl	800d34c <__i2b>
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	f43f aef3 	beq.w	800b3b8 <_strtod_l+0x498>
 800b5d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b5d4:	9904      	ldr	r1, [sp, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	bfab      	itete	ge
 800b5da:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b5dc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b5de:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b5e0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b5e4:	bfac      	ite	ge
 800b5e6:	eb03 0902 	addge.w	r9, r3, r2
 800b5ea:	1ad7      	sublt	r7, r2, r3
 800b5ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b5ee:	eba3 0801 	sub.w	r8, r3, r1
 800b5f2:	4490      	add	r8, r2
 800b5f4:	4ba3      	ldr	r3, [pc, #652]	; (800b884 <_strtod_l+0x964>)
 800b5f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5fa:	4598      	cmp	r8, r3
 800b5fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b600:	f280 80cc 	bge.w	800b79c <_strtod_l+0x87c>
 800b604:	eba3 0308 	sub.w	r3, r3, r8
 800b608:	2b1f      	cmp	r3, #31
 800b60a:	eba2 0203 	sub.w	r2, r2, r3
 800b60e:	f04f 0101 	mov.w	r1, #1
 800b612:	f300 80b6 	bgt.w	800b782 <_strtod_l+0x862>
 800b616:	fa01 f303 	lsl.w	r3, r1, r3
 800b61a:	9311      	str	r3, [sp, #68]	; 0x44
 800b61c:	2300      	movs	r3, #0
 800b61e:	930c      	str	r3, [sp, #48]	; 0x30
 800b620:	eb09 0802 	add.w	r8, r9, r2
 800b624:	9b04      	ldr	r3, [sp, #16]
 800b626:	45c1      	cmp	r9, r8
 800b628:	4417      	add	r7, r2
 800b62a:	441f      	add	r7, r3
 800b62c:	464b      	mov	r3, r9
 800b62e:	bfa8      	it	ge
 800b630:	4643      	movge	r3, r8
 800b632:	42bb      	cmp	r3, r7
 800b634:	bfa8      	it	ge
 800b636:	463b      	movge	r3, r7
 800b638:	2b00      	cmp	r3, #0
 800b63a:	bfc2      	ittt	gt
 800b63c:	eba8 0803 	subgt.w	r8, r8, r3
 800b640:	1aff      	subgt	r7, r7, r3
 800b642:	eba9 0903 	subgt.w	r9, r9, r3
 800b646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b648:	2b00      	cmp	r3, #0
 800b64a:	dd17      	ble.n	800b67c <_strtod_l+0x75c>
 800b64c:	4631      	mov	r1, r6
 800b64e:	461a      	mov	r2, r3
 800b650:	4620      	mov	r0, r4
 800b652:	f001 ff37 	bl	800d4c4 <__pow5mult>
 800b656:	4606      	mov	r6, r0
 800b658:	2800      	cmp	r0, #0
 800b65a:	f43f aead 	beq.w	800b3b8 <_strtod_l+0x498>
 800b65e:	4601      	mov	r1, r0
 800b660:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b662:	4620      	mov	r0, r4
 800b664:	f001 fe88 	bl	800d378 <__multiply>
 800b668:	900f      	str	r0, [sp, #60]	; 0x3c
 800b66a:	2800      	cmp	r0, #0
 800b66c:	f43f aea4 	beq.w	800b3b8 <_strtod_l+0x498>
 800b670:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b672:	4620      	mov	r0, r4
 800b674:	f001 fd64 	bl	800d140 <_Bfree>
 800b678:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b67a:	931e      	str	r3, [sp, #120]	; 0x78
 800b67c:	f1b8 0f00 	cmp.w	r8, #0
 800b680:	f300 8091 	bgt.w	800b7a6 <_strtod_l+0x886>
 800b684:	9b08      	ldr	r3, [sp, #32]
 800b686:	2b00      	cmp	r3, #0
 800b688:	dd08      	ble.n	800b69c <_strtod_l+0x77c>
 800b68a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b68c:	9907      	ldr	r1, [sp, #28]
 800b68e:	4620      	mov	r0, r4
 800b690:	f001 ff18 	bl	800d4c4 <__pow5mult>
 800b694:	9007      	str	r0, [sp, #28]
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f ae8e 	beq.w	800b3b8 <_strtod_l+0x498>
 800b69c:	2f00      	cmp	r7, #0
 800b69e:	dd08      	ble.n	800b6b2 <_strtod_l+0x792>
 800b6a0:	9907      	ldr	r1, [sp, #28]
 800b6a2:	463a      	mov	r2, r7
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f001 ff67 	bl	800d578 <__lshift>
 800b6aa:	9007      	str	r0, [sp, #28]
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	f43f ae83 	beq.w	800b3b8 <_strtod_l+0x498>
 800b6b2:	f1b9 0f00 	cmp.w	r9, #0
 800b6b6:	dd08      	ble.n	800b6ca <_strtod_l+0x7aa>
 800b6b8:	4631      	mov	r1, r6
 800b6ba:	464a      	mov	r2, r9
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f001 ff5b 	bl	800d578 <__lshift>
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	f43f ae77 	beq.w	800b3b8 <_strtod_l+0x498>
 800b6ca:	9a07      	ldr	r2, [sp, #28]
 800b6cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f001 ffda 	bl	800d688 <__mdiff>
 800b6d4:	4605      	mov	r5, r0
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	f43f ae6e 	beq.w	800b3b8 <_strtod_l+0x498>
 800b6dc:	68c3      	ldr	r3, [r0, #12]
 800b6de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	60c3      	str	r3, [r0, #12]
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	f001 ffb3 	bl	800d650 <__mcmp>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	da65      	bge.n	800b7ba <_strtod_l+0x89a>
 800b6ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6f0:	ea53 030a 	orrs.w	r3, r3, sl
 800b6f4:	f040 8087 	bne.w	800b806 <_strtod_l+0x8e6>
 800b6f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f040 8082 	bne.w	800b806 <_strtod_l+0x8e6>
 800b702:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b706:	0d1b      	lsrs	r3, r3, #20
 800b708:	051b      	lsls	r3, r3, #20
 800b70a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b70e:	d97a      	bls.n	800b806 <_strtod_l+0x8e6>
 800b710:	696b      	ldr	r3, [r5, #20]
 800b712:	b913      	cbnz	r3, 800b71a <_strtod_l+0x7fa>
 800b714:	692b      	ldr	r3, [r5, #16]
 800b716:	2b01      	cmp	r3, #1
 800b718:	dd75      	ble.n	800b806 <_strtod_l+0x8e6>
 800b71a:	4629      	mov	r1, r5
 800b71c:	2201      	movs	r2, #1
 800b71e:	4620      	mov	r0, r4
 800b720:	f001 ff2a 	bl	800d578 <__lshift>
 800b724:	4631      	mov	r1, r6
 800b726:	4605      	mov	r5, r0
 800b728:	f001 ff92 	bl	800d650 <__mcmp>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	dd6a      	ble.n	800b806 <_strtod_l+0x8e6>
 800b730:	9904      	ldr	r1, [sp, #16]
 800b732:	4a55      	ldr	r2, [pc, #340]	; (800b888 <_strtod_l+0x968>)
 800b734:	465b      	mov	r3, fp
 800b736:	2900      	cmp	r1, #0
 800b738:	f000 8085 	beq.w	800b846 <_strtod_l+0x926>
 800b73c:	ea02 010b 	and.w	r1, r2, fp
 800b740:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b744:	dc7f      	bgt.n	800b846 <_strtod_l+0x926>
 800b746:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b74a:	f77f aeaa 	ble.w	800b4a2 <_strtod_l+0x582>
 800b74e:	4a4f      	ldr	r2, [pc, #316]	; (800b88c <_strtod_l+0x96c>)
 800b750:	2300      	movs	r3, #0
 800b752:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b756:	4650      	mov	r0, sl
 800b758:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b75c:	4659      	mov	r1, fp
 800b75e:	f7f4 ff53 	bl	8000608 <__aeabi_dmul>
 800b762:	460b      	mov	r3, r1
 800b764:	4303      	orrs	r3, r0
 800b766:	bf08      	it	eq
 800b768:	2322      	moveq	r3, #34	; 0x22
 800b76a:	4682      	mov	sl, r0
 800b76c:	468b      	mov	fp, r1
 800b76e:	bf08      	it	eq
 800b770:	6023      	streq	r3, [r4, #0]
 800b772:	e62b      	b.n	800b3cc <_strtod_l+0x4ac>
 800b774:	f04f 32ff 	mov.w	r2, #4294967295
 800b778:	fa02 f303 	lsl.w	r3, r2, r3
 800b77c:	ea03 0a0a 	and.w	sl, r3, sl
 800b780:	e6de      	b.n	800b540 <_strtod_l+0x620>
 800b782:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b786:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b78a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b78e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b792:	fa01 f308 	lsl.w	r3, r1, r8
 800b796:	930c      	str	r3, [sp, #48]	; 0x30
 800b798:	9111      	str	r1, [sp, #68]	; 0x44
 800b79a:	e741      	b.n	800b620 <_strtod_l+0x700>
 800b79c:	2300      	movs	r3, #0
 800b79e:	930c      	str	r3, [sp, #48]	; 0x30
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	9311      	str	r3, [sp, #68]	; 0x44
 800b7a4:	e73c      	b.n	800b620 <_strtod_l+0x700>
 800b7a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b7a8:	4642      	mov	r2, r8
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f001 fee4 	bl	800d578 <__lshift>
 800b7b0:	901e      	str	r0, [sp, #120]	; 0x78
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	f47f af66 	bne.w	800b684 <_strtod_l+0x764>
 800b7b8:	e5fe      	b.n	800b3b8 <_strtod_l+0x498>
 800b7ba:	465f      	mov	r7, fp
 800b7bc:	d16e      	bne.n	800b89c <_strtod_l+0x97c>
 800b7be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b7c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7c4:	b342      	cbz	r2, 800b818 <_strtod_l+0x8f8>
 800b7c6:	4a32      	ldr	r2, [pc, #200]	; (800b890 <_strtod_l+0x970>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d128      	bne.n	800b81e <_strtod_l+0x8fe>
 800b7cc:	9b04      	ldr	r3, [sp, #16]
 800b7ce:	4650      	mov	r0, sl
 800b7d0:	b1eb      	cbz	r3, 800b80e <_strtod_l+0x8ee>
 800b7d2:	4a2d      	ldr	r2, [pc, #180]	; (800b888 <_strtod_l+0x968>)
 800b7d4:	403a      	ands	r2, r7
 800b7d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b7da:	f04f 31ff 	mov.w	r1, #4294967295
 800b7de:	d819      	bhi.n	800b814 <_strtod_l+0x8f4>
 800b7e0:	0d12      	lsrs	r2, r2, #20
 800b7e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ea:	4298      	cmp	r0, r3
 800b7ec:	d117      	bne.n	800b81e <_strtod_l+0x8fe>
 800b7ee:	4b29      	ldr	r3, [pc, #164]	; (800b894 <_strtod_l+0x974>)
 800b7f0:	429f      	cmp	r7, r3
 800b7f2:	d102      	bne.n	800b7fa <_strtod_l+0x8da>
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	f43f addf 	beq.w	800b3b8 <_strtod_l+0x498>
 800b7fa:	4b23      	ldr	r3, [pc, #140]	; (800b888 <_strtod_l+0x968>)
 800b7fc:	403b      	ands	r3, r7
 800b7fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b802:	f04f 0a00 	mov.w	sl, #0
 800b806:	9b04      	ldr	r3, [sp, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1a0      	bne.n	800b74e <_strtod_l+0x82e>
 800b80c:	e5de      	b.n	800b3cc <_strtod_l+0x4ac>
 800b80e:	f04f 33ff 	mov.w	r3, #4294967295
 800b812:	e7ea      	b.n	800b7ea <_strtod_l+0x8ca>
 800b814:	460b      	mov	r3, r1
 800b816:	e7e8      	b.n	800b7ea <_strtod_l+0x8ca>
 800b818:	ea53 030a 	orrs.w	r3, r3, sl
 800b81c:	d088      	beq.n	800b730 <_strtod_l+0x810>
 800b81e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b820:	b1db      	cbz	r3, 800b85a <_strtod_l+0x93a>
 800b822:	423b      	tst	r3, r7
 800b824:	d0ef      	beq.n	800b806 <_strtod_l+0x8e6>
 800b826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b828:	9a04      	ldr	r2, [sp, #16]
 800b82a:	4650      	mov	r0, sl
 800b82c:	4659      	mov	r1, fp
 800b82e:	b1c3      	cbz	r3, 800b862 <_strtod_l+0x942>
 800b830:	f7ff fb57 	bl	800aee2 <sulp>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b83c:	f7f4 fd2e 	bl	800029c <__adddf3>
 800b840:	4682      	mov	sl, r0
 800b842:	468b      	mov	fp, r1
 800b844:	e7df      	b.n	800b806 <_strtod_l+0x8e6>
 800b846:	4013      	ands	r3, r2
 800b848:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b84c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b850:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b854:	f04f 3aff 	mov.w	sl, #4294967295
 800b858:	e7d5      	b.n	800b806 <_strtod_l+0x8e6>
 800b85a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b85c:	ea13 0f0a 	tst.w	r3, sl
 800b860:	e7e0      	b.n	800b824 <_strtod_l+0x904>
 800b862:	f7ff fb3e 	bl	800aee2 <sulp>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b86e:	f7f4 fd13 	bl	8000298 <__aeabi_dsub>
 800b872:	2200      	movs	r2, #0
 800b874:	2300      	movs	r3, #0
 800b876:	4682      	mov	sl, r0
 800b878:	468b      	mov	fp, r1
 800b87a:	f7f5 f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b87e:	2800      	cmp	r0, #0
 800b880:	d0c1      	beq.n	800b806 <_strtod_l+0x8e6>
 800b882:	e60e      	b.n	800b4a2 <_strtod_l+0x582>
 800b884:	fffffc02 	.word	0xfffffc02
 800b888:	7ff00000 	.word	0x7ff00000
 800b88c:	39500000 	.word	0x39500000
 800b890:	000fffff 	.word	0x000fffff
 800b894:	7fefffff 	.word	0x7fefffff
 800b898:	080108e0 	.word	0x080108e0
 800b89c:	4631      	mov	r1, r6
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f002 f852 	bl	800d948 <__ratio>
 800b8a4:	ec59 8b10 	vmov	r8, r9, d0
 800b8a8:	ee10 0a10 	vmov	r0, s0
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	f7f5 f924 	bl	8000b00 <__aeabi_dcmple>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d07c      	beq.n	800b9b6 <_strtod_l+0xa96>
 800b8bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d04c      	beq.n	800b95c <_strtod_l+0xa3c>
 800b8c2:	4b95      	ldr	r3, [pc, #596]	; (800bb18 <_strtod_l+0xbf8>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b8ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bb18 <_strtod_l+0xbf8>
 800b8ce:	f04f 0800 	mov.w	r8, #0
 800b8d2:	4b92      	ldr	r3, [pc, #584]	; (800bb1c <_strtod_l+0xbfc>)
 800b8d4:	403b      	ands	r3, r7
 800b8d6:	9311      	str	r3, [sp, #68]	; 0x44
 800b8d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b8da:	4b91      	ldr	r3, [pc, #580]	; (800bb20 <_strtod_l+0xc00>)
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	f040 80b2 	bne.w	800ba46 <_strtod_l+0xb26>
 800b8e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b8e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b8ee:	ec4b ab10 	vmov	d0, sl, fp
 800b8f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b8f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b8fa:	f001 ff4d 	bl	800d798 <__ulp>
 800b8fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b902:	ec53 2b10 	vmov	r2, r3, d0
 800b906:	f7f4 fe7f 	bl	8000608 <__aeabi_dmul>
 800b90a:	4652      	mov	r2, sl
 800b90c:	465b      	mov	r3, fp
 800b90e:	f7f4 fcc5 	bl	800029c <__adddf3>
 800b912:	460b      	mov	r3, r1
 800b914:	4981      	ldr	r1, [pc, #516]	; (800bb1c <_strtod_l+0xbfc>)
 800b916:	4a83      	ldr	r2, [pc, #524]	; (800bb24 <_strtod_l+0xc04>)
 800b918:	4019      	ands	r1, r3
 800b91a:	4291      	cmp	r1, r2
 800b91c:	4682      	mov	sl, r0
 800b91e:	d95e      	bls.n	800b9de <_strtod_l+0xabe>
 800b920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b922:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b926:	4293      	cmp	r3, r2
 800b928:	d103      	bne.n	800b932 <_strtod_l+0xa12>
 800b92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b92c:	3301      	adds	r3, #1
 800b92e:	f43f ad43 	beq.w	800b3b8 <_strtod_l+0x498>
 800b932:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800bb30 <_strtod_l+0xc10>
 800b936:	f04f 3aff 	mov.w	sl, #4294967295
 800b93a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b93c:	4620      	mov	r0, r4
 800b93e:	f001 fbff 	bl	800d140 <_Bfree>
 800b942:	9907      	ldr	r1, [sp, #28]
 800b944:	4620      	mov	r0, r4
 800b946:	f001 fbfb 	bl	800d140 <_Bfree>
 800b94a:	4631      	mov	r1, r6
 800b94c:	4620      	mov	r0, r4
 800b94e:	f001 fbf7 	bl	800d140 <_Bfree>
 800b952:	4629      	mov	r1, r5
 800b954:	4620      	mov	r0, r4
 800b956:	f001 fbf3 	bl	800d140 <_Bfree>
 800b95a:	e613      	b.n	800b584 <_strtod_l+0x664>
 800b95c:	f1ba 0f00 	cmp.w	sl, #0
 800b960:	d11b      	bne.n	800b99a <_strtod_l+0xa7a>
 800b962:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b966:	b9f3      	cbnz	r3, 800b9a6 <_strtod_l+0xa86>
 800b968:	4b6b      	ldr	r3, [pc, #428]	; (800bb18 <_strtod_l+0xbf8>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	4640      	mov	r0, r8
 800b96e:	4649      	mov	r1, r9
 800b970:	f7f5 f8bc 	bl	8000aec <__aeabi_dcmplt>
 800b974:	b9d0      	cbnz	r0, 800b9ac <_strtod_l+0xa8c>
 800b976:	4640      	mov	r0, r8
 800b978:	4649      	mov	r1, r9
 800b97a:	4b6b      	ldr	r3, [pc, #428]	; (800bb28 <_strtod_l+0xc08>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	f7f4 fe43 	bl	8000608 <__aeabi_dmul>
 800b982:	4680      	mov	r8, r0
 800b984:	4689      	mov	r9, r1
 800b986:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b98a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b98e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b990:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b994:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b998:	e79b      	b.n	800b8d2 <_strtod_l+0x9b2>
 800b99a:	f1ba 0f01 	cmp.w	sl, #1
 800b99e:	d102      	bne.n	800b9a6 <_strtod_l+0xa86>
 800b9a0:	2f00      	cmp	r7, #0
 800b9a2:	f43f ad7e 	beq.w	800b4a2 <_strtod_l+0x582>
 800b9a6:	4b61      	ldr	r3, [pc, #388]	; (800bb2c <_strtod_l+0xc0c>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	e78c      	b.n	800b8c6 <_strtod_l+0x9a6>
 800b9ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bb28 <_strtod_l+0xc08>
 800b9b0:	f04f 0800 	mov.w	r8, #0
 800b9b4:	e7e7      	b.n	800b986 <_strtod_l+0xa66>
 800b9b6:	4b5c      	ldr	r3, [pc, #368]	; (800bb28 <_strtod_l+0xc08>)
 800b9b8:	4640      	mov	r0, r8
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f7f4 fe23 	bl	8000608 <__aeabi_dmul>
 800b9c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	4689      	mov	r9, r1
 800b9c8:	b933      	cbnz	r3, 800b9d8 <_strtod_l+0xab8>
 800b9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9ce:	9012      	str	r0, [sp, #72]	; 0x48
 800b9d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b9d6:	e7dd      	b.n	800b994 <_strtod_l+0xa74>
 800b9d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b9dc:	e7f9      	b.n	800b9d2 <_strtod_l+0xab2>
 800b9de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b9e2:	9b04      	ldr	r3, [sp, #16]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1a8      	bne.n	800b93a <_strtod_l+0xa1a>
 800b9e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b9ee:	0d1b      	lsrs	r3, r3, #20
 800b9f0:	051b      	lsls	r3, r3, #20
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d1a1      	bne.n	800b93a <_strtod_l+0xa1a>
 800b9f6:	4640      	mov	r0, r8
 800b9f8:	4649      	mov	r1, r9
 800b9fa:	f7f5 f965 	bl	8000cc8 <__aeabi_d2lz>
 800b9fe:	f7f4 fdd5 	bl	80005ac <__aeabi_l2d>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	4640      	mov	r0, r8
 800ba08:	4649      	mov	r1, r9
 800ba0a:	f7f4 fc45 	bl	8000298 <__aeabi_dsub>
 800ba0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba14:	ea43 030a 	orr.w	r3, r3, sl
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	4689      	mov	r9, r1
 800ba1e:	d053      	beq.n	800bac8 <_strtod_l+0xba8>
 800ba20:	a335      	add	r3, pc, #212	; (adr r3, 800baf8 <_strtod_l+0xbd8>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f5 f861 	bl	8000aec <__aeabi_dcmplt>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f47f acce 	bne.w	800b3cc <_strtod_l+0x4ac>
 800ba30:	a333      	add	r3, pc, #204	; (adr r3, 800bb00 <_strtod_l+0xbe0>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	4640      	mov	r0, r8
 800ba38:	4649      	mov	r1, r9
 800ba3a:	f7f5 f875 	bl	8000b28 <__aeabi_dcmpgt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f43f af7b 	beq.w	800b93a <_strtod_l+0xa1a>
 800ba44:	e4c2      	b.n	800b3cc <_strtod_l+0x4ac>
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	b333      	cbz	r3, 800ba98 <_strtod_l+0xb78>
 800ba4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba50:	d822      	bhi.n	800ba98 <_strtod_l+0xb78>
 800ba52:	a32d      	add	r3, pc, #180	; (adr r3, 800bb08 <_strtod_l+0xbe8>)
 800ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba58:	4640      	mov	r0, r8
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	f7f5 f850 	bl	8000b00 <__aeabi_dcmple>
 800ba60:	b1a0      	cbz	r0, 800ba8c <_strtod_l+0xb6c>
 800ba62:	4649      	mov	r1, r9
 800ba64:	4640      	mov	r0, r8
 800ba66:	f7f5 f8a7 	bl	8000bb8 <__aeabi_d2uiz>
 800ba6a:	2801      	cmp	r0, #1
 800ba6c:	bf38      	it	cc
 800ba6e:	2001      	movcc	r0, #1
 800ba70:	f7f4 fd50 	bl	8000514 <__aeabi_ui2d>
 800ba74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba76:	4680      	mov	r8, r0
 800ba78:	4689      	mov	r9, r1
 800ba7a:	bb13      	cbnz	r3, 800bac2 <_strtod_l+0xba2>
 800ba7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba80:	9014      	str	r0, [sp, #80]	; 0x50
 800ba82:	9315      	str	r3, [sp, #84]	; 0x54
 800ba84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ba88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ba8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba94:	1a9b      	subs	r3, r3, r2
 800ba96:	930d      	str	r3, [sp, #52]	; 0x34
 800ba98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba9c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800baa0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800baa4:	f001 fe78 	bl	800d798 <__ulp>
 800baa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800baac:	ec53 2b10 	vmov	r2, r3, d0
 800bab0:	f7f4 fdaa 	bl	8000608 <__aeabi_dmul>
 800bab4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bab8:	f7f4 fbf0 	bl	800029c <__adddf3>
 800babc:	4682      	mov	sl, r0
 800babe:	468b      	mov	fp, r1
 800bac0:	e78f      	b.n	800b9e2 <_strtod_l+0xac2>
 800bac2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800bac6:	e7dd      	b.n	800ba84 <_strtod_l+0xb64>
 800bac8:	a311      	add	r3, pc, #68	; (adr r3, 800bb10 <_strtod_l+0xbf0>)
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	f7f5 f80d 	bl	8000aec <__aeabi_dcmplt>
 800bad2:	e7b4      	b.n	800ba3e <_strtod_l+0xb1e>
 800bad4:	2300      	movs	r3, #0
 800bad6:	930e      	str	r3, [sp, #56]	; 0x38
 800bad8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	f7ff ba65 	b.w	800afac <_strtod_l+0x8c>
 800bae2:	2b65      	cmp	r3, #101	; 0x65
 800bae4:	f43f ab5d 	beq.w	800b1a2 <_strtod_l+0x282>
 800bae8:	2b45      	cmp	r3, #69	; 0x45
 800baea:	f43f ab5a 	beq.w	800b1a2 <_strtod_l+0x282>
 800baee:	2201      	movs	r2, #1
 800baf0:	f7ff bb92 	b.w	800b218 <_strtod_l+0x2f8>
 800baf4:	f3af 8000 	nop.w
 800baf8:	94a03595 	.word	0x94a03595
 800bafc:	3fdfffff 	.word	0x3fdfffff
 800bb00:	35afe535 	.word	0x35afe535
 800bb04:	3fe00000 	.word	0x3fe00000
 800bb08:	ffc00000 	.word	0xffc00000
 800bb0c:	41dfffff 	.word	0x41dfffff
 800bb10:	94a03595 	.word	0x94a03595
 800bb14:	3fcfffff 	.word	0x3fcfffff
 800bb18:	3ff00000 	.word	0x3ff00000
 800bb1c:	7ff00000 	.word	0x7ff00000
 800bb20:	7fe00000 	.word	0x7fe00000
 800bb24:	7c9fffff 	.word	0x7c9fffff
 800bb28:	3fe00000 	.word	0x3fe00000
 800bb2c:	bff00000 	.word	0xbff00000
 800bb30:	7fefffff 	.word	0x7fefffff

0800bb34 <_strtod_r>:
 800bb34:	4b01      	ldr	r3, [pc, #4]	; (800bb3c <_strtod_r+0x8>)
 800bb36:	f7ff b9f3 	b.w	800af20 <_strtod_l>
 800bb3a:	bf00      	nop
 800bb3c:	2000009c 	.word	0x2000009c

0800bb40 <_strtol_l.isra.0>:
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb46:	d001      	beq.n	800bb4c <_strtol_l.isra.0+0xc>
 800bb48:	2b24      	cmp	r3, #36	; 0x24
 800bb4a:	d906      	bls.n	800bb5a <_strtol_l.isra.0+0x1a>
 800bb4c:	f7fe fa66 	bl	800a01c <__errno>
 800bb50:	2316      	movs	r3, #22
 800bb52:	6003      	str	r3, [r0, #0]
 800bb54:	2000      	movs	r0, #0
 800bb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb5a:	4f3a      	ldr	r7, [pc, #232]	; (800bc44 <_strtol_l.isra.0+0x104>)
 800bb5c:	468e      	mov	lr, r1
 800bb5e:	4676      	mov	r6, lr
 800bb60:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bb64:	5de5      	ldrb	r5, [r4, r7]
 800bb66:	f015 0508 	ands.w	r5, r5, #8
 800bb6a:	d1f8      	bne.n	800bb5e <_strtol_l.isra.0+0x1e>
 800bb6c:	2c2d      	cmp	r4, #45	; 0x2d
 800bb6e:	d134      	bne.n	800bbda <_strtol_l.isra.0+0x9a>
 800bb70:	f89e 4000 	ldrb.w	r4, [lr]
 800bb74:	f04f 0801 	mov.w	r8, #1
 800bb78:	f106 0e02 	add.w	lr, r6, #2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d05c      	beq.n	800bc3a <_strtol_l.isra.0+0xfa>
 800bb80:	2b10      	cmp	r3, #16
 800bb82:	d10c      	bne.n	800bb9e <_strtol_l.isra.0+0x5e>
 800bb84:	2c30      	cmp	r4, #48	; 0x30
 800bb86:	d10a      	bne.n	800bb9e <_strtol_l.isra.0+0x5e>
 800bb88:	f89e 4000 	ldrb.w	r4, [lr]
 800bb8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb90:	2c58      	cmp	r4, #88	; 0x58
 800bb92:	d14d      	bne.n	800bc30 <_strtol_l.isra.0+0xf0>
 800bb94:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bb98:	2310      	movs	r3, #16
 800bb9a:	f10e 0e02 	add.w	lr, lr, #2
 800bb9e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bba2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bba6:	2600      	movs	r6, #0
 800bba8:	fbbc f9f3 	udiv	r9, ip, r3
 800bbac:	4635      	mov	r5, r6
 800bbae:	fb03 ca19 	mls	sl, r3, r9, ip
 800bbb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bbb6:	2f09      	cmp	r7, #9
 800bbb8:	d818      	bhi.n	800bbec <_strtol_l.isra.0+0xac>
 800bbba:	463c      	mov	r4, r7
 800bbbc:	42a3      	cmp	r3, r4
 800bbbe:	dd24      	ble.n	800bc0a <_strtol_l.isra.0+0xca>
 800bbc0:	2e00      	cmp	r6, #0
 800bbc2:	db1f      	blt.n	800bc04 <_strtol_l.isra.0+0xc4>
 800bbc4:	45a9      	cmp	r9, r5
 800bbc6:	d31d      	bcc.n	800bc04 <_strtol_l.isra.0+0xc4>
 800bbc8:	d101      	bne.n	800bbce <_strtol_l.isra.0+0x8e>
 800bbca:	45a2      	cmp	sl, r4
 800bbcc:	db1a      	blt.n	800bc04 <_strtol_l.isra.0+0xc4>
 800bbce:	fb05 4503 	mla	r5, r5, r3, r4
 800bbd2:	2601      	movs	r6, #1
 800bbd4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bbd8:	e7eb      	b.n	800bbb2 <_strtol_l.isra.0+0x72>
 800bbda:	2c2b      	cmp	r4, #43	; 0x2b
 800bbdc:	bf08      	it	eq
 800bbde:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bbe2:	46a8      	mov	r8, r5
 800bbe4:	bf08      	it	eq
 800bbe6:	f106 0e02 	addeq.w	lr, r6, #2
 800bbea:	e7c7      	b.n	800bb7c <_strtol_l.isra.0+0x3c>
 800bbec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bbf0:	2f19      	cmp	r7, #25
 800bbf2:	d801      	bhi.n	800bbf8 <_strtol_l.isra.0+0xb8>
 800bbf4:	3c37      	subs	r4, #55	; 0x37
 800bbf6:	e7e1      	b.n	800bbbc <_strtol_l.isra.0+0x7c>
 800bbf8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bbfc:	2f19      	cmp	r7, #25
 800bbfe:	d804      	bhi.n	800bc0a <_strtol_l.isra.0+0xca>
 800bc00:	3c57      	subs	r4, #87	; 0x57
 800bc02:	e7db      	b.n	800bbbc <_strtol_l.isra.0+0x7c>
 800bc04:	f04f 36ff 	mov.w	r6, #4294967295
 800bc08:	e7e4      	b.n	800bbd4 <_strtol_l.isra.0+0x94>
 800bc0a:	2e00      	cmp	r6, #0
 800bc0c:	da05      	bge.n	800bc1a <_strtol_l.isra.0+0xda>
 800bc0e:	2322      	movs	r3, #34	; 0x22
 800bc10:	6003      	str	r3, [r0, #0]
 800bc12:	4665      	mov	r5, ip
 800bc14:	b942      	cbnz	r2, 800bc28 <_strtol_l.isra.0+0xe8>
 800bc16:	4628      	mov	r0, r5
 800bc18:	e79d      	b.n	800bb56 <_strtol_l.isra.0+0x16>
 800bc1a:	f1b8 0f00 	cmp.w	r8, #0
 800bc1e:	d000      	beq.n	800bc22 <_strtol_l.isra.0+0xe2>
 800bc20:	426d      	negs	r5, r5
 800bc22:	2a00      	cmp	r2, #0
 800bc24:	d0f7      	beq.n	800bc16 <_strtol_l.isra.0+0xd6>
 800bc26:	b10e      	cbz	r6, 800bc2c <_strtol_l.isra.0+0xec>
 800bc28:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bc2c:	6011      	str	r1, [r2, #0]
 800bc2e:	e7f2      	b.n	800bc16 <_strtol_l.isra.0+0xd6>
 800bc30:	2430      	movs	r4, #48	; 0x30
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1b3      	bne.n	800bb9e <_strtol_l.isra.0+0x5e>
 800bc36:	2308      	movs	r3, #8
 800bc38:	e7b1      	b.n	800bb9e <_strtol_l.isra.0+0x5e>
 800bc3a:	2c30      	cmp	r4, #48	; 0x30
 800bc3c:	d0a4      	beq.n	800bb88 <_strtol_l.isra.0+0x48>
 800bc3e:	230a      	movs	r3, #10
 800bc40:	e7ad      	b.n	800bb9e <_strtol_l.isra.0+0x5e>
 800bc42:	bf00      	nop
 800bc44:	08010909 	.word	0x08010909

0800bc48 <_strtol_r>:
 800bc48:	f7ff bf7a 	b.w	800bb40 <_strtol_l.isra.0>

0800bc4c <_write_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4d07      	ldr	r5, [pc, #28]	; (800bc6c <_write_r+0x20>)
 800bc50:	4604      	mov	r4, r0
 800bc52:	4608      	mov	r0, r1
 800bc54:	4611      	mov	r1, r2
 800bc56:	2200      	movs	r2, #0
 800bc58:	602a      	str	r2, [r5, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	f7f6 fd69 	bl	8002732 <_write>
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	d102      	bne.n	800bc6a <_write_r+0x1e>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	b103      	cbz	r3, 800bc6a <_write_r+0x1e>
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	bd38      	pop	{r3, r4, r5, pc}
 800bc6c:	200059c4 	.word	0x200059c4

0800bc70 <_close_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_close_r+0x1c>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f6 fd75 	bl	800276a <_close>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_close_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_close_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	200059c4 	.word	0x200059c4

0800bc90 <quorem>:
 800bc90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	6903      	ldr	r3, [r0, #16]
 800bc96:	690c      	ldr	r4, [r1, #16]
 800bc98:	42a3      	cmp	r3, r4
 800bc9a:	4607      	mov	r7, r0
 800bc9c:	f2c0 8081 	blt.w	800bda2 <quorem+0x112>
 800bca0:	3c01      	subs	r4, #1
 800bca2:	f101 0814 	add.w	r8, r1, #20
 800bca6:	f100 0514 	add.w	r5, r0, #20
 800bcaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcae:	9301      	str	r3, [sp, #4]
 800bcb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bcc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800bcc8:	d331      	bcc.n	800bd2e <quorem+0x9e>
 800bcca:	f04f 0e00 	mov.w	lr, #0
 800bcce:	4640      	mov	r0, r8
 800bcd0:	46ac      	mov	ip, r5
 800bcd2:	46f2      	mov	sl, lr
 800bcd4:	f850 2b04 	ldr.w	r2, [r0], #4
 800bcd8:	b293      	uxth	r3, r2
 800bcda:	fb06 e303 	mla	r3, r6, r3, lr
 800bcde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	ebaa 0303 	sub.w	r3, sl, r3
 800bce8:	0c12      	lsrs	r2, r2, #16
 800bcea:	f8dc a000 	ldr.w	sl, [ip]
 800bcee:	fb06 e202 	mla	r2, r6, r2, lr
 800bcf2:	fa13 f38a 	uxtah	r3, r3, sl
 800bcf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bcfa:	fa1f fa82 	uxth.w	sl, r2
 800bcfe:	f8dc 2000 	ldr.w	r2, [ip]
 800bd02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bd06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd10:	4581      	cmp	r9, r0
 800bd12:	f84c 3b04 	str.w	r3, [ip], #4
 800bd16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd1a:	d2db      	bcs.n	800bcd4 <quorem+0x44>
 800bd1c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd20:	b92b      	cbnz	r3, 800bd2e <quorem+0x9e>
 800bd22:	9b01      	ldr	r3, [sp, #4]
 800bd24:	3b04      	subs	r3, #4
 800bd26:	429d      	cmp	r5, r3
 800bd28:	461a      	mov	r2, r3
 800bd2a:	d32e      	bcc.n	800bd8a <quorem+0xfa>
 800bd2c:	613c      	str	r4, [r7, #16]
 800bd2e:	4638      	mov	r0, r7
 800bd30:	f001 fc8e 	bl	800d650 <__mcmp>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	db24      	blt.n	800bd82 <quorem+0xf2>
 800bd38:	3601      	adds	r6, #1
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f04f 0c00 	mov.w	ip, #0
 800bd40:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd44:	f8d0 e000 	ldr.w	lr, [r0]
 800bd48:	b293      	uxth	r3, r2
 800bd4a:	ebac 0303 	sub.w	r3, ip, r3
 800bd4e:	0c12      	lsrs	r2, r2, #16
 800bd50:	fa13 f38e 	uxtah	r3, r3, lr
 800bd54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd62:	45c1      	cmp	r9, r8
 800bd64:	f840 3b04 	str.w	r3, [r0], #4
 800bd68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd6c:	d2e8      	bcs.n	800bd40 <quorem+0xb0>
 800bd6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd76:	b922      	cbnz	r2, 800bd82 <quorem+0xf2>
 800bd78:	3b04      	subs	r3, #4
 800bd7a:	429d      	cmp	r5, r3
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	d30a      	bcc.n	800bd96 <quorem+0x106>
 800bd80:	613c      	str	r4, [r7, #16]
 800bd82:	4630      	mov	r0, r6
 800bd84:	b003      	add	sp, #12
 800bd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8a:	6812      	ldr	r2, [r2, #0]
 800bd8c:	3b04      	subs	r3, #4
 800bd8e:	2a00      	cmp	r2, #0
 800bd90:	d1cc      	bne.n	800bd2c <quorem+0x9c>
 800bd92:	3c01      	subs	r4, #1
 800bd94:	e7c7      	b.n	800bd26 <quorem+0x96>
 800bd96:	6812      	ldr	r2, [r2, #0]
 800bd98:	3b04      	subs	r3, #4
 800bd9a:	2a00      	cmp	r2, #0
 800bd9c:	d1f0      	bne.n	800bd80 <quorem+0xf0>
 800bd9e:	3c01      	subs	r4, #1
 800bda0:	e7eb      	b.n	800bd7a <quorem+0xea>
 800bda2:	2000      	movs	r0, #0
 800bda4:	e7ee      	b.n	800bd84 <quorem+0xf4>
	...

0800bda8 <_dtoa_r>:
 800bda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdac:	ed2d 8b02 	vpush	{d8}
 800bdb0:	ec57 6b10 	vmov	r6, r7, d0
 800bdb4:	b095      	sub	sp, #84	; 0x54
 800bdb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bdb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bdbc:	9105      	str	r1, [sp, #20]
 800bdbe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	9209      	str	r2, [sp, #36]	; 0x24
 800bdc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdc8:	b975      	cbnz	r5, 800bde8 <_dtoa_r+0x40>
 800bdca:	2010      	movs	r0, #16
 800bdcc:	f001 f95e 	bl	800d08c <malloc>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	6260      	str	r0, [r4, #36]	; 0x24
 800bdd4:	b920      	cbnz	r0, 800bde0 <_dtoa_r+0x38>
 800bdd6:	4bb2      	ldr	r3, [pc, #712]	; (800c0a0 <_dtoa_r+0x2f8>)
 800bdd8:	21ea      	movs	r1, #234	; 0xea
 800bdda:	48b2      	ldr	r0, [pc, #712]	; (800c0a4 <_dtoa_r+0x2fc>)
 800bddc:	f002 fc88 	bl	800e6f0 <__assert_func>
 800bde0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bde4:	6005      	str	r5, [r0, #0]
 800bde6:	60c5      	str	r5, [r0, #12]
 800bde8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdea:	6819      	ldr	r1, [r3, #0]
 800bdec:	b151      	cbz	r1, 800be04 <_dtoa_r+0x5c>
 800bdee:	685a      	ldr	r2, [r3, #4]
 800bdf0:	604a      	str	r2, [r1, #4]
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	4093      	lsls	r3, r2
 800bdf6:	608b      	str	r3, [r1, #8]
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f001 f9a1 	bl	800d140 <_Bfree>
 800bdfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be00:	2200      	movs	r2, #0
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	1e3b      	subs	r3, r7, #0
 800be06:	bfb9      	ittee	lt
 800be08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800be0c:	9303      	strlt	r3, [sp, #12]
 800be0e:	2300      	movge	r3, #0
 800be10:	f8c8 3000 	strge.w	r3, [r8]
 800be14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800be18:	4ba3      	ldr	r3, [pc, #652]	; (800c0a8 <_dtoa_r+0x300>)
 800be1a:	bfbc      	itt	lt
 800be1c:	2201      	movlt	r2, #1
 800be1e:	f8c8 2000 	strlt.w	r2, [r8]
 800be22:	ea33 0309 	bics.w	r3, r3, r9
 800be26:	d11b      	bne.n	800be60 <_dtoa_r+0xb8>
 800be28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be2a:	f242 730f 	movw	r3, #9999	; 0x270f
 800be2e:	6013      	str	r3, [r2, #0]
 800be30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be34:	4333      	orrs	r3, r6
 800be36:	f000 857a 	beq.w	800c92e <_dtoa_r+0xb86>
 800be3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be3c:	b963      	cbnz	r3, 800be58 <_dtoa_r+0xb0>
 800be3e:	4b9b      	ldr	r3, [pc, #620]	; (800c0ac <_dtoa_r+0x304>)
 800be40:	e024      	b.n	800be8c <_dtoa_r+0xe4>
 800be42:	4b9b      	ldr	r3, [pc, #620]	; (800c0b0 <_dtoa_r+0x308>)
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	3308      	adds	r3, #8
 800be48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	9800      	ldr	r0, [sp, #0]
 800be4e:	b015      	add	sp, #84	; 0x54
 800be50:	ecbd 8b02 	vpop	{d8}
 800be54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be58:	4b94      	ldr	r3, [pc, #592]	; (800c0ac <_dtoa_r+0x304>)
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	3303      	adds	r3, #3
 800be5e:	e7f3      	b.n	800be48 <_dtoa_r+0xa0>
 800be60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be64:	2200      	movs	r2, #0
 800be66:	ec51 0b17 	vmov	r0, r1, d7
 800be6a:	2300      	movs	r3, #0
 800be6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800be70:	f7f4 fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 800be74:	4680      	mov	r8, r0
 800be76:	b158      	cbz	r0, 800be90 <_dtoa_r+0xe8>
 800be78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be7a:	2301      	movs	r3, #1
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 8551 	beq.w	800c928 <_dtoa_r+0xb80>
 800be86:	488b      	ldr	r0, [pc, #556]	; (800c0b4 <_dtoa_r+0x30c>)
 800be88:	6018      	str	r0, [r3, #0]
 800be8a:	1e43      	subs	r3, r0, #1
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	e7dd      	b.n	800be4c <_dtoa_r+0xa4>
 800be90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800be94:	aa12      	add	r2, sp, #72	; 0x48
 800be96:	a913      	add	r1, sp, #76	; 0x4c
 800be98:	4620      	mov	r0, r4
 800be9a:	f001 fcf9 	bl	800d890 <__d2b>
 800be9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bea2:	4683      	mov	fp, r0
 800bea4:	2d00      	cmp	r5, #0
 800bea6:	d07c      	beq.n	800bfa2 <_dtoa_r+0x1fa>
 800bea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beaa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800beae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800beb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800beba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bec2:	4b7d      	ldr	r3, [pc, #500]	; (800c0b8 <_dtoa_r+0x310>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	4630      	mov	r0, r6
 800bec8:	4639      	mov	r1, r7
 800beca:	f7f4 f9e5 	bl	8000298 <__aeabi_dsub>
 800bece:	a36e      	add	r3, pc, #440	; (adr r3, 800c088 <_dtoa_r+0x2e0>)
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	f7f4 fb98 	bl	8000608 <__aeabi_dmul>
 800bed8:	a36d      	add	r3, pc, #436	; (adr r3, 800c090 <_dtoa_r+0x2e8>)
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	f7f4 f9dd 	bl	800029c <__adddf3>
 800bee2:	4606      	mov	r6, r0
 800bee4:	4628      	mov	r0, r5
 800bee6:	460f      	mov	r7, r1
 800bee8:	f7f4 fb24 	bl	8000534 <__aeabi_i2d>
 800beec:	a36a      	add	r3, pc, #424	; (adr r3, 800c098 <_dtoa_r+0x2f0>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	f7f4 fb89 	bl	8000608 <__aeabi_dmul>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 f9cd 	bl	800029c <__adddf3>
 800bf02:	4606      	mov	r6, r0
 800bf04:	460f      	mov	r7, r1
 800bf06:	f7f4 fe2f 	bl	8000b68 <__aeabi_d2iz>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4630      	mov	r0, r6
 800bf12:	4639      	mov	r1, r7
 800bf14:	f7f4 fdea 	bl	8000aec <__aeabi_dcmplt>
 800bf18:	b148      	cbz	r0, 800bf2e <_dtoa_r+0x186>
 800bf1a:	4650      	mov	r0, sl
 800bf1c:	f7f4 fb0a 	bl	8000534 <__aeabi_i2d>
 800bf20:	4632      	mov	r2, r6
 800bf22:	463b      	mov	r3, r7
 800bf24:	f7f4 fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf28:	b908      	cbnz	r0, 800bf2e <_dtoa_r+0x186>
 800bf2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf2e:	f1ba 0f16 	cmp.w	sl, #22
 800bf32:	d854      	bhi.n	800bfde <_dtoa_r+0x236>
 800bf34:	4b61      	ldr	r3, [pc, #388]	; (800c0bc <_dtoa_r+0x314>)
 800bf36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf42:	f7f4 fdd3 	bl	8000aec <__aeabi_dcmplt>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d04b      	beq.n	800bfe2 <_dtoa_r+0x23a>
 800bf4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf4e:	2300      	movs	r3, #0
 800bf50:	930e      	str	r3, [sp, #56]	; 0x38
 800bf52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf54:	1b5d      	subs	r5, r3, r5
 800bf56:	1e6b      	subs	r3, r5, #1
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	bf43      	ittte	mi
 800bf5c:	2300      	movmi	r3, #0
 800bf5e:	f1c5 0801 	rsbmi	r8, r5, #1
 800bf62:	9304      	strmi	r3, [sp, #16]
 800bf64:	f04f 0800 	movpl.w	r8, #0
 800bf68:	f1ba 0f00 	cmp.w	sl, #0
 800bf6c:	db3b      	blt.n	800bfe6 <_dtoa_r+0x23e>
 800bf6e:	9b04      	ldr	r3, [sp, #16]
 800bf70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bf74:	4453      	add	r3, sl
 800bf76:	9304      	str	r3, [sp, #16]
 800bf78:	2300      	movs	r3, #0
 800bf7a:	9306      	str	r3, [sp, #24]
 800bf7c:	9b05      	ldr	r3, [sp, #20]
 800bf7e:	2b09      	cmp	r3, #9
 800bf80:	d869      	bhi.n	800c056 <_dtoa_r+0x2ae>
 800bf82:	2b05      	cmp	r3, #5
 800bf84:	bfc4      	itt	gt
 800bf86:	3b04      	subgt	r3, #4
 800bf88:	9305      	strgt	r3, [sp, #20]
 800bf8a:	9b05      	ldr	r3, [sp, #20]
 800bf8c:	f1a3 0302 	sub.w	r3, r3, #2
 800bf90:	bfcc      	ite	gt
 800bf92:	2500      	movgt	r5, #0
 800bf94:	2501      	movle	r5, #1
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d869      	bhi.n	800c06e <_dtoa_r+0x2c6>
 800bf9a:	e8df f003 	tbb	[pc, r3]
 800bf9e:	4e2c      	.short	0x4e2c
 800bfa0:	5a4c      	.short	0x5a4c
 800bfa2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bfa6:	441d      	add	r5, r3
 800bfa8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	bfc1      	itttt	gt
 800bfb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bfb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bfb8:	fa09 f303 	lslgt.w	r3, r9, r3
 800bfbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bfc0:	bfda      	itte	le
 800bfc2:	f1c3 0320 	rsble	r3, r3, #32
 800bfc6:	fa06 f003 	lslle.w	r0, r6, r3
 800bfca:	4318      	orrgt	r0, r3
 800bfcc:	f7f4 faa2 	bl	8000514 <__aeabi_ui2d>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bfd8:	3d01      	subs	r5, #1
 800bfda:	9310      	str	r3, [sp, #64]	; 0x40
 800bfdc:	e771      	b.n	800bec2 <_dtoa_r+0x11a>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e7b6      	b.n	800bf50 <_dtoa_r+0x1a8>
 800bfe2:	900e      	str	r0, [sp, #56]	; 0x38
 800bfe4:	e7b5      	b.n	800bf52 <_dtoa_r+0x1aa>
 800bfe6:	f1ca 0300 	rsb	r3, sl, #0
 800bfea:	9306      	str	r3, [sp, #24]
 800bfec:	2300      	movs	r3, #0
 800bfee:	eba8 080a 	sub.w	r8, r8, sl
 800bff2:	930d      	str	r3, [sp, #52]	; 0x34
 800bff4:	e7c2      	b.n	800bf7c <_dtoa_r+0x1d4>
 800bff6:	2300      	movs	r3, #0
 800bff8:	9308      	str	r3, [sp, #32]
 800bffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	dc39      	bgt.n	800c074 <_dtoa_r+0x2cc>
 800c000:	f04f 0901 	mov.w	r9, #1
 800c004:	f8cd 9004 	str.w	r9, [sp, #4]
 800c008:	464b      	mov	r3, r9
 800c00a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c00e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c010:	2200      	movs	r2, #0
 800c012:	6042      	str	r2, [r0, #4]
 800c014:	2204      	movs	r2, #4
 800c016:	f102 0614 	add.w	r6, r2, #20
 800c01a:	429e      	cmp	r6, r3
 800c01c:	6841      	ldr	r1, [r0, #4]
 800c01e:	d92f      	bls.n	800c080 <_dtoa_r+0x2d8>
 800c020:	4620      	mov	r0, r4
 800c022:	f001 f84d 	bl	800d0c0 <_Balloc>
 800c026:	9000      	str	r0, [sp, #0]
 800c028:	2800      	cmp	r0, #0
 800c02a:	d14b      	bne.n	800c0c4 <_dtoa_r+0x31c>
 800c02c:	4b24      	ldr	r3, [pc, #144]	; (800c0c0 <_dtoa_r+0x318>)
 800c02e:	4602      	mov	r2, r0
 800c030:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c034:	e6d1      	b.n	800bdda <_dtoa_r+0x32>
 800c036:	2301      	movs	r3, #1
 800c038:	e7de      	b.n	800bff8 <_dtoa_r+0x250>
 800c03a:	2300      	movs	r3, #0
 800c03c:	9308      	str	r3, [sp, #32]
 800c03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c040:	eb0a 0903 	add.w	r9, sl, r3
 800c044:	f109 0301 	add.w	r3, r9, #1
 800c048:	2b01      	cmp	r3, #1
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	bfb8      	it	lt
 800c04e:	2301      	movlt	r3, #1
 800c050:	e7dd      	b.n	800c00e <_dtoa_r+0x266>
 800c052:	2301      	movs	r3, #1
 800c054:	e7f2      	b.n	800c03c <_dtoa_r+0x294>
 800c056:	2501      	movs	r5, #1
 800c058:	2300      	movs	r3, #0
 800c05a:	9305      	str	r3, [sp, #20]
 800c05c:	9508      	str	r5, [sp, #32]
 800c05e:	f04f 39ff 	mov.w	r9, #4294967295
 800c062:	2200      	movs	r2, #0
 800c064:	f8cd 9004 	str.w	r9, [sp, #4]
 800c068:	2312      	movs	r3, #18
 800c06a:	9209      	str	r2, [sp, #36]	; 0x24
 800c06c:	e7cf      	b.n	800c00e <_dtoa_r+0x266>
 800c06e:	2301      	movs	r3, #1
 800c070:	9308      	str	r3, [sp, #32]
 800c072:	e7f4      	b.n	800c05e <_dtoa_r+0x2b6>
 800c074:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c078:	f8cd 9004 	str.w	r9, [sp, #4]
 800c07c:	464b      	mov	r3, r9
 800c07e:	e7c6      	b.n	800c00e <_dtoa_r+0x266>
 800c080:	3101      	adds	r1, #1
 800c082:	6041      	str	r1, [r0, #4]
 800c084:	0052      	lsls	r2, r2, #1
 800c086:	e7c6      	b.n	800c016 <_dtoa_r+0x26e>
 800c088:	636f4361 	.word	0x636f4361
 800c08c:	3fd287a7 	.word	0x3fd287a7
 800c090:	8b60c8b3 	.word	0x8b60c8b3
 800c094:	3fc68a28 	.word	0x3fc68a28
 800c098:	509f79fb 	.word	0x509f79fb
 800c09c:	3fd34413 	.word	0x3fd34413
 800c0a0:	08010a16 	.word	0x08010a16
 800c0a4:	08010a2d 	.word	0x08010a2d
 800c0a8:	7ff00000 	.word	0x7ff00000
 800c0ac:	08010a12 	.word	0x08010a12
 800c0b0:	08010a09 	.word	0x08010a09
 800c0b4:	08010c92 	.word	0x08010c92
 800c0b8:	3ff80000 	.word	0x3ff80000
 800c0bc:	08010ba8 	.word	0x08010ba8
 800c0c0:	08010a8c 	.word	0x08010a8c
 800c0c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0c6:	9a00      	ldr	r2, [sp, #0]
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	9b01      	ldr	r3, [sp, #4]
 800c0cc:	2b0e      	cmp	r3, #14
 800c0ce:	f200 80ad 	bhi.w	800c22c <_dtoa_r+0x484>
 800c0d2:	2d00      	cmp	r5, #0
 800c0d4:	f000 80aa 	beq.w	800c22c <_dtoa_r+0x484>
 800c0d8:	f1ba 0f00 	cmp.w	sl, #0
 800c0dc:	dd36      	ble.n	800c14c <_dtoa_r+0x3a4>
 800c0de:	4ac3      	ldr	r2, [pc, #780]	; (800c3ec <_dtoa_r+0x644>)
 800c0e0:	f00a 030f 	and.w	r3, sl, #15
 800c0e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c0e8:	ed93 7b00 	vldr	d7, [r3]
 800c0ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c0f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c0f4:	eeb0 8a47 	vmov.f32	s16, s14
 800c0f8:	eef0 8a67 	vmov.f32	s17, s15
 800c0fc:	d016      	beq.n	800c12c <_dtoa_r+0x384>
 800c0fe:	4bbc      	ldr	r3, [pc, #752]	; (800c3f0 <_dtoa_r+0x648>)
 800c100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c108:	f7f4 fba8 	bl	800085c <__aeabi_ddiv>
 800c10c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c110:	f007 070f 	and.w	r7, r7, #15
 800c114:	2503      	movs	r5, #3
 800c116:	4eb6      	ldr	r6, [pc, #728]	; (800c3f0 <_dtoa_r+0x648>)
 800c118:	b957      	cbnz	r7, 800c130 <_dtoa_r+0x388>
 800c11a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c11e:	ec53 2b18 	vmov	r2, r3, d8
 800c122:	f7f4 fb9b 	bl	800085c <__aeabi_ddiv>
 800c126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c12a:	e029      	b.n	800c180 <_dtoa_r+0x3d8>
 800c12c:	2502      	movs	r5, #2
 800c12e:	e7f2      	b.n	800c116 <_dtoa_r+0x36e>
 800c130:	07f9      	lsls	r1, r7, #31
 800c132:	d508      	bpl.n	800c146 <_dtoa_r+0x39e>
 800c134:	ec51 0b18 	vmov	r0, r1, d8
 800c138:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c13c:	f7f4 fa64 	bl	8000608 <__aeabi_dmul>
 800c140:	ec41 0b18 	vmov	d8, r0, r1
 800c144:	3501      	adds	r5, #1
 800c146:	107f      	asrs	r7, r7, #1
 800c148:	3608      	adds	r6, #8
 800c14a:	e7e5      	b.n	800c118 <_dtoa_r+0x370>
 800c14c:	f000 80a6 	beq.w	800c29c <_dtoa_r+0x4f4>
 800c150:	f1ca 0600 	rsb	r6, sl, #0
 800c154:	4ba5      	ldr	r3, [pc, #660]	; (800c3ec <_dtoa_r+0x644>)
 800c156:	4fa6      	ldr	r7, [pc, #664]	; (800c3f0 <_dtoa_r+0x648>)
 800c158:	f006 020f 	and.w	r2, r6, #15
 800c15c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c168:	f7f4 fa4e 	bl	8000608 <__aeabi_dmul>
 800c16c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c170:	1136      	asrs	r6, r6, #4
 800c172:	2300      	movs	r3, #0
 800c174:	2502      	movs	r5, #2
 800c176:	2e00      	cmp	r6, #0
 800c178:	f040 8085 	bne.w	800c286 <_dtoa_r+0x4de>
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1d2      	bne.n	800c126 <_dtoa_r+0x37e>
 800c180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c182:	2b00      	cmp	r3, #0
 800c184:	f000 808c 	beq.w	800c2a0 <_dtoa_r+0x4f8>
 800c188:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c18c:	4b99      	ldr	r3, [pc, #612]	; (800c3f4 <_dtoa_r+0x64c>)
 800c18e:	2200      	movs	r2, #0
 800c190:	4630      	mov	r0, r6
 800c192:	4639      	mov	r1, r7
 800c194:	f7f4 fcaa 	bl	8000aec <__aeabi_dcmplt>
 800c198:	2800      	cmp	r0, #0
 800c19a:	f000 8081 	beq.w	800c2a0 <_dtoa_r+0x4f8>
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d07d      	beq.n	800c2a0 <_dtoa_r+0x4f8>
 800c1a4:	f1b9 0f00 	cmp.w	r9, #0
 800c1a8:	dd3c      	ble.n	800c224 <_dtoa_r+0x47c>
 800c1aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c1ae:	9307      	str	r3, [sp, #28]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	4b91      	ldr	r3, [pc, #580]	; (800c3f8 <_dtoa_r+0x650>)
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	f7f4 fa26 	bl	8000608 <__aeabi_dmul>
 800c1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1c0:	3501      	adds	r5, #1
 800c1c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c1c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f7f4 f9b2 	bl	8000534 <__aeabi_i2d>
 800c1d0:	4632      	mov	r2, r6
 800c1d2:	463b      	mov	r3, r7
 800c1d4:	f7f4 fa18 	bl	8000608 <__aeabi_dmul>
 800c1d8:	4b88      	ldr	r3, [pc, #544]	; (800c3fc <_dtoa_r+0x654>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f7f4 f85e 	bl	800029c <__adddf3>
 800c1e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1e8:	9303      	str	r3, [sp, #12]
 800c1ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d15c      	bne.n	800c2aa <_dtoa_r+0x502>
 800c1f0:	4b83      	ldr	r3, [pc, #524]	; (800c400 <_dtoa_r+0x658>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	4639      	mov	r1, r7
 800c1f8:	f7f4 f84e 	bl	8000298 <__aeabi_dsub>
 800c1fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c200:	4606      	mov	r6, r0
 800c202:	460f      	mov	r7, r1
 800c204:	f7f4 fc90 	bl	8000b28 <__aeabi_dcmpgt>
 800c208:	2800      	cmp	r0, #0
 800c20a:	f040 8296 	bne.w	800c73a <_dtoa_r+0x992>
 800c20e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c212:	4630      	mov	r0, r6
 800c214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c218:	4639      	mov	r1, r7
 800c21a:	f7f4 fc67 	bl	8000aec <__aeabi_dcmplt>
 800c21e:	2800      	cmp	r0, #0
 800c220:	f040 8288 	bne.w	800c734 <_dtoa_r+0x98c>
 800c224:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c228:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c22c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f2c0 8158 	blt.w	800c4e4 <_dtoa_r+0x73c>
 800c234:	f1ba 0f0e 	cmp.w	sl, #14
 800c238:	f300 8154 	bgt.w	800c4e4 <_dtoa_r+0x73c>
 800c23c:	4b6b      	ldr	r3, [pc, #428]	; (800c3ec <_dtoa_r+0x644>)
 800c23e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c242:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f280 80e3 	bge.w	800c414 <_dtoa_r+0x66c>
 800c24e:	9b01      	ldr	r3, [sp, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	f300 80df 	bgt.w	800c414 <_dtoa_r+0x66c>
 800c256:	f040 826d 	bne.w	800c734 <_dtoa_r+0x98c>
 800c25a:	4b69      	ldr	r3, [pc, #420]	; (800c400 <_dtoa_r+0x658>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	4640      	mov	r0, r8
 800c260:	4649      	mov	r1, r9
 800c262:	f7f4 f9d1 	bl	8000608 <__aeabi_dmul>
 800c266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c26a:	f7f4 fc53 	bl	8000b14 <__aeabi_dcmpge>
 800c26e:	9e01      	ldr	r6, [sp, #4]
 800c270:	4637      	mov	r7, r6
 800c272:	2800      	cmp	r0, #0
 800c274:	f040 8243 	bne.w	800c6fe <_dtoa_r+0x956>
 800c278:	9d00      	ldr	r5, [sp, #0]
 800c27a:	2331      	movs	r3, #49	; 0x31
 800c27c:	f805 3b01 	strb.w	r3, [r5], #1
 800c280:	f10a 0a01 	add.w	sl, sl, #1
 800c284:	e23f      	b.n	800c706 <_dtoa_r+0x95e>
 800c286:	07f2      	lsls	r2, r6, #31
 800c288:	d505      	bpl.n	800c296 <_dtoa_r+0x4ee>
 800c28a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c28e:	f7f4 f9bb 	bl	8000608 <__aeabi_dmul>
 800c292:	3501      	adds	r5, #1
 800c294:	2301      	movs	r3, #1
 800c296:	1076      	asrs	r6, r6, #1
 800c298:	3708      	adds	r7, #8
 800c29a:	e76c      	b.n	800c176 <_dtoa_r+0x3ce>
 800c29c:	2502      	movs	r5, #2
 800c29e:	e76f      	b.n	800c180 <_dtoa_r+0x3d8>
 800c2a0:	9b01      	ldr	r3, [sp, #4]
 800c2a2:	f8cd a01c 	str.w	sl, [sp, #28]
 800c2a6:	930c      	str	r3, [sp, #48]	; 0x30
 800c2a8:	e78d      	b.n	800c1c6 <_dtoa_r+0x41e>
 800c2aa:	9900      	ldr	r1, [sp, #0]
 800c2ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c2ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2b0:	4b4e      	ldr	r3, [pc, #312]	; (800c3ec <_dtoa_r+0x644>)
 800c2b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2b6:	4401      	add	r1, r0
 800c2b8:	9102      	str	r1, [sp, #8]
 800c2ba:	9908      	ldr	r1, [sp, #32]
 800c2bc:	eeb0 8a47 	vmov.f32	s16, s14
 800c2c0:	eef0 8a67 	vmov.f32	s17, s15
 800c2c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2cc:	2900      	cmp	r1, #0
 800c2ce:	d045      	beq.n	800c35c <_dtoa_r+0x5b4>
 800c2d0:	494c      	ldr	r1, [pc, #304]	; (800c404 <_dtoa_r+0x65c>)
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	f7f4 fac2 	bl	800085c <__aeabi_ddiv>
 800c2d8:	ec53 2b18 	vmov	r2, r3, d8
 800c2dc:	f7f3 ffdc 	bl	8000298 <__aeabi_dsub>
 800c2e0:	9d00      	ldr	r5, [sp, #0]
 800c2e2:	ec41 0b18 	vmov	d8, r0, r1
 800c2e6:	4639      	mov	r1, r7
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	f7f4 fc3d 	bl	8000b68 <__aeabi_d2iz>
 800c2ee:	900c      	str	r0, [sp, #48]	; 0x30
 800c2f0:	f7f4 f920 	bl	8000534 <__aeabi_i2d>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	f7f3 ffcc 	bl	8000298 <__aeabi_dsub>
 800c300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c302:	3330      	adds	r3, #48	; 0x30
 800c304:	f805 3b01 	strb.w	r3, [r5], #1
 800c308:	ec53 2b18 	vmov	r2, r3, d8
 800c30c:	4606      	mov	r6, r0
 800c30e:	460f      	mov	r7, r1
 800c310:	f7f4 fbec 	bl	8000aec <__aeabi_dcmplt>
 800c314:	2800      	cmp	r0, #0
 800c316:	d165      	bne.n	800c3e4 <_dtoa_r+0x63c>
 800c318:	4632      	mov	r2, r6
 800c31a:	463b      	mov	r3, r7
 800c31c:	4935      	ldr	r1, [pc, #212]	; (800c3f4 <_dtoa_r+0x64c>)
 800c31e:	2000      	movs	r0, #0
 800c320:	f7f3 ffba 	bl	8000298 <__aeabi_dsub>
 800c324:	ec53 2b18 	vmov	r2, r3, d8
 800c328:	f7f4 fbe0 	bl	8000aec <__aeabi_dcmplt>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	f040 80b9 	bne.w	800c4a4 <_dtoa_r+0x6fc>
 800c332:	9b02      	ldr	r3, [sp, #8]
 800c334:	429d      	cmp	r5, r3
 800c336:	f43f af75 	beq.w	800c224 <_dtoa_r+0x47c>
 800c33a:	4b2f      	ldr	r3, [pc, #188]	; (800c3f8 <_dtoa_r+0x650>)
 800c33c:	ec51 0b18 	vmov	r0, r1, d8
 800c340:	2200      	movs	r2, #0
 800c342:	f7f4 f961 	bl	8000608 <__aeabi_dmul>
 800c346:	4b2c      	ldr	r3, [pc, #176]	; (800c3f8 <_dtoa_r+0x650>)
 800c348:	ec41 0b18 	vmov	d8, r0, r1
 800c34c:	2200      	movs	r2, #0
 800c34e:	4630      	mov	r0, r6
 800c350:	4639      	mov	r1, r7
 800c352:	f7f4 f959 	bl	8000608 <__aeabi_dmul>
 800c356:	4606      	mov	r6, r0
 800c358:	460f      	mov	r7, r1
 800c35a:	e7c4      	b.n	800c2e6 <_dtoa_r+0x53e>
 800c35c:	ec51 0b17 	vmov	r0, r1, d7
 800c360:	f7f4 f952 	bl	8000608 <__aeabi_dmul>
 800c364:	9b02      	ldr	r3, [sp, #8]
 800c366:	9d00      	ldr	r5, [sp, #0]
 800c368:	930c      	str	r3, [sp, #48]	; 0x30
 800c36a:	ec41 0b18 	vmov	d8, r0, r1
 800c36e:	4639      	mov	r1, r7
 800c370:	4630      	mov	r0, r6
 800c372:	f7f4 fbf9 	bl	8000b68 <__aeabi_d2iz>
 800c376:	9011      	str	r0, [sp, #68]	; 0x44
 800c378:	f7f4 f8dc 	bl	8000534 <__aeabi_i2d>
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4630      	mov	r0, r6
 800c382:	4639      	mov	r1, r7
 800c384:	f7f3 ff88 	bl	8000298 <__aeabi_dsub>
 800c388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c38a:	3330      	adds	r3, #48	; 0x30
 800c38c:	f805 3b01 	strb.w	r3, [r5], #1
 800c390:	9b02      	ldr	r3, [sp, #8]
 800c392:	429d      	cmp	r5, r3
 800c394:	4606      	mov	r6, r0
 800c396:	460f      	mov	r7, r1
 800c398:	f04f 0200 	mov.w	r2, #0
 800c39c:	d134      	bne.n	800c408 <_dtoa_r+0x660>
 800c39e:	4b19      	ldr	r3, [pc, #100]	; (800c404 <_dtoa_r+0x65c>)
 800c3a0:	ec51 0b18 	vmov	r0, r1, d8
 800c3a4:	f7f3 ff7a 	bl	800029c <__adddf3>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	4639      	mov	r1, r7
 800c3b0:	f7f4 fbba 	bl	8000b28 <__aeabi_dcmpgt>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d175      	bne.n	800c4a4 <_dtoa_r+0x6fc>
 800c3b8:	ec53 2b18 	vmov	r2, r3, d8
 800c3bc:	4911      	ldr	r1, [pc, #68]	; (800c404 <_dtoa_r+0x65c>)
 800c3be:	2000      	movs	r0, #0
 800c3c0:	f7f3 ff6a 	bl	8000298 <__aeabi_dsub>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	f7f4 fb8e 	bl	8000aec <__aeabi_dcmplt>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	f43f af27 	beq.w	800c224 <_dtoa_r+0x47c>
 800c3d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3d8:	1e6b      	subs	r3, r5, #1
 800c3da:	930c      	str	r3, [sp, #48]	; 0x30
 800c3dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3e0:	2b30      	cmp	r3, #48	; 0x30
 800c3e2:	d0f8      	beq.n	800c3d6 <_dtoa_r+0x62e>
 800c3e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c3e8:	e04a      	b.n	800c480 <_dtoa_r+0x6d8>
 800c3ea:	bf00      	nop
 800c3ec:	08010ba8 	.word	0x08010ba8
 800c3f0:	08010b80 	.word	0x08010b80
 800c3f4:	3ff00000 	.word	0x3ff00000
 800c3f8:	40240000 	.word	0x40240000
 800c3fc:	401c0000 	.word	0x401c0000
 800c400:	40140000 	.word	0x40140000
 800c404:	3fe00000 	.word	0x3fe00000
 800c408:	4baf      	ldr	r3, [pc, #700]	; (800c6c8 <_dtoa_r+0x920>)
 800c40a:	f7f4 f8fd 	bl	8000608 <__aeabi_dmul>
 800c40e:	4606      	mov	r6, r0
 800c410:	460f      	mov	r7, r1
 800c412:	e7ac      	b.n	800c36e <_dtoa_r+0x5c6>
 800c414:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c418:	9d00      	ldr	r5, [sp, #0]
 800c41a:	4642      	mov	r2, r8
 800c41c:	464b      	mov	r3, r9
 800c41e:	4630      	mov	r0, r6
 800c420:	4639      	mov	r1, r7
 800c422:	f7f4 fa1b 	bl	800085c <__aeabi_ddiv>
 800c426:	f7f4 fb9f 	bl	8000b68 <__aeabi_d2iz>
 800c42a:	9002      	str	r0, [sp, #8]
 800c42c:	f7f4 f882 	bl	8000534 <__aeabi_i2d>
 800c430:	4642      	mov	r2, r8
 800c432:	464b      	mov	r3, r9
 800c434:	f7f4 f8e8 	bl	8000608 <__aeabi_dmul>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4630      	mov	r0, r6
 800c43e:	4639      	mov	r1, r7
 800c440:	f7f3 ff2a 	bl	8000298 <__aeabi_dsub>
 800c444:	9e02      	ldr	r6, [sp, #8]
 800c446:	9f01      	ldr	r7, [sp, #4]
 800c448:	3630      	adds	r6, #48	; 0x30
 800c44a:	f805 6b01 	strb.w	r6, [r5], #1
 800c44e:	9e00      	ldr	r6, [sp, #0]
 800c450:	1bae      	subs	r6, r5, r6
 800c452:	42b7      	cmp	r7, r6
 800c454:	4602      	mov	r2, r0
 800c456:	460b      	mov	r3, r1
 800c458:	d137      	bne.n	800c4ca <_dtoa_r+0x722>
 800c45a:	f7f3 ff1f 	bl	800029c <__adddf3>
 800c45e:	4642      	mov	r2, r8
 800c460:	464b      	mov	r3, r9
 800c462:	4606      	mov	r6, r0
 800c464:	460f      	mov	r7, r1
 800c466:	f7f4 fb5f 	bl	8000b28 <__aeabi_dcmpgt>
 800c46a:	b9c8      	cbnz	r0, 800c4a0 <_dtoa_r+0x6f8>
 800c46c:	4642      	mov	r2, r8
 800c46e:	464b      	mov	r3, r9
 800c470:	4630      	mov	r0, r6
 800c472:	4639      	mov	r1, r7
 800c474:	f7f4 fb30 	bl	8000ad8 <__aeabi_dcmpeq>
 800c478:	b110      	cbz	r0, 800c480 <_dtoa_r+0x6d8>
 800c47a:	9b02      	ldr	r3, [sp, #8]
 800c47c:	07d9      	lsls	r1, r3, #31
 800c47e:	d40f      	bmi.n	800c4a0 <_dtoa_r+0x6f8>
 800c480:	4620      	mov	r0, r4
 800c482:	4659      	mov	r1, fp
 800c484:	f000 fe5c 	bl	800d140 <_Bfree>
 800c488:	2300      	movs	r3, #0
 800c48a:	702b      	strb	r3, [r5, #0]
 800c48c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c48e:	f10a 0001 	add.w	r0, sl, #1
 800c492:	6018      	str	r0, [r3, #0]
 800c494:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c496:	2b00      	cmp	r3, #0
 800c498:	f43f acd8 	beq.w	800be4c <_dtoa_r+0xa4>
 800c49c:	601d      	str	r5, [r3, #0]
 800c49e:	e4d5      	b.n	800be4c <_dtoa_r+0xa4>
 800c4a0:	f8cd a01c 	str.w	sl, [sp, #28]
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	461d      	mov	r5, r3
 800c4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4ac:	2a39      	cmp	r2, #57	; 0x39
 800c4ae:	d108      	bne.n	800c4c2 <_dtoa_r+0x71a>
 800c4b0:	9a00      	ldr	r2, [sp, #0]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d1f7      	bne.n	800c4a6 <_dtoa_r+0x6fe>
 800c4b6:	9a07      	ldr	r2, [sp, #28]
 800c4b8:	9900      	ldr	r1, [sp, #0]
 800c4ba:	3201      	adds	r2, #1
 800c4bc:	9207      	str	r2, [sp, #28]
 800c4be:	2230      	movs	r2, #48	; 0x30
 800c4c0:	700a      	strb	r2, [r1, #0]
 800c4c2:	781a      	ldrb	r2, [r3, #0]
 800c4c4:	3201      	adds	r2, #1
 800c4c6:	701a      	strb	r2, [r3, #0]
 800c4c8:	e78c      	b.n	800c3e4 <_dtoa_r+0x63c>
 800c4ca:	4b7f      	ldr	r3, [pc, #508]	; (800c6c8 <_dtoa_r+0x920>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f7f4 f89b 	bl	8000608 <__aeabi_dmul>
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	460f      	mov	r7, r1
 800c4da:	f7f4 fafd 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d09b      	beq.n	800c41a <_dtoa_r+0x672>
 800c4e2:	e7cd      	b.n	800c480 <_dtoa_r+0x6d8>
 800c4e4:	9a08      	ldr	r2, [sp, #32]
 800c4e6:	2a00      	cmp	r2, #0
 800c4e8:	f000 80c4 	beq.w	800c674 <_dtoa_r+0x8cc>
 800c4ec:	9a05      	ldr	r2, [sp, #20]
 800c4ee:	2a01      	cmp	r2, #1
 800c4f0:	f300 80a8 	bgt.w	800c644 <_dtoa_r+0x89c>
 800c4f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4f6:	2a00      	cmp	r2, #0
 800c4f8:	f000 80a0 	beq.w	800c63c <_dtoa_r+0x894>
 800c4fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c500:	9e06      	ldr	r6, [sp, #24]
 800c502:	4645      	mov	r5, r8
 800c504:	9a04      	ldr	r2, [sp, #16]
 800c506:	2101      	movs	r1, #1
 800c508:	441a      	add	r2, r3
 800c50a:	4620      	mov	r0, r4
 800c50c:	4498      	add	r8, r3
 800c50e:	9204      	str	r2, [sp, #16]
 800c510:	f000 ff1c 	bl	800d34c <__i2b>
 800c514:	4607      	mov	r7, r0
 800c516:	2d00      	cmp	r5, #0
 800c518:	dd0b      	ble.n	800c532 <_dtoa_r+0x78a>
 800c51a:	9b04      	ldr	r3, [sp, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	dd08      	ble.n	800c532 <_dtoa_r+0x78a>
 800c520:	42ab      	cmp	r3, r5
 800c522:	9a04      	ldr	r2, [sp, #16]
 800c524:	bfa8      	it	ge
 800c526:	462b      	movge	r3, r5
 800c528:	eba8 0803 	sub.w	r8, r8, r3
 800c52c:	1aed      	subs	r5, r5, r3
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	9b06      	ldr	r3, [sp, #24]
 800c534:	b1fb      	cbz	r3, 800c576 <_dtoa_r+0x7ce>
 800c536:	9b08      	ldr	r3, [sp, #32]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f000 809f 	beq.w	800c67c <_dtoa_r+0x8d4>
 800c53e:	2e00      	cmp	r6, #0
 800c540:	dd11      	ble.n	800c566 <_dtoa_r+0x7be>
 800c542:	4639      	mov	r1, r7
 800c544:	4632      	mov	r2, r6
 800c546:	4620      	mov	r0, r4
 800c548:	f000 ffbc 	bl	800d4c4 <__pow5mult>
 800c54c:	465a      	mov	r2, fp
 800c54e:	4601      	mov	r1, r0
 800c550:	4607      	mov	r7, r0
 800c552:	4620      	mov	r0, r4
 800c554:	f000 ff10 	bl	800d378 <__multiply>
 800c558:	4659      	mov	r1, fp
 800c55a:	9007      	str	r0, [sp, #28]
 800c55c:	4620      	mov	r0, r4
 800c55e:	f000 fdef 	bl	800d140 <_Bfree>
 800c562:	9b07      	ldr	r3, [sp, #28]
 800c564:	469b      	mov	fp, r3
 800c566:	9b06      	ldr	r3, [sp, #24]
 800c568:	1b9a      	subs	r2, r3, r6
 800c56a:	d004      	beq.n	800c576 <_dtoa_r+0x7ce>
 800c56c:	4659      	mov	r1, fp
 800c56e:	4620      	mov	r0, r4
 800c570:	f000 ffa8 	bl	800d4c4 <__pow5mult>
 800c574:	4683      	mov	fp, r0
 800c576:	2101      	movs	r1, #1
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 fee7 	bl	800d34c <__i2b>
 800c57e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c580:	2b00      	cmp	r3, #0
 800c582:	4606      	mov	r6, r0
 800c584:	dd7c      	ble.n	800c680 <_dtoa_r+0x8d8>
 800c586:	461a      	mov	r2, r3
 800c588:	4601      	mov	r1, r0
 800c58a:	4620      	mov	r0, r4
 800c58c:	f000 ff9a 	bl	800d4c4 <__pow5mult>
 800c590:	9b05      	ldr	r3, [sp, #20]
 800c592:	2b01      	cmp	r3, #1
 800c594:	4606      	mov	r6, r0
 800c596:	dd76      	ble.n	800c686 <_dtoa_r+0x8de>
 800c598:	2300      	movs	r3, #0
 800c59a:	9306      	str	r3, [sp, #24]
 800c59c:	6933      	ldr	r3, [r6, #16]
 800c59e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c5a2:	6918      	ldr	r0, [r3, #16]
 800c5a4:	f000 fe82 	bl	800d2ac <__hi0bits>
 800c5a8:	f1c0 0020 	rsb	r0, r0, #32
 800c5ac:	9b04      	ldr	r3, [sp, #16]
 800c5ae:	4418      	add	r0, r3
 800c5b0:	f010 001f 	ands.w	r0, r0, #31
 800c5b4:	f000 8086 	beq.w	800c6c4 <_dtoa_r+0x91c>
 800c5b8:	f1c0 0320 	rsb	r3, r0, #32
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	dd7f      	ble.n	800c6c0 <_dtoa_r+0x918>
 800c5c0:	f1c0 001c 	rsb	r0, r0, #28
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	4403      	add	r3, r0
 800c5c8:	4480      	add	r8, r0
 800c5ca:	4405      	add	r5, r0
 800c5cc:	9304      	str	r3, [sp, #16]
 800c5ce:	f1b8 0f00 	cmp.w	r8, #0
 800c5d2:	dd05      	ble.n	800c5e0 <_dtoa_r+0x838>
 800c5d4:	4659      	mov	r1, fp
 800c5d6:	4642      	mov	r2, r8
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f000 ffcd 	bl	800d578 <__lshift>
 800c5de:	4683      	mov	fp, r0
 800c5e0:	9b04      	ldr	r3, [sp, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	dd05      	ble.n	800c5f2 <_dtoa_r+0x84a>
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f000 ffc4 	bl	800d578 <__lshift>
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d069      	beq.n	800c6cc <_dtoa_r+0x924>
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4658      	mov	r0, fp
 800c5fc:	f001 f828 	bl	800d650 <__mcmp>
 800c600:	2800      	cmp	r0, #0
 800c602:	da63      	bge.n	800c6cc <_dtoa_r+0x924>
 800c604:	2300      	movs	r3, #0
 800c606:	4659      	mov	r1, fp
 800c608:	220a      	movs	r2, #10
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 fdba 	bl	800d184 <__multadd>
 800c610:	9b08      	ldr	r3, [sp, #32]
 800c612:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c616:	4683      	mov	fp, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 818f 	beq.w	800c93c <_dtoa_r+0xb94>
 800c61e:	4639      	mov	r1, r7
 800c620:	2300      	movs	r3, #0
 800c622:	220a      	movs	r2, #10
 800c624:	4620      	mov	r0, r4
 800c626:	f000 fdad 	bl	800d184 <__multadd>
 800c62a:	f1b9 0f00 	cmp.w	r9, #0
 800c62e:	4607      	mov	r7, r0
 800c630:	f300 808e 	bgt.w	800c750 <_dtoa_r+0x9a8>
 800c634:	9b05      	ldr	r3, [sp, #20]
 800c636:	2b02      	cmp	r3, #2
 800c638:	dc50      	bgt.n	800c6dc <_dtoa_r+0x934>
 800c63a:	e089      	b.n	800c750 <_dtoa_r+0x9a8>
 800c63c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c63e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c642:	e75d      	b.n	800c500 <_dtoa_r+0x758>
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	1e5e      	subs	r6, r3, #1
 800c648:	9b06      	ldr	r3, [sp, #24]
 800c64a:	42b3      	cmp	r3, r6
 800c64c:	bfbf      	itttt	lt
 800c64e:	9b06      	ldrlt	r3, [sp, #24]
 800c650:	9606      	strlt	r6, [sp, #24]
 800c652:	1af2      	sublt	r2, r6, r3
 800c654:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c656:	bfb6      	itet	lt
 800c658:	189b      	addlt	r3, r3, r2
 800c65a:	1b9e      	subge	r6, r3, r6
 800c65c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c65e:	9b01      	ldr	r3, [sp, #4]
 800c660:	bfb8      	it	lt
 800c662:	2600      	movlt	r6, #0
 800c664:	2b00      	cmp	r3, #0
 800c666:	bfb5      	itete	lt
 800c668:	eba8 0503 	sublt.w	r5, r8, r3
 800c66c:	9b01      	ldrge	r3, [sp, #4]
 800c66e:	2300      	movlt	r3, #0
 800c670:	4645      	movge	r5, r8
 800c672:	e747      	b.n	800c504 <_dtoa_r+0x75c>
 800c674:	9e06      	ldr	r6, [sp, #24]
 800c676:	9f08      	ldr	r7, [sp, #32]
 800c678:	4645      	mov	r5, r8
 800c67a:	e74c      	b.n	800c516 <_dtoa_r+0x76e>
 800c67c:	9a06      	ldr	r2, [sp, #24]
 800c67e:	e775      	b.n	800c56c <_dtoa_r+0x7c4>
 800c680:	9b05      	ldr	r3, [sp, #20]
 800c682:	2b01      	cmp	r3, #1
 800c684:	dc18      	bgt.n	800c6b8 <_dtoa_r+0x910>
 800c686:	9b02      	ldr	r3, [sp, #8]
 800c688:	b9b3      	cbnz	r3, 800c6b8 <_dtoa_r+0x910>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c690:	b9a3      	cbnz	r3, 800c6bc <_dtoa_r+0x914>
 800c692:	9b03      	ldr	r3, [sp, #12]
 800c694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c698:	0d1b      	lsrs	r3, r3, #20
 800c69a:	051b      	lsls	r3, r3, #20
 800c69c:	b12b      	cbz	r3, 800c6aa <_dtoa_r+0x902>
 800c69e:	9b04      	ldr	r3, [sp, #16]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	9304      	str	r3, [sp, #16]
 800c6a4:	f108 0801 	add.w	r8, r8, #1
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	9306      	str	r3, [sp, #24]
 800c6ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f47f af74 	bne.w	800c59c <_dtoa_r+0x7f4>
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	e779      	b.n	800c5ac <_dtoa_r+0x804>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	e7f6      	b.n	800c6aa <_dtoa_r+0x902>
 800c6bc:	9b02      	ldr	r3, [sp, #8]
 800c6be:	e7f4      	b.n	800c6aa <_dtoa_r+0x902>
 800c6c0:	d085      	beq.n	800c5ce <_dtoa_r+0x826>
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	301c      	adds	r0, #28
 800c6c6:	e77d      	b.n	800c5c4 <_dtoa_r+0x81c>
 800c6c8:	40240000 	.word	0x40240000
 800c6cc:	9b01      	ldr	r3, [sp, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	dc38      	bgt.n	800c744 <_dtoa_r+0x99c>
 800c6d2:	9b05      	ldr	r3, [sp, #20]
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	dd35      	ble.n	800c744 <_dtoa_r+0x99c>
 800c6d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c6dc:	f1b9 0f00 	cmp.w	r9, #0
 800c6e0:	d10d      	bne.n	800c6fe <_dtoa_r+0x956>
 800c6e2:	4631      	mov	r1, r6
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	2205      	movs	r2, #5
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 fd4b 	bl	800d184 <__multadd>
 800c6ee:	4601      	mov	r1, r0
 800c6f0:	4606      	mov	r6, r0
 800c6f2:	4658      	mov	r0, fp
 800c6f4:	f000 ffac 	bl	800d650 <__mcmp>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f73f adbd 	bgt.w	800c278 <_dtoa_r+0x4d0>
 800c6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c700:	9d00      	ldr	r5, [sp, #0]
 800c702:	ea6f 0a03 	mvn.w	sl, r3
 800c706:	f04f 0800 	mov.w	r8, #0
 800c70a:	4631      	mov	r1, r6
 800c70c:	4620      	mov	r0, r4
 800c70e:	f000 fd17 	bl	800d140 <_Bfree>
 800c712:	2f00      	cmp	r7, #0
 800c714:	f43f aeb4 	beq.w	800c480 <_dtoa_r+0x6d8>
 800c718:	f1b8 0f00 	cmp.w	r8, #0
 800c71c:	d005      	beq.n	800c72a <_dtoa_r+0x982>
 800c71e:	45b8      	cmp	r8, r7
 800c720:	d003      	beq.n	800c72a <_dtoa_r+0x982>
 800c722:	4641      	mov	r1, r8
 800c724:	4620      	mov	r0, r4
 800c726:	f000 fd0b 	bl	800d140 <_Bfree>
 800c72a:	4639      	mov	r1, r7
 800c72c:	4620      	mov	r0, r4
 800c72e:	f000 fd07 	bl	800d140 <_Bfree>
 800c732:	e6a5      	b.n	800c480 <_dtoa_r+0x6d8>
 800c734:	2600      	movs	r6, #0
 800c736:	4637      	mov	r7, r6
 800c738:	e7e1      	b.n	800c6fe <_dtoa_r+0x956>
 800c73a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c73c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c740:	4637      	mov	r7, r6
 800c742:	e599      	b.n	800c278 <_dtoa_r+0x4d0>
 800c744:	9b08      	ldr	r3, [sp, #32]
 800c746:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 80fd 	beq.w	800c94a <_dtoa_r+0xba2>
 800c750:	2d00      	cmp	r5, #0
 800c752:	dd05      	ble.n	800c760 <_dtoa_r+0x9b8>
 800c754:	4639      	mov	r1, r7
 800c756:	462a      	mov	r2, r5
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 ff0d 	bl	800d578 <__lshift>
 800c75e:	4607      	mov	r7, r0
 800c760:	9b06      	ldr	r3, [sp, #24]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d05c      	beq.n	800c820 <_dtoa_r+0xa78>
 800c766:	6879      	ldr	r1, [r7, #4]
 800c768:	4620      	mov	r0, r4
 800c76a:	f000 fca9 	bl	800d0c0 <_Balloc>
 800c76e:	4605      	mov	r5, r0
 800c770:	b928      	cbnz	r0, 800c77e <_dtoa_r+0x9d6>
 800c772:	4b80      	ldr	r3, [pc, #512]	; (800c974 <_dtoa_r+0xbcc>)
 800c774:	4602      	mov	r2, r0
 800c776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c77a:	f7ff bb2e 	b.w	800bdda <_dtoa_r+0x32>
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	3202      	adds	r2, #2
 800c782:	0092      	lsls	r2, r2, #2
 800c784:	f107 010c 	add.w	r1, r7, #12
 800c788:	300c      	adds	r0, #12
 800c78a:	f7fd fc71 	bl	800a070 <memcpy>
 800c78e:	2201      	movs	r2, #1
 800c790:	4629      	mov	r1, r5
 800c792:	4620      	mov	r0, r4
 800c794:	f000 fef0 	bl	800d578 <__lshift>
 800c798:	9b00      	ldr	r3, [sp, #0]
 800c79a:	3301      	adds	r3, #1
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	9b00      	ldr	r3, [sp, #0]
 800c7a0:	444b      	add	r3, r9
 800c7a2:	9307      	str	r3, [sp, #28]
 800c7a4:	9b02      	ldr	r3, [sp, #8]
 800c7a6:	f003 0301 	and.w	r3, r3, #1
 800c7aa:	46b8      	mov	r8, r7
 800c7ac:	9306      	str	r3, [sp, #24]
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	9b01      	ldr	r3, [sp, #4]
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	4658      	mov	r0, fp
 800c7b8:	9302      	str	r3, [sp, #8]
 800c7ba:	f7ff fa69 	bl	800bc90 <quorem>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	3330      	adds	r3, #48	; 0x30
 800c7c2:	9004      	str	r0, [sp, #16]
 800c7c4:	4641      	mov	r1, r8
 800c7c6:	4658      	mov	r0, fp
 800c7c8:	9308      	str	r3, [sp, #32]
 800c7ca:	f000 ff41 	bl	800d650 <__mcmp>
 800c7ce:	463a      	mov	r2, r7
 800c7d0:	4681      	mov	r9, r0
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f000 ff57 	bl	800d688 <__mdiff>
 800c7da:	68c2      	ldr	r2, [r0, #12]
 800c7dc:	9b08      	ldr	r3, [sp, #32]
 800c7de:	4605      	mov	r5, r0
 800c7e0:	bb02      	cbnz	r2, 800c824 <_dtoa_r+0xa7c>
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	4658      	mov	r0, fp
 800c7e6:	f000 ff33 	bl	800d650 <__mcmp>
 800c7ea:	9b08      	ldr	r3, [sp, #32]
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c7f6:	f000 fca3 	bl	800d140 <_Bfree>
 800c7fa:	9b05      	ldr	r3, [sp, #20]
 800c7fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7fe:	9d01      	ldr	r5, [sp, #4]
 800c800:	ea43 0102 	orr.w	r1, r3, r2
 800c804:	9b06      	ldr	r3, [sp, #24]
 800c806:	430b      	orrs	r3, r1
 800c808:	9b08      	ldr	r3, [sp, #32]
 800c80a:	d10d      	bne.n	800c828 <_dtoa_r+0xa80>
 800c80c:	2b39      	cmp	r3, #57	; 0x39
 800c80e:	d029      	beq.n	800c864 <_dtoa_r+0xabc>
 800c810:	f1b9 0f00 	cmp.w	r9, #0
 800c814:	dd01      	ble.n	800c81a <_dtoa_r+0xa72>
 800c816:	9b04      	ldr	r3, [sp, #16]
 800c818:	3331      	adds	r3, #49	; 0x31
 800c81a:	9a02      	ldr	r2, [sp, #8]
 800c81c:	7013      	strb	r3, [r2, #0]
 800c81e:	e774      	b.n	800c70a <_dtoa_r+0x962>
 800c820:	4638      	mov	r0, r7
 800c822:	e7b9      	b.n	800c798 <_dtoa_r+0x9f0>
 800c824:	2201      	movs	r2, #1
 800c826:	e7e2      	b.n	800c7ee <_dtoa_r+0xa46>
 800c828:	f1b9 0f00 	cmp.w	r9, #0
 800c82c:	db06      	blt.n	800c83c <_dtoa_r+0xa94>
 800c82e:	9905      	ldr	r1, [sp, #20]
 800c830:	ea41 0909 	orr.w	r9, r1, r9
 800c834:	9906      	ldr	r1, [sp, #24]
 800c836:	ea59 0101 	orrs.w	r1, r9, r1
 800c83a:	d120      	bne.n	800c87e <_dtoa_r+0xad6>
 800c83c:	2a00      	cmp	r2, #0
 800c83e:	ddec      	ble.n	800c81a <_dtoa_r+0xa72>
 800c840:	4659      	mov	r1, fp
 800c842:	2201      	movs	r2, #1
 800c844:	4620      	mov	r0, r4
 800c846:	9301      	str	r3, [sp, #4]
 800c848:	f000 fe96 	bl	800d578 <__lshift>
 800c84c:	4631      	mov	r1, r6
 800c84e:	4683      	mov	fp, r0
 800c850:	f000 fefe 	bl	800d650 <__mcmp>
 800c854:	2800      	cmp	r0, #0
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	dc02      	bgt.n	800c860 <_dtoa_r+0xab8>
 800c85a:	d1de      	bne.n	800c81a <_dtoa_r+0xa72>
 800c85c:	07da      	lsls	r2, r3, #31
 800c85e:	d5dc      	bpl.n	800c81a <_dtoa_r+0xa72>
 800c860:	2b39      	cmp	r3, #57	; 0x39
 800c862:	d1d8      	bne.n	800c816 <_dtoa_r+0xa6e>
 800c864:	9a02      	ldr	r2, [sp, #8]
 800c866:	2339      	movs	r3, #57	; 0x39
 800c868:	7013      	strb	r3, [r2, #0]
 800c86a:	462b      	mov	r3, r5
 800c86c:	461d      	mov	r5, r3
 800c86e:	3b01      	subs	r3, #1
 800c870:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c874:	2a39      	cmp	r2, #57	; 0x39
 800c876:	d050      	beq.n	800c91a <_dtoa_r+0xb72>
 800c878:	3201      	adds	r2, #1
 800c87a:	701a      	strb	r2, [r3, #0]
 800c87c:	e745      	b.n	800c70a <_dtoa_r+0x962>
 800c87e:	2a00      	cmp	r2, #0
 800c880:	dd03      	ble.n	800c88a <_dtoa_r+0xae2>
 800c882:	2b39      	cmp	r3, #57	; 0x39
 800c884:	d0ee      	beq.n	800c864 <_dtoa_r+0xabc>
 800c886:	3301      	adds	r3, #1
 800c888:	e7c7      	b.n	800c81a <_dtoa_r+0xa72>
 800c88a:	9a01      	ldr	r2, [sp, #4]
 800c88c:	9907      	ldr	r1, [sp, #28]
 800c88e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c892:	428a      	cmp	r2, r1
 800c894:	d02a      	beq.n	800c8ec <_dtoa_r+0xb44>
 800c896:	4659      	mov	r1, fp
 800c898:	2300      	movs	r3, #0
 800c89a:	220a      	movs	r2, #10
 800c89c:	4620      	mov	r0, r4
 800c89e:	f000 fc71 	bl	800d184 <__multadd>
 800c8a2:	45b8      	cmp	r8, r7
 800c8a4:	4683      	mov	fp, r0
 800c8a6:	f04f 0300 	mov.w	r3, #0
 800c8aa:	f04f 020a 	mov.w	r2, #10
 800c8ae:	4641      	mov	r1, r8
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	d107      	bne.n	800c8c4 <_dtoa_r+0xb1c>
 800c8b4:	f000 fc66 	bl	800d184 <__multadd>
 800c8b8:	4680      	mov	r8, r0
 800c8ba:	4607      	mov	r7, r0
 800c8bc:	9b01      	ldr	r3, [sp, #4]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	e775      	b.n	800c7b0 <_dtoa_r+0xa08>
 800c8c4:	f000 fc5e 	bl	800d184 <__multadd>
 800c8c8:	4639      	mov	r1, r7
 800c8ca:	4680      	mov	r8, r0
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	220a      	movs	r2, #10
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f000 fc57 	bl	800d184 <__multadd>
 800c8d6:	4607      	mov	r7, r0
 800c8d8:	e7f0      	b.n	800c8bc <_dtoa_r+0xb14>
 800c8da:	f1b9 0f00 	cmp.w	r9, #0
 800c8de:	9a00      	ldr	r2, [sp, #0]
 800c8e0:	bfcc      	ite	gt
 800c8e2:	464d      	movgt	r5, r9
 800c8e4:	2501      	movle	r5, #1
 800c8e6:	4415      	add	r5, r2
 800c8e8:	f04f 0800 	mov.w	r8, #0
 800c8ec:	4659      	mov	r1, fp
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	f000 fe40 	bl	800d578 <__lshift>
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4683      	mov	fp, r0
 800c8fc:	f000 fea8 	bl	800d650 <__mcmp>
 800c900:	2800      	cmp	r0, #0
 800c902:	dcb2      	bgt.n	800c86a <_dtoa_r+0xac2>
 800c904:	d102      	bne.n	800c90c <_dtoa_r+0xb64>
 800c906:	9b01      	ldr	r3, [sp, #4]
 800c908:	07db      	lsls	r3, r3, #31
 800c90a:	d4ae      	bmi.n	800c86a <_dtoa_r+0xac2>
 800c90c:	462b      	mov	r3, r5
 800c90e:	461d      	mov	r5, r3
 800c910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c914:	2a30      	cmp	r2, #48	; 0x30
 800c916:	d0fa      	beq.n	800c90e <_dtoa_r+0xb66>
 800c918:	e6f7      	b.n	800c70a <_dtoa_r+0x962>
 800c91a:	9a00      	ldr	r2, [sp, #0]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d1a5      	bne.n	800c86c <_dtoa_r+0xac4>
 800c920:	f10a 0a01 	add.w	sl, sl, #1
 800c924:	2331      	movs	r3, #49	; 0x31
 800c926:	e779      	b.n	800c81c <_dtoa_r+0xa74>
 800c928:	4b13      	ldr	r3, [pc, #76]	; (800c978 <_dtoa_r+0xbd0>)
 800c92a:	f7ff baaf 	b.w	800be8c <_dtoa_r+0xe4>
 800c92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c930:	2b00      	cmp	r3, #0
 800c932:	f47f aa86 	bne.w	800be42 <_dtoa_r+0x9a>
 800c936:	4b11      	ldr	r3, [pc, #68]	; (800c97c <_dtoa_r+0xbd4>)
 800c938:	f7ff baa8 	b.w	800be8c <_dtoa_r+0xe4>
 800c93c:	f1b9 0f00 	cmp.w	r9, #0
 800c940:	dc03      	bgt.n	800c94a <_dtoa_r+0xba2>
 800c942:	9b05      	ldr	r3, [sp, #20]
 800c944:	2b02      	cmp	r3, #2
 800c946:	f73f aec9 	bgt.w	800c6dc <_dtoa_r+0x934>
 800c94a:	9d00      	ldr	r5, [sp, #0]
 800c94c:	4631      	mov	r1, r6
 800c94e:	4658      	mov	r0, fp
 800c950:	f7ff f99e 	bl	800bc90 <quorem>
 800c954:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c958:	f805 3b01 	strb.w	r3, [r5], #1
 800c95c:	9a00      	ldr	r2, [sp, #0]
 800c95e:	1aaa      	subs	r2, r5, r2
 800c960:	4591      	cmp	r9, r2
 800c962:	ddba      	ble.n	800c8da <_dtoa_r+0xb32>
 800c964:	4659      	mov	r1, fp
 800c966:	2300      	movs	r3, #0
 800c968:	220a      	movs	r2, #10
 800c96a:	4620      	mov	r0, r4
 800c96c:	f000 fc0a 	bl	800d184 <__multadd>
 800c970:	4683      	mov	fp, r0
 800c972:	e7eb      	b.n	800c94c <_dtoa_r+0xba4>
 800c974:	08010a8c 	.word	0x08010a8c
 800c978:	08010c91 	.word	0x08010c91
 800c97c:	08010a09 	.word	0x08010a09

0800c980 <rshift>:
 800c980:	6903      	ldr	r3, [r0, #16]
 800c982:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c98a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c98e:	f100 0414 	add.w	r4, r0, #20
 800c992:	dd45      	ble.n	800ca20 <rshift+0xa0>
 800c994:	f011 011f 	ands.w	r1, r1, #31
 800c998:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c99c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c9a0:	d10c      	bne.n	800c9bc <rshift+0x3c>
 800c9a2:	f100 0710 	add.w	r7, r0, #16
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	42b1      	cmp	r1, r6
 800c9aa:	d334      	bcc.n	800ca16 <rshift+0x96>
 800c9ac:	1a9b      	subs	r3, r3, r2
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	1eea      	subs	r2, r5, #3
 800c9b2:	4296      	cmp	r6, r2
 800c9b4:	bf38      	it	cc
 800c9b6:	2300      	movcc	r3, #0
 800c9b8:	4423      	add	r3, r4
 800c9ba:	e015      	b.n	800c9e8 <rshift+0x68>
 800c9bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c9c0:	f1c1 0820 	rsb	r8, r1, #32
 800c9c4:	40cf      	lsrs	r7, r1
 800c9c6:	f105 0e04 	add.w	lr, r5, #4
 800c9ca:	46a1      	mov	r9, r4
 800c9cc:	4576      	cmp	r6, lr
 800c9ce:	46f4      	mov	ip, lr
 800c9d0:	d815      	bhi.n	800c9fe <rshift+0x7e>
 800c9d2:	1a9b      	subs	r3, r3, r2
 800c9d4:	009a      	lsls	r2, r3, #2
 800c9d6:	3a04      	subs	r2, #4
 800c9d8:	3501      	adds	r5, #1
 800c9da:	42ae      	cmp	r6, r5
 800c9dc:	bf38      	it	cc
 800c9de:	2200      	movcc	r2, #0
 800c9e0:	18a3      	adds	r3, r4, r2
 800c9e2:	50a7      	str	r7, [r4, r2]
 800c9e4:	b107      	cbz	r7, 800c9e8 <rshift+0x68>
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	1b1a      	subs	r2, r3, r4
 800c9ea:	42a3      	cmp	r3, r4
 800c9ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c9f0:	bf08      	it	eq
 800c9f2:	2300      	moveq	r3, #0
 800c9f4:	6102      	str	r2, [r0, #16]
 800c9f6:	bf08      	it	eq
 800c9f8:	6143      	streq	r3, [r0, #20]
 800c9fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9fe:	f8dc c000 	ldr.w	ip, [ip]
 800ca02:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca06:	ea4c 0707 	orr.w	r7, ip, r7
 800ca0a:	f849 7b04 	str.w	r7, [r9], #4
 800ca0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca12:	40cf      	lsrs	r7, r1
 800ca14:	e7da      	b.n	800c9cc <rshift+0x4c>
 800ca16:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca1a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca1e:	e7c3      	b.n	800c9a8 <rshift+0x28>
 800ca20:	4623      	mov	r3, r4
 800ca22:	e7e1      	b.n	800c9e8 <rshift+0x68>

0800ca24 <__hexdig_fun>:
 800ca24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ca28:	2b09      	cmp	r3, #9
 800ca2a:	d802      	bhi.n	800ca32 <__hexdig_fun+0xe>
 800ca2c:	3820      	subs	r0, #32
 800ca2e:	b2c0      	uxtb	r0, r0
 800ca30:	4770      	bx	lr
 800ca32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ca36:	2b05      	cmp	r3, #5
 800ca38:	d801      	bhi.n	800ca3e <__hexdig_fun+0x1a>
 800ca3a:	3847      	subs	r0, #71	; 0x47
 800ca3c:	e7f7      	b.n	800ca2e <__hexdig_fun+0xa>
 800ca3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ca42:	2b05      	cmp	r3, #5
 800ca44:	d801      	bhi.n	800ca4a <__hexdig_fun+0x26>
 800ca46:	3827      	subs	r0, #39	; 0x27
 800ca48:	e7f1      	b.n	800ca2e <__hexdig_fun+0xa>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	4770      	bx	lr
	...

0800ca50 <__gethex>:
 800ca50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca54:	ed2d 8b02 	vpush	{d8}
 800ca58:	b089      	sub	sp, #36	; 0x24
 800ca5a:	ee08 0a10 	vmov	s16, r0
 800ca5e:	9304      	str	r3, [sp, #16]
 800ca60:	4bbc      	ldr	r3, [pc, #752]	; (800cd54 <__gethex+0x304>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	4618      	mov	r0, r3
 800ca68:	468b      	mov	fp, r1
 800ca6a:	4690      	mov	r8, r2
 800ca6c:	f7f3 fbb8 	bl	80001e0 <strlen>
 800ca70:	9b01      	ldr	r3, [sp, #4]
 800ca72:	f8db 2000 	ldr.w	r2, [fp]
 800ca76:	4403      	add	r3, r0
 800ca78:	4682      	mov	sl, r0
 800ca7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ca7e:	9305      	str	r3, [sp, #20]
 800ca80:	1c93      	adds	r3, r2, #2
 800ca82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ca86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ca8a:	32fe      	adds	r2, #254	; 0xfe
 800ca8c:	18d1      	adds	r1, r2, r3
 800ca8e:	461f      	mov	r7, r3
 800ca90:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca94:	9100      	str	r1, [sp, #0]
 800ca96:	2830      	cmp	r0, #48	; 0x30
 800ca98:	d0f8      	beq.n	800ca8c <__gethex+0x3c>
 800ca9a:	f7ff ffc3 	bl	800ca24 <__hexdig_fun>
 800ca9e:	4604      	mov	r4, r0
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d13a      	bne.n	800cb1a <__gethex+0xca>
 800caa4:	9901      	ldr	r1, [sp, #4]
 800caa6:	4652      	mov	r2, sl
 800caa8:	4638      	mov	r0, r7
 800caaa:	f7fe fa08 	bl	800aebe <strncmp>
 800caae:	4605      	mov	r5, r0
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d168      	bne.n	800cb86 <__gethex+0x136>
 800cab4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cab8:	eb07 060a 	add.w	r6, r7, sl
 800cabc:	f7ff ffb2 	bl	800ca24 <__hexdig_fun>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d062      	beq.n	800cb8a <__gethex+0x13a>
 800cac4:	4633      	mov	r3, r6
 800cac6:	7818      	ldrb	r0, [r3, #0]
 800cac8:	2830      	cmp	r0, #48	; 0x30
 800caca:	461f      	mov	r7, r3
 800cacc:	f103 0301 	add.w	r3, r3, #1
 800cad0:	d0f9      	beq.n	800cac6 <__gethex+0x76>
 800cad2:	f7ff ffa7 	bl	800ca24 <__hexdig_fun>
 800cad6:	2301      	movs	r3, #1
 800cad8:	fab0 f480 	clz	r4, r0
 800cadc:	0964      	lsrs	r4, r4, #5
 800cade:	4635      	mov	r5, r6
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	463a      	mov	r2, r7
 800cae4:	4616      	mov	r6, r2
 800cae6:	3201      	adds	r2, #1
 800cae8:	7830      	ldrb	r0, [r6, #0]
 800caea:	f7ff ff9b 	bl	800ca24 <__hexdig_fun>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d1f8      	bne.n	800cae4 <__gethex+0x94>
 800caf2:	9901      	ldr	r1, [sp, #4]
 800caf4:	4652      	mov	r2, sl
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7fe f9e1 	bl	800aebe <strncmp>
 800cafc:	b980      	cbnz	r0, 800cb20 <__gethex+0xd0>
 800cafe:	b94d      	cbnz	r5, 800cb14 <__gethex+0xc4>
 800cb00:	eb06 050a 	add.w	r5, r6, sl
 800cb04:	462a      	mov	r2, r5
 800cb06:	4616      	mov	r6, r2
 800cb08:	3201      	adds	r2, #1
 800cb0a:	7830      	ldrb	r0, [r6, #0]
 800cb0c:	f7ff ff8a 	bl	800ca24 <__hexdig_fun>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d1f8      	bne.n	800cb06 <__gethex+0xb6>
 800cb14:	1bad      	subs	r5, r5, r6
 800cb16:	00ad      	lsls	r5, r5, #2
 800cb18:	e004      	b.n	800cb24 <__gethex+0xd4>
 800cb1a:	2400      	movs	r4, #0
 800cb1c:	4625      	mov	r5, r4
 800cb1e:	e7e0      	b.n	800cae2 <__gethex+0x92>
 800cb20:	2d00      	cmp	r5, #0
 800cb22:	d1f7      	bne.n	800cb14 <__gethex+0xc4>
 800cb24:	7833      	ldrb	r3, [r6, #0]
 800cb26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb2a:	2b50      	cmp	r3, #80	; 0x50
 800cb2c:	d13b      	bne.n	800cba6 <__gethex+0x156>
 800cb2e:	7873      	ldrb	r3, [r6, #1]
 800cb30:	2b2b      	cmp	r3, #43	; 0x2b
 800cb32:	d02c      	beq.n	800cb8e <__gethex+0x13e>
 800cb34:	2b2d      	cmp	r3, #45	; 0x2d
 800cb36:	d02e      	beq.n	800cb96 <__gethex+0x146>
 800cb38:	1c71      	adds	r1, r6, #1
 800cb3a:	f04f 0900 	mov.w	r9, #0
 800cb3e:	7808      	ldrb	r0, [r1, #0]
 800cb40:	f7ff ff70 	bl	800ca24 <__hexdig_fun>
 800cb44:	1e43      	subs	r3, r0, #1
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b18      	cmp	r3, #24
 800cb4a:	d82c      	bhi.n	800cba6 <__gethex+0x156>
 800cb4c:	f1a0 0210 	sub.w	r2, r0, #16
 800cb50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb54:	f7ff ff66 	bl	800ca24 <__hexdig_fun>
 800cb58:	1e43      	subs	r3, r0, #1
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	2b18      	cmp	r3, #24
 800cb5e:	d91d      	bls.n	800cb9c <__gethex+0x14c>
 800cb60:	f1b9 0f00 	cmp.w	r9, #0
 800cb64:	d000      	beq.n	800cb68 <__gethex+0x118>
 800cb66:	4252      	negs	r2, r2
 800cb68:	4415      	add	r5, r2
 800cb6a:	f8cb 1000 	str.w	r1, [fp]
 800cb6e:	b1e4      	cbz	r4, 800cbaa <__gethex+0x15a>
 800cb70:	9b00      	ldr	r3, [sp, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	bf14      	ite	ne
 800cb76:	2700      	movne	r7, #0
 800cb78:	2706      	moveq	r7, #6
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	b009      	add	sp, #36	; 0x24
 800cb7e:	ecbd 8b02 	vpop	{d8}
 800cb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb86:	463e      	mov	r6, r7
 800cb88:	4625      	mov	r5, r4
 800cb8a:	2401      	movs	r4, #1
 800cb8c:	e7ca      	b.n	800cb24 <__gethex+0xd4>
 800cb8e:	f04f 0900 	mov.w	r9, #0
 800cb92:	1cb1      	adds	r1, r6, #2
 800cb94:	e7d3      	b.n	800cb3e <__gethex+0xee>
 800cb96:	f04f 0901 	mov.w	r9, #1
 800cb9a:	e7fa      	b.n	800cb92 <__gethex+0x142>
 800cb9c:	230a      	movs	r3, #10
 800cb9e:	fb03 0202 	mla	r2, r3, r2, r0
 800cba2:	3a10      	subs	r2, #16
 800cba4:	e7d4      	b.n	800cb50 <__gethex+0x100>
 800cba6:	4631      	mov	r1, r6
 800cba8:	e7df      	b.n	800cb6a <__gethex+0x11a>
 800cbaa:	1bf3      	subs	r3, r6, r7
 800cbac:	3b01      	subs	r3, #1
 800cbae:	4621      	mov	r1, r4
 800cbb0:	2b07      	cmp	r3, #7
 800cbb2:	dc0b      	bgt.n	800cbcc <__gethex+0x17c>
 800cbb4:	ee18 0a10 	vmov	r0, s16
 800cbb8:	f000 fa82 	bl	800d0c0 <_Balloc>
 800cbbc:	4604      	mov	r4, r0
 800cbbe:	b940      	cbnz	r0, 800cbd2 <__gethex+0x182>
 800cbc0:	4b65      	ldr	r3, [pc, #404]	; (800cd58 <__gethex+0x308>)
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	21de      	movs	r1, #222	; 0xde
 800cbc6:	4865      	ldr	r0, [pc, #404]	; (800cd5c <__gethex+0x30c>)
 800cbc8:	f001 fd92 	bl	800e6f0 <__assert_func>
 800cbcc:	3101      	adds	r1, #1
 800cbce:	105b      	asrs	r3, r3, #1
 800cbd0:	e7ee      	b.n	800cbb0 <__gethex+0x160>
 800cbd2:	f100 0914 	add.w	r9, r0, #20
 800cbd6:	f04f 0b00 	mov.w	fp, #0
 800cbda:	f1ca 0301 	rsb	r3, sl, #1
 800cbde:	f8cd 9008 	str.w	r9, [sp, #8]
 800cbe2:	f8cd b000 	str.w	fp, [sp]
 800cbe6:	9306      	str	r3, [sp, #24]
 800cbe8:	42b7      	cmp	r7, r6
 800cbea:	d340      	bcc.n	800cc6e <__gethex+0x21e>
 800cbec:	9802      	ldr	r0, [sp, #8]
 800cbee:	9b00      	ldr	r3, [sp, #0]
 800cbf0:	f840 3b04 	str.w	r3, [r0], #4
 800cbf4:	eba0 0009 	sub.w	r0, r0, r9
 800cbf8:	1080      	asrs	r0, r0, #2
 800cbfa:	0146      	lsls	r6, r0, #5
 800cbfc:	6120      	str	r0, [r4, #16]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 fb54 	bl	800d2ac <__hi0bits>
 800cc04:	1a30      	subs	r0, r6, r0
 800cc06:	f8d8 6000 	ldr.w	r6, [r8]
 800cc0a:	42b0      	cmp	r0, r6
 800cc0c:	dd63      	ble.n	800ccd6 <__gethex+0x286>
 800cc0e:	1b87      	subs	r7, r0, r6
 800cc10:	4639      	mov	r1, r7
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 feee 	bl	800d9f4 <__any_on>
 800cc18:	4682      	mov	sl, r0
 800cc1a:	b1a8      	cbz	r0, 800cc48 <__gethex+0x1f8>
 800cc1c:	1e7b      	subs	r3, r7, #1
 800cc1e:	1159      	asrs	r1, r3, #5
 800cc20:	f003 021f 	and.w	r2, r3, #31
 800cc24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cc28:	f04f 0a01 	mov.w	sl, #1
 800cc2c:	fa0a f202 	lsl.w	r2, sl, r2
 800cc30:	420a      	tst	r2, r1
 800cc32:	d009      	beq.n	800cc48 <__gethex+0x1f8>
 800cc34:	4553      	cmp	r3, sl
 800cc36:	dd05      	ble.n	800cc44 <__gethex+0x1f4>
 800cc38:	1eb9      	subs	r1, r7, #2
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f000 feda 	bl	800d9f4 <__any_on>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d145      	bne.n	800ccd0 <__gethex+0x280>
 800cc44:	f04f 0a02 	mov.w	sl, #2
 800cc48:	4639      	mov	r1, r7
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f7ff fe98 	bl	800c980 <rshift>
 800cc50:	443d      	add	r5, r7
 800cc52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc56:	42ab      	cmp	r3, r5
 800cc58:	da4c      	bge.n	800ccf4 <__gethex+0x2a4>
 800cc5a:	ee18 0a10 	vmov	r0, s16
 800cc5e:	4621      	mov	r1, r4
 800cc60:	f000 fa6e 	bl	800d140 <_Bfree>
 800cc64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc66:	2300      	movs	r3, #0
 800cc68:	6013      	str	r3, [r2, #0]
 800cc6a:	27a3      	movs	r7, #163	; 0xa3
 800cc6c:	e785      	b.n	800cb7a <__gethex+0x12a>
 800cc6e:	1e73      	subs	r3, r6, #1
 800cc70:	9a05      	ldr	r2, [sp, #20]
 800cc72:	9303      	str	r3, [sp, #12]
 800cc74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d019      	beq.n	800ccb0 <__gethex+0x260>
 800cc7c:	f1bb 0f20 	cmp.w	fp, #32
 800cc80:	d107      	bne.n	800cc92 <__gethex+0x242>
 800cc82:	9b02      	ldr	r3, [sp, #8]
 800cc84:	9a00      	ldr	r2, [sp, #0]
 800cc86:	f843 2b04 	str.w	r2, [r3], #4
 800cc8a:	9302      	str	r3, [sp, #8]
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	469b      	mov	fp, r3
 800cc92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cc96:	f7ff fec5 	bl	800ca24 <__hexdig_fun>
 800cc9a:	9b00      	ldr	r3, [sp, #0]
 800cc9c:	f000 000f 	and.w	r0, r0, #15
 800cca0:	fa00 f00b 	lsl.w	r0, r0, fp
 800cca4:	4303      	orrs	r3, r0
 800cca6:	9300      	str	r3, [sp, #0]
 800cca8:	f10b 0b04 	add.w	fp, fp, #4
 800ccac:	9b03      	ldr	r3, [sp, #12]
 800ccae:	e00d      	b.n	800cccc <__gethex+0x27c>
 800ccb0:	9b03      	ldr	r3, [sp, #12]
 800ccb2:	9a06      	ldr	r2, [sp, #24]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	42bb      	cmp	r3, r7
 800ccb8:	d3e0      	bcc.n	800cc7c <__gethex+0x22c>
 800ccba:	4618      	mov	r0, r3
 800ccbc:	9901      	ldr	r1, [sp, #4]
 800ccbe:	9307      	str	r3, [sp, #28]
 800ccc0:	4652      	mov	r2, sl
 800ccc2:	f7fe f8fc 	bl	800aebe <strncmp>
 800ccc6:	9b07      	ldr	r3, [sp, #28]
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d1d7      	bne.n	800cc7c <__gethex+0x22c>
 800cccc:	461e      	mov	r6, r3
 800ccce:	e78b      	b.n	800cbe8 <__gethex+0x198>
 800ccd0:	f04f 0a03 	mov.w	sl, #3
 800ccd4:	e7b8      	b.n	800cc48 <__gethex+0x1f8>
 800ccd6:	da0a      	bge.n	800ccee <__gethex+0x29e>
 800ccd8:	1a37      	subs	r7, r6, r0
 800ccda:	4621      	mov	r1, r4
 800ccdc:	ee18 0a10 	vmov	r0, s16
 800cce0:	463a      	mov	r2, r7
 800cce2:	f000 fc49 	bl	800d578 <__lshift>
 800cce6:	1bed      	subs	r5, r5, r7
 800cce8:	4604      	mov	r4, r0
 800ccea:	f100 0914 	add.w	r9, r0, #20
 800ccee:	f04f 0a00 	mov.w	sl, #0
 800ccf2:	e7ae      	b.n	800cc52 <__gethex+0x202>
 800ccf4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ccf8:	42a8      	cmp	r0, r5
 800ccfa:	dd72      	ble.n	800cde2 <__gethex+0x392>
 800ccfc:	1b45      	subs	r5, r0, r5
 800ccfe:	42ae      	cmp	r6, r5
 800cd00:	dc36      	bgt.n	800cd70 <__gethex+0x320>
 800cd02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d02a      	beq.n	800cd60 <__gethex+0x310>
 800cd0a:	2b03      	cmp	r3, #3
 800cd0c:	d02c      	beq.n	800cd68 <__gethex+0x318>
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d115      	bne.n	800cd3e <__gethex+0x2ee>
 800cd12:	42ae      	cmp	r6, r5
 800cd14:	d113      	bne.n	800cd3e <__gethex+0x2ee>
 800cd16:	2e01      	cmp	r6, #1
 800cd18:	d10b      	bne.n	800cd32 <__gethex+0x2e2>
 800cd1a:	9a04      	ldr	r2, [sp, #16]
 800cd1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	2301      	movs	r3, #1
 800cd24:	6123      	str	r3, [r4, #16]
 800cd26:	f8c9 3000 	str.w	r3, [r9]
 800cd2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd2c:	2762      	movs	r7, #98	; 0x62
 800cd2e:	601c      	str	r4, [r3, #0]
 800cd30:	e723      	b.n	800cb7a <__gethex+0x12a>
 800cd32:	1e71      	subs	r1, r6, #1
 800cd34:	4620      	mov	r0, r4
 800cd36:	f000 fe5d 	bl	800d9f4 <__any_on>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d1ed      	bne.n	800cd1a <__gethex+0x2ca>
 800cd3e:	ee18 0a10 	vmov	r0, s16
 800cd42:	4621      	mov	r1, r4
 800cd44:	f000 f9fc 	bl	800d140 <_Bfree>
 800cd48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	6013      	str	r3, [r2, #0]
 800cd4e:	2750      	movs	r7, #80	; 0x50
 800cd50:	e713      	b.n	800cb7a <__gethex+0x12a>
 800cd52:	bf00      	nop
 800cd54:	08010b08 	.word	0x08010b08
 800cd58:	08010a8c 	.word	0x08010a8c
 800cd5c:	08010a9d 	.word	0x08010a9d
 800cd60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1eb      	bne.n	800cd3e <__gethex+0x2ee>
 800cd66:	e7d8      	b.n	800cd1a <__gethex+0x2ca>
 800cd68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1d5      	bne.n	800cd1a <__gethex+0x2ca>
 800cd6e:	e7e6      	b.n	800cd3e <__gethex+0x2ee>
 800cd70:	1e6f      	subs	r7, r5, #1
 800cd72:	f1ba 0f00 	cmp.w	sl, #0
 800cd76:	d131      	bne.n	800cddc <__gethex+0x38c>
 800cd78:	b127      	cbz	r7, 800cd84 <__gethex+0x334>
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	f000 fe39 	bl	800d9f4 <__any_on>
 800cd82:	4682      	mov	sl, r0
 800cd84:	117b      	asrs	r3, r7, #5
 800cd86:	2101      	movs	r1, #1
 800cd88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cd8c:	f007 071f 	and.w	r7, r7, #31
 800cd90:	fa01 f707 	lsl.w	r7, r1, r7
 800cd94:	421f      	tst	r7, r3
 800cd96:	4629      	mov	r1, r5
 800cd98:	4620      	mov	r0, r4
 800cd9a:	bf18      	it	ne
 800cd9c:	f04a 0a02 	orrne.w	sl, sl, #2
 800cda0:	1b76      	subs	r6, r6, r5
 800cda2:	f7ff fded 	bl	800c980 <rshift>
 800cda6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cdaa:	2702      	movs	r7, #2
 800cdac:	f1ba 0f00 	cmp.w	sl, #0
 800cdb0:	d048      	beq.n	800ce44 <__gethex+0x3f4>
 800cdb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d015      	beq.n	800cde6 <__gethex+0x396>
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d017      	beq.n	800cdee <__gethex+0x39e>
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d109      	bne.n	800cdd6 <__gethex+0x386>
 800cdc2:	f01a 0f02 	tst.w	sl, #2
 800cdc6:	d006      	beq.n	800cdd6 <__gethex+0x386>
 800cdc8:	f8d9 0000 	ldr.w	r0, [r9]
 800cdcc:	ea4a 0a00 	orr.w	sl, sl, r0
 800cdd0:	f01a 0f01 	tst.w	sl, #1
 800cdd4:	d10e      	bne.n	800cdf4 <__gethex+0x3a4>
 800cdd6:	f047 0710 	orr.w	r7, r7, #16
 800cdda:	e033      	b.n	800ce44 <__gethex+0x3f4>
 800cddc:	f04f 0a01 	mov.w	sl, #1
 800cde0:	e7d0      	b.n	800cd84 <__gethex+0x334>
 800cde2:	2701      	movs	r7, #1
 800cde4:	e7e2      	b.n	800cdac <__gethex+0x35c>
 800cde6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cde8:	f1c3 0301 	rsb	r3, r3, #1
 800cdec:	9315      	str	r3, [sp, #84]	; 0x54
 800cdee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d0f0      	beq.n	800cdd6 <__gethex+0x386>
 800cdf4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cdf8:	f104 0314 	add.w	r3, r4, #20
 800cdfc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce04:	f04f 0c00 	mov.w	ip, #0
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce12:	d01c      	beq.n	800ce4e <__gethex+0x3fe>
 800ce14:	3201      	adds	r2, #1
 800ce16:	6002      	str	r2, [r0, #0]
 800ce18:	2f02      	cmp	r7, #2
 800ce1a:	f104 0314 	add.w	r3, r4, #20
 800ce1e:	d13f      	bne.n	800cea0 <__gethex+0x450>
 800ce20:	f8d8 2000 	ldr.w	r2, [r8]
 800ce24:	3a01      	subs	r2, #1
 800ce26:	42b2      	cmp	r2, r6
 800ce28:	d10a      	bne.n	800ce40 <__gethex+0x3f0>
 800ce2a:	1171      	asrs	r1, r6, #5
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce32:	f006 061f 	and.w	r6, r6, #31
 800ce36:	fa02 f606 	lsl.w	r6, r2, r6
 800ce3a:	421e      	tst	r6, r3
 800ce3c:	bf18      	it	ne
 800ce3e:	4617      	movne	r7, r2
 800ce40:	f047 0720 	orr.w	r7, r7, #32
 800ce44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce46:	601c      	str	r4, [r3, #0]
 800ce48:	9b04      	ldr	r3, [sp, #16]
 800ce4a:	601d      	str	r5, [r3, #0]
 800ce4c:	e695      	b.n	800cb7a <__gethex+0x12a>
 800ce4e:	4299      	cmp	r1, r3
 800ce50:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce54:	d8d8      	bhi.n	800ce08 <__gethex+0x3b8>
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	459b      	cmp	fp, r3
 800ce5a:	db19      	blt.n	800ce90 <__gethex+0x440>
 800ce5c:	6861      	ldr	r1, [r4, #4]
 800ce5e:	ee18 0a10 	vmov	r0, s16
 800ce62:	3101      	adds	r1, #1
 800ce64:	f000 f92c 	bl	800d0c0 <_Balloc>
 800ce68:	4681      	mov	r9, r0
 800ce6a:	b918      	cbnz	r0, 800ce74 <__gethex+0x424>
 800ce6c:	4b1a      	ldr	r3, [pc, #104]	; (800ced8 <__gethex+0x488>)
 800ce6e:	4602      	mov	r2, r0
 800ce70:	2184      	movs	r1, #132	; 0x84
 800ce72:	e6a8      	b.n	800cbc6 <__gethex+0x176>
 800ce74:	6922      	ldr	r2, [r4, #16]
 800ce76:	3202      	adds	r2, #2
 800ce78:	f104 010c 	add.w	r1, r4, #12
 800ce7c:	0092      	lsls	r2, r2, #2
 800ce7e:	300c      	adds	r0, #12
 800ce80:	f7fd f8f6 	bl	800a070 <memcpy>
 800ce84:	4621      	mov	r1, r4
 800ce86:	ee18 0a10 	vmov	r0, s16
 800ce8a:	f000 f959 	bl	800d140 <_Bfree>
 800ce8e:	464c      	mov	r4, r9
 800ce90:	6923      	ldr	r3, [r4, #16]
 800ce92:	1c5a      	adds	r2, r3, #1
 800ce94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce98:	6122      	str	r2, [r4, #16]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	615a      	str	r2, [r3, #20]
 800ce9e:	e7bb      	b.n	800ce18 <__gethex+0x3c8>
 800cea0:	6922      	ldr	r2, [r4, #16]
 800cea2:	455a      	cmp	r2, fp
 800cea4:	dd0b      	ble.n	800cebe <__gethex+0x46e>
 800cea6:	2101      	movs	r1, #1
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f7ff fd69 	bl	800c980 <rshift>
 800ceae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ceb2:	3501      	adds	r5, #1
 800ceb4:	42ab      	cmp	r3, r5
 800ceb6:	f6ff aed0 	blt.w	800cc5a <__gethex+0x20a>
 800ceba:	2701      	movs	r7, #1
 800cebc:	e7c0      	b.n	800ce40 <__gethex+0x3f0>
 800cebe:	f016 061f 	ands.w	r6, r6, #31
 800cec2:	d0fa      	beq.n	800ceba <__gethex+0x46a>
 800cec4:	449a      	add	sl, r3
 800cec6:	f1c6 0620 	rsb	r6, r6, #32
 800ceca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cece:	f000 f9ed 	bl	800d2ac <__hi0bits>
 800ced2:	42b0      	cmp	r0, r6
 800ced4:	dbe7      	blt.n	800cea6 <__gethex+0x456>
 800ced6:	e7f0      	b.n	800ceba <__gethex+0x46a>
 800ced8:	08010a8c 	.word	0x08010a8c

0800cedc <L_shift>:
 800cedc:	f1c2 0208 	rsb	r2, r2, #8
 800cee0:	0092      	lsls	r2, r2, #2
 800cee2:	b570      	push	{r4, r5, r6, lr}
 800cee4:	f1c2 0620 	rsb	r6, r2, #32
 800cee8:	6843      	ldr	r3, [r0, #4]
 800ceea:	6804      	ldr	r4, [r0, #0]
 800ceec:	fa03 f506 	lsl.w	r5, r3, r6
 800cef0:	432c      	orrs	r4, r5
 800cef2:	40d3      	lsrs	r3, r2
 800cef4:	6004      	str	r4, [r0, #0]
 800cef6:	f840 3f04 	str.w	r3, [r0, #4]!
 800cefa:	4288      	cmp	r0, r1
 800cefc:	d3f4      	bcc.n	800cee8 <L_shift+0xc>
 800cefe:	bd70      	pop	{r4, r5, r6, pc}

0800cf00 <__match>:
 800cf00:	b530      	push	{r4, r5, lr}
 800cf02:	6803      	ldr	r3, [r0, #0]
 800cf04:	3301      	adds	r3, #1
 800cf06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf0a:	b914      	cbnz	r4, 800cf12 <__match+0x12>
 800cf0c:	6003      	str	r3, [r0, #0]
 800cf0e:	2001      	movs	r0, #1
 800cf10:	bd30      	pop	{r4, r5, pc}
 800cf12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf1a:	2d19      	cmp	r5, #25
 800cf1c:	bf98      	it	ls
 800cf1e:	3220      	addls	r2, #32
 800cf20:	42a2      	cmp	r2, r4
 800cf22:	d0f0      	beq.n	800cf06 <__match+0x6>
 800cf24:	2000      	movs	r0, #0
 800cf26:	e7f3      	b.n	800cf10 <__match+0x10>

0800cf28 <__hexnan>:
 800cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	680b      	ldr	r3, [r1, #0]
 800cf2e:	6801      	ldr	r1, [r0, #0]
 800cf30:	115e      	asrs	r6, r3, #5
 800cf32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf36:	f013 031f 	ands.w	r3, r3, #31
 800cf3a:	b087      	sub	sp, #28
 800cf3c:	bf18      	it	ne
 800cf3e:	3604      	addne	r6, #4
 800cf40:	2500      	movs	r5, #0
 800cf42:	1f37      	subs	r7, r6, #4
 800cf44:	4682      	mov	sl, r0
 800cf46:	4690      	mov	r8, r2
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf4e:	46b9      	mov	r9, r7
 800cf50:	463c      	mov	r4, r7
 800cf52:	9502      	str	r5, [sp, #8]
 800cf54:	46ab      	mov	fp, r5
 800cf56:	784a      	ldrb	r2, [r1, #1]
 800cf58:	1c4b      	adds	r3, r1, #1
 800cf5a:	9303      	str	r3, [sp, #12]
 800cf5c:	b342      	cbz	r2, 800cfb0 <__hexnan+0x88>
 800cf5e:	4610      	mov	r0, r2
 800cf60:	9105      	str	r1, [sp, #20]
 800cf62:	9204      	str	r2, [sp, #16]
 800cf64:	f7ff fd5e 	bl	800ca24 <__hexdig_fun>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d14f      	bne.n	800d00c <__hexnan+0xe4>
 800cf6c:	9a04      	ldr	r2, [sp, #16]
 800cf6e:	9905      	ldr	r1, [sp, #20]
 800cf70:	2a20      	cmp	r2, #32
 800cf72:	d818      	bhi.n	800cfa6 <__hexnan+0x7e>
 800cf74:	9b02      	ldr	r3, [sp, #8]
 800cf76:	459b      	cmp	fp, r3
 800cf78:	dd13      	ble.n	800cfa2 <__hexnan+0x7a>
 800cf7a:	454c      	cmp	r4, r9
 800cf7c:	d206      	bcs.n	800cf8c <__hexnan+0x64>
 800cf7e:	2d07      	cmp	r5, #7
 800cf80:	dc04      	bgt.n	800cf8c <__hexnan+0x64>
 800cf82:	462a      	mov	r2, r5
 800cf84:	4649      	mov	r1, r9
 800cf86:	4620      	mov	r0, r4
 800cf88:	f7ff ffa8 	bl	800cedc <L_shift>
 800cf8c:	4544      	cmp	r4, r8
 800cf8e:	d950      	bls.n	800d032 <__hexnan+0x10a>
 800cf90:	2300      	movs	r3, #0
 800cf92:	f1a4 0904 	sub.w	r9, r4, #4
 800cf96:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf9a:	f8cd b008 	str.w	fp, [sp, #8]
 800cf9e:	464c      	mov	r4, r9
 800cfa0:	461d      	mov	r5, r3
 800cfa2:	9903      	ldr	r1, [sp, #12]
 800cfa4:	e7d7      	b.n	800cf56 <__hexnan+0x2e>
 800cfa6:	2a29      	cmp	r2, #41	; 0x29
 800cfa8:	d156      	bne.n	800d058 <__hexnan+0x130>
 800cfaa:	3102      	adds	r1, #2
 800cfac:	f8ca 1000 	str.w	r1, [sl]
 800cfb0:	f1bb 0f00 	cmp.w	fp, #0
 800cfb4:	d050      	beq.n	800d058 <__hexnan+0x130>
 800cfb6:	454c      	cmp	r4, r9
 800cfb8:	d206      	bcs.n	800cfc8 <__hexnan+0xa0>
 800cfba:	2d07      	cmp	r5, #7
 800cfbc:	dc04      	bgt.n	800cfc8 <__hexnan+0xa0>
 800cfbe:	462a      	mov	r2, r5
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f7ff ff8a 	bl	800cedc <L_shift>
 800cfc8:	4544      	cmp	r4, r8
 800cfca:	d934      	bls.n	800d036 <__hexnan+0x10e>
 800cfcc:	f1a8 0204 	sub.w	r2, r8, #4
 800cfd0:	4623      	mov	r3, r4
 800cfd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cfd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800cfda:	429f      	cmp	r7, r3
 800cfdc:	d2f9      	bcs.n	800cfd2 <__hexnan+0xaa>
 800cfde:	1b3b      	subs	r3, r7, r4
 800cfe0:	f023 0303 	bic.w	r3, r3, #3
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	3401      	adds	r4, #1
 800cfe8:	3e03      	subs	r6, #3
 800cfea:	42b4      	cmp	r4, r6
 800cfec:	bf88      	it	hi
 800cfee:	2304      	movhi	r3, #4
 800cff0:	4443      	add	r3, r8
 800cff2:	2200      	movs	r2, #0
 800cff4:	f843 2b04 	str.w	r2, [r3], #4
 800cff8:	429f      	cmp	r7, r3
 800cffa:	d2fb      	bcs.n	800cff4 <__hexnan+0xcc>
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	b91b      	cbnz	r3, 800d008 <__hexnan+0xe0>
 800d000:	4547      	cmp	r7, r8
 800d002:	d127      	bne.n	800d054 <__hexnan+0x12c>
 800d004:	2301      	movs	r3, #1
 800d006:	603b      	str	r3, [r7, #0]
 800d008:	2005      	movs	r0, #5
 800d00a:	e026      	b.n	800d05a <__hexnan+0x132>
 800d00c:	3501      	adds	r5, #1
 800d00e:	2d08      	cmp	r5, #8
 800d010:	f10b 0b01 	add.w	fp, fp, #1
 800d014:	dd06      	ble.n	800d024 <__hexnan+0xfc>
 800d016:	4544      	cmp	r4, r8
 800d018:	d9c3      	bls.n	800cfa2 <__hexnan+0x7a>
 800d01a:	2300      	movs	r3, #0
 800d01c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d020:	2501      	movs	r5, #1
 800d022:	3c04      	subs	r4, #4
 800d024:	6822      	ldr	r2, [r4, #0]
 800d026:	f000 000f 	and.w	r0, r0, #15
 800d02a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d02e:	6022      	str	r2, [r4, #0]
 800d030:	e7b7      	b.n	800cfa2 <__hexnan+0x7a>
 800d032:	2508      	movs	r5, #8
 800d034:	e7b5      	b.n	800cfa2 <__hexnan+0x7a>
 800d036:	9b01      	ldr	r3, [sp, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d0df      	beq.n	800cffc <__hexnan+0xd4>
 800d03c:	f04f 32ff 	mov.w	r2, #4294967295
 800d040:	f1c3 0320 	rsb	r3, r3, #32
 800d044:	fa22 f303 	lsr.w	r3, r2, r3
 800d048:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d04c:	401a      	ands	r2, r3
 800d04e:	f846 2c04 	str.w	r2, [r6, #-4]
 800d052:	e7d3      	b.n	800cffc <__hexnan+0xd4>
 800d054:	3f04      	subs	r7, #4
 800d056:	e7d1      	b.n	800cffc <__hexnan+0xd4>
 800d058:	2004      	movs	r0, #4
 800d05a:	b007      	add	sp, #28
 800d05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d060 <_localeconv_r>:
 800d060:	4800      	ldr	r0, [pc, #0]	; (800d064 <_localeconv_r+0x4>)
 800d062:	4770      	bx	lr
 800d064:	2000018c 	.word	0x2000018c

0800d068 <_lseek_r>:
 800d068:	b538      	push	{r3, r4, r5, lr}
 800d06a:	4d07      	ldr	r5, [pc, #28]	; (800d088 <_lseek_r+0x20>)
 800d06c:	4604      	mov	r4, r0
 800d06e:	4608      	mov	r0, r1
 800d070:	4611      	mov	r1, r2
 800d072:	2200      	movs	r2, #0
 800d074:	602a      	str	r2, [r5, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	f7f5 fb9e 	bl	80027b8 <_lseek>
 800d07c:	1c43      	adds	r3, r0, #1
 800d07e:	d102      	bne.n	800d086 <_lseek_r+0x1e>
 800d080:	682b      	ldr	r3, [r5, #0]
 800d082:	b103      	cbz	r3, 800d086 <_lseek_r+0x1e>
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	bd38      	pop	{r3, r4, r5, pc}
 800d088:	200059c4 	.word	0x200059c4

0800d08c <malloc>:
 800d08c:	4b02      	ldr	r3, [pc, #8]	; (800d098 <malloc+0xc>)
 800d08e:	4601      	mov	r1, r0
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	f000 bd2f 	b.w	800daf4 <_malloc_r>
 800d096:	bf00      	nop
 800d098:	20000034 	.word	0x20000034

0800d09c <__ascii_mbtowc>:
 800d09c:	b082      	sub	sp, #8
 800d09e:	b901      	cbnz	r1, 800d0a2 <__ascii_mbtowc+0x6>
 800d0a0:	a901      	add	r1, sp, #4
 800d0a2:	b142      	cbz	r2, 800d0b6 <__ascii_mbtowc+0x1a>
 800d0a4:	b14b      	cbz	r3, 800d0ba <__ascii_mbtowc+0x1e>
 800d0a6:	7813      	ldrb	r3, [r2, #0]
 800d0a8:	600b      	str	r3, [r1, #0]
 800d0aa:	7812      	ldrb	r2, [r2, #0]
 800d0ac:	1e10      	subs	r0, r2, #0
 800d0ae:	bf18      	it	ne
 800d0b0:	2001      	movne	r0, #1
 800d0b2:	b002      	add	sp, #8
 800d0b4:	4770      	bx	lr
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	e7fb      	b.n	800d0b2 <__ascii_mbtowc+0x16>
 800d0ba:	f06f 0001 	mvn.w	r0, #1
 800d0be:	e7f8      	b.n	800d0b2 <__ascii_mbtowc+0x16>

0800d0c0 <_Balloc>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	460d      	mov	r5, r1
 800d0c8:	b976      	cbnz	r6, 800d0e8 <_Balloc+0x28>
 800d0ca:	2010      	movs	r0, #16
 800d0cc:	f7ff ffde 	bl	800d08c <malloc>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	6260      	str	r0, [r4, #36]	; 0x24
 800d0d4:	b920      	cbnz	r0, 800d0e0 <_Balloc+0x20>
 800d0d6:	4b18      	ldr	r3, [pc, #96]	; (800d138 <_Balloc+0x78>)
 800d0d8:	4818      	ldr	r0, [pc, #96]	; (800d13c <_Balloc+0x7c>)
 800d0da:	2166      	movs	r1, #102	; 0x66
 800d0dc:	f001 fb08 	bl	800e6f0 <__assert_func>
 800d0e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0e4:	6006      	str	r6, [r0, #0]
 800d0e6:	60c6      	str	r6, [r0, #12]
 800d0e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d0ea:	68f3      	ldr	r3, [r6, #12]
 800d0ec:	b183      	cbz	r3, 800d110 <_Balloc+0x50>
 800d0ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d0f6:	b9b8      	cbnz	r0, 800d128 <_Balloc+0x68>
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	fa01 f605 	lsl.w	r6, r1, r5
 800d0fe:	1d72      	adds	r2, r6, #5
 800d100:	0092      	lsls	r2, r2, #2
 800d102:	4620      	mov	r0, r4
 800d104:	f000 fc97 	bl	800da36 <_calloc_r>
 800d108:	b160      	cbz	r0, 800d124 <_Balloc+0x64>
 800d10a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d10e:	e00e      	b.n	800d12e <_Balloc+0x6e>
 800d110:	2221      	movs	r2, #33	; 0x21
 800d112:	2104      	movs	r1, #4
 800d114:	4620      	mov	r0, r4
 800d116:	f000 fc8e 	bl	800da36 <_calloc_r>
 800d11a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d11c:	60f0      	str	r0, [r6, #12]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1e4      	bne.n	800d0ee <_Balloc+0x2e>
 800d124:	2000      	movs	r0, #0
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	6802      	ldr	r2, [r0, #0]
 800d12a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d12e:	2300      	movs	r3, #0
 800d130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d134:	e7f7      	b.n	800d126 <_Balloc+0x66>
 800d136:	bf00      	nop
 800d138:	08010a16 	.word	0x08010a16
 800d13c:	08010b1c 	.word	0x08010b1c

0800d140 <_Bfree>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d144:	4605      	mov	r5, r0
 800d146:	460c      	mov	r4, r1
 800d148:	b976      	cbnz	r6, 800d168 <_Bfree+0x28>
 800d14a:	2010      	movs	r0, #16
 800d14c:	f7ff ff9e 	bl	800d08c <malloc>
 800d150:	4602      	mov	r2, r0
 800d152:	6268      	str	r0, [r5, #36]	; 0x24
 800d154:	b920      	cbnz	r0, 800d160 <_Bfree+0x20>
 800d156:	4b09      	ldr	r3, [pc, #36]	; (800d17c <_Bfree+0x3c>)
 800d158:	4809      	ldr	r0, [pc, #36]	; (800d180 <_Bfree+0x40>)
 800d15a:	218a      	movs	r1, #138	; 0x8a
 800d15c:	f001 fac8 	bl	800e6f0 <__assert_func>
 800d160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d164:	6006      	str	r6, [r0, #0]
 800d166:	60c6      	str	r6, [r0, #12]
 800d168:	b13c      	cbz	r4, 800d17a <_Bfree+0x3a>
 800d16a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d16c:	6862      	ldr	r2, [r4, #4]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d174:	6021      	str	r1, [r4, #0]
 800d176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d17a:	bd70      	pop	{r4, r5, r6, pc}
 800d17c:	08010a16 	.word	0x08010a16
 800d180:	08010b1c 	.word	0x08010b1c

0800d184 <__multadd>:
 800d184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d188:	690e      	ldr	r6, [r1, #16]
 800d18a:	4607      	mov	r7, r0
 800d18c:	4698      	mov	r8, r3
 800d18e:	460c      	mov	r4, r1
 800d190:	f101 0014 	add.w	r0, r1, #20
 800d194:	2300      	movs	r3, #0
 800d196:	6805      	ldr	r5, [r0, #0]
 800d198:	b2a9      	uxth	r1, r5
 800d19a:	fb02 8101 	mla	r1, r2, r1, r8
 800d19e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d1a2:	0c2d      	lsrs	r5, r5, #16
 800d1a4:	fb02 c505 	mla	r5, r2, r5, ip
 800d1a8:	b289      	uxth	r1, r1
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d1b0:	429e      	cmp	r6, r3
 800d1b2:	f840 1b04 	str.w	r1, [r0], #4
 800d1b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d1ba:	dcec      	bgt.n	800d196 <__multadd+0x12>
 800d1bc:	f1b8 0f00 	cmp.w	r8, #0
 800d1c0:	d022      	beq.n	800d208 <__multadd+0x84>
 800d1c2:	68a3      	ldr	r3, [r4, #8]
 800d1c4:	42b3      	cmp	r3, r6
 800d1c6:	dc19      	bgt.n	800d1fc <__multadd+0x78>
 800d1c8:	6861      	ldr	r1, [r4, #4]
 800d1ca:	4638      	mov	r0, r7
 800d1cc:	3101      	adds	r1, #1
 800d1ce:	f7ff ff77 	bl	800d0c0 <_Balloc>
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	b928      	cbnz	r0, 800d1e2 <__multadd+0x5e>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	4b0d      	ldr	r3, [pc, #52]	; (800d210 <__multadd+0x8c>)
 800d1da:	480e      	ldr	r0, [pc, #56]	; (800d214 <__multadd+0x90>)
 800d1dc:	21b5      	movs	r1, #181	; 0xb5
 800d1de:	f001 fa87 	bl	800e6f0 <__assert_func>
 800d1e2:	6922      	ldr	r2, [r4, #16]
 800d1e4:	3202      	adds	r2, #2
 800d1e6:	f104 010c 	add.w	r1, r4, #12
 800d1ea:	0092      	lsls	r2, r2, #2
 800d1ec:	300c      	adds	r0, #12
 800d1ee:	f7fc ff3f 	bl	800a070 <memcpy>
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4638      	mov	r0, r7
 800d1f6:	f7ff ffa3 	bl	800d140 <_Bfree>
 800d1fa:	462c      	mov	r4, r5
 800d1fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d200:	3601      	adds	r6, #1
 800d202:	f8c3 8014 	str.w	r8, [r3, #20]
 800d206:	6126      	str	r6, [r4, #16]
 800d208:	4620      	mov	r0, r4
 800d20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20e:	bf00      	nop
 800d210:	08010a8c 	.word	0x08010a8c
 800d214:	08010b1c 	.word	0x08010b1c

0800d218 <__s2b>:
 800d218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d21c:	460c      	mov	r4, r1
 800d21e:	4615      	mov	r5, r2
 800d220:	461f      	mov	r7, r3
 800d222:	2209      	movs	r2, #9
 800d224:	3308      	adds	r3, #8
 800d226:	4606      	mov	r6, r0
 800d228:	fb93 f3f2 	sdiv	r3, r3, r2
 800d22c:	2100      	movs	r1, #0
 800d22e:	2201      	movs	r2, #1
 800d230:	429a      	cmp	r2, r3
 800d232:	db09      	blt.n	800d248 <__s2b+0x30>
 800d234:	4630      	mov	r0, r6
 800d236:	f7ff ff43 	bl	800d0c0 <_Balloc>
 800d23a:	b940      	cbnz	r0, 800d24e <__s2b+0x36>
 800d23c:	4602      	mov	r2, r0
 800d23e:	4b19      	ldr	r3, [pc, #100]	; (800d2a4 <__s2b+0x8c>)
 800d240:	4819      	ldr	r0, [pc, #100]	; (800d2a8 <__s2b+0x90>)
 800d242:	21ce      	movs	r1, #206	; 0xce
 800d244:	f001 fa54 	bl	800e6f0 <__assert_func>
 800d248:	0052      	lsls	r2, r2, #1
 800d24a:	3101      	adds	r1, #1
 800d24c:	e7f0      	b.n	800d230 <__s2b+0x18>
 800d24e:	9b08      	ldr	r3, [sp, #32]
 800d250:	6143      	str	r3, [r0, #20]
 800d252:	2d09      	cmp	r5, #9
 800d254:	f04f 0301 	mov.w	r3, #1
 800d258:	6103      	str	r3, [r0, #16]
 800d25a:	dd16      	ble.n	800d28a <__s2b+0x72>
 800d25c:	f104 0909 	add.w	r9, r4, #9
 800d260:	46c8      	mov	r8, r9
 800d262:	442c      	add	r4, r5
 800d264:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d268:	4601      	mov	r1, r0
 800d26a:	3b30      	subs	r3, #48	; 0x30
 800d26c:	220a      	movs	r2, #10
 800d26e:	4630      	mov	r0, r6
 800d270:	f7ff ff88 	bl	800d184 <__multadd>
 800d274:	45a0      	cmp	r8, r4
 800d276:	d1f5      	bne.n	800d264 <__s2b+0x4c>
 800d278:	f1a5 0408 	sub.w	r4, r5, #8
 800d27c:	444c      	add	r4, r9
 800d27e:	1b2d      	subs	r5, r5, r4
 800d280:	1963      	adds	r3, r4, r5
 800d282:	42bb      	cmp	r3, r7
 800d284:	db04      	blt.n	800d290 <__s2b+0x78>
 800d286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d28a:	340a      	adds	r4, #10
 800d28c:	2509      	movs	r5, #9
 800d28e:	e7f6      	b.n	800d27e <__s2b+0x66>
 800d290:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d294:	4601      	mov	r1, r0
 800d296:	3b30      	subs	r3, #48	; 0x30
 800d298:	220a      	movs	r2, #10
 800d29a:	4630      	mov	r0, r6
 800d29c:	f7ff ff72 	bl	800d184 <__multadd>
 800d2a0:	e7ee      	b.n	800d280 <__s2b+0x68>
 800d2a2:	bf00      	nop
 800d2a4:	08010a8c 	.word	0x08010a8c
 800d2a8:	08010b1c 	.word	0x08010b1c

0800d2ac <__hi0bits>:
 800d2ac:	0c03      	lsrs	r3, r0, #16
 800d2ae:	041b      	lsls	r3, r3, #16
 800d2b0:	b9d3      	cbnz	r3, 800d2e8 <__hi0bits+0x3c>
 800d2b2:	0400      	lsls	r0, r0, #16
 800d2b4:	2310      	movs	r3, #16
 800d2b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d2ba:	bf04      	itt	eq
 800d2bc:	0200      	lsleq	r0, r0, #8
 800d2be:	3308      	addeq	r3, #8
 800d2c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d2c4:	bf04      	itt	eq
 800d2c6:	0100      	lsleq	r0, r0, #4
 800d2c8:	3304      	addeq	r3, #4
 800d2ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d2ce:	bf04      	itt	eq
 800d2d0:	0080      	lsleq	r0, r0, #2
 800d2d2:	3302      	addeq	r3, #2
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	db05      	blt.n	800d2e4 <__hi0bits+0x38>
 800d2d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d2dc:	f103 0301 	add.w	r3, r3, #1
 800d2e0:	bf08      	it	eq
 800d2e2:	2320      	moveq	r3, #32
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	4770      	bx	lr
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	e7e4      	b.n	800d2b6 <__hi0bits+0xa>

0800d2ec <__lo0bits>:
 800d2ec:	6803      	ldr	r3, [r0, #0]
 800d2ee:	f013 0207 	ands.w	r2, r3, #7
 800d2f2:	4601      	mov	r1, r0
 800d2f4:	d00b      	beq.n	800d30e <__lo0bits+0x22>
 800d2f6:	07da      	lsls	r2, r3, #31
 800d2f8:	d424      	bmi.n	800d344 <__lo0bits+0x58>
 800d2fa:	0798      	lsls	r0, r3, #30
 800d2fc:	bf49      	itett	mi
 800d2fe:	085b      	lsrmi	r3, r3, #1
 800d300:	089b      	lsrpl	r3, r3, #2
 800d302:	2001      	movmi	r0, #1
 800d304:	600b      	strmi	r3, [r1, #0]
 800d306:	bf5c      	itt	pl
 800d308:	600b      	strpl	r3, [r1, #0]
 800d30a:	2002      	movpl	r0, #2
 800d30c:	4770      	bx	lr
 800d30e:	b298      	uxth	r0, r3
 800d310:	b9b0      	cbnz	r0, 800d340 <__lo0bits+0x54>
 800d312:	0c1b      	lsrs	r3, r3, #16
 800d314:	2010      	movs	r0, #16
 800d316:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d31a:	bf04      	itt	eq
 800d31c:	0a1b      	lsreq	r3, r3, #8
 800d31e:	3008      	addeq	r0, #8
 800d320:	071a      	lsls	r2, r3, #28
 800d322:	bf04      	itt	eq
 800d324:	091b      	lsreq	r3, r3, #4
 800d326:	3004      	addeq	r0, #4
 800d328:	079a      	lsls	r2, r3, #30
 800d32a:	bf04      	itt	eq
 800d32c:	089b      	lsreq	r3, r3, #2
 800d32e:	3002      	addeq	r0, #2
 800d330:	07da      	lsls	r2, r3, #31
 800d332:	d403      	bmi.n	800d33c <__lo0bits+0x50>
 800d334:	085b      	lsrs	r3, r3, #1
 800d336:	f100 0001 	add.w	r0, r0, #1
 800d33a:	d005      	beq.n	800d348 <__lo0bits+0x5c>
 800d33c:	600b      	str	r3, [r1, #0]
 800d33e:	4770      	bx	lr
 800d340:	4610      	mov	r0, r2
 800d342:	e7e8      	b.n	800d316 <__lo0bits+0x2a>
 800d344:	2000      	movs	r0, #0
 800d346:	4770      	bx	lr
 800d348:	2020      	movs	r0, #32
 800d34a:	4770      	bx	lr

0800d34c <__i2b>:
 800d34c:	b510      	push	{r4, lr}
 800d34e:	460c      	mov	r4, r1
 800d350:	2101      	movs	r1, #1
 800d352:	f7ff feb5 	bl	800d0c0 <_Balloc>
 800d356:	4602      	mov	r2, r0
 800d358:	b928      	cbnz	r0, 800d366 <__i2b+0x1a>
 800d35a:	4b05      	ldr	r3, [pc, #20]	; (800d370 <__i2b+0x24>)
 800d35c:	4805      	ldr	r0, [pc, #20]	; (800d374 <__i2b+0x28>)
 800d35e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d362:	f001 f9c5 	bl	800e6f0 <__assert_func>
 800d366:	2301      	movs	r3, #1
 800d368:	6144      	str	r4, [r0, #20]
 800d36a:	6103      	str	r3, [r0, #16]
 800d36c:	bd10      	pop	{r4, pc}
 800d36e:	bf00      	nop
 800d370:	08010a8c 	.word	0x08010a8c
 800d374:	08010b1c 	.word	0x08010b1c

0800d378 <__multiply>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	4614      	mov	r4, r2
 800d37e:	690a      	ldr	r2, [r1, #16]
 800d380:	6923      	ldr	r3, [r4, #16]
 800d382:	429a      	cmp	r2, r3
 800d384:	bfb8      	it	lt
 800d386:	460b      	movlt	r3, r1
 800d388:	460d      	mov	r5, r1
 800d38a:	bfbc      	itt	lt
 800d38c:	4625      	movlt	r5, r4
 800d38e:	461c      	movlt	r4, r3
 800d390:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d394:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d398:	68ab      	ldr	r3, [r5, #8]
 800d39a:	6869      	ldr	r1, [r5, #4]
 800d39c:	eb0a 0709 	add.w	r7, sl, r9
 800d3a0:	42bb      	cmp	r3, r7
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	bfb8      	it	lt
 800d3a6:	3101      	addlt	r1, #1
 800d3a8:	f7ff fe8a 	bl	800d0c0 <_Balloc>
 800d3ac:	b930      	cbnz	r0, 800d3bc <__multiply+0x44>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	4b42      	ldr	r3, [pc, #264]	; (800d4bc <__multiply+0x144>)
 800d3b2:	4843      	ldr	r0, [pc, #268]	; (800d4c0 <__multiply+0x148>)
 800d3b4:	f240 115d 	movw	r1, #349	; 0x15d
 800d3b8:	f001 f99a 	bl	800e6f0 <__assert_func>
 800d3bc:	f100 0614 	add.w	r6, r0, #20
 800d3c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d3c4:	4633      	mov	r3, r6
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	4543      	cmp	r3, r8
 800d3ca:	d31e      	bcc.n	800d40a <__multiply+0x92>
 800d3cc:	f105 0c14 	add.w	ip, r5, #20
 800d3d0:	f104 0314 	add.w	r3, r4, #20
 800d3d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d3d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d3dc:	9202      	str	r2, [sp, #8]
 800d3de:	ebac 0205 	sub.w	r2, ip, r5
 800d3e2:	3a15      	subs	r2, #21
 800d3e4:	f022 0203 	bic.w	r2, r2, #3
 800d3e8:	3204      	adds	r2, #4
 800d3ea:	f105 0115 	add.w	r1, r5, #21
 800d3ee:	458c      	cmp	ip, r1
 800d3f0:	bf38      	it	cc
 800d3f2:	2204      	movcc	r2, #4
 800d3f4:	9201      	str	r2, [sp, #4]
 800d3f6:	9a02      	ldr	r2, [sp, #8]
 800d3f8:	9303      	str	r3, [sp, #12]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d808      	bhi.n	800d410 <__multiply+0x98>
 800d3fe:	2f00      	cmp	r7, #0
 800d400:	dc55      	bgt.n	800d4ae <__multiply+0x136>
 800d402:	6107      	str	r7, [r0, #16]
 800d404:	b005      	add	sp, #20
 800d406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40a:	f843 2b04 	str.w	r2, [r3], #4
 800d40e:	e7db      	b.n	800d3c8 <__multiply+0x50>
 800d410:	f8b3 a000 	ldrh.w	sl, [r3]
 800d414:	f1ba 0f00 	cmp.w	sl, #0
 800d418:	d020      	beq.n	800d45c <__multiply+0xe4>
 800d41a:	f105 0e14 	add.w	lr, r5, #20
 800d41e:	46b1      	mov	r9, r6
 800d420:	2200      	movs	r2, #0
 800d422:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d426:	f8d9 b000 	ldr.w	fp, [r9]
 800d42a:	b2a1      	uxth	r1, r4
 800d42c:	fa1f fb8b 	uxth.w	fp, fp
 800d430:	fb0a b101 	mla	r1, sl, r1, fp
 800d434:	4411      	add	r1, r2
 800d436:	f8d9 2000 	ldr.w	r2, [r9]
 800d43a:	0c24      	lsrs	r4, r4, #16
 800d43c:	0c12      	lsrs	r2, r2, #16
 800d43e:	fb0a 2404 	mla	r4, sl, r4, r2
 800d442:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d446:	b289      	uxth	r1, r1
 800d448:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d44c:	45f4      	cmp	ip, lr
 800d44e:	f849 1b04 	str.w	r1, [r9], #4
 800d452:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d456:	d8e4      	bhi.n	800d422 <__multiply+0xaa>
 800d458:	9901      	ldr	r1, [sp, #4]
 800d45a:	5072      	str	r2, [r6, r1]
 800d45c:	9a03      	ldr	r2, [sp, #12]
 800d45e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d462:	3304      	adds	r3, #4
 800d464:	f1b9 0f00 	cmp.w	r9, #0
 800d468:	d01f      	beq.n	800d4aa <__multiply+0x132>
 800d46a:	6834      	ldr	r4, [r6, #0]
 800d46c:	f105 0114 	add.w	r1, r5, #20
 800d470:	46b6      	mov	lr, r6
 800d472:	f04f 0a00 	mov.w	sl, #0
 800d476:	880a      	ldrh	r2, [r1, #0]
 800d478:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d47c:	fb09 b202 	mla	r2, r9, r2, fp
 800d480:	4492      	add	sl, r2
 800d482:	b2a4      	uxth	r4, r4
 800d484:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d488:	f84e 4b04 	str.w	r4, [lr], #4
 800d48c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d490:	f8be 2000 	ldrh.w	r2, [lr]
 800d494:	0c24      	lsrs	r4, r4, #16
 800d496:	fb09 2404 	mla	r4, r9, r4, r2
 800d49a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d49e:	458c      	cmp	ip, r1
 800d4a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d4a4:	d8e7      	bhi.n	800d476 <__multiply+0xfe>
 800d4a6:	9a01      	ldr	r2, [sp, #4]
 800d4a8:	50b4      	str	r4, [r6, r2]
 800d4aa:	3604      	adds	r6, #4
 800d4ac:	e7a3      	b.n	800d3f6 <__multiply+0x7e>
 800d4ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1a5      	bne.n	800d402 <__multiply+0x8a>
 800d4b6:	3f01      	subs	r7, #1
 800d4b8:	e7a1      	b.n	800d3fe <__multiply+0x86>
 800d4ba:	bf00      	nop
 800d4bc:	08010a8c 	.word	0x08010a8c
 800d4c0:	08010b1c 	.word	0x08010b1c

0800d4c4 <__pow5mult>:
 800d4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c8:	4615      	mov	r5, r2
 800d4ca:	f012 0203 	ands.w	r2, r2, #3
 800d4ce:	4606      	mov	r6, r0
 800d4d0:	460f      	mov	r7, r1
 800d4d2:	d007      	beq.n	800d4e4 <__pow5mult+0x20>
 800d4d4:	4c25      	ldr	r4, [pc, #148]	; (800d56c <__pow5mult+0xa8>)
 800d4d6:	3a01      	subs	r2, #1
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4de:	f7ff fe51 	bl	800d184 <__multadd>
 800d4e2:	4607      	mov	r7, r0
 800d4e4:	10ad      	asrs	r5, r5, #2
 800d4e6:	d03d      	beq.n	800d564 <__pow5mult+0xa0>
 800d4e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4ea:	b97c      	cbnz	r4, 800d50c <__pow5mult+0x48>
 800d4ec:	2010      	movs	r0, #16
 800d4ee:	f7ff fdcd 	bl	800d08c <malloc>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	6270      	str	r0, [r6, #36]	; 0x24
 800d4f6:	b928      	cbnz	r0, 800d504 <__pow5mult+0x40>
 800d4f8:	4b1d      	ldr	r3, [pc, #116]	; (800d570 <__pow5mult+0xac>)
 800d4fa:	481e      	ldr	r0, [pc, #120]	; (800d574 <__pow5mult+0xb0>)
 800d4fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d500:	f001 f8f6 	bl	800e6f0 <__assert_func>
 800d504:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d508:	6004      	str	r4, [r0, #0]
 800d50a:	60c4      	str	r4, [r0, #12]
 800d50c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d510:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d514:	b94c      	cbnz	r4, 800d52a <__pow5mult+0x66>
 800d516:	f240 2171 	movw	r1, #625	; 0x271
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7ff ff16 	bl	800d34c <__i2b>
 800d520:	2300      	movs	r3, #0
 800d522:	f8c8 0008 	str.w	r0, [r8, #8]
 800d526:	4604      	mov	r4, r0
 800d528:	6003      	str	r3, [r0, #0]
 800d52a:	f04f 0900 	mov.w	r9, #0
 800d52e:	07eb      	lsls	r3, r5, #31
 800d530:	d50a      	bpl.n	800d548 <__pow5mult+0x84>
 800d532:	4639      	mov	r1, r7
 800d534:	4622      	mov	r2, r4
 800d536:	4630      	mov	r0, r6
 800d538:	f7ff ff1e 	bl	800d378 <__multiply>
 800d53c:	4639      	mov	r1, r7
 800d53e:	4680      	mov	r8, r0
 800d540:	4630      	mov	r0, r6
 800d542:	f7ff fdfd 	bl	800d140 <_Bfree>
 800d546:	4647      	mov	r7, r8
 800d548:	106d      	asrs	r5, r5, #1
 800d54a:	d00b      	beq.n	800d564 <__pow5mult+0xa0>
 800d54c:	6820      	ldr	r0, [r4, #0]
 800d54e:	b938      	cbnz	r0, 800d560 <__pow5mult+0x9c>
 800d550:	4622      	mov	r2, r4
 800d552:	4621      	mov	r1, r4
 800d554:	4630      	mov	r0, r6
 800d556:	f7ff ff0f 	bl	800d378 <__multiply>
 800d55a:	6020      	str	r0, [r4, #0]
 800d55c:	f8c0 9000 	str.w	r9, [r0]
 800d560:	4604      	mov	r4, r0
 800d562:	e7e4      	b.n	800d52e <__pow5mult+0x6a>
 800d564:	4638      	mov	r0, r7
 800d566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d56a:	bf00      	nop
 800d56c:	08010c70 	.word	0x08010c70
 800d570:	08010a16 	.word	0x08010a16
 800d574:	08010b1c 	.word	0x08010b1c

0800d578 <__lshift>:
 800d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d57c:	460c      	mov	r4, r1
 800d57e:	6849      	ldr	r1, [r1, #4]
 800d580:	6923      	ldr	r3, [r4, #16]
 800d582:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	4607      	mov	r7, r0
 800d58a:	4691      	mov	r9, r2
 800d58c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d590:	f108 0601 	add.w	r6, r8, #1
 800d594:	42b3      	cmp	r3, r6
 800d596:	db0b      	blt.n	800d5b0 <__lshift+0x38>
 800d598:	4638      	mov	r0, r7
 800d59a:	f7ff fd91 	bl	800d0c0 <_Balloc>
 800d59e:	4605      	mov	r5, r0
 800d5a0:	b948      	cbnz	r0, 800d5b6 <__lshift+0x3e>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	4b28      	ldr	r3, [pc, #160]	; (800d648 <__lshift+0xd0>)
 800d5a6:	4829      	ldr	r0, [pc, #164]	; (800d64c <__lshift+0xd4>)
 800d5a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d5ac:	f001 f8a0 	bl	800e6f0 <__assert_func>
 800d5b0:	3101      	adds	r1, #1
 800d5b2:	005b      	lsls	r3, r3, #1
 800d5b4:	e7ee      	b.n	800d594 <__lshift+0x1c>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	f100 0114 	add.w	r1, r0, #20
 800d5bc:	f100 0210 	add.w	r2, r0, #16
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	4553      	cmp	r3, sl
 800d5c4:	db33      	blt.n	800d62e <__lshift+0xb6>
 800d5c6:	6920      	ldr	r0, [r4, #16]
 800d5c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5cc:	f104 0314 	add.w	r3, r4, #20
 800d5d0:	f019 091f 	ands.w	r9, r9, #31
 800d5d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d5dc:	d02b      	beq.n	800d636 <__lshift+0xbe>
 800d5de:	f1c9 0e20 	rsb	lr, r9, #32
 800d5e2:	468a      	mov	sl, r1
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	6818      	ldr	r0, [r3, #0]
 800d5e8:	fa00 f009 	lsl.w	r0, r0, r9
 800d5ec:	4302      	orrs	r2, r0
 800d5ee:	f84a 2b04 	str.w	r2, [sl], #4
 800d5f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5f6:	459c      	cmp	ip, r3
 800d5f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5fc:	d8f3      	bhi.n	800d5e6 <__lshift+0x6e>
 800d5fe:	ebac 0304 	sub.w	r3, ip, r4
 800d602:	3b15      	subs	r3, #21
 800d604:	f023 0303 	bic.w	r3, r3, #3
 800d608:	3304      	adds	r3, #4
 800d60a:	f104 0015 	add.w	r0, r4, #21
 800d60e:	4584      	cmp	ip, r0
 800d610:	bf38      	it	cc
 800d612:	2304      	movcc	r3, #4
 800d614:	50ca      	str	r2, [r1, r3]
 800d616:	b10a      	cbz	r2, 800d61c <__lshift+0xa4>
 800d618:	f108 0602 	add.w	r6, r8, #2
 800d61c:	3e01      	subs	r6, #1
 800d61e:	4638      	mov	r0, r7
 800d620:	612e      	str	r6, [r5, #16]
 800d622:	4621      	mov	r1, r4
 800d624:	f7ff fd8c 	bl	800d140 <_Bfree>
 800d628:	4628      	mov	r0, r5
 800d62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d62e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d632:	3301      	adds	r3, #1
 800d634:	e7c5      	b.n	800d5c2 <__lshift+0x4a>
 800d636:	3904      	subs	r1, #4
 800d638:	f853 2b04 	ldr.w	r2, [r3], #4
 800d63c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d640:	459c      	cmp	ip, r3
 800d642:	d8f9      	bhi.n	800d638 <__lshift+0xc0>
 800d644:	e7ea      	b.n	800d61c <__lshift+0xa4>
 800d646:	bf00      	nop
 800d648:	08010a8c 	.word	0x08010a8c
 800d64c:	08010b1c 	.word	0x08010b1c

0800d650 <__mcmp>:
 800d650:	b530      	push	{r4, r5, lr}
 800d652:	6902      	ldr	r2, [r0, #16]
 800d654:	690c      	ldr	r4, [r1, #16]
 800d656:	1b12      	subs	r2, r2, r4
 800d658:	d10e      	bne.n	800d678 <__mcmp+0x28>
 800d65a:	f100 0314 	add.w	r3, r0, #20
 800d65e:	3114      	adds	r1, #20
 800d660:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d664:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d668:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d66c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d670:	42a5      	cmp	r5, r4
 800d672:	d003      	beq.n	800d67c <__mcmp+0x2c>
 800d674:	d305      	bcc.n	800d682 <__mcmp+0x32>
 800d676:	2201      	movs	r2, #1
 800d678:	4610      	mov	r0, r2
 800d67a:	bd30      	pop	{r4, r5, pc}
 800d67c:	4283      	cmp	r3, r0
 800d67e:	d3f3      	bcc.n	800d668 <__mcmp+0x18>
 800d680:	e7fa      	b.n	800d678 <__mcmp+0x28>
 800d682:	f04f 32ff 	mov.w	r2, #4294967295
 800d686:	e7f7      	b.n	800d678 <__mcmp+0x28>

0800d688 <__mdiff>:
 800d688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68c:	460c      	mov	r4, r1
 800d68e:	4606      	mov	r6, r0
 800d690:	4611      	mov	r1, r2
 800d692:	4620      	mov	r0, r4
 800d694:	4617      	mov	r7, r2
 800d696:	f7ff ffdb 	bl	800d650 <__mcmp>
 800d69a:	1e05      	subs	r5, r0, #0
 800d69c:	d110      	bne.n	800d6c0 <__mdiff+0x38>
 800d69e:	4629      	mov	r1, r5
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7ff fd0d 	bl	800d0c0 <_Balloc>
 800d6a6:	b930      	cbnz	r0, 800d6b6 <__mdiff+0x2e>
 800d6a8:	4b39      	ldr	r3, [pc, #228]	; (800d790 <__mdiff+0x108>)
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	f240 2132 	movw	r1, #562	; 0x232
 800d6b0:	4838      	ldr	r0, [pc, #224]	; (800d794 <__mdiff+0x10c>)
 800d6b2:	f001 f81d 	bl	800e6f0 <__assert_func>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c0:	bfa4      	itt	ge
 800d6c2:	463b      	movge	r3, r7
 800d6c4:	4627      	movge	r7, r4
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	6879      	ldr	r1, [r7, #4]
 800d6ca:	bfa6      	itte	ge
 800d6cc:	461c      	movge	r4, r3
 800d6ce:	2500      	movge	r5, #0
 800d6d0:	2501      	movlt	r5, #1
 800d6d2:	f7ff fcf5 	bl	800d0c0 <_Balloc>
 800d6d6:	b920      	cbnz	r0, 800d6e2 <__mdiff+0x5a>
 800d6d8:	4b2d      	ldr	r3, [pc, #180]	; (800d790 <__mdiff+0x108>)
 800d6da:	4602      	mov	r2, r0
 800d6dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d6e0:	e7e6      	b.n	800d6b0 <__mdiff+0x28>
 800d6e2:	693e      	ldr	r6, [r7, #16]
 800d6e4:	60c5      	str	r5, [r0, #12]
 800d6e6:	6925      	ldr	r5, [r4, #16]
 800d6e8:	f107 0114 	add.w	r1, r7, #20
 800d6ec:	f104 0914 	add.w	r9, r4, #20
 800d6f0:	f100 0e14 	add.w	lr, r0, #20
 800d6f4:	f107 0210 	add.w	r2, r7, #16
 800d6f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d6fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d700:	46f2      	mov	sl, lr
 800d702:	2700      	movs	r7, #0
 800d704:	f859 3b04 	ldr.w	r3, [r9], #4
 800d708:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d70c:	fa1f f883 	uxth.w	r8, r3
 800d710:	fa17 f78b 	uxtah	r7, r7, fp
 800d714:	0c1b      	lsrs	r3, r3, #16
 800d716:	eba7 0808 	sub.w	r8, r7, r8
 800d71a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d71e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d722:	fa1f f888 	uxth.w	r8, r8
 800d726:	141f      	asrs	r7, r3, #16
 800d728:	454d      	cmp	r5, r9
 800d72a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d72e:	f84a 3b04 	str.w	r3, [sl], #4
 800d732:	d8e7      	bhi.n	800d704 <__mdiff+0x7c>
 800d734:	1b2b      	subs	r3, r5, r4
 800d736:	3b15      	subs	r3, #21
 800d738:	f023 0303 	bic.w	r3, r3, #3
 800d73c:	3304      	adds	r3, #4
 800d73e:	3415      	adds	r4, #21
 800d740:	42a5      	cmp	r5, r4
 800d742:	bf38      	it	cc
 800d744:	2304      	movcc	r3, #4
 800d746:	4419      	add	r1, r3
 800d748:	4473      	add	r3, lr
 800d74a:	469e      	mov	lr, r3
 800d74c:	460d      	mov	r5, r1
 800d74e:	4565      	cmp	r5, ip
 800d750:	d30e      	bcc.n	800d770 <__mdiff+0xe8>
 800d752:	f10c 0203 	add.w	r2, ip, #3
 800d756:	1a52      	subs	r2, r2, r1
 800d758:	f022 0203 	bic.w	r2, r2, #3
 800d75c:	3903      	subs	r1, #3
 800d75e:	458c      	cmp	ip, r1
 800d760:	bf38      	it	cc
 800d762:	2200      	movcc	r2, #0
 800d764:	441a      	add	r2, r3
 800d766:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d76a:	b17b      	cbz	r3, 800d78c <__mdiff+0x104>
 800d76c:	6106      	str	r6, [r0, #16]
 800d76e:	e7a5      	b.n	800d6bc <__mdiff+0x34>
 800d770:	f855 8b04 	ldr.w	r8, [r5], #4
 800d774:	fa17 f488 	uxtah	r4, r7, r8
 800d778:	1422      	asrs	r2, r4, #16
 800d77a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d77e:	b2a4      	uxth	r4, r4
 800d780:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d784:	f84e 4b04 	str.w	r4, [lr], #4
 800d788:	1417      	asrs	r7, r2, #16
 800d78a:	e7e0      	b.n	800d74e <__mdiff+0xc6>
 800d78c:	3e01      	subs	r6, #1
 800d78e:	e7ea      	b.n	800d766 <__mdiff+0xde>
 800d790:	08010a8c 	.word	0x08010a8c
 800d794:	08010b1c 	.word	0x08010b1c

0800d798 <__ulp>:
 800d798:	b082      	sub	sp, #8
 800d79a:	ed8d 0b00 	vstr	d0, [sp]
 800d79e:	9b01      	ldr	r3, [sp, #4]
 800d7a0:	4912      	ldr	r1, [pc, #72]	; (800d7ec <__ulp+0x54>)
 800d7a2:	4019      	ands	r1, r3
 800d7a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d7a8:	2900      	cmp	r1, #0
 800d7aa:	dd05      	ble.n	800d7b8 <__ulp+0x20>
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	ec43 2b10 	vmov	d0, r2, r3
 800d7b4:	b002      	add	sp, #8
 800d7b6:	4770      	bx	lr
 800d7b8:	4249      	negs	r1, r1
 800d7ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d7be:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d7c2:	f04f 0200 	mov.w	r2, #0
 800d7c6:	f04f 0300 	mov.w	r3, #0
 800d7ca:	da04      	bge.n	800d7d6 <__ulp+0x3e>
 800d7cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d7d0:	fa41 f300 	asr.w	r3, r1, r0
 800d7d4:	e7ec      	b.n	800d7b0 <__ulp+0x18>
 800d7d6:	f1a0 0114 	sub.w	r1, r0, #20
 800d7da:	291e      	cmp	r1, #30
 800d7dc:	bfda      	itte	le
 800d7de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d7e2:	fa20 f101 	lsrle.w	r1, r0, r1
 800d7e6:	2101      	movgt	r1, #1
 800d7e8:	460a      	mov	r2, r1
 800d7ea:	e7e1      	b.n	800d7b0 <__ulp+0x18>
 800d7ec:	7ff00000 	.word	0x7ff00000

0800d7f0 <__b2d>:
 800d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f2:	6905      	ldr	r5, [r0, #16]
 800d7f4:	f100 0714 	add.w	r7, r0, #20
 800d7f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d7fc:	1f2e      	subs	r6, r5, #4
 800d7fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d802:	4620      	mov	r0, r4
 800d804:	f7ff fd52 	bl	800d2ac <__hi0bits>
 800d808:	f1c0 0320 	rsb	r3, r0, #32
 800d80c:	280a      	cmp	r0, #10
 800d80e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d88c <__b2d+0x9c>
 800d812:	600b      	str	r3, [r1, #0]
 800d814:	dc14      	bgt.n	800d840 <__b2d+0x50>
 800d816:	f1c0 0e0b 	rsb	lr, r0, #11
 800d81a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d81e:	42b7      	cmp	r7, r6
 800d820:	ea41 030c 	orr.w	r3, r1, ip
 800d824:	bf34      	ite	cc
 800d826:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d82a:	2100      	movcs	r1, #0
 800d82c:	3015      	adds	r0, #21
 800d82e:	fa04 f000 	lsl.w	r0, r4, r0
 800d832:	fa21 f10e 	lsr.w	r1, r1, lr
 800d836:	ea40 0201 	orr.w	r2, r0, r1
 800d83a:	ec43 2b10 	vmov	d0, r2, r3
 800d83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d840:	42b7      	cmp	r7, r6
 800d842:	bf3a      	itte	cc
 800d844:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d848:	f1a5 0608 	subcc.w	r6, r5, #8
 800d84c:	2100      	movcs	r1, #0
 800d84e:	380b      	subs	r0, #11
 800d850:	d017      	beq.n	800d882 <__b2d+0x92>
 800d852:	f1c0 0c20 	rsb	ip, r0, #32
 800d856:	fa04 f500 	lsl.w	r5, r4, r0
 800d85a:	42be      	cmp	r6, r7
 800d85c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d860:	ea45 0504 	orr.w	r5, r5, r4
 800d864:	bf8c      	ite	hi
 800d866:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d86a:	2400      	movls	r4, #0
 800d86c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d870:	fa01 f000 	lsl.w	r0, r1, r0
 800d874:	fa24 f40c 	lsr.w	r4, r4, ip
 800d878:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d87c:	ea40 0204 	orr.w	r2, r0, r4
 800d880:	e7db      	b.n	800d83a <__b2d+0x4a>
 800d882:	ea44 030c 	orr.w	r3, r4, ip
 800d886:	460a      	mov	r2, r1
 800d888:	e7d7      	b.n	800d83a <__b2d+0x4a>
 800d88a:	bf00      	nop
 800d88c:	3ff00000 	.word	0x3ff00000

0800d890 <__d2b>:
 800d890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d894:	4689      	mov	r9, r1
 800d896:	2101      	movs	r1, #1
 800d898:	ec57 6b10 	vmov	r6, r7, d0
 800d89c:	4690      	mov	r8, r2
 800d89e:	f7ff fc0f 	bl	800d0c0 <_Balloc>
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	b930      	cbnz	r0, 800d8b4 <__d2b+0x24>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	4b25      	ldr	r3, [pc, #148]	; (800d940 <__d2b+0xb0>)
 800d8aa:	4826      	ldr	r0, [pc, #152]	; (800d944 <__d2b+0xb4>)
 800d8ac:	f240 310a 	movw	r1, #778	; 0x30a
 800d8b0:	f000 ff1e 	bl	800e6f0 <__assert_func>
 800d8b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d8b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d8bc:	bb35      	cbnz	r5, 800d90c <__d2b+0x7c>
 800d8be:	2e00      	cmp	r6, #0
 800d8c0:	9301      	str	r3, [sp, #4]
 800d8c2:	d028      	beq.n	800d916 <__d2b+0x86>
 800d8c4:	4668      	mov	r0, sp
 800d8c6:	9600      	str	r6, [sp, #0]
 800d8c8:	f7ff fd10 	bl	800d2ec <__lo0bits>
 800d8cc:	9900      	ldr	r1, [sp, #0]
 800d8ce:	b300      	cbz	r0, 800d912 <__d2b+0x82>
 800d8d0:	9a01      	ldr	r2, [sp, #4]
 800d8d2:	f1c0 0320 	rsb	r3, r0, #32
 800d8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8da:	430b      	orrs	r3, r1
 800d8dc:	40c2      	lsrs	r2, r0
 800d8de:	6163      	str	r3, [r4, #20]
 800d8e0:	9201      	str	r2, [sp, #4]
 800d8e2:	9b01      	ldr	r3, [sp, #4]
 800d8e4:	61a3      	str	r3, [r4, #24]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	bf14      	ite	ne
 800d8ea:	2202      	movne	r2, #2
 800d8ec:	2201      	moveq	r2, #1
 800d8ee:	6122      	str	r2, [r4, #16]
 800d8f0:	b1d5      	cbz	r5, 800d928 <__d2b+0x98>
 800d8f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d8f6:	4405      	add	r5, r0
 800d8f8:	f8c9 5000 	str.w	r5, [r9]
 800d8fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d900:	f8c8 0000 	str.w	r0, [r8]
 800d904:	4620      	mov	r0, r4
 800d906:	b003      	add	sp, #12
 800d908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d90c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d910:	e7d5      	b.n	800d8be <__d2b+0x2e>
 800d912:	6161      	str	r1, [r4, #20]
 800d914:	e7e5      	b.n	800d8e2 <__d2b+0x52>
 800d916:	a801      	add	r0, sp, #4
 800d918:	f7ff fce8 	bl	800d2ec <__lo0bits>
 800d91c:	9b01      	ldr	r3, [sp, #4]
 800d91e:	6163      	str	r3, [r4, #20]
 800d920:	2201      	movs	r2, #1
 800d922:	6122      	str	r2, [r4, #16]
 800d924:	3020      	adds	r0, #32
 800d926:	e7e3      	b.n	800d8f0 <__d2b+0x60>
 800d928:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d92c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d930:	f8c9 0000 	str.w	r0, [r9]
 800d934:	6918      	ldr	r0, [r3, #16]
 800d936:	f7ff fcb9 	bl	800d2ac <__hi0bits>
 800d93a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d93e:	e7df      	b.n	800d900 <__d2b+0x70>
 800d940:	08010a8c 	.word	0x08010a8c
 800d944:	08010b1c 	.word	0x08010b1c

0800d948 <__ratio>:
 800d948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d94c:	4688      	mov	r8, r1
 800d94e:	4669      	mov	r1, sp
 800d950:	4681      	mov	r9, r0
 800d952:	f7ff ff4d 	bl	800d7f0 <__b2d>
 800d956:	a901      	add	r1, sp, #4
 800d958:	4640      	mov	r0, r8
 800d95a:	ec55 4b10 	vmov	r4, r5, d0
 800d95e:	f7ff ff47 	bl	800d7f0 <__b2d>
 800d962:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d966:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d96a:	eba3 0c02 	sub.w	ip, r3, r2
 800d96e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d972:	1a9b      	subs	r3, r3, r2
 800d974:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d978:	ec51 0b10 	vmov	r0, r1, d0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	bfd6      	itet	le
 800d980:	460a      	movle	r2, r1
 800d982:	462a      	movgt	r2, r5
 800d984:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d988:	468b      	mov	fp, r1
 800d98a:	462f      	mov	r7, r5
 800d98c:	bfd4      	ite	le
 800d98e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d992:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d996:	4620      	mov	r0, r4
 800d998:	ee10 2a10 	vmov	r2, s0
 800d99c:	465b      	mov	r3, fp
 800d99e:	4639      	mov	r1, r7
 800d9a0:	f7f2 ff5c 	bl	800085c <__aeabi_ddiv>
 800d9a4:	ec41 0b10 	vmov	d0, r0, r1
 800d9a8:	b003      	add	sp, #12
 800d9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9ae <__copybits>:
 800d9ae:	3901      	subs	r1, #1
 800d9b0:	b570      	push	{r4, r5, r6, lr}
 800d9b2:	1149      	asrs	r1, r1, #5
 800d9b4:	6914      	ldr	r4, [r2, #16]
 800d9b6:	3101      	adds	r1, #1
 800d9b8:	f102 0314 	add.w	r3, r2, #20
 800d9bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d9c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9c4:	1f05      	subs	r5, r0, #4
 800d9c6:	42a3      	cmp	r3, r4
 800d9c8:	d30c      	bcc.n	800d9e4 <__copybits+0x36>
 800d9ca:	1aa3      	subs	r3, r4, r2
 800d9cc:	3b11      	subs	r3, #17
 800d9ce:	f023 0303 	bic.w	r3, r3, #3
 800d9d2:	3211      	adds	r2, #17
 800d9d4:	42a2      	cmp	r2, r4
 800d9d6:	bf88      	it	hi
 800d9d8:	2300      	movhi	r3, #0
 800d9da:	4418      	add	r0, r3
 800d9dc:	2300      	movs	r3, #0
 800d9de:	4288      	cmp	r0, r1
 800d9e0:	d305      	bcc.n	800d9ee <__copybits+0x40>
 800d9e2:	bd70      	pop	{r4, r5, r6, pc}
 800d9e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d9e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d9ec:	e7eb      	b.n	800d9c6 <__copybits+0x18>
 800d9ee:	f840 3b04 	str.w	r3, [r0], #4
 800d9f2:	e7f4      	b.n	800d9de <__copybits+0x30>

0800d9f4 <__any_on>:
 800d9f4:	f100 0214 	add.w	r2, r0, #20
 800d9f8:	6900      	ldr	r0, [r0, #16]
 800d9fa:	114b      	asrs	r3, r1, #5
 800d9fc:	4298      	cmp	r0, r3
 800d9fe:	b510      	push	{r4, lr}
 800da00:	db11      	blt.n	800da26 <__any_on+0x32>
 800da02:	dd0a      	ble.n	800da1a <__any_on+0x26>
 800da04:	f011 011f 	ands.w	r1, r1, #31
 800da08:	d007      	beq.n	800da1a <__any_on+0x26>
 800da0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da0e:	fa24 f001 	lsr.w	r0, r4, r1
 800da12:	fa00 f101 	lsl.w	r1, r0, r1
 800da16:	428c      	cmp	r4, r1
 800da18:	d10b      	bne.n	800da32 <__any_on+0x3e>
 800da1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da1e:	4293      	cmp	r3, r2
 800da20:	d803      	bhi.n	800da2a <__any_on+0x36>
 800da22:	2000      	movs	r0, #0
 800da24:	bd10      	pop	{r4, pc}
 800da26:	4603      	mov	r3, r0
 800da28:	e7f7      	b.n	800da1a <__any_on+0x26>
 800da2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da2e:	2900      	cmp	r1, #0
 800da30:	d0f5      	beq.n	800da1e <__any_on+0x2a>
 800da32:	2001      	movs	r0, #1
 800da34:	e7f6      	b.n	800da24 <__any_on+0x30>

0800da36 <_calloc_r>:
 800da36:	b513      	push	{r0, r1, r4, lr}
 800da38:	434a      	muls	r2, r1
 800da3a:	4611      	mov	r1, r2
 800da3c:	9201      	str	r2, [sp, #4]
 800da3e:	f000 f859 	bl	800daf4 <_malloc_r>
 800da42:	4604      	mov	r4, r0
 800da44:	b118      	cbz	r0, 800da4e <_calloc_r+0x18>
 800da46:	9a01      	ldr	r2, [sp, #4]
 800da48:	2100      	movs	r1, #0
 800da4a:	f7fc fb1f 	bl	800a08c <memset>
 800da4e:	4620      	mov	r0, r4
 800da50:	b002      	add	sp, #8
 800da52:	bd10      	pop	{r4, pc}

0800da54 <_free_r>:
 800da54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da56:	2900      	cmp	r1, #0
 800da58:	d048      	beq.n	800daec <_free_r+0x98>
 800da5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da5e:	9001      	str	r0, [sp, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	f1a1 0404 	sub.w	r4, r1, #4
 800da66:	bfb8      	it	lt
 800da68:	18e4      	addlt	r4, r4, r3
 800da6a:	f001 f845 	bl	800eaf8 <__malloc_lock>
 800da6e:	4a20      	ldr	r2, [pc, #128]	; (800daf0 <_free_r+0x9c>)
 800da70:	9801      	ldr	r0, [sp, #4]
 800da72:	6813      	ldr	r3, [r2, #0]
 800da74:	4615      	mov	r5, r2
 800da76:	b933      	cbnz	r3, 800da86 <_free_r+0x32>
 800da78:	6063      	str	r3, [r4, #4]
 800da7a:	6014      	str	r4, [r2, #0]
 800da7c:	b003      	add	sp, #12
 800da7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da82:	f001 b83f 	b.w	800eb04 <__malloc_unlock>
 800da86:	42a3      	cmp	r3, r4
 800da88:	d90b      	bls.n	800daa2 <_free_r+0x4e>
 800da8a:	6821      	ldr	r1, [r4, #0]
 800da8c:	1862      	adds	r2, r4, r1
 800da8e:	4293      	cmp	r3, r2
 800da90:	bf04      	itt	eq
 800da92:	681a      	ldreq	r2, [r3, #0]
 800da94:	685b      	ldreq	r3, [r3, #4]
 800da96:	6063      	str	r3, [r4, #4]
 800da98:	bf04      	itt	eq
 800da9a:	1852      	addeq	r2, r2, r1
 800da9c:	6022      	streq	r2, [r4, #0]
 800da9e:	602c      	str	r4, [r5, #0]
 800daa0:	e7ec      	b.n	800da7c <_free_r+0x28>
 800daa2:	461a      	mov	r2, r3
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	b10b      	cbz	r3, 800daac <_free_r+0x58>
 800daa8:	42a3      	cmp	r3, r4
 800daaa:	d9fa      	bls.n	800daa2 <_free_r+0x4e>
 800daac:	6811      	ldr	r1, [r2, #0]
 800daae:	1855      	adds	r5, r2, r1
 800dab0:	42a5      	cmp	r5, r4
 800dab2:	d10b      	bne.n	800dacc <_free_r+0x78>
 800dab4:	6824      	ldr	r4, [r4, #0]
 800dab6:	4421      	add	r1, r4
 800dab8:	1854      	adds	r4, r2, r1
 800daba:	42a3      	cmp	r3, r4
 800dabc:	6011      	str	r1, [r2, #0]
 800dabe:	d1dd      	bne.n	800da7c <_free_r+0x28>
 800dac0:	681c      	ldr	r4, [r3, #0]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	6053      	str	r3, [r2, #4]
 800dac6:	4421      	add	r1, r4
 800dac8:	6011      	str	r1, [r2, #0]
 800daca:	e7d7      	b.n	800da7c <_free_r+0x28>
 800dacc:	d902      	bls.n	800dad4 <_free_r+0x80>
 800dace:	230c      	movs	r3, #12
 800dad0:	6003      	str	r3, [r0, #0]
 800dad2:	e7d3      	b.n	800da7c <_free_r+0x28>
 800dad4:	6825      	ldr	r5, [r4, #0]
 800dad6:	1961      	adds	r1, r4, r5
 800dad8:	428b      	cmp	r3, r1
 800dada:	bf04      	itt	eq
 800dadc:	6819      	ldreq	r1, [r3, #0]
 800dade:	685b      	ldreq	r3, [r3, #4]
 800dae0:	6063      	str	r3, [r4, #4]
 800dae2:	bf04      	itt	eq
 800dae4:	1949      	addeq	r1, r1, r5
 800dae6:	6021      	streq	r1, [r4, #0]
 800dae8:	6054      	str	r4, [r2, #4]
 800daea:	e7c7      	b.n	800da7c <_free_r+0x28>
 800daec:	b003      	add	sp, #12
 800daee:	bd30      	pop	{r4, r5, pc}
 800daf0:	20004cac 	.word	0x20004cac

0800daf4 <_malloc_r>:
 800daf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf6:	1ccd      	adds	r5, r1, #3
 800daf8:	f025 0503 	bic.w	r5, r5, #3
 800dafc:	3508      	adds	r5, #8
 800dafe:	2d0c      	cmp	r5, #12
 800db00:	bf38      	it	cc
 800db02:	250c      	movcc	r5, #12
 800db04:	2d00      	cmp	r5, #0
 800db06:	4606      	mov	r6, r0
 800db08:	db01      	blt.n	800db0e <_malloc_r+0x1a>
 800db0a:	42a9      	cmp	r1, r5
 800db0c:	d903      	bls.n	800db16 <_malloc_r+0x22>
 800db0e:	230c      	movs	r3, #12
 800db10:	6033      	str	r3, [r6, #0]
 800db12:	2000      	movs	r0, #0
 800db14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db16:	f000 ffef 	bl	800eaf8 <__malloc_lock>
 800db1a:	4921      	ldr	r1, [pc, #132]	; (800dba0 <_malloc_r+0xac>)
 800db1c:	680a      	ldr	r2, [r1, #0]
 800db1e:	4614      	mov	r4, r2
 800db20:	b99c      	cbnz	r4, 800db4a <_malloc_r+0x56>
 800db22:	4f20      	ldr	r7, [pc, #128]	; (800dba4 <_malloc_r+0xb0>)
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	b923      	cbnz	r3, 800db32 <_malloc_r+0x3e>
 800db28:	4621      	mov	r1, r4
 800db2a:	4630      	mov	r0, r6
 800db2c:	f000 fcd0 	bl	800e4d0 <_sbrk_r>
 800db30:	6038      	str	r0, [r7, #0]
 800db32:	4629      	mov	r1, r5
 800db34:	4630      	mov	r0, r6
 800db36:	f000 fccb 	bl	800e4d0 <_sbrk_r>
 800db3a:	1c43      	adds	r3, r0, #1
 800db3c:	d123      	bne.n	800db86 <_malloc_r+0x92>
 800db3e:	230c      	movs	r3, #12
 800db40:	6033      	str	r3, [r6, #0]
 800db42:	4630      	mov	r0, r6
 800db44:	f000 ffde 	bl	800eb04 <__malloc_unlock>
 800db48:	e7e3      	b.n	800db12 <_malloc_r+0x1e>
 800db4a:	6823      	ldr	r3, [r4, #0]
 800db4c:	1b5b      	subs	r3, r3, r5
 800db4e:	d417      	bmi.n	800db80 <_malloc_r+0x8c>
 800db50:	2b0b      	cmp	r3, #11
 800db52:	d903      	bls.n	800db5c <_malloc_r+0x68>
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	441c      	add	r4, r3
 800db58:	6025      	str	r5, [r4, #0]
 800db5a:	e004      	b.n	800db66 <_malloc_r+0x72>
 800db5c:	6863      	ldr	r3, [r4, #4]
 800db5e:	42a2      	cmp	r2, r4
 800db60:	bf0c      	ite	eq
 800db62:	600b      	streq	r3, [r1, #0]
 800db64:	6053      	strne	r3, [r2, #4]
 800db66:	4630      	mov	r0, r6
 800db68:	f000 ffcc 	bl	800eb04 <__malloc_unlock>
 800db6c:	f104 000b 	add.w	r0, r4, #11
 800db70:	1d23      	adds	r3, r4, #4
 800db72:	f020 0007 	bic.w	r0, r0, #7
 800db76:	1ac2      	subs	r2, r0, r3
 800db78:	d0cc      	beq.n	800db14 <_malloc_r+0x20>
 800db7a:	1a1b      	subs	r3, r3, r0
 800db7c:	50a3      	str	r3, [r4, r2]
 800db7e:	e7c9      	b.n	800db14 <_malloc_r+0x20>
 800db80:	4622      	mov	r2, r4
 800db82:	6864      	ldr	r4, [r4, #4]
 800db84:	e7cc      	b.n	800db20 <_malloc_r+0x2c>
 800db86:	1cc4      	adds	r4, r0, #3
 800db88:	f024 0403 	bic.w	r4, r4, #3
 800db8c:	42a0      	cmp	r0, r4
 800db8e:	d0e3      	beq.n	800db58 <_malloc_r+0x64>
 800db90:	1a21      	subs	r1, r4, r0
 800db92:	4630      	mov	r0, r6
 800db94:	f000 fc9c 	bl	800e4d0 <_sbrk_r>
 800db98:	3001      	adds	r0, #1
 800db9a:	d1dd      	bne.n	800db58 <_malloc_r+0x64>
 800db9c:	e7cf      	b.n	800db3e <_malloc_r+0x4a>
 800db9e:	bf00      	nop
 800dba0:	20004cac 	.word	0x20004cac
 800dba4:	20004cb0 	.word	0x20004cb0

0800dba8 <__ssputs_r>:
 800dba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbac:	688e      	ldr	r6, [r1, #8]
 800dbae:	429e      	cmp	r6, r3
 800dbb0:	4682      	mov	sl, r0
 800dbb2:	460c      	mov	r4, r1
 800dbb4:	4690      	mov	r8, r2
 800dbb6:	461f      	mov	r7, r3
 800dbb8:	d838      	bhi.n	800dc2c <__ssputs_r+0x84>
 800dbba:	898a      	ldrh	r2, [r1, #12]
 800dbbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbc0:	d032      	beq.n	800dc28 <__ssputs_r+0x80>
 800dbc2:	6825      	ldr	r5, [r4, #0]
 800dbc4:	6909      	ldr	r1, [r1, #16]
 800dbc6:	eba5 0901 	sub.w	r9, r5, r1
 800dbca:	6965      	ldr	r5, [r4, #20]
 800dbcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	444b      	add	r3, r9
 800dbd8:	106d      	asrs	r5, r5, #1
 800dbda:	429d      	cmp	r5, r3
 800dbdc:	bf38      	it	cc
 800dbde:	461d      	movcc	r5, r3
 800dbe0:	0553      	lsls	r3, r2, #21
 800dbe2:	d531      	bpl.n	800dc48 <__ssputs_r+0xa0>
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	f7ff ff85 	bl	800daf4 <_malloc_r>
 800dbea:	4606      	mov	r6, r0
 800dbec:	b950      	cbnz	r0, 800dc04 <__ssputs_r+0x5c>
 800dbee:	230c      	movs	r3, #12
 800dbf0:	f8ca 3000 	str.w	r3, [sl]
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbfa:	81a3      	strh	r3, [r4, #12]
 800dbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc04:	6921      	ldr	r1, [r4, #16]
 800dc06:	464a      	mov	r2, r9
 800dc08:	f7fc fa32 	bl	800a070 <memcpy>
 800dc0c:	89a3      	ldrh	r3, [r4, #12]
 800dc0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc16:	81a3      	strh	r3, [r4, #12]
 800dc18:	6126      	str	r6, [r4, #16]
 800dc1a:	6165      	str	r5, [r4, #20]
 800dc1c:	444e      	add	r6, r9
 800dc1e:	eba5 0509 	sub.w	r5, r5, r9
 800dc22:	6026      	str	r6, [r4, #0]
 800dc24:	60a5      	str	r5, [r4, #8]
 800dc26:	463e      	mov	r6, r7
 800dc28:	42be      	cmp	r6, r7
 800dc2a:	d900      	bls.n	800dc2e <__ssputs_r+0x86>
 800dc2c:	463e      	mov	r6, r7
 800dc2e:	4632      	mov	r2, r6
 800dc30:	6820      	ldr	r0, [r4, #0]
 800dc32:	4641      	mov	r1, r8
 800dc34:	f000 ff46 	bl	800eac4 <memmove>
 800dc38:	68a3      	ldr	r3, [r4, #8]
 800dc3a:	6822      	ldr	r2, [r4, #0]
 800dc3c:	1b9b      	subs	r3, r3, r6
 800dc3e:	4432      	add	r2, r6
 800dc40:	60a3      	str	r3, [r4, #8]
 800dc42:	6022      	str	r2, [r4, #0]
 800dc44:	2000      	movs	r0, #0
 800dc46:	e7db      	b.n	800dc00 <__ssputs_r+0x58>
 800dc48:	462a      	mov	r2, r5
 800dc4a:	f000 ff61 	bl	800eb10 <_realloc_r>
 800dc4e:	4606      	mov	r6, r0
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d1e1      	bne.n	800dc18 <__ssputs_r+0x70>
 800dc54:	6921      	ldr	r1, [r4, #16]
 800dc56:	4650      	mov	r0, sl
 800dc58:	f7ff fefc 	bl	800da54 <_free_r>
 800dc5c:	e7c7      	b.n	800dbee <__ssputs_r+0x46>
	...

0800dc60 <_svfiprintf_r>:
 800dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc64:	4698      	mov	r8, r3
 800dc66:	898b      	ldrh	r3, [r1, #12]
 800dc68:	061b      	lsls	r3, r3, #24
 800dc6a:	b09d      	sub	sp, #116	; 0x74
 800dc6c:	4607      	mov	r7, r0
 800dc6e:	460d      	mov	r5, r1
 800dc70:	4614      	mov	r4, r2
 800dc72:	d50e      	bpl.n	800dc92 <_svfiprintf_r+0x32>
 800dc74:	690b      	ldr	r3, [r1, #16]
 800dc76:	b963      	cbnz	r3, 800dc92 <_svfiprintf_r+0x32>
 800dc78:	2140      	movs	r1, #64	; 0x40
 800dc7a:	f7ff ff3b 	bl	800daf4 <_malloc_r>
 800dc7e:	6028      	str	r0, [r5, #0]
 800dc80:	6128      	str	r0, [r5, #16]
 800dc82:	b920      	cbnz	r0, 800dc8e <_svfiprintf_r+0x2e>
 800dc84:	230c      	movs	r3, #12
 800dc86:	603b      	str	r3, [r7, #0]
 800dc88:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8c:	e0d1      	b.n	800de32 <_svfiprintf_r+0x1d2>
 800dc8e:	2340      	movs	r3, #64	; 0x40
 800dc90:	616b      	str	r3, [r5, #20]
 800dc92:	2300      	movs	r3, #0
 800dc94:	9309      	str	r3, [sp, #36]	; 0x24
 800dc96:	2320      	movs	r3, #32
 800dc98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dca0:	2330      	movs	r3, #48	; 0x30
 800dca2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de4c <_svfiprintf_r+0x1ec>
 800dca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcaa:	f04f 0901 	mov.w	r9, #1
 800dcae:	4623      	mov	r3, r4
 800dcb0:	469a      	mov	sl, r3
 800dcb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcb6:	b10a      	cbz	r2, 800dcbc <_svfiprintf_r+0x5c>
 800dcb8:	2a25      	cmp	r2, #37	; 0x25
 800dcba:	d1f9      	bne.n	800dcb0 <_svfiprintf_r+0x50>
 800dcbc:	ebba 0b04 	subs.w	fp, sl, r4
 800dcc0:	d00b      	beq.n	800dcda <_svfiprintf_r+0x7a>
 800dcc2:	465b      	mov	r3, fp
 800dcc4:	4622      	mov	r2, r4
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	4638      	mov	r0, r7
 800dcca:	f7ff ff6d 	bl	800dba8 <__ssputs_r>
 800dcce:	3001      	adds	r0, #1
 800dcd0:	f000 80aa 	beq.w	800de28 <_svfiprintf_r+0x1c8>
 800dcd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcd6:	445a      	add	r2, fp
 800dcd8:	9209      	str	r2, [sp, #36]	; 0x24
 800dcda:	f89a 3000 	ldrb.w	r3, [sl]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f000 80a2 	beq.w	800de28 <_svfiprintf_r+0x1c8>
 800dce4:	2300      	movs	r3, #0
 800dce6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcee:	f10a 0a01 	add.w	sl, sl, #1
 800dcf2:	9304      	str	r3, [sp, #16]
 800dcf4:	9307      	str	r3, [sp, #28]
 800dcf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcfa:	931a      	str	r3, [sp, #104]	; 0x68
 800dcfc:	4654      	mov	r4, sl
 800dcfe:	2205      	movs	r2, #5
 800dd00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd04:	4851      	ldr	r0, [pc, #324]	; (800de4c <_svfiprintf_r+0x1ec>)
 800dd06:	f7f2 fa73 	bl	80001f0 <memchr>
 800dd0a:	9a04      	ldr	r2, [sp, #16]
 800dd0c:	b9d8      	cbnz	r0, 800dd46 <_svfiprintf_r+0xe6>
 800dd0e:	06d0      	lsls	r0, r2, #27
 800dd10:	bf44      	itt	mi
 800dd12:	2320      	movmi	r3, #32
 800dd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd18:	0711      	lsls	r1, r2, #28
 800dd1a:	bf44      	itt	mi
 800dd1c:	232b      	movmi	r3, #43	; 0x2b
 800dd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd22:	f89a 3000 	ldrb.w	r3, [sl]
 800dd26:	2b2a      	cmp	r3, #42	; 0x2a
 800dd28:	d015      	beq.n	800dd56 <_svfiprintf_r+0xf6>
 800dd2a:	9a07      	ldr	r2, [sp, #28]
 800dd2c:	4654      	mov	r4, sl
 800dd2e:	2000      	movs	r0, #0
 800dd30:	f04f 0c0a 	mov.w	ip, #10
 800dd34:	4621      	mov	r1, r4
 800dd36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd3a:	3b30      	subs	r3, #48	; 0x30
 800dd3c:	2b09      	cmp	r3, #9
 800dd3e:	d94e      	bls.n	800ddde <_svfiprintf_r+0x17e>
 800dd40:	b1b0      	cbz	r0, 800dd70 <_svfiprintf_r+0x110>
 800dd42:	9207      	str	r2, [sp, #28]
 800dd44:	e014      	b.n	800dd70 <_svfiprintf_r+0x110>
 800dd46:	eba0 0308 	sub.w	r3, r0, r8
 800dd4a:	fa09 f303 	lsl.w	r3, r9, r3
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	9304      	str	r3, [sp, #16]
 800dd52:	46a2      	mov	sl, r4
 800dd54:	e7d2      	b.n	800dcfc <_svfiprintf_r+0x9c>
 800dd56:	9b03      	ldr	r3, [sp, #12]
 800dd58:	1d19      	adds	r1, r3, #4
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	9103      	str	r1, [sp, #12]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	bfbb      	ittet	lt
 800dd62:	425b      	neglt	r3, r3
 800dd64:	f042 0202 	orrlt.w	r2, r2, #2
 800dd68:	9307      	strge	r3, [sp, #28]
 800dd6a:	9307      	strlt	r3, [sp, #28]
 800dd6c:	bfb8      	it	lt
 800dd6e:	9204      	strlt	r2, [sp, #16]
 800dd70:	7823      	ldrb	r3, [r4, #0]
 800dd72:	2b2e      	cmp	r3, #46	; 0x2e
 800dd74:	d10c      	bne.n	800dd90 <_svfiprintf_r+0x130>
 800dd76:	7863      	ldrb	r3, [r4, #1]
 800dd78:	2b2a      	cmp	r3, #42	; 0x2a
 800dd7a:	d135      	bne.n	800dde8 <_svfiprintf_r+0x188>
 800dd7c:	9b03      	ldr	r3, [sp, #12]
 800dd7e:	1d1a      	adds	r2, r3, #4
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	9203      	str	r2, [sp, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	bfb8      	it	lt
 800dd88:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd8c:	3402      	adds	r4, #2
 800dd8e:	9305      	str	r3, [sp, #20]
 800dd90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de5c <_svfiprintf_r+0x1fc>
 800dd94:	7821      	ldrb	r1, [r4, #0]
 800dd96:	2203      	movs	r2, #3
 800dd98:	4650      	mov	r0, sl
 800dd9a:	f7f2 fa29 	bl	80001f0 <memchr>
 800dd9e:	b140      	cbz	r0, 800ddb2 <_svfiprintf_r+0x152>
 800dda0:	2340      	movs	r3, #64	; 0x40
 800dda2:	eba0 000a 	sub.w	r0, r0, sl
 800dda6:	fa03 f000 	lsl.w	r0, r3, r0
 800ddaa:	9b04      	ldr	r3, [sp, #16]
 800ddac:	4303      	orrs	r3, r0
 800ddae:	3401      	adds	r4, #1
 800ddb0:	9304      	str	r3, [sp, #16]
 800ddb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddb6:	4826      	ldr	r0, [pc, #152]	; (800de50 <_svfiprintf_r+0x1f0>)
 800ddb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddbc:	2206      	movs	r2, #6
 800ddbe:	f7f2 fa17 	bl	80001f0 <memchr>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d038      	beq.n	800de38 <_svfiprintf_r+0x1d8>
 800ddc6:	4b23      	ldr	r3, [pc, #140]	; (800de54 <_svfiprintf_r+0x1f4>)
 800ddc8:	bb1b      	cbnz	r3, 800de12 <_svfiprintf_r+0x1b2>
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	3307      	adds	r3, #7
 800ddce:	f023 0307 	bic.w	r3, r3, #7
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	9303      	str	r3, [sp, #12]
 800ddd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd8:	4433      	add	r3, r6
 800ddda:	9309      	str	r3, [sp, #36]	; 0x24
 800dddc:	e767      	b.n	800dcae <_svfiprintf_r+0x4e>
 800ddde:	fb0c 3202 	mla	r2, ip, r2, r3
 800dde2:	460c      	mov	r4, r1
 800dde4:	2001      	movs	r0, #1
 800dde6:	e7a5      	b.n	800dd34 <_svfiprintf_r+0xd4>
 800dde8:	2300      	movs	r3, #0
 800ddea:	3401      	adds	r4, #1
 800ddec:	9305      	str	r3, [sp, #20]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	f04f 0c0a 	mov.w	ip, #10
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddfa:	3a30      	subs	r2, #48	; 0x30
 800ddfc:	2a09      	cmp	r2, #9
 800ddfe:	d903      	bls.n	800de08 <_svfiprintf_r+0x1a8>
 800de00:	2b00      	cmp	r3, #0
 800de02:	d0c5      	beq.n	800dd90 <_svfiprintf_r+0x130>
 800de04:	9105      	str	r1, [sp, #20]
 800de06:	e7c3      	b.n	800dd90 <_svfiprintf_r+0x130>
 800de08:	fb0c 2101 	mla	r1, ip, r1, r2
 800de0c:	4604      	mov	r4, r0
 800de0e:	2301      	movs	r3, #1
 800de10:	e7f0      	b.n	800ddf4 <_svfiprintf_r+0x194>
 800de12:	ab03      	add	r3, sp, #12
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	462a      	mov	r2, r5
 800de18:	4b0f      	ldr	r3, [pc, #60]	; (800de58 <_svfiprintf_r+0x1f8>)
 800de1a:	a904      	add	r1, sp, #16
 800de1c:	4638      	mov	r0, r7
 800de1e:	f7fc f9dd 	bl	800a1dc <_printf_float>
 800de22:	1c42      	adds	r2, r0, #1
 800de24:	4606      	mov	r6, r0
 800de26:	d1d6      	bne.n	800ddd6 <_svfiprintf_r+0x176>
 800de28:	89ab      	ldrh	r3, [r5, #12]
 800de2a:	065b      	lsls	r3, r3, #25
 800de2c:	f53f af2c 	bmi.w	800dc88 <_svfiprintf_r+0x28>
 800de30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de32:	b01d      	add	sp, #116	; 0x74
 800de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de38:	ab03      	add	r3, sp, #12
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	462a      	mov	r2, r5
 800de3e:	4b06      	ldr	r3, [pc, #24]	; (800de58 <_svfiprintf_r+0x1f8>)
 800de40:	a904      	add	r1, sp, #16
 800de42:	4638      	mov	r0, r7
 800de44:	f7fc fc6e 	bl	800a724 <_printf_i>
 800de48:	e7eb      	b.n	800de22 <_svfiprintf_r+0x1c2>
 800de4a:	bf00      	nop
 800de4c:	08010c7c 	.word	0x08010c7c
 800de50:	08010c86 	.word	0x08010c86
 800de54:	0800a1dd 	.word	0x0800a1dd
 800de58:	0800dba9 	.word	0x0800dba9
 800de5c:	08010c82 	.word	0x08010c82

0800de60 <_sungetc_r>:
 800de60:	b538      	push	{r3, r4, r5, lr}
 800de62:	1c4b      	adds	r3, r1, #1
 800de64:	4614      	mov	r4, r2
 800de66:	d103      	bne.n	800de70 <_sungetc_r+0x10>
 800de68:	f04f 35ff 	mov.w	r5, #4294967295
 800de6c:	4628      	mov	r0, r5
 800de6e:	bd38      	pop	{r3, r4, r5, pc}
 800de70:	8993      	ldrh	r3, [r2, #12]
 800de72:	f023 0320 	bic.w	r3, r3, #32
 800de76:	8193      	strh	r3, [r2, #12]
 800de78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de7a:	6852      	ldr	r2, [r2, #4]
 800de7c:	b2cd      	uxtb	r5, r1
 800de7e:	b18b      	cbz	r3, 800dea4 <_sungetc_r+0x44>
 800de80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de82:	4293      	cmp	r3, r2
 800de84:	dd08      	ble.n	800de98 <_sungetc_r+0x38>
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	1e5a      	subs	r2, r3, #1
 800de8a:	6022      	str	r2, [r4, #0]
 800de8c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800de90:	6863      	ldr	r3, [r4, #4]
 800de92:	3301      	adds	r3, #1
 800de94:	6063      	str	r3, [r4, #4]
 800de96:	e7e9      	b.n	800de6c <_sungetc_r+0xc>
 800de98:	4621      	mov	r1, r4
 800de9a:	f000 fbe1 	bl	800e660 <__submore>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d0f1      	beq.n	800de86 <_sungetc_r+0x26>
 800dea2:	e7e1      	b.n	800de68 <_sungetc_r+0x8>
 800dea4:	6921      	ldr	r1, [r4, #16]
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	b151      	cbz	r1, 800dec0 <_sungetc_r+0x60>
 800deaa:	4299      	cmp	r1, r3
 800deac:	d208      	bcs.n	800dec0 <_sungetc_r+0x60>
 800deae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800deb2:	42a9      	cmp	r1, r5
 800deb4:	d104      	bne.n	800dec0 <_sungetc_r+0x60>
 800deb6:	3b01      	subs	r3, #1
 800deb8:	3201      	adds	r2, #1
 800deba:	6023      	str	r3, [r4, #0]
 800debc:	6062      	str	r2, [r4, #4]
 800debe:	e7d5      	b.n	800de6c <_sungetc_r+0xc>
 800dec0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800dec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dec8:	6363      	str	r3, [r4, #52]	; 0x34
 800deca:	2303      	movs	r3, #3
 800decc:	63a3      	str	r3, [r4, #56]	; 0x38
 800dece:	4623      	mov	r3, r4
 800ded0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	2301      	movs	r3, #1
 800ded8:	e7dc      	b.n	800de94 <_sungetc_r+0x34>

0800deda <__ssrefill_r>:
 800deda:	b510      	push	{r4, lr}
 800dedc:	460c      	mov	r4, r1
 800dede:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dee0:	b169      	cbz	r1, 800defe <__ssrefill_r+0x24>
 800dee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dee6:	4299      	cmp	r1, r3
 800dee8:	d001      	beq.n	800deee <__ssrefill_r+0x14>
 800deea:	f7ff fdb3 	bl	800da54 <_free_r>
 800deee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800def0:	6063      	str	r3, [r4, #4]
 800def2:	2000      	movs	r0, #0
 800def4:	6360      	str	r0, [r4, #52]	; 0x34
 800def6:	b113      	cbz	r3, 800defe <__ssrefill_r+0x24>
 800def8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	bd10      	pop	{r4, pc}
 800defe:	6923      	ldr	r3, [r4, #16]
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	2300      	movs	r3, #0
 800df04:	6063      	str	r3, [r4, #4]
 800df06:	89a3      	ldrh	r3, [r4, #12]
 800df08:	f043 0320 	orr.w	r3, r3, #32
 800df0c:	81a3      	strh	r3, [r4, #12]
 800df0e:	f04f 30ff 	mov.w	r0, #4294967295
 800df12:	e7f3      	b.n	800defc <__ssrefill_r+0x22>

0800df14 <__ssvfiscanf_r>:
 800df14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	460c      	mov	r4, r1
 800df1a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800df1e:	2100      	movs	r1, #0
 800df20:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800df24:	49b2      	ldr	r1, [pc, #712]	; (800e1f0 <__ssvfiscanf_r+0x2dc>)
 800df26:	91a0      	str	r1, [sp, #640]	; 0x280
 800df28:	f10d 0804 	add.w	r8, sp, #4
 800df2c:	49b1      	ldr	r1, [pc, #708]	; (800e1f4 <__ssvfiscanf_r+0x2e0>)
 800df2e:	4fb2      	ldr	r7, [pc, #712]	; (800e1f8 <__ssvfiscanf_r+0x2e4>)
 800df30:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800e1fc <__ssvfiscanf_r+0x2e8>
 800df34:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800df38:	4606      	mov	r6, r0
 800df3a:	91a1      	str	r1, [sp, #644]	; 0x284
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	f892 a000 	ldrb.w	sl, [r2]
 800df42:	f1ba 0f00 	cmp.w	sl, #0
 800df46:	f000 8151 	beq.w	800e1ec <__ssvfiscanf_r+0x2d8>
 800df4a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800df4e:	f013 0308 	ands.w	r3, r3, #8
 800df52:	f102 0501 	add.w	r5, r2, #1
 800df56:	d019      	beq.n	800df8c <__ssvfiscanf_r+0x78>
 800df58:	6863      	ldr	r3, [r4, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	dd0f      	ble.n	800df7e <__ssvfiscanf_r+0x6a>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	781a      	ldrb	r2, [r3, #0]
 800df62:	5cba      	ldrb	r2, [r7, r2]
 800df64:	0712      	lsls	r2, r2, #28
 800df66:	d401      	bmi.n	800df6c <__ssvfiscanf_r+0x58>
 800df68:	462a      	mov	r2, r5
 800df6a:	e7e8      	b.n	800df3e <__ssvfiscanf_r+0x2a>
 800df6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800df6e:	3201      	adds	r2, #1
 800df70:	9245      	str	r2, [sp, #276]	; 0x114
 800df72:	6862      	ldr	r2, [r4, #4]
 800df74:	3301      	adds	r3, #1
 800df76:	3a01      	subs	r2, #1
 800df78:	6062      	str	r2, [r4, #4]
 800df7a:	6023      	str	r3, [r4, #0]
 800df7c:	e7ec      	b.n	800df58 <__ssvfiscanf_r+0x44>
 800df7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800df80:	4621      	mov	r1, r4
 800df82:	4630      	mov	r0, r6
 800df84:	4798      	blx	r3
 800df86:	2800      	cmp	r0, #0
 800df88:	d0e9      	beq.n	800df5e <__ssvfiscanf_r+0x4a>
 800df8a:	e7ed      	b.n	800df68 <__ssvfiscanf_r+0x54>
 800df8c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800df90:	f040 8083 	bne.w	800e09a <__ssvfiscanf_r+0x186>
 800df94:	9341      	str	r3, [sp, #260]	; 0x104
 800df96:	9343      	str	r3, [sp, #268]	; 0x10c
 800df98:	7853      	ldrb	r3, [r2, #1]
 800df9a:	2b2a      	cmp	r3, #42	; 0x2a
 800df9c:	bf02      	ittt	eq
 800df9e:	2310      	moveq	r3, #16
 800dfa0:	1c95      	addeq	r5, r2, #2
 800dfa2:	9341      	streq	r3, [sp, #260]	; 0x104
 800dfa4:	220a      	movs	r2, #10
 800dfa6:	46ab      	mov	fp, r5
 800dfa8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800dfac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800dfb0:	2b09      	cmp	r3, #9
 800dfb2:	d91d      	bls.n	800dff0 <__ssvfiscanf_r+0xdc>
 800dfb4:	4891      	ldr	r0, [pc, #580]	; (800e1fc <__ssvfiscanf_r+0x2e8>)
 800dfb6:	2203      	movs	r2, #3
 800dfb8:	f7f2 f91a 	bl	80001f0 <memchr>
 800dfbc:	b140      	cbz	r0, 800dfd0 <__ssvfiscanf_r+0xbc>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	eba0 0009 	sub.w	r0, r0, r9
 800dfc4:	fa03 f000 	lsl.w	r0, r3, r0
 800dfc8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dfca:	4318      	orrs	r0, r3
 800dfcc:	9041      	str	r0, [sp, #260]	; 0x104
 800dfce:	465d      	mov	r5, fp
 800dfd0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dfd4:	2b78      	cmp	r3, #120	; 0x78
 800dfd6:	d806      	bhi.n	800dfe6 <__ssvfiscanf_r+0xd2>
 800dfd8:	2b57      	cmp	r3, #87	; 0x57
 800dfda:	d810      	bhi.n	800dffe <__ssvfiscanf_r+0xea>
 800dfdc:	2b25      	cmp	r3, #37	; 0x25
 800dfde:	d05c      	beq.n	800e09a <__ssvfiscanf_r+0x186>
 800dfe0:	d856      	bhi.n	800e090 <__ssvfiscanf_r+0x17c>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d074      	beq.n	800e0d0 <__ssvfiscanf_r+0x1bc>
 800dfe6:	2303      	movs	r3, #3
 800dfe8:	9347      	str	r3, [sp, #284]	; 0x11c
 800dfea:	230a      	movs	r3, #10
 800dfec:	9342      	str	r3, [sp, #264]	; 0x108
 800dfee:	e081      	b.n	800e0f4 <__ssvfiscanf_r+0x1e0>
 800dff0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dff2:	fb02 1303 	mla	r3, r2, r3, r1
 800dff6:	3b30      	subs	r3, #48	; 0x30
 800dff8:	9343      	str	r3, [sp, #268]	; 0x10c
 800dffa:	465d      	mov	r5, fp
 800dffc:	e7d3      	b.n	800dfa6 <__ssvfiscanf_r+0x92>
 800dffe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e002:	2a20      	cmp	r2, #32
 800e004:	d8ef      	bhi.n	800dfe6 <__ssvfiscanf_r+0xd2>
 800e006:	a101      	add	r1, pc, #4	; (adr r1, 800e00c <__ssvfiscanf_r+0xf8>)
 800e008:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e00c:	0800e0df 	.word	0x0800e0df
 800e010:	0800dfe7 	.word	0x0800dfe7
 800e014:	0800dfe7 	.word	0x0800dfe7
 800e018:	0800e13d 	.word	0x0800e13d
 800e01c:	0800dfe7 	.word	0x0800dfe7
 800e020:	0800dfe7 	.word	0x0800dfe7
 800e024:	0800dfe7 	.word	0x0800dfe7
 800e028:	0800dfe7 	.word	0x0800dfe7
 800e02c:	0800dfe7 	.word	0x0800dfe7
 800e030:	0800dfe7 	.word	0x0800dfe7
 800e034:	0800dfe7 	.word	0x0800dfe7
 800e038:	0800e153 	.word	0x0800e153
 800e03c:	0800e129 	.word	0x0800e129
 800e040:	0800e097 	.word	0x0800e097
 800e044:	0800e097 	.word	0x0800e097
 800e048:	0800e097 	.word	0x0800e097
 800e04c:	0800dfe7 	.word	0x0800dfe7
 800e050:	0800e12d 	.word	0x0800e12d
 800e054:	0800dfe7 	.word	0x0800dfe7
 800e058:	0800dfe7 	.word	0x0800dfe7
 800e05c:	0800dfe7 	.word	0x0800dfe7
 800e060:	0800dfe7 	.word	0x0800dfe7
 800e064:	0800e163 	.word	0x0800e163
 800e068:	0800e135 	.word	0x0800e135
 800e06c:	0800e0d7 	.word	0x0800e0d7
 800e070:	0800dfe7 	.word	0x0800dfe7
 800e074:	0800dfe7 	.word	0x0800dfe7
 800e078:	0800e15f 	.word	0x0800e15f
 800e07c:	0800dfe7 	.word	0x0800dfe7
 800e080:	0800e129 	.word	0x0800e129
 800e084:	0800dfe7 	.word	0x0800dfe7
 800e088:	0800dfe7 	.word	0x0800dfe7
 800e08c:	0800e0df 	.word	0x0800e0df
 800e090:	3b45      	subs	r3, #69	; 0x45
 800e092:	2b02      	cmp	r3, #2
 800e094:	d8a7      	bhi.n	800dfe6 <__ssvfiscanf_r+0xd2>
 800e096:	2305      	movs	r3, #5
 800e098:	e02b      	b.n	800e0f2 <__ssvfiscanf_r+0x1de>
 800e09a:	6863      	ldr	r3, [r4, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	dd0d      	ble.n	800e0bc <__ssvfiscanf_r+0x1a8>
 800e0a0:	6823      	ldr	r3, [r4, #0]
 800e0a2:	781a      	ldrb	r2, [r3, #0]
 800e0a4:	4552      	cmp	r2, sl
 800e0a6:	f040 80a1 	bne.w	800e1ec <__ssvfiscanf_r+0x2d8>
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	6862      	ldr	r2, [r4, #4]
 800e0ae:	6023      	str	r3, [r4, #0]
 800e0b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e0b2:	3a01      	subs	r2, #1
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	6062      	str	r2, [r4, #4]
 800e0b8:	9345      	str	r3, [sp, #276]	; 0x114
 800e0ba:	e755      	b.n	800df68 <__ssvfiscanf_r+0x54>
 800e0bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e0be:	4621      	mov	r1, r4
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	4798      	blx	r3
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d0eb      	beq.n	800e0a0 <__ssvfiscanf_r+0x18c>
 800e0c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	f040 8084 	bne.w	800e1d8 <__ssvfiscanf_r+0x2c4>
 800e0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d4:	e086      	b.n	800e1e4 <__ssvfiscanf_r+0x2d0>
 800e0d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e0d8:	f042 0220 	orr.w	r2, r2, #32
 800e0dc:	9241      	str	r2, [sp, #260]	; 0x104
 800e0de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e0e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0e4:	9241      	str	r2, [sp, #260]	; 0x104
 800e0e6:	2210      	movs	r2, #16
 800e0e8:	2b6f      	cmp	r3, #111	; 0x6f
 800e0ea:	9242      	str	r2, [sp, #264]	; 0x108
 800e0ec:	bf34      	ite	cc
 800e0ee:	2303      	movcc	r3, #3
 800e0f0:	2304      	movcs	r3, #4
 800e0f2:	9347      	str	r3, [sp, #284]	; 0x11c
 800e0f4:	6863      	ldr	r3, [r4, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	dd41      	ble.n	800e17e <__ssvfiscanf_r+0x26a>
 800e0fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e0fc:	0659      	lsls	r1, r3, #25
 800e0fe:	d404      	bmi.n	800e10a <__ssvfiscanf_r+0x1f6>
 800e100:	6823      	ldr	r3, [r4, #0]
 800e102:	781a      	ldrb	r2, [r3, #0]
 800e104:	5cba      	ldrb	r2, [r7, r2]
 800e106:	0712      	lsls	r2, r2, #28
 800e108:	d440      	bmi.n	800e18c <__ssvfiscanf_r+0x278>
 800e10a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e10c:	2b02      	cmp	r3, #2
 800e10e:	dc4f      	bgt.n	800e1b0 <__ssvfiscanf_r+0x29c>
 800e110:	466b      	mov	r3, sp
 800e112:	4622      	mov	r2, r4
 800e114:	a941      	add	r1, sp, #260	; 0x104
 800e116:	4630      	mov	r0, r6
 800e118:	f000 f874 	bl	800e204 <_scanf_chars>
 800e11c:	2801      	cmp	r0, #1
 800e11e:	d065      	beq.n	800e1ec <__ssvfiscanf_r+0x2d8>
 800e120:	2802      	cmp	r0, #2
 800e122:	f47f af21 	bne.w	800df68 <__ssvfiscanf_r+0x54>
 800e126:	e7cf      	b.n	800e0c8 <__ssvfiscanf_r+0x1b4>
 800e128:	220a      	movs	r2, #10
 800e12a:	e7dd      	b.n	800e0e8 <__ssvfiscanf_r+0x1d4>
 800e12c:	2300      	movs	r3, #0
 800e12e:	9342      	str	r3, [sp, #264]	; 0x108
 800e130:	2303      	movs	r3, #3
 800e132:	e7de      	b.n	800e0f2 <__ssvfiscanf_r+0x1de>
 800e134:	2308      	movs	r3, #8
 800e136:	9342      	str	r3, [sp, #264]	; 0x108
 800e138:	2304      	movs	r3, #4
 800e13a:	e7da      	b.n	800e0f2 <__ssvfiscanf_r+0x1de>
 800e13c:	4629      	mov	r1, r5
 800e13e:	4640      	mov	r0, r8
 800e140:	f000 f9d6 	bl	800e4f0 <__sccl>
 800e144:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e14a:	9341      	str	r3, [sp, #260]	; 0x104
 800e14c:	4605      	mov	r5, r0
 800e14e:	2301      	movs	r3, #1
 800e150:	e7cf      	b.n	800e0f2 <__ssvfiscanf_r+0x1de>
 800e152:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e158:	9341      	str	r3, [sp, #260]	; 0x104
 800e15a:	2300      	movs	r3, #0
 800e15c:	e7c9      	b.n	800e0f2 <__ssvfiscanf_r+0x1de>
 800e15e:	2302      	movs	r3, #2
 800e160:	e7c7      	b.n	800e0f2 <__ssvfiscanf_r+0x1de>
 800e162:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e164:	06c3      	lsls	r3, r0, #27
 800e166:	f53f aeff 	bmi.w	800df68 <__ssvfiscanf_r+0x54>
 800e16a:	9b00      	ldr	r3, [sp, #0]
 800e16c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e16e:	1d19      	adds	r1, r3, #4
 800e170:	9100      	str	r1, [sp, #0]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	07c0      	lsls	r0, r0, #31
 800e176:	bf4c      	ite	mi
 800e178:	801a      	strhmi	r2, [r3, #0]
 800e17a:	601a      	strpl	r2, [r3, #0]
 800e17c:	e6f4      	b.n	800df68 <__ssvfiscanf_r+0x54>
 800e17e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e180:	4621      	mov	r1, r4
 800e182:	4630      	mov	r0, r6
 800e184:	4798      	blx	r3
 800e186:	2800      	cmp	r0, #0
 800e188:	d0b7      	beq.n	800e0fa <__ssvfiscanf_r+0x1e6>
 800e18a:	e79d      	b.n	800e0c8 <__ssvfiscanf_r+0x1b4>
 800e18c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e18e:	3201      	adds	r2, #1
 800e190:	9245      	str	r2, [sp, #276]	; 0x114
 800e192:	6862      	ldr	r2, [r4, #4]
 800e194:	3a01      	subs	r2, #1
 800e196:	2a00      	cmp	r2, #0
 800e198:	6062      	str	r2, [r4, #4]
 800e19a:	dd02      	ble.n	800e1a2 <__ssvfiscanf_r+0x28e>
 800e19c:	3301      	adds	r3, #1
 800e19e:	6023      	str	r3, [r4, #0]
 800e1a0:	e7ae      	b.n	800e100 <__ssvfiscanf_r+0x1ec>
 800e1a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	4798      	blx	r3
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d0a8      	beq.n	800e100 <__ssvfiscanf_r+0x1ec>
 800e1ae:	e78b      	b.n	800e0c8 <__ssvfiscanf_r+0x1b4>
 800e1b0:	2b04      	cmp	r3, #4
 800e1b2:	dc06      	bgt.n	800e1c2 <__ssvfiscanf_r+0x2ae>
 800e1b4:	466b      	mov	r3, sp
 800e1b6:	4622      	mov	r2, r4
 800e1b8:	a941      	add	r1, sp, #260	; 0x104
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	f000 f87a 	bl	800e2b4 <_scanf_i>
 800e1c0:	e7ac      	b.n	800e11c <__ssvfiscanf_r+0x208>
 800e1c2:	4b0f      	ldr	r3, [pc, #60]	; (800e200 <__ssvfiscanf_r+0x2ec>)
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f43f aecf 	beq.w	800df68 <__ssvfiscanf_r+0x54>
 800e1ca:	466b      	mov	r3, sp
 800e1cc:	4622      	mov	r2, r4
 800e1ce:	a941      	add	r1, sp, #260	; 0x104
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f7fc fbcd 	bl	800a970 <_scanf_float>
 800e1d6:	e7a1      	b.n	800e11c <__ssvfiscanf_r+0x208>
 800e1d8:	89a3      	ldrh	r3, [r4, #12]
 800e1da:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e1de:	bf18      	it	ne
 800e1e0:	f04f 30ff 	movne.w	r0, #4294967295
 800e1e4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800e1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e1ee:	e7f9      	b.n	800e1e4 <__ssvfiscanf_r+0x2d0>
 800e1f0:	0800de61 	.word	0x0800de61
 800e1f4:	0800dedb 	.word	0x0800dedb
 800e1f8:	08010909 	.word	0x08010909
 800e1fc:	08010c82 	.word	0x08010c82
 800e200:	0800a971 	.word	0x0800a971

0800e204 <_scanf_chars>:
 800e204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e208:	4615      	mov	r5, r2
 800e20a:	688a      	ldr	r2, [r1, #8]
 800e20c:	4680      	mov	r8, r0
 800e20e:	460c      	mov	r4, r1
 800e210:	b932      	cbnz	r2, 800e220 <_scanf_chars+0x1c>
 800e212:	698a      	ldr	r2, [r1, #24]
 800e214:	2a00      	cmp	r2, #0
 800e216:	bf0c      	ite	eq
 800e218:	2201      	moveq	r2, #1
 800e21a:	f04f 32ff 	movne.w	r2, #4294967295
 800e21e:	608a      	str	r2, [r1, #8]
 800e220:	6822      	ldr	r2, [r4, #0]
 800e222:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e2b0 <_scanf_chars+0xac>
 800e226:	06d1      	lsls	r1, r2, #27
 800e228:	bf5f      	itttt	pl
 800e22a:	681a      	ldrpl	r2, [r3, #0]
 800e22c:	1d11      	addpl	r1, r2, #4
 800e22e:	6019      	strpl	r1, [r3, #0]
 800e230:	6816      	ldrpl	r6, [r2, #0]
 800e232:	2700      	movs	r7, #0
 800e234:	69a0      	ldr	r0, [r4, #24]
 800e236:	b188      	cbz	r0, 800e25c <_scanf_chars+0x58>
 800e238:	2801      	cmp	r0, #1
 800e23a:	d107      	bne.n	800e24c <_scanf_chars+0x48>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	781a      	ldrb	r2, [r3, #0]
 800e240:	6963      	ldr	r3, [r4, #20]
 800e242:	5c9b      	ldrb	r3, [r3, r2]
 800e244:	b953      	cbnz	r3, 800e25c <_scanf_chars+0x58>
 800e246:	bb27      	cbnz	r7, 800e292 <_scanf_chars+0x8e>
 800e248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e24c:	2802      	cmp	r0, #2
 800e24e:	d120      	bne.n	800e292 <_scanf_chars+0x8e>
 800e250:	682b      	ldr	r3, [r5, #0]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e258:	071b      	lsls	r3, r3, #28
 800e25a:	d41a      	bmi.n	800e292 <_scanf_chars+0x8e>
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	06da      	lsls	r2, r3, #27
 800e260:	bf5e      	ittt	pl
 800e262:	682b      	ldrpl	r3, [r5, #0]
 800e264:	781b      	ldrbpl	r3, [r3, #0]
 800e266:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e26a:	682a      	ldr	r2, [r5, #0]
 800e26c:	686b      	ldr	r3, [r5, #4]
 800e26e:	3201      	adds	r2, #1
 800e270:	602a      	str	r2, [r5, #0]
 800e272:	68a2      	ldr	r2, [r4, #8]
 800e274:	3b01      	subs	r3, #1
 800e276:	3a01      	subs	r2, #1
 800e278:	606b      	str	r3, [r5, #4]
 800e27a:	3701      	adds	r7, #1
 800e27c:	60a2      	str	r2, [r4, #8]
 800e27e:	b142      	cbz	r2, 800e292 <_scanf_chars+0x8e>
 800e280:	2b00      	cmp	r3, #0
 800e282:	dcd7      	bgt.n	800e234 <_scanf_chars+0x30>
 800e284:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e288:	4629      	mov	r1, r5
 800e28a:	4640      	mov	r0, r8
 800e28c:	4798      	blx	r3
 800e28e:	2800      	cmp	r0, #0
 800e290:	d0d0      	beq.n	800e234 <_scanf_chars+0x30>
 800e292:	6823      	ldr	r3, [r4, #0]
 800e294:	f013 0310 	ands.w	r3, r3, #16
 800e298:	d105      	bne.n	800e2a6 <_scanf_chars+0xa2>
 800e29a:	68e2      	ldr	r2, [r4, #12]
 800e29c:	3201      	adds	r2, #1
 800e29e:	60e2      	str	r2, [r4, #12]
 800e2a0:	69a2      	ldr	r2, [r4, #24]
 800e2a2:	b102      	cbz	r2, 800e2a6 <_scanf_chars+0xa2>
 800e2a4:	7033      	strb	r3, [r6, #0]
 800e2a6:	6923      	ldr	r3, [r4, #16]
 800e2a8:	441f      	add	r7, r3
 800e2aa:	6127      	str	r7, [r4, #16]
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	e7cb      	b.n	800e248 <_scanf_chars+0x44>
 800e2b0:	08010909 	.word	0x08010909

0800e2b4 <_scanf_i>:
 800e2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b8:	4698      	mov	r8, r3
 800e2ba:	4b74      	ldr	r3, [pc, #464]	; (800e48c <_scanf_i+0x1d8>)
 800e2bc:	460c      	mov	r4, r1
 800e2be:	4682      	mov	sl, r0
 800e2c0:	4616      	mov	r6, r2
 800e2c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e2c6:	b087      	sub	sp, #28
 800e2c8:	ab03      	add	r3, sp, #12
 800e2ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e2ce:	4b70      	ldr	r3, [pc, #448]	; (800e490 <_scanf_i+0x1dc>)
 800e2d0:	69a1      	ldr	r1, [r4, #24]
 800e2d2:	4a70      	ldr	r2, [pc, #448]	; (800e494 <_scanf_i+0x1e0>)
 800e2d4:	2903      	cmp	r1, #3
 800e2d6:	bf18      	it	ne
 800e2d8:	461a      	movne	r2, r3
 800e2da:	68a3      	ldr	r3, [r4, #8]
 800e2dc:	9201      	str	r2, [sp, #4]
 800e2de:	1e5a      	subs	r2, r3, #1
 800e2e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e2e4:	bf88      	it	hi
 800e2e6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e2ea:	4627      	mov	r7, r4
 800e2ec:	bf82      	ittt	hi
 800e2ee:	eb03 0905 	addhi.w	r9, r3, r5
 800e2f2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e2f6:	60a3      	strhi	r3, [r4, #8]
 800e2f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e2fc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e300:	bf98      	it	ls
 800e302:	f04f 0900 	movls.w	r9, #0
 800e306:	6023      	str	r3, [r4, #0]
 800e308:	463d      	mov	r5, r7
 800e30a:	f04f 0b00 	mov.w	fp, #0
 800e30e:	6831      	ldr	r1, [r6, #0]
 800e310:	ab03      	add	r3, sp, #12
 800e312:	7809      	ldrb	r1, [r1, #0]
 800e314:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e318:	2202      	movs	r2, #2
 800e31a:	f7f1 ff69 	bl	80001f0 <memchr>
 800e31e:	b328      	cbz	r0, 800e36c <_scanf_i+0xb8>
 800e320:	f1bb 0f01 	cmp.w	fp, #1
 800e324:	d159      	bne.n	800e3da <_scanf_i+0x126>
 800e326:	6862      	ldr	r2, [r4, #4]
 800e328:	b92a      	cbnz	r2, 800e336 <_scanf_i+0x82>
 800e32a:	6822      	ldr	r2, [r4, #0]
 800e32c:	2308      	movs	r3, #8
 800e32e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e332:	6063      	str	r3, [r4, #4]
 800e334:	6022      	str	r2, [r4, #0]
 800e336:	6822      	ldr	r2, [r4, #0]
 800e338:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e33c:	6022      	str	r2, [r4, #0]
 800e33e:	68a2      	ldr	r2, [r4, #8]
 800e340:	1e51      	subs	r1, r2, #1
 800e342:	60a1      	str	r1, [r4, #8]
 800e344:	b192      	cbz	r2, 800e36c <_scanf_i+0xb8>
 800e346:	6832      	ldr	r2, [r6, #0]
 800e348:	1c51      	adds	r1, r2, #1
 800e34a:	6031      	str	r1, [r6, #0]
 800e34c:	7812      	ldrb	r2, [r2, #0]
 800e34e:	f805 2b01 	strb.w	r2, [r5], #1
 800e352:	6872      	ldr	r2, [r6, #4]
 800e354:	3a01      	subs	r2, #1
 800e356:	2a00      	cmp	r2, #0
 800e358:	6072      	str	r2, [r6, #4]
 800e35a:	dc07      	bgt.n	800e36c <_scanf_i+0xb8>
 800e35c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e360:	4631      	mov	r1, r6
 800e362:	4650      	mov	r0, sl
 800e364:	4790      	blx	r2
 800e366:	2800      	cmp	r0, #0
 800e368:	f040 8085 	bne.w	800e476 <_scanf_i+0x1c2>
 800e36c:	f10b 0b01 	add.w	fp, fp, #1
 800e370:	f1bb 0f03 	cmp.w	fp, #3
 800e374:	d1cb      	bne.n	800e30e <_scanf_i+0x5a>
 800e376:	6863      	ldr	r3, [r4, #4]
 800e378:	b90b      	cbnz	r3, 800e37e <_scanf_i+0xca>
 800e37a:	230a      	movs	r3, #10
 800e37c:	6063      	str	r3, [r4, #4]
 800e37e:	6863      	ldr	r3, [r4, #4]
 800e380:	4945      	ldr	r1, [pc, #276]	; (800e498 <_scanf_i+0x1e4>)
 800e382:	6960      	ldr	r0, [r4, #20]
 800e384:	1ac9      	subs	r1, r1, r3
 800e386:	f000 f8b3 	bl	800e4f0 <__sccl>
 800e38a:	f04f 0b00 	mov.w	fp, #0
 800e38e:	68a3      	ldr	r3, [r4, #8]
 800e390:	6822      	ldr	r2, [r4, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d03d      	beq.n	800e412 <_scanf_i+0x15e>
 800e396:	6831      	ldr	r1, [r6, #0]
 800e398:	6960      	ldr	r0, [r4, #20]
 800e39a:	f891 c000 	ldrb.w	ip, [r1]
 800e39e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	d035      	beq.n	800e412 <_scanf_i+0x15e>
 800e3a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e3aa:	d124      	bne.n	800e3f6 <_scanf_i+0x142>
 800e3ac:	0510      	lsls	r0, r2, #20
 800e3ae:	d522      	bpl.n	800e3f6 <_scanf_i+0x142>
 800e3b0:	f10b 0b01 	add.w	fp, fp, #1
 800e3b4:	f1b9 0f00 	cmp.w	r9, #0
 800e3b8:	d003      	beq.n	800e3c2 <_scanf_i+0x10e>
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	f109 39ff 	add.w	r9, r9, #4294967295
 800e3c0:	60a3      	str	r3, [r4, #8]
 800e3c2:	6873      	ldr	r3, [r6, #4]
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	6073      	str	r3, [r6, #4]
 800e3ca:	dd1b      	ble.n	800e404 <_scanf_i+0x150>
 800e3cc:	6833      	ldr	r3, [r6, #0]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	6033      	str	r3, [r6, #0]
 800e3d2:	68a3      	ldr	r3, [r4, #8]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	60a3      	str	r3, [r4, #8]
 800e3d8:	e7d9      	b.n	800e38e <_scanf_i+0xda>
 800e3da:	f1bb 0f02 	cmp.w	fp, #2
 800e3de:	d1ae      	bne.n	800e33e <_scanf_i+0x8a>
 800e3e0:	6822      	ldr	r2, [r4, #0]
 800e3e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e3e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e3ea:	d1bf      	bne.n	800e36c <_scanf_i+0xb8>
 800e3ec:	2310      	movs	r3, #16
 800e3ee:	6063      	str	r3, [r4, #4]
 800e3f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e3f4:	e7a2      	b.n	800e33c <_scanf_i+0x88>
 800e3f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e3fa:	6022      	str	r2, [r4, #0]
 800e3fc:	780b      	ldrb	r3, [r1, #0]
 800e3fe:	f805 3b01 	strb.w	r3, [r5], #1
 800e402:	e7de      	b.n	800e3c2 <_scanf_i+0x10e>
 800e404:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e408:	4631      	mov	r1, r6
 800e40a:	4650      	mov	r0, sl
 800e40c:	4798      	blx	r3
 800e40e:	2800      	cmp	r0, #0
 800e410:	d0df      	beq.n	800e3d2 <_scanf_i+0x11e>
 800e412:	6823      	ldr	r3, [r4, #0]
 800e414:	05d9      	lsls	r1, r3, #23
 800e416:	d50d      	bpl.n	800e434 <_scanf_i+0x180>
 800e418:	42bd      	cmp	r5, r7
 800e41a:	d909      	bls.n	800e430 <_scanf_i+0x17c>
 800e41c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e420:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e424:	4632      	mov	r2, r6
 800e426:	4650      	mov	r0, sl
 800e428:	4798      	blx	r3
 800e42a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e42e:	464d      	mov	r5, r9
 800e430:	42bd      	cmp	r5, r7
 800e432:	d028      	beq.n	800e486 <_scanf_i+0x1d2>
 800e434:	6822      	ldr	r2, [r4, #0]
 800e436:	f012 0210 	ands.w	r2, r2, #16
 800e43a:	d113      	bne.n	800e464 <_scanf_i+0x1b0>
 800e43c:	702a      	strb	r2, [r5, #0]
 800e43e:	6863      	ldr	r3, [r4, #4]
 800e440:	9e01      	ldr	r6, [sp, #4]
 800e442:	4639      	mov	r1, r7
 800e444:	4650      	mov	r0, sl
 800e446:	47b0      	blx	r6
 800e448:	f8d8 3000 	ldr.w	r3, [r8]
 800e44c:	6821      	ldr	r1, [r4, #0]
 800e44e:	1d1a      	adds	r2, r3, #4
 800e450:	f8c8 2000 	str.w	r2, [r8]
 800e454:	f011 0f20 	tst.w	r1, #32
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	d00f      	beq.n	800e47c <_scanf_i+0x1c8>
 800e45c:	6018      	str	r0, [r3, #0]
 800e45e:	68e3      	ldr	r3, [r4, #12]
 800e460:	3301      	adds	r3, #1
 800e462:	60e3      	str	r3, [r4, #12]
 800e464:	1bed      	subs	r5, r5, r7
 800e466:	44ab      	add	fp, r5
 800e468:	6925      	ldr	r5, [r4, #16]
 800e46a:	445d      	add	r5, fp
 800e46c:	6125      	str	r5, [r4, #16]
 800e46e:	2000      	movs	r0, #0
 800e470:	b007      	add	sp, #28
 800e472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e476:	f04f 0b00 	mov.w	fp, #0
 800e47a:	e7ca      	b.n	800e412 <_scanf_i+0x15e>
 800e47c:	07ca      	lsls	r2, r1, #31
 800e47e:	bf4c      	ite	mi
 800e480:	8018      	strhmi	r0, [r3, #0]
 800e482:	6018      	strpl	r0, [r3, #0]
 800e484:	e7eb      	b.n	800e45e <_scanf_i+0x1aa>
 800e486:	2001      	movs	r0, #1
 800e488:	e7f2      	b.n	800e470 <_scanf_i+0x1bc>
 800e48a:	bf00      	nop
 800e48c:	0800f2fc 	.word	0x0800f2fc
 800e490:	0800e65d 	.word	0x0800e65d
 800e494:	0800bc49 	.word	0x0800bc49
 800e498:	08010ca6 	.word	0x08010ca6

0800e49c <_read_r>:
 800e49c:	b538      	push	{r3, r4, r5, lr}
 800e49e:	4d07      	ldr	r5, [pc, #28]	; (800e4bc <_read_r+0x20>)
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	4608      	mov	r0, r1
 800e4a4:	4611      	mov	r1, r2
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	602a      	str	r2, [r5, #0]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	f7f4 f924 	bl	80026f8 <_read>
 800e4b0:	1c43      	adds	r3, r0, #1
 800e4b2:	d102      	bne.n	800e4ba <_read_r+0x1e>
 800e4b4:	682b      	ldr	r3, [r5, #0]
 800e4b6:	b103      	cbz	r3, 800e4ba <_read_r+0x1e>
 800e4b8:	6023      	str	r3, [r4, #0]
 800e4ba:	bd38      	pop	{r3, r4, r5, pc}
 800e4bc:	200059c4 	.word	0x200059c4

0800e4c0 <nan>:
 800e4c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4c8 <nan+0x8>
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	00000000 	.word	0x00000000
 800e4cc:	7ff80000 	.word	0x7ff80000

0800e4d0 <_sbrk_r>:
 800e4d0:	b538      	push	{r3, r4, r5, lr}
 800e4d2:	4d06      	ldr	r5, [pc, #24]	; (800e4ec <_sbrk_r+0x1c>)
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4608      	mov	r0, r1
 800e4da:	602b      	str	r3, [r5, #0]
 800e4dc:	f7f4 f97a 	bl	80027d4 <_sbrk>
 800e4e0:	1c43      	adds	r3, r0, #1
 800e4e2:	d102      	bne.n	800e4ea <_sbrk_r+0x1a>
 800e4e4:	682b      	ldr	r3, [r5, #0]
 800e4e6:	b103      	cbz	r3, 800e4ea <_sbrk_r+0x1a>
 800e4e8:	6023      	str	r3, [r4, #0]
 800e4ea:	bd38      	pop	{r3, r4, r5, pc}
 800e4ec:	200059c4 	.word	0x200059c4

0800e4f0 <__sccl>:
 800e4f0:	b570      	push	{r4, r5, r6, lr}
 800e4f2:	780b      	ldrb	r3, [r1, #0]
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	2b5e      	cmp	r3, #94	; 0x5e
 800e4f8:	bf0b      	itete	eq
 800e4fa:	784b      	ldrbeq	r3, [r1, #1]
 800e4fc:	1c48      	addne	r0, r1, #1
 800e4fe:	1c88      	addeq	r0, r1, #2
 800e500:	2200      	movne	r2, #0
 800e502:	bf08      	it	eq
 800e504:	2201      	moveq	r2, #1
 800e506:	1e61      	subs	r1, r4, #1
 800e508:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e50c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e510:	42a9      	cmp	r1, r5
 800e512:	d1fb      	bne.n	800e50c <__sccl+0x1c>
 800e514:	b90b      	cbnz	r3, 800e51a <__sccl+0x2a>
 800e516:	3801      	subs	r0, #1
 800e518:	bd70      	pop	{r4, r5, r6, pc}
 800e51a:	f082 0101 	eor.w	r1, r2, #1
 800e51e:	54e1      	strb	r1, [r4, r3]
 800e520:	1c42      	adds	r2, r0, #1
 800e522:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800e526:	2d2d      	cmp	r5, #45	; 0x2d
 800e528:	f102 36ff 	add.w	r6, r2, #4294967295
 800e52c:	4610      	mov	r0, r2
 800e52e:	d006      	beq.n	800e53e <__sccl+0x4e>
 800e530:	2d5d      	cmp	r5, #93	; 0x5d
 800e532:	d0f1      	beq.n	800e518 <__sccl+0x28>
 800e534:	b90d      	cbnz	r5, 800e53a <__sccl+0x4a>
 800e536:	4630      	mov	r0, r6
 800e538:	e7ee      	b.n	800e518 <__sccl+0x28>
 800e53a:	462b      	mov	r3, r5
 800e53c:	e7ef      	b.n	800e51e <__sccl+0x2e>
 800e53e:	7816      	ldrb	r6, [r2, #0]
 800e540:	2e5d      	cmp	r6, #93	; 0x5d
 800e542:	d0fa      	beq.n	800e53a <__sccl+0x4a>
 800e544:	42b3      	cmp	r3, r6
 800e546:	dcf8      	bgt.n	800e53a <__sccl+0x4a>
 800e548:	4618      	mov	r0, r3
 800e54a:	3001      	adds	r0, #1
 800e54c:	4286      	cmp	r6, r0
 800e54e:	5421      	strb	r1, [r4, r0]
 800e550:	dcfb      	bgt.n	800e54a <__sccl+0x5a>
 800e552:	43d8      	mvns	r0, r3
 800e554:	4430      	add	r0, r6
 800e556:	1c5d      	adds	r5, r3, #1
 800e558:	42b3      	cmp	r3, r6
 800e55a:	bfa8      	it	ge
 800e55c:	2000      	movge	r0, #0
 800e55e:	182b      	adds	r3, r5, r0
 800e560:	3202      	adds	r2, #2
 800e562:	e7de      	b.n	800e522 <__sccl+0x32>

0800e564 <_strtoul_l.isra.0>:
 800e564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e568:	4e3b      	ldr	r6, [pc, #236]	; (800e658 <_strtoul_l.isra.0+0xf4>)
 800e56a:	4686      	mov	lr, r0
 800e56c:	468c      	mov	ip, r1
 800e56e:	4660      	mov	r0, ip
 800e570:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e574:	5da5      	ldrb	r5, [r4, r6]
 800e576:	f015 0508 	ands.w	r5, r5, #8
 800e57a:	d1f8      	bne.n	800e56e <_strtoul_l.isra.0+0xa>
 800e57c:	2c2d      	cmp	r4, #45	; 0x2d
 800e57e:	d134      	bne.n	800e5ea <_strtoul_l.isra.0+0x86>
 800e580:	f89c 4000 	ldrb.w	r4, [ip]
 800e584:	f04f 0801 	mov.w	r8, #1
 800e588:	f100 0c02 	add.w	ip, r0, #2
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d05e      	beq.n	800e64e <_strtoul_l.isra.0+0xea>
 800e590:	2b10      	cmp	r3, #16
 800e592:	d10c      	bne.n	800e5ae <_strtoul_l.isra.0+0x4a>
 800e594:	2c30      	cmp	r4, #48	; 0x30
 800e596:	d10a      	bne.n	800e5ae <_strtoul_l.isra.0+0x4a>
 800e598:	f89c 0000 	ldrb.w	r0, [ip]
 800e59c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e5a0:	2858      	cmp	r0, #88	; 0x58
 800e5a2:	d14f      	bne.n	800e644 <_strtoul_l.isra.0+0xe0>
 800e5a4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800e5a8:	2310      	movs	r3, #16
 800e5aa:	f10c 0c02 	add.w	ip, ip, #2
 800e5ae:	f04f 37ff 	mov.w	r7, #4294967295
 800e5b2:	2500      	movs	r5, #0
 800e5b4:	fbb7 f7f3 	udiv	r7, r7, r3
 800e5b8:	fb03 f907 	mul.w	r9, r3, r7
 800e5bc:	ea6f 0909 	mvn.w	r9, r9
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800e5c6:	2e09      	cmp	r6, #9
 800e5c8:	d818      	bhi.n	800e5fc <_strtoul_l.isra.0+0x98>
 800e5ca:	4634      	mov	r4, r6
 800e5cc:	42a3      	cmp	r3, r4
 800e5ce:	dd24      	ble.n	800e61a <_strtoul_l.isra.0+0xb6>
 800e5d0:	2d00      	cmp	r5, #0
 800e5d2:	db1f      	blt.n	800e614 <_strtoul_l.isra.0+0xb0>
 800e5d4:	4287      	cmp	r7, r0
 800e5d6:	d31d      	bcc.n	800e614 <_strtoul_l.isra.0+0xb0>
 800e5d8:	d101      	bne.n	800e5de <_strtoul_l.isra.0+0x7a>
 800e5da:	45a1      	cmp	r9, r4
 800e5dc:	db1a      	blt.n	800e614 <_strtoul_l.isra.0+0xb0>
 800e5de:	fb00 4003 	mla	r0, r0, r3, r4
 800e5e2:	2501      	movs	r5, #1
 800e5e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e5e8:	e7eb      	b.n	800e5c2 <_strtoul_l.isra.0+0x5e>
 800e5ea:	2c2b      	cmp	r4, #43	; 0x2b
 800e5ec:	bf08      	it	eq
 800e5ee:	f89c 4000 	ldrbeq.w	r4, [ip]
 800e5f2:	46a8      	mov	r8, r5
 800e5f4:	bf08      	it	eq
 800e5f6:	f100 0c02 	addeq.w	ip, r0, #2
 800e5fa:	e7c7      	b.n	800e58c <_strtoul_l.isra.0+0x28>
 800e5fc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800e600:	2e19      	cmp	r6, #25
 800e602:	d801      	bhi.n	800e608 <_strtoul_l.isra.0+0xa4>
 800e604:	3c37      	subs	r4, #55	; 0x37
 800e606:	e7e1      	b.n	800e5cc <_strtoul_l.isra.0+0x68>
 800e608:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800e60c:	2e19      	cmp	r6, #25
 800e60e:	d804      	bhi.n	800e61a <_strtoul_l.isra.0+0xb6>
 800e610:	3c57      	subs	r4, #87	; 0x57
 800e612:	e7db      	b.n	800e5cc <_strtoul_l.isra.0+0x68>
 800e614:	f04f 35ff 	mov.w	r5, #4294967295
 800e618:	e7e4      	b.n	800e5e4 <_strtoul_l.isra.0+0x80>
 800e61a:	2d00      	cmp	r5, #0
 800e61c:	da07      	bge.n	800e62e <_strtoul_l.isra.0+0xca>
 800e61e:	2322      	movs	r3, #34	; 0x22
 800e620:	f8ce 3000 	str.w	r3, [lr]
 800e624:	f04f 30ff 	mov.w	r0, #4294967295
 800e628:	b942      	cbnz	r2, 800e63c <_strtoul_l.isra.0+0xd8>
 800e62a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e62e:	f1b8 0f00 	cmp.w	r8, #0
 800e632:	d000      	beq.n	800e636 <_strtoul_l.isra.0+0xd2>
 800e634:	4240      	negs	r0, r0
 800e636:	2a00      	cmp	r2, #0
 800e638:	d0f7      	beq.n	800e62a <_strtoul_l.isra.0+0xc6>
 800e63a:	b10d      	cbz	r5, 800e640 <_strtoul_l.isra.0+0xdc>
 800e63c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800e640:	6011      	str	r1, [r2, #0]
 800e642:	e7f2      	b.n	800e62a <_strtoul_l.isra.0+0xc6>
 800e644:	2430      	movs	r4, #48	; 0x30
 800e646:	2b00      	cmp	r3, #0
 800e648:	d1b1      	bne.n	800e5ae <_strtoul_l.isra.0+0x4a>
 800e64a:	2308      	movs	r3, #8
 800e64c:	e7af      	b.n	800e5ae <_strtoul_l.isra.0+0x4a>
 800e64e:	2c30      	cmp	r4, #48	; 0x30
 800e650:	d0a2      	beq.n	800e598 <_strtoul_l.isra.0+0x34>
 800e652:	230a      	movs	r3, #10
 800e654:	e7ab      	b.n	800e5ae <_strtoul_l.isra.0+0x4a>
 800e656:	bf00      	nop
 800e658:	08010909 	.word	0x08010909

0800e65c <_strtoul_r>:
 800e65c:	f7ff bf82 	b.w	800e564 <_strtoul_l.isra.0>

0800e660 <__submore>:
 800e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e664:	460c      	mov	r4, r1
 800e666:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e66c:	4299      	cmp	r1, r3
 800e66e:	d11d      	bne.n	800e6ac <__submore+0x4c>
 800e670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e674:	f7ff fa3e 	bl	800daf4 <_malloc_r>
 800e678:	b918      	cbnz	r0, 800e682 <__submore+0x22>
 800e67a:	f04f 30ff 	mov.w	r0, #4294967295
 800e67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e686:	63a3      	str	r3, [r4, #56]	; 0x38
 800e688:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e68c:	6360      	str	r0, [r4, #52]	; 0x34
 800e68e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e692:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e696:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e69a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e69e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e6a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e6a6:	6020      	str	r0, [r4, #0]
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	e7e8      	b.n	800e67e <__submore+0x1e>
 800e6ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e6ae:	0077      	lsls	r7, r6, #1
 800e6b0:	463a      	mov	r2, r7
 800e6b2:	f000 fa2d 	bl	800eb10 <_realloc_r>
 800e6b6:	4605      	mov	r5, r0
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d0de      	beq.n	800e67a <__submore+0x1a>
 800e6bc:	eb00 0806 	add.w	r8, r0, r6
 800e6c0:	4601      	mov	r1, r0
 800e6c2:	4632      	mov	r2, r6
 800e6c4:	4640      	mov	r0, r8
 800e6c6:	f7fb fcd3 	bl	800a070 <memcpy>
 800e6ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e6ce:	f8c4 8000 	str.w	r8, [r4]
 800e6d2:	e7e9      	b.n	800e6a8 <__submore+0x48>

0800e6d4 <__ascii_wctomb>:
 800e6d4:	b149      	cbz	r1, 800e6ea <__ascii_wctomb+0x16>
 800e6d6:	2aff      	cmp	r2, #255	; 0xff
 800e6d8:	bf85      	ittet	hi
 800e6da:	238a      	movhi	r3, #138	; 0x8a
 800e6dc:	6003      	strhi	r3, [r0, #0]
 800e6de:	700a      	strbls	r2, [r1, #0]
 800e6e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e6e4:	bf98      	it	ls
 800e6e6:	2001      	movls	r0, #1
 800e6e8:	4770      	bx	lr
 800e6ea:	4608      	mov	r0, r1
 800e6ec:	4770      	bx	lr
	...

0800e6f0 <__assert_func>:
 800e6f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6f2:	4614      	mov	r4, r2
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	4b09      	ldr	r3, [pc, #36]	; (800e71c <__assert_func+0x2c>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4605      	mov	r5, r0
 800e6fc:	68d8      	ldr	r0, [r3, #12]
 800e6fe:	b14c      	cbz	r4, 800e714 <__assert_func+0x24>
 800e700:	4b07      	ldr	r3, [pc, #28]	; (800e720 <__assert_func+0x30>)
 800e702:	9100      	str	r1, [sp, #0]
 800e704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e708:	4906      	ldr	r1, [pc, #24]	; (800e724 <__assert_func+0x34>)
 800e70a:	462b      	mov	r3, r5
 800e70c:	f000 f9a6 	bl	800ea5c <fiprintf>
 800e710:	f000 fc3e 	bl	800ef90 <abort>
 800e714:	4b04      	ldr	r3, [pc, #16]	; (800e728 <__assert_func+0x38>)
 800e716:	461c      	mov	r4, r3
 800e718:	e7f3      	b.n	800e702 <__assert_func+0x12>
 800e71a:	bf00      	nop
 800e71c:	20000034 	.word	0x20000034
 800e720:	08010ca8 	.word	0x08010ca8
 800e724:	08010cb5 	.word	0x08010cb5
 800e728:	08010ce3 	.word	0x08010ce3

0800e72c <__sflush_r>:
 800e72c:	898a      	ldrh	r2, [r1, #12]
 800e72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e732:	4605      	mov	r5, r0
 800e734:	0710      	lsls	r0, r2, #28
 800e736:	460c      	mov	r4, r1
 800e738:	d458      	bmi.n	800e7ec <__sflush_r+0xc0>
 800e73a:	684b      	ldr	r3, [r1, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	dc05      	bgt.n	800e74c <__sflush_r+0x20>
 800e740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e742:	2b00      	cmp	r3, #0
 800e744:	dc02      	bgt.n	800e74c <__sflush_r+0x20>
 800e746:	2000      	movs	r0, #0
 800e748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e74c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e74e:	2e00      	cmp	r6, #0
 800e750:	d0f9      	beq.n	800e746 <__sflush_r+0x1a>
 800e752:	2300      	movs	r3, #0
 800e754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e758:	682f      	ldr	r7, [r5, #0]
 800e75a:	602b      	str	r3, [r5, #0]
 800e75c:	d032      	beq.n	800e7c4 <__sflush_r+0x98>
 800e75e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e760:	89a3      	ldrh	r3, [r4, #12]
 800e762:	075a      	lsls	r2, r3, #29
 800e764:	d505      	bpl.n	800e772 <__sflush_r+0x46>
 800e766:	6863      	ldr	r3, [r4, #4]
 800e768:	1ac0      	subs	r0, r0, r3
 800e76a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e76c:	b10b      	cbz	r3, 800e772 <__sflush_r+0x46>
 800e76e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e770:	1ac0      	subs	r0, r0, r3
 800e772:	2300      	movs	r3, #0
 800e774:	4602      	mov	r2, r0
 800e776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e778:	6a21      	ldr	r1, [r4, #32]
 800e77a:	4628      	mov	r0, r5
 800e77c:	47b0      	blx	r6
 800e77e:	1c43      	adds	r3, r0, #1
 800e780:	89a3      	ldrh	r3, [r4, #12]
 800e782:	d106      	bne.n	800e792 <__sflush_r+0x66>
 800e784:	6829      	ldr	r1, [r5, #0]
 800e786:	291d      	cmp	r1, #29
 800e788:	d82c      	bhi.n	800e7e4 <__sflush_r+0xb8>
 800e78a:	4a2a      	ldr	r2, [pc, #168]	; (800e834 <__sflush_r+0x108>)
 800e78c:	40ca      	lsrs	r2, r1
 800e78e:	07d6      	lsls	r6, r2, #31
 800e790:	d528      	bpl.n	800e7e4 <__sflush_r+0xb8>
 800e792:	2200      	movs	r2, #0
 800e794:	6062      	str	r2, [r4, #4]
 800e796:	04d9      	lsls	r1, r3, #19
 800e798:	6922      	ldr	r2, [r4, #16]
 800e79a:	6022      	str	r2, [r4, #0]
 800e79c:	d504      	bpl.n	800e7a8 <__sflush_r+0x7c>
 800e79e:	1c42      	adds	r2, r0, #1
 800e7a0:	d101      	bne.n	800e7a6 <__sflush_r+0x7a>
 800e7a2:	682b      	ldr	r3, [r5, #0]
 800e7a4:	b903      	cbnz	r3, 800e7a8 <__sflush_r+0x7c>
 800e7a6:	6560      	str	r0, [r4, #84]	; 0x54
 800e7a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7aa:	602f      	str	r7, [r5, #0]
 800e7ac:	2900      	cmp	r1, #0
 800e7ae:	d0ca      	beq.n	800e746 <__sflush_r+0x1a>
 800e7b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7b4:	4299      	cmp	r1, r3
 800e7b6:	d002      	beq.n	800e7be <__sflush_r+0x92>
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	f7ff f94b 	bl	800da54 <_free_r>
 800e7be:	2000      	movs	r0, #0
 800e7c0:	6360      	str	r0, [r4, #52]	; 0x34
 800e7c2:	e7c1      	b.n	800e748 <__sflush_r+0x1c>
 800e7c4:	6a21      	ldr	r1, [r4, #32]
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	47b0      	blx	r6
 800e7cc:	1c41      	adds	r1, r0, #1
 800e7ce:	d1c7      	bne.n	800e760 <__sflush_r+0x34>
 800e7d0:	682b      	ldr	r3, [r5, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d0c4      	beq.n	800e760 <__sflush_r+0x34>
 800e7d6:	2b1d      	cmp	r3, #29
 800e7d8:	d001      	beq.n	800e7de <__sflush_r+0xb2>
 800e7da:	2b16      	cmp	r3, #22
 800e7dc:	d101      	bne.n	800e7e2 <__sflush_r+0xb6>
 800e7de:	602f      	str	r7, [r5, #0]
 800e7e0:	e7b1      	b.n	800e746 <__sflush_r+0x1a>
 800e7e2:	89a3      	ldrh	r3, [r4, #12]
 800e7e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7e8:	81a3      	strh	r3, [r4, #12]
 800e7ea:	e7ad      	b.n	800e748 <__sflush_r+0x1c>
 800e7ec:	690f      	ldr	r7, [r1, #16]
 800e7ee:	2f00      	cmp	r7, #0
 800e7f0:	d0a9      	beq.n	800e746 <__sflush_r+0x1a>
 800e7f2:	0793      	lsls	r3, r2, #30
 800e7f4:	680e      	ldr	r6, [r1, #0]
 800e7f6:	bf08      	it	eq
 800e7f8:	694b      	ldreq	r3, [r1, #20]
 800e7fa:	600f      	str	r7, [r1, #0]
 800e7fc:	bf18      	it	ne
 800e7fe:	2300      	movne	r3, #0
 800e800:	eba6 0807 	sub.w	r8, r6, r7
 800e804:	608b      	str	r3, [r1, #8]
 800e806:	f1b8 0f00 	cmp.w	r8, #0
 800e80a:	dd9c      	ble.n	800e746 <__sflush_r+0x1a>
 800e80c:	6a21      	ldr	r1, [r4, #32]
 800e80e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e810:	4643      	mov	r3, r8
 800e812:	463a      	mov	r2, r7
 800e814:	4628      	mov	r0, r5
 800e816:	47b0      	blx	r6
 800e818:	2800      	cmp	r0, #0
 800e81a:	dc06      	bgt.n	800e82a <__sflush_r+0xfe>
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e822:	81a3      	strh	r3, [r4, #12]
 800e824:	f04f 30ff 	mov.w	r0, #4294967295
 800e828:	e78e      	b.n	800e748 <__sflush_r+0x1c>
 800e82a:	4407      	add	r7, r0
 800e82c:	eba8 0800 	sub.w	r8, r8, r0
 800e830:	e7e9      	b.n	800e806 <__sflush_r+0xda>
 800e832:	bf00      	nop
 800e834:	20400001 	.word	0x20400001

0800e838 <_fflush_r>:
 800e838:	b538      	push	{r3, r4, r5, lr}
 800e83a:	690b      	ldr	r3, [r1, #16]
 800e83c:	4605      	mov	r5, r0
 800e83e:	460c      	mov	r4, r1
 800e840:	b913      	cbnz	r3, 800e848 <_fflush_r+0x10>
 800e842:	2500      	movs	r5, #0
 800e844:	4628      	mov	r0, r5
 800e846:	bd38      	pop	{r3, r4, r5, pc}
 800e848:	b118      	cbz	r0, 800e852 <_fflush_r+0x1a>
 800e84a:	6983      	ldr	r3, [r0, #24]
 800e84c:	b90b      	cbnz	r3, 800e852 <_fflush_r+0x1a>
 800e84e:	f000 f887 	bl	800e960 <__sinit>
 800e852:	4b14      	ldr	r3, [pc, #80]	; (800e8a4 <_fflush_r+0x6c>)
 800e854:	429c      	cmp	r4, r3
 800e856:	d11b      	bne.n	800e890 <_fflush_r+0x58>
 800e858:	686c      	ldr	r4, [r5, #4]
 800e85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d0ef      	beq.n	800e842 <_fflush_r+0xa>
 800e862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e864:	07d0      	lsls	r0, r2, #31
 800e866:	d404      	bmi.n	800e872 <_fflush_r+0x3a>
 800e868:	0599      	lsls	r1, r3, #22
 800e86a:	d402      	bmi.n	800e872 <_fflush_r+0x3a>
 800e86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e86e:	f000 f927 	bl	800eac0 <__retarget_lock_acquire_recursive>
 800e872:	4628      	mov	r0, r5
 800e874:	4621      	mov	r1, r4
 800e876:	f7ff ff59 	bl	800e72c <__sflush_r>
 800e87a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e87c:	07da      	lsls	r2, r3, #31
 800e87e:	4605      	mov	r5, r0
 800e880:	d4e0      	bmi.n	800e844 <_fflush_r+0xc>
 800e882:	89a3      	ldrh	r3, [r4, #12]
 800e884:	059b      	lsls	r3, r3, #22
 800e886:	d4dd      	bmi.n	800e844 <_fflush_r+0xc>
 800e888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e88a:	f000 f91a 	bl	800eac2 <__retarget_lock_release_recursive>
 800e88e:	e7d9      	b.n	800e844 <_fflush_r+0xc>
 800e890:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <_fflush_r+0x70>)
 800e892:	429c      	cmp	r4, r3
 800e894:	d101      	bne.n	800e89a <_fflush_r+0x62>
 800e896:	68ac      	ldr	r4, [r5, #8]
 800e898:	e7df      	b.n	800e85a <_fflush_r+0x22>
 800e89a:	4b04      	ldr	r3, [pc, #16]	; (800e8ac <_fflush_r+0x74>)
 800e89c:	429c      	cmp	r4, r3
 800e89e:	bf08      	it	eq
 800e8a0:	68ec      	ldreq	r4, [r5, #12]
 800e8a2:	e7da      	b.n	800e85a <_fflush_r+0x22>
 800e8a4:	08010d04 	.word	0x08010d04
 800e8a8:	08010d24 	.word	0x08010d24
 800e8ac:	08010ce4 	.word	0x08010ce4

0800e8b0 <std>:
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	b510      	push	{r4, lr}
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	e9c0 3300 	strd	r3, r3, [r0]
 800e8ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8be:	6083      	str	r3, [r0, #8]
 800e8c0:	8181      	strh	r1, [r0, #12]
 800e8c2:	6643      	str	r3, [r0, #100]	; 0x64
 800e8c4:	81c2      	strh	r2, [r0, #14]
 800e8c6:	6183      	str	r3, [r0, #24]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	2208      	movs	r2, #8
 800e8cc:	305c      	adds	r0, #92	; 0x5c
 800e8ce:	f7fb fbdd 	bl	800a08c <memset>
 800e8d2:	4b05      	ldr	r3, [pc, #20]	; (800e8e8 <std+0x38>)
 800e8d4:	6263      	str	r3, [r4, #36]	; 0x24
 800e8d6:	4b05      	ldr	r3, [pc, #20]	; (800e8ec <std+0x3c>)
 800e8d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8da:	4b05      	ldr	r3, [pc, #20]	; (800e8f0 <std+0x40>)
 800e8dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8de:	4b05      	ldr	r3, [pc, #20]	; (800e8f4 <std+0x44>)
 800e8e0:	6224      	str	r4, [r4, #32]
 800e8e2:	6323      	str	r3, [r4, #48]	; 0x30
 800e8e4:	bd10      	pop	{r4, pc}
 800e8e6:	bf00      	nop
 800e8e8:	0800ae35 	.word	0x0800ae35
 800e8ec:	0800ae5b 	.word	0x0800ae5b
 800e8f0:	0800ae93 	.word	0x0800ae93
 800e8f4:	0800aeb7 	.word	0x0800aeb7

0800e8f8 <_cleanup_r>:
 800e8f8:	4901      	ldr	r1, [pc, #4]	; (800e900 <_cleanup_r+0x8>)
 800e8fa:	f000 b8c1 	b.w	800ea80 <_fwalk_reent>
 800e8fe:	bf00      	nop
 800e900:	0800e839 	.word	0x0800e839

0800e904 <__sfmoreglue>:
 800e904:	b570      	push	{r4, r5, r6, lr}
 800e906:	1e4a      	subs	r2, r1, #1
 800e908:	2568      	movs	r5, #104	; 0x68
 800e90a:	4355      	muls	r5, r2
 800e90c:	460e      	mov	r6, r1
 800e90e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e912:	f7ff f8ef 	bl	800daf4 <_malloc_r>
 800e916:	4604      	mov	r4, r0
 800e918:	b140      	cbz	r0, 800e92c <__sfmoreglue+0x28>
 800e91a:	2100      	movs	r1, #0
 800e91c:	e9c0 1600 	strd	r1, r6, [r0]
 800e920:	300c      	adds	r0, #12
 800e922:	60a0      	str	r0, [r4, #8]
 800e924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e928:	f7fb fbb0 	bl	800a08c <memset>
 800e92c:	4620      	mov	r0, r4
 800e92e:	bd70      	pop	{r4, r5, r6, pc}

0800e930 <__sfp_lock_acquire>:
 800e930:	4801      	ldr	r0, [pc, #4]	; (800e938 <__sfp_lock_acquire+0x8>)
 800e932:	f000 b8c5 	b.w	800eac0 <__retarget_lock_acquire_recursive>
 800e936:	bf00      	nop
 800e938:	200059d0 	.word	0x200059d0

0800e93c <__sfp_lock_release>:
 800e93c:	4801      	ldr	r0, [pc, #4]	; (800e944 <__sfp_lock_release+0x8>)
 800e93e:	f000 b8c0 	b.w	800eac2 <__retarget_lock_release_recursive>
 800e942:	bf00      	nop
 800e944:	200059d0 	.word	0x200059d0

0800e948 <__sinit_lock_acquire>:
 800e948:	4801      	ldr	r0, [pc, #4]	; (800e950 <__sinit_lock_acquire+0x8>)
 800e94a:	f000 b8b9 	b.w	800eac0 <__retarget_lock_acquire_recursive>
 800e94e:	bf00      	nop
 800e950:	200059cb 	.word	0x200059cb

0800e954 <__sinit_lock_release>:
 800e954:	4801      	ldr	r0, [pc, #4]	; (800e95c <__sinit_lock_release+0x8>)
 800e956:	f000 b8b4 	b.w	800eac2 <__retarget_lock_release_recursive>
 800e95a:	bf00      	nop
 800e95c:	200059cb 	.word	0x200059cb

0800e960 <__sinit>:
 800e960:	b510      	push	{r4, lr}
 800e962:	4604      	mov	r4, r0
 800e964:	f7ff fff0 	bl	800e948 <__sinit_lock_acquire>
 800e968:	69a3      	ldr	r3, [r4, #24]
 800e96a:	b11b      	cbz	r3, 800e974 <__sinit+0x14>
 800e96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e970:	f7ff bff0 	b.w	800e954 <__sinit_lock_release>
 800e974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e978:	6523      	str	r3, [r4, #80]	; 0x50
 800e97a:	4b13      	ldr	r3, [pc, #76]	; (800e9c8 <__sinit+0x68>)
 800e97c:	4a13      	ldr	r2, [pc, #76]	; (800e9cc <__sinit+0x6c>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	62a2      	str	r2, [r4, #40]	; 0x28
 800e982:	42a3      	cmp	r3, r4
 800e984:	bf04      	itt	eq
 800e986:	2301      	moveq	r3, #1
 800e988:	61a3      	streq	r3, [r4, #24]
 800e98a:	4620      	mov	r0, r4
 800e98c:	f000 f820 	bl	800e9d0 <__sfp>
 800e990:	6060      	str	r0, [r4, #4]
 800e992:	4620      	mov	r0, r4
 800e994:	f000 f81c 	bl	800e9d0 <__sfp>
 800e998:	60a0      	str	r0, [r4, #8]
 800e99a:	4620      	mov	r0, r4
 800e99c:	f000 f818 	bl	800e9d0 <__sfp>
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	60e0      	str	r0, [r4, #12]
 800e9a4:	2104      	movs	r1, #4
 800e9a6:	6860      	ldr	r0, [r4, #4]
 800e9a8:	f7ff ff82 	bl	800e8b0 <std>
 800e9ac:	68a0      	ldr	r0, [r4, #8]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	2109      	movs	r1, #9
 800e9b2:	f7ff ff7d 	bl	800e8b0 <std>
 800e9b6:	68e0      	ldr	r0, [r4, #12]
 800e9b8:	2202      	movs	r2, #2
 800e9ba:	2112      	movs	r1, #18
 800e9bc:	f7ff ff78 	bl	800e8b0 <std>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	61a3      	str	r3, [r4, #24]
 800e9c4:	e7d2      	b.n	800e96c <__sinit+0xc>
 800e9c6:	bf00      	nop
 800e9c8:	08010878 	.word	0x08010878
 800e9cc:	0800e8f9 	.word	0x0800e8f9

0800e9d0 <__sfp>:
 800e9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d2:	4607      	mov	r7, r0
 800e9d4:	f7ff ffac 	bl	800e930 <__sfp_lock_acquire>
 800e9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ea54 <__sfp+0x84>)
 800e9da:	681e      	ldr	r6, [r3, #0]
 800e9dc:	69b3      	ldr	r3, [r6, #24]
 800e9de:	b913      	cbnz	r3, 800e9e6 <__sfp+0x16>
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	f7ff ffbd 	bl	800e960 <__sinit>
 800e9e6:	3648      	adds	r6, #72	; 0x48
 800e9e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	d503      	bpl.n	800e9f8 <__sfp+0x28>
 800e9f0:	6833      	ldr	r3, [r6, #0]
 800e9f2:	b30b      	cbz	r3, 800ea38 <__sfp+0x68>
 800e9f4:	6836      	ldr	r6, [r6, #0]
 800e9f6:	e7f7      	b.n	800e9e8 <__sfp+0x18>
 800e9f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e9fc:	b9d5      	cbnz	r5, 800ea34 <__sfp+0x64>
 800e9fe:	4b16      	ldr	r3, [pc, #88]	; (800ea58 <__sfp+0x88>)
 800ea00:	60e3      	str	r3, [r4, #12]
 800ea02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea06:	6665      	str	r5, [r4, #100]	; 0x64
 800ea08:	f000 f859 	bl	800eabe <__retarget_lock_init_recursive>
 800ea0c:	f7ff ff96 	bl	800e93c <__sfp_lock_release>
 800ea10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea18:	6025      	str	r5, [r4, #0]
 800ea1a:	61a5      	str	r5, [r4, #24]
 800ea1c:	2208      	movs	r2, #8
 800ea1e:	4629      	mov	r1, r5
 800ea20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea24:	f7fb fb32 	bl	800a08c <memset>
 800ea28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea30:	4620      	mov	r0, r4
 800ea32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea34:	3468      	adds	r4, #104	; 0x68
 800ea36:	e7d9      	b.n	800e9ec <__sfp+0x1c>
 800ea38:	2104      	movs	r1, #4
 800ea3a:	4638      	mov	r0, r7
 800ea3c:	f7ff ff62 	bl	800e904 <__sfmoreglue>
 800ea40:	4604      	mov	r4, r0
 800ea42:	6030      	str	r0, [r6, #0]
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d1d5      	bne.n	800e9f4 <__sfp+0x24>
 800ea48:	f7ff ff78 	bl	800e93c <__sfp_lock_release>
 800ea4c:	230c      	movs	r3, #12
 800ea4e:	603b      	str	r3, [r7, #0]
 800ea50:	e7ee      	b.n	800ea30 <__sfp+0x60>
 800ea52:	bf00      	nop
 800ea54:	08010878 	.word	0x08010878
 800ea58:	ffff0001 	.word	0xffff0001

0800ea5c <fiprintf>:
 800ea5c:	b40e      	push	{r1, r2, r3}
 800ea5e:	b503      	push	{r0, r1, lr}
 800ea60:	4601      	mov	r1, r0
 800ea62:	ab03      	add	r3, sp, #12
 800ea64:	4805      	ldr	r0, [pc, #20]	; (800ea7c <fiprintf+0x20>)
 800ea66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea6a:	6800      	ldr	r0, [r0, #0]
 800ea6c:	9301      	str	r3, [sp, #4]
 800ea6e:	f000 f89f 	bl	800ebb0 <_vfiprintf_r>
 800ea72:	b002      	add	sp, #8
 800ea74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea78:	b003      	add	sp, #12
 800ea7a:	4770      	bx	lr
 800ea7c:	20000034 	.word	0x20000034

0800ea80 <_fwalk_reent>:
 800ea80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea84:	4606      	mov	r6, r0
 800ea86:	4688      	mov	r8, r1
 800ea88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea8c:	2700      	movs	r7, #0
 800ea8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea92:	f1b9 0901 	subs.w	r9, r9, #1
 800ea96:	d505      	bpl.n	800eaa4 <_fwalk_reent+0x24>
 800ea98:	6824      	ldr	r4, [r4, #0]
 800ea9a:	2c00      	cmp	r4, #0
 800ea9c:	d1f7      	bne.n	800ea8e <_fwalk_reent+0xe>
 800ea9e:	4638      	mov	r0, r7
 800eaa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaa4:	89ab      	ldrh	r3, [r5, #12]
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d907      	bls.n	800eaba <_fwalk_reent+0x3a>
 800eaaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eaae:	3301      	adds	r3, #1
 800eab0:	d003      	beq.n	800eaba <_fwalk_reent+0x3a>
 800eab2:	4629      	mov	r1, r5
 800eab4:	4630      	mov	r0, r6
 800eab6:	47c0      	blx	r8
 800eab8:	4307      	orrs	r7, r0
 800eaba:	3568      	adds	r5, #104	; 0x68
 800eabc:	e7e9      	b.n	800ea92 <_fwalk_reent+0x12>

0800eabe <__retarget_lock_init_recursive>:
 800eabe:	4770      	bx	lr

0800eac0 <__retarget_lock_acquire_recursive>:
 800eac0:	4770      	bx	lr

0800eac2 <__retarget_lock_release_recursive>:
 800eac2:	4770      	bx	lr

0800eac4 <memmove>:
 800eac4:	4288      	cmp	r0, r1
 800eac6:	b510      	push	{r4, lr}
 800eac8:	eb01 0402 	add.w	r4, r1, r2
 800eacc:	d902      	bls.n	800ead4 <memmove+0x10>
 800eace:	4284      	cmp	r4, r0
 800ead0:	4623      	mov	r3, r4
 800ead2:	d807      	bhi.n	800eae4 <memmove+0x20>
 800ead4:	1e43      	subs	r3, r0, #1
 800ead6:	42a1      	cmp	r1, r4
 800ead8:	d008      	beq.n	800eaec <memmove+0x28>
 800eada:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eade:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eae2:	e7f8      	b.n	800ead6 <memmove+0x12>
 800eae4:	4402      	add	r2, r0
 800eae6:	4601      	mov	r1, r0
 800eae8:	428a      	cmp	r2, r1
 800eaea:	d100      	bne.n	800eaee <memmove+0x2a>
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eaf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eaf6:	e7f7      	b.n	800eae8 <memmove+0x24>

0800eaf8 <__malloc_lock>:
 800eaf8:	4801      	ldr	r0, [pc, #4]	; (800eb00 <__malloc_lock+0x8>)
 800eafa:	f7ff bfe1 	b.w	800eac0 <__retarget_lock_acquire_recursive>
 800eafe:	bf00      	nop
 800eb00:	200059cc 	.word	0x200059cc

0800eb04 <__malloc_unlock>:
 800eb04:	4801      	ldr	r0, [pc, #4]	; (800eb0c <__malloc_unlock+0x8>)
 800eb06:	f7ff bfdc 	b.w	800eac2 <__retarget_lock_release_recursive>
 800eb0a:	bf00      	nop
 800eb0c:	200059cc 	.word	0x200059cc

0800eb10 <_realloc_r>:
 800eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb12:	4607      	mov	r7, r0
 800eb14:	4614      	mov	r4, r2
 800eb16:	460e      	mov	r6, r1
 800eb18:	b921      	cbnz	r1, 800eb24 <_realloc_r+0x14>
 800eb1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eb1e:	4611      	mov	r1, r2
 800eb20:	f7fe bfe8 	b.w	800daf4 <_malloc_r>
 800eb24:	b922      	cbnz	r2, 800eb30 <_realloc_r+0x20>
 800eb26:	f7fe ff95 	bl	800da54 <_free_r>
 800eb2a:	4625      	mov	r5, r4
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb30:	f000 fa9a 	bl	800f068 <_malloc_usable_size_r>
 800eb34:	42a0      	cmp	r0, r4
 800eb36:	d20f      	bcs.n	800eb58 <_realloc_r+0x48>
 800eb38:	4621      	mov	r1, r4
 800eb3a:	4638      	mov	r0, r7
 800eb3c:	f7fe ffda 	bl	800daf4 <_malloc_r>
 800eb40:	4605      	mov	r5, r0
 800eb42:	2800      	cmp	r0, #0
 800eb44:	d0f2      	beq.n	800eb2c <_realloc_r+0x1c>
 800eb46:	4631      	mov	r1, r6
 800eb48:	4622      	mov	r2, r4
 800eb4a:	f7fb fa91 	bl	800a070 <memcpy>
 800eb4e:	4631      	mov	r1, r6
 800eb50:	4638      	mov	r0, r7
 800eb52:	f7fe ff7f 	bl	800da54 <_free_r>
 800eb56:	e7e9      	b.n	800eb2c <_realloc_r+0x1c>
 800eb58:	4635      	mov	r5, r6
 800eb5a:	e7e7      	b.n	800eb2c <_realloc_r+0x1c>

0800eb5c <__sfputc_r>:
 800eb5c:	6893      	ldr	r3, [r2, #8]
 800eb5e:	3b01      	subs	r3, #1
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	b410      	push	{r4}
 800eb64:	6093      	str	r3, [r2, #8]
 800eb66:	da08      	bge.n	800eb7a <__sfputc_r+0x1e>
 800eb68:	6994      	ldr	r4, [r2, #24]
 800eb6a:	42a3      	cmp	r3, r4
 800eb6c:	db01      	blt.n	800eb72 <__sfputc_r+0x16>
 800eb6e:	290a      	cmp	r1, #10
 800eb70:	d103      	bne.n	800eb7a <__sfputc_r+0x1e>
 800eb72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb76:	f000 b94b 	b.w	800ee10 <__swbuf_r>
 800eb7a:	6813      	ldr	r3, [r2, #0]
 800eb7c:	1c58      	adds	r0, r3, #1
 800eb7e:	6010      	str	r0, [r2, #0]
 800eb80:	7019      	strb	r1, [r3, #0]
 800eb82:	4608      	mov	r0, r1
 800eb84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <__sfputs_r>:
 800eb8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb8c:	4606      	mov	r6, r0
 800eb8e:	460f      	mov	r7, r1
 800eb90:	4614      	mov	r4, r2
 800eb92:	18d5      	adds	r5, r2, r3
 800eb94:	42ac      	cmp	r4, r5
 800eb96:	d101      	bne.n	800eb9c <__sfputs_r+0x12>
 800eb98:	2000      	movs	r0, #0
 800eb9a:	e007      	b.n	800ebac <__sfputs_r+0x22>
 800eb9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eba0:	463a      	mov	r2, r7
 800eba2:	4630      	mov	r0, r6
 800eba4:	f7ff ffda 	bl	800eb5c <__sfputc_r>
 800eba8:	1c43      	adds	r3, r0, #1
 800ebaa:	d1f3      	bne.n	800eb94 <__sfputs_r+0xa>
 800ebac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebb0 <_vfiprintf_r>:
 800ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb4:	460d      	mov	r5, r1
 800ebb6:	b09d      	sub	sp, #116	; 0x74
 800ebb8:	4614      	mov	r4, r2
 800ebba:	4698      	mov	r8, r3
 800ebbc:	4606      	mov	r6, r0
 800ebbe:	b118      	cbz	r0, 800ebc8 <_vfiprintf_r+0x18>
 800ebc0:	6983      	ldr	r3, [r0, #24]
 800ebc2:	b90b      	cbnz	r3, 800ebc8 <_vfiprintf_r+0x18>
 800ebc4:	f7ff fecc 	bl	800e960 <__sinit>
 800ebc8:	4b89      	ldr	r3, [pc, #548]	; (800edf0 <_vfiprintf_r+0x240>)
 800ebca:	429d      	cmp	r5, r3
 800ebcc:	d11b      	bne.n	800ec06 <_vfiprintf_r+0x56>
 800ebce:	6875      	ldr	r5, [r6, #4]
 800ebd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebd2:	07d9      	lsls	r1, r3, #31
 800ebd4:	d405      	bmi.n	800ebe2 <_vfiprintf_r+0x32>
 800ebd6:	89ab      	ldrh	r3, [r5, #12]
 800ebd8:	059a      	lsls	r2, r3, #22
 800ebda:	d402      	bmi.n	800ebe2 <_vfiprintf_r+0x32>
 800ebdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebde:	f7ff ff6f 	bl	800eac0 <__retarget_lock_acquire_recursive>
 800ebe2:	89ab      	ldrh	r3, [r5, #12]
 800ebe4:	071b      	lsls	r3, r3, #28
 800ebe6:	d501      	bpl.n	800ebec <_vfiprintf_r+0x3c>
 800ebe8:	692b      	ldr	r3, [r5, #16]
 800ebea:	b9eb      	cbnz	r3, 800ec28 <_vfiprintf_r+0x78>
 800ebec:	4629      	mov	r1, r5
 800ebee:	4630      	mov	r0, r6
 800ebf0:	f000 f960 	bl	800eeb4 <__swsetup_r>
 800ebf4:	b1c0      	cbz	r0, 800ec28 <_vfiprintf_r+0x78>
 800ebf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebf8:	07dc      	lsls	r4, r3, #31
 800ebfa:	d50e      	bpl.n	800ec1a <_vfiprintf_r+0x6a>
 800ebfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ec00:	b01d      	add	sp, #116	; 0x74
 800ec02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec06:	4b7b      	ldr	r3, [pc, #492]	; (800edf4 <_vfiprintf_r+0x244>)
 800ec08:	429d      	cmp	r5, r3
 800ec0a:	d101      	bne.n	800ec10 <_vfiprintf_r+0x60>
 800ec0c:	68b5      	ldr	r5, [r6, #8]
 800ec0e:	e7df      	b.n	800ebd0 <_vfiprintf_r+0x20>
 800ec10:	4b79      	ldr	r3, [pc, #484]	; (800edf8 <_vfiprintf_r+0x248>)
 800ec12:	429d      	cmp	r5, r3
 800ec14:	bf08      	it	eq
 800ec16:	68f5      	ldreq	r5, [r6, #12]
 800ec18:	e7da      	b.n	800ebd0 <_vfiprintf_r+0x20>
 800ec1a:	89ab      	ldrh	r3, [r5, #12]
 800ec1c:	0598      	lsls	r0, r3, #22
 800ec1e:	d4ed      	bmi.n	800ebfc <_vfiprintf_r+0x4c>
 800ec20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec22:	f7ff ff4e 	bl	800eac2 <__retarget_lock_release_recursive>
 800ec26:	e7e9      	b.n	800ebfc <_vfiprintf_r+0x4c>
 800ec28:	2300      	movs	r3, #0
 800ec2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec2c:	2320      	movs	r3, #32
 800ec2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec36:	2330      	movs	r3, #48	; 0x30
 800ec38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800edfc <_vfiprintf_r+0x24c>
 800ec3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec40:	f04f 0901 	mov.w	r9, #1
 800ec44:	4623      	mov	r3, r4
 800ec46:	469a      	mov	sl, r3
 800ec48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec4c:	b10a      	cbz	r2, 800ec52 <_vfiprintf_r+0xa2>
 800ec4e:	2a25      	cmp	r2, #37	; 0x25
 800ec50:	d1f9      	bne.n	800ec46 <_vfiprintf_r+0x96>
 800ec52:	ebba 0b04 	subs.w	fp, sl, r4
 800ec56:	d00b      	beq.n	800ec70 <_vfiprintf_r+0xc0>
 800ec58:	465b      	mov	r3, fp
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	4629      	mov	r1, r5
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f7ff ff93 	bl	800eb8a <__sfputs_r>
 800ec64:	3001      	adds	r0, #1
 800ec66:	f000 80aa 	beq.w	800edbe <_vfiprintf_r+0x20e>
 800ec6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec6c:	445a      	add	r2, fp
 800ec6e:	9209      	str	r2, [sp, #36]	; 0x24
 800ec70:	f89a 3000 	ldrb.w	r3, [sl]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 80a2 	beq.w	800edbe <_vfiprintf_r+0x20e>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec84:	f10a 0a01 	add.w	sl, sl, #1
 800ec88:	9304      	str	r3, [sp, #16]
 800ec8a:	9307      	str	r3, [sp, #28]
 800ec8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec90:	931a      	str	r3, [sp, #104]	; 0x68
 800ec92:	4654      	mov	r4, sl
 800ec94:	2205      	movs	r2, #5
 800ec96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec9a:	4858      	ldr	r0, [pc, #352]	; (800edfc <_vfiprintf_r+0x24c>)
 800ec9c:	f7f1 faa8 	bl	80001f0 <memchr>
 800eca0:	9a04      	ldr	r2, [sp, #16]
 800eca2:	b9d8      	cbnz	r0, 800ecdc <_vfiprintf_r+0x12c>
 800eca4:	06d1      	lsls	r1, r2, #27
 800eca6:	bf44      	itt	mi
 800eca8:	2320      	movmi	r3, #32
 800ecaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecae:	0713      	lsls	r3, r2, #28
 800ecb0:	bf44      	itt	mi
 800ecb2:	232b      	movmi	r3, #43	; 0x2b
 800ecb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecb8:	f89a 3000 	ldrb.w	r3, [sl]
 800ecbc:	2b2a      	cmp	r3, #42	; 0x2a
 800ecbe:	d015      	beq.n	800ecec <_vfiprintf_r+0x13c>
 800ecc0:	9a07      	ldr	r2, [sp, #28]
 800ecc2:	4654      	mov	r4, sl
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	f04f 0c0a 	mov.w	ip, #10
 800ecca:	4621      	mov	r1, r4
 800eccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecd0:	3b30      	subs	r3, #48	; 0x30
 800ecd2:	2b09      	cmp	r3, #9
 800ecd4:	d94e      	bls.n	800ed74 <_vfiprintf_r+0x1c4>
 800ecd6:	b1b0      	cbz	r0, 800ed06 <_vfiprintf_r+0x156>
 800ecd8:	9207      	str	r2, [sp, #28]
 800ecda:	e014      	b.n	800ed06 <_vfiprintf_r+0x156>
 800ecdc:	eba0 0308 	sub.w	r3, r0, r8
 800ece0:	fa09 f303 	lsl.w	r3, r9, r3
 800ece4:	4313      	orrs	r3, r2
 800ece6:	9304      	str	r3, [sp, #16]
 800ece8:	46a2      	mov	sl, r4
 800ecea:	e7d2      	b.n	800ec92 <_vfiprintf_r+0xe2>
 800ecec:	9b03      	ldr	r3, [sp, #12]
 800ecee:	1d19      	adds	r1, r3, #4
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	9103      	str	r1, [sp, #12]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	bfbb      	ittet	lt
 800ecf8:	425b      	neglt	r3, r3
 800ecfa:	f042 0202 	orrlt.w	r2, r2, #2
 800ecfe:	9307      	strge	r3, [sp, #28]
 800ed00:	9307      	strlt	r3, [sp, #28]
 800ed02:	bfb8      	it	lt
 800ed04:	9204      	strlt	r2, [sp, #16]
 800ed06:	7823      	ldrb	r3, [r4, #0]
 800ed08:	2b2e      	cmp	r3, #46	; 0x2e
 800ed0a:	d10c      	bne.n	800ed26 <_vfiprintf_r+0x176>
 800ed0c:	7863      	ldrb	r3, [r4, #1]
 800ed0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ed10:	d135      	bne.n	800ed7e <_vfiprintf_r+0x1ce>
 800ed12:	9b03      	ldr	r3, [sp, #12]
 800ed14:	1d1a      	adds	r2, r3, #4
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	9203      	str	r2, [sp, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	bfb8      	it	lt
 800ed1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed22:	3402      	adds	r4, #2
 800ed24:	9305      	str	r3, [sp, #20]
 800ed26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee0c <_vfiprintf_r+0x25c>
 800ed2a:	7821      	ldrb	r1, [r4, #0]
 800ed2c:	2203      	movs	r2, #3
 800ed2e:	4650      	mov	r0, sl
 800ed30:	f7f1 fa5e 	bl	80001f0 <memchr>
 800ed34:	b140      	cbz	r0, 800ed48 <_vfiprintf_r+0x198>
 800ed36:	2340      	movs	r3, #64	; 0x40
 800ed38:	eba0 000a 	sub.w	r0, r0, sl
 800ed3c:	fa03 f000 	lsl.w	r0, r3, r0
 800ed40:	9b04      	ldr	r3, [sp, #16]
 800ed42:	4303      	orrs	r3, r0
 800ed44:	3401      	adds	r4, #1
 800ed46:	9304      	str	r3, [sp, #16]
 800ed48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed4c:	482c      	ldr	r0, [pc, #176]	; (800ee00 <_vfiprintf_r+0x250>)
 800ed4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed52:	2206      	movs	r2, #6
 800ed54:	f7f1 fa4c 	bl	80001f0 <memchr>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d03f      	beq.n	800eddc <_vfiprintf_r+0x22c>
 800ed5c:	4b29      	ldr	r3, [pc, #164]	; (800ee04 <_vfiprintf_r+0x254>)
 800ed5e:	bb1b      	cbnz	r3, 800eda8 <_vfiprintf_r+0x1f8>
 800ed60:	9b03      	ldr	r3, [sp, #12]
 800ed62:	3307      	adds	r3, #7
 800ed64:	f023 0307 	bic.w	r3, r3, #7
 800ed68:	3308      	adds	r3, #8
 800ed6a:	9303      	str	r3, [sp, #12]
 800ed6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed6e:	443b      	add	r3, r7
 800ed70:	9309      	str	r3, [sp, #36]	; 0x24
 800ed72:	e767      	b.n	800ec44 <_vfiprintf_r+0x94>
 800ed74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed78:	460c      	mov	r4, r1
 800ed7a:	2001      	movs	r0, #1
 800ed7c:	e7a5      	b.n	800ecca <_vfiprintf_r+0x11a>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	3401      	adds	r4, #1
 800ed82:	9305      	str	r3, [sp, #20]
 800ed84:	4619      	mov	r1, r3
 800ed86:	f04f 0c0a 	mov.w	ip, #10
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed90:	3a30      	subs	r2, #48	; 0x30
 800ed92:	2a09      	cmp	r2, #9
 800ed94:	d903      	bls.n	800ed9e <_vfiprintf_r+0x1ee>
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d0c5      	beq.n	800ed26 <_vfiprintf_r+0x176>
 800ed9a:	9105      	str	r1, [sp, #20]
 800ed9c:	e7c3      	b.n	800ed26 <_vfiprintf_r+0x176>
 800ed9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eda2:	4604      	mov	r4, r0
 800eda4:	2301      	movs	r3, #1
 800eda6:	e7f0      	b.n	800ed8a <_vfiprintf_r+0x1da>
 800eda8:	ab03      	add	r3, sp, #12
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	462a      	mov	r2, r5
 800edae:	4b16      	ldr	r3, [pc, #88]	; (800ee08 <_vfiprintf_r+0x258>)
 800edb0:	a904      	add	r1, sp, #16
 800edb2:	4630      	mov	r0, r6
 800edb4:	f7fb fa12 	bl	800a1dc <_printf_float>
 800edb8:	4607      	mov	r7, r0
 800edba:	1c78      	adds	r0, r7, #1
 800edbc:	d1d6      	bne.n	800ed6c <_vfiprintf_r+0x1bc>
 800edbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edc0:	07d9      	lsls	r1, r3, #31
 800edc2:	d405      	bmi.n	800edd0 <_vfiprintf_r+0x220>
 800edc4:	89ab      	ldrh	r3, [r5, #12]
 800edc6:	059a      	lsls	r2, r3, #22
 800edc8:	d402      	bmi.n	800edd0 <_vfiprintf_r+0x220>
 800edca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edcc:	f7ff fe79 	bl	800eac2 <__retarget_lock_release_recursive>
 800edd0:	89ab      	ldrh	r3, [r5, #12]
 800edd2:	065b      	lsls	r3, r3, #25
 800edd4:	f53f af12 	bmi.w	800ebfc <_vfiprintf_r+0x4c>
 800edd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edda:	e711      	b.n	800ec00 <_vfiprintf_r+0x50>
 800eddc:	ab03      	add	r3, sp, #12
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	462a      	mov	r2, r5
 800ede2:	4b09      	ldr	r3, [pc, #36]	; (800ee08 <_vfiprintf_r+0x258>)
 800ede4:	a904      	add	r1, sp, #16
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7fb fc9c 	bl	800a724 <_printf_i>
 800edec:	e7e4      	b.n	800edb8 <_vfiprintf_r+0x208>
 800edee:	bf00      	nop
 800edf0:	08010d04 	.word	0x08010d04
 800edf4:	08010d24 	.word	0x08010d24
 800edf8:	08010ce4 	.word	0x08010ce4
 800edfc:	08010c7c 	.word	0x08010c7c
 800ee00:	08010c86 	.word	0x08010c86
 800ee04:	0800a1dd 	.word	0x0800a1dd
 800ee08:	0800eb8b 	.word	0x0800eb8b
 800ee0c:	08010c82 	.word	0x08010c82

0800ee10 <__swbuf_r>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	460e      	mov	r6, r1
 800ee14:	4614      	mov	r4, r2
 800ee16:	4605      	mov	r5, r0
 800ee18:	b118      	cbz	r0, 800ee22 <__swbuf_r+0x12>
 800ee1a:	6983      	ldr	r3, [r0, #24]
 800ee1c:	b90b      	cbnz	r3, 800ee22 <__swbuf_r+0x12>
 800ee1e:	f7ff fd9f 	bl	800e960 <__sinit>
 800ee22:	4b21      	ldr	r3, [pc, #132]	; (800eea8 <__swbuf_r+0x98>)
 800ee24:	429c      	cmp	r4, r3
 800ee26:	d12b      	bne.n	800ee80 <__swbuf_r+0x70>
 800ee28:	686c      	ldr	r4, [r5, #4]
 800ee2a:	69a3      	ldr	r3, [r4, #24]
 800ee2c:	60a3      	str	r3, [r4, #8]
 800ee2e:	89a3      	ldrh	r3, [r4, #12]
 800ee30:	071a      	lsls	r2, r3, #28
 800ee32:	d52f      	bpl.n	800ee94 <__swbuf_r+0x84>
 800ee34:	6923      	ldr	r3, [r4, #16]
 800ee36:	b36b      	cbz	r3, 800ee94 <__swbuf_r+0x84>
 800ee38:	6923      	ldr	r3, [r4, #16]
 800ee3a:	6820      	ldr	r0, [r4, #0]
 800ee3c:	1ac0      	subs	r0, r0, r3
 800ee3e:	6963      	ldr	r3, [r4, #20]
 800ee40:	b2f6      	uxtb	r6, r6
 800ee42:	4283      	cmp	r3, r0
 800ee44:	4637      	mov	r7, r6
 800ee46:	dc04      	bgt.n	800ee52 <__swbuf_r+0x42>
 800ee48:	4621      	mov	r1, r4
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f7ff fcf4 	bl	800e838 <_fflush_r>
 800ee50:	bb30      	cbnz	r0, 800eea0 <__swbuf_r+0x90>
 800ee52:	68a3      	ldr	r3, [r4, #8]
 800ee54:	3b01      	subs	r3, #1
 800ee56:	60a3      	str	r3, [r4, #8]
 800ee58:	6823      	ldr	r3, [r4, #0]
 800ee5a:	1c5a      	adds	r2, r3, #1
 800ee5c:	6022      	str	r2, [r4, #0]
 800ee5e:	701e      	strb	r6, [r3, #0]
 800ee60:	6963      	ldr	r3, [r4, #20]
 800ee62:	3001      	adds	r0, #1
 800ee64:	4283      	cmp	r3, r0
 800ee66:	d004      	beq.n	800ee72 <__swbuf_r+0x62>
 800ee68:	89a3      	ldrh	r3, [r4, #12]
 800ee6a:	07db      	lsls	r3, r3, #31
 800ee6c:	d506      	bpl.n	800ee7c <__swbuf_r+0x6c>
 800ee6e:	2e0a      	cmp	r6, #10
 800ee70:	d104      	bne.n	800ee7c <__swbuf_r+0x6c>
 800ee72:	4621      	mov	r1, r4
 800ee74:	4628      	mov	r0, r5
 800ee76:	f7ff fcdf 	bl	800e838 <_fflush_r>
 800ee7a:	b988      	cbnz	r0, 800eea0 <__swbuf_r+0x90>
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee80:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <__swbuf_r+0x9c>)
 800ee82:	429c      	cmp	r4, r3
 800ee84:	d101      	bne.n	800ee8a <__swbuf_r+0x7a>
 800ee86:	68ac      	ldr	r4, [r5, #8]
 800ee88:	e7cf      	b.n	800ee2a <__swbuf_r+0x1a>
 800ee8a:	4b09      	ldr	r3, [pc, #36]	; (800eeb0 <__swbuf_r+0xa0>)
 800ee8c:	429c      	cmp	r4, r3
 800ee8e:	bf08      	it	eq
 800ee90:	68ec      	ldreq	r4, [r5, #12]
 800ee92:	e7ca      	b.n	800ee2a <__swbuf_r+0x1a>
 800ee94:	4621      	mov	r1, r4
 800ee96:	4628      	mov	r0, r5
 800ee98:	f000 f80c 	bl	800eeb4 <__swsetup_r>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d0cb      	beq.n	800ee38 <__swbuf_r+0x28>
 800eea0:	f04f 37ff 	mov.w	r7, #4294967295
 800eea4:	e7ea      	b.n	800ee7c <__swbuf_r+0x6c>
 800eea6:	bf00      	nop
 800eea8:	08010d04 	.word	0x08010d04
 800eeac:	08010d24 	.word	0x08010d24
 800eeb0:	08010ce4 	.word	0x08010ce4

0800eeb4 <__swsetup_r>:
 800eeb4:	4b32      	ldr	r3, [pc, #200]	; (800ef80 <__swsetup_r+0xcc>)
 800eeb6:	b570      	push	{r4, r5, r6, lr}
 800eeb8:	681d      	ldr	r5, [r3, #0]
 800eeba:	4606      	mov	r6, r0
 800eebc:	460c      	mov	r4, r1
 800eebe:	b125      	cbz	r5, 800eeca <__swsetup_r+0x16>
 800eec0:	69ab      	ldr	r3, [r5, #24]
 800eec2:	b913      	cbnz	r3, 800eeca <__swsetup_r+0x16>
 800eec4:	4628      	mov	r0, r5
 800eec6:	f7ff fd4b 	bl	800e960 <__sinit>
 800eeca:	4b2e      	ldr	r3, [pc, #184]	; (800ef84 <__swsetup_r+0xd0>)
 800eecc:	429c      	cmp	r4, r3
 800eece:	d10f      	bne.n	800eef0 <__swsetup_r+0x3c>
 800eed0:	686c      	ldr	r4, [r5, #4]
 800eed2:	89a3      	ldrh	r3, [r4, #12]
 800eed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eed8:	0719      	lsls	r1, r3, #28
 800eeda:	d42c      	bmi.n	800ef36 <__swsetup_r+0x82>
 800eedc:	06dd      	lsls	r5, r3, #27
 800eede:	d411      	bmi.n	800ef04 <__swsetup_r+0x50>
 800eee0:	2309      	movs	r3, #9
 800eee2:	6033      	str	r3, [r6, #0]
 800eee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eee8:	81a3      	strh	r3, [r4, #12]
 800eeea:	f04f 30ff 	mov.w	r0, #4294967295
 800eeee:	e03e      	b.n	800ef6e <__swsetup_r+0xba>
 800eef0:	4b25      	ldr	r3, [pc, #148]	; (800ef88 <__swsetup_r+0xd4>)
 800eef2:	429c      	cmp	r4, r3
 800eef4:	d101      	bne.n	800eefa <__swsetup_r+0x46>
 800eef6:	68ac      	ldr	r4, [r5, #8]
 800eef8:	e7eb      	b.n	800eed2 <__swsetup_r+0x1e>
 800eefa:	4b24      	ldr	r3, [pc, #144]	; (800ef8c <__swsetup_r+0xd8>)
 800eefc:	429c      	cmp	r4, r3
 800eefe:	bf08      	it	eq
 800ef00:	68ec      	ldreq	r4, [r5, #12]
 800ef02:	e7e6      	b.n	800eed2 <__swsetup_r+0x1e>
 800ef04:	0758      	lsls	r0, r3, #29
 800ef06:	d512      	bpl.n	800ef2e <__swsetup_r+0x7a>
 800ef08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef0a:	b141      	cbz	r1, 800ef1e <__swsetup_r+0x6a>
 800ef0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef10:	4299      	cmp	r1, r3
 800ef12:	d002      	beq.n	800ef1a <__swsetup_r+0x66>
 800ef14:	4630      	mov	r0, r6
 800ef16:	f7fe fd9d 	bl	800da54 <_free_r>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	6363      	str	r3, [r4, #52]	; 0x34
 800ef1e:	89a3      	ldrh	r3, [r4, #12]
 800ef20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef24:	81a3      	strh	r3, [r4, #12]
 800ef26:	2300      	movs	r3, #0
 800ef28:	6063      	str	r3, [r4, #4]
 800ef2a:	6923      	ldr	r3, [r4, #16]
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	89a3      	ldrh	r3, [r4, #12]
 800ef30:	f043 0308 	orr.w	r3, r3, #8
 800ef34:	81a3      	strh	r3, [r4, #12]
 800ef36:	6923      	ldr	r3, [r4, #16]
 800ef38:	b94b      	cbnz	r3, 800ef4e <__swsetup_r+0x9a>
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef44:	d003      	beq.n	800ef4e <__swsetup_r+0x9a>
 800ef46:	4621      	mov	r1, r4
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f000 f84d 	bl	800efe8 <__smakebuf_r>
 800ef4e:	89a0      	ldrh	r0, [r4, #12]
 800ef50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef54:	f010 0301 	ands.w	r3, r0, #1
 800ef58:	d00a      	beq.n	800ef70 <__swsetup_r+0xbc>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	60a3      	str	r3, [r4, #8]
 800ef5e:	6963      	ldr	r3, [r4, #20]
 800ef60:	425b      	negs	r3, r3
 800ef62:	61a3      	str	r3, [r4, #24]
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	b943      	cbnz	r3, 800ef7a <__swsetup_r+0xc6>
 800ef68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef6c:	d1ba      	bne.n	800eee4 <__swsetup_r+0x30>
 800ef6e:	bd70      	pop	{r4, r5, r6, pc}
 800ef70:	0781      	lsls	r1, r0, #30
 800ef72:	bf58      	it	pl
 800ef74:	6963      	ldrpl	r3, [r4, #20]
 800ef76:	60a3      	str	r3, [r4, #8]
 800ef78:	e7f4      	b.n	800ef64 <__swsetup_r+0xb0>
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	e7f7      	b.n	800ef6e <__swsetup_r+0xba>
 800ef7e:	bf00      	nop
 800ef80:	20000034 	.word	0x20000034
 800ef84:	08010d04 	.word	0x08010d04
 800ef88:	08010d24 	.word	0x08010d24
 800ef8c:	08010ce4 	.word	0x08010ce4

0800ef90 <abort>:
 800ef90:	b508      	push	{r3, lr}
 800ef92:	2006      	movs	r0, #6
 800ef94:	f000 f898 	bl	800f0c8 <raise>
 800ef98:	2001      	movs	r0, #1
 800ef9a:	f7f3 fba3 	bl	80026e4 <_exit>

0800ef9e <__swhatbuf_r>:
 800ef9e:	b570      	push	{r4, r5, r6, lr}
 800efa0:	460e      	mov	r6, r1
 800efa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa6:	2900      	cmp	r1, #0
 800efa8:	b096      	sub	sp, #88	; 0x58
 800efaa:	4614      	mov	r4, r2
 800efac:	461d      	mov	r5, r3
 800efae:	da07      	bge.n	800efc0 <__swhatbuf_r+0x22>
 800efb0:	2300      	movs	r3, #0
 800efb2:	602b      	str	r3, [r5, #0]
 800efb4:	89b3      	ldrh	r3, [r6, #12]
 800efb6:	061a      	lsls	r2, r3, #24
 800efb8:	d410      	bmi.n	800efdc <__swhatbuf_r+0x3e>
 800efba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efbe:	e00e      	b.n	800efde <__swhatbuf_r+0x40>
 800efc0:	466a      	mov	r2, sp
 800efc2:	f000 f89d 	bl	800f100 <_fstat_r>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	dbf2      	blt.n	800efb0 <__swhatbuf_r+0x12>
 800efca:	9a01      	ldr	r2, [sp, #4]
 800efcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800efd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800efd4:	425a      	negs	r2, r3
 800efd6:	415a      	adcs	r2, r3
 800efd8:	602a      	str	r2, [r5, #0]
 800efda:	e7ee      	b.n	800efba <__swhatbuf_r+0x1c>
 800efdc:	2340      	movs	r3, #64	; 0x40
 800efde:	2000      	movs	r0, #0
 800efe0:	6023      	str	r3, [r4, #0]
 800efe2:	b016      	add	sp, #88	; 0x58
 800efe4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800efe8 <__smakebuf_r>:
 800efe8:	898b      	ldrh	r3, [r1, #12]
 800efea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efec:	079d      	lsls	r5, r3, #30
 800efee:	4606      	mov	r6, r0
 800eff0:	460c      	mov	r4, r1
 800eff2:	d507      	bpl.n	800f004 <__smakebuf_r+0x1c>
 800eff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eff8:	6023      	str	r3, [r4, #0]
 800effa:	6123      	str	r3, [r4, #16]
 800effc:	2301      	movs	r3, #1
 800effe:	6163      	str	r3, [r4, #20]
 800f000:	b002      	add	sp, #8
 800f002:	bd70      	pop	{r4, r5, r6, pc}
 800f004:	ab01      	add	r3, sp, #4
 800f006:	466a      	mov	r2, sp
 800f008:	f7ff ffc9 	bl	800ef9e <__swhatbuf_r>
 800f00c:	9900      	ldr	r1, [sp, #0]
 800f00e:	4605      	mov	r5, r0
 800f010:	4630      	mov	r0, r6
 800f012:	f7fe fd6f 	bl	800daf4 <_malloc_r>
 800f016:	b948      	cbnz	r0, 800f02c <__smakebuf_r+0x44>
 800f018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f01c:	059a      	lsls	r2, r3, #22
 800f01e:	d4ef      	bmi.n	800f000 <__smakebuf_r+0x18>
 800f020:	f023 0303 	bic.w	r3, r3, #3
 800f024:	f043 0302 	orr.w	r3, r3, #2
 800f028:	81a3      	strh	r3, [r4, #12]
 800f02a:	e7e3      	b.n	800eff4 <__smakebuf_r+0xc>
 800f02c:	4b0d      	ldr	r3, [pc, #52]	; (800f064 <__smakebuf_r+0x7c>)
 800f02e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	6020      	str	r0, [r4, #0]
 800f034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f038:	81a3      	strh	r3, [r4, #12]
 800f03a:	9b00      	ldr	r3, [sp, #0]
 800f03c:	6163      	str	r3, [r4, #20]
 800f03e:	9b01      	ldr	r3, [sp, #4]
 800f040:	6120      	str	r0, [r4, #16]
 800f042:	b15b      	cbz	r3, 800f05c <__smakebuf_r+0x74>
 800f044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f048:	4630      	mov	r0, r6
 800f04a:	f000 f86b 	bl	800f124 <_isatty_r>
 800f04e:	b128      	cbz	r0, 800f05c <__smakebuf_r+0x74>
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	f023 0303 	bic.w	r3, r3, #3
 800f056:	f043 0301 	orr.w	r3, r3, #1
 800f05a:	81a3      	strh	r3, [r4, #12]
 800f05c:	89a0      	ldrh	r0, [r4, #12]
 800f05e:	4305      	orrs	r5, r0
 800f060:	81a5      	strh	r5, [r4, #12]
 800f062:	e7cd      	b.n	800f000 <__smakebuf_r+0x18>
 800f064:	0800e8f9 	.word	0x0800e8f9

0800f068 <_malloc_usable_size_r>:
 800f068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f06c:	1f18      	subs	r0, r3, #4
 800f06e:	2b00      	cmp	r3, #0
 800f070:	bfbc      	itt	lt
 800f072:	580b      	ldrlt	r3, [r1, r0]
 800f074:	18c0      	addlt	r0, r0, r3
 800f076:	4770      	bx	lr

0800f078 <_raise_r>:
 800f078:	291f      	cmp	r1, #31
 800f07a:	b538      	push	{r3, r4, r5, lr}
 800f07c:	4604      	mov	r4, r0
 800f07e:	460d      	mov	r5, r1
 800f080:	d904      	bls.n	800f08c <_raise_r+0x14>
 800f082:	2316      	movs	r3, #22
 800f084:	6003      	str	r3, [r0, #0]
 800f086:	f04f 30ff 	mov.w	r0, #4294967295
 800f08a:	bd38      	pop	{r3, r4, r5, pc}
 800f08c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f08e:	b112      	cbz	r2, 800f096 <_raise_r+0x1e>
 800f090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f094:	b94b      	cbnz	r3, 800f0aa <_raise_r+0x32>
 800f096:	4620      	mov	r0, r4
 800f098:	f000 f830 	bl	800f0fc <_getpid_r>
 800f09c:	462a      	mov	r2, r5
 800f09e:	4601      	mov	r1, r0
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0a6:	f000 b817 	b.w	800f0d8 <_kill_r>
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d00a      	beq.n	800f0c4 <_raise_r+0x4c>
 800f0ae:	1c59      	adds	r1, r3, #1
 800f0b0:	d103      	bne.n	800f0ba <_raise_r+0x42>
 800f0b2:	2316      	movs	r3, #22
 800f0b4:	6003      	str	r3, [r0, #0]
 800f0b6:	2001      	movs	r0, #1
 800f0b8:	e7e7      	b.n	800f08a <_raise_r+0x12>
 800f0ba:	2400      	movs	r4, #0
 800f0bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	4798      	blx	r3
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	e7e0      	b.n	800f08a <_raise_r+0x12>

0800f0c8 <raise>:
 800f0c8:	4b02      	ldr	r3, [pc, #8]	; (800f0d4 <raise+0xc>)
 800f0ca:	4601      	mov	r1, r0
 800f0cc:	6818      	ldr	r0, [r3, #0]
 800f0ce:	f7ff bfd3 	b.w	800f078 <_raise_r>
 800f0d2:	bf00      	nop
 800f0d4:	20000034 	.word	0x20000034

0800f0d8 <_kill_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d07      	ldr	r5, [pc, #28]	; (800f0f8 <_kill_r+0x20>)
 800f0dc:	2300      	movs	r3, #0
 800f0de:	4604      	mov	r4, r0
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	4611      	mov	r1, r2
 800f0e4:	602b      	str	r3, [r5, #0]
 800f0e6:	f7f3 faed 	bl	80026c4 <_kill>
 800f0ea:	1c43      	adds	r3, r0, #1
 800f0ec:	d102      	bne.n	800f0f4 <_kill_r+0x1c>
 800f0ee:	682b      	ldr	r3, [r5, #0]
 800f0f0:	b103      	cbz	r3, 800f0f4 <_kill_r+0x1c>
 800f0f2:	6023      	str	r3, [r4, #0]
 800f0f4:	bd38      	pop	{r3, r4, r5, pc}
 800f0f6:	bf00      	nop
 800f0f8:	200059c4 	.word	0x200059c4

0800f0fc <_getpid_r>:
 800f0fc:	f7f3 bada 	b.w	80026b4 <_getpid>

0800f100 <_fstat_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4d07      	ldr	r5, [pc, #28]	; (800f120 <_fstat_r+0x20>)
 800f104:	2300      	movs	r3, #0
 800f106:	4604      	mov	r4, r0
 800f108:	4608      	mov	r0, r1
 800f10a:	4611      	mov	r1, r2
 800f10c:	602b      	str	r3, [r5, #0]
 800f10e:	f7f3 fb38 	bl	8002782 <_fstat>
 800f112:	1c43      	adds	r3, r0, #1
 800f114:	d102      	bne.n	800f11c <_fstat_r+0x1c>
 800f116:	682b      	ldr	r3, [r5, #0]
 800f118:	b103      	cbz	r3, 800f11c <_fstat_r+0x1c>
 800f11a:	6023      	str	r3, [r4, #0]
 800f11c:	bd38      	pop	{r3, r4, r5, pc}
 800f11e:	bf00      	nop
 800f120:	200059c4 	.word	0x200059c4

0800f124 <_isatty_r>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4d06      	ldr	r5, [pc, #24]	; (800f140 <_isatty_r+0x1c>)
 800f128:	2300      	movs	r3, #0
 800f12a:	4604      	mov	r4, r0
 800f12c:	4608      	mov	r0, r1
 800f12e:	602b      	str	r3, [r5, #0]
 800f130:	f7f3 fb37 	bl	80027a2 <_isatty>
 800f134:	1c43      	adds	r3, r0, #1
 800f136:	d102      	bne.n	800f13e <_isatty_r+0x1a>
 800f138:	682b      	ldr	r3, [r5, #0]
 800f13a:	b103      	cbz	r3, 800f13e <_isatty_r+0x1a>
 800f13c:	6023      	str	r3, [r4, #0]
 800f13e:	bd38      	pop	{r3, r4, r5, pc}
 800f140:	200059c4 	.word	0x200059c4

0800f144 <_init>:
 800f144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f146:	bf00      	nop
 800f148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f14a:	bc08      	pop	{r3}
 800f14c:	469e      	mov	lr, r3
 800f14e:	4770      	bx	lr

0800f150 <_fini>:
 800f150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f152:	bf00      	nop
 800f154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f156:	bc08      	pop	{r3}
 800f158:	469e      	mov	lr, r3
 800f15a:	4770      	bx	lr
