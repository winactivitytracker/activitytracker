
F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dc4  08011fe0  08011fe0  00021fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013da4  08013da4  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  08013da4  08013da4  00023da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013dac  08013dac  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013dac  08013dac  00023dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013db0  08013db0  00023db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08013db4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000058c0  2000020c  08013fc0  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005acc  08013fc0  00035acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f484  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062b6  00000000  00000000  0005f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002190  00000000  00000000  00065978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f30  00000000  00000000  00067b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa88  00000000  00000000  00069a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b63c  00000000  00000000  000894c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab916  00000000  00000000  000b4afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160412  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2fc  00000000  00000000  00160468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011fc4 	.word	0x08011fc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	08011fc4 	.word	0x08011fc4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_ADC1_Init+0x98>)
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <MX_ADC1_Init+0x9c>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_ADC1_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_ADC1_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_ADC1_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_ADC1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_ADC1_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_ADC1_Init+0x98>)
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <MX_ADC1_Init+0xa0>)
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_ADC1_Init+0x98>)
 8001048:	2201      	movs	r2, #1
 800104a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_ADC1_Init+0x98>)
 8001056:	2201      	movs	r2, #1
 8001058:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <MX_ADC1_Init+0x98>)
 800105c:	f001 ff86 	bl	8002f6c <HAL_ADC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001066:	f001 f899 	bl	800219c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800106a:	2301      	movs	r3, #1
 800106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_ADC1_Init+0x98>)
 800107c:	f002 f9da 	bl	8003434 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001086:	f001 f889 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20004ca4 	.word	0x20004ca4
 8001098:	40012000 	.word	0x40012000
 800109c:	0f000001 	.word	0x0f000001

080010a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a17      	ldr	r2, [pc, #92]	; (800111c <HAL_ADC_MspInit+0x7c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d127      	bne.n	8001112 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010fa:	2302      	movs	r3, #2
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_ADC_MspInit+0x84>)
 800110e:	f002 fd2d 	bl	8003b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012000 	.word	0x40012000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000

08001128 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    ADCValue = HAL_ADC_GetValue(&hadc1);
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_ADC_ConvCpltCallback+0x20>)
 8001132:	f002 f95e 	bl	80033f2 <HAL_ADC_GetValue>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_ADC_ConvCpltCallback+0x24>)
 800113c:	801a      	strh	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20004ca4 	.word	0x20004ca4
 800114c:	20000228 	.word	0x20000228

08001150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <MX_FREERTOS_Init+0x48>)
 8001156:	2100      	movs	r1, #0
 8001158:	4810      	ldr	r0, [pc, #64]	; (800119c <MX_FREERTOS_Init+0x4c>)
 800115a:	f008 fc2b 	bl	80099b4 <osThreadNew>
 800115e:	4603      	mov	r3, r0
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <MX_FREERTOS_Init+0x50>)
 8001162:	6013      	str	r3, [r2, #0]

  /* creation of DrawOnOledTask */
  DrawOnOledTaskHandle = osThreadNew(StartDrawing, NULL, &DrawOnOledTask_attributes);
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <MX_FREERTOS_Init+0x54>)
 8001166:	2100      	movs	r1, #0
 8001168:	480f      	ldr	r0, [pc, #60]	; (80011a8 <MX_FREERTOS_Init+0x58>)
 800116a:	f008 fc23 	bl	80099b4 <osThreadNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <MX_FREERTOS_Init+0x5c>)
 8001172:	6013      	str	r3, [r2, #0]

  /* creation of ActivityTask */
  ActivityTaskHandle = osThreadNew(StartActivityTask, NULL, &ActivityTask_attributes);
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <MX_FREERTOS_Init+0x60>)
 8001176:	2100      	movs	r1, #0
 8001178:	480e      	ldr	r0, [pc, #56]	; (80011b4 <MX_FREERTOS_Init+0x64>)
 800117a:	f008 fc1b 	bl	80099b4 <osThreadNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <MX_FREERTOS_Init+0x68>)
 8001182:	6013      	str	r3, [r2, #0]

  /* creation of readBattery */
  readBatteryHandle = osThreadNew(StartReadBattery, NULL, &readBattery_attributes);
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <MX_FREERTOS_Init+0x6c>)
 8001186:	2100      	movs	r1, #0
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_FREERTOS_Init+0x70>)
 800118a:	f008 fc13 	bl	80099b4 <osThreadNew>
 800118e:	4603      	mov	r3, r0
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <MX_FREERTOS_Init+0x74>)
 8001192:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	080137b0 	.word	0x080137b0
 800119c:	080011c9 	.word	0x080011c9
 80011a0:	20004cec 	.word	0x20004cec
 80011a4:	080137d4 	.word	0x080137d4
 80011a8:	080011d9 	.word	0x080011d9
 80011ac:	20004cf4 	.word	0x20004cf4
 80011b0:	080137f8 	.word	0x080137f8
 80011b4:	08001309 	.word	0x08001309
 80011b8:	20004cf0 	.word	0x20004cf0
 80011bc:	0801381c 	.word	0x0801381c
 80011c0:	0800161d 	.word	0x0800161d
 80011c4:	20004cf8 	.word	0x20004cf8

080011c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f008 fc81 	bl	8009ad8 <osDelay>
 80011d6:	e7fb      	b.n	80011d0 <StartDefaultTask+0x8>

080011d8 <StartDrawing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrawing */
void StartDrawing(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	char numbers[10];
	char *currentTime;

	SSD1306_GotoXY (0,0);
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	f001 fae2 	bl	80027ac <SSD1306_GotoXY>
	sprintf(numbers, "batt: %.0f", batteryPer);
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <StartDrawing+0x104>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	f107 0008 	add.w	r0, r7, #8
 80011fa:	4939      	ldr	r1, [pc, #228]	; (80012e0 <StartDrawing+0x108>)
 80011fc:	f00c fdd0 	bl	800dda0 <siprintf>
	SSD1306_Puts (numbers, &Font_7x10, 1);
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	2201      	movs	r2, #1
 8001206:	4937      	ldr	r1, [pc, #220]	; (80012e4 <StartDrawing+0x10c>)
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fb65 	bl	80028d8 <SSD1306_Puts>

	SSD1306_GotoXY (0, 25);
 800120e:	2119      	movs	r1, #25
 8001210:	2000      	movs	r0, #0
 8001212:	f001 facb 	bl	80027ac <SSD1306_GotoXY>
	sprintf(numbers, "%.2f", GPS.speed_km);
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <StartDrawing+0x110>)
 8001218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f99c 	bl	8000558 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	f107 0008 	add.w	r0, r7, #8
 8001228:	4930      	ldr	r1, [pc, #192]	; (80012ec <StartDrawing+0x114>)
 800122a:	f00c fdb9 	bl	800dda0 <siprintf>
	SSD1306_Puts(numbers, &Font_11x18, 1);
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2201      	movs	r2, #1
 8001234:	492e      	ldr	r1, [pc, #184]	; (80012f0 <StartDrawing+0x118>)
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fb4e 	bl	80028d8 <SSD1306_Puts>
	SSD1306_GotoXY (50,31);
 800123c:	211f      	movs	r1, #31
 800123e:	2032      	movs	r0, #50	; 0x32
 8001240:	f001 fab4 	bl	80027ac <SSD1306_GotoXY>
	SSD1306_Puts ("km/u", &Font_7x10, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	4927      	ldr	r1, [pc, #156]	; (80012e4 <StartDrawing+0x10c>)
 8001248:	482a      	ldr	r0, [pc, #168]	; (80012f4 <StartDrawing+0x11c>)
 800124a:	f001 fb45 	bl	80028d8 <SSD1306_Puts>

	SSD1306_GotoXY (0,10);
 800124e:	210a      	movs	r1, #10
 8001250:	2000      	movs	r0, #0
 8001252:	f001 faab 	bl	80027ac <SSD1306_GotoXY>
	//SSD1306_Puts(getActivity(), &Font_7x10, 1);
	SSD1306_Puts(activityToString(CurrentActivity.lastActiveMinute), &Font_7x10, 1);
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <StartDrawing+0x120>)
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 faea 	bl	8001834 <activityToString>
 8001260:	4603      	mov	r3, r0
 8001262:	2201      	movs	r2, #1
 8001264:	491f      	ldr	r1, [pc, #124]	; (80012e4 <StartDrawing+0x10c>)
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fb36 	bl	80028d8 <SSD1306_Puts>
	SSD1306_Puts("          ",&Font_7x10, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	491d      	ldr	r1, [pc, #116]	; (80012e4 <StartDrawing+0x10c>)
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <StartDrawing+0x124>)
 8001272:	f001 fb31 	bl	80028d8 <SSD1306_Puts>

	currentTime = getTime();
 8001276:	f000 fd9b 	bl	8001db0 <getTime>
 800127a:	6178      	str	r0, [r7, #20]
	SSD1306_GotoXY (0, 45);
 800127c:	212d      	movs	r1, #45	; 0x2d
 800127e:	2000      	movs	r0, #0
 8001280:	f001 fa94 	bl	80027ac <SSD1306_GotoXY>
	SSD1306_Puts(currentTime, &Font_7x10, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	4917      	ldr	r1, [pc, #92]	; (80012e4 <StartDrawing+0x10c>)
 8001288:	6978      	ldr	r0, [r7, #20]
 800128a:	f001 fb25 	bl	80028d8 <SSD1306_Puts>

	free(currentTime);
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f00b fe2e 	bl	800cef0 <free>

	SSD1306_GotoXY (90,45);
 8001294:	212d      	movs	r1, #45	; 0x2d
 8001296:	205a      	movs	r0, #90	; 0x5a
 8001298:	f001 fa88 	bl	80027ac <SSD1306_GotoXY>
	SSD1306_Puts ("ADM:", &Font_7x10, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	4911      	ldr	r1, [pc, #68]	; (80012e4 <StartDrawing+0x10c>)
 80012a0:	4817      	ldr	r0, [pc, #92]	; (8001300 <StartDrawing+0x128>)
 80012a2:	f001 fb19 	bl	80028d8 <SSD1306_Puts>

	SSD1306_GotoXY (115, 45);
 80012a6:	212d      	movs	r1, #45	; 0x2d
 80012a8:	2073      	movs	r0, #115	; 0x73
 80012aa:	f001 fa7f 	bl	80027ac <SSD1306_GotoXY>
	sprintf(numbers, "%d", CurrentActivity.length);
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <StartDrawing+0x120>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	4912      	ldr	r1, [pc, #72]	; (8001304 <StartDrawing+0x12c>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00c fd70 	bl	800dda0 <siprintf>
	SSD1306_Puts(numbers, &Font_7x10, 1);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	2201      	movs	r2, #1
 80012c6:	4907      	ldr	r1, [pc, #28]	; (80012e4 <StartDrawing+0x10c>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fb05 	bl	80028d8 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 80012ce:	f001 f9c7 	bl	8002660 <SSD1306_UpdateScreen>

    osDelay(1000);
 80012d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d6:	f008 fbff 	bl	8009ad8 <osDelay>
  {
 80012da:	e781      	b.n	80011e0 <StartDrawing+0x8>
 80012dc:	2000022c 	.word	0x2000022c
 80012e0:	08012018 	.word	0x08012018
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20004cfc 	.word	0x20004cfc
 80012ec:	08012024 	.word	0x08012024
 80012f0:	20000008 	.word	0x20000008
 80012f4:	0801202c 	.word	0x0801202c
 80012f8:	20004f60 	.word	0x20004f60
 80012fc:	08012034 	.word	0x08012034
 8001300:	08012040 	.word	0x08012040
 8001304:	08012048 	.word	0x08012048

08001308 <StartActivityTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartActivityTask */
void StartActivityTask(void *argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartActivityTask */
	static float time;
	//static uint8_t activityPM[20];
	static uint8_t counter = 0, counterPM = 0, counterPauze = 0;
	static uint8_t trackActivity[4];
	char* SDString = "";
 8001310:	4b8c      	ldr	r3, [pc, #560]	; (8001544 <StartActivityTask+0x23c>)
 8001312:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  getActivity();
 8001314:	f000 f9b8 	bl	8001688 <getActivity>

	  	if(time != GPS.utc_time)
 8001318:	4b8b      	ldr	r3, [pc, #556]	; (8001548 <StartActivityTask+0x240>)
 800131a:	ed93 7a06 	vldr	s14, [r3, #24]
 800131e:	4b8b      	ldr	r3, [pc, #556]	; (800154c <StartActivityTask+0x244>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	eeb4 7a67 	vcmp.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	f000 8164 	beq.w	80015f8 <StartActivityTask+0x2f0>
	  	{
	  		time = GPS.utc_time;
 8001330:	4b85      	ldr	r3, [pc, #532]	; (8001548 <StartActivityTask+0x240>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a85      	ldr	r2, [pc, #532]	; (800154c <StartActivityTask+0x244>)
 8001336:	6013      	str	r3, [r2, #0]

	  		if(counter < 60)	//one minute
 8001338:	4b85      	ldr	r3, [pc, #532]	; (8001550 <StartActivityTask+0x248>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b3b      	cmp	r3, #59	; 0x3b
 800133e:	d82e      	bhi.n	800139e <StartActivityTask+0x96>
	  		{
	  			switch (CurrentActivity.currentActivity) {
 8001340:	4b84      	ldr	r3, [pc, #528]	; (8001554 <StartActivityTask+0x24c>)
 8001342:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8001346:	2b03      	cmp	r3, #3
 8001348:	d014      	beq.n	8001374 <StartActivityTask+0x6c>
 800134a:	2b03      	cmp	r3, #3
 800134c:	dc19      	bgt.n	8001382 <StartActivityTask+0x7a>
 800134e:	2b01      	cmp	r3, #1
 8001350:	d002      	beq.n	8001358 <StartActivityTask+0x50>
 8001352:	2b02      	cmp	r3, #2
 8001354:	d007      	beq.n	8001366 <StartActivityTask+0x5e>
 8001356:	e014      	b.n	8001382 <StartActivityTask+0x7a>
	  				case noMovement:
	  					trackActivity[noMovement]++;
 8001358:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <StartActivityTask+0x250>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	3301      	adds	r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b7d      	ldr	r3, [pc, #500]	; (8001558 <StartActivityTask+0x250>)
 8001362:	705a      	strb	r2, [r3, #1]
	  					break;
 8001364:	e014      	b.n	8001390 <StartActivityTask+0x88>
	  				case walking:
	  					trackActivity[walking]++;
 8001366:	4b7c      	ldr	r3, [pc, #496]	; (8001558 <StartActivityTask+0x250>)
 8001368:	789b      	ldrb	r3, [r3, #2]
 800136a:	3301      	adds	r3, #1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <StartActivityTask+0x250>)
 8001370:	709a      	strb	r2, [r3, #2]
	  					break;
 8001372:	e00d      	b.n	8001390 <StartActivityTask+0x88>
	  				case running:
	  					trackActivity[running]++;
 8001374:	4b78      	ldr	r3, [pc, #480]	; (8001558 <StartActivityTask+0x250>)
 8001376:	78db      	ldrb	r3, [r3, #3]
 8001378:	3301      	adds	r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b76      	ldr	r3, [pc, #472]	; (8001558 <StartActivityTask+0x250>)
 800137e:	70da      	strb	r2, [r3, #3]
	  					break;
 8001380:	e006      	b.n	8001390 <StartActivityTask+0x88>
	  				default:
	  					trackActivity[unknown]++;
 8001382:	4b75      	ldr	r3, [pc, #468]	; (8001558 <StartActivityTask+0x250>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b73      	ldr	r3, [pc, #460]	; (8001558 <StartActivityTask+0x250>)
 800138c:	701a      	strb	r2, [r3, #0]
	  					break;
 800138e:	bf00      	nop
	  			}

	  			counter++;
 8001390:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <StartActivityTask+0x248>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <StartActivityTask+0x248>)
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e12c      	b.n	80015f8 <StartActivityTask+0x2f0>
	  		}
	  		else
	  		{
	  			uint8_t current = 0; //index = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  			for(int i = 0; i < 4; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
 80013a8:	e019      	b.n	80013de <StartActivityTask+0xd6>
	  			{
	  				if(current < trackActivity[i])
 80013aa:	4a6b      	ldr	r2, [pc, #428]	; (8001558 <StartActivityTask+0x250>)
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d20e      	bcs.n	80013d8 <StartActivityTask+0xd0>
	  				{
	  					current = trackActivity[i];
 80013ba:	4a67      	ldr	r2, [pc, #412]	; (8001558 <StartActivityTask+0x250>)
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  					trackActivity[i] = 0;
 80013c6:	4a64      	ldr	r2, [pc, #400]	; (8001558 <StartActivityTask+0x250>)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	4413      	add	r3, r2
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
	  					CurrentActivity.lastActiveMinute = i;
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <StartActivityTask+0x24c>)
 80013d6:	705a      	strb	r2, [r3, #1]
	  			for(int i = 0; i < 4; i++)
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	3301      	adds	r3, #1
 80013dc:	623b      	str	r3, [r7, #32]
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	dde2      	ble.n	80013aa <StartActivityTask+0xa2>
	  				}
	  			}

	  			if(counterPM < sizeof(CurrentActivity.activityPM))
 80013e4:	4b5d      	ldr	r3, [pc, #372]	; (800155c <StartActivityTask+0x254>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2bfd      	cmp	r3, #253	; 0xfd
 80013ea:	f200 808d 	bhi.w	8001508 <StartActivityTask+0x200>
	  			{
	  				if(counterPM == 0 && (CurrentActivity.lastActiveMinute == walking || CurrentActivity.lastActiveMinute == running))
 80013ee:	4b5b      	ldr	r3, [pc, #364]	; (800155c <StartActivityTask+0x254>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d135      	bne.n	8001462 <StartActivityTask+0x15a>
 80013f6:	4b57      	ldr	r3, [pc, #348]	; (8001554 <StartActivityTask+0x24c>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d003      	beq.n	8001406 <StartActivityTask+0xfe>
 80013fe:	4b55      	ldr	r3, [pc, #340]	; (8001554 <StartActivityTask+0x24c>)
 8001400:	785b      	ldrb	r3, [r3, #1]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d12d      	bne.n	8001462 <StartActivityTask+0x15a>
	  				{
	  					writeStartToSD("MinActi.txt");
 8001406:	4856      	ldr	r0, [pc, #344]	; (8001560 <StartActivityTask+0x258>)
 8001408:	f000 ffca 	bl	80023a0 <writeStartToSD>
	  					CurrentActivity.activityPM[counterPM] = CurrentActivity.lastActiveMinute;
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <StartActivityTask+0x254>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	4b50      	ldr	r3, [pc, #320]	; (8001554 <StartActivityTask+0x24c>)
 8001414:	785a      	ldrb	r2, [r3, #1]
 8001416:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <StartActivityTask+0x24c>)
 8001418:	440b      	add	r3, r1
 800141a:	709a      	strb	r2, [r3, #2]
	  					CurrentActivity.length++;
 800141c:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <StartActivityTask+0x24c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <StartActivityTask+0x24c>)
 8001426:	701a      	strb	r2, [r3, #0]
	  					SDString = activityToString(CurrentActivity.lastActiveMinute);
 8001428:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <StartActivityTask+0x24c>)
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fa01 	bl	8001834 <activityToString>
 8001432:	6178      	str	r0, [r7, #20]
						if(!activityToSD("MinActi.txt", SDString))
 8001434:	6979      	ldr	r1, [r7, #20]
 8001436:	484a      	ldr	r0, [pc, #296]	; (8001560 <StartActivityTask+0x258>)
 8001438:	f000 ff52 	bl	80022e0 <activityToSD>
 800143c:	4603      	mov	r3, r0
 800143e:	f083 0301 	eor.w	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <StartActivityTask+0x14c>
						{
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144e:	4845      	ldr	r0, [pc, #276]	; (8001564 <StartActivityTask+0x25c>)
 8001450:	f002 fd10 	bl	8003e74 <HAL_GPIO_WritePin>
						}
	  					counterPM++;
 8001454:	4b41      	ldr	r3, [pc, #260]	; (800155c <StartActivityTask+0x254>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b3f      	ldr	r3, [pc, #252]	; (800155c <StartActivityTask+0x254>)
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	e043      	b.n	80014ea <StartActivityTask+0x1e2>
	  				}
	  				else if(counterPM != 0 && (CurrentActivity.lastActiveMinute == noMovement || CurrentActivity.lastActiveMinute == unknown))
 8001462:	4b3e      	ldr	r3, [pc, #248]	; (800155c <StartActivityTask+0x254>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d027      	beq.n	80014ba <StartActivityTask+0x1b2>
 800146a:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <StartActivityTask+0x24c>)
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d003      	beq.n	800147a <StartActivityTask+0x172>
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <StartActivityTask+0x24c>)
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d11f      	bne.n	80014ba <StartActivityTask+0x1b2>
	  				{
	  					if(counterPauze < 2)
 800147a:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <StartActivityTask+0x260>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d814      	bhi.n	80014ac <StartActivityTask+0x1a4>
	  					{
	  						CurrentActivity.activityPM[counterPM] = CurrentActivity.lastActiveMinute;
 8001482:	4b36      	ldr	r3, [pc, #216]	; (800155c <StartActivityTask+0x254>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	4b32      	ldr	r3, [pc, #200]	; (8001554 <StartActivityTask+0x24c>)
 800148a:	785a      	ldrb	r2, [r3, #1]
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <StartActivityTask+0x24c>)
 800148e:	440b      	add	r3, r1
 8001490:	709a      	strb	r2, [r3, #2]
	  						counterPauze++;
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <StartActivityTask+0x260>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <StartActivityTask+0x260>)
 800149c:	701a      	strb	r2, [r3, #0]
	  						counterPM++;
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <StartActivityTask+0x254>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <StartActivityTask+0x254>)
 80014a8:	701a      	strb	r2, [r3, #0]
	  					if(counterPauze < 2)
 80014aa:	e01e      	b.n	80014ea <StartActivityTask+0x1e2>
	  					}
	  					else
	  					{
	  						counterPM = sizeof(CurrentActivity.activityPM);
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <StartActivityTask+0x254>)
 80014ae:	22fe      	movs	r2, #254	; 0xfe
 80014b0:	701a      	strb	r2, [r3, #0]
	  						counterPauze = 0;
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <StartActivityTask+0x260>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
	  					if(counterPauze < 2)
 80014b8:	e017      	b.n	80014ea <StartActivityTask+0x1e2>
	  					}
	  				}
	  				else if(counterPM > 0)
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <StartActivityTask+0x254>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d013      	beq.n	80014ea <StartActivityTask+0x1e2>
					{
						CurrentActivity.activityPM[counterPM] = CurrentActivity.lastActiveMinute;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <StartActivityTask+0x254>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <StartActivityTask+0x24c>)
 80014ca:	785a      	ldrb	r2, [r3, #1]
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <StartActivityTask+0x24c>)
 80014ce:	440b      	add	r3, r1
 80014d0:	709a      	strb	r2, [r3, #2]

						CurrentActivity.length++;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <StartActivityTask+0x24c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <StartActivityTask+0x24c>)
 80014dc:	701a      	strb	r2, [r3, #0]
						counterPM++;
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <StartActivityTask+0x254>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <StartActivityTask+0x254>)
 80014e8:	701a      	strb	r2, [r3, #0]
					}
					if(counterPM != 0)
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <StartActivityTask+0x254>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d07f      	beq.n	80015f2 <StartActivityTask+0x2ea>
					{
						//write the activity of the last active minute to sd
						SDString = activityToString(CurrentActivity.lastActiveMinute);
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <StartActivityTask+0x24c>)
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f99c 	bl	8001834 <activityToString>
 80014fc:	6178      	str	r0, [r7, #20]
						activityToSD("MinActi.txt", SDString);
 80014fe:	6979      	ldr	r1, [r7, #20]
 8001500:	4817      	ldr	r0, [pc, #92]	; (8001560 <StartActivityTask+0x258>)
 8001502:	f000 feed 	bl	80022e0 <activityToSD>
 8001506:	e074      	b.n	80015f2 <StartActivityTask+0x2ea>
	  			else
	  			{
	  				//calculate the avarage for total activity
	  				//and write total activity to sd

	  				for (int i = 0; i < counterPM; ++i) {
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	e00d      	b.n	800152a <StartActivityTask+0x222>
	  					trackActivity[CurrentActivity.activityPM[i]]++;
 800150e:	4a11      	ldr	r2, [pc, #68]	; (8001554 <StartActivityTask+0x24c>)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	3302      	adds	r3, #2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <StartActivityTask+0x250>)
 800151a:	5cd2      	ldrb	r2, [r2, r3]
 800151c:	3201      	adds	r2, #1
 800151e:	b2d1      	uxtb	r1, r2
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <StartActivityTask+0x250>)
 8001522:	54d1      	strb	r1, [r2, r3]
	  				for (int i = 0; i < counterPM; ++i) {
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	3301      	adds	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <StartActivityTask+0x254>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	4293      	cmp	r3, r2
 8001534:	dbeb      	blt.n	800150e <StartActivityTask+0x206>
					}

	  				current = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  				for(int i = 0; i < sizeof(trackActivity); i++)
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	e02f      	b.n	80015a2 <StartActivityTask+0x29a>
 8001542:	bf00      	nop
 8001544:	0801204c 	.word	0x0801204c
 8001548:	20004cfc 	.word	0x20004cfc
 800154c:	20000234 	.word	0x20000234
 8001550:	20000238 	.word	0x20000238
 8001554:	20004f60 	.word	0x20004f60
 8001558:	2000023c 	.word	0x2000023c
 800155c:	20000240 	.word	0x20000240
 8001560:	08012050 	.word	0x08012050
 8001564:	40020400 	.word	0x40020400
 8001568:	20000241 	.word	0x20000241
					{
						if(current < trackActivity[i])
 800156c:	4a24      	ldr	r2, [pc, #144]	; (8001600 <StartActivityTask+0x2f8>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4413      	add	r3, r2
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001578:	429a      	cmp	r2, r3
 800157a:	d20f      	bcs.n	800159c <StartActivityTask+0x294>
						{
							current = trackActivity[i];
 800157c:	4a20      	ldr	r2, [pc, #128]	; (8001600 <StartActivityTask+0x2f8>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							trackActivity[i] = 0;
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <StartActivityTask+0x2f8>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4413      	add	r3, r2
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
							CurrentActivity.totalActivity = i;
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <StartActivityTask+0x2fc>)
 8001598:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	  				for(int i = 0; i < sizeof(trackActivity); i++)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	3301      	adds	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d9e1      	bls.n	800156c <StartActivityTask+0x264>
						}
					}
	  				char numbers[10];
					sprintf(numbers, "%d", CurrentActivity.length);
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <StartActivityTask+0x2fc>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4915      	ldr	r1, [pc, #84]	; (8001608 <StartActivityTask+0x300>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00c fbf3 	bl	800dda0 <siprintf>
					SDString = activityToString(CurrentActivity.totalActivity);
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <StartActivityTask+0x2fc>)
 80015bc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f937 	bl	8001834 <activityToString>
 80015c6:	6178      	str	r0, [r7, #20]
	  				totalActivityToSD("MinActi.txt", numbers, SDString);
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	4619      	mov	r1, r3
 80015d0:	480e      	ldr	r0, [pc, #56]	; (800160c <StartActivityTask+0x304>)
 80015d2:	f000 feb1 	bl	8002338 <totalActivityToSD>

	  				//lengte van de activiteit toevoegen
	  				CurrentActivity.previousLength = CurrentActivity.length;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <StartActivityTask+0x2fc>)
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <StartActivityTask+0x2fc>)
 80015dc:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	  				CurrentActivity.length = 0;
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <StartActivityTask+0x2fc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
	  				counterPM = 0;
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <StartActivityTask+0x308>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
	  				counterPauze = 0;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <StartActivityTask+0x30c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
	  			}
	  			counter = 0;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <StartActivityTask+0x310>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
	  		}

	  	}

	      osDelay(100);
 80015f8:	2064      	movs	r0, #100	; 0x64
 80015fa:	f008 fa6d 	bl	8009ad8 <osDelay>
	  getActivity();
 80015fe:	e689      	b.n	8001314 <StartActivityTask+0xc>
 8001600:	2000023c 	.word	0x2000023c
 8001604:	20004f60 	.word	0x20004f60
 8001608:	08012048 	.word	0x08012048
 800160c:	08012050 	.word	0x08012050
 8001610:	20000240 	.word	0x20000240
 8001614:	20000241 	.word	0x20000241
 8001618:	20000238 	.word	0x20000238

0800161c <StartReadBattery>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadBattery */
void StartReadBattery(void *argument)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadBattery */
  /* Infinite loop */
  for(;;)
  {
	batteryPer = calculateBattery(CALCULATEPERCENTAGE);
 8001624:	2000      	movs	r0, #0
 8001626:	f000 f893 	bl	8001750 <calculateBattery>
 800162a:	eef0 7a40 	vmov.f32	s15, s0
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <StartReadBattery+0x60>)
 8001630:	edc3 7a00 	vstr	s15, [r3]
	batteryVol = calculateBattery(CALCULATEVOLTAGE);
 8001634:	2001      	movs	r0, #1
 8001636:	f000 f88b 	bl	8001750 <calculateBattery>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <StartReadBattery+0x64>)
 8001640:	edc3 7a00 	vstr	s15, [r3]
	if(batteryVol < 3.0)
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <StartReadBattery+0x64>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800164e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	d506      	bpl.n	8001666 <StartReadBattery+0x4a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165e:	4809      	ldr	r0, [pc, #36]	; (8001684 <StartReadBattery+0x68>)
 8001660:	f002 fc08 	bl	8003e74 <HAL_GPIO_WritePin>
 8001664:	e005      	b.n	8001672 <StartReadBattery+0x56>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <StartReadBattery+0x68>)
 800166e:	f002 fc01 	bl	8003e74 <HAL_GPIO_WritePin>
	}
    osDelay(5000);
 8001672:	f241 3088 	movw	r0, #5000	; 0x1388
 8001676:	f008 fa2f 	bl	8009ad8 <osDelay>
	batteryPer = calculateBattery(CALCULATEPERCENTAGE);
 800167a:	e7d3      	b.n	8001624 <StartReadBattery+0x8>
 800167c:	2000022c 	.word	0x2000022c
 8001680:	20000230 	.word	0x20000230
 8001684:	40020400 	.word	0x40020400

08001688 <getActivity>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */


char * getActivity()
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
	char * activity;

	if(GPS.speed_km < 3.0)
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <getActivity+0xb0>)
 8001690:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001694:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	d506      	bpl.n	80016b0 <getActivity+0x28>
		{
			activity = "Geen beweging";
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <getActivity+0xb4>)
 80016a4:	607b      	str	r3, [r7, #4]
			CurrentActivity.currentActivity = noMovement;	//nomovement
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <getActivity+0xb8>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 80016ae:	e03b      	b.n	8001728 <getActivity+0xa0>
		}
		else if(GPS.speed_km >= 2.0 && GPS.speed_km < 7.0)
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <getActivity+0xb0>)
 80016b2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80016ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	db10      	blt.n	80016e6 <getActivity+0x5e>
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <getActivity+0xb0>)
 80016c6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016ca:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80016ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	d506      	bpl.n	80016e6 <getActivity+0x5e>
		{
			activity = "Wandelen     ";
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <getActivity+0xbc>)
 80016da:	607b      	str	r3, [r7, #4]
			CurrentActivity.currentActivity = walking;	//walking
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <getActivity+0xb8>)
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 80016e4:	e020      	b.n	8001728 <getActivity+0xa0>
		}
		else if(GPS.speed_km >= 7.0 && GPS.speed_km < 15.0)
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <getActivity+0xb0>)
 80016e8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016ec:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80016f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f8:	db10      	blt.n	800171c <getActivity+0x94>
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <getActivity+0xb0>)
 80016fc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001700:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	d506      	bpl.n	800171c <getActivity+0x94>
		{
			activity = "Hardlopen    ";
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <getActivity+0xc0>)
 8001710:	607b      	str	r3, [r7, #4]
			CurrentActivity.currentActivity = running;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <getActivity+0xb8>)
 8001714:	2203      	movs	r2, #3
 8001716:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 800171a:	e005      	b.n	8001728 <getActivity+0xa0>
		}
		else
		{
			activity = "onbekend     ";
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <getActivity+0xc4>)
 800171e:	607b      	str	r3, [r7, #4]
			CurrentActivity.currentActivity =  unknown;
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <getActivity+0xb8>)
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		}

	return activity;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20004cfc 	.word	0x20004cfc
 800173c:	0801205c 	.word	0x0801205c
 8001740:	20004f60 	.word	0x20004f60
 8001744:	0801206c 	.word	0x0801206c
 8001748:	0801207c 	.word	0x0801207c
 800174c:	0801208c 	.word	0x0801208c

08001750 <calculateBattery>:

float calculateBattery(uint8_t whatCalculation)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	uint16_t localADC = ADCValue;	//grab the last conversion value
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <calculateBattery+0xd0>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Start_IT(&hadc1);		//start a new conversion already so it's ready for the next time the function is called
 8001760:	4830      	ldr	r0, [pc, #192]	; (8001824 <calculateBattery+0xd4>)
 8001762:	f001 fc47 	bl	8002ff4 <HAL_ADC_Start_IT>
	if(whatCalculation == CALCULATEPERCENTAGE)
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d12b      	bne.n	80017c4 <calculateBattery+0x74>
	{
		return 71.428571428571 * ((localADC / (float)4095) * 4.2) - 200;
 800176c:	89fb      	ldrh	r3, [r7, #14]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001776:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001828 <calculateBattery+0xd8>
 800177a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800177e:	ee16 0a90 	vmov	r0, s13
 8001782:	f7fe fee9 	bl	8000558 <__aeabi_f2d>
 8001786:	a322      	add	r3, pc, #136	; (adr r3, 8001810 <calculateBattery+0xc0>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7fe ff3c 	bl	8000608 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	a31f      	add	r3, pc, #124	; (adr r3, 8001818 <calculateBattery+0xc8>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff33 	bl	8000608 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <calculateBattery+0xdc>)
 80017b0:	f7fe fd72 	bl	8000298 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fa1c 	bl	8000bf8 <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	e01d      	b.n	8001800 <calculateBattery+0xb0>
		//return (localADC / (float)4095) * 100;
	} else if(whatCalculation == CALCULATEVOLTAGE)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d119      	bne.n	80017fe <calculateBattery+0xae>
	{
		return (localADC / (float)4095) * 4.2;
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001828 <calculateBattery+0xd8>
 80017d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017dc:	ee16 0a90 	vmov	r0, s13
 80017e0:	f7fe feba 	bl	8000558 <__aeabi_f2d>
 80017e4:	a30a      	add	r3, pc, #40	; (adr r3, 8001810 <calculateBattery+0xc0>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe ff0d 	bl	8000608 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f9ff 	bl	8000bf8 <__aeabi_d2f>
 80017fa:	4603      	mov	r3, r0
 80017fc:	e000      	b.n	8001800 <calculateBattery+0xb0>
	}
	return -1.0;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <calculateBattery+0xe0>)
 8001800:	ee07 3a90 	vmov	s15, r3
}
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	cccccccd 	.word	0xcccccccd
 8001814:	4010cccc 	.word	0x4010cccc
 8001818:	b6db6d99 	.word	0xb6db6d99
 800181c:	4051db6d 	.word	0x4051db6d
 8001820:	20000228 	.word	0x20000228
 8001824:	20004ca4 	.word	0x20004ca4
 8001828:	457ff000 	.word	0x457ff000
 800182c:	40690000 	.word	0x40690000
 8001830:	bf800000 	.word	0xbf800000

08001834 <activityToString>:

char* activityToString(uint8_t activity)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	char* string = "";
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <activityToString+0x48>)
 8001840:	60fb      	str	r3, [r7, #12]

	switch (activity) {
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d00c      	beq.n	8001862 <activityToString+0x2e>
 8001848:	2b03      	cmp	r3, #3
 800184a:	dc0d      	bgt.n	8001868 <activityToString+0x34>
 800184c:	2b01      	cmp	r3, #1
 800184e:	d002      	beq.n	8001856 <activityToString+0x22>
 8001850:	2b02      	cmp	r3, #2
 8001852:	d003      	beq.n	800185c <activityToString+0x28>
 8001854:	e008      	b.n	8001868 <activityToString+0x34>
		case noMovement:
			string = "Geen beweging";
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <activityToString+0x4c>)
 8001858:	60fb      	str	r3, [r7, #12]
			break;
 800185a:	e008      	b.n	800186e <activityToString+0x3a>
		case walking:
			string = "Wandelen";
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <activityToString+0x50>)
 800185e:	60fb      	str	r3, [r7, #12]
			break;
 8001860:	e005      	b.n	800186e <activityToString+0x3a>
		case running:
			string = "Hardlopen";
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <activityToString+0x54>)
 8001864:	60fb      	str	r3, [r7, #12]
			break;
 8001866:	e002      	b.n	800186e <activityToString+0x3a>
		default:
			string = "onbekend";
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <activityToString+0x58>)
 800186a:	60fb      	str	r3, [r7, #12]
			break;
 800186c:	bf00      	nop
	}
	return string;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	0801204c 	.word	0x0801204c
 8001880:	0801205c 	.word	0x0801205c
 8001884:	0801209c 	.word	0x0801209c
 8001888:	080120a8 	.word	0x080120a8
 800188c:	080120b4 	.word	0x080120b4

08001890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <MX_GPIO_Init+0xf8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a36      	ldr	r2, [pc, #216]	; (8001988 <MX_GPIO_Init+0xf8>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <MX_GPIO_Init+0xf8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b30      	ldr	r3, [pc, #192]	; (8001988 <MX_GPIO_Init+0xf8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a2f      	ldr	r2, [pc, #188]	; (8001988 <MX_GPIO_Init+0xf8>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <MX_GPIO_Init+0xf8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b29      	ldr	r3, [pc, #164]	; (8001988 <MX_GPIO_Init+0xf8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a28      	ldr	r2, [pc, #160]	; (8001988 <MX_GPIO_Init+0xf8>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <MX_GPIO_Init+0xf8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <MX_GPIO_Init+0xf8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a21      	ldr	r2, [pc, #132]	; (8001988 <MX_GPIO_Init+0xf8>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <MX_GPIO_Init+0xf8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2110      	movs	r1, #16
 800191a:	481c      	ldr	r0, [pc, #112]	; (800198c <MX_GPIO_Init+0xfc>)
 800191c:	f002 faaa 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f240 3102 	movw	r1, #770	; 0x302
 8001926:	481a      	ldr	r0, [pc, #104]	; (8001990 <MX_GPIO_Init+0x100>)
 8001928:	f002 faa4 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800192c:	2310      	movs	r3, #16
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4812      	ldr	r0, [pc, #72]	; (800198c <MX_GPIO_Init+0xfc>)
 8001944:	f002 f912 	bl	8003b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001948:	f240 3302 	movw	r3, #770	; 0x302
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	480b      	ldr	r0, [pc, #44]	; (8001990 <MX_GPIO_Init+0x100>)
 8001962:	f002 f903 	bl	8003b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SD_CD_Pin;
 8001966:	230c      	movs	r3, #12
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_GPIO_Init+0x100>)
 800197a:	f002 f8f7 	bl	8003b6c <HAL_GPIO_Init>

}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400

08001994 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 8001998:	2201      	movs	r2, #1
 800199a:	4903      	ldr	r1, [pc, #12]	; (80019a8 <GPS_Init+0x14>)
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <GPS_Init+0x18>)
 800199e:	f004 fa3a 	bl	8005e16 <HAL_UART_Receive_IT>
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20004f58 	.word	0x20004f58
 80019ac:	200055c0 	.word	0x200055c0

080019b0 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 80019b4:	f001 faaa 	bl	8002f0c <HAL_GetTick>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4a35      	ldr	r2, [pc, #212]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 80019bc:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
	static int i = 0;
	if(GPS.rxTmp != '\n' && GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 80019c2:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80019c6:	2b0a      	cmp	r3, #10
 80019c8:	d044      	beq.n	8001a54 <GPS_UART_CallBack+0xa4>
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 80019cc:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80019d0:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80019d4:	d23e      	bcs.n	8001a54 <GPS_UART_CallBack+0xa4>
	{
		if(i % 2)
 80019d6:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <GPS_UART_CallBack+0xe4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d032      	beq.n	8001a48 <GPS_UART_CallBack+0x98>
		{
			if(GPS.rxBuffer[GPS.rxIndex - 1]== ',' && GPS.rxTmp == ',') {  // check n-1 and n chr's for two ',,'
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 80019e4:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80019e8:	3b01      	subs	r3, #1
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 80019ec:	4413      	add	r3, r2
 80019ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80019f2:	2b2c      	cmp	r3, #44	; 0x2c
 80019f4:	d115      	bne.n	8001a22 <GPS_UART_CallBack+0x72>
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 80019f8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80019fc:	2b2c      	cmp	r3, #44	; 0x2c
 80019fe:	d110      	bne.n	8001a22 <GPS_UART_CallBack+0x72>
				GPS.rxBuffer[GPS.rxIndex] = '0';      // add a '0'
 8001a00:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a02:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2230      	movs	r2, #48	; 0x30
 8001a0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
				GPS.rxIndex++;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a14:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a1e:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
			}

			GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a24:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a2c:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

			GPS.rxIndex++;
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a3a:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a44:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		}
		i++;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <GPS_UART_CallBack+0xe4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <GPS_UART_CallBack+0xe4>)
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e015      	b.n	8001a80 <GPS_UART_CallBack+0xd0>
	}
	else
	{

		if(GPS_validate((char*) GPS.rxBuffer))
 8001a54:	4810      	ldr	r0, [pc, #64]	; (8001a98 <GPS_UART_CallBack+0xe8>)
 8001a56:	f000 f825 	bl	8001aa4 <GPS_validate>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <GPS_UART_CallBack+0xb6>
			GPS_parse((char*) GPS.rxBuffer);
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <GPS_UART_CallBack+0xe8>)
 8001a62:	f000 f881 	bl	8001b68 <GPS_parse>
		GPS.rxIndex=0;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <GPS_UART_CallBack+0xe0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		i = 0;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <GPS_UART_CallBack+0xe4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
		memset(GPS.rxBuffer, 0, sizeof(GPS.rxBuffer));
 8001a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <GPS_UART_CallBack+0xe8>)
 8001a7c:	f00b fa4e 	bl	800cf1c <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 8001a80:	2201      	movs	r2, #1
 8001a82:	4906      	ldr	r1, [pc, #24]	; (8001a9c <GPS_UART_CallBack+0xec>)
 8001a84:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <GPS_UART_CallBack+0xf0>)
 8001a86:	f004 f9c6 	bl	8005e16 <HAL_UART_Receive_IT>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20004cfc 	.word	0x20004cfc
 8001a94:	20000244 	.word	0x20000244
 8001a98:	20004d55 	.word	0x20004d55
 8001a9c:	20004f58 	.word	0x20004f58
 8001aa0:	200055c0 	.word	0x200055c0

08001aa4 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]


    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b24      	cmp	r3, #36	; 0x24
 8001abe:	d103      	bne.n	8001ac8 <GPS_validate+0x24>
        i++;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
    else
        return 0;


    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001ac6:	e00c      	b.n	8001ae2 <GPS_validate+0x3e>
        return 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e047      	b.n	8001b5c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4053      	eors	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        i++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <GPS_validate+0x5c>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b2a      	cmp	r3, #42	; 0x2a
 8001af8:	d002      	beq.n	8001b00 <GPS_validate+0x5c>
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b4a      	cmp	r3, #74	; 0x4a
 8001afe:	dde5      	ble.n	8001acc <GPS_validate+0x28>
    }

    if(i >= 75){
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b4a      	cmp	r3, #74	; 0x4a
 8001b04:	dd01      	ble.n	8001b0a <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001b06:	2300      	movs	r3, #0
 8001b08:	e028      	b.n	8001b5c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b2a      	cmp	r3, #42	; 0x2a
 8001b14:	d119      	bne.n	8001b4a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3302      	adds	r3, #2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	490a      	ldr	r1, [pc, #40]	; (8001b64 <GPS_validate+0xc0>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00c f930 	bl	800dda0 <siprintf>

    return((checkcalcstr[0] == check[0])
 8001b40:	7a3a      	ldrb	r2, [r7, #8]
 8001b42:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d108      	bne.n	8001b5a <GPS_validate+0xb6>
 8001b48:	e001      	b.n	8001b4e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e006      	b.n	8001b5c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001b4e:	7a7a      	ldrb	r2, [r7, #9]
 8001b50:	7b7b      	ldrb	r3, [r7, #13]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d101      	bne.n	8001b5a <GPS_validate+0xb6>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <GPS_validate+0xb8>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	080120c0 	.word	0x080120c0

08001b68 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af08      	add	r7, sp, #32
 8001b6e:	6078      	str	r0, [r7, #4]



	   if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001b70:	2206      	movs	r2, #6
 8001b72:	494a      	ldr	r1, [pc, #296]	; (8001c9c <GPS_parse+0x134>)
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f00c f9a4 	bl	800dec2 <strncmp>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d118      	bne.n	8001bb2 <GPS_parse+0x4a>

	    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1)
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <GPS_parse+0x138>)
 8001b82:	9307      	str	r3, [sp, #28]
 8001b84:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <GPS_parse+0x13c>)
 8001b86:	9306      	str	r3, [sp, #24]
 8001b88:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <GPS_parse+0x140>)
 8001b8a:	9305      	str	r3, [sp, #20]
 8001b8c:	4b47      	ldr	r3, [pc, #284]	; (8001cac <GPS_parse+0x144>)
 8001b8e:	9304      	str	r3, [sp, #16]
 8001b90:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <GPS_parse+0x148>)
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <GPS_parse+0x14c>)
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <GPS_parse+0x150>)
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <GPS_parse+0x154>)
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <GPS_parse+0x158>)
 8001ba2:	4a48      	ldr	r2, [pc, #288]	; (8001cc4 <GPS_parse+0x15c>)
 8001ba4:	4948      	ldr	r1, [pc, #288]	; (8001cc8 <GPS_parse+0x160>)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f00c f91a 	bl	800dde0 <siscanf>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	e070      	b.n	8001c94 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001bb2:	2206      	movs	r2, #6
 8001bb4:	4945      	ldr	r1, [pc, #276]	; (8001ccc <GPS_parse+0x164>)
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f00c f983 	bl	800dec2 <strncmp>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d114      	bne.n	8001bec <GPS_parse+0x84>

	    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <GPS_parse+0x168>)
 8001bc4:	9305      	str	r3, [sp, #20]
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <GPS_parse+0x16c>)
 8001bc8:	9304      	str	r3, [sp, #16]
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <GPS_parse+0x170>)
 8001bcc:	9303      	str	r3, [sp, #12]
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <GPS_parse+0x14c>)
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <GPS_parse+0x150>)
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <GPS_parse+0x154>)
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <GPS_parse+0x158>)
 8001bdc:	4a39      	ldr	r2, [pc, #228]	; (8001cc4 <GPS_parse+0x15c>)
 8001bde:	493f      	ldr	r1, [pc, #252]	; (8001cdc <GPS_parse+0x174>)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f00c f8fd 	bl	800dde0 <siscanf>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	e053      	b.n	8001c94 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001bec:	2206      	movs	r2, #6
 8001bee:	493c      	ldr	r1, [pc, #240]	; (8001ce0 <GPS_parse+0x178>)
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f00c f966 	bl	800dec2 <strncmp>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d12f      	bne.n	8001c5c <GPS_parse+0xf4>

	        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <GPS_parse+0x17c>)
 8001bfe:	9303      	str	r3, [sp, #12]
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <GPS_parse+0x15c>)
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <GPS_parse+0x14c>)
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <GPS_parse+0x150>)
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <GPS_parse+0x154>)
 8001c0e:	4a2c      	ldr	r2, [pc, #176]	; (8001cc0 <GPS_parse+0x158>)
 8001c10:	4935      	ldr	r1, [pc, #212]	; (8001ce8 <GPS_parse+0x180>)
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f00c f8e4 	bl	800dde0 <siscanf>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	dd3a      	ble.n	8001c94 <GPS_parse+0x12c>
	        {
				GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <GPS_parse+0x184>)
 8001c20:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <GPS_parse+0x184>)
 8001c26:	7f1b      	ldrb	r3, [r3, #28]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	f000 f871 	bl	8001d14 <GPS_nmea_to_dec>
 8001c32:	eef0 7a40 	vmov.f32	s15, s0
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <GPS_parse+0x184>)
 8001c38:	edc3 7a01 	vstr	s15, [r3, #4]
				GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <GPS_parse+0x184>)
 8001c3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c42:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <GPS_parse+0x184>)
 8001c44:	7f5b      	ldrb	r3, [r3, #29]
 8001c46:	4618      	mov	r0, r3
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	f000 f862 	bl	8001d14 <GPS_nmea_to_dec>
 8001c50:	eef0 7a40 	vmov.f32	s15, s0
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <GPS_parse+0x184>)
 8001c56:	edc3 7a00 	vstr	s15, [r3]

				return;
 8001c5a:	e01b      	b.n	8001c94 <GPS_parse+0x12c>
			}
	    }
	    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001c5c:	2206      	movs	r2, #6
 8001c5e:	4924      	ldr	r1, [pc, #144]	; (8001cf0 <GPS_parse+0x188>)
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f00c f92e 	bl	800dec2 <strncmp>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d113      	bne.n	8001c94 <GPS_parse+0x12c>

			if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <GPS_parse+0x18c>)
 8001c6e:	9305      	str	r3, [sp, #20]
 8001c70:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <GPS_parse+0x190>)
 8001c72:	9304      	str	r3, [sp, #16]
 8001c74:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <GPS_parse+0x194>)
 8001c76:	9303      	str	r3, [sp, #12]
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <GPS_parse+0x170>)
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <GPS_parse+0x198>)
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <GPS_parse+0x19c>)
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <GPS_parse+0x1a0>)
 8001c86:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <GPS_parse+0x1a4>)
 8001c88:	4921      	ldr	r1, [pc, #132]	; (8001d10 <GPS_parse+0x1a8>)
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f00c f8a8 	bl	800dde0 <siscanf>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
				return;

	    }
	}
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	080120c8 	.word	0x080120c8
 8001ca0:	20004d2c 	.word	0x20004d2c
 8001ca4:	20004d28 	.word	0x20004d28
 8001ca8:	20004d24 	.word	0x20004d24
 8001cac:	20004d20 	.word	0x20004d20
 8001cb0:	20004d1c 	.word	0x20004d1c
 8001cb4:	20004d19 	.word	0x20004d19
 8001cb8:	20004d0c 	.word	0x20004d0c
 8001cbc:	20004d18 	.word	0x20004d18
 8001cc0:	20004d10 	.word	0x20004d10
 8001cc4:	20004d14 	.word	0x20004d14
 8001cc8:	080120d0 	.word	0x080120d0
 8001ccc:	080120f8 	.word	0x080120f8
 8001cd0:	20004d38 	.word	0x20004d38
 8001cd4:	20004d34 	.word	0x20004d34
 8001cd8:	20004d30 	.word	0x20004d30
 8001cdc:	08012100 	.word	0x08012100
 8001ce0:	08012120 	.word	0x08012120
 8001ce4:	20004d3c 	.word	0x20004d3c
 8001ce8:	08012128 	.word	0x08012128
 8001cec:	20004cfc 	.word	0x20004cfc
 8001cf0:	08012144 	.word	0x08012144
 8001cf4:	20004d54 	.word	0x20004d54
 8001cf8:	20004d50 	.word	0x20004d50
 8001cfc:	20004d4d 	.word	0x20004d4d
 8001d00:	20004d4c 	.word	0x20004d4c
 8001d04:	20004d48 	.word	0x20004d48
 8001d08:	20004d44 	.word	0x20004d44
 8001d0c:	20004d40 	.word	0x20004d40
 8001d10:	0801214c 	.word	0x0801214c

08001d14 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001d22:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d26:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001da8 <GPS_nmea_to_dec+0x94>
 8001d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d32:	ee17 3a90 	vmov	r3, s15
 8001d36:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	2264      	movs	r2, #100	; 0x64
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d48:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d50:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001d54:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d58:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001dac <GPS_nmea_to_dec+0x98>
 8001d5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d60:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	2b53      	cmp	r3, #83	; 0x53
 8001d7e:	d002      	beq.n	8001d86 <GPS_nmea_to_dec+0x72>
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	2b57      	cmp	r3, #87	; 0x57
 8001d84:	d105      	bne.n	8001d92 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001d86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d8a:	eef1 7a67 	vneg.f32	s15, s15
 8001d8e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	ee07 3a90 	vmov	s15, r3
}
 8001d98:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	42c80000 	.word	0x42c80000
 8001dac:	42700000 	.word	0x42700000

08001db0 <getTime>:

char* getTime()
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af04      	add	r7, sp, #16

	char *toArray;

	toArray = malloc (sizeof (char) * 10);
 8001db6:	200a      	movs	r0, #10
 8001db8:	f00b f892 	bl	800cee0 <malloc>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	607b      	str	r3, [r7, #4]
	float time = GPS.utc_time + 20000; //make it CET
 8001dc0:	4b33      	ldr	r3, [pc, #204]	; (8001e90 <getTime+0xe0>)
 8001dc2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dc6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001e94 <getTime+0xe4>
 8001dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dce:	edc7 7a00 	vstr	s15, [r7]
	sprintf(toArray, "%f", time );
 8001dd2:	6838      	ldr	r0, [r7, #0]
 8001dd4:	f7fe fbc0 	bl	8000558 <__aeabi_f2d>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	492e      	ldr	r1, [pc, #184]	; (8001e98 <getTime+0xe8>)
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f00b ffde 	bl	800dda0 <siprintf>

	if(GPS.utc_time == 0)
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <getTime+0xe0>)
 8001de6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d102      	bne.n	8001dfa <getTime+0x4a>
	{
		CurrentActivity.length = 0;
 8001df4:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <getTime+0xec>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
	}

	if(time < 100000)
 8001dfa:	edd7 7a00 	vldr	s15, [r7]
 8001dfe:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001ea0 <getTime+0xf0>
 8001e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	d51b      	bpl.n	8001e44 <getTime+0x94>
		sprintf(toArray, "%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4]);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3301      	adds	r3, #1
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461c      	mov	r4, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3303      	adds	r3, #3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	9302      	str	r3, [sp, #8]
 8001e32:	9101      	str	r1, [sp, #4]
 8001e34:	9200      	str	r2, [sp, #0]
 8001e36:	4623      	mov	r3, r4
 8001e38:	4602      	mov	r2, r0
 8001e3a:	491a      	ldr	r1, [pc, #104]	; (8001ea4 <getTime+0xf4>)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f00b ffaf 	bl	800dda0 <siprintf>
 8001e42:	e01f      	b.n	8001e84 <getTime+0xd4>
	else
		sprintf(toArray, "%c%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4], toArray[5]);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461c      	mov	r4, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461d      	mov	r5, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3302      	adds	r3, #2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3303      	adds	r3, #3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3305      	adds	r3, #5
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	9303      	str	r3, [sp, #12]
 8001e72:	9002      	str	r0, [sp, #8]
 8001e74:	9101      	str	r1, [sp, #4]
 8001e76:	9200      	str	r2, [sp, #0]
 8001e78:	462b      	mov	r3, r5
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	490a      	ldr	r1, [pc, #40]	; (8001ea8 <getTime+0xf8>)
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f00b ff8e 	bl	800dda0 <siprintf>

	return toArray;
 8001e84:	687b      	ldr	r3, [r7, #4]


}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20004cfc 	.word	0x20004cfc
 8001e94:	469c4000 	.word	0x469c4000
 8001e98:	0801216c 	.word	0x0801216c
 8001e9c:	20004f60 	.word	0x20004f60
 8001ea0:	47c35000 	.word	0x47c35000
 8001ea4:	08012170 	.word	0x08012170
 8001ea8:	08012180 	.word	0x08012180

08001eac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <MX_I2C1_Init+0x50>)
 8001eb2:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <MX_I2C1_Init+0x54>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_I2C1_Init+0x50>)
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <MX_I2C1_Init+0x58>)
 8001eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_I2C1_Init+0x50>)
 8001eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ece:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MX_I2C1_Init+0x50>)
 8001eea:	f001 ffdd 	bl	8003ea8 <HAL_I2C_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ef4:	f000 f952 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20005064 	.word	0x20005064
 8001f00:	40005400 	.word	0x40005400
 8001f04:	00061a80 	.word	0x00061a80

08001f08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_I2C_MspInit+0x84>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12b      	bne.n	8001f82 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f4a:	2312      	movs	r3, #18
 8001f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f56:	2304      	movs	r3, #4
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <HAL_I2C_MspInit+0x8c>)
 8001f62:	f001 fe03 	bl	8003b6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40005400 	.word	0x40005400
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020400 	.word	0x40020400

08001f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f9c:	f000 ff80 	bl	8002ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa0:	f000 f86c 	bl	800207c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa4:	f7ff fc74 	bl	8001890 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fa8:	f7ff ff80 	bl	8001eac <MX_I2C1_Init>
  MX_SPI1_Init();
 8001fac:	f000 fa16 	bl	80023dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001fb0:	f000 feda 	bl	8002d68 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001fb4:	f7ff f822 	bl	8000ffc <MX_ADC1_Init>
  MX_FATFS_Init();
 8001fb8:	f004 fc6c 	bl	8006894 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001fbc:	f000 f8c8 	bl	8002150 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8001fc0:	f7ff fce8 	bl	8001994 <GPS_Init>
  SSD1306_Init();
 8001fc4:	f000 fa88 	bl	80024d8 <SSD1306_Init>
  SSD1306_Clear();
 8001fc8:	f000 fcab 	bl	8002922 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8001fcc:	f000 fb48 	bl	8002660 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8001fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd4:	f000 ffa6 	bl	8002f24 <HAL_Delay>
  if(initSdCard())
 8001fd8:	f000 f8e6 	bl	80021a8 <initSdCard>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <main+0x64>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe8:	481d      	ldr	r0, [pc, #116]	; (8002060 <main+0xc8>)
 8001fea:	f001 ff43 	bl	8003e74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff4:	481a      	ldr	r0, [pc, #104]	; (8002060 <main+0xc8>)
 8001ff6:	f001 ff3d 	bl	8003e74 <HAL_GPIO_WritePin>
 8001ffa:	e00b      	b.n	8002014 <main+0x7c>
  } else
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002002:	4817      	ldr	r0, [pc, #92]	; (8002060 <main+0xc8>)
 8002004:	f001 ff36 	bl	8003e74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200e:	4814      	ldr	r0, [pc, #80]	; (8002060 <main+0xc8>)
 8002010:	f001 ff30 	bl	8003e74 <HAL_GPIO_WritePin>
  }

  __HAL_UART_ENABLE_IT(&huart1, UART_FLAG_RXNE);
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <main+0xcc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <main+0xcc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	615a      	str	r2, [r3, #20]
  __HAL_ADC_ENABLE_IT(&hadc1, ADC_FLAG_EOC);
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <main+0xd0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <main+0xd0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0202 	orr.w	r2, r2, #2
 8002032:	605a      	str	r2, [r3, #4]

  HAL_ADC_Start_IT(&hadc1);
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <main+0xd0>)
 8002036:	f000 ffdd 	bl	8002ff4 <HAL_ADC_Start_IT>

  writeFile("testFile.txt", "HELLO WORLD!");
 800203a:	490c      	ldr	r1, [pc, #48]	; (800206c <main+0xd4>)
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <main+0xd8>)
 800203e:	f000 f8cd 	bl	80021dc <writeFile>
  HAL_Delay(1000);
 8002042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002046:	f000 ff6d 	bl	8002f24 <HAL_Delay>
  activityToSD("TESTTIME.txt", "Hello there!");
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <main+0xdc>)
 800204c:	480a      	ldr	r0, [pc, #40]	; (8002078 <main+0xe0>)
 800204e:	f000 f947 	bl	80022e0 <activityToSD>
    /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002052:	f007 fc65 	bl	8009920 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002056:	f7ff f87b 	bl	8001150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800205a:	f007 fc85 	bl	8009968 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800205e:	e7fe      	b.n	800205e <main+0xc6>
 8002060:	40020400 	.word	0x40020400
 8002064:	200055c0 	.word	0x200055c0
 8002068:	20004ca4 	.word	0x20004ca4
 800206c:	08012190 	.word	0x08012190
 8002070:	080121a0 	.word	0x080121a0
 8002074:	080121b0 	.word	0x080121b0
 8002078:	080121c0 	.word	0x080121c0

0800207c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b094      	sub	sp, #80	; 0x50
 8002080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	2230      	movs	r2, #48	; 0x30
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f00a ff46 	bl	800cf1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <SystemClock_Config+0xcc>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <SystemClock_Config+0xcc>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <SystemClock_Config+0xcc>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <SystemClock_Config+0xd0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020c8:	4a20      	ldr	r2, [pc, #128]	; (800214c <SystemClock_Config+0xd0>)
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <SystemClock_Config+0xd0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020dc:	2301      	movs	r3, #1
 80020de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e6:	2302      	movs	r3, #2
 80020e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80020f0:	2319      	movs	r3, #25
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80020fc:	2305      	movs	r3, #5
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	4618      	mov	r0, r3
 8002106:	f002 fc49 	bl	800499c <HAL_RCC_OscConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002110:	f000 f844 	bl	800219c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002114:	230f      	movs	r3, #15
 8002116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002118:	2302      	movs	r3, #2
 800211a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	2102      	movs	r1, #2
 8002130:	4618      	mov	r0, r3
 8002132:	f002 feab 	bl	8004e8c <HAL_RCC_ClockConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800213c:	f000 f82e 	bl	800219c <Error_Handler>
  }
}
 8002140:	bf00      	nop
 8002142:	3750      	adds	r7, #80	; 0x50
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000

08002150 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2105      	movs	r1, #5
 8002158:	2025      	movs	r0, #37	; 0x25
 800215a:	f001 fc4b 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800215e:	2025      	movs	r0, #37	; 0x25
 8002160:	f001 fc64 	bl	8003a2c <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2105      	movs	r1, #5
 8002168:	2012      	movs	r0, #18
 800216a:	f001 fc43 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800216e:	2012      	movs	r0, #18
 8002170:	f001 fc5c 	bl	8003a2c <HAL_NVIC_EnableIRQ>
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800218a:	f000 feab 	bl	8002ee4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40000400 	.word	0x40000400

0800219c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a0:	b672      	cpsid	i
}
 80021a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <Error_Handler+0x8>
	...

080021a8 <initSdCard>:
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

bool initSdCard()
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80021ac:	2201      	movs	r2, #1
 80021ae:	4908      	ldr	r1, [pc, #32]	; (80021d0 <initSdCard+0x28>)
 80021b0:	4808      	ldr	r0, [pc, #32]	; (80021d4 <initSdCard+0x2c>)
 80021b2:	f006 fe49 	bl	8008e48 <f_mount>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <initSdCard+0x30>)
 80021bc:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <initSdCard+0x30>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <initSdCard+0x22>
	{
	   	return false;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <initSdCard+0x24>
	} else
	{
	   	return true;
 80021ca:	2301      	movs	r3, #1
	}
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	080121d0 	.word	0x080121d0
 80021d4:	200050b8 	.word	0x200050b8
 80021d8:	200052ec 	.word	0x200052ec

080021dc <writeFile>:


bool writeFile(char* fileName, char* string)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
	//char* internalString = "";
	if(openFileRead(fileName))
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f83e 	bl	8002268 <openFileRead>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <writeFile+0x1e>
	{
		f_close(&fil);
 80021f2:	481b      	ldr	r0, [pc, #108]	; (8002260 <writeFile+0x84>)
 80021f4:	f007 fa7e 	bl	80096f4 <f_close>
 80021f8:	e002      	b.n	8002200 <writeFile+0x24>
	} else
	{
		makeNewFile(fileName);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f850 	bl	80022a0 <makeNewFile>
	}

	fres = f_open(&fil, fileName, FA_WRITE | FA_OPEN_EXISTING | FA_OPEN_APPEND);
 8002200:	2232      	movs	r2, #50	; 0x32
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4816      	ldr	r0, [pc, #88]	; (8002260 <writeFile+0x84>)
 8002206:	f006 fe83 	bl	8008f10 <f_open>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <writeFile+0x88>)
 8002210:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) {
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <writeFile+0x88>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11d      	bne.n	8002256 <writeFile+0x7a>
		//Copy in a string
		uint16_t stringLength = strlen(string);
 800221a:	6838      	ldr	r0, [r7, #0]
 800221c:	f7fd ffe0 	bl	80001e0 <strlen>
 8002220:	4603      	mov	r3, r0
 8002222:	81fb      	strh	r3, [r7, #14]
	    //strncpy((char*)internalString, string, stringLength);
	    UINT bytesWrote;
	    fres = f_write(&fil, string, stringLength, &bytesWrote);
 8002224:	89fa      	ldrh	r2, [r7, #14]
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <writeFile+0x84>)
 800222e:	f007 f834 	bl	800929a <f_write>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <writeFile+0x88>)
 8002238:	701a      	strb	r2, [r3, #0]
	    if(fres == FR_OK) {
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <writeFile+0x88>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d104      	bne.n	800224c <writeFile+0x70>
	    	f_close(&fil);
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <writeFile+0x84>)
 8002244:	f007 fa56 	bl	80096f4 <f_close>
	    	return true;
 8002248:	2301      	movs	r3, #1
 800224a:	e005      	b.n	8002258 <writeFile+0x7c>
	    } else {
	    	f_close(&fil);
 800224c:	4804      	ldr	r0, [pc, #16]	; (8002260 <writeFile+0x84>)
 800224e:	f007 fa51 	bl	80096f4 <f_close>
	    	return false;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <writeFile+0x7c>
	    }
	} else {
	   	return false;
 8002256:	2300      	movs	r3, #0
	}
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200052f0 	.word	0x200052f0
 8002264:	200052ec 	.word	0x200052ec

08002268 <openFileRead>:

bool openFileRead(char* fileName)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	fres = f_open(&fil, fileName, FA_READ);
 8002270:	2201      	movs	r2, #1
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4808      	ldr	r0, [pc, #32]	; (8002298 <openFileRead+0x30>)
 8002276:	f006 fe4b 	bl	8008f10 <f_open>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <openFileRead+0x34>)
 8002280:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <openFileRead+0x34>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <openFileRead+0x26>
	    return false;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <openFileRead+0x28>
    } else
    {
    	return true;
 800228e:	2301      	movs	r3, #1
    }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200052f0 	.word	0x200052f0
 800229c:	200052ec 	.word	0x200052ec

080022a0 <makeNewFile>:
		return "file error";
	}
}

bool makeNewFile(char* fileName)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	//Make a new file with the "fileName", make sure ".txt" is included in the fileName
	fres = f_open(&fil, fileName, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 80022a8:	2216      	movs	r2, #22
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	480a      	ldr	r0, [pc, #40]	; (80022d8 <makeNewFile+0x38>)
 80022ae:	f006 fe2f 	bl	8008f10 <f_open>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <makeNewFile+0x3c>)
 80022b8:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) {
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <makeNewFile+0x3c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d104      	bne.n	80022cc <makeNewFile+0x2c>
		f_close(&fil);
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <makeNewFile+0x38>)
 80022c4:	f007 fa16 	bl	80096f4 <f_close>
		return true;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <makeNewFile+0x2e>
	} else {
	   	return false;
 80022cc:	2300      	movs	r3, #0
	}
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200052f0 	.word	0x200052f0
 80022dc:	200052ec 	.word	0x200052ec

080022e0 <activityToSD>:

bool activityToSD(char* fileName, char* string)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
	char *sTime;
	sTime = getTime();
 80022ea:	f7ff fd61 	bl	8001db0 <getTime>
 80022ee:	60f8      	str	r0, [r7, #12]
	writeFile(fileName, sTime);
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ff72 	bl	80021dc <writeFile>
	writeFile(fileName, " : ");
 80022f8:	490d      	ldr	r1, [pc, #52]	; (8002330 <activityToSD+0x50>)
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ff6e 	bl	80021dc <writeFile>
	if(writeFile(fileName, string))
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff6a 	bl	80021dc <writeFile>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <activityToSD+0x40>
	{
		free(sTime);
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f00a fdee 	bl	800cef0 <free>
		writeFile(fileName, "\n");
 8002314:	4907      	ldr	r1, [pc, #28]	; (8002334 <activityToSD+0x54>)
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff60 	bl	80021dc <writeFile>
		return true;
 800231c:	2301      	movs	r3, #1
 800231e:	e003      	b.n	8002328 <activityToSD+0x48>
	} else
	{
		free(sTime);
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f00a fde5 	bl	800cef0 <free>
		return false;
 8002326:	2300      	movs	r3, #0
	}

}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	080121f0 	.word	0x080121f0
 8002334:	080121f4 	.word	0x080121f4

08002338 <totalActivityToSD>:

void totalActivityToSD(char* fileName, char* firstString, char* secondString)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
	char *sTime;
	sTime = getTime();
 8002344:	f7ff fd34 	bl	8001db0 <getTime>
 8002348:	6178      	str	r0, [r7, #20]
	writeFile(fileName, "Einde activiteit, activteit gedaan voor ");
 800234a:	4911      	ldr	r1, [pc, #68]	; (8002390 <totalActivityToSD+0x58>)
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff ff45 	bl	80021dc <writeFile>
	writeFile(fileName, firstString);
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff ff41 	bl	80021dc <writeFile>
	writeFile(fileName, " minuten.\nActiviteit beëindigt op: ");
 800235a:	490e      	ldr	r1, [pc, #56]	; (8002394 <totalActivityToSD+0x5c>)
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f7ff ff3d 	bl	80021dc <writeFile>
	writeFile(fileName, sTime);
 8002362:	6979      	ldr	r1, [r7, #20]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7ff ff39 	bl	80021dc <writeFile>
	free(sTime);
 800236a:	6978      	ldr	r0, [r7, #20]
 800236c:	f00a fdc0 	bl	800cef0 <free>
	writeFile(fileName, ". Activiteit was: ");
 8002370:	4909      	ldr	r1, [pc, #36]	; (8002398 <totalActivityToSD+0x60>)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff ff32 	bl	80021dc <writeFile>
	writeFile(fileName, secondString);
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f7ff ff2e 	bl	80021dc <writeFile>
	writeFile(fileName, "\n");
 8002380:	4906      	ldr	r1, [pc, #24]	; (800239c <totalActivityToSD+0x64>)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff ff2a 	bl	80021dc <writeFile>

}
 8002388:	bf00      	nop
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	080121f8 	.word	0x080121f8
 8002394:	08012224 	.word	0x08012224
 8002398:	0801224c 	.word	0x0801224c
 800239c:	080121f4 	.word	0x080121f4

080023a0 <writeStartToSD>:

void writeStartToSD(char* fileName)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	char *sTime;
	sTime = getTime();
 80023a8:	f7ff fd02 	bl	8001db0 <getTime>
 80023ac:	60f8      	str	r0, [r7, #12]
	writeFile(fileName, "Nieuwe activiteit gestart op: ");
 80023ae:	4909      	ldr	r1, [pc, #36]	; (80023d4 <writeStartToSD+0x34>)
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff13 	bl	80021dc <writeFile>
	writeFile(fileName, sTime);
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff0f 	bl	80021dc <writeFile>
	free(sTime);
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f00a fd96 	bl	800cef0 <free>
	writeFile(fileName, "\n");
 80023c4:	4904      	ldr	r1, [pc, #16]	; (80023d8 <writeStartToSD+0x38>)
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff08 	bl	80021dc <writeFile>
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	08012260 	.word	0x08012260
 80023d8:	080121f4 	.word	0x080121f4

080023dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <MX_SPI1_Init+0x64>)
 80023e2:	4a18      	ldr	r2, [pc, #96]	; (8002444 <MX_SPI1_Init+0x68>)
 80023e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <MX_SPI1_Init+0x64>)
 80023e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <MX_SPI1_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <MX_SPI1_Init+0x64>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_SPI1_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <MX_SPI1_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_SPI1_Init+0x64>)
 8002408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <MX_SPI1_Init+0x64>)
 8002410:	2230      	movs	r2, #48	; 0x30
 8002412:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <MX_SPI1_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MX_SPI1_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <MX_SPI1_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <MX_SPI1_Init+0x64>)
 8002428:	220a      	movs	r2, #10
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800242c:	4804      	ldr	r0, [pc, #16]	; (8002440 <MX_SPI1_Init+0x64>)
 800242e:	f002 ff2f 	bl	8005290 <HAL_SPI_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002438:	f7ff feb0 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20005520 	.word	0x20005520
 8002444:	40013000 	.word	0x40013000

08002448 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_SPI_MspInit+0x84>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d12b      	bne.n	80024c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a17      	ldr	r2, [pc, #92]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 8002474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024a2:	23e0      	movs	r3, #224	; 0xe0
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024b2:	2305      	movs	r3, #5
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <HAL_SPI_MspInit+0x8c>)
 80024be:	f001 fb55 	bl	8003b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40013000 	.word	0x40013000
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000

080024d8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80024de:	f000 fa29 	bl	8002934 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80024e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80024e6:	2201      	movs	r2, #1
 80024e8:	2178      	movs	r1, #120	; 0x78
 80024ea:	485b      	ldr	r0, [pc, #364]	; (8002658 <SSD1306_Init+0x180>)
 80024ec:	f001 ff1e 	bl	800432c <HAL_I2C_IsDeviceReady>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e0a9      	b.n	800264e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80024fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80024fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002500:	e002      	b.n	8002508 <SSD1306_Init+0x30>
		p--;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3b01      	subs	r3, #1
 8002506:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f9      	bne.n	8002502 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800250e:	22ae      	movs	r2, #174	; 0xae
 8002510:	2100      	movs	r1, #0
 8002512:	2078      	movs	r0, #120	; 0x78
 8002514:	f000 fa6c 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002518:	2220      	movs	r2, #32
 800251a:	2100      	movs	r1, #0
 800251c:	2078      	movs	r0, #120	; 0x78
 800251e:	f000 fa67 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002522:	2210      	movs	r2, #16
 8002524:	2100      	movs	r1, #0
 8002526:	2078      	movs	r0, #120	; 0x78
 8002528:	f000 fa62 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800252c:	22b0      	movs	r2, #176	; 0xb0
 800252e:	2100      	movs	r1, #0
 8002530:	2078      	movs	r0, #120	; 0x78
 8002532:	f000 fa5d 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002536:	22c8      	movs	r2, #200	; 0xc8
 8002538:	2100      	movs	r1, #0
 800253a:	2078      	movs	r0, #120	; 0x78
 800253c:	f000 fa58 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002540:	2200      	movs	r2, #0
 8002542:	2100      	movs	r1, #0
 8002544:	2078      	movs	r0, #120	; 0x78
 8002546:	f000 fa53 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800254a:	2210      	movs	r2, #16
 800254c:	2100      	movs	r1, #0
 800254e:	2078      	movs	r0, #120	; 0x78
 8002550:	f000 fa4e 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002554:	2240      	movs	r2, #64	; 0x40
 8002556:	2100      	movs	r1, #0
 8002558:	2078      	movs	r0, #120	; 0x78
 800255a:	f000 fa49 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800255e:	2281      	movs	r2, #129	; 0x81
 8002560:	2100      	movs	r1, #0
 8002562:	2078      	movs	r0, #120	; 0x78
 8002564:	f000 fa44 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	2100      	movs	r1, #0
 800256c:	2078      	movs	r0, #120	; 0x78
 800256e:	f000 fa3f 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002572:	22a1      	movs	r2, #161	; 0xa1
 8002574:	2100      	movs	r1, #0
 8002576:	2078      	movs	r0, #120	; 0x78
 8002578:	f000 fa3a 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800257c:	22a6      	movs	r2, #166	; 0xa6
 800257e:	2100      	movs	r1, #0
 8002580:	2078      	movs	r0, #120	; 0x78
 8002582:	f000 fa35 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002586:	22a8      	movs	r2, #168	; 0xa8
 8002588:	2100      	movs	r1, #0
 800258a:	2078      	movs	r0, #120	; 0x78
 800258c:	f000 fa30 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002590:	223f      	movs	r2, #63	; 0x3f
 8002592:	2100      	movs	r1, #0
 8002594:	2078      	movs	r0, #120	; 0x78
 8002596:	f000 fa2b 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800259a:	22a4      	movs	r2, #164	; 0xa4
 800259c:	2100      	movs	r1, #0
 800259e:	2078      	movs	r0, #120	; 0x78
 80025a0:	f000 fa26 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80025a4:	22d3      	movs	r2, #211	; 0xd3
 80025a6:	2100      	movs	r1, #0
 80025a8:	2078      	movs	r0, #120	; 0x78
 80025aa:	f000 fa21 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2078      	movs	r0, #120	; 0x78
 80025b4:	f000 fa1c 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80025b8:	22d5      	movs	r2, #213	; 0xd5
 80025ba:	2100      	movs	r1, #0
 80025bc:	2078      	movs	r0, #120	; 0x78
 80025be:	f000 fa17 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80025c2:	22f0      	movs	r2, #240	; 0xf0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2078      	movs	r0, #120	; 0x78
 80025c8:	f000 fa12 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80025cc:	22d9      	movs	r2, #217	; 0xd9
 80025ce:	2100      	movs	r1, #0
 80025d0:	2078      	movs	r0, #120	; 0x78
 80025d2:	f000 fa0d 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80025d6:	2222      	movs	r2, #34	; 0x22
 80025d8:	2100      	movs	r1, #0
 80025da:	2078      	movs	r0, #120	; 0x78
 80025dc:	f000 fa08 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80025e0:	22da      	movs	r2, #218	; 0xda
 80025e2:	2100      	movs	r1, #0
 80025e4:	2078      	movs	r0, #120	; 0x78
 80025e6:	f000 fa03 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80025ea:	2212      	movs	r2, #18
 80025ec:	2100      	movs	r1, #0
 80025ee:	2078      	movs	r0, #120	; 0x78
 80025f0:	f000 f9fe 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80025f4:	22db      	movs	r2, #219	; 0xdb
 80025f6:	2100      	movs	r1, #0
 80025f8:	2078      	movs	r0, #120	; 0x78
 80025fa:	f000 f9f9 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80025fe:	2220      	movs	r2, #32
 8002600:	2100      	movs	r1, #0
 8002602:	2078      	movs	r0, #120	; 0x78
 8002604:	f000 f9f4 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002608:	228d      	movs	r2, #141	; 0x8d
 800260a:	2100      	movs	r1, #0
 800260c:	2078      	movs	r0, #120	; 0x78
 800260e:	f000 f9ef 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002612:	2214      	movs	r2, #20
 8002614:	2100      	movs	r1, #0
 8002616:	2078      	movs	r0, #120	; 0x78
 8002618:	f000 f9ea 	bl	80029f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800261c:	22af      	movs	r2, #175	; 0xaf
 800261e:	2100      	movs	r1, #0
 8002620:	2078      	movs	r0, #120	; 0x78
 8002622:	f000 f9e5 	bl	80029f0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002626:	222e      	movs	r2, #46	; 0x2e
 8002628:	2100      	movs	r1, #0
 800262a:	2078      	movs	r0, #120	; 0x78
 800262c:	f000 f9e0 	bl	80029f0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002630:	2000      	movs	r0, #0
 8002632:	f000 f843 	bl	80026bc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002636:	f000 f813 	bl	8002660 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <SSD1306_Init+0x184>)
 800263c:	2200      	movs	r2, #0
 800263e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <SSD1306_Init+0x184>)
 8002642:	2200      	movs	r2, #0
 8002644:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <SSD1306_Init+0x184>)
 8002648:	2201      	movs	r2, #1
 800264a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20005064 	.word	0x20005064
 800265c:	20000648 	.word	0x20000648

08002660 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002666:	2300      	movs	r3, #0
 8002668:	71fb      	strb	r3, [r7, #7]
 800266a:	e01d      	b.n	80026a8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	3b50      	subs	r3, #80	; 0x50
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	2100      	movs	r1, #0
 8002676:	2078      	movs	r0, #120	; 0x78
 8002678:	f000 f9ba 	bl	80029f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800267c:	2200      	movs	r2, #0
 800267e:	2100      	movs	r1, #0
 8002680:	2078      	movs	r0, #120	; 0x78
 8002682:	f000 f9b5 	bl	80029f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002686:	2210      	movs	r2, #16
 8002688:	2100      	movs	r1, #0
 800268a:	2078      	movs	r0, #120	; 0x78
 800268c:	f000 f9b0 	bl	80029f0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	01db      	lsls	r3, r3, #7
 8002694:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <SSD1306_UpdateScreen+0x58>)
 8002696:	441a      	add	r2, r3
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	2140      	movs	r1, #64	; 0x40
 800269c:	2078      	movs	r0, #120	; 0x78
 800269e:	f000 f95f 	bl	8002960 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	3301      	adds	r3, #1
 80026a6:	71fb      	strb	r3, [r7, #7]
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d9de      	bls.n	800266c <SSD1306_UpdateScreen+0xc>
	}
}
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000248 	.word	0x20000248

080026bc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <SSD1306_Fill+0x14>
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <SSD1306_Fill+0x16>
 80026d0:	23ff      	movs	r3, #255	; 0xff
 80026d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d6:	4619      	mov	r1, r3
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <SSD1306_Fill+0x2c>)
 80026da:	f00a fc1f 	bl	800cf1c <memset>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000248 	.word	0x20000248

080026ec <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
 80026f6:	460b      	mov	r3, r1
 80026f8:	80bb      	strh	r3, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	70fb      	strb	r3, [r7, #3]
	if (
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	2b7f      	cmp	r3, #127	; 0x7f
 8002702:	d848      	bhi.n	8002796 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002704:	88bb      	ldrh	r3, [r7, #4]
 8002706:	2b3f      	cmp	r3, #63	; 0x3f
 8002708:	d845      	bhi.n	8002796 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800270a:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <SSD1306_DrawPixel+0xb8>)
 800270c:	791b      	ldrb	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d11a      	bne.n	800275c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	88bb      	ldrh	r3, [r7, #4]
 800272a:	08db      	lsrs	r3, r3, #3
 800272c:	b298      	uxth	r0, r3
 800272e:	4603      	mov	r3, r0
 8002730:	01db      	lsls	r3, r3, #7
 8002732:	4413      	add	r3, r2
 8002734:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <SSD1306_DrawPixel+0xbc>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	b25a      	sxtb	r2, r3
 800273a:	88bb      	ldrh	r3, [r7, #4]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	b25b      	sxtb	r3, r3
 8002748:	4313      	orrs	r3, r2
 800274a:	b259      	sxtb	r1, r3
 800274c:	88fa      	ldrh	r2, [r7, #6]
 800274e:	4603      	mov	r3, r0
 8002750:	01db      	lsls	r3, r3, #7
 8002752:	4413      	add	r3, r2
 8002754:	b2c9      	uxtb	r1, r1
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <SSD1306_DrawPixel+0xbc>)
 8002758:	54d1      	strb	r1, [r2, r3]
 800275a:	e01d      	b.n	8002798 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	88bb      	ldrh	r3, [r7, #4]
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	b298      	uxth	r0, r3
 8002764:	4603      	mov	r3, r0
 8002766:	01db      	lsls	r3, r3, #7
 8002768:	4413      	add	r3, r2
 800276a:	4a0f      	ldr	r2, [pc, #60]	; (80027a8 <SSD1306_DrawPixel+0xbc>)
 800276c:	5cd3      	ldrb	r3, [r2, r3]
 800276e:	b25a      	sxtb	r2, r3
 8002770:	88bb      	ldrh	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	b25b      	sxtb	r3, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	b25b      	sxtb	r3, r3
 8002782:	4013      	ands	r3, r2
 8002784:	b259      	sxtb	r1, r3
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	4603      	mov	r3, r0
 800278a:	01db      	lsls	r3, r3, #7
 800278c:	4413      	add	r3, r2
 800278e:	b2c9      	uxtb	r1, r1
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <SSD1306_DrawPixel+0xbc>)
 8002792:	54d1      	strb	r1, [r2, r3]
 8002794:	e000      	b.n	8002798 <SSD1306_DrawPixel+0xac>
		return;
 8002796:	bf00      	nop
	}
}
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000648 	.word	0x20000648
 80027a8:	20000248 	.word	0x20000248

080027ac <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	460a      	mov	r2, r1
 80027b6:	80fb      	strh	r3, [r7, #6]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80027bc:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <SSD1306_GotoXY+0x28>)
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <SSD1306_GotoXY+0x28>)
 80027c4:	88bb      	ldrh	r3, [r7, #4]
 80027c6:	8053      	strh	r3, [r2, #2]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	20000648 	.word	0x20000648

080027d8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	4613      	mov	r3, r2
 80027e6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80027e8:	4b3a      	ldr	r3, [pc, #232]	; (80028d4 <SSD1306_Putc+0xfc>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	4413      	add	r3, r2
	if (
 80027f4:	2b7f      	cmp	r3, #127	; 0x7f
 80027f6:	dc07      	bgt.n	8002808 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <SSD1306_Putc+0xfc>)
 80027fa:	885b      	ldrh	r3, [r3, #2]
 80027fc:	461a      	mov	r2, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002804:	2b3f      	cmp	r3, #63	; 0x3f
 8002806:	dd01      	ble.n	800280c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002808:	2300      	movs	r3, #0
 800280a:	e05e      	b.n	80028ca <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e04b      	b.n	80028aa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	3b20      	subs	r3, #32
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	7849      	ldrb	r1, [r1, #1]
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4619      	mov	r1, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	440b      	add	r3, r1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e030      	b.n	8002898 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002846:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <SSD1306_Putc+0xfc>)
 8002848:	881a      	ldrh	r2, [r3, #0]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4413      	add	r3, r2
 8002850:	b298      	uxth	r0, r3
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <SSD1306_Putc+0xfc>)
 8002854:	885a      	ldrh	r2, [r3, #2]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	b29b      	uxth	r3, r3
 800285a:	4413      	add	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	79ba      	ldrb	r2, [r7, #6]
 8002860:	4619      	mov	r1, r3
 8002862:	f7ff ff43 	bl	80026ec <SSD1306_DrawPixel>
 8002866:	e014      	b.n	8002892 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <SSD1306_Putc+0xfc>)
 800286a:	881a      	ldrh	r2, [r3, #0]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4413      	add	r3, r2
 8002872:	b298      	uxth	r0, r3
 8002874:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <SSD1306_Putc+0xfc>)
 8002876:	885a      	ldrh	r2, [r3, #2]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b299      	uxth	r1, r3
 8002880:	79bb      	ldrb	r3, [r7, #6]
 8002882:	2b00      	cmp	r3, #0
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	f7ff ff2d 	bl	80026ec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	3301      	adds	r3, #1
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d3c8      	bcc.n	8002836 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	785b      	ldrb	r3, [r3, #1]
 80028ae:	461a      	mov	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d3ad      	bcc.n	8002812 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <SSD1306_Putc+0xfc>)
 80028b8:	881a      	ldrh	r2, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <SSD1306_Putc+0xfc>)
 80028c6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80028c8:	79fb      	ldrb	r3, [r7, #7]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000648 	.word	0x20000648

080028d8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80028e6:	e012      	b.n	800290e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	79fa      	ldrb	r2, [r7, #7]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff71 	bl	80027d8 <SSD1306_Putc>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d002      	beq.n	8002908 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	e008      	b.n	800291a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3301      	adds	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1e8      	bne.n	80028e8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	781b      	ldrb	r3, [r3, #0]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002926:	2000      	movs	r0, #0
 8002928:	f7ff fec8 	bl	80026bc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800292c:	f7ff fe98 	bl	8002660 <SSD1306_UpdateScreen>
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <ssd1306_I2C_Init+0x28>)
 800293c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800293e:	e002      	b.n	8002946 <ssd1306_I2C_Init+0x12>
		p--;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f9      	bne.n	8002940 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	0003d090 	.word	0x0003d090

08002960 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b0c7      	sub	sp, #284	; 0x11c
 8002964:	af02      	add	r7, sp, #8
 8002966:	4604      	mov	r4, r0
 8002968:	4608      	mov	r0, r1
 800296a:	4639      	mov	r1, r7
 800296c:	600a      	str	r2, [r1, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	1dfb      	adds	r3, r7, #7
 8002972:	4622      	mov	r2, r4
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	1dbb      	adds	r3, r7, #6
 8002978:	4602      	mov	r2, r0
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	460a      	mov	r2, r1
 8002980:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	1dba      	adds	r2, r7, #6
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002992:	e010      	b.n	80029b6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002994:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002998:	463a      	mov	r2, r7
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	441a      	add	r2, r3
 800299e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029a2:	3301      	adds	r3, #1
 80029a4:	7811      	ldrb	r1, [r2, #0]
 80029a6:	f107 020c 	add.w	r2, r7, #12
 80029aa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80029ac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029b0:	3301      	adds	r3, #1
 80029b2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80029b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	1d3a      	adds	r2, r7, #4
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d8e7      	bhi.n	8002994 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80029c4:	1dfb      	adds	r3, r7, #7
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b299      	uxth	r1, r3
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f107 020c 	add.w	r2, r7, #12
 80029d6:	200a      	movs	r0, #10
 80029d8:	9000      	str	r0, [sp, #0]
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <ssd1306_I2C_WriteMulti+0x8c>)
 80029dc:	f001 fba8 	bl	8004130 <HAL_I2C_Master_Transmit>
}
 80029e0:	bf00      	nop
 80029e2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20005064 	.word	0x20005064

080029f0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	460b      	mov	r3, r1
 80029fc:	71bb      	strb	r3, [r7, #6]
 80029fe:	4613      	mov	r3, r2
 8002a00:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002a02:	79bb      	ldrb	r3, [r7, #6]
 8002a04:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002a06:	797b      	ldrb	r3, [r7, #5]
 8002a08:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	b299      	uxth	r1, r3
 8002a0e:	f107 020c 	add.w	r2, r7, #12
 8002a12:	230a      	movs	r3, #10
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2302      	movs	r3, #2
 8002a18:	4803      	ldr	r0, [pc, #12]	; (8002a28 <ssd1306_I2C_Write+0x38>)
 8002a1a:	f001 fb89 	bl	8004130 <HAL_I2C_Master_Transmit>
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20005064 	.word	0x20005064

08002a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_MspInit+0x54>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <HAL_MspInit+0x54>)
 8002a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_MspInit+0x54>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_MspInit+0x54>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_MspInit+0x54>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_MspInit+0x54>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	210f      	movs	r1, #15
 8002a6e:	f06f 0001 	mvn.w	r0, #1
 8002a72:	f000 ffbf 	bl	80039f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800

08002a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	; 0x30
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	201d      	movs	r0, #29
 8002a9a:	f000 ffab 	bl	80039f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a9e:	201d      	movs	r0, #29
 8002aa0:	f000 ffc4 	bl	8003a2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_InitTick+0xa4>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_InitTick+0xa4>)
 8002aae:	f043 0302 	orr.w	r3, r3, #2
 8002ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_InitTick+0xa4>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ac0:	f107 0210 	add.w	r2, r7, #16
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f002 fbae 	bl	800522c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ad0:	f002 fb84 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <HAL_InitTick+0xa8>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_InitTick+0xac>)
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <HAL_InitTick+0xb0>)
 8002aec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_InitTick+0xac>)
 8002af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002af4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <HAL_InitTick+0xac>)
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <HAL_InitTick+0xac>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_InitTick+0xac>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002b08:	4809      	ldr	r0, [pc, #36]	; (8002b30 <HAL_InitTick+0xac>)
 8002b0a:	f002 feb7 	bl	800587c <HAL_TIM_Base_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002b14:	4806      	ldr	r0, [pc, #24]	; (8002b30 <HAL_InitTick+0xac>)
 8002b16:	f002 ff0b 	bl	8005930 <HAL_TIM_Base_Start_IT>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	e000      	b.n	8002b20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3730      	adds	r7, #48	; 0x30
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	431bde83 	.word	0x431bde83
 8002b30:	20005578 	.word	0x20005578
 8002b34:	40000400 	.word	0x40000400

08002b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <NMI_Handler+0x4>

08002b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b42:	e7fe      	b.n	8002b42 <HardFault_Handler+0x4>

08002b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <MemManage_Handler+0x4>

08002b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b4e:	e7fe      	b.n	8002b4e <BusFault_Handler+0x4>

08002b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <UsageFault_Handler+0x4>

08002b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <ADC_IRQHandler+0x10>)
 8002b6a:	f000 fb01 	bl	8003170 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20004ca4 	.word	0x20004ca4

08002b78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <TIM3_IRQHandler+0x10>)
 8002b7e:	f002 ff39 	bl	80059f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20005578 	.word	0x20005578

08002b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_RxCpltCallback(&huart1);
 8002b90:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <USART1_IRQHandler+0x14>)
 8002b92:	f000 f807 	bl	8002ba4 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b96:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <USART1_IRQHandler+0x14>)
 8002b98:	f003 f96e 	bl	8005e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	200055c0 	.word	0x200055c0

08002ba4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 8002bac:	f7fe ff00 	bl	80019b0 <GPS_UART_CallBack>
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
	return 1;
 8002bbc:	2301      	movs	r3, #1
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_kill>:

int _kill(int pid, int sig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bd2:	f00a f95b 	bl	800ce8c <__errno>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2216      	movs	r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
	return -1;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_exit>:

void _exit (int status)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffe7 	bl	8002bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bfa:	e7fe      	b.n	8002bfa <_exit+0x12>

08002bfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e00a      	b.n	8002c24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c0e:	f3af 8000 	nop.w
 8002c12:	4601      	mov	r1, r0
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	60ba      	str	r2, [r7, #8]
 8002c1a:	b2ca      	uxtb	r2, r1
 8002c1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3301      	adds	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	dbf0      	blt.n	8002c0e <_read+0x12>
	}

return len;
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	e009      	b.n	8002c5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	60ba      	str	r2, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	dbf1      	blt.n	8002c48 <_write+0x12>
	}
	return len;
 8002c64:	687b      	ldr	r3, [r7, #4]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <_close>:

int _close(int file)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
	return -1;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c96:	605a      	str	r2, [r3, #4]
	return 0;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_isatty>:

int _isatty(int file)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
	return 1;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce0:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <_sbrk+0x5c>)
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <_sbrk+0x60>)
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <_sbrk+0x64>)
 8002cf6:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <_sbrk+0x68>)
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d207      	bcs.n	8002d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d08:	f00a f8c0 	bl	800ce8c <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	220c      	movs	r2, #12
 8002d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
 8002d16:	e009      	b.n	8002d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <_sbrk+0x64>)
 8002d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20010000 	.word	0x20010000
 8002d38:	00000400 	.word	0x00000400
 8002d3c:	20000650 	.word	0x20000650
 8002d40:	20005ad0 	.word	0x20005ad0

08002d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <SystemInit+0x20>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <SystemInit+0x20>)
 8002d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <MX_USART1_UART_Init+0x50>)
 8002d70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d8e:	220c      	movs	r2, #12
 8002d90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002da0:	f002 ffec 	bl	8005d7c <HAL_UART_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002daa:	f7ff f9f7 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200055c0 	.word	0x200055c0
 8002db8:	40011000 	.word	0x40011000

08002dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <HAL_UART_MspInit+0x84>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d12c      	bne.n	8002e38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	6453      	str	r3, [r2, #68]	; 0x44
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e28:	2307      	movs	r3, #7
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4619      	mov	r1, r3
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <HAL_UART_MspInit+0x8c>)
 8002e34:	f000 fe9a 	bl	8003b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3728      	adds	r7, #40	; 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40011000 	.word	0x40011000
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020000 	.word	0x40020000

08002e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e50:	480d      	ldr	r0, [pc, #52]	; (8002e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e52:	490e      	ldr	r1, [pc, #56]	; (8002e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e54:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e58:	e002      	b.n	8002e60 <LoopCopyDataInit>

08002e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e5e:	3304      	adds	r3, #4

08002e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e64:	d3f9      	bcc.n	8002e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e68:	4c0b      	ldr	r4, [pc, #44]	; (8002e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e6c:	e001      	b.n	8002e72 <LoopFillZerobss>

08002e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e70:	3204      	adds	r2, #4

08002e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e74:	d3fb      	bcc.n	8002e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e76:	f7ff ff65 	bl	8002d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e7a:	f00a f80d 	bl	800ce98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e7e:	f7ff f88b 	bl	8001f98 <main>
  bx  lr    
 8002e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e8c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002e90:	08013db4 	.word	0x08013db4
  ldr r2, =_sbss
 8002e94:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002e98:	20005acc 	.word	0x20005acc

08002e9c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e9c:	e7fe      	b.n	8002e9c <DMA1_Stream0_IRQHandler>
	...

08002ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	; (8002ee0 <HAL_Init+0x40>)
 8002eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <HAL_Init+0x40>)
 8002eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_Init+0x40>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <HAL_Init+0x40>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f000 fd88 	bl	80039de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7ff fdd8 	bl	8002a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed4:	f7ff fdaa 	bl	8002a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023c00 	.word	0x40023c00

08002ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_IncTick+0x20>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000018 	.word	0x20000018
 8002f08:	20005604 	.word	0x20005604

08002f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_GetTick+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20005604 	.word	0x20005604

08002f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f2c:	f7ff ffee 	bl	8002f0c <HAL_GetTick>
 8002f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d005      	beq.n	8002f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_Delay+0x44>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f4a:	bf00      	nop
 8002f4c:	f7ff ffde 	bl	8002f0c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d8f7      	bhi.n	8002f4c <HAL_Delay+0x28>
  {
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000018 	.word	0x20000018

08002f6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e033      	b.n	8002fea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe f888 	bl	80010a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fb2:	f023 0302 	bic.w	r3, r3, #2
 8002fb6:	f043 0202 	orr.w	r2, r3, #2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fb5a 	bl	8003678 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8002fda:	e001      	b.n	8002fe0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADC_Start_IT+0x1a>
 800300a:	2302      	movs	r3, #2
 800300c:	e0a1      	b.n	8003152 <HAL_ADC_Start_IT+0x15e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d018      	beq.n	8003056 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003034:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <HAL_ADC_Start_IT+0x16c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a4a      	ldr	r2, [pc, #296]	; (8003164 <HAL_ADC_Start_IT+0x170>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0c9a      	lsrs	r2, r3, #18
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003048:	e002      	b.n	8003050 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3b01      	subs	r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f9      	bne.n	800304a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d169      	bne.n	8003138 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800308e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d106      	bne.n	80030b2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f023 0206 	bic.w	r2, r3, #6
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
 80030b0:	e002      	b.n	80030b8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c0:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_ADC_Start_IT+0x174>)
 80030c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030cc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030dc:	f043 0320 	orr.w	r3, r3, #32
 80030e0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d129      	bne.n	8003150 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	e020      	b.n	8003150 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_ADC_Start_IT+0x178>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d11b      	bne.n	8003150 <HAL_ADC_Start_IT+0x15c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d114      	bne.n	8003150 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	e00b      	b.n	8003150 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000010 	.word	0x20000010
 8003164:	431bde83 	.word	0x431bde83
 8003168:	40012300 	.word	0x40012300
 800316c:	40012000 	.word	0x40012000

08003170 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d049      	beq.n	8003246 <HAL_ADC_IRQHandler+0xd6>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d046      	beq.n	8003246 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d12b      	bne.n	8003236 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d127      	bne.n	8003236 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d119      	bne.n	8003236 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0220 	bic.w	r2, r2, #32
 8003210:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f043 0201 	orr.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd ff76 	bl	8001128 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0212 	mvn.w	r2, #18
 8003244:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	bf0c      	ite	eq
 800326a:	2301      	moveq	r3, #1
 800326c:	2300      	movne	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d057      	beq.n	8003328 <HAL_ADC_IRQHandler+0x1b8>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d054      	beq.n	8003328 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d139      	bne.n	8003318 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d12b      	bne.n	8003318 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d124      	bne.n	8003318 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11d      	bne.n	8003318 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d119      	bne.n	8003318 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 faa9 	bl	8003870 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f06f 020c 	mvn.w	r2, #12
 8003326:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	bf0c      	ite	eq
 8003336:	2301      	moveq	r3, #1
 8003338:	2300      	movne	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d017      	beq.n	800338a <HAL_ADC_IRQHandler+0x21a>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d014      	beq.n	800338a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d10d      	bne.n	800338a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f846 	bl	800340c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0201 	mvn.w	r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b20      	cmp	r3, #32
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d015      	beq.n	80033ea <HAL_ADC_IRQHandler+0x27a>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	f043 0202 	orr.w	r2, r3, #2
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0220 	mvn.w	r2, #32
 80033d8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f820 	bl	8003420 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0220 	mvn.w	r2, #32
 80033e8:	601a      	str	r2, [r3, #0]
  }
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1c>
 800344c:	2302      	movs	r3, #2
 800344e:	e105      	b.n	800365c <HAL_ADC_ConfigChannel+0x228>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b09      	cmp	r3, #9
 800345e:	d925      	bls.n	80034ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68d9      	ldr	r1, [r3, #12]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	3b1e      	subs	r3, #30
 8003476:	2207      	movs	r2, #7
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43da      	mvns	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	400a      	ands	r2, r1
 8003484:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68d9      	ldr	r1, [r3, #12]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	4603      	mov	r3, r0
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	4403      	add	r3, r0
 800349e:	3b1e      	subs	r3, #30
 80034a0:	409a      	lsls	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	e022      	b.n	80034f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6919      	ldr	r1, [r3, #16]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	2207      	movs	r2, #7
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	400a      	ands	r2, r1
 80034ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6919      	ldr	r1, [r3, #16]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4403      	add	r3, r0
 80034e8:	409a      	lsls	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d824      	bhi.n	8003544 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3b05      	subs	r3, #5
 800350c:	221f      	movs	r2, #31
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	400a      	ands	r2, r1
 800351a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	4618      	mov	r0, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3b05      	subs	r3, #5
 8003536:	fa00 f203 	lsl.w	r2, r0, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
 8003542:	e04c      	b.n	80035de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b0c      	cmp	r3, #12
 800354a:	d824      	bhi.n	8003596 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	3b23      	subs	r3, #35	; 0x23
 800355e:	221f      	movs	r2, #31
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43da      	mvns	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	400a      	ands	r2, r1
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	4618      	mov	r0, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	3b23      	subs	r3, #35	; 0x23
 8003588:	fa00 f203 	lsl.w	r2, r0, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
 8003594:	e023      	b.n	80035de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	3b41      	subs	r3, #65	; 0x41
 80035a8:	221f      	movs	r2, #31
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43da      	mvns	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	400a      	ands	r2, r1
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	4618      	mov	r0, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	3b41      	subs	r3, #65	; 0x41
 80035d2:	fa00 f203 	lsl.w	r2, r0, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_ADC_ConfigChannel+0x234>)
 80035e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a21      	ldr	r2, [pc, #132]	; (800366c <HAL_ADC_ConfigChannel+0x238>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d109      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x1cc>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b12      	cmp	r3, #18
 80035f2:	d105      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a19      	ldr	r2, [pc, #100]	; (800366c <HAL_ADC_ConfigChannel+0x238>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d123      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x21e>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b10      	cmp	r3, #16
 8003610:	d003      	beq.n	800361a <HAL_ADC_ConfigChannel+0x1e6>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b11      	cmp	r3, #17
 8003618:	d11b      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b10      	cmp	r3, #16
 800362c:	d111      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <HAL_ADC_ConfigChannel+0x23c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a10      	ldr	r2, [pc, #64]	; (8003674 <HAL_ADC_ConfigChannel+0x240>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	0c9a      	lsrs	r2, r3, #18
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003644:	e002      	b.n	800364c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3b01      	subs	r3, #1
 800364a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f9      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40012300 	.word	0x40012300
 800366c:	40012000 	.word	0x40012000
 8003670:	20000010 	.word	0x20000010
 8003674:	431bde83 	.word	0x431bde83

08003678 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003680:	4b79      	ldr	r3, [pc, #484]	; (8003868 <ADC_Init+0x1f0>)
 8003682:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	021a      	lsls	r2, r3, #8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6899      	ldr	r1, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	4a58      	ldr	r2, [pc, #352]	; (800386c <ADC_Init+0x1f4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d022      	beq.n	8003756 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800371e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6899      	ldr	r1, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6899      	ldr	r1, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e00f      	b.n	8003776 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003774:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0202 	bic.w	r2, r2, #2
 8003784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6899      	ldr	r1, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7e1b      	ldrb	r3, [r3, #24]
 8003790:	005a      	lsls	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01b      	beq.n	80037dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	3b01      	subs	r3, #1
 80037d0:	035a      	lsls	r2, r3, #13
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	e007      	b.n	80037ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	3b01      	subs	r3, #1
 8003808:	051a      	lsls	r2, r3, #20
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800382e:	025a      	lsls	r2, r3, #9
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	029a      	lsls	r2, r3, #10
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	40012300 	.word	0x40012300
 800386c:	0f000001 	.word	0x0f000001

08003870 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a0:	4013      	ands	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b6:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	60d3      	str	r3, [r2, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <__NVIC_GetPriorityGrouping+0x18>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	f003 0307 	and.w	r3, r3, #7
}
 80038da:	4618      	mov	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db0b      	blt.n	8003912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4907      	ldr	r1, [pc, #28]	; (8003920 <__NVIC_EnableIRQ+0x38>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0307 	rsb	r3, r3, #7
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3304      	adds	r3, #4
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d902      	bls.n	80039a8 <NVIC_EncodePriority+0x30>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b03      	subs	r3, #3
 80039a6:	e000      	b.n	80039aa <NVIC_EncodePriority+0x32>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c0:	f04f 31ff 	mov.w	r1, #4294967295
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43d9      	mvns	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	4313      	orrs	r3, r2
         );
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ff4c 	bl	8003884 <__NVIC_SetPriorityGrouping>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a06:	f7ff ff61 	bl	80038cc <__NVIC_GetPriorityGrouping>
 8003a0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	6978      	ldr	r0, [r7, #20]
 8003a12:	f7ff ffb1 	bl	8003978 <NVIC_EncodePriority>
 8003a16:	4602      	mov	r2, r0
 8003a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff80 	bl	8003924 <__NVIC_SetPriority>
}
 8003a24:	bf00      	nop
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff54 	bl	80038e8 <__NVIC_EnableIRQ>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a56:	f7ff fa59 	bl	8002f0c <HAL_GetTick>
 8003a5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d008      	beq.n	8003a7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2280      	movs	r2, #128	; 0x80
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e052      	b.n	8003b20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0216 	bic.w	r2, r2, #22
 8003a88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_DMA_Abort+0x62>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0208 	bic.w	r2, r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aca:	e013      	b.n	8003af4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003acc:	f7ff fa1e 	bl	8002f0c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d90c      	bls.n	8003af4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2203      	movs	r2, #3
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e015      	b.n	8003b20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e4      	bne.n	8003acc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	223f      	movs	r2, #63	; 0x3f
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d004      	beq.n	8003b46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00c      	b.n	8003b60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2205      	movs	r2, #5
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b089      	sub	sp, #36	; 0x24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e159      	b.n	8003e3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b88:	2201      	movs	r2, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	f040 8148 	bne.w	8003e36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d005      	beq.n	8003bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d130      	bne.n	8003c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	2203      	movs	r2, #3
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 0201 	and.w	r2, r3, #1
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d017      	beq.n	8003c5c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d123      	bne.n	8003cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	08da      	lsrs	r2, r3, #3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3208      	adds	r2, #8
 8003c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	220f      	movs	r2, #15
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	08da      	lsrs	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3208      	adds	r2, #8
 8003caa:	69b9      	ldr	r1, [r7, #24]
 8003cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	2203      	movs	r2, #3
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0203 	and.w	r2, r3, #3
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a2 	beq.w	8003e36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	4b57      	ldr	r3, [pc, #348]	; (8003e54 <HAL_GPIO_Init+0x2e8>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	4a56      	ldr	r2, [pc, #344]	; (8003e54 <HAL_GPIO_Init+0x2e8>)
 8003cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d00:	6453      	str	r3, [r2, #68]	; 0x44
 8003d02:	4b54      	ldr	r3, [pc, #336]	; (8003e54 <HAL_GPIO_Init+0x2e8>)
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d0e:	4a52      	ldr	r2, [pc, #328]	; (8003e58 <HAL_GPIO_Init+0x2ec>)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	3302      	adds	r3, #2
 8003d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	220f      	movs	r2, #15
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a49      	ldr	r2, [pc, #292]	; (8003e5c <HAL_GPIO_Init+0x2f0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d019      	beq.n	8003d6e <HAL_GPIO_Init+0x202>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a48      	ldr	r2, [pc, #288]	; (8003e60 <HAL_GPIO_Init+0x2f4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_GPIO_Init+0x1fe>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a47      	ldr	r2, [pc, #284]	; (8003e64 <HAL_GPIO_Init+0x2f8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00d      	beq.n	8003d66 <HAL_GPIO_Init+0x1fa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a46      	ldr	r2, [pc, #280]	; (8003e68 <HAL_GPIO_Init+0x2fc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <HAL_GPIO_Init+0x1f6>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a45      	ldr	r2, [pc, #276]	; (8003e6c <HAL_GPIO_Init+0x300>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_GPIO_Init+0x1f2>
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	e008      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d5e:	2307      	movs	r3, #7
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d62:	2303      	movs	r3, #3
 8003d64:	e004      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	f002 0203 	and.w	r2, r2, #3
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	4093      	lsls	r3, r2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d80:	4935      	ldr	r1, [pc, #212]	; (8003e58 <HAL_GPIO_Init+0x2ec>)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d8e:	4b38      	ldr	r3, [pc, #224]	; (8003e70 <HAL_GPIO_Init+0x304>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db2:	4a2f      	ldr	r2, [pc, #188]	; (8003e70 <HAL_GPIO_Init+0x304>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003db8:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <HAL_GPIO_Init+0x304>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ddc:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <HAL_GPIO_Init+0x304>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <HAL_GPIO_Init+0x304>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e06:	4a1a      	ldr	r2, [pc, #104]	; (8003e70 <HAL_GPIO_Init+0x304>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <HAL_GPIO_Init+0x304>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e30:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <HAL_GPIO_Init+0x304>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	f67f aea2 	bls.w	8003b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020c00 	.word	0x40020c00
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40013c00 	.word	0x40013c00

08003e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
 8003e80:	4613      	mov	r3, r2
 8003e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e84:	787b      	ldrb	r3, [r7, #1]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e90:	e003      	b.n	8003e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	041a      	lsls	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	619a      	str	r2, [r3, #24]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e12b      	b.n	8004112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fe f81a 	bl	8001f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	; 0x24
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f001 f966 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8003f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4a81      	ldr	r2, [pc, #516]	; (800411c <HAL_I2C_Init+0x274>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d807      	bhi.n	8003f2c <HAL_I2C_Init+0x84>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a80      	ldr	r2, [pc, #512]	; (8004120 <HAL_I2C_Init+0x278>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	bf94      	ite	ls
 8003f24:	2301      	movls	r3, #1
 8003f26:	2300      	movhi	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e006      	b.n	8003f3a <HAL_I2C_Init+0x92>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a7d      	ldr	r2, [pc, #500]	; (8004124 <HAL_I2C_Init+0x27c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bf94      	ite	ls
 8003f34:	2301      	movls	r3, #1
 8003f36:	2300      	movhi	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0e7      	b.n	8004112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a78      	ldr	r2, [pc, #480]	; (8004128 <HAL_I2C_Init+0x280>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0c9b      	lsrs	r3, r3, #18
 8003f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4a6a      	ldr	r2, [pc, #424]	; (800411c <HAL_I2C_Init+0x274>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d802      	bhi.n	8003f7c <HAL_I2C_Init+0xd4>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	e009      	b.n	8003f90 <HAL_I2C_Init+0xe8>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	4a69      	ldr	r2, [pc, #420]	; (800412c <HAL_I2C_Init+0x284>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	3301      	adds	r3, #1
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	495c      	ldr	r1, [pc, #368]	; (800411c <HAL_I2C_Init+0x274>)
 8003fac:	428b      	cmp	r3, r1
 8003fae:	d819      	bhi.n	8003fe4 <HAL_I2C_Init+0x13c>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e59      	subs	r1, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fc4:	400b      	ands	r3, r1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_I2C_Init+0x138>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1e59      	subs	r1, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fde:	e051      	b.n	8004084 <HAL_I2C_Init+0x1dc>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	e04f      	b.n	8004084 <HAL_I2C_Init+0x1dc>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d111      	bne.n	8004010 <HAL_I2C_Init+0x168>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1e58      	subs	r0, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	440b      	add	r3, r1
 8003ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffe:	3301      	adds	r3, #1
 8004000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e012      	b.n	8004036 <HAL_I2C_Init+0x18e>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e58      	subs	r0, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	0099      	lsls	r1, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	fbb0 f3f3 	udiv	r3, r0, r3
 8004026:	3301      	adds	r3, #1
 8004028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_I2C_Init+0x196>
 800403a:	2301      	movs	r3, #1
 800403c:	e022      	b.n	8004084 <HAL_I2C_Init+0x1dc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10e      	bne.n	8004064 <HAL_I2C_Init+0x1bc>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1e58      	subs	r0, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	440b      	add	r3, r1
 8004054:	fbb0 f3f3 	udiv	r3, r0, r3
 8004058:	3301      	adds	r3, #1
 800405a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004062:	e00f      	b.n	8004084 <HAL_I2C_Init+0x1dc>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1e58      	subs	r0, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	0099      	lsls	r1, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	fbb0 f3f3 	udiv	r3, r0, r3
 800407a:	3301      	adds	r3, #1
 800407c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	6809      	ldr	r1, [r1, #0]
 8004088:	4313      	orrs	r3, r2
 800408a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6911      	ldr	r1, [r2, #16]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68d2      	ldr	r2, [r2, #12]
 80040be:	4311      	orrs	r1, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	000186a0 	.word	0x000186a0
 8004120:	001e847f 	.word	0x001e847f
 8004124:	003d08ff 	.word	0x003d08ff
 8004128:	431bde83 	.word	0x431bde83
 800412c:	10624dd3 	.word	0x10624dd3

08004130 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	460b      	mov	r3, r1
 800413e:	817b      	strh	r3, [r7, #10]
 8004140:	4613      	mov	r3, r2
 8004142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004144:	f7fe fee2 	bl	8002f0c <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b20      	cmp	r3, #32
 8004154:	f040 80e0 	bne.w	8004318 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2319      	movs	r3, #25
 800415e:	2201      	movs	r2, #1
 8004160:	4970      	ldr	r1, [pc, #448]	; (8004324 <HAL_I2C_Master_Transmit+0x1f4>)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fa92 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
 8004170:	e0d3      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_I2C_Master_Transmit+0x50>
 800417c:	2302      	movs	r3, #2
 800417e:	e0cc      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d007      	beq.n	80041a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2221      	movs	r2, #33	; 0x21
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2210      	movs	r2, #16
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	893a      	ldrh	r2, [r7, #8]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a50      	ldr	r2, [pc, #320]	; (8004328 <HAL_I2C_Master_Transmit+0x1f8>)
 80041e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f9ca 	bl	8004588 <I2C_MasterRequestWrite>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e08d      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004214:	e066      	b.n	80042e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	6a39      	ldr	r1, [r7, #32]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fb0c 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b04      	cmp	r3, #4
 800422c:	d107      	bne.n	800423e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06b      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b04      	cmp	r3, #4
 800427e:	d11b      	bne.n	80042b8 <HAL_I2C_Master_Transmit+0x188>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d017      	beq.n	80042b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	6a39      	ldr	r1, [r7, #32]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fafc 	bl	80048ba <I2C_WaitOnBTFFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d107      	bne.n	80042e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e01a      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d194      	bne.n	8004216 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e000      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
  }
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	00100002 	.word	0x00100002
 8004328:	ffff0000 	.word	0xffff0000

0800432c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	460b      	mov	r3, r1
 800433a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800433c:	f7fe fde6 	bl	8002f0c <HAL_GetTick>
 8004340:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004342:	2301      	movs	r3, #1
 8004344:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b20      	cmp	r3, #32
 8004350:	f040 8111 	bne.w	8004576 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2319      	movs	r3, #25
 800435a:	2201      	movs	r2, #1
 800435c:	4988      	ldr	r1, [pc, #544]	; (8004580 <HAL_I2C_IsDeviceReady+0x254>)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f994 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
 800436c:	e104      	b.n	8004578 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_I2C_IsDeviceReady+0x50>
 8004378:	2302      	movs	r3, #2
 800437a:	e0fd      	b.n	8004578 <HAL_I2C_IsDeviceReady+0x24c>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d007      	beq.n	80043a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2224      	movs	r2, #36	; 0x24
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a70      	ldr	r2, [pc, #448]	; (8004584 <HAL_I2C_IsDeviceReady+0x258>)
 80043c4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2200      	movs	r2, #0
 80043de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f952 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fc:	d103      	bne.n	8004406 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0b6      	b.n	8004578 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800440a:	897b      	ldrh	r3, [r7, #10]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004418:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800441a:	f7fe fd77 	bl	8002f0c <HAL_GetTick>
 800441e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800444e:	e025      	b.n	800449c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004450:	f7fe fd5c 	bl	8002f0c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d302      	bcc.n	8004466 <HAL_I2C_IsDeviceReady+0x13a>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	22a0      	movs	r2, #160	; 0xa0
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b02      	cmp	r3, #2
 800447a:	bf0c      	ite	eq
 800447c:	2301      	moveq	r3, #1
 800447e:	2300      	movne	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2ba0      	cmp	r3, #160	; 0xa0
 80044a6:	d005      	beq.n	80044b4 <HAL_I2C_IsDeviceReady+0x188>
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <HAL_I2C_IsDeviceReady+0x188>
 80044ae:	7dbb      	ldrb	r3, [r7, #22]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0cd      	beq.n	8004450 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d129      	bne.n	800451e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2319      	movs	r3, #25
 80044f6:	2201      	movs	r2, #1
 80044f8:	4921      	ldr	r1, [pc, #132]	; (8004580 <HAL_I2C_IsDeviceReady+0x254>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f8c6 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e036      	b.n	8004578 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e02c      	b.n	8004578 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004536:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2319      	movs	r3, #25
 800453e:	2201      	movs	r2, #1
 8004540:	490f      	ldr	r1, [pc, #60]	; (8004580 <HAL_I2C_IsDeviceReady+0x254>)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f8a2 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e012      	b.n	8004578 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	3301      	adds	r3, #1
 8004556:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	f4ff af32 	bcc.w	80043c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004576:	2302      	movs	r3, #2
  }
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	00100002 	.word	0x00100002
 8004584:	ffff0000 	.word	0xffff0000

08004588 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	460b      	mov	r3, r1
 8004596:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d006      	beq.n	80045b2 <I2C_MasterRequestWrite+0x2a>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d003      	beq.n	80045b2 <I2C_MasterRequestWrite+0x2a>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b0:	d108      	bne.n	80045c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e00b      	b.n	80045dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	2b12      	cmp	r3, #18
 80045ca:	d107      	bne.n	80045dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f84f 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004602:	d103      	bne.n	800460c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800460a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e035      	b.n	800467c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004618:	d108      	bne.n	800462c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800461a:	897b      	ldrh	r3, [r7, #10]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004628:	611a      	str	r2, [r3, #16]
 800462a:	e01b      	b.n	8004664 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800462c:	897b      	ldrh	r3, [r7, #10]
 800462e:	11db      	asrs	r3, r3, #7
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0306 	and.w	r3, r3, #6
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f063 030f 	orn	r3, r3, #15
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	490e      	ldr	r1, [pc, #56]	; (8004684 <I2C_MasterRequestWrite+0xfc>)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f875 	bl	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e010      	b.n	800467c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800465a:	897b      	ldrh	r3, [r7, #10]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4907      	ldr	r1, [pc, #28]	; (8004688 <I2C_MasterRequestWrite+0x100>)
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f865 	bl	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	00010008 	.word	0x00010008
 8004688:	00010002 	.word	0x00010002

0800468c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800469c:	e025      	b.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d021      	beq.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fe fc31 	bl	8002f0c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d116      	bne.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e023      	b.n	8004732 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	0c1b      	lsrs	r3, r3, #16
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10d      	bne.n	8004710 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	43da      	mvns	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4013      	ands	r3, r2
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	bf0c      	ite	eq
 8004706:	2301      	moveq	r3, #1
 8004708:	2300      	movne	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	e00c      	b.n	800472a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	43da      	mvns	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	429a      	cmp	r2, r3
 800472e:	d0b6      	beq.n	800469e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004748:	e051      	b.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004758:	d123      	bne.n	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004768:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004772:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f043 0204 	orr.w	r2, r3, #4
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e046      	b.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d021      	beq.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fe fbaf 	bl	8002f0c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d116      	bne.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e020      	b.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d10c      	bne.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	43da      	mvns	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4013      	ands	r3, r2
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e00b      	b.n	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d18d      	bne.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004844:	e02d      	b.n	80048a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f878 	bl	800493c <I2C_IsAcknowledgeFailed>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e02d      	b.n	80048b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d021      	beq.n	80048a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fe fb55 	bl	8002f0c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d116      	bne.n	80048a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e007      	b.n	80048b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b80      	cmp	r3, #128	; 0x80
 80048ae:	d1ca      	bne.n	8004846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048c6:	e02d      	b.n	8004924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f837 	bl	800493c <I2C_IsAcknowledgeFailed>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e02d      	b.n	8004934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d021      	beq.n	8004924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e0:	f7fe fb14 	bl	8002f0c <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d116      	bne.n	8004924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0220 	orr.w	r2, r3, #32
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e007      	b.n	8004934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b04      	cmp	r3, #4
 8004930:	d1ca      	bne.n	80048c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004952:	d11b      	bne.n	800498c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800495c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f043 0204 	orr.w	r2, r3, #4
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e264      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d075      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ba:	4ba3      	ldr	r3, [pc, #652]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d00c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049c6:	4ba0      	ldr	r3, [pc, #640]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d112      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d2:	4b9d      	ldr	r3, [pc, #628]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049de:	d10b      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	4b99      	ldr	r3, [pc, #612]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05b      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x108>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d157      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e23f      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_OscConfig+0x74>
 8004a02:	4b91      	ldr	r3, [pc, #580]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a90      	ldr	r2, [pc, #576]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e01d      	b.n	8004a4c <HAL_RCC_OscConfig+0xb0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x98>
 8004a1a:	4b8b      	ldr	r3, [pc, #556]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a8a      	ldr	r2, [pc, #552]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b88      	ldr	r3, [pc, #544]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a87      	ldr	r2, [pc, #540]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0xb0>
 8004a34:	4b84      	ldr	r3, [pc, #528]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a83      	ldr	r2, [pc, #524]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a80      	ldr	r2, [pc, #512]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe fa5a 	bl	8002f0c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fe fa56 	bl	8002f0c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e204      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b76      	ldr	r3, [pc, #472]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0xc0>
 8004a7a:	e014      	b.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fe fa46 	bl	8002f0c <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fe fa42 	bl	8002f0c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1f0      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a96:	4b6c      	ldr	r3, [pc, #432]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0xe8>
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d063      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ab2:	4b65      	ldr	r3, [pc, #404]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004abe:	4b62      	ldr	r3, [pc, #392]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d11c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aca:	4b5f      	ldr	r3, [pc, #380]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d116      	bne.n	8004b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	4b5c      	ldr	r3, [pc, #368]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_RCC_OscConfig+0x152>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d001      	beq.n	8004aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e1c4      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	4b56      	ldr	r3, [pc, #344]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4952      	ldr	r1, [pc, #328]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	e03a      	b.n	8004b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b0c:	4b4f      	ldr	r3, [pc, #316]	; (8004c4c <HAL_RCC_OscConfig+0x2b0>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fe f9fb 	bl	8002f0c <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fe f9f7 	bl	8002f0c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1a5      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2c:	4b46      	ldr	r3, [pc, #280]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4940      	ldr	r1, [pc, #256]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4e:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <HAL_RCC_OscConfig+0x2b0>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fe f9da 	bl	8002f0c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fe f9d6 	bl	8002f0c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e184      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d030      	beq.n	8004be8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b8e:	4b30      	ldr	r3, [pc, #192]	; (8004c50 <HAL_RCC_OscConfig+0x2b4>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fe f9ba 	bl	8002f0c <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b9c:	f7fe f9b6 	bl	8002f0c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e164      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bae:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x200>
 8004bba:	e015      	b.n	8004be8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bbc:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <HAL_RCC_OscConfig+0x2b4>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc2:	f7fe f9a3 	bl	8002f0c <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fe f99f 	bl	8002f0c <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e14d      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80a0 	beq.w	8004d36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_RCC_OscConfig+0x2b8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d121      	bne.n	8004c76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x2b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <HAL_RCC_OscConfig+0x2b8>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3e:	f7fe f965 	bl	8002f0c <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	e011      	b.n	8004c6a <HAL_RCC_OscConfig+0x2ce>
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	42470000 	.word	0x42470000
 8004c50:	42470e80 	.word	0x42470e80
 8004c54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c58:	f7fe f958 	bl	8002f0c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e106      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6a:	4b85      	ldr	r3, [pc, #532]	; (8004e80 <HAL_RCC_OscConfig+0x4e4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d106      	bne.n	8004c8c <HAL_RCC_OscConfig+0x2f0>
 8004c7e:	4b81      	ldr	r3, [pc, #516]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	4a80      	ldr	r2, [pc, #512]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8a:	e01c      	b.n	8004cc6 <HAL_RCC_OscConfig+0x32a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	d10c      	bne.n	8004cae <HAL_RCC_OscConfig+0x312>
 8004c94:	4b7b      	ldr	r3, [pc, #492]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	4a7a      	ldr	r2, [pc, #488]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004c9a:	f043 0304 	orr.w	r3, r3, #4
 8004c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca0:	4b78      	ldr	r3, [pc, #480]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a77      	ldr	r2, [pc, #476]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cac:	e00b      	b.n	8004cc6 <HAL_RCC_OscConfig+0x32a>
 8004cae:	4b75      	ldr	r3, [pc, #468]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb2:	4a74      	ldr	r2, [pc, #464]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cba:	4b72      	ldr	r3, [pc, #456]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	4a71      	ldr	r2, [pc, #452]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004cc0:	f023 0304 	bic.w	r3, r3, #4
 8004cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d015      	beq.n	8004cfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fe f91d 	bl	8002f0c <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd6:	f7fe f919 	bl	8002f0c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0c5      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	4b65      	ldr	r3, [pc, #404]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ee      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x33a>
 8004cf8:	e014      	b.n	8004d24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfa:	f7fe f907 	bl	8002f0c <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d00:	e00a      	b.n	8004d18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fe f903 	bl	8002f0c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e0af      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d18:	4b5a      	ldr	r3, [pc, #360]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ee      	bne.n	8004d02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2a:	4b56      	ldr	r3, [pc, #344]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a55      	ldr	r2, [pc, #340]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 809b 	beq.w	8004e76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d40:	4b50      	ldr	r3, [pc, #320]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d05c      	beq.n	8004e06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d141      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4b4c      	ldr	r3, [pc, #304]	; (8004e88 <HAL_RCC_OscConfig+0x4ec>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fe f8d7 	bl	8002f0c <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d62:	f7fe f8d3 	bl	8002f0c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e081      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d74:	4b43      	ldr	r3, [pc, #268]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	019b      	lsls	r3, r3, #6
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	061b      	lsls	r3, r3, #24
 8004da4:	4937      	ldr	r1, [pc, #220]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004daa:	4b37      	ldr	r3, [pc, #220]	; (8004e88 <HAL_RCC_OscConfig+0x4ec>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fe f8ac 	bl	8002f0c <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fe f8a8 	bl	8002f0c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e056      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x41c>
 8004dd6:	e04e      	b.n	8004e76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <HAL_RCC_OscConfig+0x4ec>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fe f895 	bl	8002f0c <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fe f891 	bl	8002f0c <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e03f      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df8:	4b22      	ldr	r3, [pc, #136]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f0      	bne.n	8004de6 <HAL_RCC_OscConfig+0x44a>
 8004e04:	e037      	b.n	8004e76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e032      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <HAL_RCC_OscConfig+0x4e8>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d028      	beq.n	8004e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d121      	bne.n	8004e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d11a      	bne.n	8004e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e42:	4013      	ands	r3, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d111      	bne.n	8004e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d001      	beq.n	8004e76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40007000 	.word	0x40007000
 8004e84:	40023800 	.word	0x40023800
 8004e88:	42470060 	.word	0x42470060

08004e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0cc      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b68      	ldr	r3, [pc, #416]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d90c      	bls.n	8004ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b65      	ldr	r3, [pc, #404]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b63      	ldr	r3, [pc, #396]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0b8      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d020      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ee0:	4b59      	ldr	r3, [pc, #356]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4a58      	ldr	r2, [pc, #352]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef8:	4b53      	ldr	r3, [pc, #332]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a52      	ldr	r2, [pc, #328]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f04:	4b50      	ldr	r3, [pc, #320]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	494d      	ldr	r1, [pc, #308]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d044      	beq.n	8004fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d107      	bne.n	8004f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	4b47      	ldr	r3, [pc, #284]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d119      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e07f      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d003      	beq.n	8004f4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4a:	4b3f      	ldr	r3, [pc, #252]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e06f      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5a:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e067      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f6a:	4b37      	ldr	r3, [pc, #220]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f023 0203 	bic.w	r2, r3, #3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4934      	ldr	r1, [pc, #208]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f7c:	f7fd ffc6 	bl	8002f0c <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f84:	f7fd ffc2 	bl	8002f0c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e04f      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	4b2b      	ldr	r3, [pc, #172]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 020c 	and.w	r2, r3, #12
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1eb      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fac:	4b25      	ldr	r3, [pc, #148]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d20c      	bcs.n	8004fd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fba:	4b22      	ldr	r3, [pc, #136]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc2:	4b20      	ldr	r3, [pc, #128]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e032      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4916      	ldr	r1, [pc, #88]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	490e      	ldr	r1, [pc, #56]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005012:	f000 f821 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8005016:	4602      	mov	r2, r0
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	091b      	lsrs	r3, r3, #4
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	490a      	ldr	r1, [pc, #40]	; (800504c <HAL_RCC_ClockConfig+0x1c0>)
 8005024:	5ccb      	ldrb	r3, [r1, r3]
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	4a09      	ldr	r2, [pc, #36]	; (8005050 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <HAL_RCC_ClockConfig+0x1c8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd fd26 	bl	8002a84 <HAL_InitTick>

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40023c00 	.word	0x40023c00
 8005048:	40023800 	.word	0x40023800
 800504c:	08013840 	.word	0x08013840
 8005050:	20000010 	.word	0x20000010
 8005054:	20000014 	.word	0x20000014

08005058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005058:	b5b0      	push	{r4, r5, r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800505e:	2100      	movs	r1, #0
 8005060:	6079      	str	r1, [r7, #4]
 8005062:	2100      	movs	r1, #0
 8005064:	60f9      	str	r1, [r7, #12]
 8005066:	2100      	movs	r1, #0
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800506a:	2100      	movs	r1, #0
 800506c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800506e:	4952      	ldr	r1, [pc, #328]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005070:	6889      	ldr	r1, [r1, #8]
 8005072:	f001 010c 	and.w	r1, r1, #12
 8005076:	2908      	cmp	r1, #8
 8005078:	d00d      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0x3e>
 800507a:	2908      	cmp	r1, #8
 800507c:	f200 8094 	bhi.w	80051a8 <HAL_RCC_GetSysClockFreq+0x150>
 8005080:	2900      	cmp	r1, #0
 8005082:	d002      	beq.n	800508a <HAL_RCC_GetSysClockFreq+0x32>
 8005084:	2904      	cmp	r1, #4
 8005086:	d003      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x38>
 8005088:	e08e      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800508a:	4b4c      	ldr	r3, [pc, #304]	; (80051bc <HAL_RCC_GetSysClockFreq+0x164>)
 800508c:	60bb      	str	r3, [r7, #8]
       break;
 800508e:	e08e      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005090:	4b4b      	ldr	r3, [pc, #300]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005092:	60bb      	str	r3, [r7, #8]
      break;
 8005094:	e08b      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005096:	4948      	ldr	r1, [pc, #288]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005098:	6849      	ldr	r1, [r1, #4]
 800509a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800509e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050a0:	4945      	ldr	r1, [pc, #276]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80050a2:	6849      	ldr	r1, [r1, #4]
 80050a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d024      	beq.n	80050f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ac:	4942      	ldr	r1, [pc, #264]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80050ae:	6849      	ldr	r1, [r1, #4]
 80050b0:	0989      	lsrs	r1, r1, #6
 80050b2:	4608      	mov	r0, r1
 80050b4:	f04f 0100 	mov.w	r1, #0
 80050b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80050bc:	f04f 0500 	mov.w	r5, #0
 80050c0:	ea00 0204 	and.w	r2, r0, r4
 80050c4:	ea01 0305 	and.w	r3, r1, r5
 80050c8:	493d      	ldr	r1, [pc, #244]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80050ca:	fb01 f003 	mul.w	r0, r1, r3
 80050ce:	2100      	movs	r1, #0
 80050d0:	fb01 f102 	mul.w	r1, r1, r2
 80050d4:	1844      	adds	r4, r0, r1
 80050d6:	493a      	ldr	r1, [pc, #232]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80050d8:	fba2 0101 	umull	r0, r1, r2, r1
 80050dc:	1863      	adds	r3, r4, r1
 80050de:	4619      	mov	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	f7fb fdd6 	bl	8000c98 <__aeabi_uldivmod>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4613      	mov	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e04a      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f6:	4b30      	ldr	r3, [pc, #192]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	099b      	lsrs	r3, r3, #6
 80050fc:	461a      	mov	r2, r3
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005106:	f04f 0100 	mov.w	r1, #0
 800510a:	ea02 0400 	and.w	r4, r2, r0
 800510e:	ea03 0501 	and.w	r5, r3, r1
 8005112:	4620      	mov	r0, r4
 8005114:	4629      	mov	r1, r5
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	014b      	lsls	r3, r1, #5
 8005120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005124:	0142      	lsls	r2, r0, #5
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	1b00      	subs	r0, r0, r4
 800512c:	eb61 0105 	sbc.w	r1, r1, r5
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	018b      	lsls	r3, r1, #6
 800513a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800513e:	0182      	lsls	r2, r0, #6
 8005140:	1a12      	subs	r2, r2, r0
 8005142:	eb63 0301 	sbc.w	r3, r3, r1
 8005146:	f04f 0000 	mov.w	r0, #0
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	00d9      	lsls	r1, r3, #3
 8005150:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005154:	00d0      	lsls	r0, r2, #3
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	1912      	adds	r2, r2, r4
 800515c:	eb45 0303 	adc.w	r3, r5, r3
 8005160:	f04f 0000 	mov.w	r0, #0
 8005164:	f04f 0100 	mov.w	r1, #0
 8005168:	0299      	lsls	r1, r3, #10
 800516a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800516e:	0290      	lsls	r0, r2, #10
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	461a      	mov	r2, r3
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	f7fb fd8a 	bl	8000c98 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4613      	mov	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	0c1b      	lsrs	r3, r3, #16
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	3301      	adds	r3, #1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	60bb      	str	r3, [r7, #8]
      break;
 80051a6:	e002      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <HAL_RCC_GetSysClockFreq+0x164>)
 80051aa:	60bb      	str	r3, [r7, #8]
      break;
 80051ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ae:	68bb      	ldr	r3, [r7, #8]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bdb0      	pop	{r4, r5, r7, pc}
 80051b8:	40023800 	.word	0x40023800
 80051bc:	00f42400 	.word	0x00f42400
 80051c0:	017d7840 	.word	0x017d7840

080051c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000010 	.word	0x20000010

080051dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051e0:	f7ff fff0 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b05      	ldr	r3, [pc, #20]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	0a9b      	lsrs	r3, r3, #10
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	4903      	ldr	r1, [pc, #12]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40023800 	.word	0x40023800
 8005200:	08013850 	.word	0x08013850

08005204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005208:	f7ff ffdc 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 800520c:	4602      	mov	r2, r0
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	0b5b      	lsrs	r3, r3, #13
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	4903      	ldr	r1, [pc, #12]	; (8005228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800521a:	5ccb      	ldrb	r3, [r1, r3]
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40023800 	.word	0x40023800
 8005228:	08013850 	.word	0x08013850

0800522c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	220f      	movs	r2, #15
 800523a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <HAL_RCC_GetClockConfig+0x5c>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0203 	and.w	r2, r3, #3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005248:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <HAL_RCC_GetClockConfig+0x5c>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <HAL_RCC_GetClockConfig+0x5c>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <HAL_RCC_GetClockConfig+0x5c>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	08db      	lsrs	r3, r3, #3
 8005266:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800526e:	4b07      	ldr	r3, [pc, #28]	; (800528c <HAL_RCC_GetClockConfig+0x60>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0207 	and.w	r2, r3, #7
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	601a      	str	r2, [r3, #0]
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40023800 	.word	0x40023800
 800528c:	40023c00 	.word	0x40023c00

08005290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e07b      	b.n	800539a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d108      	bne.n	80052bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b2:	d009      	beq.n	80052c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	61da      	str	r2, [r3, #28]
 80052ba:	e005      	b.n	80052c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fd f8b0 	bl	8002448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	ea42 0103 	orr.w	r1, r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	f003 0104 	and.w	r1, r3, #4
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f003 0210 	and.w	r2, r3, #16
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b08c      	sub	sp, #48	; 0x30
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053b0:	2301      	movs	r3, #1
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x26>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e18a      	b.n	80056de <HAL_SPI_TransmitReceive+0x33c>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053d0:	f7fd fd9c 	bl	8002f0c <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053e6:	887b      	ldrh	r3, [r7, #2]
 80053e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d00f      	beq.n	8005412 <HAL_SPI_TransmitReceive+0x70>
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f8:	d107      	bne.n	800540a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <HAL_SPI_TransmitReceive+0x68>
 8005402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005406:	2b04      	cmp	r3, #4
 8005408:	d003      	beq.n	8005412 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800540a:	2302      	movs	r3, #2
 800540c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005410:	e15b      	b.n	80056ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x82>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x82>
 800541e:	887b      	ldrh	r3, [r7, #2]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d103      	bne.n	800542c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800542a:	e14e      	b.n	80056ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b04      	cmp	r3, #4
 8005436:	d003      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2205      	movs	r2, #5
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	887a      	ldrh	r2, [r7, #2]
 8005450:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	887a      	ldrh	r2, [r7, #2]
 8005456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	887a      	ldrh	r2, [r7, #2]
 8005462:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	887a      	ldrh	r2, [r7, #2]
 8005468:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	d007      	beq.n	8005494 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549c:	d178      	bne.n	8005590 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_SPI_TransmitReceive+0x10a>
 80054a6:	8b7b      	ldrh	r3, [r7, #26]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d166      	bne.n	800557a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	881a      	ldrh	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	1c9a      	adds	r2, r3, #2
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054d0:	e053      	b.n	800557a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d11b      	bne.n	8005518 <HAL_SPI_TransmitReceive+0x176>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d016      	beq.n	8005518 <HAL_SPI_TransmitReceive+0x176>
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d113      	bne.n	8005518 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	881a      	ldrh	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	1c9a      	adds	r2, r3, #2
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b01      	cmp	r3, #1
 8005524:	d119      	bne.n	800555a <HAL_SPI_TransmitReceive+0x1b8>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d014      	beq.n	800555a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	b292      	uxth	r2, r2
 800553c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	1c9a      	adds	r2, r3, #2
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005556:	2301      	movs	r3, #1
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800555a:	f7fd fcd7 	bl	8002f0c <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005566:	429a      	cmp	r2, r3
 8005568:	d807      	bhi.n	800557a <HAL_SPI_TransmitReceive+0x1d8>
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d003      	beq.n	800557a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005578:	e0a7      	b.n	80056ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1a6      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x130>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1a1      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x130>
 800558e:	e07c      	b.n	800568a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_SPI_TransmitReceive+0x1fc>
 8005598:	8b7b      	ldrh	r3, [r7, #26]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d16b      	bne.n	8005676 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055c4:	e057      	b.n	8005676 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d11c      	bne.n	800560e <HAL_SPI_TransmitReceive+0x26c>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <HAL_SPI_TransmitReceive+0x26c>
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d114      	bne.n	800560e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	7812      	ldrb	r2, [r2, #0]
 80055f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d119      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x2ae>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d014      	beq.n	8005650 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800564c:	2301      	movs	r3, #1
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005650:	f7fd fc5c 	bl	8002f0c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565c:	429a      	cmp	r2, r3
 800565e:	d803      	bhi.n	8005668 <HAL_SPI_TransmitReceive+0x2c6>
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d102      	bne.n	800566e <HAL_SPI_TransmitReceive+0x2cc>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005674:	e029      	b.n	80056ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1a2      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x224>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d19d      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800568a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f8b2 	bl	80057f8 <SPI_EndRxTxTransaction>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d006      	beq.n	80056a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80056a6:	e010      	b.n	80056ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	e000      	b.n	80056ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3730      	adds	r7, #48	; 0x30
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056f8:	f7fd fc08 	bl	8002f0c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	4413      	add	r3, r2
 8005706:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005708:	f7fd fc00 	bl	8002f0c <HAL_GetTick>
 800570c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800570e:	4b39      	ldr	r3, [pc, #228]	; (80057f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	015b      	lsls	r3, r3, #5
 8005714:	0d1b      	lsrs	r3, r3, #20
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	fb02 f303 	mul.w	r3, r2, r3
 800571c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800571e:	e054      	b.n	80057ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005726:	d050      	beq.n	80057ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005728:	f7fd fbf0 	bl	8002f0c <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	429a      	cmp	r2, r3
 8005736:	d902      	bls.n	800573e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d13d      	bne.n	80057ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800574c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005756:	d111      	bne.n	800577c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005760:	d004      	beq.n	800576c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576a:	d107      	bne.n	800577c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800577a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005784:	d10f      	bne.n	80057a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e017      	b.n	80057ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4013      	ands	r3, r2
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	bf0c      	ite	eq
 80057da:	2301      	moveq	r3, #1
 80057dc:	2300      	movne	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d19b      	bne.n	8005720 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3720      	adds	r7, #32
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000010 	.word	0x20000010

080057f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005804:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <SPI_EndRxTxTransaction+0x7c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <SPI_EndRxTxTransaction+0x80>)
 800580a:	fba2 2303 	umull	r2, r3, r2, r3
 800580e:	0d5b      	lsrs	r3, r3, #21
 8005810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005822:	d112      	bne.n	800584a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	2180      	movs	r1, #128	; 0x80
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7ff ff5a 	bl	80056e8 <SPI_WaitFlagStateUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e00f      	b.n	800586a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	3b01      	subs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b80      	cmp	r3, #128	; 0x80
 8005862:	d0f2      	beq.n	800584a <SPI_EndRxTxTransaction+0x52>
 8005864:	e000      	b.n	8005868 <SPI_EndRxTxTransaction+0x70>
        break;
 8005866:	bf00      	nop
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000010 	.word	0x20000010
 8005878:	165e9f81 	.word	0x165e9f81

0800587c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e041      	b.n	8005912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f839 	bl	800591a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f000 f9ca 	bl	8005c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d001      	beq.n	8005948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e044      	b.n	80059d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1e      	ldr	r2, [pc, #120]	; (80059e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d018      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d013      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00e      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a17      	ldr	r2, [pc, #92]	; (80059ec <HAL_TIM_Base_Start_IT+0xbc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d111      	bne.n	80059c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	d010      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0201 	orr.w	r2, r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059be:	e007      	b.n	80059d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40000400 	.word	0x40000400
 80059e8:	40000800 	.word	0x40000800
 80059ec:	40000c00 	.word	0x40000c00
 80059f0:	40014000 	.word	0x40014000

080059f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d122      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d11b      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0202 	mvn.w	r2, #2
 8005a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f8ee 	bl	8005c18 <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8e0 	bl	8005c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8f1 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d122      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d11b      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0204 	mvn.w	r2, #4
 8005a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8c4 	bl	8005c18 <HAL_TIM_IC_CaptureCallback>
 8005a90:	e005      	b.n	8005a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8b6 	bl	8005c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f8c7 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d122      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d11b      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0208 	mvn.w	r2, #8
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2204      	movs	r2, #4
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f89a 	bl	8005c18 <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f88c 	bl	8005c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f89d 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b10      	cmp	r3, #16
 8005b04:	d122      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d11b      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0210 	mvn.w	r2, #16
 8005b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2208      	movs	r2, #8
 8005b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f870 	bl	8005c18 <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f862 	bl	8005c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f873 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d10e      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d107      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0201 	mvn.w	r2, #1
 8005b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fc fb00 	bl	8002178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	d10e      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b90:	2b80      	cmp	r3, #128	; 0x80
 8005b92:	d107      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f8e2 	bl	8005d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b40      	cmp	r3, #64	; 0x40
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	d107      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f838 	bl	8005c40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d10e      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d107      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0220 	mvn.w	r2, #32
 8005bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f8ac 	bl	8005d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a34      	ldr	r2, [pc, #208]	; (8005d38 <TIM_Base_SetConfig+0xe4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00f      	beq.n	8005c8c <TIM_Base_SetConfig+0x38>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c72:	d00b      	beq.n	8005c8c <TIM_Base_SetConfig+0x38>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a31      	ldr	r2, [pc, #196]	; (8005d3c <TIM_Base_SetConfig+0xe8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <TIM_Base_SetConfig+0x38>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a30      	ldr	r2, [pc, #192]	; (8005d40 <TIM_Base_SetConfig+0xec>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_Base_SetConfig+0x38>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a2f      	ldr	r2, [pc, #188]	; (8005d44 <TIM_Base_SetConfig+0xf0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d108      	bne.n	8005c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a25      	ldr	r2, [pc, #148]	; (8005d38 <TIM_Base_SetConfig+0xe4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01b      	beq.n	8005cde <TIM_Base_SetConfig+0x8a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d017      	beq.n	8005cde <TIM_Base_SetConfig+0x8a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a22      	ldr	r2, [pc, #136]	; (8005d3c <TIM_Base_SetConfig+0xe8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <TIM_Base_SetConfig+0x8a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a21      	ldr	r2, [pc, #132]	; (8005d40 <TIM_Base_SetConfig+0xec>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00f      	beq.n	8005cde <TIM_Base_SetConfig+0x8a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a20      	ldr	r2, [pc, #128]	; (8005d44 <TIM_Base_SetConfig+0xf0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <TIM_Base_SetConfig+0x8a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <TIM_Base_SetConfig+0xf4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d007      	beq.n	8005cde <TIM_Base_SetConfig+0x8a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1e      	ldr	r2, [pc, #120]	; (8005d4c <TIM_Base_SetConfig+0xf8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_Base_SetConfig+0x8a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a1d      	ldr	r2, [pc, #116]	; (8005d50 <TIM_Base_SetConfig+0xfc>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d108      	bne.n	8005cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <TIM_Base_SetConfig+0xe4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d103      	bne.n	8005d24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	615a      	str	r2, [r3, #20]
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e03f      	b.n	8005e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fd f80a 	bl	8002dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2224      	movs	r2, #36	; 0x24
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fb9f 	bl	8006504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695a      	ldr	r2, [r3, #20]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d11d      	bne.n	8005e6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_UART_Receive_IT+0x26>
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e016      	b.n	8005e6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Receive_IT+0x38>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e00f      	b.n	8005e6e <HAL_UART_Receive_IT+0x58>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005e5c:	88fb      	ldrh	r3, [r7, #6]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	68b9      	ldr	r1, [r7, #8]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 f9d4 	bl	8006210 <UART_Start_Receive_IT>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	e000      	b.n	8005e6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
  }
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_UART_IRQHandler+0x52>
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa87 	bl	80063d6 <UART_Receive_IT>
      return;
 8005ec8:	e17c      	b.n	80061c4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80b1 	beq.w	8006034 <HAL_UART_IRQHandler+0x1bc>
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d105      	bne.n	8005ee8 <HAL_UART_IRQHandler+0x70>
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a6 	beq.w	8006034 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <HAL_UART_IRQHandler+0x90>
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	f043 0201 	orr.w	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_UART_IRQHandler+0xb0>
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	f043 0202 	orr.w	r2, r3, #2
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_UART_IRQHandler+0xd0>
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f043 0204 	orr.w	r2, r3, #4
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00f      	beq.n	8005f72 <HAL_UART_IRQHandler+0xfa>
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <HAL_UART_IRQHandler+0xee>
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f043 0208 	orr.w	r2, r3, #8
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 811f 	beq.w	80061ba <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d007      	beq.n	8005f96 <HAL_UART_IRQHandler+0x11e>
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fa20 	bl	80063d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b40      	cmp	r3, #64	; 0x40
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <HAL_UART_IRQHandler+0x146>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d031      	beq.n	8006022 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f960 	bl	8006284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	d123      	bne.n	800601a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d013      	beq.n	8006012 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	4a77      	ldr	r2, [pc, #476]	; (80061cc <HAL_UART_IRQHandler+0x354>)
 8005ff0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fd fd96 	bl	8003b28 <HAL_DMA_Abort_IT>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e00e      	b.n	8006030 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8e6 	bl	80061e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	e00a      	b.n	8006030 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8e2 	bl	80061e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	e006      	b.n	8006030 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f8de 	bl	80061e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800602e:	e0c4      	b.n	80061ba <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	bf00      	nop
    return;
 8006032:	e0c2      	b.n	80061ba <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	2b01      	cmp	r3, #1
 800603a:	f040 80a2 	bne.w	8006182 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 809c 	beq.w	8006182 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8096 	beq.w	8006182 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d14f      	bne.n	800611a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006084:	8a3b      	ldrh	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8099 	beq.w	80061be <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006090:	8a3a      	ldrh	r2, [r7, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	f080 8093 	bcs.w	80061be <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8a3a      	ldrh	r2, [r7, #16]
 800609c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d02b      	beq.n	8006102 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060b8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0210 	bic.w	r2, r2, #16
 80060f6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fd fca3 	bl	8003a48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800610a:	b29b      	uxth	r3, r3
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	b29b      	uxth	r3, r3
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f870 	bl	80061f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006118:	e051      	b.n	80061be <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006122:	b29b      	uxth	r3, r3
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d047      	beq.n	80061c2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006132:	8a7b      	ldrh	r3, [r7, #18]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d044      	beq.n	80061c2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006146:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0210 	bic.w	r2, r2, #16
 8006174:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006176:	8a7b      	ldrh	r3, [r7, #18]
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f83c 	bl	80061f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006180:	e01f      	b.n	80061c2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_UART_IRQHandler+0x326>
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8b5 	bl	8006306 <UART_Transmit_IT>
    return;
 800619c:	e012      	b.n	80061c4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <HAL_UART_IRQHandler+0x34c>
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d008      	beq.n	80061c4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f8f7 	bl	80063a6 <UART_EndTransmit_IT>
    return;
 80061b8:	e004      	b.n	80061c4 <HAL_UART_IRQHandler+0x34c>
    return;
 80061ba:	bf00      	nop
 80061bc:	e002      	b.n	80061c4 <HAL_UART_IRQHandler+0x34c>
      return;
 80061be:	bf00      	nop
 80061c0:	e000      	b.n	80061c4 <HAL_UART_IRQHandler+0x34c>
      return;
 80061c2:	bf00      	nop
  }
}
 80061c4:	3728      	adds	r7, #40	; 0x28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	080062df 	.word	0x080062df

080061d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2222      	movs	r2, #34	; 0x22
 800623a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006254:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0201 	orr.w	r2, r2, #1
 8006264:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0220 	orr.w	r2, r2, #32
 8006274:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800629a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d107      	bne.n	80062c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0210 	bic.w	r2, r2, #16
 80062c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff73 	bl	80061e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b21      	cmp	r3, #33	; 0x21
 8006318:	d13e      	bne.n	8006398 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006322:	d114      	bne.n	800634e <UART_Transmit_IT+0x48>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d110      	bne.n	800634e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006340:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	621a      	str	r2, [r3, #32]
 800634c:	e008      	b.n	8006360 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	1c59      	adds	r1, r3, #1
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6211      	str	r1, [r2, #32]
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4619      	mov	r1, r3
 800636e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10f      	bne.n	8006394 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006382:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006392:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006398:	2302      	movs	r3, #2
  }
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff ff02 	bl	80061d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b22      	cmp	r3, #34	; 0x22
 80063e8:	f040 8087 	bne.w	80064fa <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f4:	d117      	bne.n	8006426 <UART_Receive_IT+0x50>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d113      	bne.n	8006426 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	b29b      	uxth	r3, r3
 8006410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006414:	b29a      	uxth	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	1c9a      	adds	r2, r3, #2
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	629a      	str	r2, [r3, #40]	; 0x28
 8006424:	e026      	b.n	8006474 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006438:	d007      	beq.n	800644a <UART_Receive_IT+0x74>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <UART_Receive_IT+0x82>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	e008      	b.n	800646a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006464:	b2da      	uxtb	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29b      	uxth	r3, r3
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	4619      	mov	r1, r3
 8006482:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006484:	2b00      	cmp	r3, #0
 8006486:	d136      	bne.n	80064f6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0220 	bic.w	r2, r2, #32
 8006496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695a      	ldr	r2, [r3, #20]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10e      	bne.n	80064e6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0210 	bic.w	r2, r2, #16
 80064d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fe8a 	bl	80061f8 <HAL_UARTEx_RxEventCallback>
 80064e4:	e002      	b.n	80064ec <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fc fb5c 	bl	8002ba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e002      	b.n	80064fc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
  }
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	b09f      	sub	sp, #124	; 0x7c
 800650a:	af00      	add	r7, sp, #0
 800650c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800650e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651a:	68d9      	ldr	r1, [r3, #12]
 800651c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	ea40 0301 	orr.w	r3, r0, r1
 8006524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	431a      	orrs	r2, r3
 8006530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	431a      	orrs	r2, r3
 8006536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	4313      	orrs	r3, r2
 800653c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800653e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006548:	f021 010c 	bic.w	r1, r1, #12
 800654c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006552:	430b      	orrs	r3, r1
 8006554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006562:	6999      	ldr	r1, [r3, #24]
 8006564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	ea40 0301 	orr.w	r3, r0, r1
 800656c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800656e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4bc5      	ldr	r3, [pc, #788]	; (8006888 <UART_SetConfig+0x384>)
 8006574:	429a      	cmp	r2, r3
 8006576:	d004      	beq.n	8006582 <UART_SetConfig+0x7e>
 8006578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	4bc3      	ldr	r3, [pc, #780]	; (800688c <UART_SetConfig+0x388>)
 800657e:	429a      	cmp	r2, r3
 8006580:	d103      	bne.n	800658a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006582:	f7fe fe3f 	bl	8005204 <HAL_RCC_GetPCLK2Freq>
 8006586:	6778      	str	r0, [r7, #116]	; 0x74
 8006588:	e002      	b.n	8006590 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800658a:	f7fe fe27 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 800658e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006598:	f040 80b6 	bne.w	8006708 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800659c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800659e:	461c      	mov	r4, r3
 80065a0:	f04f 0500 	mov.w	r5, #0
 80065a4:	4622      	mov	r2, r4
 80065a6:	462b      	mov	r3, r5
 80065a8:	1891      	adds	r1, r2, r2
 80065aa:	6439      	str	r1, [r7, #64]	; 0x40
 80065ac:	415b      	adcs	r3, r3
 80065ae:	647b      	str	r3, [r7, #68]	; 0x44
 80065b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065b4:	1912      	adds	r2, r2, r4
 80065b6:	eb45 0303 	adc.w	r3, r5, r3
 80065ba:	f04f 0000 	mov.w	r0, #0
 80065be:	f04f 0100 	mov.w	r1, #0
 80065c2:	00d9      	lsls	r1, r3, #3
 80065c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065c8:	00d0      	lsls	r0, r2, #3
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	1911      	adds	r1, r2, r4
 80065d0:	6639      	str	r1, [r7, #96]	; 0x60
 80065d2:	416b      	adcs	r3, r5
 80065d4:	667b      	str	r3, [r7, #100]	; 0x64
 80065d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	461a      	mov	r2, r3
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	1891      	adds	r1, r2, r2
 80065e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80065e4:	415b      	adcs	r3, r3
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80065f0:	f7fa fb52 	bl	8000c98 <__aeabi_uldivmod>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4ba5      	ldr	r3, [pc, #660]	; (8006890 <UART_SetConfig+0x38c>)
 80065fa:	fba3 2302 	umull	r2, r3, r3, r2
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	011e      	lsls	r6, r3, #4
 8006602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006604:	461c      	mov	r4, r3
 8006606:	f04f 0500 	mov.w	r5, #0
 800660a:	4622      	mov	r2, r4
 800660c:	462b      	mov	r3, r5
 800660e:	1891      	adds	r1, r2, r2
 8006610:	6339      	str	r1, [r7, #48]	; 0x30
 8006612:	415b      	adcs	r3, r3
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
 8006616:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800661a:	1912      	adds	r2, r2, r4
 800661c:	eb45 0303 	adc.w	r3, r5, r3
 8006620:	f04f 0000 	mov.w	r0, #0
 8006624:	f04f 0100 	mov.w	r1, #0
 8006628:	00d9      	lsls	r1, r3, #3
 800662a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800662e:	00d0      	lsls	r0, r2, #3
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	1911      	adds	r1, r2, r4
 8006636:	65b9      	str	r1, [r7, #88]	; 0x58
 8006638:	416b      	adcs	r3, r5
 800663a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800663c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	461a      	mov	r2, r3
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	1891      	adds	r1, r2, r2
 8006648:	62b9      	str	r1, [r7, #40]	; 0x28
 800664a:	415b      	adcs	r3, r3
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800664e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006652:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006656:	f7fa fb1f 	bl	8000c98 <__aeabi_uldivmod>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4b8c      	ldr	r3, [pc, #560]	; (8006890 <UART_SetConfig+0x38c>)
 8006660:	fba3 1302 	umull	r1, r3, r3, r2
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	2164      	movs	r1, #100	; 0x64
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	3332      	adds	r3, #50	; 0x32
 8006672:	4a87      	ldr	r2, [pc, #540]	; (8006890 <UART_SetConfig+0x38c>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006680:	441e      	add	r6, r3
 8006682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006684:	4618      	mov	r0, r3
 8006686:	f04f 0100 	mov.w	r1, #0
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	1894      	adds	r4, r2, r2
 8006690:	623c      	str	r4, [r7, #32]
 8006692:	415b      	adcs	r3, r3
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
 8006696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800669a:	1812      	adds	r2, r2, r0
 800669c:	eb41 0303 	adc.w	r3, r1, r3
 80066a0:	f04f 0400 	mov.w	r4, #0
 80066a4:	f04f 0500 	mov.w	r5, #0
 80066a8:	00dd      	lsls	r5, r3, #3
 80066aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066ae:	00d4      	lsls	r4, r2, #3
 80066b0:	4622      	mov	r2, r4
 80066b2:	462b      	mov	r3, r5
 80066b4:	1814      	adds	r4, r2, r0
 80066b6:	653c      	str	r4, [r7, #80]	; 0x50
 80066b8:	414b      	adcs	r3, r1
 80066ba:	657b      	str	r3, [r7, #84]	; 0x54
 80066bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	461a      	mov	r2, r3
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	1891      	adds	r1, r2, r2
 80066c8:	61b9      	str	r1, [r7, #24]
 80066ca:	415b      	adcs	r3, r3
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066d6:	f7fa fadf 	bl	8000c98 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4b6c      	ldr	r3, [pc, #432]	; (8006890 <UART_SetConfig+0x38c>)
 80066e0:	fba3 1302 	umull	r1, r3, r3, r2
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	2164      	movs	r1, #100	; 0x64
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	3332      	adds	r3, #50	; 0x32
 80066f2:	4a67      	ldr	r2, [pc, #412]	; (8006890 <UART_SetConfig+0x38c>)
 80066f4:	fba2 2303 	umull	r2, r3, r2, r3
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f003 0207 	and.w	r2, r3, #7
 80066fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4432      	add	r2, r6
 8006704:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006706:	e0b9      	b.n	800687c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670a:	461c      	mov	r4, r3
 800670c:	f04f 0500 	mov.w	r5, #0
 8006710:	4622      	mov	r2, r4
 8006712:	462b      	mov	r3, r5
 8006714:	1891      	adds	r1, r2, r2
 8006716:	6139      	str	r1, [r7, #16]
 8006718:	415b      	adcs	r3, r3
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006720:	1912      	adds	r2, r2, r4
 8006722:	eb45 0303 	adc.w	r3, r5, r3
 8006726:	f04f 0000 	mov.w	r0, #0
 800672a:	f04f 0100 	mov.w	r1, #0
 800672e:	00d9      	lsls	r1, r3, #3
 8006730:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006734:	00d0      	lsls	r0, r2, #3
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	eb12 0804 	adds.w	r8, r2, r4
 800673e:	eb43 0905 	adc.w	r9, r3, r5
 8006742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	4618      	mov	r0, r3
 8006748:	f04f 0100 	mov.w	r1, #0
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	008b      	lsls	r3, r1, #2
 8006756:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800675a:	0082      	lsls	r2, r0, #2
 800675c:	4640      	mov	r0, r8
 800675e:	4649      	mov	r1, r9
 8006760:	f7fa fa9a 	bl	8000c98 <__aeabi_uldivmod>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4b49      	ldr	r3, [pc, #292]	; (8006890 <UART_SetConfig+0x38c>)
 800676a:	fba3 2302 	umull	r2, r3, r3, r2
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	011e      	lsls	r6, r3, #4
 8006772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006774:	4618      	mov	r0, r3
 8006776:	f04f 0100 	mov.w	r1, #0
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	1894      	adds	r4, r2, r2
 8006780:	60bc      	str	r4, [r7, #8]
 8006782:	415b      	adcs	r3, r3
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800678a:	1812      	adds	r2, r2, r0
 800678c:	eb41 0303 	adc.w	r3, r1, r3
 8006790:	f04f 0400 	mov.w	r4, #0
 8006794:	f04f 0500 	mov.w	r5, #0
 8006798:	00dd      	lsls	r5, r3, #3
 800679a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800679e:	00d4      	lsls	r4, r2, #3
 80067a0:	4622      	mov	r2, r4
 80067a2:	462b      	mov	r3, r5
 80067a4:	1814      	adds	r4, r2, r0
 80067a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80067a8:	414b      	adcs	r3, r1
 80067aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f04f 0100 	mov.w	r1, #0
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	008b      	lsls	r3, r1, #2
 80067c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067c4:	0082      	lsls	r2, r0, #2
 80067c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80067ca:	f7fa fa65 	bl	8000c98 <__aeabi_uldivmod>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4b2f      	ldr	r3, [pc, #188]	; (8006890 <UART_SetConfig+0x38c>)
 80067d4:	fba3 1302 	umull	r1, r3, r3, r2
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	2164      	movs	r1, #100	; 0x64
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	3332      	adds	r3, #50	; 0x32
 80067e6:	4a2a      	ldr	r2, [pc, #168]	; (8006890 <UART_SetConfig+0x38c>)
 80067e8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067f2:	441e      	add	r6, r3
 80067f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f6:	4618      	mov	r0, r3
 80067f8:	f04f 0100 	mov.w	r1, #0
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	1894      	adds	r4, r2, r2
 8006802:	603c      	str	r4, [r7, #0]
 8006804:	415b      	adcs	r3, r3
 8006806:	607b      	str	r3, [r7, #4]
 8006808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800680c:	1812      	adds	r2, r2, r0
 800680e:	eb41 0303 	adc.w	r3, r1, r3
 8006812:	f04f 0400 	mov.w	r4, #0
 8006816:	f04f 0500 	mov.w	r5, #0
 800681a:	00dd      	lsls	r5, r3, #3
 800681c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006820:	00d4      	lsls	r4, r2, #3
 8006822:	4622      	mov	r2, r4
 8006824:	462b      	mov	r3, r5
 8006826:	eb12 0a00 	adds.w	sl, r2, r0
 800682a:	eb43 0b01 	adc.w	fp, r3, r1
 800682e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	4618      	mov	r0, r3
 8006834:	f04f 0100 	mov.w	r1, #0
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	008b      	lsls	r3, r1, #2
 8006842:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006846:	0082      	lsls	r2, r0, #2
 8006848:	4650      	mov	r0, sl
 800684a:	4659      	mov	r1, fp
 800684c:	f7fa fa24 	bl	8000c98 <__aeabi_uldivmod>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4b0e      	ldr	r3, [pc, #56]	; (8006890 <UART_SetConfig+0x38c>)
 8006856:	fba3 1302 	umull	r1, r3, r3, r2
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2164      	movs	r1, #100	; 0x64
 800685e:	fb01 f303 	mul.w	r3, r1, r3
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	3332      	adds	r3, #50	; 0x32
 8006868:	4a09      	ldr	r2, [pc, #36]	; (8006890 <UART_SetConfig+0x38c>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	f003 020f 	and.w	r2, r3, #15
 8006874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4432      	add	r2, r6
 800687a:	609a      	str	r2, [r3, #8]
}
 800687c:	bf00      	nop
 800687e:	377c      	adds	r7, #124	; 0x7c
 8006880:	46bd      	mov	sp, r7
 8006882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006886:	bf00      	nop
 8006888:	40011000 	.word	0x40011000
 800688c:	40011400 	.word	0x40011400
 8006890:	51eb851f 	.word	0x51eb851f

08006894 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006898:	4904      	ldr	r1, [pc, #16]	; (80068ac <MX_FATFS_Init+0x18>)
 800689a:	4805      	ldr	r0, [pc, #20]	; (80068b0 <MX_FATFS_Init+0x1c>)
 800689c:	f002 ffa6 	bl	80097ec <FATFS_LinkDriver>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461a      	mov	r2, r3
 80068a4:	4b03      	ldr	r3, [pc, #12]	; (80068b4 <MX_FATFS_Init+0x20>)
 80068a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80068a8:	bf00      	nop
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20005608 	.word	0x20005608
 80068b0:	2000001c 	.word	0x2000001c
 80068b4:	2000560c 	.word	0x2000560c

080068b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80068bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80068be:	4618      	mov	r0, r3
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 f9d9 	bl	8006c8c <USER_SPI_initialize>
 80068da:	4603      	mov	r3, r0
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END INIT */
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fab7 	bl	8006e64 <USER_SPI_status>
 80068f6:	4603      	mov	r3, r0
    //Stat = STA_NOINIT;
    //return Stat;
  /* USER CODE END STATUS */
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006910:	7bf8      	ldrb	r0, [r7, #15]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	f000 faba 	bl	8006e90 <USER_SPI_read>
 800691c:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END READ */
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006936:	7bf8      	ldrb	r0, [r7, #15]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	f000 fb0d 	bl	8006f5c <USER_SPI_write>
 8006942:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END WRITE */
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	603a      	str	r2, [r7, #0]
 8006956:	71fb      	strb	r3, [r7, #7]
 8006958:	460b      	mov	r3, r1
 800695a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800695c:	79b9      	ldrb	r1, [r7, #6]
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fb76 	bl	8007054 <USER_SPI_ioctl>
 8006968:	4603      	mov	r3, r0
    //DRESULT res = RES_ERROR;
    //return res;
  /* USER CODE END IOCTL */
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800697c:	f7fc fac6 	bl	8002f0c <HAL_GetTick>
 8006980:	4603      	mov	r3, r0
 8006982:	4a04      	ldr	r2, [pc, #16]	; (8006994 <SPI_Timer_On+0x20>)
 8006984:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006986:	4a04      	ldr	r2, [pc, #16]	; (8006998 <SPI_Timer_On+0x24>)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6013      	str	r3, [r2, #0]
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20005a74 	.word	0x20005a74
 8006998:	20005a78 	.word	0x20005a78

0800699c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80069a0:	f7fc fab4 	bl	8002f0c <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <SPI_Timer_Status+0x24>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <SPI_Timer_Status+0x28>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	bf34      	ite	cc
 80069b4:	2301      	movcc	r3, #1
 80069b6:	2300      	movcs	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20005a74 	.word	0x20005a74
 80069c4:	20005a78 	.word	0x20005a78

080069c8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80069d2:	f107 020f 	add.w	r2, r7, #15
 80069d6:	1df9      	adds	r1, r7, #7
 80069d8:	2332      	movs	r3, #50	; 0x32
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	2301      	movs	r3, #1
 80069de:	4804      	ldr	r0, [pc, #16]	; (80069f0 <xchg_spi+0x28>)
 80069e0:	f7fe fcdf 	bl	80053a2 <HAL_SPI_TransmitReceive>
    return rxDat;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20005520 	.word	0x20005520

080069f4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e00a      	b.n	8006a1a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	18d4      	adds	r4, r2, r3
 8006a0a:	20ff      	movs	r0, #255	; 0xff
 8006a0c:	f7ff ffdc 	bl	80069c8 <xchg_spi>
 8006a10:	4603      	mov	r3, r0
 8006a12:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d3f0      	bcc.n	8006a04 <rcvr_spi_multi+0x10>
	}
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd90      	pop	{r4, r7, pc}

08006a2c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	e009      	b.n	8006a50 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff ffbf 	bl	80069c8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3f1      	bcc.n	8006a3c <xmit_spi_multi+0x10>
	}
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b086      	sub	sp, #24
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006a6a:	f7fc fa4f 	bl	8002f0c <HAL_GetTick>
 8006a6e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006a74:	20ff      	movs	r0, #255	; 0xff
 8006a76:	f7ff ffa7 	bl	80069c8 <xchg_spi>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	2bff      	cmp	r3, #255	; 0xff
 8006a82:	d007      	beq.n	8006a94 <wait_ready+0x32>
 8006a84:	f7fc fa42 	bl	8002f0c <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d8ef      	bhi.n	8006a74 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	2bff      	cmp	r3, #255	; 0xff
 8006a98:	bf0c      	ite	eq
 8006a9a:	2301      	moveq	r3, #1
 8006a9c:	2300      	movne	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006aac:	2201      	movs	r2, #1
 8006aae:	2110      	movs	r1, #16
 8006ab0:	4803      	ldr	r0, [pc, #12]	; (8006ac0 <despiselect+0x18>)
 8006ab2:	f7fd f9df 	bl	8003e74 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006ab6:	20ff      	movs	r0, #255	; 0xff
 8006ab8:	f7ff ff86 	bl	80069c8 <xchg_spi>

}
 8006abc:	bf00      	nop
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40020000 	.word	0x40020000

08006ac4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2110      	movs	r1, #16
 8006acc:	4809      	ldr	r0, [pc, #36]	; (8006af4 <spiselect+0x30>)
 8006ace:	f7fd f9d1 	bl	8003e74 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006ad2:	20ff      	movs	r0, #255	; 0xff
 8006ad4:	f7ff ff78 	bl	80069c8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006ad8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006adc:	f7ff ffc1 	bl	8006a62 <wait_ready>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <spiselect+0x26>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e002      	b.n	8006af0 <spiselect+0x2c>

	despiselect();
 8006aea:	f7ff ffdd 	bl	8006aa8 <despiselect>
	return 0;	/* Timeout */
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40020000 	.word	0x40020000

08006af8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006b02:	20c8      	movs	r0, #200	; 0xc8
 8006b04:	f7ff ff36 	bl	8006974 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006b08:	20ff      	movs	r0, #255	; 0xff
 8006b0a:	f7ff ff5d 	bl	80069c8 <xchg_spi>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2bff      	cmp	r3, #255	; 0xff
 8006b16:	d104      	bne.n	8006b22 <rcvr_datablock+0x2a>
 8006b18:	f7ff ff40 	bl	800699c <SPI_Timer_Status>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f2      	bne.n	8006b08 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	2bfe      	cmp	r3, #254	; 0xfe
 8006b26:	d001      	beq.n	8006b2c <rcvr_datablock+0x34>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e00a      	b.n	8006b42 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ff60 	bl	80069f4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006b34:	20ff      	movs	r0, #255	; 0xff
 8006b36:	f7ff ff47 	bl	80069c8 <xchg_spi>
 8006b3a:	20ff      	movs	r0, #255	; 0xff
 8006b3c:	f7ff ff44 	bl	80069c8 <xchg_spi>

	return 1;						/* Function succeeded */
 8006b40:	2301      	movs	r3, #1
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006b56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b5a:	f7ff ff82 	bl	8006a62 <wait_ready>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <xmit_datablock+0x1e>
 8006b64:	2300      	movs	r3, #0
 8006b66:	e01e      	b.n	8006ba6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff ff2c 	bl	80069c8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	2bfd      	cmp	r3, #253	; 0xfd
 8006b74:	d016      	beq.n	8006ba4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff ff56 	bl	8006a2c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006b80:	20ff      	movs	r0, #255	; 0xff
 8006b82:	f7ff ff21 	bl	80069c8 <xchg_spi>
 8006b86:	20ff      	movs	r0, #255	; 0xff
 8006b88:	f7ff ff1e 	bl	80069c8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006b8c:	20ff      	movs	r0, #255	; 0xff
 8006b8e:	f7ff ff1b 	bl	80069c8 <xchg_spi>
 8006b92:	4603      	mov	r3, r0
 8006b94:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d001      	beq.n	8006ba4 <xmit_datablock+0x5a>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e000      	b.n	8006ba6 <xmit_datablock+0x5c>
	}
	return 1;
 8006ba4:	2301      	movs	r3, #1
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	6039      	str	r1, [r7, #0]
 8006bb8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da0e      	bge.n	8006be0 <send_cmd+0x32>
		cmd &= 0x7F;
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006bca:	2100      	movs	r1, #0
 8006bcc:	2037      	movs	r0, #55	; 0x37
 8006bce:	f7ff ffee 	bl	8006bae <send_cmd>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d901      	bls.n	8006be0 <send_cmd+0x32>
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	e051      	b.n	8006c84 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	2b0c      	cmp	r3, #12
 8006be4:	d008      	beq.n	8006bf8 <send_cmd+0x4a>
		despiselect();
 8006be6:	f7ff ff5f 	bl	8006aa8 <despiselect>
		if (!spiselect()) return 0xFF;
 8006bea:	f7ff ff6b 	bl	8006ac4 <spiselect>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <send_cmd+0x4a>
 8006bf4:	23ff      	movs	r3, #255	; 0xff
 8006bf6:	e045      	b.n	8006c84 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff fee1 	bl	80069c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	0e1b      	lsrs	r3, r3, #24
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fedb 	bl	80069c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	0c1b      	lsrs	r3, r3, #16
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fed5 	bl	80069c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fecf 	bl	80069c8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff feca 	bl	80069c8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006c34:	2301      	movs	r3, #1
 8006c36:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <send_cmd+0x94>
 8006c3e:	2395      	movs	r3, #149	; 0x95
 8006c40:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d101      	bne.n	8006c4c <send_cmd+0x9e>
 8006c48:	2387      	movs	r3, #135	; 0x87
 8006c4a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff feba 	bl	80069c8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	2b0c      	cmp	r3, #12
 8006c58:	d102      	bne.n	8006c60 <send_cmd+0xb2>
 8006c5a:	20ff      	movs	r0, #255	; 0xff
 8006c5c:	f7ff feb4 	bl	80069c8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006c60:	230a      	movs	r3, #10
 8006c62:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006c64:	20ff      	movs	r0, #255	; 0xff
 8006c66:	f7ff feaf 	bl	80069c8 <xchg_spi>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da05      	bge.n	8006c82 <send_cmd+0xd4>
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <USER_SPI_initialize+0x14>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0d6      	b.n	8006e4e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006ca0:	4b6d      	ldr	r3, [pc, #436]	; (8006e58 <USER_SPI_initialize+0x1cc>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <USER_SPI_initialize+0x2a>
 8006cae:	4b6a      	ldr	r3, [pc, #424]	; (8006e58 <USER_SPI_initialize+0x1cc>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	e0cb      	b.n	8006e4e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006cb6:	4b69      	ldr	r3, [pc, #420]	; (8006e5c <USER_SPI_initialize+0x1d0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006cc0:	4b66      	ldr	r3, [pc, #408]	; (8006e5c <USER_SPI_initialize+0x1d0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006cc8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006cca:	230a      	movs	r3, #10
 8006ccc:	73fb      	strb	r3, [r7, #15]
 8006cce:	e005      	b.n	8006cdc <USER_SPI_initialize+0x50>
 8006cd0:	20ff      	movs	r0, #255	; 0xff
 8006cd2:	f7ff fe79 	bl	80069c8 <xchg_spi>
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	73fb      	strb	r3, [r7, #15]
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f6      	bne.n	8006cd0 <USER_SPI_initialize+0x44>

	ty = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f7ff ff60 	bl	8006bae <send_cmd>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	f040 808b 	bne.w	8006e0c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cfa:	f7ff fe3b 	bl	8006974 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006cfe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d02:	2008      	movs	r0, #8
 8006d04:	f7ff ff53 	bl	8006bae <send_cmd>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d151      	bne.n	8006db2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73fb      	strb	r3, [r7, #15]
 8006d12:	e00d      	b.n	8006d30 <USER_SPI_initialize+0xa4>
 8006d14:	7bfc      	ldrb	r4, [r7, #15]
 8006d16:	20ff      	movs	r0, #255	; 0xff
 8006d18:	f7ff fe56 	bl	80069c8 <xchg_spi>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f107 0310 	add.w	r3, r7, #16
 8006d24:	4423      	add	r3, r4
 8006d26:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	73fb      	strb	r3, [r7, #15]
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d9ee      	bls.n	8006d14 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006d36:	7abb      	ldrb	r3, [r7, #10]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d167      	bne.n	8006e0c <USER_SPI_initialize+0x180>
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
 8006d3e:	2baa      	cmp	r3, #170	; 0xaa
 8006d40:	d164      	bne.n	8006e0c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006d42:	bf00      	nop
 8006d44:	f7ff fe2a 	bl	800699c <SPI_Timer_Status>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <USER_SPI_initialize+0xd2>
 8006d4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006d52:	20a9      	movs	r0, #169	; 0xa9
 8006d54:	f7ff ff2b 	bl	8006bae <send_cmd>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f2      	bne.n	8006d44 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006d5e:	f7ff fe1d 	bl	800699c <SPI_Timer_Status>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d051      	beq.n	8006e0c <USER_SPI_initialize+0x180>
 8006d68:	2100      	movs	r1, #0
 8006d6a:	203a      	movs	r0, #58	; 0x3a
 8006d6c:	f7ff ff1f 	bl	8006bae <send_cmd>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d14a      	bne.n	8006e0c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]
 8006d7a:	e00d      	b.n	8006d98 <USER_SPI_initialize+0x10c>
 8006d7c:	7bfc      	ldrb	r4, [r7, #15]
 8006d7e:	20ff      	movs	r0, #255	; 0xff
 8006d80:	f7ff fe22 	bl	80069c8 <xchg_spi>
 8006d84:	4603      	mov	r3, r0
 8006d86:	461a      	mov	r2, r3
 8006d88:	f107 0310 	add.w	r3, r7, #16
 8006d8c:	4423      	add	r3, r4
 8006d8e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	3301      	adds	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d9ee      	bls.n	8006d7c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006d9e:	7a3b      	ldrb	r3, [r7, #8]
 8006da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <USER_SPI_initialize+0x120>
 8006da8:	230c      	movs	r3, #12
 8006daa:	e000      	b.n	8006dae <USER_SPI_initialize+0x122>
 8006dac:	2304      	movs	r3, #4
 8006dae:	737b      	strb	r3, [r7, #13]
 8006db0:	e02c      	b.n	8006e0c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006db2:	2100      	movs	r1, #0
 8006db4:	20a9      	movs	r0, #169	; 0xa9
 8006db6:	f7ff fefa 	bl	8006bae <send_cmd>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d804      	bhi.n	8006dca <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	737b      	strb	r3, [r7, #13]
 8006dc4:	23a9      	movs	r3, #169	; 0xa9
 8006dc6:	73bb      	strb	r3, [r7, #14]
 8006dc8:	e003      	b.n	8006dd2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006dca:	2301      	movs	r3, #1
 8006dcc:	737b      	strb	r3, [r7, #13]
 8006dce:	2301      	movs	r3, #1
 8006dd0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006dd2:	bf00      	nop
 8006dd4:	f7ff fde2 	bl	800699c <SPI_Timer_Status>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <USER_SPI_initialize+0x162>
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	2100      	movs	r1, #0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff fee3 	bl	8006bae <send_cmd>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f2      	bne.n	8006dd4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006dee:	f7ff fdd5 	bl	800699c <SPI_Timer_Status>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d007      	beq.n	8006e08 <USER_SPI_initialize+0x17c>
 8006df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dfc:	2010      	movs	r0, #16
 8006dfe:	f7ff fed6 	bl	8006bae <send_cmd>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <USER_SPI_initialize+0x180>
				ty = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006e0c:	4a14      	ldr	r2, [pc, #80]	; (8006e60 <USER_SPI_initialize+0x1d4>)
 8006e0e:	7b7b      	ldrb	r3, [r7, #13]
 8006e10:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006e12:	f7ff fe49 	bl	8006aa8 <despiselect>

	if (ty) {			/* OK */
 8006e16:	7b7b      	ldrb	r3, [r7, #13]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d012      	beq.n	8006e42 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <USER_SPI_initialize+0x1d0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006e26:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <USER_SPI_initialize+0x1d0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0210 	orr.w	r2, r2, #16
 8006e2e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <USER_SPI_initialize+0x1cc>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <USER_SPI_initialize+0x1cc>)
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e002      	b.n	8006e48 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <USER_SPI_initialize+0x1cc>)
 8006e44:	2201      	movs	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006e48:	4b03      	ldr	r3, [pc, #12]	; (8006e58 <USER_SPI_initialize+0x1cc>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b2db      	uxtb	r3, r3
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd90      	pop	{r4, r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000030 	.word	0x20000030
 8006e5c:	20005520 	.word	0x20005520
 8006e60:	20000654 	.word	0x20000654

08006e64 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <USER_SPI_status+0x14>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e002      	b.n	8006e7e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006e78:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <USER_SPI_status+0x28>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000030 	.word	0x20000030

08006e90 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <USER_SPI_read+0x1c>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <USER_SPI_read+0x20>
 8006eac:	2304      	movs	r3, #4
 8006eae:	e04d      	b.n	8006f4c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006eb0:	4b28      	ldr	r3, [pc, #160]	; (8006f54 <USER_SPI_read+0xc4>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <USER_SPI_read+0x32>
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e044      	b.n	8006f4c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006ec2:	4b25      	ldr	r3, [pc, #148]	; (8006f58 <USER_SPI_read+0xc8>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <USER_SPI_read+0x44>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	025b      	lsls	r3, r3, #9
 8006ed2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d111      	bne.n	8006efe <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	2011      	movs	r0, #17
 8006ede:	f7ff fe66 	bl	8006bae <send_cmd>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d129      	bne.n	8006f3c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eec:	68b8      	ldr	r0, [r7, #8]
 8006eee:	f7ff fe03 	bl	8006af8 <rcvr_datablock>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d021      	beq.n	8006f3c <USER_SPI_read+0xac>
			count = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	e01e      	b.n	8006f3c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	2012      	movs	r0, #18
 8006f02:	f7ff fe54 	bl	8006bae <send_cmd>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d117      	bne.n	8006f3c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f10:	68b8      	ldr	r0, [r7, #8]
 8006f12:	f7ff fdf1 	bl	8006af8 <rcvr_datablock>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <USER_SPI_read+0xa2>
				buff += 512;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006f22:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1ed      	bne.n	8006f0c <USER_SPI_read+0x7c>
 8006f30:	e000      	b.n	8006f34 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006f32:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006f34:	2100      	movs	r1, #0
 8006f36:	200c      	movs	r0, #12
 8006f38:	f7ff fe39 	bl	8006bae <send_cmd>
		}
	}
	despiselect();
 8006f3c:	f7ff fdb4 	bl	8006aa8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	bf14      	ite	ne
 8006f46:	2301      	movne	r3, #1
 8006f48:	2300      	moveq	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000030 	.word	0x20000030
 8006f58:	20000654 	.word	0x20000654

08006f5c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <USER_SPI_write+0x1c>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <USER_SPI_write+0x20>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	e063      	b.n	8007044 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006f7c:	4b33      	ldr	r3, [pc, #204]	; (800704c <USER_SPI_write+0xf0>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <USER_SPI_write+0x32>
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e05a      	b.n	8007044 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006f8e:	4b2f      	ldr	r3, [pc, #188]	; (800704c <USER_SPI_write+0xf0>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <USER_SPI_write+0x44>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e051      	b.n	8007044 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006fa0:	4b2b      	ldr	r3, [pc, #172]	; (8007050 <USER_SPI_write+0xf4>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d102      	bne.n	8006fb2 <USER_SPI_write+0x56>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	025b      	lsls	r3, r3, #9
 8006fb0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d110      	bne.n	8006fda <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	2018      	movs	r0, #24
 8006fbc:	f7ff fdf7 	bl	8006bae <send_cmd>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d136      	bne.n	8007034 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006fc6:	21fe      	movs	r1, #254	; 0xfe
 8006fc8:	68b8      	ldr	r0, [r7, #8]
 8006fca:	f7ff fdbe 	bl	8006b4a <xmit_datablock>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d02f      	beq.n	8007034 <USER_SPI_write+0xd8>
			count = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	e02c      	b.n	8007034 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006fda:	4b1d      	ldr	r3, [pc, #116]	; (8007050 <USER_SPI_write+0xf4>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	f003 0306 	and.w	r3, r3, #6
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <USER_SPI_write+0x92>
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	2097      	movs	r0, #151	; 0x97
 8006fea:	f7ff fde0 	bl	8006bae <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	2019      	movs	r0, #25
 8006ff2:	f7ff fddc 	bl	8006bae <send_cmd>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d11b      	bne.n	8007034 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006ffc:	21fc      	movs	r1, #252	; 0xfc
 8006ffe:	68b8      	ldr	r0, [r7, #8]
 8007000:	f7ff fda3 	bl	8006b4a <xmit_datablock>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <USER_SPI_write+0xc4>
				buff += 512;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007010:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	3b01      	subs	r3, #1
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1ee      	bne.n	8006ffc <USER_SPI_write+0xa0>
 800701e:	e000      	b.n	8007022 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007020:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007022:	21fd      	movs	r1, #253	; 0xfd
 8007024:	2000      	movs	r0, #0
 8007026:	f7ff fd90 	bl	8006b4a <xmit_datablock>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <USER_SPI_write+0xd8>
 8007030:	2301      	movs	r3, #1
 8007032:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007034:	f7ff fd38 	bl	8006aa8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	bf14      	ite	ne
 800703e:	2301      	movne	r3, #1
 8007040:	2300      	moveq	r3, #0
 8007042:	b2db      	uxtb	r3, r3
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20000030 	.word	0x20000030
 8007050:	20000654 	.word	0x20000654

08007054 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08c      	sub	sp, #48	; 0x30
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	603a      	str	r2, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
 8007060:	460b      	mov	r3, r1
 8007062:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <USER_SPI_ioctl+0x1a>
 800706a:	2304      	movs	r3, #4
 800706c:	e15a      	b.n	8007324 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800706e:	4baf      	ldr	r3, [pc, #700]	; (800732c <USER_SPI_ioctl+0x2d8>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <USER_SPI_ioctl+0x2c>
 800707c:	2303      	movs	r3, #3
 800707e:	e151      	b.n	8007324 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8007086:	79bb      	ldrb	r3, [r7, #6]
 8007088:	2b04      	cmp	r3, #4
 800708a:	f200 8136 	bhi.w	80072fa <USER_SPI_ioctl+0x2a6>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <USER_SPI_ioctl+0x40>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070a9 	.word	0x080070a9
 8007098:	080070bd 	.word	0x080070bd
 800709c:	080072fb 	.word	0x080072fb
 80070a0:	08007169 	.word	0x08007169
 80070a4:	0800725f 	.word	0x0800725f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80070a8:	f7ff fd0c 	bl	8006ac4 <spiselect>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 8127 	beq.w	8007302 <USER_SPI_ioctl+0x2ae>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80070ba:	e122      	b.n	8007302 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80070bc:	2100      	movs	r1, #0
 80070be:	2009      	movs	r0, #9
 80070c0:	f7ff fd75 	bl	8006bae <send_cmd>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f040 811d 	bne.w	8007306 <USER_SPI_ioctl+0x2b2>
 80070cc:	f107 030c 	add.w	r3, r7, #12
 80070d0:	2110      	movs	r1, #16
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff fd10 	bl	8006af8 <rcvr_datablock>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 8113 	beq.w	8007306 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80070e0:	7b3b      	ldrb	r3, [r7, #12]
 80070e2:	099b      	lsrs	r3, r3, #6
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d111      	bne.n	800710e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80070ea:	7d7b      	ldrb	r3, [r7, #21]
 80070ec:	461a      	mov	r2, r3
 80070ee:	7d3b      	ldrb	r3, [r7, #20]
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	4413      	add	r3, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	7cfb      	ldrb	r3, [r7, #19]
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80070fe:	4413      	add	r3, r2
 8007100:	3301      	adds	r3, #1
 8007102:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	029a      	lsls	r2, r3, #10
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e028      	b.n	8007160 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800710e:	7c7b      	ldrb	r3, [r7, #17]
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	b2da      	uxtb	r2, r3
 8007116:	7dbb      	ldrb	r3, [r7, #22]
 8007118:	09db      	lsrs	r3, r3, #7
 800711a:	b2db      	uxtb	r3, r3
 800711c:	4413      	add	r3, r2
 800711e:	b2da      	uxtb	r2, r3
 8007120:	7d7b      	ldrb	r3, [r7, #21]
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f003 0306 	and.w	r3, r3, #6
 800712a:	b2db      	uxtb	r3, r3
 800712c:	4413      	add	r3, r2
 800712e:	b2db      	uxtb	r3, r3
 8007130:	3302      	adds	r3, #2
 8007132:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007136:	7d3b      	ldrb	r3, [r7, #20]
 8007138:	099b      	lsrs	r3, r3, #6
 800713a:	b2db      	uxtb	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	7cfb      	ldrb	r3, [r7, #19]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	441a      	add	r2, r3
 8007144:	7cbb      	ldrb	r3, [r7, #18]
 8007146:	029b      	lsls	r3, r3, #10
 8007148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800714c:	4413      	add	r3, r2
 800714e:	3301      	adds	r3, #1
 8007150:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007152:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007156:	3b09      	subs	r3, #9
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	409a      	lsls	r2, r3
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007166:	e0ce      	b.n	8007306 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007168:	4b71      	ldr	r3, [pc, #452]	; (8007330 <USER_SPI_ioctl+0x2dc>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d031      	beq.n	80071d8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007174:	2100      	movs	r1, #0
 8007176:	208d      	movs	r0, #141	; 0x8d
 8007178:	f7ff fd19 	bl	8006bae <send_cmd>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	f040 80c3 	bne.w	800730a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007184:	20ff      	movs	r0, #255	; 0xff
 8007186:	f7ff fc1f 	bl	80069c8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800718a:	f107 030c 	add.w	r3, r7, #12
 800718e:	2110      	movs	r1, #16
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff fcb1 	bl	8006af8 <rcvr_datablock>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80b6 	beq.w	800730a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800719e:	2330      	movs	r3, #48	; 0x30
 80071a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80071a4:	e007      	b.n	80071b6 <USER_SPI_ioctl+0x162>
 80071a6:	20ff      	movs	r0, #255	; 0xff
 80071a8:	f7ff fc0e 	bl	80069c8 <xchg_spi>
 80071ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071b0:	3b01      	subs	r3, #1
 80071b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80071b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f3      	bne.n	80071a6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80071be:	7dbb      	ldrb	r3, [r7, #22]
 80071c0:	091b      	lsrs	r3, r3, #4
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	2310      	movs	r3, #16
 80071c8:	fa03 f202 	lsl.w	r2, r3, r2
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80071d6:	e098      	b.n	800730a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80071d8:	2100      	movs	r1, #0
 80071da:	2009      	movs	r0, #9
 80071dc:	f7ff fce7 	bl	8006bae <send_cmd>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f040 8091 	bne.w	800730a <USER_SPI_ioctl+0x2b6>
 80071e8:	f107 030c 	add.w	r3, r7, #12
 80071ec:	2110      	movs	r1, #16
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fc82 	bl	8006af8 <rcvr_datablock>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8087 	beq.w	800730a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80071fc:	4b4c      	ldr	r3, [pc, #304]	; (8007330 <USER_SPI_ioctl+0x2dc>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d012      	beq.n	800722e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007208:	7dbb      	ldrb	r3, [r7, #22]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007210:	7dfa      	ldrb	r2, [r7, #23]
 8007212:	09d2      	lsrs	r2, r2, #7
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	4413      	add	r3, r2
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	7e7b      	ldrb	r3, [r7, #25]
 800721c:	099b      	lsrs	r3, r3, #6
 800721e:	b2db      	uxtb	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	fa02 f303 	lsl.w	r3, r2, r3
 8007226:	461a      	mov	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	e013      	b.n	8007256 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800722e:	7dbb      	ldrb	r3, [r7, #22]
 8007230:	109b      	asrs	r3, r3, #2
 8007232:	b29b      	uxth	r3, r3
 8007234:	f003 031f 	and.w	r3, r3, #31
 8007238:	3301      	adds	r3, #1
 800723a:	7dfa      	ldrb	r2, [r7, #23]
 800723c:	00d2      	lsls	r2, r2, #3
 800723e:	f002 0218 	and.w	r2, r2, #24
 8007242:	7df9      	ldrb	r1, [r7, #23]
 8007244:	0949      	lsrs	r1, r1, #5
 8007246:	b2c9      	uxtb	r1, r1
 8007248:	440a      	add	r2, r1
 800724a:	3201      	adds	r2, #1
 800724c:	fb02 f303 	mul.w	r3, r2, r3
 8007250:	461a      	mov	r2, r3
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800725c:	e055      	b.n	800730a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800725e:	4b34      	ldr	r3, [pc, #208]	; (8007330 <USER_SPI_ioctl+0x2dc>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	f003 0306 	and.w	r3, r3, #6
 8007266:	2b00      	cmp	r3, #0
 8007268:	d051      	beq.n	800730e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800726a:	f107 020c 	add.w	r2, r7, #12
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	210b      	movs	r1, #11
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff feee 	bl	8007054 <USER_SPI_ioctl>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d149      	bne.n	8007312 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800727e:	7b3b      	ldrb	r3, [r7, #12]
 8007280:	099b      	lsrs	r3, r3, #6
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <USER_SPI_ioctl+0x23e>
 8007288:	7dbb      	ldrb	r3, [r7, #22]
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d041      	beq.n	8007316 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	623b      	str	r3, [r7, #32]
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80072a2:	4b23      	ldr	r3, [pc, #140]	; (8007330 <USER_SPI_ioctl+0x2dc>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d105      	bne.n	80072ba <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	025b      	lsls	r3, r3, #9
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	025b      	lsls	r3, r3, #9
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80072ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072bc:	2020      	movs	r0, #32
 80072be:	f7ff fc76 	bl	8006bae <send_cmd>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d128      	bne.n	800731a <USER_SPI_ioctl+0x2c6>
 80072c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ca:	2021      	movs	r0, #33	; 0x21
 80072cc:	f7ff fc6f 	bl	8006bae <send_cmd>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d121      	bne.n	800731a <USER_SPI_ioctl+0x2c6>
 80072d6:	2100      	movs	r1, #0
 80072d8:	2026      	movs	r0, #38	; 0x26
 80072da:	f7ff fc68 	bl	8006bae <send_cmd>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11a      	bne.n	800731a <USER_SPI_ioctl+0x2c6>
 80072e4:	f247 5030 	movw	r0, #30000	; 0x7530
 80072e8:	f7ff fbbb 	bl	8006a62 <wait_ready>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d013      	beq.n	800731a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80072f2:	2300      	movs	r3, #0
 80072f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80072f8:	e00f      	b.n	800731a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80072fa:	2304      	movs	r3, #4
 80072fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007300:	e00c      	b.n	800731c <USER_SPI_ioctl+0x2c8>
		break;
 8007302:	bf00      	nop
 8007304:	e00a      	b.n	800731c <USER_SPI_ioctl+0x2c8>
		break;
 8007306:	bf00      	nop
 8007308:	e008      	b.n	800731c <USER_SPI_ioctl+0x2c8>
		break;
 800730a:	bf00      	nop
 800730c:	e006      	b.n	800731c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800730e:	bf00      	nop
 8007310:	e004      	b.n	800731c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007312:	bf00      	nop
 8007314:	e002      	b.n	800731c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007316:	bf00      	nop
 8007318:	e000      	b.n	800731c <USER_SPI_ioctl+0x2c8>
		break;
 800731a:	bf00      	nop
	}

	despiselect();
 800731c:	f7ff fbc4 	bl	8006aa8 <despiselect>

	return res;
 8007320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007324:	4618      	mov	r0, r3
 8007326:	3730      	adds	r7, #48	; 0x30
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000030 	.word	0x20000030
 8007330:	20000654 	.word	0x20000654

08007334 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	4a08      	ldr	r2, [pc, #32]	; (8007364 <disk_status+0x30>)
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	79fa      	ldrb	r2, [r7, #7]
 800734c:	4905      	ldr	r1, [pc, #20]	; (8007364 <disk_status+0x30>)
 800734e:	440a      	add	r2, r1
 8007350:	7a12      	ldrb	r2, [r2, #8]
 8007352:	4610      	mov	r0, r2
 8007354:	4798      	blx	r3
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]
  return stat;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000680 	.word	0x20000680

08007368 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	4a0d      	ldr	r2, [pc, #52]	; (80073b0 <disk_initialize+0x48>)
 800737a:	5cd3      	ldrb	r3, [r2, r3]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d111      	bne.n	80073a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	4a0b      	ldr	r2, [pc, #44]	; (80073b0 <disk_initialize+0x48>)
 8007384:	2101      	movs	r1, #1
 8007386:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007388:	79fb      	ldrb	r3, [r7, #7]
 800738a:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <disk_initialize+0x48>)
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	79fa      	ldrb	r2, [r7, #7]
 8007396:	4906      	ldr	r1, [pc, #24]	; (80073b0 <disk_initialize+0x48>)
 8007398:	440a      	add	r2, r1
 800739a:	7a12      	ldrb	r2, [r2, #8]
 800739c:	4610      	mov	r0, r2
 800739e:	4798      	blx	r3
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000680 	.word	0x20000680

080073b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	4603      	mov	r3, r0
 80073c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <disk_read+0x3c>)
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	689c      	ldr	r4, [r3, #8]
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	4a07      	ldr	r2, [pc, #28]	; (80073f0 <disk_read+0x3c>)
 80073d4:	4413      	add	r3, r2
 80073d6:	7a18      	ldrb	r0, [r3, #8]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	47a0      	blx	r4
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd90      	pop	{r4, r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20000680 	.word	0x20000680

080073f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80073f4:	b590      	push	{r4, r7, lr}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	4a0a      	ldr	r2, [pc, #40]	; (8007430 <disk_write+0x3c>)
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	68dc      	ldr	r4, [r3, #12]
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	4a07      	ldr	r2, [pc, #28]	; (8007430 <disk_write+0x3c>)
 8007414:	4413      	add	r3, r2
 8007416:	7a18      	ldrb	r0, [r3, #8]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	47a0      	blx	r4
 8007420:	4603      	mov	r3, r0
 8007422:	75fb      	strb	r3, [r7, #23]
  return res;
 8007424:	7dfb      	ldrb	r3, [r7, #23]
}
 8007426:	4618      	mov	r0, r3
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	bd90      	pop	{r4, r7, pc}
 800742e:	bf00      	nop
 8007430:	20000680 	.word	0x20000680

08007434 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	603a      	str	r2, [r7, #0]
 800743e:	71fb      	strb	r3, [r7, #7]
 8007440:	460b      	mov	r3, r1
 8007442:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	4a09      	ldr	r2, [pc, #36]	; (800746c <disk_ioctl+0x38>)
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	79fa      	ldrb	r2, [r7, #7]
 8007452:	4906      	ldr	r1, [pc, #24]	; (800746c <disk_ioctl+0x38>)
 8007454:	440a      	add	r2, r1
 8007456:	7a10      	ldrb	r0, [r2, #8]
 8007458:	79b9      	ldrb	r1, [r7, #6]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	4798      	blx	r3
 800745e:	4603      	mov	r3, r0
 8007460:	73fb      	strb	r3, [r7, #15]
  return res;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000680 	.word	0x20000680

08007470 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3301      	adds	r3, #1
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007480:	89fb      	ldrh	r3, [r7, #14]
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	b21a      	sxth	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	b21b      	sxth	r3, r3
 800748c:	4313      	orrs	r3, r2
 800748e:	b21b      	sxth	r3, r3
 8007490:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007492:	89fb      	ldrh	r3, [r7, #14]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3303      	adds	r3, #3
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	3202      	adds	r2, #2
 80074b8:	7812      	ldrb	r2, [r2, #0]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	3201      	adds	r2, #1
 80074c6:	7812      	ldrb	r2, [r2, #0]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80074d8:	68fb      	ldr	r3, [r7, #12]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	887a      	ldrh	r2, [r7, #2]
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	887b      	ldrh	r3, [r7, #2]
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	607a      	str	r2, [r7, #4]
 800750a:	887a      	ldrh	r2, [r7, #2]
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	701a      	strb	r2, [r3, #0]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	0a1b      	lsrs	r3, r3, #8
 8007548:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	0a1b      	lsrs	r3, r3, #8
 800755a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00d      	beq.n	80075aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	1c53      	adds	r3, r2, #1
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	1c59      	adds	r1, r3, #1
 8007598:	6179      	str	r1, [r7, #20]
 800759a:	7812      	ldrb	r2, [r2, #0]
 800759c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	607b      	str	r3, [r7, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f1      	bne.n	800758e <mem_cpy+0x1a>
	}
}
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80075b6:	b480      	push	{r7}
 80075b8:	b087      	sub	sp, #28
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	617a      	str	r2, [r7, #20]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	607b      	str	r3, [r7, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f3      	bne.n	80075c6 <mem_set+0x10>
}
 80075de:	bf00      	nop
 80075e0:	bf00      	nop
 80075e2:	371c      	adds	r7, #28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80075ec:	b480      	push	{r7}
 80075ee:	b089      	sub	sp, #36	; 0x24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	61fb      	str	r3, [r7, #28]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	61fa      	str	r2, [r7, #28]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	4619      	mov	r1, r3
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	61ba      	str	r2, [r7, #24]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	1acb      	subs	r3, r1, r3
 8007618:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3b01      	subs	r3, #1
 800761e:	607b      	str	r3, [r7, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <mem_cmp+0x40>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0eb      	beq.n	8007604 <mem_cmp+0x18>

	return r;
 800762c:	697b      	ldr	r3, [r7, #20]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3724      	adds	r7, #36	; 0x24
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007644:	e002      	b.n	800764c <chk_chr+0x12>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3301      	adds	r3, #1
 800764a:	607b      	str	r3, [r7, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <chk_chr+0x26>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	4293      	cmp	r3, r2
 800765e:	d1f2      	bne.n	8007646 <chk_chr+0xc>
	return *str;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	781b      	ldrb	r3, [r3, #0]
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <lock_fs+0x22>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	4618      	mov	r0, r3
 8007684:	f002 f8e8 	bl	8009858 <ff_req_grant>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <lock_fs+0x22>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <lock_fs+0x24>
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00d      	beq.n	80076ca <unlock_fs+0x2e>
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	2b0c      	cmp	r3, #12
 80076b2:	d00a      	beq.n	80076ca <unlock_fs+0x2e>
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	2b0b      	cmp	r3, #11
 80076b8:	d007      	beq.n	80076ca <unlock_fs+0x2e>
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	2b0f      	cmp	r3, #15
 80076be:	d004      	beq.n	80076ca <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f002 f8dc 	bl	8009882 <ff_rel_grant>
	}
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	e029      	b.n	800773c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80076e8:	4a27      	ldr	r2, [pc, #156]	; (8007788 <chk_lock+0xb4>)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	4413      	add	r3, r2
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01d      	beq.n	8007732 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076f6:	4a24      	ldr	r2, [pc, #144]	; (8007788 <chk_lock+0xb4>)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	4413      	add	r3, r2
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d116      	bne.n	8007736 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007708:	4a1f      	ldr	r2, [pc, #124]	; (8007788 <chk_lock+0xb4>)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	4413      	add	r3, r2
 8007710:	3304      	adds	r3, #4
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007718:	429a      	cmp	r2, r3
 800771a:	d10c      	bne.n	8007736 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800771c:	4a1a      	ldr	r2, [pc, #104]	; (8007788 <chk_lock+0xb4>)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	4413      	add	r3, r2
 8007724:	3308      	adds	r3, #8
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800772c:	429a      	cmp	r2, r3
 800772e:	d102      	bne.n	8007736 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007730:	e007      	b.n	8007742 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007732:	2301      	movs	r3, #1
 8007734:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3301      	adds	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d9d2      	bls.n	80076e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d109      	bne.n	800775c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d102      	bne.n	8007754 <chk_lock+0x80>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b02      	cmp	r3, #2
 8007752:	d101      	bne.n	8007758 <chk_lock+0x84>
 8007754:	2300      	movs	r3, #0
 8007756:	e010      	b.n	800777a <chk_lock+0xa6>
 8007758:	2312      	movs	r3, #18
 800775a:	e00e      	b.n	800777a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d108      	bne.n	8007774 <chk_lock+0xa0>
 8007762:	4a09      	ldr	r2, [pc, #36]	; (8007788 <chk_lock+0xb4>)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	4413      	add	r3, r2
 800776a:	330c      	adds	r3, #12
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007772:	d101      	bne.n	8007778 <chk_lock+0xa4>
 8007774:	2310      	movs	r3, #16
 8007776:	e000      	b.n	800777a <chk_lock+0xa6>
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	20000660 	.word	0x20000660

0800778c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007792:	2300      	movs	r3, #0
 8007794:	607b      	str	r3, [r7, #4]
 8007796:	e002      	b.n	800779e <enq_lock+0x12>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3301      	adds	r3, #1
 800779c:	607b      	str	r3, [r7, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d806      	bhi.n	80077b2 <enq_lock+0x26>
 80077a4:	4a09      	ldr	r2, [pc, #36]	; (80077cc <enq_lock+0x40>)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	4413      	add	r3, r2
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1f2      	bne.n	8007798 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	bf14      	ite	ne
 80077b8:	2301      	movne	r3, #1
 80077ba:	2300      	moveq	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	20000660 	.word	0x20000660

080077d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	e01f      	b.n	8007820 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80077e0:	4a41      	ldr	r2, [pc, #260]	; (80078e8 <inc_lock+0x118>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	4413      	add	r3, r2
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d113      	bne.n	800781a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80077f2:	4a3d      	ldr	r2, [pc, #244]	; (80078e8 <inc_lock+0x118>)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	4413      	add	r3, r2
 80077fa:	3304      	adds	r3, #4
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007802:	429a      	cmp	r2, r3
 8007804:	d109      	bne.n	800781a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007806:	4a38      	ldr	r2, [pc, #224]	; (80078e8 <inc_lock+0x118>)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	4413      	add	r3, r2
 800780e:	3308      	adds	r3, #8
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007816:	429a      	cmp	r2, r3
 8007818:	d006      	beq.n	8007828 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3301      	adds	r3, #1
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d9dc      	bls.n	80077e0 <inc_lock+0x10>
 8007826:	e000      	b.n	800782a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007828:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d132      	bne.n	8007896 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e002      	b.n	800783c <inc_lock+0x6c>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3301      	adds	r3, #1
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d806      	bhi.n	8007850 <inc_lock+0x80>
 8007842:	4a29      	ldr	r2, [pc, #164]	; (80078e8 <inc_lock+0x118>)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	4413      	add	r3, r2
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1f2      	bne.n	8007836 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d101      	bne.n	800785a <inc_lock+0x8a>
 8007856:	2300      	movs	r3, #0
 8007858:	e040      	b.n	80078dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4922      	ldr	r1, [pc, #136]	; (80078e8 <inc_lock+0x118>)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	440b      	add	r3, r1
 8007866:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	491e      	ldr	r1, [pc, #120]	; (80078e8 <inc_lock+0x118>)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	440b      	add	r3, r1
 8007874:	3304      	adds	r3, #4
 8007876:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	491a      	ldr	r1, [pc, #104]	; (80078e8 <inc_lock+0x118>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	440b      	add	r3, r1
 8007884:	3308      	adds	r3, #8
 8007886:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007888:	4a17      	ldr	r2, [pc, #92]	; (80078e8 <inc_lock+0x118>)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	011b      	lsls	r3, r3, #4
 800788e:	4413      	add	r3, r2
 8007890:	330c      	adds	r3, #12
 8007892:	2200      	movs	r2, #0
 8007894:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d009      	beq.n	80078b0 <inc_lock+0xe0>
 800789c:	4a12      	ldr	r2, [pc, #72]	; (80078e8 <inc_lock+0x118>)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	4413      	add	r3, r2
 80078a4:	330c      	adds	r3, #12
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <inc_lock+0xe0>
 80078ac:	2300      	movs	r3, #0
 80078ae:	e015      	b.n	80078dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d108      	bne.n	80078c8 <inc_lock+0xf8>
 80078b6:	4a0c      	ldr	r2, [pc, #48]	; (80078e8 <inc_lock+0x118>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	4413      	add	r3, r2
 80078be:	330c      	adds	r3, #12
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	e001      	b.n	80078cc <inc_lock+0xfc>
 80078c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078cc:	4906      	ldr	r1, [pc, #24]	; (80078e8 <inc_lock+0x118>)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	440b      	add	r3, r1
 80078d4:	330c      	adds	r3, #12
 80078d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3301      	adds	r3, #1
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	20000660 	.word	0x20000660

080078ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	607b      	str	r3, [r7, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d825      	bhi.n	800794c <dec_lock+0x60>
		n = Files[i].ctr;
 8007900:	4a17      	ldr	r2, [pc, #92]	; (8007960 <dec_lock+0x74>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	011b      	lsls	r3, r3, #4
 8007906:	4413      	add	r3, r2
 8007908:	330c      	adds	r3, #12
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800790e:	89fb      	ldrh	r3, [r7, #14]
 8007910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007914:	d101      	bne.n	800791a <dec_lock+0x2e>
 8007916:	2300      	movs	r3, #0
 8007918:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800791a:	89fb      	ldrh	r3, [r7, #14]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <dec_lock+0x3a>
 8007920:	89fb      	ldrh	r3, [r7, #14]
 8007922:	3b01      	subs	r3, #1
 8007924:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007926:	4a0e      	ldr	r2, [pc, #56]	; (8007960 <dec_lock+0x74>)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	4413      	add	r3, r2
 800792e:	330c      	adds	r3, #12
 8007930:	89fa      	ldrh	r2, [r7, #14]
 8007932:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007934:	89fb      	ldrh	r3, [r7, #14]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d105      	bne.n	8007946 <dec_lock+0x5a>
 800793a:	4a09      	ldr	r2, [pc, #36]	; (8007960 <dec_lock+0x74>)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	4413      	add	r3, r2
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	737b      	strb	r3, [r7, #13]
 800794a:	e001      	b.n	8007950 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800794c:	2302      	movs	r3, #2
 800794e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007950:	7b7b      	ldrb	r3, [r7, #13]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20000660 	.word	0x20000660

08007964 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	e010      	b.n	8007994 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007972:	4a0d      	ldr	r2, [pc, #52]	; (80079a8 <clear_lock+0x44>)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	4413      	add	r3, r2
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	429a      	cmp	r2, r3
 8007980:	d105      	bne.n	800798e <clear_lock+0x2a>
 8007982:	4a09      	ldr	r2, [pc, #36]	; (80079a8 <clear_lock+0x44>)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4413      	add	r3, r2
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d9eb      	bls.n	8007972 <clear_lock+0xe>
	}
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	20000660 	.word	0x20000660

080079ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	78db      	ldrb	r3, [r3, #3]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d034      	beq.n	8007a2a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	7858      	ldrb	r0, [r3, #1]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079d0:	2301      	movs	r3, #1
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	f7ff fd0e 	bl	80073f4 <disk_write>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
 80079e2:	e022      	b.n	8007a2a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	1ad2      	subs	r2, r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d217      	bcs.n	8007a2a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	789b      	ldrb	r3, [r3, #2]
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	e010      	b.n	8007a24 <sync_window+0x78>
					wsect += fs->fsize;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4413      	add	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7858      	ldrb	r0, [r3, #1]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a16:	2301      	movs	r3, #1
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	f7ff fceb 	bl	80073f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	613b      	str	r3, [r7, #16]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d8eb      	bhi.n	8007a02 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d01b      	beq.n	8007a84 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ffad 	bl	80079ac <sync_window>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d113      	bne.n	8007a84 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	7858      	ldrb	r0, [r3, #1]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a66:	2301      	movs	r3, #1
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	f7ff fca3 	bl	80073b4 <disk_read>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a74:	f04f 33ff 	mov.w	r3, #4294967295
 8007a78:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff ff87 	bl	80079ac <sync_window>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d158      	bne.n	8007b5a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d148      	bne.n	8007b42 <sync_fs+0xb2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	791b      	ldrb	r3, [r3, #4]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d144      	bne.n	8007b42 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3334      	adds	r3, #52	; 0x34
 8007abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff fd77 	bl	80075b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3334      	adds	r3, #52	; 0x34
 8007acc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ad0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff fd06 	bl	80074e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3334      	adds	r3, #52	; 0x34
 8007ade:	4921      	ldr	r1, [pc, #132]	; (8007b64 <sync_fs+0xd4>)
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fd1b 	bl	800751c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3334      	adds	r3, #52	; 0x34
 8007aea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007aee:	491e      	ldr	r1, [pc, #120]	; (8007b68 <sync_fs+0xd8>)
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff fd13 	bl	800751c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3334      	adds	r3, #52	; 0x34
 8007afa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	4619      	mov	r1, r3
 8007b04:	4610      	mov	r0, r2
 8007b06:	f7ff fd09 	bl	800751c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3334      	adds	r3, #52	; 0x34
 8007b0e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7ff fcff 	bl	800751c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7858      	ldrb	r0, [r3, #1]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b36:	2301      	movs	r3, #1
 8007b38:	f7ff fc5c 	bl	80073f4 <disk_write>
			fs->fsi_flag = 0;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	785b      	ldrb	r3, [r3, #1]
 8007b46:	2200      	movs	r2, #0
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff fc72 	bl	8007434 <disk_ioctl>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <sync_fs+0xca>
 8007b56:	2301      	movs	r3, #1
 8007b58:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	41615252 	.word	0x41615252
 8007b68:	61417272 	.word	0x61417272

08007b6c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	3b02      	subs	r3, #2
 8007b7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	3b02      	subs	r3, #2
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d301      	bcc.n	8007b8c <clust2sect+0x20>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e008      	b.n	8007b9e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	895b      	ldrh	r3, [r3, #10]
 8007b90:	461a      	mov	r2, r3
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	fb03 f202 	mul.w	r2, r3, r2
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	4413      	add	r3, r2
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d904      	bls.n	8007bca <get_fat+0x20>
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d302      	bcc.n	8007bd0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007bca:	2301      	movs	r3, #1
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	e08f      	b.n	8007cf0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d062      	beq.n	8007ca4 <get_fat+0xfa>
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	dc7c      	bgt.n	8007cdc <get_fat+0x132>
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d002      	beq.n	8007bec <get_fat+0x42>
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d042      	beq.n	8007c70 <get_fat+0xc6>
 8007bea:	e077      	b.n	8007cdc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	0a5b      	lsrs	r3, r3, #9
 8007c02:	4413      	add	r3, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	6938      	ldr	r0, [r7, #16]
 8007c08:	f7ff ff14 	bl	8007a34 <move_window>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d167      	bne.n	8007ce2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	60fa      	str	r2, [r7, #12]
 8007c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c24:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	0a5b      	lsrs	r3, r3, #9
 8007c2e:	4413      	add	r3, r2
 8007c30:	4619      	mov	r1, r3
 8007c32:	6938      	ldr	r0, [r7, #16]
 8007c34:	f7ff fefe 	bl	8007a34 <move_window>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d153      	bne.n	8007ce6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4413      	add	r3, r2
 8007c48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	461a      	mov	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <get_fat+0xbc>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	091b      	lsrs	r3, r3, #4
 8007c64:	e002      	b.n	8007c6c <get_fat+0xc2>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c6c:	617b      	str	r3, [r7, #20]
			break;
 8007c6e:	e03f      	b.n	8007cf0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	4413      	add	r3, r2
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6938      	ldr	r0, [r7, #16]
 8007c7e:	f7ff fed9 	bl	8007a34 <move_window>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d130      	bne.n	8007cea <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007c96:	4413      	add	r3, r2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff fbe9 	bl	8007470 <ld_word>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	617b      	str	r3, [r7, #20]
			break;
 8007ca2:	e025      	b.n	8007cf0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	09db      	lsrs	r3, r3, #7
 8007cac:	4413      	add	r3, r2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6938      	ldr	r0, [r7, #16]
 8007cb2:	f7ff febf 	bl	8007a34 <move_window>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d118      	bne.n	8007cee <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007cca:	4413      	add	r3, r2
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7ff fbe7 	bl	80074a0 <ld_dword>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007cd8:	617b      	str	r3, [r7, #20]
			break;
 8007cda:	e009      	b.n	8007cf0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007cdc:	2301      	movs	r3, #1
 8007cde:	617b      	str	r3, [r7, #20]
 8007ce0:	e006      	b.n	8007cf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ce2:	bf00      	nop
 8007ce4:	e004      	b.n	8007cf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ce6:	bf00      	nop
 8007ce8:	e002      	b.n	8007cf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cea:	bf00      	nop
 8007cec:	e000      	b.n	8007cf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cee:	bf00      	nop
		}
	}

	return val;
 8007cf0:	697b      	ldr	r3, [r7, #20]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007cfa:	b590      	push	{r4, r7, lr}
 8007cfc:	b089      	sub	sp, #36	; 0x24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007d06:	2302      	movs	r3, #2
 8007d08:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	f240 80d2 	bls.w	8007eb6 <put_fat+0x1bc>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	f080 80cc 	bcs.w	8007eb6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	f000 8096 	beq.w	8007e54 <put_fat+0x15a>
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	f300 80cd 	bgt.w	8007ec8 <put_fat+0x1ce>
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d002      	beq.n	8007d38 <put_fat+0x3e>
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d06e      	beq.n	8007e14 <put_fat+0x11a>
 8007d36:	e0c7      	b.n	8007ec8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	4413      	add	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	0a5b      	lsrs	r3, r3, #9
 8007d4e:	4413      	add	r3, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff fe6e 	bl	8007a34 <move_window>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d5c:	7ffb      	ldrb	r3, [r7, #31]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f040 80ab 	bne.w	8007eba <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	1c59      	adds	r1, r3, #1
 8007d6e:	61b9      	str	r1, [r7, #24]
 8007d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d74:	4413      	add	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00d      	beq.n	8007d9e <put_fat+0xa4>
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b25b      	sxtb	r3, r3
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	b25a      	sxtb	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	b25b      	sxtb	r3, r3
 8007d96:	4313      	orrs	r3, r2
 8007d98:	b25b      	sxtb	r3, r3
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	e001      	b.n	8007da2 <put_fat+0xa8>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	0a5b      	lsrs	r3, r3, #9
 8007db4:	4413      	add	r3, r2
 8007db6:	4619      	mov	r1, r3
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff fe3b 	bl	8007a34 <move_window>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007dc2:	7ffb      	ldrb	r3, [r7, #31]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d17a      	bne.n	8007ebe <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd4:	4413      	add	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <put_fat+0xf0>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	e00e      	b.n	8007e08 <put_fat+0x10e>
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	b25b      	sxtb	r3, r3
 8007df0:	f023 030f 	bic.w	r3, r3, #15
 8007df4:	b25a      	sxtb	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	0a1b      	lsrs	r3, r3, #8
 8007dfa:	b25b      	sxtb	r3, r3
 8007dfc:	f003 030f 	and.w	r3, r3, #15
 8007e00:	b25b      	sxtb	r3, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	70da      	strb	r2, [r3, #3]
			break;
 8007e12:	e059      	b.n	8007ec8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	4413      	add	r3, r2
 8007e1e:	4619      	mov	r1, r3
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7ff fe07 	bl	8007a34 <move_window>
 8007e26:	4603      	mov	r3, r0
 8007e28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e2a:	7ffb      	ldrb	r3, [r7, #31]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d148      	bne.n	8007ec2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007e3e:	4413      	add	r3, r2
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	b292      	uxth	r2, r2
 8007e44:	4611      	mov	r1, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fb4d 	bl	80074e6 <st_word>
			fs->wflag = 1;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	70da      	strb	r2, [r3, #3]
			break;
 8007e52:	e039      	b.n	8007ec8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	09db      	lsrs	r3, r3, #7
 8007e5c:	4413      	add	r3, r2
 8007e5e:	4619      	mov	r1, r3
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff fde7 	bl	8007a34 <move_window>
 8007e66:	4603      	mov	r3, r0
 8007e68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e6a:	7ffb      	ldrb	r3, [r7, #31]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d12a      	bne.n	8007ec6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007e84:	4413      	add	r3, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff fb0a 	bl	80074a0 <ld_dword>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e92:	4323      	orrs	r3, r4
 8007e94:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007ea4:	4413      	add	r3, r2
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff fb37 	bl	800751c <st_dword>
			fs->wflag = 1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	70da      	strb	r2, [r3, #3]
			break;
 8007eb4:	e008      	b.n	8007ec8 <put_fat+0x1ce>
		}
	}
 8007eb6:	bf00      	nop
 8007eb8:	e006      	b.n	8007ec8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007eba:	bf00      	nop
 8007ebc:	e004      	b.n	8007ec8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ebe:	bf00      	nop
 8007ec0:	e002      	b.n	8007ec8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ec2:	bf00      	nop
 8007ec4:	e000      	b.n	8007ec8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ec6:	bf00      	nop
	return res;
 8007ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3724      	adds	r7, #36	; 0x24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd90      	pop	{r4, r7, pc}

08007ed2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b088      	sub	sp, #32
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d904      	bls.n	8007ef8 <remove_chain+0x26>
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d301      	bcc.n	8007efc <remove_chain+0x2a>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e04b      	b.n	8007f94 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00c      	beq.n	8007f1c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	69b8      	ldr	r0, [r7, #24]
 8007f0a:	f7ff fef6 	bl	8007cfa <put_fat>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007f12:	7ffb      	ldrb	r3, [r7, #31]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <remove_chain+0x4a>
 8007f18:	7ffb      	ldrb	r3, [r7, #31]
 8007f1a:	e03b      	b.n	8007f94 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff fe43 	bl	8007baa <get_fat>
 8007f24:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d031      	beq.n	8007f90 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <remove_chain+0x64>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e02e      	b.n	8007f94 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3c:	d101      	bne.n	8007f42 <remove_chain+0x70>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e028      	b.n	8007f94 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f42:	2200      	movs	r2, #0
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	69b8      	ldr	r0, [r7, #24]
 8007f48:	f7ff fed7 	bl	8007cfa <put_fat>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f50:	7ffb      	ldrb	r3, [r7, #31]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <remove_chain+0x88>
 8007f56:	7ffb      	ldrb	r3, [r7, #31]
 8007f58:	e01c      	b.n	8007f94 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	695a      	ldr	r2, [r3, #20]
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	3b02      	subs	r3, #2
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d20b      	bcs.n	8007f80 <remove_chain+0xae>
			fs->free_clst++;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	791b      	ldrb	r3, [r3, #4]
 8007f76:	f043 0301 	orr.w	r3, r3, #1
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d3c6      	bcc.n	8007f1c <remove_chain+0x4a>
 8007f8e:	e000      	b.n	8007f92 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f90:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10d      	bne.n	8007fce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d004      	beq.n	8007fc8 <create_chain+0x2c>
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d31b      	bcc.n	8008000 <create_chain+0x64>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	61bb      	str	r3, [r7, #24]
 8007fcc:	e018      	b.n	8008000 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff fdea 	bl	8007baa <get_fat>
 8007fd6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d801      	bhi.n	8007fe2 <create_chain+0x46>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e070      	b.n	80080c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe8:	d101      	bne.n	8007fee <create_chain+0x52>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	e06a      	b.n	80080c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d201      	bcs.n	8007ffc <create_chain+0x60>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	e063      	b.n	80080c4 <create_chain+0x128>
		scl = clst;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	3301      	adds	r3, #1
 8008008:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	429a      	cmp	r2, r3
 8008012:	d307      	bcc.n	8008024 <create_chain+0x88>
				ncl = 2;
 8008014:	2302      	movs	r3, #2
 8008016:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	429a      	cmp	r2, r3
 800801e:	d901      	bls.n	8008024 <create_chain+0x88>
 8008020:	2300      	movs	r3, #0
 8008022:	e04f      	b.n	80080c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008024:	69f9      	ldr	r1, [r7, #28]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff fdbf 	bl	8007baa <get_fat>
 800802c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00e      	beq.n	8008052 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d003      	beq.n	8008042 <create_chain+0xa6>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008040:	d101      	bne.n	8008046 <create_chain+0xaa>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	e03e      	b.n	80080c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	429a      	cmp	r2, r3
 800804c:	d1da      	bne.n	8008004 <create_chain+0x68>
 800804e:	2300      	movs	r3, #0
 8008050:	e038      	b.n	80080c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008052:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008054:	f04f 32ff 	mov.w	r2, #4294967295
 8008058:	69f9      	ldr	r1, [r7, #28]
 800805a:	6938      	ldr	r0, [r7, #16]
 800805c:	f7ff fe4d 	bl	8007cfa <put_fat>
 8008060:	4603      	mov	r3, r0
 8008062:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <create_chain+0xe2>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d006      	beq.n	800807e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6938      	ldr	r0, [r7, #16]
 8008076:	f7ff fe40 	bl	8007cfa <put_fat>
 800807a:	4603      	mov	r3, r0
 800807c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d116      	bne.n	80080b2 <create_chain+0x116>
		fs->last_clst = ncl;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	695a      	ldr	r2, [r3, #20]
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	3b02      	subs	r3, #2
 8008094:	429a      	cmp	r2, r3
 8008096:	d804      	bhi.n	80080a2 <create_chain+0x106>
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	1e5a      	subs	r2, r3, #1
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	791b      	ldrb	r3, [r3, #4]
 80080a6:	f043 0301 	orr.w	r3, r3, #1
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	711a      	strb	r2, [r3, #4]
 80080b0:	e007      	b.n	80080c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d102      	bne.n	80080be <create_chain+0x122>
 80080b8:	f04f 33ff 	mov.w	r3, #4294967295
 80080bc:	e000      	b.n	80080c0 <create_chain+0x124>
 80080be:	2301      	movs	r3, #1
 80080c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80080c2:	69fb      	ldr	r3, [r7, #28]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	3304      	adds	r3, #4
 80080e2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	0a5b      	lsrs	r3, r3, #9
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	8952      	ldrh	r2, [r2, #10]
 80080ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80080f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	1d1a      	adds	r2, r3, #4
 80080f6:	613a      	str	r2, [r7, #16]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <clmt_clust+0x3a>
 8008102:	2300      	movs	r3, #0
 8008104:	e010      	b.n	8008128 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	429a      	cmp	r2, r3
 800810c:	d307      	bcc.n	800811e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	3304      	adds	r3, #4
 800811a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800811c:	e7e9      	b.n	80080f2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800811e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	4413      	add	r3, r2
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800814a:	d204      	bcs.n	8008156 <dir_sdi+0x22>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	f003 031f 	and.w	r3, r3, #31
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008156:	2302      	movs	r3, #2
 8008158:	e063      	b.n	8008222 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d106      	bne.n	800817a <dir_sdi+0x46>
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d902      	bls.n	800817a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10c      	bne.n	800819a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	8912      	ldrh	r2, [r2, #8]
 8008188:	4293      	cmp	r3, r2
 800818a:	d301      	bcc.n	8008190 <dir_sdi+0x5c>
 800818c:	2302      	movs	r3, #2
 800818e:	e048      	b.n	8008222 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	61da      	str	r2, [r3, #28]
 8008198:	e029      	b.n	80081ee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	895b      	ldrh	r3, [r3, #10]
 800819e:	025b      	lsls	r3, r3, #9
 80081a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081a2:	e019      	b.n	80081d8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6979      	ldr	r1, [r7, #20]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff fcfe 	bl	8007baa <get_fat>
 80081ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d101      	bne.n	80081bc <dir_sdi+0x88>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e032      	b.n	8008222 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d904      	bls.n	80081cc <dir_sdi+0x98>
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d301      	bcc.n	80081d0 <dir_sdi+0x9c>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e028      	b.n	8008222 <dir_sdi+0xee>
			ofs -= csz;
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d2e1      	bcs.n	80081a4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80081e0:	6979      	ldr	r1, [r7, #20]
 80081e2:	6938      	ldr	r0, [r7, #16]
 80081e4:	f7ff fcc2 	bl	8007b6c <clust2sect>
 80081e8:	4602      	mov	r2, r0
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <dir_sdi+0xcc>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e010      	b.n	8008222 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	0a5b      	lsrs	r3, r3, #9
 8008208:	441a      	add	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821a:	441a      	add	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b086      	sub	sp, #24
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	3320      	adds	r3, #32
 8008240:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <dir_next+0x28>
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008250:	d301      	bcc.n	8008256 <dir_next+0x2c>
 8008252:	2304      	movs	r3, #4
 8008254:	e0aa      	b.n	80083ac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 8098 	bne.w	8008392 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	8912      	ldrh	r2, [r2, #8]
 800827c:	4293      	cmp	r3, r2
 800827e:	f0c0 8088 	bcc.w	8008392 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	61da      	str	r2, [r3, #28]
 8008288:	2304      	movs	r3, #4
 800828a:	e08f      	b.n	80083ac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	0a5b      	lsrs	r3, r3, #9
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	8952      	ldrh	r2, [r2, #10]
 8008294:	3a01      	subs	r2, #1
 8008296:	4013      	ands	r3, r2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d17a      	bne.n	8008392 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	4619      	mov	r1, r3
 80082a4:	4610      	mov	r0, r2
 80082a6:	f7ff fc80 	bl	8007baa <get_fat>
 80082aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d801      	bhi.n	80082b6 <dir_next+0x8c>
 80082b2:	2302      	movs	r3, #2
 80082b4:	e07a      	b.n	80083ac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082bc:	d101      	bne.n	80082c2 <dir_next+0x98>
 80082be:	2301      	movs	r3, #1
 80082c0:	e074      	b.n	80083ac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d358      	bcc.n	800837e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d104      	bne.n	80082dc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	61da      	str	r2, [r3, #28]
 80082d8:	2304      	movs	r3, #4
 80082da:	e067      	b.n	80083ac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	4619      	mov	r1, r3
 80082e4:	4610      	mov	r0, r2
 80082e6:	f7ff fe59 	bl	8007f9c <create_chain>
 80082ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <dir_next+0xcc>
 80082f2:	2307      	movs	r3, #7
 80082f4:	e05a      	b.n	80083ac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d101      	bne.n	8008300 <dir_next+0xd6>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e055      	b.n	80083ac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008306:	d101      	bne.n	800830c <dir_next+0xe2>
 8008308:	2301      	movs	r3, #1
 800830a:	e04f      	b.n	80083ac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7ff fb4d 	bl	80079ac <sync_window>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <dir_next+0xf2>
 8008318:	2301      	movs	r3, #1
 800831a:	e047      	b.n	80083ac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3334      	adds	r3, #52	; 0x34
 8008320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008324:	2100      	movs	r1, #0
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff f945 	bl	80075b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800832c:	2300      	movs	r3, #0
 800832e:	613b      	str	r3, [r7, #16]
 8008330:	6979      	ldr	r1, [r7, #20]
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff fc1a 	bl	8007b6c <clust2sect>
 8008338:	4602      	mov	r2, r0
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	631a      	str	r2, [r3, #48]	; 0x30
 800833e:	e012      	b.n	8008366 <dir_next+0x13c>
						fs->wflag = 1;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff fb30 	bl	80079ac <sync_window>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <dir_next+0x12c>
 8008352:	2301      	movs	r3, #1
 8008354:	e02a      	b.n	80083ac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3301      	adds	r3, #1
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	631a      	str	r2, [r3, #48]	; 0x30
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	895b      	ldrh	r3, [r3, #10]
 800836a:	461a      	mov	r2, r3
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	4293      	cmp	r3, r2
 8008370:	d3e6      	bcc.n	8008340 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	1ad2      	subs	r2, r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008384:	6979      	ldr	r1, [r7, #20]
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f7ff fbf0 	bl	8007b6c <clust2sect>
 800838c:	4602      	mov	r2, r0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a4:	441a      	add	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80083c4:	2100      	movs	r1, #0
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff feb4 	bl	8008134 <dir_sdi>
 80083cc:	4603      	mov	r3, r0
 80083ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d12b      	bne.n	800842e <dir_alloc+0x7a>
		n = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	4619      	mov	r1, r3
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f7ff fb27 	bl	8007a34 <move_window>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d11d      	bne.n	800842c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a1b      	ldr	r3, [r3, #32]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2be5      	cmp	r3, #229	; 0xe5
 80083f8:	d004      	beq.n	8008404 <dir_alloc+0x50>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d107      	bne.n	8008414 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	3301      	adds	r3, #1
 8008408:	613b      	str	r3, [r7, #16]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d102      	bne.n	8008418 <dir_alloc+0x64>
 8008412:	e00c      	b.n	800842e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008414:	2300      	movs	r3, #0
 8008416:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008418:	2101      	movs	r1, #1
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff ff05 	bl	800822a <dir_next>
 8008420:	4603      	mov	r3, r0
 8008422:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0d7      	beq.n	80083da <dir_alloc+0x26>
 800842a:	e000      	b.n	800842e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800842c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	2b04      	cmp	r3, #4
 8008432:	d101      	bne.n	8008438 <dir_alloc+0x84>
 8008434:	2307      	movs	r3, #7
 8008436:	75fb      	strb	r3, [r7, #23]
	return res;
 8008438:	7dfb      	ldrb	r3, [r7, #23]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	331a      	adds	r3, #26
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff f80d 	bl	8007470 <ld_word>
 8008456:	4603      	mov	r3, r0
 8008458:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b03      	cmp	r3, #3
 8008460:	d109      	bne.n	8008476 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	3314      	adds	r3, #20
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff f802 	bl	8007470 <ld_word>
 800846c:	4603      	mov	r3, r0
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008476:	68fb      	ldr	r3, [r7, #12]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	331a      	adds	r3, #26
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	b292      	uxth	r2, r2
 8008494:	4611      	mov	r1, r2
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff f825 	bl	80074e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d109      	bne.n	80084b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f103 0214 	add.w	r2, r3, #20
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	0c1b      	lsrs	r3, r3, #16
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	4619      	mov	r1, r3
 80084b2:	4610      	mov	r0, r2
 80084b4:	f7ff f817 	bl	80074e6 <st_word>
	}
}
 80084b8:	bf00      	nop
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80084ce:	2100      	movs	r1, #0
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff fe2f 	bl	8008134 <dir_sdi>
 80084d6:	4603      	mov	r3, r0
 80084d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <dir_find+0x24>
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
 80084e2:	e03e      	b.n	8008562 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	4619      	mov	r1, r3
 80084ea:	6938      	ldr	r0, [r7, #16]
 80084ec:	f7ff faa2 	bl	8007a34 <move_window>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d12f      	bne.n	800855a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d102      	bne.n	800850e <dir_find+0x4e>
 8008508:	2304      	movs	r3, #4
 800850a:	75fb      	strb	r3, [r7, #23]
 800850c:	e028      	b.n	8008560 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	330b      	adds	r3, #11
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800851a:	b2da      	uxtb	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	330b      	adds	r3, #11
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f003 0308 	and.w	r3, r3, #8
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <dir_find+0x86>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a18      	ldr	r0, [r3, #32]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3324      	adds	r3, #36	; 0x24
 8008538:	220b      	movs	r2, #11
 800853a:	4619      	mov	r1, r3
 800853c:	f7ff f856 	bl	80075ec <mem_cmp>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00b      	beq.n	800855e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008546:	2100      	movs	r1, #0
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff fe6e 	bl	800822a <dir_next>
 800854e:	4603      	mov	r3, r0
 8008550:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0c5      	beq.n	80084e4 <dir_find+0x24>
 8008558:	e002      	b.n	8008560 <dir_find+0xa0>
		if (res != FR_OK) break;
 800855a:	bf00      	nop
 800855c:	e000      	b.n	8008560 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800855e:	bf00      	nop

	return res;
 8008560:	7dfb      	ldrb	r3, [r7, #23]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008578:	2101      	movs	r1, #1
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7ff ff1a 	bl	80083b4 <dir_alloc>
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d11c      	bne.n	80085c4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	4619      	mov	r1, r3
 8008590:	68b8      	ldr	r0, [r7, #8]
 8008592:	f7ff fa4f 	bl	8007a34 <move_window>
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d111      	bne.n	80085c4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	2220      	movs	r2, #32
 80085a6:	2100      	movs	r1, #0
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff f804 	bl	80075b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a18      	ldr	r0, [r3, #32]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3324      	adds	r3, #36	; 0x24
 80085b6:	220b      	movs	r2, #11
 80085b8:	4619      	mov	r1, r3
 80085ba:	f7fe ffdb 	bl	8007574 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2201      	movs	r2, #1
 80085c2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3324      	adds	r3, #36	; 0x24
 80085e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80085e6:	220b      	movs	r2, #11
 80085e8:	2120      	movs	r1, #32
 80085ea:	68b8      	ldr	r0, [r7, #8]
 80085ec:	f7fe ffe3 	bl	80075b6 <mem_set>
	si = i = 0; ni = 8;
 80085f0:	2300      	movs	r3, #0
 80085f2:	613b      	str	r3, [r7, #16]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	61fb      	str	r3, [r7, #28]
 80085f8:	2308      	movs	r3, #8
 80085fa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	61fa      	str	r2, [r7, #28]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800860a:	7efb      	ldrb	r3, [r7, #27]
 800860c:	2b20      	cmp	r3, #32
 800860e:	d94e      	bls.n	80086ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008610:	7efb      	ldrb	r3, [r7, #27]
 8008612:	2b2f      	cmp	r3, #47	; 0x2f
 8008614:	d006      	beq.n	8008624 <create_name+0x54>
 8008616:	7efb      	ldrb	r3, [r7, #27]
 8008618:	2b5c      	cmp	r3, #92	; 0x5c
 800861a:	d110      	bne.n	800863e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800861c:	e002      	b.n	8008624 <create_name+0x54>
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	3301      	adds	r3, #1
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b2f      	cmp	r3, #47	; 0x2f
 800862e:	d0f6      	beq.n	800861e <create_name+0x4e>
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b5c      	cmp	r3, #92	; 0x5c
 800863a:	d0f0      	beq.n	800861e <create_name+0x4e>
			break;
 800863c:	e038      	b.n	80086b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800863e:	7efb      	ldrb	r3, [r7, #27]
 8008640:	2b2e      	cmp	r3, #46	; 0x2e
 8008642:	d003      	beq.n	800864c <create_name+0x7c>
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	429a      	cmp	r2, r3
 800864a:	d30c      	bcc.n	8008666 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2b0b      	cmp	r3, #11
 8008650:	d002      	beq.n	8008658 <create_name+0x88>
 8008652:	7efb      	ldrb	r3, [r7, #27]
 8008654:	2b2e      	cmp	r3, #46	; 0x2e
 8008656:	d001      	beq.n	800865c <create_name+0x8c>
 8008658:	2306      	movs	r3, #6
 800865a:	e044      	b.n	80086e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800865c:	2308      	movs	r3, #8
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	230b      	movs	r3, #11
 8008662:	617b      	str	r3, [r7, #20]
			continue;
 8008664:	e022      	b.n	80086ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008666:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800866a:	2b00      	cmp	r3, #0
 800866c:	da04      	bge.n	8008678 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800866e:	7efb      	ldrb	r3, [r7, #27]
 8008670:	3b80      	subs	r3, #128	; 0x80
 8008672:	4a1f      	ldr	r2, [pc, #124]	; (80086f0 <create_name+0x120>)
 8008674:	5cd3      	ldrb	r3, [r2, r3]
 8008676:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008678:	7efb      	ldrb	r3, [r7, #27]
 800867a:	4619      	mov	r1, r3
 800867c:	481d      	ldr	r0, [pc, #116]	; (80086f4 <create_name+0x124>)
 800867e:	f7fe ffdc 	bl	800763a <chk_chr>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <create_name+0xbc>
 8008688:	2306      	movs	r3, #6
 800868a:	e02c      	b.n	80086e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800868c:	7efb      	ldrb	r3, [r7, #27]
 800868e:	2b60      	cmp	r3, #96	; 0x60
 8008690:	d905      	bls.n	800869e <create_name+0xce>
 8008692:	7efb      	ldrb	r3, [r7, #27]
 8008694:	2b7a      	cmp	r3, #122	; 0x7a
 8008696:	d802      	bhi.n	800869e <create_name+0xce>
 8008698:	7efb      	ldrb	r3, [r7, #27]
 800869a:	3b20      	subs	r3, #32
 800869c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	613a      	str	r2, [r7, #16]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	4413      	add	r3, r2
 80086a8:	7efa      	ldrb	r2, [r7, #27]
 80086aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80086ac:	e7a6      	b.n	80085fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80086ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	441a      	add	r2, r3
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <create_name+0xf4>
 80086c0:	2306      	movs	r3, #6
 80086c2:	e010      	b.n	80086e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2be5      	cmp	r3, #229	; 0xe5
 80086ca:	d102      	bne.n	80086d2 <create_name+0x102>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2205      	movs	r2, #5
 80086d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80086d2:	7efb      	ldrb	r3, [r7, #27]
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d801      	bhi.n	80086dc <create_name+0x10c>
 80086d8:	2204      	movs	r2, #4
 80086da:	e000      	b.n	80086de <create_name+0x10e>
 80086dc:	2200      	movs	r2, #0
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	330b      	adds	r3, #11
 80086e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80086e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	08013858 	.word	0x08013858
 80086f4:	08012280 	.word	0x08012280

080086f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800870c:	e002      	b.n	8008714 <follow_path+0x1c>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b2f      	cmp	r3, #47	; 0x2f
 800871a:	d0f8      	beq.n	800870e <follow_path+0x16>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b5c      	cmp	r3, #92	; 0x5c
 8008722:	d0f4      	beq.n	800870e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	2200      	movs	r2, #0
 8008728:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b1f      	cmp	r3, #31
 8008730:	d80a      	bhi.n	8008748 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2280      	movs	r2, #128	; 0x80
 8008736:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800873a:	2100      	movs	r1, #0
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff fcf9 	bl	8008134 <dir_sdi>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]
 8008746:	e043      	b.n	80087d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008748:	463b      	mov	r3, r7
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff ff3f 	bl	80085d0 <create_name>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d134      	bne.n	80087c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff feaf 	bl	80084c0 <dir_find>
 8008762:	4603      	mov	r3, r0
 8008764:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800876c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	2b04      	cmp	r3, #4
 8008778:	d127      	bne.n	80087ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d122      	bne.n	80087ca <follow_path+0xd2>
 8008784:	2305      	movs	r3, #5
 8008786:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008788:	e01f      	b.n	80087ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	d11c      	bne.n	80087ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	799b      	ldrb	r3, [r3, #6]
 8008798:	f003 0310 	and.w	r3, r3, #16
 800879c:	2b00      	cmp	r3, #0
 800879e:	d102      	bne.n	80087a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80087a0:	2305      	movs	r3, #5
 80087a2:	75fb      	strb	r3, [r7, #23]
 80087a4:	e014      	b.n	80087d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b4:	4413      	add	r3, r2
 80087b6:	4619      	mov	r1, r3
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff fe42 	bl	8008442 <ld_clust>
 80087be:	4602      	mov	r2, r0
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087c4:	e7c0      	b.n	8008748 <follow_path+0x50>
			if (res != FR_OK) break;
 80087c6:	bf00      	nop
 80087c8:	e002      	b.n	80087d0 <follow_path+0xd8>
				break;
 80087ca:	bf00      	nop
 80087cc:	e000      	b.n	80087d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80087ce:	bf00      	nop
			}
		}
	}

	return res;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80087da:	b480      	push	{r7}
 80087dc:	b087      	sub	sp, #28
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295
 80087e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d031      	beq.n	8008854 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	e002      	b.n	80087fe <get_ldnumber+0x24>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	3301      	adds	r3, #1
 80087fc:	617b      	str	r3, [r7, #20]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b20      	cmp	r3, #32
 8008804:	d903      	bls.n	800880e <get_ldnumber+0x34>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b3a      	cmp	r3, #58	; 0x3a
 800880c:	d1f4      	bne.n	80087f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b3a      	cmp	r3, #58	; 0x3a
 8008814:	d11c      	bne.n	8008850 <get_ldnumber+0x76>
			tp = *path;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	60fa      	str	r2, [r7, #12]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	3b30      	subs	r3, #48	; 0x30
 8008826:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b09      	cmp	r3, #9
 800882c:	d80e      	bhi.n	800884c <get_ldnumber+0x72>
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	429a      	cmp	r2, r3
 8008834:	d10a      	bne.n	800884c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d107      	bne.n	800884c <get_ldnumber+0x72>
					vol = (int)i;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	3301      	adds	r3, #1
 8008844:	617b      	str	r3, [r7, #20]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	e002      	b.n	8008856 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008854:	693b      	ldr	r3, [r7, #16]
}
 8008856:	4618      	mov	r0, r3
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
	...

08008864 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	70da      	strb	r2, [r3, #3]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f04f 32ff 	mov.w	r2, #4294967295
 800887a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff f8d8 	bl	8007a34 <move_window>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <check_fs+0x2a>
 800888a:	2304      	movs	r3, #4
 800888c:	e038      	b.n	8008900 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3334      	adds	r3, #52	; 0x34
 8008892:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fdea 	bl	8007470 <ld_word>
 800889c:	4603      	mov	r3, r0
 800889e:	461a      	mov	r2, r3
 80088a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d001      	beq.n	80088ac <check_fs+0x48>
 80088a8:	2303      	movs	r3, #3
 80088aa:	e029      	b.n	8008900 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088b2:	2be9      	cmp	r3, #233	; 0xe9
 80088b4:	d009      	beq.n	80088ca <check_fs+0x66>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088bc:	2beb      	cmp	r3, #235	; 0xeb
 80088be:	d11e      	bne.n	80088fe <check_fs+0x9a>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80088c6:	2b90      	cmp	r3, #144	; 0x90
 80088c8:	d119      	bne.n	80088fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3334      	adds	r3, #52	; 0x34
 80088ce:	3336      	adds	r3, #54	; 0x36
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fde5 	bl	80074a0 <ld_dword>
 80088d6:	4603      	mov	r3, r0
 80088d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80088dc:	4a0a      	ldr	r2, [pc, #40]	; (8008908 <check_fs+0xa4>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d101      	bne.n	80088e6 <check_fs+0x82>
 80088e2:	2300      	movs	r3, #0
 80088e4:	e00c      	b.n	8008900 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3334      	adds	r3, #52	; 0x34
 80088ea:	3352      	adds	r3, #82	; 0x52
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe fdd7 	bl	80074a0 <ld_dword>
 80088f2:	4603      	mov	r3, r0
 80088f4:	4a05      	ldr	r2, [pc, #20]	; (800890c <check_fs+0xa8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d101      	bne.n	80088fe <check_fs+0x9a>
 80088fa:	2300      	movs	r3, #0
 80088fc:	e000      	b.n	8008900 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80088fe:	2302      	movs	r3, #2
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	00544146 	.word	0x00544146
 800890c:	33544146 	.word	0x33544146

08008910 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b096      	sub	sp, #88	; 0x58
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7ff ff58 	bl	80087da <get_ldnumber>
 800892a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800892c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892e:	2b00      	cmp	r3, #0
 8008930:	da01      	bge.n	8008936 <find_volume+0x26>
 8008932:	230b      	movs	r3, #11
 8008934:	e236      	b.n	8008da4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008936:	4aac      	ldr	r2, [pc, #688]	; (8008be8 <find_volume+0x2d8>)
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800893e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <find_volume+0x3a>
 8008946:	230c      	movs	r3, #12
 8008948:	e22c      	b.n	8008da4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800894a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800894c:	f7fe fe90 	bl	8007670 <lock_fs>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <find_volume+0x4a>
 8008956:	230f      	movs	r3, #15
 8008958:	e224      	b.n	8008da4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800895e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	f023 0301 	bic.w	r3, r3, #1
 8008966:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01a      	beq.n	80089a6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008972:	785b      	ldrb	r3, [r3, #1]
 8008974:	4618      	mov	r0, r3
 8008976:	f7fe fcdd 	bl	8007334 <disk_status>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008980:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10c      	bne.n	80089a6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d007      	beq.n	80089a2 <find_volume+0x92>
 8008992:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008996:	f003 0304 	and.w	r3, r3, #4
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800899e:	230a      	movs	r3, #10
 80089a0:	e200      	b.n	8008da4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80089a2:	2300      	movs	r3, #0
 80089a4:	e1fe      	b.n	8008da4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	2200      	movs	r2, #0
 80089aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80089ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe fcd5 	bl	8007368 <disk_initialize>
 80089be:	4603      	mov	r3, r0
 80089c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80089c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80089d0:	2303      	movs	r3, #3
 80089d2:	e1e7      	b.n	8008da4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <find_volume+0xda>
 80089da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089de:	f003 0304 	and.w	r3, r3, #4
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80089e6:	230a      	movs	r3, #10
 80089e8:	e1dc      	b.n	8008da4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80089ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089f2:	f7ff ff37 	bl	8008864 <check_fs>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80089fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d14b      	bne.n	8008a9c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a04:	2300      	movs	r3, #0
 8008a06:	643b      	str	r3, [r7, #64]	; 0x40
 8008a08:	e01f      	b.n	8008a4a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008a18:	4413      	add	r3, r2
 8008a1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	3304      	adds	r3, #4
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d006      	beq.n	8008a34 <find_volume+0x124>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	3308      	adds	r3, #8
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fd38 	bl	80074a0 <ld_dword>
 8008a30:	4602      	mov	r2, r0
 8008a32:	e000      	b.n	8008a36 <find_volume+0x126>
 8008a34:	2200      	movs	r2, #0
 8008a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008a3e:	440b      	add	r3, r1
 8008a40:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a46:	3301      	adds	r3, #1
 8008a48:	643b      	str	r3, [r7, #64]	; 0x40
 8008a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d9dc      	bls.n	8008a0a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008a50:	2300      	movs	r3, #0
 8008a52:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <find_volume+0x150>
 8008a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008a68:	4413      	add	r3, r2
 8008a6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <find_volume+0x172>
 8008a76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a7a:	f7ff fef3 	bl	8008864 <check_fs>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	e000      	b.n	8008a84 <find_volume+0x174>
 8008a82:	2303      	movs	r3, #3
 8008a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d905      	bls.n	8008a9c <find_volume+0x18c>
 8008a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a92:	3301      	adds	r3, #1
 8008a94:	643b      	str	r3, [r7, #64]	; 0x40
 8008a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d9e1      	bls.n	8008a60 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d101      	bne.n	8008aa8 <find_volume+0x198>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e17d      	b.n	8008da4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d901      	bls.n	8008ab4 <find_volume+0x1a4>
 8008ab0:	230d      	movs	r3, #13
 8008ab2:	e177      	b.n	8008da4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab6:	3334      	adds	r3, #52	; 0x34
 8008ab8:	330b      	adds	r3, #11
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fcd8 	bl	8007470 <ld_word>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac6:	d001      	beq.n	8008acc <find_volume+0x1bc>
 8008ac8:	230d      	movs	r3, #13
 8008aca:	e16b      	b.n	8008da4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	3334      	adds	r3, #52	; 0x34
 8008ad0:	3316      	adds	r3, #22
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fccc 	bl	8007470 <ld_word>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d106      	bne.n	8008af0 <find_volume+0x1e0>
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	3334      	adds	r3, #52	; 0x34
 8008ae6:	3324      	adds	r3, #36	; 0x24
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fcd9 	bl	80074a0 <ld_dword>
 8008aee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008af4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	789b      	ldrb	r3, [r3, #2]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d005      	beq.n	8008b14 <find_volume+0x204>
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	789b      	ldrb	r3, [r3, #2]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d001      	beq.n	8008b14 <find_volume+0x204>
 8008b10:	230d      	movs	r3, #13
 8008b12:	e147      	b.n	8008da4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	789b      	ldrb	r3, [r3, #2]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b1c:	fb02 f303 	mul.w	r3, r2, r3
 8008b20:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	895b      	ldrh	r3, [r3, #10]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d008      	beq.n	8008b48 <find_volume+0x238>
 8008b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b38:	895b      	ldrh	r3, [r3, #10]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	895b      	ldrh	r3, [r3, #10]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	4013      	ands	r3, r2
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <find_volume+0x23c>
 8008b48:	230d      	movs	r3, #13
 8008b4a:	e12b      	b.n	8008da4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	3334      	adds	r3, #52	; 0x34
 8008b50:	3311      	adds	r3, #17
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fc8c 	bl	8007470 <ld_word>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	891b      	ldrh	r3, [r3, #8]
 8008b64:	f003 030f 	and.w	r3, r3, #15
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <find_volume+0x262>
 8008b6e:	230d      	movs	r3, #13
 8008b70:	e118      	b.n	8008da4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	3334      	adds	r3, #52	; 0x34
 8008b76:	3313      	adds	r3, #19
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fc79 	bl	8007470 <ld_word>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d106      	bne.n	8008b96 <find_volume+0x286>
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	3334      	adds	r3, #52	; 0x34
 8008b8c:	3320      	adds	r3, #32
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fc86 	bl	80074a0 <ld_dword>
 8008b94:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	3334      	adds	r3, #52	; 0x34
 8008b9a:	330e      	adds	r3, #14
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fc67 	bl	8007470 <ld_word>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008ba6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <find_volume+0x2a0>
 8008bac:	230d      	movs	r3, #13
 8008bae:	e0f9      	b.n	8008da4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008bb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb4:	4413      	add	r3, r2
 8008bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bb8:	8912      	ldrh	r2, [r2, #8]
 8008bba:	0912      	lsrs	r2, r2, #4
 8008bbc:	b292      	uxth	r2, r2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d201      	bcs.n	8008bce <find_volume+0x2be>
 8008bca:	230d      	movs	r3, #13
 8008bcc:	e0ea      	b.n	8008da4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bd6:	8952      	ldrh	r2, [r2, #10]
 8008bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d103      	bne.n	8008bec <find_volume+0x2dc>
 8008be4:	230d      	movs	r3, #13
 8008be6:	e0dd      	b.n	8008da4 <find_volume+0x494>
 8008be8:	20000658 	.word	0x20000658
		fmt = FS_FAT32;
 8008bec:	2303      	movs	r3, #3
 8008bee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d802      	bhi.n	8008c02 <find_volume+0x2f2>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d802      	bhi.n	8008c12 <find_volume+0x302>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	1c9a      	adds	r2, r3, #2
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c1e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008c20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c24:	441a      	add	r2, r3
 8008c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c28:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008c2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	441a      	add	r2, r3
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d11e      	bne.n	8008c7a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	3334      	adds	r3, #52	; 0x34
 8008c40:	332a      	adds	r3, #42	; 0x2a
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe fc14 	bl	8007470 <ld_word>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <find_volume+0x342>
 8008c4e:	230d      	movs	r3, #13
 8008c50:	e0a8      	b.n	8008da4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	891b      	ldrh	r3, [r3, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <find_volume+0x34e>
 8008c5a:	230d      	movs	r3, #13
 8008c5c:	e0a2      	b.n	8008da4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	3334      	adds	r3, #52	; 0x34
 8008c62:	332c      	adds	r3, #44	; 0x2c
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe fc1b 	bl	80074a0 <ld_dword>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	647b      	str	r3, [r7, #68]	; 0x44
 8008c78:	e01f      	b.n	8008cba <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	891b      	ldrh	r3, [r3, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <find_volume+0x376>
 8008c82:	230d      	movs	r3, #13
 8008c84:	e08e      	b.n	8008da4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8c:	441a      	add	r2, r3
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008c92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d103      	bne.n	8008ca2 <find_volume+0x392>
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	e00a      	b.n	8008cb8 <find_volume+0x3a8>
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	699a      	ldr	r2, [r3, #24]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	4413      	add	r3, r2
 8008cac:	085a      	lsrs	r2, r3, #1
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008cb8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbc:	69da      	ldr	r2, [r3, #28]
 8008cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008cc4:	0a5b      	lsrs	r3, r3, #9
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d201      	bcs.n	8008cce <find_volume+0x3be>
 8008cca:	230d      	movs	r3, #13
 8008ccc:	e06a      	b.n	8008da4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	615a      	str	r2, [r3, #20]
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce0:	2280      	movs	r2, #128	; 0x80
 8008ce2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008ce4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d149      	bne.n	8008d80 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cee:	3334      	adds	r3, #52	; 0x34
 8008cf0:	3330      	adds	r3, #48	; 0x30
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe fbbc 	bl	8007470 <ld_word>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d140      	bne.n	8008d80 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d00:	3301      	adds	r3, #1
 8008d02:	4619      	mov	r1, r3
 8008d04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d06:	f7fe fe95 	bl	8007a34 <move_window>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d137      	bne.n	8008d80 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	2200      	movs	r2, #0
 8008d14:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d18:	3334      	adds	r3, #52	; 0x34
 8008d1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fba6 	bl	8007470 <ld_word>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d127      	bne.n	8008d80 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	3334      	adds	r3, #52	; 0x34
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fe fbb3 	bl	80074a0 <ld_dword>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4a1b      	ldr	r2, [pc, #108]	; (8008dac <find_volume+0x49c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d11e      	bne.n	8008d80 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	3334      	adds	r3, #52	; 0x34
 8008d46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fba8 	bl	80074a0 <ld_dword>
 8008d50:	4603      	mov	r3, r0
 8008d52:	4a17      	ldr	r2, [pc, #92]	; (8008db0 <find_volume+0x4a0>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d113      	bne.n	8008d80 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	3334      	adds	r3, #52	; 0x34
 8008d5c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fe fb9d 	bl	80074a0 <ld_dword>
 8008d66:	4602      	mov	r2, r0
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	3334      	adds	r3, #52	; 0x34
 8008d70:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fe fb93 	bl	80074a0 <ld_dword>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008d86:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d88:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <find_volume+0x4a4>)
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	4b08      	ldr	r3, [pc, #32]	; (8008db4 <find_volume+0x4a4>)
 8008d92:	801a      	strh	r2, [r3, #0]
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <find_volume+0x4a4>)
 8008d96:	881a      	ldrh	r2, [r3, #0]
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d9e:	f7fe fde1 	bl	8007964 <clear_lock>
#endif
	return FR_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3758      	adds	r7, #88	; 0x58
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	41615252 	.word	0x41615252
 8008db0:	61417272 	.word	0x61417272
 8008db4:	2000065c 	.word	0x2000065c

08008db8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008dc2:	2309      	movs	r3, #9
 8008dc4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d02e      	beq.n	8008e2a <validate+0x72>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d02a      	beq.n	8008e2a <validate+0x72>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d025      	beq.n	8008e2a <validate+0x72>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	889a      	ldrh	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	88db      	ldrh	r3, [r3, #6]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d11e      	bne.n	8008e2a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fc3d 	bl	8007670 <lock_fs>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d014      	beq.n	8008e26 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	785b      	ldrb	r3, [r3, #1]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe fa96 	bl	8007334 <disk_status>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d102      	bne.n	8008e18 <validate+0x60>
				res = FR_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]
 8008e16:	e008      	b.n	8008e2a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fc3c 	bl	800769c <unlock_fs>
 8008e24:	e001      	b.n	8008e2a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008e26:	230f      	movs	r3, #15
 8008e28:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <validate+0x7e>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	e000      	b.n	8008e38 <validate+0x80>
 8008e36:	2300      	movs	r3, #0
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	6013      	str	r3, [r2, #0]
	return res;
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	4613      	mov	r3, r2
 8008e54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fcbb 	bl	80087da <get_ldnumber>
 8008e64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da01      	bge.n	8008e70 <f_mount+0x28>
 8008e6c:	230b      	movs	r3, #11
 8008e6e:	e048      	b.n	8008f02 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008e70:	4a26      	ldr	r2, [pc, #152]	; (8008f0c <f_mount+0xc4>)
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00f      	beq.n	8008ea0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008e80:	69b8      	ldr	r0, [r7, #24]
 8008e82:	f7fe fd6f 	bl	8007964 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fcd8 	bl	8009840 <ff_del_syncobj>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <f_mount+0x52>
 8008e96:	2302      	movs	r3, #2
 8008e98:	e033      	b.n	8008f02 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00f      	beq.n	8008ec6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	330c      	adds	r3, #12
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	f000 fca7 	bl	800980a <ff_cre_syncobj>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <f_mount+0x7e>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e01d      	b.n	8008f02 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	4910      	ldr	r1, [pc, #64]	; (8008f0c <f_mount+0xc4>)
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <f_mount+0x94>
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d001      	beq.n	8008ee0 <f_mount+0x98>
 8008edc:	2300      	movs	r3, #0
 8008ede:	e010      	b.n	8008f02 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008ee0:	f107 010c 	add.w	r1, r7, #12
 8008ee4:	f107 0308 	add.w	r3, r7, #8
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7ff fd10 	bl	8008910 <find_volume>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	7dfa      	ldrb	r2, [r7, #23]
 8008ef8:	4611      	mov	r1, r2
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fe fbce 	bl	800769c <unlock_fs>
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3720      	adds	r7, #32
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000658 	.word	0x20000658

08008f10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b098      	sub	sp, #96	; 0x60
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <f_open+0x18>
 8008f24:	2309      	movs	r3, #9
 8008f26:	e1b4      	b.n	8009292 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008f30:	79fa      	ldrb	r2, [r7, #7]
 8008f32:	f107 0110 	add.w	r1, r7, #16
 8008f36:	f107 0308 	add.w	r3, r7, #8
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff fce8 	bl	8008910 <find_volume>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008f46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f040 8191 	bne.w	8009272 <f_open+0x362>
		dj.obj.fs = fs;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	f107 0314 	add.w	r3, r7, #20
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff fbcb 	bl	80086f8 <follow_path>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11a      	bne.n	8008fa6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008f70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f74:	b25b      	sxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da03      	bge.n	8008f82 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008f7a:	2306      	movs	r3, #6
 8008f7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f80:	e011      	b.n	8008fa6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bf14      	ite	ne
 8008f8c:	2301      	movne	r3, #1
 8008f8e:	2300      	moveq	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	f107 0314 	add.w	r3, r7, #20
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fb9a 	bl	80076d4 <chk_lock>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	f003 031c 	and.w	r3, r3, #28
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d07f      	beq.n	80090b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d017      	beq.n	8008fe8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	d10e      	bne.n	8008fde <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008fc0:	f7fe fbe4 	bl	800778c <enq_lock>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d006      	beq.n	8008fd8 <f_open+0xc8>
 8008fca:	f107 0314 	add.w	r3, r7, #20
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff facb 	bl	800856a <dir_register>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	e000      	b.n	8008fda <f_open+0xca>
 8008fd8:	2312      	movs	r3, #18
 8008fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	f043 0308 	orr.w	r3, r3, #8
 8008fe4:	71fb      	strb	r3, [r7, #7]
 8008fe6:	e010      	b.n	800900a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008fe8:	7ebb      	ldrb	r3, [r7, #26]
 8008fea:	f003 0311 	and.w	r3, r3, #17
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <f_open+0xea>
					res = FR_DENIED;
 8008ff2:	2307      	movs	r3, #7
 8008ff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ff8:	e007      	b.n	800900a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <f_open+0xfa>
 8009004:	2308      	movs	r3, #8
 8009006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800900a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800900e:	2b00      	cmp	r3, #0
 8009010:	d168      	bne.n	80090e4 <f_open+0x1d4>
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b00      	cmp	r3, #0
 800901a:	d063      	beq.n	80090e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800901c:	f7fd fc4c 	bl	80068b8 <get_fattime>
 8009020:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009024:	330e      	adds	r3, #14
 8009026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fa77 	bl	800751c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800902e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009030:	3316      	adds	r3, #22
 8009032:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fa71 	bl	800751c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	330b      	adds	r3, #11
 800903e:	2220      	movs	r2, #32
 8009040:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff f9fa 	bl	8008442 <ld_clust>
 800904e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009054:	2200      	movs	r2, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff fa12 	bl	8008480 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800905c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905e:	331c      	adds	r3, #28
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fa5a 	bl	800751c <st_dword>
					fs->wflag = 1;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	2201      	movs	r2, #1
 800906c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800906e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d037      	beq.n	80090e4 <f_open+0x1d4>
						dw = fs->winsect;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009078:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800907a:	f107 0314 	add.w	r3, r7, #20
 800907e:	2200      	movs	r2, #0
 8009080:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe ff25 	bl	8007ed2 <remove_chain>
 8009088:	4603      	mov	r3, r0
 800908a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800908e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009092:	2b00      	cmp	r3, #0
 8009094:	d126      	bne.n	80090e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fcca 	bl	8007a34 <move_window>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090aa:	3a01      	subs	r2, #1
 80090ac:	611a      	str	r2, [r3, #16]
 80090ae:	e019      	b.n	80090e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80090b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d115      	bne.n	80090e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80090b8:	7ebb      	ldrb	r3, [r7, #26]
 80090ba:	f003 0310 	and.w	r3, r3, #16
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <f_open+0x1ba>
					res = FR_NO_FILE;
 80090c2:	2304      	movs	r3, #4
 80090c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80090c8:	e00c      	b.n	80090e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d007      	beq.n	80090e4 <f_open+0x1d4>
 80090d4:	7ebb      	ldrb	r3, [r7, #26]
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <f_open+0x1d4>
						res = FR_DENIED;
 80090de:	2307      	movs	r3, #7
 80090e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80090e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d128      	bne.n	800913e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80090ec:	79fb      	ldrb	r3, [r7, #7]
 80090ee:	f003 0308 	and.w	r3, r3, #8
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	bf14      	ite	ne
 8009116:	2301      	movne	r3, #1
 8009118:	2300      	moveq	r3, #0
 800911a:	b2db      	uxtb	r3, r3
 800911c:	461a      	mov	r2, r3
 800911e:	f107 0314 	add.w	r3, r7, #20
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fb53 	bl	80077d0 <inc_lock>
 800912a:	4602      	mov	r2, r0
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d102      	bne.n	800913e <f_open+0x22e>
 8009138:	2302      	movs	r3, #2
 800913a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800913e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009142:	2b00      	cmp	r3, #0
 8009144:	f040 8095 	bne.w	8009272 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff f977 	bl	8008442 <ld_clust>
 8009154:	4602      	mov	r2, r0
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	331c      	adds	r3, #28
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe f99e 	bl	80074a0 <ld_dword>
 8009164:	4602      	mov	r2, r0
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	88da      	ldrh	r2, [r3, #6]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	79fa      	ldrb	r2, [r7, #7]
 8009182:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3330      	adds	r3, #48	; 0x30
 800919a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800919e:	2100      	movs	r1, #0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe fa08 	bl	80075b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d060      	beq.n	8009272 <f_open+0x362>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d05c      	beq.n	8009272 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	895b      	ldrh	r3, [r3, #10]
 80091c4:	025b      	lsls	r3, r3, #9
 80091c6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	657b      	str	r3, [r7, #84]	; 0x54
 80091d4:	e016      	b.n	8009204 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fce5 	bl	8007baa <get_fat>
 80091e0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80091e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d802      	bhi.n	80091ee <f_open+0x2de>
 80091e8:	2302      	movs	r3, #2
 80091ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80091ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d102      	bne.n	80091fc <f_open+0x2ec>
 80091f6:	2301      	movs	r3, #1
 80091f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80091fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	657b      	str	r3, [r7, #84]	; 0x54
 8009204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009208:	2b00      	cmp	r3, #0
 800920a:	d103      	bne.n	8009214 <f_open+0x304>
 800920c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800920e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009210:	429a      	cmp	r2, r3
 8009212:	d8e0      	bhi.n	80091d6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009218:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800921a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800921e:	2b00      	cmp	r3, #0
 8009220:	d127      	bne.n	8009272 <f_open+0x362>
 8009222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009228:	2b00      	cmp	r3, #0
 800922a:	d022      	beq.n	8009272 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009230:	4618      	mov	r0, r3
 8009232:	f7fe fc9b 	bl	8007b6c <clust2sect>
 8009236:	6478      	str	r0, [r7, #68]	; 0x44
 8009238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923a:	2b00      	cmp	r3, #0
 800923c:	d103      	bne.n	8009246 <f_open+0x336>
						res = FR_INT_ERR;
 800923e:	2302      	movs	r3, #2
 8009240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009244:	e015      	b.n	8009272 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009248:	0a5a      	lsrs	r2, r3, #9
 800924a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924c:	441a      	add	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	7858      	ldrb	r0, [r3, #1]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6a1a      	ldr	r2, [r3, #32]
 8009260:	2301      	movs	r3, #1
 8009262:	f7fe f8a7 	bl	80073b4 <disk_read>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <f_open+0x362>
 800926c:	2301      	movs	r3, #1
 800926e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <f_open+0x370>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009286:	4611      	mov	r1, r2
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fa07 	bl	800769c <unlock_fs>
 800928e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009292:	4618      	mov	r0, r3
 8009294:	3760      	adds	r7, #96	; 0x60
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b08c      	sub	sp, #48	; 0x30
 800929e:	af00      	add	r7, sp, #0
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	60b9      	str	r1, [r7, #8]
 80092a4:	607a      	str	r2, [r7, #4]
 80092a6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f107 0210 	add.w	r2, r7, #16
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fd7c 	bl	8008db8 <validate>
 80092c0:	4603      	mov	r3, r0
 80092c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80092c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d107      	bne.n	80092de <f_write+0x44>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	7d5b      	ldrb	r3, [r3, #21]
 80092d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80092d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <f_write+0x58>
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80092e4:	4611      	mov	r1, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe f9d8 	bl	800769c <unlock_fs>
 80092ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092f0:	e173      	b.n	80095da <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	7d1b      	ldrb	r3, [r3, #20]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d106      	bne.n	800930c <f_write+0x72>
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2107      	movs	r1, #7
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe f9ca 	bl	800769c <unlock_fs>
 8009308:	2307      	movs	r3, #7
 800930a:	e166      	b.n	80095da <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	699a      	ldr	r2, [r3, #24]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	441a      	add	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	429a      	cmp	r2, r3
 800931a:	f080 814b 	bcs.w	80095b4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	43db      	mvns	r3, r3
 8009324:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009326:	e145      	b.n	80095b4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009330:	2b00      	cmp	r3, #0
 8009332:	f040 8101 	bne.w	8009538 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	0a5b      	lsrs	r3, r3, #9
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	8952      	ldrh	r2, [r2, #10]
 8009340:	3a01      	subs	r2, #1
 8009342:	4013      	ands	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d14d      	bne.n	80093e8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10c      	bne.n	800936e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935c:	2b00      	cmp	r3, #0
 800935e:	d11a      	bne.n	8009396 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2100      	movs	r1, #0
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe fe19 	bl	8007f9c <create_chain>
 800936a:	62b8      	str	r0, [r7, #40]	; 0x28
 800936c:	e013      	b.n	8009396 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d007      	beq.n	8009386 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	4619      	mov	r1, r3
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f7fe fea5 	bl	80080cc <clmt_clust>
 8009382:	62b8      	str	r0, [r7, #40]	; 0x28
 8009384:	e007      	b.n	8009396 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f7fe fe04 	bl	8007f9c <create_chain>
 8009394:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8110 	beq.w	80095be <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800939e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d109      	bne.n	80093b8 <f_write+0x11e>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2202      	movs	r2, #2
 80093a8:	755a      	strb	r2, [r3, #21]
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	2102      	movs	r1, #2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe f974 	bl	800769c <unlock_fs>
 80093b4:	2302      	movs	r3, #2
 80093b6:	e110      	b.n	80095da <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093be:	d109      	bne.n	80093d4 <f_write+0x13a>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2201      	movs	r2, #1
 80093c4:	755a      	strb	r2, [r3, #21]
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2101      	movs	r1, #1
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe f966 	bl	800769c <unlock_fs>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e102      	b.n	80095da <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093d8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <f_write+0x14e>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	7d1b      	ldrb	r3, [r3, #20]
 80093ec:	b25b      	sxtb	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	da1d      	bge.n	800942e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	7858      	ldrb	r0, [r3, #1]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6a1a      	ldr	r2, [r3, #32]
 8009400:	2301      	movs	r3, #1
 8009402:	f7fd fff7 	bl	80073f4 <disk_write>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d009      	beq.n	8009420 <f_write+0x186>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2201      	movs	r2, #1
 8009410:	755a      	strb	r2, [r3, #21]
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe f940 	bl	800769c <unlock_fs>
 800941c:	2301      	movs	r3, #1
 800941e:	e0dc      	b.n	80095da <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	7d1b      	ldrb	r3, [r3, #20]
 8009424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009428:	b2da      	uxtb	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	4619      	mov	r1, r3
 8009436:	4610      	mov	r0, r2
 8009438:	f7fe fb98 	bl	8007b6c <clust2sect>
 800943c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d109      	bne.n	8009458 <f_write+0x1be>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2202      	movs	r2, #2
 8009448:	755a      	strb	r2, [r3, #21]
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2102      	movs	r1, #2
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe f924 	bl	800769c <unlock_fs>
 8009454:	2302      	movs	r3, #2
 8009456:	e0c0      	b.n	80095da <f_write+0x340>
			sect += csect;
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	4413      	add	r3, r2
 800945e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	0a5b      	lsrs	r3, r3, #9
 8009464:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d041      	beq.n	80094f0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	4413      	add	r3, r2
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	8952      	ldrh	r2, [r2, #10]
 8009476:	4293      	cmp	r3, r2
 8009478:	d905      	bls.n	8009486 <f_write+0x1ec>
					cc = fs->csize - csect;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	895b      	ldrh	r3, [r3, #10]
 800947e:	461a      	mov	r2, r3
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	7858      	ldrb	r0, [r3, #1]
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	69f9      	ldr	r1, [r7, #28]
 8009490:	f7fd ffb0 	bl	80073f4 <disk_write>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d009      	beq.n	80094ae <f_write+0x214>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	755a      	strb	r2, [r3, #21]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	2101      	movs	r1, #1
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe f8f9 	bl	800769c <unlock_fs>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e095      	b.n	80095da <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6a1a      	ldr	r2, [r3, #32]
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	6a3a      	ldr	r2, [r7, #32]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d915      	bls.n	80094e8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a1a      	ldr	r2, [r3, #32]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	025b      	lsls	r3, r3, #9
 80094cc:	69fa      	ldr	r2, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094d4:	4619      	mov	r1, r3
 80094d6:	f7fe f84d 	bl	8007574 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	7d1b      	ldrb	r3, [r3, #20]
 80094de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	025b      	lsls	r3, r3, #9
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80094ee:	e044      	b.n	800957a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d01b      	beq.n	8009532 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	699a      	ldr	r2, [r3, #24]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009502:	429a      	cmp	r2, r3
 8009504:	d215      	bcs.n	8009532 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	7858      	ldrb	r0, [r3, #1]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009510:	2301      	movs	r3, #1
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	f7fd ff4e 	bl	80073b4 <disk_read>
 8009518:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800951a:	2b00      	cmp	r3, #0
 800951c:	d009      	beq.n	8009532 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2201      	movs	r2, #1
 8009522:	755a      	strb	r2, [r3, #21]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	2101      	movs	r1, #1
 8009528:	4618      	mov	r0, r3
 800952a:	f7fe f8b7 	bl	800769c <unlock_fs>
 800952e:	2301      	movs	r3, #1
 8009530:	e053      	b.n	80095da <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009540:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009544:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	429a      	cmp	r2, r3
 800954c:	d901      	bls.n	8009552 <f_write+0x2b8>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009560:	4413      	add	r3, r2
 8009562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009564:	69f9      	ldr	r1, [r7, #28]
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe f804 	bl	8007574 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	7d1b      	ldrb	r3, [r3, #20]
 8009570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009574:	b2da      	uxtb	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	4413      	add	r3, r2
 8009580:	61fb      	str	r3, [r7, #28]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009588:	441a      	add	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	619a      	str	r2, [r3, #24]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	429a      	cmp	r2, r3
 8009598:	bf38      	it	cc
 800959a:	461a      	movcc	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	60da      	str	r2, [r3, #12]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	441a      	add	r2, r3
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f47f aeb6 	bne.w	8009328 <f_write+0x8e>
 80095bc:	e000      	b.n	80095c0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095be:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	7d1b      	ldrb	r3, [r3, #20]
 80095c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2100      	movs	r1, #0
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe f862 	bl	800769c <unlock_fs>
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3730      	adds	r7, #48	; 0x30
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f107 0208 	add.w	r2, r7, #8
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fbe0 	bl	8008db8 <validate>
 80095f8:	4603      	mov	r3, r0
 80095fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d16d      	bne.n	80096de <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	7d1b      	ldrb	r3, [r3, #20]
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d067      	beq.n	80096de <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	7d1b      	ldrb	r3, [r3, #20]
 8009612:	b25b      	sxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	da1a      	bge.n	800964e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	7858      	ldrb	r0, [r3, #1]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1a      	ldr	r2, [r3, #32]
 8009626:	2301      	movs	r3, #1
 8009628:	f7fd fee4 	bl	80073f4 <disk_write>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d006      	beq.n	8009640 <f_sync+0x5e>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2101      	movs	r1, #1
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe f830 	bl	800769c <unlock_fs>
 800963c:	2301      	movs	r3, #1
 800963e:	e055      	b.n	80096ec <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	7d1b      	ldrb	r3, [r3, #20]
 8009644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009648:	b2da      	uxtb	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800964e:	f7fd f933 	bl	80068b8 <get_fattime>
 8009652:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f7fe f9e9 	bl	8007a34 <move_window>
 8009662:	4603      	mov	r3, r0
 8009664:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d138      	bne.n	80096de <f_sync+0xfc>
					dir = fp->dir_ptr;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009670:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	330b      	adds	r3, #11
 8009676:	781a      	ldrb	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	330b      	adds	r3, #11
 800967c:	f042 0220 	orr.w	r2, r2, #32
 8009680:	b2d2      	uxtb	r2, r2
 8009682:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	461a      	mov	r2, r3
 800968e:	68f9      	ldr	r1, [r7, #12]
 8009690:	f7fe fef6 	bl	8008480 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f103 021c 	add.w	r2, r3, #28
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	4619      	mov	r1, r3
 80096a0:	4610      	mov	r0, r2
 80096a2:	f7fd ff3b 	bl	800751c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3316      	adds	r3, #22
 80096aa:	6939      	ldr	r1, [r7, #16]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fd ff35 	bl	800751c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3312      	adds	r3, #18
 80096b6:	2100      	movs	r1, #0
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fd ff14 	bl	80074e6 <st_word>
					fs->wflag = 1;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2201      	movs	r2, #1
 80096c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe f9e2 	bl	8007a90 <sync_fs>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	7d1b      	ldrb	r3, [r3, #20]
 80096d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	7dfa      	ldrb	r2, [r7, #23]
 80096e2:	4611      	mov	r1, r2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fd ffd9 	bl	800769c <unlock_fs>
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff ff70 	bl	80095e2 <f_sync>
 8009702:	4603      	mov	r3, r0
 8009704:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d11d      	bne.n	8009748 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f107 0208 	add.w	r2, r7, #8
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff fb4f 	bl	8008db8 <validate>
 800971a:	4603      	mov	r3, r0
 800971c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d111      	bne.n	8009748 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe f8df 	bl	80078ec <dec_lock>
 800972e:	4603      	mov	r3, r0
 8009730:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2100      	movs	r1, #0
 8009742:	4618      	mov	r0, r3
 8009744:	f7fd ffaa 	bl	800769c <unlock_fs>
#endif
		}
	}
	return res;
 8009748:	7bfb      	ldrb	r3, [r7, #15]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009762:	2301      	movs	r3, #1
 8009764:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800976a:	4b1f      	ldr	r3, [pc, #124]	; (80097e8 <FATFS_LinkDriverEx+0x94>)
 800976c:	7a5b      	ldrb	r3, [r3, #9]
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d131      	bne.n	80097d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009774:	4b1c      	ldr	r3, [pc, #112]	; (80097e8 <FATFS_LinkDriverEx+0x94>)
 8009776:	7a5b      	ldrb	r3, [r3, #9]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	461a      	mov	r2, r3
 800977c:	4b1a      	ldr	r3, [pc, #104]	; (80097e8 <FATFS_LinkDriverEx+0x94>)
 800977e:	2100      	movs	r1, #0
 8009780:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009782:	4b19      	ldr	r3, [pc, #100]	; (80097e8 <FATFS_LinkDriverEx+0x94>)
 8009784:	7a5b      	ldrb	r3, [r3, #9]
 8009786:	b2db      	uxtb	r3, r3
 8009788:	4a17      	ldr	r2, [pc, #92]	; (80097e8 <FATFS_LinkDriverEx+0x94>)
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009792:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <FATFS_LinkDriverEx+0x94>)
 8009794:	7a5b      	ldrb	r3, [r3, #9]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	461a      	mov	r2, r3
 800979a:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <FATFS_LinkDriverEx+0x94>)
 800979c:	4413      	add	r3, r2
 800979e:	79fa      	ldrb	r2, [r7, #7]
 80097a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80097a2:	4b11      	ldr	r3, [pc, #68]	; (80097e8 <FATFS_LinkDriverEx+0x94>)
 80097a4:	7a5b      	ldrb	r3, [r3, #9]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	b2d1      	uxtb	r1, r2
 80097ac:	4a0e      	ldr	r2, [pc, #56]	; (80097e8 <FATFS_LinkDriverEx+0x94>)
 80097ae:	7251      	strb	r1, [r2, #9]
 80097b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80097b2:	7dbb      	ldrb	r3, [r7, #22]
 80097b4:	3330      	adds	r3, #48	; 0x30
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	3301      	adds	r3, #1
 80097c0:	223a      	movs	r2, #58	; 0x3a
 80097c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	3302      	adds	r3, #2
 80097c8:	222f      	movs	r2, #47	; 0x2f
 80097ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	3303      	adds	r3, #3
 80097d0:	2200      	movs	r2, #0
 80097d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	20000680 	.word	0x20000680

080097ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80097f6:	2200      	movs	r2, #0
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff ffaa 	bl	8009754 <FATFS_LinkDriverEx>
 8009800:	4603      	mov	r3, r0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	4603      	mov	r3, r0
 8009812:	6039      	str	r1, [r7, #0]
 8009814:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009816:	2200      	movs	r2, #0
 8009818:	2101      	movs	r1, #1
 800981a:	2001      	movs	r0, #1
 800981c:	f000 f977 	bl	8009b0e <osSemaphoreNew>
 8009820:	4602      	mov	r2, r0
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	bf14      	ite	ne
 800982e:	2301      	movne	r3, #1
 8009830:	2300      	moveq	r3, #0
 8009832:	b2db      	uxtb	r3, r3
 8009834:	60fb      	str	r3, [r7, #12]

    return ret;
 8009836:	68fb      	ldr	r3, [r7, #12]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fa7f 	bl	8009d4c <osSemaphoreDelete>
#endif
    return 1;
 800984e:	2301      	movs	r3, #1
}
 8009850:	4618      	mov	r0, r3
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8009864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f9d9 	bl	8009c20 <osSemaphoreAcquire>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009878:	68fb      	ldr	r3, [r7, #12]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa1a 	bl	8009cc4 <osSemaphoreRelease>
#endif
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <__NVIC_SetPriority>:
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	6039      	str	r1, [r7, #0]
 80098a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	db0a      	blt.n	80098c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	490c      	ldr	r1, [pc, #48]	; (80098e4 <__NVIC_SetPriority+0x4c>)
 80098b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b6:	0112      	lsls	r2, r2, #4
 80098b8:	b2d2      	uxtb	r2, r2
 80098ba:	440b      	add	r3, r1
 80098bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80098c0:	e00a      	b.n	80098d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	4908      	ldr	r1, [pc, #32]	; (80098e8 <__NVIC_SetPriority+0x50>)
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	3b04      	subs	r3, #4
 80098d0:	0112      	lsls	r2, r2, #4
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	440b      	add	r3, r1
 80098d6:	761a      	strb	r2, [r3, #24]
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	e000e100 	.word	0xe000e100
 80098e8:	e000ed00 	.word	0xe000ed00

080098ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <SysTick_Handler+0x1c>)
 80098f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80098f4:	f002 f962 	bl	800bbbc <xTaskGetSchedulerState>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d001      	beq.n	8009902 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098fe:	f003 f84b 	bl	800c998 <xPortSysTickHandler>
  }
}
 8009902:	bf00      	nop
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	e000e010 	.word	0xe000e010

0800990c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009910:	2100      	movs	r1, #0
 8009912:	f06f 0004 	mvn.w	r0, #4
 8009916:	f7ff ffbf 	bl	8009898 <__NVIC_SetPriority>
#endif
}
 800991a:	bf00      	nop
 800991c:	bd80      	pop	{r7, pc}
	...

08009920 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009926:	f3ef 8305 	mrs	r3, IPSR
 800992a:	603b      	str	r3, [r7, #0]
  return(result);
 800992c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009932:	f06f 0305 	mvn.w	r3, #5
 8009936:	607b      	str	r3, [r7, #4]
 8009938:	e00c      	b.n	8009954 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800993a:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <osKernelInitialize+0x44>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d105      	bne.n	800994e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009942:	4b08      	ldr	r3, [pc, #32]	; (8009964 <osKernelInitialize+0x44>)
 8009944:	2201      	movs	r2, #1
 8009946:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009948:	2300      	movs	r3, #0
 800994a:	607b      	str	r3, [r7, #4]
 800994c:	e002      	b.n	8009954 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009954:	687b      	ldr	r3, [r7, #4]
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	2000068c 	.word	0x2000068c

08009968 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800996e:	f3ef 8305 	mrs	r3, IPSR
 8009972:	603b      	str	r3, [r7, #0]
  return(result);
 8009974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <osKernelStart+0x1a>
    stat = osErrorISR;
 800997a:	f06f 0305 	mvn.w	r3, #5
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	e010      	b.n	80099a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009982:	4b0b      	ldr	r3, [pc, #44]	; (80099b0 <osKernelStart+0x48>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d109      	bne.n	800999e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800998a:	f7ff ffbf 	bl	800990c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800998e:	4b08      	ldr	r3, [pc, #32]	; (80099b0 <osKernelStart+0x48>)
 8009990:	2202      	movs	r2, #2
 8009992:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009994:	f001 fcca 	bl	800b32c <vTaskStartScheduler>
      stat = osOK;
 8009998:	2300      	movs	r3, #0
 800999a:	607b      	str	r3, [r7, #4]
 800999c:	e002      	b.n	80099a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800999e:	f04f 33ff 	mov.w	r3, #4294967295
 80099a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099a4:	687b      	ldr	r3, [r7, #4]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	2000068c 	.word	0x2000068c

080099b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08e      	sub	sp, #56	; 0x38
 80099b8:	af04      	add	r7, sp, #16
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80099c0:	2300      	movs	r3, #0
 80099c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099c4:	f3ef 8305 	mrs	r3, IPSR
 80099c8:	617b      	str	r3, [r7, #20]
  return(result);
 80099ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d17e      	bne.n	8009ace <osThreadNew+0x11a>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d07b      	beq.n	8009ace <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80099d6:	2340      	movs	r3, #64	; 0x40
 80099d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80099da:	2318      	movs	r3, #24
 80099dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80099e2:	f04f 33ff 	mov.w	r3, #4294967295
 80099e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d045      	beq.n	8009a7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <osThreadNew+0x48>
        name = attr->name;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d008      	beq.n	8009a22 <osThreadNew+0x6e>
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	2b38      	cmp	r3, #56	; 0x38
 8009a14:	d805      	bhi.n	8009a22 <osThreadNew+0x6e>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <osThreadNew+0x72>
        return (NULL);
 8009a22:	2300      	movs	r3, #0
 8009a24:	e054      	b.n	8009ad0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	089b      	lsrs	r3, r3, #2
 8009a34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00e      	beq.n	8009a5c <osThreadNew+0xa8>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	2b5b      	cmp	r3, #91	; 0x5b
 8009a44:	d90a      	bls.n	8009a5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d006      	beq.n	8009a5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <osThreadNew+0xa8>
        mem = 1;
 8009a56:	2301      	movs	r3, #1
 8009a58:	61bb      	str	r3, [r7, #24]
 8009a5a:	e010      	b.n	8009a7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10c      	bne.n	8009a7e <osThreadNew+0xca>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d108      	bne.n	8009a7e <osThreadNew+0xca>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d104      	bne.n	8009a7e <osThreadNew+0xca>
          mem = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61bb      	str	r3, [r7, #24]
 8009a78:	e001      	b.n	8009a7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d110      	bne.n	8009aa6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a8c:	9202      	str	r2, [sp, #8]
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	6a3a      	ldr	r2, [r7, #32]
 8009a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f001 fa70 	bl	800af80 <xTaskCreateStatic>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	613b      	str	r3, [r7, #16]
 8009aa4:	e013      	b.n	8009ace <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d110      	bne.n	8009ace <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	f107 0310 	add.w	r3, r7, #16
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f001 fabb 	bl	800b03a <xTaskCreate>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d001      	beq.n	8009ace <osThreadNew+0x11a>
            hTask = NULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ace:	693b      	ldr	r3, [r7, #16]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3728      	adds	r7, #40	; 0x28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae0:	f3ef 8305 	mrs	r3, IPSR
 8009ae4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <osDelay+0x1c>
    stat = osErrorISR;
 8009aec:	f06f 0305 	mvn.w	r3, #5
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	e007      	b.n	8009b04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f001 fbe0 	bl	800b2c4 <vTaskDelay>
    }
  }

  return (stat);
 8009b04:	68fb      	ldr	r3, [r7, #12]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b08a      	sub	sp, #40	; 0x28
 8009b12:	af02      	add	r7, sp, #8
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b1e:	f3ef 8305 	mrs	r3, IPSR
 8009b22:	613b      	str	r3, [r7, #16]
  return(result);
 8009b24:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d175      	bne.n	8009c16 <osSemaphoreNew+0x108>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d072      	beq.n	8009c16 <osSemaphoreNew+0x108>
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d86e      	bhi.n	8009c16 <osSemaphoreNew+0x108>
    mem = -1;
 8009b38:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d015      	beq.n	8009b70 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d006      	beq.n	8009b5a <osSemaphoreNew+0x4c>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b4f      	cmp	r3, #79	; 0x4f
 8009b52:	d902      	bls.n	8009b5a <osSemaphoreNew+0x4c>
        mem = 1;
 8009b54:	2301      	movs	r3, #1
 8009b56:	61bb      	str	r3, [r7, #24]
 8009b58:	e00c      	b.n	8009b74 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d108      	bne.n	8009b74 <osSemaphoreNew+0x66>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d104      	bne.n	8009b74 <osSemaphoreNew+0x66>
          mem = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	61bb      	str	r3, [r7, #24]
 8009b6e:	e001      	b.n	8009b74 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7a:	d04c      	beq.n	8009c16 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d128      	bne.n	8009bd4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d10a      	bne.n	8009b9e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	9200      	str	r2, [sp, #0]
 8009b90:	2200      	movs	r2, #0
 8009b92:	2100      	movs	r1, #0
 8009b94:	2001      	movs	r0, #1
 8009b96:	f000 fa4d 	bl	800a034 <xQueueGenericCreateStatic>
 8009b9a:	61f8      	str	r0, [r7, #28]
 8009b9c:	e005      	b.n	8009baa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009b9e:	2203      	movs	r2, #3
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	f000 fabe 	bl	800a124 <xQueueGenericCreate>
 8009ba8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d022      	beq.n	8009bf6 <osSemaphoreNew+0xe8>
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d01f      	beq.n	8009bf6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2100      	movs	r1, #0
 8009bbc:	69f8      	ldr	r0, [r7, #28]
 8009bbe:	f000 fb79 	bl	800a2b4 <xQueueGenericSend>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d016      	beq.n	8009bf6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009bc8:	69f8      	ldr	r0, [r7, #28]
 8009bca:	f001 f805 	bl	800abd8 <vQueueDelete>
            hSemaphore = NULL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61fb      	str	r3, [r7, #28]
 8009bd2:	e010      	b.n	8009bf6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d108      	bne.n	8009bec <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	461a      	mov	r2, r3
 8009be0:	68b9      	ldr	r1, [r7, #8]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 fafb 	bl	800a1de <xQueueCreateCountingSemaphoreStatic>
 8009be8:	61f8      	str	r0, [r7, #28]
 8009bea:	e004      	b.n	8009bf6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 fb2c 	bl	800a24c <xQueueCreateCountingSemaphore>
 8009bf4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00c      	beq.n	8009c16 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	e001      	b.n	8009c0e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009c0e:	6979      	ldr	r1, [r7, #20]
 8009c10:	69f8      	ldr	r0, [r7, #28]
 8009c12:	f001 f92d 	bl	800ae70 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d103      	bne.n	8009c40 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009c38:	f06f 0303 	mvn.w	r3, #3
 8009c3c:	617b      	str	r3, [r7, #20]
 8009c3e:	e039      	b.n	8009cb4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c40:	f3ef 8305 	mrs	r3, IPSR
 8009c44:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c46:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d022      	beq.n	8009c92 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009c52:	f06f 0303 	mvn.w	r3, #3
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	e02c      	b.n	8009cb4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009c5e:	f107 0308 	add.w	r3, r7, #8
 8009c62:	461a      	mov	r2, r3
 8009c64:	2100      	movs	r1, #0
 8009c66:	6938      	ldr	r0, [r7, #16]
 8009c68:	f000 ff36 	bl	800aad8 <xQueueReceiveFromISR>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d003      	beq.n	8009c7a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009c72:	f06f 0302 	mvn.w	r3, #2
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	e01c      	b.n	8009cb4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d019      	beq.n	8009cb4 <osSemaphoreAcquire+0x94>
 8009c80:	4b0f      	ldr	r3, [pc, #60]	; (8009cc0 <osSemaphoreAcquire+0xa0>)
 8009c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	e010      	b.n	8009cb4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6938      	ldr	r0, [r7, #16]
 8009c96:	f000 fe13 	bl	800a8c0 <xQueueSemaphoreTake>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d009      	beq.n	8009cb4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009ca6:	f06f 0301 	mvn.w	r3, #1
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	e002      	b.n	8009cb4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009cae:	f06f 0302 	mvn.w	r3, #2
 8009cb2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009cb4:	697b      	ldr	r3, [r7, #20]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3718      	adds	r7, #24
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	e000ed04 	.word	0xe000ed04

08009cc4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d103      	bne.n	8009ce2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009cda:	f06f 0303 	mvn.w	r3, #3
 8009cde:	617b      	str	r3, [r7, #20]
 8009ce0:	e02c      	b.n	8009d3c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ce2:	f3ef 8305 	mrs	r3, IPSR
 8009ce6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d01a      	beq.n	8009d24 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009cf2:	f107 0308 	add.w	r3, r7, #8
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6938      	ldr	r0, [r7, #16]
 8009cfa:	f000 fc74 	bl	800a5e6 <xQueueGiveFromISR>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d003      	beq.n	8009d0c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009d04:	f06f 0302 	mvn.w	r3, #2
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	e017      	b.n	8009d3c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d014      	beq.n	8009d3c <osSemaphoreRelease+0x78>
 8009d12:	4b0d      	ldr	r3, [pc, #52]	; (8009d48 <osSemaphoreRelease+0x84>)
 8009d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	e00b      	b.n	8009d3c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d24:	2300      	movs	r3, #0
 8009d26:	2200      	movs	r2, #0
 8009d28:	2100      	movs	r1, #0
 8009d2a:	6938      	ldr	r0, [r7, #16]
 8009d2c:	f000 fac2 	bl	800a2b4 <xQueueGenericSend>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d002      	beq.n	8009d3c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009d36:	f06f 0302 	mvn.w	r3, #2
 8009d3a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009d3c:	697b      	ldr	r3, [r7, #20]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d58:	f3ef 8305 	mrs	r3, IPSR
 8009d5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009d64:	f06f 0305 	mvn.w	r3, #5
 8009d68:	617b      	str	r3, [r7, #20]
 8009d6a:	e00e      	b.n	8009d8a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d103      	bne.n	8009d7a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009d72:	f06f 0303 	mvn.w	r3, #3
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e007      	b.n	8009d8a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009d7a:	6938      	ldr	r0, [r7, #16]
 8009d7c:	f001 f8a2 	bl	800aec4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009d84:	6938      	ldr	r0, [r7, #16]
 8009d86:	f000 ff27 	bl	800abd8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009d8a:	697b      	ldr	r3, [r7, #20]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a07      	ldr	r2, [pc, #28]	; (8009dc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009da4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4a06      	ldr	r2, [pc, #24]	; (8009dc4 <vApplicationGetIdleTaskMemory+0x30>)
 8009daa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2240      	movs	r2, #64	; 0x40
 8009db0:	601a      	str	r2, [r3, #0]
}
 8009db2:	bf00      	nop
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20000690 	.word	0x20000690
 8009dc4:	200006ec 	.word	0x200006ec

08009dc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4a07      	ldr	r2, [pc, #28]	; (8009df4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009dd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	4a06      	ldr	r2, [pc, #24]	; (8009df8 <vApplicationGetTimerTaskMemory+0x30>)
 8009dde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2280      	movs	r2, #128	; 0x80
 8009de4:	601a      	str	r2, [r3, #0]
}
 8009de6:	bf00      	nop
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	200007ec 	.word	0x200007ec
 8009df8:	20000848 	.word	0x20000848

08009dfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f103 0208 	add.w	r2, r3, #8
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f04f 32ff 	mov.w	r2, #4294967295
 8009e14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f103 0208 	add.w	r2, r3, #8
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f103 0208 	add.w	r2, r3, #8
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e4a:	bf00      	nop
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e56:	b480      	push	{r7}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	689a      	ldr	r2, [r3, #8]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	601a      	str	r2, [r3, #0]
}
 8009e92:	bf00      	nop
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb4:	d103      	bne.n	8009ebe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e00c      	b.n	8009ed8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	e002      	b.n	8009ecc <vListInsert+0x2e>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d2f6      	bcs.n	8009ec6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	1c5a      	adds	r2, r3, #1
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	6892      	ldr	r2, [r2, #8]
 8009f26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6852      	ldr	r2, [r2, #4]
 8009f30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d103      	bne.n	8009f44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	689a      	ldr	r2, [r3, #8]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	1e5a      	subs	r2, r3, #1
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f8e:	f002 fc71 	bl	800c874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9a:	68f9      	ldr	r1, [r7, #12]
 8009f9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f9e:	fb01 f303 	mul.w	r3, r1, r3
 8009fa2:	441a      	add	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	68f9      	ldr	r1, [r7, #12]
 8009fc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fc4:	fb01 f303 	mul.w	r3, r1, r3
 8009fc8:	441a      	add	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	22ff      	movs	r2, #255	; 0xff
 8009fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	22ff      	movs	r2, #255	; 0xff
 8009fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d114      	bne.n	800a00e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01a      	beq.n	800a022 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3310      	adds	r3, #16
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 fc25 	bl	800b840 <xTaskRemoveFromEventList>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d012      	beq.n	800a022 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <xQueueGenericReset+0xcc>)
 8009ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	e009      	b.n	800a022 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3310      	adds	r3, #16
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff fef2 	bl	8009dfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3324      	adds	r3, #36	; 0x24
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7ff feed 	bl	8009dfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a022:	f002 fc57 	bl	800c8d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a026:	2301      	movs	r3, #1
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	e000ed04 	.word	0xe000ed04

0800a034 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a034:	b580      	push	{r7, lr}
 800a036:	b08e      	sub	sp, #56	; 0x38
 800a038:	af02      	add	r7, sp, #8
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10a      	bne.n	800a05e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a05a:	bf00      	nop
 800a05c:	e7fe      	b.n	800a05c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10a      	bne.n	800a07a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a076:	bf00      	nop
 800a078:	e7fe      	b.n	800a078 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <xQueueGenericCreateStatic+0x52>
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <xQueueGenericCreateStatic+0x56>
 800a086:	2301      	movs	r3, #1
 800a088:	e000      	b.n	800a08c <xQueueGenericCreateStatic+0x58>
 800a08a:	2300      	movs	r3, #0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	623b      	str	r3, [r7, #32]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d102      	bne.n	800a0b2 <xQueueGenericCreateStatic+0x7e>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <xQueueGenericCreateStatic+0x82>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <xQueueGenericCreateStatic+0x84>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	61fb      	str	r3, [r7, #28]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0d2:	2350      	movs	r3, #80	; 0x50
 800a0d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b50      	cmp	r3, #80	; 0x50
 800a0da:	d00a      	beq.n	800a0f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	61bb      	str	r3, [r7, #24]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00d      	beq.n	800a11a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a106:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4613      	mov	r3, r2
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 f83f 	bl	800a198 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3730      	adds	r7, #48	; 0x30
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08a      	sub	sp, #40	; 0x28
 800a128:	af02      	add	r7, sp, #8
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10a      	bne.n	800a14e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	613b      	str	r3, [r7, #16]
}
 800a14a:	bf00      	nop
 800a14c:	e7fe      	b.n	800a14c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	fb02 f303 	mul.w	r3, r2, r3
 800a156:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	3350      	adds	r3, #80	; 0x50
 800a15c:	4618      	mov	r0, r3
 800a15e:	f002 fcab 	bl	800cab8 <pvPortMalloc>
 800a162:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d011      	beq.n	800a18e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	3350      	adds	r3, #80	; 0x50
 800a172:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a17c:	79fa      	ldrb	r2, [r7, #7]
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	4613      	mov	r3, r2
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f000 f805 	bl	800a198 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a18e:	69bb      	ldr	r3, [r7, #24]
	}
 800a190:	4618      	mov	r0, r3
 800a192:	3720      	adds	r7, #32
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d103      	bne.n	800a1b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	69ba      	ldr	r2, [r7, #24]
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	e002      	b.n	800a1ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	69b8      	ldr	r0, [r7, #24]
 800a1ca:	f7ff fecb 	bl	8009f64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	78fa      	ldrb	r2, [r7, #3]
 800a1d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1d6:	bf00      	nop
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b08a      	sub	sp, #40	; 0x28
 800a1e2:	af02      	add	r7, sp, #8
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	61bb      	str	r3, [r7, #24]
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d90a      	bls.n	800a224 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	617b      	str	r3, [r7, #20]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a224:	2302      	movs	r3, #2
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	2100      	movs	r1, #0
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff ff00 	bl	800a034 <xQueueGenericCreateStatic>
 800a234:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a242:	69fb      	ldr	r3, [r7, #28]
	}
 800a244:	4618      	mov	r0, r3
 800a246:	3720      	adds	r7, #32
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	613b      	str	r3, [r7, #16]
}
 800a26e:	bf00      	nop
 800a270:	e7fe      	b.n	800a270 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	429a      	cmp	r2, r3
 800a278:	d90a      	bls.n	800a290 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	60fb      	str	r3, [r7, #12]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a290:	2202      	movs	r2, #2
 800a292:	2100      	movs	r1, #0
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff ff45 	bl	800a124 <xQueueGenericCreate>
 800a29a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2a8:	697b      	ldr	r3, [r7, #20]
	}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08e      	sub	sp, #56	; 0x38
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10a      	bne.n	800a2e6 <xQueueGenericSend+0x32>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <xQueueGenericSend+0x40>
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <xQueueGenericSend+0x44>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e000      	b.n	800a2fa <xQueueGenericSend+0x46>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10a      	bne.n	800a314 <xQueueGenericSend+0x60>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a310:	bf00      	nop
 800a312:	e7fe      	b.n	800a312 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	2b02      	cmp	r3, #2
 800a318:	d103      	bne.n	800a322 <xQueueGenericSend+0x6e>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d101      	bne.n	800a326 <xQueueGenericSend+0x72>
 800a322:	2301      	movs	r3, #1
 800a324:	e000      	b.n	800a328 <xQueueGenericSend+0x74>
 800a326:	2300      	movs	r3, #0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <xQueueGenericSend+0x8e>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	623b      	str	r3, [r7, #32]
}
 800a33e:	bf00      	nop
 800a340:	e7fe      	b.n	800a340 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a342:	f001 fc3b 	bl	800bbbc <xTaskGetSchedulerState>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <xQueueGenericSend+0x9e>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <xQueueGenericSend+0xa2>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <xQueueGenericSend+0xa4>
 800a356:	2300      	movs	r3, #0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10a      	bne.n	800a372 <xQueueGenericSend+0xbe>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	61fb      	str	r3, [r7, #28]
}
 800a36e:	bf00      	nop
 800a370:	e7fe      	b.n	800a370 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a372:	f002 fa7f 	bl	800c874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37e:	429a      	cmp	r2, r3
 800a380:	d302      	bcc.n	800a388 <xQueueGenericSend+0xd4>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b02      	cmp	r3, #2
 800a386:	d129      	bne.n	800a3dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	68b9      	ldr	r1, [r7, #8]
 800a38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38e:	f000 fc5e 	bl	800ac4e <prvCopyDataToQueue>
 800a392:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d010      	beq.n	800a3be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	3324      	adds	r3, #36	; 0x24
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f001 fa4d 	bl	800b840 <xTaskRemoveFromEventList>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d013      	beq.n	800a3d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3ac:	4b3f      	ldr	r3, [pc, #252]	; (800a4ac <xQueueGenericSend+0x1f8>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	e00a      	b.n	800a3d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d007      	beq.n	800a3d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3c4:	4b39      	ldr	r3, [pc, #228]	; (800a4ac <xQueueGenericSend+0x1f8>)
 800a3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3d4:	f002 fa7e 	bl	800c8d4 <vPortExitCritical>
				return pdPASS;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e063      	b.n	800a4a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d103      	bne.n	800a3ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3e2:	f002 fa77 	bl	800c8d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e05c      	b.n	800a4a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3f0:	f107 0314 	add.w	r3, r7, #20
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f001 fa87 	bl	800b908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3fe:	f002 fa69 	bl	800c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a402:	f000 fff9 	bl	800b3f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a406:	f002 fa35 	bl	800c874 <vPortEnterCritical>
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a410:	b25b      	sxtb	r3, r3
 800a412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a416:	d103      	bne.n	800a420 <xQueueGenericSend+0x16c>
 800a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a426:	b25b      	sxtb	r3, r3
 800a428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42c:	d103      	bne.n	800a436 <xQueueGenericSend+0x182>
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a436:	f002 fa4d 	bl	800c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a43a:	1d3a      	adds	r2, r7, #4
 800a43c:	f107 0314 	add.w	r3, r7, #20
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f001 fa76 	bl	800b934 <xTaskCheckForTimeOut>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d124      	bne.n	800a498 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a44e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a450:	f000 fcf5 	bl	800ae3e <prvIsQueueFull>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d018      	beq.n	800a48c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	3310      	adds	r3, #16
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	4611      	mov	r1, r2
 800a462:	4618      	mov	r0, r3
 800a464:	f001 f99c 	bl	800b7a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a46a:	f000 fc80 	bl	800ad6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a46e:	f000 ffd1 	bl	800b414 <xTaskResumeAll>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	f47f af7c 	bne.w	800a372 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a47a:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <xQueueGenericSend+0x1f8>)
 800a47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	e772      	b.n	800a372 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a48e:	f000 fc6e 	bl	800ad6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a492:	f000 ffbf 	bl	800b414 <xTaskResumeAll>
 800a496:	e76c      	b.n	800a372 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a49a:	f000 fc68 	bl	800ad6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a49e:	f000 ffb9 	bl	800b414 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3738      	adds	r7, #56	; 0x38
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	e000ed04 	.word	0xe000ed04

0800a4b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b090      	sub	sp, #64	; 0x40
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
 800a4bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10a      	bne.n	800a4de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4da:	bf00      	nop
 800a4dc:	e7fe      	b.n	800a4dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d103      	bne.n	800a4ec <xQueueGenericSendFromISR+0x3c>
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <xQueueGenericSendFromISR+0x40>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <xQueueGenericSendFromISR+0x42>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d103      	bne.n	800a51a <xQueueGenericSendFromISR+0x6a>
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a516:	2b01      	cmp	r3, #1
 800a518:	d101      	bne.n	800a51e <xQueueGenericSendFromISR+0x6e>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e000      	b.n	800a520 <xQueueGenericSendFromISR+0x70>
 800a51e:	2300      	movs	r3, #0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	623b      	str	r3, [r7, #32]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a53a:	f002 fa7d 	bl	800ca38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a53e:	f3ef 8211 	mrs	r2, BASEPRI
 800a542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	61fa      	str	r2, [r7, #28]
 800a554:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a556:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a558:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a562:	429a      	cmp	r2, r3
 800a564:	d302      	bcc.n	800a56c <xQueueGenericSendFromISR+0xbc>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d12f      	bne.n	800a5cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	68b9      	ldr	r1, [r7, #8]
 800a580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a582:	f000 fb64 	bl	800ac4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a586:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58e:	d112      	bne.n	800a5b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	2b00      	cmp	r3, #0
 800a596:	d016      	beq.n	800a5c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	3324      	adds	r3, #36	; 0x24
 800a59c:	4618      	mov	r0, r3
 800a59e:	f001 f94f 	bl	800b840 <xTaskRemoveFromEventList>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00e      	beq.n	800a5c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00b      	beq.n	800a5c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	e007      	b.n	800a5c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	b25a      	sxtb	r2, r3
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a5ca:	e001      	b.n	800a5d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3740      	adds	r7, #64	; 0x40
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b08e      	sub	sp, #56	; 0x38
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	623b      	str	r3, [r7, #32]
}
 800a60c:	bf00      	nop
 800a60e:	e7fe      	b.n	800a60e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00a      	beq.n	800a62e <xQueueGiveFromISR+0x48>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	61fb      	str	r3, [r7, #28]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d103      	bne.n	800a63e <xQueueGiveFromISR+0x58>
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <xQueueGiveFromISR+0x5c>
 800a63e:	2301      	movs	r3, #1
 800a640:	e000      	b.n	800a644 <xQueueGiveFromISR+0x5e>
 800a642:	2300      	movs	r3, #0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10a      	bne.n	800a65e <xQueueGiveFromISR+0x78>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	61bb      	str	r3, [r7, #24]
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a65e:	f002 f9eb 	bl	800ca38 <vPortValidateInterruptPriority>
	__asm volatile
 800a662:	f3ef 8211 	mrs	r2, BASEPRI
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	617a      	str	r2, [r7, #20]
 800a678:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a67a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a67c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d22b      	bcs.n	800a6e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d112      	bne.n	800a6d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d016      	beq.n	800a6e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	3324      	adds	r3, #36	; 0x24
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f001 f8c2 	bl	800b840 <xTaskRemoveFromEventList>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00e      	beq.n	800a6e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00b      	beq.n	800a6e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	e007      	b.n	800a6e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	b25a      	sxtb	r2, r3
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e4:	e001      	b.n	800a6ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f383 8811 	msr	BASEPRI, r3
}
 800a6f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3738      	adds	r7, #56	; 0x38
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08c      	sub	sp, #48	; 0x30
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a70c:	2300      	movs	r3, #0
 800a70e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <xQueueReceive+0x30>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	623b      	str	r3, [r7, #32]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d103      	bne.n	800a73e <xQueueReceive+0x3e>
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <xQueueReceive+0x42>
 800a73e:	2301      	movs	r3, #1
 800a740:	e000      	b.n	800a744 <xQueueReceive+0x44>
 800a742:	2300      	movs	r3, #0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10a      	bne.n	800a75e <xQueueReceive+0x5e>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	61fb      	str	r3, [r7, #28]
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a75e:	f001 fa2d 	bl	800bbbc <xTaskGetSchedulerState>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <xQueueReceive+0x6e>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <xQueueReceive+0x72>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <xQueueReceive+0x74>
 800a772:	2300      	movs	r3, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <xQueueReceive+0x8e>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	61bb      	str	r3, [r7, #24]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a78e:	f002 f871 	bl	800c874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d01f      	beq.n	800a7de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a79e:	68b9      	ldr	r1, [r7, #8]
 800a7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a2:	f000 fabe 	bl	800ad22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	1e5a      	subs	r2, r3, #1
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00f      	beq.n	800a7d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b8:	3310      	adds	r3, #16
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f001 f840 	bl	800b840 <xTaskRemoveFromEventList>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d007      	beq.n	800a7d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7c6:	4b3d      	ldr	r3, [pc, #244]	; (800a8bc <xQueueReceive+0x1bc>)
 800a7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7d6:	f002 f87d 	bl	800c8d4 <vPortExitCritical>
				return pdPASS;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e069      	b.n	800a8b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d103      	bne.n	800a7ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7e4:	f002 f876 	bl	800c8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	e062      	b.n	800a8b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7f2:	f107 0310 	add.w	r3, r7, #16
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f001 f886 	bl	800b908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a800:	f002 f868 	bl	800c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a804:	f000 fdf8 	bl	800b3f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a808:	f002 f834 	bl	800c874 <vPortEnterCritical>
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a812:	b25b      	sxtb	r3, r3
 800a814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a818:	d103      	bne.n	800a822 <xQueueReceive+0x122>
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a828:	b25b      	sxtb	r3, r3
 800a82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82e:	d103      	bne.n	800a838 <xQueueReceive+0x138>
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a838:	f002 f84c 	bl	800c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a83c:	1d3a      	adds	r2, r7, #4
 800a83e:	f107 0310 	add.w	r3, r7, #16
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f001 f875 	bl	800b934 <xTaskCheckForTimeOut>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d123      	bne.n	800a898 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a852:	f000 fade 	bl	800ae12 <prvIsQueueEmpty>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d017      	beq.n	800a88c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85e:	3324      	adds	r3, #36	; 0x24
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	4611      	mov	r1, r2
 800a864:	4618      	mov	r0, r3
 800a866:	f000 ff9b 	bl	800b7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a86c:	f000 fa7f 	bl	800ad6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a870:	f000 fdd0 	bl	800b414 <xTaskResumeAll>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d189      	bne.n	800a78e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a87a:	4b10      	ldr	r3, [pc, #64]	; (800a8bc <xQueueReceive+0x1bc>)
 800a87c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	e780      	b.n	800a78e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a88e:	f000 fa6e 	bl	800ad6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a892:	f000 fdbf 	bl	800b414 <xTaskResumeAll>
 800a896:	e77a      	b.n	800a78e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89a:	f000 fa68 	bl	800ad6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a89e:	f000 fdb9 	bl	800b414 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8a4:	f000 fab5 	bl	800ae12 <prvIsQueueEmpty>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f43f af6f 	beq.w	800a78e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3730      	adds	r7, #48	; 0x30
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	e000ed04 	.word	0xe000ed04

0800a8c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08e      	sub	sp, #56	; 0x38
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	623b      	str	r3, [r7, #32]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	61fb      	str	r3, [r7, #28]
}
 800a90c:	bf00      	nop
 800a90e:	e7fe      	b.n	800a90e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a910:	f001 f954 	bl	800bbbc <xTaskGetSchedulerState>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d102      	bne.n	800a920 <xQueueSemaphoreTake+0x60>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <xQueueSemaphoreTake+0x64>
 800a920:	2301      	movs	r3, #1
 800a922:	e000      	b.n	800a926 <xQueueSemaphoreTake+0x66>
 800a924:	2300      	movs	r3, #0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	61bb      	str	r3, [r7, #24]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a940:	f001 ff98 	bl	800c874 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a948:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d024      	beq.n	800a99a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	1e5a      	subs	r2, r3, #1
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d104      	bne.n	800a96a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a960:	f001 faa2 	bl	800bea8 <pvTaskIncrementMutexHeldCount>
 800a964:	4602      	mov	r2, r0
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00f      	beq.n	800a992 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	3310      	adds	r3, #16
 800a976:	4618      	mov	r0, r3
 800a978:	f000 ff62 	bl	800b840 <xTaskRemoveFromEventList>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d007      	beq.n	800a992 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a982:	4b54      	ldr	r3, [pc, #336]	; (800aad4 <xQueueSemaphoreTake+0x214>)
 800a984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a992:	f001 ff9f 	bl	800c8d4 <vPortExitCritical>
				return pdPASS;
 800a996:	2301      	movs	r3, #1
 800a998:	e097      	b.n	800aaca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d111      	bne.n	800a9c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	617b      	str	r3, [r7, #20]
}
 800a9b8:	bf00      	nop
 800a9ba:	e7fe      	b.n	800a9ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9bc:	f001 ff8a 	bl	800c8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e082      	b.n	800aaca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d106      	bne.n	800a9d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9ca:	f107 030c 	add.w	r3, r7, #12
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 ff9a 	bl	800b908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9d8:	f001 ff7c 	bl	800c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9dc:	f000 fd0c 	bl	800b3f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9e0:	f001 ff48 	bl	800c874 <vPortEnterCritical>
 800a9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ea:	b25b      	sxtb	r3, r3
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f0:	d103      	bne.n	800a9fa <xQueueSemaphoreTake+0x13a>
 800a9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa00:	b25b      	sxtb	r3, r3
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d103      	bne.n	800aa10 <xQueueSemaphoreTake+0x150>
 800aa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa10:	f001 ff60 	bl	800c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa14:	463a      	mov	r2, r7
 800aa16:	f107 030c 	add.w	r3, r7, #12
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 ff89 	bl	800b934 <xTaskCheckForTimeOut>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d132      	bne.n	800aa8e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa2a:	f000 f9f2 	bl	800ae12 <prvIsQueueEmpty>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d026      	beq.n	800aa82 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d109      	bne.n	800aa50 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aa3c:	f001 ff1a 	bl	800c874 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 f8d7 	bl	800bbf8 <xTaskPriorityInherit>
 800aa4a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa4c:	f001 ff42 	bl	800c8d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa52:	3324      	adds	r3, #36	; 0x24
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 fea1 	bl	800b7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa60:	f000 f985 	bl	800ad6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa64:	f000 fcd6 	bl	800b414 <xTaskResumeAll>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f47f af68 	bne.w	800a940 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aa70:	4b18      	ldr	r3, [pc, #96]	; (800aad4 <xQueueSemaphoreTake+0x214>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	e75e      	b.n	800a940 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa84:	f000 f973 	bl	800ad6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa88:	f000 fcc4 	bl	800b414 <xTaskResumeAll>
 800aa8c:	e758      	b.n	800a940 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa90:	f000 f96d 	bl	800ad6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa94:	f000 fcbe 	bl	800b414 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa9a:	f000 f9ba 	bl	800ae12 <prvIsQueueEmpty>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f43f af4d 	beq.w	800a940 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00d      	beq.n	800aac8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aaac:	f001 fee2 	bl	800c874 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aab2:	f000 f8b4 	bl	800ac1e <prvGetDisinheritPriorityAfterTimeout>
 800aab6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aabe:	4618      	mov	r0, r3
 800aac0:	f001 f970 	bl	800bda4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aac4:	f001 ff06 	bl	800c8d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aac8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3738      	adds	r7, #56	; 0x38
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	e000ed04 	.word	0xe000ed04

0800aad8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08e      	sub	sp, #56	; 0x38
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10a      	bne.n	800ab04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	623b      	str	r3, [r7, #32]
}
 800ab00:	bf00      	nop
 800ab02:	e7fe      	b.n	800ab02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d103      	bne.n	800ab12 <xQueueReceiveFromISR+0x3a>
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <xQueueReceiveFromISR+0x3e>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <xQueueReceiveFromISR+0x40>
 800ab16:	2300      	movs	r3, #0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	61fb      	str	r3, [r7, #28]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab32:	f001 ff81 	bl	800ca38 <vPortValidateInterruptPriority>
	__asm volatile
 800ab36:	f3ef 8211 	mrs	r2, BASEPRI
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	61ba      	str	r2, [r7, #24]
 800ab4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d02f      	beq.n	800abbe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab68:	68b9      	ldr	r1, [r7, #8]
 800ab6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab6c:	f000 f8d9 	bl	800ad22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	1e5a      	subs	r2, r3, #1
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d112      	bne.n	800aba8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d016      	beq.n	800abb8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	3310      	adds	r3, #16
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fe56 	bl	800b840 <xTaskRemoveFromEventList>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00e      	beq.n	800abb8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	601a      	str	r2, [r3, #0]
 800aba6:	e007      	b.n	800abb8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abac:	3301      	adds	r3, #1
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	b25a      	sxtb	r2, r3
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800abb8:	2301      	movs	r3, #1
 800abba:	637b      	str	r3, [r7, #52]	; 0x34
 800abbc:	e001      	b.n	800abc2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800abbe:	2300      	movs	r3, #0
 800abc0:	637b      	str	r3, [r7, #52]	; 0x34
 800abc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	f383 8811 	msr	BASEPRI, r3
}
 800abcc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3738      	adds	r7, #56	; 0x38
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10a      	bne.n	800ac00 <vQueueDelete+0x28>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	60bb      	str	r3, [r7, #8]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 f95f 	bl	800aec4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d102      	bne.n	800ac16 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f002 f81d 	bl	800cc50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ac16:	bf00      	nop
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ac1e:	b480      	push	{r7}
 800ac20:	b085      	sub	sp, #20
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d006      	beq.n	800ac3c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ac38:	60fb      	str	r3, [r7, #12]
 800ac3a:	e001      	b.n	800ac40 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac40:	68fb      	ldr	r3, [r7, #12]
	}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b086      	sub	sp, #24
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	60b9      	str	r1, [r7, #8]
 800ac58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10d      	bne.n	800ac88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d14d      	bne.n	800ad10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f001 f825 	bl	800bcc8 <xTaskPriorityDisinherit>
 800ac7e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	609a      	str	r2, [r3, #8]
 800ac86:	e043      	b.n	800ad10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d119      	bne.n	800acc2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6858      	ldr	r0, [r3, #4]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	461a      	mov	r2, r3
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	f002 f931 	bl	800cf00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca6:	441a      	add	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d32b      	bcc.n	800ad10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	605a      	str	r2, [r3, #4]
 800acc0:	e026      	b.n	800ad10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	68d8      	ldr	r0, [r3, #12]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acca:	461a      	mov	r2, r3
 800accc:	68b9      	ldr	r1, [r7, #8]
 800acce:	f002 f917 	bl	800cf00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	425b      	negs	r3, r3
 800acdc:	441a      	add	r2, r3
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	429a      	cmp	r2, r3
 800acec:	d207      	bcs.n	800acfe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	689a      	ldr	r2, [r3, #8]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf6:	425b      	negs	r3, r3
 800acf8:	441a      	add	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d105      	bne.n	800ad10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	1c5a      	adds	r2, r3, #1
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad18:	697b      	ldr	r3, [r7, #20]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d018      	beq.n	800ad66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68da      	ldr	r2, [r3, #12]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	441a      	add	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68da      	ldr	r2, [r3, #12]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d303      	bcc.n	800ad56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68d9      	ldr	r1, [r3, #12]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	461a      	mov	r2, r3
 800ad60:	6838      	ldr	r0, [r7, #0]
 800ad62:	f002 f8cd 	bl	800cf00 <memcpy>
	}
}
 800ad66:	bf00      	nop
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad76:	f001 fd7d 	bl	800c874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad82:	e011      	b.n	800ada8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d012      	beq.n	800adb2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3324      	adds	r3, #36	; 0x24
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 fd55 	bl	800b840 <xTaskRemoveFromEventList>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad9c:	f000 fe2c 	bl	800b9f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ada8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adac:	2b00      	cmp	r3, #0
 800adae:	dce9      	bgt.n	800ad84 <prvUnlockQueue+0x16>
 800adb0:	e000      	b.n	800adb4 <prvUnlockQueue+0x46>
					break;
 800adb2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	22ff      	movs	r2, #255	; 0xff
 800adb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800adbc:	f001 fd8a 	bl	800c8d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800adc0:	f001 fd58 	bl	800c874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adcc:	e011      	b.n	800adf2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d012      	beq.n	800adfc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3310      	adds	r3, #16
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fd30 	bl	800b840 <xTaskRemoveFromEventList>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ade6:	f000 fe07 	bl	800b9f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	3b01      	subs	r3, #1
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	dce9      	bgt.n	800adce <prvUnlockQueue+0x60>
 800adfa:	e000      	b.n	800adfe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adfc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	22ff      	movs	r2, #255	; 0xff
 800ae02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae06:	f001 fd65 	bl	800c8d4 <vPortExitCritical>
}
 800ae0a:	bf00      	nop
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae1a:	f001 fd2b 	bl	800c874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d102      	bne.n	800ae2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae26:	2301      	movs	r3, #1
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	e001      	b.n	800ae30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae30:	f001 fd50 	bl	800c8d4 <vPortExitCritical>

	return xReturn;
 800ae34:	68fb      	ldr	r3, [r7, #12]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae46:	f001 fd15 	bl	800c874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d102      	bne.n	800ae5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae56:	2301      	movs	r3, #1
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	e001      	b.n	800ae60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae60:	f001 fd38 	bl	800c8d4 <vPortExitCritical>

	return xReturn;
 800ae64:	68fb      	ldr	r3, [r7, #12]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
	...

0800ae70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	e014      	b.n	800aeaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae80:	4a0f      	ldr	r2, [pc, #60]	; (800aec0 <vQueueAddToRegistry+0x50>)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae8c:	490c      	ldr	r1, [pc, #48]	; (800aec0 <vQueueAddToRegistry+0x50>)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	683a      	ldr	r2, [r7, #0]
 800ae92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae96:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <vQueueAddToRegistry+0x50>)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	4413      	add	r3, r2
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aea2:	e006      	b.n	800aeb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	3301      	adds	r3, #1
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b07      	cmp	r3, #7
 800aeae:	d9e7      	bls.n	800ae80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aeb0:	bf00      	nop
 800aeb2:	bf00      	nop
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	20005a7c 	.word	0x20005a7c

0800aec4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aecc:	2300      	movs	r3, #0
 800aece:	60fb      	str	r3, [r7, #12]
 800aed0:	e016      	b.n	800af00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aed2:	4a10      	ldr	r2, [pc, #64]	; (800af14 <vQueueUnregisterQueue+0x50>)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	4413      	add	r3, r2
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d10b      	bne.n	800aefa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aee2:	4a0c      	ldr	r2, [pc, #48]	; (800af14 <vQueueUnregisterQueue+0x50>)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2100      	movs	r1, #0
 800aee8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aeec:	4a09      	ldr	r2, [pc, #36]	; (800af14 <vQueueUnregisterQueue+0x50>)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	00db      	lsls	r3, r3, #3
 800aef2:	4413      	add	r3, r2
 800aef4:	2200      	movs	r2, #0
 800aef6:	605a      	str	r2, [r3, #4]
				break;
 800aef8:	e006      	b.n	800af08 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	3301      	adds	r3, #1
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b07      	cmp	r3, #7
 800af04:	d9e5      	bls.n	800aed2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800af06:	bf00      	nop
 800af08:	bf00      	nop
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	20005a7c 	.word	0x20005a7c

0800af18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af28:	f001 fca4 	bl	800c874 <vPortEnterCritical>
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af32:	b25b      	sxtb	r3, r3
 800af34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af38:	d103      	bne.n	800af42 <vQueueWaitForMessageRestricted+0x2a>
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af48:	b25b      	sxtb	r3, r3
 800af4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4e:	d103      	bne.n	800af58 <vQueueWaitForMessageRestricted+0x40>
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af58:	f001 fcbc 	bl	800c8d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af60:	2b00      	cmp	r3, #0
 800af62:	d106      	bne.n	800af72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	3324      	adds	r3, #36	; 0x24
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	68b9      	ldr	r1, [r7, #8]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 fc3b 	bl	800b7e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af72:	6978      	ldr	r0, [r7, #20]
 800af74:	f7ff fefb 	bl	800ad6e <prvUnlockQueue>
	}
 800af78:	bf00      	nop
 800af7a:	3718      	adds	r7, #24
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af80:	b580      	push	{r7, lr}
 800af82:	b08e      	sub	sp, #56	; 0x38
 800af84:	af04      	add	r7, sp, #16
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <xTaskCreateStatic+0x2a>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	623b      	str	r3, [r7, #32]
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800afaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10a      	bne.n	800afc6 <xTaskCreateStatic+0x46>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	61fb      	str	r3, [r7, #28]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800afc6:	235c      	movs	r3, #92	; 0x5c
 800afc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2b5c      	cmp	r3, #92	; 0x5c
 800afce:	d00a      	beq.n	800afe6 <xTaskCreateStatic+0x66>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	61bb      	str	r3, [r7, #24]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afe6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	2b00      	cmp	r3, #0
 800afec:	d01e      	beq.n	800b02c <xTaskCreateStatic+0xac>
 800afee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d01b      	beq.n	800b02c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800affc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	2202      	movs	r2, #2
 800b002:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b006:	2300      	movs	r3, #0
 800b008:	9303      	str	r3, [sp, #12]
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	9302      	str	r3, [sp, #8]
 800b00e:	f107 0314 	add.w	r3, r7, #20
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	68b9      	ldr	r1, [r7, #8]
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f000 f850 	bl	800b0c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b026:	f000 f8dd 	bl	800b1e4 <prvAddNewTaskToReadyList>
 800b02a:	e001      	b.n	800b030 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b030:	697b      	ldr	r3, [r7, #20]
	}
 800b032:	4618      	mov	r0, r3
 800b034:	3728      	adds	r7, #40	; 0x28
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b08c      	sub	sp, #48	; 0x30
 800b03e:	af04      	add	r7, sp, #16
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	603b      	str	r3, [r7, #0]
 800b046:	4613      	mov	r3, r2
 800b048:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b04a:	88fb      	ldrh	r3, [r7, #6]
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4618      	mov	r0, r3
 800b050:	f001 fd32 	bl	800cab8 <pvPortMalloc>
 800b054:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00e      	beq.n	800b07a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b05c:	205c      	movs	r0, #92	; 0x5c
 800b05e:	f001 fd2b 	bl	800cab8 <pvPortMalloc>
 800b062:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	631a      	str	r2, [r3, #48]	; 0x30
 800b070:	e005      	b.n	800b07e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b072:	6978      	ldr	r0, [r7, #20]
 800b074:	f001 fdec 	bl	800cc50 <vPortFree>
 800b078:	e001      	b.n	800b07e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b07a:	2300      	movs	r3, #0
 800b07c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d017      	beq.n	800b0b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b08c:	88fa      	ldrh	r2, [r7, #6]
 800b08e:	2300      	movs	r3, #0
 800b090:	9303      	str	r3, [sp, #12]
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	9302      	str	r3, [sp, #8]
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 f80e 	bl	800b0c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0a8:	69f8      	ldr	r0, [r7, #28]
 800b0aa:	f000 f89b 	bl	800b1e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	61bb      	str	r3, [r7, #24]
 800b0b2:	e002      	b.n	800b0ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0ba:	69bb      	ldr	r3, [r7, #24]
	}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3720      	adds	r7, #32
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	461a      	mov	r2, r3
 800b0dc:	21a5      	movs	r1, #165	; 0xa5
 800b0de:	f001 ff1d 	bl	800cf1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4413      	add	r3, r2
 800b0f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	f023 0307 	bic.w	r3, r3, #7
 800b0fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	f003 0307 	and.w	r3, r3, #7
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00a      	beq.n	800b11c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	617b      	str	r3, [r7, #20]
}
 800b118:	bf00      	nop
 800b11a:	e7fe      	b.n	800b11a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d01f      	beq.n	800b162 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b122:	2300      	movs	r3, #0
 800b124:	61fb      	str	r3, [r7, #28]
 800b126:	e012      	b.n	800b14e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	4413      	add	r3, r2
 800b12e:	7819      	ldrb	r1, [r3, #0]
 800b130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	4413      	add	r3, r2
 800b136:	3334      	adds	r3, #52	; 0x34
 800b138:	460a      	mov	r2, r1
 800b13a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	4413      	add	r3, r2
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d006      	beq.n	800b156 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	3301      	adds	r3, #1
 800b14c:	61fb      	str	r3, [r7, #28]
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	2b0f      	cmp	r3, #15
 800b152:	d9e9      	bls.n	800b128 <prvInitialiseNewTask+0x64>
 800b154:	e000      	b.n	800b158 <prvInitialiseNewTask+0x94>
			{
				break;
 800b156:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b160:	e003      	b.n	800b16a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16c:	2b37      	cmp	r3, #55	; 0x37
 800b16e:	d901      	bls.n	800b174 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b170:	2337      	movs	r3, #55	; 0x37
 800b172:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b178:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b17e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b182:	2200      	movs	r2, #0
 800b184:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	3304      	adds	r3, #4
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fe56 	bl	8009e3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	3318      	adds	r3, #24
 800b194:	4618      	mov	r0, r3
 800b196:	f7fe fe51 	bl	8009e3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b19e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1be:	683a      	ldr	r2, [r7, #0]
 800b1c0:	68f9      	ldr	r1, [r7, #12]
 800b1c2:	69b8      	ldr	r0, [r7, #24]
 800b1c4:	f001 fa26 	bl	800c614 <pxPortInitialiseStack>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1da:	bf00      	nop
 800b1dc:	3720      	adds	r7, #32
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
	...

0800b1e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1ec:	f001 fb42 	bl	800c874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1f0:	4b2d      	ldr	r3, [pc, #180]	; (800b2a8 <prvAddNewTaskToReadyList+0xc4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	4a2c      	ldr	r2, [pc, #176]	; (800b2a8 <prvAddNewTaskToReadyList+0xc4>)
 800b1f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1fa:	4b2c      	ldr	r3, [pc, #176]	; (800b2ac <prvAddNewTaskToReadyList+0xc8>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b202:	4a2a      	ldr	r2, [pc, #168]	; (800b2ac <prvAddNewTaskToReadyList+0xc8>)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b208:	4b27      	ldr	r3, [pc, #156]	; (800b2a8 <prvAddNewTaskToReadyList+0xc4>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d110      	bne.n	800b232 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b210:	f000 fc16 	bl	800ba40 <prvInitialiseTaskLists>
 800b214:	e00d      	b.n	800b232 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b216:	4b26      	ldr	r3, [pc, #152]	; (800b2b0 <prvAddNewTaskToReadyList+0xcc>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d109      	bne.n	800b232 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b21e:	4b23      	ldr	r3, [pc, #140]	; (800b2ac <prvAddNewTaskToReadyList+0xc8>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	429a      	cmp	r2, r3
 800b22a:	d802      	bhi.n	800b232 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b22c:	4a1f      	ldr	r2, [pc, #124]	; (800b2ac <prvAddNewTaskToReadyList+0xc8>)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b232:	4b20      	ldr	r3, [pc, #128]	; (800b2b4 <prvAddNewTaskToReadyList+0xd0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3301      	adds	r3, #1
 800b238:	4a1e      	ldr	r2, [pc, #120]	; (800b2b4 <prvAddNewTaskToReadyList+0xd0>)
 800b23a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b23c:	4b1d      	ldr	r3, [pc, #116]	; (800b2b4 <prvAddNewTaskToReadyList+0xd0>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b248:	4b1b      	ldr	r3, [pc, #108]	; (800b2b8 <prvAddNewTaskToReadyList+0xd4>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d903      	bls.n	800b258 <prvAddNewTaskToReadyList+0x74>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	4a18      	ldr	r2, [pc, #96]	; (800b2b8 <prvAddNewTaskToReadyList+0xd4>)
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4a15      	ldr	r2, [pc, #84]	; (800b2bc <prvAddNewTaskToReadyList+0xd8>)
 800b266:	441a      	add	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4619      	mov	r1, r3
 800b26e:	4610      	mov	r0, r2
 800b270:	f7fe fdf1 	bl	8009e56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b274:	f001 fb2e 	bl	800c8d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b278:	4b0d      	ldr	r3, [pc, #52]	; (800b2b0 <prvAddNewTaskToReadyList+0xcc>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00e      	beq.n	800b29e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b280:	4b0a      	ldr	r3, [pc, #40]	; (800b2ac <prvAddNewTaskToReadyList+0xc8>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d207      	bcs.n	800b29e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b28e:	4b0c      	ldr	r3, [pc, #48]	; (800b2c0 <prvAddNewTaskToReadyList+0xdc>)
 800b290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000f1c 	.word	0x20000f1c
 800b2ac:	20000a48 	.word	0x20000a48
 800b2b0:	20000f28 	.word	0x20000f28
 800b2b4:	20000f38 	.word	0x20000f38
 800b2b8:	20000f24 	.word	0x20000f24
 800b2bc:	20000a4c 	.word	0x20000a4c
 800b2c0:	e000ed04 	.word	0xe000ed04

0800b2c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d017      	beq.n	800b306 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2d6:	4b13      	ldr	r3, [pc, #76]	; (800b324 <vTaskDelay+0x60>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <vTaskDelay+0x30>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	60bb      	str	r3, [r7, #8]
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2f4:	f000 f880 	bl	800b3f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fde8 	bl	800bed0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b300:	f000 f888 	bl	800b414 <xTaskResumeAll>
 800b304:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d107      	bne.n	800b31c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b30c:	4b06      	ldr	r3, [pc, #24]	; (800b328 <vTaskDelay+0x64>)
 800b30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b31c:	bf00      	nop
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20000f44 	.word	0x20000f44
 800b328:	e000ed04 	.word	0xe000ed04

0800b32c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08a      	sub	sp, #40	; 0x28
 800b330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b332:	2300      	movs	r3, #0
 800b334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b336:	2300      	movs	r3, #0
 800b338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b33a:	463a      	mov	r2, r7
 800b33c:	1d39      	adds	r1, r7, #4
 800b33e:	f107 0308 	add.w	r3, r7, #8
 800b342:	4618      	mov	r0, r3
 800b344:	f7fe fd26 	bl	8009d94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	9202      	str	r2, [sp, #8]
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	2300      	movs	r3, #0
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	2300      	movs	r3, #0
 800b358:	460a      	mov	r2, r1
 800b35a:	4921      	ldr	r1, [pc, #132]	; (800b3e0 <vTaskStartScheduler+0xb4>)
 800b35c:	4821      	ldr	r0, [pc, #132]	; (800b3e4 <vTaskStartScheduler+0xb8>)
 800b35e:	f7ff fe0f 	bl	800af80 <xTaskCreateStatic>
 800b362:	4603      	mov	r3, r0
 800b364:	4a20      	ldr	r2, [pc, #128]	; (800b3e8 <vTaskStartScheduler+0xbc>)
 800b366:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b368:	4b1f      	ldr	r3, [pc, #124]	; (800b3e8 <vTaskStartScheduler+0xbc>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b370:	2301      	movs	r3, #1
 800b372:	617b      	str	r3, [r7, #20]
 800b374:	e001      	b.n	800b37a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b376:	2300      	movs	r3, #0
 800b378:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d102      	bne.n	800b386 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b380:	f000 fdfa 	bl	800bf78 <xTimerCreateTimerTask>
 800b384:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d116      	bne.n	800b3ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	613b      	str	r3, [r7, #16]
}
 800b39e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b3a0:	4b12      	ldr	r3, [pc, #72]	; (800b3ec <vTaskStartScheduler+0xc0>)
 800b3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b3a8:	4b11      	ldr	r3, [pc, #68]	; (800b3f0 <vTaskStartScheduler+0xc4>)
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b3ae:	4b11      	ldr	r3, [pc, #68]	; (800b3f4 <vTaskStartScheduler+0xc8>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b3b4:	f001 f9bc 	bl	800c730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b3b8:	e00e      	b.n	800b3d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c0:	d10a      	bne.n	800b3d8 <vTaskStartScheduler+0xac>
	__asm volatile
 800b3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	60fb      	str	r3, [r7, #12]
}
 800b3d4:	bf00      	nop
 800b3d6:	e7fe      	b.n	800b3d6 <vTaskStartScheduler+0xaa>
}
 800b3d8:	bf00      	nop
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	080122c4 	.word	0x080122c4
 800b3e4:	0800ba11 	.word	0x0800ba11
 800b3e8:	20000f40 	.word	0x20000f40
 800b3ec:	20000f3c 	.word	0x20000f3c
 800b3f0:	20000f28 	.word	0x20000f28
 800b3f4:	20000f20 	.word	0x20000f20

0800b3f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3fc:	4b04      	ldr	r3, [pc, #16]	; (800b410 <vTaskSuspendAll+0x18>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3301      	adds	r3, #1
 800b402:	4a03      	ldr	r2, [pc, #12]	; (800b410 <vTaskSuspendAll+0x18>)
 800b404:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b406:	bf00      	nop
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	20000f44 	.word	0x20000f44

0800b414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b41e:	2300      	movs	r3, #0
 800b420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b422:	4b42      	ldr	r3, [pc, #264]	; (800b52c <xTaskResumeAll+0x118>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10a      	bne.n	800b440 <xTaskResumeAll+0x2c>
	__asm volatile
 800b42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	603b      	str	r3, [r7, #0]
}
 800b43c:	bf00      	nop
 800b43e:	e7fe      	b.n	800b43e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b440:	f001 fa18 	bl	800c874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b444:	4b39      	ldr	r3, [pc, #228]	; (800b52c <xTaskResumeAll+0x118>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3b01      	subs	r3, #1
 800b44a:	4a38      	ldr	r2, [pc, #224]	; (800b52c <xTaskResumeAll+0x118>)
 800b44c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b44e:	4b37      	ldr	r3, [pc, #220]	; (800b52c <xTaskResumeAll+0x118>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d162      	bne.n	800b51c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b456:	4b36      	ldr	r3, [pc, #216]	; (800b530 <xTaskResumeAll+0x11c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d05e      	beq.n	800b51c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b45e:	e02f      	b.n	800b4c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b460:	4b34      	ldr	r3, [pc, #208]	; (800b534 <xTaskResumeAll+0x120>)
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	3318      	adds	r3, #24
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fe fd4f 	bl	8009f10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3304      	adds	r3, #4
 800b476:	4618      	mov	r0, r3
 800b478:	f7fe fd4a 	bl	8009f10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b480:	4b2d      	ldr	r3, [pc, #180]	; (800b538 <xTaskResumeAll+0x124>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	429a      	cmp	r2, r3
 800b486:	d903      	bls.n	800b490 <xTaskResumeAll+0x7c>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48c:	4a2a      	ldr	r2, [pc, #168]	; (800b538 <xTaskResumeAll+0x124>)
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b494:	4613      	mov	r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	4413      	add	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4a27      	ldr	r2, [pc, #156]	; (800b53c <xTaskResumeAll+0x128>)
 800b49e:	441a      	add	r2, r3
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	f7fe fcd5 	bl	8009e56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b0:	4b23      	ldr	r3, [pc, #140]	; (800b540 <xTaskResumeAll+0x12c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d302      	bcc.n	800b4c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b4ba:	4b22      	ldr	r3, [pc, #136]	; (800b544 <xTaskResumeAll+0x130>)
 800b4bc:	2201      	movs	r2, #1
 800b4be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4c0:	4b1c      	ldr	r3, [pc, #112]	; (800b534 <xTaskResumeAll+0x120>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1cb      	bne.n	800b460 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b4ce:	f000 fb55 	bl	800bb7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b4d2:	4b1d      	ldr	r3, [pc, #116]	; (800b548 <xTaskResumeAll+0x134>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d010      	beq.n	800b500 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4de:	f000 f847 	bl	800b570 <xTaskIncrementTick>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b4e8:	4b16      	ldr	r3, [pc, #88]	; (800b544 <xTaskResumeAll+0x130>)
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1f1      	bne.n	800b4de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b4fa:	4b13      	ldr	r3, [pc, #76]	; (800b548 <xTaskResumeAll+0x134>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b500:	4b10      	ldr	r3, [pc, #64]	; (800b544 <xTaskResumeAll+0x130>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d009      	beq.n	800b51c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b508:	2301      	movs	r3, #1
 800b50a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b50c:	4b0f      	ldr	r3, [pc, #60]	; (800b54c <xTaskResumeAll+0x138>)
 800b50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b51c:	f001 f9da 	bl	800c8d4 <vPortExitCritical>

	return xAlreadyYielded;
 800b520:	68bb      	ldr	r3, [r7, #8]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20000f44 	.word	0x20000f44
 800b530:	20000f1c 	.word	0x20000f1c
 800b534:	20000edc 	.word	0x20000edc
 800b538:	20000f24 	.word	0x20000f24
 800b53c:	20000a4c 	.word	0x20000a4c
 800b540:	20000a48 	.word	0x20000a48
 800b544:	20000f30 	.word	0x20000f30
 800b548:	20000f2c 	.word	0x20000f2c
 800b54c:	e000ed04 	.word	0xe000ed04

0800b550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b556:	4b05      	ldr	r3, [pc, #20]	; (800b56c <xTaskGetTickCount+0x1c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b55c:	687b      	ldr	r3, [r7, #4]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	370c      	adds	r7, #12
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	20000f20 	.word	0x20000f20

0800b570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b576:	2300      	movs	r3, #0
 800b578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b57a:	4b4f      	ldr	r3, [pc, #316]	; (800b6b8 <xTaskIncrementTick+0x148>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f040 808f 	bne.w	800b6a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b584:	4b4d      	ldr	r3, [pc, #308]	; (800b6bc <xTaskIncrementTick+0x14c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3301      	adds	r3, #1
 800b58a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b58c:	4a4b      	ldr	r2, [pc, #300]	; (800b6bc <xTaskIncrementTick+0x14c>)
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d120      	bne.n	800b5da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b598:	4b49      	ldr	r3, [pc, #292]	; (800b6c0 <xTaskIncrementTick+0x150>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	603b      	str	r3, [r7, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	e7fe      	b.n	800b5b6 <xTaskIncrementTick+0x46>
 800b5b8:	4b41      	ldr	r3, [pc, #260]	; (800b6c0 <xTaskIncrementTick+0x150>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	60fb      	str	r3, [r7, #12]
 800b5be:	4b41      	ldr	r3, [pc, #260]	; (800b6c4 <xTaskIncrementTick+0x154>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a3f      	ldr	r2, [pc, #252]	; (800b6c0 <xTaskIncrementTick+0x150>)
 800b5c4:	6013      	str	r3, [r2, #0]
 800b5c6:	4a3f      	ldr	r2, [pc, #252]	; (800b6c4 <xTaskIncrementTick+0x154>)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	4b3e      	ldr	r3, [pc, #248]	; (800b6c8 <xTaskIncrementTick+0x158>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	4a3d      	ldr	r2, [pc, #244]	; (800b6c8 <xTaskIncrementTick+0x158>)
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	f000 fad1 	bl	800bb7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5da:	4b3c      	ldr	r3, [pc, #240]	; (800b6cc <xTaskIncrementTick+0x15c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	693a      	ldr	r2, [r7, #16]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d349      	bcc.n	800b678 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5e4:	4b36      	ldr	r3, [pc, #216]	; (800b6c0 <xTaskIncrementTick+0x150>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d104      	bne.n	800b5f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5ee:	4b37      	ldr	r3, [pc, #220]	; (800b6cc <xTaskIncrementTick+0x15c>)
 800b5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f4:	601a      	str	r2, [r3, #0]
					break;
 800b5f6:	e03f      	b.n	800b678 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f8:	4b31      	ldr	r3, [pc, #196]	; (800b6c0 <xTaskIncrementTick+0x150>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d203      	bcs.n	800b618 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b610:	4a2e      	ldr	r2, [pc, #184]	; (800b6cc <xTaskIncrementTick+0x15c>)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b616:	e02f      	b.n	800b678 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe fc77 	bl	8009f10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b626:	2b00      	cmp	r3, #0
 800b628:	d004      	beq.n	800b634 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	3318      	adds	r3, #24
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fe fc6e 	bl	8009f10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b638:	4b25      	ldr	r3, [pc, #148]	; (800b6d0 <xTaskIncrementTick+0x160>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d903      	bls.n	800b648 <xTaskIncrementTick+0xd8>
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b644:	4a22      	ldr	r2, [pc, #136]	; (800b6d0 <xTaskIncrementTick+0x160>)
 800b646:	6013      	str	r3, [r2, #0]
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4a1f      	ldr	r2, [pc, #124]	; (800b6d4 <xTaskIncrementTick+0x164>)
 800b656:	441a      	add	r2, r3
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	3304      	adds	r3, #4
 800b65c:	4619      	mov	r1, r3
 800b65e:	4610      	mov	r0, r2
 800b660:	f7fe fbf9 	bl	8009e56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b668:	4b1b      	ldr	r3, [pc, #108]	; (800b6d8 <xTaskIncrementTick+0x168>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66e:	429a      	cmp	r2, r3
 800b670:	d3b8      	bcc.n	800b5e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b672:	2301      	movs	r3, #1
 800b674:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b676:	e7b5      	b.n	800b5e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b678:	4b17      	ldr	r3, [pc, #92]	; (800b6d8 <xTaskIncrementTick+0x168>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67e:	4915      	ldr	r1, [pc, #84]	; (800b6d4 <xTaskIncrementTick+0x164>)
 800b680:	4613      	mov	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	440b      	add	r3, r1
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d901      	bls.n	800b694 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b690:	2301      	movs	r3, #1
 800b692:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b694:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <xTaskIncrementTick+0x16c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b69c:	2301      	movs	r3, #1
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	e004      	b.n	800b6ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b6a2:	4b0f      	ldr	r3, [pc, #60]	; (800b6e0 <xTaskIncrementTick+0x170>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	4a0d      	ldr	r2, [pc, #52]	; (800b6e0 <xTaskIncrementTick+0x170>)
 800b6aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b6ac:	697b      	ldr	r3, [r7, #20]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20000f44 	.word	0x20000f44
 800b6bc:	20000f20 	.word	0x20000f20
 800b6c0:	20000ed4 	.word	0x20000ed4
 800b6c4:	20000ed8 	.word	0x20000ed8
 800b6c8:	20000f34 	.word	0x20000f34
 800b6cc:	20000f3c 	.word	0x20000f3c
 800b6d0:	20000f24 	.word	0x20000f24
 800b6d4:	20000a4c 	.word	0x20000a4c
 800b6d8:	20000a48 	.word	0x20000a48
 800b6dc:	20000f30 	.word	0x20000f30
 800b6e0:	20000f2c 	.word	0x20000f2c

0800b6e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6ea:	4b28      	ldr	r3, [pc, #160]	; (800b78c <vTaskSwitchContext+0xa8>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6f2:	4b27      	ldr	r3, [pc, #156]	; (800b790 <vTaskSwitchContext+0xac>)
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6f8:	e041      	b.n	800b77e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b6fa:	4b25      	ldr	r3, [pc, #148]	; (800b790 <vTaskSwitchContext+0xac>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b700:	4b24      	ldr	r3, [pc, #144]	; (800b794 <vTaskSwitchContext+0xb0>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	60fb      	str	r3, [r7, #12]
 800b706:	e010      	b.n	800b72a <vTaskSwitchContext+0x46>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10a      	bne.n	800b724 <vTaskSwitchContext+0x40>
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	607b      	str	r3, [r7, #4]
}
 800b720:	bf00      	nop
 800b722:	e7fe      	b.n	800b722 <vTaskSwitchContext+0x3e>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3b01      	subs	r3, #1
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	491b      	ldr	r1, [pc, #108]	; (800b798 <vTaskSwitchContext+0xb4>)
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	4613      	mov	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	440b      	add	r3, r1
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d0e4      	beq.n	800b708 <vTaskSwitchContext+0x24>
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	4613      	mov	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4a13      	ldr	r2, [pc, #76]	; (800b798 <vTaskSwitchContext+0xb4>)
 800b74a:	4413      	add	r3, r2
 800b74c:	60bb      	str	r3, [r7, #8]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	605a      	str	r2, [r3, #4]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	685a      	ldr	r2, [r3, #4]
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	3308      	adds	r3, #8
 800b760:	429a      	cmp	r2, r3
 800b762:	d104      	bne.n	800b76e <vTaskSwitchContext+0x8a>
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	605a      	str	r2, [r3, #4]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	4a09      	ldr	r2, [pc, #36]	; (800b79c <vTaskSwitchContext+0xb8>)
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	4a06      	ldr	r2, [pc, #24]	; (800b794 <vTaskSwitchContext+0xb0>)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6013      	str	r3, [r2, #0]
}
 800b77e:	bf00      	nop
 800b780:	3714      	adds	r7, #20
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	20000f44 	.word	0x20000f44
 800b790:	20000f30 	.word	0x20000f30
 800b794:	20000f24 	.word	0x20000f24
 800b798:	20000a4c 	.word	0x20000a4c
 800b79c:	20000a48 	.word	0x20000a48

0800b7a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	60fb      	str	r3, [r7, #12]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7c6:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <vTaskPlaceOnEventList+0x44>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3318      	adds	r3, #24
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7fe fb65 	bl	8009e9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	6838      	ldr	r0, [r7, #0]
 800b7d8:	f000 fb7a 	bl	800bed0 <prvAddCurrentTaskToDelayedList>
}
 800b7dc:	bf00      	nop
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	20000a48 	.word	0x20000a48

0800b7e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10a      	bne.n	800b810 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	617b      	str	r3, [r7, #20]
}
 800b80c:	bf00      	nop
 800b80e:	e7fe      	b.n	800b80e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b810:	4b0a      	ldr	r3, [pc, #40]	; (800b83c <vTaskPlaceOnEventListRestricted+0x54>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3318      	adds	r3, #24
 800b816:	4619      	mov	r1, r3
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f7fe fb1c 	bl	8009e56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b824:	f04f 33ff 	mov.w	r3, #4294967295
 800b828:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b82a:	6879      	ldr	r1, [r7, #4]
 800b82c:	68b8      	ldr	r0, [r7, #8]
 800b82e:	f000 fb4f 	bl	800bed0 <prvAddCurrentTaskToDelayedList>
	}
 800b832:	bf00      	nop
 800b834:	3718      	adds	r7, #24
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20000a48 	.word	0x20000a48

0800b840 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60fb      	str	r3, [r7, #12]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	3318      	adds	r3, #24
 800b870:	4618      	mov	r0, r3
 800b872:	f7fe fb4d 	bl	8009f10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b876:	4b1e      	ldr	r3, [pc, #120]	; (800b8f0 <xTaskRemoveFromEventList+0xb0>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d11d      	bne.n	800b8ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	3304      	adds	r3, #4
 800b882:	4618      	mov	r0, r3
 800b884:	f7fe fb44 	bl	8009f10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88c:	4b19      	ldr	r3, [pc, #100]	; (800b8f4 <xTaskRemoveFromEventList+0xb4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	429a      	cmp	r2, r3
 800b892:	d903      	bls.n	800b89c <xTaskRemoveFromEventList+0x5c>
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b898:	4a16      	ldr	r2, [pc, #88]	; (800b8f4 <xTaskRemoveFromEventList+0xb4>)
 800b89a:	6013      	str	r3, [r2, #0]
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4a13      	ldr	r2, [pc, #76]	; (800b8f8 <xTaskRemoveFromEventList+0xb8>)
 800b8aa:	441a      	add	r2, r3
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	f7fe facf 	bl	8009e56 <vListInsertEnd>
 800b8b8:	e005      	b.n	800b8c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	3318      	adds	r3, #24
 800b8be:	4619      	mov	r1, r3
 800b8c0:	480e      	ldr	r0, [pc, #56]	; (800b8fc <xTaskRemoveFromEventList+0xbc>)
 800b8c2:	f7fe fac8 	bl	8009e56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ca:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <xTaskRemoveFromEventList+0xc0>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d905      	bls.n	800b8e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <xTaskRemoveFromEventList+0xc4>)
 800b8da:	2201      	movs	r2, #1
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	e001      	b.n	800b8e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8e4:	697b      	ldr	r3, [r7, #20]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20000f44 	.word	0x20000f44
 800b8f4:	20000f24 	.word	0x20000f24
 800b8f8:	20000a4c 	.word	0x20000a4c
 800b8fc:	20000edc 	.word	0x20000edc
 800b900:	20000a48 	.word	0x20000a48
 800b904:	20000f30 	.word	0x20000f30

0800b908 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b910:	4b06      	ldr	r3, [pc, #24]	; (800b92c <vTaskInternalSetTimeOutState+0x24>)
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b918:	4b05      	ldr	r3, [pc, #20]	; (800b930 <vTaskInternalSetTimeOutState+0x28>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	605a      	str	r2, [r3, #4]
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr
 800b92c:	20000f34 	.word	0x20000f34
 800b930:	20000f20 	.word	0x20000f20

0800b934 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b088      	sub	sp, #32
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	613b      	str	r3, [r7, #16]
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10a      	bne.n	800b976 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	60fb      	str	r3, [r7, #12]
}
 800b972:	bf00      	nop
 800b974:	e7fe      	b.n	800b974 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b976:	f000 ff7d 	bl	800c874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b97a:	4b1d      	ldr	r3, [pc, #116]	; (800b9f0 <xTaskCheckForTimeOut+0xbc>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b992:	d102      	bne.n	800b99a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b994:	2300      	movs	r3, #0
 800b996:	61fb      	str	r3, [r7, #28]
 800b998:	e023      	b.n	800b9e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	4b15      	ldr	r3, [pc, #84]	; (800b9f4 <xTaskCheckForTimeOut+0xc0>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d007      	beq.n	800b9b6 <xTaskCheckForTimeOut+0x82>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	69ba      	ldr	r2, [r7, #24]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d302      	bcc.n	800b9b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	61fb      	str	r3, [r7, #28]
 800b9b4:	e015      	b.n	800b9e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d20b      	bcs.n	800b9d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	1ad2      	subs	r2, r2, r3
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f7ff ff9b 	bl	800b908 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	61fb      	str	r3, [r7, #28]
 800b9d6:	e004      	b.n	800b9e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9e2:	f000 ff77 	bl	800c8d4 <vPortExitCritical>

	return xReturn;
 800b9e6:	69fb      	ldr	r3, [r7, #28]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3720      	adds	r7, #32
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	20000f20 	.word	0x20000f20
 800b9f4:	20000f34 	.word	0x20000f34

0800b9f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9fc:	4b03      	ldr	r3, [pc, #12]	; (800ba0c <vTaskMissedYield+0x14>)
 800b9fe:	2201      	movs	r2, #1
 800ba00:	601a      	str	r2, [r3, #0]
}
 800ba02:	bf00      	nop
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	20000f30 	.word	0x20000f30

0800ba10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba18:	f000 f852 	bl	800bac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba1c:	4b06      	ldr	r3, [pc, #24]	; (800ba38 <prvIdleTask+0x28>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d9f9      	bls.n	800ba18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba24:	4b05      	ldr	r3, [pc, #20]	; (800ba3c <prvIdleTask+0x2c>)
 800ba26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba34:	e7f0      	b.n	800ba18 <prvIdleTask+0x8>
 800ba36:	bf00      	nop
 800ba38:	20000a4c 	.word	0x20000a4c
 800ba3c:	e000ed04 	.word	0xe000ed04

0800ba40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba46:	2300      	movs	r3, #0
 800ba48:	607b      	str	r3, [r7, #4]
 800ba4a:	e00c      	b.n	800ba66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4a12      	ldr	r2, [pc, #72]	; (800baa0 <prvInitialiseTaskLists+0x60>)
 800ba58:	4413      	add	r3, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fe f9ce 	bl	8009dfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3301      	adds	r3, #1
 800ba64:	607b      	str	r3, [r7, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b37      	cmp	r3, #55	; 0x37
 800ba6a:	d9ef      	bls.n	800ba4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba6c:	480d      	ldr	r0, [pc, #52]	; (800baa4 <prvInitialiseTaskLists+0x64>)
 800ba6e:	f7fe f9c5 	bl	8009dfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba72:	480d      	ldr	r0, [pc, #52]	; (800baa8 <prvInitialiseTaskLists+0x68>)
 800ba74:	f7fe f9c2 	bl	8009dfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba78:	480c      	ldr	r0, [pc, #48]	; (800baac <prvInitialiseTaskLists+0x6c>)
 800ba7a:	f7fe f9bf 	bl	8009dfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba7e:	480c      	ldr	r0, [pc, #48]	; (800bab0 <prvInitialiseTaskLists+0x70>)
 800ba80:	f7fe f9bc 	bl	8009dfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba84:	480b      	ldr	r0, [pc, #44]	; (800bab4 <prvInitialiseTaskLists+0x74>)
 800ba86:	f7fe f9b9 	bl	8009dfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba8a:	4b0b      	ldr	r3, [pc, #44]	; (800bab8 <prvInitialiseTaskLists+0x78>)
 800ba8c:	4a05      	ldr	r2, [pc, #20]	; (800baa4 <prvInitialiseTaskLists+0x64>)
 800ba8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba90:	4b0a      	ldr	r3, [pc, #40]	; (800babc <prvInitialiseTaskLists+0x7c>)
 800ba92:	4a05      	ldr	r2, [pc, #20]	; (800baa8 <prvInitialiseTaskLists+0x68>)
 800ba94:	601a      	str	r2, [r3, #0]
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	20000a4c 	.word	0x20000a4c
 800baa4:	20000eac 	.word	0x20000eac
 800baa8:	20000ec0 	.word	0x20000ec0
 800baac:	20000edc 	.word	0x20000edc
 800bab0:	20000ef0 	.word	0x20000ef0
 800bab4:	20000f08 	.word	0x20000f08
 800bab8:	20000ed4 	.word	0x20000ed4
 800babc:	20000ed8 	.word	0x20000ed8

0800bac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bac6:	e019      	b.n	800bafc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bac8:	f000 fed4 	bl	800c874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bacc:	4b10      	ldr	r3, [pc, #64]	; (800bb10 <prvCheckTasksWaitingTermination+0x50>)
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3304      	adds	r3, #4
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fe fa19 	bl	8009f10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bade:	4b0d      	ldr	r3, [pc, #52]	; (800bb14 <prvCheckTasksWaitingTermination+0x54>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3b01      	subs	r3, #1
 800bae4:	4a0b      	ldr	r2, [pc, #44]	; (800bb14 <prvCheckTasksWaitingTermination+0x54>)
 800bae6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bae8:	4b0b      	ldr	r3, [pc, #44]	; (800bb18 <prvCheckTasksWaitingTermination+0x58>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	3b01      	subs	r3, #1
 800baee:	4a0a      	ldr	r2, [pc, #40]	; (800bb18 <prvCheckTasksWaitingTermination+0x58>)
 800baf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baf2:	f000 feef 	bl	800c8d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f810 	bl	800bb1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bafc:	4b06      	ldr	r3, [pc, #24]	; (800bb18 <prvCheckTasksWaitingTermination+0x58>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1e1      	bne.n	800bac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20000ef0 	.word	0x20000ef0
 800bb14:	20000f1c 	.word	0x20000f1c
 800bb18:	20000f04 	.word	0x20000f04

0800bb1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d108      	bne.n	800bb40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 f88c 	bl	800cc50 <vPortFree>
				vPortFree( pxTCB );
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f001 f889 	bl	800cc50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb3e:	e018      	b.n	800bb72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d103      	bne.n	800bb52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f001 f880 	bl	800cc50 <vPortFree>
	}
 800bb50:	e00f      	b.n	800bb72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d00a      	beq.n	800bb72 <prvDeleteTCB+0x56>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60fb      	str	r3, [r7, #12]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <prvDeleteTCB+0x54>
	}
 800bb72:	bf00      	nop
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb82:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <prvResetNextTaskUnblockTime+0x38>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d104      	bne.n	800bb96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bb8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb94:	e008      	b.n	800bba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb96:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <prvResetNextTaskUnblockTime+0x38>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	4a04      	ldr	r2, [pc, #16]	; (800bbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bba6:	6013      	str	r3, [r2, #0]
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	20000ed4 	.word	0x20000ed4
 800bbb8:	20000f3c 	.word	0x20000f3c

0800bbbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbc2:	4b0b      	ldr	r3, [pc, #44]	; (800bbf0 <xTaskGetSchedulerState+0x34>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	607b      	str	r3, [r7, #4]
 800bbce:	e008      	b.n	800bbe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbd0:	4b08      	ldr	r3, [pc, #32]	; (800bbf4 <xTaskGetSchedulerState+0x38>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d102      	bne.n	800bbde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	607b      	str	r3, [r7, #4]
 800bbdc:	e001      	b.n	800bbe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbe2:	687b      	ldr	r3, [r7, #4]
	}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	20000f28 	.word	0x20000f28
 800bbf4:	20000f44 	.word	0x20000f44

0800bbf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc04:	2300      	movs	r3, #0
 800bc06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d051      	beq.n	800bcb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc12:	4b2a      	ldr	r3, [pc, #168]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d241      	bcs.n	800bca0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	db06      	blt.n	800bc32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc24:	4b25      	ldr	r3, [pc, #148]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	6959      	ldr	r1, [r3, #20]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4a1f      	ldr	r2, [pc, #124]	; (800bcc0 <xTaskPriorityInherit+0xc8>)
 800bc44:	4413      	add	r3, r2
 800bc46:	4299      	cmp	r1, r3
 800bc48:	d122      	bne.n	800bc90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe f95e 	bl	8009f10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc54:	4b19      	ldr	r3, [pc, #100]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc62:	4b18      	ldr	r3, [pc, #96]	; (800bcc4 <xTaskPriorityInherit+0xcc>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d903      	bls.n	800bc72 <xTaskPriorityInherit+0x7a>
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6e:	4a15      	ldr	r2, [pc, #84]	; (800bcc4 <xTaskPriorityInherit+0xcc>)
 800bc70:	6013      	str	r3, [r2, #0]
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc76:	4613      	mov	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4a10      	ldr	r2, [pc, #64]	; (800bcc0 <xTaskPriorityInherit+0xc8>)
 800bc80:	441a      	add	r2, r3
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	3304      	adds	r3, #4
 800bc86:	4619      	mov	r1, r3
 800bc88:	4610      	mov	r0, r2
 800bc8a:	f7fe f8e4 	bl	8009e56 <vListInsertEnd>
 800bc8e:	e004      	b.n	800bc9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc90:	4b0a      	ldr	r3, [pc, #40]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e008      	b.n	800bcb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bca4:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d201      	bcs.n	800bcb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
	}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20000a48 	.word	0x20000a48
 800bcc0:	20000a4c 	.word	0x20000a4c
 800bcc4:	20000f24 	.word	0x20000f24

0800bcc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d056      	beq.n	800bd8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcde:	4b2e      	ldr	r3, [pc, #184]	; (800bd98 <xTaskPriorityDisinherit+0xd0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d00a      	beq.n	800bcfe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	60fb      	str	r3, [r7, #12]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10a      	bne.n	800bd1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	60bb      	str	r3, [r7, #8]
}
 800bd18:	bf00      	nop
 800bd1a:	e7fe      	b.n	800bd1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd20:	1e5a      	subs	r2, r3, #1
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d02c      	beq.n	800bd8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d128      	bne.n	800bd8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe f8e6 	bl	8009f10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <xTaskPriorityDisinherit+0xd4>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d903      	bls.n	800bd6c <xTaskPriorityDisinherit+0xa4>
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	4a0c      	ldr	r2, [pc, #48]	; (800bd9c <xTaskPriorityDisinherit+0xd4>)
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4a09      	ldr	r2, [pc, #36]	; (800bda0 <xTaskPriorityDisinherit+0xd8>)
 800bd7a:	441a      	add	r2, r3
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7fe f867 	bl	8009e56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd8c:	697b      	ldr	r3, [r7, #20]
	}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20000a48 	.word	0x20000a48
 800bd9c:	20000f24 	.word	0x20000f24
 800bda0:	20000a4c 	.word	0x20000a4c

0800bda4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d06a      	beq.n	800be92 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10a      	bne.n	800bdda <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	60fb      	str	r3, [r7, #12]
}
 800bdd6:	bf00      	nop
 800bdd8:	e7fe      	b.n	800bdd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d902      	bls.n	800bdea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	61fb      	str	r3, [r7, #28]
 800bde8:	e002      	b.n	800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	69fa      	ldr	r2, [r7, #28]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d04b      	beq.n	800be92 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	429a      	cmp	r2, r3
 800be02:	d146      	bne.n	800be92 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be04:	4b25      	ldr	r3, [pc, #148]	; (800be9c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69ba      	ldr	r2, [r7, #24]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d10a      	bne.n	800be24 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	60bb      	str	r3, [r7, #8]
}
 800be20:	bf00      	nop
 800be22:	e7fe      	b.n	800be22 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	69fa      	ldr	r2, [r7, #28]
 800be2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	db04      	blt.n	800be42 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	6959      	ldr	r1, [r3, #20]
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	4613      	mov	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4a13      	ldr	r2, [pc, #76]	; (800bea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be52:	4413      	add	r3, r2
 800be54:	4299      	cmp	r1, r3
 800be56:	d11c      	bne.n	800be92 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	3304      	adds	r3, #4
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fe f857 	bl	8009f10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be66:	4b0f      	ldr	r3, [pc, #60]	; (800bea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d903      	bls.n	800be76 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be72:	4a0c      	ldr	r2, [pc, #48]	; (800bea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be74:	6013      	str	r3, [r2, #0]
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4a07      	ldr	r2, [pc, #28]	; (800bea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be84:	441a      	add	r2, r3
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	3304      	adds	r3, #4
 800be8a:	4619      	mov	r1, r3
 800be8c:	4610      	mov	r0, r2
 800be8e:	f7fd ffe2 	bl	8009e56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be92:	bf00      	nop
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20000a48 	.word	0x20000a48
 800bea0:	20000a4c 	.word	0x20000a4c
 800bea4:	20000f24 	.word	0x20000f24

0800bea8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bea8:	b480      	push	{r7}
 800beaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800beac:	4b07      	ldr	r3, [pc, #28]	; (800becc <pvTaskIncrementMutexHeldCount+0x24>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800beb4:	4b05      	ldr	r3, [pc, #20]	; (800becc <pvTaskIncrementMutexHeldCount+0x24>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800beba:	3201      	adds	r2, #1
 800bebc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bebe:	4b03      	ldr	r3, [pc, #12]	; (800becc <pvTaskIncrementMutexHeldCount+0x24>)
 800bec0:	681b      	ldr	r3, [r3, #0]
	}
 800bec2:	4618      	mov	r0, r3
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr
 800becc:	20000a48 	.word	0x20000a48

0800bed0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800beda:	4b21      	ldr	r3, [pc, #132]	; (800bf60 <prvAddCurrentTaskToDelayedList+0x90>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bee0:	4b20      	ldr	r3, [pc, #128]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe f812 	bl	8009f10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef2:	d10a      	bne.n	800bf0a <prvAddCurrentTaskToDelayedList+0x3a>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d007      	beq.n	800bf0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800befa:	4b1a      	ldr	r3, [pc, #104]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3304      	adds	r3, #4
 800bf00:	4619      	mov	r1, r3
 800bf02:	4819      	ldr	r0, [pc, #100]	; (800bf68 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf04:	f7fd ffa7 	bl	8009e56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf08:	e026      	b.n	800bf58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4413      	add	r3, r2
 800bf10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf12:	4b14      	ldr	r3, [pc, #80]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d209      	bcs.n	800bf36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf22:	4b12      	ldr	r3, [pc, #72]	; (800bf6c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	4610      	mov	r0, r2
 800bf30:	f7fd ffb5 	bl	8009e9e <vListInsert>
}
 800bf34:	e010      	b.n	800bf58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf36:	4b0e      	ldr	r3, [pc, #56]	; (800bf70 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	4619      	mov	r1, r3
 800bf42:	4610      	mov	r0, r2
 800bf44:	f7fd ffab 	bl	8009e9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf48:	4b0a      	ldr	r3, [pc, #40]	; (800bf74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d202      	bcs.n	800bf58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf52:	4a08      	ldr	r2, [pc, #32]	; (800bf74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	6013      	str	r3, [r2, #0]
}
 800bf58:	bf00      	nop
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20000f20 	.word	0x20000f20
 800bf64:	20000a48 	.word	0x20000a48
 800bf68:	20000f08 	.word	0x20000f08
 800bf6c:	20000ed8 	.word	0x20000ed8
 800bf70:	20000ed4 	.word	0x20000ed4
 800bf74:	20000f3c 	.word	0x20000f3c

0800bf78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	; 0x28
 800bf7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf82:	f000 fb07 	bl	800c594 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf86:	4b1c      	ldr	r3, [pc, #112]	; (800bff8 <xTimerCreateTimerTask+0x80>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d021      	beq.n	800bfd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf96:	1d3a      	adds	r2, r7, #4
 800bf98:	f107 0108 	add.w	r1, r7, #8
 800bf9c:	f107 030c 	add.w	r3, r7, #12
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fd ff11 	bl	8009dc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	9202      	str	r2, [sp, #8]
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	460a      	mov	r2, r1
 800bfb8:	4910      	ldr	r1, [pc, #64]	; (800bffc <xTimerCreateTimerTask+0x84>)
 800bfba:	4811      	ldr	r0, [pc, #68]	; (800c000 <xTimerCreateTimerTask+0x88>)
 800bfbc:	f7fe ffe0 	bl	800af80 <xTaskCreateStatic>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	4a10      	ldr	r2, [pc, #64]	; (800c004 <xTimerCreateTimerTask+0x8c>)
 800bfc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	; (800c004 <xTimerCreateTimerTask+0x8c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10a      	bne.n	800bfee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfdc:	f383 8811 	msr	BASEPRI, r3
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	613b      	str	r3, [r7, #16]
}
 800bfea:	bf00      	nop
 800bfec:	e7fe      	b.n	800bfec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfee:	697b      	ldr	r3, [r7, #20]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20000f78 	.word	0x20000f78
 800bffc:	080122cc 	.word	0x080122cc
 800c000:	0800c13d 	.word	0x0800c13d
 800c004:	20000f7c 	.word	0x20000f7c

0800c008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08a      	sub	sp, #40	; 0x28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c016:	2300      	movs	r3, #0
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	623b      	str	r3, [r7, #32]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c036:	4b1a      	ldr	r3, [pc, #104]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d02a      	beq.n	800c094 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b05      	cmp	r3, #5
 800c04e:	dc18      	bgt.n	800c082 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c050:	f7ff fdb4 	bl	800bbbc <xTaskGetSchedulerState>
 800c054:	4603      	mov	r3, r0
 800c056:	2b02      	cmp	r3, #2
 800c058:	d109      	bne.n	800c06e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c05a:	4b11      	ldr	r3, [pc, #68]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c05c:	6818      	ldr	r0, [r3, #0]
 800c05e:	f107 0110 	add.w	r1, r7, #16
 800c062:	2300      	movs	r3, #0
 800c064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c066:	f7fe f925 	bl	800a2b4 <xQueueGenericSend>
 800c06a:	6278      	str	r0, [r7, #36]	; 0x24
 800c06c:	e012      	b.n	800c094 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c06e:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c070:	6818      	ldr	r0, [r3, #0]
 800c072:	f107 0110 	add.w	r1, r7, #16
 800c076:	2300      	movs	r3, #0
 800c078:	2200      	movs	r2, #0
 800c07a:	f7fe f91b 	bl	800a2b4 <xQueueGenericSend>
 800c07e:	6278      	str	r0, [r7, #36]	; 0x24
 800c080:	e008      	b.n	800c094 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c082:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	f107 0110 	add.w	r1, r7, #16
 800c08a:	2300      	movs	r3, #0
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	f7fe fa0f 	bl	800a4b0 <xQueueGenericSendFromISR>
 800c092:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c096:	4618      	mov	r0, r3
 800c098:	3728      	adds	r7, #40	; 0x28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	20000f78 	.word	0x20000f78

0800c0a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af02      	add	r7, sp, #8
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ae:	4b22      	ldr	r3, [pc, #136]	; (800c138 <prvProcessExpiredTimer+0x94>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fd ff27 	bl	8009f10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c8:	f003 0304 	and.w	r3, r3, #4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d022      	beq.n	800c116 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	699a      	ldr	r2, [r3, #24]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	18d1      	adds	r1, r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	6978      	ldr	r0, [r7, #20]
 800c0de:	f000 f8d1 	bl	800c284 <prvInsertTimerInActiveList>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d01f      	beq.n	800c128 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	6978      	ldr	r0, [r7, #20]
 800c0f4:	f7ff ff88 	bl	800c008 <xTimerGenericCommand>
 800c0f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d113      	bne.n	800c128 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	60fb      	str	r3, [r7, #12]
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c11c:	f023 0301 	bic.w	r3, r3, #1
 800c120:	b2da      	uxtb	r2, r3
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	6a1b      	ldr	r3, [r3, #32]
 800c12c:	6978      	ldr	r0, [r7, #20]
 800c12e:	4798      	blx	r3
}
 800c130:	bf00      	nop
 800c132:	3718      	adds	r7, #24
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	20000f70 	.word	0x20000f70

0800c13c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c144:	f107 0308 	add.w	r3, r7, #8
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 f857 	bl	800c1fc <prvGetNextExpireTime>
 800c14e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	4619      	mov	r1, r3
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 f803 	bl	800c160 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c15a:	f000 f8d5 	bl	800c308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c15e:	e7f1      	b.n	800c144 <prvTimerTask+0x8>

0800c160 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c16a:	f7ff f945 	bl	800b3f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c16e:	f107 0308 	add.w	r3, r7, #8
 800c172:	4618      	mov	r0, r3
 800c174:	f000 f866 	bl	800c244 <prvSampleTimeNow>
 800c178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d130      	bne.n	800c1e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10a      	bne.n	800c19c <prvProcessTimerOrBlockTask+0x3c>
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d806      	bhi.n	800c19c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c18e:	f7ff f941 	bl	800b414 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c192:	68f9      	ldr	r1, [r7, #12]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7ff ff85 	bl	800c0a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c19a:	e024      	b.n	800c1e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d008      	beq.n	800c1b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1a2:	4b13      	ldr	r3, [pc, #76]	; (800c1f0 <prvProcessTimerOrBlockTask+0x90>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <prvProcessTimerOrBlockTask+0x50>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e000      	b.n	800c1b2 <prvProcessTimerOrBlockTask+0x52>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1b4:	4b0f      	ldr	r3, [pc, #60]	; (800c1f4 <prvProcessTimerOrBlockTask+0x94>)
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	f7fe fea9 	bl	800af18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1c6:	f7ff f925 	bl	800b414 <xTaskResumeAll>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10a      	bne.n	800c1e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1d0:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <prvProcessTimerOrBlockTask+0x98>)
 800c1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	f3bf 8f6f 	isb	sy
}
 800c1e0:	e001      	b.n	800c1e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1e2:	f7ff f917 	bl	800b414 <xTaskResumeAll>
}
 800c1e6:	bf00      	nop
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20000f74 	.word	0x20000f74
 800c1f4:	20000f78 	.word	0x20000f78
 800c1f8:	e000ed04 	.word	0xe000ed04

0800c1fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c204:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <prvGetNextExpireTime+0x44>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <prvGetNextExpireTime+0x16>
 800c20e:	2201      	movs	r2, #1
 800c210:	e000      	b.n	800c214 <prvGetNextExpireTime+0x18>
 800c212:	2200      	movs	r2, #0
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d105      	bne.n	800c22c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c220:	4b07      	ldr	r3, [pc, #28]	; (800c240 <prvGetNextExpireTime+0x44>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	e001      	b.n	800c230 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c22c:	2300      	movs	r3, #0
 800c22e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c230:	68fb      	ldr	r3, [r7, #12]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	20000f70 	.word	0x20000f70

0800c244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c24c:	f7ff f980 	bl	800b550 <xTaskGetTickCount>
 800c250:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c252:	4b0b      	ldr	r3, [pc, #44]	; (800c280 <prvSampleTimeNow+0x3c>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d205      	bcs.n	800c268 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c25c:	f000 f936 	bl	800c4cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	601a      	str	r2, [r3, #0]
 800c266:	e002      	b.n	800c26e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c26e:	4a04      	ldr	r2, [pc, #16]	; (800c280 <prvSampleTimeNow+0x3c>)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c274:	68fb      	ldr	r3, [r7, #12]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20000f80 	.word	0x20000f80

0800c284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c292:	2300      	movs	r3, #0
 800c294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d812      	bhi.n	800c2d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	1ad2      	subs	r2, r2, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d302      	bcc.n	800c2be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	617b      	str	r3, [r7, #20]
 800c2bc:	e01b      	b.n	800c2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2be:	4b10      	ldr	r3, [pc, #64]	; (800c300 <prvInsertTimerInActiveList+0x7c>)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f7fd fde8 	bl	8009e9e <vListInsert>
 800c2ce:	e012      	b.n	800c2f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d206      	bcs.n	800c2e6 <prvInsertTimerInActiveList+0x62>
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d302      	bcc.n	800c2e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	e007      	b.n	800c2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2e6:	4b07      	ldr	r3, [pc, #28]	; (800c304 <prvInsertTimerInActiveList+0x80>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	f7fd fdd4 	bl	8009e9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2f6:	697b      	ldr	r3, [r7, #20]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3718      	adds	r7, #24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	20000f74 	.word	0x20000f74
 800c304:	20000f70 	.word	0x20000f70

0800c308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08e      	sub	sp, #56	; 0x38
 800c30c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c30e:	e0ca      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	da18      	bge.n	800c348 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c316:	1d3b      	adds	r3, r7, #4
 800c318:	3304      	adds	r3, #4
 800c31a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	61fb      	str	r3, [r7, #28]
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c33e:	6850      	ldr	r0, [r2, #4]
 800c340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c342:	6892      	ldr	r2, [r2, #8]
 800c344:	4611      	mov	r1, r2
 800c346:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f2c0 80aa 	blt.w	800c4a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d004      	beq.n	800c366 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	3304      	adds	r3, #4
 800c360:	4618      	mov	r0, r3
 800c362:	f7fd fdd5 	bl	8009f10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c366:	463b      	mov	r3, r7
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff ff6b 	bl	800c244 <prvSampleTimeNow>
 800c36e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b09      	cmp	r3, #9
 800c374:	f200 8097 	bhi.w	800c4a6 <prvProcessReceivedCommands+0x19e>
 800c378:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <prvProcessReceivedCommands+0x78>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c3a9 	.word	0x0800c3a9
 800c384:	0800c3a9 	.word	0x0800c3a9
 800c388:	0800c3a9 	.word	0x0800c3a9
 800c38c:	0800c41d 	.word	0x0800c41d
 800c390:	0800c431 	.word	0x0800c431
 800c394:	0800c47b 	.word	0x0800c47b
 800c398:	0800c3a9 	.word	0x0800c3a9
 800c39c:	0800c3a9 	.word	0x0800c3a9
 800c3a0:	0800c41d 	.word	0x0800c41d
 800c3a4:	0800c431 	.word	0x0800c431
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	18d1      	adds	r1, r2, r3
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c8:	f7ff ff5c 	bl	800c284 <prvInsertTimerInActiveList>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d069      	beq.n	800c4a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d05e      	beq.n	800c4a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ec:	699b      	ldr	r3, [r3, #24]
 800c3ee:	441a      	add	r2, r3
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3fa:	f7ff fe05 	bl	800c008 <xTimerGenericCommand>
 800c3fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d14f      	bne.n	800c4a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	61bb      	str	r3, [r7, #24]
}
 800c418:	bf00      	nop
 800c41a:	e7fe      	b.n	800c41a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	b2da      	uxtb	r2, r3
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c42e:	e03a      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c436:	f043 0301 	orr.w	r3, r3, #1
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10a      	bne.n	800c466 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	617b      	str	r3, [r7, #20]
}
 800c462:	bf00      	nop
 800c464:	e7fe      	b.n	800c464 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c468:	699a      	ldr	r2, [r3, #24]
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	18d1      	adds	r1, r2, r3
 800c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c474:	f7ff ff06 	bl	800c284 <prvInsertTimerInActiveList>
					break;
 800c478:	e015      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c480:	f003 0302 	and.w	r3, r3, #2
 800c484:	2b00      	cmp	r3, #0
 800c486:	d103      	bne.n	800c490 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c48a:	f000 fbe1 	bl	800cc50 <vPortFree>
 800c48e:	e00a      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c496:	f023 0301 	bic.w	r3, r3, #1
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4a2:	e000      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c4a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4a6:	4b08      	ldr	r3, [pc, #32]	; (800c4c8 <prvProcessReceivedCommands+0x1c0>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	1d39      	adds	r1, r7, #4
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe f926 	bl	800a700 <xQueueReceive>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f47f af2a 	bne.w	800c310 <prvProcessReceivedCommands+0x8>
	}
}
 800c4bc:	bf00      	nop
 800c4be:	bf00      	nop
 800c4c0:	3730      	adds	r7, #48	; 0x30
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20000f78 	.word	0x20000f78

0800c4cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b088      	sub	sp, #32
 800c4d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4d2:	e048      	b.n	800c566 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4d4:	4b2d      	ldr	r3, [pc, #180]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4de:	4b2b      	ldr	r3, [pc, #172]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7fd fd0f 	bl	8009f10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	d02e      	beq.n	800c566 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	4413      	add	r3, r2
 800c510:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	429a      	cmp	r2, r3
 800c518:	d90e      	bls.n	800c538 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c526:	4b19      	ldr	r3, [pc, #100]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3304      	adds	r3, #4
 800c52e:	4619      	mov	r1, r3
 800c530:	4610      	mov	r0, r2
 800c532:	f7fd fcb4 	bl	8009e9e <vListInsert>
 800c536:	e016      	b.n	800c566 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c538:	2300      	movs	r3, #0
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	2300      	movs	r3, #0
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	2100      	movs	r1, #0
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f7ff fd60 	bl	800c008 <xTimerGenericCommand>
 800c548:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10a      	bne.n	800c566 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	603b      	str	r3, [r7, #0]
}
 800c562:	bf00      	nop
 800c564:	e7fe      	b.n	800c564 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c566:	4b09      	ldr	r3, [pc, #36]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1b1      	bne.n	800c4d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c570:	4b06      	ldr	r3, [pc, #24]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c576:	4b06      	ldr	r3, [pc, #24]	; (800c590 <prvSwitchTimerLists+0xc4>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a04      	ldr	r2, [pc, #16]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c57c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c57e:	4a04      	ldr	r2, [pc, #16]	; (800c590 <prvSwitchTimerLists+0xc4>)
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	6013      	str	r3, [r2, #0]
}
 800c584:	bf00      	nop
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	20000f70 	.word	0x20000f70
 800c590:	20000f74 	.word	0x20000f74

0800c594 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c59a:	f000 f96b 	bl	800c874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c59e:	4b15      	ldr	r3, [pc, #84]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d120      	bne.n	800c5e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5a6:	4814      	ldr	r0, [pc, #80]	; (800c5f8 <prvCheckForValidListAndQueue+0x64>)
 800c5a8:	f7fd fc28 	bl	8009dfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5ac:	4813      	ldr	r0, [pc, #76]	; (800c5fc <prvCheckForValidListAndQueue+0x68>)
 800c5ae:	f7fd fc25 	bl	8009dfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5b2:	4b13      	ldr	r3, [pc, #76]	; (800c600 <prvCheckForValidListAndQueue+0x6c>)
 800c5b4:	4a10      	ldr	r2, [pc, #64]	; (800c5f8 <prvCheckForValidListAndQueue+0x64>)
 800c5b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5b8:	4b12      	ldr	r3, [pc, #72]	; (800c604 <prvCheckForValidListAndQueue+0x70>)
 800c5ba:	4a10      	ldr	r2, [pc, #64]	; (800c5fc <prvCheckForValidListAndQueue+0x68>)
 800c5bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	4b11      	ldr	r3, [pc, #68]	; (800c608 <prvCheckForValidListAndQueue+0x74>)
 800c5c4:	4a11      	ldr	r2, [pc, #68]	; (800c60c <prvCheckForValidListAndQueue+0x78>)
 800c5c6:	2110      	movs	r1, #16
 800c5c8:	200a      	movs	r0, #10
 800c5ca:	f7fd fd33 	bl	800a034 <xQueueGenericCreateStatic>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	4a08      	ldr	r2, [pc, #32]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5d4:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d005      	beq.n	800c5e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5dc:	4b05      	ldr	r3, [pc, #20]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	490b      	ldr	r1, [pc, #44]	; (800c610 <prvCheckForValidListAndQueue+0x7c>)
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fc44 	bl	800ae70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5e8:	f000 f974 	bl	800c8d4 <vPortExitCritical>
}
 800c5ec:	bf00      	nop
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20000f78 	.word	0x20000f78
 800c5f8:	20000f48 	.word	0x20000f48
 800c5fc:	20000f5c 	.word	0x20000f5c
 800c600:	20000f70 	.word	0x20000f70
 800c604:	20000f74 	.word	0x20000f74
 800c608:	20001024 	.word	0x20001024
 800c60c:	20000f84 	.word	0x20000f84
 800c610:	080122d4 	.word	0x080122d4

0800c614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3b04      	subs	r3, #4
 800c624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3b04      	subs	r3, #4
 800c632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	f023 0201 	bic.w	r2, r3, #1
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3b04      	subs	r3, #4
 800c642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c644:	4a0c      	ldr	r2, [pc, #48]	; (800c678 <pxPortInitialiseStack+0x64>)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	3b14      	subs	r3, #20
 800c64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	3b04      	subs	r3, #4
 800c65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f06f 0202 	mvn.w	r2, #2
 800c662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	3b20      	subs	r3, #32
 800c668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c66a:	68fb      	ldr	r3, [r7, #12]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	0800c67d 	.word	0x0800c67d

0800c67c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c686:	4b12      	ldr	r3, [pc, #72]	; (800c6d0 <prvTaskExitError+0x54>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68e:	d00a      	beq.n	800c6a6 <prvTaskExitError+0x2a>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	60fb      	str	r3, [r7, #12]
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <prvTaskExitError+0x28>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	60bb      	str	r3, [r7, #8]
}
 800c6b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6ba:	bf00      	nop
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0fc      	beq.n	800c6bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6c2:	bf00      	nop
 800c6c4:	bf00      	nop
 800c6c6:	3714      	adds	r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	20000034 	.word	0x20000034
	...

0800c6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6e0:	4b07      	ldr	r3, [pc, #28]	; (800c700 <pxCurrentTCBConst2>)
 800c6e2:	6819      	ldr	r1, [r3, #0]
 800c6e4:	6808      	ldr	r0, [r1, #0]
 800c6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	f380 8809 	msr	PSP, r0
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f04f 0000 	mov.w	r0, #0
 800c6f6:	f380 8811 	msr	BASEPRI, r0
 800c6fa:	4770      	bx	lr
 800c6fc:	f3af 8000 	nop.w

0800c700 <pxCurrentTCBConst2>:
 800c700:	20000a48 	.word	0x20000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop

0800c708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c708:	4808      	ldr	r0, [pc, #32]	; (800c72c <prvPortStartFirstTask+0x24>)
 800c70a:	6800      	ldr	r0, [r0, #0]
 800c70c:	6800      	ldr	r0, [r0, #0]
 800c70e:	f380 8808 	msr	MSP, r0
 800c712:	f04f 0000 	mov.w	r0, #0
 800c716:	f380 8814 	msr	CONTROL, r0
 800c71a:	b662      	cpsie	i
 800c71c:	b661      	cpsie	f
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	df00      	svc	0
 800c728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c72a:	bf00      	nop
 800c72c:	e000ed08 	.word	0xe000ed08

0800c730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c736:	4b46      	ldr	r3, [pc, #280]	; (800c850 <xPortStartScheduler+0x120>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a46      	ldr	r2, [pc, #280]	; (800c854 <xPortStartScheduler+0x124>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d10a      	bne.n	800c756 <xPortStartScheduler+0x26>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	613b      	str	r3, [r7, #16]
}
 800c752:	bf00      	nop
 800c754:	e7fe      	b.n	800c754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c756:	4b3e      	ldr	r3, [pc, #248]	; (800c850 <xPortStartScheduler+0x120>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a3f      	ldr	r2, [pc, #252]	; (800c858 <xPortStartScheduler+0x128>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d10a      	bne.n	800c776 <xPortStartScheduler+0x46>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	60fb      	str	r3, [r7, #12]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c776:	4b39      	ldr	r3, [pc, #228]	; (800c85c <xPortStartScheduler+0x12c>)
 800c778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	22ff      	movs	r2, #255	; 0xff
 800c786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	4b31      	ldr	r3, [pc, #196]	; (800c860 <xPortStartScheduler+0x130>)
 800c79c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c79e:	4b31      	ldr	r3, [pc, #196]	; (800c864 <xPortStartScheduler+0x134>)
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7a4:	e009      	b.n	800c7ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c7a6:	4b2f      	ldr	r3, [pc, #188]	; (800c864 <xPortStartScheduler+0x134>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	4a2d      	ldr	r2, [pc, #180]	; (800c864 <xPortStartScheduler+0x134>)
 800c7ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7b0:	78fb      	ldrb	r3, [r7, #3]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7ba:	78fb      	ldrb	r3, [r7, #3]
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7c2:	2b80      	cmp	r3, #128	; 0x80
 800c7c4:	d0ef      	beq.n	800c7a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7c6:	4b27      	ldr	r3, [pc, #156]	; (800c864 <xPortStartScheduler+0x134>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f1c3 0307 	rsb	r3, r3, #7
 800c7ce:	2b04      	cmp	r3, #4
 800c7d0:	d00a      	beq.n	800c7e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	60bb      	str	r3, [r7, #8]
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <xPortStartScheduler+0x134>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	021b      	lsls	r3, r3, #8
 800c7ee:	4a1d      	ldr	r2, [pc, #116]	; (800c864 <xPortStartScheduler+0x134>)
 800c7f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <xPortStartScheduler+0x134>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7fa:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <xPortStartScheduler+0x134>)
 800c7fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	b2da      	uxtb	r2, r3
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c806:	4b18      	ldr	r3, [pc, #96]	; (800c868 <xPortStartScheduler+0x138>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a17      	ldr	r2, [pc, #92]	; (800c868 <xPortStartScheduler+0x138>)
 800c80c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c812:	4b15      	ldr	r3, [pc, #84]	; (800c868 <xPortStartScheduler+0x138>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a14      	ldr	r2, [pc, #80]	; (800c868 <xPortStartScheduler+0x138>)
 800c818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c81c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c81e:	f000 f8dd 	bl	800c9dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c822:	4b12      	ldr	r3, [pc, #72]	; (800c86c <xPortStartScheduler+0x13c>)
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c828:	f000 f8fc 	bl	800ca24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c82c:	4b10      	ldr	r3, [pc, #64]	; (800c870 <xPortStartScheduler+0x140>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a0f      	ldr	r2, [pc, #60]	; (800c870 <xPortStartScheduler+0x140>)
 800c832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c838:	f7ff ff66 	bl	800c708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c83c:	f7fe ff52 	bl	800b6e4 <vTaskSwitchContext>
	prvTaskExitError();
 800c840:	f7ff ff1c 	bl	800c67c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	e000ed00 	.word	0xe000ed00
 800c854:	410fc271 	.word	0x410fc271
 800c858:	410fc270 	.word	0x410fc270
 800c85c:	e000e400 	.word	0xe000e400
 800c860:	20001074 	.word	0x20001074
 800c864:	20001078 	.word	0x20001078
 800c868:	e000ed20 	.word	0xe000ed20
 800c86c:	20000034 	.word	0x20000034
 800c870:	e000ef34 	.word	0xe000ef34

0800c874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	607b      	str	r3, [r7, #4]
}
 800c88c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c88e:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <vPortEnterCritical+0x58>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3301      	adds	r3, #1
 800c894:	4a0d      	ldr	r2, [pc, #52]	; (800c8cc <vPortEnterCritical+0x58>)
 800c896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c898:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <vPortEnterCritical+0x58>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d10f      	bne.n	800c8c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <vPortEnterCritical+0x5c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00a      	beq.n	800c8c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	603b      	str	r3, [r7, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <vPortEnterCritical+0x4a>
	}
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	20000034 	.word	0x20000034
 800c8d0:	e000ed04 	.word	0xe000ed04

0800c8d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8da:	4b12      	ldr	r3, [pc, #72]	; (800c924 <vPortExitCritical+0x50>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <vPortExitCritical+0x24>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	607b      	str	r3, [r7, #4]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <vPortExitCritical+0x50>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	4a09      	ldr	r2, [pc, #36]	; (800c924 <vPortExitCritical+0x50>)
 800c900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c902:	4b08      	ldr	r3, [pc, #32]	; (800c924 <vPortExitCritical+0x50>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d105      	bne.n	800c916 <vPortExitCritical+0x42>
 800c90a:	2300      	movs	r3, #0
 800c90c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	f383 8811 	msr	BASEPRI, r3
}
 800c914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c916:	bf00      	nop
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20000034 	.word	0x20000034
	...

0800c930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c930:	f3ef 8009 	mrs	r0, PSP
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	4b15      	ldr	r3, [pc, #84]	; (800c990 <pxCurrentTCBConst>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	f01e 0f10 	tst.w	lr, #16
 800c940:	bf08      	it	eq
 800c942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94a:	6010      	str	r0, [r2, #0]
 800c94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c950:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c954:	f380 8811 	msr	BASEPRI, r0
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f7fe fec0 	bl	800b6e4 <vTaskSwitchContext>
 800c964:	f04f 0000 	mov.w	r0, #0
 800c968:	f380 8811 	msr	BASEPRI, r0
 800c96c:	bc09      	pop	{r0, r3}
 800c96e:	6819      	ldr	r1, [r3, #0]
 800c970:	6808      	ldr	r0, [r1, #0]
 800c972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c976:	f01e 0f10 	tst.w	lr, #16
 800c97a:	bf08      	it	eq
 800c97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c980:	f380 8809 	msr	PSP, r0
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	f3af 8000 	nop.w

0800c990 <pxCurrentTCBConst>:
 800c990:	20000a48 	.word	0x20000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop

0800c998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	607b      	str	r3, [r7, #4]
}
 800c9b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9b2:	f7fe fddd 	bl	800b570 <xTaskIncrementTick>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9bc:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <xPortSysTickHandler+0x40>)
 800c9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	f383 8811 	msr	BASEPRI, r3
}
 800c9ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	e000ed04 	.word	0xe000ed04

0800c9dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ca14 <vPortSetupTimerInterrupt+0x38>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ca18 <vPortSetupTimerInterrupt+0x3c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a0a      	ldr	r2, [pc, #40]	; (800ca1c <vPortSetupTimerInterrupt+0x40>)
 800c9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f6:	099b      	lsrs	r3, r3, #6
 800c9f8:	4a09      	ldr	r2, [pc, #36]	; (800ca20 <vPortSetupTimerInterrupt+0x44>)
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9fe:	4b04      	ldr	r3, [pc, #16]	; (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800ca00:	2207      	movs	r2, #7
 800ca02:	601a      	str	r2, [r3, #0]
}
 800ca04:	bf00      	nop
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	e000e010 	.word	0xe000e010
 800ca14:	e000e018 	.word	0xe000e018
 800ca18:	20000010 	.word	0x20000010
 800ca1c:	10624dd3 	.word	0x10624dd3
 800ca20:	e000e014 	.word	0xe000e014

0800ca24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca34 <vPortEnableVFP+0x10>
 800ca28:	6801      	ldr	r1, [r0, #0]
 800ca2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca2e:	6001      	str	r1, [r0, #0]
 800ca30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca32:	bf00      	nop
 800ca34:	e000ed88 	.word	0xe000ed88

0800ca38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca3e:	f3ef 8305 	mrs	r3, IPSR
 800ca42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b0f      	cmp	r3, #15
 800ca48:	d914      	bls.n	800ca74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca4a:	4a17      	ldr	r2, [pc, #92]	; (800caa8 <vPortValidateInterruptPriority+0x70>)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4413      	add	r3, r2
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca54:	4b15      	ldr	r3, [pc, #84]	; (800caac <vPortValidateInterruptPriority+0x74>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	7afa      	ldrb	r2, [r7, #11]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d20a      	bcs.n	800ca74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	607b      	str	r3, [r7, #4]
}
 800ca70:	bf00      	nop
 800ca72:	e7fe      	b.n	800ca72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca74:	4b0e      	ldr	r3, [pc, #56]	; (800cab0 <vPortValidateInterruptPriority+0x78>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <vPortValidateInterruptPriority+0x7c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d90a      	bls.n	800ca9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	603b      	str	r3, [r7, #0]
}
 800ca96:	bf00      	nop
 800ca98:	e7fe      	b.n	800ca98 <vPortValidateInterruptPriority+0x60>
	}
 800ca9a:	bf00      	nop
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	e000e3f0 	.word	0xe000e3f0
 800caac:	20001074 	.word	0x20001074
 800cab0:	e000ed0c 	.word	0xe000ed0c
 800cab4:	20001078 	.word	0x20001078

0800cab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	; 0x28
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cac4:	f7fe fc98 	bl	800b3f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cac8:	4b5b      	ldr	r3, [pc, #364]	; (800cc38 <pvPortMalloc+0x180>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cad0:	f000 f920 	bl	800cd14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cad4:	4b59      	ldr	r3, [pc, #356]	; (800cc3c <pvPortMalloc+0x184>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4013      	ands	r3, r2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f040 8093 	bne.w	800cc08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d01d      	beq.n	800cb24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cae8:	2208      	movs	r2, #8
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4413      	add	r3, r2
 800caee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f003 0307 	and.w	r3, r3, #7
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d014      	beq.n	800cb24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f023 0307 	bic.w	r3, r3, #7
 800cb00:	3308      	adds	r3, #8
 800cb02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00a      	beq.n	800cb24 <pvPortMalloc+0x6c>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	617b      	str	r3, [r7, #20]
}
 800cb20:	bf00      	nop
 800cb22:	e7fe      	b.n	800cb22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d06e      	beq.n	800cc08 <pvPortMalloc+0x150>
 800cb2a:	4b45      	ldr	r3, [pc, #276]	; (800cc40 <pvPortMalloc+0x188>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d869      	bhi.n	800cc08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb34:	4b43      	ldr	r3, [pc, #268]	; (800cc44 <pvPortMalloc+0x18c>)
 800cb36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb38:	4b42      	ldr	r3, [pc, #264]	; (800cc44 <pvPortMalloc+0x18c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb3e:	e004      	b.n	800cb4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d903      	bls.n	800cb5c <pvPortMalloc+0xa4>
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1f1      	bne.n	800cb40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb5c:	4b36      	ldr	r3, [pc, #216]	; (800cc38 <pvPortMalloc+0x180>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d050      	beq.n	800cc08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb66:	6a3b      	ldr	r3, [r7, #32]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2208      	movs	r2, #8
 800cb6c:	4413      	add	r3, r2
 800cb6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	6a3b      	ldr	r3, [r7, #32]
 800cb76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	1ad2      	subs	r2, r2, r3
 800cb80:	2308      	movs	r3, #8
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d91f      	bls.n	800cbc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	f003 0307 	and.w	r3, r3, #7
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00a      	beq.n	800cbb0 <pvPortMalloc+0xf8>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	613b      	str	r3, [r7, #16]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	1ad2      	subs	r2, r2, r3
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbc2:	69b8      	ldr	r0, [r7, #24]
 800cbc4:	f000 f908 	bl	800cdd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbc8:	4b1d      	ldr	r3, [pc, #116]	; (800cc40 <pvPortMalloc+0x188>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	4a1b      	ldr	r2, [pc, #108]	; (800cc40 <pvPortMalloc+0x188>)
 800cbd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbd6:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <pvPortMalloc+0x188>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b1b      	ldr	r3, [pc, #108]	; (800cc48 <pvPortMalloc+0x190>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d203      	bcs.n	800cbea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbe2:	4b17      	ldr	r3, [pc, #92]	; (800cc40 <pvPortMalloc+0x188>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a18      	ldr	r2, [pc, #96]	; (800cc48 <pvPortMalloc+0x190>)
 800cbe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	4b13      	ldr	r3, [pc, #76]	; (800cc3c <pvPortMalloc+0x184>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbfe:	4b13      	ldr	r3, [pc, #76]	; (800cc4c <pvPortMalloc+0x194>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	4a11      	ldr	r2, [pc, #68]	; (800cc4c <pvPortMalloc+0x194>)
 800cc06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc08:	f7fe fc04 	bl	800b414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	f003 0307 	and.w	r3, r3, #7
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00a      	beq.n	800cc2c <pvPortMalloc+0x174>
	__asm volatile
 800cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	60fb      	str	r3, [r7, #12]
}
 800cc28:	bf00      	nop
 800cc2a:	e7fe      	b.n	800cc2a <pvPortMalloc+0x172>
	return pvReturn;
 800cc2c:	69fb      	ldr	r3, [r7, #28]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3728      	adds	r7, #40	; 0x28
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20004c84 	.word	0x20004c84
 800cc3c:	20004c98 	.word	0x20004c98
 800cc40:	20004c88 	.word	0x20004c88
 800cc44:	20004c7c 	.word	0x20004c7c
 800cc48:	20004c8c 	.word	0x20004c8c
 800cc4c:	20004c90 	.word	0x20004c90

0800cc50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d04d      	beq.n	800ccfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc62:	2308      	movs	r3, #8
 800cc64:	425b      	negs	r3, r3
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	4413      	add	r3, r2
 800cc6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	4b24      	ldr	r3, [pc, #144]	; (800cd08 <vPortFree+0xb8>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4013      	ands	r3, r2
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10a      	bne.n	800cc94 <vPortFree+0x44>
	__asm volatile
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	60fb      	str	r3, [r7, #12]
}
 800cc90:	bf00      	nop
 800cc92:	e7fe      	b.n	800cc92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00a      	beq.n	800ccb2 <vPortFree+0x62>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	60bb      	str	r3, [r7, #8]
}
 800ccae:	bf00      	nop
 800ccb0:	e7fe      	b.n	800ccb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	4b14      	ldr	r3, [pc, #80]	; (800cd08 <vPortFree+0xb8>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4013      	ands	r3, r2
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d01e      	beq.n	800ccfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d11a      	bne.n	800ccfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <vPortFree+0xb8>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	43db      	mvns	r3, r3
 800ccd2:	401a      	ands	r2, r3
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccd8:	f7fe fb8e 	bl	800b3f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	685a      	ldr	r2, [r3, #4]
 800cce0:	4b0a      	ldr	r3, [pc, #40]	; (800cd0c <vPortFree+0xbc>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4413      	add	r3, r2
 800cce6:	4a09      	ldr	r2, [pc, #36]	; (800cd0c <vPortFree+0xbc>)
 800cce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccea:	6938      	ldr	r0, [r7, #16]
 800ccec:	f000 f874 	bl	800cdd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccf0:	4b07      	ldr	r3, [pc, #28]	; (800cd10 <vPortFree+0xc0>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	4a06      	ldr	r2, [pc, #24]	; (800cd10 <vPortFree+0xc0>)
 800ccf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ccfa:	f7fe fb8b 	bl	800b414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccfe:	bf00      	nop
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	20004c98 	.word	0x20004c98
 800cd0c:	20004c88 	.word	0x20004c88
 800cd10:	20004c94 	.word	0x20004c94

0800cd14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cd1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd20:	4b27      	ldr	r3, [pc, #156]	; (800cdc0 <prvHeapInit+0xac>)
 800cd22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f003 0307 	and.w	r3, r3, #7
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00c      	beq.n	800cd48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3307      	adds	r3, #7
 800cd32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 0307 	bic.w	r3, r3, #7
 800cd3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	4a1f      	ldr	r2, [pc, #124]	; (800cdc0 <prvHeapInit+0xac>)
 800cd44:	4413      	add	r3, r2
 800cd46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd4c:	4a1d      	ldr	r2, [pc, #116]	; (800cdc4 <prvHeapInit+0xb0>)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd52:	4b1c      	ldr	r3, [pc, #112]	; (800cdc4 <prvHeapInit+0xb0>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd60:	2208      	movs	r2, #8
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f023 0307 	bic.w	r3, r3, #7
 800cd6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4a15      	ldr	r2, [pc, #84]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd76:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd7e:	4b12      	ldr	r3, [pc, #72]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2200      	movs	r2, #0
 800cd84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	1ad2      	subs	r2, r2, r3
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd94:	4b0c      	ldr	r3, [pc, #48]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	4a0a      	ldr	r2, [pc, #40]	; (800cdcc <prvHeapInit+0xb8>)
 800cda2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	4a09      	ldr	r2, [pc, #36]	; (800cdd0 <prvHeapInit+0xbc>)
 800cdaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdac:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <prvHeapInit+0xc0>)
 800cdae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr
 800cdc0:	2000107c 	.word	0x2000107c
 800cdc4:	20004c7c 	.word	0x20004c7c
 800cdc8:	20004c84 	.word	0x20004c84
 800cdcc:	20004c8c 	.word	0x20004c8c
 800cdd0:	20004c88 	.word	0x20004c88
 800cdd4:	20004c98 	.word	0x20004c98

0800cdd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cde0:	4b28      	ldr	r3, [pc, #160]	; (800ce84 <prvInsertBlockIntoFreeList+0xac>)
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	e002      	b.n	800cdec <prvInsertBlockIntoFreeList+0x14>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d8f7      	bhi.n	800cde6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4413      	add	r3, r2
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d108      	bne.n	800ce1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	441a      	add	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	441a      	add	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d118      	bne.n	800ce60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	4b15      	ldr	r3, [pc, #84]	; (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d00d      	beq.n	800ce56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	441a      	add	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	e008      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce56:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	e003      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d002      	beq.n	800ce76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce76:	bf00      	nop
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20004c7c 	.word	0x20004c7c
 800ce88:	20004c84 	.word	0x20004c84

0800ce8c <__errno>:
 800ce8c:	4b01      	ldr	r3, [pc, #4]	; (800ce94 <__errno+0x8>)
 800ce8e:	6818      	ldr	r0, [r3, #0]
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	20000038 	.word	0x20000038

0800ce98 <__libc_init_array>:
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	4d0d      	ldr	r5, [pc, #52]	; (800ced0 <__libc_init_array+0x38>)
 800ce9c:	4c0d      	ldr	r4, [pc, #52]	; (800ced4 <__libc_init_array+0x3c>)
 800ce9e:	1b64      	subs	r4, r4, r5
 800cea0:	10a4      	asrs	r4, r4, #2
 800cea2:	2600      	movs	r6, #0
 800cea4:	42a6      	cmp	r6, r4
 800cea6:	d109      	bne.n	800cebc <__libc_init_array+0x24>
 800cea8:	4d0b      	ldr	r5, [pc, #44]	; (800ced8 <__libc_init_array+0x40>)
 800ceaa:	4c0c      	ldr	r4, [pc, #48]	; (800cedc <__libc_init_array+0x44>)
 800ceac:	f005 f88a 	bl	8011fc4 <_init>
 800ceb0:	1b64      	subs	r4, r4, r5
 800ceb2:	10a4      	asrs	r4, r4, #2
 800ceb4:	2600      	movs	r6, #0
 800ceb6:	42a6      	cmp	r6, r4
 800ceb8:	d105      	bne.n	800cec6 <__libc_init_array+0x2e>
 800ceba:	bd70      	pop	{r4, r5, r6, pc}
 800cebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cec0:	4798      	blx	r3
 800cec2:	3601      	adds	r6, #1
 800cec4:	e7ee      	b.n	800cea4 <__libc_init_array+0xc>
 800cec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceca:	4798      	blx	r3
 800cecc:	3601      	adds	r6, #1
 800cece:	e7f2      	b.n	800ceb6 <__libc_init_array+0x1e>
 800ced0:	08013dac 	.word	0x08013dac
 800ced4:	08013dac 	.word	0x08013dac
 800ced8:	08013dac 	.word	0x08013dac
 800cedc:	08013db0 	.word	0x08013db0

0800cee0 <malloc>:
 800cee0:	4b02      	ldr	r3, [pc, #8]	; (800ceec <malloc+0xc>)
 800cee2:	4601      	mov	r1, r0
 800cee4:	6818      	ldr	r0, [r3, #0]
 800cee6:	f000 b871 	b.w	800cfcc <_malloc_r>
 800ceea:	bf00      	nop
 800ceec:	20000038 	.word	0x20000038

0800cef0 <free>:
 800cef0:	4b02      	ldr	r3, [pc, #8]	; (800cefc <free+0xc>)
 800cef2:	4601      	mov	r1, r0
 800cef4:	6818      	ldr	r0, [r3, #0]
 800cef6:	f000 b819 	b.w	800cf2c <_free_r>
 800cefa:	bf00      	nop
 800cefc:	20000038 	.word	0x20000038

0800cf00 <memcpy>:
 800cf00:	440a      	add	r2, r1
 800cf02:	4291      	cmp	r1, r2
 800cf04:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf08:	d100      	bne.n	800cf0c <memcpy+0xc>
 800cf0a:	4770      	bx	lr
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf16:	4291      	cmp	r1, r2
 800cf18:	d1f9      	bne.n	800cf0e <memcpy+0xe>
 800cf1a:	bd10      	pop	{r4, pc}

0800cf1c <memset>:
 800cf1c:	4402      	add	r2, r0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d100      	bne.n	800cf26 <memset+0xa>
 800cf24:	4770      	bx	lr
 800cf26:	f803 1b01 	strb.w	r1, [r3], #1
 800cf2a:	e7f9      	b.n	800cf20 <memset+0x4>

0800cf2c <_free_r>:
 800cf2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf2e:	2900      	cmp	r1, #0
 800cf30:	d048      	beq.n	800cfc4 <_free_r+0x98>
 800cf32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf36:	9001      	str	r0, [sp, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf3e:	bfb8      	it	lt
 800cf40:	18e4      	addlt	r4, r4, r3
 800cf42:	f003 f8b5 	bl	80100b0 <__malloc_lock>
 800cf46:	4a20      	ldr	r2, [pc, #128]	; (800cfc8 <_free_r+0x9c>)
 800cf48:	9801      	ldr	r0, [sp, #4]
 800cf4a:	6813      	ldr	r3, [r2, #0]
 800cf4c:	4615      	mov	r5, r2
 800cf4e:	b933      	cbnz	r3, 800cf5e <_free_r+0x32>
 800cf50:	6063      	str	r3, [r4, #4]
 800cf52:	6014      	str	r4, [r2, #0]
 800cf54:	b003      	add	sp, #12
 800cf56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf5a:	f003 b8af 	b.w	80100bc <__malloc_unlock>
 800cf5e:	42a3      	cmp	r3, r4
 800cf60:	d90b      	bls.n	800cf7a <_free_r+0x4e>
 800cf62:	6821      	ldr	r1, [r4, #0]
 800cf64:	1862      	adds	r2, r4, r1
 800cf66:	4293      	cmp	r3, r2
 800cf68:	bf04      	itt	eq
 800cf6a:	681a      	ldreq	r2, [r3, #0]
 800cf6c:	685b      	ldreq	r3, [r3, #4]
 800cf6e:	6063      	str	r3, [r4, #4]
 800cf70:	bf04      	itt	eq
 800cf72:	1852      	addeq	r2, r2, r1
 800cf74:	6022      	streq	r2, [r4, #0]
 800cf76:	602c      	str	r4, [r5, #0]
 800cf78:	e7ec      	b.n	800cf54 <_free_r+0x28>
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	b10b      	cbz	r3, 800cf84 <_free_r+0x58>
 800cf80:	42a3      	cmp	r3, r4
 800cf82:	d9fa      	bls.n	800cf7a <_free_r+0x4e>
 800cf84:	6811      	ldr	r1, [r2, #0]
 800cf86:	1855      	adds	r5, r2, r1
 800cf88:	42a5      	cmp	r5, r4
 800cf8a:	d10b      	bne.n	800cfa4 <_free_r+0x78>
 800cf8c:	6824      	ldr	r4, [r4, #0]
 800cf8e:	4421      	add	r1, r4
 800cf90:	1854      	adds	r4, r2, r1
 800cf92:	42a3      	cmp	r3, r4
 800cf94:	6011      	str	r1, [r2, #0]
 800cf96:	d1dd      	bne.n	800cf54 <_free_r+0x28>
 800cf98:	681c      	ldr	r4, [r3, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	6053      	str	r3, [r2, #4]
 800cf9e:	4421      	add	r1, r4
 800cfa0:	6011      	str	r1, [r2, #0]
 800cfa2:	e7d7      	b.n	800cf54 <_free_r+0x28>
 800cfa4:	d902      	bls.n	800cfac <_free_r+0x80>
 800cfa6:	230c      	movs	r3, #12
 800cfa8:	6003      	str	r3, [r0, #0]
 800cfaa:	e7d3      	b.n	800cf54 <_free_r+0x28>
 800cfac:	6825      	ldr	r5, [r4, #0]
 800cfae:	1961      	adds	r1, r4, r5
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	bf04      	itt	eq
 800cfb4:	6819      	ldreq	r1, [r3, #0]
 800cfb6:	685b      	ldreq	r3, [r3, #4]
 800cfb8:	6063      	str	r3, [r4, #4]
 800cfba:	bf04      	itt	eq
 800cfbc:	1949      	addeq	r1, r1, r5
 800cfbe:	6021      	streq	r1, [r4, #0]
 800cfc0:	6054      	str	r4, [r2, #4]
 800cfc2:	e7c7      	b.n	800cf54 <_free_r+0x28>
 800cfc4:	b003      	add	sp, #12
 800cfc6:	bd30      	pop	{r4, r5, pc}
 800cfc8:	20004c9c 	.word	0x20004c9c

0800cfcc <_malloc_r>:
 800cfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfce:	1ccd      	adds	r5, r1, #3
 800cfd0:	f025 0503 	bic.w	r5, r5, #3
 800cfd4:	3508      	adds	r5, #8
 800cfd6:	2d0c      	cmp	r5, #12
 800cfd8:	bf38      	it	cc
 800cfda:	250c      	movcc	r5, #12
 800cfdc:	2d00      	cmp	r5, #0
 800cfde:	4606      	mov	r6, r0
 800cfe0:	db01      	blt.n	800cfe6 <_malloc_r+0x1a>
 800cfe2:	42a9      	cmp	r1, r5
 800cfe4:	d903      	bls.n	800cfee <_malloc_r+0x22>
 800cfe6:	230c      	movs	r3, #12
 800cfe8:	6033      	str	r3, [r6, #0]
 800cfea:	2000      	movs	r0, #0
 800cfec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfee:	f003 f85f 	bl	80100b0 <__malloc_lock>
 800cff2:	4921      	ldr	r1, [pc, #132]	; (800d078 <_malloc_r+0xac>)
 800cff4:	680a      	ldr	r2, [r1, #0]
 800cff6:	4614      	mov	r4, r2
 800cff8:	b99c      	cbnz	r4, 800d022 <_malloc_r+0x56>
 800cffa:	4f20      	ldr	r7, [pc, #128]	; (800d07c <_malloc_r+0xb0>)
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	b923      	cbnz	r3, 800d00a <_malloc_r+0x3e>
 800d000:	4621      	mov	r1, r4
 800d002:	4630      	mov	r0, r6
 800d004:	f000 feb6 	bl	800dd74 <_sbrk_r>
 800d008:	6038      	str	r0, [r7, #0]
 800d00a:	4629      	mov	r1, r5
 800d00c:	4630      	mov	r0, r6
 800d00e:	f000 feb1 	bl	800dd74 <_sbrk_r>
 800d012:	1c43      	adds	r3, r0, #1
 800d014:	d123      	bne.n	800d05e <_malloc_r+0x92>
 800d016:	230c      	movs	r3, #12
 800d018:	6033      	str	r3, [r6, #0]
 800d01a:	4630      	mov	r0, r6
 800d01c:	f003 f84e 	bl	80100bc <__malloc_unlock>
 800d020:	e7e3      	b.n	800cfea <_malloc_r+0x1e>
 800d022:	6823      	ldr	r3, [r4, #0]
 800d024:	1b5b      	subs	r3, r3, r5
 800d026:	d417      	bmi.n	800d058 <_malloc_r+0x8c>
 800d028:	2b0b      	cmp	r3, #11
 800d02a:	d903      	bls.n	800d034 <_malloc_r+0x68>
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	441c      	add	r4, r3
 800d030:	6025      	str	r5, [r4, #0]
 800d032:	e004      	b.n	800d03e <_malloc_r+0x72>
 800d034:	6863      	ldr	r3, [r4, #4]
 800d036:	42a2      	cmp	r2, r4
 800d038:	bf0c      	ite	eq
 800d03a:	600b      	streq	r3, [r1, #0]
 800d03c:	6053      	strne	r3, [r2, #4]
 800d03e:	4630      	mov	r0, r6
 800d040:	f003 f83c 	bl	80100bc <__malloc_unlock>
 800d044:	f104 000b 	add.w	r0, r4, #11
 800d048:	1d23      	adds	r3, r4, #4
 800d04a:	f020 0007 	bic.w	r0, r0, #7
 800d04e:	1ac2      	subs	r2, r0, r3
 800d050:	d0cc      	beq.n	800cfec <_malloc_r+0x20>
 800d052:	1a1b      	subs	r3, r3, r0
 800d054:	50a3      	str	r3, [r4, r2]
 800d056:	e7c9      	b.n	800cfec <_malloc_r+0x20>
 800d058:	4622      	mov	r2, r4
 800d05a:	6864      	ldr	r4, [r4, #4]
 800d05c:	e7cc      	b.n	800cff8 <_malloc_r+0x2c>
 800d05e:	1cc4      	adds	r4, r0, #3
 800d060:	f024 0403 	bic.w	r4, r4, #3
 800d064:	42a0      	cmp	r0, r4
 800d066:	d0e3      	beq.n	800d030 <_malloc_r+0x64>
 800d068:	1a21      	subs	r1, r4, r0
 800d06a:	4630      	mov	r0, r6
 800d06c:	f000 fe82 	bl	800dd74 <_sbrk_r>
 800d070:	3001      	adds	r0, #1
 800d072:	d1dd      	bne.n	800d030 <_malloc_r+0x64>
 800d074:	e7cf      	b.n	800d016 <_malloc_r+0x4a>
 800d076:	bf00      	nop
 800d078:	20004c9c 	.word	0x20004c9c
 800d07c:	20004ca0 	.word	0x20004ca0

0800d080 <__cvt>:
 800d080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d084:	ec55 4b10 	vmov	r4, r5, d0
 800d088:	2d00      	cmp	r5, #0
 800d08a:	460e      	mov	r6, r1
 800d08c:	4619      	mov	r1, r3
 800d08e:	462b      	mov	r3, r5
 800d090:	bfbb      	ittet	lt
 800d092:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d096:	461d      	movlt	r5, r3
 800d098:	2300      	movge	r3, #0
 800d09a:	232d      	movlt	r3, #45	; 0x2d
 800d09c:	700b      	strb	r3, [r1, #0]
 800d09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d0a4:	4691      	mov	r9, r2
 800d0a6:	f023 0820 	bic.w	r8, r3, #32
 800d0aa:	bfbc      	itt	lt
 800d0ac:	4622      	movlt	r2, r4
 800d0ae:	4614      	movlt	r4, r2
 800d0b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d0b4:	d005      	beq.n	800d0c2 <__cvt+0x42>
 800d0b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d0ba:	d100      	bne.n	800d0be <__cvt+0x3e>
 800d0bc:	3601      	adds	r6, #1
 800d0be:	2102      	movs	r1, #2
 800d0c0:	e000      	b.n	800d0c4 <__cvt+0x44>
 800d0c2:	2103      	movs	r1, #3
 800d0c4:	ab03      	add	r3, sp, #12
 800d0c6:	9301      	str	r3, [sp, #4]
 800d0c8:	ab02      	add	r3, sp, #8
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	ec45 4b10 	vmov	d0, r4, r5
 800d0d0:	4653      	mov	r3, sl
 800d0d2:	4632      	mov	r2, r6
 800d0d4:	f001 fe68 	bl	800eda8 <_dtoa_r>
 800d0d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d0dc:	4607      	mov	r7, r0
 800d0de:	d102      	bne.n	800d0e6 <__cvt+0x66>
 800d0e0:	f019 0f01 	tst.w	r9, #1
 800d0e4:	d022      	beq.n	800d12c <__cvt+0xac>
 800d0e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d0ea:	eb07 0906 	add.w	r9, r7, r6
 800d0ee:	d110      	bne.n	800d112 <__cvt+0x92>
 800d0f0:	783b      	ldrb	r3, [r7, #0]
 800d0f2:	2b30      	cmp	r3, #48	; 0x30
 800d0f4:	d10a      	bne.n	800d10c <__cvt+0x8c>
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	f7f3 fceb 	bl	8000ad8 <__aeabi_dcmpeq>
 800d102:	b918      	cbnz	r0, 800d10c <__cvt+0x8c>
 800d104:	f1c6 0601 	rsb	r6, r6, #1
 800d108:	f8ca 6000 	str.w	r6, [sl]
 800d10c:	f8da 3000 	ldr.w	r3, [sl]
 800d110:	4499      	add	r9, r3
 800d112:	2200      	movs	r2, #0
 800d114:	2300      	movs	r3, #0
 800d116:	4620      	mov	r0, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	f7f3 fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800d11e:	b108      	cbz	r0, 800d124 <__cvt+0xa4>
 800d120:	f8cd 900c 	str.w	r9, [sp, #12]
 800d124:	2230      	movs	r2, #48	; 0x30
 800d126:	9b03      	ldr	r3, [sp, #12]
 800d128:	454b      	cmp	r3, r9
 800d12a:	d307      	bcc.n	800d13c <__cvt+0xbc>
 800d12c:	9b03      	ldr	r3, [sp, #12]
 800d12e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d130:	1bdb      	subs	r3, r3, r7
 800d132:	4638      	mov	r0, r7
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	b004      	add	sp, #16
 800d138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13c:	1c59      	adds	r1, r3, #1
 800d13e:	9103      	str	r1, [sp, #12]
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	e7f0      	b.n	800d126 <__cvt+0xa6>

0800d144 <__exponent>:
 800d144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d146:	4603      	mov	r3, r0
 800d148:	2900      	cmp	r1, #0
 800d14a:	bfb8      	it	lt
 800d14c:	4249      	neglt	r1, r1
 800d14e:	f803 2b02 	strb.w	r2, [r3], #2
 800d152:	bfb4      	ite	lt
 800d154:	222d      	movlt	r2, #45	; 0x2d
 800d156:	222b      	movge	r2, #43	; 0x2b
 800d158:	2909      	cmp	r1, #9
 800d15a:	7042      	strb	r2, [r0, #1]
 800d15c:	dd2a      	ble.n	800d1b4 <__exponent+0x70>
 800d15e:	f10d 0407 	add.w	r4, sp, #7
 800d162:	46a4      	mov	ip, r4
 800d164:	270a      	movs	r7, #10
 800d166:	46a6      	mov	lr, r4
 800d168:	460a      	mov	r2, r1
 800d16a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d16e:	fb07 1516 	mls	r5, r7, r6, r1
 800d172:	3530      	adds	r5, #48	; 0x30
 800d174:	2a63      	cmp	r2, #99	; 0x63
 800d176:	f104 34ff 	add.w	r4, r4, #4294967295
 800d17a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d17e:	4631      	mov	r1, r6
 800d180:	dcf1      	bgt.n	800d166 <__exponent+0x22>
 800d182:	3130      	adds	r1, #48	; 0x30
 800d184:	f1ae 0502 	sub.w	r5, lr, #2
 800d188:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d18c:	1c44      	adds	r4, r0, #1
 800d18e:	4629      	mov	r1, r5
 800d190:	4561      	cmp	r1, ip
 800d192:	d30a      	bcc.n	800d1aa <__exponent+0x66>
 800d194:	f10d 0209 	add.w	r2, sp, #9
 800d198:	eba2 020e 	sub.w	r2, r2, lr
 800d19c:	4565      	cmp	r5, ip
 800d19e:	bf88      	it	hi
 800d1a0:	2200      	movhi	r2, #0
 800d1a2:	4413      	add	r3, r2
 800d1a4:	1a18      	subs	r0, r3, r0
 800d1a6:	b003      	add	sp, #12
 800d1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d1b2:	e7ed      	b.n	800d190 <__exponent+0x4c>
 800d1b4:	2330      	movs	r3, #48	; 0x30
 800d1b6:	3130      	adds	r1, #48	; 0x30
 800d1b8:	7083      	strb	r3, [r0, #2]
 800d1ba:	70c1      	strb	r1, [r0, #3]
 800d1bc:	1d03      	adds	r3, r0, #4
 800d1be:	e7f1      	b.n	800d1a4 <__exponent+0x60>

0800d1c0 <_printf_float>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	ed2d 8b02 	vpush	{d8}
 800d1c8:	b08d      	sub	sp, #52	; 0x34
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d1d0:	4616      	mov	r6, r2
 800d1d2:	461f      	mov	r7, r3
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	f002 ff43 	bl	8010060 <_localeconv_r>
 800d1da:	f8d0 a000 	ldr.w	sl, [r0]
 800d1de:	4650      	mov	r0, sl
 800d1e0:	f7f2 fffe 	bl	80001e0 <strlen>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	9305      	str	r3, [sp, #20]
 800d1ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d1f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d1f4:	3307      	adds	r3, #7
 800d1f6:	f023 0307 	bic.w	r3, r3, #7
 800d1fa:	f103 0208 	add.w	r2, r3, #8
 800d1fe:	f8c8 2000 	str.w	r2, [r8]
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d20a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d20e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d212:	9307      	str	r3, [sp, #28]
 800d214:	f8cd 8018 	str.w	r8, [sp, #24]
 800d218:	ee08 0a10 	vmov	s16, r0
 800d21c:	4b9f      	ldr	r3, [pc, #636]	; (800d49c <_printf_float+0x2dc>)
 800d21e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d222:	f04f 32ff 	mov.w	r2, #4294967295
 800d226:	f7f3 fc89 	bl	8000b3c <__aeabi_dcmpun>
 800d22a:	bb88      	cbnz	r0, 800d290 <_printf_float+0xd0>
 800d22c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d230:	4b9a      	ldr	r3, [pc, #616]	; (800d49c <_printf_float+0x2dc>)
 800d232:	f04f 32ff 	mov.w	r2, #4294967295
 800d236:	f7f3 fc63 	bl	8000b00 <__aeabi_dcmple>
 800d23a:	bb48      	cbnz	r0, 800d290 <_printf_float+0xd0>
 800d23c:	2200      	movs	r2, #0
 800d23e:	2300      	movs	r3, #0
 800d240:	4640      	mov	r0, r8
 800d242:	4649      	mov	r1, r9
 800d244:	f7f3 fc52 	bl	8000aec <__aeabi_dcmplt>
 800d248:	b110      	cbz	r0, 800d250 <_printf_float+0x90>
 800d24a:	232d      	movs	r3, #45	; 0x2d
 800d24c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d250:	4b93      	ldr	r3, [pc, #588]	; (800d4a0 <_printf_float+0x2e0>)
 800d252:	4894      	ldr	r0, [pc, #592]	; (800d4a4 <_printf_float+0x2e4>)
 800d254:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d258:	bf94      	ite	ls
 800d25a:	4698      	movls	r8, r3
 800d25c:	4680      	movhi	r8, r0
 800d25e:	2303      	movs	r3, #3
 800d260:	6123      	str	r3, [r4, #16]
 800d262:	9b05      	ldr	r3, [sp, #20]
 800d264:	f023 0204 	bic.w	r2, r3, #4
 800d268:	6022      	str	r2, [r4, #0]
 800d26a:	f04f 0900 	mov.w	r9, #0
 800d26e:	9700      	str	r7, [sp, #0]
 800d270:	4633      	mov	r3, r6
 800d272:	aa0b      	add	r2, sp, #44	; 0x2c
 800d274:	4621      	mov	r1, r4
 800d276:	4628      	mov	r0, r5
 800d278:	f000 f9d8 	bl	800d62c <_printf_common>
 800d27c:	3001      	adds	r0, #1
 800d27e:	f040 8090 	bne.w	800d3a2 <_printf_float+0x1e2>
 800d282:	f04f 30ff 	mov.w	r0, #4294967295
 800d286:	b00d      	add	sp, #52	; 0x34
 800d288:	ecbd 8b02 	vpop	{d8}
 800d28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d290:	4642      	mov	r2, r8
 800d292:	464b      	mov	r3, r9
 800d294:	4640      	mov	r0, r8
 800d296:	4649      	mov	r1, r9
 800d298:	f7f3 fc50 	bl	8000b3c <__aeabi_dcmpun>
 800d29c:	b140      	cbz	r0, 800d2b0 <_printf_float+0xf0>
 800d29e:	464b      	mov	r3, r9
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	bfbc      	itt	lt
 800d2a4:	232d      	movlt	r3, #45	; 0x2d
 800d2a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d2aa:	487f      	ldr	r0, [pc, #508]	; (800d4a8 <_printf_float+0x2e8>)
 800d2ac:	4b7f      	ldr	r3, [pc, #508]	; (800d4ac <_printf_float+0x2ec>)
 800d2ae:	e7d1      	b.n	800d254 <_printf_float+0x94>
 800d2b0:	6863      	ldr	r3, [r4, #4]
 800d2b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d2b6:	9206      	str	r2, [sp, #24]
 800d2b8:	1c5a      	adds	r2, r3, #1
 800d2ba:	d13f      	bne.n	800d33c <_printf_float+0x17c>
 800d2bc:	2306      	movs	r3, #6
 800d2be:	6063      	str	r3, [r4, #4]
 800d2c0:	9b05      	ldr	r3, [sp, #20]
 800d2c2:	6861      	ldr	r1, [r4, #4]
 800d2c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	9303      	str	r3, [sp, #12]
 800d2cc:	ab0a      	add	r3, sp, #40	; 0x28
 800d2ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d2d2:	ab09      	add	r3, sp, #36	; 0x24
 800d2d4:	ec49 8b10 	vmov	d0, r8, r9
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	6022      	str	r2, [r4, #0]
 800d2dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	f7ff fecd 	bl	800d080 <__cvt>
 800d2e6:	9b06      	ldr	r3, [sp, #24]
 800d2e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2ea:	2b47      	cmp	r3, #71	; 0x47
 800d2ec:	4680      	mov	r8, r0
 800d2ee:	d108      	bne.n	800d302 <_printf_float+0x142>
 800d2f0:	1cc8      	adds	r0, r1, #3
 800d2f2:	db02      	blt.n	800d2fa <_printf_float+0x13a>
 800d2f4:	6863      	ldr	r3, [r4, #4]
 800d2f6:	4299      	cmp	r1, r3
 800d2f8:	dd41      	ble.n	800d37e <_printf_float+0x1be>
 800d2fa:	f1ab 0b02 	sub.w	fp, fp, #2
 800d2fe:	fa5f fb8b 	uxtb.w	fp, fp
 800d302:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d306:	d820      	bhi.n	800d34a <_printf_float+0x18a>
 800d308:	3901      	subs	r1, #1
 800d30a:	465a      	mov	r2, fp
 800d30c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d310:	9109      	str	r1, [sp, #36]	; 0x24
 800d312:	f7ff ff17 	bl	800d144 <__exponent>
 800d316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d318:	1813      	adds	r3, r2, r0
 800d31a:	2a01      	cmp	r2, #1
 800d31c:	4681      	mov	r9, r0
 800d31e:	6123      	str	r3, [r4, #16]
 800d320:	dc02      	bgt.n	800d328 <_printf_float+0x168>
 800d322:	6822      	ldr	r2, [r4, #0]
 800d324:	07d2      	lsls	r2, r2, #31
 800d326:	d501      	bpl.n	800d32c <_printf_float+0x16c>
 800d328:	3301      	adds	r3, #1
 800d32a:	6123      	str	r3, [r4, #16]
 800d32c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d330:	2b00      	cmp	r3, #0
 800d332:	d09c      	beq.n	800d26e <_printf_float+0xae>
 800d334:	232d      	movs	r3, #45	; 0x2d
 800d336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d33a:	e798      	b.n	800d26e <_printf_float+0xae>
 800d33c:	9a06      	ldr	r2, [sp, #24]
 800d33e:	2a47      	cmp	r2, #71	; 0x47
 800d340:	d1be      	bne.n	800d2c0 <_printf_float+0x100>
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1bc      	bne.n	800d2c0 <_printf_float+0x100>
 800d346:	2301      	movs	r3, #1
 800d348:	e7b9      	b.n	800d2be <_printf_float+0xfe>
 800d34a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d34e:	d118      	bne.n	800d382 <_printf_float+0x1c2>
 800d350:	2900      	cmp	r1, #0
 800d352:	6863      	ldr	r3, [r4, #4]
 800d354:	dd0b      	ble.n	800d36e <_printf_float+0x1ae>
 800d356:	6121      	str	r1, [r4, #16]
 800d358:	b913      	cbnz	r3, 800d360 <_printf_float+0x1a0>
 800d35a:	6822      	ldr	r2, [r4, #0]
 800d35c:	07d0      	lsls	r0, r2, #31
 800d35e:	d502      	bpl.n	800d366 <_printf_float+0x1a6>
 800d360:	3301      	adds	r3, #1
 800d362:	440b      	add	r3, r1
 800d364:	6123      	str	r3, [r4, #16]
 800d366:	65a1      	str	r1, [r4, #88]	; 0x58
 800d368:	f04f 0900 	mov.w	r9, #0
 800d36c:	e7de      	b.n	800d32c <_printf_float+0x16c>
 800d36e:	b913      	cbnz	r3, 800d376 <_printf_float+0x1b6>
 800d370:	6822      	ldr	r2, [r4, #0]
 800d372:	07d2      	lsls	r2, r2, #31
 800d374:	d501      	bpl.n	800d37a <_printf_float+0x1ba>
 800d376:	3302      	adds	r3, #2
 800d378:	e7f4      	b.n	800d364 <_printf_float+0x1a4>
 800d37a:	2301      	movs	r3, #1
 800d37c:	e7f2      	b.n	800d364 <_printf_float+0x1a4>
 800d37e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d384:	4299      	cmp	r1, r3
 800d386:	db05      	blt.n	800d394 <_printf_float+0x1d4>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	6121      	str	r1, [r4, #16]
 800d38c:	07d8      	lsls	r0, r3, #31
 800d38e:	d5ea      	bpl.n	800d366 <_printf_float+0x1a6>
 800d390:	1c4b      	adds	r3, r1, #1
 800d392:	e7e7      	b.n	800d364 <_printf_float+0x1a4>
 800d394:	2900      	cmp	r1, #0
 800d396:	bfd4      	ite	le
 800d398:	f1c1 0202 	rsble	r2, r1, #2
 800d39c:	2201      	movgt	r2, #1
 800d39e:	4413      	add	r3, r2
 800d3a0:	e7e0      	b.n	800d364 <_printf_float+0x1a4>
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	055a      	lsls	r2, r3, #21
 800d3a6:	d407      	bmi.n	800d3b8 <_printf_float+0x1f8>
 800d3a8:	6923      	ldr	r3, [r4, #16]
 800d3aa:	4642      	mov	r2, r8
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	47b8      	blx	r7
 800d3b2:	3001      	adds	r0, #1
 800d3b4:	d12c      	bne.n	800d410 <_printf_float+0x250>
 800d3b6:	e764      	b.n	800d282 <_printf_float+0xc2>
 800d3b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3bc:	f240 80e0 	bls.w	800d580 <_printf_float+0x3c0>
 800d3c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	f7f3 fb86 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d034      	beq.n	800d43a <_printf_float+0x27a>
 800d3d0:	4a37      	ldr	r2, [pc, #220]	; (800d4b0 <_printf_float+0x2f0>)
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	47b8      	blx	r7
 800d3da:	3001      	adds	r0, #1
 800d3dc:	f43f af51 	beq.w	800d282 <_printf_float+0xc2>
 800d3e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	db02      	blt.n	800d3ee <_printf_float+0x22e>
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	07d8      	lsls	r0, r3, #31
 800d3ec:	d510      	bpl.n	800d410 <_printf_float+0x250>
 800d3ee:	ee18 3a10 	vmov	r3, s16
 800d3f2:	4652      	mov	r2, sl
 800d3f4:	4631      	mov	r1, r6
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	47b8      	blx	r7
 800d3fa:	3001      	adds	r0, #1
 800d3fc:	f43f af41 	beq.w	800d282 <_printf_float+0xc2>
 800d400:	f04f 0800 	mov.w	r8, #0
 800d404:	f104 091a 	add.w	r9, r4, #26
 800d408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d40a:	3b01      	subs	r3, #1
 800d40c:	4543      	cmp	r3, r8
 800d40e:	dc09      	bgt.n	800d424 <_printf_float+0x264>
 800d410:	6823      	ldr	r3, [r4, #0]
 800d412:	079b      	lsls	r3, r3, #30
 800d414:	f100 8105 	bmi.w	800d622 <_printf_float+0x462>
 800d418:	68e0      	ldr	r0, [r4, #12]
 800d41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d41c:	4298      	cmp	r0, r3
 800d41e:	bfb8      	it	lt
 800d420:	4618      	movlt	r0, r3
 800d422:	e730      	b.n	800d286 <_printf_float+0xc6>
 800d424:	2301      	movs	r3, #1
 800d426:	464a      	mov	r2, r9
 800d428:	4631      	mov	r1, r6
 800d42a:	4628      	mov	r0, r5
 800d42c:	47b8      	blx	r7
 800d42e:	3001      	adds	r0, #1
 800d430:	f43f af27 	beq.w	800d282 <_printf_float+0xc2>
 800d434:	f108 0801 	add.w	r8, r8, #1
 800d438:	e7e6      	b.n	800d408 <_printf_float+0x248>
 800d43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	dc39      	bgt.n	800d4b4 <_printf_float+0x2f4>
 800d440:	4a1b      	ldr	r2, [pc, #108]	; (800d4b0 <_printf_float+0x2f0>)
 800d442:	2301      	movs	r3, #1
 800d444:	4631      	mov	r1, r6
 800d446:	4628      	mov	r0, r5
 800d448:	47b8      	blx	r7
 800d44a:	3001      	adds	r0, #1
 800d44c:	f43f af19 	beq.w	800d282 <_printf_float+0xc2>
 800d450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d454:	4313      	orrs	r3, r2
 800d456:	d102      	bne.n	800d45e <_printf_float+0x29e>
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	07d9      	lsls	r1, r3, #31
 800d45c:	d5d8      	bpl.n	800d410 <_printf_float+0x250>
 800d45e:	ee18 3a10 	vmov	r3, s16
 800d462:	4652      	mov	r2, sl
 800d464:	4631      	mov	r1, r6
 800d466:	4628      	mov	r0, r5
 800d468:	47b8      	blx	r7
 800d46a:	3001      	adds	r0, #1
 800d46c:	f43f af09 	beq.w	800d282 <_printf_float+0xc2>
 800d470:	f04f 0900 	mov.w	r9, #0
 800d474:	f104 0a1a 	add.w	sl, r4, #26
 800d478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d47a:	425b      	negs	r3, r3
 800d47c:	454b      	cmp	r3, r9
 800d47e:	dc01      	bgt.n	800d484 <_printf_float+0x2c4>
 800d480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d482:	e792      	b.n	800d3aa <_printf_float+0x1ea>
 800d484:	2301      	movs	r3, #1
 800d486:	4652      	mov	r2, sl
 800d488:	4631      	mov	r1, r6
 800d48a:	4628      	mov	r0, r5
 800d48c:	47b8      	blx	r7
 800d48e:	3001      	adds	r0, #1
 800d490:	f43f aef7 	beq.w	800d282 <_printf_float+0xc2>
 800d494:	f109 0901 	add.w	r9, r9, #1
 800d498:	e7ee      	b.n	800d478 <_printf_float+0x2b8>
 800d49a:	bf00      	nop
 800d49c:	7fefffff 	.word	0x7fefffff
 800d4a0:	080138dc 	.word	0x080138dc
 800d4a4:	080138e0 	.word	0x080138e0
 800d4a8:	080138e8 	.word	0x080138e8
 800d4ac:	080138e4 	.word	0x080138e4
 800d4b0:	08013cf1 	.word	0x08013cf1
 800d4b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	bfa8      	it	ge
 800d4bc:	461a      	movge	r2, r3
 800d4be:	2a00      	cmp	r2, #0
 800d4c0:	4691      	mov	r9, r2
 800d4c2:	dc37      	bgt.n	800d534 <_printf_float+0x374>
 800d4c4:	f04f 0b00 	mov.w	fp, #0
 800d4c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4cc:	f104 021a 	add.w	r2, r4, #26
 800d4d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4d2:	9305      	str	r3, [sp, #20]
 800d4d4:	eba3 0309 	sub.w	r3, r3, r9
 800d4d8:	455b      	cmp	r3, fp
 800d4da:	dc33      	bgt.n	800d544 <_printf_float+0x384>
 800d4dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	db3b      	blt.n	800d55c <_printf_float+0x39c>
 800d4e4:	6823      	ldr	r3, [r4, #0]
 800d4e6:	07da      	lsls	r2, r3, #31
 800d4e8:	d438      	bmi.n	800d55c <_printf_float+0x39c>
 800d4ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4ec:	9b05      	ldr	r3, [sp, #20]
 800d4ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	eba2 0901 	sub.w	r9, r2, r1
 800d4f6:	4599      	cmp	r9, r3
 800d4f8:	bfa8      	it	ge
 800d4fa:	4699      	movge	r9, r3
 800d4fc:	f1b9 0f00 	cmp.w	r9, #0
 800d500:	dc35      	bgt.n	800d56e <_printf_float+0x3ae>
 800d502:	f04f 0800 	mov.w	r8, #0
 800d506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d50a:	f104 0a1a 	add.w	sl, r4, #26
 800d50e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d512:	1a9b      	subs	r3, r3, r2
 800d514:	eba3 0309 	sub.w	r3, r3, r9
 800d518:	4543      	cmp	r3, r8
 800d51a:	f77f af79 	ble.w	800d410 <_printf_float+0x250>
 800d51e:	2301      	movs	r3, #1
 800d520:	4652      	mov	r2, sl
 800d522:	4631      	mov	r1, r6
 800d524:	4628      	mov	r0, r5
 800d526:	47b8      	blx	r7
 800d528:	3001      	adds	r0, #1
 800d52a:	f43f aeaa 	beq.w	800d282 <_printf_float+0xc2>
 800d52e:	f108 0801 	add.w	r8, r8, #1
 800d532:	e7ec      	b.n	800d50e <_printf_float+0x34e>
 800d534:	4613      	mov	r3, r2
 800d536:	4631      	mov	r1, r6
 800d538:	4642      	mov	r2, r8
 800d53a:	4628      	mov	r0, r5
 800d53c:	47b8      	blx	r7
 800d53e:	3001      	adds	r0, #1
 800d540:	d1c0      	bne.n	800d4c4 <_printf_float+0x304>
 800d542:	e69e      	b.n	800d282 <_printf_float+0xc2>
 800d544:	2301      	movs	r3, #1
 800d546:	4631      	mov	r1, r6
 800d548:	4628      	mov	r0, r5
 800d54a:	9205      	str	r2, [sp, #20]
 800d54c:	47b8      	blx	r7
 800d54e:	3001      	adds	r0, #1
 800d550:	f43f ae97 	beq.w	800d282 <_printf_float+0xc2>
 800d554:	9a05      	ldr	r2, [sp, #20]
 800d556:	f10b 0b01 	add.w	fp, fp, #1
 800d55a:	e7b9      	b.n	800d4d0 <_printf_float+0x310>
 800d55c:	ee18 3a10 	vmov	r3, s16
 800d560:	4652      	mov	r2, sl
 800d562:	4631      	mov	r1, r6
 800d564:	4628      	mov	r0, r5
 800d566:	47b8      	blx	r7
 800d568:	3001      	adds	r0, #1
 800d56a:	d1be      	bne.n	800d4ea <_printf_float+0x32a>
 800d56c:	e689      	b.n	800d282 <_printf_float+0xc2>
 800d56e:	9a05      	ldr	r2, [sp, #20]
 800d570:	464b      	mov	r3, r9
 800d572:	4442      	add	r2, r8
 800d574:	4631      	mov	r1, r6
 800d576:	4628      	mov	r0, r5
 800d578:	47b8      	blx	r7
 800d57a:	3001      	adds	r0, #1
 800d57c:	d1c1      	bne.n	800d502 <_printf_float+0x342>
 800d57e:	e680      	b.n	800d282 <_printf_float+0xc2>
 800d580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d582:	2a01      	cmp	r2, #1
 800d584:	dc01      	bgt.n	800d58a <_printf_float+0x3ca>
 800d586:	07db      	lsls	r3, r3, #31
 800d588:	d538      	bpl.n	800d5fc <_printf_float+0x43c>
 800d58a:	2301      	movs	r3, #1
 800d58c:	4642      	mov	r2, r8
 800d58e:	4631      	mov	r1, r6
 800d590:	4628      	mov	r0, r5
 800d592:	47b8      	blx	r7
 800d594:	3001      	adds	r0, #1
 800d596:	f43f ae74 	beq.w	800d282 <_printf_float+0xc2>
 800d59a:	ee18 3a10 	vmov	r3, s16
 800d59e:	4652      	mov	r2, sl
 800d5a0:	4631      	mov	r1, r6
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	47b8      	blx	r7
 800d5a6:	3001      	adds	r0, #1
 800d5a8:	f43f ae6b 	beq.w	800d282 <_printf_float+0xc2>
 800d5ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f7f3 fa90 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5b8:	b9d8      	cbnz	r0, 800d5f2 <_printf_float+0x432>
 800d5ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5bc:	f108 0201 	add.w	r2, r8, #1
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	47b8      	blx	r7
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	d10e      	bne.n	800d5ea <_printf_float+0x42a>
 800d5cc:	e659      	b.n	800d282 <_printf_float+0xc2>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	4652      	mov	r2, sl
 800d5d2:	4631      	mov	r1, r6
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	47b8      	blx	r7
 800d5d8:	3001      	adds	r0, #1
 800d5da:	f43f ae52 	beq.w	800d282 <_printf_float+0xc2>
 800d5de:	f108 0801 	add.w	r8, r8, #1
 800d5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	4543      	cmp	r3, r8
 800d5e8:	dcf1      	bgt.n	800d5ce <_printf_float+0x40e>
 800d5ea:	464b      	mov	r3, r9
 800d5ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d5f0:	e6dc      	b.n	800d3ac <_printf_float+0x1ec>
 800d5f2:	f04f 0800 	mov.w	r8, #0
 800d5f6:	f104 0a1a 	add.w	sl, r4, #26
 800d5fa:	e7f2      	b.n	800d5e2 <_printf_float+0x422>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	4642      	mov	r2, r8
 800d600:	e7df      	b.n	800d5c2 <_printf_float+0x402>
 800d602:	2301      	movs	r3, #1
 800d604:	464a      	mov	r2, r9
 800d606:	4631      	mov	r1, r6
 800d608:	4628      	mov	r0, r5
 800d60a:	47b8      	blx	r7
 800d60c:	3001      	adds	r0, #1
 800d60e:	f43f ae38 	beq.w	800d282 <_printf_float+0xc2>
 800d612:	f108 0801 	add.w	r8, r8, #1
 800d616:	68e3      	ldr	r3, [r4, #12]
 800d618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d61a:	1a5b      	subs	r3, r3, r1
 800d61c:	4543      	cmp	r3, r8
 800d61e:	dcf0      	bgt.n	800d602 <_printf_float+0x442>
 800d620:	e6fa      	b.n	800d418 <_printf_float+0x258>
 800d622:	f04f 0800 	mov.w	r8, #0
 800d626:	f104 0919 	add.w	r9, r4, #25
 800d62a:	e7f4      	b.n	800d616 <_printf_float+0x456>

0800d62c <_printf_common>:
 800d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	4616      	mov	r6, r2
 800d632:	4699      	mov	r9, r3
 800d634:	688a      	ldr	r2, [r1, #8]
 800d636:	690b      	ldr	r3, [r1, #16]
 800d638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d63c:	4293      	cmp	r3, r2
 800d63e:	bfb8      	it	lt
 800d640:	4613      	movlt	r3, r2
 800d642:	6033      	str	r3, [r6, #0]
 800d644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d648:	4607      	mov	r7, r0
 800d64a:	460c      	mov	r4, r1
 800d64c:	b10a      	cbz	r2, 800d652 <_printf_common+0x26>
 800d64e:	3301      	adds	r3, #1
 800d650:	6033      	str	r3, [r6, #0]
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	0699      	lsls	r1, r3, #26
 800d656:	bf42      	ittt	mi
 800d658:	6833      	ldrmi	r3, [r6, #0]
 800d65a:	3302      	addmi	r3, #2
 800d65c:	6033      	strmi	r3, [r6, #0]
 800d65e:	6825      	ldr	r5, [r4, #0]
 800d660:	f015 0506 	ands.w	r5, r5, #6
 800d664:	d106      	bne.n	800d674 <_printf_common+0x48>
 800d666:	f104 0a19 	add.w	sl, r4, #25
 800d66a:	68e3      	ldr	r3, [r4, #12]
 800d66c:	6832      	ldr	r2, [r6, #0]
 800d66e:	1a9b      	subs	r3, r3, r2
 800d670:	42ab      	cmp	r3, r5
 800d672:	dc26      	bgt.n	800d6c2 <_printf_common+0x96>
 800d674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d678:	1e13      	subs	r3, r2, #0
 800d67a:	6822      	ldr	r2, [r4, #0]
 800d67c:	bf18      	it	ne
 800d67e:	2301      	movne	r3, #1
 800d680:	0692      	lsls	r2, r2, #26
 800d682:	d42b      	bmi.n	800d6dc <_printf_common+0xb0>
 800d684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d688:	4649      	mov	r1, r9
 800d68a:	4638      	mov	r0, r7
 800d68c:	47c0      	blx	r8
 800d68e:	3001      	adds	r0, #1
 800d690:	d01e      	beq.n	800d6d0 <_printf_common+0xa4>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	68e5      	ldr	r5, [r4, #12]
 800d696:	6832      	ldr	r2, [r6, #0]
 800d698:	f003 0306 	and.w	r3, r3, #6
 800d69c:	2b04      	cmp	r3, #4
 800d69e:	bf08      	it	eq
 800d6a0:	1aad      	subeq	r5, r5, r2
 800d6a2:	68a3      	ldr	r3, [r4, #8]
 800d6a4:	6922      	ldr	r2, [r4, #16]
 800d6a6:	bf0c      	ite	eq
 800d6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6ac:	2500      	movne	r5, #0
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	bfc4      	itt	gt
 800d6b2:	1a9b      	subgt	r3, r3, r2
 800d6b4:	18ed      	addgt	r5, r5, r3
 800d6b6:	2600      	movs	r6, #0
 800d6b8:	341a      	adds	r4, #26
 800d6ba:	42b5      	cmp	r5, r6
 800d6bc:	d11a      	bne.n	800d6f4 <_printf_common+0xc8>
 800d6be:	2000      	movs	r0, #0
 800d6c0:	e008      	b.n	800d6d4 <_printf_common+0xa8>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4652      	mov	r2, sl
 800d6c6:	4649      	mov	r1, r9
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	47c0      	blx	r8
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d103      	bne.n	800d6d8 <_printf_common+0xac>
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d8:	3501      	adds	r5, #1
 800d6da:	e7c6      	b.n	800d66a <_printf_common+0x3e>
 800d6dc:	18e1      	adds	r1, r4, r3
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	2030      	movs	r0, #48	; 0x30
 800d6e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6e6:	4422      	add	r2, r4
 800d6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6f0:	3302      	adds	r3, #2
 800d6f2:	e7c7      	b.n	800d684 <_printf_common+0x58>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	47c0      	blx	r8
 800d6fe:	3001      	adds	r0, #1
 800d700:	d0e6      	beq.n	800d6d0 <_printf_common+0xa4>
 800d702:	3601      	adds	r6, #1
 800d704:	e7d9      	b.n	800d6ba <_printf_common+0x8e>
	...

0800d708 <_printf_i>:
 800d708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	460c      	mov	r4, r1
 800d70e:	4691      	mov	r9, r2
 800d710:	7e27      	ldrb	r7, [r4, #24]
 800d712:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d714:	2f78      	cmp	r7, #120	; 0x78
 800d716:	4680      	mov	r8, r0
 800d718:	469a      	mov	sl, r3
 800d71a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d71e:	d807      	bhi.n	800d730 <_printf_i+0x28>
 800d720:	2f62      	cmp	r7, #98	; 0x62
 800d722:	d80a      	bhi.n	800d73a <_printf_i+0x32>
 800d724:	2f00      	cmp	r7, #0
 800d726:	f000 80d8 	beq.w	800d8da <_printf_i+0x1d2>
 800d72a:	2f58      	cmp	r7, #88	; 0x58
 800d72c:	f000 80a3 	beq.w	800d876 <_printf_i+0x16e>
 800d730:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d738:	e03a      	b.n	800d7b0 <_printf_i+0xa8>
 800d73a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d73e:	2b15      	cmp	r3, #21
 800d740:	d8f6      	bhi.n	800d730 <_printf_i+0x28>
 800d742:	a001      	add	r0, pc, #4	; (adr r0, 800d748 <_printf_i+0x40>)
 800d744:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d748:	0800d7a1 	.word	0x0800d7a1
 800d74c:	0800d7b5 	.word	0x0800d7b5
 800d750:	0800d731 	.word	0x0800d731
 800d754:	0800d731 	.word	0x0800d731
 800d758:	0800d731 	.word	0x0800d731
 800d75c:	0800d731 	.word	0x0800d731
 800d760:	0800d7b5 	.word	0x0800d7b5
 800d764:	0800d731 	.word	0x0800d731
 800d768:	0800d731 	.word	0x0800d731
 800d76c:	0800d731 	.word	0x0800d731
 800d770:	0800d731 	.word	0x0800d731
 800d774:	0800d8c1 	.word	0x0800d8c1
 800d778:	0800d7e5 	.word	0x0800d7e5
 800d77c:	0800d8a3 	.word	0x0800d8a3
 800d780:	0800d731 	.word	0x0800d731
 800d784:	0800d731 	.word	0x0800d731
 800d788:	0800d8e3 	.word	0x0800d8e3
 800d78c:	0800d731 	.word	0x0800d731
 800d790:	0800d7e5 	.word	0x0800d7e5
 800d794:	0800d731 	.word	0x0800d731
 800d798:	0800d731 	.word	0x0800d731
 800d79c:	0800d8ab 	.word	0x0800d8ab
 800d7a0:	680b      	ldr	r3, [r1, #0]
 800d7a2:	1d1a      	adds	r2, r3, #4
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	600a      	str	r2, [r1, #0]
 800d7a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e0a3      	b.n	800d8fc <_printf_i+0x1f4>
 800d7b4:	6825      	ldr	r5, [r4, #0]
 800d7b6:	6808      	ldr	r0, [r1, #0]
 800d7b8:	062e      	lsls	r6, r5, #24
 800d7ba:	f100 0304 	add.w	r3, r0, #4
 800d7be:	d50a      	bpl.n	800d7d6 <_printf_i+0xce>
 800d7c0:	6805      	ldr	r5, [r0, #0]
 800d7c2:	600b      	str	r3, [r1, #0]
 800d7c4:	2d00      	cmp	r5, #0
 800d7c6:	da03      	bge.n	800d7d0 <_printf_i+0xc8>
 800d7c8:	232d      	movs	r3, #45	; 0x2d
 800d7ca:	426d      	negs	r5, r5
 800d7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7d0:	485e      	ldr	r0, [pc, #376]	; (800d94c <_printf_i+0x244>)
 800d7d2:	230a      	movs	r3, #10
 800d7d4:	e019      	b.n	800d80a <_printf_i+0x102>
 800d7d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d7da:	6805      	ldr	r5, [r0, #0]
 800d7dc:	600b      	str	r3, [r1, #0]
 800d7de:	bf18      	it	ne
 800d7e0:	b22d      	sxthne	r5, r5
 800d7e2:	e7ef      	b.n	800d7c4 <_printf_i+0xbc>
 800d7e4:	680b      	ldr	r3, [r1, #0]
 800d7e6:	6825      	ldr	r5, [r4, #0]
 800d7e8:	1d18      	adds	r0, r3, #4
 800d7ea:	6008      	str	r0, [r1, #0]
 800d7ec:	0628      	lsls	r0, r5, #24
 800d7ee:	d501      	bpl.n	800d7f4 <_printf_i+0xec>
 800d7f0:	681d      	ldr	r5, [r3, #0]
 800d7f2:	e002      	b.n	800d7fa <_printf_i+0xf2>
 800d7f4:	0669      	lsls	r1, r5, #25
 800d7f6:	d5fb      	bpl.n	800d7f0 <_printf_i+0xe8>
 800d7f8:	881d      	ldrh	r5, [r3, #0]
 800d7fa:	4854      	ldr	r0, [pc, #336]	; (800d94c <_printf_i+0x244>)
 800d7fc:	2f6f      	cmp	r7, #111	; 0x6f
 800d7fe:	bf0c      	ite	eq
 800d800:	2308      	moveq	r3, #8
 800d802:	230a      	movne	r3, #10
 800d804:	2100      	movs	r1, #0
 800d806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d80a:	6866      	ldr	r6, [r4, #4]
 800d80c:	60a6      	str	r6, [r4, #8]
 800d80e:	2e00      	cmp	r6, #0
 800d810:	bfa2      	ittt	ge
 800d812:	6821      	ldrge	r1, [r4, #0]
 800d814:	f021 0104 	bicge.w	r1, r1, #4
 800d818:	6021      	strge	r1, [r4, #0]
 800d81a:	b90d      	cbnz	r5, 800d820 <_printf_i+0x118>
 800d81c:	2e00      	cmp	r6, #0
 800d81e:	d04d      	beq.n	800d8bc <_printf_i+0x1b4>
 800d820:	4616      	mov	r6, r2
 800d822:	fbb5 f1f3 	udiv	r1, r5, r3
 800d826:	fb03 5711 	mls	r7, r3, r1, r5
 800d82a:	5dc7      	ldrb	r7, [r0, r7]
 800d82c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d830:	462f      	mov	r7, r5
 800d832:	42bb      	cmp	r3, r7
 800d834:	460d      	mov	r5, r1
 800d836:	d9f4      	bls.n	800d822 <_printf_i+0x11a>
 800d838:	2b08      	cmp	r3, #8
 800d83a:	d10b      	bne.n	800d854 <_printf_i+0x14c>
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	07df      	lsls	r7, r3, #31
 800d840:	d508      	bpl.n	800d854 <_printf_i+0x14c>
 800d842:	6923      	ldr	r3, [r4, #16]
 800d844:	6861      	ldr	r1, [r4, #4]
 800d846:	4299      	cmp	r1, r3
 800d848:	bfde      	ittt	le
 800d84a:	2330      	movle	r3, #48	; 0x30
 800d84c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d850:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d854:	1b92      	subs	r2, r2, r6
 800d856:	6122      	str	r2, [r4, #16]
 800d858:	f8cd a000 	str.w	sl, [sp]
 800d85c:	464b      	mov	r3, r9
 800d85e:	aa03      	add	r2, sp, #12
 800d860:	4621      	mov	r1, r4
 800d862:	4640      	mov	r0, r8
 800d864:	f7ff fee2 	bl	800d62c <_printf_common>
 800d868:	3001      	adds	r0, #1
 800d86a:	d14c      	bne.n	800d906 <_printf_i+0x1fe>
 800d86c:	f04f 30ff 	mov.w	r0, #4294967295
 800d870:	b004      	add	sp, #16
 800d872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d876:	4835      	ldr	r0, [pc, #212]	; (800d94c <_printf_i+0x244>)
 800d878:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d87c:	6823      	ldr	r3, [r4, #0]
 800d87e:	680e      	ldr	r6, [r1, #0]
 800d880:	061f      	lsls	r7, r3, #24
 800d882:	f856 5b04 	ldr.w	r5, [r6], #4
 800d886:	600e      	str	r6, [r1, #0]
 800d888:	d514      	bpl.n	800d8b4 <_printf_i+0x1ac>
 800d88a:	07d9      	lsls	r1, r3, #31
 800d88c:	bf44      	itt	mi
 800d88e:	f043 0320 	orrmi.w	r3, r3, #32
 800d892:	6023      	strmi	r3, [r4, #0]
 800d894:	b91d      	cbnz	r5, 800d89e <_printf_i+0x196>
 800d896:	6823      	ldr	r3, [r4, #0]
 800d898:	f023 0320 	bic.w	r3, r3, #32
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	2310      	movs	r3, #16
 800d8a0:	e7b0      	b.n	800d804 <_printf_i+0xfc>
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	f043 0320 	orr.w	r3, r3, #32
 800d8a8:	6023      	str	r3, [r4, #0]
 800d8aa:	2378      	movs	r3, #120	; 0x78
 800d8ac:	4828      	ldr	r0, [pc, #160]	; (800d950 <_printf_i+0x248>)
 800d8ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8b2:	e7e3      	b.n	800d87c <_printf_i+0x174>
 800d8b4:	065e      	lsls	r6, r3, #25
 800d8b6:	bf48      	it	mi
 800d8b8:	b2ad      	uxthmi	r5, r5
 800d8ba:	e7e6      	b.n	800d88a <_printf_i+0x182>
 800d8bc:	4616      	mov	r6, r2
 800d8be:	e7bb      	b.n	800d838 <_printf_i+0x130>
 800d8c0:	680b      	ldr	r3, [r1, #0]
 800d8c2:	6826      	ldr	r6, [r4, #0]
 800d8c4:	6960      	ldr	r0, [r4, #20]
 800d8c6:	1d1d      	adds	r5, r3, #4
 800d8c8:	600d      	str	r5, [r1, #0]
 800d8ca:	0635      	lsls	r5, r6, #24
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	d501      	bpl.n	800d8d4 <_printf_i+0x1cc>
 800d8d0:	6018      	str	r0, [r3, #0]
 800d8d2:	e002      	b.n	800d8da <_printf_i+0x1d2>
 800d8d4:	0671      	lsls	r1, r6, #25
 800d8d6:	d5fb      	bpl.n	800d8d0 <_printf_i+0x1c8>
 800d8d8:	8018      	strh	r0, [r3, #0]
 800d8da:	2300      	movs	r3, #0
 800d8dc:	6123      	str	r3, [r4, #16]
 800d8de:	4616      	mov	r6, r2
 800d8e0:	e7ba      	b.n	800d858 <_printf_i+0x150>
 800d8e2:	680b      	ldr	r3, [r1, #0]
 800d8e4:	1d1a      	adds	r2, r3, #4
 800d8e6:	600a      	str	r2, [r1, #0]
 800d8e8:	681e      	ldr	r6, [r3, #0]
 800d8ea:	6862      	ldr	r2, [r4, #4]
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f7f2 fc7e 	bl	80001f0 <memchr>
 800d8f4:	b108      	cbz	r0, 800d8fa <_printf_i+0x1f2>
 800d8f6:	1b80      	subs	r0, r0, r6
 800d8f8:	6060      	str	r0, [r4, #4]
 800d8fa:	6863      	ldr	r3, [r4, #4]
 800d8fc:	6123      	str	r3, [r4, #16]
 800d8fe:	2300      	movs	r3, #0
 800d900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d904:	e7a8      	b.n	800d858 <_printf_i+0x150>
 800d906:	6923      	ldr	r3, [r4, #16]
 800d908:	4632      	mov	r2, r6
 800d90a:	4649      	mov	r1, r9
 800d90c:	4640      	mov	r0, r8
 800d90e:	47d0      	blx	sl
 800d910:	3001      	adds	r0, #1
 800d912:	d0ab      	beq.n	800d86c <_printf_i+0x164>
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	079b      	lsls	r3, r3, #30
 800d918:	d413      	bmi.n	800d942 <_printf_i+0x23a>
 800d91a:	68e0      	ldr	r0, [r4, #12]
 800d91c:	9b03      	ldr	r3, [sp, #12]
 800d91e:	4298      	cmp	r0, r3
 800d920:	bfb8      	it	lt
 800d922:	4618      	movlt	r0, r3
 800d924:	e7a4      	b.n	800d870 <_printf_i+0x168>
 800d926:	2301      	movs	r3, #1
 800d928:	4632      	mov	r2, r6
 800d92a:	4649      	mov	r1, r9
 800d92c:	4640      	mov	r0, r8
 800d92e:	47d0      	blx	sl
 800d930:	3001      	adds	r0, #1
 800d932:	d09b      	beq.n	800d86c <_printf_i+0x164>
 800d934:	3501      	adds	r5, #1
 800d936:	68e3      	ldr	r3, [r4, #12]
 800d938:	9903      	ldr	r1, [sp, #12]
 800d93a:	1a5b      	subs	r3, r3, r1
 800d93c:	42ab      	cmp	r3, r5
 800d93e:	dcf2      	bgt.n	800d926 <_printf_i+0x21e>
 800d940:	e7eb      	b.n	800d91a <_printf_i+0x212>
 800d942:	2500      	movs	r5, #0
 800d944:	f104 0619 	add.w	r6, r4, #25
 800d948:	e7f5      	b.n	800d936 <_printf_i+0x22e>
 800d94a:	bf00      	nop
 800d94c:	080138ec 	.word	0x080138ec
 800d950:	080138fd 	.word	0x080138fd

0800d954 <_scanf_float>:
 800d954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d958:	b087      	sub	sp, #28
 800d95a:	4617      	mov	r7, r2
 800d95c:	9303      	str	r3, [sp, #12]
 800d95e:	688b      	ldr	r3, [r1, #8]
 800d960:	1e5a      	subs	r2, r3, #1
 800d962:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d966:	bf83      	ittte	hi
 800d968:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d96c:	195b      	addhi	r3, r3, r5
 800d96e:	9302      	strhi	r3, [sp, #8]
 800d970:	2300      	movls	r3, #0
 800d972:	bf86      	itte	hi
 800d974:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d978:	608b      	strhi	r3, [r1, #8]
 800d97a:	9302      	strls	r3, [sp, #8]
 800d97c:	680b      	ldr	r3, [r1, #0]
 800d97e:	468b      	mov	fp, r1
 800d980:	2500      	movs	r5, #0
 800d982:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d986:	f84b 3b1c 	str.w	r3, [fp], #28
 800d98a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d98e:	4680      	mov	r8, r0
 800d990:	460c      	mov	r4, r1
 800d992:	465e      	mov	r6, fp
 800d994:	46aa      	mov	sl, r5
 800d996:	46a9      	mov	r9, r5
 800d998:	9501      	str	r5, [sp, #4]
 800d99a:	68a2      	ldr	r2, [r4, #8]
 800d99c:	b152      	cbz	r2, 800d9b4 <_scanf_float+0x60>
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b4e      	cmp	r3, #78	; 0x4e
 800d9a4:	d864      	bhi.n	800da70 <_scanf_float+0x11c>
 800d9a6:	2b40      	cmp	r3, #64	; 0x40
 800d9a8:	d83c      	bhi.n	800da24 <_scanf_float+0xd0>
 800d9aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d9ae:	b2c8      	uxtb	r0, r1
 800d9b0:	280e      	cmp	r0, #14
 800d9b2:	d93a      	bls.n	800da2a <_scanf_float+0xd6>
 800d9b4:	f1b9 0f00 	cmp.w	r9, #0
 800d9b8:	d003      	beq.n	800d9c2 <_scanf_float+0x6e>
 800d9ba:	6823      	ldr	r3, [r4, #0]
 800d9bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9c0:	6023      	str	r3, [r4, #0]
 800d9c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9c6:	f1ba 0f01 	cmp.w	sl, #1
 800d9ca:	f200 8113 	bhi.w	800dbf4 <_scanf_float+0x2a0>
 800d9ce:	455e      	cmp	r6, fp
 800d9d0:	f200 8105 	bhi.w	800dbde <_scanf_float+0x28a>
 800d9d4:	2501      	movs	r5, #1
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	b007      	add	sp, #28
 800d9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d9e2:	2a0d      	cmp	r2, #13
 800d9e4:	d8e6      	bhi.n	800d9b4 <_scanf_float+0x60>
 800d9e6:	a101      	add	r1, pc, #4	; (adr r1, 800d9ec <_scanf_float+0x98>)
 800d9e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d9ec:	0800db2b 	.word	0x0800db2b
 800d9f0:	0800d9b5 	.word	0x0800d9b5
 800d9f4:	0800d9b5 	.word	0x0800d9b5
 800d9f8:	0800d9b5 	.word	0x0800d9b5
 800d9fc:	0800db8b 	.word	0x0800db8b
 800da00:	0800db63 	.word	0x0800db63
 800da04:	0800d9b5 	.word	0x0800d9b5
 800da08:	0800d9b5 	.word	0x0800d9b5
 800da0c:	0800db39 	.word	0x0800db39
 800da10:	0800d9b5 	.word	0x0800d9b5
 800da14:	0800d9b5 	.word	0x0800d9b5
 800da18:	0800d9b5 	.word	0x0800d9b5
 800da1c:	0800d9b5 	.word	0x0800d9b5
 800da20:	0800daf1 	.word	0x0800daf1
 800da24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800da28:	e7db      	b.n	800d9e2 <_scanf_float+0x8e>
 800da2a:	290e      	cmp	r1, #14
 800da2c:	d8c2      	bhi.n	800d9b4 <_scanf_float+0x60>
 800da2e:	a001      	add	r0, pc, #4	; (adr r0, 800da34 <_scanf_float+0xe0>)
 800da30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800da34:	0800dae3 	.word	0x0800dae3
 800da38:	0800d9b5 	.word	0x0800d9b5
 800da3c:	0800dae3 	.word	0x0800dae3
 800da40:	0800db77 	.word	0x0800db77
 800da44:	0800d9b5 	.word	0x0800d9b5
 800da48:	0800da91 	.word	0x0800da91
 800da4c:	0800dacd 	.word	0x0800dacd
 800da50:	0800dacd 	.word	0x0800dacd
 800da54:	0800dacd 	.word	0x0800dacd
 800da58:	0800dacd 	.word	0x0800dacd
 800da5c:	0800dacd 	.word	0x0800dacd
 800da60:	0800dacd 	.word	0x0800dacd
 800da64:	0800dacd 	.word	0x0800dacd
 800da68:	0800dacd 	.word	0x0800dacd
 800da6c:	0800dacd 	.word	0x0800dacd
 800da70:	2b6e      	cmp	r3, #110	; 0x6e
 800da72:	d809      	bhi.n	800da88 <_scanf_float+0x134>
 800da74:	2b60      	cmp	r3, #96	; 0x60
 800da76:	d8b2      	bhi.n	800d9de <_scanf_float+0x8a>
 800da78:	2b54      	cmp	r3, #84	; 0x54
 800da7a:	d077      	beq.n	800db6c <_scanf_float+0x218>
 800da7c:	2b59      	cmp	r3, #89	; 0x59
 800da7e:	d199      	bne.n	800d9b4 <_scanf_float+0x60>
 800da80:	2d07      	cmp	r5, #7
 800da82:	d197      	bne.n	800d9b4 <_scanf_float+0x60>
 800da84:	2508      	movs	r5, #8
 800da86:	e029      	b.n	800dadc <_scanf_float+0x188>
 800da88:	2b74      	cmp	r3, #116	; 0x74
 800da8a:	d06f      	beq.n	800db6c <_scanf_float+0x218>
 800da8c:	2b79      	cmp	r3, #121	; 0x79
 800da8e:	e7f6      	b.n	800da7e <_scanf_float+0x12a>
 800da90:	6821      	ldr	r1, [r4, #0]
 800da92:	05c8      	lsls	r0, r1, #23
 800da94:	d51a      	bpl.n	800dacc <_scanf_float+0x178>
 800da96:	9b02      	ldr	r3, [sp, #8]
 800da98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800da9c:	6021      	str	r1, [r4, #0]
 800da9e:	f109 0901 	add.w	r9, r9, #1
 800daa2:	b11b      	cbz	r3, 800daac <_scanf_float+0x158>
 800daa4:	3b01      	subs	r3, #1
 800daa6:	3201      	adds	r2, #1
 800daa8:	9302      	str	r3, [sp, #8]
 800daaa:	60a2      	str	r2, [r4, #8]
 800daac:	68a3      	ldr	r3, [r4, #8]
 800daae:	3b01      	subs	r3, #1
 800dab0:	60a3      	str	r3, [r4, #8]
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	3301      	adds	r3, #1
 800dab6:	6123      	str	r3, [r4, #16]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	3b01      	subs	r3, #1
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	607b      	str	r3, [r7, #4]
 800dac0:	f340 8084 	ble.w	800dbcc <_scanf_float+0x278>
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	3301      	adds	r3, #1
 800dac8:	603b      	str	r3, [r7, #0]
 800daca:	e766      	b.n	800d99a <_scanf_float+0x46>
 800dacc:	eb1a 0f05 	cmn.w	sl, r5
 800dad0:	f47f af70 	bne.w	800d9b4 <_scanf_float+0x60>
 800dad4:	6822      	ldr	r2, [r4, #0]
 800dad6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dada:	6022      	str	r2, [r4, #0]
 800dadc:	f806 3b01 	strb.w	r3, [r6], #1
 800dae0:	e7e4      	b.n	800daac <_scanf_float+0x158>
 800dae2:	6822      	ldr	r2, [r4, #0]
 800dae4:	0610      	lsls	r0, r2, #24
 800dae6:	f57f af65 	bpl.w	800d9b4 <_scanf_float+0x60>
 800daea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800daee:	e7f4      	b.n	800dada <_scanf_float+0x186>
 800daf0:	f1ba 0f00 	cmp.w	sl, #0
 800daf4:	d10e      	bne.n	800db14 <_scanf_float+0x1c0>
 800daf6:	f1b9 0f00 	cmp.w	r9, #0
 800dafa:	d10e      	bne.n	800db1a <_scanf_float+0x1c6>
 800dafc:	6822      	ldr	r2, [r4, #0]
 800dafe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800db02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800db06:	d108      	bne.n	800db1a <_scanf_float+0x1c6>
 800db08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800db0c:	6022      	str	r2, [r4, #0]
 800db0e:	f04f 0a01 	mov.w	sl, #1
 800db12:	e7e3      	b.n	800dadc <_scanf_float+0x188>
 800db14:	f1ba 0f02 	cmp.w	sl, #2
 800db18:	d055      	beq.n	800dbc6 <_scanf_float+0x272>
 800db1a:	2d01      	cmp	r5, #1
 800db1c:	d002      	beq.n	800db24 <_scanf_float+0x1d0>
 800db1e:	2d04      	cmp	r5, #4
 800db20:	f47f af48 	bne.w	800d9b4 <_scanf_float+0x60>
 800db24:	3501      	adds	r5, #1
 800db26:	b2ed      	uxtb	r5, r5
 800db28:	e7d8      	b.n	800dadc <_scanf_float+0x188>
 800db2a:	f1ba 0f01 	cmp.w	sl, #1
 800db2e:	f47f af41 	bne.w	800d9b4 <_scanf_float+0x60>
 800db32:	f04f 0a02 	mov.w	sl, #2
 800db36:	e7d1      	b.n	800dadc <_scanf_float+0x188>
 800db38:	b97d      	cbnz	r5, 800db5a <_scanf_float+0x206>
 800db3a:	f1b9 0f00 	cmp.w	r9, #0
 800db3e:	f47f af3c 	bne.w	800d9ba <_scanf_float+0x66>
 800db42:	6822      	ldr	r2, [r4, #0]
 800db44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800db48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800db4c:	f47f af39 	bne.w	800d9c2 <_scanf_float+0x6e>
 800db50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800db54:	6022      	str	r2, [r4, #0]
 800db56:	2501      	movs	r5, #1
 800db58:	e7c0      	b.n	800dadc <_scanf_float+0x188>
 800db5a:	2d03      	cmp	r5, #3
 800db5c:	d0e2      	beq.n	800db24 <_scanf_float+0x1d0>
 800db5e:	2d05      	cmp	r5, #5
 800db60:	e7de      	b.n	800db20 <_scanf_float+0x1cc>
 800db62:	2d02      	cmp	r5, #2
 800db64:	f47f af26 	bne.w	800d9b4 <_scanf_float+0x60>
 800db68:	2503      	movs	r5, #3
 800db6a:	e7b7      	b.n	800dadc <_scanf_float+0x188>
 800db6c:	2d06      	cmp	r5, #6
 800db6e:	f47f af21 	bne.w	800d9b4 <_scanf_float+0x60>
 800db72:	2507      	movs	r5, #7
 800db74:	e7b2      	b.n	800dadc <_scanf_float+0x188>
 800db76:	6822      	ldr	r2, [r4, #0]
 800db78:	0591      	lsls	r1, r2, #22
 800db7a:	f57f af1b 	bpl.w	800d9b4 <_scanf_float+0x60>
 800db7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800db82:	6022      	str	r2, [r4, #0]
 800db84:	f8cd 9004 	str.w	r9, [sp, #4]
 800db88:	e7a8      	b.n	800dadc <_scanf_float+0x188>
 800db8a:	6822      	ldr	r2, [r4, #0]
 800db8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800db90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800db94:	d006      	beq.n	800dba4 <_scanf_float+0x250>
 800db96:	0550      	lsls	r0, r2, #21
 800db98:	f57f af0c 	bpl.w	800d9b4 <_scanf_float+0x60>
 800db9c:	f1b9 0f00 	cmp.w	r9, #0
 800dba0:	f43f af0f 	beq.w	800d9c2 <_scanf_float+0x6e>
 800dba4:	0591      	lsls	r1, r2, #22
 800dba6:	bf58      	it	pl
 800dba8:	9901      	ldrpl	r1, [sp, #4]
 800dbaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dbae:	bf58      	it	pl
 800dbb0:	eba9 0101 	subpl.w	r1, r9, r1
 800dbb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dbb8:	bf58      	it	pl
 800dbba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dbbe:	6022      	str	r2, [r4, #0]
 800dbc0:	f04f 0900 	mov.w	r9, #0
 800dbc4:	e78a      	b.n	800dadc <_scanf_float+0x188>
 800dbc6:	f04f 0a03 	mov.w	sl, #3
 800dbca:	e787      	b.n	800dadc <_scanf_float+0x188>
 800dbcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	4640      	mov	r0, r8
 800dbd4:	4798      	blx	r3
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	f43f aedf 	beq.w	800d99a <_scanf_float+0x46>
 800dbdc:	e6ea      	b.n	800d9b4 <_scanf_float+0x60>
 800dbde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dbe6:	463a      	mov	r2, r7
 800dbe8:	4640      	mov	r0, r8
 800dbea:	4798      	blx	r3
 800dbec:	6923      	ldr	r3, [r4, #16]
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	6123      	str	r3, [r4, #16]
 800dbf2:	e6ec      	b.n	800d9ce <_scanf_float+0x7a>
 800dbf4:	1e6b      	subs	r3, r5, #1
 800dbf6:	2b06      	cmp	r3, #6
 800dbf8:	d825      	bhi.n	800dc46 <_scanf_float+0x2f2>
 800dbfa:	2d02      	cmp	r5, #2
 800dbfc:	d836      	bhi.n	800dc6c <_scanf_float+0x318>
 800dbfe:	455e      	cmp	r6, fp
 800dc00:	f67f aee8 	bls.w	800d9d4 <_scanf_float+0x80>
 800dc04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc0c:	463a      	mov	r2, r7
 800dc0e:	4640      	mov	r0, r8
 800dc10:	4798      	blx	r3
 800dc12:	6923      	ldr	r3, [r4, #16]
 800dc14:	3b01      	subs	r3, #1
 800dc16:	6123      	str	r3, [r4, #16]
 800dc18:	e7f1      	b.n	800dbfe <_scanf_float+0x2aa>
 800dc1a:	9802      	ldr	r0, [sp, #8]
 800dc1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dc24:	9002      	str	r0, [sp, #8]
 800dc26:	463a      	mov	r2, r7
 800dc28:	4640      	mov	r0, r8
 800dc2a:	4798      	blx	r3
 800dc2c:	6923      	ldr	r3, [r4, #16]
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	6123      	str	r3, [r4, #16]
 800dc32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc36:	fa5f fa8a 	uxtb.w	sl, sl
 800dc3a:	f1ba 0f02 	cmp.w	sl, #2
 800dc3e:	d1ec      	bne.n	800dc1a <_scanf_float+0x2c6>
 800dc40:	3d03      	subs	r5, #3
 800dc42:	b2ed      	uxtb	r5, r5
 800dc44:	1b76      	subs	r6, r6, r5
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	05da      	lsls	r2, r3, #23
 800dc4a:	d52f      	bpl.n	800dcac <_scanf_float+0x358>
 800dc4c:	055b      	lsls	r3, r3, #21
 800dc4e:	d510      	bpl.n	800dc72 <_scanf_float+0x31e>
 800dc50:	455e      	cmp	r6, fp
 800dc52:	f67f aebf 	bls.w	800d9d4 <_scanf_float+0x80>
 800dc56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc5e:	463a      	mov	r2, r7
 800dc60:	4640      	mov	r0, r8
 800dc62:	4798      	blx	r3
 800dc64:	6923      	ldr	r3, [r4, #16]
 800dc66:	3b01      	subs	r3, #1
 800dc68:	6123      	str	r3, [r4, #16]
 800dc6a:	e7f1      	b.n	800dc50 <_scanf_float+0x2fc>
 800dc6c:	46aa      	mov	sl, r5
 800dc6e:	9602      	str	r6, [sp, #8]
 800dc70:	e7df      	b.n	800dc32 <_scanf_float+0x2de>
 800dc72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dc76:	6923      	ldr	r3, [r4, #16]
 800dc78:	2965      	cmp	r1, #101	; 0x65
 800dc7a:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc7e:	f106 35ff 	add.w	r5, r6, #4294967295
 800dc82:	6123      	str	r3, [r4, #16]
 800dc84:	d00c      	beq.n	800dca0 <_scanf_float+0x34c>
 800dc86:	2945      	cmp	r1, #69	; 0x45
 800dc88:	d00a      	beq.n	800dca0 <_scanf_float+0x34c>
 800dc8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc8e:	463a      	mov	r2, r7
 800dc90:	4640      	mov	r0, r8
 800dc92:	4798      	blx	r3
 800dc94:	6923      	ldr	r3, [r4, #16]
 800dc96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	1eb5      	subs	r5, r6, #2
 800dc9e:	6123      	str	r3, [r4, #16]
 800dca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dca4:	463a      	mov	r2, r7
 800dca6:	4640      	mov	r0, r8
 800dca8:	4798      	blx	r3
 800dcaa:	462e      	mov	r6, r5
 800dcac:	6825      	ldr	r5, [r4, #0]
 800dcae:	f015 0510 	ands.w	r5, r5, #16
 800dcb2:	d158      	bne.n	800dd66 <_scanf_float+0x412>
 800dcb4:	7035      	strb	r5, [r6, #0]
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dcbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dcc0:	d11c      	bne.n	800dcfc <_scanf_float+0x3a8>
 800dcc2:	9b01      	ldr	r3, [sp, #4]
 800dcc4:	454b      	cmp	r3, r9
 800dcc6:	eba3 0209 	sub.w	r2, r3, r9
 800dcca:	d124      	bne.n	800dd16 <_scanf_float+0x3c2>
 800dccc:	2200      	movs	r2, #0
 800dcce:	4659      	mov	r1, fp
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	f000 ff2f 	bl	800eb34 <_strtod_r>
 800dcd6:	9b03      	ldr	r3, [sp, #12]
 800dcd8:	6821      	ldr	r1, [r4, #0]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f011 0f02 	tst.w	r1, #2
 800dce0:	ec57 6b10 	vmov	r6, r7, d0
 800dce4:	f103 0204 	add.w	r2, r3, #4
 800dce8:	d020      	beq.n	800dd2c <_scanf_float+0x3d8>
 800dcea:	9903      	ldr	r1, [sp, #12]
 800dcec:	600a      	str	r2, [r1, #0]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	e9c3 6700 	strd	r6, r7, [r3]
 800dcf4:	68e3      	ldr	r3, [r4, #12]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	60e3      	str	r3, [r4, #12]
 800dcfa:	e66c      	b.n	800d9d6 <_scanf_float+0x82>
 800dcfc:	9b04      	ldr	r3, [sp, #16]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d0e4      	beq.n	800dccc <_scanf_float+0x378>
 800dd02:	9905      	ldr	r1, [sp, #20]
 800dd04:	230a      	movs	r3, #10
 800dd06:	462a      	mov	r2, r5
 800dd08:	3101      	adds	r1, #1
 800dd0a:	4640      	mov	r0, r8
 800dd0c:	f000 ff9c 	bl	800ec48 <_strtol_r>
 800dd10:	9b04      	ldr	r3, [sp, #16]
 800dd12:	9e05      	ldr	r6, [sp, #20]
 800dd14:	1ac2      	subs	r2, r0, r3
 800dd16:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800dd1a:	429e      	cmp	r6, r3
 800dd1c:	bf28      	it	cs
 800dd1e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dd22:	4912      	ldr	r1, [pc, #72]	; (800dd6c <_scanf_float+0x418>)
 800dd24:	4630      	mov	r0, r6
 800dd26:	f000 f83b 	bl	800dda0 <siprintf>
 800dd2a:	e7cf      	b.n	800dccc <_scanf_float+0x378>
 800dd2c:	f011 0f04 	tst.w	r1, #4
 800dd30:	9903      	ldr	r1, [sp, #12]
 800dd32:	600a      	str	r2, [r1, #0]
 800dd34:	d1db      	bne.n	800dcee <_scanf_float+0x39a>
 800dd36:	f8d3 8000 	ldr.w	r8, [r3]
 800dd3a:	ee10 2a10 	vmov	r2, s0
 800dd3e:	ee10 0a10 	vmov	r0, s0
 800dd42:	463b      	mov	r3, r7
 800dd44:	4639      	mov	r1, r7
 800dd46:	f7f2 fef9 	bl	8000b3c <__aeabi_dcmpun>
 800dd4a:	b128      	cbz	r0, 800dd58 <_scanf_float+0x404>
 800dd4c:	4808      	ldr	r0, [pc, #32]	; (800dd70 <_scanf_float+0x41c>)
 800dd4e:	f000 f821 	bl	800dd94 <nanf>
 800dd52:	ed88 0a00 	vstr	s0, [r8]
 800dd56:	e7cd      	b.n	800dcf4 <_scanf_float+0x3a0>
 800dd58:	4630      	mov	r0, r6
 800dd5a:	4639      	mov	r1, r7
 800dd5c:	f7f2 ff4c 	bl	8000bf8 <__aeabi_d2f>
 800dd60:	f8c8 0000 	str.w	r0, [r8]
 800dd64:	e7c6      	b.n	800dcf4 <_scanf_float+0x3a0>
 800dd66:	2500      	movs	r5, #0
 800dd68:	e635      	b.n	800d9d6 <_scanf_float+0x82>
 800dd6a:	bf00      	nop
 800dd6c:	0801390e 	.word	0x0801390e
 800dd70:	08013d43 	.word	0x08013d43

0800dd74 <_sbrk_r>:
 800dd74:	b538      	push	{r3, r4, r5, lr}
 800dd76:	4d06      	ldr	r5, [pc, #24]	; (800dd90 <_sbrk_r+0x1c>)
 800dd78:	2300      	movs	r3, #0
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	4608      	mov	r0, r1
 800dd7e:	602b      	str	r3, [r5, #0]
 800dd80:	f7f4 ffaa 	bl	8002cd8 <_sbrk>
 800dd84:	1c43      	adds	r3, r0, #1
 800dd86:	d102      	bne.n	800dd8e <_sbrk_r+0x1a>
 800dd88:	682b      	ldr	r3, [r5, #0]
 800dd8a:	b103      	cbz	r3, 800dd8e <_sbrk_r+0x1a>
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	bd38      	pop	{r3, r4, r5, pc}
 800dd90:	20005abc 	.word	0x20005abc

0800dd94 <nanf>:
 800dd94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dd9c <nanf+0x8>
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	7fc00000 	.word	0x7fc00000

0800dda0 <siprintf>:
 800dda0:	b40e      	push	{r1, r2, r3}
 800dda2:	b500      	push	{lr}
 800dda4:	b09c      	sub	sp, #112	; 0x70
 800dda6:	ab1d      	add	r3, sp, #116	; 0x74
 800dda8:	9002      	str	r0, [sp, #8]
 800ddaa:	9006      	str	r0, [sp, #24]
 800ddac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ddb0:	4809      	ldr	r0, [pc, #36]	; (800ddd8 <siprintf+0x38>)
 800ddb2:	9107      	str	r1, [sp, #28]
 800ddb4:	9104      	str	r1, [sp, #16]
 800ddb6:	4909      	ldr	r1, [pc, #36]	; (800dddc <siprintf+0x3c>)
 800ddb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddbc:	9105      	str	r1, [sp, #20]
 800ddbe:	6800      	ldr	r0, [r0, #0]
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	a902      	add	r1, sp, #8
 800ddc4:	f002 fea6 	bl	8010b14 <_svfiprintf_r>
 800ddc8:	9b02      	ldr	r3, [sp, #8]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	701a      	strb	r2, [r3, #0]
 800ddce:	b01c      	add	sp, #112	; 0x70
 800ddd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddd4:	b003      	add	sp, #12
 800ddd6:	4770      	bx	lr
 800ddd8:	20000038 	.word	0x20000038
 800dddc:	ffff0208 	.word	0xffff0208

0800dde0 <siscanf>:
 800dde0:	b40e      	push	{r1, r2, r3}
 800dde2:	b510      	push	{r4, lr}
 800dde4:	b09f      	sub	sp, #124	; 0x7c
 800dde6:	ac21      	add	r4, sp, #132	; 0x84
 800dde8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ddec:	f854 2b04 	ldr.w	r2, [r4], #4
 800ddf0:	9201      	str	r2, [sp, #4]
 800ddf2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ddf6:	9004      	str	r0, [sp, #16]
 800ddf8:	9008      	str	r0, [sp, #32]
 800ddfa:	f7f2 f9f1 	bl	80001e0 <strlen>
 800ddfe:	4b0c      	ldr	r3, [pc, #48]	; (800de30 <siscanf+0x50>)
 800de00:	9005      	str	r0, [sp, #20]
 800de02:	9009      	str	r0, [sp, #36]	; 0x24
 800de04:	930d      	str	r3, [sp, #52]	; 0x34
 800de06:	480b      	ldr	r0, [pc, #44]	; (800de34 <siscanf+0x54>)
 800de08:	9a01      	ldr	r2, [sp, #4]
 800de0a:	6800      	ldr	r0, [r0, #0]
 800de0c:	9403      	str	r4, [sp, #12]
 800de0e:	2300      	movs	r3, #0
 800de10:	9311      	str	r3, [sp, #68]	; 0x44
 800de12:	9316      	str	r3, [sp, #88]	; 0x58
 800de14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de18:	f8ad 301e 	strh.w	r3, [sp, #30]
 800de1c:	a904      	add	r1, sp, #16
 800de1e:	4623      	mov	r3, r4
 800de20:	f002 ffd2 	bl	8010dc8 <__ssvfiscanf_r>
 800de24:	b01f      	add	sp, #124	; 0x7c
 800de26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de2a:	b003      	add	sp, #12
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	0800de5b 	.word	0x0800de5b
 800de34:	20000038 	.word	0x20000038

0800de38 <__sread>:
 800de38:	b510      	push	{r4, lr}
 800de3a:	460c      	mov	r4, r1
 800de3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de40:	f003 fa86 	bl	8011350 <_read_r>
 800de44:	2800      	cmp	r0, #0
 800de46:	bfab      	itete	ge
 800de48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de4a:	89a3      	ldrhlt	r3, [r4, #12]
 800de4c:	181b      	addge	r3, r3, r0
 800de4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de52:	bfac      	ite	ge
 800de54:	6563      	strge	r3, [r4, #84]	; 0x54
 800de56:	81a3      	strhlt	r3, [r4, #12]
 800de58:	bd10      	pop	{r4, pc}

0800de5a <__seofread>:
 800de5a:	2000      	movs	r0, #0
 800de5c:	4770      	bx	lr

0800de5e <__swrite>:
 800de5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de62:	461f      	mov	r7, r3
 800de64:	898b      	ldrh	r3, [r1, #12]
 800de66:	05db      	lsls	r3, r3, #23
 800de68:	4605      	mov	r5, r0
 800de6a:	460c      	mov	r4, r1
 800de6c:	4616      	mov	r6, r2
 800de6e:	d505      	bpl.n	800de7c <__swrite+0x1e>
 800de70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de74:	2302      	movs	r3, #2
 800de76:	2200      	movs	r2, #0
 800de78:	f002 f8f6 	bl	8010068 <_lseek_r>
 800de7c:	89a3      	ldrh	r3, [r4, #12]
 800de7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de86:	81a3      	strh	r3, [r4, #12]
 800de88:	4632      	mov	r2, r6
 800de8a:	463b      	mov	r3, r7
 800de8c:	4628      	mov	r0, r5
 800de8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de92:	f000 bedb 	b.w	800ec4c <_write_r>

0800de96 <__sseek>:
 800de96:	b510      	push	{r4, lr}
 800de98:	460c      	mov	r4, r1
 800de9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de9e:	f002 f8e3 	bl	8010068 <_lseek_r>
 800dea2:	1c43      	adds	r3, r0, #1
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	bf15      	itete	ne
 800dea8:	6560      	strne	r0, [r4, #84]	; 0x54
 800deaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800deae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800deb2:	81a3      	strheq	r3, [r4, #12]
 800deb4:	bf18      	it	ne
 800deb6:	81a3      	strhne	r3, [r4, #12]
 800deb8:	bd10      	pop	{r4, pc}

0800deba <__sclose>:
 800deba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800debe:	f000 bed7 	b.w	800ec70 <_close_r>

0800dec2 <strncmp>:
 800dec2:	b510      	push	{r4, lr}
 800dec4:	b16a      	cbz	r2, 800dee2 <strncmp+0x20>
 800dec6:	3901      	subs	r1, #1
 800dec8:	1884      	adds	r4, r0, r2
 800deca:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dece:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d103      	bne.n	800dede <strncmp+0x1c>
 800ded6:	42a0      	cmp	r0, r4
 800ded8:	d001      	beq.n	800dede <strncmp+0x1c>
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d1f5      	bne.n	800deca <strncmp+0x8>
 800dede:	1a98      	subs	r0, r3, r2
 800dee0:	bd10      	pop	{r4, pc}
 800dee2:	4610      	mov	r0, r2
 800dee4:	e7fc      	b.n	800dee0 <strncmp+0x1e>

0800dee6 <sulp>:
 800dee6:	b570      	push	{r4, r5, r6, lr}
 800dee8:	4604      	mov	r4, r0
 800deea:	460d      	mov	r5, r1
 800deec:	ec45 4b10 	vmov	d0, r4, r5
 800def0:	4616      	mov	r6, r2
 800def2:	f002 fc55 	bl	80107a0 <__ulp>
 800def6:	ec51 0b10 	vmov	r0, r1, d0
 800defa:	b17e      	cbz	r6, 800df1c <sulp+0x36>
 800defc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800df00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800df04:	2b00      	cmp	r3, #0
 800df06:	dd09      	ble.n	800df1c <sulp+0x36>
 800df08:	051b      	lsls	r3, r3, #20
 800df0a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800df0e:	2400      	movs	r4, #0
 800df10:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800df14:	4622      	mov	r2, r4
 800df16:	462b      	mov	r3, r5
 800df18:	f7f2 fb76 	bl	8000608 <__aeabi_dmul>
 800df1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800df20 <_strtod_l>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	b0a3      	sub	sp, #140	; 0x8c
 800df26:	461f      	mov	r7, r3
 800df28:	2300      	movs	r3, #0
 800df2a:	931e      	str	r3, [sp, #120]	; 0x78
 800df2c:	4ba4      	ldr	r3, [pc, #656]	; (800e1c0 <_strtod_l+0x2a0>)
 800df2e:	9219      	str	r2, [sp, #100]	; 0x64
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	9307      	str	r3, [sp, #28]
 800df34:	4604      	mov	r4, r0
 800df36:	4618      	mov	r0, r3
 800df38:	4688      	mov	r8, r1
 800df3a:	f7f2 f951 	bl	80001e0 <strlen>
 800df3e:	f04f 0a00 	mov.w	sl, #0
 800df42:	4605      	mov	r5, r0
 800df44:	f04f 0b00 	mov.w	fp, #0
 800df48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800df4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df4e:	781a      	ldrb	r2, [r3, #0]
 800df50:	2a2b      	cmp	r2, #43	; 0x2b
 800df52:	d04c      	beq.n	800dfee <_strtod_l+0xce>
 800df54:	d839      	bhi.n	800dfca <_strtod_l+0xaa>
 800df56:	2a0d      	cmp	r2, #13
 800df58:	d832      	bhi.n	800dfc0 <_strtod_l+0xa0>
 800df5a:	2a08      	cmp	r2, #8
 800df5c:	d832      	bhi.n	800dfc4 <_strtod_l+0xa4>
 800df5e:	2a00      	cmp	r2, #0
 800df60:	d03c      	beq.n	800dfdc <_strtod_l+0xbc>
 800df62:	2300      	movs	r3, #0
 800df64:	930e      	str	r3, [sp, #56]	; 0x38
 800df66:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800df68:	7833      	ldrb	r3, [r6, #0]
 800df6a:	2b30      	cmp	r3, #48	; 0x30
 800df6c:	f040 80b4 	bne.w	800e0d8 <_strtod_l+0x1b8>
 800df70:	7873      	ldrb	r3, [r6, #1]
 800df72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df76:	2b58      	cmp	r3, #88	; 0x58
 800df78:	d16c      	bne.n	800e054 <_strtod_l+0x134>
 800df7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df7c:	9301      	str	r3, [sp, #4]
 800df7e:	ab1e      	add	r3, sp, #120	; 0x78
 800df80:	9702      	str	r7, [sp, #8]
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	4a8f      	ldr	r2, [pc, #572]	; (800e1c4 <_strtod_l+0x2a4>)
 800df86:	ab1f      	add	r3, sp, #124	; 0x7c
 800df88:	a91d      	add	r1, sp, #116	; 0x74
 800df8a:	4620      	mov	r0, r4
 800df8c:	f001 fd60 	bl	800fa50 <__gethex>
 800df90:	f010 0707 	ands.w	r7, r0, #7
 800df94:	4605      	mov	r5, r0
 800df96:	d005      	beq.n	800dfa4 <_strtod_l+0x84>
 800df98:	2f06      	cmp	r7, #6
 800df9a:	d12a      	bne.n	800dff2 <_strtod_l+0xd2>
 800df9c:	3601      	adds	r6, #1
 800df9e:	2300      	movs	r3, #0
 800dfa0:	961d      	str	r6, [sp, #116]	; 0x74
 800dfa2:	930e      	str	r3, [sp, #56]	; 0x38
 800dfa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f040 8596 	bne.w	800ead8 <_strtod_l+0xbb8>
 800dfac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfae:	b1db      	cbz	r3, 800dfe8 <_strtod_l+0xc8>
 800dfb0:	4652      	mov	r2, sl
 800dfb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dfb6:	ec43 2b10 	vmov	d0, r2, r3
 800dfba:	b023      	add	sp, #140	; 0x8c
 800dfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc0:	2a20      	cmp	r2, #32
 800dfc2:	d1ce      	bne.n	800df62 <_strtod_l+0x42>
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	931d      	str	r3, [sp, #116]	; 0x74
 800dfc8:	e7c0      	b.n	800df4c <_strtod_l+0x2c>
 800dfca:	2a2d      	cmp	r2, #45	; 0x2d
 800dfcc:	d1c9      	bne.n	800df62 <_strtod_l+0x42>
 800dfce:	2201      	movs	r2, #1
 800dfd0:	920e      	str	r2, [sp, #56]	; 0x38
 800dfd2:	1c5a      	adds	r2, r3, #1
 800dfd4:	921d      	str	r2, [sp, #116]	; 0x74
 800dfd6:	785b      	ldrb	r3, [r3, #1]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d1c4      	bne.n	800df66 <_strtod_l+0x46>
 800dfdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dfde:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f040 8576 	bne.w	800ead4 <_strtod_l+0xbb4>
 800dfe8:	4652      	mov	r2, sl
 800dfea:	465b      	mov	r3, fp
 800dfec:	e7e3      	b.n	800dfb6 <_strtod_l+0x96>
 800dfee:	2200      	movs	r2, #0
 800dff0:	e7ee      	b.n	800dfd0 <_strtod_l+0xb0>
 800dff2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dff4:	b13a      	cbz	r2, 800e006 <_strtod_l+0xe6>
 800dff6:	2135      	movs	r1, #53	; 0x35
 800dff8:	a820      	add	r0, sp, #128	; 0x80
 800dffa:	f002 fcdc 	bl	80109b6 <__copybits>
 800dffe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e000:	4620      	mov	r0, r4
 800e002:	f002 f8a1 	bl	8010148 <_Bfree>
 800e006:	3f01      	subs	r7, #1
 800e008:	2f05      	cmp	r7, #5
 800e00a:	d807      	bhi.n	800e01c <_strtod_l+0xfc>
 800e00c:	e8df f007 	tbb	[pc, r7]
 800e010:	1d180b0e 	.word	0x1d180b0e
 800e014:	030e      	.short	0x030e
 800e016:	f04f 0b00 	mov.w	fp, #0
 800e01a:	46da      	mov	sl, fp
 800e01c:	0728      	lsls	r0, r5, #28
 800e01e:	d5c1      	bpl.n	800dfa4 <_strtod_l+0x84>
 800e020:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e024:	e7be      	b.n	800dfa4 <_strtod_l+0x84>
 800e026:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e02a:	e7f7      	b.n	800e01c <_strtod_l+0xfc>
 800e02c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e030:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e032:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e036:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e03a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e03e:	e7ed      	b.n	800e01c <_strtod_l+0xfc>
 800e040:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e1c8 <_strtod_l+0x2a8>
 800e044:	f04f 0a00 	mov.w	sl, #0
 800e048:	e7e8      	b.n	800e01c <_strtod_l+0xfc>
 800e04a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e04e:	f04f 3aff 	mov.w	sl, #4294967295
 800e052:	e7e3      	b.n	800e01c <_strtod_l+0xfc>
 800e054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e056:	1c5a      	adds	r2, r3, #1
 800e058:	921d      	str	r2, [sp, #116]	; 0x74
 800e05a:	785b      	ldrb	r3, [r3, #1]
 800e05c:	2b30      	cmp	r3, #48	; 0x30
 800e05e:	d0f9      	beq.n	800e054 <_strtod_l+0x134>
 800e060:	2b00      	cmp	r3, #0
 800e062:	d09f      	beq.n	800dfa4 <_strtod_l+0x84>
 800e064:	2301      	movs	r3, #1
 800e066:	f04f 0900 	mov.w	r9, #0
 800e06a:	9304      	str	r3, [sp, #16]
 800e06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e06e:	930a      	str	r3, [sp, #40]	; 0x28
 800e070:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e074:	464f      	mov	r7, r9
 800e076:	220a      	movs	r2, #10
 800e078:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e07a:	7806      	ldrb	r6, [r0, #0]
 800e07c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e080:	b2d9      	uxtb	r1, r3
 800e082:	2909      	cmp	r1, #9
 800e084:	d92a      	bls.n	800e0dc <_strtod_l+0x1bc>
 800e086:	9907      	ldr	r1, [sp, #28]
 800e088:	462a      	mov	r2, r5
 800e08a:	f7ff ff1a 	bl	800dec2 <strncmp>
 800e08e:	b398      	cbz	r0, 800e0f8 <_strtod_l+0x1d8>
 800e090:	2000      	movs	r0, #0
 800e092:	4633      	mov	r3, r6
 800e094:	463d      	mov	r5, r7
 800e096:	9007      	str	r0, [sp, #28]
 800e098:	4602      	mov	r2, r0
 800e09a:	2b65      	cmp	r3, #101	; 0x65
 800e09c:	d001      	beq.n	800e0a2 <_strtod_l+0x182>
 800e09e:	2b45      	cmp	r3, #69	; 0x45
 800e0a0:	d118      	bne.n	800e0d4 <_strtod_l+0x1b4>
 800e0a2:	b91d      	cbnz	r5, 800e0ac <_strtod_l+0x18c>
 800e0a4:	9b04      	ldr	r3, [sp, #16]
 800e0a6:	4303      	orrs	r3, r0
 800e0a8:	d098      	beq.n	800dfdc <_strtod_l+0xbc>
 800e0aa:	2500      	movs	r5, #0
 800e0ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e0b0:	f108 0301 	add.w	r3, r8, #1
 800e0b4:	931d      	str	r3, [sp, #116]	; 0x74
 800e0b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e0ba:	2b2b      	cmp	r3, #43	; 0x2b
 800e0bc:	d075      	beq.n	800e1aa <_strtod_l+0x28a>
 800e0be:	2b2d      	cmp	r3, #45	; 0x2d
 800e0c0:	d07b      	beq.n	800e1ba <_strtod_l+0x29a>
 800e0c2:	f04f 0c00 	mov.w	ip, #0
 800e0c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e0ca:	2909      	cmp	r1, #9
 800e0cc:	f240 8082 	bls.w	800e1d4 <_strtod_l+0x2b4>
 800e0d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e0d4:	2600      	movs	r6, #0
 800e0d6:	e09d      	b.n	800e214 <_strtod_l+0x2f4>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e7c4      	b.n	800e066 <_strtod_l+0x146>
 800e0dc:	2f08      	cmp	r7, #8
 800e0de:	bfd8      	it	le
 800e0e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e0e2:	f100 0001 	add.w	r0, r0, #1
 800e0e6:	bfda      	itte	le
 800e0e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e0ec:	9309      	strle	r3, [sp, #36]	; 0x24
 800e0ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e0f2:	3701      	adds	r7, #1
 800e0f4:	901d      	str	r0, [sp, #116]	; 0x74
 800e0f6:	e7bf      	b.n	800e078 <_strtod_l+0x158>
 800e0f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0fa:	195a      	adds	r2, r3, r5
 800e0fc:	921d      	str	r2, [sp, #116]	; 0x74
 800e0fe:	5d5b      	ldrb	r3, [r3, r5]
 800e100:	2f00      	cmp	r7, #0
 800e102:	d037      	beq.n	800e174 <_strtod_l+0x254>
 800e104:	9007      	str	r0, [sp, #28]
 800e106:	463d      	mov	r5, r7
 800e108:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e10c:	2a09      	cmp	r2, #9
 800e10e:	d912      	bls.n	800e136 <_strtod_l+0x216>
 800e110:	2201      	movs	r2, #1
 800e112:	e7c2      	b.n	800e09a <_strtod_l+0x17a>
 800e114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e116:	1c5a      	adds	r2, r3, #1
 800e118:	921d      	str	r2, [sp, #116]	; 0x74
 800e11a:	785b      	ldrb	r3, [r3, #1]
 800e11c:	3001      	adds	r0, #1
 800e11e:	2b30      	cmp	r3, #48	; 0x30
 800e120:	d0f8      	beq.n	800e114 <_strtod_l+0x1f4>
 800e122:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e126:	2a08      	cmp	r2, #8
 800e128:	f200 84db 	bhi.w	800eae2 <_strtod_l+0xbc2>
 800e12c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e12e:	9007      	str	r0, [sp, #28]
 800e130:	2000      	movs	r0, #0
 800e132:	920a      	str	r2, [sp, #40]	; 0x28
 800e134:	4605      	mov	r5, r0
 800e136:	3b30      	subs	r3, #48	; 0x30
 800e138:	f100 0201 	add.w	r2, r0, #1
 800e13c:	d014      	beq.n	800e168 <_strtod_l+0x248>
 800e13e:	9907      	ldr	r1, [sp, #28]
 800e140:	4411      	add	r1, r2
 800e142:	9107      	str	r1, [sp, #28]
 800e144:	462a      	mov	r2, r5
 800e146:	eb00 0e05 	add.w	lr, r0, r5
 800e14a:	210a      	movs	r1, #10
 800e14c:	4572      	cmp	r2, lr
 800e14e:	d113      	bne.n	800e178 <_strtod_l+0x258>
 800e150:	182a      	adds	r2, r5, r0
 800e152:	2a08      	cmp	r2, #8
 800e154:	f105 0501 	add.w	r5, r5, #1
 800e158:	4405      	add	r5, r0
 800e15a:	dc1c      	bgt.n	800e196 <_strtod_l+0x276>
 800e15c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e15e:	220a      	movs	r2, #10
 800e160:	fb02 3301 	mla	r3, r2, r1, r3
 800e164:	9309      	str	r3, [sp, #36]	; 0x24
 800e166:	2200      	movs	r2, #0
 800e168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e16a:	1c59      	adds	r1, r3, #1
 800e16c:	911d      	str	r1, [sp, #116]	; 0x74
 800e16e:	785b      	ldrb	r3, [r3, #1]
 800e170:	4610      	mov	r0, r2
 800e172:	e7c9      	b.n	800e108 <_strtod_l+0x1e8>
 800e174:	4638      	mov	r0, r7
 800e176:	e7d2      	b.n	800e11e <_strtod_l+0x1fe>
 800e178:	2a08      	cmp	r2, #8
 800e17a:	dc04      	bgt.n	800e186 <_strtod_l+0x266>
 800e17c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e17e:	434e      	muls	r6, r1
 800e180:	9609      	str	r6, [sp, #36]	; 0x24
 800e182:	3201      	adds	r2, #1
 800e184:	e7e2      	b.n	800e14c <_strtod_l+0x22c>
 800e186:	f102 0c01 	add.w	ip, r2, #1
 800e18a:	f1bc 0f10 	cmp.w	ip, #16
 800e18e:	bfd8      	it	le
 800e190:	fb01 f909 	mulle.w	r9, r1, r9
 800e194:	e7f5      	b.n	800e182 <_strtod_l+0x262>
 800e196:	2d10      	cmp	r5, #16
 800e198:	bfdc      	itt	le
 800e19a:	220a      	movle	r2, #10
 800e19c:	fb02 3909 	mlale	r9, r2, r9, r3
 800e1a0:	e7e1      	b.n	800e166 <_strtod_l+0x246>
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	9307      	str	r3, [sp, #28]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	e77c      	b.n	800e0a4 <_strtod_l+0x184>
 800e1aa:	f04f 0c00 	mov.w	ip, #0
 800e1ae:	f108 0302 	add.w	r3, r8, #2
 800e1b2:	931d      	str	r3, [sp, #116]	; 0x74
 800e1b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e1b8:	e785      	b.n	800e0c6 <_strtod_l+0x1a6>
 800e1ba:	f04f 0c01 	mov.w	ip, #1
 800e1be:	e7f6      	b.n	800e1ae <_strtod_l+0x28e>
 800e1c0:	08013b68 	.word	0x08013b68
 800e1c4:	08013914 	.word	0x08013914
 800e1c8:	7ff00000 	.word	0x7ff00000
 800e1cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1ce:	1c59      	adds	r1, r3, #1
 800e1d0:	911d      	str	r1, [sp, #116]	; 0x74
 800e1d2:	785b      	ldrb	r3, [r3, #1]
 800e1d4:	2b30      	cmp	r3, #48	; 0x30
 800e1d6:	d0f9      	beq.n	800e1cc <_strtod_l+0x2ac>
 800e1d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e1dc:	2908      	cmp	r1, #8
 800e1de:	f63f af79 	bhi.w	800e0d4 <_strtod_l+0x1b4>
 800e1e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e1e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1e8:	9308      	str	r3, [sp, #32]
 800e1ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1ec:	1c59      	adds	r1, r3, #1
 800e1ee:	911d      	str	r1, [sp, #116]	; 0x74
 800e1f0:	785b      	ldrb	r3, [r3, #1]
 800e1f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e1f6:	2e09      	cmp	r6, #9
 800e1f8:	d937      	bls.n	800e26a <_strtod_l+0x34a>
 800e1fa:	9e08      	ldr	r6, [sp, #32]
 800e1fc:	1b89      	subs	r1, r1, r6
 800e1fe:	2908      	cmp	r1, #8
 800e200:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e204:	dc02      	bgt.n	800e20c <_strtod_l+0x2ec>
 800e206:	4576      	cmp	r6, lr
 800e208:	bfa8      	it	ge
 800e20a:	4676      	movge	r6, lr
 800e20c:	f1bc 0f00 	cmp.w	ip, #0
 800e210:	d000      	beq.n	800e214 <_strtod_l+0x2f4>
 800e212:	4276      	negs	r6, r6
 800e214:	2d00      	cmp	r5, #0
 800e216:	d14f      	bne.n	800e2b8 <_strtod_l+0x398>
 800e218:	9904      	ldr	r1, [sp, #16]
 800e21a:	4301      	orrs	r1, r0
 800e21c:	f47f aec2 	bne.w	800dfa4 <_strtod_l+0x84>
 800e220:	2a00      	cmp	r2, #0
 800e222:	f47f aedb 	bne.w	800dfdc <_strtod_l+0xbc>
 800e226:	2b69      	cmp	r3, #105	; 0x69
 800e228:	d027      	beq.n	800e27a <_strtod_l+0x35a>
 800e22a:	dc24      	bgt.n	800e276 <_strtod_l+0x356>
 800e22c:	2b49      	cmp	r3, #73	; 0x49
 800e22e:	d024      	beq.n	800e27a <_strtod_l+0x35a>
 800e230:	2b4e      	cmp	r3, #78	; 0x4e
 800e232:	f47f aed3 	bne.w	800dfdc <_strtod_l+0xbc>
 800e236:	499e      	ldr	r1, [pc, #632]	; (800e4b0 <_strtod_l+0x590>)
 800e238:	a81d      	add	r0, sp, #116	; 0x74
 800e23a:	f001 fe61 	bl	800ff00 <__match>
 800e23e:	2800      	cmp	r0, #0
 800e240:	f43f aecc 	beq.w	800dfdc <_strtod_l+0xbc>
 800e244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	2b28      	cmp	r3, #40	; 0x28
 800e24a:	d12d      	bne.n	800e2a8 <_strtod_l+0x388>
 800e24c:	4999      	ldr	r1, [pc, #612]	; (800e4b4 <_strtod_l+0x594>)
 800e24e:	aa20      	add	r2, sp, #128	; 0x80
 800e250:	a81d      	add	r0, sp, #116	; 0x74
 800e252:	f001 fe69 	bl	800ff28 <__hexnan>
 800e256:	2805      	cmp	r0, #5
 800e258:	d126      	bne.n	800e2a8 <_strtod_l+0x388>
 800e25a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e25c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e260:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e264:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e268:	e69c      	b.n	800dfa4 <_strtod_l+0x84>
 800e26a:	210a      	movs	r1, #10
 800e26c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e270:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e274:	e7b9      	b.n	800e1ea <_strtod_l+0x2ca>
 800e276:	2b6e      	cmp	r3, #110	; 0x6e
 800e278:	e7db      	b.n	800e232 <_strtod_l+0x312>
 800e27a:	498f      	ldr	r1, [pc, #572]	; (800e4b8 <_strtod_l+0x598>)
 800e27c:	a81d      	add	r0, sp, #116	; 0x74
 800e27e:	f001 fe3f 	bl	800ff00 <__match>
 800e282:	2800      	cmp	r0, #0
 800e284:	f43f aeaa 	beq.w	800dfdc <_strtod_l+0xbc>
 800e288:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e28a:	498c      	ldr	r1, [pc, #560]	; (800e4bc <_strtod_l+0x59c>)
 800e28c:	3b01      	subs	r3, #1
 800e28e:	a81d      	add	r0, sp, #116	; 0x74
 800e290:	931d      	str	r3, [sp, #116]	; 0x74
 800e292:	f001 fe35 	bl	800ff00 <__match>
 800e296:	b910      	cbnz	r0, 800e29e <_strtod_l+0x37e>
 800e298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e29a:	3301      	adds	r3, #1
 800e29c:	931d      	str	r3, [sp, #116]	; 0x74
 800e29e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e4cc <_strtod_l+0x5ac>
 800e2a2:	f04f 0a00 	mov.w	sl, #0
 800e2a6:	e67d      	b.n	800dfa4 <_strtod_l+0x84>
 800e2a8:	4885      	ldr	r0, [pc, #532]	; (800e4c0 <_strtod_l+0x5a0>)
 800e2aa:	f003 f865 	bl	8011378 <nan>
 800e2ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e2b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e2b6:	e675      	b.n	800dfa4 <_strtod_l+0x84>
 800e2b8:	9b07      	ldr	r3, [sp, #28]
 800e2ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2bc:	1af3      	subs	r3, r6, r3
 800e2be:	2f00      	cmp	r7, #0
 800e2c0:	bf08      	it	eq
 800e2c2:	462f      	moveq	r7, r5
 800e2c4:	2d10      	cmp	r5, #16
 800e2c6:	9308      	str	r3, [sp, #32]
 800e2c8:	46a8      	mov	r8, r5
 800e2ca:	bfa8      	it	ge
 800e2cc:	f04f 0810 	movge.w	r8, #16
 800e2d0:	f7f2 f920 	bl	8000514 <__aeabi_ui2d>
 800e2d4:	2d09      	cmp	r5, #9
 800e2d6:	4682      	mov	sl, r0
 800e2d8:	468b      	mov	fp, r1
 800e2da:	dd13      	ble.n	800e304 <_strtod_l+0x3e4>
 800e2dc:	4b79      	ldr	r3, [pc, #484]	; (800e4c4 <_strtod_l+0x5a4>)
 800e2de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e2e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e2e6:	f7f2 f98f 	bl	8000608 <__aeabi_dmul>
 800e2ea:	4682      	mov	sl, r0
 800e2ec:	4648      	mov	r0, r9
 800e2ee:	468b      	mov	fp, r1
 800e2f0:	f7f2 f910 	bl	8000514 <__aeabi_ui2d>
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	4650      	mov	r0, sl
 800e2fa:	4659      	mov	r1, fp
 800e2fc:	f7f1 ffce 	bl	800029c <__adddf3>
 800e300:	4682      	mov	sl, r0
 800e302:	468b      	mov	fp, r1
 800e304:	2d0f      	cmp	r5, #15
 800e306:	dc38      	bgt.n	800e37a <_strtod_l+0x45a>
 800e308:	9b08      	ldr	r3, [sp, #32]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f43f ae4a 	beq.w	800dfa4 <_strtod_l+0x84>
 800e310:	dd24      	ble.n	800e35c <_strtod_l+0x43c>
 800e312:	2b16      	cmp	r3, #22
 800e314:	dc0b      	bgt.n	800e32e <_strtod_l+0x40e>
 800e316:	4d6b      	ldr	r5, [pc, #428]	; (800e4c4 <_strtod_l+0x5a4>)
 800e318:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e31c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e320:	4652      	mov	r2, sl
 800e322:	465b      	mov	r3, fp
 800e324:	f7f2 f970 	bl	8000608 <__aeabi_dmul>
 800e328:	4682      	mov	sl, r0
 800e32a:	468b      	mov	fp, r1
 800e32c:	e63a      	b.n	800dfa4 <_strtod_l+0x84>
 800e32e:	9a08      	ldr	r2, [sp, #32]
 800e330:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e334:	4293      	cmp	r3, r2
 800e336:	db20      	blt.n	800e37a <_strtod_l+0x45a>
 800e338:	4c62      	ldr	r4, [pc, #392]	; (800e4c4 <_strtod_l+0x5a4>)
 800e33a:	f1c5 050f 	rsb	r5, r5, #15
 800e33e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e342:	4652      	mov	r2, sl
 800e344:	465b      	mov	r3, fp
 800e346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e34a:	f7f2 f95d 	bl	8000608 <__aeabi_dmul>
 800e34e:	9b08      	ldr	r3, [sp, #32]
 800e350:	1b5d      	subs	r5, r3, r5
 800e352:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e356:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e35a:	e7e3      	b.n	800e324 <_strtod_l+0x404>
 800e35c:	9b08      	ldr	r3, [sp, #32]
 800e35e:	3316      	adds	r3, #22
 800e360:	db0b      	blt.n	800e37a <_strtod_l+0x45a>
 800e362:	9b07      	ldr	r3, [sp, #28]
 800e364:	4a57      	ldr	r2, [pc, #348]	; (800e4c4 <_strtod_l+0x5a4>)
 800e366:	1b9e      	subs	r6, r3, r6
 800e368:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e36c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e370:	4650      	mov	r0, sl
 800e372:	4659      	mov	r1, fp
 800e374:	f7f2 fa72 	bl	800085c <__aeabi_ddiv>
 800e378:	e7d6      	b.n	800e328 <_strtod_l+0x408>
 800e37a:	9b08      	ldr	r3, [sp, #32]
 800e37c:	eba5 0808 	sub.w	r8, r5, r8
 800e380:	4498      	add	r8, r3
 800e382:	f1b8 0f00 	cmp.w	r8, #0
 800e386:	dd71      	ble.n	800e46c <_strtod_l+0x54c>
 800e388:	f018 030f 	ands.w	r3, r8, #15
 800e38c:	d00a      	beq.n	800e3a4 <_strtod_l+0x484>
 800e38e:	494d      	ldr	r1, [pc, #308]	; (800e4c4 <_strtod_l+0x5a4>)
 800e390:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e394:	4652      	mov	r2, sl
 800e396:	465b      	mov	r3, fp
 800e398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e39c:	f7f2 f934 	bl	8000608 <__aeabi_dmul>
 800e3a0:	4682      	mov	sl, r0
 800e3a2:	468b      	mov	fp, r1
 800e3a4:	f038 080f 	bics.w	r8, r8, #15
 800e3a8:	d04d      	beq.n	800e446 <_strtod_l+0x526>
 800e3aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e3ae:	dd22      	ble.n	800e3f6 <_strtod_l+0x4d6>
 800e3b0:	2500      	movs	r5, #0
 800e3b2:	462e      	mov	r6, r5
 800e3b4:	9509      	str	r5, [sp, #36]	; 0x24
 800e3b6:	9507      	str	r5, [sp, #28]
 800e3b8:	2322      	movs	r3, #34	; 0x22
 800e3ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e4cc <_strtod_l+0x5ac>
 800e3be:	6023      	str	r3, [r4, #0]
 800e3c0:	f04f 0a00 	mov.w	sl, #0
 800e3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f43f adec 	beq.w	800dfa4 <_strtod_l+0x84>
 800e3cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f001 feba 	bl	8010148 <_Bfree>
 800e3d4:	9907      	ldr	r1, [sp, #28]
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f001 feb6 	bl	8010148 <_Bfree>
 800e3dc:	4631      	mov	r1, r6
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f001 feb2 	bl	8010148 <_Bfree>
 800e3e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f001 feae 	bl	8010148 <_Bfree>
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f001 feaa 	bl	8010148 <_Bfree>
 800e3f4:	e5d6      	b.n	800dfa4 <_strtod_l+0x84>
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e3fc:	4650      	mov	r0, sl
 800e3fe:	4659      	mov	r1, fp
 800e400:	4699      	mov	r9, r3
 800e402:	f1b8 0f01 	cmp.w	r8, #1
 800e406:	dc21      	bgt.n	800e44c <_strtod_l+0x52c>
 800e408:	b10b      	cbz	r3, 800e40e <_strtod_l+0x4ee>
 800e40a:	4682      	mov	sl, r0
 800e40c:	468b      	mov	fp, r1
 800e40e:	4b2e      	ldr	r3, [pc, #184]	; (800e4c8 <_strtod_l+0x5a8>)
 800e410:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e414:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e418:	4652      	mov	r2, sl
 800e41a:	465b      	mov	r3, fp
 800e41c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e420:	f7f2 f8f2 	bl	8000608 <__aeabi_dmul>
 800e424:	4b29      	ldr	r3, [pc, #164]	; (800e4cc <_strtod_l+0x5ac>)
 800e426:	460a      	mov	r2, r1
 800e428:	400b      	ands	r3, r1
 800e42a:	4929      	ldr	r1, [pc, #164]	; (800e4d0 <_strtod_l+0x5b0>)
 800e42c:	428b      	cmp	r3, r1
 800e42e:	4682      	mov	sl, r0
 800e430:	d8be      	bhi.n	800e3b0 <_strtod_l+0x490>
 800e432:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e436:	428b      	cmp	r3, r1
 800e438:	bf86      	itte	hi
 800e43a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e4d4 <_strtod_l+0x5b4>
 800e43e:	f04f 3aff 	movhi.w	sl, #4294967295
 800e442:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e446:	2300      	movs	r3, #0
 800e448:	9304      	str	r3, [sp, #16]
 800e44a:	e081      	b.n	800e550 <_strtod_l+0x630>
 800e44c:	f018 0f01 	tst.w	r8, #1
 800e450:	d007      	beq.n	800e462 <_strtod_l+0x542>
 800e452:	4b1d      	ldr	r3, [pc, #116]	; (800e4c8 <_strtod_l+0x5a8>)
 800e454:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45c:	f7f2 f8d4 	bl	8000608 <__aeabi_dmul>
 800e460:	2301      	movs	r3, #1
 800e462:	f109 0901 	add.w	r9, r9, #1
 800e466:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e46a:	e7ca      	b.n	800e402 <_strtod_l+0x4e2>
 800e46c:	d0eb      	beq.n	800e446 <_strtod_l+0x526>
 800e46e:	f1c8 0800 	rsb	r8, r8, #0
 800e472:	f018 020f 	ands.w	r2, r8, #15
 800e476:	d00a      	beq.n	800e48e <_strtod_l+0x56e>
 800e478:	4b12      	ldr	r3, [pc, #72]	; (800e4c4 <_strtod_l+0x5a4>)
 800e47a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e47e:	4650      	mov	r0, sl
 800e480:	4659      	mov	r1, fp
 800e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e486:	f7f2 f9e9 	bl	800085c <__aeabi_ddiv>
 800e48a:	4682      	mov	sl, r0
 800e48c:	468b      	mov	fp, r1
 800e48e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e492:	d0d8      	beq.n	800e446 <_strtod_l+0x526>
 800e494:	f1b8 0f1f 	cmp.w	r8, #31
 800e498:	dd1e      	ble.n	800e4d8 <_strtod_l+0x5b8>
 800e49a:	2500      	movs	r5, #0
 800e49c:	462e      	mov	r6, r5
 800e49e:	9509      	str	r5, [sp, #36]	; 0x24
 800e4a0:	9507      	str	r5, [sp, #28]
 800e4a2:	2322      	movs	r3, #34	; 0x22
 800e4a4:	f04f 0a00 	mov.w	sl, #0
 800e4a8:	f04f 0b00 	mov.w	fp, #0
 800e4ac:	6023      	str	r3, [r4, #0]
 800e4ae:	e789      	b.n	800e3c4 <_strtod_l+0x4a4>
 800e4b0:	080138e9 	.word	0x080138e9
 800e4b4:	08013928 	.word	0x08013928
 800e4b8:	080138e1 	.word	0x080138e1
 800e4bc:	08013a6c 	.word	0x08013a6c
 800e4c0:	08013d43 	.word	0x08013d43
 800e4c4:	08013c08 	.word	0x08013c08
 800e4c8:	08013be0 	.word	0x08013be0
 800e4cc:	7ff00000 	.word	0x7ff00000
 800e4d0:	7ca00000 	.word	0x7ca00000
 800e4d4:	7fefffff 	.word	0x7fefffff
 800e4d8:	f018 0310 	ands.w	r3, r8, #16
 800e4dc:	bf18      	it	ne
 800e4de:	236a      	movne	r3, #106	; 0x6a
 800e4e0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e898 <_strtod_l+0x978>
 800e4e4:	9304      	str	r3, [sp, #16]
 800e4e6:	4650      	mov	r0, sl
 800e4e8:	4659      	mov	r1, fp
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	f018 0f01 	tst.w	r8, #1
 800e4f0:	d004      	beq.n	800e4fc <_strtod_l+0x5dc>
 800e4f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e4f6:	f7f2 f887 	bl	8000608 <__aeabi_dmul>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e500:	f109 0908 	add.w	r9, r9, #8
 800e504:	d1f2      	bne.n	800e4ec <_strtod_l+0x5cc>
 800e506:	b10b      	cbz	r3, 800e50c <_strtod_l+0x5ec>
 800e508:	4682      	mov	sl, r0
 800e50a:	468b      	mov	fp, r1
 800e50c:	9b04      	ldr	r3, [sp, #16]
 800e50e:	b1bb      	cbz	r3, 800e540 <_strtod_l+0x620>
 800e510:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e514:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e518:	2b00      	cmp	r3, #0
 800e51a:	4659      	mov	r1, fp
 800e51c:	dd10      	ble.n	800e540 <_strtod_l+0x620>
 800e51e:	2b1f      	cmp	r3, #31
 800e520:	f340 8128 	ble.w	800e774 <_strtod_l+0x854>
 800e524:	2b34      	cmp	r3, #52	; 0x34
 800e526:	bfde      	ittt	le
 800e528:	3b20      	suble	r3, #32
 800e52a:	f04f 32ff 	movle.w	r2, #4294967295
 800e52e:	fa02 f303 	lslle.w	r3, r2, r3
 800e532:	f04f 0a00 	mov.w	sl, #0
 800e536:	bfcc      	ite	gt
 800e538:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e53c:	ea03 0b01 	andle.w	fp, r3, r1
 800e540:	2200      	movs	r2, #0
 800e542:	2300      	movs	r3, #0
 800e544:	4650      	mov	r0, sl
 800e546:	4659      	mov	r1, fp
 800e548:	f7f2 fac6 	bl	8000ad8 <__aeabi_dcmpeq>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d1a4      	bne.n	800e49a <_strtod_l+0x57a>
 800e550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e556:	462b      	mov	r3, r5
 800e558:	463a      	mov	r2, r7
 800e55a:	4620      	mov	r0, r4
 800e55c:	f001 fe60 	bl	8010220 <__s2b>
 800e560:	9009      	str	r0, [sp, #36]	; 0x24
 800e562:	2800      	cmp	r0, #0
 800e564:	f43f af24 	beq.w	800e3b0 <_strtod_l+0x490>
 800e568:	9b07      	ldr	r3, [sp, #28]
 800e56a:	1b9e      	subs	r6, r3, r6
 800e56c:	9b08      	ldr	r3, [sp, #32]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	bfb4      	ite	lt
 800e572:	4633      	movlt	r3, r6
 800e574:	2300      	movge	r3, #0
 800e576:	9310      	str	r3, [sp, #64]	; 0x40
 800e578:	9b08      	ldr	r3, [sp, #32]
 800e57a:	2500      	movs	r5, #0
 800e57c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e580:	9318      	str	r3, [sp, #96]	; 0x60
 800e582:	462e      	mov	r6, r5
 800e584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e586:	4620      	mov	r0, r4
 800e588:	6859      	ldr	r1, [r3, #4]
 800e58a:	f001 fd9d 	bl	80100c8 <_Balloc>
 800e58e:	9007      	str	r0, [sp, #28]
 800e590:	2800      	cmp	r0, #0
 800e592:	f43f af11 	beq.w	800e3b8 <_strtod_l+0x498>
 800e596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e598:	691a      	ldr	r2, [r3, #16]
 800e59a:	3202      	adds	r2, #2
 800e59c:	f103 010c 	add.w	r1, r3, #12
 800e5a0:	0092      	lsls	r2, r2, #2
 800e5a2:	300c      	adds	r0, #12
 800e5a4:	f7fe fcac 	bl	800cf00 <memcpy>
 800e5a8:	ec4b ab10 	vmov	d0, sl, fp
 800e5ac:	aa20      	add	r2, sp, #128	; 0x80
 800e5ae:	a91f      	add	r1, sp, #124	; 0x7c
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e5b6:	f002 f96f 	bl	8010898 <__d2b>
 800e5ba:	901e      	str	r0, [sp, #120]	; 0x78
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	f43f aefb 	beq.w	800e3b8 <_strtod_l+0x498>
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	f001 fec5 	bl	8010354 <__i2b>
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	f43f aef3 	beq.w	800e3b8 <_strtod_l+0x498>
 800e5d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5d4:	9904      	ldr	r1, [sp, #16]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	bfab      	itete	ge
 800e5da:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e5dc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e5de:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e5e0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e5e4:	bfac      	ite	ge
 800e5e6:	eb03 0902 	addge.w	r9, r3, r2
 800e5ea:	1ad7      	sublt	r7, r2, r3
 800e5ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e5ee:	eba3 0801 	sub.w	r8, r3, r1
 800e5f2:	4490      	add	r8, r2
 800e5f4:	4ba3      	ldr	r3, [pc, #652]	; (800e884 <_strtod_l+0x964>)
 800e5f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e5fa:	4598      	cmp	r8, r3
 800e5fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e600:	f280 80cc 	bge.w	800e79c <_strtod_l+0x87c>
 800e604:	eba3 0308 	sub.w	r3, r3, r8
 800e608:	2b1f      	cmp	r3, #31
 800e60a:	eba2 0203 	sub.w	r2, r2, r3
 800e60e:	f04f 0101 	mov.w	r1, #1
 800e612:	f300 80b6 	bgt.w	800e782 <_strtod_l+0x862>
 800e616:	fa01 f303 	lsl.w	r3, r1, r3
 800e61a:	9311      	str	r3, [sp, #68]	; 0x44
 800e61c:	2300      	movs	r3, #0
 800e61e:	930c      	str	r3, [sp, #48]	; 0x30
 800e620:	eb09 0802 	add.w	r8, r9, r2
 800e624:	9b04      	ldr	r3, [sp, #16]
 800e626:	45c1      	cmp	r9, r8
 800e628:	4417      	add	r7, r2
 800e62a:	441f      	add	r7, r3
 800e62c:	464b      	mov	r3, r9
 800e62e:	bfa8      	it	ge
 800e630:	4643      	movge	r3, r8
 800e632:	42bb      	cmp	r3, r7
 800e634:	bfa8      	it	ge
 800e636:	463b      	movge	r3, r7
 800e638:	2b00      	cmp	r3, #0
 800e63a:	bfc2      	ittt	gt
 800e63c:	eba8 0803 	subgt.w	r8, r8, r3
 800e640:	1aff      	subgt	r7, r7, r3
 800e642:	eba9 0903 	subgt.w	r9, r9, r3
 800e646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e648:	2b00      	cmp	r3, #0
 800e64a:	dd17      	ble.n	800e67c <_strtod_l+0x75c>
 800e64c:	4631      	mov	r1, r6
 800e64e:	461a      	mov	r2, r3
 800e650:	4620      	mov	r0, r4
 800e652:	f001 ff3b 	bl	80104cc <__pow5mult>
 800e656:	4606      	mov	r6, r0
 800e658:	2800      	cmp	r0, #0
 800e65a:	f43f aead 	beq.w	800e3b8 <_strtod_l+0x498>
 800e65e:	4601      	mov	r1, r0
 800e660:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e662:	4620      	mov	r0, r4
 800e664:	f001 fe8c 	bl	8010380 <__multiply>
 800e668:	900f      	str	r0, [sp, #60]	; 0x3c
 800e66a:	2800      	cmp	r0, #0
 800e66c:	f43f aea4 	beq.w	800e3b8 <_strtod_l+0x498>
 800e670:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e672:	4620      	mov	r0, r4
 800e674:	f001 fd68 	bl	8010148 <_Bfree>
 800e678:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e67a:	931e      	str	r3, [sp, #120]	; 0x78
 800e67c:	f1b8 0f00 	cmp.w	r8, #0
 800e680:	f300 8091 	bgt.w	800e7a6 <_strtod_l+0x886>
 800e684:	9b08      	ldr	r3, [sp, #32]
 800e686:	2b00      	cmp	r3, #0
 800e688:	dd08      	ble.n	800e69c <_strtod_l+0x77c>
 800e68a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e68c:	9907      	ldr	r1, [sp, #28]
 800e68e:	4620      	mov	r0, r4
 800e690:	f001 ff1c 	bl	80104cc <__pow5mult>
 800e694:	9007      	str	r0, [sp, #28]
 800e696:	2800      	cmp	r0, #0
 800e698:	f43f ae8e 	beq.w	800e3b8 <_strtod_l+0x498>
 800e69c:	2f00      	cmp	r7, #0
 800e69e:	dd08      	ble.n	800e6b2 <_strtod_l+0x792>
 800e6a0:	9907      	ldr	r1, [sp, #28]
 800e6a2:	463a      	mov	r2, r7
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f001 ff6b 	bl	8010580 <__lshift>
 800e6aa:	9007      	str	r0, [sp, #28]
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	f43f ae83 	beq.w	800e3b8 <_strtod_l+0x498>
 800e6b2:	f1b9 0f00 	cmp.w	r9, #0
 800e6b6:	dd08      	ble.n	800e6ca <_strtod_l+0x7aa>
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	464a      	mov	r2, r9
 800e6bc:	4620      	mov	r0, r4
 800e6be:	f001 ff5f 	bl	8010580 <__lshift>
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	f43f ae77 	beq.w	800e3b8 <_strtod_l+0x498>
 800e6ca:	9a07      	ldr	r2, [sp, #28]
 800e6cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f001 ffde 	bl	8010690 <__mdiff>
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	f43f ae6e 	beq.w	800e3b8 <_strtod_l+0x498>
 800e6dc:	68c3      	ldr	r3, [r0, #12]
 800e6de:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	60c3      	str	r3, [r0, #12]
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	f001 ffb7 	bl	8010658 <__mcmp>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	da65      	bge.n	800e7ba <_strtod_l+0x89a>
 800e6ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6f0:	ea53 030a 	orrs.w	r3, r3, sl
 800e6f4:	f040 8087 	bne.w	800e806 <_strtod_l+0x8e6>
 800e6f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f040 8082 	bne.w	800e806 <_strtod_l+0x8e6>
 800e702:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e706:	0d1b      	lsrs	r3, r3, #20
 800e708:	051b      	lsls	r3, r3, #20
 800e70a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e70e:	d97a      	bls.n	800e806 <_strtod_l+0x8e6>
 800e710:	696b      	ldr	r3, [r5, #20]
 800e712:	b913      	cbnz	r3, 800e71a <_strtod_l+0x7fa>
 800e714:	692b      	ldr	r3, [r5, #16]
 800e716:	2b01      	cmp	r3, #1
 800e718:	dd75      	ble.n	800e806 <_strtod_l+0x8e6>
 800e71a:	4629      	mov	r1, r5
 800e71c:	2201      	movs	r2, #1
 800e71e:	4620      	mov	r0, r4
 800e720:	f001 ff2e 	bl	8010580 <__lshift>
 800e724:	4631      	mov	r1, r6
 800e726:	4605      	mov	r5, r0
 800e728:	f001 ff96 	bl	8010658 <__mcmp>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	dd6a      	ble.n	800e806 <_strtod_l+0x8e6>
 800e730:	9904      	ldr	r1, [sp, #16]
 800e732:	4a55      	ldr	r2, [pc, #340]	; (800e888 <_strtod_l+0x968>)
 800e734:	465b      	mov	r3, fp
 800e736:	2900      	cmp	r1, #0
 800e738:	f000 8085 	beq.w	800e846 <_strtod_l+0x926>
 800e73c:	ea02 010b 	and.w	r1, r2, fp
 800e740:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e744:	dc7f      	bgt.n	800e846 <_strtod_l+0x926>
 800e746:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e74a:	f77f aeaa 	ble.w	800e4a2 <_strtod_l+0x582>
 800e74e:	4a4f      	ldr	r2, [pc, #316]	; (800e88c <_strtod_l+0x96c>)
 800e750:	2300      	movs	r3, #0
 800e752:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e756:	4650      	mov	r0, sl
 800e758:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e75c:	4659      	mov	r1, fp
 800e75e:	f7f1 ff53 	bl	8000608 <__aeabi_dmul>
 800e762:	460b      	mov	r3, r1
 800e764:	4303      	orrs	r3, r0
 800e766:	bf08      	it	eq
 800e768:	2322      	moveq	r3, #34	; 0x22
 800e76a:	4682      	mov	sl, r0
 800e76c:	468b      	mov	fp, r1
 800e76e:	bf08      	it	eq
 800e770:	6023      	streq	r3, [r4, #0]
 800e772:	e62b      	b.n	800e3cc <_strtod_l+0x4ac>
 800e774:	f04f 32ff 	mov.w	r2, #4294967295
 800e778:	fa02 f303 	lsl.w	r3, r2, r3
 800e77c:	ea03 0a0a 	and.w	sl, r3, sl
 800e780:	e6de      	b.n	800e540 <_strtod_l+0x620>
 800e782:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e786:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e78a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e78e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e792:	fa01 f308 	lsl.w	r3, r1, r8
 800e796:	930c      	str	r3, [sp, #48]	; 0x30
 800e798:	9111      	str	r1, [sp, #68]	; 0x44
 800e79a:	e741      	b.n	800e620 <_strtod_l+0x700>
 800e79c:	2300      	movs	r3, #0
 800e79e:	930c      	str	r3, [sp, #48]	; 0x30
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	9311      	str	r3, [sp, #68]	; 0x44
 800e7a4:	e73c      	b.n	800e620 <_strtod_l+0x700>
 800e7a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e7a8:	4642      	mov	r2, r8
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	f001 fee8 	bl	8010580 <__lshift>
 800e7b0:	901e      	str	r0, [sp, #120]	; 0x78
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	f47f af66 	bne.w	800e684 <_strtod_l+0x764>
 800e7b8:	e5fe      	b.n	800e3b8 <_strtod_l+0x498>
 800e7ba:	465f      	mov	r7, fp
 800e7bc:	d16e      	bne.n	800e89c <_strtod_l+0x97c>
 800e7be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e7c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7c4:	b342      	cbz	r2, 800e818 <_strtod_l+0x8f8>
 800e7c6:	4a32      	ldr	r2, [pc, #200]	; (800e890 <_strtod_l+0x970>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d128      	bne.n	800e81e <_strtod_l+0x8fe>
 800e7cc:	9b04      	ldr	r3, [sp, #16]
 800e7ce:	4650      	mov	r0, sl
 800e7d0:	b1eb      	cbz	r3, 800e80e <_strtod_l+0x8ee>
 800e7d2:	4a2d      	ldr	r2, [pc, #180]	; (800e888 <_strtod_l+0x968>)
 800e7d4:	403a      	ands	r2, r7
 800e7d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e7da:	f04f 31ff 	mov.w	r1, #4294967295
 800e7de:	d819      	bhi.n	800e814 <_strtod_l+0x8f4>
 800e7e0:	0d12      	lsrs	r2, r2, #20
 800e7e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e7ea:	4298      	cmp	r0, r3
 800e7ec:	d117      	bne.n	800e81e <_strtod_l+0x8fe>
 800e7ee:	4b29      	ldr	r3, [pc, #164]	; (800e894 <_strtod_l+0x974>)
 800e7f0:	429f      	cmp	r7, r3
 800e7f2:	d102      	bne.n	800e7fa <_strtod_l+0x8da>
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	f43f addf 	beq.w	800e3b8 <_strtod_l+0x498>
 800e7fa:	4b23      	ldr	r3, [pc, #140]	; (800e888 <_strtod_l+0x968>)
 800e7fc:	403b      	ands	r3, r7
 800e7fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e802:	f04f 0a00 	mov.w	sl, #0
 800e806:	9b04      	ldr	r3, [sp, #16]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1a0      	bne.n	800e74e <_strtod_l+0x82e>
 800e80c:	e5de      	b.n	800e3cc <_strtod_l+0x4ac>
 800e80e:	f04f 33ff 	mov.w	r3, #4294967295
 800e812:	e7ea      	b.n	800e7ea <_strtod_l+0x8ca>
 800e814:	460b      	mov	r3, r1
 800e816:	e7e8      	b.n	800e7ea <_strtod_l+0x8ca>
 800e818:	ea53 030a 	orrs.w	r3, r3, sl
 800e81c:	d088      	beq.n	800e730 <_strtod_l+0x810>
 800e81e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e820:	b1db      	cbz	r3, 800e85a <_strtod_l+0x93a>
 800e822:	423b      	tst	r3, r7
 800e824:	d0ef      	beq.n	800e806 <_strtod_l+0x8e6>
 800e826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e828:	9a04      	ldr	r2, [sp, #16]
 800e82a:	4650      	mov	r0, sl
 800e82c:	4659      	mov	r1, fp
 800e82e:	b1c3      	cbz	r3, 800e862 <_strtod_l+0x942>
 800e830:	f7ff fb59 	bl	800dee6 <sulp>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e83c:	f7f1 fd2e 	bl	800029c <__adddf3>
 800e840:	4682      	mov	sl, r0
 800e842:	468b      	mov	fp, r1
 800e844:	e7df      	b.n	800e806 <_strtod_l+0x8e6>
 800e846:	4013      	ands	r3, r2
 800e848:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e84c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e850:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e854:	f04f 3aff 	mov.w	sl, #4294967295
 800e858:	e7d5      	b.n	800e806 <_strtod_l+0x8e6>
 800e85a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e85c:	ea13 0f0a 	tst.w	r3, sl
 800e860:	e7e0      	b.n	800e824 <_strtod_l+0x904>
 800e862:	f7ff fb40 	bl	800dee6 <sulp>
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e86e:	f7f1 fd13 	bl	8000298 <__aeabi_dsub>
 800e872:	2200      	movs	r2, #0
 800e874:	2300      	movs	r3, #0
 800e876:	4682      	mov	sl, r0
 800e878:	468b      	mov	fp, r1
 800e87a:	f7f2 f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d0c1      	beq.n	800e806 <_strtod_l+0x8e6>
 800e882:	e60e      	b.n	800e4a2 <_strtod_l+0x582>
 800e884:	fffffc02 	.word	0xfffffc02
 800e888:	7ff00000 	.word	0x7ff00000
 800e88c:	39500000 	.word	0x39500000
 800e890:	000fffff 	.word	0x000fffff
 800e894:	7fefffff 	.word	0x7fefffff
 800e898:	08013940 	.word	0x08013940
 800e89c:	4631      	mov	r1, r6
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f002 f856 	bl	8010950 <__ratio>
 800e8a4:	ec59 8b10 	vmov	r8, r9, d0
 800e8a8:	ee10 0a10 	vmov	r0, s0
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e8b2:	4649      	mov	r1, r9
 800e8b4:	f7f2 f924 	bl	8000b00 <__aeabi_dcmple>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d07c      	beq.n	800e9b6 <_strtod_l+0xa96>
 800e8bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d04c      	beq.n	800e95c <_strtod_l+0xa3c>
 800e8c2:	4b95      	ldr	r3, [pc, #596]	; (800eb18 <_strtod_l+0xbf8>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e8ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800eb18 <_strtod_l+0xbf8>
 800e8ce:	f04f 0800 	mov.w	r8, #0
 800e8d2:	4b92      	ldr	r3, [pc, #584]	; (800eb1c <_strtod_l+0xbfc>)
 800e8d4:	403b      	ands	r3, r7
 800e8d6:	9311      	str	r3, [sp, #68]	; 0x44
 800e8d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e8da:	4b91      	ldr	r3, [pc, #580]	; (800eb20 <_strtod_l+0xc00>)
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	f040 80b2 	bne.w	800ea46 <_strtod_l+0xb26>
 800e8e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e8e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e8ee:	ec4b ab10 	vmov	d0, sl, fp
 800e8f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e8f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e8fa:	f001 ff51 	bl	80107a0 <__ulp>
 800e8fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e902:	ec53 2b10 	vmov	r2, r3, d0
 800e906:	f7f1 fe7f 	bl	8000608 <__aeabi_dmul>
 800e90a:	4652      	mov	r2, sl
 800e90c:	465b      	mov	r3, fp
 800e90e:	f7f1 fcc5 	bl	800029c <__adddf3>
 800e912:	460b      	mov	r3, r1
 800e914:	4981      	ldr	r1, [pc, #516]	; (800eb1c <_strtod_l+0xbfc>)
 800e916:	4a83      	ldr	r2, [pc, #524]	; (800eb24 <_strtod_l+0xc04>)
 800e918:	4019      	ands	r1, r3
 800e91a:	4291      	cmp	r1, r2
 800e91c:	4682      	mov	sl, r0
 800e91e:	d95e      	bls.n	800e9de <_strtod_l+0xabe>
 800e920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e922:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e926:	4293      	cmp	r3, r2
 800e928:	d103      	bne.n	800e932 <_strtod_l+0xa12>
 800e92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e92c:	3301      	adds	r3, #1
 800e92e:	f43f ad43 	beq.w	800e3b8 <_strtod_l+0x498>
 800e932:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800eb30 <_strtod_l+0xc10>
 800e936:	f04f 3aff 	mov.w	sl, #4294967295
 800e93a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e93c:	4620      	mov	r0, r4
 800e93e:	f001 fc03 	bl	8010148 <_Bfree>
 800e942:	9907      	ldr	r1, [sp, #28]
 800e944:	4620      	mov	r0, r4
 800e946:	f001 fbff 	bl	8010148 <_Bfree>
 800e94a:	4631      	mov	r1, r6
 800e94c:	4620      	mov	r0, r4
 800e94e:	f001 fbfb 	bl	8010148 <_Bfree>
 800e952:	4629      	mov	r1, r5
 800e954:	4620      	mov	r0, r4
 800e956:	f001 fbf7 	bl	8010148 <_Bfree>
 800e95a:	e613      	b.n	800e584 <_strtod_l+0x664>
 800e95c:	f1ba 0f00 	cmp.w	sl, #0
 800e960:	d11b      	bne.n	800e99a <_strtod_l+0xa7a>
 800e962:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e966:	b9f3      	cbnz	r3, 800e9a6 <_strtod_l+0xa86>
 800e968:	4b6b      	ldr	r3, [pc, #428]	; (800eb18 <_strtod_l+0xbf8>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	4640      	mov	r0, r8
 800e96e:	4649      	mov	r1, r9
 800e970:	f7f2 f8bc 	bl	8000aec <__aeabi_dcmplt>
 800e974:	b9d0      	cbnz	r0, 800e9ac <_strtod_l+0xa8c>
 800e976:	4640      	mov	r0, r8
 800e978:	4649      	mov	r1, r9
 800e97a:	4b6b      	ldr	r3, [pc, #428]	; (800eb28 <_strtod_l+0xc08>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	f7f1 fe43 	bl	8000608 <__aeabi_dmul>
 800e982:	4680      	mov	r8, r0
 800e984:	4689      	mov	r9, r1
 800e986:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e98a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e98e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e990:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e994:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e998:	e79b      	b.n	800e8d2 <_strtod_l+0x9b2>
 800e99a:	f1ba 0f01 	cmp.w	sl, #1
 800e99e:	d102      	bne.n	800e9a6 <_strtod_l+0xa86>
 800e9a0:	2f00      	cmp	r7, #0
 800e9a2:	f43f ad7e 	beq.w	800e4a2 <_strtod_l+0x582>
 800e9a6:	4b61      	ldr	r3, [pc, #388]	; (800eb2c <_strtod_l+0xc0c>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	e78c      	b.n	800e8c6 <_strtod_l+0x9a6>
 800e9ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eb28 <_strtod_l+0xc08>
 800e9b0:	f04f 0800 	mov.w	r8, #0
 800e9b4:	e7e7      	b.n	800e986 <_strtod_l+0xa66>
 800e9b6:	4b5c      	ldr	r3, [pc, #368]	; (800eb28 <_strtod_l+0xc08>)
 800e9b8:	4640      	mov	r0, r8
 800e9ba:	4649      	mov	r1, r9
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f7f1 fe23 	bl	8000608 <__aeabi_dmul>
 800e9c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9c4:	4680      	mov	r8, r0
 800e9c6:	4689      	mov	r9, r1
 800e9c8:	b933      	cbnz	r3, 800e9d8 <_strtod_l+0xab8>
 800e9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9ce:	9012      	str	r0, [sp, #72]	; 0x48
 800e9d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800e9d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e9d6:	e7dd      	b.n	800e994 <_strtod_l+0xa74>
 800e9d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e9dc:	e7f9      	b.n	800e9d2 <_strtod_l+0xab2>
 800e9de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e9e2:	9b04      	ldr	r3, [sp, #16]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1a8      	bne.n	800e93a <_strtod_l+0xa1a>
 800e9e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e9ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e9ee:	0d1b      	lsrs	r3, r3, #20
 800e9f0:	051b      	lsls	r3, r3, #20
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d1a1      	bne.n	800e93a <_strtod_l+0xa1a>
 800e9f6:	4640      	mov	r0, r8
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	f7f2 f965 	bl	8000cc8 <__aeabi_d2lz>
 800e9fe:	f7f1 fdd5 	bl	80005ac <__aeabi_l2d>
 800ea02:	4602      	mov	r2, r0
 800ea04:	460b      	mov	r3, r1
 800ea06:	4640      	mov	r0, r8
 800ea08:	4649      	mov	r1, r9
 800ea0a:	f7f1 fc45 	bl	8000298 <__aeabi_dsub>
 800ea0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ea10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea14:	ea43 030a 	orr.w	r3, r3, sl
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	4680      	mov	r8, r0
 800ea1c:	4689      	mov	r9, r1
 800ea1e:	d053      	beq.n	800eac8 <_strtod_l+0xba8>
 800ea20:	a335      	add	r3, pc, #212	; (adr r3, 800eaf8 <_strtod_l+0xbd8>)
 800ea22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea26:	f7f2 f861 	bl	8000aec <__aeabi_dcmplt>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	f47f acce 	bne.w	800e3cc <_strtod_l+0x4ac>
 800ea30:	a333      	add	r3, pc, #204	; (adr r3, 800eb00 <_strtod_l+0xbe0>)
 800ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea36:	4640      	mov	r0, r8
 800ea38:	4649      	mov	r1, r9
 800ea3a:	f7f2 f875 	bl	8000b28 <__aeabi_dcmpgt>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	f43f af7b 	beq.w	800e93a <_strtod_l+0xa1a>
 800ea44:	e4c2      	b.n	800e3cc <_strtod_l+0x4ac>
 800ea46:	9b04      	ldr	r3, [sp, #16]
 800ea48:	b333      	cbz	r3, 800ea98 <_strtod_l+0xb78>
 800ea4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ea50:	d822      	bhi.n	800ea98 <_strtod_l+0xb78>
 800ea52:	a32d      	add	r3, pc, #180	; (adr r3, 800eb08 <_strtod_l+0xbe8>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	4640      	mov	r0, r8
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	f7f2 f850 	bl	8000b00 <__aeabi_dcmple>
 800ea60:	b1a0      	cbz	r0, 800ea8c <_strtod_l+0xb6c>
 800ea62:	4649      	mov	r1, r9
 800ea64:	4640      	mov	r0, r8
 800ea66:	f7f2 f8a7 	bl	8000bb8 <__aeabi_d2uiz>
 800ea6a:	2801      	cmp	r0, #1
 800ea6c:	bf38      	it	cc
 800ea6e:	2001      	movcc	r0, #1
 800ea70:	f7f1 fd50 	bl	8000514 <__aeabi_ui2d>
 800ea74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea76:	4680      	mov	r8, r0
 800ea78:	4689      	mov	r9, r1
 800ea7a:	bb13      	cbnz	r3, 800eac2 <_strtod_l+0xba2>
 800ea7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea80:	9014      	str	r0, [sp, #80]	; 0x50
 800ea82:	9315      	str	r3, [sp, #84]	; 0x54
 800ea84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ea88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ea8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ea90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ea94:	1a9b      	subs	r3, r3, r2
 800ea96:	930d      	str	r3, [sp, #52]	; 0x34
 800ea98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ea9c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800eaa0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eaa4:	f001 fe7c 	bl	80107a0 <__ulp>
 800eaa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eaac:	ec53 2b10 	vmov	r2, r3, d0
 800eab0:	f7f1 fdaa 	bl	8000608 <__aeabi_dmul>
 800eab4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eab8:	f7f1 fbf0 	bl	800029c <__adddf3>
 800eabc:	4682      	mov	sl, r0
 800eabe:	468b      	mov	fp, r1
 800eac0:	e78f      	b.n	800e9e2 <_strtod_l+0xac2>
 800eac2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800eac6:	e7dd      	b.n	800ea84 <_strtod_l+0xb64>
 800eac8:	a311      	add	r3, pc, #68	; (adr r3, 800eb10 <_strtod_l+0xbf0>)
 800eaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eace:	f7f2 f80d 	bl	8000aec <__aeabi_dcmplt>
 800ead2:	e7b4      	b.n	800ea3e <_strtod_l+0xb1e>
 800ead4:	2300      	movs	r3, #0
 800ead6:	930e      	str	r3, [sp, #56]	; 0x38
 800ead8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eadc:	6013      	str	r3, [r2, #0]
 800eade:	f7ff ba65 	b.w	800dfac <_strtod_l+0x8c>
 800eae2:	2b65      	cmp	r3, #101	; 0x65
 800eae4:	f43f ab5d 	beq.w	800e1a2 <_strtod_l+0x282>
 800eae8:	2b45      	cmp	r3, #69	; 0x45
 800eaea:	f43f ab5a 	beq.w	800e1a2 <_strtod_l+0x282>
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f7ff bb92 	b.w	800e218 <_strtod_l+0x2f8>
 800eaf4:	f3af 8000 	nop.w
 800eaf8:	94a03595 	.word	0x94a03595
 800eafc:	3fdfffff 	.word	0x3fdfffff
 800eb00:	35afe535 	.word	0x35afe535
 800eb04:	3fe00000 	.word	0x3fe00000
 800eb08:	ffc00000 	.word	0xffc00000
 800eb0c:	41dfffff 	.word	0x41dfffff
 800eb10:	94a03595 	.word	0x94a03595
 800eb14:	3fcfffff 	.word	0x3fcfffff
 800eb18:	3ff00000 	.word	0x3ff00000
 800eb1c:	7ff00000 	.word	0x7ff00000
 800eb20:	7fe00000 	.word	0x7fe00000
 800eb24:	7c9fffff 	.word	0x7c9fffff
 800eb28:	3fe00000 	.word	0x3fe00000
 800eb2c:	bff00000 	.word	0xbff00000
 800eb30:	7fefffff 	.word	0x7fefffff

0800eb34 <_strtod_r>:
 800eb34:	4b01      	ldr	r3, [pc, #4]	; (800eb3c <_strtod_r+0x8>)
 800eb36:	f7ff b9f3 	b.w	800df20 <_strtod_l>
 800eb3a:	bf00      	nop
 800eb3c:	200000a0 	.word	0x200000a0

0800eb40 <_strtol_l.isra.0>:
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb46:	d001      	beq.n	800eb4c <_strtol_l.isra.0+0xc>
 800eb48:	2b24      	cmp	r3, #36	; 0x24
 800eb4a:	d906      	bls.n	800eb5a <_strtol_l.isra.0+0x1a>
 800eb4c:	f7fe f99e 	bl	800ce8c <__errno>
 800eb50:	2316      	movs	r3, #22
 800eb52:	6003      	str	r3, [r0, #0]
 800eb54:	2000      	movs	r0, #0
 800eb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb5a:	4f3a      	ldr	r7, [pc, #232]	; (800ec44 <_strtol_l.isra.0+0x104>)
 800eb5c:	468e      	mov	lr, r1
 800eb5e:	4676      	mov	r6, lr
 800eb60:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eb64:	5de5      	ldrb	r5, [r4, r7]
 800eb66:	f015 0508 	ands.w	r5, r5, #8
 800eb6a:	d1f8      	bne.n	800eb5e <_strtol_l.isra.0+0x1e>
 800eb6c:	2c2d      	cmp	r4, #45	; 0x2d
 800eb6e:	d134      	bne.n	800ebda <_strtol_l.isra.0+0x9a>
 800eb70:	f89e 4000 	ldrb.w	r4, [lr]
 800eb74:	f04f 0801 	mov.w	r8, #1
 800eb78:	f106 0e02 	add.w	lr, r6, #2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d05c      	beq.n	800ec3a <_strtol_l.isra.0+0xfa>
 800eb80:	2b10      	cmp	r3, #16
 800eb82:	d10c      	bne.n	800eb9e <_strtol_l.isra.0+0x5e>
 800eb84:	2c30      	cmp	r4, #48	; 0x30
 800eb86:	d10a      	bne.n	800eb9e <_strtol_l.isra.0+0x5e>
 800eb88:	f89e 4000 	ldrb.w	r4, [lr]
 800eb8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb90:	2c58      	cmp	r4, #88	; 0x58
 800eb92:	d14d      	bne.n	800ec30 <_strtol_l.isra.0+0xf0>
 800eb94:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800eb98:	2310      	movs	r3, #16
 800eb9a:	f10e 0e02 	add.w	lr, lr, #2
 800eb9e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800eba2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eba6:	2600      	movs	r6, #0
 800eba8:	fbbc f9f3 	udiv	r9, ip, r3
 800ebac:	4635      	mov	r5, r6
 800ebae:	fb03 ca19 	mls	sl, r3, r9, ip
 800ebb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ebb6:	2f09      	cmp	r7, #9
 800ebb8:	d818      	bhi.n	800ebec <_strtol_l.isra.0+0xac>
 800ebba:	463c      	mov	r4, r7
 800ebbc:	42a3      	cmp	r3, r4
 800ebbe:	dd24      	ble.n	800ec0a <_strtol_l.isra.0+0xca>
 800ebc0:	2e00      	cmp	r6, #0
 800ebc2:	db1f      	blt.n	800ec04 <_strtol_l.isra.0+0xc4>
 800ebc4:	45a9      	cmp	r9, r5
 800ebc6:	d31d      	bcc.n	800ec04 <_strtol_l.isra.0+0xc4>
 800ebc8:	d101      	bne.n	800ebce <_strtol_l.isra.0+0x8e>
 800ebca:	45a2      	cmp	sl, r4
 800ebcc:	db1a      	blt.n	800ec04 <_strtol_l.isra.0+0xc4>
 800ebce:	fb05 4503 	mla	r5, r5, r3, r4
 800ebd2:	2601      	movs	r6, #1
 800ebd4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ebd8:	e7eb      	b.n	800ebb2 <_strtol_l.isra.0+0x72>
 800ebda:	2c2b      	cmp	r4, #43	; 0x2b
 800ebdc:	bf08      	it	eq
 800ebde:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ebe2:	46a8      	mov	r8, r5
 800ebe4:	bf08      	it	eq
 800ebe6:	f106 0e02 	addeq.w	lr, r6, #2
 800ebea:	e7c7      	b.n	800eb7c <_strtol_l.isra.0+0x3c>
 800ebec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ebf0:	2f19      	cmp	r7, #25
 800ebf2:	d801      	bhi.n	800ebf8 <_strtol_l.isra.0+0xb8>
 800ebf4:	3c37      	subs	r4, #55	; 0x37
 800ebf6:	e7e1      	b.n	800ebbc <_strtol_l.isra.0+0x7c>
 800ebf8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ebfc:	2f19      	cmp	r7, #25
 800ebfe:	d804      	bhi.n	800ec0a <_strtol_l.isra.0+0xca>
 800ec00:	3c57      	subs	r4, #87	; 0x57
 800ec02:	e7db      	b.n	800ebbc <_strtol_l.isra.0+0x7c>
 800ec04:	f04f 36ff 	mov.w	r6, #4294967295
 800ec08:	e7e4      	b.n	800ebd4 <_strtol_l.isra.0+0x94>
 800ec0a:	2e00      	cmp	r6, #0
 800ec0c:	da05      	bge.n	800ec1a <_strtol_l.isra.0+0xda>
 800ec0e:	2322      	movs	r3, #34	; 0x22
 800ec10:	6003      	str	r3, [r0, #0]
 800ec12:	4665      	mov	r5, ip
 800ec14:	b942      	cbnz	r2, 800ec28 <_strtol_l.isra.0+0xe8>
 800ec16:	4628      	mov	r0, r5
 800ec18:	e79d      	b.n	800eb56 <_strtol_l.isra.0+0x16>
 800ec1a:	f1b8 0f00 	cmp.w	r8, #0
 800ec1e:	d000      	beq.n	800ec22 <_strtol_l.isra.0+0xe2>
 800ec20:	426d      	negs	r5, r5
 800ec22:	2a00      	cmp	r2, #0
 800ec24:	d0f7      	beq.n	800ec16 <_strtol_l.isra.0+0xd6>
 800ec26:	b10e      	cbz	r6, 800ec2c <_strtol_l.isra.0+0xec>
 800ec28:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ec2c:	6011      	str	r1, [r2, #0]
 800ec2e:	e7f2      	b.n	800ec16 <_strtol_l.isra.0+0xd6>
 800ec30:	2430      	movs	r4, #48	; 0x30
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1b3      	bne.n	800eb9e <_strtol_l.isra.0+0x5e>
 800ec36:	2308      	movs	r3, #8
 800ec38:	e7b1      	b.n	800eb9e <_strtol_l.isra.0+0x5e>
 800ec3a:	2c30      	cmp	r4, #48	; 0x30
 800ec3c:	d0a4      	beq.n	800eb88 <_strtol_l.isra.0+0x48>
 800ec3e:	230a      	movs	r3, #10
 800ec40:	e7ad      	b.n	800eb9e <_strtol_l.isra.0+0x5e>
 800ec42:	bf00      	nop
 800ec44:	08013969 	.word	0x08013969

0800ec48 <_strtol_r>:
 800ec48:	f7ff bf7a 	b.w	800eb40 <_strtol_l.isra.0>

0800ec4c <_write_r>:
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	4d07      	ldr	r5, [pc, #28]	; (800ec6c <_write_r+0x20>)
 800ec50:	4604      	mov	r4, r0
 800ec52:	4608      	mov	r0, r1
 800ec54:	4611      	mov	r1, r2
 800ec56:	2200      	movs	r2, #0
 800ec58:	602a      	str	r2, [r5, #0]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	f7f3 ffeb 	bl	8002c36 <_write>
 800ec60:	1c43      	adds	r3, r0, #1
 800ec62:	d102      	bne.n	800ec6a <_write_r+0x1e>
 800ec64:	682b      	ldr	r3, [r5, #0]
 800ec66:	b103      	cbz	r3, 800ec6a <_write_r+0x1e>
 800ec68:	6023      	str	r3, [r4, #0]
 800ec6a:	bd38      	pop	{r3, r4, r5, pc}
 800ec6c:	20005abc 	.word	0x20005abc

0800ec70 <_close_r>:
 800ec70:	b538      	push	{r3, r4, r5, lr}
 800ec72:	4d06      	ldr	r5, [pc, #24]	; (800ec8c <_close_r+0x1c>)
 800ec74:	2300      	movs	r3, #0
 800ec76:	4604      	mov	r4, r0
 800ec78:	4608      	mov	r0, r1
 800ec7a:	602b      	str	r3, [r5, #0]
 800ec7c:	f7f3 fff7 	bl	8002c6e <_close>
 800ec80:	1c43      	adds	r3, r0, #1
 800ec82:	d102      	bne.n	800ec8a <_close_r+0x1a>
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	b103      	cbz	r3, 800ec8a <_close_r+0x1a>
 800ec88:	6023      	str	r3, [r4, #0]
 800ec8a:	bd38      	pop	{r3, r4, r5, pc}
 800ec8c:	20005abc 	.word	0x20005abc

0800ec90 <quorem>:
 800ec90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec94:	6903      	ldr	r3, [r0, #16]
 800ec96:	690c      	ldr	r4, [r1, #16]
 800ec98:	42a3      	cmp	r3, r4
 800ec9a:	4607      	mov	r7, r0
 800ec9c:	f2c0 8081 	blt.w	800eda2 <quorem+0x112>
 800eca0:	3c01      	subs	r4, #1
 800eca2:	f101 0814 	add.w	r8, r1, #20
 800eca6:	f100 0514 	add.w	r5, r0, #20
 800ecaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ecae:	9301      	str	r3, [sp, #4]
 800ecb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ecb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ecc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ecc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800ecc8:	d331      	bcc.n	800ed2e <quorem+0x9e>
 800ecca:	f04f 0e00 	mov.w	lr, #0
 800ecce:	4640      	mov	r0, r8
 800ecd0:	46ac      	mov	ip, r5
 800ecd2:	46f2      	mov	sl, lr
 800ecd4:	f850 2b04 	ldr.w	r2, [r0], #4
 800ecd8:	b293      	uxth	r3, r2
 800ecda:	fb06 e303 	mla	r3, r6, r3, lr
 800ecde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	ebaa 0303 	sub.w	r3, sl, r3
 800ece8:	0c12      	lsrs	r2, r2, #16
 800ecea:	f8dc a000 	ldr.w	sl, [ip]
 800ecee:	fb06 e202 	mla	r2, r6, r2, lr
 800ecf2:	fa13 f38a 	uxtah	r3, r3, sl
 800ecf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ecfa:	fa1f fa82 	uxth.w	sl, r2
 800ecfe:	f8dc 2000 	ldr.w	r2, [ip]
 800ed02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ed06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed10:	4581      	cmp	r9, r0
 800ed12:	f84c 3b04 	str.w	r3, [ip], #4
 800ed16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ed1a:	d2db      	bcs.n	800ecd4 <quorem+0x44>
 800ed1c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ed20:	b92b      	cbnz	r3, 800ed2e <quorem+0x9e>
 800ed22:	9b01      	ldr	r3, [sp, #4]
 800ed24:	3b04      	subs	r3, #4
 800ed26:	429d      	cmp	r5, r3
 800ed28:	461a      	mov	r2, r3
 800ed2a:	d32e      	bcc.n	800ed8a <quorem+0xfa>
 800ed2c:	613c      	str	r4, [r7, #16]
 800ed2e:	4638      	mov	r0, r7
 800ed30:	f001 fc92 	bl	8010658 <__mcmp>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	db24      	blt.n	800ed82 <quorem+0xf2>
 800ed38:	3601      	adds	r6, #1
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	f04f 0c00 	mov.w	ip, #0
 800ed40:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed44:	f8d0 e000 	ldr.w	lr, [r0]
 800ed48:	b293      	uxth	r3, r2
 800ed4a:	ebac 0303 	sub.w	r3, ip, r3
 800ed4e:	0c12      	lsrs	r2, r2, #16
 800ed50:	fa13 f38e 	uxtah	r3, r3, lr
 800ed54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ed58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed62:	45c1      	cmp	r9, r8
 800ed64:	f840 3b04 	str.w	r3, [r0], #4
 800ed68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ed6c:	d2e8      	bcs.n	800ed40 <quorem+0xb0>
 800ed6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed76:	b922      	cbnz	r2, 800ed82 <quorem+0xf2>
 800ed78:	3b04      	subs	r3, #4
 800ed7a:	429d      	cmp	r5, r3
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	d30a      	bcc.n	800ed96 <quorem+0x106>
 800ed80:	613c      	str	r4, [r7, #16]
 800ed82:	4630      	mov	r0, r6
 800ed84:	b003      	add	sp, #12
 800ed86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8a:	6812      	ldr	r2, [r2, #0]
 800ed8c:	3b04      	subs	r3, #4
 800ed8e:	2a00      	cmp	r2, #0
 800ed90:	d1cc      	bne.n	800ed2c <quorem+0x9c>
 800ed92:	3c01      	subs	r4, #1
 800ed94:	e7c7      	b.n	800ed26 <quorem+0x96>
 800ed96:	6812      	ldr	r2, [r2, #0]
 800ed98:	3b04      	subs	r3, #4
 800ed9a:	2a00      	cmp	r2, #0
 800ed9c:	d1f0      	bne.n	800ed80 <quorem+0xf0>
 800ed9e:	3c01      	subs	r4, #1
 800eda0:	e7eb      	b.n	800ed7a <quorem+0xea>
 800eda2:	2000      	movs	r0, #0
 800eda4:	e7ee      	b.n	800ed84 <quorem+0xf4>
	...

0800eda8 <_dtoa_r>:
 800eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	ed2d 8b02 	vpush	{d8}
 800edb0:	ec57 6b10 	vmov	r6, r7, d0
 800edb4:	b095      	sub	sp, #84	; 0x54
 800edb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800edb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800edbc:	9105      	str	r1, [sp, #20]
 800edbe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800edc2:	4604      	mov	r4, r0
 800edc4:	9209      	str	r2, [sp, #36]	; 0x24
 800edc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800edc8:	b975      	cbnz	r5, 800ede8 <_dtoa_r+0x40>
 800edca:	2010      	movs	r0, #16
 800edcc:	f7fe f888 	bl	800cee0 <malloc>
 800edd0:	4602      	mov	r2, r0
 800edd2:	6260      	str	r0, [r4, #36]	; 0x24
 800edd4:	b920      	cbnz	r0, 800ede0 <_dtoa_r+0x38>
 800edd6:	4bb2      	ldr	r3, [pc, #712]	; (800f0a0 <_dtoa_r+0x2f8>)
 800edd8:	21ea      	movs	r1, #234	; 0xea
 800edda:	48b2      	ldr	r0, [pc, #712]	; (800f0a4 <_dtoa_r+0x2fc>)
 800eddc:	f002 fbd4 	bl	8011588 <__assert_func>
 800ede0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ede4:	6005      	str	r5, [r0, #0]
 800ede6:	60c5      	str	r5, [r0, #12]
 800ede8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edea:	6819      	ldr	r1, [r3, #0]
 800edec:	b151      	cbz	r1, 800ee04 <_dtoa_r+0x5c>
 800edee:	685a      	ldr	r2, [r3, #4]
 800edf0:	604a      	str	r2, [r1, #4]
 800edf2:	2301      	movs	r3, #1
 800edf4:	4093      	lsls	r3, r2
 800edf6:	608b      	str	r3, [r1, #8]
 800edf8:	4620      	mov	r0, r4
 800edfa:	f001 f9a5 	bl	8010148 <_Bfree>
 800edfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee00:	2200      	movs	r2, #0
 800ee02:	601a      	str	r2, [r3, #0]
 800ee04:	1e3b      	subs	r3, r7, #0
 800ee06:	bfb9      	ittee	lt
 800ee08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ee0c:	9303      	strlt	r3, [sp, #12]
 800ee0e:	2300      	movge	r3, #0
 800ee10:	f8c8 3000 	strge.w	r3, [r8]
 800ee14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ee18:	4ba3      	ldr	r3, [pc, #652]	; (800f0a8 <_dtoa_r+0x300>)
 800ee1a:	bfbc      	itt	lt
 800ee1c:	2201      	movlt	r2, #1
 800ee1e:	f8c8 2000 	strlt.w	r2, [r8]
 800ee22:	ea33 0309 	bics.w	r3, r3, r9
 800ee26:	d11b      	bne.n	800ee60 <_dtoa_r+0xb8>
 800ee28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee2a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee34:	4333      	orrs	r3, r6
 800ee36:	f000 857a 	beq.w	800f92e <_dtoa_r+0xb86>
 800ee3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee3c:	b963      	cbnz	r3, 800ee58 <_dtoa_r+0xb0>
 800ee3e:	4b9b      	ldr	r3, [pc, #620]	; (800f0ac <_dtoa_r+0x304>)
 800ee40:	e024      	b.n	800ee8c <_dtoa_r+0xe4>
 800ee42:	4b9b      	ldr	r3, [pc, #620]	; (800f0b0 <_dtoa_r+0x308>)
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	3308      	adds	r3, #8
 800ee48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee4a:	6013      	str	r3, [r2, #0]
 800ee4c:	9800      	ldr	r0, [sp, #0]
 800ee4e:	b015      	add	sp, #84	; 0x54
 800ee50:	ecbd 8b02 	vpop	{d8}
 800ee54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee58:	4b94      	ldr	r3, [pc, #592]	; (800f0ac <_dtoa_r+0x304>)
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	3303      	adds	r3, #3
 800ee5e:	e7f3      	b.n	800ee48 <_dtoa_r+0xa0>
 800ee60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee64:	2200      	movs	r2, #0
 800ee66:	ec51 0b17 	vmov	r0, r1, d7
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ee70:	f7f1 fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee74:	4680      	mov	r8, r0
 800ee76:	b158      	cbz	r0, 800ee90 <_dtoa_r+0xe8>
 800ee78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	6013      	str	r3, [r2, #0]
 800ee7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 8551 	beq.w	800f928 <_dtoa_r+0xb80>
 800ee86:	488b      	ldr	r0, [pc, #556]	; (800f0b4 <_dtoa_r+0x30c>)
 800ee88:	6018      	str	r0, [r3, #0]
 800ee8a:	1e43      	subs	r3, r0, #1
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	e7dd      	b.n	800ee4c <_dtoa_r+0xa4>
 800ee90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ee94:	aa12      	add	r2, sp, #72	; 0x48
 800ee96:	a913      	add	r1, sp, #76	; 0x4c
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f001 fcfd 	bl	8010898 <__d2b>
 800ee9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eea2:	4683      	mov	fp, r0
 800eea4:	2d00      	cmp	r5, #0
 800eea6:	d07c      	beq.n	800efa2 <_dtoa_r+0x1fa>
 800eea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eeaa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800eeae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eeb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800eeb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800eeba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800eebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eec2:	4b7d      	ldr	r3, [pc, #500]	; (800f0b8 <_dtoa_r+0x310>)
 800eec4:	2200      	movs	r2, #0
 800eec6:	4630      	mov	r0, r6
 800eec8:	4639      	mov	r1, r7
 800eeca:	f7f1 f9e5 	bl	8000298 <__aeabi_dsub>
 800eece:	a36e      	add	r3, pc, #440	; (adr r3, 800f088 <_dtoa_r+0x2e0>)
 800eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed4:	f7f1 fb98 	bl	8000608 <__aeabi_dmul>
 800eed8:	a36d      	add	r3, pc, #436	; (adr r3, 800f090 <_dtoa_r+0x2e8>)
 800eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eede:	f7f1 f9dd 	bl	800029c <__adddf3>
 800eee2:	4606      	mov	r6, r0
 800eee4:	4628      	mov	r0, r5
 800eee6:	460f      	mov	r7, r1
 800eee8:	f7f1 fb24 	bl	8000534 <__aeabi_i2d>
 800eeec:	a36a      	add	r3, pc, #424	; (adr r3, 800f098 <_dtoa_r+0x2f0>)
 800eeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef2:	f7f1 fb89 	bl	8000608 <__aeabi_dmul>
 800eef6:	4602      	mov	r2, r0
 800eef8:	460b      	mov	r3, r1
 800eefa:	4630      	mov	r0, r6
 800eefc:	4639      	mov	r1, r7
 800eefe:	f7f1 f9cd 	bl	800029c <__adddf3>
 800ef02:	4606      	mov	r6, r0
 800ef04:	460f      	mov	r7, r1
 800ef06:	f7f1 fe2f 	bl	8000b68 <__aeabi_d2iz>
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	4682      	mov	sl, r0
 800ef0e:	2300      	movs	r3, #0
 800ef10:	4630      	mov	r0, r6
 800ef12:	4639      	mov	r1, r7
 800ef14:	f7f1 fdea 	bl	8000aec <__aeabi_dcmplt>
 800ef18:	b148      	cbz	r0, 800ef2e <_dtoa_r+0x186>
 800ef1a:	4650      	mov	r0, sl
 800ef1c:	f7f1 fb0a 	bl	8000534 <__aeabi_i2d>
 800ef20:	4632      	mov	r2, r6
 800ef22:	463b      	mov	r3, r7
 800ef24:	f7f1 fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef28:	b908      	cbnz	r0, 800ef2e <_dtoa_r+0x186>
 800ef2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef2e:	f1ba 0f16 	cmp.w	sl, #22
 800ef32:	d854      	bhi.n	800efde <_dtoa_r+0x236>
 800ef34:	4b61      	ldr	r3, [pc, #388]	; (800f0bc <_dtoa_r+0x314>)
 800ef36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef42:	f7f1 fdd3 	bl	8000aec <__aeabi_dcmplt>
 800ef46:	2800      	cmp	r0, #0
 800ef48:	d04b      	beq.n	800efe2 <_dtoa_r+0x23a>
 800ef4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef4e:	2300      	movs	r3, #0
 800ef50:	930e      	str	r3, [sp, #56]	; 0x38
 800ef52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef54:	1b5d      	subs	r5, r3, r5
 800ef56:	1e6b      	subs	r3, r5, #1
 800ef58:	9304      	str	r3, [sp, #16]
 800ef5a:	bf43      	ittte	mi
 800ef5c:	2300      	movmi	r3, #0
 800ef5e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ef62:	9304      	strmi	r3, [sp, #16]
 800ef64:	f04f 0800 	movpl.w	r8, #0
 800ef68:	f1ba 0f00 	cmp.w	sl, #0
 800ef6c:	db3b      	blt.n	800efe6 <_dtoa_r+0x23e>
 800ef6e:	9b04      	ldr	r3, [sp, #16]
 800ef70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ef74:	4453      	add	r3, sl
 800ef76:	9304      	str	r3, [sp, #16]
 800ef78:	2300      	movs	r3, #0
 800ef7a:	9306      	str	r3, [sp, #24]
 800ef7c:	9b05      	ldr	r3, [sp, #20]
 800ef7e:	2b09      	cmp	r3, #9
 800ef80:	d869      	bhi.n	800f056 <_dtoa_r+0x2ae>
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	bfc4      	itt	gt
 800ef86:	3b04      	subgt	r3, #4
 800ef88:	9305      	strgt	r3, [sp, #20]
 800ef8a:	9b05      	ldr	r3, [sp, #20]
 800ef8c:	f1a3 0302 	sub.w	r3, r3, #2
 800ef90:	bfcc      	ite	gt
 800ef92:	2500      	movgt	r5, #0
 800ef94:	2501      	movle	r5, #1
 800ef96:	2b03      	cmp	r3, #3
 800ef98:	d869      	bhi.n	800f06e <_dtoa_r+0x2c6>
 800ef9a:	e8df f003 	tbb	[pc, r3]
 800ef9e:	4e2c      	.short	0x4e2c
 800efa0:	5a4c      	.short	0x5a4c
 800efa2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800efa6:	441d      	add	r5, r3
 800efa8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800efac:	2b20      	cmp	r3, #32
 800efae:	bfc1      	itttt	gt
 800efb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800efb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800efb8:	fa09 f303 	lslgt.w	r3, r9, r3
 800efbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800efc0:	bfda      	itte	le
 800efc2:	f1c3 0320 	rsble	r3, r3, #32
 800efc6:	fa06 f003 	lslle.w	r0, r6, r3
 800efca:	4318      	orrgt	r0, r3
 800efcc:	f7f1 faa2 	bl	8000514 <__aeabi_ui2d>
 800efd0:	2301      	movs	r3, #1
 800efd2:	4606      	mov	r6, r0
 800efd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800efd8:	3d01      	subs	r5, #1
 800efda:	9310      	str	r3, [sp, #64]	; 0x40
 800efdc:	e771      	b.n	800eec2 <_dtoa_r+0x11a>
 800efde:	2301      	movs	r3, #1
 800efe0:	e7b6      	b.n	800ef50 <_dtoa_r+0x1a8>
 800efe2:	900e      	str	r0, [sp, #56]	; 0x38
 800efe4:	e7b5      	b.n	800ef52 <_dtoa_r+0x1aa>
 800efe6:	f1ca 0300 	rsb	r3, sl, #0
 800efea:	9306      	str	r3, [sp, #24]
 800efec:	2300      	movs	r3, #0
 800efee:	eba8 080a 	sub.w	r8, r8, sl
 800eff2:	930d      	str	r3, [sp, #52]	; 0x34
 800eff4:	e7c2      	b.n	800ef7c <_dtoa_r+0x1d4>
 800eff6:	2300      	movs	r3, #0
 800eff8:	9308      	str	r3, [sp, #32]
 800effa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800effc:	2b00      	cmp	r3, #0
 800effe:	dc39      	bgt.n	800f074 <_dtoa_r+0x2cc>
 800f000:	f04f 0901 	mov.w	r9, #1
 800f004:	f8cd 9004 	str.w	r9, [sp, #4]
 800f008:	464b      	mov	r3, r9
 800f00a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f00e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f010:	2200      	movs	r2, #0
 800f012:	6042      	str	r2, [r0, #4]
 800f014:	2204      	movs	r2, #4
 800f016:	f102 0614 	add.w	r6, r2, #20
 800f01a:	429e      	cmp	r6, r3
 800f01c:	6841      	ldr	r1, [r0, #4]
 800f01e:	d92f      	bls.n	800f080 <_dtoa_r+0x2d8>
 800f020:	4620      	mov	r0, r4
 800f022:	f001 f851 	bl	80100c8 <_Balloc>
 800f026:	9000      	str	r0, [sp, #0]
 800f028:	2800      	cmp	r0, #0
 800f02a:	d14b      	bne.n	800f0c4 <_dtoa_r+0x31c>
 800f02c:	4b24      	ldr	r3, [pc, #144]	; (800f0c0 <_dtoa_r+0x318>)
 800f02e:	4602      	mov	r2, r0
 800f030:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f034:	e6d1      	b.n	800edda <_dtoa_r+0x32>
 800f036:	2301      	movs	r3, #1
 800f038:	e7de      	b.n	800eff8 <_dtoa_r+0x250>
 800f03a:	2300      	movs	r3, #0
 800f03c:	9308      	str	r3, [sp, #32]
 800f03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f040:	eb0a 0903 	add.w	r9, sl, r3
 800f044:	f109 0301 	add.w	r3, r9, #1
 800f048:	2b01      	cmp	r3, #1
 800f04a:	9301      	str	r3, [sp, #4]
 800f04c:	bfb8      	it	lt
 800f04e:	2301      	movlt	r3, #1
 800f050:	e7dd      	b.n	800f00e <_dtoa_r+0x266>
 800f052:	2301      	movs	r3, #1
 800f054:	e7f2      	b.n	800f03c <_dtoa_r+0x294>
 800f056:	2501      	movs	r5, #1
 800f058:	2300      	movs	r3, #0
 800f05a:	9305      	str	r3, [sp, #20]
 800f05c:	9508      	str	r5, [sp, #32]
 800f05e:	f04f 39ff 	mov.w	r9, #4294967295
 800f062:	2200      	movs	r2, #0
 800f064:	f8cd 9004 	str.w	r9, [sp, #4]
 800f068:	2312      	movs	r3, #18
 800f06a:	9209      	str	r2, [sp, #36]	; 0x24
 800f06c:	e7cf      	b.n	800f00e <_dtoa_r+0x266>
 800f06e:	2301      	movs	r3, #1
 800f070:	9308      	str	r3, [sp, #32]
 800f072:	e7f4      	b.n	800f05e <_dtoa_r+0x2b6>
 800f074:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f078:	f8cd 9004 	str.w	r9, [sp, #4]
 800f07c:	464b      	mov	r3, r9
 800f07e:	e7c6      	b.n	800f00e <_dtoa_r+0x266>
 800f080:	3101      	adds	r1, #1
 800f082:	6041      	str	r1, [r0, #4]
 800f084:	0052      	lsls	r2, r2, #1
 800f086:	e7c6      	b.n	800f016 <_dtoa_r+0x26e>
 800f088:	636f4361 	.word	0x636f4361
 800f08c:	3fd287a7 	.word	0x3fd287a7
 800f090:	8b60c8b3 	.word	0x8b60c8b3
 800f094:	3fc68a28 	.word	0x3fc68a28
 800f098:	509f79fb 	.word	0x509f79fb
 800f09c:	3fd34413 	.word	0x3fd34413
 800f0a0:	08013a76 	.word	0x08013a76
 800f0a4:	08013a8d 	.word	0x08013a8d
 800f0a8:	7ff00000 	.word	0x7ff00000
 800f0ac:	08013a72 	.word	0x08013a72
 800f0b0:	08013a69 	.word	0x08013a69
 800f0b4:	08013cf2 	.word	0x08013cf2
 800f0b8:	3ff80000 	.word	0x3ff80000
 800f0bc:	08013c08 	.word	0x08013c08
 800f0c0:	08013aec 	.word	0x08013aec
 800f0c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0c6:	9a00      	ldr	r2, [sp, #0]
 800f0c8:	601a      	str	r2, [r3, #0]
 800f0ca:	9b01      	ldr	r3, [sp, #4]
 800f0cc:	2b0e      	cmp	r3, #14
 800f0ce:	f200 80ad 	bhi.w	800f22c <_dtoa_r+0x484>
 800f0d2:	2d00      	cmp	r5, #0
 800f0d4:	f000 80aa 	beq.w	800f22c <_dtoa_r+0x484>
 800f0d8:	f1ba 0f00 	cmp.w	sl, #0
 800f0dc:	dd36      	ble.n	800f14c <_dtoa_r+0x3a4>
 800f0de:	4ac3      	ldr	r2, [pc, #780]	; (800f3ec <_dtoa_r+0x644>)
 800f0e0:	f00a 030f 	and.w	r3, sl, #15
 800f0e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f0e8:	ed93 7b00 	vldr	d7, [r3]
 800f0ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f0f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f0f4:	eeb0 8a47 	vmov.f32	s16, s14
 800f0f8:	eef0 8a67 	vmov.f32	s17, s15
 800f0fc:	d016      	beq.n	800f12c <_dtoa_r+0x384>
 800f0fe:	4bbc      	ldr	r3, [pc, #752]	; (800f3f0 <_dtoa_r+0x648>)
 800f100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f108:	f7f1 fba8 	bl	800085c <__aeabi_ddiv>
 800f10c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f110:	f007 070f 	and.w	r7, r7, #15
 800f114:	2503      	movs	r5, #3
 800f116:	4eb6      	ldr	r6, [pc, #728]	; (800f3f0 <_dtoa_r+0x648>)
 800f118:	b957      	cbnz	r7, 800f130 <_dtoa_r+0x388>
 800f11a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f11e:	ec53 2b18 	vmov	r2, r3, d8
 800f122:	f7f1 fb9b 	bl	800085c <__aeabi_ddiv>
 800f126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f12a:	e029      	b.n	800f180 <_dtoa_r+0x3d8>
 800f12c:	2502      	movs	r5, #2
 800f12e:	e7f2      	b.n	800f116 <_dtoa_r+0x36e>
 800f130:	07f9      	lsls	r1, r7, #31
 800f132:	d508      	bpl.n	800f146 <_dtoa_r+0x39e>
 800f134:	ec51 0b18 	vmov	r0, r1, d8
 800f138:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f13c:	f7f1 fa64 	bl	8000608 <__aeabi_dmul>
 800f140:	ec41 0b18 	vmov	d8, r0, r1
 800f144:	3501      	adds	r5, #1
 800f146:	107f      	asrs	r7, r7, #1
 800f148:	3608      	adds	r6, #8
 800f14a:	e7e5      	b.n	800f118 <_dtoa_r+0x370>
 800f14c:	f000 80a6 	beq.w	800f29c <_dtoa_r+0x4f4>
 800f150:	f1ca 0600 	rsb	r6, sl, #0
 800f154:	4ba5      	ldr	r3, [pc, #660]	; (800f3ec <_dtoa_r+0x644>)
 800f156:	4fa6      	ldr	r7, [pc, #664]	; (800f3f0 <_dtoa_r+0x648>)
 800f158:	f006 020f 	and.w	r2, r6, #15
 800f15c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f164:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f168:	f7f1 fa4e 	bl	8000608 <__aeabi_dmul>
 800f16c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f170:	1136      	asrs	r6, r6, #4
 800f172:	2300      	movs	r3, #0
 800f174:	2502      	movs	r5, #2
 800f176:	2e00      	cmp	r6, #0
 800f178:	f040 8085 	bne.w	800f286 <_dtoa_r+0x4de>
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1d2      	bne.n	800f126 <_dtoa_r+0x37e>
 800f180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f182:	2b00      	cmp	r3, #0
 800f184:	f000 808c 	beq.w	800f2a0 <_dtoa_r+0x4f8>
 800f188:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f18c:	4b99      	ldr	r3, [pc, #612]	; (800f3f4 <_dtoa_r+0x64c>)
 800f18e:	2200      	movs	r2, #0
 800f190:	4630      	mov	r0, r6
 800f192:	4639      	mov	r1, r7
 800f194:	f7f1 fcaa 	bl	8000aec <__aeabi_dcmplt>
 800f198:	2800      	cmp	r0, #0
 800f19a:	f000 8081 	beq.w	800f2a0 <_dtoa_r+0x4f8>
 800f19e:	9b01      	ldr	r3, [sp, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d07d      	beq.n	800f2a0 <_dtoa_r+0x4f8>
 800f1a4:	f1b9 0f00 	cmp.w	r9, #0
 800f1a8:	dd3c      	ble.n	800f224 <_dtoa_r+0x47c>
 800f1aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f1ae:	9307      	str	r3, [sp, #28]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	4b91      	ldr	r3, [pc, #580]	; (800f3f8 <_dtoa_r+0x650>)
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	f7f1 fa26 	bl	8000608 <__aeabi_dmul>
 800f1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1c0:	3501      	adds	r5, #1
 800f1c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f1c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	f7f1 f9b2 	bl	8000534 <__aeabi_i2d>
 800f1d0:	4632      	mov	r2, r6
 800f1d2:	463b      	mov	r3, r7
 800f1d4:	f7f1 fa18 	bl	8000608 <__aeabi_dmul>
 800f1d8:	4b88      	ldr	r3, [pc, #544]	; (800f3fc <_dtoa_r+0x654>)
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f7f1 f85e 	bl	800029c <__adddf3>
 800f1e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1e8:	9303      	str	r3, [sp, #12]
 800f1ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d15c      	bne.n	800f2aa <_dtoa_r+0x502>
 800f1f0:	4b83      	ldr	r3, [pc, #524]	; (800f400 <_dtoa_r+0x658>)
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	4639      	mov	r1, r7
 800f1f8:	f7f1 f84e 	bl	8000298 <__aeabi_dsub>
 800f1fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f200:	4606      	mov	r6, r0
 800f202:	460f      	mov	r7, r1
 800f204:	f7f1 fc90 	bl	8000b28 <__aeabi_dcmpgt>
 800f208:	2800      	cmp	r0, #0
 800f20a:	f040 8296 	bne.w	800f73a <_dtoa_r+0x992>
 800f20e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f212:	4630      	mov	r0, r6
 800f214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f218:	4639      	mov	r1, r7
 800f21a:	f7f1 fc67 	bl	8000aec <__aeabi_dcmplt>
 800f21e:	2800      	cmp	r0, #0
 800f220:	f040 8288 	bne.w	800f734 <_dtoa_r+0x98c>
 800f224:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f228:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f22c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f2c0 8158 	blt.w	800f4e4 <_dtoa_r+0x73c>
 800f234:	f1ba 0f0e 	cmp.w	sl, #14
 800f238:	f300 8154 	bgt.w	800f4e4 <_dtoa_r+0x73c>
 800f23c:	4b6b      	ldr	r3, [pc, #428]	; (800f3ec <_dtoa_r+0x644>)
 800f23e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f242:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f280 80e3 	bge.w	800f414 <_dtoa_r+0x66c>
 800f24e:	9b01      	ldr	r3, [sp, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	f300 80df 	bgt.w	800f414 <_dtoa_r+0x66c>
 800f256:	f040 826d 	bne.w	800f734 <_dtoa_r+0x98c>
 800f25a:	4b69      	ldr	r3, [pc, #420]	; (800f400 <_dtoa_r+0x658>)
 800f25c:	2200      	movs	r2, #0
 800f25e:	4640      	mov	r0, r8
 800f260:	4649      	mov	r1, r9
 800f262:	f7f1 f9d1 	bl	8000608 <__aeabi_dmul>
 800f266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f26a:	f7f1 fc53 	bl	8000b14 <__aeabi_dcmpge>
 800f26e:	9e01      	ldr	r6, [sp, #4]
 800f270:	4637      	mov	r7, r6
 800f272:	2800      	cmp	r0, #0
 800f274:	f040 8243 	bne.w	800f6fe <_dtoa_r+0x956>
 800f278:	9d00      	ldr	r5, [sp, #0]
 800f27a:	2331      	movs	r3, #49	; 0x31
 800f27c:	f805 3b01 	strb.w	r3, [r5], #1
 800f280:	f10a 0a01 	add.w	sl, sl, #1
 800f284:	e23f      	b.n	800f706 <_dtoa_r+0x95e>
 800f286:	07f2      	lsls	r2, r6, #31
 800f288:	d505      	bpl.n	800f296 <_dtoa_r+0x4ee>
 800f28a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f28e:	f7f1 f9bb 	bl	8000608 <__aeabi_dmul>
 800f292:	3501      	adds	r5, #1
 800f294:	2301      	movs	r3, #1
 800f296:	1076      	asrs	r6, r6, #1
 800f298:	3708      	adds	r7, #8
 800f29a:	e76c      	b.n	800f176 <_dtoa_r+0x3ce>
 800f29c:	2502      	movs	r5, #2
 800f29e:	e76f      	b.n	800f180 <_dtoa_r+0x3d8>
 800f2a0:	9b01      	ldr	r3, [sp, #4]
 800f2a2:	f8cd a01c 	str.w	sl, [sp, #28]
 800f2a6:	930c      	str	r3, [sp, #48]	; 0x30
 800f2a8:	e78d      	b.n	800f1c6 <_dtoa_r+0x41e>
 800f2aa:	9900      	ldr	r1, [sp, #0]
 800f2ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f2ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f2b0:	4b4e      	ldr	r3, [pc, #312]	; (800f3ec <_dtoa_r+0x644>)
 800f2b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2b6:	4401      	add	r1, r0
 800f2b8:	9102      	str	r1, [sp, #8]
 800f2ba:	9908      	ldr	r1, [sp, #32]
 800f2bc:	eeb0 8a47 	vmov.f32	s16, s14
 800f2c0:	eef0 8a67 	vmov.f32	s17, s15
 800f2c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f2cc:	2900      	cmp	r1, #0
 800f2ce:	d045      	beq.n	800f35c <_dtoa_r+0x5b4>
 800f2d0:	494c      	ldr	r1, [pc, #304]	; (800f404 <_dtoa_r+0x65c>)
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	f7f1 fac2 	bl	800085c <__aeabi_ddiv>
 800f2d8:	ec53 2b18 	vmov	r2, r3, d8
 800f2dc:	f7f0 ffdc 	bl	8000298 <__aeabi_dsub>
 800f2e0:	9d00      	ldr	r5, [sp, #0]
 800f2e2:	ec41 0b18 	vmov	d8, r0, r1
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	f7f1 fc3d 	bl	8000b68 <__aeabi_d2iz>
 800f2ee:	900c      	str	r0, [sp, #48]	; 0x30
 800f2f0:	f7f1 f920 	bl	8000534 <__aeabi_i2d>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	f7f0 ffcc 	bl	8000298 <__aeabi_dsub>
 800f300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f302:	3330      	adds	r3, #48	; 0x30
 800f304:	f805 3b01 	strb.w	r3, [r5], #1
 800f308:	ec53 2b18 	vmov	r2, r3, d8
 800f30c:	4606      	mov	r6, r0
 800f30e:	460f      	mov	r7, r1
 800f310:	f7f1 fbec 	bl	8000aec <__aeabi_dcmplt>
 800f314:	2800      	cmp	r0, #0
 800f316:	d165      	bne.n	800f3e4 <_dtoa_r+0x63c>
 800f318:	4632      	mov	r2, r6
 800f31a:	463b      	mov	r3, r7
 800f31c:	4935      	ldr	r1, [pc, #212]	; (800f3f4 <_dtoa_r+0x64c>)
 800f31e:	2000      	movs	r0, #0
 800f320:	f7f0 ffba 	bl	8000298 <__aeabi_dsub>
 800f324:	ec53 2b18 	vmov	r2, r3, d8
 800f328:	f7f1 fbe0 	bl	8000aec <__aeabi_dcmplt>
 800f32c:	2800      	cmp	r0, #0
 800f32e:	f040 80b9 	bne.w	800f4a4 <_dtoa_r+0x6fc>
 800f332:	9b02      	ldr	r3, [sp, #8]
 800f334:	429d      	cmp	r5, r3
 800f336:	f43f af75 	beq.w	800f224 <_dtoa_r+0x47c>
 800f33a:	4b2f      	ldr	r3, [pc, #188]	; (800f3f8 <_dtoa_r+0x650>)
 800f33c:	ec51 0b18 	vmov	r0, r1, d8
 800f340:	2200      	movs	r2, #0
 800f342:	f7f1 f961 	bl	8000608 <__aeabi_dmul>
 800f346:	4b2c      	ldr	r3, [pc, #176]	; (800f3f8 <_dtoa_r+0x650>)
 800f348:	ec41 0b18 	vmov	d8, r0, r1
 800f34c:	2200      	movs	r2, #0
 800f34e:	4630      	mov	r0, r6
 800f350:	4639      	mov	r1, r7
 800f352:	f7f1 f959 	bl	8000608 <__aeabi_dmul>
 800f356:	4606      	mov	r6, r0
 800f358:	460f      	mov	r7, r1
 800f35a:	e7c4      	b.n	800f2e6 <_dtoa_r+0x53e>
 800f35c:	ec51 0b17 	vmov	r0, r1, d7
 800f360:	f7f1 f952 	bl	8000608 <__aeabi_dmul>
 800f364:	9b02      	ldr	r3, [sp, #8]
 800f366:	9d00      	ldr	r5, [sp, #0]
 800f368:	930c      	str	r3, [sp, #48]	; 0x30
 800f36a:	ec41 0b18 	vmov	d8, r0, r1
 800f36e:	4639      	mov	r1, r7
 800f370:	4630      	mov	r0, r6
 800f372:	f7f1 fbf9 	bl	8000b68 <__aeabi_d2iz>
 800f376:	9011      	str	r0, [sp, #68]	; 0x44
 800f378:	f7f1 f8dc 	bl	8000534 <__aeabi_i2d>
 800f37c:	4602      	mov	r2, r0
 800f37e:	460b      	mov	r3, r1
 800f380:	4630      	mov	r0, r6
 800f382:	4639      	mov	r1, r7
 800f384:	f7f0 ff88 	bl	8000298 <__aeabi_dsub>
 800f388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f38a:	3330      	adds	r3, #48	; 0x30
 800f38c:	f805 3b01 	strb.w	r3, [r5], #1
 800f390:	9b02      	ldr	r3, [sp, #8]
 800f392:	429d      	cmp	r5, r3
 800f394:	4606      	mov	r6, r0
 800f396:	460f      	mov	r7, r1
 800f398:	f04f 0200 	mov.w	r2, #0
 800f39c:	d134      	bne.n	800f408 <_dtoa_r+0x660>
 800f39e:	4b19      	ldr	r3, [pc, #100]	; (800f404 <_dtoa_r+0x65c>)
 800f3a0:	ec51 0b18 	vmov	r0, r1, d8
 800f3a4:	f7f0 ff7a 	bl	800029c <__adddf3>
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	4639      	mov	r1, r7
 800f3b0:	f7f1 fbba 	bl	8000b28 <__aeabi_dcmpgt>
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	d175      	bne.n	800f4a4 <_dtoa_r+0x6fc>
 800f3b8:	ec53 2b18 	vmov	r2, r3, d8
 800f3bc:	4911      	ldr	r1, [pc, #68]	; (800f404 <_dtoa_r+0x65c>)
 800f3be:	2000      	movs	r0, #0
 800f3c0:	f7f0 ff6a 	bl	8000298 <__aeabi_dsub>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	4639      	mov	r1, r7
 800f3cc:	f7f1 fb8e 	bl	8000aec <__aeabi_dcmplt>
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	f43f af27 	beq.w	800f224 <_dtoa_r+0x47c>
 800f3d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f3d8:	1e6b      	subs	r3, r5, #1
 800f3da:	930c      	str	r3, [sp, #48]	; 0x30
 800f3dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f3e0:	2b30      	cmp	r3, #48	; 0x30
 800f3e2:	d0f8      	beq.n	800f3d6 <_dtoa_r+0x62e>
 800f3e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f3e8:	e04a      	b.n	800f480 <_dtoa_r+0x6d8>
 800f3ea:	bf00      	nop
 800f3ec:	08013c08 	.word	0x08013c08
 800f3f0:	08013be0 	.word	0x08013be0
 800f3f4:	3ff00000 	.word	0x3ff00000
 800f3f8:	40240000 	.word	0x40240000
 800f3fc:	401c0000 	.word	0x401c0000
 800f400:	40140000 	.word	0x40140000
 800f404:	3fe00000 	.word	0x3fe00000
 800f408:	4baf      	ldr	r3, [pc, #700]	; (800f6c8 <_dtoa_r+0x920>)
 800f40a:	f7f1 f8fd 	bl	8000608 <__aeabi_dmul>
 800f40e:	4606      	mov	r6, r0
 800f410:	460f      	mov	r7, r1
 800f412:	e7ac      	b.n	800f36e <_dtoa_r+0x5c6>
 800f414:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f418:	9d00      	ldr	r5, [sp, #0]
 800f41a:	4642      	mov	r2, r8
 800f41c:	464b      	mov	r3, r9
 800f41e:	4630      	mov	r0, r6
 800f420:	4639      	mov	r1, r7
 800f422:	f7f1 fa1b 	bl	800085c <__aeabi_ddiv>
 800f426:	f7f1 fb9f 	bl	8000b68 <__aeabi_d2iz>
 800f42a:	9002      	str	r0, [sp, #8]
 800f42c:	f7f1 f882 	bl	8000534 <__aeabi_i2d>
 800f430:	4642      	mov	r2, r8
 800f432:	464b      	mov	r3, r9
 800f434:	f7f1 f8e8 	bl	8000608 <__aeabi_dmul>
 800f438:	4602      	mov	r2, r0
 800f43a:	460b      	mov	r3, r1
 800f43c:	4630      	mov	r0, r6
 800f43e:	4639      	mov	r1, r7
 800f440:	f7f0 ff2a 	bl	8000298 <__aeabi_dsub>
 800f444:	9e02      	ldr	r6, [sp, #8]
 800f446:	9f01      	ldr	r7, [sp, #4]
 800f448:	3630      	adds	r6, #48	; 0x30
 800f44a:	f805 6b01 	strb.w	r6, [r5], #1
 800f44e:	9e00      	ldr	r6, [sp, #0]
 800f450:	1bae      	subs	r6, r5, r6
 800f452:	42b7      	cmp	r7, r6
 800f454:	4602      	mov	r2, r0
 800f456:	460b      	mov	r3, r1
 800f458:	d137      	bne.n	800f4ca <_dtoa_r+0x722>
 800f45a:	f7f0 ff1f 	bl	800029c <__adddf3>
 800f45e:	4642      	mov	r2, r8
 800f460:	464b      	mov	r3, r9
 800f462:	4606      	mov	r6, r0
 800f464:	460f      	mov	r7, r1
 800f466:	f7f1 fb5f 	bl	8000b28 <__aeabi_dcmpgt>
 800f46a:	b9c8      	cbnz	r0, 800f4a0 <_dtoa_r+0x6f8>
 800f46c:	4642      	mov	r2, r8
 800f46e:	464b      	mov	r3, r9
 800f470:	4630      	mov	r0, r6
 800f472:	4639      	mov	r1, r7
 800f474:	f7f1 fb30 	bl	8000ad8 <__aeabi_dcmpeq>
 800f478:	b110      	cbz	r0, 800f480 <_dtoa_r+0x6d8>
 800f47a:	9b02      	ldr	r3, [sp, #8]
 800f47c:	07d9      	lsls	r1, r3, #31
 800f47e:	d40f      	bmi.n	800f4a0 <_dtoa_r+0x6f8>
 800f480:	4620      	mov	r0, r4
 800f482:	4659      	mov	r1, fp
 800f484:	f000 fe60 	bl	8010148 <_Bfree>
 800f488:	2300      	movs	r3, #0
 800f48a:	702b      	strb	r3, [r5, #0]
 800f48c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f48e:	f10a 0001 	add.w	r0, sl, #1
 800f492:	6018      	str	r0, [r3, #0]
 800f494:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f496:	2b00      	cmp	r3, #0
 800f498:	f43f acd8 	beq.w	800ee4c <_dtoa_r+0xa4>
 800f49c:	601d      	str	r5, [r3, #0]
 800f49e:	e4d5      	b.n	800ee4c <_dtoa_r+0xa4>
 800f4a0:	f8cd a01c 	str.w	sl, [sp, #28]
 800f4a4:	462b      	mov	r3, r5
 800f4a6:	461d      	mov	r5, r3
 800f4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4ac:	2a39      	cmp	r2, #57	; 0x39
 800f4ae:	d108      	bne.n	800f4c2 <_dtoa_r+0x71a>
 800f4b0:	9a00      	ldr	r2, [sp, #0]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d1f7      	bne.n	800f4a6 <_dtoa_r+0x6fe>
 800f4b6:	9a07      	ldr	r2, [sp, #28]
 800f4b8:	9900      	ldr	r1, [sp, #0]
 800f4ba:	3201      	adds	r2, #1
 800f4bc:	9207      	str	r2, [sp, #28]
 800f4be:	2230      	movs	r2, #48	; 0x30
 800f4c0:	700a      	strb	r2, [r1, #0]
 800f4c2:	781a      	ldrb	r2, [r3, #0]
 800f4c4:	3201      	adds	r2, #1
 800f4c6:	701a      	strb	r2, [r3, #0]
 800f4c8:	e78c      	b.n	800f3e4 <_dtoa_r+0x63c>
 800f4ca:	4b7f      	ldr	r3, [pc, #508]	; (800f6c8 <_dtoa_r+0x920>)
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	f7f1 f89b 	bl	8000608 <__aeabi_dmul>
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	4606      	mov	r6, r0
 800f4d8:	460f      	mov	r7, r1
 800f4da:	f7f1 fafd 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d09b      	beq.n	800f41a <_dtoa_r+0x672>
 800f4e2:	e7cd      	b.n	800f480 <_dtoa_r+0x6d8>
 800f4e4:	9a08      	ldr	r2, [sp, #32]
 800f4e6:	2a00      	cmp	r2, #0
 800f4e8:	f000 80c4 	beq.w	800f674 <_dtoa_r+0x8cc>
 800f4ec:	9a05      	ldr	r2, [sp, #20]
 800f4ee:	2a01      	cmp	r2, #1
 800f4f0:	f300 80a8 	bgt.w	800f644 <_dtoa_r+0x89c>
 800f4f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f4f6:	2a00      	cmp	r2, #0
 800f4f8:	f000 80a0 	beq.w	800f63c <_dtoa_r+0x894>
 800f4fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f500:	9e06      	ldr	r6, [sp, #24]
 800f502:	4645      	mov	r5, r8
 800f504:	9a04      	ldr	r2, [sp, #16]
 800f506:	2101      	movs	r1, #1
 800f508:	441a      	add	r2, r3
 800f50a:	4620      	mov	r0, r4
 800f50c:	4498      	add	r8, r3
 800f50e:	9204      	str	r2, [sp, #16]
 800f510:	f000 ff20 	bl	8010354 <__i2b>
 800f514:	4607      	mov	r7, r0
 800f516:	2d00      	cmp	r5, #0
 800f518:	dd0b      	ble.n	800f532 <_dtoa_r+0x78a>
 800f51a:	9b04      	ldr	r3, [sp, #16]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	dd08      	ble.n	800f532 <_dtoa_r+0x78a>
 800f520:	42ab      	cmp	r3, r5
 800f522:	9a04      	ldr	r2, [sp, #16]
 800f524:	bfa8      	it	ge
 800f526:	462b      	movge	r3, r5
 800f528:	eba8 0803 	sub.w	r8, r8, r3
 800f52c:	1aed      	subs	r5, r5, r3
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	9304      	str	r3, [sp, #16]
 800f532:	9b06      	ldr	r3, [sp, #24]
 800f534:	b1fb      	cbz	r3, 800f576 <_dtoa_r+0x7ce>
 800f536:	9b08      	ldr	r3, [sp, #32]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f000 809f 	beq.w	800f67c <_dtoa_r+0x8d4>
 800f53e:	2e00      	cmp	r6, #0
 800f540:	dd11      	ble.n	800f566 <_dtoa_r+0x7be>
 800f542:	4639      	mov	r1, r7
 800f544:	4632      	mov	r2, r6
 800f546:	4620      	mov	r0, r4
 800f548:	f000 ffc0 	bl	80104cc <__pow5mult>
 800f54c:	465a      	mov	r2, fp
 800f54e:	4601      	mov	r1, r0
 800f550:	4607      	mov	r7, r0
 800f552:	4620      	mov	r0, r4
 800f554:	f000 ff14 	bl	8010380 <__multiply>
 800f558:	4659      	mov	r1, fp
 800f55a:	9007      	str	r0, [sp, #28]
 800f55c:	4620      	mov	r0, r4
 800f55e:	f000 fdf3 	bl	8010148 <_Bfree>
 800f562:	9b07      	ldr	r3, [sp, #28]
 800f564:	469b      	mov	fp, r3
 800f566:	9b06      	ldr	r3, [sp, #24]
 800f568:	1b9a      	subs	r2, r3, r6
 800f56a:	d004      	beq.n	800f576 <_dtoa_r+0x7ce>
 800f56c:	4659      	mov	r1, fp
 800f56e:	4620      	mov	r0, r4
 800f570:	f000 ffac 	bl	80104cc <__pow5mult>
 800f574:	4683      	mov	fp, r0
 800f576:	2101      	movs	r1, #1
 800f578:	4620      	mov	r0, r4
 800f57a:	f000 feeb 	bl	8010354 <__i2b>
 800f57e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f580:	2b00      	cmp	r3, #0
 800f582:	4606      	mov	r6, r0
 800f584:	dd7c      	ble.n	800f680 <_dtoa_r+0x8d8>
 800f586:	461a      	mov	r2, r3
 800f588:	4601      	mov	r1, r0
 800f58a:	4620      	mov	r0, r4
 800f58c:	f000 ff9e 	bl	80104cc <__pow5mult>
 800f590:	9b05      	ldr	r3, [sp, #20]
 800f592:	2b01      	cmp	r3, #1
 800f594:	4606      	mov	r6, r0
 800f596:	dd76      	ble.n	800f686 <_dtoa_r+0x8de>
 800f598:	2300      	movs	r3, #0
 800f59a:	9306      	str	r3, [sp, #24]
 800f59c:	6933      	ldr	r3, [r6, #16]
 800f59e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f5a2:	6918      	ldr	r0, [r3, #16]
 800f5a4:	f000 fe86 	bl	80102b4 <__hi0bits>
 800f5a8:	f1c0 0020 	rsb	r0, r0, #32
 800f5ac:	9b04      	ldr	r3, [sp, #16]
 800f5ae:	4418      	add	r0, r3
 800f5b0:	f010 001f 	ands.w	r0, r0, #31
 800f5b4:	f000 8086 	beq.w	800f6c4 <_dtoa_r+0x91c>
 800f5b8:	f1c0 0320 	rsb	r3, r0, #32
 800f5bc:	2b04      	cmp	r3, #4
 800f5be:	dd7f      	ble.n	800f6c0 <_dtoa_r+0x918>
 800f5c0:	f1c0 001c 	rsb	r0, r0, #28
 800f5c4:	9b04      	ldr	r3, [sp, #16]
 800f5c6:	4403      	add	r3, r0
 800f5c8:	4480      	add	r8, r0
 800f5ca:	4405      	add	r5, r0
 800f5cc:	9304      	str	r3, [sp, #16]
 800f5ce:	f1b8 0f00 	cmp.w	r8, #0
 800f5d2:	dd05      	ble.n	800f5e0 <_dtoa_r+0x838>
 800f5d4:	4659      	mov	r1, fp
 800f5d6:	4642      	mov	r2, r8
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f000 ffd1 	bl	8010580 <__lshift>
 800f5de:	4683      	mov	fp, r0
 800f5e0:	9b04      	ldr	r3, [sp, #16]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	dd05      	ble.n	800f5f2 <_dtoa_r+0x84a>
 800f5e6:	4631      	mov	r1, r6
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	f000 ffc8 	bl	8010580 <__lshift>
 800f5f0:	4606      	mov	r6, r0
 800f5f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d069      	beq.n	800f6cc <_dtoa_r+0x924>
 800f5f8:	4631      	mov	r1, r6
 800f5fa:	4658      	mov	r0, fp
 800f5fc:	f001 f82c 	bl	8010658 <__mcmp>
 800f600:	2800      	cmp	r0, #0
 800f602:	da63      	bge.n	800f6cc <_dtoa_r+0x924>
 800f604:	2300      	movs	r3, #0
 800f606:	4659      	mov	r1, fp
 800f608:	220a      	movs	r2, #10
 800f60a:	4620      	mov	r0, r4
 800f60c:	f000 fdbe 	bl	801018c <__multadd>
 800f610:	9b08      	ldr	r3, [sp, #32]
 800f612:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f616:	4683      	mov	fp, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f000 818f 	beq.w	800f93c <_dtoa_r+0xb94>
 800f61e:	4639      	mov	r1, r7
 800f620:	2300      	movs	r3, #0
 800f622:	220a      	movs	r2, #10
 800f624:	4620      	mov	r0, r4
 800f626:	f000 fdb1 	bl	801018c <__multadd>
 800f62a:	f1b9 0f00 	cmp.w	r9, #0
 800f62e:	4607      	mov	r7, r0
 800f630:	f300 808e 	bgt.w	800f750 <_dtoa_r+0x9a8>
 800f634:	9b05      	ldr	r3, [sp, #20]
 800f636:	2b02      	cmp	r3, #2
 800f638:	dc50      	bgt.n	800f6dc <_dtoa_r+0x934>
 800f63a:	e089      	b.n	800f750 <_dtoa_r+0x9a8>
 800f63c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f63e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f642:	e75d      	b.n	800f500 <_dtoa_r+0x758>
 800f644:	9b01      	ldr	r3, [sp, #4]
 800f646:	1e5e      	subs	r6, r3, #1
 800f648:	9b06      	ldr	r3, [sp, #24]
 800f64a:	42b3      	cmp	r3, r6
 800f64c:	bfbf      	itttt	lt
 800f64e:	9b06      	ldrlt	r3, [sp, #24]
 800f650:	9606      	strlt	r6, [sp, #24]
 800f652:	1af2      	sublt	r2, r6, r3
 800f654:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f656:	bfb6      	itet	lt
 800f658:	189b      	addlt	r3, r3, r2
 800f65a:	1b9e      	subge	r6, r3, r6
 800f65c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f65e:	9b01      	ldr	r3, [sp, #4]
 800f660:	bfb8      	it	lt
 800f662:	2600      	movlt	r6, #0
 800f664:	2b00      	cmp	r3, #0
 800f666:	bfb5      	itete	lt
 800f668:	eba8 0503 	sublt.w	r5, r8, r3
 800f66c:	9b01      	ldrge	r3, [sp, #4]
 800f66e:	2300      	movlt	r3, #0
 800f670:	4645      	movge	r5, r8
 800f672:	e747      	b.n	800f504 <_dtoa_r+0x75c>
 800f674:	9e06      	ldr	r6, [sp, #24]
 800f676:	9f08      	ldr	r7, [sp, #32]
 800f678:	4645      	mov	r5, r8
 800f67a:	e74c      	b.n	800f516 <_dtoa_r+0x76e>
 800f67c:	9a06      	ldr	r2, [sp, #24]
 800f67e:	e775      	b.n	800f56c <_dtoa_r+0x7c4>
 800f680:	9b05      	ldr	r3, [sp, #20]
 800f682:	2b01      	cmp	r3, #1
 800f684:	dc18      	bgt.n	800f6b8 <_dtoa_r+0x910>
 800f686:	9b02      	ldr	r3, [sp, #8]
 800f688:	b9b3      	cbnz	r3, 800f6b8 <_dtoa_r+0x910>
 800f68a:	9b03      	ldr	r3, [sp, #12]
 800f68c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f690:	b9a3      	cbnz	r3, 800f6bc <_dtoa_r+0x914>
 800f692:	9b03      	ldr	r3, [sp, #12]
 800f694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f698:	0d1b      	lsrs	r3, r3, #20
 800f69a:	051b      	lsls	r3, r3, #20
 800f69c:	b12b      	cbz	r3, 800f6aa <_dtoa_r+0x902>
 800f69e:	9b04      	ldr	r3, [sp, #16]
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	9304      	str	r3, [sp, #16]
 800f6a4:	f108 0801 	add.w	r8, r8, #1
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	9306      	str	r3, [sp, #24]
 800f6ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f47f af74 	bne.w	800f59c <_dtoa_r+0x7f4>
 800f6b4:	2001      	movs	r0, #1
 800f6b6:	e779      	b.n	800f5ac <_dtoa_r+0x804>
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	e7f6      	b.n	800f6aa <_dtoa_r+0x902>
 800f6bc:	9b02      	ldr	r3, [sp, #8]
 800f6be:	e7f4      	b.n	800f6aa <_dtoa_r+0x902>
 800f6c0:	d085      	beq.n	800f5ce <_dtoa_r+0x826>
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	301c      	adds	r0, #28
 800f6c6:	e77d      	b.n	800f5c4 <_dtoa_r+0x81c>
 800f6c8:	40240000 	.word	0x40240000
 800f6cc:	9b01      	ldr	r3, [sp, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	dc38      	bgt.n	800f744 <_dtoa_r+0x99c>
 800f6d2:	9b05      	ldr	r3, [sp, #20]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	dd35      	ble.n	800f744 <_dtoa_r+0x99c>
 800f6d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f6dc:	f1b9 0f00 	cmp.w	r9, #0
 800f6e0:	d10d      	bne.n	800f6fe <_dtoa_r+0x956>
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	464b      	mov	r3, r9
 800f6e6:	2205      	movs	r2, #5
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f000 fd4f 	bl	801018c <__multadd>
 800f6ee:	4601      	mov	r1, r0
 800f6f0:	4606      	mov	r6, r0
 800f6f2:	4658      	mov	r0, fp
 800f6f4:	f000 ffb0 	bl	8010658 <__mcmp>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	f73f adbd 	bgt.w	800f278 <_dtoa_r+0x4d0>
 800f6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f700:	9d00      	ldr	r5, [sp, #0]
 800f702:	ea6f 0a03 	mvn.w	sl, r3
 800f706:	f04f 0800 	mov.w	r8, #0
 800f70a:	4631      	mov	r1, r6
 800f70c:	4620      	mov	r0, r4
 800f70e:	f000 fd1b 	bl	8010148 <_Bfree>
 800f712:	2f00      	cmp	r7, #0
 800f714:	f43f aeb4 	beq.w	800f480 <_dtoa_r+0x6d8>
 800f718:	f1b8 0f00 	cmp.w	r8, #0
 800f71c:	d005      	beq.n	800f72a <_dtoa_r+0x982>
 800f71e:	45b8      	cmp	r8, r7
 800f720:	d003      	beq.n	800f72a <_dtoa_r+0x982>
 800f722:	4641      	mov	r1, r8
 800f724:	4620      	mov	r0, r4
 800f726:	f000 fd0f 	bl	8010148 <_Bfree>
 800f72a:	4639      	mov	r1, r7
 800f72c:	4620      	mov	r0, r4
 800f72e:	f000 fd0b 	bl	8010148 <_Bfree>
 800f732:	e6a5      	b.n	800f480 <_dtoa_r+0x6d8>
 800f734:	2600      	movs	r6, #0
 800f736:	4637      	mov	r7, r6
 800f738:	e7e1      	b.n	800f6fe <_dtoa_r+0x956>
 800f73a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f73c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f740:	4637      	mov	r7, r6
 800f742:	e599      	b.n	800f278 <_dtoa_r+0x4d0>
 800f744:	9b08      	ldr	r3, [sp, #32]
 800f746:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	f000 80fd 	beq.w	800f94a <_dtoa_r+0xba2>
 800f750:	2d00      	cmp	r5, #0
 800f752:	dd05      	ble.n	800f760 <_dtoa_r+0x9b8>
 800f754:	4639      	mov	r1, r7
 800f756:	462a      	mov	r2, r5
 800f758:	4620      	mov	r0, r4
 800f75a:	f000 ff11 	bl	8010580 <__lshift>
 800f75e:	4607      	mov	r7, r0
 800f760:	9b06      	ldr	r3, [sp, #24]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d05c      	beq.n	800f820 <_dtoa_r+0xa78>
 800f766:	6879      	ldr	r1, [r7, #4]
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 fcad 	bl	80100c8 <_Balloc>
 800f76e:	4605      	mov	r5, r0
 800f770:	b928      	cbnz	r0, 800f77e <_dtoa_r+0x9d6>
 800f772:	4b80      	ldr	r3, [pc, #512]	; (800f974 <_dtoa_r+0xbcc>)
 800f774:	4602      	mov	r2, r0
 800f776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f77a:	f7ff bb2e 	b.w	800edda <_dtoa_r+0x32>
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	3202      	adds	r2, #2
 800f782:	0092      	lsls	r2, r2, #2
 800f784:	f107 010c 	add.w	r1, r7, #12
 800f788:	300c      	adds	r0, #12
 800f78a:	f7fd fbb9 	bl	800cf00 <memcpy>
 800f78e:	2201      	movs	r2, #1
 800f790:	4629      	mov	r1, r5
 800f792:	4620      	mov	r0, r4
 800f794:	f000 fef4 	bl	8010580 <__lshift>
 800f798:	9b00      	ldr	r3, [sp, #0]
 800f79a:	3301      	adds	r3, #1
 800f79c:	9301      	str	r3, [sp, #4]
 800f79e:	9b00      	ldr	r3, [sp, #0]
 800f7a0:	444b      	add	r3, r9
 800f7a2:	9307      	str	r3, [sp, #28]
 800f7a4:	9b02      	ldr	r3, [sp, #8]
 800f7a6:	f003 0301 	and.w	r3, r3, #1
 800f7aa:	46b8      	mov	r8, r7
 800f7ac:	9306      	str	r3, [sp, #24]
 800f7ae:	4607      	mov	r7, r0
 800f7b0:	9b01      	ldr	r3, [sp, #4]
 800f7b2:	4631      	mov	r1, r6
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	4658      	mov	r0, fp
 800f7b8:	9302      	str	r3, [sp, #8]
 800f7ba:	f7ff fa69 	bl	800ec90 <quorem>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	3330      	adds	r3, #48	; 0x30
 800f7c2:	9004      	str	r0, [sp, #16]
 800f7c4:	4641      	mov	r1, r8
 800f7c6:	4658      	mov	r0, fp
 800f7c8:	9308      	str	r3, [sp, #32]
 800f7ca:	f000 ff45 	bl	8010658 <__mcmp>
 800f7ce:	463a      	mov	r2, r7
 800f7d0:	4681      	mov	r9, r0
 800f7d2:	4631      	mov	r1, r6
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	f000 ff5b 	bl	8010690 <__mdiff>
 800f7da:	68c2      	ldr	r2, [r0, #12]
 800f7dc:	9b08      	ldr	r3, [sp, #32]
 800f7de:	4605      	mov	r5, r0
 800f7e0:	bb02      	cbnz	r2, 800f824 <_dtoa_r+0xa7c>
 800f7e2:	4601      	mov	r1, r0
 800f7e4:	4658      	mov	r0, fp
 800f7e6:	f000 ff37 	bl	8010658 <__mcmp>
 800f7ea:	9b08      	ldr	r3, [sp, #32]
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	4629      	mov	r1, r5
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f7f6:	f000 fca7 	bl	8010148 <_Bfree>
 800f7fa:	9b05      	ldr	r3, [sp, #20]
 800f7fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7fe:	9d01      	ldr	r5, [sp, #4]
 800f800:	ea43 0102 	orr.w	r1, r3, r2
 800f804:	9b06      	ldr	r3, [sp, #24]
 800f806:	430b      	orrs	r3, r1
 800f808:	9b08      	ldr	r3, [sp, #32]
 800f80a:	d10d      	bne.n	800f828 <_dtoa_r+0xa80>
 800f80c:	2b39      	cmp	r3, #57	; 0x39
 800f80e:	d029      	beq.n	800f864 <_dtoa_r+0xabc>
 800f810:	f1b9 0f00 	cmp.w	r9, #0
 800f814:	dd01      	ble.n	800f81a <_dtoa_r+0xa72>
 800f816:	9b04      	ldr	r3, [sp, #16]
 800f818:	3331      	adds	r3, #49	; 0x31
 800f81a:	9a02      	ldr	r2, [sp, #8]
 800f81c:	7013      	strb	r3, [r2, #0]
 800f81e:	e774      	b.n	800f70a <_dtoa_r+0x962>
 800f820:	4638      	mov	r0, r7
 800f822:	e7b9      	b.n	800f798 <_dtoa_r+0x9f0>
 800f824:	2201      	movs	r2, #1
 800f826:	e7e2      	b.n	800f7ee <_dtoa_r+0xa46>
 800f828:	f1b9 0f00 	cmp.w	r9, #0
 800f82c:	db06      	blt.n	800f83c <_dtoa_r+0xa94>
 800f82e:	9905      	ldr	r1, [sp, #20]
 800f830:	ea41 0909 	orr.w	r9, r1, r9
 800f834:	9906      	ldr	r1, [sp, #24]
 800f836:	ea59 0101 	orrs.w	r1, r9, r1
 800f83a:	d120      	bne.n	800f87e <_dtoa_r+0xad6>
 800f83c:	2a00      	cmp	r2, #0
 800f83e:	ddec      	ble.n	800f81a <_dtoa_r+0xa72>
 800f840:	4659      	mov	r1, fp
 800f842:	2201      	movs	r2, #1
 800f844:	4620      	mov	r0, r4
 800f846:	9301      	str	r3, [sp, #4]
 800f848:	f000 fe9a 	bl	8010580 <__lshift>
 800f84c:	4631      	mov	r1, r6
 800f84e:	4683      	mov	fp, r0
 800f850:	f000 ff02 	bl	8010658 <__mcmp>
 800f854:	2800      	cmp	r0, #0
 800f856:	9b01      	ldr	r3, [sp, #4]
 800f858:	dc02      	bgt.n	800f860 <_dtoa_r+0xab8>
 800f85a:	d1de      	bne.n	800f81a <_dtoa_r+0xa72>
 800f85c:	07da      	lsls	r2, r3, #31
 800f85e:	d5dc      	bpl.n	800f81a <_dtoa_r+0xa72>
 800f860:	2b39      	cmp	r3, #57	; 0x39
 800f862:	d1d8      	bne.n	800f816 <_dtoa_r+0xa6e>
 800f864:	9a02      	ldr	r2, [sp, #8]
 800f866:	2339      	movs	r3, #57	; 0x39
 800f868:	7013      	strb	r3, [r2, #0]
 800f86a:	462b      	mov	r3, r5
 800f86c:	461d      	mov	r5, r3
 800f86e:	3b01      	subs	r3, #1
 800f870:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f874:	2a39      	cmp	r2, #57	; 0x39
 800f876:	d050      	beq.n	800f91a <_dtoa_r+0xb72>
 800f878:	3201      	adds	r2, #1
 800f87a:	701a      	strb	r2, [r3, #0]
 800f87c:	e745      	b.n	800f70a <_dtoa_r+0x962>
 800f87e:	2a00      	cmp	r2, #0
 800f880:	dd03      	ble.n	800f88a <_dtoa_r+0xae2>
 800f882:	2b39      	cmp	r3, #57	; 0x39
 800f884:	d0ee      	beq.n	800f864 <_dtoa_r+0xabc>
 800f886:	3301      	adds	r3, #1
 800f888:	e7c7      	b.n	800f81a <_dtoa_r+0xa72>
 800f88a:	9a01      	ldr	r2, [sp, #4]
 800f88c:	9907      	ldr	r1, [sp, #28]
 800f88e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f892:	428a      	cmp	r2, r1
 800f894:	d02a      	beq.n	800f8ec <_dtoa_r+0xb44>
 800f896:	4659      	mov	r1, fp
 800f898:	2300      	movs	r3, #0
 800f89a:	220a      	movs	r2, #10
 800f89c:	4620      	mov	r0, r4
 800f89e:	f000 fc75 	bl	801018c <__multadd>
 800f8a2:	45b8      	cmp	r8, r7
 800f8a4:	4683      	mov	fp, r0
 800f8a6:	f04f 0300 	mov.w	r3, #0
 800f8aa:	f04f 020a 	mov.w	r2, #10
 800f8ae:	4641      	mov	r1, r8
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	d107      	bne.n	800f8c4 <_dtoa_r+0xb1c>
 800f8b4:	f000 fc6a 	bl	801018c <__multadd>
 800f8b8:	4680      	mov	r8, r0
 800f8ba:	4607      	mov	r7, r0
 800f8bc:	9b01      	ldr	r3, [sp, #4]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	9301      	str	r3, [sp, #4]
 800f8c2:	e775      	b.n	800f7b0 <_dtoa_r+0xa08>
 800f8c4:	f000 fc62 	bl	801018c <__multadd>
 800f8c8:	4639      	mov	r1, r7
 800f8ca:	4680      	mov	r8, r0
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	220a      	movs	r2, #10
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f000 fc5b 	bl	801018c <__multadd>
 800f8d6:	4607      	mov	r7, r0
 800f8d8:	e7f0      	b.n	800f8bc <_dtoa_r+0xb14>
 800f8da:	f1b9 0f00 	cmp.w	r9, #0
 800f8de:	9a00      	ldr	r2, [sp, #0]
 800f8e0:	bfcc      	ite	gt
 800f8e2:	464d      	movgt	r5, r9
 800f8e4:	2501      	movle	r5, #1
 800f8e6:	4415      	add	r5, r2
 800f8e8:	f04f 0800 	mov.w	r8, #0
 800f8ec:	4659      	mov	r1, fp
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	9301      	str	r3, [sp, #4]
 800f8f4:	f000 fe44 	bl	8010580 <__lshift>
 800f8f8:	4631      	mov	r1, r6
 800f8fa:	4683      	mov	fp, r0
 800f8fc:	f000 feac 	bl	8010658 <__mcmp>
 800f900:	2800      	cmp	r0, #0
 800f902:	dcb2      	bgt.n	800f86a <_dtoa_r+0xac2>
 800f904:	d102      	bne.n	800f90c <_dtoa_r+0xb64>
 800f906:	9b01      	ldr	r3, [sp, #4]
 800f908:	07db      	lsls	r3, r3, #31
 800f90a:	d4ae      	bmi.n	800f86a <_dtoa_r+0xac2>
 800f90c:	462b      	mov	r3, r5
 800f90e:	461d      	mov	r5, r3
 800f910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f914:	2a30      	cmp	r2, #48	; 0x30
 800f916:	d0fa      	beq.n	800f90e <_dtoa_r+0xb66>
 800f918:	e6f7      	b.n	800f70a <_dtoa_r+0x962>
 800f91a:	9a00      	ldr	r2, [sp, #0]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d1a5      	bne.n	800f86c <_dtoa_r+0xac4>
 800f920:	f10a 0a01 	add.w	sl, sl, #1
 800f924:	2331      	movs	r3, #49	; 0x31
 800f926:	e779      	b.n	800f81c <_dtoa_r+0xa74>
 800f928:	4b13      	ldr	r3, [pc, #76]	; (800f978 <_dtoa_r+0xbd0>)
 800f92a:	f7ff baaf 	b.w	800ee8c <_dtoa_r+0xe4>
 800f92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f930:	2b00      	cmp	r3, #0
 800f932:	f47f aa86 	bne.w	800ee42 <_dtoa_r+0x9a>
 800f936:	4b11      	ldr	r3, [pc, #68]	; (800f97c <_dtoa_r+0xbd4>)
 800f938:	f7ff baa8 	b.w	800ee8c <_dtoa_r+0xe4>
 800f93c:	f1b9 0f00 	cmp.w	r9, #0
 800f940:	dc03      	bgt.n	800f94a <_dtoa_r+0xba2>
 800f942:	9b05      	ldr	r3, [sp, #20]
 800f944:	2b02      	cmp	r3, #2
 800f946:	f73f aec9 	bgt.w	800f6dc <_dtoa_r+0x934>
 800f94a:	9d00      	ldr	r5, [sp, #0]
 800f94c:	4631      	mov	r1, r6
 800f94e:	4658      	mov	r0, fp
 800f950:	f7ff f99e 	bl	800ec90 <quorem>
 800f954:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f958:	f805 3b01 	strb.w	r3, [r5], #1
 800f95c:	9a00      	ldr	r2, [sp, #0]
 800f95e:	1aaa      	subs	r2, r5, r2
 800f960:	4591      	cmp	r9, r2
 800f962:	ddba      	ble.n	800f8da <_dtoa_r+0xb32>
 800f964:	4659      	mov	r1, fp
 800f966:	2300      	movs	r3, #0
 800f968:	220a      	movs	r2, #10
 800f96a:	4620      	mov	r0, r4
 800f96c:	f000 fc0e 	bl	801018c <__multadd>
 800f970:	4683      	mov	fp, r0
 800f972:	e7eb      	b.n	800f94c <_dtoa_r+0xba4>
 800f974:	08013aec 	.word	0x08013aec
 800f978:	08013cf1 	.word	0x08013cf1
 800f97c:	08013a69 	.word	0x08013a69

0800f980 <rshift>:
 800f980:	6903      	ldr	r3, [r0, #16]
 800f982:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f98a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f98e:	f100 0414 	add.w	r4, r0, #20
 800f992:	dd45      	ble.n	800fa20 <rshift+0xa0>
 800f994:	f011 011f 	ands.w	r1, r1, #31
 800f998:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f99c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f9a0:	d10c      	bne.n	800f9bc <rshift+0x3c>
 800f9a2:	f100 0710 	add.w	r7, r0, #16
 800f9a6:	4629      	mov	r1, r5
 800f9a8:	42b1      	cmp	r1, r6
 800f9aa:	d334      	bcc.n	800fa16 <rshift+0x96>
 800f9ac:	1a9b      	subs	r3, r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	1eea      	subs	r2, r5, #3
 800f9b2:	4296      	cmp	r6, r2
 800f9b4:	bf38      	it	cc
 800f9b6:	2300      	movcc	r3, #0
 800f9b8:	4423      	add	r3, r4
 800f9ba:	e015      	b.n	800f9e8 <rshift+0x68>
 800f9bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f9c0:	f1c1 0820 	rsb	r8, r1, #32
 800f9c4:	40cf      	lsrs	r7, r1
 800f9c6:	f105 0e04 	add.w	lr, r5, #4
 800f9ca:	46a1      	mov	r9, r4
 800f9cc:	4576      	cmp	r6, lr
 800f9ce:	46f4      	mov	ip, lr
 800f9d0:	d815      	bhi.n	800f9fe <rshift+0x7e>
 800f9d2:	1a9b      	subs	r3, r3, r2
 800f9d4:	009a      	lsls	r2, r3, #2
 800f9d6:	3a04      	subs	r2, #4
 800f9d8:	3501      	adds	r5, #1
 800f9da:	42ae      	cmp	r6, r5
 800f9dc:	bf38      	it	cc
 800f9de:	2200      	movcc	r2, #0
 800f9e0:	18a3      	adds	r3, r4, r2
 800f9e2:	50a7      	str	r7, [r4, r2]
 800f9e4:	b107      	cbz	r7, 800f9e8 <rshift+0x68>
 800f9e6:	3304      	adds	r3, #4
 800f9e8:	1b1a      	subs	r2, r3, r4
 800f9ea:	42a3      	cmp	r3, r4
 800f9ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f9f0:	bf08      	it	eq
 800f9f2:	2300      	moveq	r3, #0
 800f9f4:	6102      	str	r2, [r0, #16]
 800f9f6:	bf08      	it	eq
 800f9f8:	6143      	streq	r3, [r0, #20]
 800f9fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9fe:	f8dc c000 	ldr.w	ip, [ip]
 800fa02:	fa0c fc08 	lsl.w	ip, ip, r8
 800fa06:	ea4c 0707 	orr.w	r7, ip, r7
 800fa0a:	f849 7b04 	str.w	r7, [r9], #4
 800fa0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa12:	40cf      	lsrs	r7, r1
 800fa14:	e7da      	b.n	800f9cc <rshift+0x4c>
 800fa16:	f851 cb04 	ldr.w	ip, [r1], #4
 800fa1a:	f847 cf04 	str.w	ip, [r7, #4]!
 800fa1e:	e7c3      	b.n	800f9a8 <rshift+0x28>
 800fa20:	4623      	mov	r3, r4
 800fa22:	e7e1      	b.n	800f9e8 <rshift+0x68>

0800fa24 <__hexdig_fun>:
 800fa24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fa28:	2b09      	cmp	r3, #9
 800fa2a:	d802      	bhi.n	800fa32 <__hexdig_fun+0xe>
 800fa2c:	3820      	subs	r0, #32
 800fa2e:	b2c0      	uxtb	r0, r0
 800fa30:	4770      	bx	lr
 800fa32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fa36:	2b05      	cmp	r3, #5
 800fa38:	d801      	bhi.n	800fa3e <__hexdig_fun+0x1a>
 800fa3a:	3847      	subs	r0, #71	; 0x47
 800fa3c:	e7f7      	b.n	800fa2e <__hexdig_fun+0xa>
 800fa3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fa42:	2b05      	cmp	r3, #5
 800fa44:	d801      	bhi.n	800fa4a <__hexdig_fun+0x26>
 800fa46:	3827      	subs	r0, #39	; 0x27
 800fa48:	e7f1      	b.n	800fa2e <__hexdig_fun+0xa>
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	4770      	bx	lr
	...

0800fa50 <__gethex>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	ed2d 8b02 	vpush	{d8}
 800fa58:	b089      	sub	sp, #36	; 0x24
 800fa5a:	ee08 0a10 	vmov	s16, r0
 800fa5e:	9304      	str	r3, [sp, #16]
 800fa60:	4bbc      	ldr	r3, [pc, #752]	; (800fd54 <__gethex+0x304>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	9301      	str	r3, [sp, #4]
 800fa66:	4618      	mov	r0, r3
 800fa68:	468b      	mov	fp, r1
 800fa6a:	4690      	mov	r8, r2
 800fa6c:	f7f0 fbb8 	bl	80001e0 <strlen>
 800fa70:	9b01      	ldr	r3, [sp, #4]
 800fa72:	f8db 2000 	ldr.w	r2, [fp]
 800fa76:	4403      	add	r3, r0
 800fa78:	4682      	mov	sl, r0
 800fa7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fa7e:	9305      	str	r3, [sp, #20]
 800fa80:	1c93      	adds	r3, r2, #2
 800fa82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fa86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fa8a:	32fe      	adds	r2, #254	; 0xfe
 800fa8c:	18d1      	adds	r1, r2, r3
 800fa8e:	461f      	mov	r7, r3
 800fa90:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa94:	9100      	str	r1, [sp, #0]
 800fa96:	2830      	cmp	r0, #48	; 0x30
 800fa98:	d0f8      	beq.n	800fa8c <__gethex+0x3c>
 800fa9a:	f7ff ffc3 	bl	800fa24 <__hexdig_fun>
 800fa9e:	4604      	mov	r4, r0
 800faa0:	2800      	cmp	r0, #0
 800faa2:	d13a      	bne.n	800fb1a <__gethex+0xca>
 800faa4:	9901      	ldr	r1, [sp, #4]
 800faa6:	4652      	mov	r2, sl
 800faa8:	4638      	mov	r0, r7
 800faaa:	f7fe fa0a 	bl	800dec2 <strncmp>
 800faae:	4605      	mov	r5, r0
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d168      	bne.n	800fb86 <__gethex+0x136>
 800fab4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fab8:	eb07 060a 	add.w	r6, r7, sl
 800fabc:	f7ff ffb2 	bl	800fa24 <__hexdig_fun>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d062      	beq.n	800fb8a <__gethex+0x13a>
 800fac4:	4633      	mov	r3, r6
 800fac6:	7818      	ldrb	r0, [r3, #0]
 800fac8:	2830      	cmp	r0, #48	; 0x30
 800faca:	461f      	mov	r7, r3
 800facc:	f103 0301 	add.w	r3, r3, #1
 800fad0:	d0f9      	beq.n	800fac6 <__gethex+0x76>
 800fad2:	f7ff ffa7 	bl	800fa24 <__hexdig_fun>
 800fad6:	2301      	movs	r3, #1
 800fad8:	fab0 f480 	clz	r4, r0
 800fadc:	0964      	lsrs	r4, r4, #5
 800fade:	4635      	mov	r5, r6
 800fae0:	9300      	str	r3, [sp, #0]
 800fae2:	463a      	mov	r2, r7
 800fae4:	4616      	mov	r6, r2
 800fae6:	3201      	adds	r2, #1
 800fae8:	7830      	ldrb	r0, [r6, #0]
 800faea:	f7ff ff9b 	bl	800fa24 <__hexdig_fun>
 800faee:	2800      	cmp	r0, #0
 800faf0:	d1f8      	bne.n	800fae4 <__gethex+0x94>
 800faf2:	9901      	ldr	r1, [sp, #4]
 800faf4:	4652      	mov	r2, sl
 800faf6:	4630      	mov	r0, r6
 800faf8:	f7fe f9e3 	bl	800dec2 <strncmp>
 800fafc:	b980      	cbnz	r0, 800fb20 <__gethex+0xd0>
 800fafe:	b94d      	cbnz	r5, 800fb14 <__gethex+0xc4>
 800fb00:	eb06 050a 	add.w	r5, r6, sl
 800fb04:	462a      	mov	r2, r5
 800fb06:	4616      	mov	r6, r2
 800fb08:	3201      	adds	r2, #1
 800fb0a:	7830      	ldrb	r0, [r6, #0]
 800fb0c:	f7ff ff8a 	bl	800fa24 <__hexdig_fun>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d1f8      	bne.n	800fb06 <__gethex+0xb6>
 800fb14:	1bad      	subs	r5, r5, r6
 800fb16:	00ad      	lsls	r5, r5, #2
 800fb18:	e004      	b.n	800fb24 <__gethex+0xd4>
 800fb1a:	2400      	movs	r4, #0
 800fb1c:	4625      	mov	r5, r4
 800fb1e:	e7e0      	b.n	800fae2 <__gethex+0x92>
 800fb20:	2d00      	cmp	r5, #0
 800fb22:	d1f7      	bne.n	800fb14 <__gethex+0xc4>
 800fb24:	7833      	ldrb	r3, [r6, #0]
 800fb26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb2a:	2b50      	cmp	r3, #80	; 0x50
 800fb2c:	d13b      	bne.n	800fba6 <__gethex+0x156>
 800fb2e:	7873      	ldrb	r3, [r6, #1]
 800fb30:	2b2b      	cmp	r3, #43	; 0x2b
 800fb32:	d02c      	beq.n	800fb8e <__gethex+0x13e>
 800fb34:	2b2d      	cmp	r3, #45	; 0x2d
 800fb36:	d02e      	beq.n	800fb96 <__gethex+0x146>
 800fb38:	1c71      	adds	r1, r6, #1
 800fb3a:	f04f 0900 	mov.w	r9, #0
 800fb3e:	7808      	ldrb	r0, [r1, #0]
 800fb40:	f7ff ff70 	bl	800fa24 <__hexdig_fun>
 800fb44:	1e43      	subs	r3, r0, #1
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	2b18      	cmp	r3, #24
 800fb4a:	d82c      	bhi.n	800fba6 <__gethex+0x156>
 800fb4c:	f1a0 0210 	sub.w	r2, r0, #16
 800fb50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fb54:	f7ff ff66 	bl	800fa24 <__hexdig_fun>
 800fb58:	1e43      	subs	r3, r0, #1
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	2b18      	cmp	r3, #24
 800fb5e:	d91d      	bls.n	800fb9c <__gethex+0x14c>
 800fb60:	f1b9 0f00 	cmp.w	r9, #0
 800fb64:	d000      	beq.n	800fb68 <__gethex+0x118>
 800fb66:	4252      	negs	r2, r2
 800fb68:	4415      	add	r5, r2
 800fb6a:	f8cb 1000 	str.w	r1, [fp]
 800fb6e:	b1e4      	cbz	r4, 800fbaa <__gethex+0x15a>
 800fb70:	9b00      	ldr	r3, [sp, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	bf14      	ite	ne
 800fb76:	2700      	movne	r7, #0
 800fb78:	2706      	moveq	r7, #6
 800fb7a:	4638      	mov	r0, r7
 800fb7c:	b009      	add	sp, #36	; 0x24
 800fb7e:	ecbd 8b02 	vpop	{d8}
 800fb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb86:	463e      	mov	r6, r7
 800fb88:	4625      	mov	r5, r4
 800fb8a:	2401      	movs	r4, #1
 800fb8c:	e7ca      	b.n	800fb24 <__gethex+0xd4>
 800fb8e:	f04f 0900 	mov.w	r9, #0
 800fb92:	1cb1      	adds	r1, r6, #2
 800fb94:	e7d3      	b.n	800fb3e <__gethex+0xee>
 800fb96:	f04f 0901 	mov.w	r9, #1
 800fb9a:	e7fa      	b.n	800fb92 <__gethex+0x142>
 800fb9c:	230a      	movs	r3, #10
 800fb9e:	fb03 0202 	mla	r2, r3, r2, r0
 800fba2:	3a10      	subs	r2, #16
 800fba4:	e7d4      	b.n	800fb50 <__gethex+0x100>
 800fba6:	4631      	mov	r1, r6
 800fba8:	e7df      	b.n	800fb6a <__gethex+0x11a>
 800fbaa:	1bf3      	subs	r3, r6, r7
 800fbac:	3b01      	subs	r3, #1
 800fbae:	4621      	mov	r1, r4
 800fbb0:	2b07      	cmp	r3, #7
 800fbb2:	dc0b      	bgt.n	800fbcc <__gethex+0x17c>
 800fbb4:	ee18 0a10 	vmov	r0, s16
 800fbb8:	f000 fa86 	bl	80100c8 <_Balloc>
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	b940      	cbnz	r0, 800fbd2 <__gethex+0x182>
 800fbc0:	4b65      	ldr	r3, [pc, #404]	; (800fd58 <__gethex+0x308>)
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	21de      	movs	r1, #222	; 0xde
 800fbc6:	4865      	ldr	r0, [pc, #404]	; (800fd5c <__gethex+0x30c>)
 800fbc8:	f001 fcde 	bl	8011588 <__assert_func>
 800fbcc:	3101      	adds	r1, #1
 800fbce:	105b      	asrs	r3, r3, #1
 800fbd0:	e7ee      	b.n	800fbb0 <__gethex+0x160>
 800fbd2:	f100 0914 	add.w	r9, r0, #20
 800fbd6:	f04f 0b00 	mov.w	fp, #0
 800fbda:	f1ca 0301 	rsb	r3, sl, #1
 800fbde:	f8cd 9008 	str.w	r9, [sp, #8]
 800fbe2:	f8cd b000 	str.w	fp, [sp]
 800fbe6:	9306      	str	r3, [sp, #24]
 800fbe8:	42b7      	cmp	r7, r6
 800fbea:	d340      	bcc.n	800fc6e <__gethex+0x21e>
 800fbec:	9802      	ldr	r0, [sp, #8]
 800fbee:	9b00      	ldr	r3, [sp, #0]
 800fbf0:	f840 3b04 	str.w	r3, [r0], #4
 800fbf4:	eba0 0009 	sub.w	r0, r0, r9
 800fbf8:	1080      	asrs	r0, r0, #2
 800fbfa:	0146      	lsls	r6, r0, #5
 800fbfc:	6120      	str	r0, [r4, #16]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f000 fb58 	bl	80102b4 <__hi0bits>
 800fc04:	1a30      	subs	r0, r6, r0
 800fc06:	f8d8 6000 	ldr.w	r6, [r8]
 800fc0a:	42b0      	cmp	r0, r6
 800fc0c:	dd63      	ble.n	800fcd6 <__gethex+0x286>
 800fc0e:	1b87      	subs	r7, r0, r6
 800fc10:	4639      	mov	r1, r7
 800fc12:	4620      	mov	r0, r4
 800fc14:	f000 fef2 	bl	80109fc <__any_on>
 800fc18:	4682      	mov	sl, r0
 800fc1a:	b1a8      	cbz	r0, 800fc48 <__gethex+0x1f8>
 800fc1c:	1e7b      	subs	r3, r7, #1
 800fc1e:	1159      	asrs	r1, r3, #5
 800fc20:	f003 021f 	and.w	r2, r3, #31
 800fc24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fc28:	f04f 0a01 	mov.w	sl, #1
 800fc2c:	fa0a f202 	lsl.w	r2, sl, r2
 800fc30:	420a      	tst	r2, r1
 800fc32:	d009      	beq.n	800fc48 <__gethex+0x1f8>
 800fc34:	4553      	cmp	r3, sl
 800fc36:	dd05      	ble.n	800fc44 <__gethex+0x1f4>
 800fc38:	1eb9      	subs	r1, r7, #2
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f000 fede 	bl	80109fc <__any_on>
 800fc40:	2800      	cmp	r0, #0
 800fc42:	d145      	bne.n	800fcd0 <__gethex+0x280>
 800fc44:	f04f 0a02 	mov.w	sl, #2
 800fc48:	4639      	mov	r1, r7
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f7ff fe98 	bl	800f980 <rshift>
 800fc50:	443d      	add	r5, r7
 800fc52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc56:	42ab      	cmp	r3, r5
 800fc58:	da4c      	bge.n	800fcf4 <__gethex+0x2a4>
 800fc5a:	ee18 0a10 	vmov	r0, s16
 800fc5e:	4621      	mov	r1, r4
 800fc60:	f000 fa72 	bl	8010148 <_Bfree>
 800fc64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc66:	2300      	movs	r3, #0
 800fc68:	6013      	str	r3, [r2, #0]
 800fc6a:	27a3      	movs	r7, #163	; 0xa3
 800fc6c:	e785      	b.n	800fb7a <__gethex+0x12a>
 800fc6e:	1e73      	subs	r3, r6, #1
 800fc70:	9a05      	ldr	r2, [sp, #20]
 800fc72:	9303      	str	r3, [sp, #12]
 800fc74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d019      	beq.n	800fcb0 <__gethex+0x260>
 800fc7c:	f1bb 0f20 	cmp.w	fp, #32
 800fc80:	d107      	bne.n	800fc92 <__gethex+0x242>
 800fc82:	9b02      	ldr	r3, [sp, #8]
 800fc84:	9a00      	ldr	r2, [sp, #0]
 800fc86:	f843 2b04 	str.w	r2, [r3], #4
 800fc8a:	9302      	str	r3, [sp, #8]
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	469b      	mov	fp, r3
 800fc92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fc96:	f7ff fec5 	bl	800fa24 <__hexdig_fun>
 800fc9a:	9b00      	ldr	r3, [sp, #0]
 800fc9c:	f000 000f 	and.w	r0, r0, #15
 800fca0:	fa00 f00b 	lsl.w	r0, r0, fp
 800fca4:	4303      	orrs	r3, r0
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	f10b 0b04 	add.w	fp, fp, #4
 800fcac:	9b03      	ldr	r3, [sp, #12]
 800fcae:	e00d      	b.n	800fccc <__gethex+0x27c>
 800fcb0:	9b03      	ldr	r3, [sp, #12]
 800fcb2:	9a06      	ldr	r2, [sp, #24]
 800fcb4:	4413      	add	r3, r2
 800fcb6:	42bb      	cmp	r3, r7
 800fcb8:	d3e0      	bcc.n	800fc7c <__gethex+0x22c>
 800fcba:	4618      	mov	r0, r3
 800fcbc:	9901      	ldr	r1, [sp, #4]
 800fcbe:	9307      	str	r3, [sp, #28]
 800fcc0:	4652      	mov	r2, sl
 800fcc2:	f7fe f8fe 	bl	800dec2 <strncmp>
 800fcc6:	9b07      	ldr	r3, [sp, #28]
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	d1d7      	bne.n	800fc7c <__gethex+0x22c>
 800fccc:	461e      	mov	r6, r3
 800fcce:	e78b      	b.n	800fbe8 <__gethex+0x198>
 800fcd0:	f04f 0a03 	mov.w	sl, #3
 800fcd4:	e7b8      	b.n	800fc48 <__gethex+0x1f8>
 800fcd6:	da0a      	bge.n	800fcee <__gethex+0x29e>
 800fcd8:	1a37      	subs	r7, r6, r0
 800fcda:	4621      	mov	r1, r4
 800fcdc:	ee18 0a10 	vmov	r0, s16
 800fce0:	463a      	mov	r2, r7
 800fce2:	f000 fc4d 	bl	8010580 <__lshift>
 800fce6:	1bed      	subs	r5, r5, r7
 800fce8:	4604      	mov	r4, r0
 800fcea:	f100 0914 	add.w	r9, r0, #20
 800fcee:	f04f 0a00 	mov.w	sl, #0
 800fcf2:	e7ae      	b.n	800fc52 <__gethex+0x202>
 800fcf4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fcf8:	42a8      	cmp	r0, r5
 800fcfa:	dd72      	ble.n	800fde2 <__gethex+0x392>
 800fcfc:	1b45      	subs	r5, r0, r5
 800fcfe:	42ae      	cmp	r6, r5
 800fd00:	dc36      	bgt.n	800fd70 <__gethex+0x320>
 800fd02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd06:	2b02      	cmp	r3, #2
 800fd08:	d02a      	beq.n	800fd60 <__gethex+0x310>
 800fd0a:	2b03      	cmp	r3, #3
 800fd0c:	d02c      	beq.n	800fd68 <__gethex+0x318>
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d115      	bne.n	800fd3e <__gethex+0x2ee>
 800fd12:	42ae      	cmp	r6, r5
 800fd14:	d113      	bne.n	800fd3e <__gethex+0x2ee>
 800fd16:	2e01      	cmp	r6, #1
 800fd18:	d10b      	bne.n	800fd32 <__gethex+0x2e2>
 800fd1a:	9a04      	ldr	r2, [sp, #16]
 800fd1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd20:	6013      	str	r3, [r2, #0]
 800fd22:	2301      	movs	r3, #1
 800fd24:	6123      	str	r3, [r4, #16]
 800fd26:	f8c9 3000 	str.w	r3, [r9]
 800fd2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd2c:	2762      	movs	r7, #98	; 0x62
 800fd2e:	601c      	str	r4, [r3, #0]
 800fd30:	e723      	b.n	800fb7a <__gethex+0x12a>
 800fd32:	1e71      	subs	r1, r6, #1
 800fd34:	4620      	mov	r0, r4
 800fd36:	f000 fe61 	bl	80109fc <__any_on>
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	d1ed      	bne.n	800fd1a <__gethex+0x2ca>
 800fd3e:	ee18 0a10 	vmov	r0, s16
 800fd42:	4621      	mov	r1, r4
 800fd44:	f000 fa00 	bl	8010148 <_Bfree>
 800fd48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	6013      	str	r3, [r2, #0]
 800fd4e:	2750      	movs	r7, #80	; 0x50
 800fd50:	e713      	b.n	800fb7a <__gethex+0x12a>
 800fd52:	bf00      	nop
 800fd54:	08013b68 	.word	0x08013b68
 800fd58:	08013aec 	.word	0x08013aec
 800fd5c:	08013afd 	.word	0x08013afd
 800fd60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d1eb      	bne.n	800fd3e <__gethex+0x2ee>
 800fd66:	e7d8      	b.n	800fd1a <__gethex+0x2ca>
 800fd68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d1d5      	bne.n	800fd1a <__gethex+0x2ca>
 800fd6e:	e7e6      	b.n	800fd3e <__gethex+0x2ee>
 800fd70:	1e6f      	subs	r7, r5, #1
 800fd72:	f1ba 0f00 	cmp.w	sl, #0
 800fd76:	d131      	bne.n	800fddc <__gethex+0x38c>
 800fd78:	b127      	cbz	r7, 800fd84 <__gethex+0x334>
 800fd7a:	4639      	mov	r1, r7
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f000 fe3d 	bl	80109fc <__any_on>
 800fd82:	4682      	mov	sl, r0
 800fd84:	117b      	asrs	r3, r7, #5
 800fd86:	2101      	movs	r1, #1
 800fd88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fd8c:	f007 071f 	and.w	r7, r7, #31
 800fd90:	fa01 f707 	lsl.w	r7, r1, r7
 800fd94:	421f      	tst	r7, r3
 800fd96:	4629      	mov	r1, r5
 800fd98:	4620      	mov	r0, r4
 800fd9a:	bf18      	it	ne
 800fd9c:	f04a 0a02 	orrne.w	sl, sl, #2
 800fda0:	1b76      	subs	r6, r6, r5
 800fda2:	f7ff fded 	bl	800f980 <rshift>
 800fda6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fdaa:	2702      	movs	r7, #2
 800fdac:	f1ba 0f00 	cmp.w	sl, #0
 800fdb0:	d048      	beq.n	800fe44 <__gethex+0x3f4>
 800fdb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	d015      	beq.n	800fde6 <__gethex+0x396>
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d017      	beq.n	800fdee <__gethex+0x39e>
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d109      	bne.n	800fdd6 <__gethex+0x386>
 800fdc2:	f01a 0f02 	tst.w	sl, #2
 800fdc6:	d006      	beq.n	800fdd6 <__gethex+0x386>
 800fdc8:	f8d9 0000 	ldr.w	r0, [r9]
 800fdcc:	ea4a 0a00 	orr.w	sl, sl, r0
 800fdd0:	f01a 0f01 	tst.w	sl, #1
 800fdd4:	d10e      	bne.n	800fdf4 <__gethex+0x3a4>
 800fdd6:	f047 0710 	orr.w	r7, r7, #16
 800fdda:	e033      	b.n	800fe44 <__gethex+0x3f4>
 800fddc:	f04f 0a01 	mov.w	sl, #1
 800fde0:	e7d0      	b.n	800fd84 <__gethex+0x334>
 800fde2:	2701      	movs	r7, #1
 800fde4:	e7e2      	b.n	800fdac <__gethex+0x35c>
 800fde6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fde8:	f1c3 0301 	rsb	r3, r3, #1
 800fdec:	9315      	str	r3, [sp, #84]	; 0x54
 800fdee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d0f0      	beq.n	800fdd6 <__gethex+0x386>
 800fdf4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fdf8:	f104 0314 	add.w	r3, r4, #20
 800fdfc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fe00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fe04:	f04f 0c00 	mov.w	ip, #0
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fe12:	d01c      	beq.n	800fe4e <__gethex+0x3fe>
 800fe14:	3201      	adds	r2, #1
 800fe16:	6002      	str	r2, [r0, #0]
 800fe18:	2f02      	cmp	r7, #2
 800fe1a:	f104 0314 	add.w	r3, r4, #20
 800fe1e:	d13f      	bne.n	800fea0 <__gethex+0x450>
 800fe20:	f8d8 2000 	ldr.w	r2, [r8]
 800fe24:	3a01      	subs	r2, #1
 800fe26:	42b2      	cmp	r2, r6
 800fe28:	d10a      	bne.n	800fe40 <__gethex+0x3f0>
 800fe2a:	1171      	asrs	r1, r6, #5
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe32:	f006 061f 	and.w	r6, r6, #31
 800fe36:	fa02 f606 	lsl.w	r6, r2, r6
 800fe3a:	421e      	tst	r6, r3
 800fe3c:	bf18      	it	ne
 800fe3e:	4617      	movne	r7, r2
 800fe40:	f047 0720 	orr.w	r7, r7, #32
 800fe44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe46:	601c      	str	r4, [r3, #0]
 800fe48:	9b04      	ldr	r3, [sp, #16]
 800fe4a:	601d      	str	r5, [r3, #0]
 800fe4c:	e695      	b.n	800fb7a <__gethex+0x12a>
 800fe4e:	4299      	cmp	r1, r3
 800fe50:	f843 cc04 	str.w	ip, [r3, #-4]
 800fe54:	d8d8      	bhi.n	800fe08 <__gethex+0x3b8>
 800fe56:	68a3      	ldr	r3, [r4, #8]
 800fe58:	459b      	cmp	fp, r3
 800fe5a:	db19      	blt.n	800fe90 <__gethex+0x440>
 800fe5c:	6861      	ldr	r1, [r4, #4]
 800fe5e:	ee18 0a10 	vmov	r0, s16
 800fe62:	3101      	adds	r1, #1
 800fe64:	f000 f930 	bl	80100c8 <_Balloc>
 800fe68:	4681      	mov	r9, r0
 800fe6a:	b918      	cbnz	r0, 800fe74 <__gethex+0x424>
 800fe6c:	4b1a      	ldr	r3, [pc, #104]	; (800fed8 <__gethex+0x488>)
 800fe6e:	4602      	mov	r2, r0
 800fe70:	2184      	movs	r1, #132	; 0x84
 800fe72:	e6a8      	b.n	800fbc6 <__gethex+0x176>
 800fe74:	6922      	ldr	r2, [r4, #16]
 800fe76:	3202      	adds	r2, #2
 800fe78:	f104 010c 	add.w	r1, r4, #12
 800fe7c:	0092      	lsls	r2, r2, #2
 800fe7e:	300c      	adds	r0, #12
 800fe80:	f7fd f83e 	bl	800cf00 <memcpy>
 800fe84:	4621      	mov	r1, r4
 800fe86:	ee18 0a10 	vmov	r0, s16
 800fe8a:	f000 f95d 	bl	8010148 <_Bfree>
 800fe8e:	464c      	mov	r4, r9
 800fe90:	6923      	ldr	r3, [r4, #16]
 800fe92:	1c5a      	adds	r2, r3, #1
 800fe94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fe98:	6122      	str	r2, [r4, #16]
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	615a      	str	r2, [r3, #20]
 800fe9e:	e7bb      	b.n	800fe18 <__gethex+0x3c8>
 800fea0:	6922      	ldr	r2, [r4, #16]
 800fea2:	455a      	cmp	r2, fp
 800fea4:	dd0b      	ble.n	800febe <__gethex+0x46e>
 800fea6:	2101      	movs	r1, #1
 800fea8:	4620      	mov	r0, r4
 800feaa:	f7ff fd69 	bl	800f980 <rshift>
 800feae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800feb2:	3501      	adds	r5, #1
 800feb4:	42ab      	cmp	r3, r5
 800feb6:	f6ff aed0 	blt.w	800fc5a <__gethex+0x20a>
 800feba:	2701      	movs	r7, #1
 800febc:	e7c0      	b.n	800fe40 <__gethex+0x3f0>
 800febe:	f016 061f 	ands.w	r6, r6, #31
 800fec2:	d0fa      	beq.n	800feba <__gethex+0x46a>
 800fec4:	449a      	add	sl, r3
 800fec6:	f1c6 0620 	rsb	r6, r6, #32
 800feca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fece:	f000 f9f1 	bl	80102b4 <__hi0bits>
 800fed2:	42b0      	cmp	r0, r6
 800fed4:	dbe7      	blt.n	800fea6 <__gethex+0x456>
 800fed6:	e7f0      	b.n	800feba <__gethex+0x46a>
 800fed8:	08013aec 	.word	0x08013aec

0800fedc <L_shift>:
 800fedc:	f1c2 0208 	rsb	r2, r2, #8
 800fee0:	0092      	lsls	r2, r2, #2
 800fee2:	b570      	push	{r4, r5, r6, lr}
 800fee4:	f1c2 0620 	rsb	r6, r2, #32
 800fee8:	6843      	ldr	r3, [r0, #4]
 800feea:	6804      	ldr	r4, [r0, #0]
 800feec:	fa03 f506 	lsl.w	r5, r3, r6
 800fef0:	432c      	orrs	r4, r5
 800fef2:	40d3      	lsrs	r3, r2
 800fef4:	6004      	str	r4, [r0, #0]
 800fef6:	f840 3f04 	str.w	r3, [r0, #4]!
 800fefa:	4288      	cmp	r0, r1
 800fefc:	d3f4      	bcc.n	800fee8 <L_shift+0xc>
 800fefe:	bd70      	pop	{r4, r5, r6, pc}

0800ff00 <__match>:
 800ff00:	b530      	push	{r4, r5, lr}
 800ff02:	6803      	ldr	r3, [r0, #0]
 800ff04:	3301      	adds	r3, #1
 800ff06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff0a:	b914      	cbnz	r4, 800ff12 <__match+0x12>
 800ff0c:	6003      	str	r3, [r0, #0]
 800ff0e:	2001      	movs	r0, #1
 800ff10:	bd30      	pop	{r4, r5, pc}
 800ff12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ff1a:	2d19      	cmp	r5, #25
 800ff1c:	bf98      	it	ls
 800ff1e:	3220      	addls	r2, #32
 800ff20:	42a2      	cmp	r2, r4
 800ff22:	d0f0      	beq.n	800ff06 <__match+0x6>
 800ff24:	2000      	movs	r0, #0
 800ff26:	e7f3      	b.n	800ff10 <__match+0x10>

0800ff28 <__hexnan>:
 800ff28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff2c:	680b      	ldr	r3, [r1, #0]
 800ff2e:	6801      	ldr	r1, [r0, #0]
 800ff30:	115e      	asrs	r6, r3, #5
 800ff32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ff36:	f013 031f 	ands.w	r3, r3, #31
 800ff3a:	b087      	sub	sp, #28
 800ff3c:	bf18      	it	ne
 800ff3e:	3604      	addne	r6, #4
 800ff40:	2500      	movs	r5, #0
 800ff42:	1f37      	subs	r7, r6, #4
 800ff44:	4682      	mov	sl, r0
 800ff46:	4690      	mov	r8, r2
 800ff48:	9301      	str	r3, [sp, #4]
 800ff4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ff4e:	46b9      	mov	r9, r7
 800ff50:	463c      	mov	r4, r7
 800ff52:	9502      	str	r5, [sp, #8]
 800ff54:	46ab      	mov	fp, r5
 800ff56:	784a      	ldrb	r2, [r1, #1]
 800ff58:	1c4b      	adds	r3, r1, #1
 800ff5a:	9303      	str	r3, [sp, #12]
 800ff5c:	b342      	cbz	r2, 800ffb0 <__hexnan+0x88>
 800ff5e:	4610      	mov	r0, r2
 800ff60:	9105      	str	r1, [sp, #20]
 800ff62:	9204      	str	r2, [sp, #16]
 800ff64:	f7ff fd5e 	bl	800fa24 <__hexdig_fun>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d14f      	bne.n	801000c <__hexnan+0xe4>
 800ff6c:	9a04      	ldr	r2, [sp, #16]
 800ff6e:	9905      	ldr	r1, [sp, #20]
 800ff70:	2a20      	cmp	r2, #32
 800ff72:	d818      	bhi.n	800ffa6 <__hexnan+0x7e>
 800ff74:	9b02      	ldr	r3, [sp, #8]
 800ff76:	459b      	cmp	fp, r3
 800ff78:	dd13      	ble.n	800ffa2 <__hexnan+0x7a>
 800ff7a:	454c      	cmp	r4, r9
 800ff7c:	d206      	bcs.n	800ff8c <__hexnan+0x64>
 800ff7e:	2d07      	cmp	r5, #7
 800ff80:	dc04      	bgt.n	800ff8c <__hexnan+0x64>
 800ff82:	462a      	mov	r2, r5
 800ff84:	4649      	mov	r1, r9
 800ff86:	4620      	mov	r0, r4
 800ff88:	f7ff ffa8 	bl	800fedc <L_shift>
 800ff8c:	4544      	cmp	r4, r8
 800ff8e:	d950      	bls.n	8010032 <__hexnan+0x10a>
 800ff90:	2300      	movs	r3, #0
 800ff92:	f1a4 0904 	sub.w	r9, r4, #4
 800ff96:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff9a:	f8cd b008 	str.w	fp, [sp, #8]
 800ff9e:	464c      	mov	r4, r9
 800ffa0:	461d      	mov	r5, r3
 800ffa2:	9903      	ldr	r1, [sp, #12]
 800ffa4:	e7d7      	b.n	800ff56 <__hexnan+0x2e>
 800ffa6:	2a29      	cmp	r2, #41	; 0x29
 800ffa8:	d156      	bne.n	8010058 <__hexnan+0x130>
 800ffaa:	3102      	adds	r1, #2
 800ffac:	f8ca 1000 	str.w	r1, [sl]
 800ffb0:	f1bb 0f00 	cmp.w	fp, #0
 800ffb4:	d050      	beq.n	8010058 <__hexnan+0x130>
 800ffb6:	454c      	cmp	r4, r9
 800ffb8:	d206      	bcs.n	800ffc8 <__hexnan+0xa0>
 800ffba:	2d07      	cmp	r5, #7
 800ffbc:	dc04      	bgt.n	800ffc8 <__hexnan+0xa0>
 800ffbe:	462a      	mov	r2, r5
 800ffc0:	4649      	mov	r1, r9
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f7ff ff8a 	bl	800fedc <L_shift>
 800ffc8:	4544      	cmp	r4, r8
 800ffca:	d934      	bls.n	8010036 <__hexnan+0x10e>
 800ffcc:	f1a8 0204 	sub.w	r2, r8, #4
 800ffd0:	4623      	mov	r3, r4
 800ffd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ffd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ffda:	429f      	cmp	r7, r3
 800ffdc:	d2f9      	bcs.n	800ffd2 <__hexnan+0xaa>
 800ffde:	1b3b      	subs	r3, r7, r4
 800ffe0:	f023 0303 	bic.w	r3, r3, #3
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	3401      	adds	r4, #1
 800ffe8:	3e03      	subs	r6, #3
 800ffea:	42b4      	cmp	r4, r6
 800ffec:	bf88      	it	hi
 800ffee:	2304      	movhi	r3, #4
 800fff0:	4443      	add	r3, r8
 800fff2:	2200      	movs	r2, #0
 800fff4:	f843 2b04 	str.w	r2, [r3], #4
 800fff8:	429f      	cmp	r7, r3
 800fffa:	d2fb      	bcs.n	800fff4 <__hexnan+0xcc>
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	b91b      	cbnz	r3, 8010008 <__hexnan+0xe0>
 8010000:	4547      	cmp	r7, r8
 8010002:	d127      	bne.n	8010054 <__hexnan+0x12c>
 8010004:	2301      	movs	r3, #1
 8010006:	603b      	str	r3, [r7, #0]
 8010008:	2005      	movs	r0, #5
 801000a:	e026      	b.n	801005a <__hexnan+0x132>
 801000c:	3501      	adds	r5, #1
 801000e:	2d08      	cmp	r5, #8
 8010010:	f10b 0b01 	add.w	fp, fp, #1
 8010014:	dd06      	ble.n	8010024 <__hexnan+0xfc>
 8010016:	4544      	cmp	r4, r8
 8010018:	d9c3      	bls.n	800ffa2 <__hexnan+0x7a>
 801001a:	2300      	movs	r3, #0
 801001c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010020:	2501      	movs	r5, #1
 8010022:	3c04      	subs	r4, #4
 8010024:	6822      	ldr	r2, [r4, #0]
 8010026:	f000 000f 	and.w	r0, r0, #15
 801002a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801002e:	6022      	str	r2, [r4, #0]
 8010030:	e7b7      	b.n	800ffa2 <__hexnan+0x7a>
 8010032:	2508      	movs	r5, #8
 8010034:	e7b5      	b.n	800ffa2 <__hexnan+0x7a>
 8010036:	9b01      	ldr	r3, [sp, #4]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d0df      	beq.n	800fffc <__hexnan+0xd4>
 801003c:	f04f 32ff 	mov.w	r2, #4294967295
 8010040:	f1c3 0320 	rsb	r3, r3, #32
 8010044:	fa22 f303 	lsr.w	r3, r2, r3
 8010048:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801004c:	401a      	ands	r2, r3
 801004e:	f846 2c04 	str.w	r2, [r6, #-4]
 8010052:	e7d3      	b.n	800fffc <__hexnan+0xd4>
 8010054:	3f04      	subs	r7, #4
 8010056:	e7d1      	b.n	800fffc <__hexnan+0xd4>
 8010058:	2004      	movs	r0, #4
 801005a:	b007      	add	sp, #28
 801005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010060 <_localeconv_r>:
 8010060:	4800      	ldr	r0, [pc, #0]	; (8010064 <_localeconv_r+0x4>)
 8010062:	4770      	bx	lr
 8010064:	20000190 	.word	0x20000190

08010068 <_lseek_r>:
 8010068:	b538      	push	{r3, r4, r5, lr}
 801006a:	4d07      	ldr	r5, [pc, #28]	; (8010088 <_lseek_r+0x20>)
 801006c:	4604      	mov	r4, r0
 801006e:	4608      	mov	r0, r1
 8010070:	4611      	mov	r1, r2
 8010072:	2200      	movs	r2, #0
 8010074:	602a      	str	r2, [r5, #0]
 8010076:	461a      	mov	r2, r3
 8010078:	f7f2 fe20 	bl	8002cbc <_lseek>
 801007c:	1c43      	adds	r3, r0, #1
 801007e:	d102      	bne.n	8010086 <_lseek_r+0x1e>
 8010080:	682b      	ldr	r3, [r5, #0]
 8010082:	b103      	cbz	r3, 8010086 <_lseek_r+0x1e>
 8010084:	6023      	str	r3, [r4, #0]
 8010086:	bd38      	pop	{r3, r4, r5, pc}
 8010088:	20005abc 	.word	0x20005abc

0801008c <__ascii_mbtowc>:
 801008c:	b082      	sub	sp, #8
 801008e:	b901      	cbnz	r1, 8010092 <__ascii_mbtowc+0x6>
 8010090:	a901      	add	r1, sp, #4
 8010092:	b142      	cbz	r2, 80100a6 <__ascii_mbtowc+0x1a>
 8010094:	b14b      	cbz	r3, 80100aa <__ascii_mbtowc+0x1e>
 8010096:	7813      	ldrb	r3, [r2, #0]
 8010098:	600b      	str	r3, [r1, #0]
 801009a:	7812      	ldrb	r2, [r2, #0]
 801009c:	1e10      	subs	r0, r2, #0
 801009e:	bf18      	it	ne
 80100a0:	2001      	movne	r0, #1
 80100a2:	b002      	add	sp, #8
 80100a4:	4770      	bx	lr
 80100a6:	4610      	mov	r0, r2
 80100a8:	e7fb      	b.n	80100a2 <__ascii_mbtowc+0x16>
 80100aa:	f06f 0001 	mvn.w	r0, #1
 80100ae:	e7f8      	b.n	80100a2 <__ascii_mbtowc+0x16>

080100b0 <__malloc_lock>:
 80100b0:	4801      	ldr	r0, [pc, #4]	; (80100b8 <__malloc_lock+0x8>)
 80100b2:	f001 bc51 	b.w	8011958 <__retarget_lock_acquire_recursive>
 80100b6:	bf00      	nop
 80100b8:	20005ac4 	.word	0x20005ac4

080100bc <__malloc_unlock>:
 80100bc:	4801      	ldr	r0, [pc, #4]	; (80100c4 <__malloc_unlock+0x8>)
 80100be:	f001 bc4c 	b.w	801195a <__retarget_lock_release_recursive>
 80100c2:	bf00      	nop
 80100c4:	20005ac4 	.word	0x20005ac4

080100c8 <_Balloc>:
 80100c8:	b570      	push	{r4, r5, r6, lr}
 80100ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80100cc:	4604      	mov	r4, r0
 80100ce:	460d      	mov	r5, r1
 80100d0:	b976      	cbnz	r6, 80100f0 <_Balloc+0x28>
 80100d2:	2010      	movs	r0, #16
 80100d4:	f7fc ff04 	bl	800cee0 <malloc>
 80100d8:	4602      	mov	r2, r0
 80100da:	6260      	str	r0, [r4, #36]	; 0x24
 80100dc:	b920      	cbnz	r0, 80100e8 <_Balloc+0x20>
 80100de:	4b18      	ldr	r3, [pc, #96]	; (8010140 <_Balloc+0x78>)
 80100e0:	4818      	ldr	r0, [pc, #96]	; (8010144 <_Balloc+0x7c>)
 80100e2:	2166      	movs	r1, #102	; 0x66
 80100e4:	f001 fa50 	bl	8011588 <__assert_func>
 80100e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100ec:	6006      	str	r6, [r0, #0]
 80100ee:	60c6      	str	r6, [r0, #12]
 80100f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80100f2:	68f3      	ldr	r3, [r6, #12]
 80100f4:	b183      	cbz	r3, 8010118 <_Balloc+0x50>
 80100f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80100fe:	b9b8      	cbnz	r0, 8010130 <_Balloc+0x68>
 8010100:	2101      	movs	r1, #1
 8010102:	fa01 f605 	lsl.w	r6, r1, r5
 8010106:	1d72      	adds	r2, r6, #5
 8010108:	0092      	lsls	r2, r2, #2
 801010a:	4620      	mov	r0, r4
 801010c:	f000 fc97 	bl	8010a3e <_calloc_r>
 8010110:	b160      	cbz	r0, 801012c <_Balloc+0x64>
 8010112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010116:	e00e      	b.n	8010136 <_Balloc+0x6e>
 8010118:	2221      	movs	r2, #33	; 0x21
 801011a:	2104      	movs	r1, #4
 801011c:	4620      	mov	r0, r4
 801011e:	f000 fc8e 	bl	8010a3e <_calloc_r>
 8010122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010124:	60f0      	str	r0, [r6, #12]
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1e4      	bne.n	80100f6 <_Balloc+0x2e>
 801012c:	2000      	movs	r0, #0
 801012e:	bd70      	pop	{r4, r5, r6, pc}
 8010130:	6802      	ldr	r2, [r0, #0]
 8010132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010136:	2300      	movs	r3, #0
 8010138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801013c:	e7f7      	b.n	801012e <_Balloc+0x66>
 801013e:	bf00      	nop
 8010140:	08013a76 	.word	0x08013a76
 8010144:	08013b7c 	.word	0x08013b7c

08010148 <_Bfree>:
 8010148:	b570      	push	{r4, r5, r6, lr}
 801014a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801014c:	4605      	mov	r5, r0
 801014e:	460c      	mov	r4, r1
 8010150:	b976      	cbnz	r6, 8010170 <_Bfree+0x28>
 8010152:	2010      	movs	r0, #16
 8010154:	f7fc fec4 	bl	800cee0 <malloc>
 8010158:	4602      	mov	r2, r0
 801015a:	6268      	str	r0, [r5, #36]	; 0x24
 801015c:	b920      	cbnz	r0, 8010168 <_Bfree+0x20>
 801015e:	4b09      	ldr	r3, [pc, #36]	; (8010184 <_Bfree+0x3c>)
 8010160:	4809      	ldr	r0, [pc, #36]	; (8010188 <_Bfree+0x40>)
 8010162:	218a      	movs	r1, #138	; 0x8a
 8010164:	f001 fa10 	bl	8011588 <__assert_func>
 8010168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801016c:	6006      	str	r6, [r0, #0]
 801016e:	60c6      	str	r6, [r0, #12]
 8010170:	b13c      	cbz	r4, 8010182 <_Bfree+0x3a>
 8010172:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010174:	6862      	ldr	r2, [r4, #4]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801017c:	6021      	str	r1, [r4, #0]
 801017e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010182:	bd70      	pop	{r4, r5, r6, pc}
 8010184:	08013a76 	.word	0x08013a76
 8010188:	08013b7c 	.word	0x08013b7c

0801018c <__multadd>:
 801018c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010190:	690e      	ldr	r6, [r1, #16]
 8010192:	4607      	mov	r7, r0
 8010194:	4698      	mov	r8, r3
 8010196:	460c      	mov	r4, r1
 8010198:	f101 0014 	add.w	r0, r1, #20
 801019c:	2300      	movs	r3, #0
 801019e:	6805      	ldr	r5, [r0, #0]
 80101a0:	b2a9      	uxth	r1, r5
 80101a2:	fb02 8101 	mla	r1, r2, r1, r8
 80101a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80101aa:	0c2d      	lsrs	r5, r5, #16
 80101ac:	fb02 c505 	mla	r5, r2, r5, ip
 80101b0:	b289      	uxth	r1, r1
 80101b2:	3301      	adds	r3, #1
 80101b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80101b8:	429e      	cmp	r6, r3
 80101ba:	f840 1b04 	str.w	r1, [r0], #4
 80101be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80101c2:	dcec      	bgt.n	801019e <__multadd+0x12>
 80101c4:	f1b8 0f00 	cmp.w	r8, #0
 80101c8:	d022      	beq.n	8010210 <__multadd+0x84>
 80101ca:	68a3      	ldr	r3, [r4, #8]
 80101cc:	42b3      	cmp	r3, r6
 80101ce:	dc19      	bgt.n	8010204 <__multadd+0x78>
 80101d0:	6861      	ldr	r1, [r4, #4]
 80101d2:	4638      	mov	r0, r7
 80101d4:	3101      	adds	r1, #1
 80101d6:	f7ff ff77 	bl	80100c8 <_Balloc>
 80101da:	4605      	mov	r5, r0
 80101dc:	b928      	cbnz	r0, 80101ea <__multadd+0x5e>
 80101de:	4602      	mov	r2, r0
 80101e0:	4b0d      	ldr	r3, [pc, #52]	; (8010218 <__multadd+0x8c>)
 80101e2:	480e      	ldr	r0, [pc, #56]	; (801021c <__multadd+0x90>)
 80101e4:	21b5      	movs	r1, #181	; 0xb5
 80101e6:	f001 f9cf 	bl	8011588 <__assert_func>
 80101ea:	6922      	ldr	r2, [r4, #16]
 80101ec:	3202      	adds	r2, #2
 80101ee:	f104 010c 	add.w	r1, r4, #12
 80101f2:	0092      	lsls	r2, r2, #2
 80101f4:	300c      	adds	r0, #12
 80101f6:	f7fc fe83 	bl	800cf00 <memcpy>
 80101fa:	4621      	mov	r1, r4
 80101fc:	4638      	mov	r0, r7
 80101fe:	f7ff ffa3 	bl	8010148 <_Bfree>
 8010202:	462c      	mov	r4, r5
 8010204:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010208:	3601      	adds	r6, #1
 801020a:	f8c3 8014 	str.w	r8, [r3, #20]
 801020e:	6126      	str	r6, [r4, #16]
 8010210:	4620      	mov	r0, r4
 8010212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010216:	bf00      	nop
 8010218:	08013aec 	.word	0x08013aec
 801021c:	08013b7c 	.word	0x08013b7c

08010220 <__s2b>:
 8010220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010224:	460c      	mov	r4, r1
 8010226:	4615      	mov	r5, r2
 8010228:	461f      	mov	r7, r3
 801022a:	2209      	movs	r2, #9
 801022c:	3308      	adds	r3, #8
 801022e:	4606      	mov	r6, r0
 8010230:	fb93 f3f2 	sdiv	r3, r3, r2
 8010234:	2100      	movs	r1, #0
 8010236:	2201      	movs	r2, #1
 8010238:	429a      	cmp	r2, r3
 801023a:	db09      	blt.n	8010250 <__s2b+0x30>
 801023c:	4630      	mov	r0, r6
 801023e:	f7ff ff43 	bl	80100c8 <_Balloc>
 8010242:	b940      	cbnz	r0, 8010256 <__s2b+0x36>
 8010244:	4602      	mov	r2, r0
 8010246:	4b19      	ldr	r3, [pc, #100]	; (80102ac <__s2b+0x8c>)
 8010248:	4819      	ldr	r0, [pc, #100]	; (80102b0 <__s2b+0x90>)
 801024a:	21ce      	movs	r1, #206	; 0xce
 801024c:	f001 f99c 	bl	8011588 <__assert_func>
 8010250:	0052      	lsls	r2, r2, #1
 8010252:	3101      	adds	r1, #1
 8010254:	e7f0      	b.n	8010238 <__s2b+0x18>
 8010256:	9b08      	ldr	r3, [sp, #32]
 8010258:	6143      	str	r3, [r0, #20]
 801025a:	2d09      	cmp	r5, #9
 801025c:	f04f 0301 	mov.w	r3, #1
 8010260:	6103      	str	r3, [r0, #16]
 8010262:	dd16      	ble.n	8010292 <__s2b+0x72>
 8010264:	f104 0909 	add.w	r9, r4, #9
 8010268:	46c8      	mov	r8, r9
 801026a:	442c      	add	r4, r5
 801026c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010270:	4601      	mov	r1, r0
 8010272:	3b30      	subs	r3, #48	; 0x30
 8010274:	220a      	movs	r2, #10
 8010276:	4630      	mov	r0, r6
 8010278:	f7ff ff88 	bl	801018c <__multadd>
 801027c:	45a0      	cmp	r8, r4
 801027e:	d1f5      	bne.n	801026c <__s2b+0x4c>
 8010280:	f1a5 0408 	sub.w	r4, r5, #8
 8010284:	444c      	add	r4, r9
 8010286:	1b2d      	subs	r5, r5, r4
 8010288:	1963      	adds	r3, r4, r5
 801028a:	42bb      	cmp	r3, r7
 801028c:	db04      	blt.n	8010298 <__s2b+0x78>
 801028e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010292:	340a      	adds	r4, #10
 8010294:	2509      	movs	r5, #9
 8010296:	e7f6      	b.n	8010286 <__s2b+0x66>
 8010298:	f814 3b01 	ldrb.w	r3, [r4], #1
 801029c:	4601      	mov	r1, r0
 801029e:	3b30      	subs	r3, #48	; 0x30
 80102a0:	220a      	movs	r2, #10
 80102a2:	4630      	mov	r0, r6
 80102a4:	f7ff ff72 	bl	801018c <__multadd>
 80102a8:	e7ee      	b.n	8010288 <__s2b+0x68>
 80102aa:	bf00      	nop
 80102ac:	08013aec 	.word	0x08013aec
 80102b0:	08013b7c 	.word	0x08013b7c

080102b4 <__hi0bits>:
 80102b4:	0c03      	lsrs	r3, r0, #16
 80102b6:	041b      	lsls	r3, r3, #16
 80102b8:	b9d3      	cbnz	r3, 80102f0 <__hi0bits+0x3c>
 80102ba:	0400      	lsls	r0, r0, #16
 80102bc:	2310      	movs	r3, #16
 80102be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80102c2:	bf04      	itt	eq
 80102c4:	0200      	lsleq	r0, r0, #8
 80102c6:	3308      	addeq	r3, #8
 80102c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80102cc:	bf04      	itt	eq
 80102ce:	0100      	lsleq	r0, r0, #4
 80102d0:	3304      	addeq	r3, #4
 80102d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80102d6:	bf04      	itt	eq
 80102d8:	0080      	lsleq	r0, r0, #2
 80102da:	3302      	addeq	r3, #2
 80102dc:	2800      	cmp	r0, #0
 80102de:	db05      	blt.n	80102ec <__hi0bits+0x38>
 80102e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80102e4:	f103 0301 	add.w	r3, r3, #1
 80102e8:	bf08      	it	eq
 80102ea:	2320      	moveq	r3, #32
 80102ec:	4618      	mov	r0, r3
 80102ee:	4770      	bx	lr
 80102f0:	2300      	movs	r3, #0
 80102f2:	e7e4      	b.n	80102be <__hi0bits+0xa>

080102f4 <__lo0bits>:
 80102f4:	6803      	ldr	r3, [r0, #0]
 80102f6:	f013 0207 	ands.w	r2, r3, #7
 80102fa:	4601      	mov	r1, r0
 80102fc:	d00b      	beq.n	8010316 <__lo0bits+0x22>
 80102fe:	07da      	lsls	r2, r3, #31
 8010300:	d424      	bmi.n	801034c <__lo0bits+0x58>
 8010302:	0798      	lsls	r0, r3, #30
 8010304:	bf49      	itett	mi
 8010306:	085b      	lsrmi	r3, r3, #1
 8010308:	089b      	lsrpl	r3, r3, #2
 801030a:	2001      	movmi	r0, #1
 801030c:	600b      	strmi	r3, [r1, #0]
 801030e:	bf5c      	itt	pl
 8010310:	600b      	strpl	r3, [r1, #0]
 8010312:	2002      	movpl	r0, #2
 8010314:	4770      	bx	lr
 8010316:	b298      	uxth	r0, r3
 8010318:	b9b0      	cbnz	r0, 8010348 <__lo0bits+0x54>
 801031a:	0c1b      	lsrs	r3, r3, #16
 801031c:	2010      	movs	r0, #16
 801031e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010322:	bf04      	itt	eq
 8010324:	0a1b      	lsreq	r3, r3, #8
 8010326:	3008      	addeq	r0, #8
 8010328:	071a      	lsls	r2, r3, #28
 801032a:	bf04      	itt	eq
 801032c:	091b      	lsreq	r3, r3, #4
 801032e:	3004      	addeq	r0, #4
 8010330:	079a      	lsls	r2, r3, #30
 8010332:	bf04      	itt	eq
 8010334:	089b      	lsreq	r3, r3, #2
 8010336:	3002      	addeq	r0, #2
 8010338:	07da      	lsls	r2, r3, #31
 801033a:	d403      	bmi.n	8010344 <__lo0bits+0x50>
 801033c:	085b      	lsrs	r3, r3, #1
 801033e:	f100 0001 	add.w	r0, r0, #1
 8010342:	d005      	beq.n	8010350 <__lo0bits+0x5c>
 8010344:	600b      	str	r3, [r1, #0]
 8010346:	4770      	bx	lr
 8010348:	4610      	mov	r0, r2
 801034a:	e7e8      	b.n	801031e <__lo0bits+0x2a>
 801034c:	2000      	movs	r0, #0
 801034e:	4770      	bx	lr
 8010350:	2020      	movs	r0, #32
 8010352:	4770      	bx	lr

08010354 <__i2b>:
 8010354:	b510      	push	{r4, lr}
 8010356:	460c      	mov	r4, r1
 8010358:	2101      	movs	r1, #1
 801035a:	f7ff feb5 	bl	80100c8 <_Balloc>
 801035e:	4602      	mov	r2, r0
 8010360:	b928      	cbnz	r0, 801036e <__i2b+0x1a>
 8010362:	4b05      	ldr	r3, [pc, #20]	; (8010378 <__i2b+0x24>)
 8010364:	4805      	ldr	r0, [pc, #20]	; (801037c <__i2b+0x28>)
 8010366:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801036a:	f001 f90d 	bl	8011588 <__assert_func>
 801036e:	2301      	movs	r3, #1
 8010370:	6144      	str	r4, [r0, #20]
 8010372:	6103      	str	r3, [r0, #16]
 8010374:	bd10      	pop	{r4, pc}
 8010376:	bf00      	nop
 8010378:	08013aec 	.word	0x08013aec
 801037c:	08013b7c 	.word	0x08013b7c

08010380 <__multiply>:
 8010380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010384:	4614      	mov	r4, r2
 8010386:	690a      	ldr	r2, [r1, #16]
 8010388:	6923      	ldr	r3, [r4, #16]
 801038a:	429a      	cmp	r2, r3
 801038c:	bfb8      	it	lt
 801038e:	460b      	movlt	r3, r1
 8010390:	460d      	mov	r5, r1
 8010392:	bfbc      	itt	lt
 8010394:	4625      	movlt	r5, r4
 8010396:	461c      	movlt	r4, r3
 8010398:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801039c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80103a0:	68ab      	ldr	r3, [r5, #8]
 80103a2:	6869      	ldr	r1, [r5, #4]
 80103a4:	eb0a 0709 	add.w	r7, sl, r9
 80103a8:	42bb      	cmp	r3, r7
 80103aa:	b085      	sub	sp, #20
 80103ac:	bfb8      	it	lt
 80103ae:	3101      	addlt	r1, #1
 80103b0:	f7ff fe8a 	bl	80100c8 <_Balloc>
 80103b4:	b930      	cbnz	r0, 80103c4 <__multiply+0x44>
 80103b6:	4602      	mov	r2, r0
 80103b8:	4b42      	ldr	r3, [pc, #264]	; (80104c4 <__multiply+0x144>)
 80103ba:	4843      	ldr	r0, [pc, #268]	; (80104c8 <__multiply+0x148>)
 80103bc:	f240 115d 	movw	r1, #349	; 0x15d
 80103c0:	f001 f8e2 	bl	8011588 <__assert_func>
 80103c4:	f100 0614 	add.w	r6, r0, #20
 80103c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80103cc:	4633      	mov	r3, r6
 80103ce:	2200      	movs	r2, #0
 80103d0:	4543      	cmp	r3, r8
 80103d2:	d31e      	bcc.n	8010412 <__multiply+0x92>
 80103d4:	f105 0c14 	add.w	ip, r5, #20
 80103d8:	f104 0314 	add.w	r3, r4, #20
 80103dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80103e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80103e4:	9202      	str	r2, [sp, #8]
 80103e6:	ebac 0205 	sub.w	r2, ip, r5
 80103ea:	3a15      	subs	r2, #21
 80103ec:	f022 0203 	bic.w	r2, r2, #3
 80103f0:	3204      	adds	r2, #4
 80103f2:	f105 0115 	add.w	r1, r5, #21
 80103f6:	458c      	cmp	ip, r1
 80103f8:	bf38      	it	cc
 80103fa:	2204      	movcc	r2, #4
 80103fc:	9201      	str	r2, [sp, #4]
 80103fe:	9a02      	ldr	r2, [sp, #8]
 8010400:	9303      	str	r3, [sp, #12]
 8010402:	429a      	cmp	r2, r3
 8010404:	d808      	bhi.n	8010418 <__multiply+0x98>
 8010406:	2f00      	cmp	r7, #0
 8010408:	dc55      	bgt.n	80104b6 <__multiply+0x136>
 801040a:	6107      	str	r7, [r0, #16]
 801040c:	b005      	add	sp, #20
 801040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010412:	f843 2b04 	str.w	r2, [r3], #4
 8010416:	e7db      	b.n	80103d0 <__multiply+0x50>
 8010418:	f8b3 a000 	ldrh.w	sl, [r3]
 801041c:	f1ba 0f00 	cmp.w	sl, #0
 8010420:	d020      	beq.n	8010464 <__multiply+0xe4>
 8010422:	f105 0e14 	add.w	lr, r5, #20
 8010426:	46b1      	mov	r9, r6
 8010428:	2200      	movs	r2, #0
 801042a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801042e:	f8d9 b000 	ldr.w	fp, [r9]
 8010432:	b2a1      	uxth	r1, r4
 8010434:	fa1f fb8b 	uxth.w	fp, fp
 8010438:	fb0a b101 	mla	r1, sl, r1, fp
 801043c:	4411      	add	r1, r2
 801043e:	f8d9 2000 	ldr.w	r2, [r9]
 8010442:	0c24      	lsrs	r4, r4, #16
 8010444:	0c12      	lsrs	r2, r2, #16
 8010446:	fb0a 2404 	mla	r4, sl, r4, r2
 801044a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801044e:	b289      	uxth	r1, r1
 8010450:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010454:	45f4      	cmp	ip, lr
 8010456:	f849 1b04 	str.w	r1, [r9], #4
 801045a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801045e:	d8e4      	bhi.n	801042a <__multiply+0xaa>
 8010460:	9901      	ldr	r1, [sp, #4]
 8010462:	5072      	str	r2, [r6, r1]
 8010464:	9a03      	ldr	r2, [sp, #12]
 8010466:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801046a:	3304      	adds	r3, #4
 801046c:	f1b9 0f00 	cmp.w	r9, #0
 8010470:	d01f      	beq.n	80104b2 <__multiply+0x132>
 8010472:	6834      	ldr	r4, [r6, #0]
 8010474:	f105 0114 	add.w	r1, r5, #20
 8010478:	46b6      	mov	lr, r6
 801047a:	f04f 0a00 	mov.w	sl, #0
 801047e:	880a      	ldrh	r2, [r1, #0]
 8010480:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010484:	fb09 b202 	mla	r2, r9, r2, fp
 8010488:	4492      	add	sl, r2
 801048a:	b2a4      	uxth	r4, r4
 801048c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010490:	f84e 4b04 	str.w	r4, [lr], #4
 8010494:	f851 4b04 	ldr.w	r4, [r1], #4
 8010498:	f8be 2000 	ldrh.w	r2, [lr]
 801049c:	0c24      	lsrs	r4, r4, #16
 801049e:	fb09 2404 	mla	r4, r9, r4, r2
 80104a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80104a6:	458c      	cmp	ip, r1
 80104a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80104ac:	d8e7      	bhi.n	801047e <__multiply+0xfe>
 80104ae:	9a01      	ldr	r2, [sp, #4]
 80104b0:	50b4      	str	r4, [r6, r2]
 80104b2:	3604      	adds	r6, #4
 80104b4:	e7a3      	b.n	80103fe <__multiply+0x7e>
 80104b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d1a5      	bne.n	801040a <__multiply+0x8a>
 80104be:	3f01      	subs	r7, #1
 80104c0:	e7a1      	b.n	8010406 <__multiply+0x86>
 80104c2:	bf00      	nop
 80104c4:	08013aec 	.word	0x08013aec
 80104c8:	08013b7c 	.word	0x08013b7c

080104cc <__pow5mult>:
 80104cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104d0:	4615      	mov	r5, r2
 80104d2:	f012 0203 	ands.w	r2, r2, #3
 80104d6:	4606      	mov	r6, r0
 80104d8:	460f      	mov	r7, r1
 80104da:	d007      	beq.n	80104ec <__pow5mult+0x20>
 80104dc:	4c25      	ldr	r4, [pc, #148]	; (8010574 <__pow5mult+0xa8>)
 80104de:	3a01      	subs	r2, #1
 80104e0:	2300      	movs	r3, #0
 80104e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80104e6:	f7ff fe51 	bl	801018c <__multadd>
 80104ea:	4607      	mov	r7, r0
 80104ec:	10ad      	asrs	r5, r5, #2
 80104ee:	d03d      	beq.n	801056c <__pow5mult+0xa0>
 80104f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80104f2:	b97c      	cbnz	r4, 8010514 <__pow5mult+0x48>
 80104f4:	2010      	movs	r0, #16
 80104f6:	f7fc fcf3 	bl	800cee0 <malloc>
 80104fa:	4602      	mov	r2, r0
 80104fc:	6270      	str	r0, [r6, #36]	; 0x24
 80104fe:	b928      	cbnz	r0, 801050c <__pow5mult+0x40>
 8010500:	4b1d      	ldr	r3, [pc, #116]	; (8010578 <__pow5mult+0xac>)
 8010502:	481e      	ldr	r0, [pc, #120]	; (801057c <__pow5mult+0xb0>)
 8010504:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010508:	f001 f83e 	bl	8011588 <__assert_func>
 801050c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010510:	6004      	str	r4, [r0, #0]
 8010512:	60c4      	str	r4, [r0, #12]
 8010514:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801051c:	b94c      	cbnz	r4, 8010532 <__pow5mult+0x66>
 801051e:	f240 2171 	movw	r1, #625	; 0x271
 8010522:	4630      	mov	r0, r6
 8010524:	f7ff ff16 	bl	8010354 <__i2b>
 8010528:	2300      	movs	r3, #0
 801052a:	f8c8 0008 	str.w	r0, [r8, #8]
 801052e:	4604      	mov	r4, r0
 8010530:	6003      	str	r3, [r0, #0]
 8010532:	f04f 0900 	mov.w	r9, #0
 8010536:	07eb      	lsls	r3, r5, #31
 8010538:	d50a      	bpl.n	8010550 <__pow5mult+0x84>
 801053a:	4639      	mov	r1, r7
 801053c:	4622      	mov	r2, r4
 801053e:	4630      	mov	r0, r6
 8010540:	f7ff ff1e 	bl	8010380 <__multiply>
 8010544:	4639      	mov	r1, r7
 8010546:	4680      	mov	r8, r0
 8010548:	4630      	mov	r0, r6
 801054a:	f7ff fdfd 	bl	8010148 <_Bfree>
 801054e:	4647      	mov	r7, r8
 8010550:	106d      	asrs	r5, r5, #1
 8010552:	d00b      	beq.n	801056c <__pow5mult+0xa0>
 8010554:	6820      	ldr	r0, [r4, #0]
 8010556:	b938      	cbnz	r0, 8010568 <__pow5mult+0x9c>
 8010558:	4622      	mov	r2, r4
 801055a:	4621      	mov	r1, r4
 801055c:	4630      	mov	r0, r6
 801055e:	f7ff ff0f 	bl	8010380 <__multiply>
 8010562:	6020      	str	r0, [r4, #0]
 8010564:	f8c0 9000 	str.w	r9, [r0]
 8010568:	4604      	mov	r4, r0
 801056a:	e7e4      	b.n	8010536 <__pow5mult+0x6a>
 801056c:	4638      	mov	r0, r7
 801056e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010572:	bf00      	nop
 8010574:	08013cd0 	.word	0x08013cd0
 8010578:	08013a76 	.word	0x08013a76
 801057c:	08013b7c 	.word	0x08013b7c

08010580 <__lshift>:
 8010580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010584:	460c      	mov	r4, r1
 8010586:	6849      	ldr	r1, [r1, #4]
 8010588:	6923      	ldr	r3, [r4, #16]
 801058a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801058e:	68a3      	ldr	r3, [r4, #8]
 8010590:	4607      	mov	r7, r0
 8010592:	4691      	mov	r9, r2
 8010594:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010598:	f108 0601 	add.w	r6, r8, #1
 801059c:	42b3      	cmp	r3, r6
 801059e:	db0b      	blt.n	80105b8 <__lshift+0x38>
 80105a0:	4638      	mov	r0, r7
 80105a2:	f7ff fd91 	bl	80100c8 <_Balloc>
 80105a6:	4605      	mov	r5, r0
 80105a8:	b948      	cbnz	r0, 80105be <__lshift+0x3e>
 80105aa:	4602      	mov	r2, r0
 80105ac:	4b28      	ldr	r3, [pc, #160]	; (8010650 <__lshift+0xd0>)
 80105ae:	4829      	ldr	r0, [pc, #164]	; (8010654 <__lshift+0xd4>)
 80105b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80105b4:	f000 ffe8 	bl	8011588 <__assert_func>
 80105b8:	3101      	adds	r1, #1
 80105ba:	005b      	lsls	r3, r3, #1
 80105bc:	e7ee      	b.n	801059c <__lshift+0x1c>
 80105be:	2300      	movs	r3, #0
 80105c0:	f100 0114 	add.w	r1, r0, #20
 80105c4:	f100 0210 	add.w	r2, r0, #16
 80105c8:	4618      	mov	r0, r3
 80105ca:	4553      	cmp	r3, sl
 80105cc:	db33      	blt.n	8010636 <__lshift+0xb6>
 80105ce:	6920      	ldr	r0, [r4, #16]
 80105d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80105d4:	f104 0314 	add.w	r3, r4, #20
 80105d8:	f019 091f 	ands.w	r9, r9, #31
 80105dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80105e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80105e4:	d02b      	beq.n	801063e <__lshift+0xbe>
 80105e6:	f1c9 0e20 	rsb	lr, r9, #32
 80105ea:	468a      	mov	sl, r1
 80105ec:	2200      	movs	r2, #0
 80105ee:	6818      	ldr	r0, [r3, #0]
 80105f0:	fa00 f009 	lsl.w	r0, r0, r9
 80105f4:	4302      	orrs	r2, r0
 80105f6:	f84a 2b04 	str.w	r2, [sl], #4
 80105fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80105fe:	459c      	cmp	ip, r3
 8010600:	fa22 f20e 	lsr.w	r2, r2, lr
 8010604:	d8f3      	bhi.n	80105ee <__lshift+0x6e>
 8010606:	ebac 0304 	sub.w	r3, ip, r4
 801060a:	3b15      	subs	r3, #21
 801060c:	f023 0303 	bic.w	r3, r3, #3
 8010610:	3304      	adds	r3, #4
 8010612:	f104 0015 	add.w	r0, r4, #21
 8010616:	4584      	cmp	ip, r0
 8010618:	bf38      	it	cc
 801061a:	2304      	movcc	r3, #4
 801061c:	50ca      	str	r2, [r1, r3]
 801061e:	b10a      	cbz	r2, 8010624 <__lshift+0xa4>
 8010620:	f108 0602 	add.w	r6, r8, #2
 8010624:	3e01      	subs	r6, #1
 8010626:	4638      	mov	r0, r7
 8010628:	612e      	str	r6, [r5, #16]
 801062a:	4621      	mov	r1, r4
 801062c:	f7ff fd8c 	bl	8010148 <_Bfree>
 8010630:	4628      	mov	r0, r5
 8010632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010636:	f842 0f04 	str.w	r0, [r2, #4]!
 801063a:	3301      	adds	r3, #1
 801063c:	e7c5      	b.n	80105ca <__lshift+0x4a>
 801063e:	3904      	subs	r1, #4
 8010640:	f853 2b04 	ldr.w	r2, [r3], #4
 8010644:	f841 2f04 	str.w	r2, [r1, #4]!
 8010648:	459c      	cmp	ip, r3
 801064a:	d8f9      	bhi.n	8010640 <__lshift+0xc0>
 801064c:	e7ea      	b.n	8010624 <__lshift+0xa4>
 801064e:	bf00      	nop
 8010650:	08013aec 	.word	0x08013aec
 8010654:	08013b7c 	.word	0x08013b7c

08010658 <__mcmp>:
 8010658:	b530      	push	{r4, r5, lr}
 801065a:	6902      	ldr	r2, [r0, #16]
 801065c:	690c      	ldr	r4, [r1, #16]
 801065e:	1b12      	subs	r2, r2, r4
 8010660:	d10e      	bne.n	8010680 <__mcmp+0x28>
 8010662:	f100 0314 	add.w	r3, r0, #20
 8010666:	3114      	adds	r1, #20
 8010668:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801066c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010670:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010674:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010678:	42a5      	cmp	r5, r4
 801067a:	d003      	beq.n	8010684 <__mcmp+0x2c>
 801067c:	d305      	bcc.n	801068a <__mcmp+0x32>
 801067e:	2201      	movs	r2, #1
 8010680:	4610      	mov	r0, r2
 8010682:	bd30      	pop	{r4, r5, pc}
 8010684:	4283      	cmp	r3, r0
 8010686:	d3f3      	bcc.n	8010670 <__mcmp+0x18>
 8010688:	e7fa      	b.n	8010680 <__mcmp+0x28>
 801068a:	f04f 32ff 	mov.w	r2, #4294967295
 801068e:	e7f7      	b.n	8010680 <__mcmp+0x28>

08010690 <__mdiff>:
 8010690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	460c      	mov	r4, r1
 8010696:	4606      	mov	r6, r0
 8010698:	4611      	mov	r1, r2
 801069a:	4620      	mov	r0, r4
 801069c:	4617      	mov	r7, r2
 801069e:	f7ff ffdb 	bl	8010658 <__mcmp>
 80106a2:	1e05      	subs	r5, r0, #0
 80106a4:	d110      	bne.n	80106c8 <__mdiff+0x38>
 80106a6:	4629      	mov	r1, r5
 80106a8:	4630      	mov	r0, r6
 80106aa:	f7ff fd0d 	bl	80100c8 <_Balloc>
 80106ae:	b930      	cbnz	r0, 80106be <__mdiff+0x2e>
 80106b0:	4b39      	ldr	r3, [pc, #228]	; (8010798 <__mdiff+0x108>)
 80106b2:	4602      	mov	r2, r0
 80106b4:	f240 2132 	movw	r1, #562	; 0x232
 80106b8:	4838      	ldr	r0, [pc, #224]	; (801079c <__mdiff+0x10c>)
 80106ba:	f000 ff65 	bl	8011588 <__assert_func>
 80106be:	2301      	movs	r3, #1
 80106c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80106c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c8:	bfa4      	itt	ge
 80106ca:	463b      	movge	r3, r7
 80106cc:	4627      	movge	r7, r4
 80106ce:	4630      	mov	r0, r6
 80106d0:	6879      	ldr	r1, [r7, #4]
 80106d2:	bfa6      	itte	ge
 80106d4:	461c      	movge	r4, r3
 80106d6:	2500      	movge	r5, #0
 80106d8:	2501      	movlt	r5, #1
 80106da:	f7ff fcf5 	bl	80100c8 <_Balloc>
 80106de:	b920      	cbnz	r0, 80106ea <__mdiff+0x5a>
 80106e0:	4b2d      	ldr	r3, [pc, #180]	; (8010798 <__mdiff+0x108>)
 80106e2:	4602      	mov	r2, r0
 80106e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80106e8:	e7e6      	b.n	80106b8 <__mdiff+0x28>
 80106ea:	693e      	ldr	r6, [r7, #16]
 80106ec:	60c5      	str	r5, [r0, #12]
 80106ee:	6925      	ldr	r5, [r4, #16]
 80106f0:	f107 0114 	add.w	r1, r7, #20
 80106f4:	f104 0914 	add.w	r9, r4, #20
 80106f8:	f100 0e14 	add.w	lr, r0, #20
 80106fc:	f107 0210 	add.w	r2, r7, #16
 8010700:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010704:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010708:	46f2      	mov	sl, lr
 801070a:	2700      	movs	r7, #0
 801070c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010710:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010714:	fa1f f883 	uxth.w	r8, r3
 8010718:	fa17 f78b 	uxtah	r7, r7, fp
 801071c:	0c1b      	lsrs	r3, r3, #16
 801071e:	eba7 0808 	sub.w	r8, r7, r8
 8010722:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010726:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801072a:	fa1f f888 	uxth.w	r8, r8
 801072e:	141f      	asrs	r7, r3, #16
 8010730:	454d      	cmp	r5, r9
 8010732:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010736:	f84a 3b04 	str.w	r3, [sl], #4
 801073a:	d8e7      	bhi.n	801070c <__mdiff+0x7c>
 801073c:	1b2b      	subs	r3, r5, r4
 801073e:	3b15      	subs	r3, #21
 8010740:	f023 0303 	bic.w	r3, r3, #3
 8010744:	3304      	adds	r3, #4
 8010746:	3415      	adds	r4, #21
 8010748:	42a5      	cmp	r5, r4
 801074a:	bf38      	it	cc
 801074c:	2304      	movcc	r3, #4
 801074e:	4419      	add	r1, r3
 8010750:	4473      	add	r3, lr
 8010752:	469e      	mov	lr, r3
 8010754:	460d      	mov	r5, r1
 8010756:	4565      	cmp	r5, ip
 8010758:	d30e      	bcc.n	8010778 <__mdiff+0xe8>
 801075a:	f10c 0203 	add.w	r2, ip, #3
 801075e:	1a52      	subs	r2, r2, r1
 8010760:	f022 0203 	bic.w	r2, r2, #3
 8010764:	3903      	subs	r1, #3
 8010766:	458c      	cmp	ip, r1
 8010768:	bf38      	it	cc
 801076a:	2200      	movcc	r2, #0
 801076c:	441a      	add	r2, r3
 801076e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010772:	b17b      	cbz	r3, 8010794 <__mdiff+0x104>
 8010774:	6106      	str	r6, [r0, #16]
 8010776:	e7a5      	b.n	80106c4 <__mdiff+0x34>
 8010778:	f855 8b04 	ldr.w	r8, [r5], #4
 801077c:	fa17 f488 	uxtah	r4, r7, r8
 8010780:	1422      	asrs	r2, r4, #16
 8010782:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010786:	b2a4      	uxth	r4, r4
 8010788:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801078c:	f84e 4b04 	str.w	r4, [lr], #4
 8010790:	1417      	asrs	r7, r2, #16
 8010792:	e7e0      	b.n	8010756 <__mdiff+0xc6>
 8010794:	3e01      	subs	r6, #1
 8010796:	e7ea      	b.n	801076e <__mdiff+0xde>
 8010798:	08013aec 	.word	0x08013aec
 801079c:	08013b7c 	.word	0x08013b7c

080107a0 <__ulp>:
 80107a0:	b082      	sub	sp, #8
 80107a2:	ed8d 0b00 	vstr	d0, [sp]
 80107a6:	9b01      	ldr	r3, [sp, #4]
 80107a8:	4912      	ldr	r1, [pc, #72]	; (80107f4 <__ulp+0x54>)
 80107aa:	4019      	ands	r1, r3
 80107ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80107b0:	2900      	cmp	r1, #0
 80107b2:	dd05      	ble.n	80107c0 <__ulp+0x20>
 80107b4:	2200      	movs	r2, #0
 80107b6:	460b      	mov	r3, r1
 80107b8:	ec43 2b10 	vmov	d0, r2, r3
 80107bc:	b002      	add	sp, #8
 80107be:	4770      	bx	lr
 80107c0:	4249      	negs	r1, r1
 80107c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80107c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80107ca:	f04f 0200 	mov.w	r2, #0
 80107ce:	f04f 0300 	mov.w	r3, #0
 80107d2:	da04      	bge.n	80107de <__ulp+0x3e>
 80107d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80107d8:	fa41 f300 	asr.w	r3, r1, r0
 80107dc:	e7ec      	b.n	80107b8 <__ulp+0x18>
 80107de:	f1a0 0114 	sub.w	r1, r0, #20
 80107e2:	291e      	cmp	r1, #30
 80107e4:	bfda      	itte	le
 80107e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80107ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80107ee:	2101      	movgt	r1, #1
 80107f0:	460a      	mov	r2, r1
 80107f2:	e7e1      	b.n	80107b8 <__ulp+0x18>
 80107f4:	7ff00000 	.word	0x7ff00000

080107f8 <__b2d>:
 80107f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107fa:	6905      	ldr	r5, [r0, #16]
 80107fc:	f100 0714 	add.w	r7, r0, #20
 8010800:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010804:	1f2e      	subs	r6, r5, #4
 8010806:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801080a:	4620      	mov	r0, r4
 801080c:	f7ff fd52 	bl	80102b4 <__hi0bits>
 8010810:	f1c0 0320 	rsb	r3, r0, #32
 8010814:	280a      	cmp	r0, #10
 8010816:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010894 <__b2d+0x9c>
 801081a:	600b      	str	r3, [r1, #0]
 801081c:	dc14      	bgt.n	8010848 <__b2d+0x50>
 801081e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010822:	fa24 f10e 	lsr.w	r1, r4, lr
 8010826:	42b7      	cmp	r7, r6
 8010828:	ea41 030c 	orr.w	r3, r1, ip
 801082c:	bf34      	ite	cc
 801082e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010832:	2100      	movcs	r1, #0
 8010834:	3015      	adds	r0, #21
 8010836:	fa04 f000 	lsl.w	r0, r4, r0
 801083a:	fa21 f10e 	lsr.w	r1, r1, lr
 801083e:	ea40 0201 	orr.w	r2, r0, r1
 8010842:	ec43 2b10 	vmov	d0, r2, r3
 8010846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010848:	42b7      	cmp	r7, r6
 801084a:	bf3a      	itte	cc
 801084c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010850:	f1a5 0608 	subcc.w	r6, r5, #8
 8010854:	2100      	movcs	r1, #0
 8010856:	380b      	subs	r0, #11
 8010858:	d017      	beq.n	801088a <__b2d+0x92>
 801085a:	f1c0 0c20 	rsb	ip, r0, #32
 801085e:	fa04 f500 	lsl.w	r5, r4, r0
 8010862:	42be      	cmp	r6, r7
 8010864:	fa21 f40c 	lsr.w	r4, r1, ip
 8010868:	ea45 0504 	orr.w	r5, r5, r4
 801086c:	bf8c      	ite	hi
 801086e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010872:	2400      	movls	r4, #0
 8010874:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010878:	fa01 f000 	lsl.w	r0, r1, r0
 801087c:	fa24 f40c 	lsr.w	r4, r4, ip
 8010880:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010884:	ea40 0204 	orr.w	r2, r0, r4
 8010888:	e7db      	b.n	8010842 <__b2d+0x4a>
 801088a:	ea44 030c 	orr.w	r3, r4, ip
 801088e:	460a      	mov	r2, r1
 8010890:	e7d7      	b.n	8010842 <__b2d+0x4a>
 8010892:	bf00      	nop
 8010894:	3ff00000 	.word	0x3ff00000

08010898 <__d2b>:
 8010898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801089c:	4689      	mov	r9, r1
 801089e:	2101      	movs	r1, #1
 80108a0:	ec57 6b10 	vmov	r6, r7, d0
 80108a4:	4690      	mov	r8, r2
 80108a6:	f7ff fc0f 	bl	80100c8 <_Balloc>
 80108aa:	4604      	mov	r4, r0
 80108ac:	b930      	cbnz	r0, 80108bc <__d2b+0x24>
 80108ae:	4602      	mov	r2, r0
 80108b0:	4b25      	ldr	r3, [pc, #148]	; (8010948 <__d2b+0xb0>)
 80108b2:	4826      	ldr	r0, [pc, #152]	; (801094c <__d2b+0xb4>)
 80108b4:	f240 310a 	movw	r1, #778	; 0x30a
 80108b8:	f000 fe66 	bl	8011588 <__assert_func>
 80108bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80108c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80108c4:	bb35      	cbnz	r5, 8010914 <__d2b+0x7c>
 80108c6:	2e00      	cmp	r6, #0
 80108c8:	9301      	str	r3, [sp, #4]
 80108ca:	d028      	beq.n	801091e <__d2b+0x86>
 80108cc:	4668      	mov	r0, sp
 80108ce:	9600      	str	r6, [sp, #0]
 80108d0:	f7ff fd10 	bl	80102f4 <__lo0bits>
 80108d4:	9900      	ldr	r1, [sp, #0]
 80108d6:	b300      	cbz	r0, 801091a <__d2b+0x82>
 80108d8:	9a01      	ldr	r2, [sp, #4]
 80108da:	f1c0 0320 	rsb	r3, r0, #32
 80108de:	fa02 f303 	lsl.w	r3, r2, r3
 80108e2:	430b      	orrs	r3, r1
 80108e4:	40c2      	lsrs	r2, r0
 80108e6:	6163      	str	r3, [r4, #20]
 80108e8:	9201      	str	r2, [sp, #4]
 80108ea:	9b01      	ldr	r3, [sp, #4]
 80108ec:	61a3      	str	r3, [r4, #24]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	bf14      	ite	ne
 80108f2:	2202      	movne	r2, #2
 80108f4:	2201      	moveq	r2, #1
 80108f6:	6122      	str	r2, [r4, #16]
 80108f8:	b1d5      	cbz	r5, 8010930 <__d2b+0x98>
 80108fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80108fe:	4405      	add	r5, r0
 8010900:	f8c9 5000 	str.w	r5, [r9]
 8010904:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010908:	f8c8 0000 	str.w	r0, [r8]
 801090c:	4620      	mov	r0, r4
 801090e:	b003      	add	sp, #12
 8010910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010918:	e7d5      	b.n	80108c6 <__d2b+0x2e>
 801091a:	6161      	str	r1, [r4, #20]
 801091c:	e7e5      	b.n	80108ea <__d2b+0x52>
 801091e:	a801      	add	r0, sp, #4
 8010920:	f7ff fce8 	bl	80102f4 <__lo0bits>
 8010924:	9b01      	ldr	r3, [sp, #4]
 8010926:	6163      	str	r3, [r4, #20]
 8010928:	2201      	movs	r2, #1
 801092a:	6122      	str	r2, [r4, #16]
 801092c:	3020      	adds	r0, #32
 801092e:	e7e3      	b.n	80108f8 <__d2b+0x60>
 8010930:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010934:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010938:	f8c9 0000 	str.w	r0, [r9]
 801093c:	6918      	ldr	r0, [r3, #16]
 801093e:	f7ff fcb9 	bl	80102b4 <__hi0bits>
 8010942:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010946:	e7df      	b.n	8010908 <__d2b+0x70>
 8010948:	08013aec 	.word	0x08013aec
 801094c:	08013b7c 	.word	0x08013b7c

08010950 <__ratio>:
 8010950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010954:	4688      	mov	r8, r1
 8010956:	4669      	mov	r1, sp
 8010958:	4681      	mov	r9, r0
 801095a:	f7ff ff4d 	bl	80107f8 <__b2d>
 801095e:	a901      	add	r1, sp, #4
 8010960:	4640      	mov	r0, r8
 8010962:	ec55 4b10 	vmov	r4, r5, d0
 8010966:	f7ff ff47 	bl	80107f8 <__b2d>
 801096a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801096e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010972:	eba3 0c02 	sub.w	ip, r3, r2
 8010976:	e9dd 3200 	ldrd	r3, r2, [sp]
 801097a:	1a9b      	subs	r3, r3, r2
 801097c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010980:	ec51 0b10 	vmov	r0, r1, d0
 8010984:	2b00      	cmp	r3, #0
 8010986:	bfd6      	itet	le
 8010988:	460a      	movle	r2, r1
 801098a:	462a      	movgt	r2, r5
 801098c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010990:	468b      	mov	fp, r1
 8010992:	462f      	mov	r7, r5
 8010994:	bfd4      	ite	le
 8010996:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801099a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801099e:	4620      	mov	r0, r4
 80109a0:	ee10 2a10 	vmov	r2, s0
 80109a4:	465b      	mov	r3, fp
 80109a6:	4639      	mov	r1, r7
 80109a8:	f7ef ff58 	bl	800085c <__aeabi_ddiv>
 80109ac:	ec41 0b10 	vmov	d0, r0, r1
 80109b0:	b003      	add	sp, #12
 80109b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080109b6 <__copybits>:
 80109b6:	3901      	subs	r1, #1
 80109b8:	b570      	push	{r4, r5, r6, lr}
 80109ba:	1149      	asrs	r1, r1, #5
 80109bc:	6914      	ldr	r4, [r2, #16]
 80109be:	3101      	adds	r1, #1
 80109c0:	f102 0314 	add.w	r3, r2, #20
 80109c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80109c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80109cc:	1f05      	subs	r5, r0, #4
 80109ce:	42a3      	cmp	r3, r4
 80109d0:	d30c      	bcc.n	80109ec <__copybits+0x36>
 80109d2:	1aa3      	subs	r3, r4, r2
 80109d4:	3b11      	subs	r3, #17
 80109d6:	f023 0303 	bic.w	r3, r3, #3
 80109da:	3211      	adds	r2, #17
 80109dc:	42a2      	cmp	r2, r4
 80109de:	bf88      	it	hi
 80109e0:	2300      	movhi	r3, #0
 80109e2:	4418      	add	r0, r3
 80109e4:	2300      	movs	r3, #0
 80109e6:	4288      	cmp	r0, r1
 80109e8:	d305      	bcc.n	80109f6 <__copybits+0x40>
 80109ea:	bd70      	pop	{r4, r5, r6, pc}
 80109ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80109f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80109f4:	e7eb      	b.n	80109ce <__copybits+0x18>
 80109f6:	f840 3b04 	str.w	r3, [r0], #4
 80109fa:	e7f4      	b.n	80109e6 <__copybits+0x30>

080109fc <__any_on>:
 80109fc:	f100 0214 	add.w	r2, r0, #20
 8010a00:	6900      	ldr	r0, [r0, #16]
 8010a02:	114b      	asrs	r3, r1, #5
 8010a04:	4298      	cmp	r0, r3
 8010a06:	b510      	push	{r4, lr}
 8010a08:	db11      	blt.n	8010a2e <__any_on+0x32>
 8010a0a:	dd0a      	ble.n	8010a22 <__any_on+0x26>
 8010a0c:	f011 011f 	ands.w	r1, r1, #31
 8010a10:	d007      	beq.n	8010a22 <__any_on+0x26>
 8010a12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010a16:	fa24 f001 	lsr.w	r0, r4, r1
 8010a1a:	fa00 f101 	lsl.w	r1, r0, r1
 8010a1e:	428c      	cmp	r4, r1
 8010a20:	d10b      	bne.n	8010a3a <__any_on+0x3e>
 8010a22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d803      	bhi.n	8010a32 <__any_on+0x36>
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	bd10      	pop	{r4, pc}
 8010a2e:	4603      	mov	r3, r0
 8010a30:	e7f7      	b.n	8010a22 <__any_on+0x26>
 8010a32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a36:	2900      	cmp	r1, #0
 8010a38:	d0f5      	beq.n	8010a26 <__any_on+0x2a>
 8010a3a:	2001      	movs	r0, #1
 8010a3c:	e7f6      	b.n	8010a2c <__any_on+0x30>

08010a3e <_calloc_r>:
 8010a3e:	b513      	push	{r0, r1, r4, lr}
 8010a40:	434a      	muls	r2, r1
 8010a42:	4611      	mov	r1, r2
 8010a44:	9201      	str	r2, [sp, #4]
 8010a46:	f7fc fac1 	bl	800cfcc <_malloc_r>
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	b118      	cbz	r0, 8010a56 <_calloc_r+0x18>
 8010a4e:	9a01      	ldr	r2, [sp, #4]
 8010a50:	2100      	movs	r1, #0
 8010a52:	f7fc fa63 	bl	800cf1c <memset>
 8010a56:	4620      	mov	r0, r4
 8010a58:	b002      	add	sp, #8
 8010a5a:	bd10      	pop	{r4, pc}

08010a5c <__ssputs_r>:
 8010a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a60:	688e      	ldr	r6, [r1, #8]
 8010a62:	429e      	cmp	r6, r3
 8010a64:	4682      	mov	sl, r0
 8010a66:	460c      	mov	r4, r1
 8010a68:	4690      	mov	r8, r2
 8010a6a:	461f      	mov	r7, r3
 8010a6c:	d838      	bhi.n	8010ae0 <__ssputs_r+0x84>
 8010a6e:	898a      	ldrh	r2, [r1, #12]
 8010a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a74:	d032      	beq.n	8010adc <__ssputs_r+0x80>
 8010a76:	6825      	ldr	r5, [r4, #0]
 8010a78:	6909      	ldr	r1, [r1, #16]
 8010a7a:	eba5 0901 	sub.w	r9, r5, r1
 8010a7e:	6965      	ldr	r5, [r4, #20]
 8010a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a88:	3301      	adds	r3, #1
 8010a8a:	444b      	add	r3, r9
 8010a8c:	106d      	asrs	r5, r5, #1
 8010a8e:	429d      	cmp	r5, r3
 8010a90:	bf38      	it	cc
 8010a92:	461d      	movcc	r5, r3
 8010a94:	0553      	lsls	r3, r2, #21
 8010a96:	d531      	bpl.n	8010afc <__ssputs_r+0xa0>
 8010a98:	4629      	mov	r1, r5
 8010a9a:	f7fc fa97 	bl	800cfcc <_malloc_r>
 8010a9e:	4606      	mov	r6, r0
 8010aa0:	b950      	cbnz	r0, 8010ab8 <__ssputs_r+0x5c>
 8010aa2:	230c      	movs	r3, #12
 8010aa4:	f8ca 3000 	str.w	r3, [sl]
 8010aa8:	89a3      	ldrh	r3, [r4, #12]
 8010aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aae:	81a3      	strh	r3, [r4, #12]
 8010ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab8:	6921      	ldr	r1, [r4, #16]
 8010aba:	464a      	mov	r2, r9
 8010abc:	f7fc fa20 	bl	800cf00 <memcpy>
 8010ac0:	89a3      	ldrh	r3, [r4, #12]
 8010ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010aca:	81a3      	strh	r3, [r4, #12]
 8010acc:	6126      	str	r6, [r4, #16]
 8010ace:	6165      	str	r5, [r4, #20]
 8010ad0:	444e      	add	r6, r9
 8010ad2:	eba5 0509 	sub.w	r5, r5, r9
 8010ad6:	6026      	str	r6, [r4, #0]
 8010ad8:	60a5      	str	r5, [r4, #8]
 8010ada:	463e      	mov	r6, r7
 8010adc:	42be      	cmp	r6, r7
 8010ade:	d900      	bls.n	8010ae2 <__ssputs_r+0x86>
 8010ae0:	463e      	mov	r6, r7
 8010ae2:	4632      	mov	r2, r6
 8010ae4:	6820      	ldr	r0, [r4, #0]
 8010ae6:	4641      	mov	r1, r8
 8010ae8:	f000 ff38 	bl	801195c <memmove>
 8010aec:	68a3      	ldr	r3, [r4, #8]
 8010aee:	6822      	ldr	r2, [r4, #0]
 8010af0:	1b9b      	subs	r3, r3, r6
 8010af2:	4432      	add	r2, r6
 8010af4:	60a3      	str	r3, [r4, #8]
 8010af6:	6022      	str	r2, [r4, #0]
 8010af8:	2000      	movs	r0, #0
 8010afa:	e7db      	b.n	8010ab4 <__ssputs_r+0x58>
 8010afc:	462a      	mov	r2, r5
 8010afe:	f000 ff47 	bl	8011990 <_realloc_r>
 8010b02:	4606      	mov	r6, r0
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d1e1      	bne.n	8010acc <__ssputs_r+0x70>
 8010b08:	6921      	ldr	r1, [r4, #16]
 8010b0a:	4650      	mov	r0, sl
 8010b0c:	f7fc fa0e 	bl	800cf2c <_free_r>
 8010b10:	e7c7      	b.n	8010aa2 <__ssputs_r+0x46>
	...

08010b14 <_svfiprintf_r>:
 8010b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b18:	4698      	mov	r8, r3
 8010b1a:	898b      	ldrh	r3, [r1, #12]
 8010b1c:	061b      	lsls	r3, r3, #24
 8010b1e:	b09d      	sub	sp, #116	; 0x74
 8010b20:	4607      	mov	r7, r0
 8010b22:	460d      	mov	r5, r1
 8010b24:	4614      	mov	r4, r2
 8010b26:	d50e      	bpl.n	8010b46 <_svfiprintf_r+0x32>
 8010b28:	690b      	ldr	r3, [r1, #16]
 8010b2a:	b963      	cbnz	r3, 8010b46 <_svfiprintf_r+0x32>
 8010b2c:	2140      	movs	r1, #64	; 0x40
 8010b2e:	f7fc fa4d 	bl	800cfcc <_malloc_r>
 8010b32:	6028      	str	r0, [r5, #0]
 8010b34:	6128      	str	r0, [r5, #16]
 8010b36:	b920      	cbnz	r0, 8010b42 <_svfiprintf_r+0x2e>
 8010b38:	230c      	movs	r3, #12
 8010b3a:	603b      	str	r3, [r7, #0]
 8010b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b40:	e0d1      	b.n	8010ce6 <_svfiprintf_r+0x1d2>
 8010b42:	2340      	movs	r3, #64	; 0x40
 8010b44:	616b      	str	r3, [r5, #20]
 8010b46:	2300      	movs	r3, #0
 8010b48:	9309      	str	r3, [sp, #36]	; 0x24
 8010b4a:	2320      	movs	r3, #32
 8010b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b54:	2330      	movs	r3, #48	; 0x30
 8010b56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010d00 <_svfiprintf_r+0x1ec>
 8010b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b5e:	f04f 0901 	mov.w	r9, #1
 8010b62:	4623      	mov	r3, r4
 8010b64:	469a      	mov	sl, r3
 8010b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b6a:	b10a      	cbz	r2, 8010b70 <_svfiprintf_r+0x5c>
 8010b6c:	2a25      	cmp	r2, #37	; 0x25
 8010b6e:	d1f9      	bne.n	8010b64 <_svfiprintf_r+0x50>
 8010b70:	ebba 0b04 	subs.w	fp, sl, r4
 8010b74:	d00b      	beq.n	8010b8e <_svfiprintf_r+0x7a>
 8010b76:	465b      	mov	r3, fp
 8010b78:	4622      	mov	r2, r4
 8010b7a:	4629      	mov	r1, r5
 8010b7c:	4638      	mov	r0, r7
 8010b7e:	f7ff ff6d 	bl	8010a5c <__ssputs_r>
 8010b82:	3001      	adds	r0, #1
 8010b84:	f000 80aa 	beq.w	8010cdc <_svfiprintf_r+0x1c8>
 8010b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b8a:	445a      	add	r2, fp
 8010b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f000 80a2 	beq.w	8010cdc <_svfiprintf_r+0x1c8>
 8010b98:	2300      	movs	r3, #0
 8010b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ba2:	f10a 0a01 	add.w	sl, sl, #1
 8010ba6:	9304      	str	r3, [sp, #16]
 8010ba8:	9307      	str	r3, [sp, #28]
 8010baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010bae:	931a      	str	r3, [sp, #104]	; 0x68
 8010bb0:	4654      	mov	r4, sl
 8010bb2:	2205      	movs	r2, #5
 8010bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bb8:	4851      	ldr	r0, [pc, #324]	; (8010d00 <_svfiprintf_r+0x1ec>)
 8010bba:	f7ef fb19 	bl	80001f0 <memchr>
 8010bbe:	9a04      	ldr	r2, [sp, #16]
 8010bc0:	b9d8      	cbnz	r0, 8010bfa <_svfiprintf_r+0xe6>
 8010bc2:	06d0      	lsls	r0, r2, #27
 8010bc4:	bf44      	itt	mi
 8010bc6:	2320      	movmi	r3, #32
 8010bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bcc:	0711      	lsls	r1, r2, #28
 8010bce:	bf44      	itt	mi
 8010bd0:	232b      	movmi	r3, #43	; 0x2b
 8010bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8010bda:	2b2a      	cmp	r3, #42	; 0x2a
 8010bdc:	d015      	beq.n	8010c0a <_svfiprintf_r+0xf6>
 8010bde:	9a07      	ldr	r2, [sp, #28]
 8010be0:	4654      	mov	r4, sl
 8010be2:	2000      	movs	r0, #0
 8010be4:	f04f 0c0a 	mov.w	ip, #10
 8010be8:	4621      	mov	r1, r4
 8010bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bee:	3b30      	subs	r3, #48	; 0x30
 8010bf0:	2b09      	cmp	r3, #9
 8010bf2:	d94e      	bls.n	8010c92 <_svfiprintf_r+0x17e>
 8010bf4:	b1b0      	cbz	r0, 8010c24 <_svfiprintf_r+0x110>
 8010bf6:	9207      	str	r2, [sp, #28]
 8010bf8:	e014      	b.n	8010c24 <_svfiprintf_r+0x110>
 8010bfa:	eba0 0308 	sub.w	r3, r0, r8
 8010bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8010c02:	4313      	orrs	r3, r2
 8010c04:	9304      	str	r3, [sp, #16]
 8010c06:	46a2      	mov	sl, r4
 8010c08:	e7d2      	b.n	8010bb0 <_svfiprintf_r+0x9c>
 8010c0a:	9b03      	ldr	r3, [sp, #12]
 8010c0c:	1d19      	adds	r1, r3, #4
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	9103      	str	r1, [sp, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	bfbb      	ittet	lt
 8010c16:	425b      	neglt	r3, r3
 8010c18:	f042 0202 	orrlt.w	r2, r2, #2
 8010c1c:	9307      	strge	r3, [sp, #28]
 8010c1e:	9307      	strlt	r3, [sp, #28]
 8010c20:	bfb8      	it	lt
 8010c22:	9204      	strlt	r2, [sp, #16]
 8010c24:	7823      	ldrb	r3, [r4, #0]
 8010c26:	2b2e      	cmp	r3, #46	; 0x2e
 8010c28:	d10c      	bne.n	8010c44 <_svfiprintf_r+0x130>
 8010c2a:	7863      	ldrb	r3, [r4, #1]
 8010c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8010c2e:	d135      	bne.n	8010c9c <_svfiprintf_r+0x188>
 8010c30:	9b03      	ldr	r3, [sp, #12]
 8010c32:	1d1a      	adds	r2, r3, #4
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	9203      	str	r2, [sp, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	bfb8      	it	lt
 8010c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c40:	3402      	adds	r4, #2
 8010c42:	9305      	str	r3, [sp, #20]
 8010c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010d10 <_svfiprintf_r+0x1fc>
 8010c48:	7821      	ldrb	r1, [r4, #0]
 8010c4a:	2203      	movs	r2, #3
 8010c4c:	4650      	mov	r0, sl
 8010c4e:	f7ef facf 	bl	80001f0 <memchr>
 8010c52:	b140      	cbz	r0, 8010c66 <_svfiprintf_r+0x152>
 8010c54:	2340      	movs	r3, #64	; 0x40
 8010c56:	eba0 000a 	sub.w	r0, r0, sl
 8010c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8010c5e:	9b04      	ldr	r3, [sp, #16]
 8010c60:	4303      	orrs	r3, r0
 8010c62:	3401      	adds	r4, #1
 8010c64:	9304      	str	r3, [sp, #16]
 8010c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c6a:	4826      	ldr	r0, [pc, #152]	; (8010d04 <_svfiprintf_r+0x1f0>)
 8010c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c70:	2206      	movs	r2, #6
 8010c72:	f7ef fabd 	bl	80001f0 <memchr>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d038      	beq.n	8010cec <_svfiprintf_r+0x1d8>
 8010c7a:	4b23      	ldr	r3, [pc, #140]	; (8010d08 <_svfiprintf_r+0x1f4>)
 8010c7c:	bb1b      	cbnz	r3, 8010cc6 <_svfiprintf_r+0x1b2>
 8010c7e:	9b03      	ldr	r3, [sp, #12]
 8010c80:	3307      	adds	r3, #7
 8010c82:	f023 0307 	bic.w	r3, r3, #7
 8010c86:	3308      	adds	r3, #8
 8010c88:	9303      	str	r3, [sp, #12]
 8010c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c8c:	4433      	add	r3, r6
 8010c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c90:	e767      	b.n	8010b62 <_svfiprintf_r+0x4e>
 8010c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c96:	460c      	mov	r4, r1
 8010c98:	2001      	movs	r0, #1
 8010c9a:	e7a5      	b.n	8010be8 <_svfiprintf_r+0xd4>
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	3401      	adds	r4, #1
 8010ca0:	9305      	str	r3, [sp, #20]
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	f04f 0c0a 	mov.w	ip, #10
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cae:	3a30      	subs	r2, #48	; 0x30
 8010cb0:	2a09      	cmp	r2, #9
 8010cb2:	d903      	bls.n	8010cbc <_svfiprintf_r+0x1a8>
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d0c5      	beq.n	8010c44 <_svfiprintf_r+0x130>
 8010cb8:	9105      	str	r1, [sp, #20]
 8010cba:	e7c3      	b.n	8010c44 <_svfiprintf_r+0x130>
 8010cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e7f0      	b.n	8010ca8 <_svfiprintf_r+0x194>
 8010cc6:	ab03      	add	r3, sp, #12
 8010cc8:	9300      	str	r3, [sp, #0]
 8010cca:	462a      	mov	r2, r5
 8010ccc:	4b0f      	ldr	r3, [pc, #60]	; (8010d0c <_svfiprintf_r+0x1f8>)
 8010cce:	a904      	add	r1, sp, #16
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	f7fc fa75 	bl	800d1c0 <_printf_float>
 8010cd6:	1c42      	adds	r2, r0, #1
 8010cd8:	4606      	mov	r6, r0
 8010cda:	d1d6      	bne.n	8010c8a <_svfiprintf_r+0x176>
 8010cdc:	89ab      	ldrh	r3, [r5, #12]
 8010cde:	065b      	lsls	r3, r3, #25
 8010ce0:	f53f af2c 	bmi.w	8010b3c <_svfiprintf_r+0x28>
 8010ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ce6:	b01d      	add	sp, #116	; 0x74
 8010ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cec:	ab03      	add	r3, sp, #12
 8010cee:	9300      	str	r3, [sp, #0]
 8010cf0:	462a      	mov	r2, r5
 8010cf2:	4b06      	ldr	r3, [pc, #24]	; (8010d0c <_svfiprintf_r+0x1f8>)
 8010cf4:	a904      	add	r1, sp, #16
 8010cf6:	4638      	mov	r0, r7
 8010cf8:	f7fc fd06 	bl	800d708 <_printf_i>
 8010cfc:	e7eb      	b.n	8010cd6 <_svfiprintf_r+0x1c2>
 8010cfe:	bf00      	nop
 8010d00:	08013cdc 	.word	0x08013cdc
 8010d04:	08013ce6 	.word	0x08013ce6
 8010d08:	0800d1c1 	.word	0x0800d1c1
 8010d0c:	08010a5d 	.word	0x08010a5d
 8010d10:	08013ce2 	.word	0x08013ce2

08010d14 <_sungetc_r>:
 8010d14:	b538      	push	{r3, r4, r5, lr}
 8010d16:	1c4b      	adds	r3, r1, #1
 8010d18:	4614      	mov	r4, r2
 8010d1a:	d103      	bne.n	8010d24 <_sungetc_r+0x10>
 8010d1c:	f04f 35ff 	mov.w	r5, #4294967295
 8010d20:	4628      	mov	r0, r5
 8010d22:	bd38      	pop	{r3, r4, r5, pc}
 8010d24:	8993      	ldrh	r3, [r2, #12]
 8010d26:	f023 0320 	bic.w	r3, r3, #32
 8010d2a:	8193      	strh	r3, [r2, #12]
 8010d2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d2e:	6852      	ldr	r2, [r2, #4]
 8010d30:	b2cd      	uxtb	r5, r1
 8010d32:	b18b      	cbz	r3, 8010d58 <_sungetc_r+0x44>
 8010d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d36:	4293      	cmp	r3, r2
 8010d38:	dd08      	ble.n	8010d4c <_sungetc_r+0x38>
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	1e5a      	subs	r2, r3, #1
 8010d3e:	6022      	str	r2, [r4, #0]
 8010d40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010d44:	6863      	ldr	r3, [r4, #4]
 8010d46:	3301      	adds	r3, #1
 8010d48:	6063      	str	r3, [r4, #4]
 8010d4a:	e7e9      	b.n	8010d20 <_sungetc_r+0xc>
 8010d4c:	4621      	mov	r1, r4
 8010d4e:	f000 fbd3 	bl	80114f8 <__submore>
 8010d52:	2800      	cmp	r0, #0
 8010d54:	d0f1      	beq.n	8010d3a <_sungetc_r+0x26>
 8010d56:	e7e1      	b.n	8010d1c <_sungetc_r+0x8>
 8010d58:	6921      	ldr	r1, [r4, #16]
 8010d5a:	6823      	ldr	r3, [r4, #0]
 8010d5c:	b151      	cbz	r1, 8010d74 <_sungetc_r+0x60>
 8010d5e:	4299      	cmp	r1, r3
 8010d60:	d208      	bcs.n	8010d74 <_sungetc_r+0x60>
 8010d62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010d66:	42a9      	cmp	r1, r5
 8010d68:	d104      	bne.n	8010d74 <_sungetc_r+0x60>
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	3201      	adds	r2, #1
 8010d6e:	6023      	str	r3, [r4, #0]
 8010d70:	6062      	str	r2, [r4, #4]
 8010d72:	e7d5      	b.n	8010d20 <_sungetc_r+0xc>
 8010d74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8010d7e:	2303      	movs	r3, #3
 8010d80:	63a3      	str	r3, [r4, #56]	; 0x38
 8010d82:	4623      	mov	r3, r4
 8010d84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010d88:	6023      	str	r3, [r4, #0]
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	e7dc      	b.n	8010d48 <_sungetc_r+0x34>

08010d8e <__ssrefill_r>:
 8010d8e:	b510      	push	{r4, lr}
 8010d90:	460c      	mov	r4, r1
 8010d92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010d94:	b169      	cbz	r1, 8010db2 <__ssrefill_r+0x24>
 8010d96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d9a:	4299      	cmp	r1, r3
 8010d9c:	d001      	beq.n	8010da2 <__ssrefill_r+0x14>
 8010d9e:	f7fc f8c5 	bl	800cf2c <_free_r>
 8010da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010da4:	6063      	str	r3, [r4, #4]
 8010da6:	2000      	movs	r0, #0
 8010da8:	6360      	str	r0, [r4, #52]	; 0x34
 8010daa:	b113      	cbz	r3, 8010db2 <__ssrefill_r+0x24>
 8010dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010dae:	6023      	str	r3, [r4, #0]
 8010db0:	bd10      	pop	{r4, pc}
 8010db2:	6923      	ldr	r3, [r4, #16]
 8010db4:	6023      	str	r3, [r4, #0]
 8010db6:	2300      	movs	r3, #0
 8010db8:	6063      	str	r3, [r4, #4]
 8010dba:	89a3      	ldrh	r3, [r4, #12]
 8010dbc:	f043 0320 	orr.w	r3, r3, #32
 8010dc0:	81a3      	strh	r3, [r4, #12]
 8010dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8010dc6:	e7f3      	b.n	8010db0 <__ssrefill_r+0x22>

08010dc8 <__ssvfiscanf_r>:
 8010dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dcc:	460c      	mov	r4, r1
 8010dce:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8010dd2:	2100      	movs	r1, #0
 8010dd4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010dd8:	49b2      	ldr	r1, [pc, #712]	; (80110a4 <__ssvfiscanf_r+0x2dc>)
 8010dda:	91a0      	str	r1, [sp, #640]	; 0x280
 8010ddc:	f10d 0804 	add.w	r8, sp, #4
 8010de0:	49b1      	ldr	r1, [pc, #708]	; (80110a8 <__ssvfiscanf_r+0x2e0>)
 8010de2:	4fb2      	ldr	r7, [pc, #712]	; (80110ac <__ssvfiscanf_r+0x2e4>)
 8010de4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80110b0 <__ssvfiscanf_r+0x2e8>
 8010de8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010dec:	4606      	mov	r6, r0
 8010dee:	91a1      	str	r1, [sp, #644]	; 0x284
 8010df0:	9300      	str	r3, [sp, #0]
 8010df2:	f892 a000 	ldrb.w	sl, [r2]
 8010df6:	f1ba 0f00 	cmp.w	sl, #0
 8010dfa:	f000 8151 	beq.w	80110a0 <__ssvfiscanf_r+0x2d8>
 8010dfe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8010e02:	f013 0308 	ands.w	r3, r3, #8
 8010e06:	f102 0501 	add.w	r5, r2, #1
 8010e0a:	d019      	beq.n	8010e40 <__ssvfiscanf_r+0x78>
 8010e0c:	6863      	ldr	r3, [r4, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	dd0f      	ble.n	8010e32 <__ssvfiscanf_r+0x6a>
 8010e12:	6823      	ldr	r3, [r4, #0]
 8010e14:	781a      	ldrb	r2, [r3, #0]
 8010e16:	5cba      	ldrb	r2, [r7, r2]
 8010e18:	0712      	lsls	r2, r2, #28
 8010e1a:	d401      	bmi.n	8010e20 <__ssvfiscanf_r+0x58>
 8010e1c:	462a      	mov	r2, r5
 8010e1e:	e7e8      	b.n	8010df2 <__ssvfiscanf_r+0x2a>
 8010e20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010e22:	3201      	adds	r2, #1
 8010e24:	9245      	str	r2, [sp, #276]	; 0x114
 8010e26:	6862      	ldr	r2, [r4, #4]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	3a01      	subs	r2, #1
 8010e2c:	6062      	str	r2, [r4, #4]
 8010e2e:	6023      	str	r3, [r4, #0]
 8010e30:	e7ec      	b.n	8010e0c <__ssvfiscanf_r+0x44>
 8010e32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010e34:	4621      	mov	r1, r4
 8010e36:	4630      	mov	r0, r6
 8010e38:	4798      	blx	r3
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	d0e9      	beq.n	8010e12 <__ssvfiscanf_r+0x4a>
 8010e3e:	e7ed      	b.n	8010e1c <__ssvfiscanf_r+0x54>
 8010e40:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8010e44:	f040 8083 	bne.w	8010f4e <__ssvfiscanf_r+0x186>
 8010e48:	9341      	str	r3, [sp, #260]	; 0x104
 8010e4a:	9343      	str	r3, [sp, #268]	; 0x10c
 8010e4c:	7853      	ldrb	r3, [r2, #1]
 8010e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8010e50:	bf02      	ittt	eq
 8010e52:	2310      	moveq	r3, #16
 8010e54:	1c95      	addeq	r5, r2, #2
 8010e56:	9341      	streq	r3, [sp, #260]	; 0x104
 8010e58:	220a      	movs	r2, #10
 8010e5a:	46ab      	mov	fp, r5
 8010e5c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8010e60:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010e64:	2b09      	cmp	r3, #9
 8010e66:	d91d      	bls.n	8010ea4 <__ssvfiscanf_r+0xdc>
 8010e68:	4891      	ldr	r0, [pc, #580]	; (80110b0 <__ssvfiscanf_r+0x2e8>)
 8010e6a:	2203      	movs	r2, #3
 8010e6c:	f7ef f9c0 	bl	80001f0 <memchr>
 8010e70:	b140      	cbz	r0, 8010e84 <__ssvfiscanf_r+0xbc>
 8010e72:	2301      	movs	r3, #1
 8010e74:	eba0 0009 	sub.w	r0, r0, r9
 8010e78:	fa03 f000 	lsl.w	r0, r3, r0
 8010e7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010e7e:	4318      	orrs	r0, r3
 8010e80:	9041      	str	r0, [sp, #260]	; 0x104
 8010e82:	465d      	mov	r5, fp
 8010e84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010e88:	2b78      	cmp	r3, #120	; 0x78
 8010e8a:	d806      	bhi.n	8010e9a <__ssvfiscanf_r+0xd2>
 8010e8c:	2b57      	cmp	r3, #87	; 0x57
 8010e8e:	d810      	bhi.n	8010eb2 <__ssvfiscanf_r+0xea>
 8010e90:	2b25      	cmp	r3, #37	; 0x25
 8010e92:	d05c      	beq.n	8010f4e <__ssvfiscanf_r+0x186>
 8010e94:	d856      	bhi.n	8010f44 <__ssvfiscanf_r+0x17c>
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d074      	beq.n	8010f84 <__ssvfiscanf_r+0x1bc>
 8010e9a:	2303      	movs	r3, #3
 8010e9c:	9347      	str	r3, [sp, #284]	; 0x11c
 8010e9e:	230a      	movs	r3, #10
 8010ea0:	9342      	str	r3, [sp, #264]	; 0x108
 8010ea2:	e081      	b.n	8010fa8 <__ssvfiscanf_r+0x1e0>
 8010ea4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010ea6:	fb02 1303 	mla	r3, r2, r3, r1
 8010eaa:	3b30      	subs	r3, #48	; 0x30
 8010eac:	9343      	str	r3, [sp, #268]	; 0x10c
 8010eae:	465d      	mov	r5, fp
 8010eb0:	e7d3      	b.n	8010e5a <__ssvfiscanf_r+0x92>
 8010eb2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010eb6:	2a20      	cmp	r2, #32
 8010eb8:	d8ef      	bhi.n	8010e9a <__ssvfiscanf_r+0xd2>
 8010eba:	a101      	add	r1, pc, #4	; (adr r1, 8010ec0 <__ssvfiscanf_r+0xf8>)
 8010ebc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010ec0:	08010f93 	.word	0x08010f93
 8010ec4:	08010e9b 	.word	0x08010e9b
 8010ec8:	08010e9b 	.word	0x08010e9b
 8010ecc:	08010ff1 	.word	0x08010ff1
 8010ed0:	08010e9b 	.word	0x08010e9b
 8010ed4:	08010e9b 	.word	0x08010e9b
 8010ed8:	08010e9b 	.word	0x08010e9b
 8010edc:	08010e9b 	.word	0x08010e9b
 8010ee0:	08010e9b 	.word	0x08010e9b
 8010ee4:	08010e9b 	.word	0x08010e9b
 8010ee8:	08010e9b 	.word	0x08010e9b
 8010eec:	08011007 	.word	0x08011007
 8010ef0:	08010fdd 	.word	0x08010fdd
 8010ef4:	08010f4b 	.word	0x08010f4b
 8010ef8:	08010f4b 	.word	0x08010f4b
 8010efc:	08010f4b 	.word	0x08010f4b
 8010f00:	08010e9b 	.word	0x08010e9b
 8010f04:	08010fe1 	.word	0x08010fe1
 8010f08:	08010e9b 	.word	0x08010e9b
 8010f0c:	08010e9b 	.word	0x08010e9b
 8010f10:	08010e9b 	.word	0x08010e9b
 8010f14:	08010e9b 	.word	0x08010e9b
 8010f18:	08011017 	.word	0x08011017
 8010f1c:	08010fe9 	.word	0x08010fe9
 8010f20:	08010f8b 	.word	0x08010f8b
 8010f24:	08010e9b 	.word	0x08010e9b
 8010f28:	08010e9b 	.word	0x08010e9b
 8010f2c:	08011013 	.word	0x08011013
 8010f30:	08010e9b 	.word	0x08010e9b
 8010f34:	08010fdd 	.word	0x08010fdd
 8010f38:	08010e9b 	.word	0x08010e9b
 8010f3c:	08010e9b 	.word	0x08010e9b
 8010f40:	08010f93 	.word	0x08010f93
 8010f44:	3b45      	subs	r3, #69	; 0x45
 8010f46:	2b02      	cmp	r3, #2
 8010f48:	d8a7      	bhi.n	8010e9a <__ssvfiscanf_r+0xd2>
 8010f4a:	2305      	movs	r3, #5
 8010f4c:	e02b      	b.n	8010fa6 <__ssvfiscanf_r+0x1de>
 8010f4e:	6863      	ldr	r3, [r4, #4]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	dd0d      	ble.n	8010f70 <__ssvfiscanf_r+0x1a8>
 8010f54:	6823      	ldr	r3, [r4, #0]
 8010f56:	781a      	ldrb	r2, [r3, #0]
 8010f58:	4552      	cmp	r2, sl
 8010f5a:	f040 80a1 	bne.w	80110a0 <__ssvfiscanf_r+0x2d8>
 8010f5e:	3301      	adds	r3, #1
 8010f60:	6862      	ldr	r2, [r4, #4]
 8010f62:	6023      	str	r3, [r4, #0]
 8010f64:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010f66:	3a01      	subs	r2, #1
 8010f68:	3301      	adds	r3, #1
 8010f6a:	6062      	str	r2, [r4, #4]
 8010f6c:	9345      	str	r3, [sp, #276]	; 0x114
 8010f6e:	e755      	b.n	8010e1c <__ssvfiscanf_r+0x54>
 8010f70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010f72:	4621      	mov	r1, r4
 8010f74:	4630      	mov	r0, r6
 8010f76:	4798      	blx	r3
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	d0eb      	beq.n	8010f54 <__ssvfiscanf_r+0x18c>
 8010f7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	f040 8084 	bne.w	801108c <__ssvfiscanf_r+0x2c4>
 8010f84:	f04f 30ff 	mov.w	r0, #4294967295
 8010f88:	e086      	b.n	8011098 <__ssvfiscanf_r+0x2d0>
 8010f8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010f8c:	f042 0220 	orr.w	r2, r2, #32
 8010f90:	9241      	str	r2, [sp, #260]	; 0x104
 8010f92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010f98:	9241      	str	r2, [sp, #260]	; 0x104
 8010f9a:	2210      	movs	r2, #16
 8010f9c:	2b6f      	cmp	r3, #111	; 0x6f
 8010f9e:	9242      	str	r2, [sp, #264]	; 0x108
 8010fa0:	bf34      	ite	cc
 8010fa2:	2303      	movcc	r3, #3
 8010fa4:	2304      	movcs	r3, #4
 8010fa6:	9347      	str	r3, [sp, #284]	; 0x11c
 8010fa8:	6863      	ldr	r3, [r4, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	dd41      	ble.n	8011032 <__ssvfiscanf_r+0x26a>
 8010fae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010fb0:	0659      	lsls	r1, r3, #25
 8010fb2:	d404      	bmi.n	8010fbe <__ssvfiscanf_r+0x1f6>
 8010fb4:	6823      	ldr	r3, [r4, #0]
 8010fb6:	781a      	ldrb	r2, [r3, #0]
 8010fb8:	5cba      	ldrb	r2, [r7, r2]
 8010fba:	0712      	lsls	r2, r2, #28
 8010fbc:	d440      	bmi.n	8011040 <__ssvfiscanf_r+0x278>
 8010fbe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010fc0:	2b02      	cmp	r3, #2
 8010fc2:	dc4f      	bgt.n	8011064 <__ssvfiscanf_r+0x29c>
 8010fc4:	466b      	mov	r3, sp
 8010fc6:	4622      	mov	r2, r4
 8010fc8:	a941      	add	r1, sp, #260	; 0x104
 8010fca:	4630      	mov	r0, r6
 8010fcc:	f000 f874 	bl	80110b8 <_scanf_chars>
 8010fd0:	2801      	cmp	r0, #1
 8010fd2:	d065      	beq.n	80110a0 <__ssvfiscanf_r+0x2d8>
 8010fd4:	2802      	cmp	r0, #2
 8010fd6:	f47f af21 	bne.w	8010e1c <__ssvfiscanf_r+0x54>
 8010fda:	e7cf      	b.n	8010f7c <__ssvfiscanf_r+0x1b4>
 8010fdc:	220a      	movs	r2, #10
 8010fde:	e7dd      	b.n	8010f9c <__ssvfiscanf_r+0x1d4>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	9342      	str	r3, [sp, #264]	; 0x108
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	e7de      	b.n	8010fa6 <__ssvfiscanf_r+0x1de>
 8010fe8:	2308      	movs	r3, #8
 8010fea:	9342      	str	r3, [sp, #264]	; 0x108
 8010fec:	2304      	movs	r3, #4
 8010fee:	e7da      	b.n	8010fa6 <__ssvfiscanf_r+0x1de>
 8010ff0:	4629      	mov	r1, r5
 8010ff2:	4640      	mov	r0, r8
 8010ff4:	f000 f9c8 	bl	8011388 <__sccl>
 8010ff8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ffe:	9341      	str	r3, [sp, #260]	; 0x104
 8011000:	4605      	mov	r5, r0
 8011002:	2301      	movs	r3, #1
 8011004:	e7cf      	b.n	8010fa6 <__ssvfiscanf_r+0x1de>
 8011006:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801100c:	9341      	str	r3, [sp, #260]	; 0x104
 801100e:	2300      	movs	r3, #0
 8011010:	e7c9      	b.n	8010fa6 <__ssvfiscanf_r+0x1de>
 8011012:	2302      	movs	r3, #2
 8011014:	e7c7      	b.n	8010fa6 <__ssvfiscanf_r+0x1de>
 8011016:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011018:	06c3      	lsls	r3, r0, #27
 801101a:	f53f aeff 	bmi.w	8010e1c <__ssvfiscanf_r+0x54>
 801101e:	9b00      	ldr	r3, [sp, #0]
 8011020:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011022:	1d19      	adds	r1, r3, #4
 8011024:	9100      	str	r1, [sp, #0]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	07c0      	lsls	r0, r0, #31
 801102a:	bf4c      	ite	mi
 801102c:	801a      	strhmi	r2, [r3, #0]
 801102e:	601a      	strpl	r2, [r3, #0]
 8011030:	e6f4      	b.n	8010e1c <__ssvfiscanf_r+0x54>
 8011032:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011034:	4621      	mov	r1, r4
 8011036:	4630      	mov	r0, r6
 8011038:	4798      	blx	r3
 801103a:	2800      	cmp	r0, #0
 801103c:	d0b7      	beq.n	8010fae <__ssvfiscanf_r+0x1e6>
 801103e:	e79d      	b.n	8010f7c <__ssvfiscanf_r+0x1b4>
 8011040:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011042:	3201      	adds	r2, #1
 8011044:	9245      	str	r2, [sp, #276]	; 0x114
 8011046:	6862      	ldr	r2, [r4, #4]
 8011048:	3a01      	subs	r2, #1
 801104a:	2a00      	cmp	r2, #0
 801104c:	6062      	str	r2, [r4, #4]
 801104e:	dd02      	ble.n	8011056 <__ssvfiscanf_r+0x28e>
 8011050:	3301      	adds	r3, #1
 8011052:	6023      	str	r3, [r4, #0]
 8011054:	e7ae      	b.n	8010fb4 <__ssvfiscanf_r+0x1ec>
 8011056:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011058:	4621      	mov	r1, r4
 801105a:	4630      	mov	r0, r6
 801105c:	4798      	blx	r3
 801105e:	2800      	cmp	r0, #0
 8011060:	d0a8      	beq.n	8010fb4 <__ssvfiscanf_r+0x1ec>
 8011062:	e78b      	b.n	8010f7c <__ssvfiscanf_r+0x1b4>
 8011064:	2b04      	cmp	r3, #4
 8011066:	dc06      	bgt.n	8011076 <__ssvfiscanf_r+0x2ae>
 8011068:	466b      	mov	r3, sp
 801106a:	4622      	mov	r2, r4
 801106c:	a941      	add	r1, sp, #260	; 0x104
 801106e:	4630      	mov	r0, r6
 8011070:	f000 f87a 	bl	8011168 <_scanf_i>
 8011074:	e7ac      	b.n	8010fd0 <__ssvfiscanf_r+0x208>
 8011076:	4b0f      	ldr	r3, [pc, #60]	; (80110b4 <__ssvfiscanf_r+0x2ec>)
 8011078:	2b00      	cmp	r3, #0
 801107a:	f43f aecf 	beq.w	8010e1c <__ssvfiscanf_r+0x54>
 801107e:	466b      	mov	r3, sp
 8011080:	4622      	mov	r2, r4
 8011082:	a941      	add	r1, sp, #260	; 0x104
 8011084:	4630      	mov	r0, r6
 8011086:	f7fc fc65 	bl	800d954 <_scanf_float>
 801108a:	e7a1      	b.n	8010fd0 <__ssvfiscanf_r+0x208>
 801108c:	89a3      	ldrh	r3, [r4, #12]
 801108e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011092:	bf18      	it	ne
 8011094:	f04f 30ff 	movne.w	r0, #4294967295
 8011098:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801109c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80110a2:	e7f9      	b.n	8011098 <__ssvfiscanf_r+0x2d0>
 80110a4:	08010d15 	.word	0x08010d15
 80110a8:	08010d8f 	.word	0x08010d8f
 80110ac:	08013969 	.word	0x08013969
 80110b0:	08013ce2 	.word	0x08013ce2
 80110b4:	0800d955 	.word	0x0800d955

080110b8 <_scanf_chars>:
 80110b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110bc:	4615      	mov	r5, r2
 80110be:	688a      	ldr	r2, [r1, #8]
 80110c0:	4680      	mov	r8, r0
 80110c2:	460c      	mov	r4, r1
 80110c4:	b932      	cbnz	r2, 80110d4 <_scanf_chars+0x1c>
 80110c6:	698a      	ldr	r2, [r1, #24]
 80110c8:	2a00      	cmp	r2, #0
 80110ca:	bf0c      	ite	eq
 80110cc:	2201      	moveq	r2, #1
 80110ce:	f04f 32ff 	movne.w	r2, #4294967295
 80110d2:	608a      	str	r2, [r1, #8]
 80110d4:	6822      	ldr	r2, [r4, #0]
 80110d6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8011164 <_scanf_chars+0xac>
 80110da:	06d1      	lsls	r1, r2, #27
 80110dc:	bf5f      	itttt	pl
 80110de:	681a      	ldrpl	r2, [r3, #0]
 80110e0:	1d11      	addpl	r1, r2, #4
 80110e2:	6019      	strpl	r1, [r3, #0]
 80110e4:	6816      	ldrpl	r6, [r2, #0]
 80110e6:	2700      	movs	r7, #0
 80110e8:	69a0      	ldr	r0, [r4, #24]
 80110ea:	b188      	cbz	r0, 8011110 <_scanf_chars+0x58>
 80110ec:	2801      	cmp	r0, #1
 80110ee:	d107      	bne.n	8011100 <_scanf_chars+0x48>
 80110f0:	682b      	ldr	r3, [r5, #0]
 80110f2:	781a      	ldrb	r2, [r3, #0]
 80110f4:	6963      	ldr	r3, [r4, #20]
 80110f6:	5c9b      	ldrb	r3, [r3, r2]
 80110f8:	b953      	cbnz	r3, 8011110 <_scanf_chars+0x58>
 80110fa:	bb27      	cbnz	r7, 8011146 <_scanf_chars+0x8e>
 80110fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011100:	2802      	cmp	r0, #2
 8011102:	d120      	bne.n	8011146 <_scanf_chars+0x8e>
 8011104:	682b      	ldr	r3, [r5, #0]
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	f813 3009 	ldrb.w	r3, [r3, r9]
 801110c:	071b      	lsls	r3, r3, #28
 801110e:	d41a      	bmi.n	8011146 <_scanf_chars+0x8e>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	06da      	lsls	r2, r3, #27
 8011114:	bf5e      	ittt	pl
 8011116:	682b      	ldrpl	r3, [r5, #0]
 8011118:	781b      	ldrbpl	r3, [r3, #0]
 801111a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801111e:	682a      	ldr	r2, [r5, #0]
 8011120:	686b      	ldr	r3, [r5, #4]
 8011122:	3201      	adds	r2, #1
 8011124:	602a      	str	r2, [r5, #0]
 8011126:	68a2      	ldr	r2, [r4, #8]
 8011128:	3b01      	subs	r3, #1
 801112a:	3a01      	subs	r2, #1
 801112c:	606b      	str	r3, [r5, #4]
 801112e:	3701      	adds	r7, #1
 8011130:	60a2      	str	r2, [r4, #8]
 8011132:	b142      	cbz	r2, 8011146 <_scanf_chars+0x8e>
 8011134:	2b00      	cmp	r3, #0
 8011136:	dcd7      	bgt.n	80110e8 <_scanf_chars+0x30>
 8011138:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801113c:	4629      	mov	r1, r5
 801113e:	4640      	mov	r0, r8
 8011140:	4798      	blx	r3
 8011142:	2800      	cmp	r0, #0
 8011144:	d0d0      	beq.n	80110e8 <_scanf_chars+0x30>
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	f013 0310 	ands.w	r3, r3, #16
 801114c:	d105      	bne.n	801115a <_scanf_chars+0xa2>
 801114e:	68e2      	ldr	r2, [r4, #12]
 8011150:	3201      	adds	r2, #1
 8011152:	60e2      	str	r2, [r4, #12]
 8011154:	69a2      	ldr	r2, [r4, #24]
 8011156:	b102      	cbz	r2, 801115a <_scanf_chars+0xa2>
 8011158:	7033      	strb	r3, [r6, #0]
 801115a:	6923      	ldr	r3, [r4, #16]
 801115c:	441f      	add	r7, r3
 801115e:	6127      	str	r7, [r4, #16]
 8011160:	2000      	movs	r0, #0
 8011162:	e7cb      	b.n	80110fc <_scanf_chars+0x44>
 8011164:	08013969 	.word	0x08013969

08011168 <_scanf_i>:
 8011168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801116c:	4698      	mov	r8, r3
 801116e:	4b74      	ldr	r3, [pc, #464]	; (8011340 <_scanf_i+0x1d8>)
 8011170:	460c      	mov	r4, r1
 8011172:	4682      	mov	sl, r0
 8011174:	4616      	mov	r6, r2
 8011176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801117a:	b087      	sub	sp, #28
 801117c:	ab03      	add	r3, sp, #12
 801117e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011182:	4b70      	ldr	r3, [pc, #448]	; (8011344 <_scanf_i+0x1dc>)
 8011184:	69a1      	ldr	r1, [r4, #24]
 8011186:	4a70      	ldr	r2, [pc, #448]	; (8011348 <_scanf_i+0x1e0>)
 8011188:	2903      	cmp	r1, #3
 801118a:	bf18      	it	ne
 801118c:	461a      	movne	r2, r3
 801118e:	68a3      	ldr	r3, [r4, #8]
 8011190:	9201      	str	r2, [sp, #4]
 8011192:	1e5a      	subs	r2, r3, #1
 8011194:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011198:	bf88      	it	hi
 801119a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801119e:	4627      	mov	r7, r4
 80111a0:	bf82      	ittt	hi
 80111a2:	eb03 0905 	addhi.w	r9, r3, r5
 80111a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80111aa:	60a3      	strhi	r3, [r4, #8]
 80111ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80111b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80111b4:	bf98      	it	ls
 80111b6:	f04f 0900 	movls.w	r9, #0
 80111ba:	6023      	str	r3, [r4, #0]
 80111bc:	463d      	mov	r5, r7
 80111be:	f04f 0b00 	mov.w	fp, #0
 80111c2:	6831      	ldr	r1, [r6, #0]
 80111c4:	ab03      	add	r3, sp, #12
 80111c6:	7809      	ldrb	r1, [r1, #0]
 80111c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80111cc:	2202      	movs	r2, #2
 80111ce:	f7ef f80f 	bl	80001f0 <memchr>
 80111d2:	b328      	cbz	r0, 8011220 <_scanf_i+0xb8>
 80111d4:	f1bb 0f01 	cmp.w	fp, #1
 80111d8:	d159      	bne.n	801128e <_scanf_i+0x126>
 80111da:	6862      	ldr	r2, [r4, #4]
 80111dc:	b92a      	cbnz	r2, 80111ea <_scanf_i+0x82>
 80111de:	6822      	ldr	r2, [r4, #0]
 80111e0:	2308      	movs	r3, #8
 80111e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80111e6:	6063      	str	r3, [r4, #4]
 80111e8:	6022      	str	r2, [r4, #0]
 80111ea:	6822      	ldr	r2, [r4, #0]
 80111ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80111f0:	6022      	str	r2, [r4, #0]
 80111f2:	68a2      	ldr	r2, [r4, #8]
 80111f4:	1e51      	subs	r1, r2, #1
 80111f6:	60a1      	str	r1, [r4, #8]
 80111f8:	b192      	cbz	r2, 8011220 <_scanf_i+0xb8>
 80111fa:	6832      	ldr	r2, [r6, #0]
 80111fc:	1c51      	adds	r1, r2, #1
 80111fe:	6031      	str	r1, [r6, #0]
 8011200:	7812      	ldrb	r2, [r2, #0]
 8011202:	f805 2b01 	strb.w	r2, [r5], #1
 8011206:	6872      	ldr	r2, [r6, #4]
 8011208:	3a01      	subs	r2, #1
 801120a:	2a00      	cmp	r2, #0
 801120c:	6072      	str	r2, [r6, #4]
 801120e:	dc07      	bgt.n	8011220 <_scanf_i+0xb8>
 8011210:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011214:	4631      	mov	r1, r6
 8011216:	4650      	mov	r0, sl
 8011218:	4790      	blx	r2
 801121a:	2800      	cmp	r0, #0
 801121c:	f040 8085 	bne.w	801132a <_scanf_i+0x1c2>
 8011220:	f10b 0b01 	add.w	fp, fp, #1
 8011224:	f1bb 0f03 	cmp.w	fp, #3
 8011228:	d1cb      	bne.n	80111c2 <_scanf_i+0x5a>
 801122a:	6863      	ldr	r3, [r4, #4]
 801122c:	b90b      	cbnz	r3, 8011232 <_scanf_i+0xca>
 801122e:	230a      	movs	r3, #10
 8011230:	6063      	str	r3, [r4, #4]
 8011232:	6863      	ldr	r3, [r4, #4]
 8011234:	4945      	ldr	r1, [pc, #276]	; (801134c <_scanf_i+0x1e4>)
 8011236:	6960      	ldr	r0, [r4, #20]
 8011238:	1ac9      	subs	r1, r1, r3
 801123a:	f000 f8a5 	bl	8011388 <__sccl>
 801123e:	f04f 0b00 	mov.w	fp, #0
 8011242:	68a3      	ldr	r3, [r4, #8]
 8011244:	6822      	ldr	r2, [r4, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d03d      	beq.n	80112c6 <_scanf_i+0x15e>
 801124a:	6831      	ldr	r1, [r6, #0]
 801124c:	6960      	ldr	r0, [r4, #20]
 801124e:	f891 c000 	ldrb.w	ip, [r1]
 8011252:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011256:	2800      	cmp	r0, #0
 8011258:	d035      	beq.n	80112c6 <_scanf_i+0x15e>
 801125a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801125e:	d124      	bne.n	80112aa <_scanf_i+0x142>
 8011260:	0510      	lsls	r0, r2, #20
 8011262:	d522      	bpl.n	80112aa <_scanf_i+0x142>
 8011264:	f10b 0b01 	add.w	fp, fp, #1
 8011268:	f1b9 0f00 	cmp.w	r9, #0
 801126c:	d003      	beq.n	8011276 <_scanf_i+0x10e>
 801126e:	3301      	adds	r3, #1
 8011270:	f109 39ff 	add.w	r9, r9, #4294967295
 8011274:	60a3      	str	r3, [r4, #8]
 8011276:	6873      	ldr	r3, [r6, #4]
 8011278:	3b01      	subs	r3, #1
 801127a:	2b00      	cmp	r3, #0
 801127c:	6073      	str	r3, [r6, #4]
 801127e:	dd1b      	ble.n	80112b8 <_scanf_i+0x150>
 8011280:	6833      	ldr	r3, [r6, #0]
 8011282:	3301      	adds	r3, #1
 8011284:	6033      	str	r3, [r6, #0]
 8011286:	68a3      	ldr	r3, [r4, #8]
 8011288:	3b01      	subs	r3, #1
 801128a:	60a3      	str	r3, [r4, #8]
 801128c:	e7d9      	b.n	8011242 <_scanf_i+0xda>
 801128e:	f1bb 0f02 	cmp.w	fp, #2
 8011292:	d1ae      	bne.n	80111f2 <_scanf_i+0x8a>
 8011294:	6822      	ldr	r2, [r4, #0]
 8011296:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801129a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801129e:	d1bf      	bne.n	8011220 <_scanf_i+0xb8>
 80112a0:	2310      	movs	r3, #16
 80112a2:	6063      	str	r3, [r4, #4]
 80112a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80112a8:	e7a2      	b.n	80111f0 <_scanf_i+0x88>
 80112aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80112ae:	6022      	str	r2, [r4, #0]
 80112b0:	780b      	ldrb	r3, [r1, #0]
 80112b2:	f805 3b01 	strb.w	r3, [r5], #1
 80112b6:	e7de      	b.n	8011276 <_scanf_i+0x10e>
 80112b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80112bc:	4631      	mov	r1, r6
 80112be:	4650      	mov	r0, sl
 80112c0:	4798      	blx	r3
 80112c2:	2800      	cmp	r0, #0
 80112c4:	d0df      	beq.n	8011286 <_scanf_i+0x11e>
 80112c6:	6823      	ldr	r3, [r4, #0]
 80112c8:	05d9      	lsls	r1, r3, #23
 80112ca:	d50d      	bpl.n	80112e8 <_scanf_i+0x180>
 80112cc:	42bd      	cmp	r5, r7
 80112ce:	d909      	bls.n	80112e4 <_scanf_i+0x17c>
 80112d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80112d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112d8:	4632      	mov	r2, r6
 80112da:	4650      	mov	r0, sl
 80112dc:	4798      	blx	r3
 80112de:	f105 39ff 	add.w	r9, r5, #4294967295
 80112e2:	464d      	mov	r5, r9
 80112e4:	42bd      	cmp	r5, r7
 80112e6:	d028      	beq.n	801133a <_scanf_i+0x1d2>
 80112e8:	6822      	ldr	r2, [r4, #0]
 80112ea:	f012 0210 	ands.w	r2, r2, #16
 80112ee:	d113      	bne.n	8011318 <_scanf_i+0x1b0>
 80112f0:	702a      	strb	r2, [r5, #0]
 80112f2:	6863      	ldr	r3, [r4, #4]
 80112f4:	9e01      	ldr	r6, [sp, #4]
 80112f6:	4639      	mov	r1, r7
 80112f8:	4650      	mov	r0, sl
 80112fa:	47b0      	blx	r6
 80112fc:	f8d8 3000 	ldr.w	r3, [r8]
 8011300:	6821      	ldr	r1, [r4, #0]
 8011302:	1d1a      	adds	r2, r3, #4
 8011304:	f8c8 2000 	str.w	r2, [r8]
 8011308:	f011 0f20 	tst.w	r1, #32
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	d00f      	beq.n	8011330 <_scanf_i+0x1c8>
 8011310:	6018      	str	r0, [r3, #0]
 8011312:	68e3      	ldr	r3, [r4, #12]
 8011314:	3301      	adds	r3, #1
 8011316:	60e3      	str	r3, [r4, #12]
 8011318:	1bed      	subs	r5, r5, r7
 801131a:	44ab      	add	fp, r5
 801131c:	6925      	ldr	r5, [r4, #16]
 801131e:	445d      	add	r5, fp
 8011320:	6125      	str	r5, [r4, #16]
 8011322:	2000      	movs	r0, #0
 8011324:	b007      	add	sp, #28
 8011326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132a:	f04f 0b00 	mov.w	fp, #0
 801132e:	e7ca      	b.n	80112c6 <_scanf_i+0x15e>
 8011330:	07ca      	lsls	r2, r1, #31
 8011332:	bf4c      	ite	mi
 8011334:	8018      	strhmi	r0, [r3, #0]
 8011336:	6018      	strpl	r0, [r3, #0]
 8011338:	e7eb      	b.n	8011312 <_scanf_i+0x1aa>
 801133a:	2001      	movs	r0, #1
 801133c:	e7f2      	b.n	8011324 <_scanf_i+0x1bc>
 801133e:	bf00      	nop
 8011340:	080122dc 	.word	0x080122dc
 8011344:	080114f5 	.word	0x080114f5
 8011348:	0800ec49 	.word	0x0800ec49
 801134c:	08013d06 	.word	0x08013d06

08011350 <_read_r>:
 8011350:	b538      	push	{r3, r4, r5, lr}
 8011352:	4d07      	ldr	r5, [pc, #28]	; (8011370 <_read_r+0x20>)
 8011354:	4604      	mov	r4, r0
 8011356:	4608      	mov	r0, r1
 8011358:	4611      	mov	r1, r2
 801135a:	2200      	movs	r2, #0
 801135c:	602a      	str	r2, [r5, #0]
 801135e:	461a      	mov	r2, r3
 8011360:	f7f1 fc4c 	bl	8002bfc <_read>
 8011364:	1c43      	adds	r3, r0, #1
 8011366:	d102      	bne.n	801136e <_read_r+0x1e>
 8011368:	682b      	ldr	r3, [r5, #0]
 801136a:	b103      	cbz	r3, 801136e <_read_r+0x1e>
 801136c:	6023      	str	r3, [r4, #0]
 801136e:	bd38      	pop	{r3, r4, r5, pc}
 8011370:	20005abc 	.word	0x20005abc
 8011374:	00000000 	.word	0x00000000

08011378 <nan>:
 8011378:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011380 <nan+0x8>
 801137c:	4770      	bx	lr
 801137e:	bf00      	nop
 8011380:	00000000 	.word	0x00000000
 8011384:	7ff80000 	.word	0x7ff80000

08011388 <__sccl>:
 8011388:	b570      	push	{r4, r5, r6, lr}
 801138a:	780b      	ldrb	r3, [r1, #0]
 801138c:	4604      	mov	r4, r0
 801138e:	2b5e      	cmp	r3, #94	; 0x5e
 8011390:	bf0b      	itete	eq
 8011392:	784b      	ldrbeq	r3, [r1, #1]
 8011394:	1c48      	addne	r0, r1, #1
 8011396:	1c88      	addeq	r0, r1, #2
 8011398:	2200      	movne	r2, #0
 801139a:	bf08      	it	eq
 801139c:	2201      	moveq	r2, #1
 801139e:	1e61      	subs	r1, r4, #1
 80113a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80113a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80113a8:	42a9      	cmp	r1, r5
 80113aa:	d1fb      	bne.n	80113a4 <__sccl+0x1c>
 80113ac:	b90b      	cbnz	r3, 80113b2 <__sccl+0x2a>
 80113ae:	3801      	subs	r0, #1
 80113b0:	bd70      	pop	{r4, r5, r6, pc}
 80113b2:	f082 0101 	eor.w	r1, r2, #1
 80113b6:	54e1      	strb	r1, [r4, r3]
 80113b8:	1c42      	adds	r2, r0, #1
 80113ba:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80113be:	2d2d      	cmp	r5, #45	; 0x2d
 80113c0:	f102 36ff 	add.w	r6, r2, #4294967295
 80113c4:	4610      	mov	r0, r2
 80113c6:	d006      	beq.n	80113d6 <__sccl+0x4e>
 80113c8:	2d5d      	cmp	r5, #93	; 0x5d
 80113ca:	d0f1      	beq.n	80113b0 <__sccl+0x28>
 80113cc:	b90d      	cbnz	r5, 80113d2 <__sccl+0x4a>
 80113ce:	4630      	mov	r0, r6
 80113d0:	e7ee      	b.n	80113b0 <__sccl+0x28>
 80113d2:	462b      	mov	r3, r5
 80113d4:	e7ef      	b.n	80113b6 <__sccl+0x2e>
 80113d6:	7816      	ldrb	r6, [r2, #0]
 80113d8:	2e5d      	cmp	r6, #93	; 0x5d
 80113da:	d0fa      	beq.n	80113d2 <__sccl+0x4a>
 80113dc:	42b3      	cmp	r3, r6
 80113de:	dcf8      	bgt.n	80113d2 <__sccl+0x4a>
 80113e0:	4618      	mov	r0, r3
 80113e2:	3001      	adds	r0, #1
 80113e4:	4286      	cmp	r6, r0
 80113e6:	5421      	strb	r1, [r4, r0]
 80113e8:	dcfb      	bgt.n	80113e2 <__sccl+0x5a>
 80113ea:	43d8      	mvns	r0, r3
 80113ec:	4430      	add	r0, r6
 80113ee:	1c5d      	adds	r5, r3, #1
 80113f0:	42b3      	cmp	r3, r6
 80113f2:	bfa8      	it	ge
 80113f4:	2000      	movge	r0, #0
 80113f6:	182b      	adds	r3, r5, r0
 80113f8:	3202      	adds	r2, #2
 80113fa:	e7de      	b.n	80113ba <__sccl+0x32>

080113fc <_strtoul_l.isra.0>:
 80113fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011400:	4e3b      	ldr	r6, [pc, #236]	; (80114f0 <_strtoul_l.isra.0+0xf4>)
 8011402:	4686      	mov	lr, r0
 8011404:	468c      	mov	ip, r1
 8011406:	4660      	mov	r0, ip
 8011408:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801140c:	5da5      	ldrb	r5, [r4, r6]
 801140e:	f015 0508 	ands.w	r5, r5, #8
 8011412:	d1f8      	bne.n	8011406 <_strtoul_l.isra.0+0xa>
 8011414:	2c2d      	cmp	r4, #45	; 0x2d
 8011416:	d134      	bne.n	8011482 <_strtoul_l.isra.0+0x86>
 8011418:	f89c 4000 	ldrb.w	r4, [ip]
 801141c:	f04f 0801 	mov.w	r8, #1
 8011420:	f100 0c02 	add.w	ip, r0, #2
 8011424:	2b00      	cmp	r3, #0
 8011426:	d05e      	beq.n	80114e6 <_strtoul_l.isra.0+0xea>
 8011428:	2b10      	cmp	r3, #16
 801142a:	d10c      	bne.n	8011446 <_strtoul_l.isra.0+0x4a>
 801142c:	2c30      	cmp	r4, #48	; 0x30
 801142e:	d10a      	bne.n	8011446 <_strtoul_l.isra.0+0x4a>
 8011430:	f89c 0000 	ldrb.w	r0, [ip]
 8011434:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011438:	2858      	cmp	r0, #88	; 0x58
 801143a:	d14f      	bne.n	80114dc <_strtoul_l.isra.0+0xe0>
 801143c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8011440:	2310      	movs	r3, #16
 8011442:	f10c 0c02 	add.w	ip, ip, #2
 8011446:	f04f 37ff 	mov.w	r7, #4294967295
 801144a:	2500      	movs	r5, #0
 801144c:	fbb7 f7f3 	udiv	r7, r7, r3
 8011450:	fb03 f907 	mul.w	r9, r3, r7
 8011454:	ea6f 0909 	mvn.w	r9, r9
 8011458:	4628      	mov	r0, r5
 801145a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801145e:	2e09      	cmp	r6, #9
 8011460:	d818      	bhi.n	8011494 <_strtoul_l.isra.0+0x98>
 8011462:	4634      	mov	r4, r6
 8011464:	42a3      	cmp	r3, r4
 8011466:	dd24      	ble.n	80114b2 <_strtoul_l.isra.0+0xb6>
 8011468:	2d00      	cmp	r5, #0
 801146a:	db1f      	blt.n	80114ac <_strtoul_l.isra.0+0xb0>
 801146c:	4287      	cmp	r7, r0
 801146e:	d31d      	bcc.n	80114ac <_strtoul_l.isra.0+0xb0>
 8011470:	d101      	bne.n	8011476 <_strtoul_l.isra.0+0x7a>
 8011472:	45a1      	cmp	r9, r4
 8011474:	db1a      	blt.n	80114ac <_strtoul_l.isra.0+0xb0>
 8011476:	fb00 4003 	mla	r0, r0, r3, r4
 801147a:	2501      	movs	r5, #1
 801147c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8011480:	e7eb      	b.n	801145a <_strtoul_l.isra.0+0x5e>
 8011482:	2c2b      	cmp	r4, #43	; 0x2b
 8011484:	bf08      	it	eq
 8011486:	f89c 4000 	ldrbeq.w	r4, [ip]
 801148a:	46a8      	mov	r8, r5
 801148c:	bf08      	it	eq
 801148e:	f100 0c02 	addeq.w	ip, r0, #2
 8011492:	e7c7      	b.n	8011424 <_strtoul_l.isra.0+0x28>
 8011494:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8011498:	2e19      	cmp	r6, #25
 801149a:	d801      	bhi.n	80114a0 <_strtoul_l.isra.0+0xa4>
 801149c:	3c37      	subs	r4, #55	; 0x37
 801149e:	e7e1      	b.n	8011464 <_strtoul_l.isra.0+0x68>
 80114a0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80114a4:	2e19      	cmp	r6, #25
 80114a6:	d804      	bhi.n	80114b2 <_strtoul_l.isra.0+0xb6>
 80114a8:	3c57      	subs	r4, #87	; 0x57
 80114aa:	e7db      	b.n	8011464 <_strtoul_l.isra.0+0x68>
 80114ac:	f04f 35ff 	mov.w	r5, #4294967295
 80114b0:	e7e4      	b.n	801147c <_strtoul_l.isra.0+0x80>
 80114b2:	2d00      	cmp	r5, #0
 80114b4:	da07      	bge.n	80114c6 <_strtoul_l.isra.0+0xca>
 80114b6:	2322      	movs	r3, #34	; 0x22
 80114b8:	f8ce 3000 	str.w	r3, [lr]
 80114bc:	f04f 30ff 	mov.w	r0, #4294967295
 80114c0:	b942      	cbnz	r2, 80114d4 <_strtoul_l.isra.0+0xd8>
 80114c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114c6:	f1b8 0f00 	cmp.w	r8, #0
 80114ca:	d000      	beq.n	80114ce <_strtoul_l.isra.0+0xd2>
 80114cc:	4240      	negs	r0, r0
 80114ce:	2a00      	cmp	r2, #0
 80114d0:	d0f7      	beq.n	80114c2 <_strtoul_l.isra.0+0xc6>
 80114d2:	b10d      	cbz	r5, 80114d8 <_strtoul_l.isra.0+0xdc>
 80114d4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80114d8:	6011      	str	r1, [r2, #0]
 80114da:	e7f2      	b.n	80114c2 <_strtoul_l.isra.0+0xc6>
 80114dc:	2430      	movs	r4, #48	; 0x30
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d1b1      	bne.n	8011446 <_strtoul_l.isra.0+0x4a>
 80114e2:	2308      	movs	r3, #8
 80114e4:	e7af      	b.n	8011446 <_strtoul_l.isra.0+0x4a>
 80114e6:	2c30      	cmp	r4, #48	; 0x30
 80114e8:	d0a2      	beq.n	8011430 <_strtoul_l.isra.0+0x34>
 80114ea:	230a      	movs	r3, #10
 80114ec:	e7ab      	b.n	8011446 <_strtoul_l.isra.0+0x4a>
 80114ee:	bf00      	nop
 80114f0:	08013969 	.word	0x08013969

080114f4 <_strtoul_r>:
 80114f4:	f7ff bf82 	b.w	80113fc <_strtoul_l.isra.0>

080114f8 <__submore>:
 80114f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114fc:	460c      	mov	r4, r1
 80114fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011504:	4299      	cmp	r1, r3
 8011506:	d11d      	bne.n	8011544 <__submore+0x4c>
 8011508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801150c:	f7fb fd5e 	bl	800cfcc <_malloc_r>
 8011510:	b918      	cbnz	r0, 801151a <__submore+0x22>
 8011512:	f04f 30ff 	mov.w	r0, #4294967295
 8011516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801151e:	63a3      	str	r3, [r4, #56]	; 0x38
 8011520:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011524:	6360      	str	r0, [r4, #52]	; 0x34
 8011526:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801152a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801152e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011532:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011536:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801153a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801153e:	6020      	str	r0, [r4, #0]
 8011540:	2000      	movs	r0, #0
 8011542:	e7e8      	b.n	8011516 <__submore+0x1e>
 8011544:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011546:	0077      	lsls	r7, r6, #1
 8011548:	463a      	mov	r2, r7
 801154a:	f000 fa21 	bl	8011990 <_realloc_r>
 801154e:	4605      	mov	r5, r0
 8011550:	2800      	cmp	r0, #0
 8011552:	d0de      	beq.n	8011512 <__submore+0x1a>
 8011554:	eb00 0806 	add.w	r8, r0, r6
 8011558:	4601      	mov	r1, r0
 801155a:	4632      	mov	r2, r6
 801155c:	4640      	mov	r0, r8
 801155e:	f7fb fccf 	bl	800cf00 <memcpy>
 8011562:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011566:	f8c4 8000 	str.w	r8, [r4]
 801156a:	e7e9      	b.n	8011540 <__submore+0x48>

0801156c <__ascii_wctomb>:
 801156c:	b149      	cbz	r1, 8011582 <__ascii_wctomb+0x16>
 801156e:	2aff      	cmp	r2, #255	; 0xff
 8011570:	bf85      	ittet	hi
 8011572:	238a      	movhi	r3, #138	; 0x8a
 8011574:	6003      	strhi	r3, [r0, #0]
 8011576:	700a      	strbls	r2, [r1, #0]
 8011578:	f04f 30ff 	movhi.w	r0, #4294967295
 801157c:	bf98      	it	ls
 801157e:	2001      	movls	r0, #1
 8011580:	4770      	bx	lr
 8011582:	4608      	mov	r0, r1
 8011584:	4770      	bx	lr
	...

08011588 <__assert_func>:
 8011588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801158a:	4614      	mov	r4, r2
 801158c:	461a      	mov	r2, r3
 801158e:	4b09      	ldr	r3, [pc, #36]	; (80115b4 <__assert_func+0x2c>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	4605      	mov	r5, r0
 8011594:	68d8      	ldr	r0, [r3, #12]
 8011596:	b14c      	cbz	r4, 80115ac <__assert_func+0x24>
 8011598:	4b07      	ldr	r3, [pc, #28]	; (80115b8 <__assert_func+0x30>)
 801159a:	9100      	str	r1, [sp, #0]
 801159c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115a0:	4906      	ldr	r1, [pc, #24]	; (80115bc <__assert_func+0x34>)
 80115a2:	462b      	mov	r3, r5
 80115a4:	f000 f9a6 	bl	80118f4 <fiprintf>
 80115a8:	f000 fc32 	bl	8011e10 <abort>
 80115ac:	4b04      	ldr	r3, [pc, #16]	; (80115c0 <__assert_func+0x38>)
 80115ae:	461c      	mov	r4, r3
 80115b0:	e7f3      	b.n	801159a <__assert_func+0x12>
 80115b2:	bf00      	nop
 80115b4:	20000038 	.word	0x20000038
 80115b8:	08013d08 	.word	0x08013d08
 80115bc:	08013d15 	.word	0x08013d15
 80115c0:	08013d43 	.word	0x08013d43

080115c4 <__sflush_r>:
 80115c4:	898a      	ldrh	r2, [r1, #12]
 80115c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ca:	4605      	mov	r5, r0
 80115cc:	0710      	lsls	r0, r2, #28
 80115ce:	460c      	mov	r4, r1
 80115d0:	d458      	bmi.n	8011684 <__sflush_r+0xc0>
 80115d2:	684b      	ldr	r3, [r1, #4]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	dc05      	bgt.n	80115e4 <__sflush_r+0x20>
 80115d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80115da:	2b00      	cmp	r3, #0
 80115dc:	dc02      	bgt.n	80115e4 <__sflush_r+0x20>
 80115de:	2000      	movs	r0, #0
 80115e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115e6:	2e00      	cmp	r6, #0
 80115e8:	d0f9      	beq.n	80115de <__sflush_r+0x1a>
 80115ea:	2300      	movs	r3, #0
 80115ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115f0:	682f      	ldr	r7, [r5, #0]
 80115f2:	602b      	str	r3, [r5, #0]
 80115f4:	d032      	beq.n	801165c <__sflush_r+0x98>
 80115f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115f8:	89a3      	ldrh	r3, [r4, #12]
 80115fa:	075a      	lsls	r2, r3, #29
 80115fc:	d505      	bpl.n	801160a <__sflush_r+0x46>
 80115fe:	6863      	ldr	r3, [r4, #4]
 8011600:	1ac0      	subs	r0, r0, r3
 8011602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011604:	b10b      	cbz	r3, 801160a <__sflush_r+0x46>
 8011606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011608:	1ac0      	subs	r0, r0, r3
 801160a:	2300      	movs	r3, #0
 801160c:	4602      	mov	r2, r0
 801160e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011610:	6a21      	ldr	r1, [r4, #32]
 8011612:	4628      	mov	r0, r5
 8011614:	47b0      	blx	r6
 8011616:	1c43      	adds	r3, r0, #1
 8011618:	89a3      	ldrh	r3, [r4, #12]
 801161a:	d106      	bne.n	801162a <__sflush_r+0x66>
 801161c:	6829      	ldr	r1, [r5, #0]
 801161e:	291d      	cmp	r1, #29
 8011620:	d82c      	bhi.n	801167c <__sflush_r+0xb8>
 8011622:	4a2a      	ldr	r2, [pc, #168]	; (80116cc <__sflush_r+0x108>)
 8011624:	40ca      	lsrs	r2, r1
 8011626:	07d6      	lsls	r6, r2, #31
 8011628:	d528      	bpl.n	801167c <__sflush_r+0xb8>
 801162a:	2200      	movs	r2, #0
 801162c:	6062      	str	r2, [r4, #4]
 801162e:	04d9      	lsls	r1, r3, #19
 8011630:	6922      	ldr	r2, [r4, #16]
 8011632:	6022      	str	r2, [r4, #0]
 8011634:	d504      	bpl.n	8011640 <__sflush_r+0x7c>
 8011636:	1c42      	adds	r2, r0, #1
 8011638:	d101      	bne.n	801163e <__sflush_r+0x7a>
 801163a:	682b      	ldr	r3, [r5, #0]
 801163c:	b903      	cbnz	r3, 8011640 <__sflush_r+0x7c>
 801163e:	6560      	str	r0, [r4, #84]	; 0x54
 8011640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011642:	602f      	str	r7, [r5, #0]
 8011644:	2900      	cmp	r1, #0
 8011646:	d0ca      	beq.n	80115de <__sflush_r+0x1a>
 8011648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801164c:	4299      	cmp	r1, r3
 801164e:	d002      	beq.n	8011656 <__sflush_r+0x92>
 8011650:	4628      	mov	r0, r5
 8011652:	f7fb fc6b 	bl	800cf2c <_free_r>
 8011656:	2000      	movs	r0, #0
 8011658:	6360      	str	r0, [r4, #52]	; 0x34
 801165a:	e7c1      	b.n	80115e0 <__sflush_r+0x1c>
 801165c:	6a21      	ldr	r1, [r4, #32]
 801165e:	2301      	movs	r3, #1
 8011660:	4628      	mov	r0, r5
 8011662:	47b0      	blx	r6
 8011664:	1c41      	adds	r1, r0, #1
 8011666:	d1c7      	bne.n	80115f8 <__sflush_r+0x34>
 8011668:	682b      	ldr	r3, [r5, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d0c4      	beq.n	80115f8 <__sflush_r+0x34>
 801166e:	2b1d      	cmp	r3, #29
 8011670:	d001      	beq.n	8011676 <__sflush_r+0xb2>
 8011672:	2b16      	cmp	r3, #22
 8011674:	d101      	bne.n	801167a <__sflush_r+0xb6>
 8011676:	602f      	str	r7, [r5, #0]
 8011678:	e7b1      	b.n	80115de <__sflush_r+0x1a>
 801167a:	89a3      	ldrh	r3, [r4, #12]
 801167c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011680:	81a3      	strh	r3, [r4, #12]
 8011682:	e7ad      	b.n	80115e0 <__sflush_r+0x1c>
 8011684:	690f      	ldr	r7, [r1, #16]
 8011686:	2f00      	cmp	r7, #0
 8011688:	d0a9      	beq.n	80115de <__sflush_r+0x1a>
 801168a:	0793      	lsls	r3, r2, #30
 801168c:	680e      	ldr	r6, [r1, #0]
 801168e:	bf08      	it	eq
 8011690:	694b      	ldreq	r3, [r1, #20]
 8011692:	600f      	str	r7, [r1, #0]
 8011694:	bf18      	it	ne
 8011696:	2300      	movne	r3, #0
 8011698:	eba6 0807 	sub.w	r8, r6, r7
 801169c:	608b      	str	r3, [r1, #8]
 801169e:	f1b8 0f00 	cmp.w	r8, #0
 80116a2:	dd9c      	ble.n	80115de <__sflush_r+0x1a>
 80116a4:	6a21      	ldr	r1, [r4, #32]
 80116a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116a8:	4643      	mov	r3, r8
 80116aa:	463a      	mov	r2, r7
 80116ac:	4628      	mov	r0, r5
 80116ae:	47b0      	blx	r6
 80116b0:	2800      	cmp	r0, #0
 80116b2:	dc06      	bgt.n	80116c2 <__sflush_r+0xfe>
 80116b4:	89a3      	ldrh	r3, [r4, #12]
 80116b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116ba:	81a3      	strh	r3, [r4, #12]
 80116bc:	f04f 30ff 	mov.w	r0, #4294967295
 80116c0:	e78e      	b.n	80115e0 <__sflush_r+0x1c>
 80116c2:	4407      	add	r7, r0
 80116c4:	eba8 0800 	sub.w	r8, r8, r0
 80116c8:	e7e9      	b.n	801169e <__sflush_r+0xda>
 80116ca:	bf00      	nop
 80116cc:	20400001 	.word	0x20400001

080116d0 <_fflush_r>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	690b      	ldr	r3, [r1, #16]
 80116d4:	4605      	mov	r5, r0
 80116d6:	460c      	mov	r4, r1
 80116d8:	b913      	cbnz	r3, 80116e0 <_fflush_r+0x10>
 80116da:	2500      	movs	r5, #0
 80116dc:	4628      	mov	r0, r5
 80116de:	bd38      	pop	{r3, r4, r5, pc}
 80116e0:	b118      	cbz	r0, 80116ea <_fflush_r+0x1a>
 80116e2:	6983      	ldr	r3, [r0, #24]
 80116e4:	b90b      	cbnz	r3, 80116ea <_fflush_r+0x1a>
 80116e6:	f000 f887 	bl	80117f8 <__sinit>
 80116ea:	4b14      	ldr	r3, [pc, #80]	; (801173c <_fflush_r+0x6c>)
 80116ec:	429c      	cmp	r4, r3
 80116ee:	d11b      	bne.n	8011728 <_fflush_r+0x58>
 80116f0:	686c      	ldr	r4, [r5, #4]
 80116f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d0ef      	beq.n	80116da <_fflush_r+0xa>
 80116fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116fc:	07d0      	lsls	r0, r2, #31
 80116fe:	d404      	bmi.n	801170a <_fflush_r+0x3a>
 8011700:	0599      	lsls	r1, r3, #22
 8011702:	d402      	bmi.n	801170a <_fflush_r+0x3a>
 8011704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011706:	f000 f927 	bl	8011958 <__retarget_lock_acquire_recursive>
 801170a:	4628      	mov	r0, r5
 801170c:	4621      	mov	r1, r4
 801170e:	f7ff ff59 	bl	80115c4 <__sflush_r>
 8011712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011714:	07da      	lsls	r2, r3, #31
 8011716:	4605      	mov	r5, r0
 8011718:	d4e0      	bmi.n	80116dc <_fflush_r+0xc>
 801171a:	89a3      	ldrh	r3, [r4, #12]
 801171c:	059b      	lsls	r3, r3, #22
 801171e:	d4dd      	bmi.n	80116dc <_fflush_r+0xc>
 8011720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011722:	f000 f91a 	bl	801195a <__retarget_lock_release_recursive>
 8011726:	e7d9      	b.n	80116dc <_fflush_r+0xc>
 8011728:	4b05      	ldr	r3, [pc, #20]	; (8011740 <_fflush_r+0x70>)
 801172a:	429c      	cmp	r4, r3
 801172c:	d101      	bne.n	8011732 <_fflush_r+0x62>
 801172e:	68ac      	ldr	r4, [r5, #8]
 8011730:	e7df      	b.n	80116f2 <_fflush_r+0x22>
 8011732:	4b04      	ldr	r3, [pc, #16]	; (8011744 <_fflush_r+0x74>)
 8011734:	429c      	cmp	r4, r3
 8011736:	bf08      	it	eq
 8011738:	68ec      	ldreq	r4, [r5, #12]
 801173a:	e7da      	b.n	80116f2 <_fflush_r+0x22>
 801173c:	08013d64 	.word	0x08013d64
 8011740:	08013d84 	.word	0x08013d84
 8011744:	08013d44 	.word	0x08013d44

08011748 <std>:
 8011748:	2300      	movs	r3, #0
 801174a:	b510      	push	{r4, lr}
 801174c:	4604      	mov	r4, r0
 801174e:	e9c0 3300 	strd	r3, r3, [r0]
 8011752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011756:	6083      	str	r3, [r0, #8]
 8011758:	8181      	strh	r1, [r0, #12]
 801175a:	6643      	str	r3, [r0, #100]	; 0x64
 801175c:	81c2      	strh	r2, [r0, #14]
 801175e:	6183      	str	r3, [r0, #24]
 8011760:	4619      	mov	r1, r3
 8011762:	2208      	movs	r2, #8
 8011764:	305c      	adds	r0, #92	; 0x5c
 8011766:	f7fb fbd9 	bl	800cf1c <memset>
 801176a:	4b05      	ldr	r3, [pc, #20]	; (8011780 <std+0x38>)
 801176c:	6263      	str	r3, [r4, #36]	; 0x24
 801176e:	4b05      	ldr	r3, [pc, #20]	; (8011784 <std+0x3c>)
 8011770:	62a3      	str	r3, [r4, #40]	; 0x28
 8011772:	4b05      	ldr	r3, [pc, #20]	; (8011788 <std+0x40>)
 8011774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011776:	4b05      	ldr	r3, [pc, #20]	; (801178c <std+0x44>)
 8011778:	6224      	str	r4, [r4, #32]
 801177a:	6323      	str	r3, [r4, #48]	; 0x30
 801177c:	bd10      	pop	{r4, pc}
 801177e:	bf00      	nop
 8011780:	0800de39 	.word	0x0800de39
 8011784:	0800de5f 	.word	0x0800de5f
 8011788:	0800de97 	.word	0x0800de97
 801178c:	0800debb 	.word	0x0800debb

08011790 <_cleanup_r>:
 8011790:	4901      	ldr	r1, [pc, #4]	; (8011798 <_cleanup_r+0x8>)
 8011792:	f000 b8c1 	b.w	8011918 <_fwalk_reent>
 8011796:	bf00      	nop
 8011798:	080116d1 	.word	0x080116d1

0801179c <__sfmoreglue>:
 801179c:	b570      	push	{r4, r5, r6, lr}
 801179e:	1e4a      	subs	r2, r1, #1
 80117a0:	2568      	movs	r5, #104	; 0x68
 80117a2:	4355      	muls	r5, r2
 80117a4:	460e      	mov	r6, r1
 80117a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80117aa:	f7fb fc0f 	bl	800cfcc <_malloc_r>
 80117ae:	4604      	mov	r4, r0
 80117b0:	b140      	cbz	r0, 80117c4 <__sfmoreglue+0x28>
 80117b2:	2100      	movs	r1, #0
 80117b4:	e9c0 1600 	strd	r1, r6, [r0]
 80117b8:	300c      	adds	r0, #12
 80117ba:	60a0      	str	r0, [r4, #8]
 80117bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80117c0:	f7fb fbac 	bl	800cf1c <memset>
 80117c4:	4620      	mov	r0, r4
 80117c6:	bd70      	pop	{r4, r5, r6, pc}

080117c8 <__sfp_lock_acquire>:
 80117c8:	4801      	ldr	r0, [pc, #4]	; (80117d0 <__sfp_lock_acquire+0x8>)
 80117ca:	f000 b8c5 	b.w	8011958 <__retarget_lock_acquire_recursive>
 80117ce:	bf00      	nop
 80117d0:	20005ac8 	.word	0x20005ac8

080117d4 <__sfp_lock_release>:
 80117d4:	4801      	ldr	r0, [pc, #4]	; (80117dc <__sfp_lock_release+0x8>)
 80117d6:	f000 b8c0 	b.w	801195a <__retarget_lock_release_recursive>
 80117da:	bf00      	nop
 80117dc:	20005ac8 	.word	0x20005ac8

080117e0 <__sinit_lock_acquire>:
 80117e0:	4801      	ldr	r0, [pc, #4]	; (80117e8 <__sinit_lock_acquire+0x8>)
 80117e2:	f000 b8b9 	b.w	8011958 <__retarget_lock_acquire_recursive>
 80117e6:	bf00      	nop
 80117e8:	20005ac3 	.word	0x20005ac3

080117ec <__sinit_lock_release>:
 80117ec:	4801      	ldr	r0, [pc, #4]	; (80117f4 <__sinit_lock_release+0x8>)
 80117ee:	f000 b8b4 	b.w	801195a <__retarget_lock_release_recursive>
 80117f2:	bf00      	nop
 80117f4:	20005ac3 	.word	0x20005ac3

080117f8 <__sinit>:
 80117f8:	b510      	push	{r4, lr}
 80117fa:	4604      	mov	r4, r0
 80117fc:	f7ff fff0 	bl	80117e0 <__sinit_lock_acquire>
 8011800:	69a3      	ldr	r3, [r4, #24]
 8011802:	b11b      	cbz	r3, 801180c <__sinit+0x14>
 8011804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011808:	f7ff bff0 	b.w	80117ec <__sinit_lock_release>
 801180c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011810:	6523      	str	r3, [r4, #80]	; 0x50
 8011812:	4b13      	ldr	r3, [pc, #76]	; (8011860 <__sinit+0x68>)
 8011814:	4a13      	ldr	r2, [pc, #76]	; (8011864 <__sinit+0x6c>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	62a2      	str	r2, [r4, #40]	; 0x28
 801181a:	42a3      	cmp	r3, r4
 801181c:	bf04      	itt	eq
 801181e:	2301      	moveq	r3, #1
 8011820:	61a3      	streq	r3, [r4, #24]
 8011822:	4620      	mov	r0, r4
 8011824:	f000 f820 	bl	8011868 <__sfp>
 8011828:	6060      	str	r0, [r4, #4]
 801182a:	4620      	mov	r0, r4
 801182c:	f000 f81c 	bl	8011868 <__sfp>
 8011830:	60a0      	str	r0, [r4, #8]
 8011832:	4620      	mov	r0, r4
 8011834:	f000 f818 	bl	8011868 <__sfp>
 8011838:	2200      	movs	r2, #0
 801183a:	60e0      	str	r0, [r4, #12]
 801183c:	2104      	movs	r1, #4
 801183e:	6860      	ldr	r0, [r4, #4]
 8011840:	f7ff ff82 	bl	8011748 <std>
 8011844:	68a0      	ldr	r0, [r4, #8]
 8011846:	2201      	movs	r2, #1
 8011848:	2109      	movs	r1, #9
 801184a:	f7ff ff7d 	bl	8011748 <std>
 801184e:	68e0      	ldr	r0, [r4, #12]
 8011850:	2202      	movs	r2, #2
 8011852:	2112      	movs	r1, #18
 8011854:	f7ff ff78 	bl	8011748 <std>
 8011858:	2301      	movs	r3, #1
 801185a:	61a3      	str	r3, [r4, #24]
 801185c:	e7d2      	b.n	8011804 <__sinit+0xc>
 801185e:	bf00      	nop
 8011860:	080138d8 	.word	0x080138d8
 8011864:	08011791 	.word	0x08011791

08011868 <__sfp>:
 8011868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801186a:	4607      	mov	r7, r0
 801186c:	f7ff ffac 	bl	80117c8 <__sfp_lock_acquire>
 8011870:	4b1e      	ldr	r3, [pc, #120]	; (80118ec <__sfp+0x84>)
 8011872:	681e      	ldr	r6, [r3, #0]
 8011874:	69b3      	ldr	r3, [r6, #24]
 8011876:	b913      	cbnz	r3, 801187e <__sfp+0x16>
 8011878:	4630      	mov	r0, r6
 801187a:	f7ff ffbd 	bl	80117f8 <__sinit>
 801187e:	3648      	adds	r6, #72	; 0x48
 8011880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011884:	3b01      	subs	r3, #1
 8011886:	d503      	bpl.n	8011890 <__sfp+0x28>
 8011888:	6833      	ldr	r3, [r6, #0]
 801188a:	b30b      	cbz	r3, 80118d0 <__sfp+0x68>
 801188c:	6836      	ldr	r6, [r6, #0]
 801188e:	e7f7      	b.n	8011880 <__sfp+0x18>
 8011890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011894:	b9d5      	cbnz	r5, 80118cc <__sfp+0x64>
 8011896:	4b16      	ldr	r3, [pc, #88]	; (80118f0 <__sfp+0x88>)
 8011898:	60e3      	str	r3, [r4, #12]
 801189a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801189e:	6665      	str	r5, [r4, #100]	; 0x64
 80118a0:	f000 f859 	bl	8011956 <__retarget_lock_init_recursive>
 80118a4:	f7ff ff96 	bl	80117d4 <__sfp_lock_release>
 80118a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80118ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80118b0:	6025      	str	r5, [r4, #0]
 80118b2:	61a5      	str	r5, [r4, #24]
 80118b4:	2208      	movs	r2, #8
 80118b6:	4629      	mov	r1, r5
 80118b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80118bc:	f7fb fb2e 	bl	800cf1c <memset>
 80118c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80118c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80118c8:	4620      	mov	r0, r4
 80118ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118cc:	3468      	adds	r4, #104	; 0x68
 80118ce:	e7d9      	b.n	8011884 <__sfp+0x1c>
 80118d0:	2104      	movs	r1, #4
 80118d2:	4638      	mov	r0, r7
 80118d4:	f7ff ff62 	bl	801179c <__sfmoreglue>
 80118d8:	4604      	mov	r4, r0
 80118da:	6030      	str	r0, [r6, #0]
 80118dc:	2800      	cmp	r0, #0
 80118de:	d1d5      	bne.n	801188c <__sfp+0x24>
 80118e0:	f7ff ff78 	bl	80117d4 <__sfp_lock_release>
 80118e4:	230c      	movs	r3, #12
 80118e6:	603b      	str	r3, [r7, #0]
 80118e8:	e7ee      	b.n	80118c8 <__sfp+0x60>
 80118ea:	bf00      	nop
 80118ec:	080138d8 	.word	0x080138d8
 80118f0:	ffff0001 	.word	0xffff0001

080118f4 <fiprintf>:
 80118f4:	b40e      	push	{r1, r2, r3}
 80118f6:	b503      	push	{r0, r1, lr}
 80118f8:	4601      	mov	r1, r0
 80118fa:	ab03      	add	r3, sp, #12
 80118fc:	4805      	ldr	r0, [pc, #20]	; (8011914 <fiprintf+0x20>)
 80118fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011902:	6800      	ldr	r0, [r0, #0]
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	f000 f893 	bl	8011a30 <_vfiprintf_r>
 801190a:	b002      	add	sp, #8
 801190c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011910:	b003      	add	sp, #12
 8011912:	4770      	bx	lr
 8011914:	20000038 	.word	0x20000038

08011918 <_fwalk_reent>:
 8011918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801191c:	4606      	mov	r6, r0
 801191e:	4688      	mov	r8, r1
 8011920:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011924:	2700      	movs	r7, #0
 8011926:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801192a:	f1b9 0901 	subs.w	r9, r9, #1
 801192e:	d505      	bpl.n	801193c <_fwalk_reent+0x24>
 8011930:	6824      	ldr	r4, [r4, #0]
 8011932:	2c00      	cmp	r4, #0
 8011934:	d1f7      	bne.n	8011926 <_fwalk_reent+0xe>
 8011936:	4638      	mov	r0, r7
 8011938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801193c:	89ab      	ldrh	r3, [r5, #12]
 801193e:	2b01      	cmp	r3, #1
 8011940:	d907      	bls.n	8011952 <_fwalk_reent+0x3a>
 8011942:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011946:	3301      	adds	r3, #1
 8011948:	d003      	beq.n	8011952 <_fwalk_reent+0x3a>
 801194a:	4629      	mov	r1, r5
 801194c:	4630      	mov	r0, r6
 801194e:	47c0      	blx	r8
 8011950:	4307      	orrs	r7, r0
 8011952:	3568      	adds	r5, #104	; 0x68
 8011954:	e7e9      	b.n	801192a <_fwalk_reent+0x12>

08011956 <__retarget_lock_init_recursive>:
 8011956:	4770      	bx	lr

08011958 <__retarget_lock_acquire_recursive>:
 8011958:	4770      	bx	lr

0801195a <__retarget_lock_release_recursive>:
 801195a:	4770      	bx	lr

0801195c <memmove>:
 801195c:	4288      	cmp	r0, r1
 801195e:	b510      	push	{r4, lr}
 8011960:	eb01 0402 	add.w	r4, r1, r2
 8011964:	d902      	bls.n	801196c <memmove+0x10>
 8011966:	4284      	cmp	r4, r0
 8011968:	4623      	mov	r3, r4
 801196a:	d807      	bhi.n	801197c <memmove+0x20>
 801196c:	1e43      	subs	r3, r0, #1
 801196e:	42a1      	cmp	r1, r4
 8011970:	d008      	beq.n	8011984 <memmove+0x28>
 8011972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011976:	f803 2f01 	strb.w	r2, [r3, #1]!
 801197a:	e7f8      	b.n	801196e <memmove+0x12>
 801197c:	4402      	add	r2, r0
 801197e:	4601      	mov	r1, r0
 8011980:	428a      	cmp	r2, r1
 8011982:	d100      	bne.n	8011986 <memmove+0x2a>
 8011984:	bd10      	pop	{r4, pc}
 8011986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801198a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801198e:	e7f7      	b.n	8011980 <memmove+0x24>

08011990 <_realloc_r>:
 8011990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011992:	4607      	mov	r7, r0
 8011994:	4614      	mov	r4, r2
 8011996:	460e      	mov	r6, r1
 8011998:	b921      	cbnz	r1, 80119a4 <_realloc_r+0x14>
 801199a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801199e:	4611      	mov	r1, r2
 80119a0:	f7fb bb14 	b.w	800cfcc <_malloc_r>
 80119a4:	b922      	cbnz	r2, 80119b0 <_realloc_r+0x20>
 80119a6:	f7fb fac1 	bl	800cf2c <_free_r>
 80119aa:	4625      	mov	r5, r4
 80119ac:	4628      	mov	r0, r5
 80119ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119b0:	f000 fa9a 	bl	8011ee8 <_malloc_usable_size_r>
 80119b4:	42a0      	cmp	r0, r4
 80119b6:	d20f      	bcs.n	80119d8 <_realloc_r+0x48>
 80119b8:	4621      	mov	r1, r4
 80119ba:	4638      	mov	r0, r7
 80119bc:	f7fb fb06 	bl	800cfcc <_malloc_r>
 80119c0:	4605      	mov	r5, r0
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d0f2      	beq.n	80119ac <_realloc_r+0x1c>
 80119c6:	4631      	mov	r1, r6
 80119c8:	4622      	mov	r2, r4
 80119ca:	f7fb fa99 	bl	800cf00 <memcpy>
 80119ce:	4631      	mov	r1, r6
 80119d0:	4638      	mov	r0, r7
 80119d2:	f7fb faab 	bl	800cf2c <_free_r>
 80119d6:	e7e9      	b.n	80119ac <_realloc_r+0x1c>
 80119d8:	4635      	mov	r5, r6
 80119da:	e7e7      	b.n	80119ac <_realloc_r+0x1c>

080119dc <__sfputc_r>:
 80119dc:	6893      	ldr	r3, [r2, #8]
 80119de:	3b01      	subs	r3, #1
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	b410      	push	{r4}
 80119e4:	6093      	str	r3, [r2, #8]
 80119e6:	da08      	bge.n	80119fa <__sfputc_r+0x1e>
 80119e8:	6994      	ldr	r4, [r2, #24]
 80119ea:	42a3      	cmp	r3, r4
 80119ec:	db01      	blt.n	80119f2 <__sfputc_r+0x16>
 80119ee:	290a      	cmp	r1, #10
 80119f0:	d103      	bne.n	80119fa <__sfputc_r+0x1e>
 80119f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119f6:	f000 b94b 	b.w	8011c90 <__swbuf_r>
 80119fa:	6813      	ldr	r3, [r2, #0]
 80119fc:	1c58      	adds	r0, r3, #1
 80119fe:	6010      	str	r0, [r2, #0]
 8011a00:	7019      	strb	r1, [r3, #0]
 8011a02:	4608      	mov	r0, r1
 8011a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a08:	4770      	bx	lr

08011a0a <__sfputs_r>:
 8011a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0c:	4606      	mov	r6, r0
 8011a0e:	460f      	mov	r7, r1
 8011a10:	4614      	mov	r4, r2
 8011a12:	18d5      	adds	r5, r2, r3
 8011a14:	42ac      	cmp	r4, r5
 8011a16:	d101      	bne.n	8011a1c <__sfputs_r+0x12>
 8011a18:	2000      	movs	r0, #0
 8011a1a:	e007      	b.n	8011a2c <__sfputs_r+0x22>
 8011a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a20:	463a      	mov	r2, r7
 8011a22:	4630      	mov	r0, r6
 8011a24:	f7ff ffda 	bl	80119dc <__sfputc_r>
 8011a28:	1c43      	adds	r3, r0, #1
 8011a2a:	d1f3      	bne.n	8011a14 <__sfputs_r+0xa>
 8011a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a30 <_vfiprintf_r>:
 8011a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a34:	460d      	mov	r5, r1
 8011a36:	b09d      	sub	sp, #116	; 0x74
 8011a38:	4614      	mov	r4, r2
 8011a3a:	4698      	mov	r8, r3
 8011a3c:	4606      	mov	r6, r0
 8011a3e:	b118      	cbz	r0, 8011a48 <_vfiprintf_r+0x18>
 8011a40:	6983      	ldr	r3, [r0, #24]
 8011a42:	b90b      	cbnz	r3, 8011a48 <_vfiprintf_r+0x18>
 8011a44:	f7ff fed8 	bl	80117f8 <__sinit>
 8011a48:	4b89      	ldr	r3, [pc, #548]	; (8011c70 <_vfiprintf_r+0x240>)
 8011a4a:	429d      	cmp	r5, r3
 8011a4c:	d11b      	bne.n	8011a86 <_vfiprintf_r+0x56>
 8011a4e:	6875      	ldr	r5, [r6, #4]
 8011a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a52:	07d9      	lsls	r1, r3, #31
 8011a54:	d405      	bmi.n	8011a62 <_vfiprintf_r+0x32>
 8011a56:	89ab      	ldrh	r3, [r5, #12]
 8011a58:	059a      	lsls	r2, r3, #22
 8011a5a:	d402      	bmi.n	8011a62 <_vfiprintf_r+0x32>
 8011a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a5e:	f7ff ff7b 	bl	8011958 <__retarget_lock_acquire_recursive>
 8011a62:	89ab      	ldrh	r3, [r5, #12]
 8011a64:	071b      	lsls	r3, r3, #28
 8011a66:	d501      	bpl.n	8011a6c <_vfiprintf_r+0x3c>
 8011a68:	692b      	ldr	r3, [r5, #16]
 8011a6a:	b9eb      	cbnz	r3, 8011aa8 <_vfiprintf_r+0x78>
 8011a6c:	4629      	mov	r1, r5
 8011a6e:	4630      	mov	r0, r6
 8011a70:	f000 f960 	bl	8011d34 <__swsetup_r>
 8011a74:	b1c0      	cbz	r0, 8011aa8 <_vfiprintf_r+0x78>
 8011a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a78:	07dc      	lsls	r4, r3, #31
 8011a7a:	d50e      	bpl.n	8011a9a <_vfiprintf_r+0x6a>
 8011a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a80:	b01d      	add	sp, #116	; 0x74
 8011a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a86:	4b7b      	ldr	r3, [pc, #492]	; (8011c74 <_vfiprintf_r+0x244>)
 8011a88:	429d      	cmp	r5, r3
 8011a8a:	d101      	bne.n	8011a90 <_vfiprintf_r+0x60>
 8011a8c:	68b5      	ldr	r5, [r6, #8]
 8011a8e:	e7df      	b.n	8011a50 <_vfiprintf_r+0x20>
 8011a90:	4b79      	ldr	r3, [pc, #484]	; (8011c78 <_vfiprintf_r+0x248>)
 8011a92:	429d      	cmp	r5, r3
 8011a94:	bf08      	it	eq
 8011a96:	68f5      	ldreq	r5, [r6, #12]
 8011a98:	e7da      	b.n	8011a50 <_vfiprintf_r+0x20>
 8011a9a:	89ab      	ldrh	r3, [r5, #12]
 8011a9c:	0598      	lsls	r0, r3, #22
 8011a9e:	d4ed      	bmi.n	8011a7c <_vfiprintf_r+0x4c>
 8011aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011aa2:	f7ff ff5a 	bl	801195a <__retarget_lock_release_recursive>
 8011aa6:	e7e9      	b.n	8011a7c <_vfiprintf_r+0x4c>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8011aac:	2320      	movs	r3, #32
 8011aae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ab6:	2330      	movs	r3, #48	; 0x30
 8011ab8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011c7c <_vfiprintf_r+0x24c>
 8011abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ac0:	f04f 0901 	mov.w	r9, #1
 8011ac4:	4623      	mov	r3, r4
 8011ac6:	469a      	mov	sl, r3
 8011ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011acc:	b10a      	cbz	r2, 8011ad2 <_vfiprintf_r+0xa2>
 8011ace:	2a25      	cmp	r2, #37	; 0x25
 8011ad0:	d1f9      	bne.n	8011ac6 <_vfiprintf_r+0x96>
 8011ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8011ad6:	d00b      	beq.n	8011af0 <_vfiprintf_r+0xc0>
 8011ad8:	465b      	mov	r3, fp
 8011ada:	4622      	mov	r2, r4
 8011adc:	4629      	mov	r1, r5
 8011ade:	4630      	mov	r0, r6
 8011ae0:	f7ff ff93 	bl	8011a0a <__sfputs_r>
 8011ae4:	3001      	adds	r0, #1
 8011ae6:	f000 80aa 	beq.w	8011c3e <_vfiprintf_r+0x20e>
 8011aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011aec:	445a      	add	r2, fp
 8011aee:	9209      	str	r2, [sp, #36]	; 0x24
 8011af0:	f89a 3000 	ldrb.w	r3, [sl]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	f000 80a2 	beq.w	8011c3e <_vfiprintf_r+0x20e>
 8011afa:	2300      	movs	r3, #0
 8011afc:	f04f 32ff 	mov.w	r2, #4294967295
 8011b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b04:	f10a 0a01 	add.w	sl, sl, #1
 8011b08:	9304      	str	r3, [sp, #16]
 8011b0a:	9307      	str	r3, [sp, #28]
 8011b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b10:	931a      	str	r3, [sp, #104]	; 0x68
 8011b12:	4654      	mov	r4, sl
 8011b14:	2205      	movs	r2, #5
 8011b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b1a:	4858      	ldr	r0, [pc, #352]	; (8011c7c <_vfiprintf_r+0x24c>)
 8011b1c:	f7ee fb68 	bl	80001f0 <memchr>
 8011b20:	9a04      	ldr	r2, [sp, #16]
 8011b22:	b9d8      	cbnz	r0, 8011b5c <_vfiprintf_r+0x12c>
 8011b24:	06d1      	lsls	r1, r2, #27
 8011b26:	bf44      	itt	mi
 8011b28:	2320      	movmi	r3, #32
 8011b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b2e:	0713      	lsls	r3, r2, #28
 8011b30:	bf44      	itt	mi
 8011b32:	232b      	movmi	r3, #43	; 0x2b
 8011b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b38:	f89a 3000 	ldrb.w	r3, [sl]
 8011b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8011b3e:	d015      	beq.n	8011b6c <_vfiprintf_r+0x13c>
 8011b40:	9a07      	ldr	r2, [sp, #28]
 8011b42:	4654      	mov	r4, sl
 8011b44:	2000      	movs	r0, #0
 8011b46:	f04f 0c0a 	mov.w	ip, #10
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b50:	3b30      	subs	r3, #48	; 0x30
 8011b52:	2b09      	cmp	r3, #9
 8011b54:	d94e      	bls.n	8011bf4 <_vfiprintf_r+0x1c4>
 8011b56:	b1b0      	cbz	r0, 8011b86 <_vfiprintf_r+0x156>
 8011b58:	9207      	str	r2, [sp, #28]
 8011b5a:	e014      	b.n	8011b86 <_vfiprintf_r+0x156>
 8011b5c:	eba0 0308 	sub.w	r3, r0, r8
 8011b60:	fa09 f303 	lsl.w	r3, r9, r3
 8011b64:	4313      	orrs	r3, r2
 8011b66:	9304      	str	r3, [sp, #16]
 8011b68:	46a2      	mov	sl, r4
 8011b6a:	e7d2      	b.n	8011b12 <_vfiprintf_r+0xe2>
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	1d19      	adds	r1, r3, #4
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	9103      	str	r1, [sp, #12]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	bfbb      	ittet	lt
 8011b78:	425b      	neglt	r3, r3
 8011b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8011b7e:	9307      	strge	r3, [sp, #28]
 8011b80:	9307      	strlt	r3, [sp, #28]
 8011b82:	bfb8      	it	lt
 8011b84:	9204      	strlt	r2, [sp, #16]
 8011b86:	7823      	ldrb	r3, [r4, #0]
 8011b88:	2b2e      	cmp	r3, #46	; 0x2e
 8011b8a:	d10c      	bne.n	8011ba6 <_vfiprintf_r+0x176>
 8011b8c:	7863      	ldrb	r3, [r4, #1]
 8011b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8011b90:	d135      	bne.n	8011bfe <_vfiprintf_r+0x1ce>
 8011b92:	9b03      	ldr	r3, [sp, #12]
 8011b94:	1d1a      	adds	r2, r3, #4
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	9203      	str	r2, [sp, #12]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	bfb8      	it	lt
 8011b9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ba2:	3402      	adds	r4, #2
 8011ba4:	9305      	str	r3, [sp, #20]
 8011ba6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011c8c <_vfiprintf_r+0x25c>
 8011baa:	7821      	ldrb	r1, [r4, #0]
 8011bac:	2203      	movs	r2, #3
 8011bae:	4650      	mov	r0, sl
 8011bb0:	f7ee fb1e 	bl	80001f0 <memchr>
 8011bb4:	b140      	cbz	r0, 8011bc8 <_vfiprintf_r+0x198>
 8011bb6:	2340      	movs	r3, #64	; 0x40
 8011bb8:	eba0 000a 	sub.w	r0, r0, sl
 8011bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8011bc0:	9b04      	ldr	r3, [sp, #16]
 8011bc2:	4303      	orrs	r3, r0
 8011bc4:	3401      	adds	r4, #1
 8011bc6:	9304      	str	r3, [sp, #16]
 8011bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bcc:	482c      	ldr	r0, [pc, #176]	; (8011c80 <_vfiprintf_r+0x250>)
 8011bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bd2:	2206      	movs	r2, #6
 8011bd4:	f7ee fb0c 	bl	80001f0 <memchr>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d03f      	beq.n	8011c5c <_vfiprintf_r+0x22c>
 8011bdc:	4b29      	ldr	r3, [pc, #164]	; (8011c84 <_vfiprintf_r+0x254>)
 8011bde:	bb1b      	cbnz	r3, 8011c28 <_vfiprintf_r+0x1f8>
 8011be0:	9b03      	ldr	r3, [sp, #12]
 8011be2:	3307      	adds	r3, #7
 8011be4:	f023 0307 	bic.w	r3, r3, #7
 8011be8:	3308      	adds	r3, #8
 8011bea:	9303      	str	r3, [sp, #12]
 8011bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bee:	443b      	add	r3, r7
 8011bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8011bf2:	e767      	b.n	8011ac4 <_vfiprintf_r+0x94>
 8011bf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bf8:	460c      	mov	r4, r1
 8011bfa:	2001      	movs	r0, #1
 8011bfc:	e7a5      	b.n	8011b4a <_vfiprintf_r+0x11a>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	3401      	adds	r4, #1
 8011c02:	9305      	str	r3, [sp, #20]
 8011c04:	4619      	mov	r1, r3
 8011c06:	f04f 0c0a 	mov.w	ip, #10
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c10:	3a30      	subs	r2, #48	; 0x30
 8011c12:	2a09      	cmp	r2, #9
 8011c14:	d903      	bls.n	8011c1e <_vfiprintf_r+0x1ee>
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d0c5      	beq.n	8011ba6 <_vfiprintf_r+0x176>
 8011c1a:	9105      	str	r1, [sp, #20]
 8011c1c:	e7c3      	b.n	8011ba6 <_vfiprintf_r+0x176>
 8011c1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c22:	4604      	mov	r4, r0
 8011c24:	2301      	movs	r3, #1
 8011c26:	e7f0      	b.n	8011c0a <_vfiprintf_r+0x1da>
 8011c28:	ab03      	add	r3, sp, #12
 8011c2a:	9300      	str	r3, [sp, #0]
 8011c2c:	462a      	mov	r2, r5
 8011c2e:	4b16      	ldr	r3, [pc, #88]	; (8011c88 <_vfiprintf_r+0x258>)
 8011c30:	a904      	add	r1, sp, #16
 8011c32:	4630      	mov	r0, r6
 8011c34:	f7fb fac4 	bl	800d1c0 <_printf_float>
 8011c38:	4607      	mov	r7, r0
 8011c3a:	1c78      	adds	r0, r7, #1
 8011c3c:	d1d6      	bne.n	8011bec <_vfiprintf_r+0x1bc>
 8011c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c40:	07d9      	lsls	r1, r3, #31
 8011c42:	d405      	bmi.n	8011c50 <_vfiprintf_r+0x220>
 8011c44:	89ab      	ldrh	r3, [r5, #12]
 8011c46:	059a      	lsls	r2, r3, #22
 8011c48:	d402      	bmi.n	8011c50 <_vfiprintf_r+0x220>
 8011c4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c4c:	f7ff fe85 	bl	801195a <__retarget_lock_release_recursive>
 8011c50:	89ab      	ldrh	r3, [r5, #12]
 8011c52:	065b      	lsls	r3, r3, #25
 8011c54:	f53f af12 	bmi.w	8011a7c <_vfiprintf_r+0x4c>
 8011c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c5a:	e711      	b.n	8011a80 <_vfiprintf_r+0x50>
 8011c5c:	ab03      	add	r3, sp, #12
 8011c5e:	9300      	str	r3, [sp, #0]
 8011c60:	462a      	mov	r2, r5
 8011c62:	4b09      	ldr	r3, [pc, #36]	; (8011c88 <_vfiprintf_r+0x258>)
 8011c64:	a904      	add	r1, sp, #16
 8011c66:	4630      	mov	r0, r6
 8011c68:	f7fb fd4e 	bl	800d708 <_printf_i>
 8011c6c:	e7e4      	b.n	8011c38 <_vfiprintf_r+0x208>
 8011c6e:	bf00      	nop
 8011c70:	08013d64 	.word	0x08013d64
 8011c74:	08013d84 	.word	0x08013d84
 8011c78:	08013d44 	.word	0x08013d44
 8011c7c:	08013cdc 	.word	0x08013cdc
 8011c80:	08013ce6 	.word	0x08013ce6
 8011c84:	0800d1c1 	.word	0x0800d1c1
 8011c88:	08011a0b 	.word	0x08011a0b
 8011c8c:	08013ce2 	.word	0x08013ce2

08011c90 <__swbuf_r>:
 8011c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c92:	460e      	mov	r6, r1
 8011c94:	4614      	mov	r4, r2
 8011c96:	4605      	mov	r5, r0
 8011c98:	b118      	cbz	r0, 8011ca2 <__swbuf_r+0x12>
 8011c9a:	6983      	ldr	r3, [r0, #24]
 8011c9c:	b90b      	cbnz	r3, 8011ca2 <__swbuf_r+0x12>
 8011c9e:	f7ff fdab 	bl	80117f8 <__sinit>
 8011ca2:	4b21      	ldr	r3, [pc, #132]	; (8011d28 <__swbuf_r+0x98>)
 8011ca4:	429c      	cmp	r4, r3
 8011ca6:	d12b      	bne.n	8011d00 <__swbuf_r+0x70>
 8011ca8:	686c      	ldr	r4, [r5, #4]
 8011caa:	69a3      	ldr	r3, [r4, #24]
 8011cac:	60a3      	str	r3, [r4, #8]
 8011cae:	89a3      	ldrh	r3, [r4, #12]
 8011cb0:	071a      	lsls	r2, r3, #28
 8011cb2:	d52f      	bpl.n	8011d14 <__swbuf_r+0x84>
 8011cb4:	6923      	ldr	r3, [r4, #16]
 8011cb6:	b36b      	cbz	r3, 8011d14 <__swbuf_r+0x84>
 8011cb8:	6923      	ldr	r3, [r4, #16]
 8011cba:	6820      	ldr	r0, [r4, #0]
 8011cbc:	1ac0      	subs	r0, r0, r3
 8011cbe:	6963      	ldr	r3, [r4, #20]
 8011cc0:	b2f6      	uxtb	r6, r6
 8011cc2:	4283      	cmp	r3, r0
 8011cc4:	4637      	mov	r7, r6
 8011cc6:	dc04      	bgt.n	8011cd2 <__swbuf_r+0x42>
 8011cc8:	4621      	mov	r1, r4
 8011cca:	4628      	mov	r0, r5
 8011ccc:	f7ff fd00 	bl	80116d0 <_fflush_r>
 8011cd0:	bb30      	cbnz	r0, 8011d20 <__swbuf_r+0x90>
 8011cd2:	68a3      	ldr	r3, [r4, #8]
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	60a3      	str	r3, [r4, #8]
 8011cd8:	6823      	ldr	r3, [r4, #0]
 8011cda:	1c5a      	adds	r2, r3, #1
 8011cdc:	6022      	str	r2, [r4, #0]
 8011cde:	701e      	strb	r6, [r3, #0]
 8011ce0:	6963      	ldr	r3, [r4, #20]
 8011ce2:	3001      	adds	r0, #1
 8011ce4:	4283      	cmp	r3, r0
 8011ce6:	d004      	beq.n	8011cf2 <__swbuf_r+0x62>
 8011ce8:	89a3      	ldrh	r3, [r4, #12]
 8011cea:	07db      	lsls	r3, r3, #31
 8011cec:	d506      	bpl.n	8011cfc <__swbuf_r+0x6c>
 8011cee:	2e0a      	cmp	r6, #10
 8011cf0:	d104      	bne.n	8011cfc <__swbuf_r+0x6c>
 8011cf2:	4621      	mov	r1, r4
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	f7ff fceb 	bl	80116d0 <_fflush_r>
 8011cfa:	b988      	cbnz	r0, 8011d20 <__swbuf_r+0x90>
 8011cfc:	4638      	mov	r0, r7
 8011cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d00:	4b0a      	ldr	r3, [pc, #40]	; (8011d2c <__swbuf_r+0x9c>)
 8011d02:	429c      	cmp	r4, r3
 8011d04:	d101      	bne.n	8011d0a <__swbuf_r+0x7a>
 8011d06:	68ac      	ldr	r4, [r5, #8]
 8011d08:	e7cf      	b.n	8011caa <__swbuf_r+0x1a>
 8011d0a:	4b09      	ldr	r3, [pc, #36]	; (8011d30 <__swbuf_r+0xa0>)
 8011d0c:	429c      	cmp	r4, r3
 8011d0e:	bf08      	it	eq
 8011d10:	68ec      	ldreq	r4, [r5, #12]
 8011d12:	e7ca      	b.n	8011caa <__swbuf_r+0x1a>
 8011d14:	4621      	mov	r1, r4
 8011d16:	4628      	mov	r0, r5
 8011d18:	f000 f80c 	bl	8011d34 <__swsetup_r>
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	d0cb      	beq.n	8011cb8 <__swbuf_r+0x28>
 8011d20:	f04f 37ff 	mov.w	r7, #4294967295
 8011d24:	e7ea      	b.n	8011cfc <__swbuf_r+0x6c>
 8011d26:	bf00      	nop
 8011d28:	08013d64 	.word	0x08013d64
 8011d2c:	08013d84 	.word	0x08013d84
 8011d30:	08013d44 	.word	0x08013d44

08011d34 <__swsetup_r>:
 8011d34:	4b32      	ldr	r3, [pc, #200]	; (8011e00 <__swsetup_r+0xcc>)
 8011d36:	b570      	push	{r4, r5, r6, lr}
 8011d38:	681d      	ldr	r5, [r3, #0]
 8011d3a:	4606      	mov	r6, r0
 8011d3c:	460c      	mov	r4, r1
 8011d3e:	b125      	cbz	r5, 8011d4a <__swsetup_r+0x16>
 8011d40:	69ab      	ldr	r3, [r5, #24]
 8011d42:	b913      	cbnz	r3, 8011d4a <__swsetup_r+0x16>
 8011d44:	4628      	mov	r0, r5
 8011d46:	f7ff fd57 	bl	80117f8 <__sinit>
 8011d4a:	4b2e      	ldr	r3, [pc, #184]	; (8011e04 <__swsetup_r+0xd0>)
 8011d4c:	429c      	cmp	r4, r3
 8011d4e:	d10f      	bne.n	8011d70 <__swsetup_r+0x3c>
 8011d50:	686c      	ldr	r4, [r5, #4]
 8011d52:	89a3      	ldrh	r3, [r4, #12]
 8011d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d58:	0719      	lsls	r1, r3, #28
 8011d5a:	d42c      	bmi.n	8011db6 <__swsetup_r+0x82>
 8011d5c:	06dd      	lsls	r5, r3, #27
 8011d5e:	d411      	bmi.n	8011d84 <__swsetup_r+0x50>
 8011d60:	2309      	movs	r3, #9
 8011d62:	6033      	str	r3, [r6, #0]
 8011d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d68:	81a3      	strh	r3, [r4, #12]
 8011d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d6e:	e03e      	b.n	8011dee <__swsetup_r+0xba>
 8011d70:	4b25      	ldr	r3, [pc, #148]	; (8011e08 <__swsetup_r+0xd4>)
 8011d72:	429c      	cmp	r4, r3
 8011d74:	d101      	bne.n	8011d7a <__swsetup_r+0x46>
 8011d76:	68ac      	ldr	r4, [r5, #8]
 8011d78:	e7eb      	b.n	8011d52 <__swsetup_r+0x1e>
 8011d7a:	4b24      	ldr	r3, [pc, #144]	; (8011e0c <__swsetup_r+0xd8>)
 8011d7c:	429c      	cmp	r4, r3
 8011d7e:	bf08      	it	eq
 8011d80:	68ec      	ldreq	r4, [r5, #12]
 8011d82:	e7e6      	b.n	8011d52 <__swsetup_r+0x1e>
 8011d84:	0758      	lsls	r0, r3, #29
 8011d86:	d512      	bpl.n	8011dae <__swsetup_r+0x7a>
 8011d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d8a:	b141      	cbz	r1, 8011d9e <__swsetup_r+0x6a>
 8011d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d90:	4299      	cmp	r1, r3
 8011d92:	d002      	beq.n	8011d9a <__swsetup_r+0x66>
 8011d94:	4630      	mov	r0, r6
 8011d96:	f7fb f8c9 	bl	800cf2c <_free_r>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8011d9e:	89a3      	ldrh	r3, [r4, #12]
 8011da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011da4:	81a3      	strh	r3, [r4, #12]
 8011da6:	2300      	movs	r3, #0
 8011da8:	6063      	str	r3, [r4, #4]
 8011daa:	6923      	ldr	r3, [r4, #16]
 8011dac:	6023      	str	r3, [r4, #0]
 8011dae:	89a3      	ldrh	r3, [r4, #12]
 8011db0:	f043 0308 	orr.w	r3, r3, #8
 8011db4:	81a3      	strh	r3, [r4, #12]
 8011db6:	6923      	ldr	r3, [r4, #16]
 8011db8:	b94b      	cbnz	r3, 8011dce <__swsetup_r+0x9a>
 8011dba:	89a3      	ldrh	r3, [r4, #12]
 8011dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dc4:	d003      	beq.n	8011dce <__swsetup_r+0x9a>
 8011dc6:	4621      	mov	r1, r4
 8011dc8:	4630      	mov	r0, r6
 8011dca:	f000 f84d 	bl	8011e68 <__smakebuf_r>
 8011dce:	89a0      	ldrh	r0, [r4, #12]
 8011dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011dd4:	f010 0301 	ands.w	r3, r0, #1
 8011dd8:	d00a      	beq.n	8011df0 <__swsetup_r+0xbc>
 8011dda:	2300      	movs	r3, #0
 8011ddc:	60a3      	str	r3, [r4, #8]
 8011dde:	6963      	ldr	r3, [r4, #20]
 8011de0:	425b      	negs	r3, r3
 8011de2:	61a3      	str	r3, [r4, #24]
 8011de4:	6923      	ldr	r3, [r4, #16]
 8011de6:	b943      	cbnz	r3, 8011dfa <__swsetup_r+0xc6>
 8011de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011dec:	d1ba      	bne.n	8011d64 <__swsetup_r+0x30>
 8011dee:	bd70      	pop	{r4, r5, r6, pc}
 8011df0:	0781      	lsls	r1, r0, #30
 8011df2:	bf58      	it	pl
 8011df4:	6963      	ldrpl	r3, [r4, #20]
 8011df6:	60a3      	str	r3, [r4, #8]
 8011df8:	e7f4      	b.n	8011de4 <__swsetup_r+0xb0>
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	e7f7      	b.n	8011dee <__swsetup_r+0xba>
 8011dfe:	bf00      	nop
 8011e00:	20000038 	.word	0x20000038
 8011e04:	08013d64 	.word	0x08013d64
 8011e08:	08013d84 	.word	0x08013d84
 8011e0c:	08013d44 	.word	0x08013d44

08011e10 <abort>:
 8011e10:	b508      	push	{r3, lr}
 8011e12:	2006      	movs	r0, #6
 8011e14:	f000 f898 	bl	8011f48 <raise>
 8011e18:	2001      	movs	r0, #1
 8011e1a:	f7f0 fee5 	bl	8002be8 <_exit>

08011e1e <__swhatbuf_r>:
 8011e1e:	b570      	push	{r4, r5, r6, lr}
 8011e20:	460e      	mov	r6, r1
 8011e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e26:	2900      	cmp	r1, #0
 8011e28:	b096      	sub	sp, #88	; 0x58
 8011e2a:	4614      	mov	r4, r2
 8011e2c:	461d      	mov	r5, r3
 8011e2e:	da07      	bge.n	8011e40 <__swhatbuf_r+0x22>
 8011e30:	2300      	movs	r3, #0
 8011e32:	602b      	str	r3, [r5, #0]
 8011e34:	89b3      	ldrh	r3, [r6, #12]
 8011e36:	061a      	lsls	r2, r3, #24
 8011e38:	d410      	bmi.n	8011e5c <__swhatbuf_r+0x3e>
 8011e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e3e:	e00e      	b.n	8011e5e <__swhatbuf_r+0x40>
 8011e40:	466a      	mov	r2, sp
 8011e42:	f000 f89d 	bl	8011f80 <_fstat_r>
 8011e46:	2800      	cmp	r0, #0
 8011e48:	dbf2      	blt.n	8011e30 <__swhatbuf_r+0x12>
 8011e4a:	9a01      	ldr	r2, [sp, #4]
 8011e4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e54:	425a      	negs	r2, r3
 8011e56:	415a      	adcs	r2, r3
 8011e58:	602a      	str	r2, [r5, #0]
 8011e5a:	e7ee      	b.n	8011e3a <__swhatbuf_r+0x1c>
 8011e5c:	2340      	movs	r3, #64	; 0x40
 8011e5e:	2000      	movs	r0, #0
 8011e60:	6023      	str	r3, [r4, #0]
 8011e62:	b016      	add	sp, #88	; 0x58
 8011e64:	bd70      	pop	{r4, r5, r6, pc}
	...

08011e68 <__smakebuf_r>:
 8011e68:	898b      	ldrh	r3, [r1, #12]
 8011e6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e6c:	079d      	lsls	r5, r3, #30
 8011e6e:	4606      	mov	r6, r0
 8011e70:	460c      	mov	r4, r1
 8011e72:	d507      	bpl.n	8011e84 <__smakebuf_r+0x1c>
 8011e74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e78:	6023      	str	r3, [r4, #0]
 8011e7a:	6123      	str	r3, [r4, #16]
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	6163      	str	r3, [r4, #20]
 8011e80:	b002      	add	sp, #8
 8011e82:	bd70      	pop	{r4, r5, r6, pc}
 8011e84:	ab01      	add	r3, sp, #4
 8011e86:	466a      	mov	r2, sp
 8011e88:	f7ff ffc9 	bl	8011e1e <__swhatbuf_r>
 8011e8c:	9900      	ldr	r1, [sp, #0]
 8011e8e:	4605      	mov	r5, r0
 8011e90:	4630      	mov	r0, r6
 8011e92:	f7fb f89b 	bl	800cfcc <_malloc_r>
 8011e96:	b948      	cbnz	r0, 8011eac <__smakebuf_r+0x44>
 8011e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e9c:	059a      	lsls	r2, r3, #22
 8011e9e:	d4ef      	bmi.n	8011e80 <__smakebuf_r+0x18>
 8011ea0:	f023 0303 	bic.w	r3, r3, #3
 8011ea4:	f043 0302 	orr.w	r3, r3, #2
 8011ea8:	81a3      	strh	r3, [r4, #12]
 8011eaa:	e7e3      	b.n	8011e74 <__smakebuf_r+0xc>
 8011eac:	4b0d      	ldr	r3, [pc, #52]	; (8011ee4 <__smakebuf_r+0x7c>)
 8011eae:	62b3      	str	r3, [r6, #40]	; 0x28
 8011eb0:	89a3      	ldrh	r3, [r4, #12]
 8011eb2:	6020      	str	r0, [r4, #0]
 8011eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011eb8:	81a3      	strh	r3, [r4, #12]
 8011eba:	9b00      	ldr	r3, [sp, #0]
 8011ebc:	6163      	str	r3, [r4, #20]
 8011ebe:	9b01      	ldr	r3, [sp, #4]
 8011ec0:	6120      	str	r0, [r4, #16]
 8011ec2:	b15b      	cbz	r3, 8011edc <__smakebuf_r+0x74>
 8011ec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ec8:	4630      	mov	r0, r6
 8011eca:	f000 f86b 	bl	8011fa4 <_isatty_r>
 8011ece:	b128      	cbz	r0, 8011edc <__smakebuf_r+0x74>
 8011ed0:	89a3      	ldrh	r3, [r4, #12]
 8011ed2:	f023 0303 	bic.w	r3, r3, #3
 8011ed6:	f043 0301 	orr.w	r3, r3, #1
 8011eda:	81a3      	strh	r3, [r4, #12]
 8011edc:	89a0      	ldrh	r0, [r4, #12]
 8011ede:	4305      	orrs	r5, r0
 8011ee0:	81a5      	strh	r5, [r4, #12]
 8011ee2:	e7cd      	b.n	8011e80 <__smakebuf_r+0x18>
 8011ee4:	08011791 	.word	0x08011791

08011ee8 <_malloc_usable_size_r>:
 8011ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011eec:	1f18      	subs	r0, r3, #4
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	bfbc      	itt	lt
 8011ef2:	580b      	ldrlt	r3, [r1, r0]
 8011ef4:	18c0      	addlt	r0, r0, r3
 8011ef6:	4770      	bx	lr

08011ef8 <_raise_r>:
 8011ef8:	291f      	cmp	r1, #31
 8011efa:	b538      	push	{r3, r4, r5, lr}
 8011efc:	4604      	mov	r4, r0
 8011efe:	460d      	mov	r5, r1
 8011f00:	d904      	bls.n	8011f0c <_raise_r+0x14>
 8011f02:	2316      	movs	r3, #22
 8011f04:	6003      	str	r3, [r0, #0]
 8011f06:	f04f 30ff 	mov.w	r0, #4294967295
 8011f0a:	bd38      	pop	{r3, r4, r5, pc}
 8011f0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f0e:	b112      	cbz	r2, 8011f16 <_raise_r+0x1e>
 8011f10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f14:	b94b      	cbnz	r3, 8011f2a <_raise_r+0x32>
 8011f16:	4620      	mov	r0, r4
 8011f18:	f000 f830 	bl	8011f7c <_getpid_r>
 8011f1c:	462a      	mov	r2, r5
 8011f1e:	4601      	mov	r1, r0
 8011f20:	4620      	mov	r0, r4
 8011f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f26:	f000 b817 	b.w	8011f58 <_kill_r>
 8011f2a:	2b01      	cmp	r3, #1
 8011f2c:	d00a      	beq.n	8011f44 <_raise_r+0x4c>
 8011f2e:	1c59      	adds	r1, r3, #1
 8011f30:	d103      	bne.n	8011f3a <_raise_r+0x42>
 8011f32:	2316      	movs	r3, #22
 8011f34:	6003      	str	r3, [r0, #0]
 8011f36:	2001      	movs	r0, #1
 8011f38:	e7e7      	b.n	8011f0a <_raise_r+0x12>
 8011f3a:	2400      	movs	r4, #0
 8011f3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f40:	4628      	mov	r0, r5
 8011f42:	4798      	blx	r3
 8011f44:	2000      	movs	r0, #0
 8011f46:	e7e0      	b.n	8011f0a <_raise_r+0x12>

08011f48 <raise>:
 8011f48:	4b02      	ldr	r3, [pc, #8]	; (8011f54 <raise+0xc>)
 8011f4a:	4601      	mov	r1, r0
 8011f4c:	6818      	ldr	r0, [r3, #0]
 8011f4e:	f7ff bfd3 	b.w	8011ef8 <_raise_r>
 8011f52:	bf00      	nop
 8011f54:	20000038 	.word	0x20000038

08011f58 <_kill_r>:
 8011f58:	b538      	push	{r3, r4, r5, lr}
 8011f5a:	4d07      	ldr	r5, [pc, #28]	; (8011f78 <_kill_r+0x20>)
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	4604      	mov	r4, r0
 8011f60:	4608      	mov	r0, r1
 8011f62:	4611      	mov	r1, r2
 8011f64:	602b      	str	r3, [r5, #0]
 8011f66:	f7f0 fe2f 	bl	8002bc8 <_kill>
 8011f6a:	1c43      	adds	r3, r0, #1
 8011f6c:	d102      	bne.n	8011f74 <_kill_r+0x1c>
 8011f6e:	682b      	ldr	r3, [r5, #0]
 8011f70:	b103      	cbz	r3, 8011f74 <_kill_r+0x1c>
 8011f72:	6023      	str	r3, [r4, #0]
 8011f74:	bd38      	pop	{r3, r4, r5, pc}
 8011f76:	bf00      	nop
 8011f78:	20005abc 	.word	0x20005abc

08011f7c <_getpid_r>:
 8011f7c:	f7f0 be1c 	b.w	8002bb8 <_getpid>

08011f80 <_fstat_r>:
 8011f80:	b538      	push	{r3, r4, r5, lr}
 8011f82:	4d07      	ldr	r5, [pc, #28]	; (8011fa0 <_fstat_r+0x20>)
 8011f84:	2300      	movs	r3, #0
 8011f86:	4604      	mov	r4, r0
 8011f88:	4608      	mov	r0, r1
 8011f8a:	4611      	mov	r1, r2
 8011f8c:	602b      	str	r3, [r5, #0]
 8011f8e:	f7f0 fe7a 	bl	8002c86 <_fstat>
 8011f92:	1c43      	adds	r3, r0, #1
 8011f94:	d102      	bne.n	8011f9c <_fstat_r+0x1c>
 8011f96:	682b      	ldr	r3, [r5, #0]
 8011f98:	b103      	cbz	r3, 8011f9c <_fstat_r+0x1c>
 8011f9a:	6023      	str	r3, [r4, #0]
 8011f9c:	bd38      	pop	{r3, r4, r5, pc}
 8011f9e:	bf00      	nop
 8011fa0:	20005abc 	.word	0x20005abc

08011fa4 <_isatty_r>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	4d06      	ldr	r5, [pc, #24]	; (8011fc0 <_isatty_r+0x1c>)
 8011fa8:	2300      	movs	r3, #0
 8011faa:	4604      	mov	r4, r0
 8011fac:	4608      	mov	r0, r1
 8011fae:	602b      	str	r3, [r5, #0]
 8011fb0:	f7f0 fe79 	bl	8002ca6 <_isatty>
 8011fb4:	1c43      	adds	r3, r0, #1
 8011fb6:	d102      	bne.n	8011fbe <_isatty_r+0x1a>
 8011fb8:	682b      	ldr	r3, [r5, #0]
 8011fba:	b103      	cbz	r3, 8011fbe <_isatty_r+0x1a>
 8011fbc:	6023      	str	r3, [r4, #0]
 8011fbe:	bd38      	pop	{r3, r4, r5, pc}
 8011fc0:	20005abc 	.word	0x20005abc

08011fc4 <_init>:
 8011fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fc6:	bf00      	nop
 8011fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fca:	bc08      	pop	{r3}
 8011fcc:	469e      	mov	lr, r3
 8011fce:	4770      	bx	lr

08011fd0 <_fini>:
 8011fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fd2:	bf00      	nop
 8011fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fd6:	bc08      	pop	{r3}
 8011fd8:	469e      	mov	lr, r3
 8011fda:	4770      	bx	lr
